{
    "hyperparams": {
        "sequence_length": 1024,
        "max_new_tokens": 256,
        "batch_size": 16,
        "proofs_per_theorem": 5,
        "temperature": 0.4,
        "do_sample": true,
        "top_p": 0.95,
        "model_repo_name": "Andrusyshyn/gpt2-pretrained-for-coq-pt-custom-train",
        "model_commit_hash": "4e154ffa2a043091b2d240a2894abe0458287b1f"
    },

    "projects": {
        "weak-up-to": [
            {
                "filepath": "./coq_projects/weak-up-to/Reductions.v",
                "context": "(** * Labelled Transition Systems (LTS) *)\n\nRequire Export Diagrams.\nSet Implicit Arguments.\n\nLtac cgen H := generalize H; clear H.\n\nSection Reductions.\n\n  Section R.\n    Variables A X: Type.\n    Definition reduction := A -> relation X.\n    Definition incl_r: relation reduction := fun R1 R2 => forall a, incl (R1 a) (R2 a).\n    Definition eeq_r: relation reduction := fun R1 R2 => forall a, eeq (R1 a) (R2 a).\n  End R.\n\n  Variable A: Type.\n\n  Section Diagram.\n    Variables X Y: Type.\n    Definition diagram_r(RX: reduction A X) R (RY: reduction A Y) S := forall a, diagram (RX a) R (RY a) S.\n  End Diagram. \n\n  Section Weak.\n  \n    (** A `label' is either the silent action, or a visible one *)  \n    Inductive Lbl: Type := T | L(a: A).\n    Definition reduction_t := reduction Lbl.\n  \n    Variable X: Type.\n    Variable Red: reduction_t X.\n\n    (** Weak transition relation *)  \n    Definition Weak: reduction_t X := fun l => \n      match l with \n\t| T => star (Red T)\n\t| L a => comp (star (Red T)) (comp (Red (L a)) (star (Red T)))\n      end.\n\n    (** Transition relation for expansion *)\n    Definition EWeak: reduction_t X := fun l => \n      match l with \n\t| T => union2 (eq (A:=X)) (Red T)\n\t| L a => Red (L a)\n      end.\n\n    (** Transition relation for relaxed expansion *)\n    Definition REWeak: reduction_t X := fun l => \n      match l with \n\t| T => union2 (eq (A:=X)) (Red T)\n\t| L a => comp (Red (L a)) (star (Red T))\n      end.\n\n    ",
                "context_tokens": 440,
                "proof_start_offset": 1443,
                "proof_end_offset": 1519,
                "proof": "Lemma weak_refl: forall x, Weak T x x.\nProof.\nintro x; simpl; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma weak_refl: forall x, Weak T x x.\n    Proof.\n      intros x y; apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n      apply (L a); auto.\n     Qed.",
                    "Lemma weak_refl: forall x, Weak T x x.\n    Proof.\n      intros.\n      unfold vis, LL.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold visQed.",
                    "Lemma weak_refl: forall x, Weak T x x.\n    Proof.\n      intros x H; generalize (H x); intro H; clear H; intro H;\n    generalize (H x); intro H; clear H; intro H;\n    generalize (H x); intro H; clear H; intro H;\n    generalize (H x); intro H; generalize (H x); intro H;\n    generalize (H x); intro H; generalize (H x); intro H;\n    generalize (H x); intro H; generalize (H x); intro H; generalize (H x); intro H;\n    generalize (H x); intro H; generalize (H x); intro H; generalize (H x); intro H; generalize (H x); intro H;\n    generalize (H x); intro H; generalize (H x); intro H; generalize (H x); intro H; generalize (H x); intro H; generalize (H x); intro H;\n    generalize (H x); intro H; generalize (H x); intro H; generalize (H x); intro H; generalize (H x); intro H; generalize (H x); intro H; generalize (H x); intro H;\n    generalize (H x); intro H; generalize (H x); intro H; generalize (H x);Qed.",
                    "Lemma weak_refl: forall x, Weak T x x.\n    Proof.\n      intros x y H H.\n      unfold not in H.\n      rewrite H in H.\n      rewrite H in H.\n      rewrite H in H.\n      rewrite H in H.\n      rewrite H in H.\n      rewrite H in H.\n      rewrite H in H.\n      rewrite H in H.\n      rewrite H in H.\n      rewrite H in H.\n      rewrite H in H.\n      rewrite H in H.\n      rewrite H in H.\n      rewrite H in H.\n      rewrite H in H.\n      rewrite H in H.\n      rewrite H in H.\n      rewrite in H.\n      rewrite H in H.\n      rewrite H in H.\n      rewrite in H.\n      rewrite H in H.\n      rewrite H in H.\n      rewrite in H.\n      rewrite in H.\n      rewrite H in H.\n      rewrite H in H.\n      rewrite in H.\n      rewrite H in H.\n      rewrite in H.\n      rewrite H in H.\n      rewrite in H.\n      rewrite H in H.\n      rewrite H in H.\n      rewrite in H.\n      rewrite in H.\n      rewrite in H.\n      rewrite in H.\n      rewrite H in H.\n      rewrite in H.\n      rewrite in H.\n      rewrite in H.\n      rewriteQed.",
                    "Lemma weak_refl: forall x, Weak T x x.\n    Proof.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n      unfold vis.\n     Qed."
                ]
            },
            {
                "filepath": "./coq_projects/weak-up-to/Reductions.v",
                "context": "(** * Labelled Transition Systems (LTS) *)\n\nRequire Export Diagrams.\nSet Implicit Arguments.\n\nLtac cgen H := generalize H; clear H.\n\nSection Reductions.\n\n  Section R.\n    Variables A X: Type.\n    Definition reduction := A -> relation X.\n    Definition incl_r: relation reduction := fun R1 R2 => forall a, incl (R1 a) (R2 a).\n    Definition eeq_r: relation reduction := fun R1 R2 => forall a, eeq (R1 a) (R2 a).\n  End R.\n\n  Variable A: Type.\n\n  Section Diagram.\n    Variables X Y: Type.\n    Definition diagram_r(RX: reduction A X) R (RY: reduction A Y) S := forall a, diagram (RX a) R (RY a) S.\n  End Diagram. \n\n  Section Weak.\n  \n    (** A `label' is either the silent action, or a visible one *)  \n    Inductive Lbl: Type := T | L(a: A).\n    Definition reduction_t := reduction Lbl.\n  \n    Variable X: Type.\n    Variable Red: reduction_t X.\n\n    (** Weak transition relation *)  \n    Definition Weak: reduction_t X := fun l => \n      match l with \n\t| T => star (Red T)\n\t| L a => comp (star (Red T)) (comp (Red (L a)) (star (Red T)))\n      end.\n\n    (** Transition relation for expansion *)\n    Definition EWeak: reduction_t X := fun l => \n      match l with \n\t| T => union2 (eq (A:=X)) (Red T)\n\t| L a => Red (L a)\n      end.\n\n    (** Transition relation for relaxed expansion *)\n    Definition REWeak: reduction_t X := fun l => \n      match l with \n\t| T => union2 (eq (A:=X)) (Red T)\n\t| L a => comp (Red (L a)) (star (Red T))\n      end.\n\n    Lemma weak_refl: forall x, Weak T x x.\n    Proof. intro x; simpl; auto. Qed.\n    Hint Immediate weak_refl.\n\n    ",
                "context_tokens": 473,
                "proof_start_offset": 1555,
                "proof_end_offset": 1835,
                "proof": "Lemma tau_weak: forall y l x z, Red T x y -> Weak l y z -> Weak l x z.\nProof.\nintros y l; destruct l; simpl; intros x z XY YZ.\napply S_star with y; assumption.\ndestruct YZ as [ w YW WZ ].\nexists w; auto.\napply S_star with y; assumption.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma tau_weak: forall y l x z, Red T x y -> Weak l y z -> Weak l x z.\n    Proof. intros x y l z H; simpl; auto. Qed.",
                    "Lemma tau_weak: forall y l x z, Red T x y -> Weak l y z -> Weak l x z.\n    Proof. intro x; simpl; auto. Qed.",
                    "Lemma tau_weak: forall y l x z, Red T x y -> Weak l y z -> Weak l x z.\n    Proof. intro x; simpl; auto. Qed.",
                    "Lemma tau_weak: forall y l x z, Red T x y -> Weak l y z -> Weak l x z.\n    Proof. intro x; simpl; auto. Qed.",
                    "Lemma tau_weak: forall y l x z, Red T x y -> Weak l y z -> Weak l x z.\n    Proof. intro x; simpl; auto. Qed."
                ]
            },
            {
                "filepath": "./coq_projects/weak-up-to/Reductions.v",
                "context": "(** * Labelled Transition Systems (LTS) *)\n\nRequire Export Diagrams.\nSet Implicit Arguments.\n\nLtac cgen H := generalize H; clear H.\n\nSection Reductions.\n\n  Section R.\n    Variables A X: Type.\n    Definition reduction := A -> relation X.\n    Definition incl_r: relation reduction := fun R1 R2 => forall a, incl (R1 a) (R2 a).\n    Definition eeq_r: relation reduction := fun R1 R2 => forall a, eeq (R1 a) (R2 a).\n  End R.\n\n  Variable A: Type.\n\n  Section Diagram.\n    Variables X Y: Type.\n    Definition diagram_r(RX: reduction A X) R (RY: reduction A Y) S := forall a, diagram (RX a) R (RY a) S.\n  End Diagram. \n\n  Section Weak.\n  \n    (** A `label' is either the silent action, or a visible one *)  \n    Inductive Lbl: Type := T | L(a: A).\n    Definition reduction_t := reduction Lbl.\n  \n    Variable X: Type.\n    Variable Red: reduction_t X.\n\n    (** Weak transition relation *)  \n    Definition Weak: reduction_t X := fun l => \n      match l with \n\t| T => star (Red T)\n\t| L a => comp (star (Red T)) (comp (Red (L a)) (star (Red T)))\n      end.\n\n    (** Transition relation for expansion *)\n    Definition EWeak: reduction_t X := fun l => \n      match l with \n\t| T => union2 (eq (A:=X)) (Red T)\n\t| L a => Red (L a)\n      end.\n\n    (** Transition relation for relaxed expansion *)\n    Definition REWeak: reduction_t X := fun l => \n      match l with \n\t| T => union2 (eq (A:=X)) (Red T)\n\t| L a => comp (Red (L a)) (star (Red T))\n      end.\n\n    Lemma weak_refl: forall x, Weak T x x.\n    Proof. intro x; simpl; auto. Qed.\n    Hint Immediate weak_refl.\n\n    Lemma tau_weak: forall y l x z, Red T x y -> Weak l y z -> Weak l x z.\n    Proof. \n      intros y l; destruct l; simpl; intros x z XY YZ.\n      apply S_star with y; assumption.\n      destruct YZ as [ w YW WZ ].\n      exists w; auto.\n      apply S_star with y; assumption.\n    Qed.\n\n    ",
                "context_tokens": 561,
                "proof_start_offset": 1841,
                "proof_end_offset": 2069,
                "proof": "Lemma weak_tau: forall y l x z, Red l x y -> Weak T y z -> Weak l x z.\nProof.\nintros y l; destruct l; simpl; intros x z XY YZ.\napply S_star with y; assumption.\nexists x; auto.\nexists y; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma weak_tau: forall y l x z, Red l x y -> Weak T y z -> Weak l x z.\n    Proof.\n      intros x y l z H H; induction l; simpl; auto. Qed.",
                    "Lemma weak_tau: forall y l x z, Red l x y -> Weak T y z -> Weak l x z.\n    Proof.\n      intros x y l z; destruct l; simpl; intros x y z Hz; try discriminate.\n      apply S_star with y; assumption.\n    Qed.",
                    "Lemma weak_tau: forall y l x z, Red l x y -> Weak T y z -> Weak l x z.\n    Proof.\n      intros x y l z H; simpl; auto. Qed.",
                    "Lemma weak_tau: forall y l x z, Red l x y -> Weak T y z -> Weak l x z.\n    Proof.\n      intros x y l z l z.\n      destruct l; simpl; intros x' y' Z.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n     Qed.",
                    "Lemma weak_tau: forall y l x z, Red l x y -> Weak T y z -> Weak l x z.\n    Proof.\n      intros x y l; destruct l; simpl; auto.\n      apply S_star with y; assumption.\n    Qed."
                ]
            },
            {
                "filepath": "./coq_projects/weak-up-to/Reductions.v",
                "context": "(** * Labelled Transition Systems (LTS) *)\n\nRequire Export Diagrams.\nSet Implicit Arguments.\n\nLtac cgen H := generalize H; clear H.\n\nSection Reductions.\n\n  Section R.\n    Variables A X: Type.\n    Definition reduction := A -> relation X.\n    Definition incl_r: relation reduction := fun R1 R2 => forall a, incl (R1 a) (R2 a).\n    Definition eeq_r: relation reduction := fun R1 R2 => forall a, eeq (R1 a) (R2 a).\n  End R.\n\n  Variable A: Type.\n\n  Section Diagram.\n    Variables X Y: Type.\n    Definition diagram_r(RX: reduction A X) R (RY: reduction A Y) S := forall a, diagram (RX a) R (RY a) S.\n  End Diagram. \n\n  Section Weak.\n  \n    (** A `label' is either the silent action, or a visible one *)  \n    Inductive Lbl: Type := T | L(a: A).\n    Definition reduction_t := reduction Lbl.\n  \n    Variable X: Type.\n    Variable Red: reduction_t X.\n\n    (** Weak transition relation *)  \n    Definition Weak: reduction_t X := fun l => \n      match l with \n\t| T => star (Red T)\n\t| L a => comp (star (Red T)) (comp (Red (L a)) (star (Red T)))\n      end.\n\n    (** Transition relation for expansion *)\n    Definition EWeak: reduction_t X := fun l => \n      match l with \n\t| T => union2 (eq (A:=X)) (Red T)\n\t| L a => Red (L a)\n      end.\n\n    (** Transition relation for relaxed expansion *)\n    Definition REWeak: reduction_t X := fun l => \n      match l with \n\t| T => union2 (eq (A:=X)) (Red T)\n\t| L a => comp (Red (L a)) (star (Red T))\n      end.\n\n    Lemma weak_refl: forall x, Weak T x x.\n    Proof. intro x; simpl; auto. Qed.\n    Hint Immediate weak_refl.\n\n    Lemma tau_weak: forall y l x z, Red T x y -> Weak l y z -> Weak l x z.\n    Proof. \n      intros y l; destruct l; simpl; intros x z XY YZ.\n      apply S_star with y; assumption.\n      destruct YZ as [ w YW WZ ].\n      exists w; auto.\n      apply S_star with y; assumption.\n    Qed.\n\n    Lemma weak_tau: forall y l x z, Red l x y -> Weak T y z -> Weak l x z.\n    Proof.\n      intros y l; destruct l; simpl; intros x z XY YZ.\n      apply S_star with y; assumption.\n      exists x; auto.\n      exists y; auto.\n    Qed.\n\n    ",
                "context_tokens": 633,
                "proof_start_offset": 2075,
                "proof_end_offset": 2206,
                "proof": "Lemma red_weak: forall l x y, Red l x y -> Weak l x y.\nProof.\nintros l x y H.\napply weak_tau with y; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma red_weak: forall l x y, Red l x y -> Weak l x y.\n    Proof.\n      intros l y l; destruct l; simpl; intros x y Z.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with yQed.",
                    "Lemma red_weak: forall l x y, Red l x y -> Weak l x y.\n    Proof.\n      intros x y l y z; destruct l; simpl; intros x z Hz; inversion Hz; subst.\n      apply S_star with y; assumption.\n    Qed.",
                    "Lemma red_weak: forall l x y, Red l x y -> Weak l x y.\n    Proof.\n      intros l x y z; destruct l; simpl; intros y z Hz Hz; simpl; intros z Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz Hz HzQed.",
                    "Lemma red_weak: forall l x y, Red l x y -> Weak l x y.\n    Proof.\n      intros x y l; destruct l; simpl; intros x z Hz; simpl; intros x' Z.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n    Qed.",
                    "Lemma red_weak: forall l x y, Red l x y -> Weak l x y.\n    Proof.\n      intros l x y z; destruct l; simpl; intros x y z Hz; destruct z; simpl; intros x z Hz; destruct z; simpl; intros x z Hz; destruct z; simpl; intros x z Hz; destruct z; simpl; intros x z Hz; destruct z; simpl; intros x z Hz; destruct z; simpl; intros x z Hz; destruct z; simpl; intros x z Hz; destruct z; simpl; intros y z Hz; destruct z; simpl; intros z Hz; destruct z; simpl; intros z z Hz; destruct z; simpl; intros z Hz; destruct z; simpl; intros z Hz; destruct z; simpl; intros z Hz; destruct z; simpl; intros z z Hz; destruct z; simpl; intros z Hz; destruct z; simpl; intros z Hz; destruct z; simpl; intros z Hz; destruct z; simpl; intros z Hz; destruct z; simpl; intros z Hz; destruct z; simpl; intros z Hz; destruct z; simpl; intros z Hz; destruct z; simpl; intros z Hz; destruct z; simpl; intros z Hz; destruct z; simpl; intros; destruct z; simpl; intros z Hz; destruct zQed."
                ]
            },
            {
                "filepath": "./coq_projects/weak-up-to/Reductions.v",
                "context": "(** * Labelled Transition Systems (LTS) *)\n\nRequire Export Diagrams.\nSet Implicit Arguments.\n\nLtac cgen H := generalize H; clear H.\n\nSection Reductions.\n\n  Section R.\n    Variables A X: Type.\n    Definition reduction := A -> relation X.\n    Definition incl_r: relation reduction := fun R1 R2 => forall a, incl (R1 a) (R2 a).\n    Definition eeq_r: relation reduction := fun R1 R2 => forall a, eeq (R1 a) (R2 a).\n  End R.\n\n  Variable A: Type.\n\n  Section Diagram.\n    Variables X Y: Type.\n    Definition diagram_r(RX: reduction A X) R (RY: reduction A Y) S := forall a, diagram (RX a) R (RY a) S.\n  End Diagram. \n\n  Section Weak.\n  \n    (** A `label' is either the silent action, or a visible one *)  \n    Inductive Lbl: Type := T | L(a: A).\n    Definition reduction_t := reduction Lbl.\n  \n    Variable X: Type.\n    Variable Red: reduction_t X.\n\n    (** Weak transition relation *)  \n    Definition Weak: reduction_t X := fun l => \n      match l with \n\t| T => star (Red T)\n\t| L a => comp (star (Red T)) (comp (Red (L a)) (star (Red T)))\n      end.\n\n    (** Transition relation for expansion *)\n    Definition EWeak: reduction_t X := fun l => \n      match l with \n\t| T => union2 (eq (A:=X)) (Red T)\n\t| L a => Red (L a)\n      end.\n\n    (** Transition relation for relaxed expansion *)\n    Definition REWeak: reduction_t X := fun l => \n      match l with \n\t| T => union2 (eq (A:=X)) (Red T)\n\t| L a => comp (Red (L a)) (star (Red T))\n      end.\n\n    Lemma weak_refl: forall x, Weak T x x.\n    Proof. intro x; simpl; auto. Qed.\n    Hint Immediate weak_refl.\n\n    Lemma tau_weak: forall y l x z, Red T x y -> Weak l y z -> Weak l x z.\n    Proof. \n      intros y l; destruct l; simpl; intros x z XY YZ.\n      apply S_star with y; assumption.\n      destruct YZ as [ w YW WZ ].\n      exists w; auto.\n      apply S_star with y; assumption.\n    Qed.\n\n    Lemma weak_tau: forall y l x z, Red l x y -> Weak T y z -> Weak l x z.\n    Proof.\n      intros y l; destruct l; simpl; intros x z XY YZ.\n      apply S_star with y; assumption.\n      exists x; auto.\n      exists y; auto.\n    Qed.\n\n    Lemma red_weak: forall l x y, Red l x y -> Weak l x y.\n    Proof.\n      intros l x y H.\n      apply weak_tau with y; auto.\n    Qed.\n\n    ",
                "context_tokens": 677,
                "proof_start_offset": 2212,
                "proof_end_offset": 2502,
                "proof": "Lemma taus_weak: forall y l x z, Weak T x y -> Weak l y z -> Weak l x z.\nProof.\nintros y l; destruct l; simpl; intros x z XY YZ.\napply star_trans with y; assumption.\ndestruct YZ as [ w YW WZ ].\nexists w; auto.\napply star_trans with y; assumption.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma taus_weak: forall y l x z, Weak T x y -> Weak l y z -> Weak l x z.\n    Proof.\n      intros l x y H.\n      apply (IH _ _ _ H).\n      apply (IH _ _ H).\n      apply (IH _ _ H).\n      apply (IH _ _ H).\n      apply (IH _ H).\n      apply (IH _ _ H).\n      apply (IH _ H).\n      apply (IH _ _ H).\n      apply (IH _ _ H).\n      apply (IH _ _ H).\n      apply (IH _ _ H).\n      apply (IH _ H).\n      apply (IH _ _ _ H).\n      apply (IH _ _ H).\n      apply (IH _ _ H).\n      apply (IH _ _ H).\n      apply (IH _ _ _ H).\n      apply (IH _ _ _ H).\n      apply (IH _ _ H).\n      apply (IH _ _ H).\n      apply (IH _ _ H).\n      apply (IH _ _ _ H).\n      apply (IH _ _ H).\n      apply (IH _ _ H).\n      apply (IH _ _ H).\n      apply (IH _ _ _ H).\n      apply (IH _ _ H).\n      apply (IH _ _ _ H).\n      apply (IH _ _ _ H).\n      apply (IH _ _ _ H).Qed.",
                    "Lemma taus_weak: forall y l x z, Weak T x y -> Weak l y z -> Weak l x z.\n    Proof.\n      intros l y l y H.\n      apply (well_founded_ind _ _ _ H).\n      apply (well_founded_ind _ _ _ H).\n      apply (well_founded_ind _ _ H).\n      apply (well_founded_ind _ _ H).\n      apply (well_founded_ind _ _ H).\n      apply (well_founded_ind _ _ H).\n      apply (well_founded_ind _ _ H).\n      apply (well_founded_ind _ _ _ H).\n      apply (well_founded_ind _ _ H).\n      apply (well_founded_ind _ _ H).\n      apply (well_founded_ind _ H).\n      apply (well_founded_ind _ H).\n      apply (well_founded_ind _ _ H).\n      apply (well_founded_ind _ _ H).\n      apply (well_founded_ind _ H).\n      apply (well_founded_ind _ _ _ H).\n      apply (well_founded_ind _ H).\n      apply (well_founded_ind _ H).\n      apply (well_founded_ind _ H).\n      apply (well_founded_ind _ _ H).\n      apply (well_founded_Qed.",
                    "Lemma taus_weak: forall y l x z, Weak T x y -> Weak l y z -> Weak l x z.\n    Proof.\n      intros l x y z H H.\n      apply (IH x y z H).\n      apply (IH x y z H).\n      apply (IH x y z H).\n      apply (IH x y z H).\n      apply (IH x z H).\n      apply (IH x y z H).\n      apply (IH x y H).\n      apply (IH x y H).\n      apply (IH x y H).\n      apply (IH x y H).\n      apply (IH x y H).\n      apply (IH x y H).\n      apply (IH x y H).\n      apply (IH x y H).\n      apply (IH x y H).\n      apply (IH x y H).\n      apply (IH x y H).\n      apply (IH x y H).\n      apply (IH x y H).\n      apply (IH x y H).\n      apply (IH x y).\n      apply (IH x y H).\n      apply (IH x y).\n      apply (IH x y).\n      apply (IH x y).\n      apply (IH x y).\n      apply (IH x y).\n      apply (IH x y).\n      apply (IH x y).\n      apply (IH x y).\n      apply (IH x y).\n     Qed.",
                    "Lemma taus_weak: forall y l x z, Weak T x y -> Weak l y z -> Weak l x z.\n    Proof.\n      intros l x y H; destruct l; simpl; intros x y z Hz;\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_starQed.",
                    "Lemma taus_weak: forall y l x z, Weak T x y -> Weak l y z -> Weak l x z.\n    Proof.\n      intros l x y H; destruct l; simpl; intros x y z Hz.\n      apply S_star with y; assumption.\n    Qed."
                ]
            },
            {
                "filepath": "./coq_projects/weak-up-to/Reductions.v",
                "context": ".\n    Variables A X: Type.\n    Definition reduction := A -> relation X.\n    Definition incl_r: relation reduction := fun R1 R2 => forall a, incl (R1 a) (R2 a).\n    Definition eeq_r: relation reduction := fun R1 R2 => forall a, eeq (R1 a) (R2 a).\n  End R.\n\n  Variable A: Type.\n\n  Section Diagram.\n    Variables X Y: Type.\n    Definition diagram_r(RX: reduction A X) R (RY: reduction A Y) S := forall a, diagram (RX a) R (RY a) S.\n  End Diagram. \n\n  Section Weak.\n  \n    (** A `label' is either the silent action, or a visible one *)  \n    Inductive Lbl: Type := T | L(a: A).\n    Definition reduction_t := reduction Lbl.\n  \n    Variable X: Type.\n    Variable Red: reduction_t X.\n\n    (** Weak transition relation *)  \n    Definition Weak: reduction_t X := fun l => \n      match l with \n\t| T => star (Red T)\n\t| L a => comp (star (Red T)) (comp (Red (L a)) (star (Red T)))\n      end.\n\n    (** Transition relation for expansion *)\n    Definition EWeak: reduction_t X := fun l => \n      match l with \n\t| T => union2 (eq (A:=X)) (Red T)\n\t| L a => Red (L a)\n      end.\n\n    (** Transition relation for relaxed expansion *)\n    Definition REWeak: reduction_t X := fun l => \n      match l with \n\t| T => union2 (eq (A:=X)) (Red T)\n\t| L a => comp (Red (L a)) (star (Red T))\n      end.\n\n    Lemma weak_refl: forall x, Weak T x x.\n    Proof. intro x; simpl; auto. Qed.\n    Hint Immediate weak_refl.\n\n    Lemma tau_weak: forall y l x z, Red T x y -> Weak l y z -> Weak l x z.\n    Proof. \n      intros y l; destruct l; simpl; intros x z XY YZ.\n      apply S_star with y; assumption.\n      destruct YZ as [ w YW WZ ].\n      exists w; auto.\n      apply S_star with y; assumption.\n    Qed.\n\n    Lemma weak_tau: forall y l x z, Red l x y -> Weak T y z -> Weak l x z.\n    Proof.\n      intros y l; destruct l; simpl; intros x z XY YZ.\n      apply S_star with y; assumption.\n      exists x; auto.\n      exists y; auto.\n    Qed.\n\n    Lemma red_weak: forall l x y, Red l x y -> Weak l x y.\n    Proof.\n      intros l x y H.\n      apply weak_tau with y; auto.\n    Qed.\n\n    Lemma taus_weak: forall y l x z, Weak T x y -> Weak l y z -> Weak l x z.\n    Proof. \n      intros y l; destruct l; simpl; intros x z XY YZ.\n      apply star_trans with y; assumption.\n      destruct YZ as [ w YW WZ ].\n      exists w; auto.\n      apply star_trans with y; assumption.\n    Qed.\n\n    ",
                "context_tokens": 718,
                "proof_start_offset": 2508,
                "proof_end_offset": 2853,
                "proof": "Lemma weak_taus: forall y l x z, Weak l x y -> Weak T y z -> Weak l x z.\nProof.\nintros y l; destruct l; simpl; intros x z XY YZ.\napply star_trans with y; assumption.\ndestruct XY as [ w XW WY ].\ndestruct WY as [ t WT TY ].\nexists w; auto.\nexists t; auto.\napply star_trans with y; assumption.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma weak_taus: forall y l x z, Weak l x y -> Weak T y z -> Weak l x z.\n    Proof.\n      intros l x y H; destruct l; simpl; intros x y z Hz.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_star with y; assumption.\n      apply S_starQed.",
                    "Lemma weak_taus: forall y l x z, Weak l x y -> Weak T y z -> Weak l x z.\n    Proof.\n      intros l x y H.\n      apply (IH _ _ _ _ H0).\n      apply (IH _ _ H).\n      apply (IH _ _ _ H0).\n      apply (IH _ _ H).\n      apply (IH _ H).\n      apply (IH _ _ H).\n      apply (IH _ _ H0).\n      apply (IH _ _ H).\n      apply (IH _ _ H).\n      apply (IH _ _ H0).\n      apply (IH _ _ H).\n      apply (IH _ _ H0).\n      apply (IH _ _ H0).\n      apply (IH _ _ _ H0).\n      apply (IH _ _ H0).\n      apply (IH _ _ _ H0).\n      apply (IH _ _ H0).\n      apply (IH _ _ H0).\n      apply (IH _ _ _ H0).\n      apply (IH _ _ H0).\n      apply (IH _ _ _ H0).\n      apply (IH _ _ _ H0).\n      apply (IH _ _ _ H0).\n      apply (IH _ _ _ H0).\n      apply (IH _ _ _ H0).\n      apply (IH _ _ _ H0).\n      apply (IH _ _ _ _Qed.",
                    "Lemma weak_taus: forall y l x z, Weak l x y -> Weak T y z -> Weak l x z.\n    Proof.\n      intros l x y z H.\n      apply (well_founded_ind_r _ _ _ _ H).\n      apply (well_founded_ind_r _ _ _ H).\n      apply (well_founded_ind_r _ _ _ H).\n      apply (well_founded_ind_r _ _ H).\n      apply (well_founded_ind_r _ _ _ _ H).\n      apply (well_founded_ind_r _ _ _ _ H).\n      apply (well_founded_ind_r _ _ H).\n      apply (well_founded_ind_r _ _ _ _ H).\n      apply (well_founded_ind_r _ _ _ _ H).\n      apply (well_founded_ind_r _ _ _ _ H).\n      apply (well_founded_ind_r _ _ _ _ _ _ H).\n      apply (well_founded_ind_r _ _ _ _ H).\n      apply (well_founded_ind_r _ _ _ _ _ H).\n      apply (well_founded_ind_r _ _ _ _ H).\n      apply (well_founded_ind_r _ _ _ _ _ H).\n      apply (well_founded_Qed.",
                    "Lemma weak_taus: forall y l x z, Weak l x y -> Weak T y z -> Weak l x z.\n    Proof.\n      intros l x y z H H.\n      apply (well_founded_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wf_wfQed.",
                    "Lemma weak_taus: forall y l x z, Weak l x y -> Weak T y z -> Weak l x z.\n    Proof.\n      intros l x y z H.\n      apply (well_founded_ind _ _ _ H0).\n      apply (well_founded_ind _ _ _ H0).\n      apply (well_founded_ind _ _ _ H0).\n      apply (well_founded_ind _ _ H0).\n      apply (well_founded_ind _ _ _ H0).\n      apply (well_founded_ind _ _ H0).\n      apply (well_founded_ind _ _ H0).\n      apply (well_founded_ind _ H0).\n      apply (well_founded_ind _ _ _ H0).\n      apply (well_founded_ind _ _ H0).\n      apply (well_founded_ind _ _ _ H0).\n      apply (well_founded_ind _ _ _ H0).\n    Qed."
                ]
            }
        ],
        "buchberger": [
            {
                "filepath": "./coq_projects/buchberger/ListProps.v",
                "context": "(* This code is copyrighted by its authors; it is distributed under  *)\n(* the terms of the LGPL license (see LICENSE and description files) *)\n\nRequire Import List.\n\n",
                "context_tokens": 38,
                "proof_start_offset": 167,
                "proof_end_offset": 590,
                "proof": "Lemma map_in : forall (A B : Set) (f : A -> B) (b : B) (xs : list A), In b (map f xs) -> ex (fun a : A => b = f a /\\ In a xs).\nProof.\nintros A B f b xs; elim xs; simpl in |- *; auto.\nintros H'; elim H'; auto.\nintros a l H' H'0; elim H'0; [ intros H'1; clear H'0 | intros H'1; clear H'0 ]; auto.\nexists a; split; auto.\nelim H'; [ intros a0 E; elim E; intros H'2 H'3; clear E H' | clear H' ]; auto.\nexists a0; split; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma map_in : forall (A B : Set) (f : A -> B) (b : B) (xs : list A), In b (map f xs) -> ex (fun a : A => b = f a /\\ In a xs).\nProof.\nintros.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_in.\napply map_Qed.",
                    "Lemma map_in : forall (A B : Set) (f : A -> B) (b : B) (xs : list A), In b (map f xs) -> ex (fun a : A => b = f a /\\ In a xs).\nProof.\nintros A B f a b xs H.\nelim (in_map f a xs); intros a b xs H.\nelim (in_map f a xs); intros a b xs H.\nelim (in_map f a xs); intros a xs H.\nelim (in_map f a xs); intros a xs H.\nelim (in_map f a xs); intros a xs H.\nelim (in_map f a xs); intros a xs H.\nelim (in_map f a xs); intros a xs H.\nelim (in_map f a xs); intros a xs H.\nelim (in_map f a xs); intros a xs.\nelim (in_map f a xs); intros a xs H.\nelim (in_map f a xs); intros a xs H.\nelim (in_map f a xs); intros a xs H.\nelim (in_map f a xs); intros a xs H.\nelim (in_map f a xs); intros a xs H.\nelim (in_map f a xs); intros a xs H.\nelim (in_map f a xs); intros a xs H.\nelimQed.",
                    "Lemma map_in : forall (A B : Set) (f : A -> B) (b : B) (xs : list A), In b (map f xs) -> ex (fun a : A => b = f a /\\ In a xs).\nProof.\n  intros.\n  apply map_in_map_iff.\n  apply map_in_map_iff.\n  apply map_in_map_iff.\n  apply map_in_map_iff.\n  apply map_in_map_iff.\n  apply map_in_map_iff.\n  apply map_in_map_iff.\n  apply map_in_map_iff.\n  apply map_in_map_iff.\n  apply map_in_map_iff.\n  apply map_in_map_iff.\n  apply map_in_map_iff.\n  apply map_in_iff.\n  apply map_in_map_iff.\n  apply map_in_iff.\n  apply map_in_map_iff.\n  apply map_in_map_iff.\n  apply map_in_iff.\n  apply map_in_map_iff.\n  apply map_in_iff.\n  apply map_in_map_iff.\n  apply map_in_iff.\n  apply map_in_map_iff.\n  apply map_in_iff.\n  apply map_in_iff.\n  apply map_in_iff.\n  apply map_in_Qed.",
                    "Lemma map_in : forall (A B : Set) (f : A -> B) (b : B) (xs : list A), In b (map f xs) -> ex (fun a : A => b = f a /\\ In a xs).\nProof.\nintros.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napply map_in_map.\napplyQed.",
                    "Lemma map_in : forall (A B : Set) (f : A -> B) (b : B) (xs : list A), In b (map f xs) -> ex (fun a : A => b = f a /\\ In a xs).\nProof.\nintros A B f g; induction xs; simpl in |- *; intros.\napply map_in; auto with arith.\napply map_in; auto with arith.\napply map_in; auto with arith.\napply map_in; auto with arith.\napply map_in; auto with arith.\napply map_in; auto with arith.\napply map_in; auto with arith.\napply map_in; auto with arith.\napply map_in; auto with arith.\napply map_in; auto with arith.\napply map_in; auto with arith.\napply map_in; auto with arith.\napply map_in; auto with arith.\napply map_in; auto with arith.\napply map_in; auto with arith.\napply map_in; auto with arith.\napply map_in; auto with arith.\napply map_in; auto with arith.\napply map_in; auto with arith.\napply map_in; auto with arith.\napply map_in; auto with arith.\napply map_in; auto with arith.\napply map_in; auto with arith.\napply map_in; autoQed."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/ListProps.v",
                "context": "(* This code is copyrighted by its authors; it is distributed under  *)\n(* the terms of the LGPL license (see LICENSE and description files) *)\n\nRequire Import List.\n\nLemma map_in :\n forall (A B : Set) (f : A -> B) (b : B) (xs : list A),\n In b (map f xs) -> ex (fun a : A => b = f a /\\ In a xs).\nintros A B f b xs; elim xs; simpl in |- *; auto.\nintros H'; elim H'; auto.\nintros a l H' H'0; elim H'0;\n [ intros H'1; clear H'0 | intros H'1; clear H'0 ]; \n auto.\nexists a; split; auto.\nelim H'; [ intros a0 E; elim E; intros H'2 H'3; clear E H' | clear H' ]; auto.\nexists a0; split; auto.\nQed.\n\n",
                "context_tokens": 214,
                "proof_start_offset": 592,
                "proof_end_offset": 803,
                "proof": "Lemma map_app : forall (A B : Set) (f : A -> B) (l1 l2 : list A), map f (l1 ++ l2) = map f l1 ++ map f l2.\nProof.\nintros A B f l1; elim l1; simpl in |- *; auto with datatypes.\nintros a l H' l2; rewrite H'; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma map_app : forall (A B : Set) (f : A -> B) (l1 l2 : list A), map f (l1 ++ l2) = map f l1 ++ map f l2.\nintros A B f l1 l2; elim l1; simpl in |- *; auto.\nintros a0 H'0; elim H'0; intros H'1; clear H'0;\n auto.\nintros a0 H'0; elim H'0; intros H'1; clear H'0;\n auto.\nintros a0 H'0 H'1; elim H'0; intros H'2; clear H'0; elim H'0; intros H'2; clear H'0;\n auto.\nintros a0 H'1; elim H'0; intros H'2; clear H'0; \n auto.\nintros a0 H'0 H'1; elim H'0; intros H'2; clear H'2; \n auto.\nintros a0 H'0; elim H'1; intros H'2; clear H'2; \n auto.\nintros a0 H'1; elim H'2; intros H'3; clear H'2; \n auto.\nintros a0 H'1; elim H'2; intros H'3; clear H'2; \n auto.\nintros a0 H'1Qed.",
                    "Lemma map_app : forall (A B : Set) (f : A -> B) (l1 l2 : list A), map f (l1 ++ l2) = map f l1 ++ map f l2.\nintros A B f l1 l2; elim l1; simpl in |- *; auto.\nintros a0 H' H'0 H'0; elim H'0; intros H'1; clear H'0; \n auto.\nintros a0 H' H'1; elim H'0; intros H'2; clear H' H'1; \n auto.\nintros a0 H'1; elim H'0; intros H'2; clear H'0; \n auto.\nintros a0 H'2; elim H'0; intros H'2; clear H'0; \n auto.\nintros a0 H'2; elim H'1; intros H'2; clear H'1; \n auto.\nintros a0 H'2; elim H'1; intros H'2; clear H'2; \n auto.\nintros a0 H'2; elim H'2; intros H'3; clear H'2; \n auto.\nintros a0 H'2; elim H'2; intros H'3; clear H'3; \n auto.\nintros a0 H'2; elim H'3; intros H'3; clearQed.",
                    "Lemma map_app : forall (A B : Set) (f : A -> B) (l1 l2 : list A), map f (l1 ++ l2) = map f l1 ++ map f l2.\nintros A B f l1 l2; elim l1; simpl in |- *; auto.\nintros a0 H'0; elim H'0; intros H'1; clear H' H'0; auto.\nintros a0 H'0; elim H'0; intros H'1; clear H'0; auto.\nintros a0 H'0; elim H'1; intros H'2; clear H'0; auto.\nintros a0 H'1; elim H'0; intros H'2; clear H'0; auto.\nintros a0 H'1; elim H'0; intros H'2; clear H'0; auto.\nintros a0 H'1 H'2; elim H'0; intros H'2; clear H'2; auto.\nintros a0 H'1; elim H'0; intros H'2; clear H'2; auto.\nintros a0 H'0 H'2; elim H'0; intros H'2; clear H'0; auto.\nintros a0 H'2; elim H'0; intros H'3; clear H'1; auto.\nintros aQed.",
                    "Lemma map_app : forall (A B : Set) (f : A -> B) (l1 l2 : list A), map f (l1 ++ l2) = map f l1 ++ map f l2.\nintros A B f l1 l2; elim xs; simpl in |- *; auto.\nintros a0 l2; elim H'; auto.\nintros a0 l2; elim H'; auto.\nintros a0 H'1; elim H'; auto.\nintros a0 H'2; elim H'; auto.\nintros a0 H'2; elim H'; auto.\nintros a0 H'2; elim H'2; auto.\nintros a0 H'2; elim H'; auto.\nintros a0 H'2; elim H'; auto.\nintros a0 H'2; elim H'; auto.\nintros a0 H'2; elim H'2; auto.\nintros a0 H'2; elim H'2; auto.\nintros a0 H'2; elim H'3; auto.\nintros a0 H'2; elim H'3; auto.\nintros a0 H'2; elim H'3; auto.\nintros a0 H'2; elim H'3; auto.\nintros a0 H'2; elim H'3; auto.\nintros a0 H'2; elim H'3; auto.Qed.",
                    "Lemma map_app : forall (A B : Set) (f : A -> B) (l1 l2 : list A), map f (l1 ++ l2) = map f l1 ++ map f l2.\nintros A B f l1 l2; elim l1; simpl in |- *; auto.\nintros a0 H'0 H'0 H'1; elim H'0; intros H'2; clear H'0; \n auto.\nintros a0 H'1 H'2; elim H'0; intros H'3; clear H'0; \n auto.\nintros a0 H'0; elim H'1; intros H'2; elim H'1; intros H'2; clear H'2; \n auto.\nintros a0 H'2; elim H'2; intros H'3; clear H'3; \n auto.\nintros a0 H'2; elim H'3; intros H'4; clear H'5; \n auto.\nintros a0 H'2; elim H'3; intros H'4; clear H'4; \n auto.\nintros a0 H'2; elim H'3; intros H'5; clear H'4; \n auto.\nintros a0 H'2; elim H'4; intros H'4; clear H'5; \n auto.\nintros a0 H'2; elimQed."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/ListProps.v",
                "context": "(* This code is copyrighted by its authors; it is distributed under  *)\n(* the terms of the LGPL license (see LICENSE and description files) *)\n\nRequire Import List.\n\nLemma map_in :\n forall (A B : Set) (f : A -> B) (b : B) (xs : list A),\n In b (map f xs) -> ex (fun a : A => b = f a /\\ In a xs).\nintros A B f b xs; elim xs; simpl in |- *; auto.\nintros H'; elim H'; auto.\nintros a l H' H'0; elim H'0;\n [ intros H'1; clear H'0 | intros H'1; clear H'0 ]; \n auto.\nexists a; split; auto.\nelim H'; [ intros a0 E; elim E; intros H'2 H'3; clear E H' | clear H' ]; auto.\nexists a0; split; auto.\nQed.\n\nLemma map_app :\n forall (A B : Set) (f : A -> B) (l1 l2 : list A),\n map f (l1 ++ l2) = map f l1 ++ map f l2.\nintros A B f l1; elim l1; simpl in |- *; auto with datatypes.\nintros a l H' l2; rewrite H'; auto.\nQed.\n\n",
                "context_tokens": 303,
                "proof_start_offset": 805,
                "proof_end_offset": 1093,
                "proof": "Lemma map_rev : forall (A B : Set) (f : A -> B) (l : list A), map f (rev l) = rev (map f l).\nProof.\nintros A B f l; elim l; simpl in |- *; auto.\nintros a l0 H'; rewrite <- H'; simpl in |- *; auto.\napply trans_equal with (y := map f (rev l0) ++ map f (a :: nil)); auto.\napply map_app; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma map_rev : forall (A B : Set) (f : A -> B) (l : list A), map f (rev l) = rev (map f l).\nintros A B f l1; elim l1; simpl in |- *; auto with datatypes.\nintros a l1; elim H'; auto with datatypes.\nintros a l1 H'1; elim H'; auto with datatypes.\nintros a0 H'2; elim H'0; auto with datatypes.\nintros a0 l2 H'2; elim H'1; auto with datatypes.\nintros a0 H'2; elim H'1; auto with datatypes.\nintros a0 H'2; elim H'1; auto with datatypes.\nintros a0 H'2; elim H'2; auto with datatypes.\nintros a0 H'3; elim H'2; auto with datatypes.\nintros a0 H'3; elim H'3; auto with datatypes.\nintros a0 H'3; elim H'3; auto with datatypes.\nintros a0 H'3; elim H'3; auto with datatypes.\nintros a0 H'3; elim H'3; auto with datatypes.\nintros a0 H'3; elim H'3; auto with datatypes.\nintros a0 H'3; elim H'3; auto with datatypes.\nQed.",
                    "Lemma map_rev : forall (A B : Set) (f : A -> B) (l : list A), map f (rev l) = rev (map f l).\nintros A B f l1; elim l2; simpl in |- *; auto with datatypes.\nintros a l1 H'1; elim H'1; auto with datatypes.\nintros a l2 H'2; elim H'2; intros H'3; clear H'3; intros H'3 H'4; clear H'3; \n auto.\nintros a l1 H'2 H'3; elim H'4; intros H'4 H'5; clear H'4; \n auto.\nintros a l2 H'3 H'3; elim H'4; intros H'5 H'5; clear H'5; \n auto.\nintros a l2 H'3; elim H'5; intros H'5; clear H'5; \n auto.\nintros a l2 H'3; elim H'5; intros H'5; clear H'5; \n auto.\nintros a l2 H'3; elim H'5; intros H'6; clear H'6; \n auto.\nintros a l2 H'3 H'5; elim H'5; intros H'6; clear H'6; \n auto.\nQed.",
                    "Lemma map_rev : forall (A B : Set) (f : A -> B) (l : list A), map f (rev l) = rev (map f l).\nintros A B f l1 l2; elim l1; simpl in |- *; auto with datatypes.\nintros a l1 H' H'0; elim H'0; intros H'0; clear H'0; intros H'0; clear H'0; \n auto.\nintros a l2 H'0 H'0 H'1; elim H'0; intros H'1 H'1; clear H'0; \n auto.\nintros a l2 H'1 H'2 H'2; elim H'0; intros H'2; clear H'1; \n auto.\nintros a l2 H'2 H'2; elim H'1; intros H'2; clear H'2; \n auto.\nintros a l2 H' H'1; elim H'0; intros H'2 H'3; clear H'3; intros H'4; elim H'4;\n intros H'5 H'6; clear H'7; intros H'5; elim H'6; intros H'6; clear H'6; \n auto.\nintros a l2 H'1 H'2; elim H'3; intros H'Qed.",
                    "Lemma map_rev : forall (A B : Set) (f : A -> B) (l : list A), map f (rev l) = rev (map f l).\nintros A B f l1; elim l1; simpl in |- *; auto with datatypes.\nintros a l H' H'0; elim H'0; auto.\nintros a0 H'0 H'1; elim H'0; auto.\nintros a0 H'0 H'1; elim H'0; auto.\nintros a0 H'1 H'2; elim H'0; auto.\nintros a0 H'1; elim H'1; auto.\nintros a0 H'1; elim H'0; auto.\nintros a0 H'1 H'2; elim H'0; auto.\nintros a0 H'2; elim H'0; auto.\nintros a0 H'2; elim H'1; auto.\nintros a0 H'2 H'2; elim H'1; auto.\nintros a0 H'2; elim H'1; auto.\nintros a0 H'2; elim H'2; auto.\nintros a0 H'2; elim H'1; auto.\nintros a0 H'2; elim H'1; auto.\nintros a0 H'2; elimQed.",
                    "Lemma map_rev : forall (A B : Set) (f : A -> B) (l : list A), map f (rev l) = rev (map f l).\nintros A B f l1 l2; elim l1; simpl in |- *; auto with datatypes.\nintros a l1 l2; elim l2; simpl in |- *; auto with datatypes.\nintros a l2 H' H'0; elim H'0; auto with datatypes.\nintros a l2 H' H'0; elim H'0; intros H'1 H'2; clear H'2; intros H'2 H'3 H'2; clear H'3; intros H'2; clear H'3; intros H'3 H'3; clear H'3; intros H'3 H'4 H'4; clear H'3 H'4; intros H'3 H'4 H'5 H'5; clear H'6; intros H'6 H'6 H'6; clear H'7; intros H'7 H'7; clear H'7; intros H'8 H'8 H'8 H'8; clear H'8; intros H'8 H'9 H'9; elim H'10; clear H'9; intros H'9 H'10 H'10; \n auto.\nintros a l2Qed."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/ListProps.v",
                "context": "(* This code is copyrighted by its authors; it is distributed under  *)\n(* the terms of the LGPL license (see LICENSE and description files) *)\n\nRequire Import List.\n\nLemma map_in :\n forall (A B : Set) (f : A -> B) (b : B) (xs : list A),\n In b (map f xs) -> ex (fun a : A => b = f a /\\ In a xs).\nintros A B f b xs; elim xs; simpl in |- *; auto.\nintros H'; elim H'; auto.\nintros a l H' H'0; elim H'0;\n [ intros H'1; clear H'0 | intros H'1; clear H'0 ]; \n auto.\nexists a; split; auto.\nelim H'; [ intros a0 E; elim E; intros H'2 H'3; clear E H' | clear H' ]; auto.\nexists a0; split; auto.\nQed.\n\nLemma map_app :\n forall (A B : Set) (f : A -> B) (l1 l2 : list A),\n map f (l1 ++ l2) = map f l1 ++ map f l2.\nintros A B f l1; elim l1; simpl in |- *; auto with datatypes.\nintros a l H' l2; rewrite H'; auto.\nQed.\n\nLemma map_rev :\n forall (A B : Set) (f : A -> B) (l : list A), map f (rev l) = rev (map f l).\nintros A B f l; elim l; simpl in |- *; auto.\nintros a l0 H'; rewrite <- H'; simpl in |- *; auto.\napply trans_equal with (y := map f (rev l0) ++ map f (a :: nil)); auto.\napply map_app; auto.\nQed.\n\n",
                "context_tokens": 414,
                "proof_start_offset": 1095,
                "proof_end_offset": 1340,
                "proof": "Lemma rev_in : forall (A : Set) (a : A) (l : list A), In a (rev l) -> In a l.\nProof.\nintros A a l; elim l; simpl in |- *; auto.\nintros a0 l0 H' H'0.\ncase (in_app_or _ _ _ H'0); simpl in |- *; intros H'1; auto.\nelim H'1; auto.\nintros H'2; elim H'2.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma rev_in : forall (A : Set) (a : A) (l : list A), In a (rev l) -> In a l.\nintros A B f l; elim l; simpl in |- *; auto.\nintros a l H' H'0; elim H'; auto.\nintros a l0 H'0 H'1; elim H'0; auto.\nintros a l0 H'0 H'1; elim H'0; auto.\nintros a0 H'1 H'1; elim H'1; auto.\nintros a0 H'1 H'2; elim H'2; auto.\nintros a0 H'2 H'2; elim H'2; auto.\nintros a0 H'1 H'2; elim H'3; auto.\nintros a0 H'2; elim H'2; auto.\nintros a0 H'2; elim H'2; auto.\nintros a0 H'1; elim H'2; auto.\nintros a0 H'2 H'3; elim H'3; auto.\nintros a0 H'2; elim H'2; auto.\nintros a0 H'2 H'2; elim H'3; auto.\nintros a0 H'2; elim H'3; auto.\nintros a0Qed.",
                    "Lemma rev_in : forall (A : Set) (a : A) (l : list A), In a (rev l) -> In a l.\nintros A B f l; elim l; simpl in |- *; auto.\nintros a l H' H'0; elim H'0; intros H'1; elim H'0; intros H'2; clear H'1 H'2; clear H'2; intros H'2; elim H'0; intros H'2; clear H'2; intros H'3; clear H'3 H'3;\n clear H'0; intros H'3; elim H'4; intros H'4; clear H'4; intros H'4; clear H'5 H'5;\n intros a0 H'5; elim H'5; intros H'5; clear H'6; intros H'5; clear H'6;\n intros a0 H'5; elim H'5; intros H'6; clear H'7; intros H'5; clear H'7;\n elim H'5; intros H'6; clear H'6; intros H'7; clear H'7; \n intros a0 H'6; elim H'5; intros H'6; clear H'7; intros H'7; clear H'7 HQed.",
                    "Lemma rev_in : forall (A : Set) (a : A) (l : list A), In a (rev l) -> In a l.\nintros A B f l; elim l; simpl in |- *; auto.\nintros a l H' H'0; elim H'0; intros H'1 H'2; clear H'2; auto.\nintros a l0 H' H'1 H'2; elim H'0; intros H'2; clear H'2; auto.\nintros a l0 H'1 H'2; elim H'1; intros H'2 H'3; clear H'2; auto.\nintros a0 H'1 H'2; elim H'2; intros H'3; clear H'3; auto.\nintros a0 H'2 H'2; elim H'3; intros H'3 H'4; clear H'4; auto.\nintros a0 H'1 H'2; elim H'4; intros H'4; clear H'5; auto.\nintros a0 H'2 H'3 H'3; elim H'5; intros H'4; clear H'4; auto.\nintros a0 H'3; elim H'5; intros H'4; clear H'5; auto.\nintros a0Qed.",
                    "Lemma rev_in : forall (A : Set) (a : A) (l : list A), In a (rev l) -> In a l.\nintros A B f l; elim l; simpl in |- *; auto.\nintros a l0 H'0; elim H'0; intros H'0; elim H'0; intros H'1; elim H'0; intros H'2; elim H'1; intros H'2; clear H'0; intros H'2; elim H'2; intros H'2; elim H'2; intros H'3; clear H'2; intros H'3; elim H'3;\n intros H'4; elim H'3; intros H'3; elim H'3; intros H'4; elim H'4; intros H'4; clear H'3;\n intros H'4; elim H'5; intros H'5; elim H'6; intros H'6; elim H'5; intros H'6; elim H'6; intros H'6; elim H'7; intros H'6; elim H'6; intros H'6; elim H'7; intros H'6; elim H'6; intros H'6; elim H'7; intros H'7; elim H'7; intros H'7Qed.",
                    "Lemma rev_in : forall (A : Set) (a : A) (l : list A), In a (rev l) -> In a l.\nintros A B f l; elim l; simpl in |- *; auto.\nintros a l H'; elim H'; auto.\nintros a l' H'0; elim H'; auto.\nintros a l' H'0 H'1; elim H'; auto.\nintros a l' H'1; elim H'; auto.\nintros a l' H'1; elim H'; auto.\nintros a l' H'0; elim H'0; auto.\nintros a l' H'1; elim H'; auto.\nintros a l' H'1; elim H'; auto.\nintros a l' H'1; elim H'; auto.\nintros a l' H'1; elim H'; auto.\nintros a l' H'1 H'2; elim H'; auto.\nintros a l' H'2 H'2; elim H'2; auto.\nintros a l' H'1 H'2; elim H'; auto.\nintros a l' H'1 H'2; elim H'2; auto.\nintros a l' H'1 H'2; elim H'2; auto.\nintros a l'2 HQed."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/ListProps.v",
                "context": "(* This code is copyrighted by its authors; it is distributed under  *)\n(* the terms of the LGPL license (see LICENSE and description files) *)\n\nRequire Import List.\n\nLemma map_in :\n forall (A B : Set) (f : A -> B) (b : B) (xs : list A),\n In b (map f xs) -> ex (fun a : A => b = f a /\\ In a xs).\nintros A B f b xs; elim xs; simpl in |- *; auto.\nintros H'; elim H'; auto.\nintros a l H' H'0; elim H'0;\n [ intros H'1; clear H'0 | intros H'1; clear H'0 ]; \n auto.\nexists a; split; auto.\nelim H'; [ intros a0 E; elim E; intros H'2 H'3; clear E H' | clear H' ]; auto.\nexists a0; split; auto.\nQed.\n\nLemma map_app :\n forall (A B : Set) (f : A -> B) (l1 l2 : list A),\n map f (l1 ++ l2) = map f l1 ++ map f l2.\nintros A B f l1; elim l1; simpl in |- *; auto with datatypes.\nintros a l H' l2; rewrite H'; auto.\nQed.\n\nLemma map_rev :\n forall (A B : Set) (f : A -> B) (l : list A), map f (rev l) = rev (map f l).\nintros A B f l; elim l; simpl in |- *; auto.\nintros a l0 H'; rewrite <- H'; simpl in |- *; auto.\napply trans_equal with (y := map f (rev l0) ++ map f (a :: nil)); auto.\napply map_app; auto.\nQed.\n\nLemma rev_in : forall (A : Set) (a : A) (l : list A), In a (rev l) -> In a l.\nintros A a l; elim l; simpl in |- *; auto.\nintros a0 l0 H' H'0.\ncase (in_app_or _ _ _ H'0); simpl in |- *; intros H'1; auto.\nelim H'1; auto.\nintros H'2; elim H'2.\nQed.\n\n",
                "context_tokens": 524,
                "proof_start_offset": 1342,
                "proof_end_offset": 1509,
                "proof": "Lemma in_rev : forall (A : Set) (a : A) (l : list A), In a l -> In a (rev l).\nProof.\nintros A a l H'.\napply rev_in with (A := A); auto.\nrewrite (rev_involutive l); auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma in_rev : forall (A : Set) (a : A) (l : list A), In a l -> In a (rev l).\nintros A B f l; elim l; simpl in |- *; auto.\nintros a0 l0 H' H'1; rewrite <- H'1; auto.\nQed.",
                    "Lemma in_rev : forall (A : Set) (a : A) (l : list A), In a l -> In a (rev l).\nintros A a l; elim l; simpl in |- *; auto.\nintros a0 H'1; elim H'0; intros H'2; elim H'3; clear H'1; intros H'2; elim H'2; clear H'3; intros H'3; elim H'4; clear H'4; intros H'5; elim H'3; clear H'4; intros H'4; elim H'4; clear H'5; intros H'5; elim H'4; clear H'5; intros H'5; elim H'5; clear H'5; intros H'5; elim H'7; clear H'6; intros H'5; elim H'6; clear H'6; intros H'6; elim H'7; clear H'7; intros H'7; elim H'7; clear H'7; intros H'8; elim H'7; clear H'7; intros H'7; elim H'8; clear H'7; intros H'8; elim H'7; clear H'7; intros H'8; elim H'8; clear H'7; intros H'Qed.",
                    "Lemma in_rev : forall (A : Set) (a : A) (l : list A), In a l -> In a (rev l).\nintros A B f l; elim l; simpl in |- *; auto.\nintros a l0 H'1; rewrite <- H'1; auto.\nintros a0 H'2; elim H'2; auto.\nintros a0 H'2; rewrite <- H'2; auto.\nintros a0 H'3; rewrite <- H'3; auto.\nQed.",
                    "Lemma in_rev : forall (A : Set) (a : A) (l : list A), In a l -> In a (rev l).\nintros A a l; elim l; simpl in |- *; auto.\nintros a0 l0 H'1; elim H'0; intros H'2; clear H'1; intros H'2; clear H'1; auto.\nQed.",
                    "Lemma in_rev : forall (A : Set) (a : A) (l : list A), In a l -> In a (rev l).\nintros A B f l; elim l; simpl in |- *; auto.\nintros a0 H' H'1; elim H'1; intros H'2; clear H'2; elim H'2; intros H'3; clear H'3;\n auto.\nintros a0 H'2; elim H'3; intros H'3; clear H'3; intros H'4; clear H'4;\n auto.\nintros a0 H'2; elim H'3; intros H'4 H'4; clear H'5; intros H'5; clear H'6 H'6;\n auto.\nintros a0 H'3; elim H'4; intros H'5; clear H'6; intros H'5; clear H'6; intros H'6;\n elim H'5; intros H'6; clear H'7; intros H'6; clear H'6 H'7 H'7;\n auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/Term.v",
                "context": "(* This code is copyrighted by its authors; it is distributed under  *)\n(* the terms of the LGPL license (see LICENSE and description files) *)\n\n(****************************************************************************\n                                                                           \n          Buchberger : Terms                           \n                                                                           \n          Laurent Thery April 01                          \n                                                                           \n  ****************************************************************************)\nRequire Import Relation_Definitions.\nRequire Import CoefStructure.\nRequire Import moreCoefStructure.\nRequire Import OrderStructure.\nRequire Import Monomials.\nSection Term.\nLoad \"hCoefStructure\".\nLoad \"mCoefStructure\".\nLoad \"hOrderStructure\".\nLoad \"mOrderStructure\".\n \nDefinition M1 := zero_mon n.\n \nDefinition Term := (A * mon n)%type.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \n",
                "context_tokens": 163,
                "proof_start_offset": 1031,
                "proof_end_offset": 1124,
                "proof": "Definition zeroP : Term -> Prop.\nProof.\nintros H'; case H'.\nintros a H'1; exact (eqA a A0).\nDefined.",
                "end_command": "Defined.",
                "generated_proofs": [
                    "Definition zeroP : Term -> Prop.\n\nDefinition SubFun (T : Type) (x y : T) :=\n  (forall y : T, P y -> P y -> P y) -> (forall y : T, P y -> P y) -> (forall y : T, P y -> P y) -> P y.\n\nDefinition SubFun (T : Type) (x y : T) (x y : T) : T :=\n  (forall y : T, P y -> P y) -> (forall y : T, P y -> P y) -> P y.\n\nDefinition SubFun (T : Type) (x y : T) (x y : T) : T :=\n  (forall y : T, P y -> P y) -> P y.\n\nDefinition SubFun (T : Type) (x y : T) (x y : T) : T :=\n  (forall y : T, P y -> P y) -> (forall y : T, P y -> P y) -> P y.\n\nDefinition SubFun (T : Type) (x y : T) (x y : T) (x y : T) : T :=\n  (forall y : T, P y ->Defined.",
                    "Definition zeroP : Term -> Prop.\nDefinition sub_mon (x y : Term) :=\n  fun x y => x = y.\n\nDefinition sub_mon (x y : Term) :=\n  fun x y => x = y.\n\nDefinition sub_mon (x y : Term) :=\n  fun x y => x = y.\nDefinition sub_mon (x y : Term) :=\n  fun x y => x = y.\n\nDefinition sub_mon (x y : Term) :=\n  fun x y => x = y.\n\nDefinition sub_mon (x y : Term) :=\n  fun x y => x = y.\n\nDefinition sub_mon (x y : Term) :=\n  fun x y => x = y.\nDefinition sub_mon (x y : Term) :=\n  fun x y => x = y.\n\nDefinition sub_mon (x y : Term) :=\n  fun x y => x = y.\n\nDefinition sub_mon (x y : Term) :=\n  fun x y => x = y.\n\nDefinition sub_mon (x y : Term) :=\n  fun x y => x = y.\n\nDefinition sub_mon (x y : Term) :=\n  fun x yDefined.",
                    "Definition zeroP : Term -> Prop.\nDefinition is_mon (x : Term) :=\n  fun x y => forall x y, is_mon x y -> is_mon x y.\n\nDefinition is_mon (x : Term) : Prop :=\n  fun x y => forall y : Term, is_mon x y -> is_mon x y.\n\nDefinition is_mon (x : Term) : Prop :=\n  fun x y => forall y : Term, is_mon x y -> is_mon x y.\n\nDefinition is_mon (x : Term) : Prop :=\n  fun x y : Term => forall y : Term, is_mon x y -> is_mon x y.\n\nDefinition is_mon (x : Term) : Prop :=\n  fun x y : Term => forall y : Term, is_mon x y -> is_mon x y.\n\nDefinition is_mon (x : Term) : Prop :=\n  fun x y : Term => forall y : Term, is_mon x y -> is_mon x y.\n\nDefinition is_mon (x : Term) : Prop :=\n  fun x y : Term => forall y : Term, is_mon x y -> is_mon x y.Defined.",
                    "Definition zeroP : Term -> Prop.\nDefinition prod (A * Type) (a b:A) :=\n  fun x => x.\n\nDefinition prodP (A * Type) (a b:A) (b:A) (b:A) (b:A) : A :=\n  fun x => x.\n\nDefinition prodP (A * Type) (b:A) (b:A) (b:A) (b:A) : A :=\n  fun x => x.\n\nDefinition prodP (A * Type) (b:A) (b:A) (b:A) : A :=\n  fun x => x.\nDefinition prodP (A * Type) (b:A) (b:A) (b:A) (b:A) (b:A) : B :=\n  fun x => x.\nDefinition prodP (A * Type) (b:A) (b:A) (b:A) (b:A) (b:A) (b:A) (b:A) : A :=\n  fun x => x.\nDefinition prodP (A * Type) (b:A) (b:A) (b:A) (bDefined.",
                    "Definition zeroP : Term -> Prop.\nDefinition is_mon (x : Term) :=\n  fun x => fun x => x.\nDefinition is_mon (x : Term) (x : Term) :=\n  fun x => x.\n\nDefinition is_mon (x : Term) (x : Term) : Term :=\n  fun x => x.\nDefinition is_mon (x : Term) (x : Term) :=\n  fun x => fun x => x.\n\nDefinition is_mon (x : Term) (x : Term) :=\n  fun x => fun x => x.\nDefinition is_mon (x : Term) (x : Term) (x : Term) :=\n  fun x => fun x => x.\n\nDefinition is_mon (x : Term) (x : Term) (x : Term) :=\n  fun x => fun x => x.\nDefinition is_mon (x : Term) (x : Term) (x : Term) :=\n  fun x => fun x => x.\n\nDefinition is_mon (x : Term) (x : Term) (x : Term) (x : Term) :=\n  fun x => fun x => x.\n\nDefinition is_mon (x : Term)Defined."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/Term.v",
                "context": "(* This code is copyrighted by its authors; it is distributed under  *)\n(* the terms of the LGPL license (see LICENSE and description files) *)\n\n(****************************************************************************\n                                                                           \n          Buchberger : Terms                           \n                                                                           \n          Laurent Thery April 01                          \n                                                                           \n  ****************************************************************************)\nRequire Import Relation_Definitions.\nRequire Import CoefStructure.\nRequire Import moreCoefStructure.\nRequire Import OrderStructure.\nRequire Import Monomials.\nSection Term.\nLoad \"hCoefStructure\".\nLoad \"mCoefStructure\".\nLoad \"hOrderStructure\".\nLoad \"mOrderStructure\".\n \nDefinition M1 := zero_mon n.\n \nDefinition Term := (A * mon n)%type.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition zeroP : Term -> Prop.\nintros H'; case H'.\nintros a H'1; exact (eqA a A0).\nDefined.\n \n",
                "context_tokens": 197,
                "proof_start_offset": 1127,
                "proof_end_offset": 1265,
                "proof": "Definition eqTerm : Term -> Term -> Prop.\nProof.\nintros H'; case H'.\nintros a a' H'2; case H'2.\nintros b b'; exact (eqA a b /\\ a' = b').\nDefined.",
                "end_command": "Defined.",
                "generated_proofs": [
                    "Definition eqTerm : Term -> Term -> Prop.\nintros H'; case H'.\nintros a H'2; exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (eqA a0 a0); exact (Defined.",
                    "Definition eqTerm : Term -> Term -> Prop.\nDefinition eq_prod (x y : Term) :=\n  fun x y => x = y.\nDefinition eq_prod (x y : Term) : Term :=\n  fun x y => x = y.\nDefinition eq_prod (x y : Term) : Term :=\n  fun x y => x = y.\n\nDefinition eq_prod (x y : Term) : Term :=\n  fun x y => x = y.\nDefinition eq_prod (x y : Term) : Term :=\n  fun x y => x = y.\nDefinition eq_prod (x y : Term) : Term :=\n  fun x y => x = y.\nDefinition eq_prod (x y : Term) : Term :=\n  fun x y => x = y.\n\nDefinition eq_prod (x y : Term) : Term :=\n  fun x y => x = y.\n\nDefinition eq_prod (x y : Term) : Term :=\n  fun x y => x = y.\n\nDefinition eq_prod (x y : Term) : Term :=\n  fun x y => x = y.\nDefinition eq_prod (x y : Term) : Term :=\n  fun x y => x = y.\nDefined.",
                    "Definition eqTerm : Term -> Term -> Prop.\n\nDefinition eq_prod (n : nat) : Term :=\n  forall x y : Term, {x : Term | Term | Term & {x : Term & Term & {x : Term & Term & {x : Term & Term & {x : Term & Term & {x : Term & Term & {x : Term & Term & {x : Term & Term & {x : Term & Term & {x : Term & Term & {x : Term & Term & {x : Term & Term & {x : Term & Term & {x : Term & Term & {x : Term & Term & {x : Term & Term & {x : Term & Term & {x : Term & Term & Term & {x : Term & Term & {x : Term & Term & t & {x : Term & Term & {x : Term & Term & Term & {x : Term & Term & {x : Term & Term & Term & {x : Term & Term & {x : Term & Term & {x : Term & Term & {x : Term & Term & t & {x : Term & Term & {x : Term & Term & {x : Term & Term & {x : Term & TermDefined.",
                    "Definition eqTerm : Term -> Term -> Prop.\n\nDefinition sub := forall x y z, sub x y -> sub x y -> sub x y.\n\nLemma sub_prod : forall x y z, sub x y -> sub x z.\nProof.\nintros x y z H' H'0; case H'0; auto.\nintros a H'0; case H'0; auto.\nintros a H'0; elim H'0; auto.\nintros a'0 H'0; elim H'0; auto.\nintros a'0 H'1 H'2; elim H'0; auto.\nintros a'0 H'1 H'1 H'2; elim H'0; auto.\nintros a'0 H'2; elim H'1; auto.\nintros a' H'1; elim H'0; auto.\nintros a'0 H'2; elim H'1; auto.\nintros a'1 H'2; elim H'2; auto.\nintros a'1 H'2; elim H'2; auto.\nintros a'2 H'2; elim H'2; auto.\nintros a'2 H'2; elim H'2Defined.",
                    "Definition eqTerm : Term -> Term -> Prop.\nDefinition Term_prod : Term -> Prop :=\n  fun x y => x = y /\\ y = y /\\ y = y /\\ x = y.\n\nDefinition Term_prod : Term -> Prop :=\n  fun x y =>\n    fun x y => (fun y => x = y)\n    (fun y => x = y)\n    (fun y => x = y)\n    (fun y => x = y)\n    (fun y => x = y)\n    (fun y => x = y)\n    (fun y => x = y)\n    (fun y => x = y)\n    (fun y => x = y)\n    (fun y => x = y)\n    (fun y => x = y)\n    (fun y => x = y)\n    (fun y => x = y)\n    (fun y => x = y)\n    (fun y => x = y)\n    (fun y => x = y)\n    (fun y => x = y)\n    (fun y => x = y)\n    (fun y => x = y)\n    (fun y => x = y)\n    (fun y => x = y)\n    (fun y => x = y)\n    (fun y => x =Defined."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/Term.v",
                "context": "(* This code is copyrighted by its authors; it is distributed under  *)\n(* the terms of the LGPL license (see LICENSE and description files) *)\n\n(****************************************************************************\n                                                                           \n          Buchberger : Terms                           \n                                                                           \n          Laurent Thery April 01                          \n                                                                           \n  ****************************************************************************)\nRequire Import Relation_Definitions.\nRequire Import CoefStructure.\nRequire Import moreCoefStructure.\nRequire Import OrderStructure.\nRequire Import Monomials.\nSection Term.\nLoad \"hCoefStructure\".\nLoad \"mCoefStructure\".\nLoad \"hOrderStructure\".\nLoad \"mOrderStructure\".\n \nDefinition M1 := zero_mon n.\n \nDefinition Term := (A * mon n)%type.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition zeroP : Term -> Prop.\nintros H'; case H'.\nintros a H'1; exact (eqA a A0).\nDefined.\n \nDefinition eqTerm : Term -> Term -> Prop.\nintros H'; case H'.\nintros a a' H'2; case H'2.\nintros b b'; exact (eqA a b /\\ a' = b').\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \n",
                "context_tokens": 259,
                "proof_start_offset": 1315,
                "proof_end_offset": 1416,
                "proof": "Theorem eqTerm_refl : reflexive Term eqTerm.\nProof.\nred in |- *.\nintros x; case x; simpl in |- *; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem eqTerm_refl : reflexive Term eqTerm.\nintros H'; case H'.\nintros a H'1; case H'.\nintros a H'2; case H'.\nintros H'2; case H'.\nintros H'2; case H'.\nintros H'2; case H'2; case H'2; intros H'2; case H'3; intros H'3; case H'3; intros H'3; case H'3; intros H'3; case H'3; intros H'4 H'4; case H'5; intros H'4; case H'5; intros H'4; case H'4; intros H'4; case H'5; intros H'5; case H'6; intros H'5; case H'6; intros H'6; case H'6; intros H'6; case H'6; intros H'6; case H'6; intros H'6; case H'6; intros H'5; case H'6; intros H'6; case H'6; intros H'6; case H'6; intros H'6; case H'6; intros H'6; case H'6; intros HQed.",
                    "Theorem eqTerm_refl : reflexive Term eqTerm.\nred red in |- *; red in |- *; red in |- *; red in |- *; red in |- *; red in |- *; red in |- *; red in |- *; red in |- *; intros.\nexact (eqA a' a' H'0); auto.\nQed.",
                    "Theorem eqTerm_refl : reflexive Term eqTerm.\nred in |- *; red in |- *; red in |- *; red in |- *; red in |- *; red in |- *; intros.\nexact (eqA a a' H'0).\nQed.",
                    "Theorem eqTerm_refl : reflexive Term eqTerm.\nred in |- *; red in |- *; red in |- *; red in |- *; red in |- *; red in |- *; red in |- *; red in |- *; intros.\napply (eqA a a'); auto.\nQed.",
                    "Theorem eqTerm_refl : reflexive Term eqTerm.\nred; red in |- *; red in |- *; red in |- *; red in |- *; red in |- *; red in |- *; red in |- *; red in |- *; red in |- *; red in |- *; intros.\napply (eqA a a); auto with arith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/Term.v",
                "context": "(* This code is copyrighted by its authors; it is distributed under  *)\n(* the terms of the LGPL license (see LICENSE and description files) *)\n\n(****************************************************************************\n                                                                           \n          Buchberger : Terms                           \n                                                                           \n          Laurent Thery April 01                          \n                                                                           \n  ****************************************************************************)\nRequire Import Relation_Definitions.\nRequire Import CoefStructure.\nRequire Import moreCoefStructure.\nRequire Import OrderStructure.\nRequire Import Monomials.\nSection Term.\nLoad \"hCoefStructure\".\nLoad \"mCoefStructure\".\nLoad \"hOrderStructure\".\nLoad \"mOrderStructure\".\n \nDefinition M1 := zero_mon n.\n \nDefinition Term := (A * mon n)%type.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition zeroP : Term -> Prop.\nintros H'; case H'.\nintros a H'1; exact (eqA a A0).\nDefined.\n \nDefinition eqTerm : Term -> Term -> Prop.\nintros H'; case H'.\nintros a a' H'2; case H'2.\nintros b b'; exact (eqA a b /\\ a' = b').\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nTheorem eqTerm_refl : reflexive Term eqTerm.\nred in |- *.\nintros x; case x; simpl in |- *; auto.\nQed.\n \n",
                "context_tokens": 293,
                "proof_start_offset": 1419,
                "proof_end_offset": 1578,
                "proof": "Theorem eqTerm_sym : symmetric Term eqTerm.\nProof.\nred in |- *.\nintros x y; case x; case y; simpl in |- *; intuition.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem eqTerm_sym : symmetric Term eqTerm.\nred in |- *.\nintros x y H'1; case H'2; simpl in |- *; auto.\nQed.",
                    "Theorem eqTerm_sym : symmetric Term eqTerm.\nred in |- *.\nintros x H'; case H'; case H'; auto.\nQed.",
                    "Theorem eqTerm_sym : symmetric Term eqTerm.\nred in |- *.\nintros x; case x; simpl in |- *; auto.\nintros a H'1; exact (eqA a a'); auto.\nQed.",
                    "Theorem eqTerm_sym : symmetric Term eqTerm.\nred in |- *.\nred in |- *.\nintros x; case H'.\nintros a H'0; elim H'.\nintros a H'0; elim H'0.\nintros a H'0; elim H'0.\nintros a'0; elim H'0.\nintros a'0 H'0; elim H'0.\nintros a'0 H'0; elim H'1.\nintros a' H'1 H'1; elim H'1.\nintros a'1 H'1; elim H'2.\nintros a'1 H'2; elim H'2.\nintros a'2 H'2; elim H'1.\nintros a'2 H'2; elim H'2.\nintros a'2 H'2; elim H'2.\nintros a'2 H'2; elim H'2.\nintros a'2; elim H'2.\nintros a'2 H'2 H'3 H'2; elim H'2.\nintros a'2 H'3 H'4; elim H'2.\nintros a'2 H'2; elim H'3.\nintros a'Qed.",
                    "Theorem eqTerm_sym : symmetric Term eqTerm.\nred in |- *.\nintros x H'; case H'.\nintros a' H'; case H'.\nintros a H'2; case H'.\nintros a' H'2; case H'.\nintros a'2 H'2; case H'.\nintros a'2; case H'.\nintros a'2; case H'.\nintros a'2; case H'.\nintros a'2 H'3 H'4; case H'.\nintros a'3 H'4; case H'.\nintros a'3; case H'.\nintros a'3 H'4 H'4; case H'4'.\nintros a'3 H'4 H'4 H'5 H'5 H'6 H'6 H'6 H'6 H'6 H'6 H'6 H'6 H'6 H'6 H'7 H'6 H'8 H'8 H'6 H'7 H'8 H'8 H'9 H'8 H'9 H'10 H'10 H'11 H'11 H'13 H'11 H'11 H'13 H'13 H'13 H'14 H'14 H'14 H'Qed."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/Term.v",
                "context": "(* This code is copyrighted by its authors; it is distributed under  *)\n(* the terms of the LGPL license (see LICENSE and description files) *)\n\n(****************************************************************************\n                                                                           \n          Buchberger : Terms                           \n                                                                           \n          Laurent Thery April 01                          \n                                                                           \n  ****************************************************************************)\nRequire Import Relation_Definitions.\nRequire Import CoefStructure.\nRequire Import moreCoefStructure.\nRequire Import OrderStructure.\nRequire Import Monomials.\nSection Term.\nLoad \"hCoefStructure\".\nLoad \"mCoefStructure\".\nLoad \"hOrderStructure\".\nLoad \"mOrderStructure\".\n \nDefinition M1 := zero_mon n.\n \nDefinition Term := (A * mon n)%type.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition zeroP : Term -> Prop.\nintros H'; case H'.\nintros a H'1; exact (eqA a A0).\nDefined.\n \nDefinition eqTerm : Term -> Term -> Prop.\nintros H'; case H'.\nintros a a' H'2; case H'2.\nintros b b'; exact (eqA a b /\\ a' = b').\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nTheorem eqTerm_refl : reflexive Term eqTerm.\nred in |- *.\nintros x; case x; simpl in |- *; auto.\nQed.\n \nTheorem eqTerm_sym : symmetric Term eqTerm.\nred in |- *.\nintros x y; case x; case y; simpl in |- *; intuition.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \n",
                "context_tokens": 350,
                "proof_start_offset": 1581,
                "proof_end_offset": 1788,
                "proof": "Theorem eqTerm_trans : transitive Term eqTerm.\nProof.\nred in |- *.\nintros x y z; case x; case y; case z; simpl in |- *; intuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := a0); auto.\nrewrite H2; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem eqTerm_trans : transitive Term eqTerm.\nred in |- *.\nintros x y H'; case H'; simpl in |- *; auto.\nQed.",
                    "Theorem eqTerm_trans : transitive Term eqTerm.\nred in |- *.\nintros x y; case H'; auto.\nQed.",
                    "Theorem eqTerm_trans : transitive Term eqTerm.\nred in |- *.\nintros x y; case H'; auto.\nQed.",
                    "Theorem eqTerm_trans : transitive Term eqTerm.\nred in |- *.\nred in |- *.\nintros x y; case y; simpl in |- *; auto.\nQed.",
                    "Theorem eqTerm_trans : transitive Term eqTerm.\nred in |- *.\nintros x y; case y; simpl in |- *; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/Term.v",
                "context": "(* This code is copyrighted by its authors; it is distributed under  *)\n(* the terms of the LGPL license (see LICENSE and description files) *)\n\n(****************************************************************************\n                                                                           \n          Buchberger : Terms                           \n                                                                           \n          Laurent Thery April 01                          \n                                                                           \n  ****************************************************************************)\nRequire Import Relation_Definitions.\nRequire Import CoefStructure.\nRequire Import moreCoefStructure.\nRequire Import OrderStructure.\nRequire Import Monomials.\nSection Term.\nLoad \"hCoefStructure\".\nLoad \"mCoefStructure\".\nLoad \"hOrderStructure\".\nLoad \"mOrderStructure\".\n \nDefinition M1 := zero_mon n.\n \nDefinition Term := (A * mon n)%type.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition zeroP : Term -> Prop.\nintros H'; case H'.\nintros a H'1; exact (eqA a A0).\nDefined.\n \nDefinition eqTerm : Term -> Term -> Prop.\nintros H'; case H'.\nintros a a' H'2; case H'2.\nintros b b'; exact (eqA a b /\\ a' = b').\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nTheorem eqTerm_refl : reflexive Term eqTerm.\nred in |- *.\nintros x; case x; simpl in |- *; auto.\nQed.\n \nTheorem eqTerm_sym : symmetric Term eqTerm.\nred in |- *.\nintros x y; case x; case y; simpl in |- *; intuition.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem eqTerm_trans : transitive Term eqTerm.\nred in |- *.\nintros x y z; case x; case y; case z; simpl in |- *; intuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := a0); auto.\nrewrite H2; auto.\nQed.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \n",
                "context_tokens": 435,
                "proof_start_offset": 1838,
                "proof_end_offset": 1917,
                "proof": "Definition T2M : Term -> mon n.\nProof.\nintros t; case t; intros a m; exact m.\nDefined.",
                "end_command": "Defined.",
                "generated_proofs": [
                    "Definition T2M : Term -> mon n.\n \nTheorem T2M : forall (A : Type) (x y z : A), x = y -> x = y.\nintros A y H'; case H'; case H'; auto.\nintros a H'0; case H'; auto.\nintros a' H'0; case H'; auto.\nintros a'0 H'1; case H'0; auto.\nintros a'0 H'0; case H'1; auto.\nintros a'0 H'1 H'1 H'2; case H'0; auto.\nintros a'0 H'1 H'2; case H'0; auto.\nintros a'0 H'1 H'1; case H'1; auto.\nintros a'0 H'1; case H'0; auto.\nintros a'1 H'2; case H'0; auto.\nintros a'1 H'2; case H'1; auto.\nintros a'0 H'1 H'2; case H'0; auto.\nintros a'1 H'2; case H'0; auto.\nintros a'1 H'2; case H'0;Defined.",
                    "Definition T2M : Term -> mon n.\n  Proof.\nintros x y; case z; simpl in |- *; auto.\nDefined.",
                    "Definition T2M : Term -> mon n.\n  Proof.\n  red in |- *; intros x y; case z; simpl in |- *; intuition.\nDefined.",
                    "Definition T2M : Term -> mon n.\nred in |- *.\nintros x y; case x; simpl in |- *; auto.\nDefined.",
                    "Definition T2M : Term -> mon n.\n \nTheorem T2M : forall x y z, x = y -> x = y.\nintros x y z; case x; simpl in |- *; auto.\nintros x y z; case z; simpl in |- *; auto.\nintros x z; case z; simpl in |- *; auto.\nintros x y z; case z; simpl in |- *; auto.\nintros x z; case z; simpl in |- *; auto.\nintros x z; case z; simpl in |- *; auto.\nintros x z; case z; simpl in |- *; auto.\nintros x z; case z; simpl in |- *; auto.\nintros x z; case z; simpl in |- *; auto.\nintros x z; case z; simpl in |- *; auto.\nintros x z; case z; simpl in |- *; auto.\nintros x z; case z; simpl in |- *; auto.\nintros x z; case z; simpl in |- *; auto.\nintros x z; case z; simpl in |- *; auto.\nintros x z; case z; simpl in |- *; auto.\nintros x z; case z; simpl in |- *; auto.\nintros x z; case z; simplDefined."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/Term.v",
                "context": "(* This code is copyrighted by its authors; it is distributed under  *)\n(* the terms of the LGPL license (see LICENSE and description files) *)\n\n(****************************************************************************\n                                                                           \n          Buchberger : Terms                           \n                                                                           \n          Laurent Thery April 01                          \n                                                                           \n  ****************************************************************************)\nRequire Import Relation_Definitions.\nRequire Import CoefStructure.\nRequire Import moreCoefStructure.\nRequire Import OrderStructure.\nRequire Import Monomials.\nSection Term.\nLoad \"hCoefStructure\".\nLoad \"mCoefStructure\".\nLoad \"hOrderStructure\".\nLoad \"mOrderStructure\".\n \nDefinition M1 := zero_mon n.\n \nDefinition Term := (A * mon n)%type.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition zeroP : Term -> Prop.\nintros H'; case H'.\nintros a H'1; exact (eqA a A0).\nDefined.\n \nDefinition eqTerm : Term -> Term -> Prop.\nintros H'; case H'.\nintros a a' H'2; case H'2.\nintros b b'; exact (eqA a b /\\ a' = b').\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nTheorem eqTerm_refl : reflexive Term eqTerm.\nred in |- *.\nintros x; case x; simpl in |- *; auto.\nQed.\n \nTheorem eqTerm_sym : symmetric Term eqTerm.\nred in |- *.\nintros x y; case x; case y; simpl in |- *; intuition.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem eqTerm_trans : transitive Term eqTerm.\nred in |- *.\nintros x y z; case x; case y; case z; simpl in |- *; intuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := a0); auto.\nrewrite H2; auto.\nQed.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition T2M : Term -> mon n.\nintros t; case t; intros a m; exact m.\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition eqT (a b : Term) : Prop := T2M a = T2M b.\nHint Unfold eqT.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \n",
                "context_tokens": 522,
                "proof_start_offset": 2133,
                "proof_end_offset": 2190,
                "proof": "Lemma eqT_refl : reflexive _ eqT.\nProof.\nred in |- *; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma eqT_refl : reflexive _ eqT.\nred in |- *.\nintros x y; case x; simpl in |- *; auto.\nintros a b H' H'0; case H'0; simpl in |- *; auto.\nintros a b H' H'0; case H'0; simpl in |- *; auto.\nintros a b' H'0; case H'0; simpl in |- *; auto.\nintros a' H'0; case H'0; simpl in |- *; auto.\nintros a' H'0 H'0; case H'0; simpl in |- *; auto.\nintros a' H'0; case H'0; simpl in |- *; auto.\nintros a'0 H'0 H'1; case H'0; simpl in |- *; auto.\nintros a'0 H'0; case H'0; simpl in |- *; auto.\nintros a'0 H'0 H'1; case H'0; simpl in |- *; auto.\nintros a'0 H'0 H'1; case H'0; simpl in |- *; auto.\nintros a'0 H'1; case H'0; simpl in |- *; auto.\nintros a'0 HQed.",
                    "Lemma eqT_refl : reflexive _ eqT.\nred in |- *.\nintros x y; case x; simpl in |- *; auto.\nQed.",
                    "Lemma eqT_refl : reflexive _ eqT.\nred in |- *.\nintros x y; case y; simpl in |- *; intros; exact (eqA_sym x y); auto.\nQed.",
                    "Lemma eqT_refl : reflexive _ eqT.\nred in |- *.\nintros x y; case z; simpl in |- *; auto.\nQed.",
                    "Lemma eqT_refl : reflexive _ eqT.\nred in |- *.\nintros x y; case x; simpl in |- *; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/Term.v",
                "context": "(* This code is copyrighted by its authors; it is distributed under  *)\n(* the terms of the LGPL license (see LICENSE and description files) *)\n\n(****************************************************************************\n                                                                           \n          Buchberger : Terms                           \n                                                                           \n          Laurent Thery April 01                          \n                                                                           \n  ****************************************************************************)\nRequire Import Relation_Definitions.\nRequire Import CoefStructure.\nRequire Import moreCoefStructure.\nRequire Import OrderStructure.\nRequire Import Monomials.\nSection Term.\nLoad \"hCoefStructure\".\nLoad \"mCoefStructure\".\nLoad \"hOrderStructure\".\nLoad \"mOrderStructure\".\n \nDefinition M1 := zero_mon n.\n \nDefinition Term := (A * mon n)%type.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition zeroP : Term -> Prop.\nintros H'; case H'.\nintros a H'1; exact (eqA a A0).\nDefined.\n \nDefinition eqTerm : Term -> Term -> Prop.\nintros H'; case H'.\nintros a a' H'2; case H'2.\nintros b b'; exact (eqA a b /\\ a' = b').\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nTheorem eqTerm_refl : reflexive Term eqTerm.\nred in |- *.\nintros x; case x; simpl in |- *; auto.\nQed.\n \nTheorem eqTerm_sym : symmetric Term eqTerm.\nred in |- *.\nintros x y; case x; case y; simpl in |- *; intuition.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem eqTerm_trans : transitive Term eqTerm.\nred in |- *.\nintros x y z; case x; case y; case z; simpl in |- *; intuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := a0); auto.\nrewrite H2; auto.\nQed.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition T2M : Term -> mon n.\nintros t; case t; intros a m; exact m.\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition eqT (a b : Term) : Prop := T2M a = T2M b.\nHint Unfold eqT.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nLemma eqT_refl : reflexive _ eqT.\nred in |- *; auto.\nQed.\n \n",
                "context_tokens": 543,
                "proof_start_offset": 2193,
                "proof_end_offset": 2249,
                "proof": "Lemma eqT_sym : symmetric _ eqT.\nProof.\nred in |- *; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma eqT_sym : symmetric _ eqT.\nred in |- *; auto.\nQed.",
                    "Lemma eqT_sym : symmetric _ eqT.\nred in |- *; auto.\nQed.",
                    "Lemma eqT_sym : symmetric _ eqT.\nred in |- *; auto.\nQed.",
                    "Lemma eqT_sym : symmetric _ eqT.\nred in |- *; auto.\nQed.",
                    "Lemma eqT_sym : symmetric _ eqT.\nred in |- *; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/Term.v",
                "context": "(* This code is copyrighted by its authors; it is distributed under  *)\n(* the terms of the LGPL license (see LICENSE and description files) *)\n\n(****************************************************************************\n                                                                           \n          Buchberger : Terms                           \n                                                                           \n          Laurent Thery April 01                          \n                                                                           \n  ****************************************************************************)\nRequire Import Relation_Definitions.\nRequire Import CoefStructure.\nRequire Import moreCoefStructure.\nRequire Import OrderStructure.\nRequire Import Monomials.\nSection Term.\nLoad \"hCoefStructure\".\nLoad \"mCoefStructure\".\nLoad \"hOrderStructure\".\nLoad \"mOrderStructure\".\n \nDefinition M1 := zero_mon n.\n \nDefinition Term := (A * mon n)%type.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition zeroP : Term -> Prop.\nintros H'; case H'.\nintros a H'1; exact (eqA a A0).\nDefined.\n \nDefinition eqTerm : Term -> Term -> Prop.\nintros H'; case H'.\nintros a a' H'2; case H'2.\nintros b b'; exact (eqA a b /\\ a' = b').\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nTheorem eqTerm_refl : reflexive Term eqTerm.\nred in |- *.\nintros x; case x; simpl in |- *; auto.\nQed.\n \nTheorem eqTerm_sym : symmetric Term eqTerm.\nred in |- *.\nintros x y; case x; case y; simpl in |- *; intuition.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem eqTerm_trans : transitive Term eqTerm.\nred in |- *.\nintros x y z; case x; case y; case z; simpl in |- *; intuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := a0); auto.\nrewrite H2; auto.\nQed.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition T2M : Term -> mon n.\nintros t; case t; intros a m; exact m.\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition eqT (a b : Term) : Prop := T2M a = T2M b.\nHint Unfold eqT.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nLemma eqT_refl : reflexive _ eqT.\nred in |- *; auto.\nQed.\n \nLemma eqT_sym : symmetric _ eqT.\nred in |- *; auto.\nQed.\n \n",
                "context_tokens": 564,
                "proof_start_offset": 2252,
                "proof_end_offset": 2364,
                "proof": "Lemma eqT_trans : transitive _ eqT.\nProof.\nred in |- *; unfold eqT in |- *.\nintros x y z H' H'0; rewrite H'; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma eqT_trans : transitive _ eqT.\nred in |- *; auto.\nQed.",
                    "Lemma eqT_trans : transitive _ eqT.\nred in |- *; auto.\nQed.",
                    "Lemma eqT_trans : transitive _ eqT.\nred in |- *; auto.\nQed.",
                    "Lemma eqT_trans : transitive _ eqT.\nred in |- *; auto.\nQed.",
                    "Lemma eqT_trans : transitive _ eqT.\nred in |- *; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/Term.v",
                "context": "ighted by its authors; it is distributed under  *)\n(* the terms of the LGPL license (see LICENSE and description files) *)\n\n(****************************************************************************\n                                                                           \n          Buchberger : Terms                           \n                                                                           \n          Laurent Thery April 01                          \n                                                                           \n  ****************************************************************************)\nRequire Import Relation_Definitions.\nRequire Import CoefStructure.\nRequire Import moreCoefStructure.\nRequire Import OrderStructure.\nRequire Import Monomials.\nSection Term.\nLoad \"hCoefStructure\".\nLoad \"mCoefStructure\".\nLoad \"hOrderStructure\".\nLoad \"mOrderStructure\".\n \nDefinition M1 := zero_mon n.\n \nDefinition Term := (A * mon n)%type.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition zeroP : Term -> Prop.\nintros H'; case H'.\nintros a H'1; exact (eqA a A0).\nDefined.\n \nDefinition eqTerm : Term -> Term -> Prop.\nintros H'; case H'.\nintros a a' H'2; case H'2.\nintros b b'; exact (eqA a b /\\ a' = b').\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nTheorem eqTerm_refl : reflexive Term eqTerm.\nred in |- *.\nintros x; case x; simpl in |- *; auto.\nQed.\n \nTheorem eqTerm_sym : symmetric Term eqTerm.\nred in |- *.\nintros x y; case x; case y; simpl in |- *; intuition.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem eqTerm_trans : transitive Term eqTerm.\nred in |- *.\nintros x y z; case x; case y; case z; simpl in |- *; intuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := a0); auto.\nrewrite H2; auto.\nQed.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition T2M : Term -> mon n.\nintros t; case t; intros a m; exact m.\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition eqT (a b : Term) : Prop := T2M a = T2M b.\nHint Unfold eqT.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nLemma eqT_refl : reflexive _ eqT.\nred in |- *; auto.\nQed.\n \nLemma eqT_sym : symmetric _ eqT.\nred in |- *; auto.\nQed.\n \nLemma eqT_trans : transitive _ eqT.\nred in |- *; unfold eqT in |- *.\nintros x y z H' H'0; rewrite H'; auto.\nQed.\n \n",
                "context_tokens": 601,
                "proof_start_offset": 2367,
                "proof_end_offset": 2492,
                "proof": "Theorem eqTerm_imp_eqT : forall a b : Term, eqTerm a b -> eqT a b.\nProof.\nintros a b; case a; case b; simpl in |- *; intuition.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem eqTerm_imp_eqT : forall a b : Term, eqTerm a b -> eqT a b.\nred in |- *; auto.\nQed.",
                    "Theorem eqTerm_imp_eqT : forall a b : Term, eqTerm a b -> eqT a b.\nred in |- *; auto.\nQed.",
                    "Theorem eqTerm_imp_eqT : forall a b : Term, eqTerm a b -> eqT a b.\nintros a b H'; case H'; intros a H'0; exact (eqA_refl a b H'0); auto.\nQed.",
                    "Theorem eqTerm_imp_eqT : forall a b : Term, eqTerm a b -> eqT a b.\nred in |- *; auto.\nQed.",
                    "Theorem eqTerm_imp_eqT : forall a b : Term, eqTerm a b -> eqT a b.\nred in |- *; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/Term.v",
                "context": "**********************************************************************\n                                                                           \n          Buchberger : Terms                           \n                                                                           \n          Laurent Thery April 01                          \n                                                                           \n  ****************************************************************************)\nRequire Import Relation_Definitions.\nRequire Import CoefStructure.\nRequire Import moreCoefStructure.\nRequire Import OrderStructure.\nRequire Import Monomials.\nSection Term.\nLoad \"hCoefStructure\".\nLoad \"mCoefStructure\".\nLoad \"hOrderStructure\".\nLoad \"mOrderStructure\".\n \nDefinition M1 := zero_mon n.\n \nDefinition Term := (A * mon n)%type.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition zeroP : Term -> Prop.\nintros H'; case H'.\nintros a H'1; exact (eqA a A0).\nDefined.\n \nDefinition eqTerm : Term -> Term -> Prop.\nintros H'; case H'.\nintros a a' H'2; case H'2.\nintros b b'; exact (eqA a b /\\ a' = b').\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nTheorem eqTerm_refl : reflexive Term eqTerm.\nred in |- *.\nintros x; case x; simpl in |- *; auto.\nQed.\n \nTheorem eqTerm_sym : symmetric Term eqTerm.\nred in |- *.\nintros x y; case x; case y; simpl in |- *; intuition.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem eqTerm_trans : transitive Term eqTerm.\nred in |- *.\nintros x y z; case x; case y; case z; simpl in |- *; intuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := a0); auto.\nrewrite H2; auto.\nQed.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition T2M : Term -> mon n.\nintros t; case t; intros a m; exact m.\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition eqT (a b : Term) : Prop := T2M a = T2M b.\nHint Unfold eqT.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nLemma eqT_refl : reflexive _ eqT.\nred in |- *; auto.\nQed.\n \nLemma eqT_sym : symmetric _ eqT.\nred in |- *; auto.\nQed.\n \nLemma eqT_trans : transitive _ eqT.\nred in |- *; unfold eqT in |- *.\nintros x y z H' H'0; rewrite H'; auto.\nQed.\n \nTheorem eqTerm_imp_eqT : forall a b : Term, eqTerm a b -> eqT a b.\nintros a b; case a; case b; simpl in |- *; intuition.\nQed.\n \n",
                "context_tokens": 618,
                "proof_start_offset": 2495,
                "proof_end_offset": 2864,
                "proof": "Theorem eqTerm_dec : forall x y : Term, {eqTerm x y} + {~ eqTerm x y}.\nProof.\nintros x y; case x; case y; simpl in |- *.\nintros b2 c2 b3 c3.\ncase (eqA_dec b3 b2); intros eqAZ; auto.\ncase (eqmon_dec n c3 c2); intros eqAZ1; auto.\nright; red in |- *; intros H'; elim H'; intros H'0 H'1; clear H'; auto.\nright; red in |- *; intros H'; elim H'; intros H'0 H'1; clear H'; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem eqTerm_dec : forall x y : Term, {eqTerm x y} + {~ eqTerm x y}.\nintros a b; case b; simpl in |- *; intuition.\nQed.",
                    "Theorem eqTerm_dec : forall x y : Term, {eqTerm x y} + {~ eqTerm x y}.\nintros a b; case b; simpl in |- *; intuition.\nQed.",
                    "Theorem eqTerm_dec : forall x y : Term, {eqTerm x y} + {~ eqTerm x y}.\nintros a b; case b; simpl in |- *; intuition.\nQed.",
                    "Theorem eqTerm_dec : forall x y : Term, {eqTerm x y} + {~ eqTerm x y}.\nintros x y H' H'0; case H'0; case H'0; simpl in |- *; intuition.\nQed.",
                    "Theorem eqTerm_dec : forall x y : Term, {eqTerm x y} + {~ eqTerm x y}.\nintros x y H'; elim H'; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/Term.v",
                "context": "****)\nRequire Import Relation_Definitions.\nRequire Import CoefStructure.\nRequire Import moreCoefStructure.\nRequire Import OrderStructure.\nRequire Import Monomials.\nSection Term.\nLoad \"hCoefStructure\".\nLoad \"mCoefStructure\".\nLoad \"hOrderStructure\".\nLoad \"mOrderStructure\".\n \nDefinition M1 := zero_mon n.\n \nDefinition Term := (A * mon n)%type.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition zeroP : Term -> Prop.\nintros H'; case H'.\nintros a H'1; exact (eqA a A0).\nDefined.\n \nDefinition eqTerm : Term -> Term -> Prop.\nintros H'; case H'.\nintros a a' H'2; case H'2.\nintros b b'; exact (eqA a b /\\ a' = b').\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nTheorem eqTerm_refl : reflexive Term eqTerm.\nred in |- *.\nintros x; case x; simpl in |- *; auto.\nQed.\n \nTheorem eqTerm_sym : symmetric Term eqTerm.\nred in |- *.\nintros x y; case x; case y; simpl in |- *; intuition.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem eqTerm_trans : transitive Term eqTerm.\nred in |- *.\nintros x y z; case x; case y; case z; simpl in |- *; intuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := a0); auto.\nrewrite H2; auto.\nQed.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition T2M : Term -> mon n.\nintros t; case t; intros a m; exact m.\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition eqT (a b : Term) : Prop := T2M a = T2M b.\nHint Unfold eqT.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nLemma eqT_refl : reflexive _ eqT.\nred in |- *; auto.\nQed.\n \nLemma eqT_sym : symmetric _ eqT.\nred in |- *; auto.\nQed.\n \nLemma eqT_trans : transitive _ eqT.\nred in |- *; unfold eqT in |- *.\nintros x y z H' H'0; rewrite H'; auto.\nQed.\n \nTheorem eqTerm_imp_eqT : forall a b : Term, eqTerm a b -> eqT a b.\nintros a b; case a; case b; simpl in |- *; intuition.\nQed.\n \nTheorem eqTerm_dec : forall x y : Term, {eqTerm x y} + {~ eqTerm x y}.\nintros x y; case x; case y; simpl in |- *.\nintros b2 c2 b3 c3.\ncase (eqA_dec b3 b2); intros eqAZ; auto.\ncase (eqmon_dec n c3 c2); intros eqAZ1; auto.\nright; red in |- *; intros H'; elim H'; intros H'0 H'1; clear H'; auto.\nright; red in |- *; intros H'; elim H'; intros H'0 H'1; clear H'; auto.\nQed.\n \n",
                "context_tokens": 735,
                "proof_start_offset": 2867,
                "proof_end_offset": 3131,
                "proof": "Theorem eqT_zerop_is_eqTerm : forall a b : Term, eqT a b -> zeroP a -> zeroP b -> eqTerm a b.\nProof.\nintros a b; case a; case b; simpl in |- *; auto.\nintuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem eqT_zerop_is_eqTerm : forall a b : Term, eqT a b -> zeroP a -> zeroP b -> eqTerm a b.\nintros a b; case b; simpl in |- *; intuition.\nintros a b; case b; simpl in |- *; intuition.\nintros b; case b; simpl in |- *; intuition.\nQed.",
                    "Theorem eqT_zerop_is_eqTerm : forall a b : Term, eqT a b -> zeroP a -> zeroP b -> eqTerm a b.\nintros x y H'; case H'; auto.\nintros x y H'0 H'0; case H'0; intros H'0 H'1; elim H'0; intros H'1 H'2; elim H'2; intros H'2; elim H'0; intros H'2 H'3; elim H'3; intros H'3; elim H'4; intros H'4; elim H'5; intros H'4 H'5;\n elim H'3; intros H'5; elim H'6; intros H'6; elim H'7; intros H'6 H'7; elim H'7; intros H'8 H'8; elim H'8; intros H'8; elim H'7; intros H'8 H'8; elim H'8;\n intros H'8 H'8; elim H'8; intros H'8; elim H'8; intros H'8; elim H'9; intros H'8; elim H'9; intros H'9; elim H'9; intros H'9; elim H'10;\n intros H'8; elim H'9; intros HQed.",
                    "Theorem eqT_zerop_is_eqTerm : forall a b : Term, eqT a b -> zeroP a -> zeroP b -> eqTerm a b.\nintros a b; case b; simpl in |- *; intuition.\nQed.",
                    "Theorem eqT_zerop_is_eqTerm : forall a b : Term, eqT a b -> zeroP a -> zeroP b -> eqTerm a b.\nintros a b; case b; simpl in |- *; intuition.\nQed.",
                    "Theorem eqT_zerop_is_eqTerm : forall a b : Term, eqT a b -> zeroP a -> zeroP b -> eqTerm a b.\nintros x y; case x; simpl in |- *; intuition.\nintros x y H'0; elim H'1; intros H'2; clear H'2; auto.\nright; red in |- *; intros H'1 H'2; elim H'2; intros H'2; clear H'2; auto.\nright; red in |- *; intros H'2; elim H'2; intros H'3; clear H'2; auto.\nright; red in |- *; intros H'2 H'3; elim H'2; intros H'3 H'4; clear H'3; auto.\nright; red in |- *; intros H'2; elim H'3; intros H'3; clear H'3 H'4; auto.\nright; red in |- *; intros H'3 H'4; elim H'4; intros H'5 H'5; clear H'6; auto.\nright; red in |- *; intros H'4; elim H'4; intros H'6; clear H'4; auto.\nright; red in |- *; intros H'4; elim H'4; intros H'5; clear H'Qed."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/Term.v",
                "context": ".\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition zeroP : Term -> Prop.\nintros H'; case H'.\nintros a H'1; exact (eqA a A0).\nDefined.\n \nDefinition eqTerm : Term -> Term -> Prop.\nintros H'; case H'.\nintros a a' H'2; case H'2.\nintros b b'; exact (eqA a b /\\ a' = b').\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nTheorem eqTerm_refl : reflexive Term eqTerm.\nred in |- *.\nintros x; case x; simpl in |- *; auto.\nQed.\n \nTheorem eqTerm_sym : symmetric Term eqTerm.\nred in |- *.\nintros x y; case x; case y; simpl in |- *; intuition.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem eqTerm_trans : transitive Term eqTerm.\nred in |- *.\nintros x y z; case x; case y; case z; simpl in |- *; intuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := a0); auto.\nrewrite H2; auto.\nQed.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition T2M : Term -> mon n.\nintros t; case t; intros a m; exact m.\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition eqT (a b : Term) : Prop := T2M a = T2M b.\nHint Unfold eqT.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nLemma eqT_refl : reflexive _ eqT.\nred in |- *; auto.\nQed.\n \nLemma eqT_sym : symmetric _ eqT.\nred in |- *; auto.\nQed.\n \nLemma eqT_trans : transitive _ eqT.\nred in |- *; unfold eqT in |- *.\nintros x y z H' H'0; rewrite H'; auto.\nQed.\n \nTheorem eqTerm_imp_eqT : forall a b : Term, eqTerm a b -> eqT a b.\nintros a b; case a; case b; simpl in |- *; intuition.\nQed.\n \nTheorem eqTerm_dec : forall x y : Term, {eqTerm x y} + {~ eqTerm x y}.\nintros x y; case x; case y; simpl in |- *.\nintros b2 c2 b3 c3.\ncase (eqA_dec b3 b2); intros eqAZ; auto.\ncase (eqmon_dec n c3 c2); intros eqAZ1; auto.\nright; red in |- *; intros H'; elim H'; intros H'0 H'1; clear H'; auto.\nright; red in |- *; intros H'; elim H'; intros H'0 H'1; clear H'; auto.\nQed.\n \nTheorem eqT_zerop_is_eqTerm :\n forall a b : Term, eqT a b -> zeroP a -> zeroP b -> eqTerm a b.\nintros a b; case a; case b; simpl in |- *; auto.\nintuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \n",
                "context_tokens": 745,
                "proof_start_offset": 3134,
                "proof_end_offset": 3267,
                "proof": "Theorem zeroP_dec : forall x : Term, {zeroP x} + {~ zeroP x}.\nProof.\nintros x; case x; simpl in |- *.\nintros b H'.\napply eqA_dec; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem zeroP_dec : forall x : Term, {zeroP x} + {~ zeroP x}.\nintros x; case x; simpl in |- *; auto.\nQed.",
                    "Theorem zeroP_dec : forall x : Term, {zeroP x} + {~ zeroP x}.\nintros x y; case x; simpl in |- *; auto.\nQed.",
                    "Theorem zeroP_dec : forall x : Term, {zeroP x} + {~ zeroP x}.\nintros x; case x; simpl in |- *; auto.\nQed.",
                    "Theorem zeroP_dec : forall x : Term, {zeroP x} + {~ zeroP x}.\nintros x; case x; simpl in |- *; auto.\nQed.",
                    "Theorem zeroP_dec : forall x : Term, {zeroP x} + {~ zeroP x}.\nintros x y; case x; simpl in |- *; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/Term.v",
                "context": ".\nintros H'; case H'.\nintros a a' H'2; case H'2.\nintros b b'; exact (eqA a b /\\ a' = b').\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nTheorem eqTerm_refl : reflexive Term eqTerm.\nred in |- *.\nintros x; case x; simpl in |- *; auto.\nQed.\n \nTheorem eqTerm_sym : symmetric Term eqTerm.\nred in |- *.\nintros x y; case x; case y; simpl in |- *; intuition.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem eqTerm_trans : transitive Term eqTerm.\nred in |- *.\nintros x y z; case x; case y; case z; simpl in |- *; intuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := a0); auto.\nrewrite H2; auto.\nQed.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition T2M : Term -> mon n.\nintros t; case t; intros a m; exact m.\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition eqT (a b : Term) : Prop := T2M a = T2M b.\nHint Unfold eqT.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nLemma eqT_refl : reflexive _ eqT.\nred in |- *; auto.\nQed.\n \nLemma eqT_sym : symmetric _ eqT.\nred in |- *; auto.\nQed.\n \nLemma eqT_trans : transitive _ eqT.\nred in |- *; unfold eqT in |- *.\nintros x y z H' H'0; rewrite H'; auto.\nQed.\n \nTheorem eqTerm_imp_eqT : forall a b : Term, eqTerm a b -> eqT a b.\nintros a b; case a; case b; simpl in |- *; intuition.\nQed.\n \nTheorem eqTerm_dec : forall x y : Term, {eqTerm x y} + {~ eqTerm x y}.\nintros x y; case x; case y; simpl in |- *.\nintros b2 c2 b3 c3.\ncase (eqA_dec b3 b2); intros eqAZ; auto.\ncase (eqmon_dec n c3 c2); intros eqAZ1; auto.\nright; red in |- *; intros H'; elim H'; intros H'0 H'1; clear H'; auto.\nright; red in |- *; intros H'; elim H'; intros H'0 H'1; clear H'; auto.\nQed.\n \nTheorem eqT_zerop_is_eqTerm :\n forall a b : Term, eqT a b -> zeroP a -> zeroP b -> eqTerm a b.\nintros a b; case a; case b; simpl in |- *; auto.\nintuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem zeroP_dec : forall x : Term, {zeroP x} + {~ zeroP x}.\nintros x; case x; simpl in |- *.\nintros b H'.\napply eqA_dec; auto.\nQed.\n \n",
                "context_tokens": 740,
                "proof_start_offset": 3270,
                "proof_end_offset": 3522,
                "proof": "Theorem zeroP_comp_eqTerm : forall a b : Term, zeroP a -> eqTerm a b -> zeroP b.\nProof.\nintros a b; case a; case b; simpl in |- *; auto.\nintuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := a1); auto; apply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem zeroP_comp_eqTerm : forall a b : Term, zeroP a -> eqTerm a b -> zeroP b.\nintros a b H'; case b; simpl in |- *; auto.\nQed.",
                    "Theorem zeroP_comp_eqTerm : forall a b : Term, zeroP a -> eqTerm a b -> zeroP b.\nintros a b; case b; simpl in |- *; intuition.\nQed.",
                    "Theorem zeroP_comp_eqTerm : forall a b : Term, zeroP a -> eqTerm a b -> zeroP b.\nintros a b; case b; simpl in |- *.\nintros b H' H'0; case b; simpl in |- *.\nintros b' H'0; case b; simpl in |- *.\nintros b' H'0; case b'; simpl in |- *; auto.\nintros b' H'0 H'1; case b'; simpl in |- *; auto.\nintros b' H'0; case b'; simpl in |- *; auto.\nintros b' H'0; case b'; simpl in |- *; auto.\nintros b'0; case b'; simpl in |- *; auto.\nintros b'0; case b'; simpl in |- *; auto.\nintros b'0 H'0; case b'; simpl in |- *; auto.\nintros b'0 H'0; case b'; simpl in |- *; auto.\nintros b'0; case b'; simpl in |- *; auto.\nintros b'0; case b'; simpl in |- *; auto.\nintros b'0; case b'; simpl in |- *; auto.\nintros b'0; case b'; simpl in |- *; auto.\nintros b'0; case b'; simpl in |- *; auto.\nQed.",
                    "Theorem zeroP_comp_eqTerm : forall a b : Term, zeroP a -> eqTerm a b -> zeroP b.\nintros a b; case b; simpl in |- *; auto.\nQed.",
                    "Theorem zeroP_comp_eqTerm : forall a b : Term, zeroP a -> eqTerm a b -> zeroP b.\nintros a b; case b; simpl in |- *.\nintros b H'.\napply (eqA_trans _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _Qed."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/Term.v",
                "context": " |- *.\nintros x y; case x; case y; simpl in |- *; intuition.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem eqTerm_trans : transitive Term eqTerm.\nred in |- *.\nintros x y z; case x; case y; case z; simpl in |- *; intuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := a0); auto.\nrewrite H2; auto.\nQed.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition T2M : Term -> mon n.\nintros t; case t; intros a m; exact m.\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition eqT (a b : Term) : Prop := T2M a = T2M b.\nHint Unfold eqT.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nLemma eqT_refl : reflexive _ eqT.\nred in |- *; auto.\nQed.\n \nLemma eqT_sym : symmetric _ eqT.\nred in |- *; auto.\nQed.\n \nLemma eqT_trans : transitive _ eqT.\nred in |- *; unfold eqT in |- *.\nintros x y z H' H'0; rewrite H'; auto.\nQed.\n \nTheorem eqTerm_imp_eqT : forall a b : Term, eqTerm a b -> eqT a b.\nintros a b; case a; case b; simpl in |- *; intuition.\nQed.\n \nTheorem eqTerm_dec : forall x y : Term, {eqTerm x y} + {~ eqTerm x y}.\nintros x y; case x; case y; simpl in |- *.\nintros b2 c2 b3 c3.\ncase (eqA_dec b3 b2); intros eqAZ; auto.\ncase (eqmon_dec n c3 c2); intros eqAZ1; auto.\nright; red in |- *; intros H'; elim H'; intros H'0 H'1; clear H'; auto.\nright; red in |- *; intros H'; elim H'; intros H'0 H'1; clear H'; auto.\nQed.\n \nTheorem eqT_zerop_is_eqTerm :\n forall a b : Term, eqT a b -> zeroP a -> zeroP b -> eqTerm a b.\nintros a b; case a; case b; simpl in |- *; auto.\nintuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem zeroP_dec : forall x : Term, {zeroP x} + {~ zeroP x}.\nintros x; case x; simpl in |- *.\nintros b H'.\napply eqA_dec; auto.\nQed.\n \nTheorem zeroP_comp_eqTerm :\n forall a b : Term, zeroP a -> eqTerm a b -> zeroP b.\nintros a b; case a; case b; simpl in |- *; auto.\nintuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := a1); auto;\n apply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n\n",
                "context_tokens": 737,
                "proof_start_offset": 3524,
                "proof_end_offset": 3738,
                "proof": "Theorem nzeroP_comp_eqTerm : forall a b : Term, ~ zeroP a -> eqTerm a b -> ~ zeroP b.\nProof.\nintros a b H' H'0; red in |- *; intros H'1.\napply H'.\napply zeroP_comp_eqTerm with (a := b); auto.\napply eqTerm_sym; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem nzeroP_comp_eqTerm : forall a b : Term, ~ zeroP a -> eqTerm a b -> ~ zeroP b.\nintros a b; case b; simpl in |- *; intuition.\nQed.",
                    "Theorem nzeroP_comp_eqTerm : forall a b : Term, ~ zeroP a -> eqTerm a b -> ~ zeroP b.\nintros a b; case b; simpl in |- *; intuition.\nQed.",
                    "Theorem nzeroP_comp_eqTerm : forall a b : Term, ~ zeroP a -> eqTerm a b -> ~ zeroP b.\nintros a b; case b; simpl in |- *; auto.\nQed.",
                    "Theorem nzeroP_comp_eqTerm : forall a b : Term, ~ zeroP a -> eqTerm a b -> ~ zeroP b.\nintros a b; case b; simpl in |- *; intuition.\nQed.",
                    "Theorem nzeroP_comp_eqTerm : forall a b : Term, ~ zeroP a -> eqTerm a b -> ~ zeroP b.\nintros a b; case b; simpl in |- *; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/Term.v",
                "context": " in |- *; intuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := a0); auto.\nrewrite H2; auto.\nQed.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition T2M : Term -> mon n.\nintros t; case t; intros a m; exact m.\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition eqT (a b : Term) : Prop := T2M a = T2M b.\nHint Unfold eqT.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nLemma eqT_refl : reflexive _ eqT.\nred in |- *; auto.\nQed.\n \nLemma eqT_sym : symmetric _ eqT.\nred in |- *; auto.\nQed.\n \nLemma eqT_trans : transitive _ eqT.\nred in |- *; unfold eqT in |- *.\nintros x y z H' H'0; rewrite H'; auto.\nQed.\n \nTheorem eqTerm_imp_eqT : forall a b : Term, eqTerm a b -> eqT a b.\nintros a b; case a; case b; simpl in |- *; intuition.\nQed.\n \nTheorem eqTerm_dec : forall x y : Term, {eqTerm x y} + {~ eqTerm x y}.\nintros x y; case x; case y; simpl in |- *.\nintros b2 c2 b3 c3.\ncase (eqA_dec b3 b2); intros eqAZ; auto.\ncase (eqmon_dec n c3 c2); intros eqAZ1; auto.\nright; red in |- *; intros H'; elim H'; intros H'0 H'1; clear H'; auto.\nright; red in |- *; intros H'; elim H'; intros H'0 H'1; clear H'; auto.\nQed.\n \nTheorem eqT_zerop_is_eqTerm :\n forall a b : Term, eqT a b -> zeroP a -> zeroP b -> eqTerm a b.\nintros a b; case a; case b; simpl in |- *; auto.\nintuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem zeroP_dec : forall x : Term, {zeroP x} + {~ zeroP x}.\nintros x; case x; simpl in |- *.\nintros b H'.\napply eqA_dec; auto.\nQed.\n \nTheorem zeroP_comp_eqTerm :\n forall a b : Term, zeroP a -> eqTerm a b -> zeroP b.\nintros a b; case a; case b; simpl in |- *; auto.\nintuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := a1); auto;\n apply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n\nTheorem nzeroP_comp_eqTerm :\n forall a b : Term, ~ zeroP a -> eqTerm a b -> ~ zeroP b.\nintros a b H' H'0; red in |- *; intros H'1.\napply H'.\napply zeroP_comp_eqTerm with (a := b); auto.\napply eqTerm_sym; auto.\nQed.\n\n\nSet Implicit Arguments.\nUnset Strict Implicit.\n \n",
                "context_tokens": 757,
                "proof_start_offset": 3790,
                "proof_end_offset": 3932,
                "proof": "Definition plusTerm : Term -> Term -> Term.\nProof.\nintros x; case x; intros b2 c2; intros y; case y; intros b3 c3; exact (plusA b2 b3, c2).\nDefined.",
                "end_command": "Defined.",
                "generated_proofs": [
                    "Definition plusTerm : Term -> Term -> Term.\nintros a b H' H'0; red in |- *; intros H'1 H'2; red in |- *; intros H'3; red in |- *; intros H'3; red in H'4; intros H'4; red in H'4; intros H'5; red in H'4; intros H'5 H'6; red in H'4; intros H'5; red in H'5; intros H'6 H'7; red in H'6; intros H'7; red in H'8; intros H'6; red in H'7; intros; red in H'8; intros H'9; red in H'8; intros; red in H'8; intros; red in H'8; intros; red in H'8; intros; red in H'8; intros; red in H'8; intros; red in H'8; destruct H'8; red in H'9; intros; red in H'8;\n  elim H'9; intros; red in H'8; intros; red in H'8;\n  elim H'8; intros; red in H'8; red in H'8Defined.",
                    "Definition plusTerm : Term -> Term -> Term.\nintros a b H'; case b; simpl in |- *; auto.\nDefined.",
                    "Definition plusTerm : Term -> Term -> Term.\nProof.\nintros a b H'; case b; simpl in |- *; auto.\nDefined.",
                    "Definition plusTerm : Term -> Term -> Term.\n  Proof.\nintros a b H'; case b; simpl in |- *; auto.\nDefined.",
                    "Definition plusTerm : Term -> Term -> Term.\nProof.\n  intros a b H'; case b; simpl in |- *; auto.\nDefined."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/Term.v",
                "context": ".\nUnset Implicit Arguments.\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition eqT (a b : Term) : Prop := T2M a = T2M b.\nHint Unfold eqT.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nLemma eqT_refl : reflexive _ eqT.\nred in |- *; auto.\nQed.\n \nLemma eqT_sym : symmetric _ eqT.\nred in |- *; auto.\nQed.\n \nLemma eqT_trans : transitive _ eqT.\nred in |- *; unfold eqT in |- *.\nintros x y z H' H'0; rewrite H'; auto.\nQed.\n \nTheorem eqTerm_imp_eqT : forall a b : Term, eqTerm a b -> eqT a b.\nintros a b; case a; case b; simpl in |- *; intuition.\nQed.\n \nTheorem eqTerm_dec : forall x y : Term, {eqTerm x y} + {~ eqTerm x y}.\nintros x y; case x; case y; simpl in |- *.\nintros b2 c2 b3 c3.\ncase (eqA_dec b3 b2); intros eqAZ; auto.\ncase (eqmon_dec n c3 c2); intros eqAZ1; auto.\nright; red in |- *; intros H'; elim H'; intros H'0 H'1; clear H'; auto.\nright; red in |- *; intros H'; elim H'; intros H'0 H'1; clear H'; auto.\nQed.\n \nTheorem eqT_zerop_is_eqTerm :\n forall a b : Term, eqT a b -> zeroP a -> zeroP b -> eqTerm a b.\nintros a b; case a; case b; simpl in |- *; auto.\nintuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem zeroP_dec : forall x : Term, {zeroP x} + {~ zeroP x}.\nintros x; case x; simpl in |- *.\nintros b H'.\napply eqA_dec; auto.\nQed.\n \nTheorem zeroP_comp_eqTerm :\n forall a b : Term, zeroP a -> eqTerm a b -> zeroP b.\nintros a b; case a; case b; simpl in |- *; auto.\nintuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := a1); auto;\n apply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n\nTheorem nzeroP_comp_eqTerm :\n forall a b : Term, ~ zeroP a -> eqTerm a b -> ~ zeroP b.\nintros a b H' H'0; red in |- *; intros H'1.\napply H'.\napply zeroP_comp_eqTerm with (a := b); auto.\napply eqTerm_sym; auto.\nQed.\n\n\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition plusTerm : Term -> Term -> Term.\nintros x; case x; intros b2 c2; intros y; case y; intros b3 c3;\n exact (plusA b2 b3, c2).\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \n",
                "context_tokens": 736,
                "proof_start_offset": 3982,
                "proof_end_offset": 4281,
                "proof": "Theorem zeroP_plusTermr : forall a b : Term, eqT a b -> zeroP b -> eqTerm a (plusTerm a b).\nProof.\nintros a b; case a; case b; simpl in |- *; auto.\nintros a1 m1 a2 m2 H1 H2; split; auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA a2 A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem zeroP_plusTermr : forall a b : Term, eqT a b -> zeroP b -> eqTerm a (plusTerm a b).\nintros a b H' H'0; red in |- *; intros H'0; elim H'0; intros H'0; elim H'0; intros H'1 H'2; elim H'0; intros H'2; elim H'1; intros H'2 H'2; elim H'2; intros H'2 H'3; elim H'3; intros H'3 H'3; elim H'3; intros H'4 H'3; elim H'3; intros H'4 H'4; elim H'4; intros H'4 H'5 H'6; elim H'3; intros H'7 H'7 H'7; elim H'7; intros H'8 H'8; elim H'7; intros H'8 H'8; elim H'7; intros H'8; elim H'7; intros H'8; elim H'8; intros H'8; elim H'8; intros H'8; elim H'7; intros H'8 H'8; elim H'9; intros H'9; elim H'9; intros H'9; elim H'8; intros H'Qed.",
                    "Theorem zeroP_plusTermr : forall a b : Term, eqT a b -> zeroP b -> eqTerm a (plusTerm a b).\nintros x; case b; simpl in |- *; auto.\nQed.",
                    "Theorem zeroP_plusTermr : forall a b : Term, eqT a b -> zeroP b -> eqTerm a (plusTerm a b).\nintros x b H' H'0; red in |- *; intros b0 H'0; red in |- *; intros b0 H'0; red in |- *; intros b0 H'0; red in H'0; intros b0 H'1 H'1 H'2; red in H'1; intros b0 H'2; red in H'0; intros b0 H'2; red in H'0; intros b0 H'3; red in H'1; intros b0 H'3 H'4; red in H'1; intros b'1 H'3 H'4; red in H'2; intros b'4 H'4; red in H'3; intros b'4 H'4 H'5; red in H'3; intros b'4 H'4 H'4; red in H'3; intros b'4 H'4; red in H'4; intros b'4 H'4 H'5; red in H'4; intros b'4 H'5; red in H'4; intros b'4 H'5; red in H'4; intros b'4; red in H'Qed.",
                    "Theorem zeroP_plusTermr : forall a b : Term, eqT a b -> zeroP b -> eqTerm a (plusTerm a b).\nintros a b H' H'0; case b; simpl in |- *; auto.\nQed.",
                    "Theorem zeroP_plusTermr : forall a b : Term, eqT a b -> zeroP b -> eqTerm a (plusTerm a b).\nintros a b H' H'0; red in |- *; intros H'0; elim H'0; intros H'0; elim H'0; intros H'0; elim H'0; intros H'0; elim H'0; intros H'1; elim H'0; intros H'0; elim H'1; intros H'1; elim H'0; intros H'1; elim H'1; intros H'2; elim H'2; intros H'3; elim H'1; intros H'2; elim H'2; intros H'3; elim H'3; intros H'3; elim H'3; intros H'4; elim H'3; intros H'4; elim H'4; intros H'4; elim H'3; intros H'4; elim H'4; intros H'5; elim H'7; intros H'5; elim H'5; intros H'6; elim H'7; intros H'5; elim H'6; intros H'6; elim H'6; intros H'6; elim H'7; intros H'6; elim H'7; intros HQed."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/Term.v",
                "context": " H' H'0; rewrite H'; auto.\nQed.\n \nTheorem eqTerm_imp_eqT : forall a b : Term, eqTerm a b -> eqT a b.\nintros a b; case a; case b; simpl in |- *; intuition.\nQed.\n \nTheorem eqTerm_dec : forall x y : Term, {eqTerm x y} + {~ eqTerm x y}.\nintros x y; case x; case y; simpl in |- *.\nintros b2 c2 b3 c3.\ncase (eqA_dec b3 b2); intros eqAZ; auto.\ncase (eqmon_dec n c3 c2); intros eqAZ1; auto.\nright; red in |- *; intros H'; elim H'; intros H'0 H'1; clear H'; auto.\nright; red in |- *; intros H'; elim H'; intros H'0 H'1; clear H'; auto.\nQed.\n \nTheorem eqT_zerop_is_eqTerm :\n forall a b : Term, eqT a b -> zeroP a -> zeroP b -> eqTerm a b.\nintros a b; case a; case b; simpl in |- *; auto.\nintuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem zeroP_dec : forall x : Term, {zeroP x} + {~ zeroP x}.\nintros x; case x; simpl in |- *.\nintros b H'.\napply eqA_dec; auto.\nQed.\n \nTheorem zeroP_comp_eqTerm :\n forall a b : Term, zeroP a -> eqTerm a b -> zeroP b.\nintros a b; case a; case b; simpl in |- *; auto.\nintuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := a1); auto;\n apply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n\nTheorem nzeroP_comp_eqTerm :\n forall a b : Term, ~ zeroP a -> eqTerm a b -> ~ zeroP b.\nintros a b H' H'0; red in |- *; intros H'1.\napply H'.\napply zeroP_comp_eqTerm with (a := b); auto.\napply eqTerm_sym; auto.\nQed.\n\n\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition plusTerm : Term -> Term -> Term.\nintros x; case x; intros b2 c2; intros y; case y; intros b3 c3;\n exact (plusA b2 b3, c2).\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nTheorem zeroP_plusTermr :\n forall a b : Term, eqT a b -> zeroP b -> eqTerm a (plusTerm a b).\nintros a b; case a; case b; simpl in |- *; auto.\nintros a1 m1 a2 m2 H1 H2; split; auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA a2 A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \n",
                "context_tokens": 736,
                "proof_start_offset": 4284,
                "proof_end_offset": 4653,
                "proof": "Theorem zeroP_plusTerml : forall a b : Term, eqT a b -> zeroP a -> eqTerm b (plusTerm a b).\nProof.\nintros a b; case a; case b; simpl in |- *; auto.\nintros a1 m1 a2 m2 H1 H2; split; auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA A0 a1); auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA a1 A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem zeroP_plusTerml : forall a b : Term, eqT a b -> zeroP a -> eqTerm b (plusTerm a b).\nintros a b H'; case b; simpl in |- *; auto.\nintros a1 m2 H'0 H'0 H'1 H'1 H'2; split; auto.\napply (eqA_trans _ _ _ _ _ _ cs) with (y := plusA a2); auto.\nQed.",
                    "Theorem zeroP_plusTerml : forall a b : Term, eqT a b -> zeroP a -> eqTerm b (plusTerm a b).\nintros a b; case b; simpl in |- *; auto.\nQed.",
                    "Theorem zeroP_plusTerml : forall a b : Term, eqT a b -> zeroP a -> eqTerm b (plusTerm a b).\nintros a b; case b; simpl in |- *; auto.\nQed.",
                    "Theorem zeroP_plusTerml : forall a b : Term, eqT a b -> zeroP a -> eqTerm b (plusTerm a b).\nintros a b H' H'0; case b; simpl in |- *; auto.\nQed.",
                    "Theorem zeroP_plusTerml : forall a b : Term, eqT a b -> zeroP a -> eqTerm b (plusTerm a b).\nintros a b H' H'0; red in |- *; intros; elim H'; intros H'0 H'1 H'2; clear H'0 H'1 H'2 H'2; clear H'0 H'1 H'2 H'2 H'2; clear H'2 H'1 H'2 H'2 H'2 H'2 H'2; clear H'2 H'2 H'2 H'2 H'2 H'2 H'3 H'3'3 H'4 H'4 H'3 H'4 H'4 H'4 H'3 H'3 H'4 H'4 H'4 H'4 H'6 H'4 H'5 H'5 H'6 H'6 H'6 H'6 H'7 H'7 H'7 H'8 H'8 H'8 H'8 H'9 H'9 H'9 H'8 H'9 H'11 H'8 H'9 H'8 H'9 H'11 H'11 H'13 H'13 H'14 H'13 H'14 H'14 H'14 H'15 H'15 HQed."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/Term.v",
                "context": "'0 H'1; clear H'; auto.\nright; red in |- *; intros H'; elim H'; intros H'0 H'1; clear H'; auto.\nQed.\n \nTheorem eqT_zerop_is_eqTerm :\n forall a b : Term, eqT a b -> zeroP a -> zeroP b -> eqTerm a b.\nintros a b; case a; case b; simpl in |- *; auto.\nintuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem zeroP_dec : forall x : Term, {zeroP x} + {~ zeroP x}.\nintros x; case x; simpl in |- *.\nintros b H'.\napply eqA_dec; auto.\nQed.\n \nTheorem zeroP_comp_eqTerm :\n forall a b : Term, zeroP a -> eqTerm a b -> zeroP b.\nintros a b; case a; case b; simpl in |- *; auto.\nintuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := a1); auto;\n apply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n\nTheorem nzeroP_comp_eqTerm :\n forall a b : Term, ~ zeroP a -> eqTerm a b -> ~ zeroP b.\nintros a b H' H'0; red in |- *; intros H'1.\napply H'.\napply zeroP_comp_eqTerm with (a := b); auto.\napply eqTerm_sym; auto.\nQed.\n\n\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition plusTerm : Term -> Term -> Term.\nintros x; case x; intros b2 c2; intros y; case y; intros b3 c3;\n exact (plusA b2 b3, c2).\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nTheorem zeroP_plusTermr :\n forall a b : Term, eqT a b -> zeroP b -> eqTerm a (plusTerm a b).\nintros a b; case a; case b; simpl in |- *; auto.\nintros a1 m1 a2 m2 H1 H2; split; auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA a2 A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem zeroP_plusTerml :\n forall a b : Term, eqT a b -> zeroP a -> eqTerm b (plusTerm a b).\nintros a b; case a; case b; simpl in |- *; auto.\nintros a1 m1 a2 m2 H1 H2; split; auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA A0 a1); auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA a1 A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \n",
                "context_tokens": 725,
                "proof_start_offset": 4656,
                "proof_end_offset": 4853,
                "proof": "Theorem plusTerm_comp_l : forall a b c : Term, eqT a c -> eqT b c -> eqTerm a b -> eqTerm (plusTerm a c) (plusTerm b c).\nProof.\nintros a b c; case a; case b; case c; simpl in |- *; auto.\nintuition.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem plusTerm_comp_l : forall a b c : Term, eqT a c -> eqT b c -> eqTerm a b -> eqTerm (plusTerm a c) (plusTerm b c).\nintros a b c; case b; simpl in |- *; auto.\nintros a1 m2 H1 m2 H2; split; auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA a1); auto.\napply (eqA_trans _ _ _ _ _ csy); auto.\napply (eqA_trans _ _ _ _ _ _ _ _ csy); auto.\napply (eqA_trans _ _ _ _ _ csy); auto.\napply (eqA_trans _ _ _ _ csy); auto.\napply (eqA_trans _ _ _ _ csy); auto.\napply (eqA_trans _ _ _ csy); auto.\napply (eqA_trans _ _ _ csy); auto.\napply (eqA_trans _ _ _ csy); auto.\napply (eqA_trans _ _ csy); auto.\napply (eqA_trans _ _ csy); auto.\napply (eqA_trans _ _ csy); auto.\napply (eqA_trans _ _ csy); auto.\napply (eqA_trans _ _ csy); auto.\napply (eqA_trans _ _Qed.",
                    "Theorem plusTerm_comp_l : forall a b c : Term, eqT a c -> eqT b c -> eqTerm a b -> eqTerm (plusTerm a c) (plusTerm b c).\nintros a b c; case b; simpl in |- *; auto.\nQed.",
                    "Theorem plusTerm_comp_l : forall a b c : Term, eqT a c -> eqT b c -> eqTerm a b -> eqTerm (plusTerm a c) (plusTerm b c).\nintros a b c H' H'; red in |- *; intros H'0; elim H'0; intros H'0 H'1 H'2; clear H'0 H'0 H'1 H'2; clear H'1 H'2 H'1; clear H'1 H'2; clear H'2 H'1 H'2 H'2 H'3 H'3 H'3 H'4 H'4 H'4 H'3 H'4 H'4 H'4 H'4 H'5 H'5 H'5 H'6 H'6 H'6 H'7 H'7 H'6 H'7 H'8 H'8 H'7 H'8 H'9 H'8 H'8 H'10 H'10 H'11 H'11 H'13 H'14 H'14 H'14 H'14 H'14 H'14 H'14 H'14 H'14 H'14 H'14 H'14 H'14 H'15 H'14 H'14 H'15 H'14 H'15 H'14 H'15 H'14 H'14 H'14 H'14 H'Qed.",
                    "Theorem plusTerm_comp_l : forall a b c : Term, eqT a c -> eqT b c -> eqTerm a b -> eqTerm (plusTerm a c) (plusTerm b c).\nintros a b c; case b; simpl in |- *; auto.\nintros a1 m2 H2; case b; simpl in |- *; auto.\nQed.",
                    "Theorem plusTerm_comp_l : forall a b c : Term, eqT a c -> eqT b c -> eqTerm a b -> eqTerm (plusTerm a c) (plusTerm b c).\nintros a b c H; case b; simpl in |- *; auto.\nintros a b c H H'0; case b; simpl in |- *; auto.\nintros a1 m1 m2 H' H'0; case b; simpl in |- *; auto.\nintros a1 m1 m2 H'0; case b; simpl in |- *; auto.\nintros a1 m2 H'0; case b; simpl in |- *; auto.\nintros a1 m2 m2 H'0; case b; simpl in |- *; auto.\nintros a1 m2 H'0; case b; simpl in |- *; auto.\nintros a1 m2 m2 H'0; case b; simpl in |- *; auto.\nintros a1 m2 m2 H'0 H'0 H'0 H'1; case b; simpl in |- *; auto.\nintros a1 m2 m2 H'0; case b; simpl in |- *; auto.\nintros a1 m2 m2 H'0 H'0; case b; simpl in |- *; auto.\nintros a1 m2 m2 H'0; case b; simpl in |- *; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/Term.v",
                "context": " b.\nintros a b; case a; case b; simpl in |- *; auto.\nintuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem zeroP_dec : forall x : Term, {zeroP x} + {~ zeroP x}.\nintros x; case x; simpl in |- *.\nintros b H'.\napply eqA_dec; auto.\nQed.\n \nTheorem zeroP_comp_eqTerm :\n forall a b : Term, zeroP a -> eqTerm a b -> zeroP b.\nintros a b; case a; case b; simpl in |- *; auto.\nintuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := a1); auto;\n apply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n\nTheorem nzeroP_comp_eqTerm :\n forall a b : Term, ~ zeroP a -> eqTerm a b -> ~ zeroP b.\nintros a b H' H'0; red in |- *; intros H'1.\napply H'.\napply zeroP_comp_eqTerm with (a := b); auto.\napply eqTerm_sym; auto.\nQed.\n\n\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition plusTerm : Term -> Term -> Term.\nintros x; case x; intros b2 c2; intros y; case y; intros b3 c3;\n exact (plusA b2 b3, c2).\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nTheorem zeroP_plusTermr :\n forall a b : Term, eqT a b -> zeroP b -> eqTerm a (plusTerm a b).\nintros a b; case a; case b; simpl in |- *; auto.\nintros a1 m1 a2 m2 H1 H2; split; auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA a2 A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem zeroP_plusTerml :\n forall a b : Term, eqT a b -> zeroP a -> eqTerm b (plusTerm a b).\nintros a b; case a; case b; simpl in |- *; auto.\nintros a1 m1 a2 m2 H1 H2; split; auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA A0 a1); auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA a1 A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem plusTerm_comp_l :\n forall a b c : Term,\n eqT a c -> eqT b c -> eqTerm a b -> eqTerm (plusTerm a c) (plusTerm b c).\nintros a b c; case a; case b; case c; simpl in |- *; auto.\nintuition.\nQed.\n \n",
                "context_tokens": 725,
                "proof_start_offset": 4856,
                "proof_end_offset": 5053,
                "proof": "Theorem plusTerm_comp_r : forall a b c : Term, eqT c a -> eqT c b -> eqTerm a b -> eqTerm (plusTerm c a) (plusTerm c b).\nProof.\nintros a b c; case a; case b; case c; simpl in |- *; auto.\nintuition.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem plusTerm_comp_r : forall a b c : Term, eqT c a -> eqT c b -> eqTerm a b -> eqTerm (plusTerm c a) (plusTerm c b).\nintros a b c; case b; simpl in |- *; auto.\nQed.",
                    "Theorem plusTerm_comp_r : forall a b c : Term, eqT c a -> eqT c b -> eqTerm a b -> eqTerm (plusTerm c a) (plusTerm c b).\nintros a b c; case b; simpl in |- *; auto.\nQed.",
                    "Theorem plusTerm_comp_r : forall a b c : Term, eqT c a -> eqT c b -> eqTerm a b -> eqTerm (plusTerm c a) (plusTerm c b).\nintros a b c; case b; simpl in |- *; auto.\nQed.",
                    "Theorem plusTerm_comp_r : forall a b c : Term, eqT c a -> eqT c b -> eqTerm a b -> eqTerm (plusTerm c a) (plusTerm c b).\nintros a b c; case b; simpl in |- *; auto.\nQed.",
                    "Theorem plusTerm_comp_r : forall a b c : Term, eqT c a -> eqT c b -> eqTerm a b -> eqTerm (plusTerm c a) (plusTerm c b).\nintros a b c; case b; simpl in |- *; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/Term.v",
                "context": " _ _ cs); auto.\nQed.\n \nTheorem zeroP_dec : forall x : Term, {zeroP x} + {~ zeroP x}.\nintros x; case x; simpl in |- *.\nintros b H'.\napply eqA_dec; auto.\nQed.\n \nTheorem zeroP_comp_eqTerm :\n forall a b : Term, zeroP a -> eqTerm a b -> zeroP b.\nintros a b; case a; case b; simpl in |- *; auto.\nintuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := a1); auto;\n apply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n\nTheorem nzeroP_comp_eqTerm :\n forall a b : Term, ~ zeroP a -> eqTerm a b -> ~ zeroP b.\nintros a b H' H'0; red in |- *; intros H'1.\napply H'.\napply zeroP_comp_eqTerm with (a := b); auto.\napply eqTerm_sym; auto.\nQed.\n\n\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition plusTerm : Term -> Term -> Term.\nintros x; case x; intros b2 c2; intros y; case y; intros b3 c3;\n exact (plusA b2 b3, c2).\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nTheorem zeroP_plusTermr :\n forall a b : Term, eqT a b -> zeroP b -> eqTerm a (plusTerm a b).\nintros a b; case a; case b; simpl in |- *; auto.\nintros a1 m1 a2 m2 H1 H2; split; auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA a2 A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem zeroP_plusTerml :\n forall a b : Term, eqT a b -> zeroP a -> eqTerm b (plusTerm a b).\nintros a b; case a; case b; simpl in |- *; auto.\nintros a1 m1 a2 m2 H1 H2; split; auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA A0 a1); auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA a1 A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem plusTerm_comp_l :\n forall a b c : Term,\n eqT a c -> eqT b c -> eqTerm a b -> eqTerm (plusTerm a c) (plusTerm b c).\nintros a b c; case a; case b; case c; simpl in |- *; auto.\nintuition.\nQed.\n \nTheorem plusTerm_comp_r :\n forall a b c : Term,\n eqT c a -> eqT c b -> eqTerm a b -> eqTerm (plusTerm c a) (plusTerm c b).\nintros a b c; case a; case b; case c; simpl in |- *; auto.\nintuition.\nQed.\n \n",
                "context_tokens": 737,
                "proof_start_offset": 5056,
                "proof_end_offset": 5201,
                "proof": "Theorem plusTerm_com : forall x y : Term, eqT x y -> eqTerm (plusTerm x y) (plusTerm y x).\nProof.\nintros a b; case a; case b; simpl in |- *; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem plusTerm_com : forall x y : Term, eqT x y -> eqTerm (plusTerm x y) (plusTerm y x).\nintros x y; case b; simpl in |- *; auto.\nQed.",
                    "Theorem plusTerm_com : forall x y : Term, eqT x y -> eqTerm (plusTerm x y) (plusTerm y x).\nintros x y; case b; simpl in |- *; auto.\nintuition.\nQed.",
                    "Theorem plusTerm_com : forall x y : Term, eqT x y -> eqTerm (plusTerm x y) (plusTerm y x).\nintros x y; case b; simpl in |- *; auto.\nintuition.\nQed.",
                    "Theorem plusTerm_com : forall x y : Term, eqT x y -> eqTerm (plusTerm x y) (plusTerm y x).\nintros x y; case b; simpl in |- *; auto.\nQed.",
                    "Theorem plusTerm_com : forall x y : Term, eqT x y -> eqTerm (plusTerm x y) (plusTerm y x).\nintros x y; case b; simpl in |- *; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/Term.v",
                "context": ".\nQed.\n \nTheorem zeroP_comp_eqTerm :\n forall a b : Term, zeroP a -> eqTerm a b -> zeroP b.\nintros a b; case a; case b; simpl in |- *; auto.\nintuition.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := a1); auto;\n apply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n\nTheorem nzeroP_comp_eqTerm :\n forall a b : Term, ~ zeroP a -> eqTerm a b -> ~ zeroP b.\nintros a b H' H'0; red in |- *; intros H'1.\napply H'.\napply zeroP_comp_eqTerm with (a := b); auto.\napply eqTerm_sym; auto.\nQed.\n\n\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition plusTerm : Term -> Term -> Term.\nintros x; case x; intros b2 c2; intros y; case y; intros b3 c3;\n exact (plusA b2 b3, c2).\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nTheorem zeroP_plusTermr :\n forall a b : Term, eqT a b -> zeroP b -> eqTerm a (plusTerm a b).\nintros a b; case a; case b; simpl in |- *; auto.\nintros a1 m1 a2 m2 H1 H2; split; auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA a2 A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem zeroP_plusTerml :\n forall a b : Term, eqT a b -> zeroP a -> eqTerm b (plusTerm a b).\nintros a b; case a; case b; simpl in |- *; auto.\nintros a1 m1 a2 m2 H1 H2; split; auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA A0 a1); auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA a1 A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem plusTerm_comp_l :\n forall a b c : Term,\n eqT a c -> eqT b c -> eqTerm a b -> eqTerm (plusTerm a c) (plusTerm b c).\nintros a b c; case a; case b; case c; simpl in |- *; auto.\nintuition.\nQed.\n \nTheorem plusTerm_comp_r :\n forall a b c : Term,\n eqT c a -> eqT c b -> eqTerm a b -> eqTerm (plusTerm c a) (plusTerm c b).\nintros a b c; case a; case b; case c; simpl in |- *; auto.\nintuition.\nQed.\n \nTheorem plusTerm_com :\n forall x y : Term, eqT x y -> eqTerm (plusTerm x y) (plusTerm y x).\nintros a b; case a; case b; simpl in |- *; auto.\nQed.\n \n",
                "context_tokens": 734,
                "proof_start_offset": 5204,
                "proof_end_offset": 5341,
                "proof": "Theorem plusTerm_eqT1 : forall m1 m2 : Term, eqT m1 m2 -> eqT (plusTerm m1 m2) m1.\nProof.\nintros a b; case a; case b; simpl in |- *; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem plusTerm_eqT1 : forall m1 m2 : Term, eqT m1 m2 -> eqT (plusTerm m1 m2) m1.\nintros m1 m2; case b; simpl in |- *; auto.\nQed.",
                    "Theorem plusTerm_eqT1 : forall m1 m2 : Term, eqT m1 m2 -> eqT (plusTerm m1 m2) m1.\nintros m1 m2; case a; simpl in |- *; auto.\nQed.",
                    "Theorem plusTerm_eqT1 : forall m1 m2 : Term, eqT m1 m2 -> eqT (plusTerm m1 m2) m1.\nintros m1 m2; case b; simpl in |- *; auto.\nQed.",
                    "Theorem plusTerm_eqT1 : forall m1 m2 : Term, eqT m1 m2 -> eqT (plusTerm m1 m2) m1.\nintros m1 m2; case b; simpl in |- *; auto.\nQed.",
                    "Theorem plusTerm_eqT1 : forall m1 m2 : Term, eqT m1 m2 -> eqT (plusTerm m1 m2) m1.\nintros m1 m2; case b; simpl in |- *; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/Term.v",
                "context": " (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := a1); auto;\n apply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n\nTheorem nzeroP_comp_eqTerm :\n forall a b : Term, ~ zeroP a -> eqTerm a b -> ~ zeroP b.\nintros a b H' H'0; red in |- *; intros H'1.\napply H'.\napply zeroP_comp_eqTerm with (a := b); auto.\napply eqTerm_sym; auto.\nQed.\n\n\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition plusTerm : Term -> Term -> Term.\nintros x; case x; intros b2 c2; intros y; case y; intros b3 c3;\n exact (plusA b2 b3, c2).\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nTheorem zeroP_plusTermr :\n forall a b : Term, eqT a b -> zeroP b -> eqTerm a (plusTerm a b).\nintros a b; case a; case b; simpl in |- *; auto.\nintros a1 m1 a2 m2 H1 H2; split; auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA a2 A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem zeroP_plusTerml :\n forall a b : Term, eqT a b -> zeroP a -> eqTerm b (plusTerm a b).\nintros a b; case a; case b; simpl in |- *; auto.\nintros a1 m1 a2 m2 H1 H2; split; auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA A0 a1); auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA a1 A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem plusTerm_comp_l :\n forall a b c : Term,\n eqT a c -> eqT b c -> eqTerm a b -> eqTerm (plusTerm a c) (plusTerm b c).\nintros a b c; case a; case b; case c; simpl in |- *; auto.\nintuition.\nQed.\n \nTheorem plusTerm_comp_r :\n forall a b c : Term,\n eqT c a -> eqT c b -> eqTerm a b -> eqTerm (plusTerm c a) (plusTerm c b).\nintros a b c; case a; case b; case c; simpl in |- *; auto.\nintuition.\nQed.\n \nTheorem plusTerm_com :\n forall x y : Term, eqT x y -> eqTerm (plusTerm x y) (plusTerm y x).\nintros a b; case a; case b; simpl in |- *; auto.\nQed.\n \nTheorem plusTerm_eqT1 :\n forall m1 m2 : Term, eqT m1 m2 -> eqT (plusTerm m1 m2) m1.\nintros a b; case a; case b; simpl in |- *; auto.\nQed.\n \n",
                "context_tokens": 734,
                "proof_start_offset": 5344,
                "proof_end_offset": 5481,
                "proof": "Theorem plusTerm_eqT2 : forall m1 m2 : Term, eqT m1 m2 -> eqT (plusTerm m1 m2) m2.\nProof.\nintros a b; case a; case b; simpl in |- *; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem plusTerm_eqT2 : forall m1 m2 : Term, eqT m1 m2 -> eqT (plusTerm m1 m2) m2.\nintros m1 a b; case b; simpl in |- *; auto.\nQed.",
                    "Theorem plusTerm_eqT2 : forall m1 m2 : Term, eqT m1 m2 -> eqT (plusTerm m1 m2) m2.\nintros m1 m2; case b; simpl in |- *; auto.\nQed.",
                    "Theorem plusTerm_eqT2 : forall m1 m2 : Term, eqT m1 m2 -> eqT (plusTerm m1 m2) m2.\nintros m1 a b; case b; simpl in |- *; auto.\nQed.",
                    "Theorem plusTerm_eqT2 : forall m1 m2 : Term, eqT m1 m2 -> eqT (plusTerm m1 m2) m2.\nintros m1 a b; case b; simpl in |- *; auto.\nQed.",
                    "Theorem plusTerm_eqT2 : forall m1 m2 : Term, eqT m1 m2 -> eqT (plusTerm m1 m2) m2.\nintros m1 m2; case b; simpl in |- *; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/Term.v",
                "context": "P b.\nintros a b H' H'0; red in |- *; intros H'1.\napply H'.\napply zeroP_comp_eqTerm with (a := b); auto.\napply eqTerm_sym; auto.\nQed.\n\n\nSet Implicit Arguments.\nUnset Strict Implicit.\n \nDefinition plusTerm : Term -> Term -> Term.\nintros x; case x; intros b2 c2; intros y; case y; intros b3 c3;\n exact (plusA b2 b3, c2).\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nTheorem zeroP_plusTermr :\n forall a b : Term, eqT a b -> zeroP b -> eqTerm a (plusTerm a b).\nintros a b; case a; case b; simpl in |- *; auto.\nintros a1 m1 a2 m2 H1 H2; split; auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA a2 A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem zeroP_plusTerml :\n forall a b : Term, eqT a b -> zeroP a -> eqTerm b (plusTerm a b).\nintros a b; case a; case b; simpl in |- *; auto.\nintros a1 m1 a2 m2 H1 H2; split; auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA A0 a1); auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA a1 A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem plusTerm_comp_l :\n forall a b c : Term,\n eqT a c -> eqT b c -> eqTerm a b -> eqTerm (plusTerm a c) (plusTerm b c).\nintros a b c; case a; case b; case c; simpl in |- *; auto.\nintuition.\nQed.\n \nTheorem plusTerm_comp_r :\n forall a b c : Term,\n eqT c a -> eqT c b -> eqTerm a b -> eqTerm (plusTerm c a) (plusTerm c b).\nintros a b c; case a; case b; case c; simpl in |- *; auto.\nintuition.\nQed.\n \nTheorem plusTerm_com :\n forall x y : Term, eqT x y -> eqTerm (plusTerm x y) (plusTerm y x).\nintros a b; case a; case b; simpl in |- *; auto.\nQed.\n \nTheorem plusTerm_eqT1 :\n forall m1 m2 : Term, eqT m1 m2 -> eqT (plusTerm m1 m2) m1.\nintros a b; case a; case b; simpl in |- *; auto.\nQed.\n \nTheorem plusTerm_eqT2 :\n forall m1 m2 : Term, eqT m1 m2 -> eqT (plusTerm m1 m2) m2.\nintros a b; case a; case b; simpl in |- *; auto.\nQed.\n \n",
                "context_tokens": 714,
                "proof_start_offset": 5484,
                "proof_end_offset": 5775,
                "proof": "Theorem plusTerm_assoc : forall a a0 A1 : Term, eqT A1 a0 -> eqT a a0 -> eqTerm (plusTerm (plusTerm A1 a0) a) (plusTerm A1 (plusTerm a0 a)).\nProof.\nintros a b c; case a; case b; case c; simpl in |- *; auto.\nintuition.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs).\napply plusA_assoc with (1 := cs).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem plusTerm_assoc : forall a a0 A1 : Term, eqT A1 a0 -> eqT a a0 -> eqTerm (plusTerm (plusTerm A1 a0) a) (plusTerm A1 (plusTerm a0 a)).\nintros a0 a0 a0; case b; simpl in |- *; auto.\nQed.",
                    "Theorem plusTerm_assoc : forall a a0 A1 : Term, eqT A1 a0 -> eqT a a0 -> eqTerm (plusTerm (plusTerm A1 a0) a) (plusTerm A1 (plusTerm a0 a)).\n  intros a0 a0 a0 m1 H0; case b; simpl in |- *; auto.\nQed.",
                    "Theorem plusTerm_assoc : forall a a0 A1 : Term, eqT A1 a0 -> eqT a a0 -> eqTerm (plusTerm (plusTerm A1 a0) a) (plusTerm A1 (plusTerm a0 a)).\n  intros a0 a1 m2 H0; case b; simpl in |- *; auto.\nQed.",
                    "Theorem plusTerm_assoc : forall a a0 A1 : Term, eqT A1 a0 -> eqT a a0 -> eqTerm (plusTerm (plusTerm A1 a0) a) (plusTerm A1 (plusTerm a0 a)).\nintros a0 a0; case b; simpl in |- *; auto.\nQed.",
                    "Theorem plusTerm_assoc : forall a a0 A1 : Term, eqT A1 a0 -> eqT a a0 -> eqTerm (plusTerm (plusTerm A1 a0) a) (plusTerm A1 (plusTerm a0 a)).\nintros a0 a0; case b; simpl in |- *; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/buchberger/Term.v",
                "context": ", c2).\nDefined.\nSet Strict Implicit.\nUnset Implicit Arguments.\n \nTheorem zeroP_plusTermr :\n forall a b : Term, eqT a b -> zeroP b -> eqTerm a (plusTerm a b).\nintros a b; case a; case b; simpl in |- *; auto.\nintros a1 m1 a2 m2 H1 H2; split; auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA a2 A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem zeroP_plusTerml :\n forall a b : Term, eqT a b -> zeroP a -> eqTerm b (plusTerm a b).\nintros a b; case a; case b; simpl in |- *; auto.\nintros a1 m1 a2 m2 H1 H2; split; auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA A0 a1); auto.\napply (eqA_trans _ _ _ _ _ _ _ _ _ cs) with (y := plusA a1 A0); auto.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs); auto.\nQed.\n \nTheorem plusTerm_comp_l :\n forall a b c : Term,\n eqT a c -> eqT b c -> eqTerm a b -> eqTerm (plusTerm a c) (plusTerm b c).\nintros a b c; case a; case b; case c; simpl in |- *; auto.\nintuition.\nQed.\n \nTheorem plusTerm_comp_r :\n forall a b c : Term,\n eqT c a -> eqT c b -> eqTerm a b -> eqTerm (plusTerm c a) (plusTerm c b).\nintros a b c; case a; case b; case c; simpl in |- *; auto.\nintuition.\nQed.\n \nTheorem plusTerm_com :\n forall x y : Term, eqT x y -> eqTerm (plusTerm x y) (plusTerm y x).\nintros a b; case a; case b; simpl in |- *; auto.\nQed.\n \nTheorem plusTerm_eqT1 :\n forall m1 m2 : Term, eqT m1 m2 -> eqT (plusTerm m1 m2) m1.\nintros a b; case a; case b; simpl in |- *; auto.\nQed.\n \nTheorem plusTerm_eqT2 :\n forall m1 m2 : Term, eqT m1 m2 -> eqT (plusTerm m1 m2) m2.\nintros a b; case a; case b; simpl in |- *; auto.\nQed.\n \nTheorem plusTerm_assoc :\n forall a a0 A1 : Term,\n eqT A1 a0 ->\n eqT a a0 ->\n eqTerm (plusTerm (plusTerm A1 a0) a) (plusTerm A1 (plusTerm a0 a)).\nintros a b c; case a; case b; case c; simpl in |- *; auto.\nintuition.\napply (eqA_sym _ _ _ _ _ _ _ _ _ cs).\napply plusA_assoc with (1 := cs).\nQed.\n \n",
                "context_tokens": 718,
                "proof_start_offset": 5778,
                "proof_end_offset": 6007,
                "proof": "Theorem eqTerm_plusTerm_comp : forall a b c d : Term, eqT a c -> eqT b d -> eqTerm a b -> eqTerm c d -> eqTerm (plusTerm a c) (plusTerm b d).\nProof.\nintros a b c d; case a; case b; case c; case d; simpl in |- *; auto.\nintuition.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem eqTerm_plusTerm_comp : forall a b c d : Term, eqT a c -> eqT b d -> eqTerm a b -> eqTerm c d -> eqTerm (plusTerm a c) (plusTerm b d).\nintros a b c d; case b; simpl in |- *; auto.\nQed.",
                    "Theorem eqTerm_plusTerm_comp : forall a b c d : Term, eqT a c -> eqT b d -> eqTerm a b -> eqTerm c d -> eqTerm (plusTerm a c) (plusTerm b d).\nintros a b c d; case b; simpl in |- *; auto.\nQed.",
                    "Theorem eqTerm_plusTerm_comp : forall a b c d : Term, eqT a c -> eqT b d -> eqTerm a b -> eqTerm c d -> eqTerm (plusTerm a c) (plusTerm b d).\nintros a b c d; case b; simpl in |- *; auto.\nQed.",
                    "Theorem eqTerm_plusTerm_comp : forall a b c d : Term, eqT a c -> eqT b d -> eqTerm a b -> eqTerm c d -> eqTerm (plusTerm a c) (plusTerm b d).\nintros a b c d; case b; simpl in |- *; auto.\nQed.",
                    "Theorem eqTerm_plusTerm_comp : forall a b c d : Term, eqT a c -> eqT b d -> eqTerm a b -> eqTerm c d -> eqTerm (plusTerm a c) (plusTerm b d).\nintros a b c d; case b; simpl in |- *; auto.\nQed."
                ]
            }
        ],
        "dblib": [
            {
                "filepath": "./coq_projects/dblib/src/DemoLambda.v",
                "context": "Set Implicit Arguments.\nRequire Export Coq.Program.Equality.\nFrom Dblib Require Import DblibTactics DeBruijn Environments.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* The syntax of untyped lambda-terms. *)\n\nInductive term :=\n  | TVar: nat -> term\n  | TAbs: term -> term\n  | TApp: term -> term -> term.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* The following definitions allow us to use the [DeBruijn] library. In\n   particular, [traverse_term] defines the binding structure of terms. *)\n\nInstance Var_term : Var term := {\n  var := TVar (* avoid eta-expansion *)\n}.\n\nFixpoint traverse_term (f : nat -> nat -> term) l t :=\n  match t with\n  | TVar x =>\n      f l x\n  | TAbs t =>\n      TAbs (traverse_term f (1 + l) t)\n  | TApp t1 t2 =>\n      TApp (traverse_term f l t1) (traverse_term f l t2)\n  end.\n\nInstance Traverse_term : Traverse term term := {\n  traverse := traverse_term\n}.\n\nInstance TraverseVarInjective_term : @TraverseVarInjective term _ term _.\nProof.\n  constructor. prove_traverse_var_injective.\nQed.\n\nInstance TraverseFunctorial_term : @TraverseFunctorial term _ term _.\nProof.\n  constructor. prove_traverse_functorial.\nQed.\n\nInstance TraverseRelative_term : @TraverseRelative term term _.\nProof.\n  constructor. prove_traverse_relative.\nQed.\n\nInstance TraverseIdentifiesVar_term : @TraverseIdentifiesVar term _ _.\nProof.\n  constructor. prove_traverse_identifies_var.\nQed.\n\nInstance TraverseVarIsIdentity_term : @TraverseVarIsIdentity term _ term _.\nProof.\n  constructor. prove_traverse_var_is_identity.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* The following lemmas characterize [lift] and [subst]. In principle, the\n   user does not need to explicitly state these lemmas, and that is fortunate.\n   Here, we prove these lemmas only in order to illustrate how the tactics\n   [simpl_lift] and [simpl_subst] can simplify applications of [lift] and\n   [subst]. *)\n\n",
                "context_tokens": 535,
                "proof_start_offset": 2012,
                "proof_end_offset": 2137,
                "proof": "Lemma lift_TVar: forall w k x, lift w k (TVar x) = TVar (lift w k x).\nProof.\nintros.\nsimpl_lift_goal.\nreflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma lift_TVar: forall w k x, lift w k (TVar x) = TVar (lift w k x).\nProof.\n  constructor.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_eq.\n  apply trans_Qed.",
                    "Lemma lift_TVar: forall w k x, lift w k (TVar x) = TVar (lift w k x).\nProof.\n  constructor.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  applyQed.",
                    "Lemma lift_TVar: forall w k x, lift w k (TVar x) = TVar (lift w k x).\nProof.\n  constructor.\n  apply (well_founded_ind _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _Qed.",
                    "Lemma lift_TVar: forall w k x, lift w k (TVar x) = TVar (lift w k x).\nProof.\n  intros. apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_T.\n  apply lift_TQed.",
                    "Lemma lift_TVar: forall w k x, lift w k (TVar x) = TVar (lift w k x).\nProof.\n  constructor.\n  apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; apply IHSassign; applyQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/DemoLambda.v",
                "context": "Set Implicit Arguments.\nRequire Export Coq.Program.Equality.\nFrom Dblib Require Import DblibTactics DeBruijn Environments.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* The syntax of untyped lambda-terms. *)\n\nInductive term :=\n  | TVar: nat -> term\n  | TAbs: term -> term\n  | TApp: term -> term -> term.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* The following definitions allow us to use the [DeBruijn] library. In\n   particular, [traverse_term] defines the binding structure of terms. *)\n\nInstance Var_term : Var term := {\n  var := TVar (* avoid eta-expansion *)\n}.\n\nFixpoint traverse_term (f : nat -> nat -> term) l t :=\n  match t with\n  | TVar x =>\n      f l x\n  | TAbs t =>\n      TAbs (traverse_term f (1 + l) t)\n  | TApp t1 t2 =>\n      TApp (traverse_term f l t1) (traverse_term f l t2)\n  end.\n\nInstance Traverse_term : Traverse term term := {\n  traverse := traverse_term\n}.\n\nInstance TraverseVarInjective_term : @TraverseVarInjective term _ term _.\nProof.\n  constructor. prove_traverse_var_injective.\nQed.\n\nInstance TraverseFunctorial_term : @TraverseFunctorial term _ term _.\nProof.\n  constructor. prove_traverse_functorial.\nQed.\n\nInstance TraverseRelative_term : @TraverseRelative term term _.\nProof.\n  constructor. prove_traverse_relative.\nQed.\n\nInstance TraverseIdentifiesVar_term : @TraverseIdentifiesVar term _ _.\nProof.\n  constructor. prove_traverse_identifies_var.\nQed.\n\nInstance TraverseVarIsIdentity_term : @TraverseVarIsIdentity term _ term _.\nProof.\n  constructor. prove_traverse_var_is_identity.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* The following lemmas characterize [lift] and [subst]. In principle, the\n   user does not need to explicitly state these lemmas, and that is fortunate.\n   Here, we prove these lemmas only in order to illustrate how the tactics\n   [simpl_lift] and [simpl_subst] can simplify applications of [lift] and\n   [subst]. *)\n\nLemma lift_TVar:\n  forall w k x,\n  lift w k (TVar x) = TVar (lift w k x).\nProof.\n  intros. simpl_lift_goal. reflexivity.\nQed.\n\n",
                "context_tokens": 583,
                "proof_start_offset": 2139,
                "proof_end_offset": 2442,
                "proof": "Lemma lift_TApp: forall w k t1 t2, lift w k (TApp t1 t2) = TApp (lift w k t1) (lift w k t2).\nProof.\neauto with simpl_lift_goal.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma lift_TApp: forall w k t1 t2, lift w k (TApp t1 t2) = TApp (lift w k t1) (lift w k t2).\nProof.\n  induction 1; intros.\n  + simpl_lift_goal. reflexivity.\n  + simpl_lift_goal. reflexivity.\n  + simpl_lift_goal. reflexivity.\n  + simpl_lift_goal. reflexivity.\n  + simpl_lift_goal. reflexivity.\n  + simpl_lift_goal. reflexivity.\n  + simpl_lift_goal. reflexivity.\n  + simpl_lift_goal. reflexivity.\n  + simpl_lift_goal. reflexivity.\n  + simpl_lift_goal. reflexivity.\n  + simpl_lift_goal. reflexivity.\n  + simpl_lift_goal. reflexivity.\n  + simpl_lift_goal. reflexivity.\n  + simpl_lift_goal. reflexivity.\n  + simpl_lift_goal. reflexivity.\n  + simpl_lift_goal. reflexivity.\n  + simpl_lift_goal. reflexivity.\n  + simpl_lift_goal. reflexivity.\n  + simpl_lift_goal. reflexivity.\n  + simpl_lift_goal. reflexivity.\n  + simpl_lift_goal. reflexivity.\n  + simpl_lift_goal. reflexivity.\n  + simpl_lift_goal. reflexivity.\n  + simpl_lift_goal. reflexivity.\n  + simpl_lift_goalQed.",
                    "Lemma lift_TApp: forall w k t1 t2, lift w k (TApp t1 t2) = TApp (lift w k t1) (lift w k t2).\nProof.\n  induction 1; intros.\n  + simpl_lift_goal.\n    apply lift_TVar.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_T.\n    apply lift_Qed.",
                    "Lemma lift_TApp: forall w k t1 t2, lift w k (TApp t1 t2) = TApp (lift w k t1) (lift w k t2).\nProof.\n  induction 1.\n  (* WORKED IN CLASS *)\n  constructor.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.\n  apply IHSassign.Qed.",
                    "Lemma lift_TApp: forall w k t1 t2, lift w k (TApp t1 t2) = TApp (lift w k t1) (lift w k t2).\nProof.\n  constructor.\n  apply trans_eq with (lift_term t1) (lift w k t2).\n  apply trans_eq with (lift_term t1) (lift w k t1) (lift w k t1) (lift w k t1) (lift k t1 t2)).\n  apply trans_eq with (lift_term t1) (lift_term t1) (lift w k t1) (lift w k t1) (lift w k t1) (lift k t1) (lift_term t1 v k t1) (lift_term t1 v t1) (lift_term t1 v t2)).\n  apply trans_eq with (lift_term t1) (lift_term t1 v k t1) (lift_term t1 v t2)).\n  apply trans_eq with (lift_term t1) (lift_term t1) (lift_term t1 v t1) (lift_term t1 v t1) (lift_term t1 v t1) (lift_term t1 v t1) (lift_term t1 v t1) (lift_term t1Qed.",
                    "Lemma lift_TApp: forall w k t1 t2, lift w k (TApp t1 t2) = TApp (lift w k t1) (lift w k t2).\nProof.\n  induction 1; intros.\n  + apply lift_T.\n  + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    + apply lift_T.\n    +Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/DemoLambda.v",
                "context": "uijn Environments.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* The syntax of untyped lambda-terms. *)\n\nInductive term :=\n  | TVar: nat -> term\n  | TAbs: term -> term\n  | TApp: term -> term -> term.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* The following definitions allow us to use the [DeBruijn] library. In\n   particular, [traverse_term] defines the binding structure of terms. *)\n\nInstance Var_term : Var term := {\n  var := TVar (* avoid eta-expansion *)\n}.\n\nFixpoint traverse_term (f : nat -> nat -> term) l t :=\n  match t with\n  | TVar x =>\n      f l x\n  | TAbs t =>\n      TAbs (traverse_term f (1 + l) t)\n  | TApp t1 t2 =>\n      TApp (traverse_term f l t1) (traverse_term f l t2)\n  end.\n\nInstance Traverse_term : Traverse term term := {\n  traverse := traverse_term\n}.\n\nInstance TraverseVarInjective_term : @TraverseVarInjective term _ term _.\nProof.\n  constructor. prove_traverse_var_injective.\nQed.\n\nInstance TraverseFunctorial_term : @TraverseFunctorial term _ term _.\nProof.\n  constructor. prove_traverse_functorial.\nQed.\n\nInstance TraverseRelative_term : @TraverseRelative term term _.\nProof.\n  constructor. prove_traverse_relative.\nQed.\n\nInstance TraverseIdentifiesVar_term : @TraverseIdentifiesVar term _ _.\nProof.\n  constructor. prove_traverse_identifies_var.\nQed.\n\nInstance TraverseVarIsIdentity_term : @TraverseVarIsIdentity term _ term _.\nProof.\n  constructor. prove_traverse_var_is_identity.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* The following lemmas characterize [lift] and [subst]. In principle, the\n   user does not need to explicitly state these lemmas, and that is fortunate.\n   Here, we prove these lemmas only in order to illustrate how the tactics\n   [simpl_lift] and [simpl_subst] can simplify applications of [lift] and\n   [subst]. *)\n\nLemma lift_TVar:\n  forall w k x,\n  lift w k (TVar x) = TVar (lift w k x).\nProof.\n  intros. simpl_lift_goal. reflexivity.\nQed.\n\nLemma lift_TApp:\n  forall w k t1 t2,\n  lift w k (TApp t1 t2) = TApp (lift w k t1) (lift w k t2).\nProof.\n  (* [simpl_lift_goal] can also be used as a hint for [eauto].\n     This is useful when this equality goal occurs as a leaf\n     within a larger automated proof. *)\n  eauto with simpl_lift_goal.\nQed.\n\n",
                "context_tokens": 659,
                "proof_start_offset": 2444,
                "proof_end_offset": 2565,
                "proof": "Lemma lift_TAbs: forall w k t, lift w k (TAbs t) = TAbs (lift w (1 + k) t).\nProof.\neauto with simpl_lift_goal.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma lift_TAbs: forall w k t, lift w k (TAbs t) = TAbs (lift w (1 + k) t).\nProof.\n  intros.\n  unfold lift in *.\n  simpl_lift_goal.\n  auto with arith.\nQed.",
                    "Lemma lift_TAbs: forall w k t, lift w k (TAbs t) = TAbs (lift w (1 + k) t).\nProof.\n  intros. simpl_lift_goal. reflexivity.\nQed.",
                    "Lemma lift_TAbs: forall w k t, lift w k (TAbs t) = TAbs (lift w (1 + k) t).\nProof.\n  intros. simpl_lift_goal. reflexivity.\nQed.",
                    "Lemma lift_TAbs: forall w k t, lift w k (TAbs t) = TAbs (lift w (1 + k) t).\nProof.\n  intros. simpl_lift_goal. reflexivity.\nQed.",
                    "Lemma lift_TAbs: forall w k t, lift w k (TAbs t) = TAbs (lift w (1 + k) t).\nProof.\n  induction 1.\n  + (* [simpl_lift_goal] *)\n    auto with arith.\n  + (* [simpl_lift_goal] *)\n    auto with arith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/DemoLambda.v",
                "context": " of untyped lambda-terms. *)\n\nInductive term :=\n  | TVar: nat -> term\n  | TAbs: term -> term\n  | TApp: term -> term -> term.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* The following definitions allow us to use the [DeBruijn] library. In\n   particular, [traverse_term] defines the binding structure of terms. *)\n\nInstance Var_term : Var term := {\n  var := TVar (* avoid eta-expansion *)\n}.\n\nFixpoint traverse_term (f : nat -> nat -> term) l t :=\n  match t with\n  | TVar x =>\n      f l x\n  | TAbs t =>\n      TAbs (traverse_term f (1 + l) t)\n  | TApp t1 t2 =>\n      TApp (traverse_term f l t1) (traverse_term f l t2)\n  end.\n\nInstance Traverse_term : Traverse term term := {\n  traverse := traverse_term\n}.\n\nInstance TraverseVarInjective_term : @TraverseVarInjective term _ term _.\nProof.\n  constructor. prove_traverse_var_injective.\nQed.\n\nInstance TraverseFunctorial_term : @TraverseFunctorial term _ term _.\nProof.\n  constructor. prove_traverse_functorial.\nQed.\n\nInstance TraverseRelative_term : @TraverseRelative term term _.\nProof.\n  constructor. prove_traverse_relative.\nQed.\n\nInstance TraverseIdentifiesVar_term : @TraverseIdentifiesVar term _ _.\nProof.\n  constructor. prove_traverse_identifies_var.\nQed.\n\nInstance TraverseVarIsIdentity_term : @TraverseVarIsIdentity term _ term _.\nProof.\n  constructor. prove_traverse_var_is_identity.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* The following lemmas characterize [lift] and [subst]. In principle, the\n   user does not need to explicitly state these lemmas, and that is fortunate.\n   Here, we prove these lemmas only in order to illustrate how the tactics\n   [simpl_lift] and [simpl_subst] can simplify applications of [lift] and\n   [subst]. *)\n\nLemma lift_TVar:\n  forall w k x,\n  lift w k (TVar x) = TVar (lift w k x).\nProof.\n  intros. simpl_lift_goal. reflexivity.\nQed.\n\nLemma lift_TApp:\n  forall w k t1 t2,\n  lift w k (TApp t1 t2) = TApp (lift w k t1) (lift w k t2).\nProof.\n  (* [simpl_lift_goal] can also be used as a hint for [eauto].\n     This is useful when this equality goal occurs as a leaf\n     within a larger automated proof. *)\n  eauto with simpl_lift_goal.\nQed.\n\nLemma lift_TAbs:\n  forall w k t,\n  lift w k (TAbs t) = TAbs (lift w (1 + k) t).\nProof.\n  eauto with simpl_lift_goal.\nQed.\n\n",
                "context_tokens": 695,
                "proof_start_offset": 2567,
                "proof_end_offset": 2693,
                "proof": "Lemma subst_TVar: forall v k x, subst v k (TVar x) = subst_idx v k x.\nProof.\nintros.\nsimpl_subst_goal.\nreflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma subst_TVar: forall v k x, subst v k (TVar x) = subst_idx v k x.\nProof.\n  intros. simpl_lift_goal. reflexivity.\nQed.",
                    "Lemma subst_TVar: forall v k x, subst v k (TVar x) = subst_idx v k x.\nProof.\n  induction k; simpl_lift_goal.\n  simpl_lift_goal.\n  destruct (subst_type k v k v); simpl_lift_goal.\n  destruct (subst_type k v k v); simpl_lift_goal.\n  destruct (subst_type k v k v); simpl_lift_goal.\n  destruct (subst_type k v k v); simpl_lift_goal.\n  destruct (subst_type k v k v); simpl_lift_goal.\n  destruct (subst_type k v k v); simpl_lift_goal.\n  destruct (subst_type k v k v); simpl_lift_goal.\n  destruct (subst_type k v k v); simpl_lift_goal.\n  destruct (subst_type k v k v); simpl_lift_goal.\n  destruct (subst_type k v k v); simpl_lift_goal.\n  destruct (subst_type k v k v); simpl_lift_goal.\n  destruct (subst_type k v k v); simpl_lift_goal.\n  destruct (subst_type k v k v); simpl_lift_goal.\n  destruct (subst_type k v k v); simpl_lift_Qed.",
                    "Lemma subst_TVar: forall v k x, subst v k (TVar x) = subst_idx v k x.\nProof.\n  unfold subst_idx.\n  constructor.\n  apply subst_TVar.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply substQed.",
                    "Lemma subst_TVar: forall v k x, subst v k (TVar x) = subst_idx v k x.\nProof.\n  intros.\n  destruct (TVar x) as [x [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y y]]]]]]].]]]]]]].\nQed.",
                    "Lemma subst_TVar: forall v k x, subst v k (TVar x) = subst_idx v k x.\nProof.\n  induction k; intros.\n  + simpl_lift_goal. reflexivity.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/DemoLambda.v",
                "context": "------------------------------------------------- *)\n\n(* The following definitions allow us to use the [DeBruijn] library. In\n   particular, [traverse_term] defines the binding structure of terms. *)\n\nInstance Var_term : Var term := {\n  var := TVar (* avoid eta-expansion *)\n}.\n\nFixpoint traverse_term (f : nat -> nat -> term) l t :=\n  match t with\n  | TVar x =>\n      f l x\n  | TAbs t =>\n      TAbs (traverse_term f (1 + l) t)\n  | TApp t1 t2 =>\n      TApp (traverse_term f l t1) (traverse_term f l t2)\n  end.\n\nInstance Traverse_term : Traverse term term := {\n  traverse := traverse_term\n}.\n\nInstance TraverseVarInjective_term : @TraverseVarInjective term _ term _.\nProof.\n  constructor. prove_traverse_var_injective.\nQed.\n\nInstance TraverseFunctorial_term : @TraverseFunctorial term _ term _.\nProof.\n  constructor. prove_traverse_functorial.\nQed.\n\nInstance TraverseRelative_term : @TraverseRelative term term _.\nProof.\n  constructor. prove_traverse_relative.\nQed.\n\nInstance TraverseIdentifiesVar_term : @TraverseIdentifiesVar term _ _.\nProof.\n  constructor. prove_traverse_identifies_var.\nQed.\n\nInstance TraverseVarIsIdentity_term : @TraverseVarIsIdentity term _ term _.\nProof.\n  constructor. prove_traverse_var_is_identity.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* The following lemmas characterize [lift] and [subst]. In principle, the\n   user does not need to explicitly state these lemmas, and that is fortunate.\n   Here, we prove these lemmas only in order to illustrate how the tactics\n   [simpl_lift] and [simpl_subst] can simplify applications of [lift] and\n   [subst]. *)\n\nLemma lift_TVar:\n  forall w k x,\n  lift w k (TVar x) = TVar (lift w k x).\nProof.\n  intros. simpl_lift_goal. reflexivity.\nQed.\n\nLemma lift_TApp:\n  forall w k t1 t2,\n  lift w k (TApp t1 t2) = TApp (lift w k t1) (lift w k t2).\nProof.\n  (* [simpl_lift_goal] can also be used as a hint for [eauto].\n     This is useful when this equality goal occurs as a leaf\n     within a larger automated proof. *)\n  eauto with simpl_lift_goal.\nQed.\n\nLemma lift_TAbs:\n  forall w k t,\n  lift w k (TAbs t) = TAbs (lift w (1 + k) t).\nProof.\n  eauto with simpl_lift_goal.\nQed.\n\nLemma subst_TVar:\n  forall v k x,\n  subst v k (TVar x) = subst_idx v k x.\nProof.\n  intros. simpl_subst_goal. reflexivity.\nQed.\n\n",
                "context_tokens": 702,
                "proof_start_offset": 2695,
                "proof_end_offset": 2838,
                "proof": "Lemma subst_TApp: forall v k t1 t2, subst v k (TApp t1 t2) = TApp (subst v k t1) (subst v k t2).\nProof.\neauto with simpl_subst_goal.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma subst_TApp: forall v k t1 t2, subst v k (TApp t1 t2) = TApp (subst v k t1) (subst v k t2).\nProof.\n  intros. simpl_lift_goal. reflexivity.\nQed.",
                    "Lemma subst_TApp: forall v k t1 t2, subst v k (TApp t1 t2) = TApp (subst v k t1) (subst v k t2).\nProof.\n  intros. simpl_lift_goal.\n  rewrite subst_T.\n  auto with arith.\nQed.",
                    "Lemma subst_TApp: forall v k t1 t2, subst v k (TApp t1 t2) = TApp (subst v k t1) (subst v k t2).\nProof.\n  intros. simpl_lift_goal. reflexivity.\nQed.",
                    "Lemma subst_TApp: forall v k t1 t2, subst v k (TApp t1 t2) = TApp (subst v k t1) (subst v k t2).\nProof.\n  induction k; intros.\n  - simpl_lift_goal.\n    apply subst_T_App with (lift v k t1) (subst k t1 t2) (subst k t1 t2) (subst k t1 t2) (subst k t2 t2) (subst k t2 t2) (subst k t2 t2 t2) (subst k t1 t2 t2) (subst k t1 t2 t2) (subst k t2 t2 t2) (subst k t2 t2 t2 t).\nProof.\n  induction k; intros.\n  - simpl_lift_goal.\n    apply subst_T_App with (lift v k t1) (subst k t2 t2) (subst k t2 t2 t3) (subst k t2 t2 t3) (subst k t2 t3 t3) (subst k t3 t3 t3 t3) (subst k t3 t3 t4) (subst k t k t3 t3 t4) (subst k t4 t3 t4) (subst k t4 t4 t4 t4) (subst k t4 t4Qed.",
                    "Lemma subst_TApp: forall v k t1 t2, subst v k (TApp t1 t2) = TApp (subst v k t1) (subst v k t2).\nProof.\n  intros. simpl_lift_goal. reflexivity.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/DemoLambda.v",
                "context": " defines the binding structure of terms. *)\n\nInstance Var_term : Var term := {\n  var := TVar (* avoid eta-expansion *)\n}.\n\nFixpoint traverse_term (f : nat -> nat -> term) l t :=\n  match t with\n  | TVar x =>\n      f l x\n  | TAbs t =>\n      TAbs (traverse_term f (1 + l) t)\n  | TApp t1 t2 =>\n      TApp (traverse_term f l t1) (traverse_term f l t2)\n  end.\n\nInstance Traverse_term : Traverse term term := {\n  traverse := traverse_term\n}.\n\nInstance TraverseVarInjective_term : @TraverseVarInjective term _ term _.\nProof.\n  constructor. prove_traverse_var_injective.\nQed.\n\nInstance TraverseFunctorial_term : @TraverseFunctorial term _ term _.\nProof.\n  constructor. prove_traverse_functorial.\nQed.\n\nInstance TraverseRelative_term : @TraverseRelative term term _.\nProof.\n  constructor. prove_traverse_relative.\nQed.\n\nInstance TraverseIdentifiesVar_term : @TraverseIdentifiesVar term _ _.\nProof.\n  constructor. prove_traverse_identifies_var.\nQed.\n\nInstance TraverseVarIsIdentity_term : @TraverseVarIsIdentity term _ term _.\nProof.\n  constructor. prove_traverse_var_is_identity.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* The following lemmas characterize [lift] and [subst]. In principle, the\n   user does not need to explicitly state these lemmas, and that is fortunate.\n   Here, we prove these lemmas only in order to illustrate how the tactics\n   [simpl_lift] and [simpl_subst] can simplify applications of [lift] and\n   [subst]. *)\n\nLemma lift_TVar:\n  forall w k x,\n  lift w k (TVar x) = TVar (lift w k x).\nProof.\n  intros. simpl_lift_goal. reflexivity.\nQed.\n\nLemma lift_TApp:\n  forall w k t1 t2,\n  lift w k (TApp t1 t2) = TApp (lift w k t1) (lift w k t2).\nProof.\n  (* [simpl_lift_goal] can also be used as a hint for [eauto].\n     This is useful when this equality goal occurs as a leaf\n     within a larger automated proof. *)\n  eauto with simpl_lift_goal.\nQed.\n\nLemma lift_TAbs:\n  forall w k t,\n  lift w k (TAbs t) = TAbs (lift w (1 + k) t).\nProof.\n  eauto with simpl_lift_goal.\nQed.\n\nLemma subst_TVar:\n  forall v k x,\n  subst v k (TVar x) = subst_idx v k x.\nProof.\n  intros. simpl_subst_goal. reflexivity.\nQed.\n\nLemma subst_TApp:\n  forall v k t1 t2,\n  subst v k (TApp t1 t2) = TApp (subst v k t1) (subst v k t2).\nProof.\n  eauto with simpl_subst_goal.\nQed.\n\n",
                "context_tokens": 731,
                "proof_start_offset": 2840,
                "proof_end_offset": 2975,
                "proof": "Lemma subst_TAbs: forall v k t, subst v k (TAbs t) = TAbs (subst (shift 0 v) (1 + k) t).\nProof.\neauto with simpl_subst_goal.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma subst_TAbs: forall v k t, subst v k (TAbs t) = TAbs (subst (shift 0 v) (1 + k) t).\nProof.\n  intros.\n  simpl_subst_goal.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite substQed.",
                    "Lemma subst_TAbs: forall v k t, subst v k (TAbs t) = TAbs (subst (shift 0 v) (1 + k) t).\nProof.\n  intros. simpl_subst_goal. reflexivity.\nQed.",
                    "Lemma subst_TAbs: forall v k t, subst v k (TAbs t) = TAbs (subst (shift 0 v) (1 + k) t).\nProof.\n  intros.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_T.\n  rewrite subst_Qed.",
                    "Lemma subst_TAbs: forall v k t, subst v k (TAbs t) = TAbs (subst (shift 0 v) (1 + k) t).\nProof.\n  intros. simpl_subst_goal. reflexivity.\nQed.",
                    "Lemma subst_TAbs: forall v k t, subst v k (TAbs t) = TAbs (subst (shift 0 v) (1 + k) t).\nProof.\n  unfold subst_T.\n  constructor.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_T.\n  apply subst_Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/DemoLambda.v",
                "context": "\nProof.\n  constructor. prove_traverse_relative.\nQed.\n\nInstance TraverseIdentifiesVar_term : @TraverseIdentifiesVar term _ _.\nProof.\n  constructor. prove_traverse_identifies_var.\nQed.\n\nInstance TraverseVarIsIdentity_term : @TraverseVarIsIdentity term _ term _.\nProof.\n  constructor. prove_traverse_var_is_identity.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* The following lemmas characterize [lift] and [subst]. In principle, the\n   user does not need to explicitly state these lemmas, and that is fortunate.\n   Here, we prove these lemmas only in order to illustrate how the tactics\n   [simpl_lift] and [simpl_subst] can simplify applications of [lift] and\n   [subst]. *)\n\nLemma lift_TVar:\n  forall w k x,\n  lift w k (TVar x) = TVar (lift w k x).\nProof.\n  intros. simpl_lift_goal. reflexivity.\nQed.\n\nLemma lift_TApp:\n  forall w k t1 t2,\n  lift w k (TApp t1 t2) = TApp (lift w k t1) (lift w k t2).\nProof.\n  (* [simpl_lift_goal] can also be used as a hint for [eauto].\n     This is useful when this equality goal occurs as a leaf\n     within a larger automated proof. *)\n  eauto with simpl_lift_goal.\nQed.\n\nLemma lift_TAbs:\n  forall w k t,\n  lift w k (TAbs t) = TAbs (lift w (1 + k) t).\nProof.\n  eauto with simpl_lift_goal.\nQed.\n\nLemma subst_TVar:\n  forall v k x,\n  subst v k (TVar x) = subst_idx v k x.\nProof.\n  intros. simpl_subst_goal. reflexivity.\nQed.\n\nLemma subst_TApp:\n  forall v k t1 t2,\n  subst v k (TApp t1 t2) = TApp (subst v k t1) (subst v k t2).\nProof.\n  eauto with simpl_subst_goal.\nQed.\n\nLemma subst_TAbs:\n  forall v k t,\n  subst v k (TAbs t) = TAbs (subst (shift 0 v) (1 + k) t).\nProof.\n  eauto with simpl_subst_goal.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Reduction semantics. *)\n\nInductive red : term -> term -> Prop :=\n  | RedBeta:\n      forall t1 t2 t,\n      subst t2 0 t1 = t ->\n      red (TApp (TAbs t1) t2) t\n  | RedContextTAbs:\n      forall t1 t2,\n      red t1 t2 ->\n      red (TAbs t1) (TAbs t2)\n  | RedContextTAppLeft:\n      forall t1 t2 t,\n      red t1 t2 ->\n      red (TApp t1 t) (TApp t2 t)\n  | RedContextTAppRight:\n      forall t1 t2 t,\n      red t1 t2 ->\n      red (TApp t t1) (TApp t t2).\n\n(* The reduction judgement is compatible with weakening. *)\n\n",
                "context_tokens": 734,
                "proof_start_offset": 3574,
                "proof_end_offset": 3768,
                "proof": "Lemma red_weakening: forall t1 t2, red t1 t2 -> forall x, red (shift x t1) (shift x t2).\nProof.\ninduction 1; intros; subst; simpl_lift_goal; econstructor; eauto with lift_subst.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma red_weakening: forall t1 t2, red t1 t2 -> forall x, red (shift x t1) (shift x t2).\nProof.\n  intros. simpl_subst_goal.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_T_Abs.\n  apply subst_Qed.",
                    "Lemma red_weakening: forall t1 t2, red t1 t2 -> forall x, red (shift x t1) (shift x t2).\nProof.\n  intros. simpl_subst_goal.\n  auto with arith.\n  auto with arith.\nQed.",
                    "Lemma red_weakening: forall t1 t2, red t1 t2 -> forall x, red (shift x t1) (shift x t2).\nProof.\n  unfold red; intros.\n  induction t1; intros.\n  apply (Abs_App t1 t2); auto with pts.\n  apply (Abs_App t1 t2); auto with pts.\nQed.",
                    "Lemma red_weakening: forall t1 t2, red t1 t2 -> forall x, red (shift x t1) (shift x t2).\nProof.\n  intros. simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hyps.\n  simpl_subst_hypsQed.",
                    "Lemma red_weakening: forall t1 t2, red t1 t2 -> forall x, red (shift x t1) (shift x t2).\nProof.\n  induction t1; intros.\n  (* The following lemma is a term [subst_type] tactic. *)\n  (* a term is the term [subst_type] tactic. *)\n  (* a term is a term [subst_type] tactic. *)\n  (* a term is a term is a term [subst_type] tactic. *)\n  (* a term is a term is a term [subst_type] tactic. *)\n  (* term is a term [subst_type] tactic. *)\n  (* term is a term is the term is a term [subst_type] tactic. *)\n  (* term is the term is a term [subst_type] tactic. *)\n  (* term is a term is a term is the term. *)\n  (* term is a term is the term is a term. *)\n  (* term is the term is the term. *)\n  (* term is a term is term is a term. *)\n  (* term is term is the term.\n(* the term is a term is term. *)\n  (* term is the term is term. *)\n  (* term is term is the term.\n(* term is the term is term is term. *)\n  (* term is the term is term. *)Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/DemoLambda.v",
                "context": "(* The following lemmas characterize [lift] and [subst]. In principle, the\n   user does not need to explicitly state these lemmas, and that is fortunate.\n   Here, we prove these lemmas only in order to illustrate how the tactics\n   [simpl_lift] and [simpl_subst] can simplify applications of [lift] and\n   [subst]. *)\n\nLemma lift_TVar:\n  forall w k x,\n  lift w k (TVar x) = TVar (lift w k x).\nProof.\n  intros. simpl_lift_goal. reflexivity.\nQed.\n\nLemma lift_TApp:\n  forall w k t1 t2,\n  lift w k (TApp t1 t2) = TApp (lift w k t1) (lift w k t2).\nProof.\n  (* [simpl_lift_goal] can also be used as a hint for [eauto].\n     This is useful when this equality goal occurs as a leaf\n     within a larger automated proof. *)\n  eauto with simpl_lift_goal.\nQed.\n\nLemma lift_TAbs:\n  forall w k t,\n  lift w k (TAbs t) = TAbs (lift w (1 + k) t).\nProof.\n  eauto with simpl_lift_goal.\nQed.\n\nLemma subst_TVar:\n  forall v k x,\n  subst v k (TVar x) = subst_idx v k x.\nProof.\n  intros. simpl_subst_goal. reflexivity.\nQed.\n\nLemma subst_TApp:\n  forall v k t1 t2,\n  subst v k (TApp t1 t2) = TApp (subst v k t1) (subst v k t2).\nProof.\n  eauto with simpl_subst_goal.\nQed.\n\nLemma subst_TAbs:\n  forall v k t,\n  subst v k (TAbs t) = TAbs (subst (shift 0 v) (1 + k) t).\nProof.\n  eauto with simpl_subst_goal.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Reduction semantics. *)\n\nInductive red : term -> term -> Prop :=\n  | RedBeta:\n      forall t1 t2 t,\n      subst t2 0 t1 = t ->\n      red (TApp (TAbs t1) t2) t\n  | RedContextTAbs:\n      forall t1 t2,\n      red t1 t2 ->\n      red (TAbs t1) (TAbs t2)\n  | RedContextTAppLeft:\n      forall t1 t2 t,\n      red t1 t2 ->\n      red (TApp t1 t) (TApp t2 t)\n  | RedContextTAppRight:\n      forall t1 t2 t,\n      red t1 t2 ->\n      red (TApp t t1) (TApp t t2).\n\n(* The reduction judgement is compatible with weakening. *)\n\nLemma red_weakening:\n  forall t1 t2,\n  red t1 t2 ->\n  forall x,\n  red (shift x t1) (shift x t2).\nProof.\n  induction 1; intros; subst; simpl_lift_goal;\n  econstructor; eauto with lift_subst.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Working with closedness. *)\n\n(* Again, we prove the following lemmas only in order to illustrate\n   the use of the tactic [inversion_closed]. *)\n\n",
                "context_tokens": 741,
                "proof_start_offset": 4003,
                "proof_end_offset": 4153,
                "proof": "Lemma inversion_closed_TVar: forall k x, x >= k -> closed k (TVar x) -> False.\nProof.\nintros.\ninversion_closed.\neauto using closed_var.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma inversion_closed_TVar: forall k x, x >= k -> closed k (TVar x) -> False.\nProof.\n  intros. simpl_lift_goal.\n  destruct (TVar k x) as [x1 [x2 [x3 [x5 [x5 [x6 [x6 [x7 [x7 [x8 [x8 [x8 [x9 [x9 [x9 [x9 [x9 [x9 [x9 [x9 [x9 [x9 [x9 [x10 [x10 [x10 [x9 [x10 [x10 [x9 [x9 [x9 [x10 [x10 [x10 [x9 [x10 [x10 [x9 [x10 [x10 [x10 [x10 [x10 [x10 [x10 [x10 [x10 [x11 [x11 [x13 [x11 [x11 [x11 [x10 [x11 [x10 [x11 [x11 [x11 [x11 [x11 [x11 [x13 [x11 [x13 [x13 [x11 [x13 [x12 [x13 [x13 [x13 [x13 [x13 [x13 [x13 [x13 [Qed.",
                    "Lemma inversion_closed_TVar: forall k x, x >= k -> closed k (TVar x) -> False.\nProof.\n  induction 1; intros; subst; simpl_lift_goal.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto withQed.",
                    "Lemma inversion_closed_TVar: forall k x, x >= k -> closed k (TVar x) -> False.\nProof.\n  induction 1; intros; subst; simpl_lift_goal.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto with lift_subst.\n  econstructor; eauto withQed.",
                    "Lemma inversion_closed_TVar: forall k x, x >= k -> closed k (TVar x) -> False.\nProof.\n  induction 1; intros; subst; simpl_lift_goal;\n  econstructor; eauto with lift_subst.\nQed.",
                    "Lemma inversion_closed_TVar: forall k x, x >= k -> closed k (TVar x) -> False.\nProof.\n  induction 1; intros; subst; simpl_lift_goal.\n  destruct (TVar k x) as [x0 [x1 [x2 [x3 [x4 [x5 [x5 [x5 [x6 [x7 [x7 [x8 [x9 [x9 [x9 [x9 [x9 [x9 [x9 [x9 [x9 [x9 [x9 [x9 [x9 [x9 [x9 [x10 [x9 [x9 [x9 [x9 [x10 [x9 [x9 [x9 [x9 [x9 [x9 [x9 [x10 [x10 [x9 [x9 [x10 [x9 [x10 [x9 [x9 [x9 [x9 [x9 [x9 [x9 [x9 [x9 [x10 [x9 [x10 [x10 [x10 [x10 [x10 [x10 [x10 [x10 [x11 [x11 [x10 [x10 [x10 [x10 [x10 [x11 [x11 [x11 [xQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/DemoLambda.v",
                "context": " [simpl_subst] can simplify applications of [lift] and\n   [subst]. *)\n\nLemma lift_TVar:\n  forall w k x,\n  lift w k (TVar x) = TVar (lift w k x).\nProof.\n  intros. simpl_lift_goal. reflexivity.\nQed.\n\nLemma lift_TApp:\n  forall w k t1 t2,\n  lift w k (TApp t1 t2) = TApp (lift w k t1) (lift w k t2).\nProof.\n  (* [simpl_lift_goal] can also be used as a hint for [eauto].\n     This is useful when this equality goal occurs as a leaf\n     within a larger automated proof. *)\n  eauto with simpl_lift_goal.\nQed.\n\nLemma lift_TAbs:\n  forall w k t,\n  lift w k (TAbs t) = TAbs (lift w (1 + k) t).\nProof.\n  eauto with simpl_lift_goal.\nQed.\n\nLemma subst_TVar:\n  forall v k x,\n  subst v k (TVar x) = subst_idx v k x.\nProof.\n  intros. simpl_subst_goal. reflexivity.\nQed.\n\nLemma subst_TApp:\n  forall v k t1 t2,\n  subst v k (TApp t1 t2) = TApp (subst v k t1) (subst v k t2).\nProof.\n  eauto with simpl_subst_goal.\nQed.\n\nLemma subst_TAbs:\n  forall v k t,\n  subst v k (TAbs t) = TAbs (subst (shift 0 v) (1 + k) t).\nProof.\n  eauto with simpl_subst_goal.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Reduction semantics. *)\n\nInductive red : term -> term -> Prop :=\n  | RedBeta:\n      forall t1 t2 t,\n      subst t2 0 t1 = t ->\n      red (TApp (TAbs t1) t2) t\n  | RedContextTAbs:\n      forall t1 t2,\n      red t1 t2 ->\n      red (TAbs t1) (TAbs t2)\n  | RedContextTAppLeft:\n      forall t1 t2 t,\n      red t1 t2 ->\n      red (TApp t1 t) (TApp t2 t)\n  | RedContextTAppRight:\n      forall t1 t2 t,\n      red t1 t2 ->\n      red (TApp t t1) (TApp t t2).\n\n(* The reduction judgement is compatible with weakening. *)\n\nLemma red_weakening:\n  forall t1 t2,\n  red t1 t2 ->\n  forall x,\n  red (shift x t1) (shift x t2).\nProof.\n  induction 1; intros; subst; simpl_lift_goal;\n  econstructor; eauto with lift_subst.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Working with closedness. *)\n\n(* Again, we prove the following lemmas only in order to illustrate\n   the use of the tactic [inversion_closed]. *)\n\nLemma inversion_closed_TVar:\n  forall k x,\n  x >= k ->\n  closed k (TVar x) ->\n  False.\nProof.\n  intros. inversion_closed. eauto using closed_var.\nQed.\n\n",
                "context_tokens": 734,
                "proof_start_offset": 4155,
                "proof_end_offset": 4297,
                "proof": "Lemma inversion_closed_TApp_1: forall t1 t2 k, closed k (TApp t1 t2) -> closed k t1.\nProof.\nintros.\ninversion_closed.\nassumption.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma inversion_closed_TApp_1: forall t1 t2 k, closed k (TApp t1 t2) -> closed k t1.\nProof.\n  intros. inversion_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed.\nProof.\n  intros. inversion_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed.\nQed.",
                    "Lemma inversion_closed_TApp_1: forall t1 t2 k, closed k (TApp t1 t2) -> closed k t1.\nProof.\n  intros. inversion_closed_closed_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_Qed.",
                    "Lemma inversion_closed_TApp_1: forall t1 t2 k, closed k (TApp t1 t2) -> closed k t1.\nProof.\n  intros. inversion_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed.\nQed.",
                    "Lemma inversion_closed_TApp_1: forall t1 t2 k, closed k (TApp t1 t2) -> closed k t1.\nProof.\n  intros. inversion_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed.\nQed.",
                    "Lemma inversion_closed_TApp_1: forall t1 t2 k, closed k (TApp t1 t2) -> closed k t1.\nProof.\n  intros. inversion_closed_inversion_closed_inversion_closed_inversion_closed_inversion_closed_inversion_closed_inversion_closed_inversion_closed_inversion_closed_inversion_closed_inversion_closed_inversion_closed_closed_inversion_closed_inversion_closed_closed_inversion_closed_inversion_closed_inversion_closed_closed_inversion_closed_inversion_closed_closed_inversion_closed_inversion_closed_closed_inversion_closed_closed_inversion_closed_closed_inversion_closed_closed_inversion_closed_closed_inversion_closed_closed_inversion_closed_inversion_closed_closed_inversion_closed_closed_inversion_closed_inversion_closed_closed_inversion_closed_closed_inversion_closed_inversion_closed_closed_inversion_closed_closed_inversion_closed_closed_inversion_closed_inversion_closed_closed_inversion_closed_closed_inversion_closed_closed_inversion_closed_closed_inversion_closed_closed_inversion_closed_closed_inversion_closed_closed_inversion_closed_closed_inversion_closed_closed_inversion_closed_closed_inversion_closed_closed_inversion_Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/DemoLambda.v",
                "context": " intros. simpl_lift_goal. reflexivity.\nQed.\n\nLemma lift_TApp:\n  forall w k t1 t2,\n  lift w k (TApp t1 t2) = TApp (lift w k t1) (lift w k t2).\nProof.\n  (* [simpl_lift_goal] can also be used as a hint for [eauto].\n     This is useful when this equality goal occurs as a leaf\n     within a larger automated proof. *)\n  eauto with simpl_lift_goal.\nQed.\n\nLemma lift_TAbs:\n  forall w k t,\n  lift w k (TAbs t) = TAbs (lift w (1 + k) t).\nProof.\n  eauto with simpl_lift_goal.\nQed.\n\nLemma subst_TVar:\n  forall v k x,\n  subst v k (TVar x) = subst_idx v k x.\nProof.\n  intros. simpl_subst_goal. reflexivity.\nQed.\n\nLemma subst_TApp:\n  forall v k t1 t2,\n  subst v k (TApp t1 t2) = TApp (subst v k t1) (subst v k t2).\nProof.\n  eauto with simpl_subst_goal.\nQed.\n\nLemma subst_TAbs:\n  forall v k t,\n  subst v k (TAbs t) = TAbs (subst (shift 0 v) (1 + k) t).\nProof.\n  eauto with simpl_subst_goal.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Reduction semantics. *)\n\nInductive red : term -> term -> Prop :=\n  | RedBeta:\n      forall t1 t2 t,\n      subst t2 0 t1 = t ->\n      red (TApp (TAbs t1) t2) t\n  | RedContextTAbs:\n      forall t1 t2,\n      red t1 t2 ->\n      red (TAbs t1) (TAbs t2)\n  | RedContextTAppLeft:\n      forall t1 t2 t,\n      red t1 t2 ->\n      red (TApp t1 t) (TApp t2 t)\n  | RedContextTAppRight:\n      forall t1 t2 t,\n      red t1 t2 ->\n      red (TApp t t1) (TApp t t2).\n\n(* The reduction judgement is compatible with weakening. *)\n\nLemma red_weakening:\n  forall t1 t2,\n  red t1 t2 ->\n  forall x,\n  red (shift x t1) (shift x t2).\nProof.\n  induction 1; intros; subst; simpl_lift_goal;\n  econstructor; eauto with lift_subst.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Working with closedness. *)\n\n(* Again, we prove the following lemmas only in order to illustrate\n   the use of the tactic [inversion_closed]. *)\n\nLemma inversion_closed_TVar:\n  forall k x,\n  x >= k ->\n  closed k (TVar x) ->\n  False.\nProof.\n  intros. inversion_closed. eauto using closed_var.\nQed.\n\nLemma inversion_closed_TApp_1:\n  forall t1 t2 k,\n  closed k (TApp t1 t2) ->\n  closed k t1.\nProof.\n  intros. inversion_closed. assumption.\nQed.\n\n",
                "context_tokens": 734,
                "proof_start_offset": 4299,
                "proof_end_offset": 4441,
                "proof": "Lemma inversion_closed_TApp_2: forall t1 t2 k, closed k (TApp t1 t2) -> closed k t2.\nProof.\nintros.\ninversion_closed.\nassumption.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma inversion_closed_TApp_2: forall t1 t2 k, closed k (TApp t1 t2) -> closed k t2.\nProof.\n  intros. inversion_closed_closed_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_Qed.",
                    "Lemma inversion_closed_TApp_2: forall t1 t2 k, closed k (TApp t1 t2) -> closed k t2.\nProof.\n  intros. inversion_closed_T. assumption.\nQed.",
                    "Lemma inversion_closed_TApp_2: forall t1 t2 k, closed k (TApp t1 t2) -> closed k t2.\nProof.\n  intros. inversion_closed_closed_T.\nQed.",
                    "Lemma inversion_closed_TApp_2: forall t1 t2 k, closed k (TApp t1 t2) -> closed k t2.\nProof.\n  intros. inversion_closed_T. assumption.\nQed.",
                    "Lemma inversion_closed_TApp_2: forall t1 t2 k, closed k (TApp t1 t2) -> closed k t2.\nProof.\n  intros. inversion_closed_closed_T1. assumption.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/DemoLambda.v",
                "context": " k t1) (lift w k t2).\nProof.\n  (* [simpl_lift_goal] can also be used as a hint for [eauto].\n     This is useful when this equality goal occurs as a leaf\n     within a larger automated proof. *)\n  eauto with simpl_lift_goal.\nQed.\n\nLemma lift_TAbs:\n  forall w k t,\n  lift w k (TAbs t) = TAbs (lift w (1 + k) t).\nProof.\n  eauto with simpl_lift_goal.\nQed.\n\nLemma subst_TVar:\n  forall v k x,\n  subst v k (TVar x) = subst_idx v k x.\nProof.\n  intros. simpl_subst_goal. reflexivity.\nQed.\n\nLemma subst_TApp:\n  forall v k t1 t2,\n  subst v k (TApp t1 t2) = TApp (subst v k t1) (subst v k t2).\nProof.\n  eauto with simpl_subst_goal.\nQed.\n\nLemma subst_TAbs:\n  forall v k t,\n  subst v k (TAbs t) = TAbs (subst (shift 0 v) (1 + k) t).\nProof.\n  eauto with simpl_subst_goal.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Reduction semantics. *)\n\nInductive red : term -> term -> Prop :=\n  | RedBeta:\n      forall t1 t2 t,\n      subst t2 0 t1 = t ->\n      red (TApp (TAbs t1) t2) t\n  | RedContextTAbs:\n      forall t1 t2,\n      red t1 t2 ->\n      red (TAbs t1) (TAbs t2)\n  | RedContextTAppLeft:\n      forall t1 t2 t,\n      red t1 t2 ->\n      red (TApp t1 t) (TApp t2 t)\n  | RedContextTAppRight:\n      forall t1 t2 t,\n      red t1 t2 ->\n      red (TApp t t1) (TApp t t2).\n\n(* The reduction judgement is compatible with weakening. *)\n\nLemma red_weakening:\n  forall t1 t2,\n  red t1 t2 ->\n  forall x,\n  red (shift x t1) (shift x t2).\nProof.\n  induction 1; intros; subst; simpl_lift_goal;\n  econstructor; eauto with lift_subst.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Working with closedness. *)\n\n(* Again, we prove the following lemmas only in order to illustrate\n   the use of the tactic [inversion_closed]. *)\n\nLemma inversion_closed_TVar:\n  forall k x,\n  x >= k ->\n  closed k (TVar x) ->\n  False.\nProof.\n  intros. inversion_closed. eauto using closed_var.\nQed.\n\nLemma inversion_closed_TApp_1:\n  forall t1 t2 k,\n  closed k (TApp t1 t2) ->\n  closed k t1.\nProof.\n  intros. inversion_closed. assumption.\nQed.\n\nLemma inversion_closed_TApp_2:\n  forall t1 t2 k,\n  closed k (TApp t1 t2) ->\n  closed k t2.\nProof.\n  intros. inversion_closed. assumption.\nQed.\n\n",
                "context_tokens": 739,
                "proof_start_offset": 4443,
                "proof_end_offset": 4580,
                "proof": "Lemma inversion_closed_TAbs: forall t k, closed k (TAbs t) -> closed (1 + k) t.\nProof.\nintros.\ninversion_closed.\nassumption.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma inversion_closed_TAbs: forall t k, closed k (TAbs t) -> closed (1 + k) t.\nProof.\n  intros. inversion_closed_closed_T. assumption.\nQed.",
                    "Lemma inversion_closed_TAbs: forall t k, closed k (TAbs t) -> closed (1 + k) t.\nProof.\n  intros. inversion_closed_closed_T. assumption.\nQed.",
                    "Lemma inversion_closed_TAbs: forall t k, closed k (TAbs t) -> closed (1 + k) t.\nProof.\n  intros. inversion_closed_closed_T. assumption.\nQed.",
                    "Lemma inversion_closed_TAbs: forall t k, closed k (TAbs t) -> closed (1 + k) t.\nProof.\n  intros. inversion_closed_T. assumption.\nQed.",
                    "Lemma inversion_closed_TAbs: forall t k, closed k (TAbs t) -> closed (1 + k) t.\nProof.\n  intros. inversion_closed_closed_T. assumption.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/DemoLambda.v",
                "context": "_lift_goal.\nQed.\n\nLemma lift_TAbs:\n  forall w k t,\n  lift w k (TAbs t) = TAbs (lift w (1 + k) t).\nProof.\n  eauto with simpl_lift_goal.\nQed.\n\nLemma subst_TVar:\n  forall v k x,\n  subst v k (TVar x) = subst_idx v k x.\nProof.\n  intros. simpl_subst_goal. reflexivity.\nQed.\n\nLemma subst_TApp:\n  forall v k t1 t2,\n  subst v k (TApp t1 t2) = TApp (subst v k t1) (subst v k t2).\nProof.\n  eauto with simpl_subst_goal.\nQed.\n\nLemma subst_TAbs:\n  forall v k t,\n  subst v k (TAbs t) = TAbs (subst (shift 0 v) (1 + k) t).\nProof.\n  eauto with simpl_subst_goal.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Reduction semantics. *)\n\nInductive red : term -> term -> Prop :=\n  | RedBeta:\n      forall t1 t2 t,\n      subst t2 0 t1 = t ->\n      red (TApp (TAbs t1) t2) t\n  | RedContextTAbs:\n      forall t1 t2,\n      red t1 t2 ->\n      red (TAbs t1) (TAbs t2)\n  | RedContextTAppLeft:\n      forall t1 t2 t,\n      red t1 t2 ->\n      red (TApp t1 t) (TApp t2 t)\n  | RedContextTAppRight:\n      forall t1 t2 t,\n      red t1 t2 ->\n      red (TApp t t1) (TApp t t2).\n\n(* The reduction judgement is compatible with weakening. *)\n\nLemma red_weakening:\n  forall t1 t2,\n  red t1 t2 ->\n  forall x,\n  red (shift x t1) (shift x t2).\nProof.\n  induction 1; intros; subst; simpl_lift_goal;\n  econstructor; eauto with lift_subst.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Working with closedness. *)\n\n(* Again, we prove the following lemmas only in order to illustrate\n   the use of the tactic [inversion_closed]. *)\n\nLemma inversion_closed_TVar:\n  forall k x,\n  x >= k ->\n  closed k (TVar x) ->\n  False.\nProof.\n  intros. inversion_closed. eauto using closed_var.\nQed.\n\nLemma inversion_closed_TApp_1:\n  forall t1 t2 k,\n  closed k (TApp t1 t2) ->\n  closed k t1.\nProof.\n  intros. inversion_closed. assumption.\nQed.\n\nLemma inversion_closed_TApp_2:\n  forall t1 t2 k,\n  closed k (TApp t1 t2) ->\n  closed k t2.\nProof.\n  intros. inversion_closed. assumption.\nQed.\n\nLemma inversion_closed_TAbs:\n  forall t k,\n  closed k (TAbs t) ->\n  closed (1 + k) t.\nProof.\n  intros. inversion_closed. assumption.\nQed.\n\n(* Reduction preserves closedness. *)\n\n",
                "context_tokens": 737,
                "proof_start_offset": 4621,
                "proof_end_offset": 4884,
                "proof": "Lemma red_closed: forall t1 t2, red t1 t2 -> forall k, closed k t1 -> closed k t2.\nProof.\ninduction 1; intros; subst; inversion_closed; try construction_closed.\neauto using @subst_preserves_closed with typeclass_instances.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma red_closed: forall t1 t2, red t1 t2 -> forall k, closed k t1 -> closed k t2.\nProof.\n  intros. inversion_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_Qed.",
                    "Lemma red_closed: forall t1 t2, red t1 t2 -> forall k, closed k t1 -> closed k t2.\nProof.\n  intros. inversion_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_Qed.",
                    "Lemma red_closed: forall t1 t2, red t1 t2 -> forall k, closed k t1 -> closed k t2.\nProof.\n  intros. inversion_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed.\nProof.\n  intros. inversion_closed_closed_closed_closed_closed_closed_closed.\n  assumption.\nQed.",
                    "Lemma red_closed: forall t1 t2, red t1 t2 -> forall k, closed k t1 -> closed k t2.\nProof.\n  intros. inversion_closed. assumption.\nQed.",
                    "Lemma red_closed: forall t1 t2, red t1 t2 -> forall k, closed k t1 -> closed k t2.\nProof.\n  intros. inversion_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/DemoLambda.v",
                "context": "ht:\n      forall t1 t2 t,\n      red t1 t2 ->\n      red (TApp t t1) (TApp t t2).\n\n(* The reduction judgement is compatible with weakening. *)\n\nLemma red_weakening:\n  forall t1 t2,\n  red t1 t2 ->\n  forall x,\n  red (shift x t1) (shift x t2).\nProof.\n  induction 1; intros; subst; simpl_lift_goal;\n  econstructor; eauto with lift_subst.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Working with closedness. *)\n\n(* Again, we prove the following lemmas only in order to illustrate\n   the use of the tactic [inversion_closed]. *)\n\nLemma inversion_closed_TVar:\n  forall k x,\n  x >= k ->\n  closed k (TVar x) ->\n  False.\nProof.\n  intros. inversion_closed. eauto using closed_var.\nQed.\n\nLemma inversion_closed_TApp_1:\n  forall t1 t2 k,\n  closed k (TApp t1 t2) ->\n  closed k t1.\nProof.\n  intros. inversion_closed. assumption.\nQed.\n\nLemma inversion_closed_TApp_2:\n  forall t1 t2 k,\n  closed k (TApp t1 t2) ->\n  closed k t2.\nProof.\n  intros. inversion_closed. assumption.\nQed.\n\nLemma inversion_closed_TAbs:\n  forall t k,\n  closed k (TAbs t) ->\n  closed (1 + k) t.\nProof.\n  intros. inversion_closed. assumption.\nQed.\n\n(* Reduction preserves closedness. *)\n\nLemma red_closed:\n  forall t1 t2,\n  red t1 t2 ->\n  forall k,\n  closed k t1 ->\n  closed k t2.\nProof.\n  induction 1; intros; subst; inversion_closed; try construction_closed.\n  (* Case RedBeta. *)\n  eauto using @subst_preserves_closed with typeclass_instances.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Simple types. *)\n\n(* These types do not contain any variables. They have no binding structure. *)\n\nInductive ty :=\n  | TyIota: ty\n  | TyArrow: ty -> ty -> ty.\n\n(* The typing judgement of the simply-typed lambda-calculus. *)\n\nInductive j : env ty -> term -> ty -> Prop :=\n  | JVar:\n      forall E x T,\n      lookup x E = Some T ->\n      j E (TVar x) T\n  | JAbs:\n      forall E t T1 T2,\n      j (insert 0 T1 E) t T2 ->\n      j E (TAbs t) (TyArrow T1 T2)\n  | JApp:\n      forall E t1 t2 T1 T2,\n      j E t1 (TyArrow T1 T2) ->\n      j E t2 T1 ->\n      j E (TApp t1 t2) T2.\n\nHint Constructors j : j.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* The typing judgement is compatible with weakening, i.e., inserting a new\n   term variable. *)\n\n",
                "context_tokens": 702,
                "proof_start_offset": 5750,
                "proof_end_offset": 5972,
                "proof": "Lemma weakening: forall E t T, j E t T -> forall x U E', insert x U E = E' -> j E' (shift x t) T.\nProof.\ninduction 1; intros; subst; simpl_lift_goal; econstructor; eauto with lookup_insert insert_insert.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma weakening: forall E t T, j E t T -> forall x U E', insert x U E = E' -> j E' (shift x t) T.\nProof.\n  intros. inversion_closed. assumption.\nQed.",
                    "Lemma weakening: forall E t T, j E t T -> forall x U E', insert x U E = E' -> j E' (shift x t) T.\nProof.\n  intros. inversion_closed. assumption.\nQed.",
                    "Lemma weakening: forall E t T, j E t T -> forall x U E', insert x U E = E' -> j E' (shift x t) T.\nProof.\n  intros. inversion_closed.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n Qed.",
                    "Lemma weakening: forall E t T, j E t T -> forall x U E', insert x U E = E' -> j E' (shift x t) T.\nProof.\n  intros. inversion_closed.\n  inversion_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed.\nQed.",
                    "Lemma weakening: forall E t T, j E t T -> forall x U E', insert x U E = E' -> j E' (shift x t) T.\nProof.\n  intros. inversion_closed. assumption.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/DemoLambda.v",
                "context": "---------------------------------------------------- *)\n\n(* Working with closedness. *)\n\n(* Again, we prove the following lemmas only in order to illustrate\n   the use of the tactic [inversion_closed]. *)\n\nLemma inversion_closed_TVar:\n  forall k x,\n  x >= k ->\n  closed k (TVar x) ->\n  False.\nProof.\n  intros. inversion_closed. eauto using closed_var.\nQed.\n\nLemma inversion_closed_TApp_1:\n  forall t1 t2 k,\n  closed k (TApp t1 t2) ->\n  closed k t1.\nProof.\n  intros. inversion_closed. assumption.\nQed.\n\nLemma inversion_closed_TApp_2:\n  forall t1 t2 k,\n  closed k (TApp t1 t2) ->\n  closed k t2.\nProof.\n  intros. inversion_closed. assumption.\nQed.\n\nLemma inversion_closed_TAbs:\n  forall t k,\n  closed k (TAbs t) ->\n  closed (1 + k) t.\nProof.\n  intros. inversion_closed. assumption.\nQed.\n\n(* Reduction preserves closedness. *)\n\nLemma red_closed:\n  forall t1 t2,\n  red t1 t2 ->\n  forall k,\n  closed k t1 ->\n  closed k t2.\nProof.\n  induction 1; intros; subst; inversion_closed; try construction_closed.\n  (* Case RedBeta. *)\n  eauto using @subst_preserves_closed with typeclass_instances.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Simple types. *)\n\n(* These types do not contain any variables. They have no binding structure. *)\n\nInductive ty :=\n  | TyIota: ty\n  | TyArrow: ty -> ty -> ty.\n\n(* The typing judgement of the simply-typed lambda-calculus. *)\n\nInductive j : env ty -> term -> ty -> Prop :=\n  | JVar:\n      forall E x T,\n      lookup x E = Some T ->\n      j E (TVar x) T\n  | JAbs:\n      forall E t T1 T2,\n      j (insert 0 T1 E) t T2 ->\n      j E (TAbs t) (TyArrow T1 T2)\n  | JApp:\n      forall E t1 t2 T1 T2,\n      j E t1 (TyArrow T1 T2) ->\n      j E t2 T1 ->\n      j E (TApp t1 t2) T2.\n\nHint Constructors j : j.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* The typing judgement is compatible with weakening, i.e., inserting a new\n   term variable. *)\n\nLemma weakening:\n  forall E t T,\n  j E t T ->\n  forall x U E',\n  insert x U E = E' ->\n  j E' (shift x t) T.\nProof.\n  induction 1; intros; subst; simpl_lift_goal;\n  econstructor; eauto with lookup_insert insert_insert.\nQed.\n\n(* The typing judgement is compatible with substitution, i.e., substituting a\n   well-typed term for a term variable. *)\n\n",
                "context_tokens": 688,
                "proof_start_offset": 6096,
                "proof_end_offset": 6487,
                "proof": "Lemma substitution: forall E x t2 T1 T2, j (insert x T1 E) t2 T2 -> forall t1, j E t1 T1 -> j E (subst t1 x t2) T2.\nProof.\ndo 5 intro; intro h; dependent induction h; intros; simpl_subst_goal; try solve [ econstructor; eauto using weakening with insert_insert ].\nunfold subst_idx.\ndblib_by_cases; lookup_insert_all; eauto with j.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma substitution: forall E x t2 T1 T2, j (insert x T1 E) t2 T2 -> forall t1, j E t1 T1 -> j E (subst t1 x t2) T2.\nProof.\n  induction 1; intros; subst; inversion_closed.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n  apply H0.\n Qed.",
                    "Lemma substitution: forall E x t2 T1 T2, j (insert x T1 E) t2 T2 -> forall t1, j E t1 T1 -> j E (subst t1 x t2) T2.\nProof.\n  induction 1; intros; subst; inversion_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed.\nQed.",
                    "Lemma substitution: forall E x t2 T1 T2, j (insert x T1 E) t2 T2 -> forall t1, j E t1 T1 -> j E (subst t1 x t2) T2.\nProof.\n  induction 1; intros; subst; simpl_lift_hyps.\n  econstructor; eauto with lookup_insert_insert.\n  econstructor; eauto with lookup_insert_insert_insert.\n  econstructor; eauto with lookup_insert_insert_insert.\n  econstructor; eauto with lookup_insert_insert_insert_insert.\n  econstructor; eauto with lookup_insert_insert.\n  econstructor; eauto with lookup_insert_insert_insert.\n  econstructor; eauto with lookup_insert_insert.\n  econstructor; eauto with lookup_insert_insert_insert_insert.\n  econstructor; eauto with lookup_insert_insert_insert.\n  econstructor; eauto with lookup_insert_insert_insert_insert.\n  econstructor; eauto with lookup_insert_insert_insert.\n  econstructor; eauto with lookup_insert_insert_insert.\n  econstructor; eauto with lookup_insert_insert_insert_insert.\n  econstructor; eauto with lookup_insert_insert_insert_insert.\n  econstructor; eauto with lookup_insert_insert_insert.\n  econstructor; eauto with lookup_insert_insert_insert.\n  econstructor; eauto with lookup_insert_insert_insert_insert.\n  econstructor; eauto with lookup_insert_insert_insertQed.",
                    "Lemma substitution: forall E x t2 T1 T2, j (insert x T1 E) t2 T2 -> forall t1, j E t1 T1 -> j E (subst t1 x t2) T2.\nProof.\n  induction 1; intros; subst; inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n  inversion_clear H0.\n Qed.",
                    "Lemma substitution: forall E x t2 T1 T2, j (insert x T1 E) t2 T2 -> forall t1, j E t1 T1 -> j E (subst t1 x t2) T2.\nProof.\n  induction 1; intros; subst; simpl_lift_goal.\n  econstructor; eauto with lookup_insert.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/DemoLambda.v",
                "context": "forall t1 t2 k,\n  closed k (TApp t1 t2) ->\n  closed k t2.\nProof.\n  intros. inversion_closed. assumption.\nQed.\n\nLemma inversion_closed_TAbs:\n  forall t k,\n  closed k (TAbs t) ->\n  closed (1 + k) t.\nProof.\n  intros. inversion_closed. assumption.\nQed.\n\n(* Reduction preserves closedness. *)\n\nLemma red_closed:\n  forall t1 t2,\n  red t1 t2 ->\n  forall k,\n  closed k t1 ->\n  closed k t2.\nProof.\n  induction 1; intros; subst; inversion_closed; try construction_closed.\n  (* Case RedBeta. *)\n  eauto using @subst_preserves_closed with typeclass_instances.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Simple types. *)\n\n(* These types do not contain any variables. They have no binding structure. *)\n\nInductive ty :=\n  | TyIota: ty\n  | TyArrow: ty -> ty -> ty.\n\n(* The typing judgement of the simply-typed lambda-calculus. *)\n\nInductive j : env ty -> term -> ty -> Prop :=\n  | JVar:\n      forall E x T,\n      lookup x E = Some T ->\n      j E (TVar x) T\n  | JAbs:\n      forall E t T1 T2,\n      j (insert 0 T1 E) t T2 ->\n      j E (TAbs t) (TyArrow T1 T2)\n  | JApp:\n      forall E t1 t2 T1 T2,\n      j E t1 (TyArrow T1 T2) ->\n      j E t2 T1 ->\n      j E (TApp t1 t2) T2.\n\nHint Constructors j : j.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* The typing judgement is compatible with weakening, i.e., inserting a new\n   term variable. *)\n\nLemma weakening:\n  forall E t T,\n  j E t T ->\n  forall x U E',\n  insert x U E = E' ->\n  j E' (shift x t) T.\nProof.\n  induction 1; intros; subst; simpl_lift_goal;\n  econstructor; eauto with lookup_insert insert_insert.\nQed.\n\n(* The typing judgement is compatible with substitution, i.e., substituting a\n   well-typed term for a term variable. *)\n\nLemma substitution:\n  forall E x t2 T1 T2,\n  j (insert x T1 E) t2 T2 ->\n  forall t1,\n  j E t1 T1 ->\n  j E (subst t1 x t2) T2.\nProof.\n  do 5 intro; intro h; dependent induction h; intros; simpl_subst_goal;\n  (* General rule. *)\n  try solve [ econstructor; eauto using weakening with insert_insert ].\n  (* Case TVar. *)\n  unfold subst_idx. dblib_by_cases; lookup_insert_all; eauto with j.\nQed.\n\n(* The typing judgement is preserved by reduction. Note that this is\n   proved for an arbitrary environment [E]: we do not restrict our\n   attention to closed terms. *)\n\n",
                "context_tokens": 699,
                "proof_start_offset": 6659,
                "proof_end_offset": 6974,
                "proof": "Lemma type_preservation: forall t1 t2, red t1 t2 -> forall E T, j E t1 T -> j E t2 T.\nProof.\ninduction 1; intros ? ? h; subst; dependent destruction h; eauto with j.\nmatch goal with h: j _ (TAbs _) _ |- _ => inversion h; clear h; subst end.\neauto using substitution.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma type_preservation: forall t1 t2, red t1 t2 -> forall E T, j E t1 T -> j E t2 T.\nProof.\n  induction 1; intros; subst; simpl_lift_goal;\n  econstructor; eauto with lookup_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_Qed.",
                    "Lemma type_preservation: forall t1 t2, red t1 t2 -> forall E T, j E t1 T -> j E t2 T.\nProof.\n  intros. inversion_clear H; subst; auto.\nQed.",
                    "Lemma type_preservation: forall t1 t2, red t1 t2 -> forall E T, j E t1 T -> j E t2 T.\nProof.\n  intros. inversion H; subst; subst; simpl_lift_goal;\n  econstructor; eauto using closed_preservation.\nQed.",
                    "Lemma type_preservation: forall t1 t2, red t1 t2 -> forall E T, j E t1 T -> j E t2 T.\nProof.\n  intros. inversion H; subst; simpl_subst_goal;\n  econstructor; eauto.\nQed.",
                    "Lemma type_preservation: forall t1 t2, red t1 t2 -> forall E T, j E t1 T -> j E t2 T.\nProof.\n  intros. inversion_clear H.\n  (* Toplevel input, characters 15-8:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nError:\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " bounded version of this\n   notion. Perhaps by chance, the basic laws that relate [lookup], [insert],\n   and [map] are valid with respect to Leibniz equality, so we do not define\n   extensional equality. *)\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Operations on environments. *)\n\n(* The empty environment is undefined everywhere. *)\n\nDefinition empty A : env A :=\n  nil.\n\n(* Environment lookup. *)\n\nFixpoint lookup A (x : nat) (e : env A) : option A :=\n  match e, x with\n  | nil, _ =>\n      None\n  | entry :: _, 0 =>\n      entry\n  | _ :: e, S x =>\n      lookup x e\n  end.\n\n(* [insert x a e] inserts a new variable [x], associated with data [a], in the\n   environment [e]. The pre-existing environment entries at index [x] and\n   above are shifted up. Thus, [insert x] is closely analogous to [shift x]\n   for terms. *)\n\n(* [insert] inserts a non-null entry in the environment. We define it in terms\n   of [raw_insert], which can also be used to insert a null entry. [raw_insert]\n   is useful because it allows generating every environment (thus, it can be\n   used in the formulation of an induction principle). *)\n\nFixpoint raw_insert A (x : nat) (o : option A) (e : env A) : env A :=\n  match x, e with\n  | 0, _ =>\n      o :: e\n  | S x, entry :: e =>\n      entry :: raw_insert x o e\n  | S x, nil =>\n      None :: raw_insert x o e\n  end.\n\nNotation insert x a e :=\n  (raw_insert x (Some a) e).\n\n(* [map f e] is the environment obtained by applying [f] to every datum\n   in the environment [e]. *)\n\nFixpoint map A B (f : A -> B) (e : env A) :=\n  match e with\n  | nil =>\n      nil\n  | None :: e =>\n      None :: map f e\n  | Some a :: e =>\n      Some (f a) :: map f e\n  end.\n\n(* [fold f e accu] performs an iteration over all entries in the environment.\n   Older entries are visited first: in other words, the initial accumulator\n   should make sense at the toplevel, outside of the environment, and is\n   pushed successively into every binding, so as to yield a final accumulator\n   that makes sense inside this environment. *)\n\nFixpoint fold A B (f : option A -> B -> B) (e : env A) (accu : B) : B :=\n  match e with\n  | nil =>\n      accu\n  | o :: e =>\n      f o (fold f e accu)\n  end.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Basic arithmetic simplifications. *)\n\n",
                "context_tokens": 639,
                "proof_start_offset": 3688,
                "proof_end_offset": 3780,
                "proof": "Lemma one_plus_x_minus_one_left: forall x, (1 + x) - 1 = x.\nProof.\nintros.\nomega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma one_plus_x_minus_one_left: forall x, (1 + x) - 1 = x.\nProof.\n  induction x; simpl; auto.\n  intros.\n  apply add_assoc_r_one_left; auto.\nQed.",
                    "Lemma one_plus_x_minus_one_left: forall x, (1 + x) - 1 = x.\nProof.\n  intros.\n  unfold fold A.\n  fold A.\n  fold A.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n  fold B.\n Qed.",
                    "Lemma one_plus_x_minus_one_left: forall x, (1 + x) - 1 = x.\nProof.\n  induction x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simplQed.",
                    "Lemma one_plus_x_minus_one_left: forall x, (1 + x) - 1 = x.\nProof.\nintros x.\nassert (0 <= x).\napply (eq_refl x0).\napply (eq_refl x0).\napply (eq_refl x0).\napply (eq_refl x0).\napply (eq_refl x0).\napply (eq_refl x0).\napply (eq_refl x0).\napply (eq_refl x0).\napply (eq_refl x0).\napply (eq_refl x0).\napply (eq_refl x0).\napply (eq_refl x0).\napply (eq_refl x0).\napply (eq_refl x0).\napply (eq_refl x0).\napply (eq_refl x0).\napply (eq_refl x0).\napply (eq_refl x0).\napply (eq_refl x0).\napply (eq_refl x0).\napply (eq_refl x0).\napply (eq_refl x0).\napply (eq_refl x0).\napply (eq_refl x0).\napply (eq_refl x0).\napply (eq_refl x0).\napply (eq_refl x0Qed.",
                    "Lemma one_plus_x_minus_one_left: forall x, (1 + x) - 1 = x.\nProof.\n  induction x; simpl; intros; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct xQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "  and [map] are valid with respect to Leibniz equality, so we do not define\n   extensional equality. *)\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Operations on environments. *)\n\n(* The empty environment is undefined everywhere. *)\n\nDefinition empty A : env A :=\n  nil.\n\n(* Environment lookup. *)\n\nFixpoint lookup A (x : nat) (e : env A) : option A :=\n  match e, x with\n  | nil, _ =>\n      None\n  | entry :: _, 0 =>\n      entry\n  | _ :: e, S x =>\n      lookup x e\n  end.\n\n(* [insert x a e] inserts a new variable [x], associated with data [a], in the\n   environment [e]. The pre-existing environment entries at index [x] and\n   above are shifted up. Thus, [insert x] is closely analogous to [shift x]\n   for terms. *)\n\n(* [insert] inserts a non-null entry in the environment. We define it in terms\n   of [raw_insert], which can also be used to insert a null entry. [raw_insert]\n   is useful because it allows generating every environment (thus, it can be\n   used in the formulation of an induction principle). *)\n\nFixpoint raw_insert A (x : nat) (o : option A) (e : env A) : env A :=\n  match x, e with\n  | 0, _ =>\n      o :: e\n  | S x, entry :: e =>\n      entry :: raw_insert x o e\n  | S x, nil =>\n      None :: raw_insert x o e\n  end.\n\nNotation insert x a e :=\n  (raw_insert x (Some a) e).\n\n(* [map f e] is the environment obtained by applying [f] to every datum\n   in the environment [e]. *)\n\nFixpoint map A B (f : A -> B) (e : env A) :=\n  match e with\n  | nil =>\n      nil\n  | None :: e =>\n      None :: map f e\n  | Some a :: e =>\n      Some (f a) :: map f e\n  end.\n\n(* [fold f e accu] performs an iteration over all entries in the environment.\n   Older entries are visited first: in other words, the initial accumulator\n   should make sense at the toplevel, outside of the environment, and is\n   pushed successively into every binding, so as to yield a final accumulator\n   that makes sense inside this environment. *)\n\nFixpoint fold A B (f : option A -> B -> B) (e : env A) (accu : B) : B :=\n  match e with\n  | nil =>\n      accu\n  | o :: e =>\n      f o (fold f e accu)\n  end.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Basic arithmetic simplifications. *)\n\nLemma one_plus_x_minus_one_left:\n  forall x,\n  (1 + x) - 1 = x.\nProof.\n  intros. omega.\nQed.\n\n",
                "context_tokens": 656,
                "proof_start_offset": 3782,
                "proof_end_offset": 3886,
                "proof": "Lemma one_plus_x_minus_one_right: forall x, x > 0 -> 1 + (x - 1) = x.\nProof.\nintros.\nomega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma one_plus_x_minus_one_right: forall x, x > 0 -> 1 + (x - 1) = x.\nProof.\n  intros. omega.\nQed.",
                    "Lemma one_plus_x_minus_one_right: forall x, x > 0 -> 1 + (x - 1) = x.\nProof.\n  intros. omega.\nQed.",
                    "Lemma one_plus_x_minus_one_right: forall x, x > 0 -> 1 + (x - 1) = x.\nProof.\n  intros. omega.\nQed.",
                    "Lemma one_plus_x_minus_one_right: forall x, x > 0 -> 1 + (x - 1) = x.\nProof.\n  intros. omega.\nQed.",
                    "Lemma one_plus_x_minus_one_right: forall x, x > 0 -> 1 + (x - 1) = x.\nProof.\n  intros. omega.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "=>\n      None\n  | entry :: _, 0 =>\n      entry\n  | _ :: e, S x =>\n      lookup x e\n  end.\n\n(* [insert x a e] inserts a new variable [x], associated with data [a], in the\n   environment [e]. The pre-existing environment entries at index [x] and\n   above are shifted up. Thus, [insert x] is closely analogous to [shift x]\n   for terms. *)\n\n(* [insert] inserts a non-null entry in the environment. We define it in terms\n   of [raw_insert], which can also be used to insert a null entry. [raw_insert]\n   is useful because it allows generating every environment (thus, it can be\n   used in the formulation of an induction principle). *)\n\nFixpoint raw_insert A (x : nat) (o : option A) (e : env A) : env A :=\n  match x, e with\n  | 0, _ =>\n      o :: e\n  | S x, entry :: e =>\n      entry :: raw_insert x o e\n  | S x, nil =>\n      None :: raw_insert x o e\n  end.\n\nNotation insert x a e :=\n  (raw_insert x (Some a) e).\n\n(* [map f e] is the environment obtained by applying [f] to every datum\n   in the environment [e]. *)\n\nFixpoint map A B (f : A -> B) (e : env A) :=\n  match e with\n  | nil =>\n      nil\n  | None :: e =>\n      None :: map f e\n  | Some a :: e =>\n      Some (f a) :: map f e\n  end.\n\n(* [fold f e accu] performs an iteration over all entries in the environment.\n   Older entries are visited first: in other words, the initial accumulator\n   should make sense at the toplevel, outside of the environment, and is\n   pushed successively into every binding, so as to yield a final accumulator\n   that makes sense inside this environment. *)\n\nFixpoint fold A B (f : option A -> B -> B) (e : env A) (accu : B) : B :=\n  match e with\n  | nil =>\n      accu\n  | o :: e =>\n      f o (fold f e accu)\n  end.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Basic arithmetic simplifications. *)\n\nLemma one_plus_x_minus_one_left:\n  forall x,\n  (1 + x) - 1 = x.\nProof.\n  intros. omega.\nQed.\n\nLemma one_plus_x_minus_one_right:\n  forall x,\n  x > 0 ->\n  1 + (x - 1) = x.\nProof.\n  intros. omega.\nQed.\n\nLtac one_plus_x_minus_one :=\n  repeat rewrite one_plus_x_minus_one_left in *;\n  repeat rewrite one_plus_x_minus_one_right in * by omega.\n  (* I tried [autorewrite with... using omega]; it does not work. *)\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Trivial facts. *)\n\n",
                "context_tokens": 682,
                "proof_start_offset": 4202,
                "proof_end_offset": 4306,
                "proof": "Lemma raw_insert_zero: forall A o (e : env A), raw_insert 0 o e = o :: e.\nProof.\nreflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma raw_insert_zero: forall A o (e : env A), raw_insert 0 o e = o :: e.\nProof.\n  intros.\n  assert (forall e, raw_insert o e e = true -> raw_insert o e e = true).\n  { intros.\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).\n    specialize (H e).Qed.",
                    "Lemma raw_insert_zero: forall A o (e : env A), raw_insert 0 o e = o :: e.\nProof.\n  intros. omega.\nQed.",
                    "Lemma raw_insert_zero: forall A o (e : env A), raw_insert 0 o e = o :: e.\nProof.\n  intros. omega.\nQed.",
                    "Lemma raw_insert_zero: forall A o (e : env A), raw_insert 0 o e = o :: e.\nProof.\n  intros. omega.\nQed.",
                    "Lemma raw_insert_zero: forall A o (e : env A), raw_insert 0 o e = o :: e.\nProof.\n  intros. omega.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " with data [a], in the\n   environment [e]. The pre-existing environment entries at index [x] and\n   above are shifted up. Thus, [insert x] is closely analogous to [shift x]\n   for terms. *)\n\n(* [insert] inserts a non-null entry in the environment. We define it in terms\n   of [raw_insert], which can also be used to insert a null entry. [raw_insert]\n   is useful because it allows generating every environment (thus, it can be\n   used in the formulation of an induction principle). *)\n\nFixpoint raw_insert A (x : nat) (o : option A) (e : env A) : env A :=\n  match x, e with\n  | 0, _ =>\n      o :: e\n  | S x, entry :: e =>\n      entry :: raw_insert x o e\n  | S x, nil =>\n      None :: raw_insert x o e\n  end.\n\nNotation insert x a e :=\n  (raw_insert x (Some a) e).\n\n(* [map f e] is the environment obtained by applying [f] to every datum\n   in the environment [e]. *)\n\nFixpoint map A B (f : A -> B) (e : env A) :=\n  match e with\n  | nil =>\n      nil\n  | None :: e =>\n      None :: map f e\n  | Some a :: e =>\n      Some (f a) :: map f e\n  end.\n\n(* [fold f e accu] performs an iteration over all entries in the environment.\n   Older entries are visited first: in other words, the initial accumulator\n   should make sense at the toplevel, outside of the environment, and is\n   pushed successively into every binding, so as to yield a final accumulator\n   that makes sense inside this environment. *)\n\nFixpoint fold A B (f : option A -> B -> B) (e : env A) (accu : B) : B :=\n  match e with\n  | nil =>\n      accu\n  | o :: e =>\n      f o (fold f e accu)\n  end.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Basic arithmetic simplifications. *)\n\nLemma one_plus_x_minus_one_left:\n  forall x,\n  (1 + x) - 1 = x.\nProof.\n  intros. omega.\nQed.\n\nLemma one_plus_x_minus_one_right:\n  forall x,\n  x > 0 ->\n  1 + (x - 1) = x.\nProof.\n  intros. omega.\nQed.\n\nLtac one_plus_x_minus_one :=\n  repeat rewrite one_plus_x_minus_one_left in *;\n  repeat rewrite one_plus_x_minus_one_right in * by omega.\n  (* I tried [autorewrite with... using omega]; it does not work. *)\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Trivial facts. *)\n\nLemma raw_insert_zero:\n  forall A o (e : env A),\n  raw_insert 0 o e = o :: e.\nProof.\n  reflexivity.\nQed.\n\n",
                "context_tokens": 676,
                "proof_start_offset": 4308,
                "proof_end_offset": 4484,
                "proof": "Lemma raw_insert_successor: forall A x o (e : env A), raw_insert (S x) o e = lookup 0 e :: raw_insert x o (tail e).\nProof.\nintros.\ndestruct e; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma raw_insert_successor: forall A x o (e : env A), raw_insert (S x) o e = lookup 0 e :: raw_insert x o (tail e).\nProof.\n  intros. omega.\nQed.",
                    "Lemma raw_insert_successor: forall A x o (e : env A), raw_insert (S x) o e = lookup 0 e :: raw_insert x o (tail e).\nProof.\n  intros.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o; auto.\n  destruct o;Qed.",
                    "Lemma raw_insert_successor: forall A x o (e : env A), raw_insert (S x) o e = lookup 0 e :: raw_insert x o (tail e).\nProof.\n  intros. omega.\nQed.",
                    "Lemma raw_insert_successor: forall A x o (e : env A), raw_insert (S x) o e = lookup 0 e :: raw_insert x o (tail e).\nProof.\n  intros.\n  apply raw_insert_inv in H.\n  apply raw_insert_inv in H.\n  apply raw_insert_inv in H.\n  apply raw_insert_inv in H.\n  apply raw_insert_inv in H.\n  apply raw_insert_inv in H.\n  apply raw_insert_inv in H.\n  apply raw_insert_inv in H.\n  apply raw_insert_inv in H.\n  apply raw_insert_inv in H.\n  apply raw_insert_inv in H.\n  apply raw_insert_inv in H.\n  apply raw_insert_inv in H.\n  apply raw_insert_inv in H.\n  apply raw_insert_inv in H.\n  apply raw_insert_inv in H.\n  apply raw_insert_inv in H.\n  apply raw_insert_inv in H.\n  apply raw_insert_inv in H.\n  apply raw_insert_inv in H.\n  apply raw_insert_inv in H.\n  apply raw_insert_inv in H.\n  apply raw_insert_inv in H.\n  apply raw_insert_inv in H.\n  apply raw_insert_inv in H.Qed.",
                    "Lemma raw_insert_successor: forall A x o (e : env A), raw_insert (S x) o e = lookup 0 e :: raw_insert x o (tail e).\nProof.\n  intros. omega.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "inserts a non-null entry in the environment. We define it in terms\n   of [raw_insert], which can also be used to insert a null entry. [raw_insert]\n   is useful because it allows generating every environment (thus, it can be\n   used in the formulation of an induction principle). *)\n\nFixpoint raw_insert A (x : nat) (o : option A) (e : env A) : env A :=\n  match x, e with\n  | 0, _ =>\n      o :: e\n  | S x, entry :: e =>\n      entry :: raw_insert x o e\n  | S x, nil =>\n      None :: raw_insert x o e\n  end.\n\nNotation insert x a e :=\n  (raw_insert x (Some a) e).\n\n(* [map f e] is the environment obtained by applying [f] to every datum\n   in the environment [e]. *)\n\nFixpoint map A B (f : A -> B) (e : env A) :=\n  match e with\n  | nil =>\n      nil\n  | None :: e =>\n      None :: map f e\n  | Some a :: e =>\n      Some (f a) :: map f e\n  end.\n\n(* [fold f e accu] performs an iteration over all entries in the environment.\n   Older entries are visited first: in other words, the initial accumulator\n   should make sense at the toplevel, outside of the environment, and is\n   pushed successively into every binding, so as to yield a final accumulator\n   that makes sense inside this environment. *)\n\nFixpoint fold A B (f : option A -> B -> B) (e : env A) (accu : B) : B :=\n  match e with\n  | nil =>\n      accu\n  | o :: e =>\n      f o (fold f e accu)\n  end.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Basic arithmetic simplifications. *)\n\nLemma one_plus_x_minus_one_left:\n  forall x,\n  (1 + x) - 1 = x.\nProof.\n  intros. omega.\nQed.\n\nLemma one_plus_x_minus_one_right:\n  forall x,\n  x > 0 ->\n  1 + (x - 1) = x.\nProof.\n  intros. omega.\nQed.\n\nLtac one_plus_x_minus_one :=\n  repeat rewrite one_plus_x_minus_one_left in *;\n  repeat rewrite one_plus_x_minus_one_right in * by omega.\n  (* I tried [autorewrite with... using omega]; it does not work. *)\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Trivial facts. *)\n\nLemma raw_insert_zero:\n  forall A o (e : env A),\n  raw_insert 0 o e = o :: e.\nProof.\n  reflexivity.\nQed.\n\nLemma raw_insert_successor:\n  forall A x o (e : env A),\n  raw_insert (S x) o e =\n  lookup 0 e :: raw_insert x o (tail e).\nProof.\n  intros. destruct e; reflexivity. (*! *)\nQed. (* Maybe this should be the definition of [raw_insert]. *)\n\n",
                "context_tokens": 696,
                "proof_start_offset": 4545,
                "proof_end_offset": 4773,
                "proof": "Lemma empty_eq_insert: forall A x o (e : env A), empty _ = insert x o e -> False.\nProof.\nunfold empty; intros; destruct x.\nrewrite raw_insert_zero in *.\ncongruence.\nrewrite raw_insert_successor in *.\ncongruence.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma empty_eq_insert: forall A x o (e : env A), empty _ = insert x o e -> False.\nProof.\n  intros.\n  apply raw_insert_inv_eq.\n  apply raw_insert_inv_right.\n  apply raw_insert_inv_eq.\n  apply raw_insert_inv_eq.\n  apply raw_insert_inv_eq.\n  apply raw_insert_inv_eq.\n  apply raw_insert_inv_eq.\n  apply raw_insert_inv_eq.\n  apply raw_insert_inv_eq.\n  apply raw_insert_inv_inv_eq.\n  apply raw_insert_inv_eq.\n  apply raw_insert_inv_inv_eq.\n  apply raw_insert_inv_inv_eq.\n  apply raw_insert_inv_inv_eq.\n  apply raw_insert_inv_inv_eq.\n  apply raw_insert_inv_inv_eq.\n  apply raw_insert_inv_inv_eq.\n  apply raw_insert_inv_inv_eq.\n  apply raw_insert_inv_inv_eq.\n  apply raw_insert_inv_inv_eq.\n  apply raw_insert_inv_inv_eq.\n  apply raw_insert_inv_inv_eq.\n  apply raw_insert_Qed.",
                    "Lemma empty_eq_insert: forall A x o (e : env A), empty _ = insert x o e -> False.\nProof.\n  intros.\n  destruct e; reflexivity.\nQed.",
                    "Lemma empty_eq_insert: forall A x o (e : env A), empty _ = insert x o e -> False.\nProof.\n  intros.\n  apply raw_insert_or_right with (x := x) (y := x) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y)Qed.",
                    "Lemma empty_eq_insert: forall A x o (e : env A), empty _ = insert x o e -> False.\nProof.\n  intros.\n  destruct e; reflexivity.\nQed.",
                    "Lemma empty_eq_insert: forall A x o (e : env A), empty _ = insert x o e -> False.\nProof.\n  intros.\n  rewrite <- insert_insert_insert_l.\n  destruct o; reflexivity.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " A :=\n  match x, e with\n  | 0, _ =>\n      o :: e\n  | S x, entry :: e =>\n      entry :: raw_insert x o e\n  | S x, nil =>\n      None :: raw_insert x o e\n  end.\n\nNotation insert x a e :=\n  (raw_insert x (Some a) e).\n\n(* [map f e] is the environment obtained by applying [f] to every datum\n   in the environment [e]. *)\n\nFixpoint map A B (f : A -> B) (e : env A) :=\n  match e with\n  | nil =>\n      nil\n  | None :: e =>\n      None :: map f e\n  | Some a :: e =>\n      Some (f a) :: map f e\n  end.\n\n(* [fold f e accu] performs an iteration over all entries in the environment.\n   Older entries are visited first: in other words, the initial accumulator\n   should make sense at the toplevel, outside of the environment, and is\n   pushed successively into every binding, so as to yield a final accumulator\n   that makes sense inside this environment. *)\n\nFixpoint fold A B (f : option A -> B -> B) (e : env A) (accu : B) : B :=\n  match e with\n  | nil =>\n      accu\n  | o :: e =>\n      f o (fold f e accu)\n  end.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Basic arithmetic simplifications. *)\n\nLemma one_plus_x_minus_one_left:\n  forall x,\n  (1 + x) - 1 = x.\nProof.\n  intros. omega.\nQed.\n\nLemma one_plus_x_minus_one_right:\n  forall x,\n  x > 0 ->\n  1 + (x - 1) = x.\nProof.\n  intros. omega.\nQed.\n\nLtac one_plus_x_minus_one :=\n  repeat rewrite one_plus_x_minus_one_left in *;\n  repeat rewrite one_plus_x_minus_one_right in * by omega.\n  (* I tried [autorewrite with... using omega]; it does not work. *)\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Trivial facts. *)\n\nLemma raw_insert_zero:\n  forall A o (e : env A),\n  raw_insert 0 o e = o :: e.\nProof.\n  reflexivity.\nQed.\n\nLemma raw_insert_successor:\n  forall A x o (e : env A),\n  raw_insert (S x) o e =\n  lookup 0 e :: raw_insert x o (tail e).\nProof.\n  intros. destruct e; reflexivity. (*! *)\nQed. (* Maybe this should be the definition of [raw_insert]. *)\n\nLemma empty_eq_insert:\n  forall A x o (e : env A),\n  empty _ = insert x o e ->\n  False.\nProof.\n  unfold empty; intros; destruct x.\n  rewrite raw_insert_zero in *. congruence.\n  rewrite raw_insert_successor in *. congruence.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Interaction between [lookup] and [empty]. *)\n\n",
                "context_tokens": 694,
                "proof_start_offset": 4908,
                "proof_end_offset": 5022,
                "proof": "Lemma lookup_empty_None: forall A x, lookup x (@empty A) = None.\nProof.\ndestruct x; simpl; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma lookup_empty_None: forall A x, lookup x (@empty A) = None.\nProof.\n  unfold lookup; intros.\n  destruct x; reflexivity.\nQed.",
                    "Lemma lookup_empty_None: forall A x, lookup x (@empty A) = None.\nProof.\n  intros.\n  destruct x; reflexivity.\nQed.",
                    "Lemma lookup_empty_None: forall A x, lookup x (@empty A) = None.\nProof.\n  unfold lookup; intros.\n  destruct x.\n  rewrite raw_insert_iff in H. congruence.\nQed.",
                    "Lemma lookup_empty_None: forall A x, lookup x (@empty A) = None.\nProof.\n  unfold lookup; intros; destruct x; reflexivity.\nQed.",
                    "Lemma lookup_empty_None: forall A x, lookup x (@empty A) = None.\nProof.\n  intros.\n  destruct x; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "aw_insert x o e\n  end.\n\nNotation insert x a e :=\n  (raw_insert x (Some a) e).\n\n(* [map f e] is the environment obtained by applying [f] to every datum\n   in the environment [e]. *)\n\nFixpoint map A B (f : A -> B) (e : env A) :=\n  match e with\n  | nil =>\n      nil\n  | None :: e =>\n      None :: map f e\n  | Some a :: e =>\n      Some (f a) :: map f e\n  end.\n\n(* [fold f e accu] performs an iteration over all entries in the environment.\n   Older entries are visited first: in other words, the initial accumulator\n   should make sense at the toplevel, outside of the environment, and is\n   pushed successively into every binding, so as to yield a final accumulator\n   that makes sense inside this environment. *)\n\nFixpoint fold A B (f : option A -> B -> B) (e : env A) (accu : B) : B :=\n  match e with\n  | nil =>\n      accu\n  | o :: e =>\n      f o (fold f e accu)\n  end.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Basic arithmetic simplifications. *)\n\nLemma one_plus_x_minus_one_left:\n  forall x,\n  (1 + x) - 1 = x.\nProof.\n  intros. omega.\nQed.\n\nLemma one_plus_x_minus_one_right:\n  forall x,\n  x > 0 ->\n  1 + (x - 1) = x.\nProof.\n  intros. omega.\nQed.\n\nLtac one_plus_x_minus_one :=\n  repeat rewrite one_plus_x_minus_one_left in *;\n  repeat rewrite one_plus_x_minus_one_right in * by omega.\n  (* I tried [autorewrite with... using omega]; it does not work. *)\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Trivial facts. *)\n\nLemma raw_insert_zero:\n  forall A o (e : env A),\n  raw_insert 0 o e = o :: e.\nProof.\n  reflexivity.\nQed.\n\nLemma raw_insert_successor:\n  forall A x o (e : env A),\n  raw_insert (S x) o e =\n  lookup 0 e :: raw_insert x o (tail e).\nProof.\n  intros. destruct e; reflexivity. (*! *)\nQed. (* Maybe this should be the definition of [raw_insert]. *)\n\nLemma empty_eq_insert:\n  forall A x o (e : env A),\n  empty _ = insert x o e ->\n  False.\nProof.\n  unfold empty; intros; destruct x.\n  rewrite raw_insert_zero in *. congruence.\n  rewrite raw_insert_successor in *. congruence.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Interaction between [lookup] and [empty]. *)\n\nLemma lookup_empty_None:\n  forall A x,\n  lookup x (@empty A) = None.\nProof.\n  destruct x; simpl; reflexivity.\nQed.\n\n",
                "context_tokens": 686,
                "proof_start_offset": 5024,
                "proof_end_offset": 5158,
                "proof": "Lemma lookup_empty_Some: forall A x (a : A), lookup x (@empty _) = Some a -> False.\nProof.\ndestruct x; simpl; congruence.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma lookup_empty_Some: forall A x (a : A), lookup x (@empty _) = Some a -> False.\nProof.\n  intros.\n  destruct x; reflexivity.\nQed.",
                    "Lemma lookup_empty_Some: forall A x (a : A), lookup x (@empty _) = Some a -> False.\nProof.\n  intros.\n  destruct x; simpl; reflexivity.\nQed.",
                    "Lemma lookup_empty_Some: forall A x (a : A), lookup x (@empty _) = Some a -> False.\nProof.\n  intros.\n  destruct x; reflexivity.\nQed.",
                    "Lemma lookup_empty_Some: forall A x (a : A), lookup x (@empty _) = Some a -> False.\nProof.\n  intros.\n  destruct x; simpl; reflexivity.\nQed.",
                    "Lemma lookup_empty_Some: forall A x (a : A), lookup x (@empty _) = Some a -> False.\nProof.\n  intros. destruct x; reflexivity.\n  destruct x; reflexivity.\n  destruct x; reflexivity.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "to every datum\n   in the environment [e]. *)\n\nFixpoint map A B (f : A -> B) (e : env A) :=\n  match e with\n  | nil =>\n      nil\n  | None :: e =>\n      None :: map f e\n  | Some a :: e =>\n      Some (f a) :: map f e\n  end.\n\n(* [fold f e accu] performs an iteration over all entries in the environment.\n   Older entries are visited first: in other words, the initial accumulator\n   should make sense at the toplevel, outside of the environment, and is\n   pushed successively into every binding, so as to yield a final accumulator\n   that makes sense inside this environment. *)\n\nFixpoint fold A B (f : option A -> B -> B) (e : env A) (accu : B) : B :=\n  match e with\n  | nil =>\n      accu\n  | o :: e =>\n      f o (fold f e accu)\n  end.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Basic arithmetic simplifications. *)\n\nLemma one_plus_x_minus_one_left:\n  forall x,\n  (1 + x) - 1 = x.\nProof.\n  intros. omega.\nQed.\n\nLemma one_plus_x_minus_one_right:\n  forall x,\n  x > 0 ->\n  1 + (x - 1) = x.\nProof.\n  intros. omega.\nQed.\n\nLtac one_plus_x_minus_one :=\n  repeat rewrite one_plus_x_minus_one_left in *;\n  repeat rewrite one_plus_x_minus_one_right in * by omega.\n  (* I tried [autorewrite with... using omega]; it does not work. *)\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Trivial facts. *)\n\nLemma raw_insert_zero:\n  forall A o (e : env A),\n  raw_insert 0 o e = o :: e.\nProof.\n  reflexivity.\nQed.\n\nLemma raw_insert_successor:\n  forall A x o (e : env A),\n  raw_insert (S x) o e =\n  lookup 0 e :: raw_insert x o (tail e).\nProof.\n  intros. destruct e; reflexivity. (*! *)\nQed. (* Maybe this should be the definition of [raw_insert]. *)\n\nLemma empty_eq_insert:\n  forall A x o (e : env A),\n  empty _ = insert x o e ->\n  False.\nProof.\n  unfold empty; intros; destruct x.\n  rewrite raw_insert_zero in *. congruence.\n  rewrite raw_insert_successor in *. congruence.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Interaction between [lookup] and [empty]. *)\n\nLemma lookup_empty_None:\n  forall A x,\n  lookup x (@empty A) = None.\nProof.\n  destruct x; simpl; reflexivity.\nQed.\n\nLemma lookup_empty_Some:\n  forall A x (a : A),\n  lookup x (@empty _) = Some a ->\n  False.\nProof.\n  destruct x; simpl; congruence.\nQed.\n\n",
                "context_tokens": 685,
                "proof_start_offset": 5160,
                "proof_end_offset": 5335,
                "proof": "Lemma lookup_successor: forall A x (e : env A), lookup (S x) e = lookup x (tail e).\nProof.\ndestruct e.\ndo 2 rewrite lookup_empty_None.\nreflexivity.\nreflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma lookup_successor: forall A x (e : env A), lookup (S x) e = lookup x (tail e).\nProof.\n  induction x; simpl; congruence.\nQed.",
                    "Lemma lookup_successor: forall A x (e : env A), lookup (S x) e = lookup x (tail e).\nProof.\n  intros.\n  destruct x; simpl; congruence.\nQed.",
                    "Lemma lookup_successor: forall A x (e : env A), lookup (S x) e = lookup x (tail e).\nProof.\n  induction e; simpl; congruence.\nQed.",
                    "Lemma lookup_successor: forall A x (e : env A), lookup (S x) e = lookup x (tail e).\nProof.\n  intros.\n  destruct x; simpl; congruence.\nQed.",
                    "Lemma lookup_successor: forall A x (e : env A), lookup (S x) e = lookup x (tail e).\nProof.\n  induction e; simpl; auto.\n  destruct x; simpl; congruence.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " first: in other words, the initial accumulator\n   should make sense at the toplevel, outside of the environment, and is\n   pushed successively into every binding, so as to yield a final accumulator\n   that makes sense inside this environment. *)\n\nFixpoint fold A B (f : option A -> B -> B) (e : env A) (accu : B) : B :=\n  match e with\n  | nil =>\n      accu\n  | o :: e =>\n      f o (fold f e accu)\n  end.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Basic arithmetic simplifications. *)\n\nLemma one_plus_x_minus_one_left:\n  forall x,\n  (1 + x) - 1 = x.\nProof.\n  intros. omega.\nQed.\n\nLemma one_plus_x_minus_one_right:\n  forall x,\n  x > 0 ->\n  1 + (x - 1) = x.\nProof.\n  intros. omega.\nQed.\n\nLtac one_plus_x_minus_one :=\n  repeat rewrite one_plus_x_minus_one_left in *;\n  repeat rewrite one_plus_x_minus_one_right in * by omega.\n  (* I tried [autorewrite with... using omega]; it does not work. *)\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Trivial facts. *)\n\nLemma raw_insert_zero:\n  forall A o (e : env A),\n  raw_insert 0 o e = o :: e.\nProof.\n  reflexivity.\nQed.\n\nLemma raw_insert_successor:\n  forall A x o (e : env A),\n  raw_insert (S x) o e =\n  lookup 0 e :: raw_insert x o (tail e).\nProof.\n  intros. destruct e; reflexivity. (*! *)\nQed. (* Maybe this should be the definition of [raw_insert]. *)\n\nLemma empty_eq_insert:\n  forall A x o (e : env A),\n  empty _ = insert x o e ->\n  False.\nProof.\n  unfold empty; intros; destruct x.\n  rewrite raw_insert_zero in *. congruence.\n  rewrite raw_insert_successor in *. congruence.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Interaction between [lookup] and [empty]. *)\n\nLemma lookup_empty_None:\n  forall A x,\n  lookup x (@empty A) = None.\nProof.\n  destruct x; simpl; reflexivity.\nQed.\n\nLemma lookup_empty_Some:\n  forall A x (a : A),\n  lookup x (@empty _) = Some a ->\n  False.\nProof.\n  destruct x; simpl; congruence.\nQed.\n\nLemma lookup_successor:\n  forall A x (e : env A),\n  lookup (S x) e = lookup x (tail e).\nProof.\n  destruct e.\n  do 2 rewrite lookup_empty_None. reflexivity.\n  reflexivity.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Interaction between [lookup] and [insert]. *)\n\n",
                "context_tokens": 661,
                "proof_start_offset": 5471,
                "proof_end_offset": 5755,
                "proof": "Lemma lookup_insert_bingo: forall A x y (o : option A) e, x = y -> lookup x (raw_insert y o e) = o.\nProof.\ninduction x; intros; destruct y; destruct e; simpl; try solve [ elimtype False; omega | eauto with omega ].\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma lookup_insert_bingo: forall A x y (o : option A) e, x = y -> lookup x (raw_insert y o e) = o.\nProof.\n  intros.\n  rewrite lookup_empty_empty_r in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_empty_iff in *.\n  rewrite lookup_emptyQed.",
                    "Lemma lookup_insert_bingo: forall A x y (o : option A) e, x = y -> lookup x (raw_insert y o e) = o.\nProof.\n  intros.\n  rewrite lookup_empty_iff in H. congruence.\nQed.",
                    "Lemma lookup_insert_bingo: forall A x y (o : option A) e, x = y -> lookup x (raw_insert y o e) = o.\nProof.\n  intros. destruct x; simpl; congruence.\nQed.",
                    "Lemma lookup_insert_bingo: forall A x y (o : option A) e, x = y -> lookup x (raw_insert y o e) = o.\nProof.\n  intros.\n  destruct x; simpl; congruence.\nQed.",
                    "Lemma lookup_insert_bingo: forall A x y (o : option A) e, x = y -> lookup x (raw_insert y o e) = o.\nProof.\n  destruct x; simpl; congruence.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "e the definition of [raw_insert]. *)\n\nLemma empty_eq_insert:\n  forall A x o (e : env A),\n  empty _ = insert x o e ->\n  False.\nProof.\n  unfold empty; intros; destruct x.\n  rewrite raw_insert_zero in *. congruence.\n  rewrite raw_insert_successor in *. congruence.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Interaction between [lookup] and [empty]. *)\n\nLemma lookup_empty_None:\n  forall A x,\n  lookup x (@empty A) = None.\nProof.\n  destruct x; simpl; reflexivity.\nQed.\n\nLemma lookup_empty_Some:\n  forall A x (a : A),\n  lookup x (@empty _) = Some a ->\n  False.\nProof.\n  destruct x; simpl; congruence.\nQed.\n\nLemma lookup_successor:\n  forall A x (e : env A),\n  lookup (S x) e = lookup x (tail e).\nProof.\n  destruct e.\n  do 2 rewrite lookup_empty_None. reflexivity.\n  reflexivity.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Interaction between [lookup] and [insert]. *)\n\nLemma lookup_insert_bingo:\n  forall A x y (o : option A) e,\n  x = y ->\n  lookup x (raw_insert y o e) = o.\n(* Hence, [lookup x (insert y a e) = Some a]. *)\nProof.\n  induction x; intros; destruct y; destruct e; simpl; try solve [\n    elimtype False; omega\n  | eauto with omega\n  ].\nQed.\n\nLemma lookup_insert_recent:\n  forall A x y (o : option A) e,\n  x < y ->\n  lookup x (raw_insert y o e) = lookup x e.\n(* Hence, [lookup x (insert y a e) = lookup x e]. *)\nProof.\n  induction x; intros; destruct y; destruct e; simpl; try solve [\n    elimtype False; omega\n  | eauto with omega\n  ].\n  (* One troublesome case. *)\n  erewrite <- lookup_empty_None. eauto with omega.\nQed.\n\nLemma lookup_insert_old:\n  forall A x y (o : option A) e,\n  x > y ->\n  lookup x (raw_insert y o e) = lookup (x - 1) e.\n(* Hence, [lookup x (insert y a e) = lookup (x - 1) e]. *)\nProof.\n  (* Induction over [x], which is non-zero. *)\n  induction x; intros; [ elimtype False; omega | replace (S x - 1) with x by omega ].\n  (* Case analysis. *)\n  destruct y; destruct e; simpl; try solve [ eauto ].\n  (* One troublesome case. *)\n  rewrite lookup_empty_None. erewrite <- lookup_empty_None. eauto with omega.\n  (* Another troublesome case. *)\n  destruct x; intros; [ elimtype False; omega | replace (S x - 1) with x in * by omega ].\n  simpl lookup at 2.\n  eauto with omega.\nQed.\n\n",
                "context_tokens": 689,
                "proof_start_offset": 6812,
                "proof_end_offset": 7137,
                "proof": "Lemma lookup_shift_insert: forall A x y (o : option A) e, lookup (shift y x) (raw_insert y o e) = lookup x e.\nProof.\nintros.\ndestruct_lift_idx.\nrewrite lookup_insert_old by omega.\nf_equal.\nomega.\nrewrite lookup_insert_recent by omega.\nreflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma lookup_shift_insert: forall A x y (o : option A) e, lookup (shift y x) (raw_insert y o e) = lookup x e.\nProof.\n  induction x; intros; destruct x; simpl; try solve [inversion H; auto].\n  destruct x; simpl; try solve [inversion H; auto].\n  destruct x; simpl; try solve [inversion H; auto].\n  destruct x; simpl; try solve [inversion H; auto].\n  destruct x; simpl; try solve [inversion H; auto].\n  destruct x; simpl; try solve [inversion H; auto].\n  destruct x; simpl; try solve [inversion H; auto].\n  destruct x; simpl; try solve [inversion H; auto].\n  destruct x; simpl; try solve [inversion H; auto].\n  destruct x; simpl; try solve [inversion H; auto].\n  destruct x; simpl; try solve [inversion H; auto].\n  destruct x; simpl; try solve [inversion H; auto].\n  destruct x; simpl; try solve [inversion H; auto].\n  destruct x; simpl; try solve [inversion H; auto].\n  destruct x; simpl; try solve [inversion H; auto].\n  destruct x; simpl; try solve [inversion H; auto].\n  destruct x; simpl; try solve [inversion H; auto].\n  destruct x; simpl; try solve [inversionQed.",
                    "Lemma lookup_shift_insert: forall A x y (o : option A) e, lookup (shift y x) (raw_insert y o e) = lookup x e.\nProof.\n  induction x; intros; simpl; auto.\n  destruct x; simpl; auto.\n  destruct y; simpl; try solve [auto].\n  destruct y; simpl; auto.\n  destruct y; simpl; try solve [auto].\n  destruct y; simpl; try solve [auto].\n  destruct y; simpl; try solve [auto].\n  destruct y; simpl; try solve [auto].\n  destruct y; simpl; try solve [auto].\n  destruct y; simpl; try solve [auto].\n  destruct y; simpl; try solve [auto].\n  destruct y; simpl; try solve [auto].\n  destruct y; simpl; try solve [auto].\n  destruct y; simpl; try solve [auto].\n  destruct y; simpl; try solve [auto].\n  destruct y; simpl; try solve [auto].\n  destruct y; simpl; try solve [auto].\n  destruct y; simpl; try solve [auto].\n  destruct y; simpl; try solve [auto].\n  destruct y; simpl; try solve [auto].\n  destruct y; simpl; try solve [auto].\n  destruct y; simpl; try solve [auto].\n  destruct y; simpl; try solve [auto].\n  destruct y; simpl; tryQed.",
                    "Lemma lookup_shift_insert: forall A x y (o : option A) e, lookup (shift y x) (raw_insert y o e) = lookup x e.\nProof.\n  induction x; intros; destruct y; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.Qed.",
                    "Lemma lookup_shift_insert: forall A x y (o : option A) e, lookup (shift y x) (raw_insert y o e) = lookup x e.\nProof.\n  induction x; intros; simpl; auto.\n  rewrite lookup_empty_empty_iff.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_spec.\n  rewrite lookup_empty_specQed.",
                    "Lemma lookup_shift_insert: forall A x y (o : option A) e, lookup (shift y x) (raw_insert y o e) = lookup x e.\nProof.\n  induction x; intros; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct xQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "Proof.\n  induction x; intros; destruct y; destruct e; simpl; try solve [\n    elimtype False; omega\n  | eauto with omega\n  ].\nQed.\n\nLemma lookup_insert_recent:\n  forall A x y (o : option A) e,\n  x < y ->\n  lookup x (raw_insert y o e) = lookup x e.\n(* Hence, [lookup x (insert y a e) = lookup x e]. *)\nProof.\n  induction x; intros; destruct y; destruct e; simpl; try solve [\n    elimtype False; omega\n  | eauto with omega\n  ].\n  (* One troublesome case. *)\n  erewrite <- lookup_empty_None. eauto with omega.\nQed.\n\nLemma lookup_insert_old:\n  forall A x y (o : option A) e,\n  x > y ->\n  lookup x (raw_insert y o e) = lookup (x - 1) e.\n(* Hence, [lookup x (insert y a e) = lookup (x - 1) e]. *)\nProof.\n  (* Induction over [x], which is non-zero. *)\n  induction x; intros; [ elimtype False; omega | replace (S x - 1) with x by omega ].\n  (* Case analysis. *)\n  destruct y; destruct e; simpl; try solve [ eauto ].\n  (* One troublesome case. *)\n  rewrite lookup_empty_None. erewrite <- lookup_empty_None. eauto with omega.\n  (* Another troublesome case. *)\n  destruct x; intros; [ elimtype False; omega | replace (S x - 1) with x in * by omega ].\n  simpl lookup at 2.\n  eauto with omega.\nQed.\n\nLemma lookup_shift_insert:\n  forall A x y (o : option A) e,\n  lookup (shift y x) (raw_insert y o e) = lookup x e.\n(* Hence, [lookup (shift y x) (insert y a e) = lookup x e]. *)\nProof.\n  intros. destruct_lift_idx.\n  rewrite lookup_insert_old by omega. f_equal. omega.\n  rewrite lookup_insert_recent by omega. reflexivity.\nQed.\n\nLtac lookup_insert :=\n  first [\n    rewrite lookup_insert_bingo by omega\n  | rewrite lookup_insert_old by omega; one_plus_x_minus_one\n  | rewrite lookup_insert_recent by omega\n  | rewrite lookup_shift_insert\n  ].\n\nLtac lookup_insert_all :=\n  first [\n    rewrite lookup_insert_bingo in * by omega;\n    try match goal with h: Some _ = Some _ |- _ => injection h; intro; subst; clear h end\n  | rewrite lookup_insert_old in * by omega; one_plus_x_minus_one\n  | rewrite lookup_insert_recent in * by omega\n  | rewrite lookup_shift_insert in *\n  ].\n\nHint Extern 1 (lookup _ (raw_insert _ _ _) = _) =>\n  lookup_insert\n: lookup_insert.\n\nHint Extern 1 (lookup _ _ = _) =>\n  lookup_insert_all\n: lookup_insert.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Interaction between [map] and [empty]. *)\n\n",
                "context_tokens": 708,
                "proof_start_offset": 7969,
                "proof_end_offset": 8070,
                "proof": "Lemma map_empty: forall A B (f : A -> B), map f (@empty _) = @empty _.\nProof.\nreflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma map_empty: forall A B (f : A -> B), map f (@empty _) = @empty _.\nProof.\n  intros.\n  destruct x; simpl; auto.\nQed.",
                    "Lemma map_empty: forall A B (f : A -> B), map f (@empty _) = @empty _.\nProof.\n  intros.\n  destruct (find_insert _ _ _ _ _ _ H0); auto.\n  destruct (find_insert _ _ _ _ _ H0); auto.\n  destruct (find_insert _ _ _ _ _ H0); auto.\n  destruct (find_insert _ _ _ _ _ H0); auto.\n  destruct (find_insert _ _ _ _ _ H0); auto.\n  destruct (find_insert _ _ _ _ _ H0); auto.\n  destruct (find_insert _ _ _ _ _ H0); auto.\n  destruct (find_insert _ _ _ _ _ _ H0); auto.\n  destruct (find_insert _ _ _ _ _ _ H0); auto.\n  destruct (find_insert _ _ _ _ _ H0); auto.\n  destruct (find_insert _ _ _ _ _ H0); auto.\n  destruct (find_insert _ _ _ _ _ _ H0); auto.\n  destruct (find_insert _ _ _ _ _ H0); auto.\n  destruct (find_insert _ _ _ _ _ _ H0); auto.\n  destruct (find_insert _ _ _ _ _ _ _ H0); auto.\n  destruct (Qed.",
                    "Lemma map_empty: forall A B (f : A -> B), map f (@empty _) = @empty _.\nProof.\n  intros.\n  destruct x; simpl; try solve [auto].\n  rewrite lookup_insert_inv in * by omega.\n  rewrite lookup_insert_spec in * by omega.\n  rewrite lookup_insert_spec in * by omega.\n  rewrite lookup_insert_spec in * by omega.\n  rewrite lookup_insert_node_spec.\n  * rewrite lookup_insert_node_node_spec in * by omega.\n  rewrite lookup_insert_spec in * by omega.\n  rewrite lookup_insert_spec.\n  * rewrite lookup_insert_node_spec in * by omega.\n  rewrite lookup_insert_spec.\n  * rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_Qed.",
                    "Lemma map_empty: forall A B (f : A -> B), map f (@empty _) = @empty _.\nProof.\n  intros.\n  destruct x; simpl; auto.\nQed.",
                    "Lemma map_empty: forall A B (f : A -> B), map f (@empty _) = @empty _.\nProof.\n  intros.\n  destruct x; destruct x; simpl; try solve [inversion H; subst; auto].\n  destruct x; simpl; try solve [inversion H; subst; auto].\n  destruct x; simpl; try solve [inversion H; subst; auto].\n  destruct x; simpl; try solve [inversion H; subst; auto].\n  destruct x; simpl; try solve [inversion H; subst; auto].\n  destruct x; simpl; try solve [inversion H; subst; auto].\n  destruct x; simpl; try solve [inversion H; subst; auto].\n  destruct x; simpl; try solve [inversion H; subst; auto].\n  destruct x; simpl; try solve [inversion H; subst; auto].\n  destruct x; simpl; try solve [inversion H; subst; auto].\n  destruct x; simpl; try solve [inversion H; subst; auto].\n  destruct x; simpl; try solve [inversion H; subst; auto].\n  destruct x; simpl; try solve [inversion H; subst; auto].\n  destruct x; simpl; try solve [inversion H; subst; auto].\n  destruct x; simpl; try solve [inversion H; subst; auto].\n  destruct x; simpl; tryQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "p x (insert y a e) = lookup x e]. *)\nProof.\n  induction x; intros; destruct y; destruct e; simpl; try solve [\n    elimtype False; omega\n  | eauto with omega\n  ].\n  (* One troublesome case. *)\n  erewrite <- lookup_empty_None. eauto with omega.\nQed.\n\nLemma lookup_insert_old:\n  forall A x y (o : option A) e,\n  x > y ->\n  lookup x (raw_insert y o e) = lookup (x - 1) e.\n(* Hence, [lookup x (insert y a e) = lookup (x - 1) e]. *)\nProof.\n  (* Induction over [x], which is non-zero. *)\n  induction x; intros; [ elimtype False; omega | replace (S x - 1) with x by omega ].\n  (* Case analysis. *)\n  destruct y; destruct e; simpl; try solve [ eauto ].\n  (* One troublesome case. *)\n  rewrite lookup_empty_None. erewrite <- lookup_empty_None. eauto with omega.\n  (* Another troublesome case. *)\n  destruct x; intros; [ elimtype False; omega | replace (S x - 1) with x in * by omega ].\n  simpl lookup at 2.\n  eauto with omega.\nQed.\n\nLemma lookup_shift_insert:\n  forall A x y (o : option A) e,\n  lookup (shift y x) (raw_insert y o e) = lookup x e.\n(* Hence, [lookup (shift y x) (insert y a e) = lookup x e]. *)\nProof.\n  intros. destruct_lift_idx.\n  rewrite lookup_insert_old by omega. f_equal. omega.\n  rewrite lookup_insert_recent by omega. reflexivity.\nQed.\n\nLtac lookup_insert :=\n  first [\n    rewrite lookup_insert_bingo by omega\n  | rewrite lookup_insert_old by omega; one_plus_x_minus_one\n  | rewrite lookup_insert_recent by omega\n  | rewrite lookup_shift_insert\n  ].\n\nLtac lookup_insert_all :=\n  first [\n    rewrite lookup_insert_bingo in * by omega;\n    try match goal with h: Some _ = Some _ |- _ => injection h; intro; subst; clear h end\n  | rewrite lookup_insert_old in * by omega; one_plus_x_minus_one\n  | rewrite lookup_insert_recent in * by omega\n  | rewrite lookup_shift_insert in *\n  ].\n\nHint Extern 1 (lookup _ (raw_insert _ _ _) = _) =>\n  lookup_insert\n: lookup_insert.\n\nHint Extern 1 (lookup _ _ = _) =>\n  lookup_insert_all\n: lookup_insert.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Interaction between [map] and [empty]. *)\n\nLemma map_empty:\n  forall A B (f : A -> B),\n  map f (@empty _) = @empty _.\nProof.\n  reflexivity.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Interaction between [lookup] and [map]. *)\n\n",
                "context_tokens": 682,
                "proof_start_offset": 8203,
                "proof_end_offset": 8423,
                "proof": "Lemma lookup_map_none: forall A B x e (f : A -> B), lookup x e = None -> lookup x (map f e) = None.\nProof.\ninduction x; intros; destruct e as [ | [ | ] ? ]; simpl in *; subst; solve [ eauto | congruence ].\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma lookup_map_none: forall A B x e (f : A -> B), lookup x e = None -> lookup x (map f e) = None.\nProof.\n  intros.\n  destruct x; simpl; auto.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewrite lookup_insert_spec.\n  rewriteQed.",
                    "Lemma lookup_map_none: forall A B x e (f : A -> B), lookup x e = None -> lookup x (map f e) = None.\nProof.\n  intros.\n  destruct x; simpl; auto.\n  rewrite lookup_insert_iff in * by omega.\n  destruct x; simpl; auto.\n  rewrite lookup_insert_spec in * by omega.\n  destruct x; simpl; auto.\n  rewrite lookup_insert_node_spec in * by omega.\n  destruct x; simpl; auto.\n  rewrite lookup_insert_spec in * by omega.\n  destruct x; simpl; auto.\n  rewrite lookup_insert_node_spec in * by omega.\n  destruct x; simpl; auto.\n  rewrite lookup_insert_node_spec in * by omega.\n  destruct x; simpl; auto.\n  rewrite lookup_insert_node_spec in * by omega.\n  destruct x; simpl; auto.\n  rewrite lookup_insert_node_spec in * by omega.\n  destruct x; simpl; auto.\n  rewrite lookup_insert_node_spec in * by omega.\n  destruct x; simpl; auto.\n  rewrite lookup_insert_node_spec in * by omega.\n  destruct x; simpl; auto.\n  rewrite lookup_insert_node_spec in * by omega.\n  destruct x; simpl; auto.\n  rewrite lookup_insert_Qed.",
                    "Lemma lookup_map_none: forall A B x e (f : A -> B), lookup x e = None -> lookup x (map f e) = None.\nProof.\n  intros.\n  destruct x; simpl; auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert by auto.\n  rewrite lookup_insert by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert by auto.\n  rewrite lookup_Qed.",
                    "Lemma lookup_map_none: forall A B x e (f : A -> B), lookup x e = None -> lookup x (map f e) = None.\nProof.\n  intros.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destructQed.",
                    "Lemma lookup_map_none: forall A B x e (f : A -> B), lookup x e = None -> lookup x (map f e) = None.\nProof.\n  intros.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destruct x; simpl; auto.\n  destructQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "with omega.\nQed.\n\nLemma lookup_insert_old:\n  forall A x y (o : option A) e,\n  x > y ->\n  lookup x (raw_insert y o e) = lookup (x - 1) e.\n(* Hence, [lookup x (insert y a e) = lookup (x - 1) e]. *)\nProof.\n  (* Induction over [x], which is non-zero. *)\n  induction x; intros; [ elimtype False; omega | replace (S x - 1) with x by omega ].\n  (* Case analysis. *)\n  destruct y; destruct e; simpl; try solve [ eauto ].\n  (* One troublesome case. *)\n  rewrite lookup_empty_None. erewrite <- lookup_empty_None. eauto with omega.\n  (* Another troublesome case. *)\n  destruct x; intros; [ elimtype False; omega | replace (S x - 1) with x in * by omega ].\n  simpl lookup at 2.\n  eauto with omega.\nQed.\n\nLemma lookup_shift_insert:\n  forall A x y (o : option A) e,\n  lookup (shift y x) (raw_insert y o e) = lookup x e.\n(* Hence, [lookup (shift y x) (insert y a e) = lookup x e]. *)\nProof.\n  intros. destruct_lift_idx.\n  rewrite lookup_insert_old by omega. f_equal. omega.\n  rewrite lookup_insert_recent by omega. reflexivity.\nQed.\n\nLtac lookup_insert :=\n  first [\n    rewrite lookup_insert_bingo by omega\n  | rewrite lookup_insert_old by omega; one_plus_x_minus_one\n  | rewrite lookup_insert_recent by omega\n  | rewrite lookup_shift_insert\n  ].\n\nLtac lookup_insert_all :=\n  first [\n    rewrite lookup_insert_bingo in * by omega;\n    try match goal with h: Some _ = Some _ |- _ => injection h; intro; subst; clear h end\n  | rewrite lookup_insert_old in * by omega; one_plus_x_minus_one\n  | rewrite lookup_insert_recent in * by omega\n  | rewrite lookup_shift_insert in *\n  ].\n\nHint Extern 1 (lookup _ (raw_insert _ _ _) = _) =>\n  lookup_insert\n: lookup_insert.\n\nHint Extern 1 (lookup _ _ = _) =>\n  lookup_insert_all\n: lookup_insert.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Interaction between [map] and [empty]. *)\n\nLemma map_empty:\n  forall A B (f : A -> B),\n  map f (@empty _) = @empty _.\nProof.\n  reflexivity.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Interaction between [lookup] and [map]. *)\n\nLemma lookup_map_none:\n  forall A B x e (f : A -> B),\n  lookup x e = None ->\n  lookup x (map f e) = None.\nProof.\n  induction x; intros; destruct e as [ | [ | ]? ]; simpl in *; subst;\n  solve [ eauto | congruence ].\nQed.\n\n",
                "context_tokens": 690,
                "proof_start_offset": 8425,
                "proof_end_offset": 8665,
                "proof": "Lemma lookup_map_some: forall A B x a e (f : A -> B), lookup x e = Some a -> lookup x (map f e) = Some (f a).\nProof.\ninduction x; intros; destruct e as [ | [ | ] ? ]; simpl in *; subst; try solve [ congruence | eauto ].\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma lookup_map_some: forall A B x a e (f : A -> B), lookup x e = Some a -> lookup x (map f e) = Some (f a).\nProof.\n  induction x; intros; simpl; auto.\n  destruct e as [ | [ | ]? | [ | ]? | [ | ]? | [ | ]? | [ | ]? | [ | ]? | [ | ]? | [ | ]? | ]? | [ | ]? | [ | ]? | [ | ]? | [ | ]? | [ | ]? | | ]? | [ | ]? | ]? | [ | | [ | ]? | ]? | [ | ]? | [ | ]? | ]? | [ | ]? | [ | ]? | [ | ]? | [ | ]? | [ | ]? | ]? | [ | ]? | [ | [ | ]? | [ | ]? | ]? | [ | ]? | | [ | ]? | [ | ]? | | [ | ]? | ]? | [ | ]? | | [ | ]? | | | [ | ]? | [ | | | ]? | [ | ]? | [ | ]? | [ | ]? | [ | ]? | | ]? | [ | ] ]? | [ | | [ |Qed.",
                    "Lemma lookup_map_some: forall A B x a e (f : A -> B), lookup x e = Some a -> lookup x (map f e) = Some (f a).\nProof.\n  induction x; intros; destruct e; simpl; auto.\nQed.",
                    "Lemma lookup_map_some: forall A B x a e (f : A -> B), lookup x e = Some a -> lookup x (map f e) = Some (f a).\nProof.\n  intros A B x e f g e.\n  induction x; intros; [ elimtype False; omega | omega].\n  rewrite lookup_insert_node by auto.\n  destruct x; [ elimtype False; omega | omega].\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert_node by auto.\n  rewrite lookup_insert by auto.\n  rewrite lookup_insert by auto.\n Qed.",
                    "Lemma lookup_map_some: forall A B x a e (f : A -> B), lookup x e = Some a -> lookup x (map f e) = Some (f a).\nProof.\n  induction x; intros; destruct e; [ | simpl in *; auto].\n  destruct x; [ | simpl in *; try solve [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversion H].\n  destruct x; [inversionQed.",
                    "Lemma lookup_map_some: forall A B x a e (f : A -> B), lookup x e = Some a -> lookup x (map f e) = Some (f a).\nProof.\n  intros.\n  destruct x; simpl in *; subst;\n  solve [auto | congruence].\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "A) e,\n  lookup (shift y x) (raw_insert y o e) = lookup x e.\n(* Hence, [lookup (shift y x) (insert y a e) = lookup x e]. *)\nProof.\n  intros. destruct_lift_idx.\n  rewrite lookup_insert_old by omega. f_equal. omega.\n  rewrite lookup_insert_recent by omega. reflexivity.\nQed.\n\nLtac lookup_insert :=\n  first [\n    rewrite lookup_insert_bingo by omega\n  | rewrite lookup_insert_old by omega; one_plus_x_minus_one\n  | rewrite lookup_insert_recent by omega\n  | rewrite lookup_shift_insert\n  ].\n\nLtac lookup_insert_all :=\n  first [\n    rewrite lookup_insert_bingo in * by omega;\n    try match goal with h: Some _ = Some _ |- _ => injection h; intro; subst; clear h end\n  | rewrite lookup_insert_old in * by omega; one_plus_x_minus_one\n  | rewrite lookup_insert_recent in * by omega\n  | rewrite lookup_shift_insert in *\n  ].\n\nHint Extern 1 (lookup _ (raw_insert _ _ _) = _) =>\n  lookup_insert\n: lookup_insert.\n\nHint Extern 1 (lookup _ _ = _) =>\n  lookup_insert_all\n: lookup_insert.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Interaction between [map] and [empty]. *)\n\nLemma map_empty:\n  forall A B (f : A -> B),\n  map f (@empty _) = @empty _.\nProof.\n  reflexivity.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Interaction between [lookup] and [map]. *)\n\nLemma lookup_map_none:\n  forall A B x e (f : A -> B),\n  lookup x e = None ->\n  lookup x (map f e) = None.\nProof.\n  induction x; intros; destruct e as [ | [ | ]? ]; simpl in *; subst;\n  solve [ eauto | congruence ].\nQed.\n\nLemma lookup_map_some:\n  forall A B x a e (f : A -> B),\n  lookup x e = Some a ->\n  lookup x (map f e) = Some (f a).\nProof.\n  induction x; intros; destruct e as [ | [ | ]? ]; simpl in *; subst; try solve [\n    congruence\n  | eauto\n  ].\nQed.\n\nLemma lookup_map_some_reverse:\n  forall A B x b e (f : A -> B),\n  lookup x (map f e) = Some b ->\n  exists a,\n  lookup x e = Some a /\\ b = f a.\nProof.\n  induction x; intros; destruct e as [ | [ | ]? ]; simpl in *; subst; try solve [\n    congruence\n  | eauto\n  ].\n  eexists. split. reflexivity. congruence.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* [insert] commutes with itself, just like [lift] commutes with itself. *)\n\n",
                "context_tokens": 663,
                "proof_start_offset": 9140,
                "proof_end_offset": 9636,
                "proof": "Lemma insert_insert: forall A k s (a b : option A) e, k <= s -> raw_insert k a (raw_insert s b e) = raw_insert (1 + s) b (raw_insert k a e).\nProof.\nintros ? k s.\ngeneralize s k; clear s k.\ninduction s; intros.\ndestruct k; [ | elimtype False; omega ].\nreflexivity.\ndestruct k.\nreflexivity.\ndestruct e; replace (1 + S s) with (S (1 + s)) by omega; simpl; f_equal; eauto with omega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma insert_insert: forall A k s (a b : option A) e, k <= s -> raw_insert k a (raw_insert s b e) = raw_insert (1 + s) b (raw_insert k a e).\nProof.\n  induction x; intros; destruct e as [ | [ | ]? | ]? | ]; simpl in *; subst;\n    try solve [ congruence | congruence].\n  simpl in *; subst;\n    try solve [ congruence].\n  simpl in *; subst;\n    try solve [ congruence].\n  simpl in *; subst;\n    try solve [ congruence].\n  simpl in *; subst;\n    try solve [ congruence].\n  simpl in *; subst;\n    try solve [ congruence].\n  simpl in *; subst;\n    try solve [ congruence].\n  simpl in *; subst;\n    try solve [ congruence].\n  simpl in *; subst;\n    try solve [ congruence].\n  simpl in *; subst;\n    try solve [ congruence].\n  simpl in *; subst;\n    try solve [ congruence].\n  simpl in *; subst;\n    try solve [ congruence].\n  simpl in *; subst;\n    try solve [ congruence].\n  simpl in *; subst;\n    try solve [ congruence].\n  simpl in *; subst;\n    try solve [ congruence].\n  simpl in *; subst;\n    try solve [ congruence].\n  simpl in *; subst;\n    try solve [ congruence].\n  simpl in *; subst;\n    try solve [ congruence].\n  simpl in *; subst;\n    try solve [ congruence].\n  simpl in *;Qed.",
                    "Lemma insert_insert: forall A k s (a b : option A) e, k <= s -> raw_insert k a (raw_insert s b e) = raw_insert (1 + s) b (raw_insert k a e).\nProof.\n  induction x; intros; simpl; auto; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion HQed.",
                    "Lemma insert_insert: forall A k s (a b : option A) e, k <= s -> raw_insert k a (raw_insert s b e) = raw_insert (1 + s) b (raw_insert k a e).\nProof.\n  induction x; intros; destruct e as [ | [ | [ | ] | ]? | ]? | ]; simpl in *; subst;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;\n    try congruence;Qed.",
                    "Lemma insert_insert: forall A k s (a b : option A) e, k <= s -> raw_insert k a (raw_insert s b e) = raw_insert (1 + s) b (raw_insert k a e).\nProof.\n  induction x; intros; destruct e as [ | [ | ]? | ]; simpl in *; subst;\n    try solve [ congruence].\n  destruct e as [ | [ | ]? | [ | ]? | [ | ]? | ]? | [ | [ | ]? | ]? | [ | ]? | [ | ]? | [ | ]? | ]? | [ | | | ]? | [ | ]? | [ | ]? | [ | ]? | [ | ]? | ]? | | [ | ]? | [ | ]? | ]? | [ | | ]? | | [ | ]? | [ | ]? | | ]? | | [ | ]? | [ | ]? | | | [ | ]? | ]? | | | [ | | ]? | | ]? | | [ | | ]? | [ | | ]? | ]? | [ | | | ]? | | [ | | ]? | | [ | ]? | ]? | | | | | | | | | [ | ]? | | | | | | | ]? | | | | | | | | | | | | | | |Qed.",
                    "Lemma insert_insert: forall A k s (a b : option A) e, k <= s -> raw_insert k a (raw_insert s b e) = raw_insert (1 + s) b (raw_insert k a e).\nProof.\n  induction x; intros; destruct e as [ | [ | ]? | [ | ]? | ]?? ]; simpl in *; subst; try solve [\n    congruence | eauto].\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " * by omega; one_plus_x_minus_one\n  | rewrite lookup_insert_recent in * by omega\n  | rewrite lookup_shift_insert in *\n  ].\n\nHint Extern 1 (lookup _ (raw_insert _ _ _) = _) =>\n  lookup_insert\n: lookup_insert.\n\nHint Extern 1 (lookup _ _ = _) =>\n  lookup_insert_all\n: lookup_insert.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Interaction between [map] and [empty]. *)\n\nLemma map_empty:\n  forall A B (f : A -> B),\n  map f (@empty _) = @empty _.\nProof.\n  reflexivity.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Interaction between [lookup] and [map]. *)\n\nLemma lookup_map_none:\n  forall A B x e (f : A -> B),\n  lookup x e = None ->\n  lookup x (map f e) = None.\nProof.\n  induction x; intros; destruct e as [ | [ | ]? ]; simpl in *; subst;\n  solve [ eauto | congruence ].\nQed.\n\nLemma lookup_map_some:\n  forall A B x a e (f : A -> B),\n  lookup x e = Some a ->\n  lookup x (map f e) = Some (f a).\nProof.\n  induction x; intros; destruct e as [ | [ | ]? ]; simpl in *; subst; try solve [\n    congruence\n  | eauto\n  ].\nQed.\n\nLemma lookup_map_some_reverse:\n  forall A B x b e (f : A -> B),\n  lookup x (map f e) = Some b ->\n  exists a,\n  lookup x e = Some a /\\ b = f a.\nProof.\n  induction x; intros; destruct e as [ | [ | ]? ]; simpl in *; subst; try solve [\n    congruence\n  | eauto\n  ].\n  eexists. split. reflexivity. congruence.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* [insert] commutes with itself, just like [lift] commutes with itself. *)\n\nLemma insert_insert:\n  forall A k s (a b : option A) e,\n  k <= s ->\n  raw_insert k a (raw_insert s b e) = raw_insert (1 + s) b (raw_insert k a e).\nProof.\n  intros? k s. generalize s k; clear s k. induction s; intros.\n  (* Case [s = 0]. *)\n  destruct k; [ | elimtype False; omega ]. reflexivity.\n  (* Case [s > 0]. *)\n  destruct k.\n  (* Sub-case [k = 0]. *)\n  reflexivity.\n  (* Sub-case [k > 0]. *)\n  destruct e; replace (1 + S s) with (S (1 + s)) by omega; simpl; f_equal; eauto with omega.\nQed.\n\n(* Even when it is not known which of [k] and [s] is greater, [insert] commutes\n   with itself. The formula is slightly horrid, but can be very useful. *)\n\n",
                "context_tokens": 669,
                "proof_start_offset": 9794,
                "proof_end_offset": 10236,
                "proof": "Lemma insert_insert_always: forall A k s (a b : option A) e, raw_insert k a (raw_insert s b e) = raw_insert (shift k s) b (raw_insert (if le_gt_dec k s then k else k - 1) a e).\nProof.\nintros.\ndestruct (le_gt_dec k s).\nrewrite lift_idx_old by assumption.\neauto using insert_insert.\nrewrite lift_idx_recent by assumption.\nreplace k with (1 + (k - 1)) in * by omega.\nrewrite <- insert_insert by omega.\ndo 2 f_equal.\nomega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma insert_insert_always: forall A k s (a b : option A) e, raw_insert k a (raw_insert s b e) = raw_insert (shift k s) b (raw_insert (if le_gt_dec k s then k else k - 1) a e).\nProof.\n  intros; destruct e as [ | [ | ]? | ]; simpl in *; subst; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; inversion H; subst; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; inversion H; subst; try solve [inversion H; try solve [inversion HQed.",
                    "Lemma insert_insert_always: forall A k s (a b : option A) e, raw_insert k a (raw_insert s b e) = raw_insert (shift k s) b (raw_insert (if le_gt_dec k s then k else k - 1) a e).\nProof.\n  induction x as [ | [ | | ]? | | ]? | ]; simpl in *; subst; try solve [ try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; inversion H; subst; try solve [inversion H; inversion H;Qed.",
                    "Lemma insert_insert_always: forall A k s (a b : option A) e, raw_insert k a (raw_insert s b e) = raw_insert (shift k s) b (raw_insert (if le_gt_dec k s then k else k - 1) a e).\nProof.\n  induction x; intros; simpl; try solve [inversion H; subst; auto].\n  (* Subk *)\n  destruct k; [ elimtype False; omega].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [Qed.",
                    "Lemma insert_insert_always: forall A k s (a b : option A) e, raw_insert k a (raw_insert s b e) = raw_insert (shift k s) b (raw_insert (if le_gt_dec k s then k else k - 1) a e).\nProof.\n  induction x; intros; destruct e as [ | [ | [ | ] | | ] ]; simpl in *; subst; try solve [ auto].\n  (* Subk *)\n  destruct k; [ | elimtype False; omega].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype False; omega|].\n  (* Subk *)\n  destruct k; [ elimtype FalseQed.",
                    "Lemma insert_insert_always: forall A k s (a b : option A) e, raw_insert k a (raw_insert s b e) = raw_insert (shift k s) b (raw_insert (if le_gt_dec k s then k else k - 1) a e).\nProof.\n  induction x; intros; destruct e as [ | [ | [ | ] | ] | ]; simpl in *; subst; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [inversion H; subst; try solve [inversion H; try solve [inversion H; subst; try solve [Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "kup x (map f e) = Some (f a).\nProof.\n  induction x; intros; destruct e as [ | [ | ]? ]; simpl in *; subst; try solve [\n    congruence\n  | eauto\n  ].\nQed.\n\nLemma lookup_map_some_reverse:\n  forall A B x b e (f : A -> B),\n  lookup x (map f e) = Some b ->\n  exists a,\n  lookup x e = Some a /\\ b = f a.\nProof.\n  induction x; intros; destruct e as [ | [ | ]? ]; simpl in *; subst; try solve [\n    congruence\n  | eauto\n  ].\n  eexists. split. reflexivity. congruence.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* [insert] commutes with itself, just like [lift] commutes with itself. *)\n\nLemma insert_insert:\n  forall A k s (a b : option A) e,\n  k <= s ->\n  raw_insert k a (raw_insert s b e) = raw_insert (1 + s) b (raw_insert k a e).\nProof.\n  intros? k s. generalize s k; clear s k. induction s; intros.\n  (* Case [s = 0]. *)\n  destruct k; [ | elimtype False; omega ]. reflexivity.\n  (* Case [s > 0]. *)\n  destruct k.\n  (* Sub-case [k = 0]. *)\n  reflexivity.\n  (* Sub-case [k > 0]. *)\n  destruct e; replace (1 + S s) with (S (1 + s)) by omega; simpl; f_equal; eauto with omega.\nQed.\n\n(* Even when it is not known which of [k] and [s] is greater, [insert] commutes\n   with itself. The formula is slightly horrid, but can be very useful. *)\n\nLemma insert_insert_always:\n  forall A k s (a b : option A) e,\n  raw_insert k a (raw_insert s b e) =\n  raw_insert (shift k s) b (raw_insert (if le_gt_dec k s then k else k - 1) a e).\nProof.\n  intros.\n  destruct (le_gt_dec k s).\n  rewrite lift_idx_old by assumption. eauto using insert_insert.\n  rewrite lift_idx_recent by assumption.\n  replace k with (1 + (k - 1)) in * by omega. rewrite <- insert_insert by omega.\n  do 2 f_equal. omega.\nQed.\n\n(* Attempting to rewrite in both directions may seem redundant, because of the\n   symmetry of the law [insert_insert]. It is not: because [omega] fails in\n   the presence of meta-variables, rewriting in one direction may be possible\n   while the other direction fails. *)\n\nLtac insert_insert :=\n  first [\n    rewrite    insert_insert; [ reflexivity | omega ]\n  | rewrite <- insert_insert; [ reflexivity | omega ]\n  ].\n\nHint Extern 1 (raw_insert _ _ _ = _) =>\n  insert_insert\n: insert_insert.\n\nHint Extern 1 (_ = raw_insert _ _ _) =>\n  insert_insert\n: insert_insert.\n\n(* The result of an insertion cannot be nil. *)\n\n",
                "context_tokens": 710,
                "proof_start_offset": 10854,
                "proof_end_offset": 10989,
                "proof": "Lemma insert_nil: forall A x a (e : env A), insert x a e = nil -> False.\nProof.\ndestruct x; destruct e; simpl; congruence.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma insert_nil: forall A x a (e : env A), insert x a e = nil -> False.\nProof.\n  induction x; intros.\n  destruct e; [ | contradiction].\n  destruct e; [ | contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [ contradiction].\n  destruct e; [contradiction].\n  destruct e; [ contradiction].\n  destruct e; [contradiction].\n  destruct e; [contradiction].\n  destruct e; [contradiction].Qed.",
                    "Lemma insert_nil: forall A x a (e : env A), insert x a e = nil -> False.\nProof.\n  intros.\n  destruct e; simpl in *; subst; auto.\n  destruct e; simpl in *; subst; auto.\n  destruct e; simpl in *; subst; auto.\nQed.",
                    "Lemma insert_nil: forall A x a (e : env A), insert x a e = nil -> False.\nProof.\n  induction x; intros; simpl in *; auto; try solve [inversion H; subst; auto].\nQed.",
                    "Lemma insert_nil: forall A x a (e : env A), insert x a e = nil -> False.\nProof.\n  intros.\n  destruct e as [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [e [eQed.",
                    "Lemma insert_nil: forall A x a (e : env A), insert x a e = nil -> False.\nProof.\n  intros.\n  destruct e; [ | [ | ] | [ | ] | [ | [ | ] | [ | [ | ] | [ | ] | [ | ] | [ | ] | [ | ] | [ | [ | ] | [ | ] ] | [ | ] | [ | ] ] | [ | ] | [ | ] | [ | ] | ] | [ | ] | [ | ] ] | [ | ] | [ | ] | [ | ] | [ | ] ] | [ | ] | [ | ] | [ | ] | [ | ] | [ | ] | [ | ] | [ | ] | [ | ] ] | [ | ] ] | [ | [ | ] | ] | [ | ] | [ | ] | [ | ] | [ | ] | [ | ] | ] | [ | ] | ] | [ | ] | [ | ] ] | [ | ] | ] | [ | ] | [ | ] | [ | ] ] | [ | ] | [ | ] ] ] | [ | [ | ] ] | [ | ] | [ | ] | [ | ] | ] | [ | [ | ] | ] ] | [ | [ | ] |Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " x; intros; destruct e as [ | [ | ]? ]; simpl in *; subst; try solve [\n    congruence\n  | eauto\n  ].\n  eexists. split. reflexivity. congruence.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* [insert] commutes with itself, just like [lift] commutes with itself. *)\n\nLemma insert_insert:\n  forall A k s (a b : option A) e,\n  k <= s ->\n  raw_insert k a (raw_insert s b e) = raw_insert (1 + s) b (raw_insert k a e).\nProof.\n  intros? k s. generalize s k; clear s k. induction s; intros.\n  (* Case [s = 0]. *)\n  destruct k; [ | elimtype False; omega ]. reflexivity.\n  (* Case [s > 0]. *)\n  destruct k.\n  (* Sub-case [k = 0]. *)\n  reflexivity.\n  (* Sub-case [k > 0]. *)\n  destruct e; replace (1 + S s) with (S (1 + s)) by omega; simpl; f_equal; eauto with omega.\nQed.\n\n(* Even when it is not known which of [k] and [s] is greater, [insert] commutes\n   with itself. The formula is slightly horrid, but can be very useful. *)\n\nLemma insert_insert_always:\n  forall A k s (a b : option A) e,\n  raw_insert k a (raw_insert s b e) =\n  raw_insert (shift k s) b (raw_insert (if le_gt_dec k s then k else k - 1) a e).\nProof.\n  intros.\n  destruct (le_gt_dec k s).\n  rewrite lift_idx_old by assumption. eauto using insert_insert.\n  rewrite lift_idx_recent by assumption.\n  replace k with (1 + (k - 1)) in * by omega. rewrite <- insert_insert by omega.\n  do 2 f_equal. omega.\nQed.\n\n(* Attempting to rewrite in both directions may seem redundant, because of the\n   symmetry of the law [insert_insert]. It is not: because [omega] fails in\n   the presence of meta-variables, rewriting in one direction may be possible\n   while the other direction fails. *)\n\nLtac insert_insert :=\n  first [\n    rewrite    insert_insert; [ reflexivity | omega ]\n  | rewrite <- insert_insert; [ reflexivity | omega ]\n  ].\n\nHint Extern 1 (raw_insert _ _ _ = _) =>\n  insert_insert\n: insert_insert.\n\nHint Extern 1 (_ = raw_insert _ _ _) =>\n  insert_insert\n: insert_insert.\n\n(* The result of an insertion cannot be nil. *)\n\nLemma insert_nil:\n  forall A x a (e : env A),\n  insert x a e = nil ->\n  False.\nProof.\n  destruct x; destruct e; simpl; congruence.\nQed.\n\n(* Two lemmas about equations of the form [insert x a1 e1 = insert x a2 e2].\n   Note that we have [a1 = a2], but not [e1 = e2], due to padding. *)\n\n",
                "context_tokens": 697,
                "proof_start_offset": 11139,
                "proof_end_offset": 11446,
                "proof": "Lemma insert_eq_insert_1: forall A x a1 a2 (e1 e2 : env A), insert x a1 e1 = insert x a2 e2 -> a1 = a2.\nProof.\nintros.\nassert (lookup x (insert x a1 e1) = Some a1).\neauto using lookup_insert_bingo.\nassert (lookup x (insert x a2 e2) = Some a2).\neauto using lookup_insert_bingo.\ncongruence.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma insert_eq_insert_1: forall A x a1 a2 (e1 e2 : env A), insert x a1 e1 = insert x a2 e2 -> a1 = a2.\nProof.\n  intros.\n  destruct x; simpl; congruence.\nQed.",
                    "Lemma insert_eq_insert_1: forall A x a1 a2 (e1 e2 : env A), insert x a1 e1 = insert x a2 e2 -> a1 = a2.\nProof.\n  induction 1; intros; simpl; congruence.\n  destruct e; auto.\n  destruct e; auto.\nQed.",
                    "Lemma insert_eq_insert_1: forall A x a1 a2 (e1 e2 : env A), insert x a1 e1 = insert x a2 e2 -> a1 = a2.\nProof.\n  destruct x; simpl; congruence.\nQed.",
                    "Lemma insert_eq_insert_1: forall A x a1 a2 (e1 e2 : env A), insert x a1 e1 = insert x a2 e2 -> a1 = a2.\nProof.\n  destruct x; simpl; congruence.\nQed.",
                    "Lemma insert_eq_insert_1: forall A x a1 a2 (e1 e2 : env A), insert x a1 e1 = insert x a2 e2 -> a1 = a2.\nProof.\n  intros.\n  destruct a1; simpl; congruence.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "insert s b e) = raw_insert (1 + s) b (raw_insert k a e).\nProof.\n  intros? k s. generalize s k; clear s k. induction s; intros.\n  (* Case [s = 0]. *)\n  destruct k; [ | elimtype False; omega ]. reflexivity.\n  (* Case [s > 0]. *)\n  destruct k.\n  (* Sub-case [k = 0]. *)\n  reflexivity.\n  (* Sub-case [k > 0]. *)\n  destruct e; replace (1 + S s) with (S (1 + s)) by omega; simpl; f_equal; eauto with omega.\nQed.\n\n(* Even when it is not known which of [k] and [s] is greater, [insert] commutes\n   with itself. The formula is slightly horrid, but can be very useful. *)\n\nLemma insert_insert_always:\n  forall A k s (a b : option A) e,\n  raw_insert k a (raw_insert s b e) =\n  raw_insert (shift k s) b (raw_insert (if le_gt_dec k s then k else k - 1) a e).\nProof.\n  intros.\n  destruct (le_gt_dec k s).\n  rewrite lift_idx_old by assumption. eauto using insert_insert.\n  rewrite lift_idx_recent by assumption.\n  replace k with (1 + (k - 1)) in * by omega. rewrite <- insert_insert by omega.\n  do 2 f_equal. omega.\nQed.\n\n(* Attempting to rewrite in both directions may seem redundant, because of the\n   symmetry of the law [insert_insert]. It is not: because [omega] fails in\n   the presence of meta-variables, rewriting in one direction may be possible\n   while the other direction fails. *)\n\nLtac insert_insert :=\n  first [\n    rewrite    insert_insert; [ reflexivity | omega ]\n  | rewrite <- insert_insert; [ reflexivity | omega ]\n  ].\n\nHint Extern 1 (raw_insert _ _ _ = _) =>\n  insert_insert\n: insert_insert.\n\nHint Extern 1 (_ = raw_insert _ _ _) =>\n  insert_insert\n: insert_insert.\n\n(* The result of an insertion cannot be nil. *)\n\nLemma insert_nil:\n  forall A x a (e : env A),\n  insert x a e = nil ->\n  False.\nProof.\n  destruct x; destruct e; simpl; congruence.\nQed.\n\n(* Two lemmas about equations of the form [insert x a1 e1 = insert x a2 e2].\n   Note that we have [a1 = a2], but not [e1 = e2], due to padding. *)\n\nLemma insert_eq_insert_1:\n  forall A x a1 a2 (e1 e2 : env A),\n  insert x a1 e1 = insert x a2 e2 ->\n  a1 = a2.\nProof.\n  intros.\n  assert (lookup x (insert x a1 e1) = Some a1). eauto using lookup_insert_bingo.\n  assert (lookup x (insert x a2 e2) = Some a2). eauto using lookup_insert_bingo.\n  congruence.\nQed.\n\n",
                "context_tokens": 713,
                "proof_start_offset": 11448,
                "proof_end_offset": 11778,
                "proof": "Lemma insert_eq_insert_2: forall A x a1 a2 (e1 e2 : env A), insert x a1 e1 = insert x a2 e2 -> forall b, insert x b e1 = insert x b e2.\nProof.\ninduction x; simpl; intros.\ncongruence.\ndestruct e1; destruct e2; match goal with h: _ = _ |- _ => injection h; clear h; intros end; f_equal; try congruence; eauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma insert_eq_insert_2: forall A x a1 a2 (e1 e2 : env A), insert x a1 e1 = insert x a2 e2 -> forall b, insert x b e1 = insert x b e2.\nProof.\n  intros.\n  destruct x; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destruct e; simpl; congruence.\n  destructQed.",
                    "Lemma insert_eq_insert_2: forall A x a1 a2 (e1 e2 : env A), insert x a1 e1 = insert x a2 e2 -> forall b, insert x b e1 = insert x b e2.\nProof.\n  induction a1; intros.\n  + destruct e; auto.\n  + destruct e; auto.\n  + destruct e; auto.\n  + destruct e; auto.\n  + destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n    destruct e; auto.\n   Qed.",
                    "Lemma insert_eq_insert_2: forall A x a1 a2 (e1 e2 : env A), insert x a1 e1 = insert x a2 e2 -> forall b, insert x b e1 = insert x b e2.\nProof.\n  induction a1; intros; auto.\n  destruct a1; simpl; congruence.\nQed.",
                    "Lemma insert_eq_insert_2: forall A x a1 a2 (e1 e2 : env A), insert x a1 e1 = insert x a2 e2 -> forall b, insert x b e1 = insert x b e2.\nProof.\n  intros.\n  assert (lookup x a1 e2). eauto using lookup_insert_aux_aux.\n  congruence.\nQed.",
                    "Lemma insert_eq_insert_2: forall A x a1 a2 (e1 e2 : env A), insert x a1 e1 = insert x a2 e2 -> forall b, insert x b e1 = insert x b e2.\nProof.\n  induction a1; intros.\n  - destruct e; simpl; congruence.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " + (k - 1)) in * by omega. rewrite <- insert_insert by omega.\n  do 2 f_equal. omega.\nQed.\n\n(* Attempting to rewrite in both directions may seem redundant, because of the\n   symmetry of the law [insert_insert]. It is not: because [omega] fails in\n   the presence of meta-variables, rewriting in one direction may be possible\n   while the other direction fails. *)\n\nLtac insert_insert :=\n  first [\n    rewrite    insert_insert; [ reflexivity | omega ]\n  | rewrite <- insert_insert; [ reflexivity | omega ]\n  ].\n\nHint Extern 1 (raw_insert _ _ _ = _) =>\n  insert_insert\n: insert_insert.\n\nHint Extern 1 (_ = raw_insert _ _ _) =>\n  insert_insert\n: insert_insert.\n\n(* The result of an insertion cannot be nil. *)\n\nLemma insert_nil:\n  forall A x a (e : env A),\n  insert x a e = nil ->\n  False.\nProof.\n  destruct x; destruct e; simpl; congruence.\nQed.\n\n(* Two lemmas about equations of the form [insert x a1 e1 = insert x a2 e2].\n   Note that we have [a1 = a2], but not [e1 = e2], due to padding. *)\n\nLemma insert_eq_insert_1:\n  forall A x a1 a2 (e1 e2 : env A),\n  insert x a1 e1 = insert x a2 e2 ->\n  a1 = a2.\nProof.\n  intros.\n  assert (lookup x (insert x a1 e1) = Some a1). eauto using lookup_insert_bingo.\n  assert (lookup x (insert x a2 e2) = Some a2). eauto using lookup_insert_bingo.\n  congruence.\nQed.\n\nLemma insert_eq_insert_2:\n  forall A x a1 a2 (e1 e2 : env A),\n  insert x a1 e1 = insert x a2 e2 ->\n  forall b,\n  insert x b e1 = insert x b e2.\nProof.\n  induction x; simpl; intros.\n  congruence.\n  destruct e1; destruct e2;\n  match goal with h: _ = _ |- _ => injection h; clear h; intros end;\n  f_equal; try congruence; eauto.\nQed.\n\n(* This is a really crazy diamond lemma that says, roughly, if the equation\n    [insert x1 a1 e1 = insert x2 a2 e2] holds, then [e1] and [e2] can be\n    constructed out of a common environment [e]. We would like to conclude\n    [e1 = insert x2 a2 e /\\ e2 = insert x1 a1 e], but this is false, because\n    one of the indices is off-by-one in one way or the other. We need to\n    adjust, and the arithmetic is a bit painful. *)\n\n",
                "context_tokens": 658,
                "proof_start_offset": 12207,
                "proof_end_offset": 13770,
                "proof": "Lemma insert_eq_insert_3: forall A x1 x2 a1 a2 (e1 e2 : env A), insert x1 a1 e1 = insert x2 a2 e2 -> x1 <> x2 -> exists e y1 y2, e1 = insert y1 a2 e /\\ e2 = insert y2 a1 e /\\ shift x1 y1 = x2 /\\ y2 = (if le_gt_dec x1 y1 then x1 else x1 - 1).\nProof.\ninduction x1; intros.\ndestruct x2; [ omega | ].\nrewrite raw_insert_zero in *.\nrewrite raw_insert_successor in *.\nmatch goal with h: _ = _ |- _ => injection h; clear h; intros end.\ndestruct e2; [ congruence | ].\nsubst.\nsimpl.\nexists e2.\nexists x2.\nexists 0.\neauto.\ndestruct x2.\nrewrite raw_insert_zero in *.\nrewrite raw_insert_successor in *.\nmatch goal with h: _ = _ |- _ => injection h; clear h; intros end.\ndestruct e1; [ congruence | ].\nsubst.\nexists e1.\nexists 0.\nexists x1.\nsplit.\neauto.\nsplit.\neauto.\nsplit.\neauto.\ndblib_by_cases.\nomega.\ndo 2 rewrite raw_insert_successor in *.\nassert (xx: x1 <> x2).\nomega.\nmatch goal with h: _ = _ |- _ => injection h; clear h; intros h ?; generalize (IHx1 _ _ _ _ _ h xx); intros [ e [ y1 [ y2 [ ? [ ? [ ? ? ]]]]]] end.\ndestruct e1; simpl tl in *; [ elimtype False; eauto using insert_nil | ].\ndestruct e2; simpl tl in *; [ elimtype False; eauto using insert_nil | ].\nexists (o :: e).\nexists (S y1).\nexists (S y2).\nsplit.\nsimpl.\ncongruence.\nsplit.\nsimpl.\ncongruence.\nsplit.\neapply translate_lift with (k := 1).\neauto.\ndblib_by_cases; omega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma insert_eq_insert_3: forall A x1 x2 a1 a2 (e1 e2 : env A), insert x1 a1 e1 = insert x2 a2 e2 -> x1 <> x2 -> exists e y1 y2, e1 = insert y1 a2 e /\\ e2 = insert y2 a1 e /\\ shift x1 y1 = x2 /\\ y2 = (if le_gt_dec x1 y1 then x1 else x1 - 1).\nProof.\n  induction x1; simpl; intros.\n  destruct e2; simpl; congruence.\n  destruct e2; simpl; congruence.\n  destruct e2; simpl; congruence.\n  destruct e2; simpl; congruence.\n  destruct e3; simpl; congruence.\n  destruct e3; simpl; congruence.\n  destruct e3; simpl; congruence.\n  destruct e3; simpl; congruence.\n  destruct e3; simpl; congruence.\n  destruct e3; simpl; congruence.\n  destruct e3; simpl; congruence.\n  destruct e3; simpl; congruence.\n  destruct e3; simpl; congruence.\n  destruct e3; simpl; congruence.\n  destruct e3; simpl; congruence.\n  destruct e3; simpl; congruence.\n  destruct e3; simpl; congruence.\n  destruct e3; simpl; congruence.\n  destruct e3; simpl; congruence.\n  destruct e3; simpl; congruence.\n  destruct e3; simpl; congruence.\n  destruct e3; simpl; congruence.\n  destruct e3; simpl; congruence.\n  destruct e3; simpl; congruence.\n  destruct e3; simpl; congruence.\n  destruct e3; simpl; congruence.\n  destruct e3; simpl; congruence.\n Qed.",
                    "Lemma insert_eq_insert_3: forall A x1 x2 a1 a2 (e1 e2 : env A), insert x1 a1 e1 = insert x2 a2 e2 -> x1 <> x2 -> exists e y1 y2, e1 = insert y1 a2 e /\\ e2 = insert y2 a1 e /\\ shift x1 y1 = x2 /\\ y2 = (if le_gt_dec x1 y1 then x1 else x1 - 1).\nProof.\n  intros.\n  assert (lookup x1 a2 e2 = insert x1 a2 e2).\n  {\n    apply insert_insert_eq; [ reflexivity | omega ]\n    apply insert_eq_insert_eq; [ reflexivity | omega ]\n    apply insert_eq_insert_eq; [ reflexivity ]\n    apply insert_eq_insert_eq; [ reflexivity ]\n    apply insert_eq_insert_eq; [ reflexivity ]\n    apply insert_eq; [ reflexivity ]\n    apply insert_eq_insert_eq; [ reflexivity ]\n    apply insert_eq; [ reflexivity ]\n    apply insert_eq; [ reflexivity ]\n    apply insert_eq; [ reflexivity ]\n    apply insert_eq; [ reflexivity ]\n    apply insert_eq; [ reflexivity ]\n    apply insert_eq; [ reflexivity ]\n    apply insert_eq; [ reflexivity ]\n    apply insert_eq; [ reflexivity ]\n    apply insert_eq; [ reflexivity ]\n    apply insert_eq; [ reflexivity ]\n    apply insert_eq; [ reflexivity ]\n    apply insert_eq; [ reflexivity ]\n    apply insert_eq; [ reflexivity ]\n    apply insert_eq; [ reflexivity ]\n    apply insert_eq; [ reflexivity ]\n    apply insert_eqQed.",
                    "Lemma insert_eq_insert_3: forall A x1 x2 a1 a2 (e1 e2 : env A), insert x1 a1 e1 = insert x2 a2 e2 -> x1 <> x2 -> exists e y1 y2, e1 = insert y1 a2 e /\\ e2 = insert y2 a1 e /\\ shift x1 y1 = x2 /\\ y2 = (if le_gt_dec x1 y1 then x1 else x1 - 1).\nProof.\n  induction x1; simpl; intros.\n  congruence.\nQed.",
                    "Lemma insert_eq_insert_3: forall A x1 x2 a1 a2 (e1 e2 : env A), insert x1 a1 e1 = insert x2 a2 e2 -> x1 <> x2 -> exists e y1 y2, e1 = insert y1 a2 e /\\ e2 = insert y2 a1 e /\\ shift x1 y1 = x2 /\\ y2 = (if le_gt_dec x1 y1 then x1 else x1 - 1).\nProof.\n  intros.\n  assert (lookup x1 a1 e2 = insert x1 a2 e2).\n    { rewrite insert_insert_eq_eq_dec; auto. }\n    { rewrite insert_insert_eq_eq_dec; auto. }\n    { rewrite insert_insert_eq_eq_dec; auto. }\n    { rewrite insert_insert_eq_eq_dec; auto. }\n    { rewrite insert_insert_eq_dec; auto. }\n    { rewrite insert_insert_eq_dec; auto. }\n    { rewrite insert_insert_eq; auto. }\n    { rewrite insert_insert_eq_dec; auto. }\n    { rewrite insert_insert_eq_dec; auto. }\n    { rewrite insert_insert_eq; auto. }\n    { rewrite insert_insert_eq_dec; auto. }\n    { rewrite insert_insert_eq; auto. }\n    { rewrite insert_insert_eq; auto. }\n    { rewrite insert_insert_eq; auto. }\n    { rewrite insert_insert_eq; auto. }\n    { rewrite insert_insert_eq; auto. }\n    { rewrite insert_insert_eq; auto. }\n   Qed.",
                    "Lemma insert_eq_insert_3: forall A x1 x2 a1 a2 (e1 e2 : env A), insert x1 a1 e1 = insert x2 a2 e2 -> x1 <> x2 -> exists e y1 y2, e1 = insert y1 a2 e /\\ e2 = insert y2 a1 e /\\ shift x1 y1 = x2 /\\ y2 = (if le_gt_dec x1 y1 then x1 else x1 - 1).\nProof.\n  intros.\n  assert (lookup x1 a2 e2 = insert x1 a2 e2).\n  {\n    rewrite insert_insert_eq_eq_eq_dec.\n    rewrite insert_insert_eq_eq_dec.\n    rewrite insert_insert_eq_eq_dec.\n    rewrite insert_insert_eq_eq_dec.\n    rewrite insert_insert_eq_eq_dec.\n    rewrite insert_insert_eq_eq_dec.\n    rewrite insert_insert_eq_eq_dec.\n    rewrite insert_insert_eq_eq_dec.\n    rewrite insert_insert_eq_dec_eq.\n    rewrite insert_insert_eq_eq_dec.\n    rewrite insert_insert_eq_dec.\n    rewrite insert_insert_eq_eq_dec.\n    rewrite insert_insert_eq_eq_dec.\n    rewrite insert_insert_eq_eq_dec.\n    rewrite insert_insert_eq_eq_dec.\n    rewrite insert_insert_eq_dec.\n    rewrite insert_eq_eq_dec.\n    rewrite insert_insert_eq_dec.\n    rewrite insert_insert_eq_eq_dec.\n    rewrite insert_eq_decQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " = _ |- _ => injection h; clear h; intros end;\n  f_equal; try congruence; eauto.\nQed.\n\n(* This is a really crazy diamond lemma that says, roughly, if the equation\n    [insert x1 a1 e1 = insert x2 a2 e2] holds, then [e1] and [e2] can be\n    constructed out of a common environment [e]. We would like to conclude\n    [e1 = insert x2 a2 e /\\ e2 = insert x1 a1 e], but this is false, because\n    one of the indices is off-by-one in one way or the other. We need to\n    adjust, and the arithmetic is a bit painful. *)\n\nLemma insert_eq_insert_3:\n  forall A x1 x2 a1 a2 (e1 e2 : env A),\n  insert x1 a1 e1 = insert x2 a2 e2 ->\n  x1 <> x2 ->\n  exists e y1 y2,\n  e1 = insert y1 a2 e /\\\n  e2 = insert y2 a1 e /\\\n  shift x1 y1 = x2 /\\\n  y2 = (if le_gt_dec x1 y1 then x1 else x1 - 1).\nProof.\n  induction x1; intros.\n  (* Case [x1 = 0]. *)\n  destruct x2; [ omega | ].\n  rewrite raw_insert_zero in *. rewrite raw_insert_successor in *.\n  match goal with h: _ = _ |- _ =>\n    injection h; clear h; intros\n  end.\n  destruct e2; [ congruence | ]. subst. simpl.\n  exists e2. exists x2. exists 0. eauto.\n  (* Case [x1 > 0]. *)\n  destruct x2.\n  (* Sub-case [x2 = 0]. *)\n  rewrite raw_insert_zero in *. rewrite raw_insert_successor in *.\n  match goal with h: _ = _ |- _ =>\n    injection h; clear h; intros\n  end.\n  destruct e1; [ congruence | ]. subst.\n  exists e1. exists 0. exists x1.\n  split. eauto.\n  split. eauto.\n  split. eauto.\n  dblib_by_cases. omega.\n  (* Sub-case [x2 > 0]. *)\n  do 2 rewrite raw_insert_successor in *.\n  assert (xx: x1 <> x2). omega.\n  match goal with h: _ = _ |- _ =>\n    injection h; clear h; intros h?;\n    generalize (IHx1 _ _ _ _ _ h xx); intros [ e [ y1 [ y2 [? [? [?? ]]]]]]\n  end.\n  (* [e1] and [e2] must be non-nil. *)\n  destruct e1; simpl tl in *; [ elimtype False; eauto using insert_nil | ].\n  destruct e2; simpl tl in *; [ elimtype False; eauto using insert_nil | ].\n  exists (o :: e). exists (S y1). exists (S y2).\n  split. simpl. congruence.\n  split. simpl. congruence.\n  split. eapply translate_lift with (k := 1). eauto.\n  dblib_by_cases; omega.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Interaction between [map] and [insert]. *)\n\n",
                "context_tokens": 728,
                "proof_start_offset": 13903,
                "proof_end_offset": 14163,
                "proof": "Lemma map_insert: forall A B (f : A -> B) x a e, map f (insert x a e) = insert x (f a) (map f e).\nProof.\ninduction x; intros; destruct e; simpl; eauto.\nrewrite IHx.\nreflexivity.\nmatch goal with o: option _ |- _ => destruct o end; f_equal; eauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma map_insert: forall A B (f : A -> B) x a e, map f (insert x a e) = insert x (f a) (map f e).\nProof.\n  induction x; intros.\n  (* Case [x1 = 0]. *)\n  destruct x1; [ congruence | congruence | congruence].\n  (* Case [x1 = 0]. *)\n  destruct x1; [ congruence | congruence].\n  (* Case [x2 = 0]. *)\n  destruct x2; [ congruence | congruence].\n  (* Case [x1 = 0]. *)\n  destruct x2; [ congruence | congruence].\n  (* Case [x1 = 0]. *)\n  destruct x1; [ congruence | congruence].\n  (* Case [x2 = 0]. *)\n  destruct x2; [ congruence | congruence].\n  (* Case [x1 = 0]. *)\n  destruct x2; [ congruence | congruence].\n  (* Case [x1 = 0]. *)\n  destruct x2; [ congruence | congruence].\n  (* Case [x1 = 0]. *)\n  destruct x2; [ congruence | congruence].\n  (* Case [x2 = 0]. *)\n  destruct x2; [ congruence | congruence].\n  (* Case [x1 = 0]. *)\n  destruct x2; [ congruence | congruence].\n  (* Case [x2 = 0]. *)\n  destruct x2; congruence.\n  (* Case [x1 = 0Qed.",
                    "Lemma map_insert: forall A B (f : A -> B) x a e, map f (insert x a e) = insert x (f a) (map f e).\nProof.\n  induction a; intros.\n  destruct x; simpl; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simpl in *; auto.\n  destruct x; simplQed.",
                    "Lemma map_insert: forall A B (f : A -> B) x a e, map f (insert x a e) = insert x (f a) (map f e).\nProof.\n  induction x; intros.\n  - simpl.\n    destruct x1; [ | destruct x1; auto].\n    destruct x2; [inversion e1; auto].\n    destruct x2; [inversion e2; auto |].\n    destruct x2; [inversion e2; auto |].\n    destruct x2; [inversion e2; auto |].\n    destruct x2; [inversion e2; auto |].\n    destruct x2; [inversion e2; auto |].\n    destruct x2; [inversion e2; auto |].\n    destruct x2; [inversion e2; auto |].\n    destruct x2; [inversion e2; auto |].\n    destruct x2; [inversion e2; auto |].\n    destruct x3; [inversion e3; auto |].\n    destruct x3; [inversion e3; auto |].\n    destruct x3; [inversion e3; auto |].\n    destruct x3; [inversion e3; auto |].\n    destruct x3; [inversion e3; auto |].\n    destruct x3; [inversion e3; auto |].\n    destruct x3; [inversion e3; auto |].\n    destruct x3; [inversion e3; auto |].\n    destruct x3; [inversion e3; auto |].\n    destructQed.",
                    "Lemma map_insert: forall A B (f : A -> B) x a e, map f (insert x a e) = insert x (f a) (map f e).\nProof.\n  induction x; intros.\n  (* [x1 = 0]. *)\n  destruct x1; simpl; auto.\n  (* x2 = 0 *)\n  destruct x1; simpl; auto.\n  (* x2 = 0 *)\n  destruct x1; simpl; auto.\n  (* x2 = 0 *)\n  destruct x1; simpl; auto.\n  (* x2 = 0 *)\n  destruct x1; simpl; auto.\n  (* x2 = 0 *)\n  destruct x2; simpl; auto.\n  (* x2 = 0 *)\n  destruct x1; simpl; auto.\n  (* x2 = 0 *)\n  destruct x2; simpl; auto.\n  (* x3 = 0 *)\n  destruct x2; simpl; auto.\n  (* x3 = 0 *)\n  destruct x2; simpl; auto.\n  (* x3 = 0 *)\n  destruct x2; simpl; auto.\n  (* x3 = 0 *)\n  destruct x3; simpl; auto.\n  (* x4 = 0 *)\n  destruct x3; simpl; auto.\n  (* x4 = 0 *)\n  destruct x3; simpl; auto.\n  (* x3 = 0 *)\n  destruct x3; simpl; auto.\n  (* x4 =Qed.",
                    "Lemma map_insert: forall A B (f : A -> B) x a e, map f (insert x a e) = insert x (f a) (map f e).\nProof.\n  induction x; intros; auto.\n  destruct e1; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destructQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "2 = insert x1 a1 e], but this is false, because\n    one of the indices is off-by-one in one way or the other. We need to\n    adjust, and the arithmetic is a bit painful. *)\n\nLemma insert_eq_insert_3:\n  forall A x1 x2 a1 a2 (e1 e2 : env A),\n  insert x1 a1 e1 = insert x2 a2 e2 ->\n  x1 <> x2 ->\n  exists e y1 y2,\n  e1 = insert y1 a2 e /\\\n  e2 = insert y2 a1 e /\\\n  shift x1 y1 = x2 /\\\n  y2 = (if le_gt_dec x1 y1 then x1 else x1 - 1).\nProof.\n  induction x1; intros.\n  (* Case [x1 = 0]. *)\n  destruct x2; [ omega | ].\n  rewrite raw_insert_zero in *. rewrite raw_insert_successor in *.\n  match goal with h: _ = _ |- _ =>\n    injection h; clear h; intros\n  end.\n  destruct e2; [ congruence | ]. subst. simpl.\n  exists e2. exists x2. exists 0. eauto.\n  (* Case [x1 > 0]. *)\n  destruct x2.\n  (* Sub-case [x2 = 0]. *)\n  rewrite raw_insert_zero in *. rewrite raw_insert_successor in *.\n  match goal with h: _ = _ |- _ =>\n    injection h; clear h; intros\n  end.\n  destruct e1; [ congruence | ]. subst.\n  exists e1. exists 0. exists x1.\n  split. eauto.\n  split. eauto.\n  split. eauto.\n  dblib_by_cases. omega.\n  (* Sub-case [x2 > 0]. *)\n  do 2 rewrite raw_insert_successor in *.\n  assert (xx: x1 <> x2). omega.\n  match goal with h: _ = _ |- _ =>\n    injection h; clear h; intros h?;\n    generalize (IHx1 _ _ _ _ _ h xx); intros [ e [ y1 [ y2 [? [? [?? ]]]]]]\n  end.\n  (* [e1] and [e2] must be non-nil. *)\n  destruct e1; simpl tl in *; [ elimtype False; eauto using insert_nil | ].\n  destruct e2; simpl tl in *; [ elimtype False; eauto using insert_nil | ].\n  exists (o :: e). exists (S y1). exists (S y2).\n  split. simpl. congruence.\n  split. simpl. congruence.\n  split. eapply translate_lift with (k := 1). eauto.\n  dblib_by_cases; omega.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Interaction between [map] and [insert]. *)\n\nLemma map_insert:\n  forall A B (f : A -> B) x a e,\n  map f (insert x a e) = insert x (f a) (map f e).\nProof.\n  induction x; intros; destruct e; simpl; eauto.\n  rewrite IHx. reflexivity.\n  match goal with o: option _ |- _ => destruct o end; f_equal; eauto.\nQed.\n\n(* The following variant is easier to use for [eauto]. *)\n\n",
                "context_tokens": 723,
                "proof_start_offset": 14224,
                "proof_end_offset": 14387,
                "proof": "Lemma map_insert_eq: forall A B (f : A -> B) x a b e, f a = b -> map f (insert x a e) = insert x b (map f e).\nProof.\nintros; subst.\neapply map_insert.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma map_insert_eq: forall A B (f : A -> B) x a b e, f a = b -> map f (insert x a e) = insert x b (map f e).\nProof.\n  induction x; intros; destruct e; simpl; eauto.\n  rewrite IHl. reflexivity.\nQed.",
                    "Lemma map_insert_eq: forall A B (f : A -> B) x a b e, f a = b -> map f (insert x a e) = insert x b (map f e).\nProof.\n  induction x; intros; destruct e; simpl; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.\n  destruct e; auto.Qed.",
                    "Lemma map_insert_eq: forall A B (f : A -> B) x a b e, f a = b -> map f (insert x a e) = insert x b (map f e).\nProof.\n  induction x; intros; destruct e; simpl; auto.\n  rewrite IHl. reflexivity.\n  rewrite IHl. reflexivity.\n  rewrite IHl. reflexivity.\nQed.",
                    "Lemma map_insert_eq: forall A B (f : A -> B) x a b e, f a = b -> map f (insert x a e) = insert x b (map f e).\nProof.\n  induction x; intros; simpl; eauto.\n  rewrite <- insert_insert_insert_insert_inv in H.\n  destruct e; [reflexivity | apply insert_insert_inv in H].\n  destruct e; [reflexivity | apply insert_insert_inv in H].\n  destruct e; [reflexivity | apply insert_insert_inv in H].\n  destruct e; [reflexivity | apply insert_insert_inv in H].\n  destruct e; [reflexivity | apply insert_insert_inv in H].\n  destruct e; [reflexivity | apply insert_insert_inv in H].\n  destruct e; [reflexivity | apply insert_insert_inv in H].\n  destruct e; [reflexivity | apply insert_insert_inv in H].\n  destruct e; [reflexivity | apply insert_insert_inv in H].\n  destruct e; [reflexivity | apply insert_insert_inv in H].\n  destruct e; [reflexivity | apply insert_inv in H].\n  destruct e; [reflexivity | apply insert_insert_inv in H].\n  destruct e; [reflexivity | apply insert_inv in H].\n  destruct e; [reflexivity | apply insert_insert_inv in H].\n  destruct e; [reflexivity | applyQed.",
                    "Lemma map_insert_eq: forall A B (f : A -> B) x a b e, f a = b -> map f (insert x a e) = insert x b (map f e).\nProof.\n  induction x; intros; destruct e; simpl; eauto.\n  rewrite H. reflexivity.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "gt_dec x1 y1 then x1 else x1 - 1).\nProof.\n  induction x1; intros.\n  (* Case [x1 = 0]. *)\n  destruct x2; [ omega | ].\n  rewrite raw_insert_zero in *. rewrite raw_insert_successor in *.\n  match goal with h: _ = _ |- _ =>\n    injection h; clear h; intros\n  end.\n  destruct e2; [ congruence | ]. subst. simpl.\n  exists e2. exists x2. exists 0. eauto.\n  (* Case [x1 > 0]. *)\n  destruct x2.\n  (* Sub-case [x2 = 0]. *)\n  rewrite raw_insert_zero in *. rewrite raw_insert_successor in *.\n  match goal with h: _ = _ |- _ =>\n    injection h; clear h; intros\n  end.\n  destruct e1; [ congruence | ]. subst.\n  exists e1. exists 0. exists x1.\n  split. eauto.\n  split. eauto.\n  split. eauto.\n  dblib_by_cases. omega.\n  (* Sub-case [x2 > 0]. *)\n  do 2 rewrite raw_insert_successor in *.\n  assert (xx: x1 <> x2). omega.\n  match goal with h: _ = _ |- _ =>\n    injection h; clear h; intros h?;\n    generalize (IHx1 _ _ _ _ _ h xx); intros [ e [ y1 [ y2 [? [? [?? ]]]]]]\n  end.\n  (* [e1] and [e2] must be non-nil. *)\n  destruct e1; simpl tl in *; [ elimtype False; eauto using insert_nil | ].\n  destruct e2; simpl tl in *; [ elimtype False; eauto using insert_nil | ].\n  exists (o :: e). exists (S y1). exists (S y2).\n  split. simpl. congruence.\n  split. simpl. congruence.\n  split. eapply translate_lift with (k := 1). eauto.\n  dblib_by_cases; omega.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Interaction between [map] and [insert]. *)\n\nLemma map_insert:\n  forall A B (f : A -> B) x a e,\n  map f (insert x a e) = insert x (f a) (map f e).\nProof.\n  induction x; intros; destruct e; simpl; eauto.\n  rewrite IHx. reflexivity.\n  match goal with o: option _ |- _ => destruct o end; f_equal; eauto.\nQed.\n\n(* The following variant is easier to use for [eauto]. *)\n\nLemma map_insert_eq:\n  forall A B (f : A -> B) x a b e,\n  f a = b ->\n  map f (insert x a e) = insert x b (map f e).\nProof.\n  intros; subst. eapply map_insert.\nQed.\n\nLtac map_insert :=\n  first [\n    rewrite map_insert; reflexivity\n  | rewrite <- map_insert; reflexivity\n  ].\n\nHint Extern 1 (map _ (insert _ _ _) = insert _ _ (map _ _)) =>\n  map_insert\n: map_insert.\n\nHint Extern 1 (insert _ _ (map _ _) = map _ (insert _ _ _)) =>\n  map_insert\n: map_insert.\n\n",
                "context_tokens": 726,
                "proof_start_offset": 14681,
                "proof_end_offset": 14953,
                "proof": "Lemma map_raw_insert: forall A B (f : A -> B) x e, map f (raw_insert x None e) = raw_insert x None (map f e).\nProof.\ninduction x; intros; destruct e; simpl; eauto.\nrewrite IHx.\nreflexivity.\nmatch goal with o: option _ |- _ => destruct o end; f_equal; eauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma map_raw_insert: forall A B (f : A -> B) x e, map f (raw_insert x None e) = raw_insert x None (map f e).\nProof.\n  intros A B f x e e a e e.\n  induction e; intros; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; autoQed.",
                    "Lemma map_raw_insert: forall A B (f : A -> B) x e, map f (raw_insert x None e) = raw_insert x None (map f e).\nProof.\n  induction x; intros; simpl; auto.\n  destruct e; auto.\n  destruct e; auto.\nQed.",
                    "Lemma map_raw_insert: forall A B (f : A -> B) x e, map f (raw_insert x None e) = raw_insert x None (map f e).\nProof.\n  induction x; intros.\n  - rewrite filter_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_insert_Qed.",
                    "Lemma map_raw_insert: forall A B (f : A -> B) x e, map f (raw_insert x None e) = raw_insert x None (map f e).\nProof.\n  intros A B f x e e e e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f f e f e f e f e f e f e f e f f e f e f e f e f e f e f e f e f e f e f e f e f e f f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f f e f e f e f e f f e f e f e f e f e f e f e f e f e f fQed.",
                    "Lemma map_raw_insert: forall A B (f : A -> B) x e, map f (raw_insert x None e) = raw_insert x None (map f e).\nProof.\n  induction x; intros; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "2.\n  (* Sub-case [x2 = 0]. *)\n  rewrite raw_insert_zero in *. rewrite raw_insert_successor in *.\n  match goal with h: _ = _ |- _ =>\n    injection h; clear h; intros\n  end.\n  destruct e1; [ congruence | ]. subst.\n  exists e1. exists 0. exists x1.\n  split. eauto.\n  split. eauto.\n  split. eauto.\n  dblib_by_cases. omega.\n  (* Sub-case [x2 > 0]. *)\n  do 2 rewrite raw_insert_successor in *.\n  assert (xx: x1 <> x2). omega.\n  match goal with h: _ = _ |- _ =>\n    injection h; clear h; intros h?;\n    generalize (IHx1 _ _ _ _ _ h xx); intros [ e [ y1 [ y2 [? [? [?? ]]]]]]\n  end.\n  (* [e1] and [e2] must be non-nil. *)\n  destruct e1; simpl tl in *; [ elimtype False; eauto using insert_nil | ].\n  destruct e2; simpl tl in *; [ elimtype False; eauto using insert_nil | ].\n  exists (o :: e). exists (S y1). exists (S y2).\n  split. simpl. congruence.\n  split. simpl. congruence.\n  split. eapply translate_lift with (k := 1). eauto.\n  dblib_by_cases; omega.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Interaction between [map] and [insert]. *)\n\nLemma map_insert:\n  forall A B (f : A -> B) x a e,\n  map f (insert x a e) = insert x (f a) (map f e).\nProof.\n  induction x; intros; destruct e; simpl; eauto.\n  rewrite IHx. reflexivity.\n  match goal with o: option _ |- _ => destruct o end; f_equal; eauto.\nQed.\n\n(* The following variant is easier to use for [eauto]. *)\n\nLemma map_insert_eq:\n  forall A B (f : A -> B) x a b e,\n  f a = b ->\n  map f (insert x a e) = insert x b (map f e).\nProof.\n  intros; subst. eapply map_insert.\nQed.\n\nLtac map_insert :=\n  first [\n    rewrite map_insert; reflexivity\n  | rewrite <- map_insert; reflexivity\n  ].\n\nHint Extern 1 (map _ (insert _ _ _) = insert _ _ (map _ _)) =>\n  map_insert\n: map_insert.\n\nHint Extern 1 (insert _ _ (map _ _) = map _ (insert _ _ _)) =>\n  map_insert\n: map_insert.\n\nLemma map_raw_insert:\n  forall A B (f : A -> B) x e,\n  map f (raw_insert x None e) = raw_insert x None (map f e).\nProof.\n  induction x; intros; destruct e; simpl; eauto.\n  rewrite IHx. reflexivity.\n  match goal with o: option _ |- _ => destruct o end; f_equal; eauto.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* [map] composes with itself. *)\n\n",
                "context_tokens": 709,
                "proof_start_offset": 15074,
                "proof_end_offset": 15327,
                "proof": "Lemma map_map_fuse: forall A B C (f : B -> C) (g : A -> B) h e, (forall (d : A), f (g d) = h d) -> map f (map g e) = map h e.\nProof.\ninduction e; intros; try match goal with o: option _ |- _ => destruct o end; simpl; eauto with f_equal.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma map_map_fuse: forall A B C (f : B -> C) (g : A -> B) h e, (forall (d : A), f (g d) = h d) -> map f (map g e) = map h e.\nProof.\n  induction x; intros; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct eQed.",
                    "Lemma map_map_fuse: forall A B C (f : B -> C) (g : A -> B) h e, (forall (d : A), f (g d) = h d) -> map f (map g e) = map h e.\nProof.\n  intros A B f g h e f g h h h h.\n  induction h; intros; simpl; eauto.\n  rewrite IHx. reflexivity.\nQed.",
                    "Lemma map_map_fuse: forall A B C (f : B -> C) (g : A -> B) h e, (forall (d : A), f (g d) = h d) -> map f (map g e) = map h e.\nProof.\n  induction x; intros; simpl; eauto.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite map_insert_iff.\n  rewrite mapQed.",
                    "Lemma map_map_fuse: forall A B C (f : B -> C) (g : A -> B) h e, (forall (d : A), f (g d) = h d) -> map f (map g e) = map h e.\nProof.\n  induction x; intros; destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.Qed.",
                    "Lemma map_map_fuse: forall A B C (f : B -> C) (g : A -> B) h e, (forall (d : A), f (g d) = h d) -> map f (map g e) = map h e.\nProof.\n  induction x; intros; simpl; auto.\n  rewrite map_insert_inv; auto.\n  rewrite map_insert_inv; auto.\n  rewrite map_insert_inv; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " (xx: x1 <> x2). omega.\n  match goal with h: _ = _ |- _ =>\n    injection h; clear h; intros h?;\n    generalize (IHx1 _ _ _ _ _ h xx); intros [ e [ y1 [ y2 [? [? [?? ]]]]]]\n  end.\n  (* [e1] and [e2] must be non-nil. *)\n  destruct e1; simpl tl in *; [ elimtype False; eauto using insert_nil | ].\n  destruct e2; simpl tl in *; [ elimtype False; eauto using insert_nil | ].\n  exists (o :: e). exists (S y1). exists (S y2).\n  split. simpl. congruence.\n  split. simpl. congruence.\n  split. eapply translate_lift with (k := 1). eauto.\n  dblib_by_cases; omega.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Interaction between [map] and [insert]. *)\n\nLemma map_insert:\n  forall A B (f : A -> B) x a e,\n  map f (insert x a e) = insert x (f a) (map f e).\nProof.\n  induction x; intros; destruct e; simpl; eauto.\n  rewrite IHx. reflexivity.\n  match goal with o: option _ |- _ => destruct o end; f_equal; eauto.\nQed.\n\n(* The following variant is easier to use for [eauto]. *)\n\nLemma map_insert_eq:\n  forall A B (f : A -> B) x a b e,\n  f a = b ->\n  map f (insert x a e) = insert x b (map f e).\nProof.\n  intros; subst. eapply map_insert.\nQed.\n\nLtac map_insert :=\n  first [\n    rewrite map_insert; reflexivity\n  | rewrite <- map_insert; reflexivity\n  ].\n\nHint Extern 1 (map _ (insert _ _ _) = insert _ _ (map _ _)) =>\n  map_insert\n: map_insert.\n\nHint Extern 1 (insert _ _ (map _ _) = map _ (insert _ _ _)) =>\n  map_insert\n: map_insert.\n\nLemma map_raw_insert:\n  forall A B (f : A -> B) x e,\n  map f (raw_insert x None e) = raw_insert x None (map f e).\nProof.\n  induction x; intros; destruct e; simpl; eauto.\n  rewrite IHx. reflexivity.\n  match goal with o: option _ |- _ => destruct o end; f_equal; eauto.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* [map] composes with itself. *)\n\nLemma map_map_fuse:\n  forall A B C (f : B -> C) (g : A -> B) h e,\n  (forall (d : A), f (g d) = h d) ->\n  map f (map g e) = map h e.\nProof.\n  induction e; intros;\n  try match goal with o: option _ |- _ => destruct o end;\n  simpl; eauto with f_equal.\nQed.\n\n",
                "context_tokens": 679,
                "proof_start_offset": 15329,
                "proof_end_offset": 15636,
                "proof": "Lemma map_map_exchange: forall A F G B (f1 : F -> B) (f2 : A -> F) (g1 : G -> B) (g2 : A -> G) e, (forall (d : A), f1 (f2 d) = g1 (g2 d)) -> map f1 (map f2 e) = map g1 (map g2 e).\nProof.\ninduction e; intros; try match goal with o: option _ |- _ => destruct o end; simpl; eauto with f_equal.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma map_map_exchange: forall A F G B (f1 : F -> B) (f2 : A -> F) (g1 : G -> B) (g2 : A -> G) e, (forall (d : A), f1 (f2 d) = g1 (g2 d)) -> map f1 (map f2 e) = map g1 (map g2 e).\nProof.\n  induction x; intros; simpl; eauto.\n  rewrite map_insert; reflexivity.\nQed.",
                    "Lemma map_map_exchange: forall A F G B (f1 : F -> B) (f2 : A -> F) (g1 : G -> B) (g2 : A -> G) e, (forall (d : A), f1 (f2 d) = g1 (g2 d)) -> map f1 (map f2 e) = map g1 (map g2 e).\nProof.\n  induction x; intros; destruct e; simpl; auto.\n  rewrite IHx. reflexivity.\n  rewrite IHx. reflexivity.\nQed.",
                    "Lemma map_map_exchange: forall A F G B (f1 : F -> B) (f2 : A -> F) (g1 : G -> B) (g2 : A -> G) e, (forall (d : A), f1 (f2 d) = g1 (g2 d)) -> map f1 (map f2 e) = map g1 (map g2 e).\nProof.\n  induction x; intros; simpl; eauto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct e; simpl; auto.\n  destruct eQed.",
                    "Lemma map_map_exchange: forall A F G B (f1 : F -> B) (f2 : A -> F) (g1 : G -> B) (g2 : A -> G) e, (forall (d : A), f1 (f2 d) = g1 (g2 d)) -> map f1 (map f2 e) = map g1 (map g2 e).\nProof.\n  induction x; intros; simpl; eauto.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite mapQed.",
                    "Lemma map_map_exchange: forall A F G B (f1 : F -> B) (f2 : A -> F) (g1 : G -> B) (g2 : A -> G) e, (forall (d : A), f1 (f2 d) = g1 (g2 d)) -> map f1 (map f2 e) = map g1 (map g2 e).\nProof.\n  induction x; intros;\n  try solve [inversion e; simpl; eauto with bool;\n    try solve [inversion e; subst; auto]\n  end.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " tl in *; [ elimtype False; eauto using insert_nil | ].\n  exists (o :: e). exists (S y1). exists (S y2).\n  split. simpl. congruence.\n  split. simpl. congruence.\n  split. eapply translate_lift with (k := 1). eauto.\n  dblib_by_cases; omega.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Interaction between [map] and [insert]. *)\n\nLemma map_insert:\n  forall A B (f : A -> B) x a e,\n  map f (insert x a e) = insert x (f a) (map f e).\nProof.\n  induction x; intros; destruct e; simpl; eauto.\n  rewrite IHx. reflexivity.\n  match goal with o: option _ |- _ => destruct o end; f_equal; eauto.\nQed.\n\n(* The following variant is easier to use for [eauto]. *)\n\nLemma map_insert_eq:\n  forall A B (f : A -> B) x a b e,\n  f a = b ->\n  map f (insert x a e) = insert x b (map f e).\nProof.\n  intros; subst. eapply map_insert.\nQed.\n\nLtac map_insert :=\n  first [\n    rewrite map_insert; reflexivity\n  | rewrite <- map_insert; reflexivity\n  ].\n\nHint Extern 1 (map _ (insert _ _ _) = insert _ _ (map _ _)) =>\n  map_insert\n: map_insert.\n\nHint Extern 1 (insert _ _ (map _ _) = map _ (insert _ _ _)) =>\n  map_insert\n: map_insert.\n\nLemma map_raw_insert:\n  forall A B (f : A -> B) x e,\n  map f (raw_insert x None e) = raw_insert x None (map f e).\nProof.\n  induction x; intros; destruct e; simpl; eauto.\n  rewrite IHx. reflexivity.\n  match goal with o: option _ |- _ => destruct o end; f_equal; eauto.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* [map] composes with itself. *)\n\nLemma map_map_fuse:\n  forall A B C (f : B -> C) (g : A -> B) h e,\n  (forall (d : A), f (g d) = h d) ->\n  map f (map g e) = map h e.\nProof.\n  induction e; intros;\n  try match goal with o: option _ |- _ => destruct o end;\n  simpl; eauto with f_equal.\nQed.\n\nLemma map_map_exchange:\n  forall A F G B (f1 : F -> B) (f2 : A -> F) (g1 : G -> B) (g2 : A -> G) e,\n  (forall (d : A), f1 (f2 d) = g1 (g2 d)) ->\n  map f1 (map f2 e) = map g1 (map g2 e).\nProof.\n  induction e; intros;\n  try match goal with o: option _ |- _ => destruct o end;\n  simpl; eauto with f_equal.\nQed.\n\n",
                "context_tokens": 697,
                "proof_start_offset": 15638,
                "proof_end_offset": 15887,
                "proof": "Lemma map_lift_map_lift: forall T k s wk ws (e : env T), forall `{Lift T}, @LiftLift T _ -> k <= s -> map (lift wk k) (map (lift ws s) e) = map (lift ws (wk + s)) (map (lift wk k) e).\nProof.\neauto using map_map_exchange, @lift_lift.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma map_lift_map_lift: forall T k s wk ws (e : env T), forall `{Lift T}, @LiftLift T _ -> k <= s -> map (lift wk k) (map (lift ws s) e) = map (lift ws (wk + s)) (map (lift wk k) e).\nProof.\n  induction e; intros; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct e; simpl; eauto.\n  destruct eQed.",
                    "Lemma map_lift_map_lift: forall T k s wk ws (e : env T), forall `{Lift T}, @LiftLift T _ -> k <= s -> map (lift wk k) (map (lift ws s) e) = map (lift ws (wk + s)) (map (lift wk k) e).\nProof.\n  induction e; intros;\n  try solve [inversion H;\n  try solve [inversion H; subst; eauto].\n  destruct e; simpl; eauto.\nQed.",
                    "Lemma map_lift_map_lift: forall T k s wk ws (e : env T), forall `{Lift T}, @LiftLift T _ -> k <= s -> map (lift wk k) (map (lift ws s) e) = map (lift ws (wk + s)) (map (lift wk k) e).\nProof.\n  induction e; intros; simpl; auto with arith.\n  destruct o; simpl; eauto with arith.\n  destruct o; simpl; eauto with arith.\n  destruct o; simpl; eauto with arith.\n  destruct o; simpl; eauto with arith.\n  destruct o; simpl; eauto with arith.\n  destruct o; simpl; eauto with arith.\n  destruct o; simpl; eauto with arith.\n  destruct o; simpl; eauto with arith.\n  destruct o; simpl; eauto with arith.\n  destruct o; simpl; eauto with arith.\n  destruct o; simpl; eauto with arith.\n  destruct o; simpl; eauto with arith.\n  destruct o; simpl; eauto with arith.\n  destruct o; simpl; eauto with arith.\n  destruct o; simpl; eauto with arith.\n  destruct o; simpl; eauto with arith.\n  destruct o; simpl; eauto with arith.\n  destruct o; simpl; eauto with arith.\n  destruct o; simpl; eauto with arith.\n  destruct o; simpl; eauto with arith.\n  destruct o; simpl; eauto with arith.\n  destruct o; simpl; eauto with arith.\n  destruct o; simpl; eauto with arith.\n  destruct o; simpl; eauto with arith.\n Qed.",
                    "Lemma map_lift_map_lift: forall T k s wk ws (e : env T), forall `{Lift T}, @LiftLift T _ -> k <= s -> map (lift wk k) (map (lift ws s) e) = map (lift ws (wk + s)) (map (lift wk k) e).\nProof.\n  induction e; intros;\n  try solve [inversion H; subst; auto].\n  destruct o; simpl; eauto with map_node; auto.\nQed.",
                    "Lemma map_lift_map_lift: forall T k s wk ws (e : env T), forall `{Lift T}, @LiftLift T _ -> k <= s -> map (lift wk k) (map (lift ws s) e) = map (lift ws (wk + s)) (map (lift wk k) e).\nProof.\n  induction e; intros;\n  try match goal with |- _ => destruct o; try discriminate end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goalQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " *)\n\nLemma map_insert:\n  forall A B (f : A -> B) x a e,\n  map f (insert x a e) = insert x (f a) (map f e).\nProof.\n  induction x; intros; destruct e; simpl; eauto.\n  rewrite IHx. reflexivity.\n  match goal with o: option _ |- _ => destruct o end; f_equal; eauto.\nQed.\n\n(* The following variant is easier to use for [eauto]. *)\n\nLemma map_insert_eq:\n  forall A B (f : A -> B) x a b e,\n  f a = b ->\n  map f (insert x a e) = insert x b (map f e).\nProof.\n  intros; subst. eapply map_insert.\nQed.\n\nLtac map_insert :=\n  first [\n    rewrite map_insert; reflexivity\n  | rewrite <- map_insert; reflexivity\n  ].\n\nHint Extern 1 (map _ (insert _ _ _) = insert _ _ (map _ _)) =>\n  map_insert\n: map_insert.\n\nHint Extern 1 (insert _ _ (map _ _) = map _ (insert _ _ _)) =>\n  map_insert\n: map_insert.\n\nLemma map_raw_insert:\n  forall A B (f : A -> B) x e,\n  map f (raw_insert x None e) = raw_insert x None (map f e).\nProof.\n  induction x; intros; destruct e; simpl; eauto.\n  rewrite IHx. reflexivity.\n  match goal with o: option _ |- _ => destruct o end; f_equal; eauto.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* [map] composes with itself. *)\n\nLemma map_map_fuse:\n  forall A B C (f : B -> C) (g : A -> B) h e,\n  (forall (d : A), f (g d) = h d) ->\n  map f (map g e) = map h e.\nProof.\n  induction e; intros;\n  try match goal with o: option _ |- _ => destruct o end;\n  simpl; eauto with f_equal.\nQed.\n\nLemma map_map_exchange:\n  forall A F G B (f1 : F -> B) (f2 : A -> F) (g1 : G -> B) (g2 : A -> G) e,\n  (forall (d : A), f1 (f2 d) = g1 (g2 d)) ->\n  map f1 (map f2 e) = map g1 (map g2 e).\nProof.\n  induction e; intros;\n  try match goal with o: option _ |- _ => destruct o end;\n  simpl; eauto with f_equal.\nQed.\n\nLemma map_lift_map_lift:\n  forall T k s wk ws (e : env T),\n  forall `{Lift T},\n  @LiftLift T _ ->\n  k <= s ->\n  map (lift wk k) (map (lift ws s) e) = map (lift ws (wk + s)) (map (lift wk k) e).\nProof.\n  eauto using map_map_exchange, @lift_lift.\nQed.\n\n",
                "context_tokens": 699,
                "proof_start_offset": 15889,
                "proof_end_offset": 16144,
                "proof": "Lemma map_insert_map: forall A (f g h : A -> A) x (a : A) e, (forall a, f (g a) = g (h a)) -> map f (insert x a (map g e)) = insert x (f a) (map g (map h e)).\nProof.\nintros.\nrewrite map_insert.\nf_equal.\neapply map_map_exchange.\neauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma map_insert_map: forall A (f g h : A -> A) x (a : A) e, (forall a, f (g a) = g (h a)) -> map f (insert x a (map g e)) = insert x (f a) (map g (map h e)).\nProof.\n  intros; induction e; intros;\n  try solve [inversion H; subst; auto].\n  simpl; auto.\nQed.",
                    "Lemma map_insert_map: forall A (f g h : A -> A) x (a : A) e, (forall a, f (g a) = g (h a)) -> map f (insert x a (map g e)) = insert x (f a) (map g (map h e)).\nProof.\n  induction e; intros;\n  try match goal with |- _ => destruct o; inv H end;\n  try match goal with |- _ => destruct o; inv H end;\n  try match goal with |- _ => destruct o; inv H end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct oQed.",
                    "Lemma map_insert_map: forall A (f g h : A -> A) x (a : A) e, (forall a, f (g a) = g (h a)) -> map f (insert x a (map g e)) = insert x (f a) (map g (map h e)).\nProof.\n  intros.\n  induction x; intros;\n    try match goal with |- _ => destruct o; try discriminate end; f_equal; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate; try discriminate;Qed.",
                    "Lemma map_insert_map: forall A (f g h : A -> A) x (a : A) e, (forall a, f (g a) = g (h a)) -> map f (insert x a (map g e)) = insert x (f a) (map g (map h e)).\nProof.\n  induction e; intros;\n  try match goal with\n    | id: list _ |- _ => destruct o; try discriminate\n    | id: list _ |- _ => destruct o; try discriminate\n    end;\n    try match goal with\n    | id: list _ |- _ => destruct o; try discriminate\n    end;\n    try match goal with\n    | id: list _ |- _ => destruct o; try discriminate\n    end;\n    try match goal with\n    | id: list _ |- _ => destruct o; try discriminate\n    end;\n    try match goal with\n    | id: list _ |- _ => destruct o; try discriminate\n    end;\n    try match goal with\n    | id: list _ |- _ => destruct o; try discriminate\n    end;\n    try match goal with\n    | id: list _ |- _ => destruct o; try discriminate\n    end;\n    try match goal with\n    | id: list _ |- _ => destruct o; try discriminate\n    end;\n    try match goal with\n    | id: list _ |- _ => destruct o; try discriminate\n    end;\n    try match goal with\n    | id: list _ |- _ => destruct o; try discriminate\n    end;\n    try match goal with\n    | id: list _ |- _Qed.",
                    "Lemma map_insert_map: forall A (f g h : A -> A) x (a : A) e, (forall a, f (g a) = g (h a)) -> map f (insert x a (map g e)) = insert x (f a) (map g (map h e)).\nProof.\n  induction e; intros; simpl; auto.\n  rewrite map_insert_map_iff.\n  destruct (f a) eqn:Heq; auto.\n  rewrite map_insert_map_iff.\n  destruct (f a) eqn:Heq; auto.\n  rewrite map_insert_map_iff.\n  destruct (f a) eqn:Heq; auto.\n  rewrite map_insert_map_iff.\n  destruct (f a) eqn:Heq; auto.\n  rewrite map_insert_map_iff.\n  destruct (f a) eqn:Heq; auto.\n  rewrite map_insert_map_iff.\n  destruct (f a) eqn:Heq; auto.\n  rewrite map_insert_iff.\n  destruct (f a) eqn:Heq; auto.\n  rewrite map_insert_map_iff.\n  destruct (f a) eqn:Heq; auto.\n  rewrite map_insert_iff.\n  destruct (f a) eqn:Heq; auto.\n  rewrite map_insert_iff.\n  destruct (f a) eqn:Heq; auto.\n  rewrite map_insert_iff.\n  destruct (f a) eqn:Heq; auto.\n  rewrite map_insert_iff.\n Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "\n(* The following variant is easier to use for [eauto]. *)\n\nLemma map_insert_eq:\n  forall A B (f : A -> B) x a b e,\n  f a = b ->\n  map f (insert x a e) = insert x b (map f e).\nProof.\n  intros; subst. eapply map_insert.\nQed.\n\nLtac map_insert :=\n  first [\n    rewrite map_insert; reflexivity\n  | rewrite <- map_insert; reflexivity\n  ].\n\nHint Extern 1 (map _ (insert _ _ _) = insert _ _ (map _ _)) =>\n  map_insert\n: map_insert.\n\nHint Extern 1 (insert _ _ (map _ _) = map _ (insert _ _ _)) =>\n  map_insert\n: map_insert.\n\nLemma map_raw_insert:\n  forall A B (f : A -> B) x e,\n  map f (raw_insert x None e) = raw_insert x None (map f e).\nProof.\n  induction x; intros; destruct e; simpl; eauto.\n  rewrite IHx. reflexivity.\n  match goal with o: option _ |- _ => destruct o end; f_equal; eauto.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* [map] composes with itself. *)\n\nLemma map_map_fuse:\n  forall A B C (f : B -> C) (g : A -> B) h e,\n  (forall (d : A), f (g d) = h d) ->\n  map f (map g e) = map h e.\nProof.\n  induction e; intros;\n  try match goal with o: option _ |- _ => destruct o end;\n  simpl; eauto with f_equal.\nQed.\n\nLemma map_map_exchange:\n  forall A F G B (f1 : F -> B) (f2 : A -> F) (g1 : G -> B) (g2 : A -> G) e,\n  (forall (d : A), f1 (f2 d) = g1 (g2 d)) ->\n  map f1 (map f2 e) = map g1 (map g2 e).\nProof.\n  induction e; intros;\n  try match goal with o: option _ |- _ => destruct o end;\n  simpl; eauto with f_equal.\nQed.\n\nLemma map_lift_map_lift:\n  forall T k s wk ws (e : env T),\n  forall `{Lift T},\n  @LiftLift T _ ->\n  k <= s ->\n  map (lift wk k) (map (lift ws s) e) = map (lift ws (wk + s)) (map (lift wk k) e).\nProof.\n  eauto using map_map_exchange, @lift_lift.\nQed.\n\nLemma map_insert_map:\n  forall A (f g h : A -> A) x (a : A) e,\n  (forall a, f (g a) = g (h a)) ->\n  map f (insert x a (map g e)) =\n  insert x (f a) (map g (map h e)).\nProof.\n  intros.\n  rewrite map_insert. f_equal.\n  eapply map_map_exchange.\n  eauto.\nQed.\n\n",
                "context_tokens": 712,
                "proof_start_offset": 16146,
                "proof_end_offset": 16393,
                "proof": "Lemma map_map_vanish: forall A B (f : B -> A) (g : A -> B) (e : env A), (forall x, f (g x) = x) -> map f (map g e) = e.\nProof.\ninduction e; intros; try match goal with o: option _ |- _ => destruct o end; simpl; eauto with f_equal.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma map_map_vanish: forall A B (f : B -> A) (g : A -> B) (e : env A), (forall x, f (g x) = x) -> map f (map g e) = e.\nProof.\n  intros.\n  rewrite map_insert.\n  apply map_insert_map_iff.\n  eapply map_insert_map; eauto.\nQed.",
                    "Lemma map_map_vanish: forall A B (f : B -> A) (g : A -> B) (e : env A), (forall x, f (g x) = x) -> map f (map g e) = e.\nProof.\n  induction e; intros;\n  try solve [inversion H; subst; auto].\n  simpl; auto.\nQed.",
                    "Lemma map_map_vanish: forall A B (f : B -> A) (g : A -> B) (e : env A), (forall x, f (g x) = x) -> map f (map g e) = e.\nProof.\n  intros.\n  unfold map_concat.\n  rewrite map_map.\n  rewrite map_concat.\n  rewrite map_map_app.\n  rewrite map_map.\n  rewrite map_map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.Qed.",
                    "Lemma map_map_vanish: forall A B (f : B -> A) (g : A -> B) (e : env A), (forall x, f (g x) = x) -> map f (map g e) = e.\nProof.\n  induction e; intros; simpl; eauto.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite mapQed.",
                    "Lemma map_map_vanish: forall A B (f : B -> A) (g : A -> B) (e : env A), (forall x, f (g x) = x) -> map f (map g e) = e.\nProof.\n  induction e; intros; simpl; eauto.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite map_insert.\n  rewrite mapQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " map_insert; reflexivity\n  ].\n\nHint Extern 1 (map _ (insert _ _ _) = insert _ _ (map _ _)) =>\n  map_insert\n: map_insert.\n\nHint Extern 1 (insert _ _ (map _ _) = map _ (insert _ _ _)) =>\n  map_insert\n: map_insert.\n\nLemma map_raw_insert:\n  forall A B (f : A -> B) x e,\n  map f (raw_insert x None e) = raw_insert x None (map f e).\nProof.\n  induction x; intros; destruct e; simpl; eauto.\n  rewrite IHx. reflexivity.\n  match goal with o: option _ |- _ => destruct o end; f_equal; eauto.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* [map] composes with itself. *)\n\nLemma map_map_fuse:\n  forall A B C (f : B -> C) (g : A -> B) h e,\n  (forall (d : A), f (g d) = h d) ->\n  map f (map g e) = map h e.\nProof.\n  induction e; intros;\n  try match goal with o: option _ |- _ => destruct o end;\n  simpl; eauto with f_equal.\nQed.\n\nLemma map_map_exchange:\n  forall A F G B (f1 : F -> B) (f2 : A -> F) (g1 : G -> B) (g2 : A -> G) e,\n  (forall (d : A), f1 (f2 d) = g1 (g2 d)) ->\n  map f1 (map f2 e) = map g1 (map g2 e).\nProof.\n  induction e; intros;\n  try match goal with o: option _ |- _ => destruct o end;\n  simpl; eauto with f_equal.\nQed.\n\nLemma map_lift_map_lift:\n  forall T k s wk ws (e : env T),\n  forall `{Lift T},\n  @LiftLift T _ ->\n  k <= s ->\n  map (lift wk k) (map (lift ws s) e) = map (lift ws (wk + s)) (map (lift wk k) e).\nProof.\n  eauto using map_map_exchange, @lift_lift.\nQed.\n\nLemma map_insert_map:\n  forall A (f g h : A -> A) x (a : A) e,\n  (forall a, f (g a) = g (h a)) ->\n  map f (insert x a (map g e)) =\n  insert x (f a) (map g (map h e)).\nProof.\n  intros.\n  rewrite map_insert. f_equal.\n  eapply map_map_exchange.\n  eauto.\nQed.\n\nLemma map_map_vanish:\n  forall A B (f : B -> A) (g : A -> B) (e : env A),\n  (forall x, f (g x) = x) ->\n  map f (map g e) = e.\nProof.\n  induction e; intros;\n  try match goal with o: option _ |- _ => destruct o end;\n  simpl; eauto with f_equal.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Properties of [fold]. *)\n\n(* Interaction between [fold] and [empty]. *)\n\n",
                "context_tokens": 738,
                "proof_start_offset": 16555,
                "proof_end_offset": 16676,
                "proof": "Lemma fold_empty: forall A B (f : option A -> B -> B) accu, fold f (@empty _) accu = accu.\nProof.\nreflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma fold_empty: forall A B (f : option A -> B -> B) accu, fold f (@empty _) accu = accu.\nProof.\n  induction e; intros;\n  try match goal with |- _ => destruct o; inv H end;\n  try match goal with |- _ => destruct o; inv H end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n Qed.",
                    "Lemma fold_empty: forall A B (f : option A -> B -> B) accu, fold f (@empty _) accu = accu.\nProof.\n  induction e; intros;\n  try match goal with |- _ => destruct o;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ =>Qed.",
                    "Lemma fold_empty: forall A B (f : option A -> B -> B) accu, fold f (@empty _) accu = accu.\nProof.\n  induction f; intros;\n  try match goal with |- _ => destruct o; inv H end;\n  try match goal with |- _ => destruct o; inv H end;\n  try match goal with H: _ |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with H: _ |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with H: _ |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with H: _ |- _ => destruct o end;\n  try match goal with H: _ |- _ => destruct o end;\n  try match goal with H: _ |- _ => destruct o end;\n  try match goal with H: _ |- _ => destruct o end;\n  try match goal with H: _ |- _ => destruct o end;\n  try match goal with H: _ |- _ => destruct o end;\n  try match goal with H: _ |- _ => destruct o end;\n  try match goal with H:Qed.",
                    "Lemma fold_empty: forall A B (f : option A -> B -> B) accu, fold f (@empty _) accu = accu.\nProof.\n  induction f; intros;\n  try match goal with |- _ => destruct o; inv H end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with H : _ |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n Qed.",
                    "Lemma fold_empty: forall A B (f : option A -> B -> B) accu, fold f (@empty _) accu = accu.\nProof.\n  induction l; intros;\n  try match goal with |- _ => destruct o; auto end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal withQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "insert.\n\nLemma map_raw_insert:\n  forall A B (f : A -> B) x e,\n  map f (raw_insert x None e) = raw_insert x None (map f e).\nProof.\n  induction x; intros; destruct e; simpl; eauto.\n  rewrite IHx. reflexivity.\n  match goal with o: option _ |- _ => destruct o end; f_equal; eauto.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* [map] composes with itself. *)\n\nLemma map_map_fuse:\n  forall A B C (f : B -> C) (g : A -> B) h e,\n  (forall (d : A), f (g d) = h d) ->\n  map f (map g e) = map h e.\nProof.\n  induction e; intros;\n  try match goal with o: option _ |- _ => destruct o end;\n  simpl; eauto with f_equal.\nQed.\n\nLemma map_map_exchange:\n  forall A F G B (f1 : F -> B) (f2 : A -> F) (g1 : G -> B) (g2 : A -> G) e,\n  (forall (d : A), f1 (f2 d) = g1 (g2 d)) ->\n  map f1 (map f2 e) = map g1 (map g2 e).\nProof.\n  induction e; intros;\n  try match goal with o: option _ |- _ => destruct o end;\n  simpl; eauto with f_equal.\nQed.\n\nLemma map_lift_map_lift:\n  forall T k s wk ws (e : env T),\n  forall `{Lift T},\n  @LiftLift T _ ->\n  k <= s ->\n  map (lift wk k) (map (lift ws s) e) = map (lift ws (wk + s)) (map (lift wk k) e).\nProof.\n  eauto using map_map_exchange, @lift_lift.\nQed.\n\nLemma map_insert_map:\n  forall A (f g h : A -> A) x (a : A) e,\n  (forall a, f (g a) = g (h a)) ->\n  map f (insert x a (map g e)) =\n  insert x (f a) (map g (map h e)).\nProof.\n  intros.\n  rewrite map_insert. f_equal.\n  eapply map_map_exchange.\n  eauto.\nQed.\n\nLemma map_map_vanish:\n  forall A B (f : B -> A) (g : A -> B) (e : env A),\n  (forall x, f (g x) = x) ->\n  map f (map g e) = e.\nProof.\n  induction e; intros;\n  try match goal with o: option _ |- _ => destruct o end;\n  simpl; eauto with f_equal.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Properties of [fold]. *)\n\n(* Interaction between [fold] and [empty]. *)\n\nLemma fold_empty:\n  forall A B (f : option A -> B -> B) accu,\n  fold f (@empty _) accu = accu.\nProof.\n  reflexivity.\nQed.\n\n(* Interaction between [fold] and [insert]. *)\n\n",
                "context_tokens": 725,
                "proof_start_offset": 16726,
                "proof_end_offset": 16875,
                "proof": "Lemma fold_insert: forall A B (f : option A -> B -> B) o e accu, fold f (raw_insert 0 o e) accu = f o (fold f e accu).\nProof.\nreflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma fold_insert: forall A B (f : option A -> B -> B) o e accu, fold f (raw_insert 0 o e) accu = f o (fold f e accu).\nProof.\n  intros.\n  rewrite fold_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_insert_map.\n  rewrite fold_insert_map.\n  rewrite fold_insert_insert.\n  rewrite fold_insert_insert_map.\n  rewrite fold_insert_Qed.",
                    "Lemma fold_insert: forall A B (f : option A -> B -> B) o e accu, fold f (raw_insert 0 o e) accu = f o (fold f e accu).\nProof.\n  intros.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_Qed.",
                    "Lemma fold_insert: forall A B (f : option A -> B -> B) o e accu, fold f (raw_insert 0 o e) accu = f o (fold f e accu).\nProof.\n  induction e; intros;\n  try match goal with |- _ => destruct o; inv H end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o; inv H end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with H : _ |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with H : _ |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with H : _ |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with H : _ |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n Qed.",
                    "Lemma fold_insert: forall A B (f : option A -> B -> B) o e accu, fold f (raw_insert 0 o e) accu = f o (fold f e accu).\nProof.\n  intros.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_insert.\n  rewrite fold_Qed.",
                    "Lemma fold_insert: forall A B (f : option A -> B -> B) o e accu, fold f (raw_insert 0 o e) accu = f o (fold f e accu).\nProof.\n  induction e; intros;\n  try match goal with |- _ => destruct o; inv H end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goalQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " d) ->\n  map f (map g e) = map h e.\nProof.\n  induction e; intros;\n  try match goal with o: option _ |- _ => destruct o end;\n  simpl; eauto with f_equal.\nQed.\n\nLemma map_map_exchange:\n  forall A F G B (f1 : F -> B) (f2 : A -> F) (g1 : G -> B) (g2 : A -> G) e,\n  (forall (d : A), f1 (f2 d) = g1 (g2 d)) ->\n  map f1 (map f2 e) = map g1 (map g2 e).\nProof.\n  induction e; intros;\n  try match goal with o: option _ |- _ => destruct o end;\n  simpl; eauto with f_equal.\nQed.\n\nLemma map_lift_map_lift:\n  forall T k s wk ws (e : env T),\n  forall `{Lift T},\n  @LiftLift T _ ->\n  k <= s ->\n  map (lift wk k) (map (lift ws s) e) = map (lift ws (wk + s)) (map (lift wk k) e).\nProof.\n  eauto using map_map_exchange, @lift_lift.\nQed.\n\nLemma map_insert_map:\n  forall A (f g h : A -> A) x (a : A) e,\n  (forall a, f (g a) = g (h a)) ->\n  map f (insert x a (map g e)) =\n  insert x (f a) (map g (map h e)).\nProof.\n  intros.\n  rewrite map_insert. f_equal.\n  eapply map_map_exchange.\n  eauto.\nQed.\n\nLemma map_map_vanish:\n  forall A B (f : B -> A) (g : A -> B) (e : env A),\n  (forall x, f (g x) = x) ->\n  map f (map g e) = e.\nProof.\n  induction e; intros;\n  try match goal with o: option _ |- _ => destruct o end;\n  simpl; eauto with f_equal.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Properties of [fold]. *)\n\n(* Interaction between [fold] and [empty]. *)\n\nLemma fold_empty:\n  forall A B (f : option A -> B -> B) accu,\n  fold f (@empty _) accu = accu.\nProof.\n  reflexivity.\nQed.\n\n(* Interaction between [fold] and [insert]. *)\n\nLemma fold_insert:\n  forall A B (f : option A -> B -> B) o e accu,\n  fold f (raw_insert 0 o e) accu = f o (fold f e accu).\nProof.\n  reflexivity.\nQed.\n\n(* An induction principle. In order to prove that a property [P] holds of\n   [fold f e accu], it suffices to hold that it holds of the initial\n   accumulator and that it is preserved by one iteration. The statement is\n   expressed in terms of [empty] and [raw_insert], so the fact that\n   environments are implemented as lists is not exposed. *)\n\n",
                "context_tokens": 704,
                "proof_start_offset": 17224,
                "proof_end_offset": 17518,
                "proof": "Lemma fold_invariant: forall A B (P : env A -> B -> Prop) f accu, P (@empty _) accu -> (forall o e accu, P e accu -> P (raw_insert 0 o e) (f o accu)) -> forall e, P e (fold f e accu).\nProof.\nintros ? ? ? ? ? init step.\ninduction e; simpl.\neapply init.\neapply step.\neauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma fold_invariant: forall A B (P : env A -> B -> Prop) f accu, P (@empty _) accu -> (forall o e accu, P e accu -> P (raw_insert 0 o e) (f o accu)) -> forall e, P e (fold f e accu).\nProof.\n  intros A B f Hf.\n  induction e; intros; try match goal with |- _ => destruct o; try discriminate end;\n  try match goal with |- _ => destruct o; try discriminate end;\n  try match goal with |- _ => destruct o; try discriminate end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goal with |- _ => destruct o end;\n  try match goalQed.",
                    "Lemma fold_invariant: forall A B (P : env A -> B -> Prop) f accu, P (@empty _) accu -> (forall o e accu, P e accu -> P (raw_insert 0 o e) (f o accu)) -> forall e, P e (fold f e accu).\nProof.\n  intros A B f Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf HfQed.",
                    "Lemma fold_invariant: forall A B (P : env A -> B -> Prop) f accu, P (@empty _) accu -> (forall o e accu, P e accu -> P (raw_insert 0 o e) (f o accu)) -> forall e, P e (fold f e accu).\nProof.\n  intros A B f Hf f Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf HfQed.",
                    "Lemma fold_invariant: forall A B (P : env A -> B -> Prop) f accu, P (@empty _) accu -> (forall o e accu, P e accu -> P (raw_insert 0 o e) (f o accu)) -> forall e, P e (fold f e accu).\nProof.\n  intros A B f g f Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf HfQed.",
                    "Lemma fold_invariant: forall A B (P : env A -> B -> Prop) f accu, P (@empty _) accu -> (forall o e accu, P e accu -> P (raw_insert 0 o e) (f o accu)) -> forall e, P e (fold f e accu).\nProof.\n  intros A B f Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf HfQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "ion e; intros;\n  try match goal with o: option _ |- _ => destruct o end;\n  simpl; eauto with f_equal.\nQed.\n\nLemma map_lift_map_lift:\n  forall T k s wk ws (e : env T),\n  forall `{Lift T},\n  @LiftLift T _ ->\n  k <= s ->\n  map (lift wk k) (map (lift ws s) e) = map (lift ws (wk + s)) (map (lift wk k) e).\nProof.\n  eauto using map_map_exchange, @lift_lift.\nQed.\n\nLemma map_insert_map:\n  forall A (f g h : A -> A) x (a : A) e,\n  (forall a, f (g a) = g (h a)) ->\n  map f (insert x a (map g e)) =\n  insert x (f a) (map g (map h e)).\nProof.\n  intros.\n  rewrite map_insert. f_equal.\n  eapply map_map_exchange.\n  eauto.\nQed.\n\nLemma map_map_vanish:\n  forall A B (f : B -> A) (g : A -> B) (e : env A),\n  (forall x, f (g x) = x) ->\n  map f (map g e) = e.\nProof.\n  induction e; intros;\n  try match goal with o: option _ |- _ => destruct o end;\n  simpl; eauto with f_equal.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Properties of [fold]. *)\n\n(* Interaction between [fold] and [empty]. *)\n\nLemma fold_empty:\n  forall A B (f : option A -> B -> B) accu,\n  fold f (@empty _) accu = accu.\nProof.\n  reflexivity.\nQed.\n\n(* Interaction between [fold] and [insert]. *)\n\nLemma fold_insert:\n  forall A B (f : option A -> B -> B) o e accu,\n  fold f (raw_insert 0 o e) accu = f o (fold f e accu).\nProof.\n  reflexivity.\nQed.\n\n(* An induction principle. In order to prove that a property [P] holds of\n   [fold f e accu], it suffices to hold that it holds of the initial\n   accumulator and that it is preserved by one iteration. The statement is\n   expressed in terms of [empty] and [raw_insert], so the fact that\n   environments are implemented as lists is not exposed. *)\n\nLemma fold_invariant:\n  forall A B (P : env A -> B -> Prop) f accu,\n  P (@empty _) accu ->\n  (forall o e accu, P e accu -> P (raw_insert 0 o e) (f o accu)) ->\n  forall e,\n  P e (fold f e accu).\nProof.\n  intros????? init step.\n  induction e; simpl.\n  eapply init.\n  eapply step. eauto.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* [length e] should be viewed as an upper bound on the true length of the\n   environment [e], since there may be useless [None] entries at the end.\n   We are careful to always work with hypotheses and goals of the form\n   [length e <= k]. *)\n\n",
                "context_tokens": 723,
                "proof_start_offset": 17848,
                "proof_end_offset": 17982,
                "proof": "Lemma length_monotonic: forall A (e : env A) k1 k2, length e <= k1 -> k1 <= k2 -> length e <= k2.\nProof.\nintros.\nomega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma length_monotonic: forall A (e : env A) k1 k2, length e <= k1 -> k1 <= k2 -> length e <= k2.\nProof.\n  intros.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_monotonic.\n  rewrite length_Qed.",
                    "Lemma length_monotonic: forall A (e : env A) k1 k2, length e <= k1 -> k1 <= k2 -> length e <= k2.\nProof.\n  intros A B f k1 k2.\n  induction e; intros;\n  try match goal with |- context [P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?P?PQed.",
                    "Lemma length_monotonic: forall A (e : env A) k1 k2, length e <= k1 -> k1 <= k2 -> length e <= k2.\nProof.\n  intros.\n  destruct e; simpl.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.\n  eapply IH.Qed.",
                    "Lemma length_monotonic: forall A (e : env A) k1 k2, length e <= k1 -> k1 <= k2 -> length e <= k2.\nProof.\n  intros.\n  rewrite length_monotonic; auto.\nQed.",
                    "Lemma length_monotonic: forall A (e : env A) k1 k2, length e <= k1 -> k1 <= k2 -> length e <= k2.\nProof.\n  intros.\n  unfold length.\n  induction e; simpl; intros; auto.\n  eapply init.\n  eapply init.\n  eauto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "lift:\n  forall T k s wk ws (e : env T),\n  forall `{Lift T},\n  @LiftLift T _ ->\n  k <= s ->\n  map (lift wk k) (map (lift ws s) e) = map (lift ws (wk + s)) (map (lift wk k) e).\nProof.\n  eauto using map_map_exchange, @lift_lift.\nQed.\n\nLemma map_insert_map:\n  forall A (f g h : A -> A) x (a : A) e,\n  (forall a, f (g a) = g (h a)) ->\n  map f (insert x a (map g e)) =\n  insert x (f a) (map g (map h e)).\nProof.\n  intros.\n  rewrite map_insert. f_equal.\n  eapply map_map_exchange.\n  eauto.\nQed.\n\nLemma map_map_vanish:\n  forall A B (f : B -> A) (g : A -> B) (e : env A),\n  (forall x, f (g x) = x) ->\n  map f (map g e) = e.\nProof.\n  induction e; intros;\n  try match goal with o: option _ |- _ => destruct o end;\n  simpl; eauto with f_equal.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Properties of [fold]. *)\n\n(* Interaction between [fold] and [empty]. *)\n\nLemma fold_empty:\n  forall A B (f : option A -> B -> B) accu,\n  fold f (@empty _) accu = accu.\nProof.\n  reflexivity.\nQed.\n\n(* Interaction between [fold] and [insert]. *)\n\nLemma fold_insert:\n  forall A B (f : option A -> B -> B) o e accu,\n  fold f (raw_insert 0 o e) accu = f o (fold f e accu).\nProof.\n  reflexivity.\nQed.\n\n(* An induction principle. In order to prove that a property [P] holds of\n   [fold f e accu], it suffices to hold that it holds of the initial\n   accumulator and that it is preserved by one iteration. The statement is\n   expressed in terms of [empty] and [raw_insert], so the fact that\n   environments are implemented as lists is not exposed. *)\n\nLemma fold_invariant:\n  forall A B (P : env A -> B -> Prop) f accu,\n  P (@empty _) accu ->\n  (forall o e accu, P e accu -> P (raw_insert 0 o e) (f o accu)) ->\n  forall e,\n  P e (fold f e accu).\nProof.\n  intros????? init step.\n  induction e; simpl.\n  eapply init.\n  eapply step. eauto.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* [length e] should be viewed as an upper bound on the true length of the\n   environment [e], since there may be useless [None] entries at the end.\n   We are careful to always work with hypotheses and goals of the form\n   [length e <= k]. *)\n\nLemma length_monotonic:\n  forall A (e : env A) k1 k2,\n  length e <= k1 ->\n  k1 <= k2 ->\n  length e <= k2.\nProof.\n  intros. omega.\nQed.\n\n",
                "context_tokens": 734,
                "proof_start_offset": 17984,
                "proof_end_offset": 18200,
                "proof": "Lemma lookup_beyond_length: forall A (e : env A) x, length e <= x -> lookup x e = None.\nProof.\ninduction e; simpl; intros.\neapply lookup_empty_None.\ndestruct x; [ omega | ].\nsimpl.\neapply IHe.\nomega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma lookup_beyond_length: forall A (e : env A) x, length e <= x -> lookup x e = None.\nProof.\n  intros.\n  rewrite <- insert_b_length.\n  rewrite <- insert_b_length.\n  rewrite <- insert_b_length.\n  rewrite <- insert_b_length.\n  rewrite <- insert_b_length.\n  rewrite <- insert_b_length.\n  rewrite <- insert_b_length.\n  rewrite <- insert_b_length.\n  rewrite insert_b_length.\n  rewrite <- insert_b_length.\n  rewrite insert_b_length.\n  rewrite <- insert_b_length.\n  rewrite insert_b_length.\n  rewrite insert_b_length.\n  rewrite <- insert_b_length.\n  rewrite insert_b_length.\n  rewrite insert_b_length.\n  rewrite insert_b_length.\n  rewrite insert_b_length.\n  rewrite insert_b_length.\n  rewrite insert_b_length.\n  rewrite insert_b_length.\n  rewrite insert_b_length.\n  rewrite insert_b_length.\n  rewrite insert_b_length.\n  rewrite insert_b_length.\n  rewrite insert_b_length.\n  rewrite insert_b_length.\n  rewrite insert_b_length.\n  rewrite insert_b_lengthQed.",
                    "Lemma lookup_beyond_length: forall A (e : env A) x, length e <= x -> lookup x e = None.\nProof.\n  intros.\n  induction e; simpl.\n  eapply find_nth_app; eauto.\nQed.",
                    "Lemma lookup_beyond_length: forall A (e : env A) x, length e <= x -> lookup x e = None.\nProof.\n  intros.\n  rewrite map_insert.\n  f_equal.\n  apply fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepcon.\n  rewrite fold_right_sepconQed.",
                    "Lemma lookup_beyond_length: forall A (e : env A) x, length e <= x -> lookup x e = None.\nProof.\n  intros. omega.\nQed.",
                    "Lemma lookup_beyond_length: forall A (e : env A) x, length e <= x -> lookup x e = None.\nProof.\n  intros. omega.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " a (map g e)) =\n  insert x (f a) (map g (map h e)).\nProof.\n  intros.\n  rewrite map_insert. f_equal.\n  eapply map_map_exchange.\n  eauto.\nQed.\n\nLemma map_map_vanish:\n  forall A B (f : B -> A) (g : A -> B) (e : env A),\n  (forall x, f (g x) = x) ->\n  map f (map g e) = e.\nProof.\n  induction e; intros;\n  try match goal with o: option _ |- _ => destruct o end;\n  simpl; eauto with f_equal.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Properties of [fold]. *)\n\n(* Interaction between [fold] and [empty]. *)\n\nLemma fold_empty:\n  forall A B (f : option A -> B -> B) accu,\n  fold f (@empty _) accu = accu.\nProof.\n  reflexivity.\nQed.\n\n(* Interaction between [fold] and [insert]. *)\n\nLemma fold_insert:\n  forall A B (f : option A -> B -> B) o e accu,\n  fold f (raw_insert 0 o e) accu = f o (fold f e accu).\nProof.\n  reflexivity.\nQed.\n\n(* An induction principle. In order to prove that a property [P] holds of\n   [fold f e accu], it suffices to hold that it holds of the initial\n   accumulator and that it is preserved by one iteration. The statement is\n   expressed in terms of [empty] and [raw_insert], so the fact that\n   environments are implemented as lists is not exposed. *)\n\nLemma fold_invariant:\n  forall A B (P : env A -> B -> Prop) f accu,\n  P (@empty _) accu ->\n  (forall o e accu, P e accu -> P (raw_insert 0 o e) (f o accu)) ->\n  forall e,\n  P e (fold f e accu).\nProof.\n  intros????? init step.\n  induction e; simpl.\n  eapply init.\n  eapply step. eauto.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* [length e] should be viewed as an upper bound on the true length of the\n   environment [e], since there may be useless [None] entries at the end.\n   We are careful to always work with hypotheses and goals of the form\n   [length e <= k]. *)\n\nLemma length_monotonic:\n  forall A (e : env A) k1 k2,\n  length e <= k1 ->\n  k1 <= k2 ->\n  length e <= k2.\nProof.\n  intros. omega.\nQed.\n\nLemma lookup_beyond_length:\n  forall A (e : env A) x,\n  length e <= x ->\n  lookup x e = None.\nProof.\n  induction e; simpl; intros.\n  eapply lookup_empty_None.\n  destruct x; [ omega | ]. simpl. eapply IHe. omega.\nQed.\n\n(* Every variable that is defined in the environment is less than the\n   length of the environment. *)\n\n",
                "context_tokens": 688,
                "proof_start_offset": 18306,
                "proof_end_offset": 18753,
                "proof": "Lemma defined_implies_below_length: forall A (e : env A) x k a, length e <= k -> lookup x e = Some a -> x < k.\nProof.\nintros.\ncase (le_gt_dec k x); intro; try tauto.\nassert (lookup x e = None).\neapply lookup_beyond_length.\nomega.\ncongruence.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma defined_implies_below_length: forall A (e : env A) x k a, length e <= k -> lookup x e = Some a -> x < k.\nProof.\n  induction e; simpl; intros.\n  eapply lookup_empty_inv; eauto.\n  eapply lookup_empty_inv; eauto.\n  eapply lookup_empty_inv; eauto.\n  eapply lookup_empty_inv; eauto.\nQed.",
                    "Lemma defined_implies_below_length: forall A (e : env A) x k a, length e <= k -> lookup x e = Some a -> x < k.\nProof.\n  intros.\n  destruct e; simpl; intros.\n  eapply lookup_empty_None; eauto.\nQed.",
                    "Lemma defined_implies_below_length: forall A (e : env A) x k a, length e <= k -> lookup x e = Some a -> x < k.\nProof.\n  intros.\n  destruct e; simpl; intros.\n  eapply lookup_empty_iff; eauto.\nQed.",
                    "Lemma defined_implies_below_length: forall A (e : env A) x k a, length e <= k -> lookup x e = Some a -> x < k.\nProof.\n  induction e; simpl; intros.\n  eapply lookup_empty_iff; eauto.\n  eapply lookup_empty_iff; eauto.\n  eapply lookup_empty_iff; eauto.\n  eapply lookup_empty_iff; eauto.\n  eapply lookup_empty_iff; eauto.\n  eapply lookup_empty_iff; eauto.\n  eapply lookup_empty_iff; eauto.\n  eapply lookup_empty_iff; eauto.\n  eapply lookup_empty_iff; eauto.\n  eapply lookup_empty_iff; eauto.\n  eapply lookup_empty_iff; eauto.\n  eapply lookup_empty_iff; eauto.\n  eapply lookup_empty_iff; eauto.\n  eapply lookup_empty_iff; eauto.\n  eapply lookup_empty_iff; eauto.\n  eapply lookup_empty_iff; eauto.\n  eapply lookup_empty_iff; eauto.\n  eapply lookup_empty_iff; eauto.\n  eapply lookup_empty_iff; eauto.\n  eapply lookup_empty_iff; eauto.\n  eapply lookup_empty_iff; eauto.\n  eapply lookup_empty_iff; eauto.\n  eapply lookup_empty_iff; eauto.\n  eapply lookup_empty_iff; eauto.\n  eapply lookup_emptyQed.",
                    "Lemma defined_implies_below_length: forall A (e : env A) x k a, length e <= k -> lookup x e = Some a -> x < k.\nProof.\n  intros.\n  rewrite fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_right.\n  apply fold_Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "*)\n\n(* Interaction between [fold] and [empty]. *)\n\nLemma fold_empty:\n  forall A B (f : option A -> B -> B) accu,\n  fold f (@empty _) accu = accu.\nProof.\n  reflexivity.\nQed.\n\n(* Interaction between [fold] and [insert]. *)\n\nLemma fold_insert:\n  forall A B (f : option A -> B -> B) o e accu,\n  fold f (raw_insert 0 o e) accu = f o (fold f e accu).\nProof.\n  reflexivity.\nQed.\n\n(* An induction principle. In order to prove that a property [P] holds of\n   [fold f e accu], it suffices to hold that it holds of the initial\n   accumulator and that it is preserved by one iteration. The statement is\n   expressed in terms of [empty] and [raw_insert], so the fact that\n   environments are implemented as lists is not exposed. *)\n\nLemma fold_invariant:\n  forall A B (P : env A -> B -> Prop) f accu,\n  P (@empty _) accu ->\n  (forall o e accu, P e accu -> P (raw_insert 0 o e) (f o accu)) ->\n  forall e,\n  P e (fold f e accu).\nProof.\n  intros????? init step.\n  induction e; simpl.\n  eapply init.\n  eapply step. eauto.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* [length e] should be viewed as an upper bound on the true length of the\n   environment [e], since there may be useless [None] entries at the end.\n   We are careful to always work with hypotheses and goals of the form\n   [length e <= k]. *)\n\nLemma length_monotonic:\n  forall A (e : env A) k1 k2,\n  length e <= k1 ->\n  k1 <= k2 ->\n  length e <= k2.\nProof.\n  intros. omega.\nQed.\n\nLemma lookup_beyond_length:\n  forall A (e : env A) x,\n  length e <= x ->\n  lookup x e = None.\nProof.\n  induction e; simpl; intros.\n  eapply lookup_empty_None.\n  destruct x; [ omega | ]. simpl. eapply IHe. omega.\nQed.\n\n(* Every variable that is defined in the environment is less than the\n   length of the environment. *)\n\nLemma defined_implies_below_length:\n  forall A (e : env A) x k a,\n  length e <= k ->\n  lookup x e = Some a ->\n  x < k.\nProof.\n  intros.\n  (* If [x < k] holds, the result is immediate. Consider the other case,\n     [k <= x]. *)\n  case (le_gt_dec k x); intro; try tauto.\n  (* By definition of [length], [lookup x e] is [None]. *)\n  assert (lookup x e = None). eapply lookup_beyond_length. omega.\n  (* We obtain a contradiction. *)\n  congruence.\nQed.\n\nHint Resolve defined_implies_below_length : lift_idx_hints.\n\n(* The empty environment has zero length. *)\n\n",
                "context_tokens": 698,
                "proof_start_offset": 18862,
                "proof_end_offset": 18957,
                "proof": "Lemma length_empty: forall A k, length (@empty A) <= k.\nProof.\nsimpl.\nintros.\nomega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma length_empty: forall A k, length (@empty A) <= k.\nProof.\n  intros.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_Qed.",
                    "Lemma length_empty: forall A k, length (@empty A) <= k.\nProof.\n  induction k; simpl; intros.\n  apply length_empty.\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega | ].\n  destruct k; [omega |Qed.",
                    "Lemma length_empty: forall A k, length (@empty A) <= k.\nProof.\n  induction e; simpl; intros.\n  eapply lookup_empty_iff; eauto.\n  (* The case analysis on [k] is not in the [k] is a [k] and [k] in the\n   [k] is the same value of [k] is a\n   [k] or [k] is [k] and [k] is a\n   [k] is the [k] is a [k] or [k] or [k] or [k]\n   [k] is not [k] and [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] or [k] orQed.",
                    "Lemma length_empty: forall A k, length (@empty A) <= k.\nProof.\n  induction k; simpl; intros.\n  apply length_empty.\n  apply length_empty.\n  destruct x; [omega | ].\n  apply length_empty.\n  destruct x; [omega | ].\n  apply length_empty.\n  destruct x; [omega | ].\n  apply length_empty.\n  destruct x; [omega | ].\n  apply length_empty.\n  destruct x; [omega | ].\n  apply length_empty.\n  destruct x; [omega | ].\n  apply length_empty.\n  destruct x; [omega | ].\n  apply length_empty.\n  destruct x; [omega | ].\n  apply length_empty.\n  destruct x; [omega | ].\n  apply length_empty.\n  destruct x; [omega | ].\n  apply length_empty.\n  destruct x; [omega | ].\n  apply length_empty.\n  destruct x; [omega | ].\n  apply length_empty.\n  destruct x; [omega | ].\n  apply length_empty.\n  destruct x; [omega | ].\n  apply length_empty.\n  destruct x; [omega | ].\n  apply length_empty.\n  destruct x; [omega | ].\n  apply length_empty.\n  destruct x; [omega | ].\n Qed.",
                    "Lemma length_empty: forall A k, length (@empty A) <= k.\nProof.\n  intros.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_empty.\n  rewrite length_Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "tion principle. In order to prove that a property [P] holds of\n   [fold f e accu], it suffices to hold that it holds of the initial\n   accumulator and that it is preserved by one iteration. The statement is\n   expressed in terms of [empty] and [raw_insert], so the fact that\n   environments are implemented as lists is not exposed. *)\n\nLemma fold_invariant:\n  forall A B (P : env A -> B -> Prop) f accu,\n  P (@empty _) accu ->\n  (forall o e accu, P e accu -> P (raw_insert 0 o e) (f o accu)) ->\n  forall e,\n  P e (fold f e accu).\nProof.\n  intros????? init step.\n  induction e; simpl.\n  eapply init.\n  eapply step. eauto.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* [length e] should be viewed as an upper bound on the true length of the\n   environment [e], since there may be useless [None] entries at the end.\n   We are careful to always work with hypotheses and goals of the form\n   [length e <= k]. *)\n\nLemma length_monotonic:\n  forall A (e : env A) k1 k2,\n  length e <= k1 ->\n  k1 <= k2 ->\n  length e <= k2.\nProof.\n  intros. omega.\nQed.\n\nLemma lookup_beyond_length:\n  forall A (e : env A) x,\n  length e <= x ->\n  lookup x e = None.\nProof.\n  induction e; simpl; intros.\n  eapply lookup_empty_None.\n  destruct x; [ omega | ]. simpl. eapply IHe. omega.\nQed.\n\n(* Every variable that is defined in the environment is less than the\n   length of the environment. *)\n\nLemma defined_implies_below_length:\n  forall A (e : env A) x k a,\n  length e <= k ->\n  lookup x e = Some a ->\n  x < k.\nProof.\n  intros.\n  (* If [x < k] holds, the result is immediate. Consider the other case,\n     [k <= x]. *)\n  case (le_gt_dec k x); intro; try tauto.\n  (* By definition of [length], [lookup x e] is [None]. *)\n  assert (lookup x e = None). eapply lookup_beyond_length. omega.\n  (* We obtain a contradiction. *)\n  congruence.\nQed.\n\nHint Resolve defined_implies_below_length : lift_idx_hints.\n\n(* The empty environment has zero length. *)\n\nLemma length_empty:\n  forall A k,\n  length (@empty A) <= k.\nProof.\n  simpl. intros. omega.\nQed.\n\n(* This definition of [max] is much more pleasant to work with than the\n   one found in Coq's standard library. It can be easily unfolded, and\n   then [omega] takes control. *)\n\nDefinition mymax m n :=\n  if le_gt_dec m n then n else m.\n\nLtac mymax :=\n  unfold mymax in *; dblib_by_cases; try omega.\n\n",
                "context_tokens": 692,
                "proof_start_offset": 19259,
                "proof_end_offset": 19333,
                "proof": "Lemma mymax_l: forall i j, mymax i j >= i.\nProof.\nintros.\nmymax.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma mymax_l: forall i j, mymax i j >= i.\nProof.\n  intros.\n  apply mymax_r; auto.\nQed.",
                    "Lemma mymax_l: forall i j, mymax i j >= i.\nProof.\n  induction j; simpl.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  applyQed.",
                    "Lemma mymax_l: forall i j, mymax i j >= i.\nProof.\n  intros.\n  rewrite <- (proj2_correct i j); try omega.\n  rewrite <- (proj2_correct i j); try omega.\n  rewrite <- (proj2_correct i j); try omega.\n  rewrite <- (proj2_correct i j); try omega.\n  rewrite <- (proj2_correct i j); try omega.\n  rewrite <- (proj2_correct i j); try omega.\n  rewrite <- (proj2_correct i j); try omega.\n  rewrite <- (proj2_correct i j); try omega.\n  rewrite <- (proj2_correct i j); try omega.\n  rewrite <- (proj2_correct i j); try omega.\n  rewrite <- (proj2_correct i j); try omega.\n  rewrite <- (proj2_correct i j); try omega.\n  rewrite <- (proj2_correct i j); try omega.\n  rewrite <- (proj2_correct i j); try omega.\n  rewrite <- (proj2_correct i j); try omega.\n  rewrite <- (proj2_correct i j); try omega.\n  rewrite <- (proj2_correct i j); try omega.\n  rewrite <- (proj2_correct i j); tryQed.",
                    "Lemma mymax_l: forall i j, mymax i j >= i.\nProof.\n  intros.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_Qed.",
                    "Lemma mymax_l: forall i j, mymax i j >= i.\nProof.\n  intros. omega.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "accu], it suffices to hold that it holds of the initial\n   accumulator and that it is preserved by one iteration. The statement is\n   expressed in terms of [empty] and [raw_insert], so the fact that\n   environments are implemented as lists is not exposed. *)\n\nLemma fold_invariant:\n  forall A B (P : env A -> B -> Prop) f accu,\n  P (@empty _) accu ->\n  (forall o e accu, P e accu -> P (raw_insert 0 o e) (f o accu)) ->\n  forall e,\n  P e (fold f e accu).\nProof.\n  intros????? init step.\n  induction e; simpl.\n  eapply init.\n  eapply step. eauto.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* [length e] should be viewed as an upper bound on the true length of the\n   environment [e], since there may be useless [None] entries at the end.\n   We are careful to always work with hypotheses and goals of the form\n   [length e <= k]. *)\n\nLemma length_monotonic:\n  forall A (e : env A) k1 k2,\n  length e <= k1 ->\n  k1 <= k2 ->\n  length e <= k2.\nProof.\n  intros. omega.\nQed.\n\nLemma lookup_beyond_length:\n  forall A (e : env A) x,\n  length e <= x ->\n  lookup x e = None.\nProof.\n  induction e; simpl; intros.\n  eapply lookup_empty_None.\n  destruct x; [ omega | ]. simpl. eapply IHe. omega.\nQed.\n\n(* Every variable that is defined in the environment is less than the\n   length of the environment. *)\n\nLemma defined_implies_below_length:\n  forall A (e : env A) x k a,\n  length e <= k ->\n  lookup x e = Some a ->\n  x < k.\nProof.\n  intros.\n  (* If [x < k] holds, the result is immediate. Consider the other case,\n     [k <= x]. *)\n  case (le_gt_dec k x); intro; try tauto.\n  (* By definition of [length], [lookup x e] is [None]. *)\n  assert (lookup x e = None). eapply lookup_beyond_length. omega.\n  (* We obtain a contradiction. *)\n  congruence.\nQed.\n\nHint Resolve defined_implies_below_length : lift_idx_hints.\n\n(* The empty environment has zero length. *)\n\nLemma length_empty:\n  forall A k,\n  length (@empty A) <= k.\nProof.\n  simpl. intros. omega.\nQed.\n\n(* This definition of [max] is much more pleasant to work with than the\n   one found in Coq's standard library. It can be easily unfolded, and\n   then [omega] takes control. *)\n\nDefinition mymax m n :=\n  if le_gt_dec m n then n else m.\n\nLtac mymax :=\n  unfold mymax in *; dblib_by_cases; try omega.\n\nLemma mymax_l:\n  forall i j, mymax i j >= i.\nProof. \n  intros. mymax.\nQed.\n\n",
                "context_tokens": 704,
                "proof_start_offset": 19335,
                "proof_end_offset": 19409,
                "proof": "Lemma mymax_r: forall i j, mymax i j >= j.\nProof.\nintros.\nmymax.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma mymax_r: forall i j, mymax i j >= j.\nProof.\n  intros.\n  unfold mymax in *.\n  destruct (le_gt_dec j 0); try omega.\n  apply mymax_r_r_lt_trans with (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (mQed.",
                    "Lemma mymax_r: forall i j, mymax i j >= j.\nProof.\n  intros.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_r.\n  apply mymax_Qed.",
                    "Lemma mymax_r: forall i j, mymax i j >= j.\nProof.\n  intros. apply mymax_r.\nQed.",
                    "Lemma mymax_r: forall i j, mymax i j >= j.\nProof.\n  intros.\n  apply mymax_r.\nQed.",
                    "Lemma mymax_r: forall i j, mymax i j >= j.\nProof.\n  intros.\n  apply mymax_r.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "ty _) accu ->\n  (forall o e accu, P e accu -> P (raw_insert 0 o e) (f o accu)) ->\n  forall e,\n  P e (fold f e accu).\nProof.\n  intros????? init step.\n  induction e; simpl.\n  eapply init.\n  eapply step. eauto.\nQed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* [length e] should be viewed as an upper bound on the true length of the\n   environment [e], since there may be useless [None] entries at the end.\n   We are careful to always work with hypotheses and goals of the form\n   [length e <= k]. *)\n\nLemma length_monotonic:\n  forall A (e : env A) k1 k2,\n  length e <= k1 ->\n  k1 <= k2 ->\n  length e <= k2.\nProof.\n  intros. omega.\nQed.\n\nLemma lookup_beyond_length:\n  forall A (e : env A) x,\n  length e <= x ->\n  lookup x e = None.\nProof.\n  induction e; simpl; intros.\n  eapply lookup_empty_None.\n  destruct x; [ omega | ]. simpl. eapply IHe. omega.\nQed.\n\n(* Every variable that is defined in the environment is less than the\n   length of the environment. *)\n\nLemma defined_implies_below_length:\n  forall A (e : env A) x k a,\n  length e <= k ->\n  lookup x e = Some a ->\n  x < k.\nProof.\n  intros.\n  (* If [x < k] holds, the result is immediate. Consider the other case,\n     [k <= x]. *)\n  case (le_gt_dec k x); intro; try tauto.\n  (* By definition of [length], [lookup x e] is [None]. *)\n  assert (lookup x e = None). eapply lookup_beyond_length. omega.\n  (* We obtain a contradiction. *)\n  congruence.\nQed.\n\nHint Resolve defined_implies_below_length : lift_idx_hints.\n\n(* The empty environment has zero length. *)\n\nLemma length_empty:\n  forall A k,\n  length (@empty A) <= k.\nProof.\n  simpl. intros. omega.\nQed.\n\n(* This definition of [max] is much more pleasant to work with than the\n   one found in Coq's standard library. It can be easily unfolded, and\n   then [omega] takes control. *)\n\nDefinition mymax m n :=\n  if le_gt_dec m n then n else m.\n\nLtac mymax :=\n  unfold mymax in *; dblib_by_cases; try omega.\n\nLemma mymax_l:\n  forall i j, mymax i j >= i.\nProof. \n  intros. mymax.\nQed.\n\nLemma mymax_r:\n  forall i j, mymax i j >= j.\nProof. \n  intros. mymax.\nQed.\n\nHint Resolve mymax_l mymax_r : mymax.\n\n(* Extending an environment increments its length by one, in the usual case.\n   It can be extended by more than one if [x] is far away. *)\n\n",
                "context_tokens": 705,
                "proof_start_offset": 19590,
                "proof_end_offset": 19888,
                "proof": "Lemma length_insert_general: forall A x k o (e : env A), length e = k -> length (raw_insert x o e) = mymax (1 + k) (1 + x).\nProof.\ninduction x; simpl; intros; subst.\nmymax.\ndestruct e; simpl.\nmymax.\nerewrite IHx by reflexivity.\nsimpl.\nmymax.\nerewrite IHx by reflexivity.\nmymax.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma length_insert_general: forall A x k o (e : env A), length e = k -> length (raw_insert x o e) = mymax (1 + k) (1 + x).\nProof.\n  intros.\n  unfold mymax, mymax.\n  destruct (lt_gt_dec k x); auto.\n  apply mymax_r.\nQed.",
                    "Lemma length_insert_general: forall A x k o (e : env A), length e = k -> length (raw_insert x o e) = mymax (1 + k) (1 + x).\nProof.\n  intros.\n  apply length_insert_strong; auto.\nQed.",
                    "Lemma length_insert_general: forall A x k o (e : env A), length e = k -> length (raw_insert x o e) = mymax (1 + k) (1 + x).\nProof.\n  intros.\n  unfold mymax.\n  apply length_insert_general.\n  destruct x; [omega | omega].\n  destruct x; [omega | omega].\n  destruct x; [omega | omega].\n  destruct x; [omega | omega].\n  destruct x; [omega | omega].\n  destruct x; [omega | omega].\n  destruct x; [omega | omega].\n  destruct x; [omega | omega].\n  destruct x; [omega | omega].\n  destruct x; [omega | omega].\n  destruct x; [omega | omega].\n  destruct x; [omega | omega].\n  destruct x; [omega | omega].\n  destruct x; [omega | omega].\n  destruct x; [omega | omega].\n  destruct x; [omega | omega].\n  destruct x; [omega | omega].\n  destruct x; [omega | omega].\n  destruct x; [omega | omega].\n  destruct x; [omega | omega].\n  destruct x; [omega | omega].\n  destruct x; [omega | omega].\n  destruct x; [omega | omega].\n  destruct x; [omega | omega].\n  destruct x; [omega | omega].\n  destruct x; [omega | omega].\n  destruct xQed.",
                    "Lemma length_insert_general: forall A x k o (e : env A), length e = k -> length (raw_insert x o e) = mymax (1 + k) (1 + x).\nProof.\n  intros.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destruct o; simpl; auto.\n  destructQed.",
                    "Lemma length_insert_general: forall A x k o (e : env A), length e = k -> length (raw_insert x o e) = mymax (1 + k) (1 + x).\nProof.\n  intros.\n  assert (lookup x e = None). eapply lookup_b_length. omega. omega.\n  rewrite length_insert_length. omega.\n  rewrite length_insert_length. omega. omega.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " bound on the true length of the\n   environment [e], since there may be useless [None] entries at the end.\n   We are careful to always work with hypotheses and goals of the form\n   [length e <= k]. *)\n\nLemma length_monotonic:\n  forall A (e : env A) k1 k2,\n  length e <= k1 ->\n  k1 <= k2 ->\n  length e <= k2.\nProof.\n  intros. omega.\nQed.\n\nLemma lookup_beyond_length:\n  forall A (e : env A) x,\n  length e <= x ->\n  lookup x e = None.\nProof.\n  induction e; simpl; intros.\n  eapply lookup_empty_None.\n  destruct x; [ omega | ]. simpl. eapply IHe. omega.\nQed.\n\n(* Every variable that is defined in the environment is less than the\n   length of the environment. *)\n\nLemma defined_implies_below_length:\n  forall A (e : env A) x k a,\n  length e <= k ->\n  lookup x e = Some a ->\n  x < k.\nProof.\n  intros.\n  (* If [x < k] holds, the result is immediate. Consider the other case,\n     [k <= x]. *)\n  case (le_gt_dec k x); intro; try tauto.\n  (* By definition of [length], [lookup x e] is [None]. *)\n  assert (lookup x e = None). eapply lookup_beyond_length. omega.\n  (* We obtain a contradiction. *)\n  congruence.\nQed.\n\nHint Resolve defined_implies_below_length : lift_idx_hints.\n\n(* The empty environment has zero length. *)\n\nLemma length_empty:\n  forall A k,\n  length (@empty A) <= k.\nProof.\n  simpl. intros. omega.\nQed.\n\n(* This definition of [max] is much more pleasant to work with than the\n   one found in Coq's standard library. It can be easily unfolded, and\n   then [omega] takes control. *)\n\nDefinition mymax m n :=\n  if le_gt_dec m n then n else m.\n\nLtac mymax :=\n  unfold mymax in *; dblib_by_cases; try omega.\n\nLemma mymax_l:\n  forall i j, mymax i j >= i.\nProof. \n  intros. mymax.\nQed.\n\nLemma mymax_r:\n  forall i j, mymax i j >= j.\nProof. \n  intros. mymax.\nQed.\n\nHint Resolve mymax_l mymax_r : mymax.\n\n(* Extending an environment increments its length by one, in the usual case.\n   It can be extended by more than one if [x] is far away. *)\n\nLemma length_insert_general:\n  forall A x k o (e : env A),\n  length e = k ->\n  length (raw_insert x o e) = mymax (1 + k) (1 + x).\nProof.\n  induction x; simpl; intros; subst.\n  mymax.\n  destruct e; simpl.\n  mymax. erewrite IHx by reflexivity. simpl. mymax.\n  erewrite IHx by reflexivity. mymax.\nQed.\n\n(* This should be the usual case. *)\n\n",
                "context_tokens": 720,
                "proof_start_offset": 19928,
                "proof_end_offset": 20142,
                "proof": "Lemma length_insert: forall A x k km1 o (e : env A), length e <= km1 -> km1 <= k - 1 -> x < k -> length (raw_insert x o e) <= k.\nProof.\nintros.\nerewrite length_insert_general by reflexivity.\nmymax.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma length_insert: forall A x k km1 o (e : env A), length e <= km1 -> km1 <= k - 1 -> x < k -> length (raw_insert x o e) <= k.\nProof.\n  intros. unfold length, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, rev, revQed.",
                    "Lemma length_insert: forall A x k km1 o (e : env A), length e <= km1 -> km1 <= k - 1 -> x < k -> length (raw_insert x o e) <= k.\nProof.\n  induction x; simpl; intros.\n  unfold rev.\n  destruct (eq_dec k x); simpl; intros.\n  rewrite rev_insert_strong.\n  rewrite rev_insert_strong.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert_strong.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.Qed.",
                    "Lemma length_insert: forall A x k km1 o (e : env A), length e <= km1 -> km1 <= k - 1 -> x < k -> length (raw_insert x o e) <= k.\nProof.\n  intros. unfold length.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n Qed.",
                    "Lemma length_insert: forall A x k km1 o (e : env A), length e <= km1 -> km1 <= k - 1 -> x < k -> length (raw_insert x o e) <= k.\nProof.\n  intros. unfold length.\n  rewrite rev_insert.\n  destruct e; simpl; auto.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  destruct e; simpl; auto.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  destruct e; simpl; auto.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  destruct e; simpl; auto.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  destruct e; simpl; auto.\n  rewrite rev_insert.\n  rewrite rev_insert.\n  destruct e; simpl; auto.\n  rewrite rev_insert.\n  destruct e; simpl; auto.\n  rewrite rev_insert.\n  destruct e; simpl; auto.\n  rewrite rev_insert.\n  destruct e; simpl; auto.\n  rewrite rev_insert.\n  destruct e; simpl; auto.\n  rewrite rev_insert.\n  destruct e; simpl; auto.\n  rewrite rev_insert.\n  destruct e; simpl; auto.\n  rewrite rev_insert.\n  destruct e; simpl; auto.\n  rewrite rev_insert.\n  destruct e; simpl; auto.\n  rewrite revQed.",
                    "Lemma length_insert: forall A x k km1 o (e : env A), length e <= km1 -> km1 <= k - 1 -> x < k -> length (raw_insert x o e) <= k.\nProof.\n  intros.\n  apply length_insert_general; try omega.\n  simpl.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewriteQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "1 ->\n  k1 <= k2 ->\n  length e <= k2.\nProof.\n  intros. omega.\nQed.\n\nLemma lookup_beyond_length:\n  forall A (e : env A) x,\n  length e <= x ->\n  lookup x e = None.\nProof.\n  induction e; simpl; intros.\n  eapply lookup_empty_None.\n  destruct x; [ omega | ]. simpl. eapply IHe. omega.\nQed.\n\n(* Every variable that is defined in the environment is less than the\n   length of the environment. *)\n\nLemma defined_implies_below_length:\n  forall A (e : env A) x k a,\n  length e <= k ->\n  lookup x e = Some a ->\n  x < k.\nProof.\n  intros.\n  (* If [x < k] holds, the result is immediate. Consider the other case,\n     [k <= x]. *)\n  case (le_gt_dec k x); intro; try tauto.\n  (* By definition of [length], [lookup x e] is [None]. *)\n  assert (lookup x e = None). eapply lookup_beyond_length. omega.\n  (* We obtain a contradiction. *)\n  congruence.\nQed.\n\nHint Resolve defined_implies_below_length : lift_idx_hints.\n\n(* The empty environment has zero length. *)\n\nLemma length_empty:\n  forall A k,\n  length (@empty A) <= k.\nProof.\n  simpl. intros. omega.\nQed.\n\n(* This definition of [max] is much more pleasant to work with than the\n   one found in Coq's standard library. It can be easily unfolded, and\n   then [omega] takes control. *)\n\nDefinition mymax m n :=\n  if le_gt_dec m n then n else m.\n\nLtac mymax :=\n  unfold mymax in *; dblib_by_cases; try omega.\n\nLemma mymax_l:\n  forall i j, mymax i j >= i.\nProof. \n  intros. mymax.\nQed.\n\nLemma mymax_r:\n  forall i j, mymax i j >= j.\nProof. \n  intros. mymax.\nQed.\n\nHint Resolve mymax_l mymax_r : mymax.\n\n(* Extending an environment increments its length by one, in the usual case.\n   It can be extended by more than one if [x] is far away. *)\n\nLemma length_insert_general:\n  forall A x k o (e : env A),\n  length e = k ->\n  length (raw_insert x o e) = mymax (1 + k) (1 + x).\nProof.\n  induction x; simpl; intros; subst.\n  mymax.\n  destruct e; simpl.\n  mymax. erewrite IHx by reflexivity. simpl. mymax.\n  erewrite IHx by reflexivity. mymax.\nQed.\n\n(* This should be the usual case. *)\n\nLemma length_insert:\n  forall A x k km1 o (e : env A),\n  length e <= km1 ->\n  km1 <= k - 1 ->\n  x < k ->\n  length (raw_insert x o e) <= k.\nProof.\n  intros. erewrite length_insert_general by reflexivity. mymax.\nQed.\n\n(* Pain, pain. *)\n\n",
                "context_tokens": 732,
                "proof_start_offset": 20163,
                "proof_end_offset": 20345,
                "proof": "Lemma length_insert_reverse_1: forall A (e : env A) k x a, length (insert x a e) <= k -> x < k.\nProof.\nintros.\nerewrite length_insert_general in * by reflexivity.\nmymax.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma length_insert_reverse_1: forall A (e : env A) k x a, length (insert x a e) <= k -> x < k.\nProof.\n  intros.\n  unfold length.\n  rewrite length_insert_ret.\n  rewrite length_insert_ret.\n  rewrite length_insert_ret.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.Qed.",
                    "Lemma length_insert_reverse_1: forall A (e : env A) k x a, length (insert x a e) <= k -> x < k.\nProof.\n  intros.\n  unfold length; intros.\n  rewrite rev_insert_length.\n  destruct e; simpl.\n  unfold rev; intros.\n  rewrite rev_insert_length.\n  rewrite rev_insert_length.\n  destruct e; simpl.\n  unfold rev; intros.\n  rewrite rev_insert_length.\n  rewrite rev_insert_length.\n  destruct e; simpl.\n  unfold rev; intros.\n  rewrite rev_insert_length.\n  destruct e; simpl.\n  rewrite rev_insert_length.\n  destruct e; simpl.\n  unfold rev; intros.\n  rewrite rev_insert_length.\n  rewrite rev_insert_length.\n  destruct e; simpl.\n  unfold rev; intros.\n  rewrite rev_insert_length.\n  destruct e; simpl.\n  unfold rev; intros.\n  rewrite rev_insert_length.\n  destruct e; simpl.\n  rewrite rev_insert_length.\n  destruct e; simpl.\n  unfold rev; intros.\n  rewrite rev_insert_length.\n  destruct e; simpl.\n  rewrite rev_insert_length.\n  destruct e; simpl.\n  rewrite rev_insert_length.\n  destruct e; simpl.\n  rewrite rev_insert_length.\n  destructQed.",
                    "Lemma length_insert_reverse_1: forall A (e : env A) k x a, length (insert x a e) <= k -> x < k.\nProof.\n  intros.\n  apply length_insert_strong_strong.\n  apply length_insert_strong.\n  apply length_insert_strong.\n  apply length_insert_strong.\n  apply length_insert_strong.\n  apply length_insert_strong.\n  apply length_insert_strong.\n  apply length_insert_strong.\n  apply length_insert_strong.\n  apply length_insert_strong.\n  apply length_insert_strong.\n  apply length_insert_strong.\n  apply length_insert_strong.\n  apply length_insert_strong.\n  apply length_insert_strong.\n  apply length_insert_strong.\n  apply length_insert_strong.\n  apply length_insert.\n  apply length_insert_strong.\n  apply length_insert_strong.\n  apply length_insert_strong.\n  apply length_insert_strong.\n  apply length_insert_strong.\n  apply length_insert_strong.\n  apply length_insert_strong.\n  apply length_insert_strong.\n  apply length_insert_strong.\n  apply length_insert_strong.\n  apply length_insert.\n  apply length_insert.\n  apply length_insert_strong.\n  apply length_insert_Qed.",
                    "Lemma length_insert_reverse_1: forall A (e : env A) k x a, length (insert x a e) <= k -> x < k.\nProof.\n  intros. unfold length. rewrite length_insert_length.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.Qed.",
                    "Lemma length_insert_reverse_1: forall A (e : env A) k x a, length (insert x a e) <= k -> x < k.\nProof.\n  intros. unfold length.\n  induction e; simpl; intros.\n  simpl.\n  unfold length.\n  rewrite length_insert_length.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewriteQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " induction e; simpl; intros.\n  eapply lookup_empty_None.\n  destruct x; [ omega | ]. simpl. eapply IHe. omega.\nQed.\n\n(* Every variable that is defined in the environment is less than the\n   length of the environment. *)\n\nLemma defined_implies_below_length:\n  forall A (e : env A) x k a,\n  length e <= k ->\n  lookup x e = Some a ->\n  x < k.\nProof.\n  intros.\n  (* If [x < k] holds, the result is immediate. Consider the other case,\n     [k <= x]. *)\n  case (le_gt_dec k x); intro; try tauto.\n  (* By definition of [length], [lookup x e] is [None]. *)\n  assert (lookup x e = None). eapply lookup_beyond_length. omega.\n  (* We obtain a contradiction. *)\n  congruence.\nQed.\n\nHint Resolve defined_implies_below_length : lift_idx_hints.\n\n(* The empty environment has zero length. *)\n\nLemma length_empty:\n  forall A k,\n  length (@empty A) <= k.\nProof.\n  simpl. intros. omega.\nQed.\n\n(* This definition of [max] is much more pleasant to work with than the\n   one found in Coq's standard library. It can be easily unfolded, and\n   then [omega] takes control. *)\n\nDefinition mymax m n :=\n  if le_gt_dec m n then n else m.\n\nLtac mymax :=\n  unfold mymax in *; dblib_by_cases; try omega.\n\nLemma mymax_l:\n  forall i j, mymax i j >= i.\nProof. \n  intros. mymax.\nQed.\n\nLemma mymax_r:\n  forall i j, mymax i j >= j.\nProof. \n  intros. mymax.\nQed.\n\nHint Resolve mymax_l mymax_r : mymax.\n\n(* Extending an environment increments its length by one, in the usual case.\n   It can be extended by more than one if [x] is far away. *)\n\nLemma length_insert_general:\n  forall A x k o (e : env A),\n  length e = k ->\n  length (raw_insert x o e) = mymax (1 + k) (1 + x).\nProof.\n  induction x; simpl; intros; subst.\n  mymax.\n  destruct e; simpl.\n  mymax. erewrite IHx by reflexivity. simpl. mymax.\n  erewrite IHx by reflexivity. mymax.\nQed.\n\n(* This should be the usual case. *)\n\nLemma length_insert:\n  forall A x k km1 o (e : env A),\n  length e <= km1 ->\n  km1 <= k - 1 ->\n  x < k ->\n  length (raw_insert x o e) <= k.\nProof.\n  intros. erewrite length_insert_general by reflexivity. mymax.\nQed.\n\n(* Pain, pain. *)\n\nLemma length_insert_reverse_1:\n  forall A (e : env A) k x a,\n  length (insert x a e) <= k ->\n  x < k.\nProof.\n  intros. erewrite length_insert_general in * by reflexivity. mymax.\nQed.\n\n",
                "context_tokens": 729,
                "proof_start_offset": 20347,
                "proof_end_offset": 20541,
                "proof": "Lemma length_insert_reverse_2: forall A (e : env A) k x a, length (insert x a e) <= k + 1 -> length e <= k.\nProof.\nintros.\nerewrite length_insert_general in * by reflexivity.\nmymax.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma length_insert_reverse_2: forall A (e : env A) k x a, length (insert x a e) <= k + 1 -> length e <= k.\nProof.\n  intros. unfold length.\n  rewrite length_insert_length.\n  rewrite length_insert_length.\n  rewrite length_insert_length.\n  rewrite length_insert_length.\n  rewrite length_insert.\n  rewrite length_insert_length.\n  rewrite length_insert_length.\n  rewrite length_insert.\n  rewrite length_insert_length.\n  rewrite length_insert_length.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite lengthQed.",
                    "Lemma length_insert_reverse_2: forall A (e : env A) k x a, length (insert x a e) <= k + 1 -> length e <= k.\nProof.\n  intros. unfold length. rewrite length_insert_length.\n  rewrite length_insert_length.\n  rewrite length_insert_length.\n  rewrite length_insert.\n  rewrite length_insert_length.\n  rewrite length_insert.\n  rewrite length_insert_length.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert_length.\n  rewrite length_insert.\n  rewrite length_insert_length.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert_length.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_Qed.",
                    "Lemma length_insert_reverse_2: forall A (e : env A) k x a, length (insert x a e) <= k + 1 -> length e <= k.\nProof.\n  intros. unfold length. rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewriteQed.",
                    "Lemma length_insert_reverse_2: forall A (e : env A) k x a, length (insert x a e) <= k + 1 -> length e <= k.\nProof.\n  intros. unfold length. rewrite length_insert_in.\n  rewrite length_insert_length.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_Qed.",
                    "Lemma length_insert_reverse_2: forall A (e : env A) k x a, length (insert x a e) <= k + 1 -> length e <= k.\nProof.\n  intros. unfold length.\n  rewrite length_insert_general; trivial.\n  unfold length.\n  rewrite length_insert_general; trivial.\n  unfold length.\n  rewrite length_insert_general; trivial.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " a,\n  length e <= k ->\n  lookup x e = Some a ->\n  x < k.\nProof.\n  intros.\n  (* If [x < k] holds, the result is immediate. Consider the other case,\n     [k <= x]. *)\n  case (le_gt_dec k x); intro; try tauto.\n  (* By definition of [length], [lookup x e] is [None]. *)\n  assert (lookup x e = None). eapply lookup_beyond_length. omega.\n  (* We obtain a contradiction. *)\n  congruence.\nQed.\n\nHint Resolve defined_implies_below_length : lift_idx_hints.\n\n(* The empty environment has zero length. *)\n\nLemma length_empty:\n  forall A k,\n  length (@empty A) <= k.\nProof.\n  simpl. intros. omega.\nQed.\n\n(* This definition of [max] is much more pleasant to work with than the\n   one found in Coq's standard library. It can be easily unfolded, and\n   then [omega] takes control. *)\n\nDefinition mymax m n :=\n  if le_gt_dec m n then n else m.\n\nLtac mymax :=\n  unfold mymax in *; dblib_by_cases; try omega.\n\nLemma mymax_l:\n  forall i j, mymax i j >= i.\nProof. \n  intros. mymax.\nQed.\n\nLemma mymax_r:\n  forall i j, mymax i j >= j.\nProof. \n  intros. mymax.\nQed.\n\nHint Resolve mymax_l mymax_r : mymax.\n\n(* Extending an environment increments its length by one, in the usual case.\n   It can be extended by more than one if [x] is far away. *)\n\nLemma length_insert_general:\n  forall A x k o (e : env A),\n  length e = k ->\n  length (raw_insert x o e) = mymax (1 + k) (1 + x).\nProof.\n  induction x; simpl; intros; subst.\n  mymax.\n  destruct e; simpl.\n  mymax. erewrite IHx by reflexivity. simpl. mymax.\n  erewrite IHx by reflexivity. mymax.\nQed.\n\n(* This should be the usual case. *)\n\nLemma length_insert:\n  forall A x k km1 o (e : env A),\n  length e <= km1 ->\n  km1 <= k - 1 ->\n  x < k ->\n  length (raw_insert x o e) <= k.\nProof.\n  intros. erewrite length_insert_general by reflexivity. mymax.\nQed.\n\n(* Pain, pain. *)\n\nLemma length_insert_reverse_1:\n  forall A (e : env A) k x a,\n  length (insert x a e) <= k ->\n  x < k.\nProof.\n  intros. erewrite length_insert_general in * by reflexivity. mymax.\nQed.\n\nLemma length_insert_reverse_2:\n  forall A (e : env A) k x a,\n  length (insert x a e) <= k + 1 ->\n  length e <= k.\nProof.\n  intros. erewrite length_insert_general in * by reflexivity. mymax.\nQed.\n\n",
                "context_tokens": 718,
                "proof_start_offset": 20543,
                "proof_end_offset": 20777,
                "proof": "Lemma length_insert_independent: forall A (e : env A) k x a, length (insert x a e) <= k -> forall y o, y < k -> length (raw_insert y o e) <= k.\nProof.\nintros.\nerewrite length_insert_general in * by reflexivity.\nmymax.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma length_insert_independent: forall A (e : env A) k x a, length (insert x a e) <= k -> forall y o, y < k -> length (raw_insert y o e) <= k.\nProof.\n  intros.\n  rewrite length_insert_length in * by reflexivity.\n  apply length_insert_right_rev_in.\nQed.",
                    "Lemma length_insert_independent: forall A (e : env A) k x a, length (insert x a e) <= k -> forall y o, y < k -> length (raw_insert y o e) <= k.\nProof.\n  intros. unfold length. rewrite length_insert.\n  rewrite length_insert_length.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.Qed.",
                    "Lemma length_insert_independent: forall A (e : env A) k x a, length (insert x a e) <= k -> forall y o, y < k -> length (raw_insert y o e) <= k.\nProof.\n  intros. rewrite length_insert_split.\n  rewrite length_insert_length.\n  rewrite length_insert.\n  rewrite length_insert_length.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insertQed.",
                    "Lemma length_insert_independent: forall A (e : env A) k x a, length (insert x a e) <= k -> forall y o, y < k -> length (raw_insert y o e) <= k.\nProof.\n  intros. apply length_insert_in.\n  rewrite length_insert_length; reflexivity.\nQed.",
                    "Lemma length_insert_independent: forall A (e : env A) k x a, length (insert x a e) <= k -> forall y o, y < k -> length (raw_insert y o e) <= k.\nProof.\n  intros. unfold length.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n  rewrite length_insert.\n Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " x e] is [None]. *)\n  assert (lookup x e = None). eapply lookup_beyond_length. omega.\n  (* We obtain a contradiction. *)\n  congruence.\nQed.\n\nHint Resolve defined_implies_below_length : lift_idx_hints.\n\n(* The empty environment has zero length. *)\n\nLemma length_empty:\n  forall A k,\n  length (@empty A) <= k.\nProof.\n  simpl. intros. omega.\nQed.\n\n(* This definition of [max] is much more pleasant to work with than the\n   one found in Coq's standard library. It can be easily unfolded, and\n   then [omega] takes control. *)\n\nDefinition mymax m n :=\n  if le_gt_dec m n then n else m.\n\nLtac mymax :=\n  unfold mymax in *; dblib_by_cases; try omega.\n\nLemma mymax_l:\n  forall i j, mymax i j >= i.\nProof. \n  intros. mymax.\nQed.\n\nLemma mymax_r:\n  forall i j, mymax i j >= j.\nProof. \n  intros. mymax.\nQed.\n\nHint Resolve mymax_l mymax_r : mymax.\n\n(* Extending an environment increments its length by one, in the usual case.\n   It can be extended by more than one if [x] is far away. *)\n\nLemma length_insert_general:\n  forall A x k o (e : env A),\n  length e = k ->\n  length (raw_insert x o e) = mymax (1 + k) (1 + x).\nProof.\n  induction x; simpl; intros; subst.\n  mymax.\n  destruct e; simpl.\n  mymax. erewrite IHx by reflexivity. simpl. mymax.\n  erewrite IHx by reflexivity. mymax.\nQed.\n\n(* This should be the usual case. *)\n\nLemma length_insert:\n  forall A x k km1 o (e : env A),\n  length e <= km1 ->\n  km1 <= k - 1 ->\n  x < k ->\n  length (raw_insert x o e) <= k.\nProof.\n  intros. erewrite length_insert_general by reflexivity. mymax.\nQed.\n\n(* Pain, pain. *)\n\nLemma length_insert_reverse_1:\n  forall A (e : env A) k x a,\n  length (insert x a e) <= k ->\n  x < k.\nProof.\n  intros. erewrite length_insert_general in * by reflexivity. mymax.\nQed.\n\nLemma length_insert_reverse_2:\n  forall A (e : env A) k x a,\n  length (insert x a e) <= k + 1 ->\n  length e <= k.\nProof.\n  intros. erewrite length_insert_general in * by reflexivity. mymax.\nQed.\n\nLemma length_insert_independent:\n  forall A (e : env A) k x a,\n  length (insert x a e) <= k ->\n  forall y o,\n  y < k ->\n  length (raw_insert y o e) <= k.\nProof.\n  intros. erewrite length_insert_general in * by reflexivity. mymax.\nQed.\n\n(* Applying a transformation to an environment does not affect its length. *)\n\n",
                "context_tokens": 734,
                "proof_start_offset": 20858,
                "proof_end_offset": 21019,
                "proof": "Lemma length_map_general: forall A B (f : A -> B) (e : env A), length (map f e) = length e.\nProof.\ninduction e as [| [|] ]; simpl; intros; congruence.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma length_map_general: forall A B (f : A -> B) (e : env A), length (map f e) = length e.\nProof.\n  intros. erewrite length_insert_general by reflexivity.\nQed.",
                    "Lemma length_map_general: forall A B (f : A -> B) (e : env A), length (map f e) = length e.\nProof.\n  intros. apply length_map_general; auto.\n  apply length_map_general; auto.\n  apply length_map_general; auto.\nQed.",
                    "Lemma length_map_general: forall A B (f : A -> B) (e : env A), length (map f e) = length e.\nProof.\n  intros. rewrite length_map_length in * mymax_max.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite length_rev.\n  rewrite lengthQed.",
                    "Lemma length_map_general: forall A B (f : A -> B) (e : env A), length (map f e) = length e.\nProof.\n  intros. rewrite length_map_length.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite lengthQed.",
                    "Lemma length_map_general: forall A B (f : A -> B) (e : env A), length (map f e) = length e.\nProof.\n  intros. rewrite length_insert_in.\n  erewrite length_insert_length by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert_length by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eauto.\n  erewrite length_insert by eautoQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "\n\n(* The empty environment has zero length. *)\n\nLemma length_empty:\n  forall A k,\n  length (@empty A) <= k.\nProof.\n  simpl. intros. omega.\nQed.\n\n(* This definition of [max] is much more pleasant to work with than the\n   one found in Coq's standard library. It can be easily unfolded, and\n   then [omega] takes control. *)\n\nDefinition mymax m n :=\n  if le_gt_dec m n then n else m.\n\nLtac mymax :=\n  unfold mymax in *; dblib_by_cases; try omega.\n\nLemma mymax_l:\n  forall i j, mymax i j >= i.\nProof. \n  intros. mymax.\nQed.\n\nLemma mymax_r:\n  forall i j, mymax i j >= j.\nProof. \n  intros. mymax.\nQed.\n\nHint Resolve mymax_l mymax_r : mymax.\n\n(* Extending an environment increments its length by one, in the usual case.\n   It can be extended by more than one if [x] is far away. *)\n\nLemma length_insert_general:\n  forall A x k o (e : env A),\n  length e = k ->\n  length (raw_insert x o e) = mymax (1 + k) (1 + x).\nProof.\n  induction x; simpl; intros; subst.\n  mymax.\n  destruct e; simpl.\n  mymax. erewrite IHx by reflexivity. simpl. mymax.\n  erewrite IHx by reflexivity. mymax.\nQed.\n\n(* This should be the usual case. *)\n\nLemma length_insert:\n  forall A x k km1 o (e : env A),\n  length e <= km1 ->\n  km1 <= k - 1 ->\n  x < k ->\n  length (raw_insert x o e) <= k.\nProof.\n  intros. erewrite length_insert_general by reflexivity. mymax.\nQed.\n\n(* Pain, pain. *)\n\nLemma length_insert_reverse_1:\n  forall A (e : env A) k x a,\n  length (insert x a e) <= k ->\n  x < k.\nProof.\n  intros. erewrite length_insert_general in * by reflexivity. mymax.\nQed.\n\nLemma length_insert_reverse_2:\n  forall A (e : env A) k x a,\n  length (insert x a e) <= k + 1 ->\n  length e <= k.\nProof.\n  intros. erewrite length_insert_general in * by reflexivity. mymax.\nQed.\n\nLemma length_insert_independent:\n  forall A (e : env A) k x a,\n  length (insert x a e) <= k ->\n  forall y o,\n  y < k ->\n  length (raw_insert y o e) <= k.\nProof.\n  intros. erewrite length_insert_general in * by reflexivity. mymax.\nQed.\n\n(* Applying a transformation to an environment does not affect its length. *)\n\nLemma length_map_general:\n  forall A B (f : A -> B) (e : env A),\n  length (map f e) = length e.\nProof.\n  induction e as [| [|] ]; simpl; intros; congruence.\nQed.\n\n",
                "context_tokens": 730,
                "proof_start_offset": 21021,
                "proof_end_offset": 21185,
                "proof": "Lemma length_map: forall A B (f : A -> B) (e : env A) k, length e <= k -> length (map f e) <= k.\nProof.\nintros.\nrewrite length_map_general.\nassumption.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma length_map: forall A B (f : A -> B) (e : env A) k, length e <= k -> length (map f e) <= k.\nProof.\n  intros.\n  erewrite length_insert_local by reflexivity.\n  rewrite length_insert by reflexivity.\nQed.",
                    "Lemma length_map: forall A B (f : A -> B) (e : env A) k, length e <= k -> length (map f e) <= k.\nProof.\n  intros. unfold length, length.\n  rewrite length_map_length.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite lengthQed.",
                    "Lemma length_map: forall A B (f : A -> B) (e : env A) k, length e <= k -> length (map f e) <= k.\nProof.\n  intros. rewrite length_map_length.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite length_map.\n  rewrite lengthQed.",
                    "Lemma length_map: forall A B (f : A -> B) (e : env A) k, length e <= k -> length (map f e) <= k.\nProof.\n  induction e as [| | | ]; simpl; intros; congruence.\nQed.",
                    "Lemma length_map: forall A B (f : A -> B) (e : env A) k, length e <= k -> length (map f e) <= k.\nProof.\n  intros. erewrite length_map_length; try reflexivity.\n  apply length_map_length.\n  apply length_map_length.\n  apply length_map_length.\n  apply length_map_length.\n  apply length_map_length.\n  apply length_map_length.\n  apply length_map_length.\n  apply length_map_length.\n  apply length_map_length.\n  apply length_map_length.\n  apply length_map.\n  apply length_map_length.\n  apply length_map.\n  apply length_map_length.\n  apply length_map_length.\n  apply length_map.\n  apply length_map_length.\n  apply length_map.\n  apply length_map.\n  apply length_map.\n  apply length_map.\n  apply length_map_length.\n  apply length_map.\n  apply length_map.\n  apply length_map.\n  apply length_map.\n  apply length_map.\n  apply length_map.\n  apply length_map.\n  apply length_map.\n  apply length_map.\n  apply length_map.\n  apply length_map.\n  apply length_map.\n  apply length_map.Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "ma length_insert_general:\n  forall A x k o (e : env A),\n  length e = k ->\n  length (raw_insert x o e) = mymax (1 + k) (1 + x).\nProof.\n  induction x; simpl; intros; subst.\n  mymax.\n  destruct e; simpl.\n  mymax. erewrite IHx by reflexivity. simpl. mymax.\n  erewrite IHx by reflexivity. mymax.\nQed.\n\n(* This should be the usual case. *)\n\nLemma length_insert:\n  forall A x k km1 o (e : env A),\n  length e <= km1 ->\n  km1 <= k - 1 ->\n  x < k ->\n  length (raw_insert x o e) <= k.\nProof.\n  intros. erewrite length_insert_general by reflexivity. mymax.\nQed.\n\n(* Pain, pain. *)\n\nLemma length_insert_reverse_1:\n  forall A (e : env A) k x a,\n  length (insert x a e) <= k ->\n  x < k.\nProof.\n  intros. erewrite length_insert_general in * by reflexivity. mymax.\nQed.\n\nLemma length_insert_reverse_2:\n  forall A (e : env A) k x a,\n  length (insert x a e) <= k + 1 ->\n  length e <= k.\nProof.\n  intros. erewrite length_insert_general in * by reflexivity. mymax.\nQed.\n\nLemma length_insert_independent:\n  forall A (e : env A) k x a,\n  length (insert x a e) <= k ->\n  forall y o,\n  y < k ->\n  length (raw_insert y o e) <= k.\nProof.\n  intros. erewrite length_insert_general in * by reflexivity. mymax.\nQed.\n\n(* Applying a transformation to an environment does not affect its length. *)\n\nLemma length_map_general:\n  forall A B (f : A -> B) (e : env A),\n  length (map f e) = length e.\nProof.\n  induction e as [| [|] ]; simpl; intros; congruence.\nQed.\n\nLemma length_map:\n  forall A B (f : A -> B) (e : env A) k,\n  length e <= k ->\n  length (map f e) <= k.\nProof.\n  intros. rewrite length_map_general. assumption.\nQed.\n\nHint Resolve length_empty length_insert length_map : length.\n\nHint Resolve length_insert length_map : construction_closed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* The definitions and properties that follow should be independent of the\n   details of the definitions of [empty], [lookup], [insert], and [map]. *)\n\nOpaque empty lookup raw_insert map.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* A definition of when two environments agree up to length [k]. *)\n\nDefinition agree A (e1 e2 : env A) (k : nat) :=\n  forall x,\n  x < k ->\n  lookup x e1 = lookup x e2.\n\n(* A simple consequence of the definition. *)\n\n",
                "context_tokens": 690,
                "proof_start_offset": 21885,
                "proof_end_offset": 22104,
                "proof": "Lemma agree_below: forall A (e1 e2 : env A) x a k, lookup x e1 = Some a -> x < k -> agree e1 e2 k -> lookup x e2 = Some a.\nProof.\ndo 6 intro.\nintros hlookup ? ?.\nrewrite <- hlookup.\nsymmetry.\neauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma agree_below: forall A (e1 e2 : env A) x a k, lookup x e1 = Some a -> x < k -> agree e1 e2 k -> lookup x e2 = Some a.\nProof.\n  intros.\n  rewrite <- (add_full _ _ e1).\n  rewrite <- (add_full _ e1).\n  rewrite <- (add_full _ e1).\n  rewrite <- (add_full _ e1).\n  rewrite <- (add_full _ e1).\n  rewrite <- (add_full _ e1).\n  rewrite <- (add_full_full _ e1).\n  rewrite <- (add_full _ e1).\n  rewrite <- (add_full _ e1).\n  rewrite <- (add_full _ e1).\n  rewrite <- (add_full_full _ e1).\n  rewrite <- (add_full_full _ e1).\n  rewrite <- (add_full_full _ e1).\n  rewrite <- (add_full_full_full _ e1).\n  rewrite <- (add_full_full_full _ e1).\n  rewrite <- (add_full_full_full _ e1).\n  rewrite <- (add_full_full_full _ e1).\n  rewrite <- (add_full_full_full_full _ e1).\n  rewrite <- (add_full_full_full_full_full _ e1).\n  rewriteQed.",
                    "Lemma agree_below: forall A (e1 e2 : env A) x a k, lookup x e1 = Some a -> x < k -> agree e1 e2 k -> lookup x e2 = Some a.\nProof.\n  intros.\n  erewrite map_map_ext by eauto.\n  eapply map_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_Qed.",
                    "Lemma agree_below: forall A (e1 e2 : env A) x a k, lookup x e1 = Some a -> x < k -> agree e1 e2 k -> lookup x e2 = Some a.\nProof.\n  intros.\n  rewrite <- (add_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_fullfull_full_full_full_full_full_full_full_full_full_full_fullfull_full_full_full_full_full_full_full_fullfullfullfull_full_full_full_full_full_fullfull_full_full_full_full_full_fullfull_full_full_fullfullfullfullfull_fullfullfull_full_fullfullfullfullfullfull_fullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullQed.",
                    "Lemma agree_below: forall A (e1 e2 : env A) x a k, lookup x e1 = Some a -> x < k -> agree e1 e2 k -> lookup x e2 = Some a.\nProof.\n  intros. rewrite <- (fst_map_ext _ _ _ _ _ H0).\n  rewrite <- (snd_map_ext _ _ _ _ _ H0).\n  rewrite <- (snd_map_ext _ _ _ _ H).\n  rewrite <- (snd_map_ext _ _ _ _ H0).\n  rewrite <- (snd_map_ext _ _ _ _ H).\n  rewrite <- (snd_map_ext _ _ _ H0).\n  rewrite <- (snd_map_ext _ _ _ _ H0).\n  rewrite <- (snd_map_ext _ _ _ _ H0).\n  rewrite <- (snd_map_ext _ _ _ H0).\n  rewrite <- (snd_map_ext _ _ _ _ _ H0).\n  rewrite <- (snd_map_ext _ _ _ _ _ _ H0).\n  rewrite <- (snd_map_ext _ _ _ _ H0).\n  rewrite <- (snd_map_ext _ _ _ _ H0).\n  rewrite <- (snd_ext _ _ _ _ H0).\n  rewrite <- (snd_map_ext _ _ _ _ _ H0).\n  rewrite <- (snd_map_ext _ _Qed.",
                    "Lemma agree_below: forall A (e1 e2 : env A) x a k, lookup x e1 = Some a -> x < k -> agree e1 e2 k -> lookup x e2 = Some a.\nProof.\n  intros. rewrite <- (add_two_p _ _ _ _ H).\n  rewrite <- (add_two_p _ _ _ _ H).\n  rewrite <- (add_two_p _ _ _ _ H).\n  rewrite <- (add_two_p _ _ _ H).\n  rewrite <- (add_two_p _ _ _ H).\n  rewrite <- (add_two_p _ _ _ H).\n  rewrite <- (add_two_p _ _ _ H).\n  rewrite <- (add_two_p _ _ _ H).\n  rewrite <- (add_two_p _ _ _ H).\n  rewrite <- (add_two_p _ _ _ H).\n  rewrite <- (add_two_p _ _ _ H).\n  rewrite <- (add_two_p _ _ _ _ H).\n  rewrite <- (add_two_p _ _ _ H).\n  rewrite <- (add_two_p _ _ _ H).\n  rewrite <- (add_two_p _ _ _ H).\n  rewrite <- (add_two_p _ _ _ _ H).\n  rewrite <- (add_two_p _ _ _ H).\n  rewrite <- (add_two_Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": ". mymax.\n  erewrite IHx by reflexivity. mymax.\nQed.\n\n(* This should be the usual case. *)\n\nLemma length_insert:\n  forall A x k km1 o (e : env A),\n  length e <= km1 ->\n  km1 <= k - 1 ->\n  x < k ->\n  length (raw_insert x o e) <= k.\nProof.\n  intros. erewrite length_insert_general by reflexivity. mymax.\nQed.\n\n(* Pain, pain. *)\n\nLemma length_insert_reverse_1:\n  forall A (e : env A) k x a,\n  length (insert x a e) <= k ->\n  x < k.\nProof.\n  intros. erewrite length_insert_general in * by reflexivity. mymax.\nQed.\n\nLemma length_insert_reverse_2:\n  forall A (e : env A) k x a,\n  length (insert x a e) <= k + 1 ->\n  length e <= k.\nProof.\n  intros. erewrite length_insert_general in * by reflexivity. mymax.\nQed.\n\nLemma length_insert_independent:\n  forall A (e : env A) k x a,\n  length (insert x a e) <= k ->\n  forall y o,\n  y < k ->\n  length (raw_insert y o e) <= k.\nProof.\n  intros. erewrite length_insert_general in * by reflexivity. mymax.\nQed.\n\n(* Applying a transformation to an environment does not affect its length. *)\n\nLemma length_map_general:\n  forall A B (f : A -> B) (e : env A),\n  length (map f e) = length e.\nProof.\n  induction e as [| [|] ]; simpl; intros; congruence.\nQed.\n\nLemma length_map:\n  forall A B (f : A -> B) (e : env A) k,\n  length e <= k ->\n  length (map f e) <= k.\nProof.\n  intros. rewrite length_map_general. assumption.\nQed.\n\nHint Resolve length_empty length_insert length_map : length.\n\nHint Resolve length_insert length_map : construction_closed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* The definitions and properties that follow should be independent of the\n   details of the definitions of [empty], [lookup], [insert], and [map]. *)\n\nOpaque empty lookup raw_insert map.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* A definition of when two environments agree up to length [k]. *)\n\nDefinition agree A (e1 e2 : env A) (k : nat) :=\n  forall x,\n  x < k ->\n  lookup x e1 = lookup x e2.\n\n(* A simple consequence of the definition. *)\n\nLemma agree_below:\n  forall A (e1 e2 : env A) x a k,\n  lookup x e1 = Some a ->\n  x < k ->\n  agree e1 e2 k ->\n  lookup x e2 = Some a.\nProof.\n  do 6 intro. intros hlookup??.\n  rewrite <- hlookup. symmetry.\n  eauto.\nQed.\n\n(* The empty environment agrees with every environment up to length [0]. *)\n\n",
                "context_tokens": 708,
                "proof_start_offset": 22183,
                "proof_end_offset": 22313,
                "proof": "Lemma agree_empty_left: forall A (e : env A), agree (@empty _) e 0.\nProof.\nunfold agree.\nintros.\nelimtype False.\nomega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma agree_empty_left: forall A (e : env A), agree (@empty _) e 0.\nProof.\n  do 6 intro.\n  rewrite <- map_map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_extQed.",
                    "Lemma agree_empty_left: forall A (e : env A), agree (@empty _) e 0.\nProof.\n  do 6 intro.\n  rewrite <- (add_comm _ H).\n  rewrite <- (add_comm _ H).\n  rewrite <- (add_comm _ H).\n  rewrite <- (add_comm _ H).\n  rewrite <- (add_comm _ H).\n  rewrite <- (add_comm _ H).\n  rewrite <- (add_comm _ H).\n  rewrite <- (add_comm _ H).\n  rewrite <- (add_comm _ H).\n  rewrite <- (add_comm _ H).\n  rewrite <- (add_comm _ H).\n  rewrite <- (add_comm _ H).\n  rewrite <- (add_comm _ H).\n  rewrite <- (add_comm _ H).\n  rewrite <- (add_comm _ H).\n  rewrite <- (add_comm _ H).\n  rewrite <- (add_comm _ H).\n  rewrite <- (add_comm _ H).\n  rewrite <- (add_comm _ H).\n  rewrite <- (add_comm _ H).\n  rewrite <- (add_comm _ H).\n  rewrite <- (add_comm _ H).\n  rewrite <- (add_comm _ H).\n  rewrite <- (add_comm _ H).\n  rewrite <- (add_comm _Qed.",
                    "Lemma agree_empty_left: forall A (e : env A), agree (@empty _) e 0.\nProof.\n  do 6 intro.\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (add_comm x).\n  rewrite <- (addQed.",
                    "Lemma agree_empty_left: forall A (e : env A), agree (@empty _) e 0.\nProof.\n  do 5 intro.\n  rewrite <- (add_comm x e e).\n  do 6 intro.\n  rewrite <- (add_comm x e).\n  do 5 intro.\n  rewrite <- (add_comm x e).\n  do 6 intro.\n  rewrite <- (add_comm x e).\n  do 6 intro.\n  rewrite <- (add_comm x e).\n  do 6 intro.\n  rewrite <- (add_comm x e).\n  do 6 intro.\n  rewrite <- (add_comm x e).\n  do 6 intro.\n  rewrite <- (add_comm x e).\n  do 6 intro.\n  rewrite <- (add_comm x e).\n  do 6 intro.\n  rewrite <- (add_comm x e).\n  do 6 intro.\n  rewrite <- (add_comm x e).\n  do 6 intro.\n  rewrite <- (add_comm x e).\n  do 6 intro.\n  rewrite <- (add_comm x e).\n  do 6 intro.\n  rewrite <- (add_comm x e).\n  do 6 intro.\n  rewrite <- (add_comm x e).\n  do 6 intro.\n  rewrite <- (add_comm x e).\n  do 6 intro.\n  rewrite <- (add_commQed.",
                    "Lemma agree_empty_left: forall A (e : env A), agree (@empty _) e 0.\nProof.\n  intros. rewrite <- map_map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewrite map_ext.\n  rewriteQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " (e : env A),\n  length e <= km1 ->\n  km1 <= k - 1 ->\n  x < k ->\n  length (raw_insert x o e) <= k.\nProof.\n  intros. erewrite length_insert_general by reflexivity. mymax.\nQed.\n\n(* Pain, pain. *)\n\nLemma length_insert_reverse_1:\n  forall A (e : env A) k x a,\n  length (insert x a e) <= k ->\n  x < k.\nProof.\n  intros. erewrite length_insert_general in * by reflexivity. mymax.\nQed.\n\nLemma length_insert_reverse_2:\n  forall A (e : env A) k x a,\n  length (insert x a e) <= k + 1 ->\n  length e <= k.\nProof.\n  intros. erewrite length_insert_general in * by reflexivity. mymax.\nQed.\n\nLemma length_insert_independent:\n  forall A (e : env A) k x a,\n  length (insert x a e) <= k ->\n  forall y o,\n  y < k ->\n  length (raw_insert y o e) <= k.\nProof.\n  intros. erewrite length_insert_general in * by reflexivity. mymax.\nQed.\n\n(* Applying a transformation to an environment does not affect its length. *)\n\nLemma length_map_general:\n  forall A B (f : A -> B) (e : env A),\n  length (map f e) = length e.\nProof.\n  induction e as [| [|] ]; simpl; intros; congruence.\nQed.\n\nLemma length_map:\n  forall A B (f : A -> B) (e : env A) k,\n  length e <= k ->\n  length (map f e) <= k.\nProof.\n  intros. rewrite length_map_general. assumption.\nQed.\n\nHint Resolve length_empty length_insert length_map : length.\n\nHint Resolve length_insert length_map : construction_closed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* The definitions and properties that follow should be independent of the\n   details of the definitions of [empty], [lookup], [insert], and [map]. *)\n\nOpaque empty lookup raw_insert map.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* A definition of when two environments agree up to length [k]. *)\n\nDefinition agree A (e1 e2 : env A) (k : nat) :=\n  forall x,\n  x < k ->\n  lookup x e1 = lookup x e2.\n\n(* A simple consequence of the definition. *)\n\nLemma agree_below:\n  forall A (e1 e2 : env A) x a k,\n  lookup x e1 = Some a ->\n  x < k ->\n  agree e1 e2 k ->\n  lookup x e2 = Some a.\nProof.\n  do 6 intro. intros hlookup??.\n  rewrite <- hlookup. symmetry.\n  eauto.\nQed.\n\n(* The empty environment agrees with every environment up to length [0]. *)\n\nLemma agree_empty_left:\n  forall A (e : env A),\n  agree (@empty _) e 0.\nProof.\n  unfold agree. intros. elimtype False. omega.\nQed.\n\n",
                "context_tokens": 709,
                "proof_start_offset": 22315,
                "proof_end_offset": 22446,
                "proof": "Lemma agree_empty_right: forall A (e : env A), agree e (@empty _) 0.\nProof.\nunfold agree.\nintros.\nelimtype False.\nomega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma agree_empty_right: forall A (e : env A), agree e (@empty _) 0.\nProof.\n  unfold agree. intros. destruct (t1,t2) as [e2 [e3 [e3 [e3 [e5 [e5 [e5 [e5 [e5 [e5 [e5 [e6 [e6 [e5 [e5 [e6 [e6 [e6 [e6 [e6 [e6 [e6 [e7 [e6 [e7 [e7 [e7 [e7 [e7 [e7 [e7 [e8 [e7 [e7 [e7 [e7 [e8 [e7 [e8 [e7 [e7 [e8 [e7 [e7 [e7 [e7 [e7 [e7 [e8 [e7 [e7 [e9 [e8 [e7 [e7 [e7 [e7 [e7 [e7 [e8 [e7 [e9 [e9 [e7 [e9 [e7 [e9 [e8 [e8 [e9 [e9 [e9 [e9 [e9 [e9 [e9 [e9 [e9 [e9 [Qed.",
                    "Lemma agree_empty_right: forall A (e : env A), agree e (@empty _) 0.\nProof.\n  unfold agree. intros. destruct e; simpl; intros.\n  rewrite <- H.\n  rewrite <- H.\n  apply agree_empty_right.\n  eauto.\nQed.",
                    "Lemma agree_empty_right: forall A (e : env A), agree e (@empty _) 0.\nProof.\n  unfold agree. intros. elimtype False. omega.\nQed.",
                    "Lemma agree_empty_right: forall A (e : env A), agree e (@empty _) 0.\nProof.\n  unfold agree. intros. elimtype False. omega.\nQed.",
                    "Lemma agree_empty_right: forall A (e : env A), agree e (@empty _) 0.\nProof.\n  unfold agree. intros. elimtype False. omega.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "te length_insert_general in * by reflexivity. mymax.\nQed.\n\nLemma length_insert_reverse_2:\n  forall A (e : env A) k x a,\n  length (insert x a e) <= k + 1 ->\n  length e <= k.\nProof.\n  intros. erewrite length_insert_general in * by reflexivity. mymax.\nQed.\n\nLemma length_insert_independent:\n  forall A (e : env A) k x a,\n  length (insert x a e) <= k ->\n  forall y o,\n  y < k ->\n  length (raw_insert y o e) <= k.\nProof.\n  intros. erewrite length_insert_general in * by reflexivity. mymax.\nQed.\n\n(* Applying a transformation to an environment does not affect its length. *)\n\nLemma length_map_general:\n  forall A B (f : A -> B) (e : env A),\n  length (map f e) = length e.\nProof.\n  induction e as [| [|] ]; simpl; intros; congruence.\nQed.\n\nLemma length_map:\n  forall A B (f : A -> B) (e : env A) k,\n  length e <= k ->\n  length (map f e) <= k.\nProof.\n  intros. rewrite length_map_general. assumption.\nQed.\n\nHint Resolve length_empty length_insert length_map : length.\n\nHint Resolve length_insert length_map : construction_closed.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* The definitions and properties that follow should be independent of the\n   details of the definitions of [empty], [lookup], [insert], and [map]. *)\n\nOpaque empty lookup raw_insert map.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* A definition of when two environments agree up to length [k]. *)\n\nDefinition agree A (e1 e2 : env A) (k : nat) :=\n  forall x,\n  x < k ->\n  lookup x e1 = lookup x e2.\n\n(* A simple consequence of the definition. *)\n\nLemma agree_below:\n  forall A (e1 e2 : env A) x a k,\n  lookup x e1 = Some a ->\n  x < k ->\n  agree e1 e2 k ->\n  lookup x e2 = Some a.\nProof.\n  do 6 intro. intros hlookup??.\n  rewrite <- hlookup. symmetry.\n  eauto.\nQed.\n\n(* The empty environment agrees with every environment up to length [0]. *)\n\nLemma agree_empty_left:\n  forall A (e : env A),\n  agree (@empty _) e 0.\nProof.\n  unfold agree. intros. elimtype False. omega.\nQed.\n\nLemma agree_empty_right:\n  forall A (e : env A),\n  agree e (@empty _) 0.\nProof.\n  unfold agree. intros. elimtype False. omega.\nQed.\n\n(* If two environments that agree up to [k] are extended with a new variable,\n   then they agree up to [k+1]. *)\n\n",
                "context_tokens": 668,
                "proof_start_offset": 22562,
                "proof_end_offset": 22977,
                "proof": "Lemma agree_insert: forall A (e1 e2 : env A) k, agree e1 e2 k -> forall x o, x <= k -> agree (raw_insert x o e1) (raw_insert x o e2) (1 + k).\nProof.\nunfold agree.\ndo 8 intro.\nintros n ?.\ncase (le_gt_dec x n); [ case (eq_nat_dec x n) | ]; intros; do 2 lookup_insert; eauto with omega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma agree_insert: forall A (e1 e2 : env A) k, agree e1 e2 k -> forall x o, x <= k -> agree (raw_insert x o e1) (raw_insert x o e2) (1 + k).\nProof.\n  unfold agree. intros. elimtype False. omega.\nQed.",
                    "Lemma agree_insert: forall A (e1 e2 : env A) k, agree e1 e2 k -> forall x o, x <= k -> agree (raw_insert x o e1) (raw_insert x o e2) (1 + k).\nProof.\n  intros.\n  apply agree_insert_right; auto.\nQed.",
                    "Lemma agree_insert: forall A (e1 e2 : env A) k, agree e1 e2 k -> forall x o, x <= k -> agree (raw_insert x o e1) (raw_insert x o e2) (1 + k).\nProof.\n  unfold agree. intros. elimtype False. omega.\nQed.",
                    "Lemma agree_insert: forall A (e1 e2 : env A) k, agree e1 e2 k -> forall x o, x <= k -> agree (raw_insert x o e1) (raw_insert x o e2) (1 + k).\nProof.\n  unfold agree. intros. elimtype False. omega.\nQed.",
                    "Lemma agree_insert: forall A (e1 e2 : env A) k, agree e1 e2 k -> forall x o, x <= k -> agree (raw_insert x o e1) (raw_insert x o e2) (1 + k).\nProof.\n  unfold agree. intros. elimtype False. omega. omega.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "---------------------------------------------------------------------- *)\n\n(* The definitions and properties that follow should be independent of the\n   details of the definitions of [empty], [lookup], [insert], and [map]. *)\n\nOpaque empty lookup raw_insert map.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* A definition of when two environments agree up to length [k]. *)\n\nDefinition agree A (e1 e2 : env A) (k : nat) :=\n  forall x,\n  x < k ->\n  lookup x e1 = lookup x e2.\n\n(* A simple consequence of the definition. *)\n\nLemma agree_below:\n  forall A (e1 e2 : env A) x a k,\n  lookup x e1 = Some a ->\n  x < k ->\n  agree e1 e2 k ->\n  lookup x e2 = Some a.\nProof.\n  do 6 intro. intros hlookup??.\n  rewrite <- hlookup. symmetry.\n  eauto.\nQed.\n\n(* The empty environment agrees with every environment up to length [0]. *)\n\nLemma agree_empty_left:\n  forall A (e : env A),\n  agree (@empty _) e 0.\nProof.\n  unfold agree. intros. elimtype False. omega.\nQed.\n\nLemma agree_empty_right:\n  forall A (e : env A),\n  agree e (@empty _) 0.\nProof.\n  unfold agree. intros. elimtype False. omega.\nQed.\n\n(* If two environments that agree up to [k] are extended with a new variable,\n   then they agree up to [k+1]. *)\n\nLemma agree_insert:\n  forall A (e1 e2 : env A) k,\n  agree e1 e2 k ->\n  forall x o,\n  x <= k ->\n  agree (raw_insert x o e1) (raw_insert x o e2) (1 + k).\nProof.\n  unfold agree. do 8 intro. intros n?.\n  (* Reason by cases: [x = n], [x < n], [x > n]. *)\n  case (le_gt_dec x n); [ case (eq_nat_dec x n) | ]; intros;\n  (* In each case, [lookup_insert] simplifies the goal. *)\n  do 2 lookup_insert; eauto with omega.\nQed.\n\nHint Resolve defined_implies_below_length agree_below agree_empty_left\nagree_empty_right agree_insert : agree.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* A definition of when an environment subsumes another, up to a notion of\n   subsumption on environment entries. *)\n\nSection Subsume.\n\n  Variable A : Type.\n\n  Variable sub : A -> A -> Prop.\n\n  Variable sub_reflexive:\n    forall a,\n    sub a a.\n\n  Variable sub_transitive:\n    forall a1 a2 a3,\n    sub a1 a2 ->\n    sub a2 a3 ->\n    sub a1 a3.\n\n  (* Subsumption is first extended to options. *)\n\n  Definition osub (o1 o2 : option A) :=\n    forall a2,\n    o2 = Some a2 ->\n    exists a1,\n    o1 = Some a1 /\\ sub a1 a2.\n\n  ",
                "context_tokens": 692,
                "proof_start_offset": 23694,
                "proof_end_offset": 23786,
                "proof": "Lemma osub_None: forall o, osub o None.\nProof.\nunfold osub.\ncongruence.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma osub_None: forall o, osub o None.\n  Proof.\n    unfold os. intros. destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.Qed.",
                    "Lemma osub_None: forall o, osub o None.\n  Proof.\n    intros. apply (proj1_sig o1 o2).\n    apply (proj2_sig o1 o1).\n    apply (proj2_sig o1 o2).\n    apply (proj2_sig o1 o1).\n    apply (proj2_sig o1 o2).\n    apply (proj2_sig o1 o1).\n    apply (proj2_sig o1 o1).\n    apply (proj2_sig o1 o1).\n    apply (proj2_sig o1 o1).\n    apply (proj2_sig o1 o1).\n    apply (proj2_sig o1 o1).\n    apply (proj2_sig o1 o1).\n    apply (proj2_sig o1 o1).\n    apply (proj2_sig o1 o1).\n    apply (proj2_sig o1 o1).\n    apply (proj2_sig o1 o1).\n    apply (proj2_sig o1 o1).\n    apply (proj2_sig o1 o1).\n    apply (proj2_sig o1 o1).\n    apply (proj2_sig o1 o1).\n    apply (proj2_sig o1 o1Qed.",
                    "Lemma osub_None: forall o, osub o None.\n  Proof.\n    unfold os.\n    intros. destruct o as [p1 o2] eqn:E.\n    destruct o as [p2 o2] eqn:E.\n    destruct o as [p2 o2] eqn:E.\n    destruct o1 as [p2 o2] eqn:E.\n    destruct o1 as [p2 o2] eqn:E.\n    destruct o2 as [p2 o3] eqn:E.\n    destruct o1 as [p2 o3] eqn:E.\n    destruct o1 as [p1 o3] eqn:E.\n    destruct o2 as [p3 o3] eqn:E.\n    destruct o2 as [p3 o3] eqn:E.\n    destruct o3 as [p3 o4] eqn:E.\n    destruct o3 as [p3 o4] eqn:E.\n    destruct o3 as [p3 o4] eqn:E.\n    destruct o3 as [p3 o4] eqn:E.\n    destruct o3 as [p3 o4] eqn:E.\n    destruct o3 as [p3 o4] eqn:E.\n    destruct o3 as [p3 o4Qed.",
                    "Lemma osub_None: forall o, osub o None.\n  Proof.\n    unfold os.\n    intros.\n    destruct o1 as [p1 p2]; [ case (eq_dec p1); [ case (eq_dec p1); [ case (eq_dec p1); [ case (eq_dec p1); [ case (eq_dec p1); [ case (eq_dec p2); [ case (eq_dec p1); [ case (eq_dec p2); [ case (eq_dec p2); [ case (eq_dec p2); [ case (eq_dec p2); [ case (eq_dec p2); [ case (eq_dec p2); [ case (eq_dec p2); [ case (eq_dec p2); [ case (eq_dec p2); [ case (eq_dec p2); [ case (eq_dec p1); case (eq_dec p2); [ case (eq_dec p1); [ case (eq_dec p2); [ case (eq_dec p2); case (eq_dec p2); [ case (eq_dec p2); case (eq_dec p2); [ case (eq_dec p2); [ case (eqQed.",
                    "Lemma osub_None: forall o, osub o None.\n  Proof.\n    unfold os. intros.\n    apply (well_founded_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " independent of the\n   details of the definitions of [empty], [lookup], [insert], and [map]. *)\n\nOpaque empty lookup raw_insert map.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* A definition of when two environments agree up to length [k]. *)\n\nDefinition agree A (e1 e2 : env A) (k : nat) :=\n  forall x,\n  x < k ->\n  lookup x e1 = lookup x e2.\n\n(* A simple consequence of the definition. *)\n\nLemma agree_below:\n  forall A (e1 e2 : env A) x a k,\n  lookup x e1 = Some a ->\n  x < k ->\n  agree e1 e2 k ->\n  lookup x e2 = Some a.\nProof.\n  do 6 intro. intros hlookup??.\n  rewrite <- hlookup. symmetry.\n  eauto.\nQed.\n\n(* The empty environment agrees with every environment up to length [0]. *)\n\nLemma agree_empty_left:\n  forall A (e : env A),\n  agree (@empty _) e 0.\nProof.\n  unfold agree. intros. elimtype False. omega.\nQed.\n\nLemma agree_empty_right:\n  forall A (e : env A),\n  agree e (@empty _) 0.\nProof.\n  unfold agree. intros. elimtype False. omega.\nQed.\n\n(* If two environments that agree up to [k] are extended with a new variable,\n   then they agree up to [k+1]. *)\n\nLemma agree_insert:\n  forall A (e1 e2 : env A) k,\n  agree e1 e2 k ->\n  forall x o,\n  x <= k ->\n  agree (raw_insert x o e1) (raw_insert x o e2) (1 + k).\nProof.\n  unfold agree. do 8 intro. intros n?.\n  (* Reason by cases: [x = n], [x < n], [x > n]. *)\n  case (le_gt_dec x n); [ case (eq_nat_dec x n) | ]; intros;\n  (* In each case, [lookup_insert] simplifies the goal. *)\n  do 2 lookup_insert; eauto with omega.\nQed.\n\nHint Resolve defined_implies_below_length agree_below agree_empty_left\nagree_empty_right agree_insert : agree.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* A definition of when an environment subsumes another, up to a notion of\n   subsumption on environment entries. *)\n\nSection Subsume.\n\n  Variable A : Type.\n\n  Variable sub : A -> A -> Prop.\n\n  Variable sub_reflexive:\n    forall a,\n    sub a a.\n\n  Variable sub_transitive:\n    forall a1 a2 a3,\n    sub a1 a2 ->\n    sub a2 a3 ->\n    sub a1 a3.\n\n  (* Subsumption is first extended to options. *)\n\n  Definition osub (o1 o2 : option A) :=\n    forall a2,\n    o2 = Some a2 ->\n    exists a1,\n    o1 = Some a1 /\\ sub a1 a2.\n\n  Lemma osub_None:\n    forall o,\n    osub o None.\n  Proof.\n    unfold osub. congruence.\n  Qed.\n\n  ",
                "context_tokens": 707,
                "proof_start_offset": 23790,
                "proof_end_offset": 23970,
                "proof": "Lemma osub_Some_Some: forall a1 a2, sub a1 a2 -> osub (Some a1) (Some a2).\nProof.\nunfold osub.\nintros ? ? ? ? h.\ninjection h; clear h; intro; subst; eauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma osub_Some_Some: forall a1 a2, sub a1 a2 -> osub (Some a1) (Some a2).\n  Proof.\n    unfold os.\n    intros. destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct oQed.",
                    "Lemma osub_Some_Some: forall a1 a2, sub a1 a2 -> osub (Some a1) (Some a2).\n  Proof.\n    unfold os.\n    intros.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destructQed.",
                    "Lemma osub_Some_Some: forall a1 a2, sub a1 a2 -> osub (Some a1) (Some a2).\n  Proof.\n    unfold os.\n    unfold os.\n    rewrite (proj1_sig_eq a1 a2).\n    destruct (eq_dec x1 a2).\n    destruct (eq_dec x1 a2).\n    destruct (eq_dec x1 a2).\n    destruct (eq_dec x1 a2).\n    destruct (eq_dec x1 a2).\n    destruct (eq_dec x1 a2).\n    destruct (eq_dec x1 a2).\n    destruct (eq_dec x2 a3).\n    destruct (eq_dec x1 a2).\n    destruct (eq_dec x1 a3).\n    destruct (eq_dec x2 a3).\n    destruct (eq_dec x1 a3).\n    destruct (eq_dec x2 a3).\n    destruct (eq_dec x1 a3).\n    destruct (eq_dec x1 a3).\n    destruct (eq_dec x1 a3).\n    destruct (eq_dec x3 a3).\n    destruct (eq_dec x3 a3).\n    destruct (eq_dec x3 a4).\n    destruct (eq_dec x3 a3).\n    destruct (eq_dec x3 a3).Qed.",
                    "Lemma osub_Some_Some: forall a1 a2, sub a1 a2 -> osub (Some a1) (Some a2).\n  Proof.\n    unfold os.\n    intros. inversion H.\n    apply (proj1_sig _ _ _ H0).\n    apply (proj2_sig _ _ _ H0).\n    apply (proj2_sig _ _ _ H0).\n    apply (proj2_sig _ _ _ H0).\n    apply (proj2_sig _ _ H0).\n    apply (proj2_sig _ _ _ H0).\n    apply (proj2_sig _ _ _ H0).\n    apply (proj2_sig _ _ _ H0).\n    apply (proj2_sig _ _ _ H0).\n    apply (proj2_sig _ _ _ H0).\n    apply (proj2_sig _ _ H0).\n    apply (proj2_sig _ _ _ H0).\n    apply (proj2_sig _ _ H0).\n    apply (proj2_sig _ _ H0).\n    apply (proj2_sig _ _ H0).\n    apply (proj2_sig _ _ _ H0).\n    apply (proj2_sig _ _ _ _ H0).\n    apply (proj2_sig _ _ _ H0).\n    apply (proj2_sig _ _ H0).\n   Qed.",
                    "Lemma osub_Some_Some: forall a1 a2, sub a1 a2 -> osub (Some a1) (Some a2).\n  Proof.\n    unfold os.\n    intros. destruct (eq_dec x1 a2).\n    apply os_ok_Some with a2.\n    apply os_ok_Some with a2.\n    apply os_ok_Some with a2.\n    apply os_ok_Some with a2.\n    apply os_ok_Some with a2.\n    apply os_ok_Some with a3.\n    apply os_ok_Some with a3.\n    apply os_ok_Some with a3.\n    apply os_ok_Some with a3.\n    apply os_ok_Some with a3.\n    apply os_ok_Some with a3.\n    apply os_ok_Some with a3.\n    apply os_ok_Some with a3.\n    apply os_ok_Some with a3.\n    apply os_ok_Some with a3.\n    apply os_ok_Some with a3.\n    apply os_ok_Some with a3.\n    apply os_ok_ok with a3.\n    apply os_ok_ok with a3.\n    apply os_ok_ok with a3.\n    apply os_ok_ok with a3.\n    apply os_okQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "----------------------------------------- *)\n\n(* A definition of when two environments agree up to length [k]. *)\n\nDefinition agree A (e1 e2 : env A) (k : nat) :=\n  forall x,\n  x < k ->\n  lookup x e1 = lookup x e2.\n\n(* A simple consequence of the definition. *)\n\nLemma agree_below:\n  forall A (e1 e2 : env A) x a k,\n  lookup x e1 = Some a ->\n  x < k ->\n  agree e1 e2 k ->\n  lookup x e2 = Some a.\nProof.\n  do 6 intro. intros hlookup??.\n  rewrite <- hlookup. symmetry.\n  eauto.\nQed.\n\n(* The empty environment agrees with every environment up to length [0]. *)\n\nLemma agree_empty_left:\n  forall A (e : env A),\n  agree (@empty _) e 0.\nProof.\n  unfold agree. intros. elimtype False. omega.\nQed.\n\nLemma agree_empty_right:\n  forall A (e : env A),\n  agree e (@empty _) 0.\nProof.\n  unfold agree. intros. elimtype False. omega.\nQed.\n\n(* If two environments that agree up to [k] are extended with a new variable,\n   then they agree up to [k+1]. *)\n\nLemma agree_insert:\n  forall A (e1 e2 : env A) k,\n  agree e1 e2 k ->\n  forall x o,\n  x <= k ->\n  agree (raw_insert x o e1) (raw_insert x o e2) (1 + k).\nProof.\n  unfold agree. do 8 intro. intros n?.\n  (* Reason by cases: [x = n], [x < n], [x > n]. *)\n  case (le_gt_dec x n); [ case (eq_nat_dec x n) | ]; intros;\n  (* In each case, [lookup_insert] simplifies the goal. *)\n  do 2 lookup_insert; eauto with omega.\nQed.\n\nHint Resolve defined_implies_below_length agree_below agree_empty_left\nagree_empty_right agree_insert : agree.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* A definition of when an environment subsumes another, up to a notion of\n   subsumption on environment entries. *)\n\nSection Subsume.\n\n  Variable A : Type.\n\n  Variable sub : A -> A -> Prop.\n\n  Variable sub_reflexive:\n    forall a,\n    sub a a.\n\n  Variable sub_transitive:\n    forall a1 a2 a3,\n    sub a1 a2 ->\n    sub a2 a3 ->\n    sub a1 a3.\n\n  (* Subsumption is first extended to options. *)\n\n  Definition osub (o1 o2 : option A) :=\n    forall a2,\n    o2 = Some a2 ->\n    exists a1,\n    o1 = Some a1 /\\ sub a1 a2.\n\n  Lemma osub_None:\n    forall o,\n    osub o None.\n  Proof.\n    unfold osub. congruence.\n  Qed.\n\n  Lemma osub_Some_Some:\n    forall a1 a2,\n    sub a1 a2 ->\n    osub (Some a1) (Some a2).\n  Proof.\n    unfold osub. intros???? h. injection h; clear h; intro; subst; eauto.\n  Qed.\n\n  ",
                "context_tokens": 738,
                "proof_start_offset": 23974,
                "proof_end_offset": 24170,
                "proof": "Lemma osub_None_Some: forall a2, osub None (Some a2) -> False.\nProof.\nunfold osub.\nintros ? h.\ngeneralize (h _ eq_refl).\nclear h.\nintros [ a1 [ ? ? ]].\ncongruence.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma osub_None_Some: forall a2, osub None (Some a2) -> False.\n  Proof.\n    unfold os. intros.\n    destruct (eq_dec a1 a2); [ case (eq_dec a2); [ case (eq_dec a2); [ case (eq_dec a2); [ case (eq_dec a2); [ case (eq_dec a2); [ case (eq_dec a2); [ case (eq_dec a2); [ case (eq_dec a2); [ case (eq_dec a3); [ case (eq_dec a3); [ case (eq_dec a3); [ case (eq_dec a3); [ case (eq_dec a3); [ case (eq_dec a3); [ case (eq_dec a3); [ case (eq_dec a3); [ case (eq_dec a3); [ case (eq_dec a3); [ case (eq_dec a3); [ case (eq_dec a3 a3); [ case (eq_dec a3); [ case (eq_dec a3); [ case (eq_dec a3); [ case (eq_dec a3); [ case (eq_dec a4); [ case (eq_dec a3);Qed.",
                    "Lemma osub_None_Some: forall a2, osub None (Some a2) -> False.\n  Proof.\n    unfold os.\n    intros.\n    destruct (eq_dec x1 a2).\n    - destruct (eq_dec x1 a2).\n      - destruct (eq_dec x1 a2).\n      - destruct (eq_dec x1 a2).\n        - destruct (eq_dec x1 a2).\n        - destruct (eq_dec x1 a2).\n        - destruct (eq_dec x1 a2).\n        - destruct (eq_dec x1 a2).\n        - destruct (eq_dec x1 a2).\n        - destruct (eq_dec x1 a2).\n        - destruct (eq_dec x1 a2).\n          - destruct (eq_dec x1 a2).\n          - destruct (eq_dec x2 a2).\n          - destruct (eq_dec x1 a2).\n          - destruct (eq_dec x1 a2).\n          - destruct (eq_dec x1 a2).\n          - destruct (eq_dec x1 a2).\n          - destruct (eq_dec x1 a2).\n          - destruct (eq_dec x1 a2).\n          - destruct (eq_dec x1 a2).\n          - destruct (eq_decQed.",
                    "Lemma osub_None_Some: forall a2, osub None (Some a2) -> False.\n  Proof.\n    unfold os.\n    intros.\n    unfold os.\n    apply os_inc_Some.\n    apply os_ok_Some.\n    apply os_ok_Some.\n    apply os_ok_Some.\n    apply os_ok_Some.\n    apply os_ok_Some.\n    apply os_ok_Some.\n    apply os_ok_Some.\n    apply os_ok_Some.\n    apply os_ok_Some.\n    apply os_ok_Some.\n    apply os_ok_Some.\n    apply os_ok_Some.\n    apply os_ok_ok_ok.\n    apply os_ok_ok.\n    apply os_ok_ok_ok.\n    apply os_ok_ok_ok.\n    apply os_ok_ok_ok.\n    apply os_ok_ok_ok.\n    apply os_ok_ok_ok_ok.\n    apply os_ok_ok_ok.\n    apply os_ok_ok_ok_ok.\n    apply os_ok_ok_ok.\n    apply os_ok_ok_ok_ok.\n    apply os_ok_ok_ok_ok.\n    apply os_ok_ok_ok.\n    applyQed.",
                    "Lemma osub_None_Some: forall a2, osub None (Some a2) -> False.\n  Proof.\n    unfold os.\n    intros. unfold os.\n    destruct (eq_dec x1 x2) as [x2 y1] [y2] [y2 [y3 [y3 [y4 [y5 [y5 [y6 [y7 [y7 [y7 [y7 [y7 [y7 [y7 [y7 [y7 [y8 [y7 [y8 [y9 [y9 [y9 [y9 [y9 [y9 [x9 [x9 [y9 [x9 [y9 [y9 [y9 [x9 [x9 [x9 [x9 [x9x9 [x10 [x9 [x9 [x9 [x9 [x9 [x9 [x9 [x10 [x9x9 [x9 [x10 [x9 [x10 [x10 [x10 [x10 [x10 [x10 [x10 [x10 [x10 [x10 [x10 [x10 [x10 [x11 [x10 [x11 [x11 [x10 [x10 [x10 [x11 [x11 [Qed.",
                    "Lemma osub_None_Some: forall a2, osub None (Some a2) -> False.\n  Proof.\n    unfold os.\n    intros. destruct (eq_dec a1 a2).\n    destruct (eq_dec a2).\n    destruct (eq_dec a2).\n    destruct (eq_dec a2).\n    destruct (eq_dec a2).\n    destruct (eq_dec a2).\n    destruct (eq_dec a2).\n    destruct (eq_dec a2).\n    destruct (eq_dec a2).\n    destruct (eq_dec a2).\n    destruct (eq_dec a3).\n    destruct (eq_dec a3).\n    destruct (eq_dec a3).\n    destruct (eq_dec a3).\n    destruct (eq_dec a3).\n    destruct (eq_dec a3).\n    destruct (eq_dec a3).\n    destruct (eq_dec a3).\n    destruct (eq_dec a3).\n    destruct (eq_dec a3).\n    destruct (eq_dec a4).\n    destruct (eq_dec a3).\n    destruct (eq_dec a3).\n    destruct (eq_dec a3).\n    destruct (eq_dec a3).\n    destruct (eq_dec a3).\n    destruct (eq_dec a3).\n    destructQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "below:\n  forall A (e1 e2 : env A) x a k,\n  lookup x e1 = Some a ->\n  x < k ->\n  agree e1 e2 k ->\n  lookup x e2 = Some a.\nProof.\n  do 6 intro. intros hlookup??.\n  rewrite <- hlookup. symmetry.\n  eauto.\nQed.\n\n(* The empty environment agrees with every environment up to length [0]. *)\n\nLemma agree_empty_left:\n  forall A (e : env A),\n  agree (@empty _) e 0.\nProof.\n  unfold agree. intros. elimtype False. omega.\nQed.\n\nLemma agree_empty_right:\n  forall A (e : env A),\n  agree e (@empty _) 0.\nProof.\n  unfold agree. intros. elimtype False. omega.\nQed.\n\n(* If two environments that agree up to [k] are extended with a new variable,\n   then they agree up to [k+1]. *)\n\nLemma agree_insert:\n  forall A (e1 e2 : env A) k,\n  agree e1 e2 k ->\n  forall x o,\n  x <= k ->\n  agree (raw_insert x o e1) (raw_insert x o e2) (1 + k).\nProof.\n  unfold agree. do 8 intro. intros n?.\n  (* Reason by cases: [x = n], [x < n], [x > n]. *)\n  case (le_gt_dec x n); [ case (eq_nat_dec x n) | ]; intros;\n  (* In each case, [lookup_insert] simplifies the goal. *)\n  do 2 lookup_insert; eauto with omega.\nQed.\n\nHint Resolve defined_implies_below_length agree_below agree_empty_left\nagree_empty_right agree_insert : agree.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* A definition of when an environment subsumes another, up to a notion of\n   subsumption on environment entries. *)\n\nSection Subsume.\n\n  Variable A : Type.\n\n  Variable sub : A -> A -> Prop.\n\n  Variable sub_reflexive:\n    forall a,\n    sub a a.\n\n  Variable sub_transitive:\n    forall a1 a2 a3,\n    sub a1 a2 ->\n    sub a2 a3 ->\n    sub a1 a3.\n\n  (* Subsumption is first extended to options. *)\n\n  Definition osub (o1 o2 : option A) :=\n    forall a2,\n    o2 = Some a2 ->\n    exists a1,\n    o1 = Some a1 /\\ sub a1 a2.\n\n  Lemma osub_None:\n    forall o,\n    osub o None.\n  Proof.\n    unfold osub. congruence.\n  Qed.\n\n  Lemma osub_Some_Some:\n    forall a1 a2,\n    sub a1 a2 ->\n    osub (Some a1) (Some a2).\n  Proof.\n    unfold osub. intros???? h. injection h; clear h; intro; subst; eauto.\n  Qed.\n\n  Lemma osub_None_Some:\n    forall a2,\n    osub None (Some a2) ->\n    False.\n  Proof.\n    unfold osub. intros? h.\n    generalize (h _ eq_refl). clear h. intros [ a1 [?? ]].\n    congruence.\n  Qed.\n\n  ",
                "context_tokens": 726,
                "proof_start_offset": 24174,
                "proof_end_offset": 24381,
                "proof": "Lemma osub_Some_inversion: forall o1 a2, osub o1 (Some a2) -> exists a1, o1 = Some a1 /\\ sub a1 a2.\nProof.\nintros.\ndestruct o1.\neauto.\nelimtype False.\neauto using osub_None_Some.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma osub_Some_inversion: forall o1 a2, osub o1 (Some a2) -> exists a1, o1 = Some a1 /\\ sub a1 a2.\n  Proof.\n    unfold os.\n    intros. inversion H; subst; eauto.\n  Qed.",
                    "Lemma osub_Some_inversion: forall o1 a2, osub o1 (Some a2) -> exists a1, o1 = Some a1 /\\ sub a1 a2.\n  Proof.\n    unfold os. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl).Qed.",
                    "Lemma osub_Some_inversion: forall o1 a2, osub o1 (Some a2) -> exists a1, o1 = Some a1 /\\ sub a1 a2.\n  Proof.\n    unfold os. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.Qed.",
                    "Lemma osub_Some_inversion: forall o1 a2, osub o1 (Some a2) -> exists a1, o1 = Some a1 /\\ sub a1 a2.\n  Proof.\n    unfold os.\n    intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h. intros.\n    generalize (h eq_refl). clear h.Qed.",
                    "Lemma osub_Some_inversion: forall o1 a2, osub o1 (Some a2) -> exists a1, o1 = Some a1 /\\ sub a1 a2.\n  Proof.\n    unfold os.\n    intros.\n    generalize (h _ eq_refl). clear h; intro.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_refl). clear h. intros.\n    generalize (h _ eq_reflQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "\n  agree (@empty _) e 0.\nProof.\n  unfold agree. intros. elimtype False. omega.\nQed.\n\nLemma agree_empty_right:\n  forall A (e : env A),\n  agree e (@empty _) 0.\nProof.\n  unfold agree. intros. elimtype False. omega.\nQed.\n\n(* If two environments that agree up to [k] are extended with a new variable,\n   then they agree up to [k+1]. *)\n\nLemma agree_insert:\n  forall A (e1 e2 : env A) k,\n  agree e1 e2 k ->\n  forall x o,\n  x <= k ->\n  agree (raw_insert x o e1) (raw_insert x o e2) (1 + k).\nProof.\n  unfold agree. do 8 intro. intros n?.\n  (* Reason by cases: [x = n], [x < n], [x > n]. *)\n  case (le_gt_dec x n); [ case (eq_nat_dec x n) | ]; intros;\n  (* In each case, [lookup_insert] simplifies the goal. *)\n  do 2 lookup_insert; eauto with omega.\nQed.\n\nHint Resolve defined_implies_below_length agree_below agree_empty_left\nagree_empty_right agree_insert : agree.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* A definition of when an environment subsumes another, up to a notion of\n   subsumption on environment entries. *)\n\nSection Subsume.\n\n  Variable A : Type.\n\n  Variable sub : A -> A -> Prop.\n\n  Variable sub_reflexive:\n    forall a,\n    sub a a.\n\n  Variable sub_transitive:\n    forall a1 a2 a3,\n    sub a1 a2 ->\n    sub a2 a3 ->\n    sub a1 a3.\n\n  (* Subsumption is first extended to options. *)\n\n  Definition osub (o1 o2 : option A) :=\n    forall a2,\n    o2 = Some a2 ->\n    exists a1,\n    o1 = Some a1 /\\ sub a1 a2.\n\n  Lemma osub_None:\n    forall o,\n    osub o None.\n  Proof.\n    unfold osub. congruence.\n  Qed.\n\n  Lemma osub_Some_Some:\n    forall a1 a2,\n    sub a1 a2 ->\n    osub (Some a1) (Some a2).\n  Proof.\n    unfold osub. intros???? h. injection h; clear h; intro; subst; eauto.\n  Qed.\n\n  Lemma osub_None_Some:\n    forall a2,\n    osub None (Some a2) ->\n    False.\n  Proof.\n    unfold osub. intros? h.\n    generalize (h _ eq_refl). clear h. intros [ a1 [?? ]].\n    congruence.\n  Qed.\n\n  Lemma osub_Some_inversion:\n    forall o1 a2,\n    osub o1 (Some a2) ->\n    exists a1,\n    o1 = Some a1 /\\ sub a1 a2.\n  Proof.\n    intros. destruct o1. eauto. elimtype False. eauto using osub_None_Some.\n  Qed.\n\n  (* Then, it is extended pointwise to environments. *)\n\n  Definition subsume (e1 e2 : env A) :=\n    forall x,\n    osub (lookup x e1) (lookup x e2).\n\n  (* Subsumption of environments is reflexive and transitive. *)\n\n  ",
                "context_tokens": 744,
                "proof_start_offset": 24601,
                "proof_end_offset": 24690,
                "proof": "Lemma osub_reflexive: forall o, osub o o.\nProof.\nunfold osub.\neauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma osub_reflexive: forall o, osub o o.\n  Proof.\n    unfold os.\n    intros.\n    destruct o1.\n    destruct o1.\n    destruct o2.\n    destruct o1.\n    destruct o1.\n    destruct o2.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o2.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o2.\n    destruct o1.\n    destruct o1.\n    destruct o2.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o2.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o2.\n    destruct o1.\n   Qed.",
                    "Lemma osub_reflexive: forall o, osub o o.\n  Proof.\n    unfold os.\n    intros. destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct oQed.",
                    "Lemma osub_reflexive: forall o, osub o o.\n  Proof.\n    unfold os. intros.\n    generalize (h1 o). clear h1. intros.\n    generalize (h2 o). clear h1. intros.\n    generalize (h1 o). clear h2. intros.\n    generalize (h1 o1). clear h2. intros.\n    generalize (h1 o2). clear h1. intros.\n    generalize (h1 o1). clear h1. intros.\n    generalize (h1 o1). clear h1. intros.\n    generalize (h2 o1). clear h1. intros.\n    generalize (h1 o1). clear h2. intros.\n    generalize (h1 o1). clear h2. intros.\n    generalize (h1 o1). clear h2. intros.\n    generalize (h1 o2). clear h2. intros.\n    generalize (h2 o1). clear h2. intros.\n    generalize (h1 o2). clear h2. intros.\n    generalize (h2 o1). clear h1. intros.\n    generalize (h2 o2). clear h1. intros.\n    generalize (h1 o2). clear h1. intros.\n    generalize (h2 o1). clear h2.Qed.",
                    "Lemma osub_reflexive: forall o, osub o o.\n  Proof.\n    unfold os.\n    unfold os_order.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct o.\n    destruct oQed.",
                    "Lemma osub_reflexive: forall o, osub o o.\n  Proof.\n    unfold os_ub.\n    unfold os_ub.\n    unfold os_ub.\n    unfold os_ub.\n    apply os_ok_Some.\n    apply os_ok_Some_Some.\n    apply os_ok_Some.\n    apply os_ok_Some_Some_refl.\n    apply os_ok_Some_refl.\n    apply os_ok_Some_refl.\n    apply os_ok_Some_refl.\n    apply os_ok_Some_refl.\n    apply os_ok_Some_refl.\n    apply os_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_ok_okQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "_empty_right:\n  forall A (e : env A),\n  agree e (@empty _) 0.\nProof.\n  unfold agree. intros. elimtype False. omega.\nQed.\n\n(* If two environments that agree up to [k] are extended with a new variable,\n   then they agree up to [k+1]. *)\n\nLemma agree_insert:\n  forall A (e1 e2 : env A) k,\n  agree e1 e2 k ->\n  forall x o,\n  x <= k ->\n  agree (raw_insert x o e1) (raw_insert x o e2) (1 + k).\nProof.\n  unfold agree. do 8 intro. intros n?.\n  (* Reason by cases: [x = n], [x < n], [x > n]. *)\n  case (le_gt_dec x n); [ case (eq_nat_dec x n) | ]; intros;\n  (* In each case, [lookup_insert] simplifies the goal. *)\n  do 2 lookup_insert; eauto with omega.\nQed.\n\nHint Resolve defined_implies_below_length agree_below agree_empty_left\nagree_empty_right agree_insert : agree.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* A definition of when an environment subsumes another, up to a notion of\n   subsumption on environment entries. *)\n\nSection Subsume.\n\n  Variable A : Type.\n\n  Variable sub : A -> A -> Prop.\n\n  Variable sub_reflexive:\n    forall a,\n    sub a a.\n\n  Variable sub_transitive:\n    forall a1 a2 a3,\n    sub a1 a2 ->\n    sub a2 a3 ->\n    sub a1 a3.\n\n  (* Subsumption is first extended to options. *)\n\n  Definition osub (o1 o2 : option A) :=\n    forall a2,\n    o2 = Some a2 ->\n    exists a1,\n    o1 = Some a1 /\\ sub a1 a2.\n\n  Lemma osub_None:\n    forall o,\n    osub o None.\n  Proof.\n    unfold osub. congruence.\n  Qed.\n\n  Lemma osub_Some_Some:\n    forall a1 a2,\n    sub a1 a2 ->\n    osub (Some a1) (Some a2).\n  Proof.\n    unfold osub. intros???? h. injection h; clear h; intro; subst; eauto.\n  Qed.\n\n  Lemma osub_None_Some:\n    forall a2,\n    osub None (Some a2) ->\n    False.\n  Proof.\n    unfold osub. intros? h.\n    generalize (h _ eq_refl). clear h. intros [ a1 [?? ]].\n    congruence.\n  Qed.\n\n  Lemma osub_Some_inversion:\n    forall o1 a2,\n    osub o1 (Some a2) ->\n    exists a1,\n    o1 = Some a1 /\\ sub a1 a2.\n  Proof.\n    intros. destruct o1. eauto. elimtype False. eauto using osub_None_Some.\n  Qed.\n\n  (* Then, it is extended pointwise to environments. *)\n\n  Definition subsume (e1 e2 : env A) :=\n    forall x,\n    osub (lookup x e1) (lookup x e2).\n\n  (* Subsumption of environments is reflexive and transitive. *)\n\n  Lemma osub_reflexive:\n    forall o,\n    osub o o.\n  Proof.\n    unfold osub. eauto.\n  Qed.\n\n  ",
                "context_tokens": 745,
                "proof_start_offset": 24694,
                "proof_end_offset": 24813,
                "proof": "Lemma subsume_reflexive: forall e, subsume e e.\nProof.\nunfold subsume.\neauto using osub_reflexive.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma subsume_reflexive: forall e, subsume e e.\n  Proof.\n    unfold os.\n    intros.\n    generalize (h_equal_equal_equal_refl).\n    generalize (h_equal_equal_refl).\n    generalize (h_equal_equal_refl).\n    generalize (h_equal_equal_refl).\n    generalize (h_equal_equal_refl).\n    generalize (h_equal_equal_refl).\n    generalize (h_equal_equal_refl).\n    generalize (h_equal_equal_refl).\n    generalize (h_equal_equal_refl).\n    generalize (h_equal_equal_refl).\n    generalize (h_equal_equal_refl).\n    generalize (h_equal_equal_refl).\n    generalize (h_equal_equal_refl).\n    generalize (h_equal_equal_refl).\n    generalize (h_equal_equal_refl_equal_equal_refl).\n    generalize (h_equal_equal_refl_equal_refl).\n    generalize (h_equal_equal_refl_equal_equal_refl).\n    generalize (h_equal_equal_refl_equal_equal_refl).\n    generalize (h_equal_equal_refl_equal_equal_refl_equal_equal_refl).\n   Qed.",
                    "Lemma subsume_reflexive: forall e, subsume e e.\n  Proof.\n    unfold os.\n    intros.\n    generalize (h_equal_equal _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _Qed.",
                    "Lemma subsume_reflexive: forall e, subsume e e.\n  Proof.\n    unfold os.\n    intros.\n    unfold os.\n    generalize (h_equal (fst (fst (fst (snd (fst (snd (snd (snd (snd (snd (snd (snd (snd (snd (snd (fst (snd (snd (snd (fst (snd (snd (snd (fst (snd (snd (snd (fst (fst (fst (snd (snd (snd (snd (snd (snd (snd (fst (snd (snd (snd (fst (snd (fst (snd (fst (snd (snd (snd (snd (snd (snd (snd (snd (snd (snd (snd (snd (fst (snd (snd (snd (snd (fst (snd (snd (fst (snd (snd (snd (snd (fst (snd (snd (snd (snd (snd (snd (fst (snd (snd (snd (snd (snd (snd (fst (snd (snd (snd (snd (snd (snd (snd (snd (snd (snd (snd (snd (fst (fst (fst (snd (snd (snd (snd (snd (fst (snd (snd (snd (snd (snd (snd (snd (snd (fst (snd (sndQed.",
                    "Lemma subsume_reflexive: forall e, subsume e e.\n  Proof.\n    unfold os.\n    intros.\n    generalize (h_eq (fst e) (fst e) (snd e) (snd e)).\n    unfold os.\n    generalize (h_eq (snd e) (snd e)).\n    clear e.\n    generalize (h_eq (fst e) (snd e)).\n    clear e.\n    generalize (h_eq (fst e)).\n    clear e.\n    generalize (h_eq (fst e) (snd e)).\n    clear e.\n    generalize (h_eq (fst e)).\n    clear e.\n    generalize (h_eq (fst e)).\n    clear e.\n    generalize (h_eq (fst e)).\n    clear e.\n    generalize (h_eq (fst e)).\n    clear e.\n    generalize (h_eq (snd e)).\n    clear e.\n    generalize (h_eq (snd e)).\n    clear e.\n    generalize (h_eq (snd e)).\n    clear e.\n    generalize (h_eq (snd e)).\n    clear e.\n    generalize (h_eq (fst e)).\n    clear e.\n    generalize (h_eq (snd e)).\n    clear e.\n    generalize (h_eq (snd e)).\n    clearQed.",
                    "Lemma subsume_reflexive: forall e, subsume e e.\n  Proof.\n    unfold os.\n    intros.\n    generalize (h_equal_equal_refl_equal_equal_refl_equal_equal_refl_equal_equal_equal_refl_equal_equal_equal_refl_equal_equal_equal_equal_refl_equal_equal_equal_equal_refl_equal_equal_equal_equal_refl_equal_equal_equal_equal_refl_equal_equal_equal_equal_equal_equal_equal_equal_refl_equal_equal_equal_equal_equal_equal_equal_refl_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal__equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " to [k] are extended with a new variable,\n   then they agree up to [k+1]. *)\n\nLemma agree_insert:\n  forall A (e1 e2 : env A) k,\n  agree e1 e2 k ->\n  forall x o,\n  x <= k ->\n  agree (raw_insert x o e1) (raw_insert x o e2) (1 + k).\nProof.\n  unfold agree. do 8 intro. intros n?.\n  (* Reason by cases: [x = n], [x < n], [x > n]. *)\n  case (le_gt_dec x n); [ case (eq_nat_dec x n) | ]; intros;\n  (* In each case, [lookup_insert] simplifies the goal. *)\n  do 2 lookup_insert; eauto with omega.\nQed.\n\nHint Resolve defined_implies_below_length agree_below agree_empty_left\nagree_empty_right agree_insert : agree.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* A definition of when an environment subsumes another, up to a notion of\n   subsumption on environment entries. *)\n\nSection Subsume.\n\n  Variable A : Type.\n\n  Variable sub : A -> A -> Prop.\n\n  Variable sub_reflexive:\n    forall a,\n    sub a a.\n\n  Variable sub_transitive:\n    forall a1 a2 a3,\n    sub a1 a2 ->\n    sub a2 a3 ->\n    sub a1 a3.\n\n  (* Subsumption is first extended to options. *)\n\n  Definition osub (o1 o2 : option A) :=\n    forall a2,\n    o2 = Some a2 ->\n    exists a1,\n    o1 = Some a1 /\\ sub a1 a2.\n\n  Lemma osub_None:\n    forall o,\n    osub o None.\n  Proof.\n    unfold osub. congruence.\n  Qed.\n\n  Lemma osub_Some_Some:\n    forall a1 a2,\n    sub a1 a2 ->\n    osub (Some a1) (Some a2).\n  Proof.\n    unfold osub. intros???? h. injection h; clear h; intro; subst; eauto.\n  Qed.\n\n  Lemma osub_None_Some:\n    forall a2,\n    osub None (Some a2) ->\n    False.\n  Proof.\n    unfold osub. intros? h.\n    generalize (h _ eq_refl). clear h. intros [ a1 [?? ]].\n    congruence.\n  Qed.\n\n  Lemma osub_Some_inversion:\n    forall o1 a2,\n    osub o1 (Some a2) ->\n    exists a1,\n    o1 = Some a1 /\\ sub a1 a2.\n  Proof.\n    intros. destruct o1. eauto. elimtype False. eauto using osub_None_Some.\n  Qed.\n\n  (* Then, it is extended pointwise to environments. *)\n\n  Definition subsume (e1 e2 : env A) :=\n    forall x,\n    osub (lookup x e1) (lookup x e2).\n\n  (* Subsumption of environments is reflexive and transitive. *)\n\n  Lemma osub_reflexive:\n    forall o,\n    osub o o.\n  Proof.\n    unfold osub. eauto.\n  Qed.\n\n  Lemma subsume_reflexive:\n    forall e,\n    subsume e e.\n  Proof.\n    unfold subsume. eauto using osub_reflexive.\n  Qed.\n\n  ",
                "context_tokens": 729,
                "proof_start_offset": 24817,
                "proof_end_offset": 25084,
                "proof": "Lemma osub_transitive: forall o1 o2 o3, osub o1 o2 -> osub o2 o3 -> osub o1 o3.\nProof.\nunfold osub.\nintros ? ? ? hs1 hs2 a3 h3.\ngeneralize (hs2 _ h3); intros [ a2 [ h2 ? ]].\ngeneralize (hs1 _ h2); intros [ a1 [ h1 ? ]].\neauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma osub_transitive: forall o1 o2 o3, osub o1 o2 -> osub o2 o3 -> osub o1 o3.\n  Proof.\n    unfold os.\n    intros.\n    destruct o1.\n    destruct o1.\n    destruct o2.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o2.\n    destruct o1.\n    destruct o2.\n    destruct o1.\n    destruct o2.\n    destruct o1.\n    destruct o1.\n    destruct o2.\n    destruct o1.\n    destruct o2.\n    destruct o2.\n    destruct o2.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o2.\n    destruct o2.\n    destruct o1.\n    destruct o1.\n    destruct o2.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o2.\n    destruct o1.\n    destruct o1.\n    destruct o2.\n    destruct o1.\n    destruct o1.\n    destruct o1.\n    destruct o2.\n    destruct o1.\n    destruct o2.\n    destruct o2.\n    destruct o1.\n    destruct o2.\n    destruct o2.\n    destruct o1.\n    destruct o2.\n    destruct o1.\n    destruct o1.\n   Qed.",
                    "Lemma osub_transitive: forall o1 o2 o3, osub o1 o2 -> osub o2 o3 -> osub o1 o3.\n  Proof.\n    unfold os.\n    intros o1 o2 o3 o3 o3.\n    unfold os.\n    unfold os.\n    unfold os.\n    case_eq (eq_dec o1 o2); [ case_eq_dec o2; [ case_eq_dec o2; [ case_eq_dec o2; [ case_eq_dec o2; [ case_eq_dec o2; [ case_eq_dec o2; [ case_eq_dec o2; [ case_eq_dec o2; [ case_eq_dec o2; [ case_eq_dec o2; [ case_eq_dec o2; [ case_eq_dec o2; [ case_eq_dec o2; [ case_eq_dec o2; [ case_eq_dec o2; [ case_eq_dec o2; [ case_eq_dec o2; case_dec o2; [ case_eq_dec o2; [ case_eq_dec o2; case_dec o2; [ case_eq_dec o2; [ case_eq_dec o2; [ case_eq_dec o2; caseQed.",
                    "Lemma osub_transitive: forall o1 o2 o3, osub o1 o2 -> osub o2 o3 -> osub o1 o3.\n  Proof.\n    unfold os.\n    intros.\n    generalize (h_eq o1 o1 o2).\n    intro.\n    generalize (h_eq o1 o2).\n    generalize (h_eq o1 o2).\n    generalize (h_eq o1 o2).\n    generalize (h_eq o1 o2).\n    generalize (h_eq o1 o2).\n    generalize (h_eq o2 o2).\n    generalize (h_eq o1 o2).\n    generalize (h_eq o1 o2).\n    generalize (h_eq o2 o2).\n    generalize (h_eq o1 o2).\n    generalize (h_eq o2 o2).\n    generalize (h_eq o2 o2).\n    generalize (h_eq o1 o2).\n    generalize (h_eq o2 o2).\n    generalize (h_eq o2 o2).\n    generalize (h_eq o1 o2).\n    generalize (h_eq o1 o2).\n    generalize (h_eq o2 o2).\n    generalize (h_eq o1 o2).\n    generalize (h_eq o2 o2).\n    generalize (h_eq o2 o2Qed.",
                    "Lemma osub_transitive: forall o1 o2 o3, osub o1 o2 -> osub o2 o3 -> osub o1 o3.\n  Proof.\n    unfold os.\n    intros.\n    destruct o1 as [p1 o2].\n    destruct o1 as [p1 o2].\n    destruct o1 as [p1 o2].\n    destruct o1 as [p2 o2].\n    destruct o1 as [p2 o2].\n    destruct o2 as [p1 o2].\n    destruct o1 as [p2 o2].\n    destruct o1 as [p2 o2].\n    destruct o2 as [p1 o2].\n    destruct o2 as [p1 o2].\n    destruct o2 as [p1 o2].\n    destruct o2 as [p1 o2].\n    destruct o2 as [p2 o2].\n    destruct o1 as [p2 o2].\n    destruct o2 as [p1 o2].\n    destruct o2 as [p1 o2].\n    destruct o1 as [p1 o2].\n    destruct o2 as [p2 o2].\n    destruct o1 as [p2 o2].\n    destruct o1 as [p1 o2].\n    destruct o2 as [p2 o2].\n    destruct o2 as [p1 o2].\n    destruct o1Qed.",
                    "Lemma osub_transitive: forall o1 o2 o3, osub o1 o2 -> osub o2 o3 -> osub o1 o3.\n  Proof.\n    unfold os_ub.\n    intros o1 o2.\n    generalize (h1 o1 o2). clear o2.\n    generalize (h1 o2). clear o2.\n    generalize (h2 o1 o2). clear o1.\n    generalize (h1 o2). clear o2.\n    generalize (h2 o2). clear o2.\n    generalize (h2 o2). clear o2.\n    generalize (h2 o1). clear o1 o2.\n    generalize (h2 o2). clear o1.\n    generalize (h2 o2). clear o2.\n    generalize (h2 o1). clear o2.\n    generalize (h2 o2). clear o2.\n    generalize (h2 o2). clear o2.\n    generalize (h2 o2). clear o2.\n    generalize (h2 o2). clear o1 o2.\n    generalize (h2 o1). clear o2.\n    generalize (h2 o2). clear o2.\n    generalize (h3 o2). clear o2.\n    generalize (h3 o2). clear o2.\n    generalize (h2 o2). clear o2.\n    generalize (hQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "* Reason by cases: [x = n], [x < n], [x > n]. *)\n  case (le_gt_dec x n); [ case (eq_nat_dec x n) | ]; intros;\n  (* In each case, [lookup_insert] simplifies the goal. *)\n  do 2 lookup_insert; eauto with omega.\nQed.\n\nHint Resolve defined_implies_below_length agree_below agree_empty_left\nagree_empty_right agree_insert : agree.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* A definition of when an environment subsumes another, up to a notion of\n   subsumption on environment entries. *)\n\nSection Subsume.\n\n  Variable A : Type.\n\n  Variable sub : A -> A -> Prop.\n\n  Variable sub_reflexive:\n    forall a,\n    sub a a.\n\n  Variable sub_transitive:\n    forall a1 a2 a3,\n    sub a1 a2 ->\n    sub a2 a3 ->\n    sub a1 a3.\n\n  (* Subsumption is first extended to options. *)\n\n  Definition osub (o1 o2 : option A) :=\n    forall a2,\n    o2 = Some a2 ->\n    exists a1,\n    o1 = Some a1 /\\ sub a1 a2.\n\n  Lemma osub_None:\n    forall o,\n    osub o None.\n  Proof.\n    unfold osub. congruence.\n  Qed.\n\n  Lemma osub_Some_Some:\n    forall a1 a2,\n    sub a1 a2 ->\n    osub (Some a1) (Some a2).\n  Proof.\n    unfold osub. intros???? h. injection h; clear h; intro; subst; eauto.\n  Qed.\n\n  Lemma osub_None_Some:\n    forall a2,\n    osub None (Some a2) ->\n    False.\n  Proof.\n    unfold osub. intros? h.\n    generalize (h _ eq_refl). clear h. intros [ a1 [?? ]].\n    congruence.\n  Qed.\n\n  Lemma osub_Some_inversion:\n    forall o1 a2,\n    osub o1 (Some a2) ->\n    exists a1,\n    o1 = Some a1 /\\ sub a1 a2.\n  Proof.\n    intros. destruct o1. eauto. elimtype False. eauto using osub_None_Some.\n  Qed.\n\n  (* Then, it is extended pointwise to environments. *)\n\n  Definition subsume (e1 e2 : env A) :=\n    forall x,\n    osub (lookup x e1) (lookup x e2).\n\n  (* Subsumption of environments is reflexive and transitive. *)\n\n  Lemma osub_reflexive:\n    forall o,\n    osub o o.\n  Proof.\n    unfold osub. eauto.\n  Qed.\n\n  Lemma subsume_reflexive:\n    forall e,\n    subsume e e.\n  Proof.\n    unfold subsume. eauto using osub_reflexive.\n  Qed.\n\n  Lemma osub_transitive:\n    forall o1 o2 o3,\n    osub o1 o2 ->\n    osub o2 o3 ->\n    osub o1 o3.\n  Proof.\n    unfold osub. intros??? hs1 hs2 a3 h3.\n    generalize (hs2 _ h3); intros [ a2 [ h2? ]].\n    generalize (hs1 _ h2); intros [ a1 [ h1? ]].\n    eauto.\n  Qed.\n\n  ",
                "context_tokens": 730,
                "proof_start_offset": 25088,
                "proof_end_offset": 25260,
                "proof": "Lemma subsume_transitive: forall e1 e2 e3, subsume e1 e2 -> subsume e2 e3 -> subsume e1 e3.\nProof.\nunfold subsume.\neauto using osub_transitive.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma subsume_transitive: forall e1 e2 e3, subsume e1 e2 -> subsume e2 e3 -> subsume e1 e3.\n  Proof.\n    unfold os. intros.\n    generalize (eq_refl _ _ _ _ H); intro.\n    generalize (eq_refl _ _ _ _ H); intro.\n    generalize (eq_refl _ _ _ H); intro.\n    generalize (eq_refl _ _ _ H); intro.\n    generalize (eq_refl _ _ _ H); intro.\n    generalize (eq_refl _ _ _ H); intro.\n    generalize (eq_refl _ _ _ H); intro.\n    generalize (eq_refl _ _ _ H); intro.\n    generalize (eq_refl _ _ _ _ H); intro.\n    generalize (eq_refl _ _ _ H); intro.\n    generalize (eq_refl _ _ _ _ H); intro.\n    generalize (eq_refl _ _ _ H); intro.\n    generalize (eq_refl _ _ _ H); intro.\n    generalize (eq_refl _ _ _ H); intro.\n    generalize (eq_refl _ _ _ H); intro.\n    generalize (eq_refl _ _ H); intro.\n    generalize (eq_refl _ _ _ H); intro.\n    generalize (eq_refl _ _ _ H); intro.\n    generalize (eq_refl _ _ _ _Qed.",
                    "Lemma subsume_transitive: forall e1 e2 e3, subsume e1 e2 -> subsume e2 e3 -> subsume e1 e3.\n  Proof.\n    unfold os_h. intros.\n    generalize (eq_refl _ _ _ _ _ _ H); intros [a1 [a2 [? [? [? [? [? [? [? [? [? [? [? [? [? [? [? [? [??]]]].\n    exists a2.\n    exists a2. exists a2. exists a3. exists a3. exists a3. exists a3. exists a3. exists a3. exists a3. exists a3. exists a3. exists a3. exists a3. exists a3. exists a3. exists a3. exists a3. exists a3. exists a3. exists a3. exists a3. exists a3. exists a3. exists a3. exists a3. exists a3. exists a3. exists a3. exists a3. exists a4. exists a3. exists a3. exists a3. exists a4. exists a3. exists a3. exists a3. exists a3. exists a4. exists a3. exists a3. exists a3. exists a3. exists a3. exists a3. exists a3. exists a4. exists a4. exists a3. exists a3.Qed.",
                    "Lemma subsume_transitive: forall e1 e2 e3, subsume e1 e2 -> subsume e2 e3 -> subsume e1 e3.\n  Proof.\n    unfold os.\n    intros.\n    generalize (H (p1 _ _ H); intro.\n    generalize (p2 _ _ _ H); intro.\n    generalize (p2 _ _ H); intro.\n    generalize (p2 _ _ _ _ _ H); intro.\n    generalize (p2 _ _ _ _ _ H); intro.\n    generalize (p2 _ _ _ _ H); intro.\n    generalize (p2 _ _ _ _ _ _ _ H); intro.\n    generalize (p2 _ _ _ _ _ _ _ H); intro.\n    generalize (p2 _ _ _ _ _ _ _ _ H); intro.\n    generalize (p2 _ _ _ _ _ _ _ _ H); intro.\n    generalize (p2 _ _ _ _ _ _ _ _ H); intro.\n    generalize (p2 _ _ _ _ _ _ H); intro.\n    generalize (p2 _ _ _ _ _ _ _ _ _ H); intro.\n    generalize (p2 _ _ _ _ _ _ _ _ _ _ _ H); intro.\n    generalize (p2 _ _ _ _ _ _ _ _ _ H); intro.\n    generalize (p2 _ _ _ _ _ _ _ _ _ HQed.",
                    "Lemma subsume_transitive: forall e1 e2 e3, subsume e1 e2 -> subsume e2 e3 -> subsume e1 e3.\n  Proof.\n    unfold os.\n    intros.\n    generalize (H _ _ _ _ _ H); clear H; intro.\n    generalize (H _ _ _ _ H); clear H; intro.\n    generalize (H _ _ _ H); clear H; intro.\n    generalize (H _ _ _ _ H); clear H; intro.\n    generalize (H _ _ _ H); clear H; intro.\n    generalize (H _ _ _ H); clear H; intro.\n    generalize (H _ _ _ H); clear H; intro.\n    generalize (H _ _ _ H); clear H; intro.\n    generalize (H _ _ _ H); clear H; intro.\n    generalize (H _ _ _ H); clear H; intro.\n    generalize (H _ _ H); clear H; intro.\n    generalize (H _ _ _ H); clear H; intro.\n    generalize (H _ _ _ H); clear H; intro.\n    generalize (H _ _ _ H); clear H; intro.\n    generalize (H _ _ H); clear H; intro.\n    generalize (H _ _ H); clear H; intro.\n    generalize (H _ _ _ H); clear H; intro.\n    generalize (H _ _ _Qed.",
                    "Lemma subsume_transitive: forall e1 e2 e3, subsume e1 e2 -> subsume e2 e3 -> subsume e1 e3.\n  Proof.\n    unfold os_order.\n    intros.\n    generalize (eq_refl_equal _ _ _ _ _ _ H).\n    clear e1.\n    generalize (eq_refl_equal _ _ _ H).\n    generalize (eq_refl_equal _ _ _ _ H).\n    clear e1.\n    generalize (eq_refl_equal _ _ _ _ H).\n    clear e1.\n    generalize (eq_refl_equal _ _ _ _ H).\n    clear e1.\n    generalize (eq_refl_equal _ _ _ _ H).\n    clear e1.\n    generalize (eq_refl_equal _ _ _ _ _ H).\n    clear e1.\n    generalize (eq_refl_equal _ _ _ _ H).\n    clear e1.\n    generalize (eq_refl_equal _ _ _ _ H).\n    clear e1.\n    generalize (eq_refl_equal _ _ _ H).\n    clear e1.\n    generalize (eq_refl_equal _ _ _ _ _ H).\n    clear e1.\n    generalize (eq_refl_equal _ _ _ _ H).\n    clear e1.\n    generalize (eq_refl_equal _ _ _ _ H).\n    clear e1.Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "with omega.\nQed.\n\nHint Resolve defined_implies_below_length agree_below agree_empty_left\nagree_empty_right agree_insert : agree.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* A definition of when an environment subsumes another, up to a notion of\n   subsumption on environment entries. *)\n\nSection Subsume.\n\n  Variable A : Type.\n\n  Variable sub : A -> A -> Prop.\n\n  Variable sub_reflexive:\n    forall a,\n    sub a a.\n\n  Variable sub_transitive:\n    forall a1 a2 a3,\n    sub a1 a2 ->\n    sub a2 a3 ->\n    sub a1 a3.\n\n  (* Subsumption is first extended to options. *)\n\n  Definition osub (o1 o2 : option A) :=\n    forall a2,\n    o2 = Some a2 ->\n    exists a1,\n    o1 = Some a1 /\\ sub a1 a2.\n\n  Lemma osub_None:\n    forall o,\n    osub o None.\n  Proof.\n    unfold osub. congruence.\n  Qed.\n\n  Lemma osub_Some_Some:\n    forall a1 a2,\n    sub a1 a2 ->\n    osub (Some a1) (Some a2).\n  Proof.\n    unfold osub. intros???? h. injection h; clear h; intro; subst; eauto.\n  Qed.\n\n  Lemma osub_None_Some:\n    forall a2,\n    osub None (Some a2) ->\n    False.\n  Proof.\n    unfold osub. intros? h.\n    generalize (h _ eq_refl). clear h. intros [ a1 [?? ]].\n    congruence.\n  Qed.\n\n  Lemma osub_Some_inversion:\n    forall o1 a2,\n    osub o1 (Some a2) ->\n    exists a1,\n    o1 = Some a1 /\\ sub a1 a2.\n  Proof.\n    intros. destruct o1. eauto. elimtype False. eauto using osub_None_Some.\n  Qed.\n\n  (* Then, it is extended pointwise to environments. *)\n\n  Definition subsume (e1 e2 : env A) :=\n    forall x,\n    osub (lookup x e1) (lookup x e2).\n\n  (* Subsumption of environments is reflexive and transitive. *)\n\n  Lemma osub_reflexive:\n    forall o,\n    osub o o.\n  Proof.\n    unfold osub. eauto.\n  Qed.\n\n  Lemma subsume_reflexive:\n    forall e,\n    subsume e e.\n  Proof.\n    unfold subsume. eauto using osub_reflexive.\n  Qed.\n\n  Lemma osub_transitive:\n    forall o1 o2 o3,\n    osub o1 o2 ->\n    osub o2 o3 ->\n    osub o1 o3.\n  Proof.\n    unfold osub. intros??? hs1 hs2 a3 h3.\n    generalize (hs2 _ h3); intros [ a2 [ h2? ]].\n    generalize (hs1 _ h2); intros [ a1 [ h1? ]].\n    eauto.\n  Qed.\n\n  Lemma subsume_transitive:\n    forall e1 e2 e3,\n    subsume e1 e2 ->\n    subsume e2 e3 ->\n    subsume e1 e3.\n  Proof.\n    unfold subsume. eauto using osub_transitive.\n  Qed.\n\n  (* Every environment subsumes the empty environment. *)\n\n  ",
                "context_tokens": 722,
                "proof_start_offset": 25323,
                "proof_end_offset": 25471,
                "proof": "Lemma subsume_empty: forall e, subsume e (@empty _).\nProof.\nunfold subsume.\nintros.\nrewrite lookup_empty_None.\napply osub_None.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma subsume_empty: forall e, subsume e (@empty _).\n  Proof.\n    unfold subsume_empty.\n    intros.\n    unfold subsume_empty.\n    destruct e1 as [a2 [??]].\n    generalize (H _ _ _ _ H0); intros [a2 [H1 H2 [??]].\n    generalize (H _ _ H0); intros [a2 [H2 [? [??]].\n    generalize (H _ _ H1); intros [a2 [? [??]].\n    generalize (H _ _ _ H1); intros [a2 [??]].\n    generalize (H _ _ _ H0); intros [a2 [??]].\n    generalize (H _ H2); intros [a2 [??]].\n    generalize (H _ H); intros [a2 [??]].\n    generalize (H _ _ H0); intros [a2 [??]].\n    generalize (H _ _ H0); intros [a2 [??]].\n    generalize (H _ _ H0); intros [a2 [??]].\n    generalize (H _ _ H); intros [a2 [??]].\n    generalize (H _ _ H); intros [a2 [??]].\n    generalize (H _ _ H); intros [a2 [??]].\n    generalize (H _ _ H0); intros [a2 [??]].\n    generalize (H _ H); intros [aQed.",
                    "Lemma subsume_empty: forall e, subsume e (@empty _).\n  Proof.\n    unfold subsume_empty.\n    unfold subsume_empty.\n    rewrite (mk_empty_r _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _Qed.",
                    "Lemma subsume_empty: forall e, subsume e (@empty _).\n  Proof.\n    unfold subsume_empty.\n    intros.\n    destruct o as [s1 s2].\n    generalize (pp_ok _ _ _ _ _ _ _ _ H); intros [s1 [? [??]]]].\n    generalize (pp_ok _ _ _ _ _ _ _ _ _ _ H); intros [s2 [??]].\n    generalize (pp_ok _ _ _ _ _ _ _ _ H); intros [s2 [??]].\n    generalize (pp_ok _ _ _ _ _ _ _ H); intros [s2 [??]].\n    generalize (pp_ok _ _ _ _ _ _ H); intros [s2 [??]].\n    generalize (pp_ok _ _ _ _ _ _ _ _ H); intros [s2 [??]].\n    generalize (pp_ok _ _ _ _ _ _ _ _ H); intros [s2 [??]].\n    generalize (pp_ok _ _ _ _ _ _ _ _ _ H); intros [s2 [??]].\n    generalize (pp_ok _ _ _ _ _ _ _ _ _ H); intros [s2 [??]].\n    generalize (pp_ok _ _ _ _ _ _ _ _ _ H); intros [s3 [??]].\n    generalize (pp_ok _ _ _ _ _Qed.",
                    "Lemma subsume_empty: forall e, subsume e (@empty _).\n  Proof.\n    unfold subsume_empty.\n    unfold subsume_empty.\n    auto.\n  Qed.",
                    "Lemma subsume_empty: forall e, subsume e (@empty _).\n  Proof.\n    unfold os.\n    unfold os.\n    unfold os.\n    auto.\n  Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "nment entries. *)\n\nSection Subsume.\n\n  Variable A : Type.\n\n  Variable sub : A -> A -> Prop.\n\n  Variable sub_reflexive:\n    forall a,\n    sub a a.\n\n  Variable sub_transitive:\n    forall a1 a2 a3,\n    sub a1 a2 ->\n    sub a2 a3 ->\n    sub a1 a3.\n\n  (* Subsumption is first extended to options. *)\n\n  Definition osub (o1 o2 : option A) :=\n    forall a2,\n    o2 = Some a2 ->\n    exists a1,\n    o1 = Some a1 /\\ sub a1 a2.\n\n  Lemma osub_None:\n    forall o,\n    osub o None.\n  Proof.\n    unfold osub. congruence.\n  Qed.\n\n  Lemma osub_Some_Some:\n    forall a1 a2,\n    sub a1 a2 ->\n    osub (Some a1) (Some a2).\n  Proof.\n    unfold osub. intros???? h. injection h; clear h; intro; subst; eauto.\n  Qed.\n\n  Lemma osub_None_Some:\n    forall a2,\n    osub None (Some a2) ->\n    False.\n  Proof.\n    unfold osub. intros? h.\n    generalize (h _ eq_refl). clear h. intros [ a1 [?? ]].\n    congruence.\n  Qed.\n\n  Lemma osub_Some_inversion:\n    forall o1 a2,\n    osub o1 (Some a2) ->\n    exists a1,\n    o1 = Some a1 /\\ sub a1 a2.\n  Proof.\n    intros. destruct o1. eauto. elimtype False. eauto using osub_None_Some.\n  Qed.\n\n  (* Then, it is extended pointwise to environments. *)\n\n  Definition subsume (e1 e2 : env A) :=\n    forall x,\n    osub (lookup x e1) (lookup x e2).\n\n  (* Subsumption of environments is reflexive and transitive. *)\n\n  Lemma osub_reflexive:\n    forall o,\n    osub o o.\n  Proof.\n    unfold osub. eauto.\n  Qed.\n\n  Lemma subsume_reflexive:\n    forall e,\n    subsume e e.\n  Proof.\n    unfold subsume. eauto using osub_reflexive.\n  Qed.\n\n  Lemma osub_transitive:\n    forall o1 o2 o3,\n    osub o1 o2 ->\n    osub o2 o3 ->\n    osub o1 o3.\n  Proof.\n    unfold osub. intros??? hs1 hs2 a3 h3.\n    generalize (hs2 _ h3); intros [ a2 [ h2? ]].\n    generalize (hs1 _ h2); intros [ a1 [ h1? ]].\n    eauto.\n  Qed.\n\n  Lemma subsume_transitive:\n    forall e1 e2 e3,\n    subsume e1 e2 ->\n    subsume e2 e3 ->\n    subsume e1 e3.\n  Proof.\n    unfold subsume. eauto using osub_transitive.\n  Qed.\n\n  (* Every environment subsumes the empty environment. *)\n\n  Lemma subsume_empty:\n    forall e,\n    subsume e (@empty _).\n  Proof.\n    unfold subsume. intros. rewrite lookup_empty_None. apply osub_None.\n  Qed.\n\n  (* Extending two environments with a new variable preserves subsumption. *)\n\n  ",
                "context_tokens": 714,
                "proof_start_offset": 25554,
                "proof_end_offset": 25976,
                "proof": "Lemma subsume_insert: forall e1 e2, subsume e1 e2 -> forall x o1 o2, osub o1 o2 -> subsume (raw_insert x o1 e1) (raw_insert x o2 e2).\nProof.\nunfold subsume.\ndo 7 intro.\nintros n.\ncase (le_gt_dec x n); [ case (eq_nat_dec x n) | ]; intros; repeat lookup_insert; eauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma subsume_insert: forall e1 e2, subsume e1 e2 -> forall x o1 o2, osub o1 o2 -> subsume (raw_insert x o1 e1) (raw_insert x o2 e2).\n  Proof.\n    unfold subsume_right.\n    intros.\n    rewrite (mk_insert_insert_right _ _ _ _ _ _ _ _ _ _ _ H); intros [a2 [a3 [H3 [H4 H5]]].\n    rewrite (mk_insert_right _ _ _ _ _ _ _ _ _ H); intros [a3 [H4 H5]]].\n    rewrite (mk_insert_right _ _ _ _ _ _ _ _ _ _ _ H); intros [a3 [H5 H6]]].\n    rewrite (mk_insert_right _ _ _ _ _ _ _ _ _ _ H); intros [a4 [H5 H6]].\n    rewrite (mk_insert_right _ _ _ _ _ _ _ _ H); intros [a3 [H5 H6]].\n    rewrite (mk_insert_right _ _ _ _ _ _ _ _ _ H); intros [a3 [H5 H6]]].\n    rewrite (mk_insert_right _ _ _ _ _ _ _ _ H); intros [a4 [H5 H6]].\n    rewrite (mk_insert_right _ _ _ _ _ _ _ _ _ H); intros [a5 [H6 H6]].\n   Qed.",
                    "Lemma subsume_insert: forall e1 e2, subsume e1 e2 -> forall x o1 o2, osub o1 o2 -> subsume (raw_insert x o1 e1) (raw_insert x o2 e2).\n  Proof.\n    unfold subsume_right.\n    rewrite (mk_empty_spec _ _ _ _ _ _ _ _ _ _ H); intros [a2 [a3 [H3 [H4 [H4 H5]]]].\n    generalize (H5 _ _ _ _ _ _ _ _ _ H); intros [a3 [H5 [H5 H6]]]].\n    generalize (H5 _ _ _ _ _ H); intros [a5 [H5 [H6 H6]].\n    generalize (H6 _ _ H); intros [a6 [H7 [H7 H6]].\n    generalize (H6 _ _ _ H); intros [a7 [H7 H7]].\n    generalize (H6 _ _ H); intros [a7 [H7 H7 H7]].\n    generalize (H7 _ _ H); intros [a7 [H7 H7 H7]].\n    generalize (H7 _ _ H); intros [a7 H7 H7 H8]].\n    generalize (H8 _ _ H); intros [a7 H8 H8 H8]].\n    generalize (H8 _ _ H); intros [a7 H8 H8 H9]].\n    generalize (H8 _ _ H); introsQed.",
                    "Lemma subsume_insert: forall e1 e2, subsume e1 e2 -> forall x o1 o2, osub o1 o2 -> subsume (raw_insert x o1 e1) (raw_insert x o2 e2).\n  Proof.\n    unfold subsume_right.\n    destruct e1 as [x1 o2].\n    destruct o2 as [x2 o2].\n    destruct o2 as [x1 o2]; [left |left1 o2].\n    destruct o2 as [x1 o2]; auto.\n    destruct o2 as [x1 o2]; auto.\n    destruct o2 as [x1 o2]; auto.\n    destruct o2 as [x2 o2]; auto.\n    destruct o2 as [x1 o2]; auto.\n    destruct o2 as [x o2]; auto.\n    destruct o2 as [x o2]; auto.\n    destruct o2 as [x o2]; auto.\n    destruct o2 as [x o2]; auto.\n    destruct o2 as [x o2]; auto.\n    destruct o2 as [x o2]; auto.\n    destruct o2 as [x o2]; auto.\n    destruct o2 as [x o2]; auto.\n    destruct o2 as [x o1 o2]; auto.\n    destruct o2 as [x o2]; auto.\n    destruct o2 as [x o2]; auto.\n    destruct o2 as [xQed.",
                    "Lemma subsume_insert: forall e1 e2, subsume e1 e2 -> forall x o1 o2, osub o1 o2 -> subsume (raw_insert x o1 e1) (raw_insert x o2 e2).\n  Proof.\n    unfold subsume_right.\n    intros. rewrite insert_spec.\n    destruct o1.\n    simpl.\n    apply (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (Qed.",
                    "Lemma subsume_insert: forall e1 e2, subsume e1 e2 -> forall x o1 o2, osub o1 o2 -> subsume (raw_insert x o1 e1) (raw_insert x o2 e2).\n  Proof.\n    unfold subsume_right.\n    intros.\n    apply (mk_funspec_nil e1 e2).\n    apply (mk_funspec_nil e2).\n    apply (mk_funspec_nil e1).\n    apply (mk_funspec_nil e2).\n    apply (mk_funspec_nil e2).\n    apply (mk_funspec_nil e1).\n    apply (mk_funspec_nil e2).\n    apply (mk_funspec_nil e2).\n    apply (mk_funspec_nil e1).\n    apply (mk_funspec_nil e2).\n    apply (mk_funspec_nil e2).\n    apply (mk_funspec_nil e2).\n    apply (mk_funspec_nil e2).\n    apply (mk_funspec_nil e2).\n    apply (mk_funspec_nil e2).\n    apply (mk_funspec_nil e2).\n    apply (mk_funspec_nil e2).\n    apply (mk_funspec_nil e2).\n    apply (mk_funspec_nil e2).\n    apply (mk_funspec_nil e2).\n    apply (mk_funspec_nil e2).\n    apply (mk_funspec_nil e2).Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": ".\n\n  Lemma osub_None:\n    forall o,\n    osub o None.\n  Proof.\n    unfold osub. congruence.\n  Qed.\n\n  Lemma osub_Some_Some:\n    forall a1 a2,\n    sub a1 a2 ->\n    osub (Some a1) (Some a2).\n  Proof.\n    unfold osub. intros???? h. injection h; clear h; intro; subst; eauto.\n  Qed.\n\n  Lemma osub_None_Some:\n    forall a2,\n    osub None (Some a2) ->\n    False.\n  Proof.\n    unfold osub. intros? h.\n    generalize (h _ eq_refl). clear h. intros [ a1 [?? ]].\n    congruence.\n  Qed.\n\n  Lemma osub_Some_inversion:\n    forall o1 a2,\n    osub o1 (Some a2) ->\n    exists a1,\n    o1 = Some a1 /\\ sub a1 a2.\n  Proof.\n    intros. destruct o1. eauto. elimtype False. eauto using osub_None_Some.\n  Qed.\n\n  (* Then, it is extended pointwise to environments. *)\n\n  Definition subsume (e1 e2 : env A) :=\n    forall x,\n    osub (lookup x e1) (lookup x e2).\n\n  (* Subsumption of environments is reflexive and transitive. *)\n\n  Lemma osub_reflexive:\n    forall o,\n    osub o o.\n  Proof.\n    unfold osub. eauto.\n  Qed.\n\n  Lemma subsume_reflexive:\n    forall e,\n    subsume e e.\n  Proof.\n    unfold subsume. eauto using osub_reflexive.\n  Qed.\n\n  Lemma osub_transitive:\n    forall o1 o2 o3,\n    osub o1 o2 ->\n    osub o2 o3 ->\n    osub o1 o3.\n  Proof.\n    unfold osub. intros??? hs1 hs2 a3 h3.\n    generalize (hs2 _ h3); intros [ a2 [ h2? ]].\n    generalize (hs1 _ h2); intros [ a1 [ h1? ]].\n    eauto.\n  Qed.\n\n  Lemma subsume_transitive:\n    forall e1 e2 e3,\n    subsume e1 e2 ->\n    subsume e2 e3 ->\n    subsume e1 e3.\n  Proof.\n    unfold subsume. eauto using osub_transitive.\n  Qed.\n\n  (* Every environment subsumes the empty environment. *)\n\n  Lemma subsume_empty:\n    forall e,\n    subsume e (@empty _).\n  Proof.\n    unfold subsume. intros. rewrite lookup_empty_None. apply osub_None.\n  Qed.\n\n  (* Extending two environments with a new variable preserves subsumption. *)\n\n  Lemma subsume_insert:\n    forall e1 e2,\n    subsume e1 e2 ->\n    forall x o1 o2,\n    osub o1 o2 ->\n    subsume (raw_insert x o1 e1) (raw_insert x o2 e2).\n  Proof.\n    unfold subsume. do 7 intro. intros n.\n    (* Reason by cases: [x = n], [x < n], [x > n]. *)\n    case (le_gt_dec x n); [ case (eq_nat_dec x n) | ]; intros;\n    (* In each case, [lookup_insert] simplifies the goal. *)\n    repeat lookup_insert; eauto.\n  Qed.\n\n  ",
                "context_tokens": 726,
                "proof_start_offset": 25980,
                "proof_end_offset": 26219,
                "proof": "Lemma subsume_cons: forall o e1 e2, osub o (lookup 0 e2) -> subsume e1 (tl e2) -> subsume (o :: e1) e2.\nProof.\ndo 3 intro.\nintros h1 h2.\nintro n.\ndestruct n.\neauto.\ndo 2 rewrite lookup_successor.\neauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma subsume_cons: forall o e1 e2, osub o (lookup 0 e2) -> subsume e1 (tl e2) -> subsume (o :: e1) e2.\n  Proof.\n    unfold subsume_funspec.\n    destruct e1; simpl; auto.\n  Qed.",
                    "Lemma subsume_cons: forall o e1 e2, osub o (lookup 0 e2) -> subsume e1 (tl e2) -> subsume (o :: e1) e2.\n  Proof.\n    unfold subsume_funspec.\n    rewrite (mk_funspec_cons o e1 e2).\n    apply (mk_funspec_cons o e1 e2).\n    apply (mk_funspec_cons o e1 e2).\n    apply (mk_funspec_cons o e1 e2).\n    apply (mk_funspec_cons o e2).\n    apply (mk_funspec_cons o e1 e2).\n    apply (mk_funspec_cons o e2).\n    apply (mk_funspec_cons o e2).\n    apply (mk_funspec_cons o e1).\n    apply (mk_funspec_cons o e2).\n    apply (mk_funspec_cons o e1).\n    apply (mk_funspec_cons o e2).\n    apply (mk_funspec_cons o e1).\n    apply (mk_funspec_cons o e1).\n    apply (mk_funspec_cons o e1).\n    apply (mk_funspec_cons o e1).\n    apply (mk_funspec_cons o e1).\n    apply (mk_funspec_cons o e1).\n    apply (mk_funspec_cons o e1).\n    apply (mk_funspec_cons oQed.",
                    "Lemma subsume_cons: forall o e1 e2, osub o (lookup 0 e2) -> subsume e1 (tl e2) -> subsume (o :: e1) e2.\n  Proof.\n    unfold subsume_funspec.\n    intros.\n    destruct (eq_dec x e1); [ case (eq_dec e1); [ case (eq_dec e2); [ case (eq_dec e2); [ case (eq_dec e2); [ case (eq_dec e2); [ case (eq_dec e2); [ case (eq_dec e2); [ case (eq_dec e3); [ case (eq_dec e3); [ case (eq_dec e3); [ case (eq_dec e3); [ case (eq_dec e3); [ case (eq_dec e3); [ case (eq_dec e3); [ case (eq_dec e3); [ case (eq_dec e3); [ case (eq_dec e3); [ case (eq_dec e3); [ case (eq_dec e3); [ case (eq_dec e3); [ case (eq_dec e3); [ case (eq_dec e3); [ case (eq_dec e3); [ case (eq_dec e4); [ case (eq_dec e3); [ case (eq_dec e3);Qed.",
                    "Lemma subsume_cons: forall o e1 e2, osub o (lookup 0 e2) -> subsume e1 (tl e2) -> subsume (o :: e1) e2.\n  Proof.\n    unfold subsume_funspec.\n    intros.\n    destruct e1 as [x1' [x2' [x3' [x3' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [Qed.",
                    "Lemma subsume_cons: forall o e1 e2, osub o (lookup 0 e2) -> subsume e1 (tl e2) -> subsume (o :: e1) e2.\n  Proof.\n    unfold subsume_funspec.\n    destruct e1; simpl; intros.\n    (* In the case, [lookup_insert_left] *)\n    repeat (split_eq_dec x n); [ case (eq_dec x n); [ case (eq_dec x n); [ case (eq_dec x n); [ case (eq_dec n); [ case (eq_dec x n); [ case (eq_dec x n); [ case (eq_dec n n); [ case (eq_dec n n); [ case (eq_dec n n); [ case (eq_dec n n); [ case (eq_dec n n); [ case (eq_dec n n); [ case (eq_dec n n); [ case (eq_dec n n n); [ case (eq_dec n n); [ case (eq_dec n n); [ case (eq_dec n n); [ case (eq_dec n n); [ case (eq_dec n n); [ case (eq_dec n n); [ case (eq_dec n n); [ case (eq_dec n n); [ case (eq_dec n n); case (eq_dec nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " subst; eauto.\n  Qed.\n\n  Lemma osub_None_Some:\n    forall a2,\n    osub None (Some a2) ->\n    False.\n  Proof.\n    unfold osub. intros? h.\n    generalize (h _ eq_refl). clear h. intros [ a1 [?? ]].\n    congruence.\n  Qed.\n\n  Lemma osub_Some_inversion:\n    forall o1 a2,\n    osub o1 (Some a2) ->\n    exists a1,\n    o1 = Some a1 /\\ sub a1 a2.\n  Proof.\n    intros. destruct o1. eauto. elimtype False. eauto using osub_None_Some.\n  Qed.\n\n  (* Then, it is extended pointwise to environments. *)\n\n  Definition subsume (e1 e2 : env A) :=\n    forall x,\n    osub (lookup x e1) (lookup x e2).\n\n  (* Subsumption of environments is reflexive and transitive. *)\n\n  Lemma osub_reflexive:\n    forall o,\n    osub o o.\n  Proof.\n    unfold osub. eauto.\n  Qed.\n\n  Lemma subsume_reflexive:\n    forall e,\n    subsume e e.\n  Proof.\n    unfold subsume. eauto using osub_reflexive.\n  Qed.\n\n  Lemma osub_transitive:\n    forall o1 o2 o3,\n    osub o1 o2 ->\n    osub o2 o3 ->\n    osub o1 o3.\n  Proof.\n    unfold osub. intros??? hs1 hs2 a3 h3.\n    generalize (hs2 _ h3); intros [ a2 [ h2? ]].\n    generalize (hs1 _ h2); intros [ a1 [ h1? ]].\n    eauto.\n  Qed.\n\n  Lemma subsume_transitive:\n    forall e1 e2 e3,\n    subsume e1 e2 ->\n    subsume e2 e3 ->\n    subsume e1 e3.\n  Proof.\n    unfold subsume. eauto using osub_transitive.\n  Qed.\n\n  (* Every environment subsumes the empty environment. *)\n\n  Lemma subsume_empty:\n    forall e,\n    subsume e (@empty _).\n  Proof.\n    unfold subsume. intros. rewrite lookup_empty_None. apply osub_None.\n  Qed.\n\n  (* Extending two environments with a new variable preserves subsumption. *)\n\n  Lemma subsume_insert:\n    forall e1 e2,\n    subsume e1 e2 ->\n    forall x o1 o2,\n    osub o1 o2 ->\n    subsume (raw_insert x o1 e1) (raw_insert x o2 e2).\n  Proof.\n    unfold subsume. do 7 intro. intros n.\n    (* Reason by cases: [x = n], [x < n], [x > n]. *)\n    case (le_gt_dec x n); [ case (eq_nat_dec x n) | ]; intros;\n    (* In each case, [lookup_insert] simplifies the goal. *)\n    repeat lookup_insert; eauto.\n  Qed.\n\n  Lemma subsume_cons:\n    forall o e1 e2,\n    osub o (lookup 0 e2) ->\n    subsume e1 (tl e2) ->\n    subsume (o :: e1) e2.\n  Proof.\n    do 3 intro. intros h1 h2. intro n. destruct n.\n    eauto.\n    do 2 rewrite lookup_successor. eauto.\n  Qed.\n\n  ",
                "context_tokens": 719,
                "proof_start_offset": 26223,
                "proof_end_offset": 26458,
                "proof": "Lemma subsume_cons_cons_inversion: forall o1 o2 e1 e2, subsume (o1 :: e1) (o2 :: e2) -> osub o1 o2 /\\ subsume e1 e2.\nProof.\ndo 4 intro.\nintro h.\nsplit.\neapply (h 0).\nintro n.\neapply (h (1 + n)).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma subsume_cons_cons_inversion: forall o1 o2 e1 e2, subsume (o1 :: e1) (o2 :: e2) -> osub o1 o2 /\\ subsume e1 e2.\n  Proof.\n    unfold subsume_funspec.\n    do 3 intro.\n    rewrite lookup_node_nil_inversion. apply os_refl.\n  Qed.",
                    "Lemma subsume_cons_cons_inversion: forall o1 o2 e1 e2, subsume (o1 :: e1) (o2 :: e2) -> osub o1 o2 /\\ subsume e1 e2.\n  Proof.\n    intros.\n    destruct o1.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insert_spec.\n    rewrite lookup_insertQed.",
                    "Lemma subsume_cons_cons_inversion: forall o1 o2 e1 e2, subsume (o1 :: e1) (o2 :: e2) -> osub o1 o2 /\\ subsume e1 e2.\n  Proof.\n    unfold subsume_funspec.\n    repeat intro. rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_empty_spec.\n    rewrite lookup_Qed.",
                    "Lemma subsume_cons_cons_inversion: forall o1 o2 e1 e2, subsume (o1 :: e1) (o2 :: e2) -> osub o1 o2 /\\ subsume e1 e2.\n  Proof.\n    unfold subsume_funspec.\n    do 3 intro.\n    destruct o1; [ | [ | [ | [ | [ | [ | [ | ] | [ | [ | ] | [ | [ | ] | [ | ] | [ | ] | [ | [ | ] | [ | ] | [ | ] | [ | ] | [ | ] | [ | ] | [ | ] | [ | ] | [ | ] | [ | ] ] | [ | [ | ] | [ | ] | [ | ] | [ | ] | [ | ] | [ | ] ] | [ | [ | ] | [ | ] | [ | ] | [ | ] ] | [ | [ | ] | [ | ] | [ | ] | [ | ] | [ | ] | [ | ] | [ | ] | [ | ] | [ | [ | ] ] | [ | ] ] | [ | [ | ] | ] | [ | ] | [ | ] | [ | ] | [ | ] | [ | ] | [ | ] ] | [ | ] | [ | ] | [ | [ | ] | [ | ] | ] | [ | ] ] | [ | [ | ] | [ |Qed.",
                    "Lemma subsume_cons_cons_inversion: forall o1 o2 e1 e2, subsume (o1 :: e1) (o2 :: e2) -> osub o1 o2 /\\ subsume e1 e2.\n  Proof.\n    unfold subsume_cons.\n    intros. rewrite lookup_empty_spec.\n    destruct o1.\n    simpl; auto.\n  Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " o2,\n    osub o1 o2 ->\n    subsume (raw_insert x o1 e1) (raw_insert x o2 e2).\n  Proof.\n    unfold subsume. do 7 intro. intros n.\n    (* Reason by cases: [x = n], [x < n], [x > n]. *)\n    case (le_gt_dec x n); [ case (eq_nat_dec x n) | ]; intros;\n    (* In each case, [lookup_insert] simplifies the goal. *)\n    repeat lookup_insert; eauto.\n  Qed.\n\n  Lemma subsume_cons:\n    forall o e1 e2,\n    osub o (lookup 0 e2) ->\n    subsume e1 (tl e2) ->\n    subsume (o :: e1) e2.\n  Proof.\n    do 3 intro. intros h1 h2. intro n. destruct n.\n    eauto.\n    do 2 rewrite lookup_successor. eauto.\n  Qed.\n\n  Lemma subsume_cons_cons_inversion:\n    forall o1 o2 e1 e2,\n    subsume (o1 :: e1) (o2 :: e2) ->\n    osub o1 o2 /\\\n    subsume e1 e2.\n  Proof.\n    do 4 intro. intro h.\n    split.\n    eapply (h 0).\n    intro n. eapply (h (1 + n)).\n  Qed.\n\n  Lemma subsume_insert_inversion:\n    forall e1 x a2 e2,\n    subsume e1 (insert x a2 e2) ->\n    exists f1 a1,\n    e1 = insert x a1 f1 /\\\n    subsume f1 e2 /\\\n    sub a1 a2.\n  Proof.\n    (* Really painful. *)\n    induction e1; simpl; intros.\n    (* Base. *)\n    elimtype False.\n    match goal with h: subsume nil _ |- _ =>\n      generalize (h x); clear h; intro h;\n      rewrite lookup_insert_bingo in h by reflexivity;\n      rewrite lookup_empty_None in h\n    end.\n    solve [ eauto using osub_None_Some ].\n    (* Step. *)\n    destruct x.\n    (* Case [x = 0]. *)\n    match goal with h: subsume _ _ |- _ =>\n      rewrite raw_insert_zero in h;\n      generalize (subsume_cons_cons_inversion h); clear h; intros [ h? ];\n      generalize (osub_Some_inversion h); intros [? [?? ]]; subst\n    end.\n    do 2 eexists.\n    rewrite raw_insert_zero.\n    solve [ eauto ].\n    (* Case [x > 0]. *)\n    match goal with h: subsume _ _ |- _ =>\n      rewrite raw_insert_successor in h;\n      generalize (subsume_cons_cons_inversion h); clear h; intros [? h ];\n      generalize (IHe1 _ _ _ h); clear IHe1; intros [ f1 [ a1 [? [?? ]]]]; subst\n    end.\n    exists (a :: f1). exists a1.\n    rewrite raw_insert_successor. simpl.\n    split; [ | split ].\n    reflexivity.\n    eauto using subsume_cons.\n    eauto.\n  Qed.\n\n  (* Applying a transformation [f] pointwise to two environments preserves\n     environment subsumption, provided [f] preserves [sub]. *)\n\n  ",
                "context_tokens": 708,
                "proof_start_offset": 27904,
                "proof_end_offset": 28289,
                "proof": "Lemma subsume_map: forall f, (forall a1 a2, sub a1 a2 -> sub (f a1) (f a2)) -> forall e1 e2, subsume e1 e2 -> subsume (map f e1) (map f e2).\nProof.\nintros ? hf ? ? hs.\nintros ? b2 hlm2.\ngeneralize (lookup_map_some_reverse _ _ _ hlm2); intros [ ? [ hl2 ? ]].\nsubst.\ngeneralize (hs _ _ hl2); intros [ a1 [ ? ? ]].\neauto using lookup_map_some.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma subsume_map: forall f, (forall a1 a2, sub a1 a2 -> sub (f a1) (f a2)) -> forall e1 e2, subsume e1 e2 -> subsume (map f e1) (map f e2).\n  Proof.\n    do 2 intro.\n    destruct e1; simpl; intros;\n    try solve [inversion H1 | subst;\n      try solve [inversion H1 | subst;\n      try solve [inversion H1 | subst;\n      try solve [inversion H1 | subst;\n      try solve [inversion H1; subst;\n      try solve [inversion H1; subst;\n      try solve [inversion H1; subst;\n      try solve [inversion H1; subst;\n      try solve [inversion H1; subst;\n      try solve [inversion H1; subst;\n      try solve [inversion H1; subst;\n      try solve [inversion H1; subst;\n      try solve [inversion H1; subst;\n      try solve [inversion H1; subst;\n      try solve [inversion H1; subst;\n      try solve [inversion H1; subst;\n      try solve [inversion H1; subst;\n      try solve [inversion H1; subst;\n      try solve [inversion H1; subst;\n      try solve [inversion H1; subst;\n      try solve [inversion H1; subst;\n      try solve [inversion H1; subst;\n      try solve [inversion H1; subst;\n      try solve [inversion H1; substQed.",
                    "Lemma subsume_map: forall f, (forall a1 a2, sub a1 a2 -> sub (f a1) (f a2)) -> forall e1 e2, subsume e1 e2 -> subsume (map f e1) (map f e2).\n  Proof.\n    do 3 intro.\n    induction e1; simpl; intros.\n    destruct e1; simpl; intros.\n    destruct e2; simpl; intros.\n    destruct e2; simpl; intros.\n    destruct e2; simpl; intros.\n    destruct e2; simpl; intros.\n    destruct e2; simpl; intros.\n    destruct e2; simpl; intros.\n    destruct e2; simpl; intros.\n    destruct e2; simpl; intros.\n    destruct e2; simpl; intros.\n    destruct e3; simpl; intros.\n    destruct e3; simpl; intros.\n    destruct e2; simpl; intros.\n    destruct e3; simpl; intros.\n    destruct e3; simpl; intros.\n    destruct e3; simpl; intros.\n    destruct e3; simpl; intros.\n    destruct e3; simpl; intros.\n    destruct e3; simpl; intros.\n    destruct e3; simpl; intros.\n    destruct e3; simpl; intros.\n    destruct e3; simpl; intros.\n    destruct e3; simpl; intros.\n    destruct e3; simpl; intros.\n    destruct e3; simpl; intros.\n    destruct e3; simpl; intros.\n    destruct e3;Qed.",
                    "Lemma subsume_map: forall f, (forall a1 a2, sub a1 a2 -> sub (f a1) (f a2)) -> forall e1 e2, subsume e1 e2 -> subsume (map f e1) (map f e2).\n  Proof.\n    intros.\n    unfold subsume_map.\n    do 3 intro.\n    rewrite (proj1_sig e); clear e2; intros [ | | ].\n    destruct x; simpl in *.\n    rewrite (proj2_sig e); clear e2; intros [ | | ].\n    destruct x; simpl in *.\n    rewrite (proj2_sig e); clear e2; intros [ | ].\n    destruct x; simpl in *.\n    rewrite (proj2_sig e); clear e2; intros [ | ].\n    destruct x; simpl in *.\n    rewrite (proj2_sig e); clear e2; intros [ | ].\n    destruct x; simpl in *.\n    rewrite (proj2_sig e); clear e2; intros [ | ].\n    destruct x; simpl in *.\n    rewrite (proj2_sig e); clear e2; intros [ | ].\n    destruct x; simpl in *.\n    rewrite (proj2_sig e); clear e2; intros [ | ].\n    destruct x; simpl in *.\n    rewrite (proj2_sig e); clear e2; intros [ | ].\n    destruct x; simpl in *.\n    rewrite (proj2_sig e); clear e2; intros [ | ].\n    destruct x;Qed.",
                    "Lemma subsume_map: forall f, (forall a1 a2, sub a1 a2 -> sub (f a1) (f a2)) -> forall e1 e2, subsume e1 e2 -> subsume (map f e1) (map f e2).\n  Proof.\n    unfold subsume_map, lift1.\n    do 2 eexists; repeat split; [reflexivity | split].\n    - exists (a1 :: f1); split; [reflexivity | split].\n    - exists (a1 :: f2); split; [reflexivity | split].\n      + exists (a1 :: f2); split; [reflexivity | split].\n      * exists (a2 :: f1); split; [reflexivity | split].\n        * exists (a1 :: f2); split; [reflexivity | split].\n        * exists (a1 :: f2); split; [reflexivity | split].\n        * exists (a1 :: f2); split; [reflexivity | split].\n        * exists (a1 :: f2); split; [reflexivity | split].\n        * exists (a1 :: f2); split; [reflexivity | split].\n          * exists (a2 :: f2); split; [reflexivity | split].\n          * exists (a1 :: f2); split; [reflexivity | split].\n            * exists (a1 :: f2); split; [reflexivity | split].\n            * exists (a1 :: f2); split; [reflexivity | split].\n            * exists (a1 :: f2);Qed.",
                    "Lemma subsume_map: forall f, (forall a1 a2, sub a1 a2 -> sub (f a1) (f a2)) -> forall e1 e2, subsume e1 e2 -> subsume (map f e1) (map f e2).\n  Proof.\n    intros.\n    apply (h x); auto.\n    apply (h x); auto.\n    apply (h x); auto.\n    apply (h x); auto.\n    apply (h x); auto.\n    apply (h x); auto.\n  Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "l with h: subsume nil _ |- _ =>\n      generalize (h x); clear h; intro h;\n      rewrite lookup_insert_bingo in h by reflexivity;\n      rewrite lookup_empty_None in h\n    end.\n    solve [ eauto using osub_None_Some ].\n    (* Step. *)\n    destruct x.\n    (* Case [x = 0]. *)\n    match goal with h: subsume _ _ |- _ =>\n      rewrite raw_insert_zero in h;\n      generalize (subsume_cons_cons_inversion h); clear h; intros [ h? ];\n      generalize (osub_Some_inversion h); intros [? [?? ]]; subst\n    end.\n    do 2 eexists.\n    rewrite raw_insert_zero.\n    solve [ eauto ].\n    (* Case [x > 0]. *)\n    match goal with h: subsume _ _ |- _ =>\n      rewrite raw_insert_successor in h;\n      generalize (subsume_cons_cons_inversion h); clear h; intros [? h ];\n      generalize (IHe1 _ _ _ h); clear IHe1; intros [ f1 [ a1 [? [?? ]]]]; subst\n    end.\n    exists (a :: f1). exists a1.\n    rewrite raw_insert_successor. simpl.\n    split; [ | split ].\n    reflexivity.\n    eauto using subsume_cons.\n    eauto.\n  Qed.\n\n  (* Applying a transformation [f] pointwise to two environments preserves\n     environment subsumption, provided [f] preserves [sub]. *)\n\n  Lemma subsume_map:\n    forall f,\n    (forall a1 a2, sub a1 a2 -> sub (f a1) (f a2)) ->\n    forall e1 e2,\n    subsume e1 e2 ->\n    subsume (map f e1) (map f e2).\n  Proof.\n    intros? hf?? hs. intros? b2 hlm2.\n    generalize (lookup_map_some_reverse _ _ _ hlm2); intros [? [ hl2? ]]. subst.\n    generalize (hs _ _ hl2); intros [ a1 [?? ]].\n    eauto using lookup_map_some.\n  Qed.\n\nEnd Subsume.\n\nHint Resolve osub_reflexive osub_Some_Some subsume_reflexive\nsubsume_transitive subsume_empty subsume_insert subsume_map : subsume.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Extending an environment with a list of bindings found in a pattern. *)\n\n(* Note that we cannot define the concatenation of two environments, because\n   we view environments as total functions, so we do not have precise control\n   over their domain. Only a list has finite domain. *)\n\n(* Concatenation is just an iterated version of [insert 0]. *)\n\nFixpoint concat (A : Type) (e1 : env A) (e2 : list A) : env A :=\n  match e2 with\n  | nil =>\n      e1\n  | cons a e2 =>\n      concat (insert 0 a e1) e2\n  end.\n\n(* Concatenation acts upon the length of the environment in an obvious\n   manner. *)\n\n",
                "context_tokens": 660,
                "proof_start_offset": 29118,
                "proof_end_offset": 29198,
                "proof": "Lemma omega_hint_1: forall n, n <= (n + 1) - 1.\nProof.\nintros.\nomega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma omega_hint_1: forall n, n <= (n + 1) - 1.\nProof.\n  intros.\n  generalize (IH (fun a => map (fun a => map (fun a => map (fun a => map (fun a => map (fun a => map (fun a => map (fun a => map (fun a => map (fun a => map (fun a => map (fun a => map (fun a => map (fun a => map (fun a => map a))) (fun a => map (fun a => map (fun a => map (fun a => map (fun a => map (fun a => map (fun a => map (fun a => map a))) (fun a => map (fun a => map (fun a => map (fun a => map (fun a => map (fun a => map a))) (fun a => map (fun a => map (fun a => map (fun a => map a))) (fun a => map (fun a => map (fun a => map (fun a => map (fun a => map (fun a => map (fun a => map a))) (fun a => map (fun a => map (fun a => map (fun a => map (fun a => map (fun a => map a))) (fun a =>Qed.",
                    "Lemma omega_hint_1: forall n, n <= (n + 1) - 1.\nProof.\n  intros.\n  induction e1; intros; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3;Qed.",
                    "Lemma omega_hint_1: forall n, n <= (n + 1) - 1.\nProof.\n  intros.\n  destruct n; try solve [auto | auto].\n  destruct n; try solve [auto].\n  destruct n; try solve [auto].\n  destruct n; try solve [auto].\n  destruct n; try solve [auto].\n  destruct n; try solve [auto].\n  destruct n; try solve [auto].\n  destruct n; try solve [auto].\n  destruct n; try solve [auto].\n  destruct n; try solve [auto].\n  destruct n; try solve [auto].\n  destruct n; try solve [auto].\n  destruct n; try solve [auto].\n  destruct n; try solve [auto].\n  destruct n; try solve [auto].\n  destruct n; try solve [auto].\n  destruct n; try solve [auto].\n  destruct n; try solve [auto].\n  destruct n; try solve [auto].\n  destruct n; try solve [auto].\n  destruct n; try solve [auto].\n  destruct n; try solve [auto].\n  destruct n; try solve [auto].\n  destruct n; try solve [auto].\n  destruct n; try solve [auto].\n  destruct n; try solve [auto].\n  destruct n; try solve [auto].\n  destruct n; tryQed.",
                    "Lemma omega_hint_1: forall n, n <= (n + 1) - 1.\nProof.\n  induction n; intros; simpl; auto.\n  intros; destruct e1; destruct e2; destruct e2; destruct e2; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3; destruct e3;Qed.",
                    "Lemma omega_hint_1: forall n, n <= (n + 1) - 1.\nProof.\n  intros.\n  generalize (eq_refl n).\n  induction n.\n  - intros.\n    + simpl.\n    + simpl.\n    + simpl.\n    + simpl.\n    + simpl.\n    + simpl.\n    + simpl.\n    + simpl.\n    + simpl.\n      + simpl.\n      + simpl.\n      + simpl.\n      + simpl.\n      + simpl.\n      + simpl.\n      + simpl.\n      + simpl.\n      + simpl.\n      + simpl.\n      + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        + simpl.\n        +Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "   end.\n    solve [ eauto using osub_None_Some ].\n    (* Step. *)\n    destruct x.\n    (* Case [x = 0]. *)\n    match goal with h: subsume _ _ |- _ =>\n      rewrite raw_insert_zero in h;\n      generalize (subsume_cons_cons_inversion h); clear h; intros [ h? ];\n      generalize (osub_Some_inversion h); intros [? [?? ]]; subst\n    end.\n    do 2 eexists.\n    rewrite raw_insert_zero.\n    solve [ eauto ].\n    (* Case [x > 0]. *)\n    match goal with h: subsume _ _ |- _ =>\n      rewrite raw_insert_successor in h;\n      generalize (subsume_cons_cons_inversion h); clear h; intros [? h ];\n      generalize (IHe1 _ _ _ h); clear IHe1; intros [ f1 [ a1 [? [?? ]]]]; subst\n    end.\n    exists (a :: f1). exists a1.\n    rewrite raw_insert_successor. simpl.\n    split; [ | split ].\n    reflexivity.\n    eauto using subsume_cons.\n    eauto.\n  Qed.\n\n  (* Applying a transformation [f] pointwise to two environments preserves\n     environment subsumption, provided [f] preserves [sub]. *)\n\n  Lemma subsume_map:\n    forall f,\n    (forall a1 a2, sub a1 a2 -> sub (f a1) (f a2)) ->\n    forall e1 e2,\n    subsume e1 e2 ->\n    subsume (map f e1) (map f e2).\n  Proof.\n    intros? hf?? hs. intros? b2 hlm2.\n    generalize (lookup_map_some_reverse _ _ _ hlm2); intros [? [ hl2? ]]. subst.\n    generalize (hs _ _ hl2); intros [ a1 [?? ]].\n    eauto using lookup_map_some.\n  Qed.\n\nEnd Subsume.\n\nHint Resolve osub_reflexive osub_Some_Some subsume_reflexive\nsubsume_transitive subsume_empty subsume_insert subsume_map : subsume.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Extending an environment with a list of bindings found in a pattern. *)\n\n(* Note that we cannot define the concatenation of two environments, because\n   we view environments as total functions, so we do not have precise control\n   over their domain. Only a list has finite domain. *)\n\n(* Concatenation is just an iterated version of [insert 0]. *)\n\nFixpoint concat (A : Type) (e1 : env A) (e2 : list A) : env A :=\n  match e2 with\n  | nil =>\n      e1\n  | cons a e2 =>\n      concat (insert 0 a e1) e2\n  end.\n\n(* Concatenation acts upon the length of the environment in an obvious\n   manner. *)\n\nLemma omega_hint_1:\n  forall n,\n  n <= (n + 1) - 1.\nProof.\n  intros. omega.\nQed.\n\n",
                "context_tokens": 650,
                "proof_start_offset": 29200,
                "proof_end_offset": 29478,
                "proof": "Lemma length_concat: forall A (e2 : list A) (e1 : env A) n1 n, length e1 <= n1 -> n1 + length e2 = n -> length (concat e1 e2) <= n.\nProof.\ninduction e2; simpl; intros.\nreplace n with n1 by omega.\nassumption.\neauto using length_insert, omega_hint_1 with omega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma length_concat: forall A (e2 : list A) (e1 : env A) n1 n, length e1 <= n1 -> n1 + length e2 = n -> length (concat e1 e2) <= n.\nProof.\n  intros.\n  unfold concat.\n  induction n1; simpl; intros; auto.\n  destruct e1; simpl; auto.\n  destruct e1; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e2; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n  destruct e3; simpl; auto.\n Qed.",
                    "Lemma length_concat: forall A (e2 : list A) (e1 : env A) n1 n, length e1 <= n1 -> n1 + length e2 = n -> length (concat e1 e2) <= n.\nProof.\n  intros.\n  rewrite length_concat.\n  destruct (concat_inv _ _ _ _ _ _ _ _ _ _ H); clear H; intros.\n  destruct (IH _ _ _ _ _ _ H); clear H; intros.\n  destruct (IH _ _ _ H); clear H; intros; subst.\n  destruct (IH _ _ _ _ H); clear H; intros.\n  destruct (IH _ _ _ H); clear H; intros.\n  destruct (IH _ _ _ H); clear H; intros.\n  destruct (IH _ _ _ H); clear H; intros.\n  destruct (IH _ _ _ H); clear H; intros.\n  destruct (IH _ _ H); clear H; intros.\n  destruct (IH _ _ _ H); clear H; intros.\n  destruct (IH _ _ _ H); clear H; intros.\n  destruct (IH _ _ H); clear H; intros.\n  destruct (IH _ _ _ H); clear H; intros.\n  destruct (IH _ _ H); clear H; intros.\n  destruct (IH _ _ _ H); clear H; intros.\n  destruct (IH _ _ _ H); clear H; intros.\n  destruct (IH _ _ _ _Qed.",
                    "Lemma length_concat: forall A (e2 : list A) (e1 : env A) n1 n, length e1 <= n1 -> n1 + length e2 = n -> length (concat e1 e2) <= n.\nProof.\n  intros.\n  destruct e1; simpl; auto.\nQed.",
                    "Lemma length_concat: forall A (e2 : list A) (e1 : env A) n1 n, length e1 <= n1 -> n1 + length e2 = n -> length (concat e1 e2) <= n.\nProof.\n  intros.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_concat.\n  rewrite length_Qed.",
                    "Lemma length_concat: forall A (e2 : list A) (e1 : env A) n1 n, length e1 <= n1 -> n1 + length e2 = n -> length (concat e1 e2) <= n.\nProof.\n  intros.\n  destruct e1; simpl in *.\n  destruct e2; simpl in *.\n  destruct e2; simpl in *.\n  destruct e2; simpl in *.\n  destruct e2; simpl in *.\n  destruct e2; simpl in *.\n  destruct e2; simpl in *.\n  destruct e2; simpl in *.\n  destruct e2; simpl in *.\n  destruct e2; simpl in *.\n  destruct e2; simpl in *.\n  destruct e2; simpl in *.\n  destruct e2; simpl in *.\n  destruct e2; simpl in *.\n  destruct e2; simpl in *.\n  destruct e2; simpl in *.\n  destruct e2; simpl in *.\n  destruct e2; simpl in *.\n  destruct e3; simpl in *.\n  destruct e2; simpl in *.\n  destruct e3; simpl in *.\n  destruct e3; simpl in *.\n  destruct e3; simpl in *.\n  destruct e3; simpl in *.\n  destruct e3; simpl in *.\n  destruct e3; simpl in *.\n  destruct e3; simpl in *.\n  destruct e3; simpl in *.\n  destruct e3; simpl in *.\n  destruct e3; simpl in *.\n  destruct e3; simpl in *.\n  destructQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " raw_insert_successor in h;\n      generalize (subsume_cons_cons_inversion h); clear h; intros [? h ];\n      generalize (IHe1 _ _ _ h); clear IHe1; intros [ f1 [ a1 [? [?? ]]]]; subst\n    end.\n    exists (a :: f1). exists a1.\n    rewrite raw_insert_successor. simpl.\n    split; [ | split ].\n    reflexivity.\n    eauto using subsume_cons.\n    eauto.\n  Qed.\n\n  (* Applying a transformation [f] pointwise to two environments preserves\n     environment subsumption, provided [f] preserves [sub]. *)\n\n  Lemma subsume_map:\n    forall f,\n    (forall a1 a2, sub a1 a2 -> sub (f a1) (f a2)) ->\n    forall e1 e2,\n    subsume e1 e2 ->\n    subsume (map f e1) (map f e2).\n  Proof.\n    intros? hf?? hs. intros? b2 hlm2.\n    generalize (lookup_map_some_reverse _ _ _ hlm2); intros [? [ hl2? ]]. subst.\n    generalize (hs _ _ hl2); intros [ a1 [?? ]].\n    eauto using lookup_map_some.\n  Qed.\n\nEnd Subsume.\n\nHint Resolve osub_reflexive osub_Some_Some subsume_reflexive\nsubsume_transitive subsume_empty subsume_insert subsume_map : subsume.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Extending an environment with a list of bindings found in a pattern. *)\n\n(* Note that we cannot define the concatenation of two environments, because\n   we view environments as total functions, so we do not have precise control\n   over their domain. Only a list has finite domain. *)\n\n(* Concatenation is just an iterated version of [insert 0]. *)\n\nFixpoint concat (A : Type) (e1 : env A) (e2 : list A) : env A :=\n  match e2 with\n  | nil =>\n      e1\n  | cons a e2 =>\n      concat (insert 0 a e1) e2\n  end.\n\n(* Concatenation acts upon the length of the environment in an obvious\n   manner. *)\n\nLemma omega_hint_1:\n  forall n,\n  n <= (n + 1) - 1.\nProof.\n  intros. omega.\nQed.\n\nLemma length_concat:\n  forall A (e2 : list A) (e1 : env A) n1 n,\n  length e1 <= n1 ->\n  n1 + length e2 = n ->\n  length (concat e1 e2) <= n.\nProof.\n  induction e2; simpl; intros.\n  replace n with n1 by omega. assumption.\n  eauto using length_insert, omega_hint_1 with omega.\nQed.\n\nHint Resolve length_concat : length construction_closed.\n\n(* If [e1] and [e2] agree up to depth [k], then, after extending them\n   with a common suffix [e], they agree up to depth [k + length e]. *)\n\n",
                "context_tokens": 670,
                "proof_start_offset": 29680,
                "proof_end_offset": 29946,
                "proof": "Lemma agree_concat: forall A (e : list A) (e1 e2 : env A) k n, agree e1 e2 k -> k + length e = n -> agree (concat e1 e) (concat e2 e) n.\nProof.\ninduction e; simpl; intros.\nreplace n with k by omega.\nassumption.\neauto using agree_insert with omega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma agree_concat: forall A (e : list A) (e1 e2 : env A) k n, agree e1 e2 k -> k + length e = n -> agree (concat e1 e) (concat e2 e) n.\nProof.\n  intros.\n  induction e1; simpl; intros.\n  + simpl.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewrite <- H.\n    rewriteQed.",
                    "Lemma agree_concat: forall A (e : list A) (e1 e2 : env A) k n, agree e1 e2 k -> k + length e = n -> agree (concat e1 e) (concat e2 e) n.\nProof.\n  intros.\n  assert (forall e2 e3, agree e1 e3 -> agree e3 e3 e3 e4 e4 e5 e6 e6 e7 e7 e7 e7 e7 e8 e8 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9Qed.",
                    "Lemma agree_concat: forall A (e : list A) (e1 e2 : env A) k n, agree e1 e2 k -> k + length e = n -> agree (concat e1 e) (concat e2 e) n.\nProof.\n  induction e1; simpl; intros.\n  replace (map f e1) with (map f e1) by omega.\n  replace (map f e1) with (map f e1) by omega.\n  replace (map f e1) with (map f e1) by omega.\n  replace (map f e1) with (map f e1) by omega.\n  replace (map f e1) with (map f e1) by omega.\n  replace (map f e1) with (map f e1) by omega.\n  replace (map f e1) with (map f e1) by omega.\n  replace (map f e1) with (map f e1) by omega.\n  replace (map f e2) with (map f e1) by omega.\n  replace (map f e1) with (map f e1) by omega.\n  replace (map f e1) with (map f e1) by omega.\n  replace (map f e1) with (map f e1) by omega.\n  replace (map f e1) with (map f e1) by omega.\n  replace (map f e1) with (Qed.",
                    "Lemma agree_concat: forall A (e : list A) (e1 e2 : env A) k n, agree e1 e2 k -> k + length e = n -> agree (concat e1 e) (concat e2 e) n.\nProof.\n  induction e2; simpl; intros.\n  replace n with n1 by omega.\n  rewrite <- (map_concat (map_concat (map_concat (map_concat (map_concat (map_concat (map_concat (map_concat (map_concat (map_concat (concat (map_concat (concat (map_concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concatQed.",
                    "Lemma agree_concat: forall A (e : list A) (e1 e2 : env A) k n, agree e1 e2 k -> k + length e = n -> agree (concat e1 e) (concat e2 e) n.\nProof.\n  intros.\n  destruct e1; simpl.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <- H.\n  rewrite <-Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " a transformation [f] pointwise to two environments preserves\n     environment subsumption, provided [f] preserves [sub]. *)\n\n  Lemma subsume_map:\n    forall f,\n    (forall a1 a2, sub a1 a2 -> sub (f a1) (f a2)) ->\n    forall e1 e2,\n    subsume e1 e2 ->\n    subsume (map f e1) (map f e2).\n  Proof.\n    intros? hf?? hs. intros? b2 hlm2.\n    generalize (lookup_map_some_reverse _ _ _ hlm2); intros [? [ hl2? ]]. subst.\n    generalize (hs _ _ hl2); intros [ a1 [?? ]].\n    eauto using lookup_map_some.\n  Qed.\n\nEnd Subsume.\n\nHint Resolve osub_reflexive osub_Some_Some subsume_reflexive\nsubsume_transitive subsume_empty subsume_insert subsume_map : subsume.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Extending an environment with a list of bindings found in a pattern. *)\n\n(* Note that we cannot define the concatenation of two environments, because\n   we view environments as total functions, so we do not have precise control\n   over their domain. Only a list has finite domain. *)\n\n(* Concatenation is just an iterated version of [insert 0]. *)\n\nFixpoint concat (A : Type) (e1 : env A) (e2 : list A) : env A :=\n  match e2 with\n  | nil =>\n      e1\n  | cons a e2 =>\n      concat (insert 0 a e1) e2\n  end.\n\n(* Concatenation acts upon the length of the environment in an obvious\n   manner. *)\n\nLemma omega_hint_1:\n  forall n,\n  n <= (n + 1) - 1.\nProof.\n  intros. omega.\nQed.\n\nLemma length_concat:\n  forall A (e2 : list A) (e1 : env A) n1 n,\n  length e1 <= n1 ->\n  n1 + length e2 = n ->\n  length (concat e1 e2) <= n.\nProof.\n  induction e2; simpl; intros.\n  replace n with n1 by omega. assumption.\n  eauto using length_insert, omega_hint_1 with omega.\nQed.\n\nHint Resolve length_concat : length construction_closed.\n\n(* If [e1] and [e2] agree up to depth [k], then, after extending them\n   with a common suffix [e], they agree up to depth [k + length e]. *)\n\nLemma agree_concat:\n  forall A (e : list A) (e1 e2 : env A) k n,\n  agree e1 e2 k ->\n  k + length e = n ->\n  agree (concat e1 e) (concat e2 e) n.\nProof.\n  induction e; simpl; intros.\n  replace n with k by omega. assumption.\n  eauto using agree_insert with omega.\nQed.\n\nHint Resolve agree_concat : agree.\n\n(* Concatenation and insertion commute. *)\n\n",
                "context_tokens": 672,
                "proof_start_offset": 30028,
                "proof_end_offset": 30412,
                "proof": "Lemma insert_concat: forall (A : Type) n x nx (o : option A) e1 e2, length e2 = n -> n + x = nx -> raw_insert nx o (concat e1 e2) = concat (raw_insert x o e1) e2.\nProof.\ninduction n; intros; subst; destruct e2; simpl in *; try discriminate; auto.\nrewrite insert_insert by omega.\nerewrite <- (IHn (1 + x)) by first [ congruence | eauto ].\neauto with f_equal omega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma insert_concat: forall (A : Type) n x nx (o : option A) e1 e2, length e2 = n -> n + x = nx -> raw_insert nx o (concat e1 e2) = concat (raw_insert x o e1) e2.\nProof.\n  induction e1; simpl; intros.\n  replace n with (S n) by omega.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewriteQed.",
                    "Lemma insert_concat: forall (A : Type) n x nx (o : option A) e1 e2, length e2 = n -> n + x = nx -> raw_insert nx o (concat e1 e2) = concat (raw_insert x o e1) e2.\nProof.\n  induction e1; simpl; intros.\n  replace n with (n + 1) by omega.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n Qed.",
                    "Lemma insert_concat: forall (A : Type) n x nx (o : option A) e1 e2, length e2 = n -> n + x = nx -> raw_insert nx o (concat e1 e2) = concat (raw_insert x o e1) e2.\nProof.\n  induction e1; simpl; intros.\n  replace n with (map (fun e => if eq_dec e1 e2 then Some e1 else Some e2 else Some e2).\n  apply insert_concat; auto.\nQed.",
                    "Lemma insert_concat: forall (A : Type) n x nx (o : option A) e1 e2, length e2 = n -> n + x = nx -> raw_insert nx o (concat e1 e2) = concat (raw_insert x o e1) e2.\nProof.\n  induction e1; simpl; intros.\n  replace (nth 0 e1 e2) with (nth 0 e1 e2) by omega.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_Qed.",
                    "Lemma insert_concat: forall (A : Type) n x nx (o : option A) e1 e2, length e2 = n -> n + x = nx -> raw_insert nx o (concat e1 e2) = concat (raw_insert x o e1) e2.\nProof.\n  induction e1; simpl; intros.\n  replace n with (length e1) by omega.\n  rewrite <- insert_concat; auto.\n  rewrite <- insert_concat; auto.\n  rewrite <- insert_concat; auto.\n  rewrite <- insert_concat; auto.\n  rewrite <- insert_concat; auto.\n  rewrite <- insert_concat; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "flexive\nsubsume_transitive subsume_empty subsume_insert subsume_map : subsume.\n\n(* ---------------------------------------------------------------------------- *)\n\n(* Extending an environment with a list of bindings found in a pattern. *)\n\n(* Note that we cannot define the concatenation of two environments, because\n   we view environments as total functions, so we do not have precise control\n   over their domain. Only a list has finite domain. *)\n\n(* Concatenation is just an iterated version of [insert 0]. *)\n\nFixpoint concat (A : Type) (e1 : env A) (e2 : list A) : env A :=\n  match e2 with\n  | nil =>\n      e1\n  | cons a e2 =>\n      concat (insert 0 a e1) e2\n  end.\n\n(* Concatenation acts upon the length of the environment in an obvious\n   manner. *)\n\nLemma omega_hint_1:\n  forall n,\n  n <= (n + 1) - 1.\nProof.\n  intros. omega.\nQed.\n\nLemma length_concat:\n  forall A (e2 : list A) (e1 : env A) n1 n,\n  length e1 <= n1 ->\n  n1 + length e2 = n ->\n  length (concat e1 e2) <= n.\nProof.\n  induction e2; simpl; intros.\n  replace n with n1 by omega. assumption.\n  eauto using length_insert, omega_hint_1 with omega.\nQed.\n\nHint Resolve length_concat : length construction_closed.\n\n(* If [e1] and [e2] agree up to depth [k], then, after extending them\n   with a common suffix [e], they agree up to depth [k + length e]. *)\n\nLemma agree_concat:\n  forall A (e : list A) (e1 e2 : env A) k n,\n  agree e1 e2 k ->\n  k + length e = n ->\n  agree (concat e1 e) (concat e2 e) n.\nProof.\n  induction e; simpl; intros.\n  replace n with k by omega. assumption.\n  eauto using agree_insert with omega.\nQed.\n\nHint Resolve agree_concat : agree.\n\n(* Concatenation and insertion commute. *)\n\nLemma insert_concat:\n  forall (A : Type) n x nx (o : option A) e1 e2,\n  length e2 = n ->\n  n + x = nx ->\n  raw_insert nx o (concat e1 e2) = concat (raw_insert x o e1) e2.\nProof.\n  induction n; intros; subst; destruct e2; simpl in *; try discriminate; auto.\n  rewrite insert_insert by omega.\n  erewrite <- (IHn (1 + x)) by first [ congruence | eauto ].\n  eauto with f_equal omega.\nQed.\n\n(* [replicate n a] is a list of [n] elements, all of which are\n   equal to [a]. *)\n\nFixpoint replicate (A : Type) (n : nat) (a : A) : list A :=\n  match n with\n  | 0 =>\n      @nil _\n  | S n =>\n      cons a (replicate n a)\n  end.\n\n(* The list [replicate n a] has length [n]. *)\n\n",
                "context_tokens": 712,
                "proof_start_offset": 30691,
                "proof_end_offset": 30815,
                "proof": "Lemma length_replicate: forall (A : Type) n (a : A), length (replicate n a) = n.\nProof.\ninduction n; simpl; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma length_replicate: forall (A : Type) n (a : A), length (replicate n a) = n.\nProof.\n  induction n; simpl; intros.\n  rewrite nth_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_map.\n  rewrite map_mapQed.",
                    "Lemma length_replicate: forall (A : Type) n (a : A), length (replicate n a) = n.\nProof.\n  induction n; simpl; intros.\n  replace n with 0 by omega.\n  replace n with (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (length (Qed.",
                    "Lemma length_replicate: forall (A : Type) n (a : A), length (replicate n a) = n.\nProof.\n  induction n; intros.\n  simpl; auto.\n  rewrite nth_map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.\n  rewrite map_length.Qed.",
                    "Lemma length_replicate: forall (A : Type) n (a : A), length (replicate n a) = n.\nProof.\n  induction n; simpl; intros.\n  + simpl; intros.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n    rewrite <- app_assoc.\n   Qed.",
                    "Lemma length_replicate: forall (A : Type) n (a : A), length (replicate n a) = n.\nProof.\n  induction n; simpl; intros.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  rewrite rev_involutiveQed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": " not have precise control\n   over their domain. Only a list has finite domain. *)\n\n(* Concatenation is just an iterated version of [insert 0]. *)\n\nFixpoint concat (A : Type) (e1 : env A) (e2 : list A) : env A :=\n  match e2 with\n  | nil =>\n      e1\n  | cons a e2 =>\n      concat (insert 0 a e1) e2\n  end.\n\n(* Concatenation acts upon the length of the environment in an obvious\n   manner. *)\n\nLemma omega_hint_1:\n  forall n,\n  n <= (n + 1) - 1.\nProof.\n  intros. omega.\nQed.\n\nLemma length_concat:\n  forall A (e2 : list A) (e1 : env A) n1 n,\n  length e1 <= n1 ->\n  n1 + length e2 = n ->\n  length (concat e1 e2) <= n.\nProof.\n  induction e2; simpl; intros.\n  replace n with n1 by omega. assumption.\n  eauto using length_insert, omega_hint_1 with omega.\nQed.\n\nHint Resolve length_concat : length construction_closed.\n\n(* If [e1] and [e2] agree up to depth [k], then, after extending them\n   with a common suffix [e], they agree up to depth [k + length e]. *)\n\nLemma agree_concat:\n  forall A (e : list A) (e1 e2 : env A) k n,\n  agree e1 e2 k ->\n  k + length e = n ->\n  agree (concat e1 e) (concat e2 e) n.\nProof.\n  induction e; simpl; intros.\n  replace n with k by omega. assumption.\n  eauto using agree_insert with omega.\nQed.\n\nHint Resolve agree_concat : agree.\n\n(* Concatenation and insertion commute. *)\n\nLemma insert_concat:\n  forall (A : Type) n x nx (o : option A) e1 e2,\n  length e2 = n ->\n  n + x = nx ->\n  raw_insert nx o (concat e1 e2) = concat (raw_insert x o e1) e2.\nProof.\n  induction n; intros; subst; destruct e2; simpl in *; try discriminate; auto.\n  rewrite insert_insert by omega.\n  erewrite <- (IHn (1 + x)) by first [ congruence | eauto ].\n  eauto with f_equal omega.\nQed.\n\n(* [replicate n a] is a list of [n] elements, all of which are\n   equal to [a]. *)\n\nFixpoint replicate (A : Type) (n : nat) (a : A) : list A :=\n  match n with\n  | 0 =>\n      @nil _\n  | S n =>\n      cons a (replicate n a)\n  end.\n\n(* The list [replicate n a] has length [n]. *)\n\nLemma length_replicate:\n  forall (A : Type) n (a : A),\n  length (replicate n a) = n.\nProof.\n  induction n; simpl; auto.\nQed.\n\n(* A special case of [insert_concat]. *)\n\n",
                "context_tokens": 701,
                "proof_start_offset": 30859,
                "proof_end_offset": 31110,
                "proof": "Lemma insert_concat_replicate: forall (A : Type) n x nx (a : option A) (b : A) e1, n + x = nx -> raw_insert nx a (concat e1 (replicate n b)) = concat (raw_insert x a e1) (replicate n b).\nProof.\neauto using insert_concat, length_replicate.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma insert_concat_replicate: forall (A : Type) n x nx (a : option A) (b : A) e1, n + x = nx -> raw_insert nx a (concat e1 (replicate n b)) = concat (raw_insert x a e1) (replicate n b).\nProof.\n  induction n; simpl; intros.\n  rewrite insert_concat_value by omega.\n  rewrite insert_concat_value by omega.\n  rewrite insert_concat_value by omega.\n  rewrite insert_concat_value by omega.\n  rewrite insert_concat_value by omega.\n  rewrite insert_concat_value by omega.\n  rewrite insert_concat_value by omega.\n  rewrite insert_concat_value by omega.\n  rewrite insert_concat_value by omega.\n  rewrite insert_concat_value by omega.\n  rewrite insert_concat_value by omega.\n  rewrite insert_concat_value by omega.\n  rewrite insert_concat_value by omega.\n  rewrite insert_concat_value by omega.\n  rewrite insert_concat_value by omega.\n  rewrite insert_concat_value by omega.\n  rewrite insert_concat_value by omega.\n  rewrite insert_concat_value by omega.\n  rewrite insert_concat_value by omega.\n  rewrite insert_concat_value by omega.\n  rewrite insert_concat_value by omega.\n  rewrite insert_concat_value by omega.\n  rewrite insert_concat_value by omega.\n  rewrite insert_concat_value by omega.\n  rewrite insert_concatQed.",
                    "Lemma insert_concat_replicate: forall (A : Type) n x nx (a : option A) (b : A) e1, n + x = nx -> raw_insert nx a (concat e1 (replicate n b)) = concat (raw_insert x a e1) (replicate n b).\nProof.\n  induction n; simpl; intros.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_spec.\n  rewrite insert_concat_specQed.",
                    "Lemma insert_concat_replicate: forall (A : Type) n x nx (a : option A) (b : A) e1, n + x = nx -> raw_insert nx a (concat e1 (replicate n b)) = concat (raw_insert x a e1) (replicate n b).\nProof.\n  induction n; simpl; intros.\n  + rewrite <- insert_concat_r by omega.\n    rewrite insert_concat_r by omega.\n    rewrite insert_concat_r by omega.\n    rewrite insert_concat_r by omega.\n    rewrite insert_concat_r by omega.\n    rewrite insert_concat_r by omega.\n    rewrite insert_concat_r by omega.\n    rewrite insert_concat_r by omega.\n    rewrite insert_concat_r by omega.\n    rewrite insert_concat_r by omega.\n    rewrite insert_concat_r by omega.\n    rewrite insert_concat_r by omega.\n    rewrite insert_concat_r by omega.\n    rewrite insert_concat_r by omega.\n    rewrite insert_concat_r by omega.\n    rewrite insert_concat_r by omega.\n    rewrite insert_concat_r by omega.\n    rewrite insert_concat_r by omega.\n    rewrite insert_concat_r by omega.\n    rewrite insert_concat_r by omega.\n    rewrite insert_concat_r by omega.\n    rewrite insert_concat_r by omega.\n    rewrite insert_concat_r by omega.\n    rewrite insert_concat_r by omega.\n    rewrite insertQed.",
                    "Lemma insert_concat_replicate: forall (A : Type) n x nx (a : option A) (b : A) e1, n + x = nx -> raw_insert nx a (concat e1 (replicate n b)) = concat (raw_insert x a e1) (replicate n b).\nProof.\n  induction n; simpl; intros.\n  replace n with (length (concat (fun a => default n a) (concat (fun a => default n a) (concat (fun a => default n a) (concat (fun a => default n a)) (concat (fun a => default n a)) (concat (fun a => default n a) (concat (fun a => default n a)) (concat (fun a => default n a)) (concat (fun a => default n a)) (concat (fun a => default n a)) (concat (fun a => default n a)) (concat (fun a => default n a)) (concat (fun a => default n a)) (concat (fun a => default n a)) (concat (fun a => default n a)) (concat (fun a => default)) (concat (fun a => default n a)) (concat (fun a => default)) (concat (fun a => default n a)) (concat (fun a => default)) (concat (fun a => default n a)) (concat (fun a => default)) (concat (fun a => default)) (concat (fun a => default n a)) (concat (fun a => default)) (Qed.",
                    "Lemma insert_concat_replicate: forall (A : Type) n x nx (a : option A) (b : A) e1, n + x = nx -> raw_insert nx a (concat e1 (replicate n b)) = concat (raw_insert x a e1) (replicate n b).\nProof.\n  induction n; simpl; intros.\n  rewrite <- insert_concat_l by omega.\n  rewrite insert_concat_l by omega.\n  rewrite insert_concat_r by omega.\n  rewrite insert_concat_r by omega.\n  rewrite insert_concat_r by omega.\n  rewrite insert_concat_r by omega.\n  rewrite insert_concat_r by omega.\n  rewrite insert_concat_r by omega.\n  rewrite insert_concat_r by omega.\n  rewrite insert_concat_r by omega.\n  rewrite insert_concat_r by omega.\n  rewrite insert_concat_r by omega.\n  rewrite insert_concat_r by omega.\n  rewrite insert_concat_r by omega.\n  rewrite insert_concat_r by omega.\n  rewrite insert_concat_r by omega.\n  rewrite insert_concat_r by omega.\n  rewrite insert_concat_r by omega.\n  rewrite insert_concat_r by omega.\n  rewrite insert_concat_r by omega.\n  rewrite insert_concat_r by omega.\n  rewrite insert_concat_r by omega.\n  rewrite insert_concat_r by omega.\n  rewrite insert_concat_r by omega.\n  rewrite insert_Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dblib/src/Environments.v",
                "context": "\n\n(* Concatenation acts upon the length of the environment in an obvious\n   manner. *)\n\nLemma omega_hint_1:\n  forall n,\n  n <= (n + 1) - 1.\nProof.\n  intros. omega.\nQed.\n\nLemma length_concat:\n  forall A (e2 : list A) (e1 : env A) n1 n,\n  length e1 <= n1 ->\n  n1 + length e2 = n ->\n  length (concat e1 e2) <= n.\nProof.\n  induction e2; simpl; intros.\n  replace n with n1 by omega. assumption.\n  eauto using length_insert, omega_hint_1 with omega.\nQed.\n\nHint Resolve length_concat : length construction_closed.\n\n(* If [e1] and [e2] agree up to depth [k], then, after extending them\n   with a common suffix [e], they agree up to depth [k + length e]. *)\n\nLemma agree_concat:\n  forall A (e : list A) (e1 e2 : env A) k n,\n  agree e1 e2 k ->\n  k + length e = n ->\n  agree (concat e1 e) (concat e2 e) n.\nProof.\n  induction e; simpl; intros.\n  replace n with k by omega. assumption.\n  eauto using agree_insert with omega.\nQed.\n\nHint Resolve agree_concat : agree.\n\n(* Concatenation and insertion commute. *)\n\nLemma insert_concat:\n  forall (A : Type) n x nx (o : option A) e1 e2,\n  length e2 = n ->\n  n + x = nx ->\n  raw_insert nx o (concat e1 e2) = concat (raw_insert x o e1) e2.\nProof.\n  induction n; intros; subst; destruct e2; simpl in *; try discriminate; auto.\n  rewrite insert_insert by omega.\n  erewrite <- (IHn (1 + x)) by first [ congruence | eauto ].\n  eauto with f_equal omega.\nQed.\n\n(* [replicate n a] is a list of [n] elements, all of which are\n   equal to [a]. *)\n\nFixpoint replicate (A : Type) (n : nat) (a : A) : list A :=\n  match n with\n  | 0 =>\n      @nil _\n  | S n =>\n      cons a (replicate n a)\n  end.\n\n(* The list [replicate n a] has length [n]. *)\n\nLemma length_replicate:\n  forall (A : Type) n (a : A),\n  length (replicate n a) = n.\nProof.\n  induction n; simpl; auto.\nQed.\n\n(* A special case of [insert_concat]. *)\n\nLemma insert_concat_replicate:\n  forall (A : Type) n x nx (a : option A) (b : A) e1,\n  n + x = nx ->\n  raw_insert nx a (concat e1 (replicate n b)) = concat (raw_insert x a e1) (replicate n b).\nProof.\n  eauto using insert_concat, length_replicate.\nQed.\n\n(* [concat. (replicate. a)] is just an iterated version of [insert. a]. *)\n\n",
                "context_tokens": 719,
                "proof_start_offset": 31191,
                "proof_end_offset": 31414,
                "proof": "Lemma concat_replicate_is_iterated_insert: forall (A : Type) n (a : A) e, insert n a (concat e (replicate n a)) = concat e (replicate (S n) a).\nProof.\nintros.\nsimpl.\neauto using insert_concat, length_replicate.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma concat_replicate_is_iterated_insert: forall (A : Type) n (a : A) e, insert n a (concat e (replicate n a)) = concat e (replicate (S n) a).\nProof.\n  induction n; simpl; intros.\n  rewrite <- insert_concat_rev by omega.\n  rewrite <- insert_concat_rev by omega.\n  rewrite <- insert_concat_rev by omega.\n  rewrite <- insert_concat_rev by omega.\n  rewrite insert_concat_rev by omega.\n  rewrite <- insert_concat_rev by omega.\n  rewrite insert_concat_rev by omega.\n  rewrite insert_concat_rev by omega.\n  rewrite insert_concat_rev by omega.\n  rewrite insert_concat_rev by omega.\n  rewrite insert_concat_rev by omega.\n  rewrite insert_concat_rev by omega.\n  rewrite insert_concat_rev by omega.\n  rewrite insert_concat_rev by omega.\n  rewrite insert_concat_rev by omega.\n  rewrite insert_concat_rev by omega.\n  rewrite insert_concat_rev by omega.\n  rewrite insert_concat_rev by omega.\n  rewrite insert_concat_rev by omega.\n  rewrite insert_concat_rev by omega.\n  rewrite insert_concat_rev by omega.\n  rewrite insert_concat_rev by omega.\n  rewrite insert_rev by omega.\n  rewrite insert_concat_rev by omega.\n  rewriteQed.",
                    "Lemma concat_replicate_is_iterated_insert: forall (A : Type) n (a : A) e, insert n a (concat e (replicate n a)) = concat e (replicate (S n) a).\nProof.\n  intros.\n  unfold fold_right.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concat.\n  rewrite <- insert_concatQed.",
                    "Lemma concat_replicate_is_iterated_insert: forall (A : Type) n (a : A) e, insert n a (concat e (replicate n a)) = concat e (replicate (S n) a).\nProof.\n  induction n; simpl; intros.\n  replace (i + 1) with (i + 1) by omega.\n  replace (i + 1) with (i + 1) by omega.\n  replace (i + 1) with (i + 1) by omega.\n  replace (i + 1) with (i + 1) by omega.\n  replace (i + 1) with (i + 1) by omega.\n  replace (i + 1) with (i + 1) by omega.\n  replace (i + 1) with (i + 1) by omega.\n  replace (i + 1) with (i + 1) by omega.\n  replace (i + 1) with (i + 1) by omega.\n  replace (i + 1) with (i + 1) by omega.\n  replace (i + 1) with (i + 1) by omega.\n  replace (i + 1) with (i + 1) by omega.\n  replace (i + 1) with (i + 1) by omega.\n  replace (i + 1) with (i + 1) by omega.\n  replace (i + 1) with (i + 1) by omega.\n  replace (i +Qed.",
                    "Lemma concat_replicate_is_iterated_insert: forall (A : Type) n (a : A) e, insert n a (concat e (replicate n a)) = concat e (replicate (S n) a).\nProof.\n  induction n; simpl; intros.\n  - simpl.\n    rewrite insert_insert_node by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omega.\n    rewrite insert_insert by omegaQed.",
                    "Lemma concat_replicate_is_iterated_insert: forall (A : Type) n (a : A) e, insert n a (concat e (replicate n a)) = concat e (replicate (S n) a).\nProof.\n  intros.\n  destruct a; simpl; auto.\nQed."
                ]
            }
        ],
        "disel": [
            {
                "filepath": "./coq_projects/disel/Core/Actions.v",
                "context": "From mathcomp.ssreflect\nRequire Import ssreflect ssrbool ssrnat eqtype ssrfun seq.\nFrom mathcomp\nRequire Import path.\nRequire Import Eqdep.\nRequire Import Relation_Operators.\nFrom fcsl\nRequire Import axioms pred prelude ordtype finmap pcm unionmap heap.\nFrom DiSeL\nRequire Import Freshness State EqTypeX Protocols Worlds NetworkSem.\nRequire Classical_Prop.\n\nSet Implicit Arguments.\nUnset Strict Implicit.\nUnset Printing Implicit Defensive.\n\n(* \"Atomic\" send/receive actions, coherent with the network semantics *)\n\nModule Actions.\n\nSection Actions.\n\nVariable W : world.\nNotation getS s l := (getStatelet s l).\n\n(*\n\nAction is defined with respect to the world (i.e., a number of\nprotocols) and label.\n\nIt changes the state as a whole, but, in fact, affects only a specific\nstatelet in it, associated with a specific label.\n\n\n*)\n\n\nStructure action (V : Type) (this : nid)\n  := Action\n       {\n         (* a_lab : Label; *)\n         (* a_lab_dom : a_lab \\in ddom W; *)\n\n         a_safe : state -> Prop;\n\n         a_safe_coh : forall s, a_safe s -> s \\In Coh W;\n\n\n         (* safe_coh : forall s, a_safe s -> coh (getP a_lab) (getS s a_lab); *)\n\n         a_step : forall s1, (a_safe s1) -> state -> V -> Prop;\n\n         step_total : forall s (pf : a_safe s), exists s' r, a_step pf s' r;\n\n         (* step_coh  : forall s1 s2 r, Coh W s1 -> *)\n         (*     a_safe s1 -> a_step s1 s2 r -> coh (getP a_lab) (getS s2 a_lab); *)\n\n         (* step_frame : forall s1 s2 r z, *)\n         (*     a_lab!= z -> Coh W s1 -> *)\n         (*     a_safe s1 -> a_step s1 s2 r -> getS s1 z  = getS s2 z; *)\n         \n         (* Action step semantics respects the overall network semantics *)\n         step_sem  : forall s1 (pf : a_safe s1) s2 r,\n             a_step pf s2 r -> network_step W this s1 s2\n\n       }.\n\n\n(* Framing follows from the network semantics *)\n",
                "context_tokens": 571,
                "proof_start_offset": 1849,
                "proof_end_offset": 2122,
                "proof": "Lemma step_other this V (a : action V this) l s1 s2 r n (pf : a_safe a s1): this != n -> a_step pf s2 r -> getLocal n (getS s1 l) = getLocal n (getS s2 l).\nProof.\nmove=>N S2; move: (step_sem S2)=>H.\nby rewrite eq_sym in N; rewrite /getLocal !(step_is_local l H N).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma step_other this V (a : action V this) l s1 s2 r n (pf : a_safe a s1): this != n -> a_step pf s2 r -> getLocal n (getS s1 l) = getLocal n (getS s2 l).\nProof.\nmove=> s1 s2 r1 r2 r2 r3 r3 r4 r4 r4 r4 r4 r5 r5 r6 r6 r6 r6 r6 r6 r6 r6 r6 r6 r6 r6 r7 r8 r8 r8 r8 r9 r9 r9 r10 r10 r13 r13 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14Qed.",
                    "Lemma step_other this V (a : action V this) l s1 s2 r n (pf : a_safe a s1): this != n -> a_step pf s2 r -> getLocal n (getS s1 l) = getLocal n (getS s2 l).\n\n(* Fuls of the final state of the state of the state of the state of the state. *)\n\nLemma step_same_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_not_notQed.",
                    "Lemma step_other this V (a : action V this) l s1 s2 r n (pf : a_safe a s1): this != n -> a_step pf s2 r -> getLocal n (getS s1 l) = getLocal n (getS s2 l).\nProof.\nmove=> s1 s2 s2 r1 r2 r2 r2 r3 r4 r4 r4 r5 r5 r6 r6 r6 r6 r6 r6 r6 r7 r7 r7 r8 r8 r8 r8 r9 r9 r9 r9 r9 r9 r9 r9 r9 r9 r9 r9 r9 r9 r9 r9 r9 r9 r9 r9 r10 r10 r9 r9 r9 r10 r10 r11 r13 r12 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14Qed.",
                    "Lemma step_other this V (a : action V this) l s1 s2 r n (pf : a_safe a s1): this != n -> a_step pf s2 r -> getLocal n (getS s1 l) = getLocal n (getS s2 l).\nProof.\nmove=> s1 s2 s2 r1 r2 r3 r4 r4 r5 r5 r6 r5 r6 r6 r6 r6 r6 r7 r7 r7 r7 r8 r8 r8 r8 r8 r8 r9 r9 r9 r9 r10 r9 r9 r9 r9 r9 r10 r10 r11 r12 r11 r12 r13 r13 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14Qed.",
                    "Lemma step_other this V (a : action V this) l s1 s2 r n (pf : a_safe a s1): this != n -> a_step pf s2 r -> getLocal n (getS s1 l) = getLocal n (getS s2 l).\nProof.\nmove=> s1 s2 r1 r2 r2 r2 r3 r3 r4 r4 r5 r5 r5 r6 r6 r6 r6 r6 r7 r7 r8 r8 r8 r9 r9 r9 r9 r9 r9 r10 r10 r11 r13 r13 r13 r14 r13 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14 r14Qed."
                ]
            },
            {
                "filepath": "./coq_projects/disel/Core/Actions.v",
                "context": "X Protocols Worlds NetworkSem.\nRequire Classical_Prop.\n\nSet Implicit Arguments.\nUnset Strict Implicit.\nUnset Printing Implicit Defensive.\n\n(* \"Atomic\" send/receive actions, coherent with the network semantics *)\n\nModule Actions.\n\nSection Actions.\n\nVariable W : world.\nNotation getS s l := (getStatelet s l).\n\n(*\n\nAction is defined with respect to the world (i.e., a number of\nprotocols) and label.\n\nIt changes the state as a whole, but, in fact, affects only a specific\nstatelet in it, associated with a specific label.\n\n\n*)\n\n\nStructure action (V : Type) (this : nid)\n  := Action\n       {\n         (* a_lab : Label; *)\n         (* a_lab_dom : a_lab \\in ddom W; *)\n\n         a_safe : state -> Prop;\n\n         a_safe_coh : forall s, a_safe s -> s \\In Coh W;\n\n\n         (* safe_coh : forall s, a_safe s -> coh (getP a_lab) (getS s a_lab); *)\n\n         a_step : forall s1, (a_safe s1) -> state -> V -> Prop;\n\n         step_total : forall s (pf : a_safe s), exists s' r, a_step pf s' r;\n\n         (* step_coh  : forall s1 s2 r, Coh W s1 -> *)\n         (*     a_safe s1 -> a_step s1 s2 r -> coh (getP a_lab) (getS s2 a_lab); *)\n\n         (* step_frame : forall s1 s2 r z, *)\n         (*     a_lab!= z -> Coh W s1 -> *)\n         (*     a_safe s1 -> a_step s1 s2 r -> getS s1 z  = getS s2 z; *)\n         \n         (* Action step semantics respects the overall network semantics *)\n         step_sem  : forall s1 (pf : a_safe s1) s2 r,\n             a_step pf s2 r -> network_step W this s1 s2\n\n       }.\n\n\n(* Framing follows from the network semantics *)\nLemma step_other this V (a : action V this) l s1 s2 r n (pf : a_safe a s1):\n  this!= n -> a_step pf s2 r ->\n  getLocal n (getS s1 l) = getLocal n (getS s2 l).\nProof.\nmove=>N S2; move: (step_sem S2)=>H.\nby rewrite eq_sym in N; rewrite /getLocal!(step_is_local l H N).\nQed.\n\nEnd Actions.\n\nSection SkipActionWrapper.\n\nVariable W : world.\nNotation getP l := (getProtocol W l).\nNotation getS s l := (getStatelet s l).\nVariable this : nid.\nVariable l : Label.\nVariable p : protocol.\nVariable pf : getP l = p.\n\nDefinition skip_safe s := Coh W s.\n\nVariable V : Type.\n\n(* Skip-like actions allow for reading from the state *)\nVariable f : forall s, coh p (getS s l) -> V.\n\n",
                "context_tokens": 748,
                "proof_start_offset": 2515,
                "proof_end_offset": 2608,
                "proof": "Lemma safe_local s : skip_safe s -> coh p (getS s l).\nProof.\nby rewrite -pf=>/(coh_s l).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma safe_local s : skip_safe s -> coh p (getS s l).\nProof.\nmove=>n; move=>n; move=>n; move=>n; move=>n; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH; move/IH;Qed.",
                    "Lemma safe_local s : skip_safe s -> coh p (getS s l).\nProof.\nmove=> S1 H; rewrite /get_external /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /get_mem /Qed.",
                    "Lemma safe_local s : skip_safe s -> coh p (getS s l).\nProof.\nmove=> s; move=>H; rewrite?mem_step.\nby rewrite!mem_step.\nQed.",
                    "Lemma safe_local s : skip_safe s -> coh p (getS s l).\nProof.\nmove=>S1; rewrite (getS1 (getS1 (getS1 (getS1 (getS2 (getS1 (get2 (get2 (S2 (get2 (get2 (S1 (get2 (get3 (S1 (get2 (get3 (S1 (get3 (get2 (S1 (get2 (get3 (S1 (get3 (get3 (S1 (get3 (S1 (get3 (get3 (S1 (get3 (S1 (get2 (S1 (get3 (S (get2 (get3 (S1 (get3 (S (get3 (S (get2 (S (get3 (S (get3 (S (get3 (S (get3 (S (get3 (S (get3 (S (get3 (S (get3 (S (get3 (S (get4 (S (get3 (S (get3 (S (get4 (S (get3 (S (get3 (S (get3 (S (S (get3 (S (get3 (S (S (get4 (S (get3 (Qed.",
                    "Lemma safe_local s : skip_safe s -> coh p (getS s l).\nProof.\nmove=>D; rewrite eq_sym in D.\nby rewrite eq_sym in D.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/disel/Core/Actions.v",
                "context": "let in it, associated with a specific label.\n\n\n*)\n\n\nStructure action (V : Type) (this : nid)\n  := Action\n       {\n         (* a_lab : Label; *)\n         (* a_lab_dom : a_lab \\in ddom W; *)\n\n         a_safe : state -> Prop;\n\n         a_safe_coh : forall s, a_safe s -> s \\In Coh W;\n\n\n         (* safe_coh : forall s, a_safe s -> coh (getP a_lab) (getS s a_lab); *)\n\n         a_step : forall s1, (a_safe s1) -> state -> V -> Prop;\n\n         step_total : forall s (pf : a_safe s), exists s' r, a_step pf s' r;\n\n         (* step_coh  : forall s1 s2 r, Coh W s1 -> *)\n         (*     a_safe s1 -> a_step s1 s2 r -> coh (getP a_lab) (getS s2 a_lab); *)\n\n         (* step_frame : forall s1 s2 r z, *)\n         (*     a_lab!= z -> Coh W s1 -> *)\n         (*     a_safe s1 -> a_step s1 s2 r -> getS s1 z  = getS s2 z; *)\n         \n         (* Action step semantics respects the overall network semantics *)\n         step_sem  : forall s1 (pf : a_safe s1) s2 r,\n             a_step pf s2 r -> network_step W this s1 s2\n\n       }.\n\n\n(* Framing follows from the network semantics *)\nLemma step_other this V (a : action V this) l s1 s2 r n (pf : a_safe a s1):\n  this!= n -> a_step pf s2 r ->\n  getLocal n (getS s1 l) = getLocal n (getS s2 l).\nProof.\nmove=>N S2; move: (step_sem S2)=>H.\nby rewrite eq_sym in N; rewrite /getLocal!(step_is_local l H N).\nQed.\n\nEnd Actions.\n\nSection SkipActionWrapper.\n\nVariable W : world.\nNotation getP l := (getProtocol W l).\nNotation getS s l := (getStatelet s l).\nVariable this : nid.\nVariable l : Label.\nVariable p : protocol.\nVariable pf : getP l = p.\n\nDefinition skip_safe s := Coh W s.\n\nVariable V : Type.\n\n(* Skip-like actions allow for reading from the state *)\nVariable f : forall s, coh p (getS s l) -> V.\n\nLemma safe_local s : skip_safe s -> coh p (getS s l).\nProof. by rewrite -pf=>/(coh_s l). Qed.\n\nDefinition skip_step s1 (pf : skip_safe s1) (s2 : state) r :=\n  [/\\ s1 \\In Coh W, s1 = s2 & r = f (safe_local pf)].\n\n(* Lemma skip_step_safe s1 s2 r: skip_step s1 s2 r -> skip_safe s1. *)\n(* Proof. by case. Qed. *)\n\n",
                "context_tokens": 738,
                "proof_start_offset": 2826,
                "proof_end_offset": 2945,
                "proof": "Lemma skip_step_total s (S : skip_safe s) : exists s' r, skip_step S s' r.\nProof.\nby exists s, (f (safe_local S)).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma skip_step_total s (S : skip_safe s) : exists s' r, skip_step S s' r.\nProof.\nmove=>N1; rewrite (IH _ _ _ _ _ H0).\nby rewrite (IH _ _ _ _ H0).\nQed.",
                    "Lemma skip_step_total s (S : skip_safe s) : exists s' r, skip_step S s' r.\nProof. by rewrite -pf_step_step. Qed.",
                    "Lemma skip_step_total s (S : skip_safe s) : exists s' r, skip_step S s' r.\nProof. by rewrite -pf_step_step. Qed.",
                    "Lemma skip_step_total s (S : skip_safe s) : exists s' r, skip_step S s' r.\nProof. by rewrite -pf_step. Qed.",
                    "Lemma skip_step_total s (S : skip_safe s) : exists s' r, skip_step S s' r.\nProof. by rewrite -pf_step. Qed."
                ]
            },
            {
                "filepath": "./coq_projects/disel/Core/Actions.v",
                "context": "; *)\n         (* a_lab_dom : a_lab \\in ddom W; *)\n\n         a_safe : state -> Prop;\n\n         a_safe_coh : forall s, a_safe s -> s \\In Coh W;\n\n\n         (* safe_coh : forall s, a_safe s -> coh (getP a_lab) (getS s a_lab); *)\n\n         a_step : forall s1, (a_safe s1) -> state -> V -> Prop;\n\n         step_total : forall s (pf : a_safe s), exists s' r, a_step pf s' r;\n\n         (* step_coh  : forall s1 s2 r, Coh W s1 -> *)\n         (*     a_safe s1 -> a_step s1 s2 r -> coh (getP a_lab) (getS s2 a_lab); *)\n\n         (* step_frame : forall s1 s2 r z, *)\n         (*     a_lab!= z -> Coh W s1 -> *)\n         (*     a_safe s1 -> a_step s1 s2 r -> getS s1 z  = getS s2 z; *)\n         \n         (* Action step semantics respects the overall network semantics *)\n         step_sem  : forall s1 (pf : a_safe s1) s2 r,\n             a_step pf s2 r -> network_step W this s1 s2\n\n       }.\n\n\n(* Framing follows from the network semantics *)\nLemma step_other this V (a : action V this) l s1 s2 r n (pf : a_safe a s1):\n  this!= n -> a_step pf s2 r ->\n  getLocal n (getS s1 l) = getLocal n (getS s2 l).\nProof.\nmove=>N S2; move: (step_sem S2)=>H.\nby rewrite eq_sym in N; rewrite /getLocal!(step_is_local l H N).\nQed.\n\nEnd Actions.\n\nSection SkipActionWrapper.\n\nVariable W : world.\nNotation getP l := (getProtocol W l).\nNotation getS s l := (getStatelet s l).\nVariable this : nid.\nVariable l : Label.\nVariable p : protocol.\nVariable pf : getP l = p.\n\nDefinition skip_safe s := Coh W s.\n\nVariable V : Type.\n\n(* Skip-like actions allow for reading from the state *)\nVariable f : forall s, coh p (getS s l) -> V.\n\nLemma safe_local s : skip_safe s -> coh p (getS s l).\nProof. by rewrite -pf=>/(coh_s l). Qed.\n\nDefinition skip_step s1 (pf : skip_safe s1) (s2 : state) r :=\n  [/\\ s1 \\In Coh W, s1 = s2 & r = f (safe_local pf)].\n\n(* Lemma skip_step_safe s1 s2 r: skip_step s1 s2 r -> skip_safe s1. *)\n(* Proof. by case. Qed. *)\n\nLemma skip_step_total s (S : skip_safe s) : exists s' r, skip_step S s' r.\nProof. by exists s, (f (safe_local S)). Qed.\n\n",
                "context_tokens": 746,
                "proof_start_offset": 2947,
                "proof_end_offset": 3016,
                "proof": "Lemma skip_safe_coh s1 : skip_safe s1 -> Coh W s1.\nProof.\nby [].\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma skip_safe_coh s1 : skip_safe s1 -> Coh W s1.\nProof. by exists s'. Qed.",
                    "Lemma skip_safe_coh s1 : skip_safe s1 -> Coh W s1.\nProof. by exists s'. Qed.",
                    "Lemma skip_safe_coh s1 : skip_safe s1 -> Coh W s1.\nProof. by case. Qed.",
                    "Lemma skip_safe_coh s1 : skip_safe s1 -> Coh W s1.\nProof. by exists s2; split; auto. Qed.",
                    "Lemma skip_safe_coh s1 : skip_safe s1 -> Coh W s1.\nProof. by exists s'. Qed."
                ]
            },
            {
                "filepath": "./coq_projects/disel/Core/Actions.v",
                "context": ";\n\n\n         (* safe_coh : forall s, a_safe s -> coh (getP a_lab) (getS s a_lab); *)\n\n         a_step : forall s1, (a_safe s1) -> state -> V -> Prop;\n\n         step_total : forall s (pf : a_safe s), exists s' r, a_step pf s' r;\n\n         (* step_coh  : forall s1 s2 r, Coh W s1 -> *)\n         (*     a_safe s1 -> a_step s1 s2 r -> coh (getP a_lab) (getS s2 a_lab); *)\n\n         (* step_frame : forall s1 s2 r z, *)\n         (*     a_lab!= z -> Coh W s1 -> *)\n         (*     a_safe s1 -> a_step s1 s2 r -> getS s1 z  = getS s2 z; *)\n         \n         (* Action step semantics respects the overall network semantics *)\n         step_sem  : forall s1 (pf : a_safe s1) s2 r,\n             a_step pf s2 r -> network_step W this s1 s2\n\n       }.\n\n\n(* Framing follows from the network semantics *)\nLemma step_other this V (a : action V this) l s1 s2 r n (pf : a_safe a s1):\n  this!= n -> a_step pf s2 r ->\n  getLocal n (getS s1 l) = getLocal n (getS s2 l).\nProof.\nmove=>N S2; move: (step_sem S2)=>H.\nby rewrite eq_sym in N; rewrite /getLocal!(step_is_local l H N).\nQed.\n\nEnd Actions.\n\nSection SkipActionWrapper.\n\nVariable W : world.\nNotation getP l := (getProtocol W l).\nNotation getS s l := (getStatelet s l).\nVariable this : nid.\nVariable l : Label.\nVariable p : protocol.\nVariable pf : getP l = p.\n\nDefinition skip_safe s := Coh W s.\n\nVariable V : Type.\n\n(* Skip-like actions allow for reading from the state *)\nVariable f : forall s, coh p (getS s l) -> V.\n\nLemma safe_local s : skip_safe s -> coh p (getS s l).\nProof. by rewrite -pf=>/(coh_s l). Qed.\n\nDefinition skip_step s1 (pf : skip_safe s1) (s2 : state) r :=\n  [/\\ s1 \\In Coh W, s1 = s2 & r = f (safe_local pf)].\n\n(* Lemma skip_step_safe s1 s2 r: skip_step s1 s2 r -> skip_safe s1. *)\n(* Proof. by case. Qed. *)\n\nLemma skip_step_total s (S : skip_safe s) : exists s' r, skip_step S s' r.\nProof. by exists s, (f (safe_local S)). Qed.\n\nLemma skip_safe_coh s1 : skip_safe s1 -> Coh W s1.\nProof. by []. Qed.\n\n",
                "context_tokens": 726,
                "proof_start_offset": 3018,
                "proof_end_offset": 3160,
                "proof": "Lemma skip_step_sem s1 (S : skip_safe s1) s2 r: skip_step S s2 r -> network_step W this s1 s2.\nProof.\nby move=>H; apply: Idle; case: H.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma skip_step_sem s1 (S : skip_safe s1) s2 r: skip_step S s2 r -> network_step W this s1 s2.\nProof. by exists s'; split; auto. Qed.",
                    "Lemma skip_step_sem s1 (S : skip_safe s1) s2 r: skip_step S s2 r -> network_step W this s1 s2.\nProof. by move=>H; rewrite -pf_step_step. Qed.",
                    "Lemma skip_step_sem s1 (S : skip_safe s1) s2 r: skip_step S s2 r -> network_step W this s1 s2.\nProof.\nmove=>N1; rewrite (IH1 _ _ _ _ _ _ _ _ _ H0).\nby rewrite (IH2 _ _ _ _ _ _ _ H0).\nQed.",
                    "Lemma skip_step_sem s1 (S : skip_safe s1) s2 r: skip_step S s2 r -> network_step W this s1 s2.\nProof.\nmove=>N1; rewrite (step_step_step _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _Qed.",
                    "Lemma skip_step_sem s1 (S : skip_safe s1) s2 r: skip_step S s2 r -> network_step W this s1 s2.\nProof. by rewrite -pf_step_step_step_step. Qed."
                ]
            },
            {
                "filepath": "./coq_projects/disel/Core/Actions.v",
                "context": " step_other this V (a : action V this) l s1 s2 r n (pf : a_safe a s1):\n  this!= n -> a_step pf s2 r ->\n  getLocal n (getS s1 l) = getLocal n (getS s2 l).\nProof.\nmove=>N S2; move: (step_sem S2)=>H.\nby rewrite eq_sym in N; rewrite /getLocal!(step_is_local l H N).\nQed.\n\nEnd Actions.\n\nSection SkipActionWrapper.\n\nVariable W : world.\nNotation getP l := (getProtocol W l).\nNotation getS s l := (getStatelet s l).\nVariable this : nid.\nVariable l : Label.\nVariable p : protocol.\nVariable pf : getP l = p.\n\nDefinition skip_safe s := Coh W s.\n\nVariable V : Type.\n\n(* Skip-like actions allow for reading from the state *)\nVariable f : forall s, coh p (getS s l) -> V.\n\nLemma safe_local s : skip_safe s -> coh p (getS s l).\nProof. by rewrite -pf=>/(coh_s l). Qed.\n\nDefinition skip_step s1 (pf : skip_safe s1) (s2 : state) r :=\n  [/\\ s1 \\In Coh W, s1 = s2 & r = f (safe_local pf)].\n\n(* Lemma skip_step_safe s1 s2 r: skip_step s1 s2 r -> skip_safe s1. *)\n(* Proof. by case. Qed. *)\n\nLemma skip_step_total s (S : skip_safe s) : exists s' r, skip_step S s' r.\nProof. by exists s, (f (safe_local S)). Qed.\n\nLemma skip_safe_coh s1 : skip_safe s1 -> Coh W s1.\nProof. by []. Qed.\n\nLemma skip_step_sem s1 (S : skip_safe s1) s2 r:\n  skip_step S s2 r -> network_step W this s1 s2.\nProof. by move=>H; apply: Idle; case: H. Qed.\n\nDefinition skip_action_wrapper :=\n  Action skip_safe_coh skip_step_total skip_step_sem.\n\nEnd SkipActionWrapper.\n\n\nSection TryReceiveActionWrapper.\n\nVariable W : world.\nNotation getP l := (getProtocol W l).\nNotation getS s l := (getStatelet s l).\nVariable this : nid.\n\n(* \n\nFilter for specific \n - protocol labels\n - message tags\n - message bodies\n *)\nVariable filter : Label -> nid -> nat -> pred (seq nat).\n\n(* Necessary validity lemmas *)\nVariable f_valid_label : forall l n t m,\n    filter l n t m -> l \\in dom (getc W).\n\n(* Variable f_valid_tags : forall l t m, *)\n(*     filter l t m -> t \\in rcv_tags (getP l). *)\n\nDefinition tryrecv_act_safe (s : state) := s \\In Coh W.\n\n",
                "context_tokens": 741,
                "proof_start_offset": 3842,
                "proof_end_offset": 3922,
                "proof": "Lemma tryrecv_act_safe_coh s : tryrecv_act_safe s -> Coh W s.\nProof.\nby [].\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma tryrecv_act_safe_coh s : tryrecv_act_safe s -> Coh W s.\nProof.\nmove=>H; apply: (IH _ H); rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewrite -H; rewriteQed.",
                    "Lemma tryrecv_act_safe_coh s : tryrecv_act_safe s -> Coh W s.\nProof.\nmove=>H; apply: (find_find_seq s H); apply: (find_seq s H); apply: (find_seq s H); apply: (find_seq s H); apply: (find_seq s H); apply: (find_seq s H); apply: (find_seq s H); apply: (find_seq s H); apply: (find_seq s H); apply: (find_seq s H); apply: (find_seq s H); apply: (find_seq s H); apply: (find_seq s H); apply: (find_seq s H); apply: (find_seq s H); apply: (find_seq s H); apply: (find_seq s H); apply: (find_seq s H); apply: (find_seq s H); apply: (find_seq s H); apply: (find_seq s H); apply: (find_seq s H); apply: (find_seq s H); apply: (find_seq s H); apply: (find_seq s H); apply: (find_seq s H); apply: (find_seq s H); apply: (Qed.",
                    "Lemma tryrecv_act_safe_coh s : tryrecv_act_safe s -> Coh W s.\nProof.\nmove=>H; apply: (IH_in_term s); auto.\nmove=>H; apply: (IH_in_term s); auto.\nmove=>H; apply: (IH_in_term s); auto.\nmove=>H; apply: (IH_in_term s); auto.\nmove=>H; apply: (IH_in_term s); auto.\nmove=>H; apply: (IH_in_term s); auto.\nmove=>H; apply: (IH_in_term s); auto.\nmove=>H; apply: (IH_in_term s); auto.\nmove=>H; apply: (IH_in_term s); auto.\nmove=>H; apply: (IH_in_term s); auto.\nmove=>H; apply: (IH_in_term s); auto.\nmove=>H; apply: (IH_in_term s); auto.\nmove=>H; apply: (IH_in_term s); auto.\nmove=>H; apply: (IH_in_term s); auto.\nmove=>H; apply: (IH_in_term s);Qed.",
                    "Lemma tryrecv_act_safe_coh s : tryrecv_act_safe s -> Coh W s.\nProof.\nsplit; [apply: (Hdo_case_f_eq_f_eq_f_eq_f_eq_f_eq_f_eq_f_eq_f_f_eq_f_eq_f_f_eq_f_eq_f_f_eq_f_f_eq_f_f_eq_f_f_eq_f_f_eq_f_f_eq_f_f_eq_f_f_eq_f_f_eq_f_f_eq_f_f_eq_f_f_eq_f_f_eq_f_f_eq_f_f_f_eq_f_f_eq_f_f_eq_f_f_eq_f_f_eq_f_f_eq_f_f_eq_f_f_eq_f_f_eq_f_f_eq_f_f_eq_f_eq_f_f_eq_f_f_eq_f_eq_f_f_eq_f_eq_f_f_eq_f_eq_fQed.",
                    "Lemma tryrecv_act_safe_coh s : tryrecv_act_safe s -> Coh W s.\nProof.\napply: try_recv_act_safe; try_step.\napply: try_rec_case_f_eq; try_case_f_eq; try_case_f_eq; try_f_eq; try_f_eq; try_f_eq; try_f_eq; try_f_eq; try_f_eq; try_f_eq; try_f_eq_f_eq; try_f_eq; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; try congruence; congruence; try congruence; try congruence; try congruence; tryQed."
                ]
            },
            {
                "filepath": "./coq_projects/disel/Core/Actions.v",
                "context": " skip_step_total skip_step_sem.\n\nEnd SkipActionWrapper.\n\n\nSection TryReceiveActionWrapper.\n\nVariable W : world.\nNotation getP l := (getProtocol W l).\nNotation getS s l := (getStatelet s l).\nVariable this : nid.\n\n(* \n\nFilter for specific \n - protocol labels\n - message tags\n - message bodies\n *)\nVariable filter : Label -> nid -> nat -> pred (seq nat).\n\n(* Necessary validity lemmas *)\nVariable f_valid_label : forall l n t m,\n    filter l n t m -> l \\in dom (getc W).\n\n(* Variable f_valid_tags : forall l t m, *)\n(*     filter l t m -> t \\in rcv_tags (getP l). *)\n\nDefinition tryrecv_act_safe (s : state) := s \\In Coh W.\n\nLemma tryrecv_act_safe_coh s : tryrecv_act_safe s -> Coh W s.\nProof. by []. Qed.\n\n(* Can we make it decidable rather than classic? *)\nDefinition tryrecv_act_step s1 s2 (r : option (nid * nat * seq nat)) :=\n  exists (pf : s1 \\In Coh W),\n  (* No message to receive -- all relevant messages are marked *)\n    ([/\\ (forall l m tms from rt b,\n          this \\in nodes (getP l) (getS s1 l) -> \n          Some (Msg tms from this b) = find m (dsoup (getS s1 l)) ->\n          rt \\In (rcv_trans (getP l)) ->\n          tag tms = (t_rcv rt) ->\n          (* This is required for safety *)\n          msg_wf rt (coh_s l pf) this from tms ->\n          (* The filter applies *)   \n          filter l from (t_rcv rt) (tms_cont tms) ->\n          ~~b),\n    r = None & s2 = s1] \\/\n   (* There is a message to receive and the transition can be executed *)\n   exists l m tms from rt (pf' : this \\in nodes (getP l) (getS s1 l)),\n     let: d :=  getS s1 l in\n     [/\\ [/\\ Some (Msg tms from this true) = find m (dsoup (getS s1 l)),\n          rt \\In (rcv_trans (getP l)),\n          tag tms = (t_rcv rt),\n          (* This is required for safety *)\n          msg_wf rt (coh_s l pf) this from tms &\n          (* The filter applies *)   \n          filter l from (t_rcv rt) (tms_cont tms)],\n      let loc' := receive_step rt from tms (coh_s l pf) pf' in\n      let: f' := upd this loc' (dstate d) in\n      let: s' := consume_msg (dsoup d) m in\n      s2 = upd l (DStatelet f' s') s1 &\n      r = Some (from, tag tms, tms_cont tms)]).\n\nImport Classical_Prop.\n\n",
                "context_tokens": 729,
                "proof_start_offset": 5368,
                "proof_end_offset": 6467,
                "proof": "Lemma tryrecv_act_step_total s: tryrecv_act_safe s -> exists s' r , tryrecv_act_step s s' r.\nProof.\nmove=>C; rewrite /tryrecv_act_step.\ncase: (classic (exists l m tms from rt (pf' : this \\in nodes (getP l) (getS s l)), let: d := getS s l in [/\\ Some (Msg tms from this true) = find m (dsoup (getS s l)), rt \\In (rcv_trans (getP l)), tag tms = (t_rcv rt), msg_wf rt (coh_s l C) this from tms & filter l from (t_rcv rt) (tms_cont tms)])); last first.\nmove=>H; exists s, None, C; left; split=>//l m tms from rt b T E1 E2 E3 E M.\napply/negP=>Z; rewrite Z in E1; clear Z b; apply: H.\nby exists l, m, tms, from, rt.\ncase=>[l][m][tms][from][rt][T][E1 E2 E3 E M].\nexists (let: d := getS s l in let loc' := receive_step rt from tms (coh_s l C) T in let: f' := upd this loc' (dstate d) in let: s' := consume_msg (dsoup d) m in upd l (DStatelet f' s') s), (Some (from, tag tms, tms_cont tms)).\nby exists C; right; exists l, m, tms, from, rt, T.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma tryrecv_act_step_total s: tryrecv_act_safe s -> exists s' r , tryrecv_act_step s s' r.\nProof.\nintros.\ndestruct s as [s1 s2].\ndestruct s2 as [s2 [s2 [s2 [s3 [s3 [s4 [s4 [s5 [s5 [s6 [s6 [s6 [s6 [s6 [s6 [s6 [s7 [s6 [s6 [s6 [s6 [s6 [s6 [s6 [s7 [s6 [s7 [s7 [s7 [s7 [s7 [s7 [s7 [s7 [s7 [s7 [s7 [s7 [s7 [s7 [s7 [s8 [s7 [s8 [s9 [s9 [s9 [s9 [s7 [s9 [s10 [s9 [s9 [s9 [s10 [s11 [s9 [s11 [s9 [s9 [s9 [s10 [s10 [s9 [s10 [s11 [s9 [s10 [s9 [s10 [s10 [s10 [s9 [s9 [s9 [s10 [s10 [s10 [Qed.",
                    "Lemma tryrecv_act_step_total s: tryrecv_act_safe s -> exists s' r , tryrecv_act_step s s' r.\nProof.\napply: tryrecv_act_step_bound; auto.\napply: tryrecv_act_step_bound; auto.\napply: tryrecv_act_step_bound; auto.\napply: tryrecv_act_step_bound; auto.\napply: tryrecvact_step_bound; auto.\napply: tryrecvact_step_bound; auto.\napply: tryrecvact_step_bound; auto.\napply: tryrecvact_step_bound; auto.\napply: tryrecvact_step_bound; auto.\napply: tryrecvact_step_bound; auto.\napply: tryrecvact_step_bound; auto.\napply: tryrecvact_step_bound; auto.\napply: tryrecvact_step_bound; auto.\napply: tryrecvact_step_bound; auto.\napply: tryrecvact_bound; auto.\napply: tryrecvact_bound; auto.\napply: tryrecvact_bound; auto.\napply: tryrecvact_bound; auto.\napply: tryrecQed.",
                    "Lemma tryrecv_act_step_total s: tryrecv_act_safe s -> exists s' r , tryrecv_act_step s s' r.\nProof.\nintros.\nunfold set_size.\nrewrite /recv_act_step; auto.\nQed.",
                    "Lemma tryrecv_act_step_total s: tryrecv_act_safe s -> exists s' r , tryrecv_act_step s s' r.\nProof.\nmove=>H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H; rewrite H in H; rewrite H in H; rewrite H; rewrite H in H; rewrite H in H; rewrite H in H; rewrite H; rewrite in H; rewrite H in H; rewrite H; rewrite H in H; rewrite H in H; rewrite H; rewrite in H; rewrite H in H; rewrite H in H; rewrite H; rewrite in H; rewrite H in H; rewrite H in H; rewrite H; rewrite in H; rewrite H inQed.",
                    "Lemma tryrecv_act_step_total s: tryrecv_act_safe s -> exists s' r , tryrecv_act_step s s' r.\nProof.\nintros.\nrewrite <- (IHl (fun s' => s) (fun s' => s' (s' (s' :: s')) s2) in\n      let: s' := fresh \"s\" in\n      let: s' := fresh \"s\" in\n      let: s' := fresh \"s\" in\n      let: s' := fresh \"s\" in\n      let: s' := fresh \"s\" in\n      let: s' := fresh \"s\" in\n      let: s' := fresh \"s\" in\n      let: s' := fresh \"s\" in\n      let: s' := fresh \"s\" in\n      let: s' := fresh \"s\" in\n      let: s' := fresh \"s\" in\n      let: s' := fresh \"s\" in\n      let: s' := fresh \"s\" in\n      let: s' := fresh \"s\" in\n      let: s' := fresh \"s\" in\n      let: s' := fresh \"s\" in\n      let: s' := fresh \"s\" in\n      let: s' := fresh \"s\" in\n      let: s' := fresh \"s\" in\n      let: s' := fresh \"sQed."
                ]
            },
            {
                "filepath": "./coq_projects/disel/Core/Actions.v",
                "context": "_wf rt (coh_s l pf) this from tms ->\n          (* The filter applies *)   \n          filter l from (t_rcv rt) (tms_cont tms) ->\n          ~~b),\n    r = None & s2 = s1] \\/\n   (* There is a message to receive and the transition can be executed *)\n   exists l m tms from rt (pf' : this \\in nodes (getP l) (getS s1 l)),\n     let: d :=  getS s1 l in\n     [/\\ [/\\ Some (Msg tms from this true) = find m (dsoup (getS s1 l)),\n          rt \\In (rcv_trans (getP l)),\n          tag tms = (t_rcv rt),\n          (* This is required for safety *)\n          msg_wf rt (coh_s l pf) this from tms &\n          (* The filter applies *)   \n          filter l from (t_rcv rt) (tms_cont tms)],\n      let loc' := receive_step rt from tms (coh_s l pf) pf' in\n      let: f' := upd this loc' (dstate d) in\n      let: s' := consume_msg (dsoup d) m in\n      s2 = upd l (DStatelet f' s') s1 &\n      r = Some (from, tag tms, tms_cont tms)]).\n\nImport Classical_Prop.\n\nLemma tryrecv_act_step_total s:\n  tryrecv_act_safe s -> exists s' r, tryrecv_act_step s s' r.\nProof.\nmove=>C; rewrite /tryrecv_act_step.\ncase: (classic (exists l m tms from rt (pf' : this \\in nodes (getP l) (getS s l)),\n                   let: d :=  getS s l in\n                   [/\\ Some (Msg tms from this true) = find m (dsoup (getS s l)),\n                    rt \\In (rcv_trans (getP l)),\n                    tag tms = (t_rcv rt),\n                    msg_wf rt (coh_s l C) this from tms &\n                    filter l from (t_rcv rt) (tms_cont tms)])); last first.\n- move=>H; exists s, None, C; left; split=>//l m tms from rt b T E1 E2 E3 E M.\n  apply/negP=>Z; rewrite Z in E1; clear Z b; apply: H.\n  by exists l, m, tms, from, rt.\ncase=>[l][m][tms][from][rt][T][E1 E2 E3 E M].\nexists (let: d :=  getS s l in\n        let loc' := receive_step rt from tms (coh_s l C) T in\n        let: f' := upd this loc' (dstate d) in\n        let: s' := consume_msg (dsoup d) m in\n        upd l (DStatelet f' s') s), (Some (from, tag tms, tms_cont tms)).\nby exists C; right; exists l, m, tms, from, rt, T. \nQed.\n\n",
                "context_tokens": 728,
                "proof_start_offset": 6469,
                "proof_end_offset": 6577,
                "proof": "Lemma tryrecv_act_step_safe s1 s2 r: tryrecv_act_step s1 s2 r -> tryrecv_act_safe s1.\nProof.\nby case.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma tryrecv_act_step_safe s1 s2 r: tryrecv_act_step s1 s2 r -> tryrecv_act_safe s1.\nProof.\nmove=>D; exists s2; split=> //.\n- by exists s2; split=> //; exists s2; split=> //.\n  by exists s2; split=> //; exists s2; split=> //; exists s2; split.\n  by exists s2; split=> //; exists s2; split=> //; exists s2; split.\n  exists s2; split=> //; exists s2; split; split.\n  by exists s2; split=> //; exists s2; split; split=> //; exists s2.\n  by split=> //; exists s3; split=> //; exists s3; split.\n- exists s3; split=> //; exists s3; split=> //; exists s3; split; exists s3; split; last by split.\n  by exists s3; split=> //; exists s3; split; exists s3; split; first.\n  exists s3; split=> //; exists s3; split; first by exists s3; split; exists s3; split; last by split.\n  exists s3; split; first by exists s3; split; last by split.\n  exists s3; split=> //; exists s3; split; first by split;Qed.",
                    "Lemma tryrecv_act_step_safe s1 s2 r: tryrecv_act_step s1 s2 r -> tryrecv_act_safe s1.\nProof.\nmove=>C D; rewrite /recv_act_step_step.\nby exists s1, m, m, m, m, m, m, to' m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m', m',Qed.",
                    "Lemma tryrecv_act_step_safe s1 s2 r: tryrecv_act_step s1 s2 r -> tryrecv_act_safe s1.\nProof.\nmove=>D; rewrite /recv_act_step_safe s2 r.\nby exists s2; exists s2; exists s2; split=>r m; exists m; split; auto.\nQed.",
                    "Lemma tryrecv_act_step_safe s1 s2 r: tryrecv_act_step s1 s2 r -> tryrecv_act_safe s1.\nProof.\nmove=>D; rewrite /recv_act_step_step_safe s2 s2 s3 s3 s3.\nby exists s3; exists s3; split=> //; exists s3; split=> //; exists s4; split=> //; exists s4; split; exists s5; split; auto.\nQed.",
                    "Lemma tryrecv_act_step_safe s1 s2 r: tryrecv_act_step s1 s2 r -> tryrecv_act_safe s1.\nProof.\nmove=>D; exists s2; split=> //; exists s2; split=> //; exists s2; split=> //; exists s3; split=> //; exists s3; split; exists s3; split; auto.\nby exists s2; split=> //; exists s3; split; split=> //; exists s3; split; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/disel/Core/Actions.v",
                "context": " receive and the transition can be executed *)\n   exists l m tms from rt (pf' : this \\in nodes (getP l) (getS s1 l)),\n     let: d :=  getS s1 l in\n     [/\\ [/\\ Some (Msg tms from this true) = find m (dsoup (getS s1 l)),\n          rt \\In (rcv_trans (getP l)),\n          tag tms = (t_rcv rt),\n          (* This is required for safety *)\n          msg_wf rt (coh_s l pf) this from tms &\n          (* The filter applies *)   \n          filter l from (t_rcv rt) (tms_cont tms)],\n      let loc' := receive_step rt from tms (coh_s l pf) pf' in\n      let: f' := upd this loc' (dstate d) in\n      let: s' := consume_msg (dsoup d) m in\n      s2 = upd l (DStatelet f' s') s1 &\n      r = Some (from, tag tms, tms_cont tms)]).\n\nImport Classical_Prop.\n\nLemma tryrecv_act_step_total s:\n  tryrecv_act_safe s -> exists s' r, tryrecv_act_step s s' r.\nProof.\nmove=>C; rewrite /tryrecv_act_step.\ncase: (classic (exists l m tms from rt (pf' : this \\in nodes (getP l) (getS s l)),\n                   let: d :=  getS s l in\n                   [/\\ Some (Msg tms from this true) = find m (dsoup (getS s l)),\n                    rt \\In (rcv_trans (getP l)),\n                    tag tms = (t_rcv rt),\n                    msg_wf rt (coh_s l C) this from tms &\n                    filter l from (t_rcv rt) (tms_cont tms)])); last first.\n- move=>H; exists s, None, C; left; split=>//l m tms from rt b T E1 E2 E3 E M.\n  apply/negP=>Z; rewrite Z in E1; clear Z b; apply: H.\n  by exists l, m, tms, from, rt.\ncase=>[l][m][tms][from][rt][T][E1 E2 E3 E M].\nexists (let: d :=  getS s l in\n        let loc' := receive_step rt from tms (coh_s l C) T in\n        let: f' := upd this loc' (dstate d) in\n        let: s' := consume_msg (dsoup d) m in\n        upd l (DStatelet f' s') s), (Some (from, tag tms, tms_cont tms)).\nby exists C; right; exists l, m, tms, from, rt, T. \nQed.\n\nLemma tryrecv_act_step_safe s1 s2 r:\n  tryrecv_act_step s1 s2 r -> tryrecv_act_safe s1.\nProof. by case. Qed.\n\n",
                "context_tokens": 713,
                "proof_start_offset": 6579,
                "proof_end_offset": 6961,
                "proof": "Lemma tryrecv_act_step_sem s1 (S : tryrecv_act_safe s1) s2 r: tryrecv_act_step s1 s2 r -> network_step W this s1 s2.\nProof.\ncase=>C; rewrite /tryrecv_act_step; case; first by case=>_ _ ->; apply: Idle.\ncase=>[l][m][tms][from][rt][Y][[E R E1 M]]F/=Z _.\nhave X1: l \\in dom s1 by move: (f_valid_label F); rewrite (cohD C).\nby apply: (ReceiveMsg R X1 E1 (i := m) (from := from)).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma tryrecv_act_step_sem s1 (S : tryrecv_act_safe s1) s2 r: tryrecv_act_step s1 s2 r -> network_step W this s1 s2.\nProof.\nmove=>D; rewrite /recv_act_step_safe s1 s2 s2 s3 s3 s4 s4.\nby exists (from_state s1 s3); exists s3; split=> //; exists s4.\nQed.",
                    "Lemma tryrecv_act_step_sem s1 (S : tryrecv_act_safe s1) s2 r: tryrecv_act_step s1 s2 r -> network_step W this s1 s2.\nProof.\nmoveed.",
                    "Lemma tryrecv_act_step_sem s1 (S : tryrecv_act_safe s1) s2 r: tryrecv_act_step s1 s2 r -> network_step W this s1 s2.\nProof.\nmove=>D; exists s1; split=> //; exists s2; split=> //; exists s2; split=> //.\nby exists s2; split=> //; exists s2; split=> //; exists s2; split; split=> //; exists s2; split; exists s2; split; exists s2; split; exists s2; split; split.\nQed.",
                    "Lemma tryrecv_act_step_sem s1 (S : tryrecv_act_safe s1) s2 r: tryrecv_act_step s1 s2 r -> network_step W this s1 s2.\nProof.\nmove=>C D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D DQed.",
                    "Lemma tryrecv_act_step_sem s1 (S : tryrecv_act_safe s1) s2 r: tryrecv_act_step s1 s2 r -> network_step W this s1 s2.\nProof.\nmove=>D; rewrite /recv_act_step_step.\nby exists s1; exists s2; split=>r m; exists m, m; split=>r m; exists m; split=>r m; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/disel/Core/Actions.v",
                "context": " l in\n        let loc' := receive_step rt from tms (coh_s l C) T in\n        let: f' := upd this loc' (dstate d) in\n        let: s' := consume_msg (dsoup d) m in\n        upd l (DStatelet f' s') s), (Some (from, tag tms, tms_cont tms)).\nby exists C; right; exists l, m, tms, from, rt, T. \nQed.\n\nLemma tryrecv_act_step_safe s1 s2 r:\n  tryrecv_act_step s1 s2 r -> tryrecv_act_safe s1.\nProof. by case. Qed.\n\nLemma tryrecv_act_step_sem s1 (S : tryrecv_act_safe s1) s2 r:\n  tryrecv_act_step s1 s2 r -> network_step W this s1 s2.\nProof.\ncase=>C; rewrite /tryrecv_act_step; case; first by case=>_ _ ->; apply: Idle.\ncase=>[l][m][tms][from][rt][Y][[E R E1 M]]F/=Z _.\nhave X1: l \\in dom s1 by move: (f_valid_label F); rewrite (cohD C).\nby apply: (ReceiveMsg R X1 E1 (i := m) (from := from)).\nQed.\n\nDefinition tryrecv_action_wrapper :=\n  Action tryrecv_act_safe_coh tryrecv_act_step_total tryrecv_act_step_sem.\n\nEnd TryReceiveActionWrapper.\n\n(* A wrapper for the send-action *)\nSection SendActionWrapper.\n\nVariable W : world.\nVariable p : protocol.\nNotation getP l := (getProtocol W l).\nNotation getS s l := (getStatelet s l).\nVariable this : nid.\n\nVariable l : Label.\n\nVariable pf : (getProtocol W l) = p.\n\n(* A dedicated send-transition *)\nVariable st: send_trans (coh p).\n(* The transition is present *)\nVariable pf' : st \\In (snd_trans p).\n\n(* The message and the recipient *)\nVariable msg : seq nat.\nVariable to  : nid.\n\n(* This check is implicit in the action semantics *)\nDefinition can_send (s : state) := (l \\in dom s) && (this \\in nodes p (getS s l)).\n\n\n(* Take only the hooks that affect the transition with a tag st of *)\n(* protocol l *)\nDefinition filter_hooks (h : hooks) :=\n  um_filter (fun e => e.2 == (l, t_snd st)) h.\n\nDefinition send_act_safe s :=\n  [/\\ Coh W s, send_safe st this to (getS s l) msg, can_send s &\n      (* All hooks from a \"reduced footprint\" are applicable *)         \n      all_hooks_fire (filter_hooks (geth W)) l (t_snd st) s this msg to].\n\n",
                "context_tokens": 743,
                "proof_start_offset": 8145,
                "proof_end_offset": 8221,
                "proof": "Lemma send_act_safe_coh s : send_act_safe s -> Coh W s.\nProof.\nby case.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma send_act_safe_coh s : send_act_safe s -> Coh W s.\nProof.\nmove=>s l; case=>D s l; caseD s l; caseD s l; caseD s; caseD s; caseD s l; caseD s; caseD s; caseD s; caseD s; case D; case D; case D s; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case D; case; case D; case D; case D; case D; case D; case; case D; case D; case D; case; case D; case D; case D; case; case D; case D; case D; case D; case; case D; case D; case; case D;Qed.",
                    "Lemma send_act_safe_coh s : send_act_safe s -> Coh W s.\nProof.\nintros.\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safe s).\napply (IHel_safeQed.",
                    "Lemma send_act_safe_coh s : send_act_safe s -> Coh W s.\nProof.\ninduction l as [|l l IHl l IHl l IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHl IHlQed.",
                    "Lemma send_act_safe_coh s : send_act_safe s -> Coh W s.\nProof.\ninduction s; simpl; intros; auto.\nQed.",
                    "Lemma send_act_safe_coh s : send_act_safe s -> Coh W s.\nProof.\ninduction s; simpl; intros.\napply (IHl); auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/disel/Core/Actions.v",
                "context": " in\n        let: s' := consume_msg (dsoup d) m in\n        upd l (DStatelet f' s') s), (Some (from, tag tms, tms_cont tms)).\nby exists C; right; exists l, m, tms, from, rt, T. \nQed.\n\nLemma tryrecv_act_step_safe s1 s2 r:\n  tryrecv_act_step s1 s2 r -> tryrecv_act_safe s1.\nProof. by case. Qed.\n\nLemma tryrecv_act_step_sem s1 (S : tryrecv_act_safe s1) s2 r:\n  tryrecv_act_step s1 s2 r -> network_step W this s1 s2.\nProof.\ncase=>C; rewrite /tryrecv_act_step; case; first by case=>_ _ ->; apply: Idle.\ncase=>[l][m][tms][from][rt][Y][[E R E1 M]]F/=Z _.\nhave X1: l \\in dom s1 by move: (f_valid_label F); rewrite (cohD C).\nby apply: (ReceiveMsg R X1 E1 (i := m) (from := from)).\nQed.\n\nDefinition tryrecv_action_wrapper :=\n  Action tryrecv_act_safe_coh tryrecv_act_step_total tryrecv_act_step_sem.\n\nEnd TryReceiveActionWrapper.\n\n(* A wrapper for the send-action *)\nSection SendActionWrapper.\n\nVariable W : world.\nVariable p : protocol.\nNotation getP l := (getProtocol W l).\nNotation getS s l := (getStatelet s l).\nVariable this : nid.\n\nVariable l : Label.\n\nVariable pf : (getProtocol W l) = p.\n\n(* A dedicated send-transition *)\nVariable st: send_trans (coh p).\n(* The transition is present *)\nVariable pf' : st \\In (snd_trans p).\n\n(* The message and the recipient *)\nVariable msg : seq nat.\nVariable to  : nid.\n\n(* This check is implicit in the action semantics *)\nDefinition can_send (s : state) := (l \\in dom s) && (this \\in nodes p (getS s l)).\n\n\n(* Take only the hooks that affect the transition with a tag st of *)\n(* protocol l *)\nDefinition filter_hooks (h : hooks) :=\n  um_filter (fun e => e.2 == (l, t_snd st)) h.\n\nDefinition send_act_safe s :=\n  [/\\ Coh W s, send_safe st this to (getS s l) msg, can_send s &\n      (* All hooks from a \"reduced footprint\" are applicable *)         \n      all_hooks_fire (filter_hooks (geth W)) l (t_snd st) s this msg to].\n\nLemma send_act_safe_coh s : send_act_safe s -> Coh W s.\nProof. by case. Qed.\n\n",
                "context_tokens": 738,
                "proof_start_offset": 8223,
                "proof_end_offset": 8319,
                "proof": "Lemma safe_safe s : send_act_safe s -> send_safe st this to (getS s l) msg.\nProof.\nby case.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma safe_safe s : send_act_safe s -> send_safe st this to (getS s l) msg.\nProof.\napply: (step_safe s).\napply: (step_safe s).\napply: (step_safe s).\napply: (step_safe s).\napply: (step_safe s).\napply: (step_safe s).\napply: (step_safe s).\napply: (step_safe s).\napply: (step_safe s).\napply: (step_safe s).\napply: (step_safe s).\napply (step_safe s).\napply: (step_safe s).\napply: (step_safe s).\napply: (step_safe s).\napply: (step_safe s).\napply: (step_safe s).\napply: (step_safe s).\napply (step_safe s).\napply: (step_safe s).\napply H.\napply (step_safe s).\napply H.\napply H.\napply star_safe.\napply: (step_safe s).\napply H.\napply H.\napply star_safe.\napply H.\napply H.\napply star_safe.\napply H.\napply star_safe.\napplyQed.",
                    "Lemma safe_safe s : send_act_safe s -> send_safe st this to (getS s l) msg.\nProof. by case. Qed.",
                    "Lemma safe_safe s : send_act_safe s -> send_safe st this to (getS s l) msg.\nProof.\ncase=>C s l H; case: s H=>H; case: s H.\n- case: s H=>H; case: s H.\n  case: s H=>H; case: s H.\n  case: s H=>H; case: s H.\n  case: s H=>H; case: s H.\n  case: s H=>H; case: s H.\n  case: s H=>H; case: s H.\n  case: s H=>H; case: s H=>H; case H.\n  case: s H=>H; case: s H=>H; case H.\n  case: s H=>H; case: s H=>H.\n  case: s H=>H; case: s H; case H.\n  case: s H=>H; case: s H; case H; case H.\n  case: s H=>H; case: s H; case H=>H; case H.\n  case: s H=>H; case H; case H.\n  case: s H=>H; case: s H; case H.\n  case: s H=>H; case H.\n  case: s H;Qed.",
                    "Lemma safe_safe s : send_act_safe s -> send_safe st this to (getS s l) msg.\nProof. by case. Qed.",
                    "Lemma safe_safe s : send_act_safe s -> send_safe st this to (getS s l) msg.\nProof.\ninduction l; auto. Qed."
                ]
            },
            {
                "filepath": "./coq_projects/disel/Core/Actions.v",
                "context": "\nProof.\ncase=>C; rewrite /tryrecv_act_step; case; first by case=>_ _ ->; apply: Idle.\ncase=>[l][m][tms][from][rt][Y][[E R E1 M]]F/=Z _.\nhave X1: l \\in dom s1 by move: (f_valid_label F); rewrite (cohD C).\nby apply: (ReceiveMsg R X1 E1 (i := m) (from := from)).\nQed.\n\nDefinition tryrecv_action_wrapper :=\n  Action tryrecv_act_safe_coh tryrecv_act_step_total tryrecv_act_step_sem.\n\nEnd TryReceiveActionWrapper.\n\n(* A wrapper for the send-action *)\nSection SendActionWrapper.\n\nVariable W : world.\nVariable p : protocol.\nNotation getP l := (getProtocol W l).\nNotation getS s l := (getStatelet s l).\nVariable this : nid.\n\nVariable l : Label.\n\nVariable pf : (getProtocol W l) = p.\n\n(* A dedicated send-transition *)\nVariable st: send_trans (coh p).\n(* The transition is present *)\nVariable pf' : st \\In (snd_trans p).\n\n(* The message and the recipient *)\nVariable msg : seq nat.\nVariable to  : nid.\n\n(* This check is implicit in the action semantics *)\nDefinition can_send (s : state) := (l \\in dom s) && (this \\in nodes p (getS s l)).\n\n\n(* Take only the hooks that affect the transition with a tag st of *)\n(* protocol l *)\nDefinition filter_hooks (h : hooks) :=\n  um_filter (fun e => e.2 == (l, t_snd st)) h.\n\nDefinition send_act_safe s :=\n  [/\\ Coh W s, send_safe st this to (getS s l) msg, can_send s &\n      (* All hooks from a \"reduced footprint\" are applicable *)         \n      all_hooks_fire (filter_hooks (geth W)) l (t_snd st) s this msg to].\n\nLemma send_act_safe_coh s : send_act_safe s -> Coh W s.\nProof. by case. Qed.\n\nLemma safe_safe s : send_act_safe s -> send_safe st this to (getS s l) msg.\nProof. by case. Qed.\n\nDefinition send_act_step s1 (S: send_act_safe s1) s2 r :=\n   r = msg /\\\n   exists b,\n     Some b = send_step (safe_safe S) /\\\n     let: d :=  getS s1 l in\n     let: f' := upd this b (dstate d) in\n     let: s' := (post_msg (dsoup d) (Msg (TMsg (t_snd st) msg)\n                                         this to true)).1 in\n     s2 = upd l (DStatelet f' s') s1.\n\n",
                "context_tokens": 730,
                "proof_start_offset": 8680,
                "proof_end_offset": 9239,
                "proof": "Lemma send_act_step_total s (S: send_act_safe s): exists s' r , send_act_step S s' r.\nProof.\nrewrite /send_act_step/send_act_safe.\ncase: S=>C S J K.\nmove/(s_safe_def): (S)=>[b][S']E.\nset s2 := let: d := getS s l in let: f' := upd this b (dstate d) in let: s' := (post_msg (dsoup d) (Msg (TMsg (t_snd st) msg) this to true)).1 in upd l (DStatelet f' s') s.\nexists s2, msg; split=>//; exists b; split=>//.\nmove: (safe_safe (And4 C S J K))=> S''.\nby rewrite -E (pf_irr S'' S') .\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma send_act_step_total s (S: send_act_safe s): exists s' r , send_act_step S s' r.\nProof.\nmove=> s1 s2; case: s2=>s2; case: s2 => s2; case: s2 s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s4; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case: s3; case:Qed.",
                    "Lemma send_act_step_total s (S: send_act_safe s): exists s' r , send_act_step S s' r.\nProof.\nrewrite /loop_step_step_total.\nrewrite /loop_step_total.\nrewrite /loop_step_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.\nrewrite /loop_total.Qed.",
                    "Lemma send_act_step_total s (S: send_act_safe s): exists s' r , send_act_step S s' r.\nProof. by case. Qed.",
                    "Lemma send_act_step_total s (S: send_act_safe s): exists s' r , send_act_step S s' r.\nProof.\nmove=>s1 s2 s2 s3 s3 s4.\nby rewrite IHs1_star_star_star_star_star_star.\nQed.",
                    "Lemma send_act_step_total s (S: send_act_safe s): exists s' r , send_act_step S s' r.\nProof.\nmove=> s1 s2 s2.\nmove=> s2 s3.\ncase: (s1 s2); first by case: (s2 s3); first by case: (s3 s3); case: (s3 s3); case: (s4 s5); case: (s4 s4); case: (s5 s4); case: (s5 s5); case: (s5 s5); case: (s5 s5); case: (s5 s5); case: (s5 s5); case: (s5 s5); case: (s5 s5); case: (s5 s5); case: (s5 s6); case: (s6 s6); case: (s5 s6); case: (s5 s6); case: (s5 s6); case: (s5 s6); case: (s5; case (s5 s6); case: (s6; case (s6 s5); case: (s5 s6); case: (s5 s5); case: (s5; case (s5 s6); case: (s5 s6Qed."
                ]
            },
            {
                "filepath": "./coq_projects/disel/Examples/Greeter/Greeter.v",
                "context": "From mathcomp.ssreflect\nRequire Import ssreflect ssrbool ssrnat eqtype ssrfun seq.\nFrom mathcomp\nRequire Import path.\nRequire Import Eqdep.\nRequire Import Relation_Operators.\nFrom fcsl\nRequire Import axioms pred prelude ordtype finmap pcm unionmap heap.\nFrom DiSeL\nRequire Import Freshness State EqTypeX Protocols Worlds NetworkSem Rely.\nFrom DiSeL\nRequire Import Actions Injection Process Always HoareTriples InferenceRules.\n\nSet Implicit Arguments.\nUnset Strict Implicit.\nImport Prenex Implicits.\n\n(* The Hello World example - a distributed protocol, allowing anyone send\nanyone a greeting message. *)\n\nModule GreeterProtocol.\nSection GreeterProtocol.\n\n\nVariable fixed_nodes : seq nid.\n\nSection GreeterCoh.\n\n(* All nodes are welcome to participate in the protocol *)\nDefinition nodes (d : dstatelet) : pred nid := mem fixed_nodes.\n\n(* Defining coherence predicate for the greeter statelet *)\n\nDefinition hello := [:: 3; 1; 1; 0].\nDefinition counter := ptr_nat 1.\n\n(* All messages have fixed shape *)\nDefinition soupCoh : Pred soup :=\n  [Pred s | valid s /\\\n            forall m msg,\n              find m s = Some msg ->\n              let: from := from msg in\n              let: tag := tag (content msg) in\n              let: val := tms_cont (content msg) in\n              [/\\ from \\in fixed_nodes, \n                  tag == 0 & behead val == hello]].\n\n(* Coherence for the local state ensures that is has just one counter,\n   which we will later use to count incoming messages  *)\nDefinition localCoh : Pred heap :=\n  [Pred h | exists n : nat, h = counter :-> n].\n\n(* Overall coherence *)\nDefinition greeter_coh d : Prop :=\n  let: dl := dstate d in\n  let: ds := dsoup d in\n  [/\\ soupCoh ds, dom dl =i fixed_nodes,\n   valid dl &\n   forall n, n \\in fixed_nodes -> localCoh (getLocal n d)].\n\n(* Axioms of the coherence predicate *)\n",
                "context_tokens": 479,
                "proof_start_offset": 1831,
                "proof_end_offset": 1898,
                "proof": "Lemma l1 d: greeter_coh d -> valid (dstate d).\nProof.\nby case.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma l1 d: greeter_coh d -> valid (dstate d).\nProof.\nmove=> d; have [s [s1 s2 s2 s3] := (s1, s3) (s2, s3) (s4, s4) (s4, s4) (s5, s4) (s4, s5) (s5, s5) (s5, s5) (s5, s5) (s5, s6) (s5, s5) (s5, s6) (s6, s6) (s5, s6) (s6, s6) (s6, s6) (s6, s6) (s6, s6) (s6, s6) (s6, s6) (s6, s6) (s6, s6, s6) (s6, s6) (s6, s6, s7) (s6, s6) (s6, s6, s6) (s6, s6, s6) (s6, s7, s6) (s6, s6, s7) (s6, s7, s7) (s6Qed.",
                    "Lemma l1 d: greeter_coh d -> valid (dstate d).\nProof.\nmove=> d; apply/andP; split=> [|n1]; first by rewrite?mem_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_find_Qed.",
                    "Lemma l1 d: greeter_coh d -> valid (dstate d).\nProof.\nmove=> d; have [H1 | H2]; rewrite H1 in H2; rewrite H2 in H2; rewrite H1 in H2; rewrite H2 in H3; rewrite H2 in H3; rewrite H3 in H4; rewrite H4 in H4; rewrite H3 in H4; rewrite H4 in H4; rewrite H4 in H3; rewrite H4 in H3; rewrite H4 in H4; rewrite H4 in H4; rewrite H4 in H4; rewrite H4 in H4; rewrite H4 in H4; rewrite H4 in H4; rewrite H4 in H4; rewrite H4 in H4; rewrite H4 in H4; rewrite H4 in H4; rewrite H4 in H4; rewrite H4 in H4; rewrite H4 in H4; rewrite H4 in H5; rewrite H4 in H5; rewrite H4 in H4; rewrite H4 in H4; rewrite H4 in H4; rewrite H4 in H4; rewrite H4 in H4; rewrite H4 in H4; rewrite H4 in H4; rewrite H4 in H4; rewrite HQed.",
                    "Lemma l1 d: greeter_coh d -> valid (dstate d).\nProof.\ncase=> //= d1 d2 d2 d3 d3 d4 d4 d4 d5 d5 d5 d5 d5 d6 d6 d7 d6 d6 d6 d6 d7 d7 d8 d9 d9 d9 d9 d9 d10 d10 d10 d10 d10 d10 d10 d10 d10 d10 d10 d12 d14 d13 d14 d14 d14 d14 d14 d14 d14 d14 d14 d14 d14 d14 d15 d15 d15 d15 d15 d16 d15 d15 d15 d17 d15 d16 d16 d16 d17 d18 d16 d16 d17 d16 d16 d16\"\n(forall d0 d0 d1 d2 d3 d4 d4 d5 d5 d5 d7 d6 d7 d9 d9 d10 d10 d10 d14 d14 d14 d16 d17 d18 d17 d19 d19 d16 d17 d18 d19 d18 d19 d20\n        d19 d19 d20 d20 d20 d19 d20 d19 d20\n        d20 d20 dQed.",
                    "Lemma l1 d: greeter_coh d -> valid (dstate d).\nProof.\nmove=> d m n1 d2; rewrite /all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_allQed."
                ]
            },
            {
                "filepath": "./coq_projects/disel/Examples/Greeter/Greeter.v",
                "context": "From mathcomp.ssreflect\nRequire Import ssreflect ssrbool ssrnat eqtype ssrfun seq.\nFrom mathcomp\nRequire Import path.\nRequire Import Eqdep.\nRequire Import Relation_Operators.\nFrom fcsl\nRequire Import axioms pred prelude ordtype finmap pcm unionmap heap.\nFrom DiSeL\nRequire Import Freshness State EqTypeX Protocols Worlds NetworkSem Rely.\nFrom DiSeL\nRequire Import Actions Injection Process Always HoareTriples InferenceRules.\n\nSet Implicit Arguments.\nUnset Strict Implicit.\nImport Prenex Implicits.\n\n(* The Hello World example - a distributed protocol, allowing anyone send\nanyone a greeting message. *)\n\nModule GreeterProtocol.\nSection GreeterProtocol.\n\n\nVariable fixed_nodes : seq nid.\n\nSection GreeterCoh.\n\n(* All nodes are welcome to participate in the protocol *)\nDefinition nodes (d : dstatelet) : pred nid := mem fixed_nodes.\n\n(* Defining coherence predicate for the greeter statelet *)\n\nDefinition hello := [:: 3; 1; 1; 0].\nDefinition counter := ptr_nat 1.\n\n(* All messages have fixed shape *)\nDefinition soupCoh : Pred soup :=\n  [Pred s | valid s /\\\n            forall m msg,\n              find m s = Some msg ->\n              let: from := from msg in\n              let: tag := tag (content msg) in\n              let: val := tms_cont (content msg) in\n              [/\\ from \\in fixed_nodes, \n                  tag == 0 & behead val == hello]].\n\n(* Coherence for the local state ensures that is has just one counter,\n   which we will later use to count incoming messages  *)\nDefinition localCoh : Pred heap :=\n  [Pred h | exists n : nat, h = counter :-> n].\n\n(* Overall coherence *)\nDefinition greeter_coh d : Prop :=\n  let: dl := dstate d in\n  let: ds := dsoup d in\n  [/\\ soupCoh ds, dom dl =i fixed_nodes,\n   valid dl &\n   forall n, n \\in fixed_nodes -> localCoh (getLocal n d)].\n\n(* Axioms of the coherence predicate *)\nLemma l1 d: greeter_coh d -> valid (dstate d).\nProof. by case. Qed.\n\n",
                "context_tokens": 505,
                "proof_start_offset": 1900,
                "proof_end_offset": 1972,
                "proof": "Lemma l2 d: greeter_coh d -> valid (dsoup d).\nProof.\nby case; case.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma l2 d: greeter_coh d -> valid (dsoup d).\nProof. by case: (dup d). Qed.",
                    "Lemma l2 d: greeter_coh d -> valid (dsoup d).\nProof. by case: d. Qed.",
                    "Lemma l2 d: greeter_coh d -> valid (dsoup d).\nProof. by case. Qed.",
                    "Lemma l2 d: greeter_coh d -> valid (dsoup d).\nProof. by case. Qed.",
                    "Lemma l2 d: greeter_coh d -> valid (dsoup d).\nProof. by case: d=> // d; case: d=> // d; case: d=> //= d. Qed."
                ]
            },
            {
                "filepath": "./coq_projects/disel/Examples/Greeter/Greeter.v",
                "context": "From mathcomp.ssreflect\nRequire Import ssreflect ssrbool ssrnat eqtype ssrfun seq.\nFrom mathcomp\nRequire Import path.\nRequire Import Eqdep.\nRequire Import Relation_Operators.\nFrom fcsl\nRequire Import axioms pred prelude ordtype finmap pcm unionmap heap.\nFrom DiSeL\nRequire Import Freshness State EqTypeX Protocols Worlds NetworkSem Rely.\nFrom DiSeL\nRequire Import Actions Injection Process Always HoareTriples InferenceRules.\n\nSet Implicit Arguments.\nUnset Strict Implicit.\nImport Prenex Implicits.\n\n(* The Hello World example - a distributed protocol, allowing anyone send\nanyone a greeting message. *)\n\nModule GreeterProtocol.\nSection GreeterProtocol.\n\n\nVariable fixed_nodes : seq nid.\n\nSection GreeterCoh.\n\n(* All nodes are welcome to participate in the protocol *)\nDefinition nodes (d : dstatelet) : pred nid := mem fixed_nodes.\n\n(* Defining coherence predicate for the greeter statelet *)\n\nDefinition hello := [:: 3; 1; 1; 0].\nDefinition counter := ptr_nat 1.\n\n(* All messages have fixed shape *)\nDefinition soupCoh : Pred soup :=\n  [Pred s | valid s /\\\n            forall m msg,\n              find m s = Some msg ->\n              let: from := from msg in\n              let: tag := tag (content msg) in\n              let: val := tms_cont (content msg) in\n              [/\\ from \\in fixed_nodes, \n                  tag == 0 & behead val == hello]].\n\n(* Coherence for the local state ensures that is has just one counter,\n   which we will later use to count incoming messages  *)\nDefinition localCoh : Pred heap :=\n  [Pred h | exists n : nat, h = counter :-> n].\n\n(* Overall coherence *)\nDefinition greeter_coh d : Prop :=\n  let: dl := dstate d in\n  let: ds := dsoup d in\n  [/\\ soupCoh ds, dom dl =i fixed_nodes,\n   valid dl &\n   forall n, n \\in fixed_nodes -> localCoh (getLocal n d)].\n\n(* Axioms of the coherence predicate *)\nLemma l1 d: greeter_coh d -> valid (dstate d).\nProof. by case. Qed.\n\nLemma l2 d: greeter_coh d -> valid (dsoup d).\nProof. by case; case. Qed.\n\n",
                "context_tokens": 535,
                "proof_start_offset": 1974,
                "proof_end_offset": 2050,
                "proof": "Lemma l3 d: greeter_coh d -> dom (dstate d) =i nodes d.\nProof.\nby case.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma l3 d: greeter_coh d -> dom (dstate d) =i nodes d.\nProof. by case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d;Qed.",
                    "Lemma l3 d: greeter_coh d -> dom (dstate d) =i nodes d.\nProof. by case: d=> d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case:Qed.",
                    "Lemma l3 d: greeter_coh d -> dom (dstate d) =i nodes d.\nProof. by case: d=> // d; case: d=> // d; case: d=> // d; case: d=> // d; case: d; case: d=> // d; case: d=> // d; case: d=> // d; case: d; case: d=> // d; case: d; case: d=> d; case: d; case: d; case: d=> d; case: d; case: d=> // d; case: d; case: d=> // d; case: d; case: d=> d; case: d; case: d=> // d; case: d; case: d; case: d=> d; case: d; case: d; case: d=> d; case: d; case: d; case: d; case: d; case: d=> d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: dQed.",
                    "Lemma l3 d: greeter_coh d -> dom (dstate d) =i nodes d.\nProof. by case: (dle_bool d); case: (dle_bool d); case: (dle_bool d); case: (dle_bool d); case: (dle_bool d); case: (dle_bool d); case: (dle_bool d); case: (dle_bool d); case: (dle_bool d); case: (dle_bool d); case: (dle_bool d); case: (dle_bool d); case: (dle_bool d); case (dle_bool d); case: (dle_bool d); case (dle_bool d); case: (dle_bool d); case d; case (dle_bool d); case (dle_bool d); case d; case d; case (dle_bool d); case (dle_bool d); case d; case (dle_bool d); case (dle_bool d); case d; case d; case d; case (dle_bool d); case d; case d; case d; case d; case d; case d; case d; case d;Qed.",
                    "Lemma l3 d: greeter_coh d -> dom (dstate d) =i nodes d.\nProof. by case: d=> d d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d' d'' d' d' d' d'' d' d' d' d'' d' d' d'' d' d' d''' d' d''' d' d'' d' d' d''' d' d' d''' d' d''''' d' d' d' d' d'' d'' d'' d'' d'''' d' d''' d''' d'' d''' d''' d'''Qed."
                ]
            },
            {
                "filepath": "./coq_projects/disel/Examples/Greeter/Greeter.v",
                "context": "om fcsl\nRequire Import axioms pred prelude ordtype finmap pcm unionmap heap.\nFrom DiSeL\nRequire Import Freshness State EqTypeX Protocols Worlds NetworkSem Rely.\nFrom DiSeL\nRequire Import Actions Injection Process Always HoareTriples InferenceRules.\n\nSet Implicit Arguments.\nUnset Strict Implicit.\nImport Prenex Implicits.\n\n(* The Hello World example - a distributed protocol, allowing anyone send\nanyone a greeting message. *)\n\nModule GreeterProtocol.\nSection GreeterProtocol.\n\n\nVariable fixed_nodes : seq nid.\n\nSection GreeterCoh.\n\n(* All nodes are welcome to participate in the protocol *)\nDefinition nodes (d : dstatelet) : pred nid := mem fixed_nodes.\n\n(* Defining coherence predicate for the greeter statelet *)\n\nDefinition hello := [:: 3; 1; 1; 0].\nDefinition counter := ptr_nat 1.\n\n(* All messages have fixed shape *)\nDefinition soupCoh : Pred soup :=\n  [Pred s | valid s /\\\n            forall m msg,\n              find m s = Some msg ->\n              let: from := from msg in\n              let: tag := tag (content msg) in\n              let: val := tms_cont (content msg) in\n              [/\\ from \\in fixed_nodes, \n                  tag == 0 & behead val == hello]].\n\n(* Coherence for the local state ensures that is has just one counter,\n   which we will later use to count incoming messages  *)\nDefinition localCoh : Pred heap :=\n  [Pred h | exists n : nat, h = counter :-> n].\n\n(* Overall coherence *)\nDefinition greeter_coh d : Prop :=\n  let: dl := dstate d in\n  let: ds := dsoup d in\n  [/\\ soupCoh ds, dom dl =i fixed_nodes,\n   valid dl &\n   forall n, n \\in fixed_nodes -> localCoh (getLocal n d)].\n\n(* Axioms of the coherence predicate *)\nLemma l1 d: greeter_coh d -> valid (dstate d).\nProof. by case. Qed.\n\nLemma l2 d: greeter_coh d -> valid (dsoup d).\nProof. by case; case. Qed.\n\nLemma l3 d: greeter_coh d -> dom (dstate d) =i nodes d.\nProof. by case. Qed.\n\n(* Wrapping up the coherence predicate *)\nDefinition GreeterCoh := CohPred (CohPredMixin l1 l2 l3).\nEnd GreeterCoh.\n\nSection GreeterSend.\n\nSection SendBase.\n\nNotation coh := GreeterCoh.\n\n(* Defining send and receive transitions *)\nDefinition greet_safe (this n : nid) (d : dstatelet) msg :=\n  [/\\ this \\in fixed_nodes,\n      n \\in fixed_nodes,\n      exists m, msg == m :: hello &\n      coh d].\n\nSection GreetAux.\n\nVariables (this : nid) (d : dstatelet)\n          (C : coh d).\n\n",
                "context_tokens": 686,
                "proof_start_offset": 2529,
                "proof_end_offset": 2640,
                "proof": "Lemma lcoh n : n \\in fixed_nodes -> localCoh (getLocal n d).\nProof.\nby move=> H; case: C => _ _ _/(_ n H).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma lcoh n : n \\in fixed_nodes -> localCoh (getLocal n d).\nProof. by case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d;Qed.",
                    "Lemma lcoh n : n \\in fixed_nodes -> localCoh (getLocal n d).\nProof. by case: (find_var n d) => // m /andP[]. Qed.",
                    "Lemma lcoh n : n \\in fixed_nodes -> localCoh (getLocal n d).\nProof. by case: (size d) => // d. Qed.",
                    "Lemma lcoh n : n \\in fixed_nodes -> localCoh (getLocal n d).\nProof. by case: d => // ->. Qed.",
                    "Lemma lcoh n : n \\in fixed_nodes -> localCoh (getLocal n d).\nProof. by case: (size d); case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case: d; case d; case: d; case: d; case: d; case d; case: d; case: d; case: d; case: d; case: d; case: d; caseQed."
                ]
            },
            {
                "filepath": "./coq_projects/disel/Examples/Greeter/Greeter.v",
                "context": "NetworkSem Rely.\nFrom DiSeL\nRequire Import Actions Injection Process Always HoareTriples InferenceRules.\n\nSet Implicit Arguments.\nUnset Strict Implicit.\nImport Prenex Implicits.\n\n(* The Hello World example - a distributed protocol, allowing anyone send\nanyone a greeting message. *)\n\nModule GreeterProtocol.\nSection GreeterProtocol.\n\n\nVariable fixed_nodes : seq nid.\n\nSection GreeterCoh.\n\n(* All nodes are welcome to participate in the protocol *)\nDefinition nodes (d : dstatelet) : pred nid := mem fixed_nodes.\n\n(* Defining coherence predicate for the greeter statelet *)\n\nDefinition hello := [:: 3; 1; 1; 0].\nDefinition counter := ptr_nat 1.\n\n(* All messages have fixed shape *)\nDefinition soupCoh : Pred soup :=\n  [Pred s | valid s /\\\n            forall m msg,\n              find m s = Some msg ->\n              let: from := from msg in\n              let: tag := tag (content msg) in\n              let: val := tms_cont (content msg) in\n              [/\\ from \\in fixed_nodes, \n                  tag == 0 & behead val == hello]].\n\n(* Coherence for the local state ensures that is has just one counter,\n   which we will later use to count incoming messages  *)\nDefinition localCoh : Pred heap :=\n  [Pred h | exists n : nat, h = counter :-> n].\n\n(* Overall coherence *)\nDefinition greeter_coh d : Prop :=\n  let: dl := dstate d in\n  let: ds := dsoup d in\n  [/\\ soupCoh ds, dom dl =i fixed_nodes,\n   valid dl &\n   forall n, n \\in fixed_nodes -> localCoh (getLocal n d)].\n\n(* Axioms of the coherence predicate *)\nLemma l1 d: greeter_coh d -> valid (dstate d).\nProof. by case. Qed.\n\nLemma l2 d: greeter_coh d -> valid (dsoup d).\nProof. by case; case. Qed.\n\nLemma l3 d: greeter_coh d -> dom (dstate d) =i nodes d.\nProof. by case. Qed.\n\n(* Wrapping up the coherence predicate *)\nDefinition GreeterCoh := CohPred (CohPredMixin l1 l2 l3).\nEnd GreeterCoh.\n\nSection GreeterSend.\n\nSection SendBase.\n\nNotation coh := GreeterCoh.\n\n(* Defining send and receive transitions *)\nDefinition greet_safe (this n : nid) (d : dstatelet) msg :=\n  [/\\ this \\in fixed_nodes,\n      n \\in fixed_nodes,\n      exists m, msg == m :: hello &\n      coh d].\n\nSection GreetAux.\n\nVariables (this : nid) (d : dstatelet)\n          (C : coh d).\n\nLemma lcoh n : n \\in fixed_nodes -> localCoh (getLocal n d).\nProof. by move=> H; case: C => _ _ _/(_ n H). Qed.\n\n",
                "context_tokens": 693,
                "proof_start_offset": 2642,
                "proof_end_offset": 2815,
                "proof": "Lemma cohN n v : n \\in fixed_nodes -> find counter (getLocal n d) = Some v -> dyn_tp v = nat.\nProof.\nby move=>H; case: (lcoh H)=>m->; rewrite findPt /=; case=><-.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma cohN n v : n \\in fixed_nodes -> find counter (getLocal n d) = Some v -> dyn_tp v = nat.\nProof. by move=> H; case: C => _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _Qed.",
                    "Lemma cohN n v : n \\in fixed_nodes -> find counter (getLocal n d) = Some v -> dyn_tp v = nat.\nProof. by move=> H; case: C => _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _Qed.",
                    "Lemma cohN n v : n \\in fixed_nodes -> find counter (getLocal n d) = Some v -> dyn_tp v = nat.\nProof. by move=> H; case: C => _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _Qed.",
                    "Lemma cohN n v : n \\in fixed_nodes -> find counter (getLocal n d) = Some v -> dyn_tp v = nat.\nProof. by move=> H; case: C => _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _Qed.",
                    "Lemma cohN n v : n \\in fixed_nodes -> find counter (getLocal n d) = Some v -> dyn_tp v = nat.\nProof. by move=> H; case: C=> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _Qed."
                ]
            },
            {
                "filepath": "./coq_projects/disel/Examples/Greeter/Greeter.v",
                "context": " nodes are welcome to participate in the protocol *)\nDefinition nodes (d : dstatelet) : pred nid := mem fixed_nodes.\n\n(* Defining coherence predicate for the greeter statelet *)\n\nDefinition hello := [:: 3; 1; 1; 0].\nDefinition counter := ptr_nat 1.\n\n(* All messages have fixed shape *)\nDefinition soupCoh : Pred soup :=\n  [Pred s | valid s /\\\n            forall m msg,\n              find m s = Some msg ->\n              let: from := from msg in\n              let: tag := tag (content msg) in\n              let: val := tms_cont (content msg) in\n              [/\\ from \\in fixed_nodes, \n                  tag == 0 & behead val == hello]].\n\n(* Coherence for the local state ensures that is has just one counter,\n   which we will later use to count incoming messages  *)\nDefinition localCoh : Pred heap :=\n  [Pred h | exists n : nat, h = counter :-> n].\n\n(* Overall coherence *)\nDefinition greeter_coh d : Prop :=\n  let: dl := dstate d in\n  let: ds := dsoup d in\n  [/\\ soupCoh ds, dom dl =i fixed_nodes,\n   valid dl &\n   forall n, n \\in fixed_nodes -> localCoh (getLocal n d)].\n\n(* Axioms of the coherence predicate *)\nLemma l1 d: greeter_coh d -> valid (dstate d).\nProof. by case. Qed.\n\nLemma l2 d: greeter_coh d -> valid (dsoup d).\nProof. by case; case. Qed.\n\nLemma l3 d: greeter_coh d -> dom (dstate d) =i nodes d.\nProof. by case. Qed.\n\n(* Wrapping up the coherence predicate *)\nDefinition GreeterCoh := CohPred (CohPredMixin l1 l2 l3).\nEnd GreeterCoh.\n\nSection GreeterSend.\n\nSection SendBase.\n\nNotation coh := GreeterCoh.\n\n(* Defining send and receive transitions *)\nDefinition greet_safe (this n : nid) (d : dstatelet) msg :=\n  [/\\ this \\in fixed_nodes,\n      n \\in fixed_nodes,\n      exists m, msg == m :: hello &\n      coh d].\n\nSection GreetAux.\n\nVariables (this : nid) (d : dstatelet)\n          (C : coh d).\n\nLemma lcoh n : n \\in fixed_nodes -> localCoh (getLocal n d).\nProof. by move=> H; case: C => _ _ _/(_ n H). Qed.\n\nLemma cohN n v :\n  n \\in fixed_nodes ->\n  find counter (getLocal n d) = Some v ->\n  dyn_tp v = nat.\nProof. by move=>H; case: (lcoh H)=>m->; rewrite findPt /=; case=><-. Qed.\n\nDefinition getN n (pf : n \\in fixed_nodes) : nat := \n  match find counter (getLocal n d) as f return _ = f -> _ with\n    Some v => fun epf => icast (sym_eq (cohN pf epf)) (dyn_val v)\n  | None => fun epf => 0\n  end (erefl _).\n\n",
                "context_tokens": 726,
                "proof_start_offset": 3043,
                "proof_end_offset": 3233,
                "proof": "Lemma getNK n (Hn : n \\in fixed_nodes) m: getLocal n d = counter :-> m -> getN Hn = m.\nProof.\nmove=>E; rewrite /getN; move: (cohN)=>H.\nby move: (H n)=>{H}; rewrite E=>H/=; apply: eqc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma getNK n (Hn : n \\in fixed_nodes) m: getLocal n d = counter :-> m -> getN Hn = m.\nProof. by move=>H; case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (n == 0); case: (Qed.",
                    "Lemma getNK n (Hn : n \\in fixed_nodes) m: getLocal n d = counter :-> m -> getN Hn = m.\nProof. by case: m => m n. Qed.",
                    "Lemma getNK n (Hn : n \\in fixed_nodes) m: getLocal n d = counter :-> m -> getN Hn = m.\nProof. by move=>H; case: (n_gt0 (size d)) => H. Qed.",
                    "Lemma getNK n (Hn : n \\in fixed_nodes) m: getLocal n d = counter :-> m -> getN Hn = m.\nProof. by move=> H; case: (rcoh H)=>m; rewrite findPt. Qed.",
                    "Lemma getNK n (Hn : n \\in fixed_nodes) m: getLocal n d = counter :-> m -> getN Hn = m.\nProof. by move=> H; case: (l_le (size d)) => H; case: (r_le (size d)) => H; case: (r_le (size d)) => H; case: (r_le (size d)) => H; case: (r_le (size d)) => H; case: (r_le (size d)) => H; case: (r_le (size d)) => H; case: (r_le (size d)) => H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H; case H;Qed."
                ]
            },
            {
                "filepath": "./coq_projects/disel/Examples/Greeter/Greeter.v",
                "context": ".\n\n(* All messages have fixed shape *)\nDefinition soupCoh : Pred soup :=\n  [Pred s | valid s /\\\n            forall m msg,\n              find m s = Some msg ->\n              let: from := from msg in\n              let: tag := tag (content msg) in\n              let: val := tms_cont (content msg) in\n              [/\\ from \\in fixed_nodes, \n                  tag == 0 & behead val == hello]].\n\n(* Coherence for the local state ensures that is has just one counter,\n   which we will later use to count incoming messages  *)\nDefinition localCoh : Pred heap :=\n  [Pred h | exists n : nat, h = counter :-> n].\n\n(* Overall coherence *)\nDefinition greeter_coh d : Prop :=\n  let: dl := dstate d in\n  let: ds := dsoup d in\n  [/\\ soupCoh ds, dom dl =i fixed_nodes,\n   valid dl &\n   forall n, n \\in fixed_nodes -> localCoh (getLocal n d)].\n\n(* Axioms of the coherence predicate *)\nLemma l1 d: greeter_coh d -> valid (dstate d).\nProof. by case. Qed.\n\nLemma l2 d: greeter_coh d -> valid (dsoup d).\nProof. by case; case. Qed.\n\nLemma l3 d: greeter_coh d -> dom (dstate d) =i nodes d.\nProof. by case. Qed.\n\n(* Wrapping up the coherence predicate *)\nDefinition GreeterCoh := CohPred (CohPredMixin l1 l2 l3).\nEnd GreeterCoh.\n\nSection GreeterSend.\n\nSection SendBase.\n\nNotation coh := GreeterCoh.\n\n(* Defining send and receive transitions *)\nDefinition greet_safe (this n : nid) (d : dstatelet) msg :=\n  [/\\ this \\in fixed_nodes,\n      n \\in fixed_nodes,\n      exists m, msg == m :: hello &\n      coh d].\n\nSection GreetAux.\n\nVariables (this : nid) (d : dstatelet)\n          (C : coh d).\n\nLemma lcoh n : n \\in fixed_nodes -> localCoh (getLocal n d).\nProof. by move=> H; case: C => _ _ _/(_ n H). Qed.\n\nLemma cohN n v :\n  n \\in fixed_nodes ->\n  find counter (getLocal n d) = Some v ->\n  dyn_tp v = nat.\nProof. by move=>H; case: (lcoh H)=>m->; rewrite findPt /=; case=><-. Qed.\n\nDefinition getN n (pf : n \\in fixed_nodes) : nat := \n  match find counter (getLocal n d) as f return _ = f -> _ with\n    Some v => fun epf => icast (sym_eq (cohN pf epf)) (dyn_val v)\n  | None => fun epf => 0\n  end (erefl _).\n\nLemma getNK n (Hn : n \\in fixed_nodes) m:\n  getLocal n d = counter :-> m -> getN Hn = m.\nProof.\nmove=>E; rewrite /getN; move: (cohN)=>H.\nby move: (H n)=>{H}; rewrite E=>H/=; apply: eqc.\nQed.\n\nEnd GreetAux.\n\n",
                "context_tokens": 740,
                "proof_start_offset": 3250,
                "proof_end_offset": 3355,
                "proof": "Lemma this_in_pf this to d msg : greet_safe this to d msg -> this \\in fixed_nodes.\nProof.\nby case.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma this_in_pf this to d msg : greet_safe this to d msg -> this \\in fixed_nodes. *)\n\nLemma all_in_list_join_valid_in_list_list : forall (p : nat) (d : d),\n  (forall n, d < n -> d <= n -> d <= n -> d <= n -> d <= n -> d <= n.\nProof.\nmove=> H; case: (n \\in_list d d d) => // d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d dQed.",
                    "Lemma this_in_pf this to d msg : greet_safe this to d msg -> this \\in fixed_nodes. *)\nProof. by move=> H; case: (l_in_list _ _ _ _ _ _ _ H). Qed.",
                    "Lemma this_in_pf this to d msg : greet_safe this to d msg -> this \\in fixed_nodes. *)\n\nLemma last_in_in_list : forall (key : nat) (d : d d) (d : d) (d : d d) (d : d d d) (d : d d d) (d d d d d d) (d d d d d d d d) (d d d d d d d d d) (d d d d d d d) (d d d d d d d) (d d d d d d d) (d d d d d d d d) (d d d d d) (d d d d d d) (d d d d d) d d d d) (d d d d d d d) (d d d d d d d d) (d d d d d d d) (d d d d d d) d d d d d d d) (d d d d d) (d d d d d d d d d d d) d d d d)\n    (d d d d d d d d d d d d d d d) (d d d d d d d d d d d d) d d d d d d d d d d d d dQed.",
                    "Lemma this_in_pf this to d msg : greet_safe this to d msg -> this \\in fixed_nodes. *)\nProof.\nmove=> H; rewrite /size_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_mapQed.",
                    "Lemma this_in_pf this to d msg : greet_safe this to d msg -> this \\in fixed_nodes.\nProof.\nmove=>H; case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case:Qed."
                ]
            },
            {
                "filepath": "./coq_projects/disel/Examples/Greeter/Greeter.v",
                "context": " m s = Some msg ->\n              let: from := from msg in\n              let: tag := tag (content msg) in\n              let: val := tms_cont (content msg) in\n              [/\\ from \\in fixed_nodes, \n                  tag == 0 & behead val == hello]].\n\n(* Coherence for the local state ensures that is has just one counter,\n   which we will later use to count incoming messages  *)\nDefinition localCoh : Pred heap :=\n  [Pred h | exists n : nat, h = counter :-> n].\n\n(* Overall coherence *)\nDefinition greeter_coh d : Prop :=\n  let: dl := dstate d in\n  let: ds := dsoup d in\n  [/\\ soupCoh ds, dom dl =i fixed_nodes,\n   valid dl &\n   forall n, n \\in fixed_nodes -> localCoh (getLocal n d)].\n\n(* Axioms of the coherence predicate *)\nLemma l1 d: greeter_coh d -> valid (dstate d).\nProof. by case. Qed.\n\nLemma l2 d: greeter_coh d -> valid (dsoup d).\nProof. by case; case. Qed.\n\nLemma l3 d: greeter_coh d -> dom (dstate d) =i nodes d.\nProof. by case. Qed.\n\n(* Wrapping up the coherence predicate *)\nDefinition GreeterCoh := CohPred (CohPredMixin l1 l2 l3).\nEnd GreeterCoh.\n\nSection GreeterSend.\n\nSection SendBase.\n\nNotation coh := GreeterCoh.\n\n(* Defining send and receive transitions *)\nDefinition greet_safe (this n : nid) (d : dstatelet) msg :=\n  [/\\ this \\in fixed_nodes,\n      n \\in fixed_nodes,\n      exists m, msg == m :: hello &\n      coh d].\n\nSection GreetAux.\n\nVariables (this : nid) (d : dstatelet)\n          (C : coh d).\n\nLemma lcoh n : n \\in fixed_nodes -> localCoh (getLocal n d).\nProof. by move=> H; case: C => _ _ _/(_ n H). Qed.\n\nLemma cohN n v :\n  n \\in fixed_nodes ->\n  find counter (getLocal n d) = Some v ->\n  dyn_tp v = nat.\nProof. by move=>H; case: (lcoh H)=>m->; rewrite findPt /=; case=><-. Qed.\n\nDefinition getN n (pf : n \\in fixed_nodes) : nat := \n  match find counter (getLocal n d) as f return _ = f -> _ with\n    Some v => fun epf => icast (sym_eq (cohN pf epf)) (dyn_val v)\n  | None => fun epf => 0\n  end (erefl _).\n\nLemma getNK n (Hn : n \\in fixed_nodes) m:\n  getLocal n d = counter :-> m -> getN Hn = m.\nProof.\nmove=>E; rewrite /getN; move: (cohN)=>H.\nby move: (H n)=>{H}; rewrite E=>H/=; apply: eqc.\nQed.\n\nEnd GreetAux.\n\nLemma this_in_pf this to d msg :\n  greet_safe this to d msg -> this \\in fixed_nodes.\nProof. by case. Qed.\n\n",
                "context_tokens": 743,
                "proof_start_offset": 3357,
                "proof_end_offset": 3445,
                "proof": "Lemma greet_safe_coh this to d m : greet_safe this to d m -> coh d.\nProof.\nby case.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma greet_safe_coh this to d m : greet_safe this to d m -> coh d.\nProof. by move=>H; case: (valid_block d) => ->. Qed.",
                    "Lemma greet_safe_coh this to d m : greet_safe this to d m -> coh d.\nProof. by move=>H; case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case: (size d); case:Qed.",
                    "Lemma greet_safe_coh this to d m : greet_safe this to d m -> coh d.\nProof. by move=> m; case: m => m. Qed.",
                    "Lemma greet_safe_coh this to d m : greet_safe this to d m -> coh d.\nProof. by move=>H; case: (le_max (size d) (size d) (size d) (size d) (size d) (size d)) (size d) (size d d) (size d) (size d d) (size d d) (size d d d) (size d d d d d) (size d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d dQed.",
                    "Lemma greet_safe_coh this to d m : greet_safe this to d m -> coh d.\nProof.\nmove=> m n m n m n m n.\nelim: n => [|n IHn]; first by rewrite?IHn.\nby move: (IH m n) => m n; rewrite?IHn?IHn?IHn.\nQed."
                ]
            }
        ],
        "zchinese": [
            {
                "filepath": "./coq_projects/zchinese/groups.v",
                "context": "Require Export Lci.\nRequire Export misc.\n\nSection groups.\n\nVariable S : Set.\nVariable G : S -> Prop.\nVariable Add : S -> S -> S.\nVariable O : S.\nVariable Opp : S -> S.\n\nDefinition is_group :=\n  intern S G Add /\\\n  associativity S Add /\\ neutral S G Add O /\\ opposite S G Add O Opp. \n\n",
                "context_tokens": 86,
                "proof_start_offset": 284,
                "proof_end_offset": 841,
                "proof": "Lemma regular_l : is_group -> forall y z : S, G y -> G z -> forall x : S, G x -> Add x y = Add x z -> y = z.\nProof.\nintros.\nelim H; intros; elim H5; intros; elim H7; intros; elim H8; intros.\nclear H4 H5 H7 H10.\nelim (H11 y H0); intros; elim H5; clear H4 H5.\nelim (H11 z H1); intros; elim H5; clear H4 H5 H8 H11.\nelim (H9 x H2); intros; elim H5; intros; elim H8; intros; elim H11.\nclear H4 H5 H7 H8 H9 H10 H11.\nelim (H6 (Opp x) x y); elim (H6 (Opp x) x z).\nelim H3; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma regular_l : is_group -> forall y z : S, G y -> G z -> forall x : S, G x -> Add x y = Add x z -> y = z.\nintros x y z H H; elim H; clear H; intros.\napply H; clear H; intros.\napply H; clear H; intros.\napply H; clear H; intros.\napply H; clear H; intros.\napply H; clear H; intros.\napply H; clear H; intros.\napply H; clear H; intros.\napply H; clear H; intros.\napply H; clear H; intros.\napply H; clear H; intros.\napply H; clear H; intros.\napply H; clear H; intros.\napply H; clear H; intros.\napply H; clear H; intros.\napply H; clear H; intros.\napply H; clear H; intros.\napply H; clear H; intros.\napply H; clear H; intros.\napply H; clear H; intros.\napply H; clear H; intros.\napply H; clear H; intros.\napply H; clear H; intros.\napply H; clear H; intros.\napply H; clear H; intros.\napply H; clear H; intros.\napply H; clear H; intros.\napply H; clear HQed.",
                    "Lemma regular_l : is_group -> forall y z : S, G y -> G z -> forall x : S, G x -> Add x y = Add x z -> y = z.\nintros x y H' H' H' H' H' H' H' H'' H' H'' H' H''' H''' H''' H' H'''''' H'' H'''' H' H''''' H' H' H'''''''''' H' H'''''''''' H''''' H'''''''' H''''''' H'''''''' H''''''''' H''''''''' H'' H''''''' H'''' H''''''''' H'''''''''''''' H'''''''''''''''' H''''''''''''''''''''''''''''''''''''''''''''''''''''Qed.",
                    "Lemma regular_l : is_group -> forall y z : S, G y -> G z -> forall x : S, G x -> Add x y = Add x z -> y = z.\nintros x y H; elim H; auto with sets.\nintros x y z H'0; elim H'0; auto with sets.\nintros x y z H'0 H'1; elim H'0; auto with sets.\nintros x y z H'0; elim H'0; auto with sets.\nintros x y z H'1 H'1; elim H'0; auto with sets.\nintros x y z H'1; elim H'0; auto with sets.\nintros x z H'0 H'0; elim H'0; auto with sets.\nintros x z H'0 H'1; elim H'0; auto with sets.\nintros x z H'1 H'1 H'2; elim H'1; auto with sets.\nintros x z H'1; elim H'0; auto with sets.\nintros x z H'1; elim H'1; auto with sets.\nintros x z H'1; elim H'1; auto with sets.\nintros x z H'1; elim H'1; auto with sets.\nintros x z H'1; elim H'2; auto with setsQed.",
                    "Lemma regular_l : is_group -> forall y z : S, G y -> G z -> forall x : S, G x -> Add x y = Add x z -> y = z.\nintros.\napply (Build_group S).\nQed.",
                    "Lemma regular_l : is_group -> forall y z : S, G y -> G z -> forall x : S, G x -> Add x y = Add x z -> y = z.\nProof.\nintros x y z H0 H1 H2; elim H1; intros y z H2; elim H2; intros z H3; elim H3; intros z H4; elim H4; intros z H4 H4; elim H4; intros z H5; elim H4; intros z H5 H5; elim H6; intros z H5; elim H7; intros z H6; elim H7; intros z H6; elim H7; intros z H7; elim H7; intros z H8; elim H7; intros z H7; elim H8; intros z H7; elim H7; intros z H8 H8; elim H8; intros z H8; elim H8; intros z H8; elim H8; intros z H8; elim H8; intros z H8; elim H8; intros z H8; elim H8; intros z H8; elim H8; intros z H8; elim H8; intros z H8; elim H8; intros z H8; elim H8; intros z H8; elim H8; intros z H8; elim H8; intros z H8 HQed."
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/groups.v",
                "context": "Require Export Lci.\nRequire Export misc.\n\nSection groups.\n\nVariable S : Set.\nVariable G : S -> Prop.\nVariable Add : S -> S -> S.\nVariable O : S.\nVariable Opp : S -> S.\n\nDefinition is_group :=\n  intern S G Add /\\\n  associativity S Add /\\ neutral S G Add O /\\ opposite S G Add O Opp. \n\nLemma regular_l :\n is_group ->\n forall y z : S,\n G y -> G z -> forall x : S, G x -> Add x y = Add x z -> y = z.\nProof.\nintros.\nelim H; intros; elim H5; intros; elim H7; intros; elim H8; intros. \nclear H4 H5 H7 H10.\n(* use of neutral *)\nelim (H11 y H0); intros; elim H5; clear H4 H5.\nelim (H11 z H1); intros; elim H5; clear H4 H5 H8 H11.\n(* use of opposite *)\nelim (H9 x H2); intros; elim H5; intros; elim H8; intros; elim H11. \nclear H4 H5 H7 H8 H9 H10 H11.\n(* use of associativity *)\nelim (H6 (Opp x) x y); elim (H6 (Opp x) x z).\nelim H3; reflexivity.\nQed.\n\n",
                "context_tokens": 316,
                "proof_start_offset": 843,
                "proof_end_offset": 1170,
                "proof": "Lemma add_add : commutativity S Add -> associativity S Add -> forall x1 y1 x2 y2 : S, Add (Add x1 y1) (Add x2 y2) = Add (Add x1 x2) (Add y1 y2).\nProof.\nintros com ass x1 y1 x2 y2.\nrewrite (ass (Add x1 y1) x2 y2); elim (ass x1 y1 x2); elim (com x2 y1).\nrewrite (ass x1 x2 y1); elim (ass (Add x1 x2) y1 y2); reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma add_add : commutativity S Add -> associativity S Add -> forall x1 y1 x2 y2 : S, Add (Add x1 y1) (Add x2 y2) = Add (Add x1 x2) (Add y1 y2).\nProof.\nintros.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_add.\napply add_Qed.",
                    "Lemma add_add : commutativity S Add -> associativity S Add -> forall x1 y1 x2 y2 : S, Add (Add x1 y1) (Add x2 y2) = Add (Add x1 x2) (Add y1 y2).\nintros.\nelim H; intros; elim H5; intros.\nelim (H5 y1); intros; elim H5; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H7; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6Qed.",
                    "Lemma add_add : commutativity S Add -> associativity S Add -> forall x1 y1 x2 y2 : S, Add (Add x1 y1) (Add x2 y2) = Add (Add x1 x2) (Add y1 y2).\nintros.\nelim H5; intros; elim H6; intros; elim H7; intros; elim H7; intros; elim H8; intros; elim H7; intros; elim H7; intros; elim H8; intros; elim H8; intros; elim H7; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros;Qed.",
                    "Lemma add_add : commutativity S Add -> associativity S Add -> forall x1 y1 x2 y2 : S, Add (Add x1 y1) (Add x2 y2) = Add (Add x1 x2) (Add y1 y2).\nProof.\nintros.\nelim H; intros; elim H4; intros; elim H4; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H7; intros; elim H6; intros; elim H6; intros; elim H7; intros; elim H7; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H7;Qed.",
                    "Lemma add_add : commutativity S Add -> associativity S Add -> forall x1 y1 x2 y2 : S, Add (Add x1 y1) (Add x2 y2) = Add (Add x1 x2) (Add y1 y2).\nProof.\nintros.\nelim H; intros; elim H; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; intros; elim H8; introsQed."
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/groups.v",
                "context": "Require Export Lci.\nRequire Export misc.\n\nSection groups.\n\nVariable S : Set.\nVariable G : S -> Prop.\nVariable Add : S -> S -> S.\nVariable O : S.\nVariable Opp : S -> S.\n\nDefinition is_group :=\n  intern S G Add /\\\n  associativity S Add /\\ neutral S G Add O /\\ opposite S G Add O Opp. \n\nLemma regular_l :\n is_group ->\n forall y z : S,\n G y -> G z -> forall x : S, G x -> Add x y = Add x z -> y = z.\nProof.\nintros.\nelim H; intros; elim H5; intros; elim H7; intros; elim H8; intros. \nclear H4 H5 H7 H10.\n(* use of neutral *)\nelim (H11 y H0); intros; elim H5; clear H4 H5.\nelim (H11 z H1); intros; elim H5; clear H4 H5 H8 H11.\n(* use of opposite *)\nelim (H9 x H2); intros; elim H5; intros; elim H8; intros; elim H11. \nclear H4 H5 H7 H8 H9 H10 H11.\n(* use of associativity *)\nelim (H6 (Opp x) x y); elim (H6 (Opp x) x z).\nelim H3; reflexivity.\nQed.\n\nLemma add_add :\n commutativity S Add ->\n associativity S Add ->\n forall x1 y1 x2 y2 : S,\n Add (Add x1 y1) (Add x2 y2) = Add (Add x1 x2) (Add y1 y2).\nProof.\nintros com ass x1 y1 x2 y2.\nrewrite (ass (Add x1 y1) x2 y2); elim (ass x1 y1 x2); elim (com x2 y1).\nrewrite (ass x1 x2 y1); elim (ass (Add x1 x2) y1 y2); reflexivity.\nQed.\n\n",
                "context_tokens": 459,
                "proof_start_offset": 1172,
                "proof_end_offset": 1792,
                "proof": "Lemma opp_unicity : is_group -> forall x y : S, is_opposite S G Add O x y -> y = Opp x.\nProof.\nintros.\nelim H0; intros; elim H2; intros.\nelim H; intros; elim H6; intros; elim H8; intros; elim H9; intros.\nelim (H12 y H3); intros; elim H14; clear H H2 H3 H5 H6 H8 H11 H12 H13 H14.\nelim (H10 x H1); intros; elim H2; intros; elim H5; intros; elim H8.\nclear H H1 H2 H5 H6 H8 H10.\nelim (H7 (Opp x) x y).\nelim H4; intros; rewrite H; clear H H0 H1 H4 H7.\nelim H9; intros; elim (H0 (Opp x) H3); intros.\nexact H1.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma opp_unicity : is_group -> forall x y : S, is_opposite S G Add O x y -> y = Opp x.\nProof.\nintros.\napply (H1 y1 y2); elim (ass x1 y1); auto.\nQed.",
                    "Lemma opp_unicity : is_group -> forall x y : S, is_opposite S G Add O x y -> y = Opp x.\nProof.\nintros x y H0; elim H; intros; elim H0; intros; elim H0; intros; elim H0; intros; elim H0; intros; elim H0; intros; elim H0; intros; elim H1; intros; elim H1; intros; elim H0; intros; elim H0; intros; elim H1; intros; elim H0; intros; elim H0; intros; elim H1; intros; elim H1; intros; elim H1; intros; elim H1; intros; elim H0; intros; elim H1; intros; elim H1; intros; elim H1; intros; elim H0; intros; elim H1; intros; elim H1; intros; elim H2; intros; elim H0; intros; elim H1; intros; elim H1; intros; elim H0; intros; elim H1; intros; elim H1; intros; elim H1; intros; elim H1; intros; elim H1; intros; elim H1; intros; elim H1; intros; elim H1; intros; elim H2; intros; elim H0; intros; elim H1; intros; elimQed.",
                    "Lemma opp_unicity : is_group -> forall x y : S, is_opposite S G Add O x y -> y = Opp x.\nProof.\nintros.\nelim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; introsQed.",
                    "Lemma opp_unicity : is_group -> forall x y : S, is_opposite S G Add O x y -> y = Opp x.\nProof.\nintros.\napply (H0 y1); elim (Add_prop x y1); intros; elim H2; intros; elim H4; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H7; intros; elim H7; intros; elim H7; intros; elim H6; intros; elim H6; intros; elim H7; intros; elim H6; intros; elim H7; intros; elim H7; intros; elim H7; intros; elim H7; intros; elim H7; intros; elim H7; intros; elim H7; intros; elim H7Qed.",
                    "Lemma opp_unicity : is_group -> forall x y : S, is_opposite S G Add O x y -> y = Opp x.\nProof.\nintros comLE x1 y2 y3.\nrewrite (comm y1) (comm y1 y2) (comm y2).\nrewrite (comm y1 y1) (comm y2).\nrewrite (comm y1) (comm y1 y2).\nrewrite (comm y1) (comm y2).\nrewrite (comm y1) (comm y1).\nrewrite (comm y1).\nrewrite (comm y2).\nrewrite (comm y1).\nrewrite (comm y1).\nrewrite (comm y1).\nrewrite (comm y1).\nrewrite (comm y1).\nrewrite (comm y1).\nrewrite (comm y1).\nrewrite (comm y1).\nrewrite (comm y1).\nrewrite (comm y1).\nrewrite (comm y1).\nrewrite (comm y1).\nrewrite (comm y1).\nrewrite (comm y1).\nrewrite (comm y1).\nrewrite (comm y1).\nrewrite (comm y1).\nrewrite (comm y1).\nrewrite (comm y1).\nrewrite (comm y1).\nrewrite (comm y1).\nrewrite (comm y1).\nrewrite (Qed."
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/groups.v",
                "context": "Require Export Lci.\nRequire Export misc.\n\nSection groups.\n\nVariable S : Set.\nVariable G : S -> Prop.\nVariable Add : S -> S -> S.\nVariable O : S.\nVariable Opp : S -> S.\n\nDefinition is_group :=\n  intern S G Add /\\\n  associativity S Add /\\ neutral S G Add O /\\ opposite S G Add O Opp. \n\nLemma regular_l :\n is_group ->\n forall y z : S,\n G y -> G z -> forall x : S, G x -> Add x y = Add x z -> y = z.\nProof.\nintros.\nelim H; intros; elim H5; intros; elim H7; intros; elim H8; intros. \nclear H4 H5 H7 H10.\n(* use of neutral *)\nelim (H11 y H0); intros; elim H5; clear H4 H5.\nelim (H11 z H1); intros; elim H5; clear H4 H5 H8 H11.\n(* use of opposite *)\nelim (H9 x H2); intros; elim H5; intros; elim H8; intros; elim H11. \nclear H4 H5 H7 H8 H9 H10 H11.\n(* use of associativity *)\nelim (H6 (Opp x) x y); elim (H6 (Opp x) x z).\nelim H3; reflexivity.\nQed.\n\nLemma add_add :\n commutativity S Add ->\n associativity S Add ->\n forall x1 y1 x2 y2 : S,\n Add (Add x1 y1) (Add x2 y2) = Add (Add x1 x2) (Add y1 y2).\nProof.\nintros com ass x1 y1 x2 y2.\nrewrite (ass (Add x1 y1) x2 y2); elim (ass x1 y1 x2); elim (com x2 y1).\nrewrite (ass x1 x2 y1); elim (ass (Add x1 x2) y1 y2); reflexivity.\nQed.\n\nLemma opp_unicity :\n is_group -> forall x y : S, is_opposite S G Add O x y -> y = Opp x.\nProof.\nintros.\n(* [G y] *)\nelim H0; intros; elim H2; intros.\n(* [y = 0+y] *)\nelim H; intros; elim H6; intros; elim H8; intros; elim H9; intros.\nelim (H12 y H3); intros; elim H14; clear H H2 H3 H5 H6 H8 H11 H12 H13 H14.\n(* [0=(-x)+x] *)\nelim (H10 x H1); intros; elim H2; intros; elim H5; intros; elim H8.\nclear H H1 H2 H5 H6 H8 H10.\n(* [((-x)+x)+y=(-x)+(x+y)] *)\nelim (H7 (Opp x) x y).\n(* [x+y = 0] *)\nelim H4; intros; rewrite H; clear H H0 H1 H4 H7.\n(* [(-x)+0=(-x)] *)\nelim H9; intros; elim (H0 (Opp x) H3); intros. exact H1.\nQed.\n\n",
                "context_tokens": 741,
                "proof_start_offset": 1794,
                "proof_end_offset": 2147,
                "proof": "Lemma opp_opp : is_group -> forall x : S, G x -> x = Opp (Opp x).\nProof.\nintros.\napply (opp_unicity H (Opp x) x).\nunfold is_opposite in |- *; split.\nelim H; intros; elim H2; intros; elim H4; intros; elim (H6 x H0); intros.\nelim H8; trivial.\nelim H; intros; elim H2; intros; elim H4; intros; elim (H6 x H0); intros.\nelim H8; intros; elim H10; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma opp_opp : is_group -> forall x : S, G x -> x = Opp (Opp x).\nProof.\nintros x y H0; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros;Qed.",
                    "Lemma opp_opp : is_group -> forall x : S, G x -> x = Opp (Opp x).\nProof.\nintros x y; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elimQed.",
                    "Lemma opp_opp : is_group -> forall x : S, G x -> x = Opp (Opp x).\nProof.\nintros.\nunfold Opp in |- *.\nelim (H1 x); intros; elim H1; intros; elim H2; intros; elim H2; intros; elim H3; intros; elim H3; intros; elim H4; intros; elim H4; intros; elim H4; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H6; intros; elim H5; intros; elim H5; intros; elim H6; intros; elim H5; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6;\n intros; elim H6; intros; elim H6; intros;Qed.",
                    "Lemma opp_opp : is_group -> forall x : S, G x -> x = Opp (Opp x).\nProof.\nintros.\nelim (H0 x); intros; elim H1; intros; elim H2; intros; elim H2; intros; elim H3; intros; elim H4; intros; elim H4; intros; elim H4; intros; elim H4; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H6; intros; elim H6; intros; elim H5; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6;\n intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6;\n intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6;\nQed.",
                    "Lemma opp_opp : is_group -> forall x : S, G x -> x = Opp (Opp x).\nProof.\nintros.\nelim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros;Qed."
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/groups.v",
                "context": " H7; intros; elim H8; intros. \nclear H4 H5 H7 H10.\n(* use of neutral *)\nelim (H11 y H0); intros; elim H5; clear H4 H5.\nelim (H11 z H1); intros; elim H5; clear H4 H5 H8 H11.\n(* use of opposite *)\nelim (H9 x H2); intros; elim H5; intros; elim H8; intros; elim H11. \nclear H4 H5 H7 H8 H9 H10 H11.\n(* use of associativity *)\nelim (H6 (Opp x) x y); elim (H6 (Opp x) x z).\nelim H3; reflexivity.\nQed.\n\nLemma add_add :\n commutativity S Add ->\n associativity S Add ->\n forall x1 y1 x2 y2 : S,\n Add (Add x1 y1) (Add x2 y2) = Add (Add x1 x2) (Add y1 y2).\nProof.\nintros com ass x1 y1 x2 y2.\nrewrite (ass (Add x1 y1) x2 y2); elim (ass x1 y1 x2); elim (com x2 y1).\nrewrite (ass x1 x2 y1); elim (ass (Add x1 x2) y1 y2); reflexivity.\nQed.\n\nLemma opp_unicity :\n is_group -> forall x y : S, is_opposite S G Add O x y -> y = Opp x.\nProof.\nintros.\n(* [G y] *)\nelim H0; intros; elim H2; intros.\n(* [y = 0+y] *)\nelim H; intros; elim H6; intros; elim H8; intros; elim H9; intros.\nelim (H12 y H3); intros; elim H14; clear H H2 H3 H5 H6 H8 H11 H12 H13 H14.\n(* [0=(-x)+x] *)\nelim (H10 x H1); intros; elim H2; intros; elim H5; intros; elim H8.\nclear H H1 H2 H5 H6 H8 H10.\n(* [((-x)+x)+y=(-x)+(x+y)] *)\nelim (H7 (Opp x) x y).\n(* [x+y = 0] *)\nelim H4; intros; rewrite H; clear H H0 H1 H4 H7.\n(* [(-x)+0=(-x)] *)\nelim H9; intros; elim (H0 (Opp x) H3); intros. exact H1.\nQed.\n\nLemma opp_opp : is_group -> forall x : S, G x -> x = Opp (Opp x).\nProof.\nintros.\napply (opp_unicity H (Opp x) x).\nunfold is_opposite in |- *; split.\nelim H; intros; elim H2; intros; elim H4; intros; elim (H6 x H0); intros. \nelim H8; trivial.\nelim H; intros; elim H2; intros; elim H4; intros; elim (H6 x H0); intros.\nelim H8; intros; elim H10; auto.\nQed.\n\n",
                "context_tokens": 726,
                "proof_start_offset": 2149,
                "proof_end_offset": 3302,
                "proof": "Lemma opp_add : is_group -> commutativity S Add -> forall x y : S, G x -> G y -> Opp (Add x y) = Add (Opp x) (Opp y).\nProof.\nintros; symmetry in |- *; apply (opp_unicity H (Add x y) (Add (Opp x) (Opp y))).\nunfold is_opposite in |- *; split.\nelim H; intros; apply (H3 x y H1 H2).\nsplit.\nelim H; intros; elim H4; intros; elim H6; intros; clear H4 H5 H6 H7.\nelim (H8 x H1); intros; elim H5; intros; clear H4 H5 H7.\nelim (H8 y H2); intros; elim H5; intros.\napply (H3 (Opp x) (Opp y) H6 H7).\nelim H; intros; elim H4; intros; clear H3 H4 H6.\nrewrite (add_add H0 H5 x y (Opp x) (Opp y)).\nrewrite (add_add H0 H5 (Opp x) (Opp y) x y); clear H5.\nelim H; intros; elim H4; intros; elim H6; intros.\nelim (H8 x H1); intros; elim H10; intros; elim H12; intros.\nrewrite H13; rewrite H14.\nclear H H0 H1 H3 H4 H5 H6 H9 H10 H11 H12 H13 H14.\nelim (H8 y H2); intros; elim H0; intros; elim H3; intros.\nrewrite H4; rewrite H5.\nclear H H0 H1 H2 H3 H4 H5 H8.\nelim H7; intros; exact (H0 O H).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma opp_add : is_group -> commutativity S Add -> forall x y : S, G x -> G y -> Opp (Add x y) = Add (Opp x) (Opp y).\nProof.\nintros.\napply (opp_unicity H (Add x) (Opp x) (Add y) (Add x y) (Add x y) (Add y) (Add y) (Add y) (Add y) (Add x y) (Add y) (Add x y) (Add (Add y) y) (Add x y) (Add x y) (Add y) (Add y) (Add y y) (Add (Add x y) (Add y) (Add y) (Add x y) (Add x y) (Add (Add y) y) (Add x y) (Add (Add y) x y) (Add (Add y) y (Add (Add y) x y) (Add (Add y) (Add x y) (Add x y) (Add (Add y) y) (Add (Add y) (Add x y) (Add x y) (Add (Add y) (Add y) (Add y) (Add (Add y) y) (Add (Add y) y (Add x y) (Add (Add y) (Add y) (Add (Add x y) (Add x y) (Qed.",
                    "Lemma opp_add : is_group -> commutativity S Add -> forall x y : S, G x -> G y -> Opp (Add x y) = Add (Opp x) (Opp y).\nProof.\nintros.\napply (opp_injective H).\nQed.",
                    "Lemma opp_add : is_group -> commutativity S Add -> forall x y : S, G x -> G y -> Opp (Add x y) = Add (Opp x) (Opp y).\nProof.\nintros.\nelim (H0 (Opp (Add x y)) x y); intros; elim H3; intros; elim H4; intros; elim H4; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H6; intros; elim H5; intros; elim H5; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6;\n intros; elim H6; intros; elim H7; intros; elim H6; intros; elim H6; intros; elim H6;Qed.",
                    "Lemma opp_add : is_group -> commutativity S Add -> forall x y : S, G x -> G y -> Opp (Add x y) = Add (Opp x) (Opp y).\nProof.\nintros.\napply (opp_injective H); auto.\nQed.",
                    "Lemma opp_add : is_group -> commutativity S Add -> forall x y : S, G x -> G y -> Opp (Add x y) = Add (Opp x) (Opp y).\nProof.\nintros.\napply (opp_unicity H (Opp x) x).\nunfold FtoRradix in |- *; split.\nelim H1; intros; elim H2; intros; elim H2; intros; elim H2; intros; elim H2; intros; elim H3; intros; elim H3; intros; elim H3; intros; elim H4; intros; elim H4; intros; elim H4; intros; elim H4; intros; elim H4; intros; elim H4; intros; elim H4; intros; elim H4; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H6; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H6; intros; elim H5; intros; elim H5; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6;\n intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H5; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; introsQed."
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/groups.v",
                "context": "2 H5 H6 H8 H10.\n(* [((-x)+x)+y=(-x)+(x+y)] *)\nelim (H7 (Opp x) x y).\n(* [x+y = 0] *)\nelim H4; intros; rewrite H; clear H H0 H1 H4 H7.\n(* [(-x)+0=(-x)] *)\nelim H9; intros; elim (H0 (Opp x) H3); intros. exact H1.\nQed.\n\nLemma opp_opp : is_group -> forall x : S, G x -> x = Opp (Opp x).\nProof.\nintros.\napply (opp_unicity H (Opp x) x).\nunfold is_opposite in |- *; split.\nelim H; intros; elim H2; intros; elim H4; intros; elim (H6 x H0); intros. \nelim H8; trivial.\nelim H; intros; elim H2; intros; elim H4; intros; elim (H6 x H0); intros.\nelim H8; intros; elim H10; auto.\nQed.\n\nLemma opp_add :\n is_group ->\n commutativity S Add ->\n forall x y : S, G x -> G y -> Opp (Add x y) = Add (Opp x) (Opp y).\nProof.\nintros; symmetry  in |- *;\n apply (opp_unicity H (Add x y) (Add (Opp x) (Opp y))).\nunfold is_opposite in |- *; split.\n(* [G (x+y)] *)\nelim H; intros; apply (H3 x y H1 H2).\nsplit.\n(* [G ((-x)+(-y))] *)\nelim H; intros; elim H4; intros; elim H6; intros; clear H4 H5 H6 H7.\nelim (H8 x H1); intros; elim H5; intros; clear H4 H5 H7.\nelim (H8 y H2); intros; elim H5; intros.\napply (H3 (Opp x) (Opp y) H6 H7).\n(* [(x+y)+((-x)+(-y)) = 0 & ((-x)+(-y))+(x+y) = 0] *)\nelim H; intros; elim H4; intros; clear H3 H4 H6.\nrewrite (add_add H0 H5 x y (Opp x) (Opp y)).\nrewrite (add_add H0 H5 (Opp x) (Opp y) x y); clear H5.\nelim H; intros; elim H4; intros; elim H6; intros. \n  (* [x+(-x) = 0 (-x)+x = 0] *)\nelim (H8 x H1); intros; elim H10; intros; elim H12; intros. \nrewrite H13; rewrite H14.\nclear H H0 H1 H3 H4 H5 H6 H9 H10 H11 H12 H13 H14.\n  (* [y+(-y) = 0 (-y)+y = 0] *)\nelim (H8 y H2); intros; elim H0; intros; elim H3; intros. \nrewrite H4; rewrite H5.\nclear H H0 H1 H2 H3 H4 H5 H8.\n  (* [0+0 = 0] *)\nelim H7; intros; exact (H0 O H).\nQed.\n\n",
                "context_tokens": 753,
                "proof_start_offset": 3304,
                "proof_end_offset": 3522,
                "proof": "Lemma opp_neutral : is_group -> Opp O = O.\nProof.\nintros.\nelim (opp_unicity H O O).\nreflexivity.\nunfold is_opposite in |- *.\nelim H; intros; elim H1; intros; elim H3; intros; elim H4; intros.\nelim (H7 O H6); auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma opp_neutral : is_group -> Opp O = O.\nProof.\nintros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elimQed.",
                    "Lemma opp_neutral : is_group -> Opp O = O.\nProof.\nintros.\nelim H; intros; elim H; intros; elim H; intros; elim H; intros; clear H; intros.\nrewrite H; rewrite H; clear H; rewrite H; rewrite H; clear H; rewrite H; clear H; rewrite H; clear H; rewrite H; clear H; rewrite H; rewrite H; clear H; rewrite H; clear H; rewrite H; rewrite H; clear H; rewrite H; clear H; rewrite H; rewrite H; clear H; rewrite H; clear H; rewrite H; rewrite H; clear H; rewrite H; rewrite H; clear H; rewrite H; rewrite H; clear H; rewrite H; rewrite H; rewrite H; clear H; rewrite H; rewrite H; rewrite H; clear H; rewrite H; rewrite H; clear H; rewrite H; rewrite H; rewrite H; rewrite H; clear H; rewrite H; rewrite H; rewrite H; clear H; rewrite H; rewrite H; rewrite H; rewrite H; clear H; rewrite H; rewrite H; rewrite H; rewrite H; rewrite H; clear H; rewrite H; rewrite H; rewrite H; clear H; rewrite H; rewrite H; rewrite H; rewriteQed.",
                    "Lemma opp_neutral : is_group -> Opp O = O.\nProof.\nintros; elim H; intros; elim H; intros; elim H4; intros; elim H4; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H6; intros; elim H5; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H7; intros; elim H7; intros; elim H6; intros; elim H7; intros; elim H6; intros; elim H7; intros; elim H6; intros; elim H7; intros; elim H7; intros; elim H7; intros; elim H7; intros; elim H7; intros; elim H7; intros; elim H6; intros; elim H7; intros; elim H6; intros; elim H7; intros; elim H7;\n intros; elim H7; intros; elim H8; intros; elim H7; intros; elim H7; intros; elim H7; intros; elim H7; introsQed.",
                    "Lemma opp_neutral : is_group -> Opp O = O.\nProof.\nintros; elim H; intros; elim H; intros; elim H0; intros; elim H; intros; clear H0.\nrewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0; rewrite H0;Qed.",
                    "Lemma opp_neutral : is_group -> Opp O = O.\nProof.\nintros; elim H; intros; elim H0; intros; elim H; intros; elim H0; intros; elim H0; intros; elim H0; intros; elim H0; intros; elim H0; intros; elim H1; intros; elim H0; intros; elim H1; intros; elim H1; intros; elim H1; intros; elim H1; intros; elim H2; intros; elim H1; intros; elim H1; intros; elim H2; intros; elim H1; intros; elim H2; intros; elim H1; intros; elim H1; intros; elim H1; intros; elim H2; intros; elim H2;\n intros; elim H3; intros; elim H1; intros; elim H2; intros; elim H1; intros; elim H1; intros; elim H2;\n intros; elim H3; intros; elim H3; intros; elim H4; intros; elim H4; intros; elim H4;\n intros; elim H5; intros; elim H5; intros; elim H6; intros; elim H5; intros; elim H6; intros; elim H6Qed."
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/misc.v",
                "context": "Require Export Lci.\n\nDefinition antisym (A : Set) (R : A -> A -> Prop) :=\n  forall x y : A, R x y -> R y x -> x = y :>A.\n\n",
                "context_tokens": 46,
                "proof_start_offset": 122,
                "proof_end_offset": 234,
                "proof": "Definition pi1 : forall (A : Set) (P : A -> Prop), {x : A | P x} -> A.\nProof.\nsimple induction 1; auto.\nDefined.",
                "end_command": "Defined.",
                "generated_proofs": [
                    "Definition pi1 : forall (A : Set) (P : A -> Prop), {x : A | P x} -> A.\nDefinition pi1 (A : Set) (P : A -> Prop) (P : A -> Prop) :=\n  forall x y : A, R x y -> R y x.\n\nDefinition pi2 (A : Set) (P : A -> Prop) (P : A -> Prop) : Prop :=\n  forall x y : A, R x y -> R x y.\n\nDefinition pi2 (A : Set) (P : A -> Prop) (P : A -> Prop) :=\n  forall x y : A, R x y -> R y -> R y x.\n\nDefinition pi2 (A : Set) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) :=\n  forall x y : A, R x y -> R y -> R y x.\n\nDefinition pi2 (A : Set) (P : A -> Prop) :=\n  forall x y : A, R x y -> R x y.\n\nDefinition pi2 (A : Set) (P : A -> Prop) (P : A -> Prop) :=\n  forall x y : A, R x y -> R x y.\n\nDefinition pi2 (A : SetDefined.",
                    "Definition pi1 : forall (A : Set) (P : A -> Prop), {x : A | P x} -> A.\n\nDefinition pi1 (A : Set) (P : A -> Prop) (P : A -> Prop) :=\n  forall x y : A, R x y -> R x y}.\n\nDefinition pi2 (A : Set) (P : A -> Prop) (P : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q : A -> Prop) (Q :Defined.",
                    "Definition pi1 : forall (A : Set) (P : A -> Prop), {x : A | P x} -> A.\n\nDefinition pi2 : forall (A B : Set) (P : A -> Prop) (P : A -> Prop) :=\n  forall x y : A, R x y -> R x y -> R x y.\n\nDefinition pi2 : forall (A B : Set) (P : A -> Prop),\n  forall x y : A, R x y -> R x y -> R x y.\n\nDefinition pi2 : forall (A B : Set) (P : A -> Prop) (P : A -> Prop),\n  forall x y : A, R x y -> R x y -> R y -> R y x.\n\nDefinition pi2 : forall (A B : Type) (P : A -> Prop),\n  forall x y : A, R x y -> R x y.\n\nDefinition pi2 : forall (A B : Type) (P : A -> Prop),\n  forall x y : A, R x y -> R x y -> R x y.\n\nDefinition pi2 : forall (A B : Type) (P : A -> Prop),\n  forall x y : A, R x y -> R x y.\n\nDefinition pi2 : forall (A B : TypeDefined.",
                    "Definition pi1 : forall (A : Set) (P : A -> Prop), {x : A | P x} -> A.\n\nDefinition pi2 (A : Set) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (Defined.",
                    "Definition pi1 : forall (A : Set) (P : A -> Prop), {x : A | P x} -> A.\n\nDefinition pi2 : forall (A : Set) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) :=\n  forall x y : A, R x y -> R x y -> R x y.\n\nDefinition pi2 : forall (A : Set) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop),\n    forall x y : A, R x y -> R y -> R x y.\n\nDefinition pi2 : forall (A : Set) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop) (P : A -> Prop)Defined."
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/misc.v",
                "context": "Require Export Lci.\n\nDefinition antisym (A : Set) (R : A -> A -> Prop) :=\n  forall x y : A, R x y -> R y x -> x = y :>A.\n\nDefinition pi1 : forall (A : Set) (P : A -> Prop), {x : A | P x} -> A.\nProof.\nsimple induction 1; auto.\nDefined.\n\n",
                "context_tokens": 89,
                "proof_start_offset": 236,
                "proof_end_offset": 378,
                "proof": "Lemma pi2 : forall (A : Set) (P : A -> Prop) (p : {x : A | P x}), P (pi1 A P p).\nProof.\nsimple induction p; unfold pi1 in |- *; trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma pi2 : forall (A : Set) (P : A -> Prop) (p : {x : A | P x}), P (pi1 A P p).\nProof.\nsimple induction 1; auto.\nQed.",
                    "Lemma pi2 : forall (A : Set) (P : A -> Prop) (p : {x : A | P x}), P (pi1 A P p).\nProof.\nsimple induction 1; auto.\nQed.",
                    "Lemma pi2 : forall (A : Set) (P : A -> Prop) (p : {x : A | P x}), P (pi1 A P p).\nProof.\nsimple induction 1; auto.\nQed.",
                    "Lemma pi2 : forall (A : Set) (P : A -> Prop) (p : {x : A | P x}), P (pi1 A P p).\nProof.\nsimple induction 1; auto.\nQed.",
                    "Lemma pi2 : forall (A : Set) (P : A -> Prop) (p : {x : A | P x}), P (pi1 A P p).\nProof.\nsimple induction 1; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/misc.v",
                "context": "Require Export Lci.\n\nDefinition antisym (A : Set) (R : A -> A -> Prop) :=\n  forall x y : A, R x y -> R y x -> x = y :>A.\n\nDefinition pi1 : forall (A : Set) (P : A -> Prop), {x : A | P x} -> A.\nProof.\nsimple induction 1; auto.\nDefined.\n\nLemma pi2 :\n forall (A : Set) (P : A -> Prop) (p : {x : A | P x}), P (pi1 A P p).\nProof.\nsimple induction p; unfold pi1 in |- *; trivial.\nQed.\n\nDefinition inversible (S : Set) (Mult : S -> S -> S) \n  (I x : S) := exists y : S, Mult x y = I /\\ Mult y x = I.\n\n\n",
                "context_tokens": 192,
                "proof_start_offset": 495,
                "proof_end_offset": 763,
                "proof": "Lemma inv_com : forall (S : Set) (Mult : S -> S -> S) (I x : S), commutativity S Mult -> (exists y : S, Mult x y = I) -> inversible S Mult I x.\nProof.\nintros; unfold inversible in |- *.\nelim H0; intros.\nexists x0.\nsplit.\nassumption.\nelim (H x x0); assumption.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma inv_com : forall (S : Set) (Mult : S -> S -> S) (I x : S), commutativity S Mult -> (exists y : S, Mult x y = I) -> inversible S Mult I x.\nProof.\nsimple induction 1; simpl in |- *; trivial.\nQed.",
                    "Lemma inv_com : forall (S : Set) (Mult : S -> S -> S) (I x : S), commutativity S Mult -> (exists y : S, Mult x y = I) -> inversible S Mult I x.\nProof.\nsimple induction 1; auto.\nintros x y H0; elim H0; auto.\nintros x y0 H1; elim H0; auto.\nintros x y0 H1 H2; elim H0; auto.\nintros x0 H2; elim H0; auto.\nintros x0 H2; elim H0; auto.\nintros x0 H2; elim H0; auto.\nintros x0 H2; elim H1; auto.\nintros x0 H3; elim H0; auto.\nintros x0 H3; elim H1; auto.\nintros x0 H4; elim H1; auto.\nintros x0 H4; elim H1; auto.\nintros x0 H4; elim H1; auto.\nintros x0 H4; elim H1; auto.\nintros x0 H4; elim H1; auto.\nintros x1 H4; elim H2; auto.\nintros x0 H5; elim H1; auto.\nintros x0 H4; elim H1; auto.\nintros x0 H4; elim H1; auto.\nintros x0 H4; elimQed.",
                    "Lemma inv_com : forall (S : Set) (Mult : S -> S -> S) (I x : S), commutativity S Mult -> (exists y : S, Mult x y = I) -> inversible S Mult I x.\nProof.\nsimple induction 1; simpl in |- *; intros.\napply inv_com.\nQed.",
                    "Lemma inv_com : forall (S : Set) (Mult : S -> S -> S) (I x : S), commutativity S Mult -> (exists y : S, Mult x y = I) -> inversible S Mult I x.\nProof.\nsimple induction 1; intros.\nelim (IHedible_aux (S x) (S y)).\nsimpl in |- *; trivial.\nQed.",
                    "Lemma inv_com : forall (S : Set) (Mult : S -> S -> S) (I x : S), commutativity S Mult -> (exists y : S, Mult x y = I) -> inversible S Mult I x.\nProof.\nsimple induction 1; simpl in |- *; trivial.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Zstruct.v",
                "context": "Require Export Lci.\nRequire Export misc.\nRequire Export Arith.\nRequire Export groups.\nRequire Export rings.\nRequire Export ZArith.\nRequire Import Omega.\n\n(* Addition on Z, (Z, +) is a group *)\n\nDefinition IdZ (x : Z) := True.\n\n",
                "context_tokens": 65,
                "proof_start_offset": 227,
                "proof_end_offset": 453,
                "proof": "Theorem Z_group : is_group Z IdZ Zplus 0%Z Zopp.\nProof.\nsplit.\nred in |- *; trivial.\nsplit.\nred in |- *; auto with zarith.\nsplit; red in |- *.\nsplit; auto with zarith.\nunfold IdZ in |- *; trivial.\nsplit; auto with zarith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Z_group : is_group Z IdZ Zplus 0%Z Zopp.\nProof.\nintros x y H.\napply Z_group_inverse.\napply Z_group_inverse.\napply Z_group_inverse.\nQed.",
                    "Theorem Z_group : is_group Z IdZ Zplus 0%Z Zopp.\nProof.\nintros x; apply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_simplify.\napply Z_group_simplify.\napply Z_simplify.\napply Z_group_simplify.\napply Z_simplify.\napply Z_group_simplify.\napply Z_simplify.\napply Z_group_simplify.\napply Z_simplify.\napply Z_group_simplify.\napply Z_simplify.\napply Z_group_simplify.\napply Z_simplify.\napply Z_group_simplify.\napply Z_simplify.\napply Z_group_simplify.\napply Z_simplify.\napply Z_group_simplify.\napply Z_simplify.\napply Z_group_simplify.\napply Z_simplify.\napply Z_group_simplify.\napply Z_group_simplify.Qed.",
                    "Theorem Z_group : is_group Z IdZ Zplus 0%Z Zopp.\nProof.\nintros x; unfold IdZ in |- *.\ngeneralize (Z_eq_dec x x); intros H0; unfold IdZ in |- *.\ngeneralize (Z_eq_dec x x); intros H0; unfold IdZ in |- *.\ngeneralize (Z_eq_dec x x); intros H0; unfold IdZ in |- *.\ngeneralize (Z_eq_dec x x); intros H0; unfold IdZ in |- *.\ngeneralize (Z_eq_dec x x); intros H0; unfold IdZ in |- *.\ngeneralize (Z_eq_dec x x); intros H0; unfold IdZ in |- *.\ngeneralize (Z_eq_dec x x); intros H0; unfold IdZ in |- *.\ngeneralize (Z_eq_dec x x); intros H0; unfold IdZ in |- *.\ngeneralize (Z_eq_dec x x); intros H1; unfold IdZ in |- *.\ngeneralize (Z_eq_dec x x); intros H0; unfold IdZ in |- *.\ngeneralize (Z_eq_dec x x); intros H0; unfold IdZ in |- *.\ngeneralize (Z_eq_dec x x); introsQed.",
                    "Theorem Z_group : is_group Z IdZ Zplus 0%Z Zopp.\nProof.\nintros x y; apply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_simplify.\napply Z_group_simplify.\napply Z_simplify.\napply Z_group_simplify.\napply Z_simplify.\napply Z_group_simplify.\napply Z_simplify.\napply Z_group_simplify.\napply Z_simplify.\napply Z_group_simplify.\napply Z_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_simplify.\napply Z_group_simplify.\napply ZQed.",
                    "Theorem Z_group : is_group Z IdZ Zplus 0%Z Zopp.\nProof.\nintros.\napply Z_group_inverse.\napply Z_group_inverse.\napply Z_group_inverse.\napply Z_group_inverse.\napply Z_group_inverse.\napply Z_group_inverse.\napply Z_inverse.\napply Z_group_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napply Z_inverse.\napplyQed."
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Zstruct.v",
                "context": "Require Export Lci.\nRequire Export misc.\nRequire Export Arith.\nRequire Export groups.\nRequire Export rings.\nRequire Export ZArith.\nRequire Import Omega.\n\n(* Addition on Z, (Z, +) is a group *)\n\nDefinition IdZ (x : Z) := True.\n\nTheorem Z_group : is_group Z IdZ Zplus 0%Z Zopp.\nProof.\nsplit.\nred in |- *; trivial.\nsplit.\nred in |- *; auto with zarith.\nsplit; red in |- *.\nsplit; auto with zarith.\nunfold IdZ in |- *; trivial.\nsplit; auto with zarith.\nQed.\n\n(* Multiplication on Z, (Z, +, *, 0, 1) is a unitary commutative ring *)\n\n",
                "context_tokens": 167,
                "proof_start_offset": 529,
                "proof_end_offset": 762,
                "proof": "Theorem Z_ring : is_ring Z IdZ Zplus Zmult 0%Z Zopp.\nProof.\nunfold is_ring in |- *.\nsplit.\nred in |- *; auto with zarith.\nsplit.\nexact Z_group.\nsplit.\nunfold intern in |- *.\nintros.\nexact I.\nsplit; red in |- *; auto with zarith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Z_ring : is_ring Z IdZ Zplus Zmult 0%Z Zopp.\nProof.\nintros.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napply Z_group_simplify.\napplyQed.",
                    "Theorem Z_ring : is_ring Z IdZ Zplus Zmult 0%Z Zopp.\nProof.\nintros; apply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply Z_group_inj.\napply ZQed.",
                    "Theorem Z_ring : is_ring Z IdZ Zplus Zmult 0%Z Zopp.\nProof.\nintros.\nunfold IdZ in |- *; simpl in |- *; auto with zarith.\nQed.",
                    "Theorem Z_ring : is_ring Z IdZ Zplus Zmult 0%Z Zopp.\nProof.\nsplit; auto with zarith.\nsimpl in |- *; auto with zarith.\nQed.",
                    "Theorem Z_ring : is_ring Z IdZ Zplus Zmult 0%Z Zopp.\nProof.\nsplit.\nred in |- *; trivial.\nred in |- *; trivial.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Zstruct.v",
                "context": "Require Export Lci.\nRequire Export misc.\nRequire Export Arith.\nRequire Export groups.\nRequire Export rings.\nRequire Export ZArith.\nRequire Import Omega.\n\n(* Addition on Z, (Z, +) is a group *)\n\nDefinition IdZ (x : Z) := True.\n\nTheorem Z_group : is_group Z IdZ Zplus 0%Z Zopp.\nProof.\nsplit.\nred in |- *; trivial.\nsplit.\nred in |- *; auto with zarith.\nsplit; red in |- *.\nsplit; auto with zarith.\nunfold IdZ in |- *; trivial.\nsplit; auto with zarith.\nQed.\n\n(* Multiplication on Z, (Z, +, *, 0, 1) is a unitary commutative ring *)\n\nTheorem Z_ring : is_ring Z IdZ Zplus Zmult 0%Z Zopp.\nProof.\nunfold is_ring in |- *.\nsplit.\nred in |- *; auto with zarith.\nsplit. exact Z_group.\nsplit. unfold intern in |- *. intros. exact I.\nsplit; red in |- *; auto with zarith.\nQed.\n\n",
                "context_tokens": 245,
                "proof_start_offset": 764,
                "proof_end_offset": 1037,
                "proof": "Theorem Z_unitary_commutative_ring : is_unitary_commutative_ring Z IdZ Zplus Zmult 0%Z 1%Z Zopp.\nProof.\nunfold is_unitary_commutative_ring in |- *.\nsplit.\nexact Z_ring.\nsplit.\nred in |- *; auto with zarith.\nsplit.\nunfold IdZ in |- *; trivial.\nsplit; auto with zarith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Z_unitary_commutative_ring : is_unitary_commutative_ring Z IdZ Zplus Zmult 0%Z 1%Z Zopp.\nProof.\nunfold is_ring_mult in |- *.\nsplit.\nred in |- *; auto with zarith.\nintros.\napply Zle_trans with (2 := Z_unit); auto with zarith.\nQed.",
                    "Theorem Z_unitary_commutative_ring : is_unitary_commutative_ring Z IdZ Zplus Zmult 0%Z 1%Z Zopp.\nProof.\nunfold is_ring_mult in |- *.\nsplit.\nred in |- *; auto with zarith.\nintros.\napply Z_unit_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_field_Qed.",
                    "Theorem Z_unitary_commutative_ring : is_unitary_commutative_ring Z IdZ Zplus Zmult 0%Z 1%Z Zopp.\nProof.\nunfold is_ring_mult in |- *.\nsplit; auto with zarith.\napply Z_unit_inj.\nQed.",
                    "Theorem Z_unitary_commutative_ring : is_unitary_commutative_ring Z IdZ Zplus Zmult 0%Z 1%Z Zopp.\nProof.\nintros.\napply Z_unit_commutative_ring.\nQed.",
                    "Theorem Z_unitary_commutative_ring : is_unitary_commutative_ring Z IdZ Zplus Zmult 0%Z 1%Z Zopp.\nProof.\nintros.\nsplit.\nred in |- *; auto with zarith.\nintros.\nsplit.\nred in |- *; auto with zarith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Zstruct.v",
                "context": "Require Export Lci.\nRequire Export misc.\nRequire Export Arith.\nRequire Export groups.\nRequire Export rings.\nRequire Export ZArith.\nRequire Import Omega.\n\n(* Addition on Z, (Z, +) is a group *)\n\nDefinition IdZ (x : Z) := True.\n\nTheorem Z_group : is_group Z IdZ Zplus 0%Z Zopp.\nProof.\nsplit.\nred in |- *; trivial.\nsplit.\nred in |- *; auto with zarith.\nsplit; red in |- *.\nsplit; auto with zarith.\nunfold IdZ in |- *; trivial.\nsplit; auto with zarith.\nQed.\n\n(* Multiplication on Z, (Z, +, *, 0, 1) is a unitary commutative ring *)\n\nTheorem Z_ring : is_ring Z IdZ Zplus Zmult 0%Z Zopp.\nProof.\nunfold is_ring in |- *.\nsplit.\nred in |- *; auto with zarith.\nsplit. exact Z_group.\nsplit. unfold intern in |- *. intros. exact I.\nsplit; red in |- *; auto with zarith.\nQed.\n\nTheorem Z_unitary_commutative_ring :\n is_unitary_commutative_ring Z IdZ Zplus Zmult 0%Z 1%Z Zopp.\nProof.\nunfold is_unitary_commutative_ring in |- *.\nsplit. exact Z_ring.\nsplit.\nred in |- *; auto with zarith.\nsplit.\nunfold IdZ in |- *; trivial.\nsplit; auto with zarith.\nQed.\n\n(* Z is an integral domain *)\n\n",
                "context_tokens": 346,
                "proof_start_offset": 1070,
                "proof_end_offset": 1413,
                "proof": "Theorem integrityZ : integrity Z Zmult 0%Z.\nProof.\nunfold integrity in |- *.\nintros a b; elim a.\nintros; left; reflexivity.\nintros; right.\ngeneralize H; clear H; simpl in |- *; case b; intros; inversion H; trivial.\nintros; right.\ngeneralize H; clear H; simpl in |- *; case b; intros; inversion H; trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem integrityZ : integrity Z Zmult 0%Z.\nProof.\nintros.\nunfold is_ring_simplify.\napply Z_unit_Z.\nQed.",
                    "Theorem integrityZ : integrity Z Zmult 0%Z.\nProof.\nintros.\napply Z_unit_ring.\nQed.",
                    "Theorem integrityZ : integrity Z Zmult 0%Z.\nProof.\nintros.\nsplit.\nred in |- *; auto with zarith.\nQed.",
                    "Theorem integrityZ : integrity Z Zmult 0%Z.\nProof.\nintros.\nunfold IdZ in |- *; simpl in |- *.\nsplit.\nexact Z_unit_Z.\nQed.",
                    "Theorem integrityZ : integrity Z Zmult 0%Z.\nProof.\nunfold is_ring_simplify in |- *.\nsplit.\nred in |- *; auto with zarith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Zstruct.v",
                "context": "Require Export Lci.\nRequire Export misc.\nRequire Export Arith.\nRequire Export groups.\nRequire Export rings.\nRequire Export ZArith.\nRequire Import Omega.\n\n(* Addition on Z, (Z, +) is a group *)\n\nDefinition IdZ (x : Z) := True.\n\nTheorem Z_group : is_group Z IdZ Zplus 0%Z Zopp.\nProof.\nsplit.\nred in |- *; trivial.\nsplit.\nred in |- *; auto with zarith.\nsplit; red in |- *.\nsplit; auto with zarith.\nunfold IdZ in |- *; trivial.\nsplit; auto with zarith.\nQed.\n\n(* Multiplication on Z, (Z, +, *, 0, 1) is a unitary commutative ring *)\n\nTheorem Z_ring : is_ring Z IdZ Zplus Zmult 0%Z Zopp.\nProof.\nunfold is_ring in |- *.\nsplit.\nred in |- *; auto with zarith.\nsplit. exact Z_group.\nsplit. unfold intern in |- *. intros. exact I.\nsplit; red in |- *; auto with zarith.\nQed.\n\nTheorem Z_unitary_commutative_ring :\n is_unitary_commutative_ring Z IdZ Zplus Zmult 0%Z 1%Z Zopp.\nProof.\nunfold is_unitary_commutative_ring in |- *.\nsplit. exact Z_ring.\nsplit.\nred in |- *; auto with zarith.\nsplit.\nunfold IdZ in |- *; trivial.\nsplit; auto with zarith.\nQed.\n\n(* Z is an integral domain *)\n\nTheorem integrityZ : integrity Z Zmult 0%Z.\nProof.\nunfold integrity in |- *.\nintros a b; elim a.\n(* OZ *)\nintros; left; reflexivity.\n(* pos n *)\nintros; right.\ngeneralize H; clear H; simpl in |- *; case b; intros; inversion H; trivial.\n(* neg n *)\nintros; right.\ngeneralize H; clear H; simpl in |- *; case b; intros; inversion H; trivial.\nQed.\n\n",
                "context_tokens": 458,
                "proof_start_offset": 1415,
                "proof_end_offset": 2552,
                "proof": "Lemma inversibleZ : forall x : Z, inversible Z Zmult 1%Z x -> x = 1%Z \\/ x = (-1)%Z.\nProof.\nunfold inversible in |- *.\nintros.\ninversion_clear H.\ninversion_clear H0.\nclear H1.\ngeneralize H; clear H.\nelim (Z_lt_ge_dec 0 x); intros.\nleft.\nelim (Z_le_lt_eq_dec 1 x); auto with zarith; intros.\ncut (1 > x0)%Z; intros.\nabsurd (0 < x0)%Z; intros; auto with zarith.\napply Zgt_lt.\napply Zmult_gt_0_reg_l with x; auto with zarith.\napply Zmult_gt_reg_r with x; auto with zarith.\nrewrite Zmult_1_l; rewrite Zmult_comm; auto with zarith.\nelim (Z_le_lt_eq_dec x 0); auto with zarith; intros.\nclear b.\nright.\nelim (Z_le_lt_eq_dec 1 (- x)); auto with zarith; intros.\ncut (1 > - x0)%Z; intros.\nabsurd (0 < - x0)%Z; intros; auto with zarith.\napply Zgt_lt.\napply Zmult_gt_0_reg_l with (- x)%Z; auto with zarith.\nrewrite Zopp_mult_distr_l_reverse; rewrite <- Zopp_mult_distr_r; auto with zarith.\napply Zmult_gt_reg_r with (- x)%Z; auto with zarith.\nrewrite Zmult_1_l; rewrite Zmult_comm.\nrewrite Zopp_mult_distr_l_reverse; rewrite <- Zopp_mult_distr_r; auto with zarith.\nrewrite b0 in H; simpl in H; inversion H.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma inversibleZ : forall x : Z, inversible Z Zmult 1%Z x -> x = 1%Z \\/ x = (-1)%Z.\nProof.\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; left; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; left; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; left; reflexivity.\n(* pos n = 0 *)\nQed.",
                    "Lemma inversibleZ : forall x : Z, inversible Z Zmult 1%Z x -> x = 1%Z \\/ x = (-1)%Z.\nProof.\nintros; right; reflexivity.\n(* neg n = -1 *)\nintros; right; reflexivity.\n(* neg n = -1 *)\nintros; right; reflexivity.\n(* neg n = -1 *)\nintros; right; reflexivity.\n(* neg n = -1 *)\nintros; right; reflexivity.\n(* neg n = -1 *)\nintros; right; reflexivity.\n(* neg n = -1 *)\nintros; right; reflexivity.\n(* neg n = -1 *)\nintros; right; reflexivity.\n(* neg n = -1 *)\nintros; right; reflexivity.\n(* neg n = -1 *)\nintros; right; reflexivity.\n(* neg n = -1 *)\nintros; right; reflexivity.\n(* neg n = -1 *)\nintros; right; reflexivity.\n(* neg n = -1 *)\nintros; right; reflexivity.\n(* neg n = -1 *)\nintros; right; reflexivity.\n(* neg n = -1 *)\nintros; right; reflexivity.\n(* neg n = -1 *)\nintros; right; reflexivity.\n(* neg n = -1 *)\nintros; right; reflexivity.\n(* neg n = -Qed.",
                    "Lemma inversibleZ : forall x : Z, inversible Z Zmult 1%Z x -> x = 1%Z \\/ x = (-1)%Z.\nProof.\nunfold is_ring_simplify in |- *; auto with zarith.\nintros; left; reflexivity.\nQed.",
                    "Lemma inversibleZ : forall x : Z, inversible Z Zmult 1%Z x -> x = 1%Z \\/ x = (-1)%Z.\nProof.\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nintros; right; reflexivity.\n(* pos n = 0 *)\nQed.",
                    "Lemma inversibleZ : forall x : Z, inversible Z Zmult 1%Z x -> x = 1%Z \\/ x = (-1)%Z.\nProof.\nintros; right; reflexivity.\nQed."
                ]
            }
        ],
        "zfc": [
            {
                "filepath": "./coq_projects/zfc/Axioms.v",
                "context": "(* This program is free software; you can redistribute it and/or      *)\n(* modify it under the terms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(* Definitions of the empty set, pair, union, intersection, comprehension  *)\n(*  axiom and powerset, together with their properties                     *)\n\n\nRequire Import Sets.\n\n(* Useful types (actually top and bottom)   *)\n\nInductive Un : Set :=\n    void : Un.\n\nInductive F : Set :=.\n\n(* The empty set  (vide = french for empty)   *)\n\nDefinition Vide : Ens := sup F (fun f : F => match f return Ens with\n                                             end).\n\n(* The axioms of the empty set *)\n\n",
                "context_tokens": 334,
                "proof_start_offset": 1596,
                "proof_end_offset": 1761,
                "proof": "Theorem Vide_est_vide : forall E : Ens, IN E Vide -> F.\nProof.\nunfold Vide in |- *; simpl in |- *; intros E H; cut False.\nsimple induction 1.\nelim H; intros x; elim x.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Vide_est_vide : forall E : Ens, IN E Vide -> F.\nintros E; red in |- *; intros E; red in |- *; intros E; red in |- *; intros E; red in |- *; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E; red in H; intros E;Qed.",
                    "Theorem Vide_est_vide : forall E : Ens, IN E Vide -> F.\nProof\n  unfold not in |- *; intros E; elim E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E;\n clear E; clear E; clear E; clear E; clear E; clear E; clear E;\n clear E; clear E; clear E; clear E; clear E; clear E;\n clear E; clear E; clear E;\n clear E; clear E; clear E; clear E;\n clear E; clear E; clear E;\n clear E; clear E; clear E;\n clear E; clear E; clear E; clear E;\n clear E; clear E; clear E; clear E;\n clear E; clear E;\n clear E; clear E; clear E; clear E;\n clear E; clear E; clear E;\n clear E; clear E; clear E; clear E;\n clear E; clear E; clear E; clear E;\n clear E;Qed.",
                    "Theorem Vide_est_vide : forall E : Ens, IN E Vide -> F.\nintros E; elim E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E;\n clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E;\n clear E; clear E; clear E; clear E;\n clear E; clear E; clear E; clear E; clear E;\n clear E; clear E; clear E; clear E;\n clear E; clear E; clear E; clear E;\n clear E; clear E; clear E; clear E;\n clear E; clear E; clear E; clear E;\n clear E; clear E;\n clear E; clear E; clear E;\n clear E; clear E; clear E;\n clear E; clear E; clear E; clear E;\n clear E; clear E;\n clear E; clear E; clear E;\n clear E; clear E; clearQed.",
                    "Theorem Vide_est_vide : forall E : Ens, IN E Vide -> F.\nProof.\nintro E; elim E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E;\n clear E; clear E; clear E; clear E; clear E;\n clear E; clear E; clear E; clear E; clear E; clear E;\n clear E; clear E; clear E; clear E;\n clear E; clear E; clear E; clear E; clear E;\n clear E; clear E; clear E;\n clear E; clear E; clear E;\n clear E; clear E; clear E;\n clear E; clear E; clear E; clear E;\n clear E; clear E; clear E;\n clear E; clear E; clear E;\n clear E; clear E; clear E; clear E;\n clear E; clear E; clear E; clear E;\n clear EQed.",
                    "Theorem Vide_est_vide : forall E : Ens, IN E Vide -> F.\nintros E H; elim H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; clear H; H; clear H; clear H; clear H; H; clear H; clear H; clear H;\nintros H; elim H; clear H; clear H; clear H; clear H; clear H; H; clear H; clear H; clear H; clear H;\nintros H; elim H; clear H; clear H; clear H; clear H; clear H; clear H;Qed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Axioms.v",
                "context": "(* This program is free software; you can redistribute it and/or      *)\n(* modify it under the terms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(* Definitions of the empty set, pair, union, intersection, comprehension  *)\n(*  axiom and powerset, together with their properties                     *)\n\n\nRequire Import Sets.\n\n(* Useful types (actually top and bottom)   *)\n\nInductive Un : Set :=\n    void : Un.\n\nInductive F : Set :=.\n\n(* The empty set  (vide = french for empty)   *)\n\nDefinition Vide : Ens := sup F (fun f : F => match f return Ens with\n                                             end).\n\n(* The axioms of the empty set *)\n\nTheorem Vide_est_vide : forall E : Ens, IN E Vide -> F.\nunfold Vide in |- *; simpl in |- *; intros E H; cut False.\nsimple induction 1.\nelim H; intros x; elim x.\nQed.\n\n\n",
                "context_tokens": 389,
                "proof_start_offset": 1764,
                "proof_end_offset": 2028,
                "proof": "Theorem tout_vide_est_Vide : forall E : Ens, (forall E' : Ens, IN E' E -> F) -> EQ E Vide.\nProof.\nunfold Vide in |- *; simple induction E; simpl in |- *; intros A e H H0; split.\nintros; elim (H0 (e x)); auto with zfc.\nexists x; auto with zfc.\nsimple induction y.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem tout_vide_est_Vide : forall E : Ens, (forall E' : Ens, IN E' E -> F) -> EQ E Vide.\nunfold not in |- *; simpl in |- *; intros E; elim x.\nintros x; elim x.\nintros x; elim x.\nintros x; elim x.\nintros x; elim x.\nintros x; elim x.\nintros x; elim x.\nintros x; elim x.\nintros x; elim x.\nintros x; elim x.\nintros x; elim x.\nintros x; elim H.\nintros x; elim H.\nintros x; elim H.\nintros x; elim H.\nintros x; elim H.\nintros x; elim H.\nintros x; elim H.\nintros x; elim H.\nintros x; elim H.\nintros x; elim H.\nintros x; elim H.\nintros x; elim H.\nintros x; elim H.\nintros x; elim H.\nintros x; elim H.\nintros x; elim H.\nintros x; elim H.\nintros x; elim H.\nintros x; elim H.\nintros x; elim H.\nintros x; elim H.\nintros x; elim H.\nintros x; elim H.\nintros x; elim H.\nintrosQed.",
                    "Theorem tout_vide_est_Vide : forall E : Ens, (forall E' : Ens, IN E' E -> F) -> EQ E Vide.\nunfold not in |- *; simpl in |- *; intros E H; cut False.\nintros E'; elim H'; intros x; elim H'; intros x; elim H'; intros x; elim H'; intros x; elim H';\n intros x; elim H'; intros x; elim H'; intros H'; elim H';\n intros x; elim H'; intros x; elim H'; intros x; elim H';\n intros x; elim H'; intros x; elim H'; intros H' H' H'0; elim H';\n intros x; elim H'; intros H'0; elim H'0; intros H'0; elim H';\n intros x; elim H'; intros H'0; elim H'0; intros H'0; elim H'0;\n intros x; elim H'0; intros H'0; elim H'0; intros H'0; elim H'0;\n intros H'0; elim H'0; intros H'0; elim H'0; intros H'0; elim H'0; intros H'0; elim H'0;\n intros x; elim H'0; intros H'0; elim H'0; intros H'0Qed.",
                    "Theorem tout_vide_est_Vide : forall E : Ens, (forall E' : Ens, IN E' E -> F) -> EQ E Vide.\nunfold not in |- *; simpl in |- *; intros E; elim x.\nintros x; elim x; intros x; elim x; intros; elim x; intros; elim x; intros; elim x; intros; elim x; intros; elim x; intros; elim x; intros; elim x; intros; elim x; intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros;Qed.",
                    "Theorem tout_vide_est_Vide : forall E : Ens, (forall E' : Ens, IN E' E -> F) -> EQ E Vide.\nunfold not in |- *; intros E H; cut False.\nintro H; cut (exists x : Ens, IN E' E /\\ IN E' E /\\ IN E' E').\nunfold not in |- *; simpl in |- *; intros E H; cut False.\nintros H; cut (exists x : Ens, IN E' E /\\ IN E' E /\\ IN E' E').\nunfold not in |- *; simpl in |- *; intros E H; cut (exists x : Ens, IN E' E /\\ IN E' E').\nunfold not in |- *; simpl in |- *; intros E; cut (exists x : Ens, IN E' E /\\ IN E' E').\nunfold not in |- *; simpl in |- *; intros E; cut (exists x : Ens, IN E' E /\\ IN E' E').\nunfold not in |- *; simpl in |- *; intros E; cut (exists x : Ens, IN E' E /\\ IN E' E /\\ IN E' E').\nunfold not in |- *; simpl in |- *; intros E; cut (exists x : Ens, IN E' E /\\ IN E' E').\nunfold not in |- *; simpl in |- *; intros E; cut (exists x :Qed.",
                    "Theorem tout_vide_est_Vide : forall E : Ens, (forall E' : Ens, IN E' E -> F) -> EQ E Vide.\nunfold not in |- *; simpl in |- *; intros E H; elim H.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Axioms.v",
                "context": "(* This program is free software; you can redistribute it and/or      *)\n(* modify it under the terms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(* Definitions of the empty set, pair, union, intersection, comprehension  *)\n(*  axiom and powerset, together with their properties                     *)\n\n\nRequire Import Sets.\n\n(* Useful types (actually top and bottom)   *)\n\nInductive Un : Set :=\n    void : Un.\n\nInductive F : Set :=.\n\n(* The empty set  (vide = french for empty)   *)\n\nDefinition Vide : Ens := sup F (fun f : F => match f return Ens with\n                                             end).\n\n(* The axioms of the empty set *)\n\nTheorem Vide_est_vide : forall E : Ens, IN E Vide -> F.\nunfold Vide in |- *; simpl in |- *; intros E H; cut False.\nsimple induction 1.\nelim H; intros x; elim x.\nQed.\n\n\nTheorem tout_vide_est_Vide :\n forall E : Ens, (forall E' : Ens, IN E' E -> F) -> EQ E Vide.\n unfold Vide in |- *; simple induction E; simpl in |- *; intros A e H H0;\n  split.\nintros; elim (H0 (e x)); auto with zfc.\nexists x; auto with zfc.\nsimple induction y.\nQed.\n\n(* Pair *)\n\n",
                "context_tokens": 486,
                "proof_start_offset": 2042,
                "proof_end_offset": 2158,
                "proof": "Definition Paire : forall E E' : Ens, Ens.\nProof.\nintros.\napply (sup bool).\nsimple induction 1.\nexact E.\nexact E'.\nDefined.",
                "end_command": "Defined.",
                "generated_proofs": [
                    "Definition Paire : forall E E' : Ens, Ens.\nunfold Vide in |- *; simpl in |- *; intros A' H; cut False.\nsimple induction 1.\nauto with zfc.\nDefined.",
                    "Definition Paire : forall E E' : Ens, Ens.\nunfold Vide in |- *; simpl in |- *; intros A' H; cut (exists x : Ens, x = y /\\ x = y /\\ x = y).\nintros E H; cut (exists x : Ens, x = y /\\ x = y /\\ x = y).\nintros E H; cut (exists x : Ens, x = y /\\ x = y).\nintros E H; cut (exists y : Ens, x = y /\\ x = y).\nintros E H; cut (exists y : Ens, x = y /\\ x = y /\\ y = y).\nintros E H; cut (exists y : Ens, x = y /\\ x = y /\\ y = y).\nintros E H; cut (exists y : Ens, x = y /\\ x = y).\nintros E H; cut (exists y : Ens, x = y /\\ x = y).\nintros E H; cut (exists y : Ens, x = y /\\ x = y).\nintros E H; cut (exists y : Ens, x = y /\\ y = y).\nintros E H; cut (exists y : Ens, x = y /\\ x = y).\nintros E H; cut (exists y :Defined.",
                    "Definition Paire : forall E E' : Ens, Ens.\nintros E' H; elim H; intros x H; elim H; intros H; elim H; intros H; elim H; intros H; elim H; intros H; elim H; intros H; elim H; intros H; elim H; intros; elim H; intros H; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; introsDefined.",
                    "Definition Paire : forall E E' : Ens, Ens.\nunfold not in |- *; simpl in |- *; intros A' H; elim H; intros x; elim H; intros x H; elim H; intros x H; elim H; intros H; elim H; intros x H; elim H; intros x H; elim H; intros H; elim H; intros H; elim H; intros H; elim H; intros; elim H; intros H; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;Defined.",
                    "Definition Paire : forall E E' : Ens, Ens.\nintros E' H'0.\nunfold not in |- *; simpl in |- *; intros A' H'0; elim H'.\nDefined."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Axioms.v",
                "context": "(* This program is free software; you can redistribute it and/or      *)\n(* modify it under the terms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(* Definitions of the empty set, pair, union, intersection, comprehension  *)\n(*  axiom and powerset, together with their properties                     *)\n\n\nRequire Import Sets.\n\n(* Useful types (actually top and bottom)   *)\n\nInductive Un : Set :=\n    void : Un.\n\nInductive F : Set :=.\n\n(* The empty set  (vide = french for empty)   *)\n\nDefinition Vide : Ens := sup F (fun f : F => match f return Ens with\n                                             end).\n\n(* The axioms of the empty set *)\n\nTheorem Vide_est_vide : forall E : Ens, IN E Vide -> F.\nunfold Vide in |- *; simpl in |- *; intros E H; cut False.\nsimple induction 1.\nelim H; intros x; elim x.\nQed.\n\n\nTheorem tout_vide_est_Vide :\n forall E : Ens, (forall E' : Ens, IN E' E -> F) -> EQ E Vide.\n unfold Vide in |- *; simple induction E; simpl in |- *; intros A e H H0;\n  split.\nintros; elim (H0 (e x)); auto with zfc.\nexists x; auto with zfc.\nsimple induction y.\nQed.\n\n(* Pair *)\n\nDefinition Paire : forall E E' : Ens, Ens.\nintros.\napply (sup bool).\nsimple induction 1.\nexact E.\nexact E'.\nDefined.\n\n(* The pair construction is extentional *)\n\n",
                "context_tokens": 537,
                "proof_start_offset": 2204,
                "proof_end_offset": 2521,
                "proof": "Theorem Paire_sound_left : forall A A' B : Ens, EQ A A' -> EQ (Paire A B) (Paire A' B).\nProof.\nunfold Paire in |- *.\nsimpl in |- *.\nintros; split.\nsimple induction x.\nexists true; auto with zfc.\nexists false; auto with zfc.\nsimple induction y; simpl in |- *.\nexists true; auto with zfc.\nexists false; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Paire_sound_left : forall A A' B : Ens, EQ A A' -> EQ (Paire A B) (Paire A' B).\nintros.\napply (H (lem_prop A' B)).\nQed.",
                    "Theorem Paire_sound_left : forall A A' B : Ens, EQ A A' -> EQ (Paire A B) (Paire A' B).\nunfold EQ in |- *; simpl in |- *; intros A' B' H; elim H; intros x H; elim H; intros H; elim H; intros H; elim H; intros H; elim H; intros H; elim H; intros H; elim H; intros H; elim H; intros; elim H; intros H; elim H; intros H; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;\nQed.",
                    "Theorem Paire_sound_left : forall A A' B : Ens, EQ A A' -> EQ (Paire A B) (Paire A' B).\nintros.\napply (classic (exists x : Ens, IN E' A' B).\nred in |- *.\nintros.\napply (classic (exists x : Ens, IN E' A' B).\nred in |- *.\nintros.\napply (classic (exists x : Ens, IN E' A' B).\nred in |- *.\nintros.\napply (classic (exists x : Ens, IN E' A' B).\nred in |- *.\nintros.\napply (classic (exists x : Ens, IN E' A' B).\nred in |- *.\nintros.\napply (classic (exists x : Ens, IN E' A' B).\nred in |- *.\nintros.\napply (classic (exists x : Ens, IN E' A' B).\nred in |- *.\nintros.\napply (classic (exists x : Ens, IN E' A' B).\nred in |- *.\nintros.\napply (classic (exists x : Ens, IN E' A' B).\nred in |- *.\nintros.\napply (classic (exists x : Ens, IN E' A' B).\nred in |- *.\nintros.\napply (Qed.",
                    "Theorem Paire_sound_left : forall A A' B : Ens, EQ A A' -> EQ (Paire A B) (Paire A' B).\nunfold EQ in |- *; simpl in |- *; intros A' H; elim H; clear H; intros A' H; elim H; clear H; intros A' H; elim H; clear H; intros A' H; elim H; clear H; intros A' H; elim H; clear H; intros A' H' H; elim H; clear H; intros A' H; elim H; clear H; intros A' H' H; elim H; clear H; intros A' H' H' H'0; elim H; clear H'0; intros A' H'0; elim H; clear H'0; intros A'0 H'0; elim H; clear H'0; intros A' H'0; elim H; clear H'0; intros A' H'0 H'0; elim H; clear H'0; intros A'0 H'0; elim H'0; clear H'0; intros A'0 H'1 H'1; elim H'0; clear H'0; intros A'0 H'0; elim H'0; clear H'0; intros A'0 H'1; elim H'0; clearQed.",
                    "Theorem Paire_sound_left : forall A A' B : Ens, EQ A A' -> EQ (Paire A B) (Paire A' B).\nintros.\napply (l_in_prod A' B).\napply (l_in_prod A' B).\napply (l_in_prod A' B).\napply (l_in_prod A' B).\napply (l_in_prod A' B).\napply (l_in_prod A' B).\napply (l_in_prod A' B).\napply (l_in_prod A' B).\napply (l_in_prod A' B).\napply (l_in_prod A' B).\napply (l_in_prod A' B).\napply (l_in_prod A' B).\napply (l_in_prod A' B).\napply (l_in_prod A' B).\napply (l_in_prod A' B).\napply (l_in_prod A' B).\napply (l_in_prod A' B).\napply (l_in_prod A' B).\napply (l_in_prod A' B).\napply (l_in_prod A' B).\napply (l_in_prod A' B).\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Axioms.v",
                "context": "er version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(* Definitions of the empty set, pair, union, intersection, comprehension  *)\n(*  axiom and powerset, together with their properties                     *)\n\n\nRequire Import Sets.\n\n(* Useful types (actually top and bottom)   *)\n\nInductive Un : Set :=\n    void : Un.\n\nInductive F : Set :=.\n\n(* The empty set  (vide = french for empty)   *)\n\nDefinition Vide : Ens := sup F (fun f : F => match f return Ens with\n                                             end).\n\n(* The axioms of the empty set *)\n\nTheorem Vide_est_vide : forall E : Ens, IN E Vide -> F.\nunfold Vide in |- *; simpl in |- *; intros E H; cut False.\nsimple induction 1.\nelim H; intros x; elim x.\nQed.\n\n\nTheorem tout_vide_est_Vide :\n forall E : Ens, (forall E' : Ens, IN E' E -> F) -> EQ E Vide.\n unfold Vide in |- *; simple induction E; simpl in |- *; intros A e H H0;\n  split.\nintros; elim (H0 (e x)); auto with zfc.\nexists x; auto with zfc.\nsimple induction y.\nQed.\n\n(* Pair *)\n\nDefinition Paire : forall E E' : Ens, Ens.\nintros.\napply (sup bool).\nsimple induction 1.\nexact E.\nexact E'.\nDefined.\n\n(* The pair construction is extentional *)\n\nTheorem Paire_sound_left :\n forall A A' B : Ens, EQ A A' -> EQ (Paire A B) (Paire A' B).\nunfold Paire in |- *.\nsimpl in |- *.\nintros; split.\nsimple induction x.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\n\nsimple induction y; simpl in |- *.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\nQed.\n\n",
                "context_tokens": 603,
                "proof_start_offset": 2523,
                "proof_end_offset": 2823,
                "proof": "Theorem Paire_sound_right : forall A B B' : Ens, EQ B B' -> EQ (Paire A B) (Paire A B').\nProof.\nunfold Paire in |- *; simpl in |- *; intros; split.\nsimple induction x.\nexists true; auto with zfc.\nexists false; auto with zfc.\nsimple induction y.\nexists true; auto with zfc.\nexists false; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Paire_sound_right : forall A B B' : Ens, EQ B B' -> EQ (Paire A B) (Paire A B').\nunfold inc in |- *.\nintros.\nunfold Vide in |- *.\nintros.\nelim (H0 (lem_prop_prop_prop_prop _ _ H0); intros.\nexists true; auto with zfc.\n\nQed.",
                    "Theorem Paire_sound_right : forall A B B' : Ens, EQ B B' -> EQ (Paire A B) (Paire A B').\nunfold equiv in |- *.\nintros; split.\nintros; elim H; intros x0 H0; elim H0; intros x0; elim H0; intros x1; elim H0; intros x1; elim H0; intros x1; elim H1; intros x2; elim H1; intros x2; elim H1; intros x2; elim H1; intros; elim H1; intros; elim H2; intros; elim H2; intros; elim H2; intros; elim H3; intros; elim H3; intros; elim H4; intros; elim H4; intros; elim H4; intros; elim H4; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H5; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H7; intros; elim H7; intros; elim H7; intros; elim H7;\n intros; elim H7; intros; elim H7; intros; elim H6; intros; elim HQed.",
                    "Theorem Paire_sound_right : forall A B B' : Ens, EQ B B' -> EQ (Paire A B) (Paire A B').\nunfold inc in |- *.\nsimpl in |- *.\nintros; split.\nauto with zfc.\nQed.",
                    "Theorem Paire_sound_right : forall A B B' : Ens, EQ B B' -> EQ (Paire A B) (Paire A B').\nunfold Same_dom in |- *.\nintros.\napply (lem_cartesian_propertie x (couple x (couple x (couple x (couple x (couple x (couple x (couple x (couple x (couple x (couple x (couple x (couple x x)));\n auto with zfc.\n\nQed.",
                    "Theorem Paire_sound_right : forall A B B' : Ens, EQ B B' -> EQ (Paire A B) (Paire A B').\nunfold inc in |- *.\nintros; split.\nintros; elim (H0 (H (H (H0 (H0 (H0 (H1 (H0 (H0 (H0 (H0 (H0 (H1 (H1 (H0 (H1 (H0 (H0 (H0 (H1 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H1 (H1 (H0 (H1 (H1 (H0 (H0 (H0 (H1 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0 (H0Qed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Axioms.v",
                "context": "PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(* Definitions of the empty set, pair, union, intersection, comprehension  *)\n(*  axiom and powerset, together with their properties                     *)\n\n\nRequire Import Sets.\n\n(* Useful types (actually top and bottom)   *)\n\nInductive Un : Set :=\n    void : Un.\n\nInductive F : Set :=.\n\n(* The empty set  (vide = french for empty)   *)\n\nDefinition Vide : Ens := sup F (fun f : F => match f return Ens with\n                                             end).\n\n(* The axioms of the empty set *)\n\nTheorem Vide_est_vide : forall E : Ens, IN E Vide -> F.\nunfold Vide in |- *; simpl in |- *; intros E H; cut False.\nsimple induction 1.\nelim H; intros x; elim x.\nQed.\n\n\nTheorem tout_vide_est_Vide :\n forall E : Ens, (forall E' : Ens, IN E' E -> F) -> EQ E Vide.\n unfold Vide in |- *; simple induction E; simpl in |- *; intros A e H H0;\n  split.\nintros; elim (H0 (e x)); auto with zfc.\nexists x; auto with zfc.\nsimple induction y.\nQed.\n\n(* Pair *)\n\nDefinition Paire : forall E E' : Ens, Ens.\nintros.\napply (sup bool).\nsimple induction 1.\nexact E.\nexact E'.\nDefined.\n\n(* The pair construction is extentional *)\n\nTheorem Paire_sound_left :\n forall A A' B : Ens, EQ A A' -> EQ (Paire A B) (Paire A' B).\nunfold Paire in |- *.\nsimpl in |- *.\nintros; split.\nsimple induction x.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\n\nsimple induction y; simpl in |- *.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\nQed.\n\nTheorem Paire_sound_right :\n forall A B B' : Ens, EQ B B' -> EQ (Paire A B) (Paire A B').\nunfold Paire in |- *; simpl in |- *; intros; split.\nsimple induction x.\nexists true; auto with zfc.\nexists false; auto with zfc.\nsimple induction y.\nexists true; auto with zfc.\nexists false; auto with zfc.\nQed.\n\nHint Resolve Paire_sound_right Paire_sound_left: zfc.\n\n(* The axioms of the pair *)\n\n",
                "context_tokens": 660,
                "proof_start_offset": 2910,
                "proof_end_offset": 3057,
                "proof": "Theorem IN_Paire_left : forall E E' : Ens, IN E (Paire E E').\nProof.\nunfold Paire in |- *; simpl in |- *; exists true; simpl in |- *; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem IN_Paire_left : forall E E' : Ens, IN E (Paire E E').\nunfold inc in |- *; simpl in |- *.\nintros; split.\nsimple induction x; auto with zfc.\nQed.",
                    "Theorem IN_Paire_left : forall E E' : Ens, IN E (Paire E E').\nunfold In in |- *; simpl in |- *.\nintros; split.\nsimple induction x.\nauto with zfc.\nQed.",
                    "Theorem IN_Paire_left : forall E E' : Ens, IN E (Paire E E').\nunfold inter in |- *.\nintros; elim (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H ( H)))) (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H ( H)))) (H (H (H (H (H (H (HQed.",
                    "Theorem IN_Paire_left : forall E E' : Ens, IN E (Paire E E').\nunfold In in |- *; simpl in |- *; intros A' H' H'0; elim H'; intros.\nexists x; auto with zfc.\nQed.",
                    "Theorem IN_Paire_left : forall E E' : Ens, IN E (Paire E E').\nunfold In in |- *; simpl in |- *; intros A H; elim H; intros; elim H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros;Qed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Axioms.v",
                "context": "                 *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(* Definitions of the empty set, pair, union, intersection, comprehension  *)\n(*  axiom and powerset, together with their properties                     *)\n\n\nRequire Import Sets.\n\n(* Useful types (actually top and bottom)   *)\n\nInductive Un : Set :=\n    void : Un.\n\nInductive F : Set :=.\n\n(* The empty set  (vide = french for empty)   *)\n\nDefinition Vide : Ens := sup F (fun f : F => match f return Ens with\n                                             end).\n\n(* The axioms of the empty set *)\n\nTheorem Vide_est_vide : forall E : Ens, IN E Vide -> F.\nunfold Vide in |- *; simpl in |- *; intros E H; cut False.\nsimple induction 1.\nelim H; intros x; elim x.\nQed.\n\n\nTheorem tout_vide_est_Vide :\n forall E : Ens, (forall E' : Ens, IN E' E -> F) -> EQ E Vide.\n unfold Vide in |- *; simple induction E; simpl in |- *; intros A e H H0;\n  split.\nintros; elim (H0 (e x)); auto with zfc.\nexists x; auto with zfc.\nsimple induction y.\nQed.\n\n(* Pair *)\n\nDefinition Paire : forall E E' : Ens, Ens.\nintros.\napply (sup bool).\nsimple induction 1.\nexact E.\nexact E'.\nDefined.\n\n(* The pair construction is extentional *)\n\nTheorem Paire_sound_left :\n forall A A' B : Ens, EQ A A' -> EQ (Paire A B) (Paire A' B).\nunfold Paire in |- *.\nsimpl in |- *.\nintros; split.\nsimple induction x.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\n\nsimple induction y; simpl in |- *.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\nQed.\n\nTheorem Paire_sound_right :\n forall A B B' : Ens, EQ B B' -> EQ (Paire A B) (Paire A B').\nunfold Paire in |- *; simpl in |- *; intros; split.\nsimple induction x.\nexists true; auto with zfc.\nexists false; auto with zfc.\nsimple induction y.\nexists true; auto with zfc.\nexists false; auto with zfc.\nQed.\n\nHint Resolve Paire_sound_right Paire_sound_left: zfc.\n\n(* The axioms of the pair *)\n\nTheorem IN_Paire_left : forall E E' : Ens, IN E (Paire E E').\nunfold Paire in |- *; simpl in |- *; exists true; simpl in |- *;\n auto with zfc.\nQed.\n\n",
                "context_tokens": 689,
                "proof_start_offset": 3059,
                "proof_end_offset": 3209,
                "proof": "Theorem IN_Paire_right : forall E E' : Ens, IN E' (Paire E E').\nProof.\nunfold Paire in |- *; simpl in |- *; exists false; simpl in |- *; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem IN_Paire_right : forall E E' : Ens, IN E' (Paire E E').\nunfold inc in |- *; simpl in |- *; intros E' H'0; elim H'.\nintros x H'0 H'1; elim H'.\nintros x H'1; elim H'.\nintros x H'1; elim H'.\nintros x H'2; elim H'.\nintros x'2; elim H'.\nintros x2; elim H'.\nintros x2; elim H'.\nintros x2; elim H'.\nintros x3; elim H'.\nintros x3; elim H'.\nintros x4; elim H'.\nintros x4; elim H'.\nintros x4; elim H'.\nintros x4; elim H'.\nintros x4; elim H'.\nintros x4; elim H'.\nintros x4; elim H'.\nintros x4; elim H'.\nintros x4; elim H'.\nintros x5; elim H'.\nintros x5; elim H'.\nintros x5; elim H'.\nintros x5; elim H'.\nintros x5; elim H'.\nintros x5; elim H'.\nintros x5; elim H'.\nintros x5; elim H'.\nintros x5; elim H'Qed.",
                    "Theorem IN_Paire_right : forall E E' : Ens, IN E' (Paire E E').\nunfold inter in |- *.\nintros E' H' H'0; elim H'; intros.\nexists x; auto with zfc.\nQed.",
                    "Theorem IN_Paire_right : forall E E' : Ens, IN E' (Paire E E').\nunfold inc in |- *.\nintros; elim H; intros x H0; elim H0; intros x0; elim H1; intros x0; elim H1; intros x0; elim H1; intros x0; elim H1; intros; elim H1; intros x0; elim H1; intros; elim H1; intros; elim H2; intros; elim H1; intros; elim H2; intros; elim H2; intros; elim H2; intros; elim H2; intros; elim H3; intros; elim H3; intros; elim H4; intros; elim H4; intros; elim H4; intros; elim H4; intros; elim H4; intros; elim H4; intros; elim H5; intros; elim H4; intros; elim H4; intros; elim H4; intros; elim H4; intros; elim H5; intros; elim H5; intros; elim H5;\n intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H6; intros; elim H5; intros; elim H5; intros; elim H6; intros;Qed.",
                    "Theorem IN_Paire_right : forall E E' : Ens, IN E' (Paire E E').\nunfold In in |- *.\nintros.\nsplit.\nintros.\nsplit.\napply (classic (exists x : Ens, IN (couple x x) (couple x x x)) (diff x x x)); auto with zfc.\nQed.",
                    "Theorem IN_Paire_right : forall E E' : Ens, IN E' (Paire E E').\nunfold In in |- *.\nunfold In in |- *; simpl in |- *; intros A H; elim A; auto with zfc.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Axioms.v",
                "context": " Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(* Definitions of the empty set, pair, union, intersection, comprehension  *)\n(*  axiom and powerset, together with their properties                     *)\n\n\nRequire Import Sets.\n\n(* Useful types (actually top and bottom)   *)\n\nInductive Un : Set :=\n    void : Un.\n\nInductive F : Set :=.\n\n(* The empty set  (vide = french for empty)   *)\n\nDefinition Vide : Ens := sup F (fun f : F => match f return Ens with\n                                             end).\n\n(* The axioms of the empty set *)\n\nTheorem Vide_est_vide : forall E : Ens, IN E Vide -> F.\nunfold Vide in |- *; simpl in |- *; intros E H; cut False.\nsimple induction 1.\nelim H; intros x; elim x.\nQed.\n\n\nTheorem tout_vide_est_Vide :\n forall E : Ens, (forall E' : Ens, IN E' E -> F) -> EQ E Vide.\n unfold Vide in |- *; simple induction E; simpl in |- *; intros A e H H0;\n  split.\nintros; elim (H0 (e x)); auto with zfc.\nexists x; auto with zfc.\nsimple induction y.\nQed.\n\n(* Pair *)\n\nDefinition Paire : forall E E' : Ens, Ens.\nintros.\napply (sup bool).\nsimple induction 1.\nexact E.\nexact E'.\nDefined.\n\n(* The pair construction is extentional *)\n\nTheorem Paire_sound_left :\n forall A A' B : Ens, EQ A A' -> EQ (Paire A B) (Paire A' B).\nunfold Paire in |- *.\nsimpl in |- *.\nintros; split.\nsimple induction x.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\n\nsimple induction y; simpl in |- *.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\nQed.\n\nTheorem Paire_sound_right :\n forall A B B' : Ens, EQ B B' -> EQ (Paire A B) (Paire A B').\nunfold Paire in |- *; simpl in |- *; intros; split.\nsimple induction x.\nexists true; auto with zfc.\nexists false; auto with zfc.\nsimple induction y.\nexists true; auto with zfc.\nexists false; auto with zfc.\nQed.\n\nHint Resolve Paire_sound_right Paire_sound_left: zfc.\n\n(* The axioms of the pair *)\n\nTheorem IN_Paire_left : forall E E' : Ens, IN E (Paire E E').\nunfold Paire in |- *; simpl in |- *; exists true; simpl in |- *;\n auto with zfc.\nQed.\n\nTheorem IN_Paire_right : forall E E' : Ens, IN E' (Paire E E').\nunfold Paire in |- *; simpl in |- *; exists false; simpl in |- *;\n auto with zfc.\nQed.\n\n",
                "context_tokens": 704,
                "proof_start_offset": 3211,
                "proof_end_offset": 3401,
                "proof": "Theorem Paire_IN : forall E E' A : Ens, IN A (Paire E E') -> EQ A E \\/ EQ A E'.\nProof.\nunfold Paire in |- *; simpl in |- *.\nsimple induction 1; intros b; elim b; simpl in |- *; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Paire_IN : forall E E' A : Ens, IN A (Paire E E') -> EQ A E \\/ EQ A E'.\nunfold Ex'.\nunfold equiv in |- *; simpl in |- *; intros A' A' H; elim H; intros x H0; elim H; intros x H0; elim H0; intros x0; elim H0; intros x0; elim H0; intros x1; elim H0; intros x0; elim H0; intros; elim H0; intros x0; elim H0; intros; elim H0; intros; elim H0; intros; elim H0; intros; elim H0; intros; elim H0; intros; elim H0; intros; elim H0; intros; elim H0; intros; elim H0; intros; elim H0; intros; elim H0; intros; elim H0; intros; elim H0;\n intros; elim H1; intros; elim H0; intros; elim H0; intros; elim H0; intros; elim H1; intros; elim H0; intros; elim H0;\n intros; elim H0; intros; elim H1; intros; elim H1; intros; elim H0; intros; elim H0; intros; elim H0;\n intros; elim H1; intros; elim HQed.",
                    "Theorem Paire_IN : forall E E' A : Ens, IN A (Paire E E') -> EQ A E \\/ EQ A E'.\nunfold inc in |- *; simpl in |- *; intros A H; elim H; clear H; intros A' H' H'0; elim H'; clear H'; intros A' H'0; elim H'0; clear H'0; intros A'0 H'0 H'1; elim H'0; clear H'0; intros A'0; elim H'0; clear H'0; intros A'0 H'1 H'1; elim H'0; clear H'0; intros A'0 H'1 H'2; elim H'0; clear H'0; intros A'0 H'1 H'2; elim H'1; clear H'1; intros A'0 H'0; elim H'0; clear H'0; intros A'0 H'1 H'2; elim H'1; clear H'0; intros A'1 H'2; elim H'0; clear H'1; intros A'0; elim H'0; clear H'0; intros A'1 H'1; elim H'1; clear H'0; intros A'0 H'2; elim H'1; clear HQed.",
                    "Theorem Paire_IN : forall E E' A : Ens, IN A (Paire E E') -> EQ A E \\/ EQ A E'.\nunfold inter in |- *; simpl in |- *; intros A H; elim H; intros x H; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; clear H; intros; elim H;\n intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; clear H; intros; elim H; intros; elim H; intros; elim H; clear H; intros; elim H;\n intros; elim H; clear H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;\n clear H; intros; elim H; intros; elim H; clear H; intros; elim H;\n intros; elim H; clear H; intros; elim H; intros; elim H; clear H; intros; elim HQed.",
                    "Theorem Paire_IN : forall E E' A : Ens, IN A (Paire E E') -> EQ A E \\/ EQ A E'.\nunfold inc in |- *; simpl in |- *; intros E H; elim H; clear H; intros H; elim H; clear H; intros H; elim H; clear H; intros H; elim H; clear H; intros H; elim H; clear H; intros H; elim H; clear H; intros H; elim H; clear H; intros; elim H; clear H; intros H; elim H; clear H; intros H; elim H; clear H; intros H; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros H; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros; elim H; clear H; intros;Qed.",
                    "Theorem Paire_IN : forall E E' A : Ens, IN A (Paire E E') -> EQ A E \\/ EQ A E'.\nunfold inc in |- *; simpl in |- *; intros; elim H; clear H; intros.\nexists x; auto with zfc.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Axioms.v",
                "context": " top and bottom)   *)\n\nInductive Un : Set :=\n    void : Un.\n\nInductive F : Set :=.\n\n(* The empty set  (vide = french for empty)   *)\n\nDefinition Vide : Ens := sup F (fun f : F => match f return Ens with\n                                             end).\n\n(* The axioms of the empty set *)\n\nTheorem Vide_est_vide : forall E : Ens, IN E Vide -> F.\nunfold Vide in |- *; simpl in |- *; intros E H; cut False.\nsimple induction 1.\nelim H; intros x; elim x.\nQed.\n\n\nTheorem tout_vide_est_Vide :\n forall E : Ens, (forall E' : Ens, IN E' E -> F) -> EQ E Vide.\n unfold Vide in |- *; simple induction E; simpl in |- *; intros A e H H0;\n  split.\nintros; elim (H0 (e x)); auto with zfc.\nexists x; auto with zfc.\nsimple induction y.\nQed.\n\n(* Pair *)\n\nDefinition Paire : forall E E' : Ens, Ens.\nintros.\napply (sup bool).\nsimple induction 1.\nexact E.\nexact E'.\nDefined.\n\n(* The pair construction is extentional *)\n\nTheorem Paire_sound_left :\n forall A A' B : Ens, EQ A A' -> EQ (Paire A B) (Paire A' B).\nunfold Paire in |- *.\nsimpl in |- *.\nintros; split.\nsimple induction x.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\n\nsimple induction y; simpl in |- *.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\nQed.\n\nTheorem Paire_sound_right :\n forall A B B' : Ens, EQ B B' -> EQ (Paire A B) (Paire A B').\nunfold Paire in |- *; simpl in |- *; intros; split.\nsimple induction x.\nexists true; auto with zfc.\nexists false; auto with zfc.\nsimple induction y.\nexists true; auto with zfc.\nexists false; auto with zfc.\nQed.\n\nHint Resolve Paire_sound_right Paire_sound_left: zfc.\n\n(* The axioms of the pair *)\n\nTheorem IN_Paire_left : forall E E' : Ens, IN E (Paire E E').\nunfold Paire in |- *; simpl in |- *; exists true; simpl in |- *;\n auto with zfc.\nQed.\n\nTheorem IN_Paire_right : forall E E' : Ens, IN E' (Paire E E').\nunfold Paire in |- *; simpl in |- *; exists false; simpl in |- *;\n auto with zfc.\nQed.\n\nTheorem Paire_IN :\n forall E E' A : Ens, IN A (Paire E E') -> EQ A E \\/ EQ A E'.\nunfold Paire in |- *; simpl in |- *.\nsimple induction 1; intros b; elim b; simpl in |- *; auto with zfc.\nQed.\n\nHint Resolve IN_Paire_left IN_Paire_right Vide_est_vide: zfc.\n\n(* The singleton set  *)\n(* Note that we could define it directly using the base type Un *)\n\nDefinition Sing (E : Ens) := Paire E E.\n\n\n(* The axioms  *)\n\n",
                "context_tokens": 751,
                "proof_start_offset": 3620,
                "proof_end_offset": 3709,
                "proof": "Theorem IN_Sing : forall E : Ens, IN E (Sing E).\nProof.\nunfold Sing in |- *; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem IN_Sing : forall E : Ens, IN E (Sing E).\nunfold inc in |- *.\nintros.\nunfold cart in |- *.\nintros.\nunfold cart in |- *.\nunfold cart in |- *.\nintros.\nunfold cart in |- *.\nintros.\nunfold cart in |- *.\nintros.\nunfold cart in |- *.\nintros.\nunfold cart in |- *.\nintros.\nunfold cart in |- *.\nintros.\nunfold cart in |- *.\nintros.\nunfold cart in |- *.\nintros.\nunfold cart in |- *.\nintros.\nunfold cart in |- *.\nintros.\nunfold cart in |- *.\nintros.\nunfold cart in |- *.\nintros.\nunfold cart in |- *.\nintros.\nunfold cart in |- *.\nintros.\nunfold cart in |- *.\nintros.\nunfold cart in |- *.\nintros.\nunfold cart in |- *.\nintros.\nunfold cart in |- *.\nintros.\nunfold cart in |- *.\nintros.\nunfold cart in |- *.\nintros.\nunfold cart in |- *.\nintros.\nintros.\nunfold cart in |- *.\nintros.\nexists x0.\nunfold cart in |- *.\nintros.\nexists x0.\nsplit.\nauto with zfc.\nQed.",
                    "Theorem IN_Sing : forall E : Ens, IN E (Sing E).\nunfold In in |- *; simpl in |- *; intros A; elim b; simpl in |- *; intros A; elim b; simpl in |- *; intros A; elim b; simpl in |- *; intros A; elim b; simpl in |- *; intros A; elim b; simpl in |- *; intros A; elim b; simpl in |- *;\n auto with zfc.\nQed.",
                    "Theorem IN_Sing : forall E : Ens, IN E (Sing E).\nunfold In in |- *; simpl in |- *; intros A; elim b; simpl in |- *; auto with zfc.\nQed.",
                    "Theorem IN_Sing : forall E : Ens, IN E (Sing E).\nunfold In in |- *; simpl in |- *; intros A H; elim H; clear H; intros A H; elim H; clear H; intros A H; elim H; clear H; intros A H; elim H; clear H; intros A H; elim H; clear H; intros A H; elim H; clear H; intros A H; elim H; clear H; intros A H; elim H; clear H; intros A H; elim H; clear H; intros A H; elim H; clear H; intros A H; elim H; clear H; intros A H; elim H; clear H; intros A H; elim H; clear H; intros A H; elim H; clear H; intros A H; elim H; clear H; intros A H; elim H; clear H; intros A H; elim H; clear H; intros A H; elim H; clear H; intros A H; elim H; clear H; intros A H; elim H; clear H; intros A H; elim H; clear H; intros A H; elim H; clear H; intros A H; elim H; clear H; intros A H; elim H; clear H; intros A H; elim HQed.",
                    "Theorem IN_Sing : forall E : Ens, IN E (Sing E).\nunfold In in |- *.\nintros; split.\nauto with zfc.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Axioms.v",
                "context": ")   *)\n\nDefinition Vide : Ens := sup F (fun f : F => match f return Ens with\n                                             end).\n\n(* The axioms of the empty set *)\n\nTheorem Vide_est_vide : forall E : Ens, IN E Vide -> F.\nunfold Vide in |- *; simpl in |- *; intros E H; cut False.\nsimple induction 1.\nelim H; intros x; elim x.\nQed.\n\n\nTheorem tout_vide_est_Vide :\n forall E : Ens, (forall E' : Ens, IN E' E -> F) -> EQ E Vide.\n unfold Vide in |- *; simple induction E; simpl in |- *; intros A e H H0;\n  split.\nintros; elim (H0 (e x)); auto with zfc.\nexists x; auto with zfc.\nsimple induction y.\nQed.\n\n(* Pair *)\n\nDefinition Paire : forall E E' : Ens, Ens.\nintros.\napply (sup bool).\nsimple induction 1.\nexact E.\nexact E'.\nDefined.\n\n(* The pair construction is extentional *)\n\nTheorem Paire_sound_left :\n forall A A' B : Ens, EQ A A' -> EQ (Paire A B) (Paire A' B).\nunfold Paire in |- *.\nsimpl in |- *.\nintros; split.\nsimple induction x.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\n\nsimple induction y; simpl in |- *.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\nQed.\n\nTheorem Paire_sound_right :\n forall A B B' : Ens, EQ B B' -> EQ (Paire A B) (Paire A B').\nunfold Paire in |- *; simpl in |- *; intros; split.\nsimple induction x.\nexists true; auto with zfc.\nexists false; auto with zfc.\nsimple induction y.\nexists true; auto with zfc.\nexists false; auto with zfc.\nQed.\n\nHint Resolve Paire_sound_right Paire_sound_left: zfc.\n\n(* The axioms of the pair *)\n\nTheorem IN_Paire_left : forall E E' : Ens, IN E (Paire E E').\nunfold Paire in |- *; simpl in |- *; exists true; simpl in |- *;\n auto with zfc.\nQed.\n\nTheorem IN_Paire_right : forall E E' : Ens, IN E' (Paire E E').\nunfold Paire in |- *; simpl in |- *; exists false; simpl in |- *;\n auto with zfc.\nQed.\n\nTheorem Paire_IN :\n forall E E' A : Ens, IN A (Paire E E') -> EQ A E \\/ EQ A E'.\nunfold Paire in |- *; simpl in |- *.\nsimple induction 1; intros b; elim b; simpl in |- *; auto with zfc.\nQed.\n\nHint Resolve IN_Paire_left IN_Paire_right Vide_est_vide: zfc.\n\n(* The singleton set  *)\n(* Note that we could define it directly using the base type Un *)\n\nDefinition Sing (E : Ens) := Paire E E.\n\n\n(* The axioms  *)\n\nTheorem IN_Sing : forall E : Ens, IN E (Sing E).\nunfold Sing in |- *; auto with zfc.\nQed.\n\n",
                "context_tokens": 742,
                "proof_start_offset": 3711,
                "proof_end_offset": 3859,
                "proof": "Theorem IN_Sing_EQ : forall E E' : Ens, IN E (Sing E') -> EQ E E'.\nProof.\nunfold Sing in |- *; intros E E' H; elim (Paire_IN E' E' E); auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem IN_Sing_EQ : forall E E' : Ens, IN E (Sing E') -> EQ E E'.\nunfold Canc in |- *.\nunfold Canc in |- *.\nintros.\nunfold Disj in |- *.\nintros.\nunfold Disj in |- *.\nintros.\nunfold Disj in |- *.\nintros.\nunfold Disj in |- *.\nintros.\nunfold Disj in |- *.\nintros.\nunfold Disj in |- *.\nintros.\nunfold Disj in |- *.\nintros.\nunfold Disj_map in |- *.\nintros.\nunfold Disj_map in |- *.\nintros.\nunfold Disj_map in |- *.\nintros.\nunfold Disj_map in |- *.\nintros.\nunfold Disj_map.\nintros.\nunfold Disj_map.\nintros.\nunfold Disj_map.\nintros.\nunfold Disj_map.\nintros.\nunfold Disj_map.\nintros.\nunfold Disj_map.\nintros.\nunfold Disj_map.\nintros.\nunfold Disj_map.\nunfold Disj_map.\nintros.\nunfold Disj_map.\nintros.\nunfold Disj_map.\nintros.\nunfold Disj_map.\nintros.\nunfold Disj_map.\nintros.\nunfold Disj_map.\nintros.\nunfold Disj_map.\nintros.\nunfoldQed.",
                    "Theorem IN_Sing_EQ : forall E E' : Ens, IN E (Sing E') -> EQ E E'.\nunfold Disj in |- *; simpl in |- *; intros A H; elim H; auto with zfc.\nQed.",
                    "Theorem IN_Sing_EQ : forall E E' : Ens, IN E (Sing E') -> EQ E E'.\nunfold Disj in |- *; simpl in |- *.\nintros E' H'0; elim H'; intros b; elim b; simpl in |- *; auto with zfc.\nQed.",
                    "Theorem IN_Sing_EQ : forall E E' : Ens, IN E (Sing E') -> EQ E E'.\nunfold Canc in |- *; simpl in |- *; intros A; elim b; simpl in |- *; intros A; elim b; simpl in |- *; intros A; elim b; simpl in |- *; intros A; elim b; simpl in |- *; intros A; elim b; simpl in |- *; intros A; elim b; simpl in |- *; intros A; elim b; simpl in |- *; intros A; elim b; simpl in |- *;\n intros A; elim b; simpl in |- *; intros A; elim b; simpl in |- *; intros A; elim b; simpl in |- *; intros A; elim b; simpl in |- *; intros A; elim b; simpl in |- *; intros A; elim b; simpl in |- *; intros A; elim b; simpl in |- *;\n intros A; elim b; simpl in |- *; intros A; elim b; simpl in |- *; intros A; elim b; simpl in |- *;\n intros A; elim b; simpl in |- *; intros A; elim b; simpl in |- *; intros A; elim b; simpl in |- *; intros A; elim b; simpl in |- *;\n intros A; elim b; simpl in |- *; intros A; elim b; simpl in |- *; intros AQed.",
                    "Theorem IN_Sing_EQ : forall E E' : Ens, IN E (Sing E') -> EQ E E'.\nunfold Disj in |- *; simpl in |- *; intros A' H'; elim a; simpl in |- *; intros A' H'; elim a; simpl in |- *; auto with zfc.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Axioms.v",
                "context": " induction 1.\nelim H; intros x; elim x.\nQed.\n\n\nTheorem tout_vide_est_Vide :\n forall E : Ens, (forall E' : Ens, IN E' E -> F) -> EQ E Vide.\n unfold Vide in |- *; simple induction E; simpl in |- *; intros A e H H0;\n  split.\nintros; elim (H0 (e x)); auto with zfc.\nexists x; auto with zfc.\nsimple induction y.\nQed.\n\n(* Pair *)\n\nDefinition Paire : forall E E' : Ens, Ens.\nintros.\napply (sup bool).\nsimple induction 1.\nexact E.\nexact E'.\nDefined.\n\n(* The pair construction is extentional *)\n\nTheorem Paire_sound_left :\n forall A A' B : Ens, EQ A A' -> EQ (Paire A B) (Paire A' B).\nunfold Paire in |- *.\nsimpl in |- *.\nintros; split.\nsimple induction x.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\n\nsimple induction y; simpl in |- *.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\nQed.\n\nTheorem Paire_sound_right :\n forall A B B' : Ens, EQ B B' -> EQ (Paire A B) (Paire A B').\nunfold Paire in |- *; simpl in |- *; intros; split.\nsimple induction x.\nexists true; auto with zfc.\nexists false; auto with zfc.\nsimple induction y.\nexists true; auto with zfc.\nexists false; auto with zfc.\nQed.\n\nHint Resolve Paire_sound_right Paire_sound_left: zfc.\n\n(* The axioms of the pair *)\n\nTheorem IN_Paire_left : forall E E' : Ens, IN E (Paire E E').\nunfold Paire in |- *; simpl in |- *; exists true; simpl in |- *;\n auto with zfc.\nQed.\n\nTheorem IN_Paire_right : forall E E' : Ens, IN E' (Paire E E').\nunfold Paire in |- *; simpl in |- *; exists false; simpl in |- *;\n auto with zfc.\nQed.\n\nTheorem Paire_IN :\n forall E E' A : Ens, IN A (Paire E E') -> EQ A E \\/ EQ A E'.\nunfold Paire in |- *; simpl in |- *.\nsimple induction 1; intros b; elim b; simpl in |- *; auto with zfc.\nQed.\n\nHint Resolve IN_Paire_left IN_Paire_right Vide_est_vide: zfc.\n\n(* The singleton set  *)\n(* Note that we could define it directly using the base type Un *)\n\nDefinition Sing (E : Ens) := Paire E E.\n\n\n(* The axioms  *)\n\nTheorem IN_Sing : forall E : Ens, IN E (Sing E).\nunfold Sing in |- *; auto with zfc.\nQed.\n\nTheorem IN_Sing_EQ : forall E E' : Ens, IN E (Sing E') -> EQ E E'.\nunfold Sing in |- *; intros E E' H; elim (Paire_IN E' E' E);\n auto with zfc.\nQed.\n\n\n\nHint Resolve IN_Sing IN_Sing_EQ: zfc.\n\n",
                "context_tokens": 741,
                "proof_start_offset": 3902,
                "proof_end_offset": 4058,
                "proof": "Theorem Sing_sound : forall A A' : Ens, EQ A A' -> EQ (Sing A) (Sing A').\nProof.\nunfold Sing in |- *; intros; apply EQ_tran with (Paire A A'); auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Sing_sound : forall A A' : Ens, EQ A A' -> EQ (Sing A) (Sing A').\nunfold Disj in |- *; simpl in |- *; intros A' H; elim (axs_comprehension (fun x : Ens => In x (couple x x) (couple x x));\n auto with zfc.\nQed.",
                    "Theorem Sing_sound : forall A A' : Ens, EQ A A' -> EQ (Sing A) (Sing A').\nunfold Disj in |- *; simpl in |- *; intros A' H; elim (axs_comprehension (fun x : Ens => exists x : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, y : Ens, yQed.",
                    "Theorem Sing_sound : forall A A' : Ens, EQ A A' -> EQ (Sing A) (Sing A').\nunfold Sep in |- *; simpl in |- *; intros A' H; elim (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (HQed.",
                    "Theorem Sing_sound : forall A A' : Ens, EQ A A' -> EQ (Sing A) (Sing A').\nunfold Disj in |- *.\nintros E' H'; elim (lem_cartesian_propertie A' A' A' A');\n auto with zfc.\nQed.",
                    "Theorem Sing_sound : forall A A' : Ens, EQ A A' -> EQ (Sing A) (Sing A').\nunfold Disj in |- *; simpl in |- *.\nintros A' B x H; elim (H0 (lem_IN A' A' B);\n auto with zfc.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Axioms.v",
                "context": "0;\n  split.\nintros; elim (H0 (e x)); auto with zfc.\nexists x; auto with zfc.\nsimple induction y.\nQed.\n\n(* Pair *)\n\nDefinition Paire : forall E E' : Ens, Ens.\nintros.\napply (sup bool).\nsimple induction 1.\nexact E.\nexact E'.\nDefined.\n\n(* The pair construction is extentional *)\n\nTheorem Paire_sound_left :\n forall A A' B : Ens, EQ A A' -> EQ (Paire A B) (Paire A' B).\nunfold Paire in |- *.\nsimpl in |- *.\nintros; split.\nsimple induction x.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\n\nsimple induction y; simpl in |- *.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\nQed.\n\nTheorem Paire_sound_right :\n forall A B B' : Ens, EQ B B' -> EQ (Paire A B) (Paire A B').\nunfold Paire in |- *; simpl in |- *; intros; split.\nsimple induction x.\nexists true; auto with zfc.\nexists false; auto with zfc.\nsimple induction y.\nexists true; auto with zfc.\nexists false; auto with zfc.\nQed.\n\nHint Resolve Paire_sound_right Paire_sound_left: zfc.\n\n(* The axioms of the pair *)\n\nTheorem IN_Paire_left : forall E E' : Ens, IN E (Paire E E').\nunfold Paire in |- *; simpl in |- *; exists true; simpl in |- *;\n auto with zfc.\nQed.\n\nTheorem IN_Paire_right : forall E E' : Ens, IN E' (Paire E E').\nunfold Paire in |- *; simpl in |- *; exists false; simpl in |- *;\n auto with zfc.\nQed.\n\nTheorem Paire_IN :\n forall E E' A : Ens, IN A (Paire E E') -> EQ A E \\/ EQ A E'.\nunfold Paire in |- *; simpl in |- *.\nsimple induction 1; intros b; elim b; simpl in |- *; auto with zfc.\nQed.\n\nHint Resolve IN_Paire_left IN_Paire_right Vide_est_vide: zfc.\n\n(* The singleton set  *)\n(* Note that we could define it directly using the base type Un *)\n\nDefinition Sing (E : Ens) := Paire E E.\n\n\n(* The axioms  *)\n\nTheorem IN_Sing : forall E : Ens, IN E (Sing E).\nunfold Sing in |- *; auto with zfc.\nQed.\n\nTheorem IN_Sing_EQ : forall E E' : Ens, IN E (Sing E') -> EQ E E'.\nunfold Sing in |- *; intros E E' H; elim (Paire_IN E' E' E);\n auto with zfc.\nQed.\n\n\n\nHint Resolve IN_Sing IN_Sing_EQ: zfc.\n\nTheorem Sing_sound : forall A A' : Ens, EQ A A' -> EQ (Sing A) (Sing A').\nunfold Sing in |- *; intros; apply EQ_tran with (Paire A A');\n auto with zfc.\nQed.\n\nHint Resolve Sing_sound: zfc.\n\n",
                "context_tokens": 734,
                "proof_start_offset": 4091,
                "proof_end_offset": 4278,
                "proof": "Theorem EQ_Sing_EQ : forall E1 E2 : Ens, EQ (Sing E1) (Sing E2) -> EQ E1 E2.\nProof.\nintros; cut (IN E1 (Sing E2)).\nintros; auto with zfc.\napply IN_sound_right with (Sing E1); auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem EQ_Sing_EQ : forall E1 E2 : Ens, EQ (Sing E1) (Sing E2) -> EQ E1 E2.\nunfold Canc in |- *; intros; apply EQ_symm with (bf2 := fun x : Ens => exists x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, x : Ens, xQed.",
                    "Theorem EQ_Sing_EQ : forall E1 E2 : Ens, EQ (Sing E1) (Sing E2) -> EQ E1 E2.\nunfold Sep in |- *; intros; apply EQ_symm with (couple A x);\n auto with zfc.\nQed.",
                    "Theorem EQ_Sing_EQ : forall E1 E2 : Ens, EQ (Sing E1) (Sing E2) -> EQ E1 E2.\nunfold Disj in |- *; simpl in |- *; intros; split.\nunfold Disj in |- *; auto with zfc.\nQed.",
                    "Theorem EQ_Sing_EQ : forall E1 E2 : Ens, EQ (Sing E1) (Sing E2) -> EQ E1 E2.\nunfold Disj in |- *.\nintros; apply EQ_symm with (bf2 := fun x : Ens => In (couple x x) (couple x x));\n auto with zfc.\nQed.",
                    "Theorem EQ_Sing_EQ : forall E1 E2 : Ens, EQ (Sing E1) (Sing E2) -> EQ E1 E2.\nunfold Sep in |- *; simpl in |- *; auto with zfc.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Axioms.v",
                "context": " in |- *.\nsimpl in |- *.\nintros; split.\nsimple induction x.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\n\nsimple induction y; simpl in |- *.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\nQed.\n\nTheorem Paire_sound_right :\n forall A B B' : Ens, EQ B B' -> EQ (Paire A B) (Paire A B').\nunfold Paire in |- *; simpl in |- *; intros; split.\nsimple induction x.\nexists true; auto with zfc.\nexists false; auto with zfc.\nsimple induction y.\nexists true; auto with zfc.\nexists false; auto with zfc.\nQed.\n\nHint Resolve Paire_sound_right Paire_sound_left: zfc.\n\n(* The axioms of the pair *)\n\nTheorem IN_Paire_left : forall E E' : Ens, IN E (Paire E E').\nunfold Paire in |- *; simpl in |- *; exists true; simpl in |- *;\n auto with zfc.\nQed.\n\nTheorem IN_Paire_right : forall E E' : Ens, IN E' (Paire E E').\nunfold Paire in |- *; simpl in |- *; exists false; simpl in |- *;\n auto with zfc.\nQed.\n\nTheorem Paire_IN :\n forall E E' A : Ens, IN A (Paire E E') -> EQ A E \\/ EQ A E'.\nunfold Paire in |- *; simpl in |- *.\nsimple induction 1; intros b; elim b; simpl in |- *; auto with zfc.\nQed.\n\nHint Resolve IN_Paire_left IN_Paire_right Vide_est_vide: zfc.\n\n(* The singleton set  *)\n(* Note that we could define it directly using the base type Un *)\n\nDefinition Sing (E : Ens) := Paire E E.\n\n\n(* The axioms  *)\n\nTheorem IN_Sing : forall E : Ens, IN E (Sing E).\nunfold Sing in |- *; auto with zfc.\nQed.\n\nTheorem IN_Sing_EQ : forall E E' : Ens, IN E (Sing E') -> EQ E E'.\nunfold Sing in |- *; intros E E' H; elim (Paire_IN E' E' E);\n auto with zfc.\nQed.\n\n\n\nHint Resolve IN_Sing IN_Sing_EQ: zfc.\n\nTheorem Sing_sound : forall A A' : Ens, EQ A A' -> EQ (Sing A) (Sing A').\nunfold Sing in |- *; intros; apply EQ_tran with (Paire A A');\n auto with zfc.\nQed.\n\nHint Resolve Sing_sound: zfc.\n\nTheorem EQ_Sing_EQ : forall E1 E2 : Ens, EQ (Sing E1) (Sing E2) -> EQ E1 E2.\nintros; cut (IN E1 (Sing E2)).\nintros; auto with zfc.\napply IN_sound_right with (Sing E1); auto with zfc.\nQed.\n\nHint Resolve EQ_Sing_EQ: zfc.\n\n\n\n(* We here need sigma types -- i.e. computational existentials *)\n\nInductive sig (A : Type) (P : A -> Prop) : Type :=\n    exist : forall x : A, P x -> sig A P.\n\n\n(* The set obtained by the comprehension (or separation) axiom *)\n\n",
                "context_tokens": 754,
                "proof_start_offset": 4542,
                "proof_end_offset": 4719,
                "proof": "Definition Comp : Ens -> (Ens -> Prop) -> Ens.\nProof.\nsimple induction 1; intros A f fr P.\napply (sup (sig A (fun x => P (f x)))).\nsimple induction 1; intros x p; exact (f x).\nDefined.",
                "end_command": "Defined.",
                "generated_proofs": [
                    "Definition Comp : Ens -> (Ens -> Prop) -> Ens.\n\nDefinition Comp (A : Type) (P : A -> Prop) :=\n  forall x : A, P x -> P x.\n\n(* This is not work in the set of the set of a set of set of set of set of set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set setDefined.",
                    "Definition Comp : Ens -> (Ens -> Prop) -> Ens.\n\n(* The following lemmas are proved by the same as a set of the set of set. *)\n\nLemma comp_eq : forall A B : Ens, P x -> P x.\nunfold comp in |- *.\nintros.\nsplit.\nauto with zfc.\nDefined.",
                    "Definition Comp : Ens -> (Ens -> Prop) -> Ens.\n\nDefinition Comp (A : Ens) : Type :=\n  forall x : A, P x -> P x.\n\n(* The following lemmas are equal for equality *)\n\nDefinition Comp (A : Ens) : Type :=\n  forall x : A, P x -> P x.\n\n(* The following lemmas are equal. *)\n\nDefinition Comp (A : Ens) : Type :=\n  forall x : A, P x -> P x.\n\n(* The following lemmas are equal *)\n\nDefinition Comp (A : Ens) (P : A -> Prop) : Prop :=\n  forall x : A, P x -> P x.\n\n(* The following lemmas are equal *)\nDefinition Comp (A : Ens) (P : A -> Prop) : Prop :=\n  forall x : A, P x -> P x.\n\n(* The following lemmas are equal in the equality *)\nDefinition Comp (A : Ens) : Prop :=\n  forall x : A, P x -> P x.\n\n(* The following lemmas used to the following lemmas are equal *)\nDefinition Comp (A : Ens) : Prop :=\n  forall x : A, P x -> P x.\n\n(* The following lemmas *)\n\nDefinition Comp (Defined.",
                    "Definition Comp : Ens -> (Ens -> Prop) -> Ens.\n\n(* The following lemmas *)\n\nDefinition comp (A B : Ens) := fun x : A => exists y : A, P x y /\\ P y.\n\n(* In the set of equality of equality of equality *)\nDefinition comp (A B : Ens) : Prop := fun x : A => exists y : A, P x y /\\ P y.\n(* In the equality of equality *)\n\nDefinition comp (A B : Ens) : Prop := fun x : A, P x -> P y.\n\n(* In the equality of equality of equality *)\nDefinition comp (A B : Ens) : Prop := fun x : A => exists y : A, P y /\\ P y.\n\n(* In equality of equality *)\nDefinition comp (A B : Ens) : Prop := fun x : A => exists y : A, P y /\\ P y.\n\n(* In equality of equality *)\n\nDefinition comp (A B : Ens) : Prop := fun x : A, P x y -> P y.\n(* In equality of equality *)\n\nDefinition comp (A B : Ens) : Prop := fun x : A, P x -> P x.\n(* In equality of equality *)\nDefined.",
                    "Definition Comp : Ens -> (Ens -> Prop) -> Ens.\n\nDefinition Comp (A B : Ens) :=\n  fun x : A => P x.\n\n(* The set of the set of the set of set of set of set of set of set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set setDefined."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Axioms.v",
                "context": " Ens, EQ B B' -> EQ (Paire A B) (Paire A B').\nunfold Paire in |- *; simpl in |- *; intros; split.\nsimple induction x.\nexists true; auto with zfc.\nexists false; auto with zfc.\nsimple induction y.\nexists true; auto with zfc.\nexists false; auto with zfc.\nQed.\n\nHint Resolve Paire_sound_right Paire_sound_left: zfc.\n\n(* The axioms of the pair *)\n\nTheorem IN_Paire_left : forall E E' : Ens, IN E (Paire E E').\nunfold Paire in |- *; simpl in |- *; exists true; simpl in |- *;\n auto with zfc.\nQed.\n\nTheorem IN_Paire_right : forall E E' : Ens, IN E' (Paire E E').\nunfold Paire in |- *; simpl in |- *; exists false; simpl in |- *;\n auto with zfc.\nQed.\n\nTheorem Paire_IN :\n forall E E' A : Ens, IN A (Paire E E') -> EQ A E \\/ EQ A E'.\nunfold Paire in |- *; simpl in |- *.\nsimple induction 1; intros b; elim b; simpl in |- *; auto with zfc.\nQed.\n\nHint Resolve IN_Paire_left IN_Paire_right Vide_est_vide: zfc.\n\n(* The singleton set  *)\n(* Note that we could define it directly using the base type Un *)\n\nDefinition Sing (E : Ens) := Paire E E.\n\n\n(* The axioms  *)\n\nTheorem IN_Sing : forall E : Ens, IN E (Sing E).\nunfold Sing in |- *; auto with zfc.\nQed.\n\nTheorem IN_Sing_EQ : forall E E' : Ens, IN E (Sing E') -> EQ E E'.\nunfold Sing in |- *; intros E E' H; elim (Paire_IN E' E' E);\n auto with zfc.\nQed.\n\n\n\nHint Resolve IN_Sing IN_Sing_EQ: zfc.\n\nTheorem Sing_sound : forall A A' : Ens, EQ A A' -> EQ (Sing A) (Sing A').\nunfold Sing in |- *; intros; apply EQ_tran with (Paire A A');\n auto with zfc.\nQed.\n\nHint Resolve Sing_sound: zfc.\n\nTheorem EQ_Sing_EQ : forall E1 E2 : Ens, EQ (Sing E1) (Sing E2) -> EQ E1 E2.\nintros; cut (IN E1 (Sing E2)).\nintros; auto with zfc.\napply IN_sound_right with (Sing E1); auto with zfc.\nQed.\n\nHint Resolve EQ_Sing_EQ: zfc.\n\n\n\n(* We here need sigma types -- i.e. computational existentials *)\n\nInductive sig (A : Type) (P : A -> Prop) : Type :=\n    exist : forall x : A, P x -> sig A P.\n\n\n(* The set obtained by the comprehension (or separation) axiom *)\n\nDefinition Comp : Ens -> (Ens -> Prop) -> Ens.\nsimple induction 1; intros A f fr P.\napply (sup (sig A (fun x => P (f x)))).\nsimple induction 1; intros x p; exact (f x).\nDefined.\n\n(* The comprehension/separation axioms *)\n\n",
                "context_tokens": 741,
                "proof_start_offset": 4764,
                "proof_end_offset": 4973,
                "proof": "Theorem Comp_INC : forall (E : Ens) (P : Ens -> Prop), INC (Comp E P) E.\nProof.\nunfold Comp, INC in |- *; simple induction E; simpl in |- *; intros.\nelim H0; simple induction x; intros; exists x0; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Comp_INC : forall (E : Ens) (P : Ens -> Prop), INC (Comp E P) E.\nunfold comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp,Qed.",
                    "Theorem Comp_INC : forall (E : Ens) (P : Ens -> Prop), INC (Comp E P) E.\nunfold comp in |- *; intros A P Q; elim H; clear H; intros p; elim p; clear p; intros p; elim p; clear p; intros p; elim p; clear p; intros p q; elim p; clear p; intros p q; elim p; clear p; intros p q; elim p; clear p q; intros p q; elim p; clear p; intros p q; elim p; clear p; intros p q; elim p; clear p q; intros p q; elim p; clear p; intros p q; elim p; clear p; intros p q; elim p; clear p; intros p; elim p; clear p; intros p q; elim p; clear p q; intros p q; elim p; clear p; intros p; elim p; clear p; intros p q; elim p; clear p; intros p q; elim p; clear p; intros p q; elim p; clear p; intros p q; elim p; clear p; intros p q; elim p; clear p q; intros p q; elim p; clear p q; intros p; elim p; clear p; intros p q; elim p; clear p;Qed.",
                    "Theorem Comp_INC : forall (E : Ens) (P : Ens -> Prop), INC (Comp E P) E.\nunfold comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp, comp,Qed.",
                    "Theorem Comp_INC : forall (E : Ens) (P : Ens -> Prop), INC (Comp E P) E.\nunfold comp in |- *; intros x p; elim p; simpl in |- *; intros x p; elim p; simpl in |- *; intros x p; elim p; simpl in |- *; auto with zfc.\nQed.",
                    "Theorem Comp_INC : forall (E : Ens) (P : Ens -> Prop), INC (Comp E P) E.\nunfold comp in |- *; intros A P Q.\napply (P:=Q) (Q:=Q) (fun x => P (f x)).\nsimple induction 1; intros x p; exact (f x).\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Cartesian.v",
                "context": "(* This program is free software; you can redistribute it and/or      *)\n(* modify it under the terms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(* The cartesian product and its properties *)\n\nRequire Import Sets.\nRequire Import Axioms.\n\n\n(* This definition of the ordered pair is slightly different from *)\n(* the usual one, since we want it to work in an intuisionistic   *)\n(* setting. Works the same, neitherless. The soundness proofs are *)\n(* unpleasant.                                                    *)\n\n\nDefinition Couple (E E' : Ens) := Paire (Sing E) (Paire Vide (Sing E')).\n\n",
                "context_tokens": 319,
                "proof_start_offset": 1547,
                "proof_end_offset": 2774,
                "proof": "Theorem Couple_inj_left : forall A A' B B' : Ens, EQ (Couple A A') (Couple B B') -> EQ A B.\nProof.\nunfold Couple in |- *; simpl in |- *.\nsimple induction 1.\nintros HA HB; elim (HA true).\nintros x; elim x; simpl in |- *; simple induction 1; intros H3 H4; elim (H3 true); simpl in |- *; intros xx; elim xx; simpl in |- *; auto with zfc.\nelim (H4 false); simpl in |- *.\nsimple induction x0; simpl in |- *.\nintros.\ncut (EQ (Sing B') Vide).\nsimpl in |- *.\nsimple induction 1.\nintros yy; elim (yy true).\nsimple induction x1.\napply EQ_tran with A; auto with zfc.\nintros; cut (EQ (Sing B') Vide).\nsimpl in |- *.\nsimple induction 1.\nintros yy; elim (yy true).\nsimple induction x1.\napply EQ_tran with A; auto with zfc.\nintros yy.\nelim (HB true); simpl in |- *.\nsimple induction x0.\nchange (EQ (Sing A) (Sing B) -> EQ A B) in |- *; intros EE.\napply IN_Sing_EQ.\napply IN_sound_right with (Sing A); auto with zfc.\nchange (EQ (Paire Vide (Sing A')) (Sing B) -> EQ A B) in |- *.\nintros zz.\nelimtype F.\napply (not_EQ_Sing_Vide A').\napply EQ_tran with B.\napply IN_Sing_EQ.\napply IN_sound_right with (Paire Vide (Sing A')); auto with zfc.\napply EQ_sym; apply IN_Sing_EQ; apply IN_sound_right with (Paire Vide (Sing A')); auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Couple_inj_left : forall A A' B B' : Ens, EQ (Couple A A') (Couple B B') -> EQ A B.\nProof.\n  intros A' B' B' C' C' H' H' H'0; try assumption.\nQed.",
                    "Theorem Couple_inj_left : forall A A' B B' : Ens, EQ (Couple A A') (Couple B B') -> EQ A B.\nintros A' B' B' B' H' H' H'0'0 H'1'2'2' H'3'3'3'4'3'5'6'6'6'6'7'6'7'7'8'9'10'10'10'10'10'10'10'10'11'11'10'11'10'12'12'13'13'13'13'13'13'13'13'13'14'13'13'13'14'13'13'13'14'14'14'13'14'14'14'13'13'13'14'14'14'13'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14Qed.",
                    "Theorem Couple_inj_left : forall A A' B B' : Ens, EQ (Couple A A') (Couple B B') -> EQ A B.\nintros A' B' B' B' C' H' H' H' H' H' H''''' H''''''' H'''''''''' H''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Qed.",
                    "Theorem Couple_inj_left : forall A A' B B' : Ens, EQ (Couple A A') (Couple B B') -> EQ A B.\nintros A' B' B' B' H' H' H' H''' H' H''' H''' H'''''' H''''''' H''''' H''''''''''' H''''''''''''' H''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Qed.",
                    "Theorem Couple_inj_left : forall A A' B B' : Ens, EQ (Couple A A') (Couple B B') -> EQ A B.\nintros A' B' B' H' H'0.\napply (iffP idP) as [H' [H' [H' [H' [H' [H' [H' [H' [H' H' H' H' H' H' H' H' H' H' H' H' H' H' H' H' H' H' H' H'' H' H' H' H' H'' H' H' H' H' H' H' H' H' H' H' H' H' H' H''' H' H' H' H' H' H' H' H' H' H' H' H'' H' H' H' H' H' H' H' H' H' H' H' H'' H' H' H' H'' H'' H' H' H' H' H' H''' H' H'' H' H' H' H' H' H' H' H' H' H' H'' H' H' H' H' H' H' H' H' H'' H' H' HQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Cartesian.v",
                "context": "WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(* The cartesian product and its properties *)\n\nRequire Import Sets.\nRequire Import Axioms.\n\n\n(* This definition of the ordered pair is slightly different from *)\n(* the usual one, since we want it to work in an intuisionistic   *)\n(* setting. Works the same, neitherless. The soundness proofs are *)\n(* unpleasant.                                                    *)\n\n\nDefinition Couple (E E' : Ens) := Paire (Sing E) (Paire Vide (Sing E')).\n\nTheorem Couple_inj_left :\n forall A A' B B' : Ens, EQ (Couple A A') (Couple B B') -> EQ A B.\nunfold Couple in |- *; simpl in |- *.\nsimple induction 1.\nintros HA HB; elim (HA true).\nintros x; elim x; simpl in |- *; simple induction 1; intros H3 H4;\n elim (H3 true); simpl in |- *; intros xx; elim xx; \n simpl in |- *; auto with zfc.\nelim (H4 false); simpl in |- *.\nsimple induction x0; simpl in |- *.\nintros.\ncut (EQ (Sing B') Vide).\nsimpl in |- *.\nsimple induction 1.\nintros yy; elim (yy true).\nsimple induction x1.\n\napply EQ_tran with A; auto with zfc.\n\nintros; cut (EQ (Sing B') Vide).\nsimpl in |- *.\nsimple induction 1.\nintros yy; elim (yy true).\nsimple induction x1.\n\napply EQ_tran with A; auto with zfc.\n\nintros yy.\nelim (HB true); simpl in |- *.\nsimple induction x0.\nchange (EQ (Sing A) (Sing B) -> EQ A B) in |- *; intros EE.\napply IN_Sing_EQ.\napply IN_sound_right with (Sing A); auto with zfc.\nchange (EQ (Paire Vide (Sing A')) (Sing B) -> EQ A B) in |- *.\nintros zz.\nelimtype F.\napply (not_EQ_Sing_Vide A').\napply EQ_tran with B.\napply IN_Sing_EQ.\napply IN_sound_right with (Paire Vide (Sing A')); auto with zfc.\napply EQ_sym; apply IN_Sing_EQ;\n apply IN_sound_right with (Paire Vide (Sing A')); \n auto with zfc.\n\nQed.\n\n\n\n",
                "context_tokens": 647,
                "proof_start_offset": 2778,
                "proof_end_offset": 3718,
                "proof": "Theorem Couple_inj_right : forall A A' B B' : Ens, EQ (Couple A A') (Couple B B') -> EQ A' B'.\nProof.\nunfold Couple in |- *; simpl in |- *.\nsimple induction 1; intros H1 H2.\nelim (H1 false).\nintros bb1; elim bb1.\nintros HF.\nchange (EQ (Paire Vide (Sing A')) (Sing B)) in HF.\ncut F.\nsimple induction 1.\napply (not_EQ_Vide_Sing A').\napply EQ_tran with B.\napply IN_Sing_EQ; apply IN_sound_right with (Paire Vide (Sing A')); auto with zfc.\napply EQ_sym; apply IN_Sing_EQ; apply IN_sound_right with (Paire Vide (Sing A')); auto with zfc.\nchange (EQ (Paire Vide (Sing A')) (Paire Vide (Sing B')) -> EQ A' B') in |- *.\nintros HP; cut (EQ (Sing A') (Sing B')).\nintros; auto with zfc.\ncut (IN (Sing A') (Paire Vide (Sing B'))).\nintros HI; elim (Paire_IN Vide (Sing B') (Sing A') HI).\nintros; cut F.\nsimple induction 1.\napply not_EQ_Sing_Vide with A'; assumption.\ntrivial with zfc.\napply IN_sound_right with (Paire Vide (Sing A')); auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Couple_inj_right : forall A A' B B' : Ens, EQ (Couple A A') (Couple B B') -> EQ A' B'.\nunfold Compatible in |- *.\nsimple induction 1.\nintros.\napply (not_eq_dec a); auto with zfc.\napply IN_sound_intro with (a := b); auto with zfc.\nQed.",
                    "Theorem Couple_inj_right : forall A A' B B' : Ens, EQ (Couple A A') (Couple B B') -> EQ A' B'.\nunfold Compatible in |- *.\nintros A B' B' B' B' H' H' H' H' H' H' H'' H''' H'''' H''''' H''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Qed.",
                    "Theorem Couple_inj_right : forall A A' B B' : Ens, EQ (Couple A A') (Couple B B') -> EQ A' B'.\nintros A B' B' B' B' B' B' H' H' H' H' H' H' H''''' H'''''' H'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Qed.",
                    "Theorem Couple_inj_right : forall A A' B B' : Ens, EQ (Couple A A') (Couple B B') -> EQ A' B'.\nunfold Couple in |- *; simpl in |- *.\nsimple induction 1.\nintros; elim (classic (exists x : Ens, In x x /\\ In x x /\\ In x x /\\ In x x /\\ In x x /\\ In x x /\\ In x x /\\ In x x /\\ In x x /\\ In x x /\\ In x x /\\ In x x x /\\ In x x /\\ In x x /\\ In x x x /\\ In x x /\\ In x x x /\\ In x x /\\ In x x.\nintros A' B' B' C' H' H' H' H'0 H'0 H'1 H'0 H'1 H'2 H'2 H'2 H'2'3 H'3 H'4 H'4 H'4 H'5 H'4 H'5 H'6 H'6 H'6 H'6 H'6 H'6 H'6 H'7 H'7 H'7 H'8 H'9 H'7 H'7 H'8 H'8 H'8 H'8 H'8 H'9 H'8 H'8 H'9 H'8 H'8 H'9 H'9 H'9Qed.",
                    "Theorem Couple_inj_right : forall A A' B B' : Ens, EQ (Couple A A') (Couple B B') -> EQ A' B'.\nunfold Singleton in |- *.\nsimple induction 1.\nintros; elim (classic (In (Couple A' B') (Couple A' B') (Couple A' B') (Couple A' B') (Couple A' B') (Couple A' B') (Couple A' B') (Couple A' B') (Couple A' B') (Couple A' B') (Couple A' B') (Couple A' B') (Couple A' B') (Couple A' B') (Couple A' B') (Couple A' B') (Couple A' B') (Couple A' B' B') (Couple A' B') (Couple A' B') (Couple A' B' B') (Couple A' B') (Couple A' B') (Couple A' B') (Couple A' B') (Couple A' B') (Couple A' B' B') (Couple A' B') (Couple A' B') (Couple A' B' B') (Couple A' B') (Couple A' B') (Couple A' B' B') (Couple A' B' B') (Couple A' B') (Couple A' B' B') (Couple A' B' BQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Cartesian.v",
                "context": " x1.\n\napply EQ_tran with A; auto with zfc.\n\nintros; cut (EQ (Sing B') Vide).\nsimpl in |- *.\nsimple induction 1.\nintros yy; elim (yy true).\nsimple induction x1.\n\napply EQ_tran with A; auto with zfc.\n\nintros yy.\nelim (HB true); simpl in |- *.\nsimple induction x0.\nchange (EQ (Sing A) (Sing B) -> EQ A B) in |- *; intros EE.\napply IN_Sing_EQ.\napply IN_sound_right with (Sing A); auto with zfc.\nchange (EQ (Paire Vide (Sing A')) (Sing B) -> EQ A B) in |- *.\nintros zz.\nelimtype F.\napply (not_EQ_Sing_Vide A').\napply EQ_tran with B.\napply IN_Sing_EQ.\napply IN_sound_right with (Paire Vide (Sing A')); auto with zfc.\napply EQ_sym; apply IN_Sing_EQ;\n apply IN_sound_right with (Paire Vide (Sing A')); \n auto with zfc.\n\nQed.\n\n\n\nTheorem Couple_inj_right :\n forall A A' B B' : Ens, EQ (Couple A A') (Couple B B') -> EQ A' B'.\nunfold Couple in |- *; simpl in |- *.\nsimple induction 1; intros H1 H2.\nelim (H1 false).\nintros bb1; elim bb1.\nintros HF.\nchange (EQ (Paire Vide (Sing A')) (Sing B)) in HF.\ncut F.\nsimple induction 1.\napply (not_EQ_Vide_Sing A').\napply EQ_tran with B.\napply IN_Sing_EQ; apply IN_sound_right with (Paire Vide (Sing A'));\n auto with zfc.\napply EQ_sym; apply IN_Sing_EQ;\n apply IN_sound_right with (Paire Vide (Sing A')); \n auto with zfc.\nchange (EQ (Paire Vide (Sing A')) (Paire Vide (Sing B')) -> EQ A' B') in |- *.\nintros HP; cut (EQ (Sing A') (Sing B')).\nintros; auto with zfc.\ncut (IN (Sing A') (Paire Vide (Sing B'))).\nintros HI; elim (Paire_IN Vide (Sing B') (Sing A') HI).\nintros; cut F.\nsimple induction 1.\napply not_EQ_Sing_Vide with A'; assumption.\ntrivial with zfc.\napply IN_sound_right with (Paire Vide (Sing A')); auto with zfc.\n\nQed.\n\n\n\n\n\n\n(* Here we cheat. It is easier to define the cartesian product using    *)\n(* the type theoretical product, i.e. we here use non set-theoretical   *)\n(* constructions. We could however use the usual definitions.           *)\n\n\nDefinition Prod (E E' : Ens) : Ens :=\n  match E, E' with\n  | sup A f, sup A' f' =>\n      sup _\n        (fun c : prod_t A A' =>\n         match c with\n         | pair_t a a' => Couple (f a) (f' a')\n         end)\n  end.\n\n\nHint Resolve Paire_sound_left Paire_sound_right: zfc.\n\n\n",
                "context_tokens": 735,
                "proof_start_offset": 4227,
                "proof_end_offset": 4370,
                "proof": "Theorem Couple_sound_left : forall A A' B : Ens, EQ A A' -> EQ (Couple A B) (Couple A' B).\nProof.\nunfold Couple in |- *; intros; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Couple_sound_left : forall A A' B : Ens, EQ A A' -> EQ (Couple A B) (Couple A' B).\nunfold Couple in |- *.\nsimple induction 1.\napply (not_EQ_singleton A'); auto with zfc.\nQed.",
                    "Theorem Couple_sound_left : forall A A' B : Ens, EQ A A' -> EQ (Couple A B) (Couple A' B).\nintros A' B' B' H' H' H' H' H' H'' H''' H''''' H'''''' H''''' H'''''''''' H''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Qed.",
                    "Theorem Couple_sound_left : forall A A' B : Ens, EQ A A' -> EQ (Couple A B) (Couple A' B).\nintros A' B' B' B' C' H' H' H'0.\nelim (H a' a' H'0).\nintros; elim (H a' a' H'0).\nintros; elim (H a'0).\nintros; elim (H a' a' H'0).\nintros; elim (H a'0).\nintros; elim (H a'0).\nintros; elim (H a'0).\nintros; elim (H a'0).\nintros; elim (H a'0).\nintros; elim (H a'1).\nintros; elim (H a'0).\nintros; elim (H a'0).\nintros; elim (H a'0).\nintros; elim (H a'0).\nintros; elim (H a'1).\nintros; elim (H a'1).\nintros; elim (H a'1).\nintros; elim (H a'2).\nintros; elim (H a'1).\nintros; elim (H a'1).\nintros; elim (H a'2).\nintros; elim (H a'1).\nintros; elim (HQed.",
                    "Theorem Couple_sound_left : forall A A' B : Ens, EQ A A' -> EQ (Couple A B) (Couple A' B).\nunfold Included in |- *.\nsimple induction 1.\napply (not_EQ_propertie a a' (Couple a' (Couple a' (Couple a' (Couple a' (Couple a' (Couple a' (Couple a' a' (Couple a' a' (Couple a' a' (Couple a' b' (Couple a' a' b' (Couple a' a' b' (Couple a' b' (Couple a' b' b' b' b'))\n         end).\n\nLemma Couple_correct :\n forall A B : Ens,\n Included A B A' ->\n Included A B A' ->\n Included A B A' ->\n Included A' B ->\n Included A' B' ->\n Included A B' B ->\n Included A' B' ->\n Included A B A' ->\n Included A B A' ->\n Included A B A' ->\n Included A' B' ->\n Included A B' ->\n forall A' B' B' B' ->\n Included A' B A' ->\n Included A B' B' ->\n Included A B A' ->\n Included A B A' ->\n Included A' B A' B ->\n Included AQed.",
                    "Theorem Couple_sound_left : forall A A' B : Ens, EQ A A' -> EQ (Couple A B) (Couple A' B).\nintros A' B H' H' H' H' H'' H'' H''''' H''''' H'''' H''''''' H'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Qed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Cartesian.v",
                "context": "simple induction x1.\n\napply EQ_tran with A; auto with zfc.\n\nintros yy.\nelim (HB true); simpl in |- *.\nsimple induction x0.\nchange (EQ (Sing A) (Sing B) -> EQ A B) in |- *; intros EE.\napply IN_Sing_EQ.\napply IN_sound_right with (Sing A); auto with zfc.\nchange (EQ (Paire Vide (Sing A')) (Sing B) -> EQ A B) in |- *.\nintros zz.\nelimtype F.\napply (not_EQ_Sing_Vide A').\napply EQ_tran with B.\napply IN_Sing_EQ.\napply IN_sound_right with (Paire Vide (Sing A')); auto with zfc.\napply EQ_sym; apply IN_Sing_EQ;\n apply IN_sound_right with (Paire Vide (Sing A')); \n auto with zfc.\n\nQed.\n\n\n\nTheorem Couple_inj_right :\n forall A A' B B' : Ens, EQ (Couple A A') (Couple B B') -> EQ A' B'.\nunfold Couple in |- *; simpl in |- *.\nsimple induction 1; intros H1 H2.\nelim (H1 false).\nintros bb1; elim bb1.\nintros HF.\nchange (EQ (Paire Vide (Sing A')) (Sing B)) in HF.\ncut F.\nsimple induction 1.\napply (not_EQ_Vide_Sing A').\napply EQ_tran with B.\napply IN_Sing_EQ; apply IN_sound_right with (Paire Vide (Sing A'));\n auto with zfc.\napply EQ_sym; apply IN_Sing_EQ;\n apply IN_sound_right with (Paire Vide (Sing A')); \n auto with zfc.\nchange (EQ (Paire Vide (Sing A')) (Paire Vide (Sing B')) -> EQ A' B') in |- *.\nintros HP; cut (EQ (Sing A') (Sing B')).\nintros; auto with zfc.\ncut (IN (Sing A') (Paire Vide (Sing B'))).\nintros HI; elim (Paire_IN Vide (Sing B') (Sing A') HI).\nintros; cut F.\nsimple induction 1.\napply not_EQ_Sing_Vide with A'; assumption.\ntrivial with zfc.\napply IN_sound_right with (Paire Vide (Sing A')); auto with zfc.\n\nQed.\n\n\n\n\n\n\n(* Here we cheat. It is easier to define the cartesian product using    *)\n(* the type theoretical product, i.e. we here use non set-theoretical   *)\n(* constructions. We could however use the usual definitions.           *)\n\n\nDefinition Prod (E E' : Ens) : Ens :=\n  match E, E' with\n  | sup A f, sup A' f' =>\n      sup _\n        (fun c : prod_t A A' =>\n         match c with\n         | pair_t a a' => Couple (f a) (f' a')\n         end)\n  end.\n\n\nHint Resolve Paire_sound_left Paire_sound_right: zfc.\n\n\nTheorem Couple_sound_left :\n forall A A' B : Ens, EQ A A' -> EQ (Couple A B) (Couple A' B).\n unfold Couple in |- *; intros; auto with zfc.\nQed.\n\n",
                "context_tokens": 736,
                "proof_start_offset": 4372,
                "proof_end_offset": 4516,
                "proof": "Theorem Couple_sound_right : forall A B B' : Ens, EQ B B' -> EQ (Couple A B) (Couple A B').\nProof.\nunfold Couple in |- *; intros; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Couple_sound_right : forall A B B' : Ens, EQ B B' -> EQ (Couple A B) (Couple A B').\nunfold Couple in |- *; intros; auto with zfc.\nQed.",
                    "Theorem Couple_sound_right : forall A B B' : Ens, EQ B B' -> EQ (Couple A B) (Couple A B').\nunfold Couple in |- *; intros; auto with zfc.\nQed.",
                    "Theorem Couple_sound_right : forall A B B' : Ens, EQ B B' -> EQ (Couple A B) (Couple A B').\nunfold Couple in |- *; simpl in |- *; intros; auto with zfc.\nQed.",
                    "Theorem Couple_sound_right : forall A B B' : Ens, EQ B B' -> EQ (Couple A B) (Couple A B').\nunfold Couple in |- *; intros; auto with zfc.\nQed.",
                    "Theorem Couple_sound_right : forall A B B' : Ens, EQ B B' -> EQ (Couple A B) (Couple A B').\nunfold Couple in |- *; intros; auto with zfc.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Cartesian.v",
                "context": ".\napply IN_sound_right with (Sing A); auto with zfc.\nchange (EQ (Paire Vide (Sing A')) (Sing B) -> EQ A B) in |- *.\nintros zz.\nelimtype F.\napply (not_EQ_Sing_Vide A').\napply EQ_tran with B.\napply IN_Sing_EQ.\napply IN_sound_right with (Paire Vide (Sing A')); auto with zfc.\napply EQ_sym; apply IN_Sing_EQ;\n apply IN_sound_right with (Paire Vide (Sing A')); \n auto with zfc.\n\nQed.\n\n\n\nTheorem Couple_inj_right :\n forall A A' B B' : Ens, EQ (Couple A A') (Couple B B') -> EQ A' B'.\nunfold Couple in |- *; simpl in |- *.\nsimple induction 1; intros H1 H2.\nelim (H1 false).\nintros bb1; elim bb1.\nintros HF.\nchange (EQ (Paire Vide (Sing A')) (Sing B)) in HF.\ncut F.\nsimple induction 1.\napply (not_EQ_Vide_Sing A').\napply EQ_tran with B.\napply IN_Sing_EQ; apply IN_sound_right with (Paire Vide (Sing A'));\n auto with zfc.\napply EQ_sym; apply IN_Sing_EQ;\n apply IN_sound_right with (Paire Vide (Sing A')); \n auto with zfc.\nchange (EQ (Paire Vide (Sing A')) (Paire Vide (Sing B')) -> EQ A' B') in |- *.\nintros HP; cut (EQ (Sing A') (Sing B')).\nintros; auto with zfc.\ncut (IN (Sing A') (Paire Vide (Sing B'))).\nintros HI; elim (Paire_IN Vide (Sing B') (Sing A') HI).\nintros; cut F.\nsimple induction 1.\napply not_EQ_Sing_Vide with A'; assumption.\ntrivial with zfc.\napply IN_sound_right with (Paire Vide (Sing A')); auto with zfc.\n\nQed.\n\n\n\n\n\n\n(* Here we cheat. It is easier to define the cartesian product using    *)\n(* the type theoretical product, i.e. we here use non set-theoretical   *)\n(* constructions. We could however use the usual definitions.           *)\n\n\nDefinition Prod (E E' : Ens) : Ens :=\n  match E, E' with\n  | sup A f, sup A' f' =>\n      sup _\n        (fun c : prod_t A A' =>\n         match c with\n         | pair_t a a' => Couple (f a) (f' a')\n         end)\n  end.\n\n\nHint Resolve Paire_sound_left Paire_sound_right: zfc.\n\n\nTheorem Couple_sound_left :\n forall A A' B : Ens, EQ A A' -> EQ (Couple A B) (Couple A' B).\n unfold Couple in |- *; intros; auto with zfc.\nQed.\n\nTheorem Couple_sound_right :\n forall A B B' : Ens, EQ B B' -> EQ (Couple A B) (Couple A B').\n unfold Couple in |- *; intros; auto with zfc.\nQed.\n\n\n",
                "context_tokens": 716,
                "proof_start_offset": 4519,
                "proof_end_offset": 5789,
                "proof": "Theorem Couple_IN_Prod : forall E1 E2 E1' E2' : Ens, IN E1' E1 -> IN E2' E2 -> IN (Couple E1' E2') (Prod E1 E2).\nProof.\nsimple induction E1; intros A1 f1 r1; simple induction E2; intros A2 f2 r2.\nintros E1' E2' i1 i2.\nelim (IN_EXType (sup A1 f1) E1').\nintros x e1; simpl in x.\nelim (IN_EXType (sup A2 f2) E2').\nintros x0 e2; simpl in x.\napply IN_sound_left with (Couple (pi2 (sup A1 f1) x) (pi2 (sup A2 f2) x0)); auto with zfc.\napply EQ_tran with (Couple (pi2 (sup A1 f1) x) E2'); auto with zfc.\napply Couple_sound_right.\nauto with zfc.\napply Couple_sound_left; auto with zfc.\nsimpl in |- *.\nsimpl in |- *.\nexists (pair_t _ _ x x0).\nsimpl in |- *.\nsplit.\nsimple induction x1; simpl in |- *.\nexists true; simpl in |- *.\nsplit.\nsimple induction x2; simpl in |- *.\nexists true; auto with zfc.\nexists true; auto with zfc.\nsimple induction y; exists true; auto with zfc.\nexists false; simpl in |- *.\nsplit.\nsimple induction x2.\nexists true; simpl in |- *; auto with zfc.\nsplit.\nsimple induction x3.\nsimple induction y.\nexists false; auto with zfc.\nsimple induction y; simpl in |- *.\nexists true; auto with zfc.\nexists false; auto with zfc.\nsimple induction y; simpl in |- *.\nexists true; auto with zfc.\nexists false; auto with zfc.\nauto with zfc.\nauto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Couple_IN_Prod : forall E1 E2 E1' E2' : Ens, IN E1' E1 -> IN E2' E2 -> IN (Couple E1' E2') (Prod E1 E2).\nunfold Setminus in |- *; intros; auto with zfc.\nQed.",
                    "Theorem Couple_IN_Prod : forall E1 E2 E1' E2' : Ens, IN E1' E1 -> IN E2' E2 -> IN (Couple E1' E2') (Prod E1 E2).\nunfold Couple in |- *; intros; auto with zfc.\nQed.",
                    "Theorem Couple_IN_Prod : forall E1 E2 E1' E2' : Ens, IN E1' E1 -> IN E2' E2 -> IN (Couple E1' E2') (Prod E1 E2).\nunfold Couple in |- *; intros; auto with zfc.\nQed.",
                    "Theorem Couple_IN_Prod : forall E1 E2 E1' E2' : Ens, IN E1' E1 -> IN E2' E2 -> IN (Couple E1' E2') (Prod E1 E2).\nunfold Couple in |- *; intros; auto with zfc.\nQed.",
                    "Theorem Couple_IN_Prod : forall E1 E2 E1' E2' : Ens, IN E1' E1 -> IN E2' E2 -> IN (Couple E1' E2') (Prod E1 E2).\nunfold Couple in |- *; intros; auto with zfc.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Cartesian.v",
                "context": " zfc.\n\nQed.\n\n\n\n\n\n\n(* Here we cheat. It is easier to define the cartesian product using    *)\n(* the type theoretical product, i.e. we here use non set-theoretical   *)\n(* constructions. We could however use the usual definitions.           *)\n\n\nDefinition Prod (E E' : Ens) : Ens :=\n  match E, E' with\n  | sup A f, sup A' f' =>\n      sup _\n        (fun c : prod_t A A' =>\n         match c with\n         | pair_t a a' => Couple (f a) (f' a')\n         end)\n  end.\n\n\nHint Resolve Paire_sound_left Paire_sound_right: zfc.\n\n\nTheorem Couple_sound_left :\n forall A A' B : Ens, EQ A A' -> EQ (Couple A B) (Couple A' B).\n unfold Couple in |- *; intros; auto with zfc.\nQed.\n\nTheorem Couple_sound_right :\n forall A B B' : Ens, EQ B B' -> EQ (Couple A B) (Couple A B').\n unfold Couple in |- *; intros; auto with zfc.\nQed.\n\n\nTheorem Couple_IN_Prod :\n forall E1 E2 E1' E2' : Ens,\n IN E1' E1 -> IN E2' E2 -> IN (Couple E1' E2') (Prod E1 E2).\nsimple induction E1; intros A1 f1 r1; simple induction E2; intros A2 f2 r2.\nintros E1' E2' i1 i2.\nelim (IN_EXType (sup A1 f1) E1').\nintros x e1; simpl in x.\nelim (IN_EXType (sup A2 f2) E2').\nintros x0 e2; simpl in x.\napply IN_sound_left with (Couple (pi2 (sup A1 f1) x) (pi2 (sup A2 f2) x0));\n auto with zfc.\napply EQ_tran with (Couple (pi2 (sup A1 f1) x) E2'); auto with zfc.\napply Couple_sound_right.\nauto with zfc.\n\napply Couple_sound_left; auto with zfc.\n\nsimpl in |- *.\nsimpl in |- *.\nexists (pair_t _ _ x x0).\nsimpl in |- *.\nsplit.\nsimple induction x1; simpl in |- *.\nexists true; simpl in |- *.\nsplit.\nsimple induction x2; simpl in |- *.\nexists true; auto with zfc.\n\nexists true; auto with zfc.\n\nsimple induction y; exists true; auto with zfc.\n\nexists false; simpl in |- *.\nsplit.\nsimple induction x2.\nexists true; simpl in |- *; auto with zfc.\nsplit.\nsimple induction x3.\n\nsimple induction y.\n\nexists false; auto with zfc.\n\nsimple induction y; simpl in |- *.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\n\nsimple induction y; simpl in |- *.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\n\nauto with zfc.\n\nauto with zfc.\nQed.\n\n\n",
                "context_tokens": 715,
                "proof_start_offset": 5792,
                "proof_end_offset": 6539,
                "proof": "Theorem Couple_Prod_IN : forall E1 E2 E1' E2' : Ens, IN (Couple E1' E2') (Prod E1 E2) -> IN E1' E1 /\\ IN E2' E2.\nProof.\nsimple induction E1; intros A1 f1 r1; simple induction E2; intros A2 f2 r2.\nintros E1' E2' i.\nelim (IN_EXType (Prod (sup A1 f1) (sup A2 f2)) (Couple E1' E2') i).\nintros xx; elim xx; intros a1 a2 e.\nchange (EQ (Couple E1' E2') (Couple (f1 a1) (f2 a2))) in e.\ncut (EQ E1' (f1 a1)).\ncut (EQ E2' (f2 a2)).\nintros e1 e2.\nsplit.\napply IN_sound_left with (f1 a1); auto with zfc; simpl in |- *; exists a1; auto with zfc.\napply IN_sound_left with (f2 a2); auto with zfc; simpl in |- *; exists a2; auto with zfc.\napply Couple_inj_right with (A := E1') (B := f1 a1); auto with zfc.\napply Couple_inj_left with E2' (f2 a2); auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Couple_Prod_IN : forall E1 E2 E1' E2' : Ens, IN (Couple E1' E2') (Prod E1 E2) -> IN E1' E1 /\\ IN E2' E2.\nintros E2' E2' E2' E3' H'2' H'2'3 H'3 H'4'3 H'4'5'7'7'8 H'8'9 H'9 H'10 H'10'10 H'11 H'12'13'13 H'14'13 H'14 H'13 H'14'14 H'14 H'14 H'14'14 H'14 H'14'14 H'14'14 H'14'14 H'14'14'14'14 H'14'14'14 H'14 H'14 H'14'14'14'14'14'14 H'14'14'14'14'15 H'14'14 H'14'15 H'14 H'14 H'14'14'14 H'15 H'15'14'14'14'15 H'14'15'14 H'14'14 H'14'14'14'14'14'14'14 H'15 H'14'14'14'14 H'14 H'14'14'14'14'14'14'14'14'Qed.",
                    "Theorem Couple_Prod_IN : forall E1 E2 E1' E2' : Ens, IN (Couple E1' E2') (Prod E1 E2) -> IN E1' E1 /\\ IN E2' E2.\nunfold Couple in |- *; intros; elim H; intros a0; elim a0; intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0;\n intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0;\n intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0; intros; elim a0;\n intros; elim a0; intros; elim a0; intros; elim a0;Qed.",
                    "Theorem Couple_Prod_IN : forall E1 E2 E1' E2' : Ens, IN (Couple E1' E2') (Prod E1 E2) -> IN E1' E1 /\\ IN E2' E2.\nintros E1' E2' E2' E2'0' E2'0'0'1'2'2'3'3'3'3'4'4'5'6'6'7'7'7'8'8'9'9'101010101111111111111111121212121212121212121212121212121212121212121212121212121212121223232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323Qed.",
                    "Theorem Couple_Prod_IN : forall E1 E2 E1' E2' : Ens, IN (Couple E1' E2') (Prod E1 E2) -> IN E1' E1 /\\ IN E2' E2.\nintros E1' E2' E2' E2' E2' E3' H'2'0 H'1'2'2'3 H'3'3'3'4'4'6'7'8'8'9'9'10'101011'12'11'12'12'12'12'13'13'14'13'13'13'13'13'14'13'13'13'14'13'14'13'13'14'14'14'14'14'13'13'13'13'14'14'13'14'14'14'13'14'13'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'15'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'14'Qed.",
                    "Theorem Couple_Prod_IN : forall E1 E2 E1' E2' : Ens, IN (Couple E1' E2') (Prod E1 E2) -> IN E1' E1 /\\ IN E2' E2.\nintros E2' E2' E2' E3' E4' E4' E' E4' E' E'3' E4' E' E'4' E' E' H'6'7'7'8.\nintros E' E'8 E'8 E'9.\nelim (IN_exists_Type (x1' := x2) (x := x2) (x := x2) (x := x2) (x := x2) (x := x2) (x := x2) (x := x2) (x := x2) (x := x2) (x := x2) (x := x2) (x := x2) (x := x2) (x := x2) (x := x2) (x := x2) (x := x2) (x := x2) (x := x2) (x := x2) (x := x2) (x := x2) (x := x2) (x := x2) (x := x2) (x := x2) (x := x2) (x2 := x2) (x :=Qed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Cartesian.v",
                "context": " intros A1 f1 r1; simple induction E2; intros A2 f2 r2.\nintros E1' E2' i1 i2.\nelim (IN_EXType (sup A1 f1) E1').\nintros x e1; simpl in x.\nelim (IN_EXType (sup A2 f2) E2').\nintros x0 e2; simpl in x.\napply IN_sound_left with (Couple (pi2 (sup A1 f1) x) (pi2 (sup A2 f2) x0));\n auto with zfc.\napply EQ_tran with (Couple (pi2 (sup A1 f1) x) E2'); auto with zfc.\napply Couple_sound_right.\nauto with zfc.\n\napply Couple_sound_left; auto with zfc.\n\nsimpl in |- *.\nsimpl in |- *.\nexists (pair_t _ _ x x0).\nsimpl in |- *.\nsplit.\nsimple induction x1; simpl in |- *.\nexists true; simpl in |- *.\nsplit.\nsimple induction x2; simpl in |- *.\nexists true; auto with zfc.\n\nexists true; auto with zfc.\n\nsimple induction y; exists true; auto with zfc.\n\nexists false; simpl in |- *.\nsplit.\nsimple induction x2.\nexists true; simpl in |- *; auto with zfc.\nsplit.\nsimple induction x3.\n\nsimple induction y.\n\nexists false; auto with zfc.\n\nsimple induction y; simpl in |- *.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\n\nsimple induction y; simpl in |- *.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\n\nauto with zfc.\n\nauto with zfc.\nQed.\n\n\nTheorem Couple_Prod_IN :\n forall E1 E2 E1' E2' : Ens,\n IN (Couple E1' E2') (Prod E1 E2) -> IN E1' E1 /\\ IN E2' E2.\nsimple induction E1; intros A1 f1 r1; simple induction E2; intros A2 f2 r2.\nintros E1' E2' i.\nelim (IN_EXType (Prod (sup A1 f1) (sup A2 f2)) (Couple E1' E2') i).\nintros xx; elim xx; intros a1 a2 e.\nchange (EQ (Couple E1' E2') (Couple (f1 a1) (f2 a2))) in e.\ncut (EQ E1' (f1 a1)).\ncut (EQ E2' (f2 a2)).\nintros e1 e2.\nsplit.\napply IN_sound_left with (f1 a1); auto with zfc; simpl in |- *; exists a1;\n auto with zfc.\napply IN_sound_left with (f2 a2); auto with zfc; simpl in |- *; exists a2;\n auto with zfc.\napply Couple_inj_right with (A := E1') (B := f1 a1); auto with zfc.\napply Couple_inj_left with E2' (f2 a2); auto with zfc.\nQed.\n\n\n\n",
                "context_tokens": 715,
                "proof_start_offset": 6543,
                "proof_end_offset": 6911,
                "proof": "Theorem IN_Prod_EXType : forall E E' E'' : Ens, IN E'' (Prod E E') -> EXType _ (fun A : Ens => EXType _ (fun B : Ens => EQ (Couple A B) E'')).\nProof.\nsimple induction E; intros A f r; simple induction E'; intros A' f' r'.\nintros; elim (IN_EXType (Prod (sup A f) (sup A' f')) E'').\nsimple induction x.\nintros; exists (f a); exists (f' b); auto with zfc.\nauto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem IN_Prod_EXType : forall E E' E'' : Ens, IN E'' (Prod E E') -> EXType _ (fun A : Ens => EXType _ (fun B : Ens => EQ (Couple A B) E'')).\nintros E'' H'0.\nelim (IN_exists_Type (fun A : Ens => EQ (Couple A B) E) (Couple A E) E').\nintros E'' H'1.\nelim (IN_exists_Type (fun A : Ens => EQ (Couple A B) E').\nintros E'' H'1.\nelim (IN_exists_Type (fun A : Ens => EQ (Couple A B) E) (Couple A E) E').\nintros E'' H'2.\nelim (IN_exists_Type (fun A : Ens => EQ (Couple A B) E').\nintros E'' H'0.\nelim (IN_exists_Type (fun A : Ens => EQ (Couple A B) E) (Couple A E) E').\nintros E'' H'0.\nelim (IN_exists_Type (fun A : Ens => EQ (Couple A B) E').\nintros E'' H'1.\nelim (IN_exists_Type (fun A : Ens => EQ (Couple A B) E').\nintros E'' H'1.\nelim (IN_exists_Type (fun A : Ens => EQ (CoupleQed.",
                    "Theorem IN_Prod_EXType : forall E E' E'' : Ens, IN E'' (Prod E E') -> EXType _ (fun A : Ens => EXType _ (fun B : Ens => EQ (Couple A B) E'')).\nintros E'' E'' H'0.\nelim (IN_exists (fun A : Ens => EQ (Couple A B) E'') (Couple (Couple A B) E'') (Couple (Couple A B) E'') (Couple (Couple A B) E'') (Couple (Couple (f1 a2) E'') (Couple (f1 a2) E'') (Couple (f1 a2) E'') (Couple (f2 a2) E'') (Couple (f1 a2) E'') (Couple (f2 a2) E'') (Couple (f2 a2) E'') (Couple (f2 a2) E'') (Couple (f2 a2) E'') (Couple (f2 a2) E'') (Couple (f2 a2) E'') (Couple (f2 a2) E'') (Couple (f2 a2) E'') (Couple (f2 a2) E'') (Couple (f2 a2) E'') (Couple (f2 a2) E'') (Couple (f2 a2) E'') (Couple (f2 a2) E'') (Couple (f2 a2) E'') (Couple (f2 a2Qed.",
                    "Theorem IN_Prod_EXType : forall E E' E'' : Ens, IN E'' (Prod E E') -> EXType _ (fun A : Ens => EXType _ (fun B : Ens => EQ (Couple A B) E'')).\nintrosed.",
                    "Theorem IN_Prod_EXType : forall E E' E'' : Ens, IN E'' (Prod E E') -> EXType _ (fun A : Ens => EXType _ (fun B : Ens => EQ (Couple A B) E'')).\nintros E'' H'0; elim H'0; intros A0 A1 f1 f2.\nsplit.\napply Inc_preserves_unique with (a1 a2) (a2 := a2) (a2 := a2) (a2 := a2) (a2 := a2) (a2 := b) (a2 := a2) (a2 := a2) (a2 := a2) (a2 := b) (a2 := a2) (a2 := b) (a2 := b) (a2 := b) (a2 := b) (a2 := a2) (a2 := b) (a2 := b) (a2 := b) (a2 := b2) (a2 := b2) (a2 := b2) (a2 := b2) (a2 := b2) (a2 := b2) (a2 := b2) (a2 := b2) (a2 := b2) (a2 := b2) (a2 := b2) (a2 := b2) (a2 := b2) (a2 := b2) (Qed.",
                    "Theorem IN_Prod_EXType : forall E E' E'' : Ens, IN E'' (Prod E E') -> EXType _ (fun A : Ens => EXType _ (fun B : Ens => EQ (Couple A B) E'')).\nintros E'' H'0.\nelim (IN_exists A x0 x1); auto with zfc.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Constructive.v",
                "context": "(* This program is free software; you can redistribute it and/or      *)\n(* modify it under the terms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(* Peter Aczel's Encoding of CZF *)\n\n(* Using the same definition \"Ens\" of sets, we can developp Peter Aczel's   *)\n(* encoding of \"Constructive Type Theory\" (CZF).                            *)\n(* It is basically a simillar developement, but this time, the propositions *)\n(* are objects of type \"Type\", i.e. are on the same level (resp. above) the *)\n(* sets. The advantage is that we can extract the constructive witness of an*)\n(* existential proof. The drawbacks are:                                    *)\n(*  - no definition of the powerset                                         *)\n(*  - complicated difference between bounded and unbounded quantification   *)\n(*  - excluded middle is now much more \"dangerous\"                          *)\n\n\nRequire Import Sets.\nRequire Import Axioms.\n\n\n",
                "context_tokens": 399,
                "proof_start_offset": 1897,
                "proof_end_offset": 2155,
                "proof": "Definition EQC : Ens -> Ens -> Type.\nProof.\nsimple induction 1; intros A f eq1.\nsimple induction 1; intros B g eq2.\nrefine (prod_t _ _).\nexact (forall x : A, depprod _ (fun y : B => eq1 x (g y))).\nexact (forall y : B, depprod _ (fun x : A => eq1 x (g y))).\nDefined.",
                "end_command": "Defined.",
                "generated_proofs": [
                    "Definition EQC : Ens -> Ens -> Type.\n\n(* This is not necessary for the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proofDefined.",
                    "Definition EQC : Ens -> Ens -> Type.\n\nLemma EQ_C : forall (x y : Ens) (x y : A), EQ C x -> EQ C x -> EQ C x y -> EQ C x y.\nProof.\nintros x y H.\ngeneralize (eq_dec x y); intro H.\ngeneralize (eq_dec x y); intro H.\ngeneralize (eq_dec x y); intro H.\ngeneralize (eq_dec x y); intro H.\ngeneralize (eq_dec x y); intro H.\ngeneralize (eq_dec x y); intro H.\ngeneralize (eq_dec x y); intro H.\ngeneralize (eq_dec x y); intro H.\ngeneralize (eq_dec x y); intro H.\ngeneralize (eq_dec x y); intro H.\ngeneralize (eq_dec x y); intro H.\ngeneralize (eq_dec x y); intro H.\ngeneralize (eq_dec x y); intro H.\ngeneralize (eq_dec x y); intro H.\ngeneralize (eq_dec y z); intro H.\ngeneralize (eq_dec x y); intro H.\ngeneralize (eq_dec x y); intro H.\ngeneralize (eq_Defined.",
                    "Definition EQC : Ens -> Ens -> Type.\n\nDefinition eq_dec (P : Ens -> Prop) := forall x : Ens, eq_dec (P x) (P : Prop) := forall x : Ens, eq_dec (P x) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (P : Prop) (PDefined.",
                    "Definition EQC : Ens -> Ens -> Type.\n\nDefinition EQ : Ens -> Prop := EQC.\n\nDefinition EQ : Ens -> Prop := EQC.\n\nDefinition EQ : Ens -> Prop := EQC.\n\nDefinition EQ : Ens -> Prop := EQC.\nDefinition EQ : Ens -> Prop := EQC.\n\nDefinition EQ : Ens -> Prop := EQC.\n\nDefinition EQ : Ens -> Prop := EQC.\n\nDefinition EQ : Ens -> Prop := EQC.\n\nDefinition EQ : Ens -> Prop := EQC.\n\nDefinition EQ : Ens -> Prop := EQC.\nDefinition EQ : Ens -> Prop := EQC.\n\nDefinition EQ : Ens -> Prop := EQC.\n\nDefinition EQ : Ens -> Prop := EQC.\n\nDefinition EQ : Ens -> Prop := EQC.\nDefinition EQ : Ens -> Prop := EQC.\nDefinition EQ : Ens -> Prop := EQC.\n\nDefinition EQ : Ens -> Prop := EQC.\n\nDefinition EQ : Ens -> Prop := EQC.\nDefinition EQ : Ens -> Prop := EQC.\nDefinition EQ : Ens -> Prop := EQC.\nDefinition EQ : Ens := EQC.\nDefinition EQ : Ens -> Prop := EQC.\nDefinitionDefined.",
                    "Definition EQC : Ens -> Ens -> Type.\n\nDefinition EQ : Ens := EQ (fun x => EQ (fun x => EQ (fun x => EQ (fun x => EQ (fun x => EQ (fun x => EQ (fun x => EQ (fun x => EQ (fun x => EQ (fun x => EQ (fun x => EQ (fun x => EQ (fun x => EQ (fun x => EQ (fun x => EQ (fun x => EQ (fun x => EQ (fun x (fun x => EQ (fun x => EQ (fun x => EQ (fun x (fun x => EQ (fun x => EQ (fun x (proj1 (fun x => EQ (fun x (proj1 (fun x => EQ (fun x (proj1 (proj1 (proj1 (proj1 (proj1 (proj1 (proj1 (proj1 (proj1 (proj2 (proj1 (proj1 (proj1 (proj2 (proj1 (proj2 (proj1 (proj1 (proj1 (proj1 (proj1 (proj1 (proj1 (proj1 (proj1 (proj1 (proj1 (proj1 (proj1 (proj1 (proj2 (proj1 (proj1 (proj1 (proj1 (projDefined."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Constructive.v",
                "context": "(* This program is free software; you can redistribute it and/or      *)\n(* modify it under the terms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(* Peter Aczel's Encoding of CZF *)\n\n(* Using the same definition \"Ens\" of sets, we can developp Peter Aczel's   *)\n(* encoding of \"Constructive Type Theory\" (CZF).                            *)\n(* It is basically a simillar developement, but this time, the propositions *)\n(* are objects of type \"Type\", i.e. are on the same level (resp. above) the *)\n(* sets. The advantage is that we can extract the constructive witness of an*)\n(* existential proof. The drawbacks are:                                    *)\n(*  - no definition of the powerset                                         *)\n(*  - complicated difference between bounded and unbounded quantification   *)\n(*  - excluded middle is now much more \"dangerous\"                          *)\n\n\nRequire Import Sets.\nRequire Import Axioms.\n\n\nDefinition EQC : Ens -> Ens -> Type.\nsimple induction 1; intros A f eq1.\nsimple induction 1; intros B g eq2.\nrefine (prod_t _ _).\nexact (forall x : A, depprod _ (fun y : B => eq1 x (g y))).\nexact (forall y : B, depprod _ (fun x : A => eq1 x (g y))).\nDefined.\n\n\n\n(* APPARTENANCE *)\n\n",
                "context_tokens": 502,
                "proof_start_offset": 2179,
                "proof_end_offset": 2298,
                "proof": "Definition CIN : Ens -> Ens -> Type.\nProof.\nsimple induction 2.\nintros.\nexact (depprod _ (fun y : A => EQC X (e y))).\nDefined.",
                "end_command": "Defined.",
                "generated_proofs": [
                    "Definition CIN : Ens -> Ens -> Type.\nsimple induction 1; intros A f eq1 eq2.\nexact (fun x : A => eq1 x (g y)).\nDefined.",
                    "Definition CIN : Ens -> Ens -> Type.\nsimple induction 1; intros A f eq1 eq2 eq2 eq3 eq3 eq3 eq4 eq4 eq5 eq5 eq5 eq7 eq7.\nexact (fun x : A => eq1 x (g y)).\nDefined.",
                    "Definition CIN : Ens -> Ens -> Type.\nsimple induction 1; intros A f eq1 eq2 eq2 eq3 eq3 eq3 eq3 eq3 eq4 eq3 eq4 eq5 eq7 eq73 eq7 eq73 eq7 eq83 eq7 eq73 eq73 eq93 eq7 eq73 eq77 eq93 eq73 eq77 eq73 eq73 eq73 eq77 eq93 eq73 eq773 eq93 eq77 eq93 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73 eq73Defined.",
                    "Definition CIN : Ens -> Ens -> Type.\nsimple induction 1; intros A f eq0.\nexact (fun x : A => eq0 (g y)).\nDefined.",
                    "Definition CIN : Ens -> Ens -> Type.\nsimple induction 1; intros B f eq1 eq2; intros B f eq2 eq2.\napply (fun x : A => eq1 x (g y)).\nDefined."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Constructive.v",
                "context": "(* This program is free software; you can redistribute it and/or      *)\n(* modify it under the terms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(* Peter Aczel's Encoding of CZF *)\n\n(* Using the same definition \"Ens\" of sets, we can developp Peter Aczel's   *)\n(* encoding of \"Constructive Type Theory\" (CZF).                            *)\n(* It is basically a simillar developement, but this time, the propositions *)\n(* are objects of type \"Type\", i.e. are on the same level (resp. above) the *)\n(* sets. The advantage is that we can extract the constructive witness of an*)\n(* existential proof. The drawbacks are:                                    *)\n(*  - no definition of the powerset                                         *)\n(*  - complicated difference between bounded and unbounded quantification   *)\n(*  - excluded middle is now much more \"dangerous\"                          *)\n\n\nRequire Import Sets.\nRequire Import Axioms.\n\n\nDefinition EQC : Ens -> Ens -> Type.\nsimple induction 1; intros A f eq1.\nsimple induction 1; intros B g eq2.\nrefine (prod_t _ _).\nexact (forall x : A, depprod _ (fun y : B => eq1 x (g y))).\nexact (forall y : B, depprod _ (fun x : A => eq1 x (g y))).\nDefined.\n\n\n\n(* APPARTENANCE *)\n\nDefinition CIN : Ens -> Ens -> Type.\nsimple induction 2.\nintros.\nexact (depprod _ (fun y : A => EQC X (e y))).\nDefined.\n\n\n\n(* INCLUSION *)\n\n",
                "context_tokens": 551,
                "proof_start_offset": 2319,
                "proof_end_offset": 2425,
                "proof": "Definition CINC : Ens -> Ens -> Type.\nProof.\nintros E1 E2.\nexact (forall E : Ens, CIN E E1 -> CIN E E2).\nDefined.",
                "end_command": "Defined.",
                "generated_proofs": [
                    "Definition CINC : Ens -> Ens -> Type.\nsimple induction 1.\nexact (fun x : A => eq1 x (g y)).\nDefined.",
                    "Definition CINC : Ens -> Ens -> Type.\nsimple induction 1.\nintros.\nexact (fun x : A => EQB (f y)).\nDefined.",
                    "Definition CINC : Ens -> Ens -> Type.\nsimple induction 1.\nintros.\nexact (fun y : A => EQ C (e x y)).\nDefined.",
                    "Definition CINC : Ens -> Ens -> Type.\nsimple induction 1.\nintros.\nexact (fun x : A => EQ C (f y)).\nDefined.",
                    "Definition CINC : Ens -> Ens -> Type.\nsimple induction 1; intros A f eq1 eq2 eq2 eq3 eq3 eq4 eq4 eq5 eq7.\nexact (fun x : A => eq3 x (g y)).\nDefined."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Constructive.v",
                "context": "ms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(* Peter Aczel's Encoding of CZF *)\n\n(* Using the same definition \"Ens\" of sets, we can developp Peter Aczel's   *)\n(* encoding of \"Constructive Type Theory\" (CZF).                            *)\n(* It is basically a simillar developement, but this time, the propositions *)\n(* are objects of type \"Type\", i.e. are on the same level (resp. above) the *)\n(* sets. The advantage is that we can extract the constructive witness of an*)\n(* existential proof. The drawbacks are:                                    *)\n(*  - no definition of the powerset                                         *)\n(*  - complicated difference between bounded and unbounded quantification   *)\n(*  - excluded middle is now much more \"dangerous\"                          *)\n\n\nRequire Import Sets.\nRequire Import Axioms.\n\n\nDefinition EQC : Ens -> Ens -> Type.\nsimple induction 1; intros A f eq1.\nsimple induction 1; intros B g eq2.\nrefine (prod_t _ _).\nexact (forall x : A, depprod _ (fun y : B => eq1 x (g y))).\nexact (forall y : B, depprod _ (fun x : A => eq1 x (g y))).\nDefined.\n\n\n\n(* APPARTENANCE *)\n\nDefinition CIN : Ens -> Ens -> Type.\nsimple induction 2.\nintros.\nexact (depprod _ (fun y : A => EQC X (e y))).\nDefined.\n\n\n\n(* INCLUSION *)\n\nDefinition CINC : Ens -> Ens -> Type.\nintros E1 E2.\nexact (forall E : Ens, CIN E E1 -> CIN E E2).\nDefined.\n\n\n\n(* EQ EST UNE RELATION D'EQUIVALENCE *)\n\n",
                "context_tokens": 589,
                "proof_start_offset": 2470,
                "proof_end_offset": 2634,
                "proof": "Theorem EQC_refl : forall E : Ens, EQC E E.\nProof.\nsimple induction E.\nintros A f HR.\nsimpl in |- *.\nsplit; intros.\nexists x; auto with zfc.\nexists y; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem EQC_refl : forall E : Ens, EQC E E.\nintros E1 E2.\nexact (fun x y : A, EQ C D -> EQ C D E.\nQed.",
                    "Theorem EQC_refl : forall E : Ens, EQC E E.\nintros E1 E2.\nexact (fun y : A, EQC E1 -> EQ C.\nintros E2.\nexact (fun x : A, EQC1 E2 -> EQ C1 E2).\nQed.",
                    "Theorem EQC_refl : forall E : Ens, EQC E E.\nintros E1 E2.\nexact (fun x : A, C = D).\nQed.",
                    "Theorem EQC_refl : forall E : Ens, EQC E E.\nintros E1 E2.\nexact (fun x : A, CIN E1 E2) (fun y : A, CIN E1 E2) (fun y : A, CIN E2 E2) (fun y : A, CIN E2 E3) (fun y : A, CIN E2 E2) (fun y : A, CIN E2 E3) (fun y : A, CIN E2 E3) (fun y : A, CIN E2 E3) (fun y : A, CIN E2 E3) (fun y : A, CIN E3 E3) (fun y : A, CIN E3 E4) (fun y : A, CIN E4 E4) (fun y : A, CIN E4 E4) (fun y : A, CIN E4 E4) (fun y : A, CIN E4 E5) (fun y : A, CIN E4 E5) (fun y : A, CIN E4 E5) (fun y : A, CIN E5 E5) (fun y : A, CIN E5 E5)Qed.",
                    "Theorem EQC_refl : forall E : Ens, EQC E E.\nintros E1 E2.\nexact (fun x : A, EQ C D E1 -> EQ C D1.\nexact (fun x : A, EQ C D E1 -> EQ C D1.\nexact (fun x : A, EQ C D1 -> EQ C D1.\nexact (fun x : A, EQ C D1 E2).\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Constructive.v",
                "context": "                                                              *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(* Peter Aczel's Encoding of CZF *)\n\n(* Using the same definition \"Ens\" of sets, we can developp Peter Aczel's   *)\n(* encoding of \"Constructive Type Theory\" (CZF).                            *)\n(* It is basically a simillar developement, but this time, the propositions *)\n(* are objects of type \"Type\", i.e. are on the same level (resp. above) the *)\n(* sets. The advantage is that we can extract the constructive witness of an*)\n(* existential proof. The drawbacks are:                                    *)\n(*  - no definition of the powerset                                         *)\n(*  - complicated difference between bounded and unbounded quantification   *)\n(*  - excluded middle is now much more \"dangerous\"                          *)\n\n\nRequire Import Sets.\nRequire Import Axioms.\n\n\nDefinition EQC : Ens -> Ens -> Type.\nsimple induction 1; intros A f eq1.\nsimple induction 1; intros B g eq2.\nrefine (prod_t _ _).\nexact (forall x : A, depprod _ (fun y : B => eq1 x (g y))).\nexact (forall y : B, depprod _ (fun x : A => eq1 x (g y))).\nDefined.\n\n\n\n(* APPARTENANCE *)\n\nDefinition CIN : Ens -> Ens -> Type.\nsimple induction 2.\nintros.\nexact (depprod _ (fun y : A => EQC X (e y))).\nDefined.\n\n\n\n(* INCLUSION *)\n\nDefinition CINC : Ens -> Ens -> Type.\nintros E1 E2.\nexact (forall E : Ens, CIN E E1 -> CIN E E2).\nDefined.\n\n\n\n(* EQ EST UNE RELATION D'EQUIVALENCE *)\n\nTheorem EQC_refl : forall E : Ens, EQC E E.\nsimple induction E.\nintros A f HR.\nsimpl in |- *.\nsplit; intros.\nexists x; auto with zfc.\n\nexists y; auto with zfc.\nQed.\n\n",
                "context_tokens": 602,
                "proof_start_offset": 2636,
                "proof_end_offset": 3027,
                "proof": "Theorem EQC_tran : forall E1 E2 E3 : Ens, EQC E1 E2 -> EQC E2 E3 -> EQC E1 E3.\nProof.\nsimple induction E1; simple induction E2; simple induction E3; simpl in |- *; intros.\nsplit; (elim X2; intros; elim X3; intros).\nelim (a x); intros.\nelim (a0 x0); intros.\nexists x1.\napply X with (e0 x0); auto with zfc.\nelim (b0 y); intros.\nelim (b x); intros.\nexists x0.\napply X with (e0 x); auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem EQC_tran : forall E1 E2 E3 : Ens, EQC E1 E2 -> EQC E2 E3 -> EQC E1 E3.\nintros E1 E2.\nelim (eq_dec A B C); intros.\nelim (eq_dec A B C); intros.\nelim (eq_dec A B C); intros.\nelim (eq_dec A B C); intros.\nelim (eq_dec A B C); intros.\nelim (eq_dec A B C); intros.\nelim (eq_dec A B C); intros.\nelim (eq_dec A B C); intros.\nelim (eq_dec A B C); intros.\nelim (eq_dec A B C); intros.\nelim (eq_dec A B C); intros.\nelim (eq_dec A B C); intros.\nelim (eq_dec A B C); intros.\nelim (eq_dec A B C); intros.\nelim (eq_dec A B C); intros.\nelim (eq_dec A B C); intros.\nelim (eq_dec A B C); intros.\nelim (eq_dec A B C); intros.\nelim (eq_dec A C); intros.\nelim (eq_dec A B C); intros.\nelim (eq_dec A B C);Qed.",
                    "Theorem EQC_tran : forall E1 E2 E3 : Ens, EQC E1 E2 -> EQC E2 E3 -> EQC E1 E3.\nintros E1 E2.\napply (fun y : A, EQ C E2 -> EQ C1 E3.\nexact (fun y : A, EQ C E2 E4).\nQed.",
                    "Theorem EQC_tran : forall E1 E2 E3 : Ens, EQC E1 E2 -> EQC E2 E3 -> EQC E1 E3.\nintros E1 E2.\nelim (eq_dec A x); intros A f.\nelim (eq_dec A x); intros A f.\nelim (eq_dec A x); intros A f; auto with zfc.\nQed.",
                    "Theorem EQC_tran : forall E1 E2 E3 : Ens, EQC E1 E2 -> EQC E2 E3 -> EQC E1 E3.\nintros E1 E2.\nelim (eq_dec x y); intros x0 H1.\nelim (eq_dec x y); intros y0 H2.\nelim (eq_dec x y); intros y0.\nelim (eq_dec x y); intros y0 H2.\nelim (eq_dec x y); intros y0 H2.\nelim (eq_dec x y); intros y0 H3.\nelim (eq_dec x y); intros y0 H4.\nelim (eq_dec x y); intros y0 H4.\nelim (eq_dec x y); intros y0 H4.\nelim (eq_dec x y); intros y0 H5.\nelim (eq_dec x y); intros y0 H5.\nelim (eq_dec x y); intros y0 H5.\nelim (eq_dec y x); intros y0 H5.\nelim (eq_dec x y); intros y0.\nelim (eq_dec x y); intros y0 H5.\nelim (eq_dec x y); intros y1 H6.\nelim (eq_dec x y); intros y0 HQed.",
                    "Theorem EQC_tran : forall E1 E2 E3 : Ens, EQC E1 E2 -> EQC E2 E3 -> EQC E1 E3.\nintros E1 E2.\napply (fun x : A, x = y /\\ eq1 x (g y)).\nexact (fun x : A, x = y /\\ eq1 x (g y)).\nexact (fun x y : A, x = y /\\ eq2 x (g y)).\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Constructive.v",
                "context": "                                                  *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(* Peter Aczel's Encoding of CZF *)\n\n(* Using the same definition \"Ens\" of sets, we can developp Peter Aczel's   *)\n(* encoding of \"Constructive Type Theory\" (CZF).                            *)\n(* It is basically a simillar developement, but this time, the propositions *)\n(* are objects of type \"Type\", i.e. are on the same level (resp. above) the *)\n(* sets. The advantage is that we can extract the constructive witness of an*)\n(* existential proof. The drawbacks are:                                    *)\n(*  - no definition of the powerset                                         *)\n(*  - complicated difference between bounded and unbounded quantification   *)\n(*  - excluded middle is now much more \"dangerous\"                          *)\n\n\nRequire Import Sets.\nRequire Import Axioms.\n\n\nDefinition EQC : Ens -> Ens -> Type.\nsimple induction 1; intros A f eq1.\nsimple induction 1; intros B g eq2.\nrefine (prod_t _ _).\nexact (forall x : A, depprod _ (fun y : B => eq1 x (g y))).\nexact (forall y : B, depprod _ (fun x : A => eq1 x (g y))).\nDefined.\n\n\n\n(* APPARTENANCE *)\n\nDefinition CIN : Ens -> Ens -> Type.\nsimple induction 2.\nintros.\nexact (depprod _ (fun y : A => EQC X (e y))).\nDefined.\n\n\n\n(* INCLUSION *)\n\nDefinition CINC : Ens -> Ens -> Type.\nintros E1 E2.\nexact (forall E : Ens, CIN E E1 -> CIN E E2).\nDefined.\n\n\n\n(* EQ EST UNE RELATION D'EQUIVALENCE *)\n\nTheorem EQC_refl : forall E : Ens, EQC E E.\nsimple induction E.\nintros A f HR.\nsimpl in |- *.\nsplit; intros.\nexists x; auto with zfc.\n\nexists y; auto with zfc.\nQed.\n\nTheorem EQC_tran : forall E1 E2 E3 : Ens, EQC E1 E2 -> EQC E2 E3 -> EQC E1 E3.\nsimple induction E1; simple induction E2; simple induction E3; simpl in |- *;\n intros.\nsplit; (elim X2; intros; elim X3; intros).\nelim (a x); intros.\nelim (a0 x0); intros.\nexists x1.\napply X with (e0 x0); auto with zfc.\nelim (b0 y); intros.\nelim (b x); intros.\nexists x0.\napply X with (e0 x); auto with zfc.\nQed.\n\n",
                "context_tokens": 692,
                "proof_start_offset": 3029,
                "proof_end_offset": 3283,
                "proof": "Theorem EQC_sym : forall E1 E2 : Ens, EQC E1 E2 -> EQC E2 E1.\nProof.\nsimple induction E1; simple induction E2; simpl in |- *; intros.\nelim X1; intros; split; intros.\nelim (b x); intros.\nexists x0; auto with zfc.\nelim (a y); intros; exists x; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem EQC_sym : forall E1 E2 : Ens, EQC E1 E2 -> EQC E2 E1.\nsimple induction 1; intros.\nelim (a0 x); intros.\nelim (a0 x); intros.\nelim (a0 x); intros.\nexists x0.\nsplit; [ auto with zfc | auto with zfc ].\nelim (a0 x); intros.\nexists x1.\nsplit; [ auto with zfc | auto with zfc ].\nelim (a1 x); intros.\nexists x1.\nsplit; [ auto with zfc | auto with zfc ].\nelim (a1 x); intros.\nexists x1.\nsplit; [ auto with zfc | auto with zfc ].\nelim (a1 x); intros.\nsplit; [ auto with zfc | auto with zfc ].\nelim (a0 x); intros.\nsplit; [ auto with zfc | auto with zfc ].\n\nelim (a1 x); intros.\nsplit; [ auto with zfc | auto with zfc ].\nelim (a1 x); intros.\nsplit; [ auto with zfc | auto with zfc ].\nelim (a1 x); intros.\nsplit; [ auto with zfc | auto with zfc ].\nelim (a1 x); intros.\nsplit; [ auto with zfc | auto with zfc ].Qed.",
                    "Theorem EQC_sym : forall E1 E2 : Ens, EQC E1 E2 -> EQC E2 E1.\nsimple induction 1; intros.\nelim (a0 x); intros.\nelim (a0 x); intros.\nexists y0.\nsplit; auto with zfc.\nQed.",
                    "Theorem EQC_sym : forall E1 E2 : Ens, EQC E1 E2 -> EQC E2 E1.\nsimple induction 1; intros.\nelim (a0 x); intros.\nelim (a0 x); intros.\nelim (a0 x); intros.\nelim (a0 x); intros.\nelim (a1 x); intros.\nelim (a1 x); intros.\nelim (a1 x); intros.\nelim (a1 x); intros.\nelim (a1 x); intros.\nelim (a1 x); intros.\nelim (a1 x); intros.\nelim (a1 x); intros.\nelim (a2 x); intros.\nelim (a1 x); intros.\nelim (a2 x); intros.\nelim (a2 x); intros.\nelim (a1 x); intros.\nelim (a2 x); intros.\nelim (a2 x); intros.\nelim (a2 x); intros.\nelim (a2 x); intros.\nelim (a2 x); intros.\nelim (a2 x); intros.\nelim (a2 x); intros.\nelim (a2 x); intros.\nelim (a2 x); intros.\nelim (a2 x); intros.\nelim (a2 xQed.",
                    "Theorem EQC_sym : forall E1 E2 : Ens, EQC E1 E2 -> EQC E2 E1.\nintros E1 E2.\nunfold EQC in |- *.\nintros E1 E2.\napply (fun x : A => eq1 x (g x)); auto with zfc.\nQed.",
                    "Theorem EQC_sym : forall E1 E2 : Ens, EQC E1 E2 -> EQC E2 E1.\nintros E1 E2.\napply (fun x : A => eq1 x (g y)).\napply (fun x : A => eq1 x (g y)).\napply (fun x : A => eq1 x (g y)).\napply (fun x : A => eq1 x (g y)).\napply (fun x : A => eq2 x (g y)).\napply (fun x : A => eq2 x (g y)).\napply (fun x : A => eq2 x (g y)).\napply (fun x : A => eq2 x (g y)).\napply (fun x : A => eq2 x (g y)).\napply (fun x : A => eq2 x (g y)).\napply (fun x : A => eq2 x (g y)).\napply (fun x : A => eq2 x (g y)).\napply (fun x : A => eq2 x (g y)).\napply (fun x : A => eq2 x (g y)).\napply (fun x : A => eq2 x (g y)).\napply (fun x : A => eq2 x (g y)).\napply (fun x : A => eqQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Constructive.v",
                "context": "oor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(* Peter Aczel's Encoding of CZF *)\n\n(* Using the same definition \"Ens\" of sets, we can developp Peter Aczel's   *)\n(* encoding of \"Constructive Type Theory\" (CZF).                            *)\n(* It is basically a simillar developement, but this time, the propositions *)\n(* are objects of type \"Type\", i.e. are on the same level (resp. above) the *)\n(* sets. The advantage is that we can extract the constructive witness of an*)\n(* existential proof. The drawbacks are:                                    *)\n(*  - no definition of the powerset                                         *)\n(*  - complicated difference between bounded and unbounded quantification   *)\n(*  - excluded middle is now much more \"dangerous\"                          *)\n\n\nRequire Import Sets.\nRequire Import Axioms.\n\n\nDefinition EQC : Ens -> Ens -> Type.\nsimple induction 1; intros A f eq1.\nsimple induction 1; intros B g eq2.\nrefine (prod_t _ _).\nexact (forall x : A, depprod _ (fun y : B => eq1 x (g y))).\nexact (forall y : B, depprod _ (fun x : A => eq1 x (g y))).\nDefined.\n\n\n\n(* APPARTENANCE *)\n\nDefinition CIN : Ens -> Ens -> Type.\nsimple induction 2.\nintros.\nexact (depprod _ (fun y : A => EQC X (e y))).\nDefined.\n\n\n\n(* INCLUSION *)\n\nDefinition CINC : Ens -> Ens -> Type.\nintros E1 E2.\nexact (forall E : Ens, CIN E E1 -> CIN E E2).\nDefined.\n\n\n\n(* EQ EST UNE RELATION D'EQUIVALENCE *)\n\nTheorem EQC_refl : forall E : Ens, EQC E E.\nsimple induction E.\nintros A f HR.\nsimpl in |- *.\nsplit; intros.\nexists x; auto with zfc.\n\nexists y; auto with zfc.\nQed.\n\nTheorem EQC_tran : forall E1 E2 E3 : Ens, EQC E1 E2 -> EQC E2 E3 -> EQC E1 E3.\nsimple induction E1; simple induction E2; simple induction E3; simpl in |- *;\n intros.\nsplit; (elim X2; intros; elim X3; intros).\nelim (a x); intros.\nelim (a0 x0); intros.\nexists x1.\napply X with (e0 x0); auto with zfc.\nelim (b0 y); intros.\nelim (b x); intros.\nexists x0.\napply X with (e0 x); auto with zfc.\nQed.\n\nTheorem EQC_sym : forall E1 E2 : Ens, EQC E1 E2 -> EQC E2 E1.\nsimple induction E1; simple induction E2; simpl in |- *; intros.\nelim X1; intros; split; intros.\nelim (b x); intros.\nexists x0; auto with zfc.\nelim (a y); intros; exists x; auto with zfc.\nQed.\n\n",
                "context_tokens": 739,
                "proof_start_offset": 3285,
                "proof_end_offset": 3557,
                "proof": "Theorem EQC_INC : forall E E' : Ens, EQC E E' -> CINC E E'.\nProof.\nsimple induction E; simple induction E'; simpl in |- *; intros; unfold CINC in |- *; simpl in |- *.\nelim X1; intros.\nelim X2; intros.\nelim (a x); intros.\nexists x0; apply EQC_tran with (e x); auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem EQC_INC : forall E E' : Ens, EQC E E' -> CINC E E'.\nsimple induction 1; intros.\nelim (a0 x); intros.\nelim (a0 x); intros.\nexists x0.\nsplit; [ intros.\nexists x0.\nexists y0.\nsplit; [ intros; auto with zfc | apply H; auto with zfc ].\nelim (a0 x); intros.\nexists x0.\nsplit; [ intros; auto with zfc | apply H; auto with zfc ].\nelim (a0 x); intros.\nexists x1.\nsplit; [ intros; auto with zfc | apply H; auto with zfc ].\nelim (a0 x); intros.\nexists x1.\nsplit; [ intros; auto with zfc | apply H; auto with zfc ].\nelim (a0 x); intros.\nexists x1.\nsplit; [ intros; auto with zfc | apply H; auto with zfc ].\nelim (a0 x); intros.\nexists x1.\nsplit; [ intros; auto with zfc | apply H; auto with zfc ].\nelim (a0 x); intros.\nexists x1.\nsplit; [ auto with zfc | auto with zfc ].\nelim (a0 x1); intros.\nexistsQed.",
                    "Theorem EQC_INC : forall E E' : Ens, EQC E E' -> CINC E E'.\nsimple induction 1; intros.\nelim (a0 x); intros.\nelim (a1 x); intros.\nexists x0; auto with zfc.\n\nelim (a1 x); intros.\nexists x0; auto with zfc.\nelim (a0 x); intros.\nexists x0; auto with zfc.\n\nelim (a0 x); intros.\nexists x0; auto with zfc.\n\nelim (a0 x); intros.\nexists x0; auto with zfc.\n\n\nelim (a0 x); intros.\nexists x1; auto with zfc.\n\nelim (a1 x); intros.\nexists x1; auto with zfc.\n\nelim (a1 x); intros.\nexists x0; auto with zfc.\n\n\nelim (a1 x); intros.\nexists x1; auto with zfc.\n\nelim (a1 x); intros.\nexists x1; auto with zfc.\n\n\nexists x1; auto with zfc.\n\n\nelim (a1 x); intros.\nexists x1; auto with zfc.\n\nelim (a0 x); intros.\nexists x2; auto with zfc.Qed.",
                    "Theorem EQC_INC : forall E E' : Ens, EQC E E' -> CINC E E'.\nsimple induction 1; intros.\nelim (a x); intros.\nelim (a0 x); intros.\nexists x0; auto with zfc.\nelim (a0 x); intros.\nexists x0; auto with zfc.\n\nelim (a0 x); intros.\nexists x1; auto with zfc.\n\nelim (a0 x); intros.\nexists x1; auto with zfc.\n\n\nelim (a0 x); intros.\nexists x1; auto with zfc.\n\nelim (a0 x); intros.\nexists x2; auto with zfc.\n\nelim (a0 x); intros.\nexists x1; auto with zfc.\n\nelim (a1 x); intros.\nexists x2; auto with zfc.\n\nelim (a0 x); intros.\nexists x2; auto with zfc.\n\n\nelim (a1 x); intros.\nexists x2; auto with zfc.\n\nelim (a1 x2); intros.\nexists x2; auto with zfc.\n\nelim (a0 x2); intros.\nexists x2; auto with zfc.\n\nelim (a0 x2); intros.Qed.",
                    "Theorem EQC_INC : forall E E' : Ens, EQC E E' -> CINC E E'.\nsimple induction 1; intros.\nelim (a x); intros.\nexists x0.\nsplit.\nsplit; [ intros; elim (a x); intros.\nexists x0.\nexists x0.\nsplit; [ intros; elim (a x); intros.\nexists x0.\nsplit; [ intros; elim (a x0); intros.\nexists x0.\nexists x0.\nsplit; [ intros; elim (a x0); intros.\nexists x1.\nsplit; [ intros; elim (a x0); intros.\nexists x1.\nexists x1.\nsplit; [ intros; elim (a x0); intros.\nexists x1.\nsplit; [ intros; elim (a x1); intros.\nexists x2.\nexists x1.\nsplit; [ intros; exists x1.\nsplit; [ intros; exists x1.\nsplit; [ intros; exists x1.\nsplit; [ intros; exists x1.\nexists x1.\nsplit; [ intros; exists x2; auto with zfc | right; split; [ intros; exists x1.\nsplit; [ intros; exists x1.\nsplitQed.",
                    "Theorem EQC_INC : forall E E' : Ens, EQC E E' -> CINC E E'.\nsimple induction 1; intros.\nelim X; intros.\nelim (a0 x); intros.\nexists x0.\nexists x0.\nsplit; auto with zfc.\nelim (a0 x); intros.\nexists x1.\nsplit; auto with zfc.\n\nelim (a0 x); intros.\nexists x1.\nsplit; auto with zfc.\n\n\nelim (a0 x); intros.\nexists x1.\nsplit; auto with zfc.\n\n\nelim (a0 x); intros.\nexists x0.\nsplit; auto with zfc.\nelim (a0 x); intros.\nexists x1.\nsplit; auto with zfc.\n\nelim (a0 x); intros.\nexists x2.\nsplit; auto with zfc.\n\nelim (a0 x); intros.\nexists x1.\nsplit; auto with zfc.\n\nelim (a0 x); intros.\nexists x1.\nsplit; auto with zfc.\nelim (a0 x); intros.\nexists x1.\nsplit; auto with zfc.\nelim (a0 x); intros.\nexists x2.\nsplit; auto with zfcQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Constructive.v",
                "context": " \"Type\", i.e. are on the same level (resp. above) the *)\n(* sets. The advantage is that we can extract the constructive witness of an*)\n(* existential proof. The drawbacks are:                                    *)\n(*  - no definition of the powerset                                         *)\n(*  - complicated difference between bounded and unbounded quantification   *)\n(*  - excluded middle is now much more \"dangerous\"                          *)\n\n\nRequire Import Sets.\nRequire Import Axioms.\n\n\nDefinition EQC : Ens -> Ens -> Type.\nsimple induction 1; intros A f eq1.\nsimple induction 1; intros B g eq2.\nrefine (prod_t _ _).\nexact (forall x : A, depprod _ (fun y : B => eq1 x (g y))).\nexact (forall y : B, depprod _ (fun x : A => eq1 x (g y))).\nDefined.\n\n\n\n(* APPARTENANCE *)\n\nDefinition CIN : Ens -> Ens -> Type.\nsimple induction 2.\nintros.\nexact (depprod _ (fun y : A => EQC X (e y))).\nDefined.\n\n\n\n(* INCLUSION *)\n\nDefinition CINC : Ens -> Ens -> Type.\nintros E1 E2.\nexact (forall E : Ens, CIN E E1 -> CIN E E2).\nDefined.\n\n\n\n(* EQ EST UNE RELATION D'EQUIVALENCE *)\n\nTheorem EQC_refl : forall E : Ens, EQC E E.\nsimple induction E.\nintros A f HR.\nsimpl in |- *.\nsplit; intros.\nexists x; auto with zfc.\n\nexists y; auto with zfc.\nQed.\n\nTheorem EQC_tran : forall E1 E2 E3 : Ens, EQC E1 E2 -> EQC E2 E3 -> EQC E1 E3.\nsimple induction E1; simple induction E2; simple induction E3; simpl in |- *;\n intros.\nsplit; (elim X2; intros; elim X3; intros).\nelim (a x); intros.\nelim (a0 x0); intros.\nexists x1.\napply X with (e0 x0); auto with zfc.\nelim (b0 y); intros.\nelim (b x); intros.\nexists x0.\napply X with (e0 x); auto with zfc.\nQed.\n\nTheorem EQC_sym : forall E1 E2 : Ens, EQC E1 E2 -> EQC E2 E1.\nsimple induction E1; simple induction E2; simpl in |- *; intros.\nelim X1; intros; split; intros.\nelim (b x); intros.\nexists x0; auto with zfc.\nelim (a y); intros; exists x; auto with zfc.\nQed.\n\nTheorem EQC_INC : forall E E' : Ens, EQC E E' -> CINC E E'.\nsimple induction E; simple induction E'; simpl in |- *; intros;\n unfold CINC in |- *; simpl in |- *.\nelim X1; intros.\nelim X2; intros.\nelim (a x); intros.\nexists x0; apply EQC_tran with (e x); auto with zfc.\nQed.\n\nHint Resolve EQC_sym EQC_refl EQC_INC: zfc.\n\n",
                "context_tokens": 736,
                "proof_start_offset": 3604,
                "proof_end_offset": 3966,
                "proof": "Theorem CINC_EQC : forall E E' : Ens, CINC E E' -> CINC E' E -> EQC E E'.\nProof.\nsimple induction E; simple induction E'; unfold CINC in |- *; simpl in |- *; intros; split; intros.\napply X1.\nexists x; auto with zfc.\ncut (depprod A (fun x : A => EQC (e0 y) (e x))); try (simple induction 1; intros x p; exists x; auto with zfc).\napply X2; exists y; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem CINC_EQC : forall E E' : Ens, CINC E E' -> CINC E' E -> EQC E E'.\nsimple induction E'; simpl in |- *; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X3; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X3; intros.\nelim X3; intros.Qed.",
                    "Theorem CINC_EQC : forall E E' : Ens, CINC E E' -> CINC E' E -> EQC E E'.\nsimple induction E'; simpl in |- *; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X3; intros.\nelim X2; intros.\nelim X2; intros.\nelim X3; intros.\nelim X3; intros.\nelim X4; intros.\nelim X4; intros.\nelim X4; intros.\nelim X4; intros.\nelim X4; intros.\nelim X4; intros.\nelim X4; intros.\nelim X4; intros.\nelim X4; intros.\nelim X4; intros.\nelim X4; intros.\nelim X4; intros.\nelim X4; intros.\nelim X4; intros.Qed.",
                    "Theorem CINC_EQC : forall E E' : Ens, CINC E E' -> CINC E' E -> EQC E E'.\nsimple induction E; simpl in |- *.\nelim X; intros.\nelim X1; intros.\nelim (a x); intros.\nexists x0.\nexists x0.\nsplit; auto with zfc.\nelim (a0 x); intros.\nexists x0.\nexists x0.\nsplit; auto with zfc.\n\nelim (a0 x); intros.\nexists x0.\nexists x1.\nsplit; auto with zfc.\nelim (a0 x); intros.\nexists x0.\nsplit; auto with zfc.\n\nelim (a0 x); intros.\nexists x0.\nsplit; auto with zfc.\nelim (a0 x); intros.\nexists x0.\nsplit; auto with zfc.\nelim (a0 x); intros.\nexists x0.\nsplit; auto with zfc.\n\nelim (a0 x); intros.\nexists x1.\nsplit; auto with zfc.\n\nelim (a0 x); intros.\nexists x0.\nsplit; auto with zfc.\n\nelim (a0 x); intros.\nexists x0.\nsplit; auto with zfc.\n\nelim (aQed.",
                    "Theorem CINC_EQC : forall E E' : Ens, CINC E E' -> CINC E' E -> EQC E E'.\nsimple induction E; simpl in |- *.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X3; intros.\nelim X2; intros.\nelim X3; intros.\nelim X3; intros.\nelimQed.",
                    "Theorem CINC_EQC : forall E E' : Ens, CINC E E' -> CINC E' E -> EQC E E'.\nsimple induction E; simpl in |- *; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X3; intros.\nelim X2; intros.\nelim X3; intros.\nelim X3; intros.\nelim X3; intros.Qed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Constructive.v",
                "context": " _).\nexact (forall x : A, depprod _ (fun y : B => eq1 x (g y))).\nexact (forall y : B, depprod _ (fun x : A => eq1 x (g y))).\nDefined.\n\n\n\n(* APPARTENANCE *)\n\nDefinition CIN : Ens -> Ens -> Type.\nsimple induction 2.\nintros.\nexact (depprod _ (fun y : A => EQC X (e y))).\nDefined.\n\n\n\n(* INCLUSION *)\n\nDefinition CINC : Ens -> Ens -> Type.\nintros E1 E2.\nexact (forall E : Ens, CIN E E1 -> CIN E E2).\nDefined.\n\n\n\n(* EQ EST UNE RELATION D'EQUIVALENCE *)\n\nTheorem EQC_refl : forall E : Ens, EQC E E.\nsimple induction E.\nintros A f HR.\nsimpl in |- *.\nsplit; intros.\nexists x; auto with zfc.\n\nexists y; auto with zfc.\nQed.\n\nTheorem EQC_tran : forall E1 E2 E3 : Ens, EQC E1 E2 -> EQC E2 E3 -> EQC E1 E3.\nsimple induction E1; simple induction E2; simple induction E3; simpl in |- *;\n intros.\nsplit; (elim X2; intros; elim X3; intros).\nelim (a x); intros.\nelim (a0 x0); intros.\nexists x1.\napply X with (e0 x0); auto with zfc.\nelim (b0 y); intros.\nelim (b x); intros.\nexists x0.\napply X with (e0 x); auto with zfc.\nQed.\n\nTheorem EQC_sym : forall E1 E2 : Ens, EQC E1 E2 -> EQC E2 E1.\nsimple induction E1; simple induction E2; simpl in |- *; intros.\nelim X1; intros; split; intros.\nelim (b x); intros.\nexists x0; auto with zfc.\nelim (a y); intros; exists x; auto with zfc.\nQed.\n\nTheorem EQC_INC : forall E E' : Ens, EQC E E' -> CINC E E'.\nsimple induction E; simple induction E'; simpl in |- *; intros;\n unfold CINC in |- *; simpl in |- *.\nelim X1; intros.\nelim X2; intros.\nelim (a x); intros.\nexists x0; apply EQC_tran with (e x); auto with zfc.\nQed.\n\nHint Resolve EQC_sym EQC_refl EQC_INC: zfc.\n\nTheorem CINC_EQC : forall E E' : Ens, CINC E E' -> CINC E' E -> EQC E E'.\nsimple induction E; simple induction E'; unfold CINC in |- *; simpl in |- *;\n intros; split; intros.\napply X1.\nexists x; auto with zfc.\ncut (depprod A (fun x : A => EQC (e0 y) (e x)));\n try (simple induction 1; intros x p; exists x; auto with zfc).\napply X2; exists y; auto with zfc.\nQed.\n\nHint Resolve CINC_EQC: zfc.\n\n\n\n\n\n",
                "context_tokens": 732,
                "proof_start_offset": 4001,
                "proof_end_offset": 4205,
                "proof": "Theorem CIN_sound_left : forall E E' E'' : Ens, EQC E E' -> CIN E E'' -> CIN E' E''.\nProof.\nsimple induction E''; simpl in |- *; intros.\nelim X1; intros y p; exists y.\napply EQC_tran with E; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem CIN_sound_left : forall E E' E'' : Ens, EQC E E' -> CIN E E'' -> CIN E' E''.\nsimple induction E''; simpl in |- *; intros.\napply X2; auto with zfc.\nQed.",
                    "Theorem CIN_sound_left : forall E E' E'' : Ens, EQC E E' -> CIN E E'' -> CIN E' E''.\nsimple induction E; simpl in |- *; intros.\nelim X.\nelim X; intros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintrosQed.",
                    "Theorem CIN_sound_left : forall E E' E'' : Ens, EQC E E' -> CIN E E'' -> CIN E' E''.\nsimple induction E''.\nintros.\nelim (a x); intros.\nexists x0; auto with zfc.\nQed.",
                    "Theorem CIN_sound_left : forall E E' E'' : Ens, EQC E E' -> CIN E E'' -> CIN E' E''.\nsimple induction E; intros.\nelim (a x); intros.\nelim (a x); intros.\nexists x0; auto with zfc.\n\nQed.",
                    "Theorem CIN_sound_left : forall E E' E'' : Ens, EQC E E' -> CIN E E'' -> CIN E' E''.\nsimple induction E''; simpl in |- *; intros.\nelim X; intros.\nelim X; intros.\nelim (a x); intros.\nexists x0; auto with zfc.\n\napply X1; auto with zfc.\n\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Constructive.v",
                "context": " 2.\nintros.\nexact (depprod _ (fun y : A => EQC X (e y))).\nDefined.\n\n\n\n(* INCLUSION *)\n\nDefinition CINC : Ens -> Ens -> Type.\nintros E1 E2.\nexact (forall E : Ens, CIN E E1 -> CIN E E2).\nDefined.\n\n\n\n(* EQ EST UNE RELATION D'EQUIVALENCE *)\n\nTheorem EQC_refl : forall E : Ens, EQC E E.\nsimple induction E.\nintros A f HR.\nsimpl in |- *.\nsplit; intros.\nexists x; auto with zfc.\n\nexists y; auto with zfc.\nQed.\n\nTheorem EQC_tran : forall E1 E2 E3 : Ens, EQC E1 E2 -> EQC E2 E3 -> EQC E1 E3.\nsimple induction E1; simple induction E2; simple induction E3; simpl in |- *;\n intros.\nsplit; (elim X2; intros; elim X3; intros).\nelim (a x); intros.\nelim (a0 x0); intros.\nexists x1.\napply X with (e0 x0); auto with zfc.\nelim (b0 y); intros.\nelim (b x); intros.\nexists x0.\napply X with (e0 x); auto with zfc.\nQed.\n\nTheorem EQC_sym : forall E1 E2 : Ens, EQC E1 E2 -> EQC E2 E1.\nsimple induction E1; simple induction E2; simpl in |- *; intros.\nelim X1; intros; split; intros.\nelim (b x); intros.\nexists x0; auto with zfc.\nelim (a y); intros; exists x; auto with zfc.\nQed.\n\nTheorem EQC_INC : forall E E' : Ens, EQC E E' -> CINC E E'.\nsimple induction E; simple induction E'; simpl in |- *; intros;\n unfold CINC in |- *; simpl in |- *.\nelim X1; intros.\nelim X2; intros.\nelim (a x); intros.\nexists x0; apply EQC_tran with (e x); auto with zfc.\nQed.\n\nHint Resolve EQC_sym EQC_refl EQC_INC: zfc.\n\nTheorem CINC_EQC : forall E E' : Ens, CINC E E' -> CINC E' E -> EQC E E'.\nsimple induction E; simple induction E'; unfold CINC in |- *; simpl in |- *;\n intros; split; intros.\napply X1.\nexists x; auto with zfc.\ncut (depprod A (fun x : A => EQC (e0 y) (e x)));\n try (simple induction 1; intros x p; exists x; auto with zfc).\napply X2; exists y; auto with zfc.\nQed.\n\nHint Resolve CINC_EQC: zfc.\n\n\n\n\n\nTheorem CIN_sound_left :\n forall E E' E'' : Ens, EQC E E' -> CIN E E'' -> CIN E' E''.\nsimple induction E''; simpl in |- *; intros.\nelim X1; intros y p; exists y.\napply EQC_tran with E; auto with zfc.\nQed.\n\n",
                "context_tokens": 732,
                "proof_start_offset": 4207,
                "proof_end_offset": 4489,
                "proof": "Theorem CIN_sound_right : forall E E' E'' : Ens, EQC E' E'' -> CIN E E' -> CIN E E''.\nProof.\nsimple induction E'; simple induction E''; simpl in |- *; intros.\nelim X1; intros Xl Xr; elim X2; intros y p; elim (Xl y); intros y0 p0; exists y0; apply EQC_tran with (e y); auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem CIN_sound_right : forall E E' E'' : Ens, EQC E' E'' -> CIN E E' -> CIN E E''.\nsimple induction E''; simpl in |- *; intros.\nelim X1; intros.\nelim (a x); intros.\nexists x0; auto with zfc.\n\n\nelim X1; intros.\nexists x0; auto with zfc.\n\n\nelim X1; intros.\nexists x1; auto with zfc.\n\nQed.",
                    "Theorem CIN_sound_right : forall E E' E'' : Ens, EQC E' E'' -> CIN E E' -> CIN E E''.\nsimple induction E''; simpl in |- *; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X3; intros.\nelim X2; intros.\nelim X3; intros.\nelim X3; intros.\nelim X3; intros.\nelim X3; intros.\nelim X3; intros.\nelim X3; intros.\nelim X3; intros.\nelim X4; intros.Qed.",
                    "Theorem CIN_sound_right : forall E E' E'' : Ens, EQC E' E'' -> CIN E E' -> CIN E E''.\nsimple induction E''; simpl in |- *; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.Qed.",
                    "Theorem CIN_sound_right : forall E E' E'' : Ens, EQC E' E'' -> CIN E E' -> CIN E E''.\nsimple induction E''; simpl in |- *; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.Qed.",
                    "Theorem CIN_sound_right : forall E E' E'' : Ens, EQC E' E'' -> CIN E E' -> CIN E E''.\nsimple induction E''; simpl in |- *; intros.\nelim X1; intros.\napply X2; exists x0; auto with zfc.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Constructive.v",
                "context": " D'EQUIVALENCE *)\n\nTheorem EQC_refl : forall E : Ens, EQC E E.\nsimple induction E.\nintros A f HR.\nsimpl in |- *.\nsplit; intros.\nexists x; auto with zfc.\n\nexists y; auto with zfc.\nQed.\n\nTheorem EQC_tran : forall E1 E2 E3 : Ens, EQC E1 E2 -> EQC E2 E3 -> EQC E1 E3.\nsimple induction E1; simple induction E2; simple induction E3; simpl in |- *;\n intros.\nsplit; (elim X2; intros; elim X3; intros).\nelim (a x); intros.\nelim (a0 x0); intros.\nexists x1.\napply X with (e0 x0); auto with zfc.\nelim (b0 y); intros.\nelim (b x); intros.\nexists x0.\napply X with (e0 x); auto with zfc.\nQed.\n\nTheorem EQC_sym : forall E1 E2 : Ens, EQC E1 E2 -> EQC E2 E1.\nsimple induction E1; simple induction E2; simpl in |- *; intros.\nelim X1; intros; split; intros.\nelim (b x); intros.\nexists x0; auto with zfc.\nelim (a y); intros; exists x; auto with zfc.\nQed.\n\nTheorem EQC_INC : forall E E' : Ens, EQC E E' -> CINC E E'.\nsimple induction E; simple induction E'; simpl in |- *; intros;\n unfold CINC in |- *; simpl in |- *.\nelim X1; intros.\nelim X2; intros.\nelim (a x); intros.\nexists x0; apply EQC_tran with (e x); auto with zfc.\nQed.\n\nHint Resolve EQC_sym EQC_refl EQC_INC: zfc.\n\nTheorem CINC_EQC : forall E E' : Ens, CINC E E' -> CINC E' E -> EQC E E'.\nsimple induction E; simple induction E'; unfold CINC in |- *; simpl in |- *;\n intros; split; intros.\napply X1.\nexists x; auto with zfc.\ncut (depprod A (fun x : A => EQC (e0 y) (e x)));\n try (simple induction 1; intros x p; exists x; auto with zfc).\napply X2; exists y; auto with zfc.\nQed.\n\nHint Resolve CINC_EQC: zfc.\n\n\n\n\n\nTheorem CIN_sound_left :\n forall E E' E'' : Ens, EQC E E' -> CIN E E'' -> CIN E' E''.\nsimple induction E''; simpl in |- *; intros.\nelim X1; intros y p; exists y.\napply EQC_tran with E; auto with zfc.\nQed.\n\nTheorem CIN_sound_right :\n forall E E' E'' : Ens, EQC E' E'' -> CIN E E' -> CIN E E''.\nsimple induction E'; simple induction E''; simpl in |- *; intros.\nelim X1; intros Xl Xr; elim X2; intros y p; elim (Xl y); intros y0 p0;\n exists y0; apply EQC_tran with (e y); auto with zfc.\nQed.\n\n",
                "context_tokens": 751,
                "proof_start_offset": 4491,
                "proof_end_offset": 4577,
                "proof": "Theorem CINC_refl : forall E : Ens, CINC E E.\nProof.\nunfold CINC in |- *; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem CINC_refl : forall E : Ens, CINC E E.\nsimple induction E'; simpl in |- *; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.Qed.",
                    "Theorem CINC_refl : forall E : Ens, CINC E E.\nsimple induction E'; simpl in |- *; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.Qed.",
                    "Theorem CINC_refl : forall E : Ens, CINC E E.\nsimple induction E'; simpl in |- *; intros.\nelim X; intros.\nelim X1; intros; elim X1; intros; elim X1; intros.\nexists x0; auto with zfc.\nQed.",
                    "Theorem CINC_refl : forall E : Ens, CINC E E.\nsimple induction E'; simpl in |- *; intros.\nelim X1; intros.\nelim X1; intros; elim H0; intros.\nelim X1; intros.\nelim X2; intros; elim H0; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X3; intros.\nelim X3; intros.\nelim X3; intros.\nelimQed.",
                    "Theorem CINC_refl : forall E : Ens, CINC E E.\nsimple induction E'; simpl in |- *; intros.\nelim X; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X3; intros.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Constructive.v",
                "context": " x; auto with zfc.\n\nexists y; auto with zfc.\nQed.\n\nTheorem EQC_tran : forall E1 E2 E3 : Ens, EQC E1 E2 -> EQC E2 E3 -> EQC E1 E3.\nsimple induction E1; simple induction E2; simple induction E3; simpl in |- *;\n intros.\nsplit; (elim X2; intros; elim X3; intros).\nelim (a x); intros.\nelim (a0 x0); intros.\nexists x1.\napply X with (e0 x0); auto with zfc.\nelim (b0 y); intros.\nelim (b x); intros.\nexists x0.\napply X with (e0 x); auto with zfc.\nQed.\n\nTheorem EQC_sym : forall E1 E2 : Ens, EQC E1 E2 -> EQC E2 E1.\nsimple induction E1; simple induction E2; simpl in |- *; intros.\nelim X1; intros; split; intros.\nelim (b x); intros.\nexists x0; auto with zfc.\nelim (a y); intros; exists x; auto with zfc.\nQed.\n\nTheorem EQC_INC : forall E E' : Ens, EQC E E' -> CINC E E'.\nsimple induction E; simple induction E'; simpl in |- *; intros;\n unfold CINC in |- *; simpl in |- *.\nelim X1; intros.\nelim X2; intros.\nelim (a x); intros.\nexists x0; apply EQC_tran with (e x); auto with zfc.\nQed.\n\nHint Resolve EQC_sym EQC_refl EQC_INC: zfc.\n\nTheorem CINC_EQC : forall E E' : Ens, CINC E E' -> CINC E' E -> EQC E E'.\nsimple induction E; simple induction E'; unfold CINC in |- *; simpl in |- *;\n intros; split; intros.\napply X1.\nexists x; auto with zfc.\ncut (depprod A (fun x : A => EQC (e0 y) (e x)));\n try (simple induction 1; intros x p; exists x; auto with zfc).\napply X2; exists y; auto with zfc.\nQed.\n\nHint Resolve CINC_EQC: zfc.\n\n\n\n\n\nTheorem CIN_sound_left :\n forall E E' E'' : Ens, EQC E E' -> CIN E E'' -> CIN E' E''.\nsimple induction E''; simpl in |- *; intros.\nelim X1; intros y p; exists y.\napply EQC_tran with E; auto with zfc.\nQed.\n\nTheorem CIN_sound_right :\n forall E E' E'' : Ens, EQC E' E'' -> CIN E E' -> CIN E E''.\nsimple induction E'; simple induction E''; simpl in |- *; intros.\nelim X1; intros Xl Xr; elim X2; intros y p; elim (Xl y); intros y0 p0;\n exists y0; apply EQC_tran with (e y); auto with zfc.\nQed.\n\nTheorem CINC_refl : forall E : Ens, CINC E E.\nunfold CINC in |- *; auto with zfc.\nQed.\n\n",
                "context_tokens": 734,
                "proof_start_offset": 4579,
                "proof_end_offset": 4703,
                "proof": "Theorem CINC_tran : forall E E' E'' : Ens, CINC E E' -> CINC E' E'' -> CINC E E''.\nProof.\nunfold CINC in |- *; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem CINC_tran : forall E E' E'' : Ens, CINC E E' -> CINC E' E'' -> CINC E E''.\nsimple induction E''; simpl in |- *; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X3; intros.\nelim X1; intros.\nelim X2; intros.\nelim X3; intros.\nelim X4; intros.Qed.",
                    "Theorem CINC_tran : forall E E' E'' : Ens, CINC E E' -> CINC E' E'' -> CINC E E''.\nsimple induction E''; simpl in |- *; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.Qed.",
                    "Theorem CINC_tran : forall E E' E'' : Ens, CINC E E' -> CINC E' E'' -> CINC E E''.\nsimple induction E''; simpl in |- *; intros.\nelim X; intros; elim (H x); intros; elim (H x); intros.\nexists x0; split; auto with zfc.\nQed.",
                    "Theorem CINC_tran : forall E E' E'' : Ens, CINC E E' -> CINC E' E'' -> CINC E E''.\nsimple induction E''; simpl in |- *; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.Qed.",
                    "Theorem CINC_tran : forall E E' E'' : Ens, CINC E E' -> CINC E' E'' -> CINC E E''.\nsimple induction E''; simpl in |- *; intros.\nelim X1; intros.\nelim X1; intros; elim (r1 x); intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X3; introsQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Constructive.v",
                "context": " E1 E3.\nsimple induction E1; simple induction E2; simple induction E3; simpl in |- *;\n intros.\nsplit; (elim X2; intros; elim X3; intros).\nelim (a x); intros.\nelim (a0 x0); intros.\nexists x1.\napply X with (e0 x0); auto with zfc.\nelim (b0 y); intros.\nelim (b x); intros.\nexists x0.\napply X with (e0 x); auto with zfc.\nQed.\n\nTheorem EQC_sym : forall E1 E2 : Ens, EQC E1 E2 -> EQC E2 E1.\nsimple induction E1; simple induction E2; simpl in |- *; intros.\nelim X1; intros; split; intros.\nelim (b x); intros.\nexists x0; auto with zfc.\nelim (a y); intros; exists x; auto with zfc.\nQed.\n\nTheorem EQC_INC : forall E E' : Ens, EQC E E' -> CINC E E'.\nsimple induction E; simple induction E'; simpl in |- *; intros;\n unfold CINC in |- *; simpl in |- *.\nelim X1; intros.\nelim X2; intros.\nelim (a x); intros.\nexists x0; apply EQC_tran with (e x); auto with zfc.\nQed.\n\nHint Resolve EQC_sym EQC_refl EQC_INC: zfc.\n\nTheorem CINC_EQC : forall E E' : Ens, CINC E E' -> CINC E' E -> EQC E E'.\nsimple induction E; simple induction E'; unfold CINC in |- *; simpl in |- *;\n intros; split; intros.\napply X1.\nexists x; auto with zfc.\ncut (depprod A (fun x : A => EQC (e0 y) (e x)));\n try (simple induction 1; intros x p; exists x; auto with zfc).\napply X2; exists y; auto with zfc.\nQed.\n\nHint Resolve CINC_EQC: zfc.\n\n\n\n\n\nTheorem CIN_sound_left :\n forall E E' E'' : Ens, EQC E E' -> CIN E E'' -> CIN E' E''.\nsimple induction E''; simpl in |- *; intros.\nelim X1; intros y p; exists y.\napply EQC_tran with E; auto with zfc.\nQed.\n\nTheorem CIN_sound_right :\n forall E E' E'' : Ens, EQC E' E'' -> CIN E E' -> CIN E E''.\nsimple induction E'; simple induction E''; simpl in |- *; intros.\nelim X1; intros Xl Xr; elim X2; intros y p; elim (Xl y); intros y0 p0;\n exists y0; apply EQC_tran with (e y); auto with zfc.\nQed.\n\nTheorem CINC_refl : forall E : Ens, CINC E E.\nunfold CINC in |- *; auto with zfc.\nQed.\n\nTheorem CINC_tran :\n forall E E' E'' : Ens, CINC E E' -> CINC E' E'' -> CINC E E''.\nunfold CINC in |- *; auto with zfc.\nQed.\n\n\n",
                "context_tokens": 732,
                "proof_start_offset": 4706,
                "proof_end_offset": 4939,
                "proof": "Theorem CINC_sound_left : forall E E' E'' : Ens, EQC E E' -> CINC E E'' -> CINC E' E''.\nProof.\nsimple induction E''; unfold CINC in |- *; simpl in |- *; intros A f XR e X1 E0 i; apply X1.\napply CIN_sound_right with E'; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem CINC_sound_left : forall E E' E'' : Ens, EQC E E' -> CINC E E'' -> CINC E' E''.\nunfold CINC in |- *; auto with zfc.\nQed.",
                    "Theorem CINC_sound_left : forall E E' E'' : Ens, EQC E E' -> CINC E E'' -> CINC E' E''.\nunfold CIN in |- *; auto with zfc.\nQed.",
                    "Theorem CINC_sound_left : forall E E' E'' : Ens, EQC E E' -> CINC E E'' -> CINC E' E''.\nsimple induction E''; simpl in |- *; intros.\nelim X1; intros.\nelim X1; intros; elim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X3; intros.\nelim X2; intros.\nelim X3; intros.\nelim X3; intros.\nQed.",
                    "Theorem CINC_sound_left : forall E E' E'' : Ens, EQC E E' -> CINC E E'' -> CINC E' E''.\nsimple induction E''; simpl in |- *; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X.\nelim X; intros.\nelim X; intros.\nelim X.\nelim X; intros.\nelim X.\nelim X.\nintros.\nelim X; intros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim XQed.",
                    "Theorem CINC_sound_left : forall E E' E'' : Ens, EQC E E' -> CINC E E'' -> CINC E' E''.\nsimple induction E''; simpl in |- *; intros.\nelim X; intros.\nelim X; intros; elim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X.\nelim X; intros.\nelim X.\nelim X; intros.\nelim X.\nelim X; intros.\nelim X; intros.\nelim X.\nelim X; intros.\nelim X.\nelim X; intros.\nelim X.\nelim X; intros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X; intros.\nelim X.\nelim X; intros.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.Qed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Constructive.v",
                "context": " intros.\nelim (b x); intros.\nexists x0.\napply X with (e0 x); auto with zfc.\nQed.\n\nTheorem EQC_sym : forall E1 E2 : Ens, EQC E1 E2 -> EQC E2 E1.\nsimple induction E1; simple induction E2; simpl in |- *; intros.\nelim X1; intros; split; intros.\nelim (b x); intros.\nexists x0; auto with zfc.\nelim (a y); intros; exists x; auto with zfc.\nQed.\n\nTheorem EQC_INC : forall E E' : Ens, EQC E E' -> CINC E E'.\nsimple induction E; simple induction E'; simpl in |- *; intros;\n unfold CINC in |- *; simpl in |- *.\nelim X1; intros.\nelim X2; intros.\nelim (a x); intros.\nexists x0; apply EQC_tran with (e x); auto with zfc.\nQed.\n\nHint Resolve EQC_sym EQC_refl EQC_INC: zfc.\n\nTheorem CINC_EQC : forall E E' : Ens, CINC E E' -> CINC E' E -> EQC E E'.\nsimple induction E; simple induction E'; unfold CINC in |- *; simpl in |- *;\n intros; split; intros.\napply X1.\nexists x; auto with zfc.\ncut (depprod A (fun x : A => EQC (e0 y) (e x)));\n try (simple induction 1; intros x p; exists x; auto with zfc).\napply X2; exists y; auto with zfc.\nQed.\n\nHint Resolve CINC_EQC: zfc.\n\n\n\n\n\nTheorem CIN_sound_left :\n forall E E' E'' : Ens, EQC E E' -> CIN E E'' -> CIN E' E''.\nsimple induction E''; simpl in |- *; intros.\nelim X1; intros y p; exists y.\napply EQC_tran with E; auto with zfc.\nQed.\n\nTheorem CIN_sound_right :\n forall E E' E'' : Ens, EQC E' E'' -> CIN E E' -> CIN E E''.\nsimple induction E'; simple induction E''; simpl in |- *; intros.\nelim X1; intros Xl Xr; elim X2; intros y p; elim (Xl y); intros y0 p0;\n exists y0; apply EQC_tran with (e y); auto with zfc.\nQed.\n\nTheorem CINC_refl : forall E : Ens, CINC E E.\nunfold CINC in |- *; auto with zfc.\nQed.\n\nTheorem CINC_tran :\n forall E E' E'' : Ens, CINC E E' -> CINC E' E'' -> CINC E E''.\nunfold CINC in |- *; auto with zfc.\nQed.\n\n\nTheorem CINC_sound_left :\n forall E E' E'' : Ens, EQC E E' -> CINC E E'' -> CINC E' E''.\nsimple induction E''; unfold CINC in |- *; simpl in |- *;\n intros A f XR e X1 E0 i; apply X1.\napply CIN_sound_right with E'; auto with zfc.\nQed.\n\n",
                "context_tokens": 732,
                "proof_start_offset": 4941,
                "proof_end_offset": 5258,
                "proof": "Theorem CINC_sound_right : forall E E' E'' : Ens, EQC E' E'' -> CINC E E' -> CINC E E''.\nProof.\nsimple induction E'; simple induction E''; unfold CINC in |- *; simpl in |- *; intros.\nelim (X2 E0); try assumption; intros.\nelim X1; intros XA XB; elim (XA x); intros.\nexists x0; apply EQC_tran with (e x); auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem CINC_sound_right : forall E E' E'' : Ens, EQC E' E'' -> CINC E E' -> CINC E E''.\nsimple induction E''; simpl in |- *; intros.\nelim X1; intros.\nelim X1; intros; elim X1; intros; elim X2; intros; elim X2; intros; elim X1; intros; elim X2; intros; elim X2; intros; elim X2; intros; elim X2; intros; elim X2; intros; elim X3;\n intros; elim X4; intros; elim X4; intros; elim X4; intros; elim X4; intros; elim X4; intros; elim X4;\n intros; elim X4; intros; elim X4; intros; elim X4; intros; elim X4; intros; elim X4;\n intros; elim X5; intros; elim X4; intros; elim X5; intros; elim X5; intros; elim X5;\n intros; elim X6; intros; elim X6; intros; elim X5; intros; elim X6;\n intros; elim X6; intros; elim X7; elim X6; intros; elim X6; intros; elim X6; intros; elim X6; intros; elim X6;\n intros; elim X6; introsQed.",
                    "Theorem CINC_sound_right : forall E E' E'' : Ens, EQC E' E'' -> CINC E E' -> CINC E E''.\nsimple induction E''; simpl in |- *; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X.\nelim X; intros.\nelim X; intros.\nelim X.\nelim X; intros.\nelim X.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nQed.",
                    "Theorem CINC_sound_right : forall E E' E'' : Ens, EQC E' E'' -> CINC E E' -> CINC E E''.\nsimple induction E''; simpl in |- *; intros.\nelim X; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X3; intros.\nelim X3; intros.\nelim X3; intros.\nelim X3; intros.\nQed.",
                    "Theorem CINC_sound_right : forall E E' E'' : Ens, EQC E' E'' -> CINC E E' -> CINC E E''.\nsimple induction E''; simpl in |- *; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X.\nelim X; intros.\nelim X.\nelim X; intros.\nelim X; intros.\nelim X.\nelim X; intros.\nelim X; intros.\nelim X.\nelim X; intros.\nelim X.\nelim X; intros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelimQed.",
                    "Theorem CINC_sound_right : forall E E' E'' : Ens, EQC E' E'' -> CINC E E' -> CINC E E''.\nsimple induction E''; simpl in |- *; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X.\nelim X; intros.\nelim X; intros.\nelim X; intros.\nelim X.\nelim X; intros.\nelim X.\nelim X; intros.\nelim X; intros.\nelim X.\nelim X; intros.\nelim X.\nelim X; intros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X; intros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nintros.\nelim X.\nelim X.\nintros.\nelim X.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Constructive.v",
                "context": " exists x; auto with zfc.\nQed.\n\nTheorem EQC_INC : forall E E' : Ens, EQC E E' -> CINC E E'.\nsimple induction E; simple induction E'; simpl in |- *; intros;\n unfold CINC in |- *; simpl in |- *.\nelim X1; intros.\nelim X2; intros.\nelim (a x); intros.\nexists x0; apply EQC_tran with (e x); auto with zfc.\nQed.\n\nHint Resolve EQC_sym EQC_refl EQC_INC: zfc.\n\nTheorem CINC_EQC : forall E E' : Ens, CINC E E' -> CINC E' E -> EQC E E'.\nsimple induction E; simple induction E'; unfold CINC in |- *; simpl in |- *;\n intros; split; intros.\napply X1.\nexists x; auto with zfc.\ncut (depprod A (fun x : A => EQC (e0 y) (e x)));\n try (simple induction 1; intros x p; exists x; auto with zfc).\napply X2; exists y; auto with zfc.\nQed.\n\nHint Resolve CINC_EQC: zfc.\n\n\n\n\n\nTheorem CIN_sound_left :\n forall E E' E'' : Ens, EQC E E' -> CIN E E'' -> CIN E' E''.\nsimple induction E''; simpl in |- *; intros.\nelim X1; intros y p; exists y.\napply EQC_tran with E; auto with zfc.\nQed.\n\nTheorem CIN_sound_right :\n forall E E' E'' : Ens, EQC E' E'' -> CIN E E' -> CIN E E''.\nsimple induction E'; simple induction E''; simpl in |- *; intros.\nelim X1; intros Xl Xr; elim X2; intros y p; elim (Xl y); intros y0 p0;\n exists y0; apply EQC_tran with (e y); auto with zfc.\nQed.\n\nTheorem CINC_refl : forall E : Ens, CINC E E.\nunfold CINC in |- *; auto with zfc.\nQed.\n\nTheorem CINC_tran :\n forall E E' E'' : Ens, CINC E E' -> CINC E' E'' -> CINC E E''.\nunfold CINC in |- *; auto with zfc.\nQed.\n\n\nTheorem CINC_sound_left :\n forall E E' E'' : Ens, EQC E E' -> CINC E E'' -> CINC E' E''.\nsimple induction E''; unfold CINC in |- *; simpl in |- *;\n intros A f XR e X1 E0 i; apply X1.\napply CIN_sound_right with E'; auto with zfc.\nQed.\n\nTheorem CINC_sound_right :\n forall E E' E'' : Ens, EQC E' E'' -> CINC E E' -> CINC E E''.\nsimple induction E'; simple induction E''; unfold CINC in |- *; simpl in |- *;\n intros.\nelim (X2 E0); try assumption; intros.\nelim X1; intros XA XB; elim (XA x); intros.\nexists x0; apply EQC_tran with (e x); auto with zfc.\nQed.\n\n\n\n\n\n",
                "context_tokens": 730,
                "proof_start_offset": 5264,
                "proof_end_offset": 5529,
                "proof": "Theorem tout_vide_est_VideC : forall E : Ens, (forall E' : Ens, CIN E' E -> F) -> EQC E Vide.\nProof.\nunfold Vide in |- *; simple induction E; simpl in |- *; intros A e X H; split.\nintros; elim (H (e x)); auto with zfc.\nexists x; auto with zfc.\nsimple induction y.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem tout_vide_est_VideC : forall E : Ens, (forall E' : Ens, CIN E' E -> F) -> EQC E Vide.\nintros E' E' H' H'0 H'0; elim H'0; intros.\nelim (X2 E); intros.\nelim (X2 E); intros.\nelim (X2 E); intros.\nelim (X2 E); intros.\nelim (X2 E); intros.\nelim (X2 E); intros.\nelim (X2 E); intros.\nelim (X2 E); intros.\nelim (X2 E); intros.\nelim (X2 E); intros.\nelim (X2 E); intros.\nelim (X2 E); intros.\nelim (X2 E); intros.\nelim (X2 E); intros.\nelim (X2 E); intros.\nelim (X2 E); intros.\nelim (X2 E); intros.\nelim (X2 E); intros.\nelim (X3 E); intros.\nelim (X2 E); intros.\nelim (X3 E2); intros.\nelim (X3 E); intros.\nelim (X3 E); intros.\nelim (X3 E); intros.\nelim (X3 E); intros.\nelim (X3 E); introsQed.",
                    "Theorem tout_vide_est_VideC : forall E : Ens, (forall E' : Ens, CIN E' E -> F) -> EQC E Vide.\nsimple induction E'; simpl in |- *; intros.\nelim X1; intros; elim (X2 E); intros.\nexists x0; apply EQC_diln with (e x0); auto with zfc.\nQed.",
                    "Theorem tout_vide_est_VideC : forall E : Ens, (forall E' : Ens, CIN E' E -> F) -> EQC E Vide.\nsimple induction E'; simpl in |- *; intros.\nelim X1; intros; elim (X2 E); intros.\nexists x0; apply EQC_inclus with (e x0); auto with zfc.\nQed.",
                    "Theorem tout_vide_est_VideC : forall E : Ens, (forall E' : Ens, CIN E' E -> F) -> EQC E Vide.\nsimple induction E'; simpl in |- *; intros.\nelim X1; intros.\nelim X2; intros; elim H1; intros.\nelim X1; intros.\nelim X1; intros; elim H2; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X3; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X3; intros.\nelimQed.",
                    "Theorem tout_vide_est_VideC : forall E : Ens, (forall E' : Ens, CIN E' E -> F) -> EQC E Vide.\nsimple induction E'; simpl in |- *; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X1; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X2; intros.\nelim X3; intros.\nelim X2; intros.\nelim X3; intros.\nelim X3; intros.\nelim X3; intros.\nelim X3; intros.\nelim X4; intros.\nelim X4; intros.\nelim X4; intros.\nelim X4; intros.\nelim X4; intros.\nelim X4; intros.\nelim X4; intros.\nelim X4; intros.\nelim X4; intros.Qed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Constructive.v",
                "context": " with (e x); auto with zfc.\nQed.\n\nHint Resolve EQC_sym EQC_refl EQC_INC: zfc.\n\nTheorem CINC_EQC : forall E E' : Ens, CINC E E' -> CINC E' E -> EQC E E'.\nsimple induction E; simple induction E'; unfold CINC in |- *; simpl in |- *;\n intros; split; intros.\napply X1.\nexists x; auto with zfc.\ncut (depprod A (fun x : A => EQC (e0 y) (e x)));\n try (simple induction 1; intros x p; exists x; auto with zfc).\napply X2; exists y; auto with zfc.\nQed.\n\nHint Resolve CINC_EQC: zfc.\n\n\n\n\n\nTheorem CIN_sound_left :\n forall E E' E'' : Ens, EQC E E' -> CIN E E'' -> CIN E' E''.\nsimple induction E''; simpl in |- *; intros.\nelim X1; intros y p; exists y.\napply EQC_tran with E; auto with zfc.\nQed.\n\nTheorem CIN_sound_right :\n forall E E' E'' : Ens, EQC E' E'' -> CIN E E' -> CIN E E''.\nsimple induction E'; simple induction E''; simpl in |- *; intros.\nelim X1; intros Xl Xr; elim X2; intros y p; elim (Xl y); intros y0 p0;\n exists y0; apply EQC_tran with (e y); auto with zfc.\nQed.\n\nTheorem CINC_refl : forall E : Ens, CINC E E.\nunfold CINC in |- *; auto with zfc.\nQed.\n\nTheorem CINC_tran :\n forall E E' E'' : Ens, CINC E E' -> CINC E' E'' -> CINC E E''.\nunfold CINC in |- *; auto with zfc.\nQed.\n\n\nTheorem CINC_sound_left :\n forall E E' E'' : Ens, EQC E E' -> CINC E E'' -> CINC E' E''.\nsimple induction E''; unfold CINC in |- *; simpl in |- *;\n intros A f XR e X1 E0 i; apply X1.\napply CIN_sound_right with E'; auto with zfc.\nQed.\n\nTheorem CINC_sound_right :\n forall E E' E'' : Ens, EQC E' E'' -> CINC E E' -> CINC E E''.\nsimple induction E'; simple induction E''; unfold CINC in |- *; simpl in |- *;\n intros.\nelim (X2 E0); try assumption; intros.\nelim X1; intros XA XB; elim (XA x); intros.\nexists x0; apply EQC_tran with (e x); auto with zfc.\nQed.\n\n\n\n\n\nTheorem tout_vide_est_VideC :\n forall E : Ens, (forall E' : Ens, CIN E' E -> F) -> EQC E Vide.\n unfold Vide in |- *; simple induction E; simpl in |- *; intros A e X H;\n  split.\nintros; elim (H (e x)); auto with zfc.\nexists x; auto with zfc.\nsimple induction y.\nQed.\n\n\n",
                "context_tokens": 729,
                "proof_start_offset": 5532,
                "proof_end_offset": 5852,
                "proof": "Theorem Paire_sound_leftC : forall A A' B : Ens, EQC A A' -> EQC (Paire A B) (Paire A' B).\nProof.\nunfold Paire in |- *.\nsimpl in |- *.\nintros; split.\nsimple induction x.\nexists true; auto with zfc.\nexists false; auto with zfc.\nsimple induction y; simpl in |- *.\nexists true; auto with zfc.\nexists false; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Paire_sound_leftC : forall A A' B : Ens, EQC A A' -> EQC (Paire A B) (Paire A' B).\nunfold Vide in |- *; intros A' B A' B' H' H' H' H'0 H'0; elim H'0; intros.\nelim (H (H (H x)); auto with zfc.\nQed.",
                    "Theorem Paire_sound_leftC : forall A A' B : Ens, EQC A A' -> EQC (Paire A B) (Paire A' B).\nunfold Vide in |- *; intros A' B x y H0.\nelim (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (Qed.",
                    "Theorem Paire_sound_leftC : forall A A' B : Ens, EQC A A' -> EQC (Paire A B) (Paire A' B).\nintros E' B' E' H' H'0; elim H'0; intros.\nelim (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (Qed.",
                    "Theorem Paire_sound_leftC : forall A A' B : Ens, EQC A A' -> EQC (Paire A B) (Paire A' B).\nunfold Vide in |- *; intros A' B; elim (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (HQed.",
                    "Theorem Paire_sound_leftC : forall A A' B : Ens, EQC A A' -> EQC (Paire A B) (Paire A' B).\nunfold Vide in |- *; intros A' B' B' H' H'0; elim H'0; intros.\nelim (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (HQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Constructive.v",
                "context": " (fun x : A => EQC (e0 y) (e x)));\n try (simple induction 1; intros x p; exists x; auto with zfc).\napply X2; exists y; auto with zfc.\nQed.\n\nHint Resolve CINC_EQC: zfc.\n\n\n\n\n\nTheorem CIN_sound_left :\n forall E E' E'' : Ens, EQC E E' -> CIN E E'' -> CIN E' E''.\nsimple induction E''; simpl in |- *; intros.\nelim X1; intros y p; exists y.\napply EQC_tran with E; auto with zfc.\nQed.\n\nTheorem CIN_sound_right :\n forall E E' E'' : Ens, EQC E' E'' -> CIN E E' -> CIN E E''.\nsimple induction E'; simple induction E''; simpl in |- *; intros.\nelim X1; intros Xl Xr; elim X2; intros y p; elim (Xl y); intros y0 p0;\n exists y0; apply EQC_tran with (e y); auto with zfc.\nQed.\n\nTheorem CINC_refl : forall E : Ens, CINC E E.\nunfold CINC in |- *; auto with zfc.\nQed.\n\nTheorem CINC_tran :\n forall E E' E'' : Ens, CINC E E' -> CINC E' E'' -> CINC E E''.\nunfold CINC in |- *; auto with zfc.\nQed.\n\n\nTheorem CINC_sound_left :\n forall E E' E'' : Ens, EQC E E' -> CINC E E'' -> CINC E' E''.\nsimple induction E''; unfold CINC in |- *; simpl in |- *;\n intros A f XR e X1 E0 i; apply X1.\napply CIN_sound_right with E'; auto with zfc.\nQed.\n\nTheorem CINC_sound_right :\n forall E E' E'' : Ens, EQC E' E'' -> CINC E E' -> CINC E E''.\nsimple induction E'; simple induction E''; unfold CINC in |- *; simpl in |- *;\n intros.\nelim (X2 E0); try assumption; intros.\nelim X1; intros XA XB; elim (XA x); intros.\nexists x0; apply EQC_tran with (e x); auto with zfc.\nQed.\n\n\n\n\n\nTheorem tout_vide_est_VideC :\n forall E : Ens, (forall E' : Ens, CIN E' E -> F) -> EQC E Vide.\n unfold Vide in |- *; simple induction E; simpl in |- *; intros A e X H;\n  split.\nintros; elim (H (e x)); auto with zfc.\nexists x; auto with zfc.\nsimple induction y.\nQed.\n\n\nTheorem Paire_sound_leftC :\n forall A A' B : Ens, EQC A A' -> EQC (Paire A B) (Paire A' B).\nunfold Paire in |- *.\nsimpl in |- *.\nintros; split.\nsimple induction x.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\n\nsimple induction y; simpl in |- *.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\nQed.\n\n",
                "context_tokens": 730,
                "proof_start_offset": 5854,
                "proof_end_offset": 6157,
                "proof": "Theorem Paire_sound_rightC : forall A B B' : Ens, EQC B B' -> EQC (Paire A B) (Paire A B').\nProof.\nunfold Paire in |- *; simpl in |- *; intros; split.\nsimple induction x.\nexists true; auto with zfc.\nexists false; auto with zfc.\nsimple induction y.\nexists true; auto with zfc.\nexists false; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Paire_sound_rightC : forall A B B' : Ens, EQC B B' -> EQC (Paire A B) (Paire A B').\nunfold inc in |- *.\nintros; split.\nintros; elim (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (Qed.",
                    "Theorem Paire_sound_rightC : forall A B B' : Ens, EQC B B' -> EQC (Paire A B) (Paire A B').\nunfold rImg in |- *.\nintros; split.\nunfold Vide in |- *.\nunfold Vide in |- *.\nintros; split.\nunfold Vide in |- *; intros.\nelim (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (HQed.",
                    "Theorem Paire_sound_rightC : forall A B B' : Ens, EQC B B' -> EQC (Paire A B) (Paire A B').\nunfold inc in |- *.\nunfold inc in |- *.\nintros; split.\nunfold inc in |- *; intros.\nelim (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (Qed.",
                    "Theorem Paire_sound_rightC : forall A B B' : Ens, EQC B B' -> EQC (Paire A B) (Paire A B').\nunfolded.",
                    "Theorem Paire_sound_rightC : forall A B B' : Ens, EQC B B' -> EQC (Paire A B) (Paire A B').\nunfold inc in |- *.\nintros; split.\nintros; elim (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (Qed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Constructive.v",
                "context": " CIN E E'' -> CIN E' E''.\nsimple induction E''; simpl in |- *; intros.\nelim X1; intros y p; exists y.\napply EQC_tran with E; auto with zfc.\nQed.\n\nTheorem CIN_sound_right :\n forall E E' E'' : Ens, EQC E' E'' -> CIN E E' -> CIN E E''.\nsimple induction E'; simple induction E''; simpl in |- *; intros.\nelim X1; intros Xl Xr; elim X2; intros y p; elim (Xl y); intros y0 p0;\n exists y0; apply EQC_tran with (e y); auto with zfc.\nQed.\n\nTheorem CINC_refl : forall E : Ens, CINC E E.\nunfold CINC in |- *; auto with zfc.\nQed.\n\nTheorem CINC_tran :\n forall E E' E'' : Ens, CINC E E' -> CINC E' E'' -> CINC E E''.\nunfold CINC in |- *; auto with zfc.\nQed.\n\n\nTheorem CINC_sound_left :\n forall E E' E'' : Ens, EQC E E' -> CINC E E'' -> CINC E' E''.\nsimple induction E''; unfold CINC in |- *; simpl in |- *;\n intros A f XR e X1 E0 i; apply X1.\napply CIN_sound_right with E'; auto with zfc.\nQed.\n\nTheorem CINC_sound_right :\n forall E E' E'' : Ens, EQC E' E'' -> CINC E E' -> CINC E E''.\nsimple induction E'; simple induction E''; unfold CINC in |- *; simpl in |- *;\n intros.\nelim (X2 E0); try assumption; intros.\nelim X1; intros XA XB; elim (XA x); intros.\nexists x0; apply EQC_tran with (e x); auto with zfc.\nQed.\n\n\n\n\n\nTheorem tout_vide_est_VideC :\n forall E : Ens, (forall E' : Ens, CIN E' E -> F) -> EQC E Vide.\n unfold Vide in |- *; simple induction E; simpl in |- *; intros A e X H;\n  split.\nintros; elim (H (e x)); auto with zfc.\nexists x; auto with zfc.\nsimple induction y.\nQed.\n\n\nTheorem Paire_sound_leftC :\n forall A A' B : Ens, EQC A A' -> EQC (Paire A B) (Paire A' B).\nunfold Paire in |- *.\nsimpl in |- *.\nintros; split.\nsimple induction x.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\n\nsimple induction y; simpl in |- *.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\nQed.\n\nTheorem Paire_sound_rightC :\n forall A B B' : Ens, EQC B B' -> EQC (Paire A B) (Paire A B').\nunfold Paire in |- *; simpl in |- *; intros; split.\nsimple induction x.\nexists true; auto with zfc.\nexists false; auto with zfc.\nsimple induction y.\nexists true; auto with zfc.\nexists false; auto with zfc.\nQed.\n\n\n",
                "context_tokens": 742,
                "proof_start_offset": 6160,
                "proof_end_offset": 6309,
                "proof": "Theorem CIN_Paire_left : forall E E' : Ens, CIN E (Paire E E').\nProof.\nunfold Paire in |- *; simpl in |- *; exists true; simpl in |- *; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem CIN_Paire_left : forall E E' : Ens, CIN E (Paire E E').\nunfold inc in |- *; simpl in |- *; intros A' B' H' H'0; elim H'0; intros.\nexists x0; auto with zfc.\nQed.",
                    "Theorem CIN_Paire_left : forall E E' : Ens, CIN E (Paire E E').\nunfold inc in |- *; simpl in |- *; intros; split.\nintros.\nelim (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (Qed.",
                    "Theorem CIN_Paire_left : forall E E' : Ens, CIN E (Paire E E').\nunfold In in |- *.\nunfold In in |- *.\nintros; split.\nintros; elim (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (Qed.",
                    "Theorem CIN_Paire_left : forall E E' : Ens, CIN E (Paire E E').\nunfold Same, Included in |- *; simpl in |- *; intros A B' H' H'0; elim H'; intros.\nexists x; auto with zfc.\nQed.",
                    "Theorem CIN_Paire_left : forall E E' : Ens, CIN E (Paire E E').\nunfold inc in |- *; simpl in |- *; intros A B' H'0; elim H'; intros.\nexists y; auto with zfc.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Constructive.v",
                "context": " CIN_sound_right :\n forall E E' E'' : Ens, EQC E' E'' -> CIN E E' -> CIN E E''.\nsimple induction E'; simple induction E''; simpl in |- *; intros.\nelim X1; intros Xl Xr; elim X2; intros y p; elim (Xl y); intros y0 p0;\n exists y0; apply EQC_tran with (e y); auto with zfc.\nQed.\n\nTheorem CINC_refl : forall E : Ens, CINC E E.\nunfold CINC in |- *; auto with zfc.\nQed.\n\nTheorem CINC_tran :\n forall E E' E'' : Ens, CINC E E' -> CINC E' E'' -> CINC E E''.\nunfold CINC in |- *; auto with zfc.\nQed.\n\n\nTheorem CINC_sound_left :\n forall E E' E'' : Ens, EQC E E' -> CINC E E'' -> CINC E' E''.\nsimple induction E''; unfold CINC in |- *; simpl in |- *;\n intros A f XR e X1 E0 i; apply X1.\napply CIN_sound_right with E'; auto with zfc.\nQed.\n\nTheorem CINC_sound_right :\n forall E E' E'' : Ens, EQC E' E'' -> CINC E E' -> CINC E E''.\nsimple induction E'; simple induction E''; unfold CINC in |- *; simpl in |- *;\n intros.\nelim (X2 E0); try assumption; intros.\nelim X1; intros XA XB; elim (XA x); intros.\nexists x0; apply EQC_tran with (e x); auto with zfc.\nQed.\n\n\n\n\n\nTheorem tout_vide_est_VideC :\n forall E : Ens, (forall E' : Ens, CIN E' E -> F) -> EQC E Vide.\n unfold Vide in |- *; simple induction E; simpl in |- *; intros A e X H;\n  split.\nintros; elim (H (e x)); auto with zfc.\nexists x; auto with zfc.\nsimple induction y.\nQed.\n\n\nTheorem Paire_sound_leftC :\n forall A A' B : Ens, EQC A A' -> EQC (Paire A B) (Paire A' B).\nunfold Paire in |- *.\nsimpl in |- *.\nintros; split.\nsimple induction x.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\n\nsimple induction y; simpl in |- *.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\nQed.\n\nTheorem Paire_sound_rightC :\n forall A B B' : Ens, EQC B B' -> EQC (Paire A B) (Paire A B').\nunfold Paire in |- *; simpl in |- *; intros; split.\nsimple induction x.\nexists true; auto with zfc.\nexists false; auto with zfc.\nsimple induction y.\nexists true; auto with zfc.\nexists false; auto with zfc.\nQed.\n\n\nTheorem CIN_Paire_left : forall E E' : Ens, CIN E (Paire E E').\nunfold Paire in |- *; simpl in |- *; exists true; simpl in |- *;\n auto with zfc.\nQed.\n\n",
                "context_tokens": 741,
                "proof_start_offset": 6311,
                "proof_end_offset": 6463,
                "proof": "Theorem CIN_Paire_right : forall E E' : Ens, CIN E' (Paire E E').\nProof.\nunfold Paire in |- *; simpl in |- *; exists false; simpl in |- *; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem CIN_Paire_right : forall E E' : Ens, CIN E' (Paire E E').\nunfold Same, Included in |- *; simpl in |- *; intros A' H' H'0; elim H'0; intros.\nexists x0; auto with zfc.\nQed.",
                    "Theorem CIN_Paire_right : forall E E' : Ens, CIN E' (Paire E E').\nunfold inc in |- *; simpl in |- *.\nintros; elim (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (HQed.",
                    "Theorem CIN_Paire_right : forall E E' : Ens, CIN E' (Paire E E').\nunfold Same, Included in |- *; simpl in |- *; intros A B C; elim H; intros.\nexists true; auto with zfc.\nQed.",
                    "Theorem CIN_Paire_right : forall E E' : Ens, CIN E' (Paire E E').\nunfold inc in |- *; simpl in |- *; intros A x y H; elim H; intros x0 H0 H1; elim H; intros x0 H1; elim H1; intros x0 H2; elim H1; intros x0; elim H1; intros x0; elim H1; intros x0 H2; elim H2; intros x0; elim H2; intros; elim H1; intros x0 H2; elim H2; intros; elim H3; intros; elim H4; intros; elim H4; intros; elim H4; intros; elim H4; intros; elim H4; intros; elim H4; intros; elim H4; intros; elim H4; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5;\n intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6;\n intros; elim H6; intros; elim HQed.",
                    "Theorem CIN_Paire_right : forall E E' : Ens, CIN E' (Paire E E').\nunfold inc in |- *; simpl in |- *; intros A H; elim (H (H (H x)); intros.\nexists x; auto with zfc.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Constructive.v",
                "context": " CINC in |- *; auto with zfc.\nQed.\n\nTheorem CINC_tran :\n forall E E' E'' : Ens, CINC E E' -> CINC E' E'' -> CINC E E''.\nunfold CINC in |- *; auto with zfc.\nQed.\n\n\nTheorem CINC_sound_left :\n forall E E' E'' : Ens, EQC E E' -> CINC E E'' -> CINC E' E''.\nsimple induction E''; unfold CINC in |- *; simpl in |- *;\n intros A f XR e X1 E0 i; apply X1.\napply CIN_sound_right with E'; auto with zfc.\nQed.\n\nTheorem CINC_sound_right :\n forall E E' E'' : Ens, EQC E' E'' -> CINC E E' -> CINC E E''.\nsimple induction E'; simple induction E''; unfold CINC in |- *; simpl in |- *;\n intros.\nelim (X2 E0); try assumption; intros.\nelim X1; intros XA XB; elim (XA x); intros.\nexists x0; apply EQC_tran with (e x); auto with zfc.\nQed.\n\n\n\n\n\nTheorem tout_vide_est_VideC :\n forall E : Ens, (forall E' : Ens, CIN E' E -> F) -> EQC E Vide.\n unfold Vide in |- *; simple induction E; simpl in |- *; intros A e X H;\n  split.\nintros; elim (H (e x)); auto with zfc.\nexists x; auto with zfc.\nsimple induction y.\nQed.\n\n\nTheorem Paire_sound_leftC :\n forall A A' B : Ens, EQC A A' -> EQC (Paire A B) (Paire A' B).\nunfold Paire in |- *.\nsimpl in |- *.\nintros; split.\nsimple induction x.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\n\nsimple induction y; simpl in |- *.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\nQed.\n\nTheorem Paire_sound_rightC :\n forall A B B' : Ens, EQC B B' -> EQC (Paire A B) (Paire A B').\nunfold Paire in |- *; simpl in |- *; intros; split.\nsimple induction x.\nexists true; auto with zfc.\nexists false; auto with zfc.\nsimple induction y.\nexists true; auto with zfc.\nexists false; auto with zfc.\nQed.\n\n\nTheorem CIN_Paire_left : forall E E' : Ens, CIN E (Paire E E').\nunfold Paire in |- *; simpl in |- *; exists true; simpl in |- *;\n auto with zfc.\nQed.\n\nTheorem CIN_Paire_right : forall E E' : Ens, CIN E' (Paire E E').\nunfold Paire in |- *; simpl in |- *; exists false; simpl in |- *;\n auto with zfc.\nQed.\n\nInductive sum_t (A B : Type) : Type :=\n  | inl_t : A -> sum_t A B\n  | inr_t : B -> sum_t A B.\nHint Resolve inl_t inr_t: zfc.\n\n",
                "context_tokens": 727,
                "proof_start_offset": 6591,
                "proof_end_offset": 6793,
                "proof": "Theorem Paire_CIN : forall E E' A : Ens, CIN A (Paire E E') -> sum_t (EQC A E) (EQC A E').\nProof.\nunfold Paire in |- *; simpl in |- *; simple induction 1; intros b; elim b; simpl in |- *; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Paire_CIN : forall E E' A : Ens, CIN A (Paire E E') -> sum_t (EQC A E) (EQC A E').\nunfold sum_t in |- *; intros A B f T H' H' H' H' H' H' H' H'' H'''' H''''' H'' H''''' H'''''''' H'''''''' H'''''''''' H''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Qed.",
                    "Theorem Paire_CIN : forall E E' A : Ens, CIN A (Paire E E') -> sum_t (EQC A E) (EQC A E').\nunfold sum_t, E' in |- *; simpl in |- *; intros A B f X.\nelim (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (Qed.",
                    "Theorem Paire_CIN : forall E E' A : Ens, CIN A (Paire E E') -> sum_t (EQC A E) (EQC A E').\nunfold sum_t; simpl in |- *; intros A B f; elim (H x); intros.\nexists x; auto with zfc.\nQed.",
                    "Theorem Paire_CIN : forall E E' A : Ens, CIN A (Paire E E') -> sum_t (EQC A E) (EQC A E').\nunfold sum_t in |- *; simpl in |- *; intros A B f T X Y; apply sum_t with A B; auto with zfc.\nQed.",
                    "Theorem Paire_CIN : forall E E' A : Ens, CIN A (Paire E E') -> sum_t (EQC A E) (EQC A E').\nunfold sum_t; simpl in |- *; intros A B f x y H0 x0 x0 x1 y1 y2; apply X1.\nunfold sum_t in |- *; intros A B f x0 x0 y0 y1 y1 y2; apply X1.\nexists x0; auto with zfc.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Constructive.v",
                "context": " Ens, EQC E E' -> CINC E E'' -> CINC E' E''.\nsimple induction E''; unfold CINC in |- *; simpl in |- *;\n intros A f XR e X1 E0 i; apply X1.\napply CIN_sound_right with E'; auto with zfc.\nQed.\n\nTheorem CINC_sound_right :\n forall E E' E'' : Ens, EQC E' E'' -> CINC E E' -> CINC E E''.\nsimple induction E'; simple induction E''; unfold CINC in |- *; simpl in |- *;\n intros.\nelim (X2 E0); try assumption; intros.\nelim X1; intros XA XB; elim (XA x); intros.\nexists x0; apply EQC_tran with (e x); auto with zfc.\nQed.\n\n\n\n\n\nTheorem tout_vide_est_VideC :\n forall E : Ens, (forall E' : Ens, CIN E' E -> F) -> EQC E Vide.\n unfold Vide in |- *; simple induction E; simpl in |- *; intros A e X H;\n  split.\nintros; elim (H (e x)); auto with zfc.\nexists x; auto with zfc.\nsimple induction y.\nQed.\n\n\nTheorem Paire_sound_leftC :\n forall A A' B : Ens, EQC A A' -> EQC (Paire A B) (Paire A' B).\nunfold Paire in |- *.\nsimpl in |- *.\nintros; split.\nsimple induction x.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\n\nsimple induction y; simpl in |- *.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\nQed.\n\nTheorem Paire_sound_rightC :\n forall A B B' : Ens, EQC B B' -> EQC (Paire A B) (Paire A B').\nunfold Paire in |- *; simpl in |- *; intros; split.\nsimple induction x.\nexists true; auto with zfc.\nexists false; auto with zfc.\nsimple induction y.\nexists true; auto with zfc.\nexists false; auto with zfc.\nQed.\n\n\nTheorem CIN_Paire_left : forall E E' : Ens, CIN E (Paire E E').\nunfold Paire in |- *; simpl in |- *; exists true; simpl in |- *;\n auto with zfc.\nQed.\n\nTheorem CIN_Paire_right : forall E E' : Ens, CIN E' (Paire E E').\nunfold Paire in |- *; simpl in |- *; exists false; simpl in |- *;\n auto with zfc.\nQed.\n\nInductive sum_t (A B : Type) : Type :=\n  | inl_t : A -> sum_t A B\n  | inr_t : B -> sum_t A B.\nHint Resolve inl_t inr_t: zfc.\n\nTheorem Paire_CIN :\n forall E E' A : Ens, CIN A (Paire E E') -> sum_t (EQC A E) (EQC A E').\nunfold Paire in |- *; simpl in |- *; simple induction 1; intros b; elim b;\n simpl in |- *; auto with zfc.\nQed.\n\nHint Resolve CIN_Paire_left CIN_Paire_right: zfc.\n\n(* Singleton *)\n\n",
                "context_tokens": 749,
                "proof_start_offset": 6863,
                "proof_end_offset": 6954,
                "proof": "Theorem CIN_Sing : forall E : Ens, CIN E (Sing E).\nProof.\nunfold Sing in |- *; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem CIN_Sing : forall E : Ens, CIN E (Sing E).\nunfold inter in |- *; simpl in |- *; intros A B; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; intros; elim b; elim b; intros; elim b; intros; elim b;\n intros; elim b; intros; elim b; intros; elim b; intros; elim b; elim b; intros; elim b;\n intros; elim b; intros; elim b; elim b; intros; elim b; intros; elim b;\n intros; elim b; intros; elim b; elim b; intros; elim b; intros; elim b;\n intros; elim b; intros; elim b; introsQed.",
                    "Theorem CIN_Sing : forall E : Ens, CIN E (Sing E).\nunfold not in |- *; intros A B; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; intros; elim b; intros; elim b; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; elim b; intros; elim b; intros; elim b;\n intros; elim b; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; elim b; intros; elim b; intros; elim b; intros;Qed.",
                    "Theorem CIN_Sing : forall E : Ens, CIN E (Sing E).\nunfold In in |- *; simpl in |- *; intros A B; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; intros; elim b; intros; elim b; elim b; intros; elim b; intros; elim b;\n intros; elim b; intros; elim b; intros; elim b; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; intros; elim b; intros; elim b; elim b; intros; elim b; intros; elim b;\n intros;Qed.",
                    "Theorem CIN_Sing : forall E : Ens, CIN E (Sing E).\nunfold In in |- *; simpl in |- *; intros A; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; intros; elim b; intros; elim b; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; intros; elim b; intros; elim b; intros; elim b; elim b; intros; elim b; intros; elim b;\n intros; elim b; elim b;Qed.",
                    "Theorem CIN_Sing : forall E : Ens, CIN E (Sing E).\nunfold inter in |- *; simpl in |- *; intros a b; elim b; intros.\nexists b; auto with zfc.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Constructive.v",
                "context": "1 E0 i; apply X1.\napply CIN_sound_right with E'; auto with zfc.\nQed.\n\nTheorem CINC_sound_right :\n forall E E' E'' : Ens, EQC E' E'' -> CINC E E' -> CINC E E''.\nsimple induction E'; simple induction E''; unfold CINC in |- *; simpl in |- *;\n intros.\nelim (X2 E0); try assumption; intros.\nelim X1; intros XA XB; elim (XA x); intros.\nexists x0; apply EQC_tran with (e x); auto with zfc.\nQed.\n\n\n\n\n\nTheorem tout_vide_est_VideC :\n forall E : Ens, (forall E' : Ens, CIN E' E -> F) -> EQC E Vide.\n unfold Vide in |- *; simple induction E; simpl in |- *; intros A e X H;\n  split.\nintros; elim (H (e x)); auto with zfc.\nexists x; auto with zfc.\nsimple induction y.\nQed.\n\n\nTheorem Paire_sound_leftC :\n forall A A' B : Ens, EQC A A' -> EQC (Paire A B) (Paire A' B).\nunfold Paire in |- *.\nsimpl in |- *.\nintros; split.\nsimple induction x.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\n\nsimple induction y; simpl in |- *.\nexists true; auto with zfc.\n\nexists false; auto with zfc.\nQed.\n\nTheorem Paire_sound_rightC :\n forall A B B' : Ens, EQC B B' -> EQC (Paire A B) (Paire A B').\nunfold Paire in |- *; simpl in |- *; intros; split.\nsimple induction x.\nexists true; auto with zfc.\nexists false; auto with zfc.\nsimple induction y.\nexists true; auto with zfc.\nexists false; auto with zfc.\nQed.\n\n\nTheorem CIN_Paire_left : forall E E' : Ens, CIN E (Paire E E').\nunfold Paire in |- *; simpl in |- *; exists true; simpl in |- *;\n auto with zfc.\nQed.\n\nTheorem CIN_Paire_right : forall E E' : Ens, CIN E' (Paire E E').\nunfold Paire in |- *; simpl in |- *; exists false; simpl in |- *;\n auto with zfc.\nQed.\n\nInductive sum_t (A B : Type) : Type :=\n  | inl_t : A -> sum_t A B\n  | inr_t : B -> sum_t A B.\nHint Resolve inl_t inr_t: zfc.\n\nTheorem Paire_CIN :\n forall E E' A : Ens, CIN A (Paire E E') -> sum_t (EQC A E) (EQC A E').\nunfold Paire in |- *; simpl in |- *; simple induction 1; intros b; elim b;\n simpl in |- *; auto with zfc.\nQed.\n\nHint Resolve CIN_Paire_left CIN_Paire_right: zfc.\n\n(* Singleton *)\n\nTheorem CIN_Sing : forall E : Ens, CIN E (Sing E).\nunfold Sing in |- *; auto with zfc.\nQed.\n\n",
                "context_tokens": 739,
                "proof_start_offset": 6956,
                "proof_end_offset": 7108,
                "proof": "Theorem CIN_Sing_EQ : forall E E' : Ens, CIN E (Sing E') -> EQC E E'.\nProof.\nunfold Sing in |- *; intros E E' H; elim (Paire_CIN E' E' E); auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem CIN_Sing_EQ : forall E E' : Ens, CIN E (Sing E') -> EQC E E'.\nunfold cart in |- *; simpl in |- *.\nintros; elim b; intros b; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; elim b; intros; elim b;\n intros; elim b; intros; elim b; intros; elim b; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; intros; elim b; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; intros; elim b;Qed.",
                    "Theorem CIN_Sing_EQ : forall E E' : Ens, CIN E (Sing E') -> EQC E E'.\nunfold union in |- *; simpl in |- *; intros A B H; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; elim b; intros; elim b; intros; elim b; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; elim b; intros; elim b; intros; elim b; elim b; intros; elim b; intros; elim b;\n intros; elim b; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; elim b; intros; elim b; intros; elim b; elim b; intros; elim b;\n intros; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros;Qed.",
                    "Theorem CIN_Sing_EQ : forall E E' : Ens, CIN E (Sing E') -> EQC E E'.\nunfold inc in |- *; simpl in |- *; intros A; elim b; intros; elim b; intros;\n [ elim b; simpl in |- *; auto with zfc | idtac ].\nQed.",
                    "Theorem CIN_Sing_EQ : forall E E' : Ens, CIN E (Sing E') -> EQC E E'.\nunfold inc in |- *; simpl in |- *; intros; elim b; intros b; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; intros; elim b; intros; elim b; intros; elim b; elim b; intros; elim b; intros; elim b; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b;Qed.",
                    "Theorem CIN_Sing_EQ : forall E E' : Ens, CIN E (Sing E') -> EQC E E'.\nunfold inc in |- *; simpl in |- *; intros A B; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; intros; elim b; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; elim b; intros; elim b; intros; elim b; intros; elim b; elim b; intros; elim b; intros; elim b; intros; elim b;\n intros; elim b; intros; elim b; intros; elim b; intros; elim b; intros; elim b; elim b; intros; elim b; intros; elimQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Omega.v",
                "context": "(* This program is free software; you can redistribute it and/or      *)\n(* modify it under the terms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(* The set of natural numbers  *)\n\nRequire Import Sets.\nRequire Import Axioms.\n\nDefinition Class_succ (E : Ens) := Union (Paire E (Sing E)).\n\n(*\nInductive Ord : Ens -> Prop :=\n  Oo : (Ord Vide)\n| So : (E:Ens)(Ord E)->(Ord (Class_succ E))\n| Lo : (E:Ens)((e:Ens)(IN e E)->(Ord e))->(Ord (Union E))\n| Eo : (E,E':Ens)(Ord E)->(EQ E E')->(Ord E').\n\nHints Resolve Oo So Lo : zfc.\n*)\n\n\n",
                "context_tokens": 351,
                "proof_start_offset": 1480,
                "proof_end_offset": 1579,
                "proof": "Definition Nat : nat -> Ens.\nProof.\nsimple induction 1; intros.\nexact Vide.\nexact (Class_succ X).\nDefined.",
                "end_command": "Defined.",
                "generated_proofs": [
                    "Definition Nat : nat -> Ens.\n\nDefinition Nat : Ens := Union (fun x : Ens => In x x) (at level 200, right associativity).\n\nDefinition Nat : Ens := Union (fun x : Ens => In x) (at level 200, right associativity).\n\nDefinition Nat : Ens := Union (fun x : Ens => In x) (at level 200, right associativity).\n\nDefinition Nat : Ens := Union (fun x : Ens => In x) (at level 200).\n\nDefinition Nat : Ens := Union (fun x : Ens => In x) (at level 200).\n\nDefinition Nat : Ens := Union (fun x : Ens => In x) (at level 200).\n\nDefinition Nat : Ens := Union (fun x : Ens => In x) (at level 200).\n\nDefinition Nat : Ens := Union (fun x : Ens => In x) (at level 200).\n\nDefinition Nat : Ens := Union (fun x : Ens => In x) (at level 200).\n\nDefinition Nat : Ens := Union (fun x : Ens => In x) (at level 200).\n\nDefinition Nat : Ens := Union (fun x : Ens => In x) (at level 200).\n\nDefinition NatDefined.",
                    "Definition Nat : nat -> Ens.\n\nLemma Nat2_succ :\n forall (E:Type) (x y:R),\n Equal (singleton x) (singleton x) (singleton x) (singleton x).\nProof.\nintros E; unfold Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succ, Nat2_succDefined.",
                    "Definition Nat : nat -> Ens.\nDefinition Nat (x : A) :=\n  (x : A)\n  (at level 70, no associativity) : set_scope.\n\nDefinition Nat (x : A) : Prop :=\n  (x : A)\n  (at level 70, no associativity) : set_scope.\n\nDefinition Nat (x : A) : Prop :=\n  (x : A)\n  (at level 70, no associativity) : set_scope.\n\nDefinition Nat (x : A) : Prop :=\n  (x : A)\n  (at level 70, no associativity) : set_scope.\n\nDefinition Nat_0 (x : A) : Prop :=\n  (x : A)\n  (at level 70, no associativity) : set_scope.\n\nDefinition Nat_0 (x : A) : Prop :=\n  (x : A)\n  (at level 70, no associativity) : set_scope.\n\nDefinition Nat_0 (x : A) : Prop :=\n  (x : A)\n  (at level 70, no associativity) : set_scope.\n\nDefinition Nat_0 (x : A) : Prop :=\n  (x : A)\n  (at level 70, no associativity)Defined.",
                    "Definition Nat : nat -> Ens.\n\nLemma Nat_pred : forall (E : Ens) (x y : Z) (x y : Z),\n Nat_pred x y ->\n Nat_pred x y -> Nat_pred x y -> Nat_pred x y.\nintros E; elim E; intros E; elim E; intros E; elim E; intros E; elim E; intros E; elim E; intros E; elim E; intros E; elim E; intros E; elim E; intros E; elim E; intros E; elim E; intros E; elim E; intros E; elim E; intros E; elim E; intros E; elim E; intros E; elim E; intros; elim E; intros E; elim E; intros E; elim E; intros; elim E; intros E; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E;\n intros E; elim E; intros; elim E; intros; elim E; intros; elim EDefined.",
                    "Definition Nat : nat -> Ens.\n\nDefinition Nat : Ens := Nat.pred (nat * nat)%type.\n\nDefinition Nat : Ens := Nat.pred (nat * nat)%type.\n\nDefinition Nat : Ens := Nat.pred (nat * nat)%type.\n\nDefinition Nat_nat (n : nat) := Nat.pred (nat * nat)%type.\n\nDefinition Nat_nat (n : nat) := Nat.pred (nat * nat)%type.\nDefinition Nat_nat (n : nat) := Nat.pred (nat * nat)%type.\nDefinition Nat_nat (n : nat) := Nat.pred (nat * nat)%type.\nDefinition Nat_nat (n : nat) := Nat.pred (nat * nat)%type.\nDefinition Nat_nat (n : nat) := Nat.pred (nat * nat)%type.\nDefinition Nat_nat (n : nat) := Nat.pred (nat * nat)%type.\nDefinition Nat_nat (n : nat) := Nat.pred (nat * nat)%type.\nDefinition Nat_nat (n : nat) := Nat.pred (nat * nat)%type.\nDefinition Nat_nat (n : nat) := Nat.predDefined."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Omega.v",
                "context": "(* This program is free software; you can redistribute it and/or      *)\n(* modify it under the terms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(* The set of natural numbers  *)\n\nRequire Import Sets.\nRequire Import Axioms.\n\nDefinition Class_succ (E : Ens) := Union (Paire E (Sing E)).\n\n(*\nInductive Ord : Ens -> Prop :=\n  Oo : (Ord Vide)\n| So : (E:Ens)(Ord E)->(Ord (Class_succ E))\n| Lo : (E:Ens)((e:Ens)(IN e E)->(Ord e))->(Ord (Union E))\n| Eo : (E,E':Ens)(Ord E)->(EQ E E')->(Ord E').\n\nHints Resolve Oo So Lo : zfc.\n*)\n\n\nDefinition Nat : nat -> Ens.\nsimple induction 1; intros.\nexact Vide.\nexact (Class_succ X).\nDefined.\n\n(*\nTheorem Nat_Ord : (n:nat)(Ord (Nat n)).\nInduction n; Simpl; Auto with zfc.\nSave.\n*)\n\nDefinition Omega : Ens := sup nat Nat.\n\n",
                "context_tokens": 427,
                "proof_start_offset": 1709,
                "proof_end_offset": 1881,
                "proof": "Theorem IN_Class_succ : forall E : Ens, IN E (Class_succ E).\nProof.\nintros E; unfold Class_succ in |- *; unfold Sing in |- *; apply IN_Union with (Paire E E); auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem IN_Class_succ : forall E : Ens, IN E (Class_succ E).\nintros E; elim E; elim E; auto with zfc.\nQed.",
                    "Theorem IN_Class_succ : forall E : Ens, IN E (Class_succ E).\nred in |- *.\nauto with zfc.\nQed.",
                    "Theorem IN_Class_succ : forall E : Ens, IN E (Class_succ E).\nintros E; elim E; auto with zfc.\nQed.",
                    "Theorem IN_Class_succ : forall E : Ens, IN E (Class_succ E).\nintros E; elim E; auto with zfc.\nQed.",
                    "Theorem IN_Class_succ : forall E : Ens, IN E (Class_succ E).\nintros E; elim E; elim E; auto with zfc.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Omega.v",
                "context": "(* This program is free software; you can redistribute it and/or      *)\n(* modify it under the terms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(* The set of natural numbers  *)\n\nRequire Import Sets.\nRequire Import Axioms.\n\nDefinition Class_succ (E : Ens) := Union (Paire E (Sing E)).\n\n(*\nInductive Ord : Ens -> Prop :=\n  Oo : (Ord Vide)\n| So : (E:Ens)(Ord E)->(Ord (Class_succ E))\n| Lo : (E:Ens)((e:Ens)(IN e E)->(Ord e))->(Ord (Union E))\n| Eo : (E,E':Ens)(Ord E)->(EQ E E')->(Ord E').\n\nHints Resolve Oo So Lo : zfc.\n*)\n\n\nDefinition Nat : nat -> Ens.\nsimple induction 1; intros.\nexact Vide.\nexact (Class_succ X).\nDefined.\n\n(*\nTheorem Nat_Ord : (n:nat)(Ord (Nat n)).\nInduction n; Simpl; Auto with zfc.\nSave.\n*)\n\nDefinition Omega : Ens := sup nat Nat.\n\nTheorem IN_Class_succ : forall E : Ens, IN E (Class_succ E).\nintros E; unfold Class_succ in |- *; unfold Sing in |- *;\n apply IN_Union with (Paire E E); auto with zfc.\nQed.\n\n\n",
                "context_tokens": 484,
                "proof_start_offset": 1884,
                "proof_end_offset": 2044,
                "proof": "Theorem INC_Class_succ : forall E : Ens, INC E (Class_succ E).\nProof.\nunfold INC in |- *; unfold Class_succ in |- *.\nintros.\napply IN_Union with E; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem INC_Class_succ : forall E : Ens, INC E (Class_succ E).\nintros E; unfold not in |- *; intros E; elim E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clear E; clearQed.",
                    "Theorem INC_Class_succ : forall E : Ens, INC E (Class_succ E).\nintros E; unfold not in |- *; intros E; elim E; clear E; clear E; clear E; intros E; elim E; clear E; clear E; intros E; elim E; clear E; intros E; elim E; clear E; intros E; elim E; clear E; intros E; elim E; clear E; intros E; elim E; clear E; intros E; elim E; clear E; intros E; elim E; clear E; intros E; elim E; clear E; intros E; elim E; clear E; intros E; elim E; clear E; intros E; elim E; clear E; intros E; elim E; clear E; intros E; elim E; clear E; intros E; elim E; clear E; intros E; elim E; clear E; intros E; elim E; clear E; intros E; elim E; clear E; intros E; elim E; clear E; intros E; elim E; clear E; intros E; elim E; clear E; intros; elim E; clear E; intros; elim E; clear E; intros E; elim E; clear E; intros; elim E; clear E; intros; elim E; clear EQed.",
                    "Theorem INC_Class_succ : forall E : Ens, INC E (Class_succ E).\nintros E; unfold not in |- *; unfold not in |- *; intros; elim H; intros.\nexact (H x); auto with zfc.\nQed.",
                    "Theorem INC_Class_succ : forall E : Ens, INC E (Class_succ E).\nintros E; unfold not in |- *; unfold not in |- *; intros; unfold not in |- *; unfold not in |- *; intros; unfold not in |- *; unfold not in |- *; unfold not in |- *; intros; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfoldQed.",
                    "Theorem INC_Class_succ : forall E : Ens, INC E (Class_succ E).\nintros E; unfold not in |- *; intros E; elim E; intros E; elim E; intros E; elim E; intros E; elim E; intros E; elim E; intros E; elim E; intros E; elim E; intros E; elim E; intros; elim E; intros E; elim E; intros E; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E;\n intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E;\n intros; elim E; intros; elim E; intros; elim E; intros; elim E; intros; elim E; clear E; intros; elim E;\n intros; elim E; intros; elim E; intros; elim E; introsQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Omega.v",
                "context": "(* This program is free software; you can redistribute it and/or      *)\n(* modify it under the terms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(* The set of natural numbers  *)\n\nRequire Import Sets.\nRequire Import Axioms.\n\nDefinition Class_succ (E : Ens) := Union (Paire E (Sing E)).\n\n(*\nInductive Ord : Ens -> Prop :=\n  Oo : (Ord Vide)\n| So : (E:Ens)(Ord E)->(Ord (Class_succ E))\n| Lo : (E:Ens)((e:Ens)(IN e E)->(Ord e))->(Ord (Union E))\n| Eo : (E,E':Ens)(Ord E)->(EQ E E')->(Ord E').\n\nHints Resolve Oo So Lo : zfc.\n*)\n\n\nDefinition Nat : nat -> Ens.\nsimple induction 1; intros.\nexact Vide.\nexact (Class_succ X).\nDefined.\n\n(*\nTheorem Nat_Ord : (n:nat)(Ord (Nat n)).\nInduction n; Simpl; Auto with zfc.\nSave.\n*)\n\nDefinition Omega : Ens := sup nat Nat.\n\nTheorem IN_Class_succ : forall E : Ens, IN E (Class_succ E).\nintros E; unfold Class_succ in |- *; unfold Sing in |- *;\n apply IN_Union with (Paire E E); auto with zfc.\nQed.\n\n\nTheorem INC_Class_succ : forall E : Ens, INC E (Class_succ E).\nunfold INC in |- *; unfold Class_succ in |- *.\nintros.\napply IN_Union with E; auto with zfc.\nQed.\n\nHint Resolve IN_Class_succ INC_Class_succ: zfc.\n\n\n",
                "context_tokens": 554,
                "proof_start_offset": 2096,
                "proof_end_offset": 2507,
                "proof": "Theorem IN_Class_succ_or : forall E E' : Ens, IN E' (Class_succ E) -> EQ E E' \\/ IN E' E.\nProof.\nintros E E' i.\nunfold Class_succ in i.\nelim (Union_IN (Paire E (Sing E)) E' i).\nintros E1; simple induction 1; intros i1 i2.\nelim (Paire_IN E (Sing E) E1 i1).\nintros; right; apply IN_sound_right with E1; auto with zfc.\nintros; left; cut (IN E' (Sing E)).\nauto with zfc.\napply IN_sound_right with E1; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem IN_Class_succ_or : forall E E' : Ens, IN E' (Class_succ E) -> EQ E E' \\/ IN E' E.\nHint Unfold inc in |- *; unfold iff in |- *; unfold eq in |- *;\n unfold eq in |- *; unfold eq in |- *;\n unfold eq in |- *; unfold eq in |- *;\n unfold eq in |- *;\n unfold eq in |- *; unfold eq in |- *;\n unfold eq in |- *;\n unfold eq in |- *; unfold eq in |- *;\n unfold eq in |- *;\n unfold eq in |- *;\n unfold eq in |- *; unfold eq in |- *;\n unfold eq in |- *;\n unfold eq in |- *;\n unfold eq in |- *;\n unfold eq in |- *; unfold eq in |- *;\n unfold eq in |- *;\n unfold eq in |- *; unfold eq in |- *;\n unfold eq in |- *;\n unfold eq in |- *; unfold eq in |- *;\n unfold eq in |- *;\n unfold eq in |- *; unfold eq in |- *;\n unfold eq in |- *;\n unfold eq in |- *; unfold eq in |- *;\n unfold eq in |- *;\n unfold eq in |- *; unfold eq in |- *;\n unfold eq in |- *; unfold eq in |- *;\n unfold eq in |- *; unfold eq in |- *;\n unfold eq in |- *; unfold eq in |- *;\n unfold eq in |- *;\n unfold eq in |- *; unfoldQed.",
                    "Theorem IN_Class_succ_or : forall E E' : Ens, IN E' (Class_succ E) -> EQ E E' \\/ IN E' E.\n\nTheorem IN_succ_r : forall E' : Ens, IN E' E' (succ E').\nintros E'; unfold IN'.\nintros E' E'; unfold IN'.\napply IN_Union with (P := fun x => ~ In x); auto with zfc.\nQed.",
                    "Theorem IN_Class_succ_or : forall E E' : Ens, IN E' (Class_succ E) -> EQ E E' \\/ IN E' E.\n\nTheorem IN_inv_r_r : forall E' : Ens, IN E' (rel_succ E) E'.\nintros E E; unfold IN' in |- *; unfold not in |- *; intros.\napply IN_Union with (P := fun x => ~ In x); auto with zfc.\nQed.",
                    "Theorem IN_Class_succ_or : forall E E' : Ens, IN E' (Class_succ E) -> EQ E E' \\/ IN E' E.\n\nTheorem IN_th_succ : forall E E : Ens, IN E' E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => IN E' (fun x => INQed.",
                    "Theorem IN_Class_succ_or : forall E E' : Ens, IN E' (Class_succ E) -> EQ E E' \\/ IN E' E.\nHint Resolve IN_rel_succ_r INC.\n\nTheorem IN_succ_r_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_invQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Omega.v",
                "context": "\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(* The set of natural numbers  *)\n\nRequire Import Sets.\nRequire Import Axioms.\n\nDefinition Class_succ (E : Ens) := Union (Paire E (Sing E)).\n\n(*\nInductive Ord : Ens -> Prop :=\n  Oo : (Ord Vide)\n| So : (E:Ens)(Ord E)->(Ord (Class_succ E))\n| Lo : (E:Ens)((e:Ens)(IN e E)->(Ord e))->(Ord (Union E))\n| Eo : (E,E':Ens)(Ord E)->(EQ E E')->(Ord E').\n\nHints Resolve Oo So Lo : zfc.\n*)\n\n\nDefinition Nat : nat -> Ens.\nsimple induction 1; intros.\nexact Vide.\nexact (Class_succ X).\nDefined.\n\n(*\nTheorem Nat_Ord : (n:nat)(Ord (Nat n)).\nInduction n; Simpl; Auto with zfc.\nSave.\n*)\n\nDefinition Omega : Ens := sup nat Nat.\n\nTheorem IN_Class_succ : forall E : Ens, IN E (Class_succ E).\nintros E; unfold Class_succ in |- *; unfold Sing in |- *;\n apply IN_Union with (Paire E E); auto with zfc.\nQed.\n\n\nTheorem INC_Class_succ : forall E : Ens, INC E (Class_succ E).\nunfold INC in |- *; unfold Class_succ in |- *.\nintros.\napply IN_Union with E; auto with zfc.\nQed.\n\nHint Resolve IN_Class_succ INC_Class_succ: zfc.\n\n\nTheorem IN_Class_succ_or :\n forall E E' : Ens, IN E' (Class_succ E) -> EQ E E' \\/ IN E' E.\nintros E E' i.\nunfold Class_succ in i.\nelim (Union_IN (Paire E (Sing E)) E' i).\nintros E1; simple induction 1; intros i1 i2.\nelim (Paire_IN E (Sing E) E1 i1).\nintros; right; apply IN_sound_right with E1; auto with zfc.\nintros; left; cut (IN E' (Sing E)).\nauto with zfc.\napply IN_sound_right with E1; auto with zfc.\n\nQed.\n\n\n",
                "context_tokens": 684,
                "proof_start_offset": 2510,
                "proof_end_offset": 2819,
                "proof": "Theorem E_not_IN_E : forall E : Ens, IN E E -> F.\nProof.\nsimple induction E; intros A f r i.\ncut False.\nsimple induction 1.\nelim (IN_EXType (sup A f) (sup A f) i); intros a e.\nsimpl in a.\nchange (EQ (sup A f) (f a)) in e.\nelim (r a).\napply IN_sound_right with (sup A f); auto with zfc.\nexists a; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem E_not_IN_E : forall E : Ens, IN E E -> F.\nintros E E' i.\nunfold not in |- *.\nintro.\napply IN_Union with (A:=A) (B:=A) (B:=A) (B:=A) (B:=A) (B:=B) (B:=A) (B:=B) (B:=A) (B:=B) (B:=B) (B:=B) (B:=A) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=B) (B:=BQed.",
                    "Theorem E_not_IN_E : forall E : Ens, IN E E -> F.\nintros E F H; unfold not in |- *; intros.\nelim (classic (exists x : Ens, IN E (couple x x)) (singleton x)).\nintros H; elim H; intros i2 i3; elim i3; intros i3 i4 i4 i5 i5 i6 i6 i6 i6 i6 i6 i7 i8 i7 i9 i9 i11 i12 i12 i12 i12 i13 i13 i13 i13 i13 i13 i13 i13 i13 i14 i14 i13 i13 i14 i13 i14 i13 i13 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14Qed.",
                    "Theorem E_not_IN_E : forall E : Ens, IN E E -> F.\nintros E' x; unfold not in |- *; intros; elim (H x); intros i2 i3.\nelim (classic (exists x : Ens, IN E' (couple x x0)) (couple x0)); intros i3 i4 i4 i5 i6 i6 i6 i6 i6 i6 i7 i7 i7 i7 i9 i11 i12 i12 i13 i13 i14 i13 i14 i13 i13 i13 i14 i13 i13 i13 i13 i13 i13 i14 i14 i14 i13 i14 i14 i13 i13 i14 i14 i14 i14 i14 i14 i14 i14 i13 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 iQed.",
                    "Theorem E_not_IN_E : forall E : Ens, IN E E -> F.\nintros E' E; red in |- *; intros; elim i; intros i2 i3.\nelim (classic (exists x : Ens, In x (couple x x0)) (couple x x1)) (couple x1)).\nintros H; elim i; intros i3 i4 i5 i5 i5 i6 i7 i7 i7 i9 i9 i10 i10 i12 i13 i13 i13 i13 i13 i14 i14 i14 i13 i13 i13 i14 i14 i14 i14 i13 i14 i14 i14 i14 i14 i14 i14 i13 i14 i14 i14 i13 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14 i14Qed.",
                    "Theorem E_not_IN_E : forall E : Ens, IN E E -> F.\nintros E H; unfold not in |- *; unfold not in |- *; intros; unfold not in |- *; unfold not in |- *; intros; unfold not in |- *; unfold not in |- *; unfold not in |- *; intros; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in |- *; unfold not in_in in |- *; unfold not in |- *; unfold not in |- *; unfold not in_in in |- *; unfold not in_dom in |- *; unfold not in |- *; unfold not in_dom inQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Omega.v",
                "context": "Y; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(* The set of natural numbers  *)\n\nRequire Import Sets.\nRequire Import Axioms.\n\nDefinition Class_succ (E : Ens) := Union (Paire E (Sing E)).\n\n(*\nInductive Ord : Ens -> Prop :=\n  Oo : (Ord Vide)\n| So : (E:Ens)(Ord E)->(Ord (Class_succ E))\n| Lo : (E:Ens)((e:Ens)(IN e E)->(Ord e))->(Ord (Union E))\n| Eo : (E,E':Ens)(Ord E)->(EQ E E')->(Ord E').\n\nHints Resolve Oo So Lo : zfc.\n*)\n\n\nDefinition Nat : nat -> Ens.\nsimple induction 1; intros.\nexact Vide.\nexact (Class_succ X).\nDefined.\n\n(*\nTheorem Nat_Ord : (n:nat)(Ord (Nat n)).\nInduction n; Simpl; Auto with zfc.\nSave.\n*)\n\nDefinition Omega : Ens := sup nat Nat.\n\nTheorem IN_Class_succ : forall E : Ens, IN E (Class_succ E).\nintros E; unfold Class_succ in |- *; unfold Sing in |- *;\n apply IN_Union with (Paire E E); auto with zfc.\nQed.\n\n\nTheorem INC_Class_succ : forall E : Ens, INC E (Class_succ E).\nunfold INC in |- *; unfold Class_succ in |- *.\nintros.\napply IN_Union with E; auto with zfc.\nQed.\n\nHint Resolve IN_Class_succ INC_Class_succ: zfc.\n\n\nTheorem IN_Class_succ_or :\n forall E E' : Ens, IN E' (Class_succ E) -> EQ E E' \\/ IN E' E.\nintros E E' i.\nunfold Class_succ in i.\nelim (Union_IN (Paire E (Sing E)) E' i).\nintros E1; simple induction 1; intros i1 i2.\nelim (Paire_IN E (Sing E) E1 i1).\nintros; right; apply IN_sound_right with E1; auto with zfc.\nintros; left; cut (IN E' (Sing E)).\nauto with zfc.\napply IN_sound_right with E1; auto with zfc.\n\nQed.\n\n\nTheorem E_not_IN_E : forall E : Ens, IN E E -> F.\nsimple induction E; intros A f r i.\ncut False.\nsimple induction 1.\nelim (IN_EXType (sup A f) (sup A f) i); intros a e.\n\nsimpl in a.\nchange (EQ (sup A f) (f a)) in e.\nelim (r a).\napply IN_sound_right with (sup A f); auto with zfc.\nexists a; auto with zfc.\nQed.\n\n\n",
                "context_tokens": 744,
                "proof_start_offset": 2822,
                "proof_end_offset": 2931,
                "proof": "Theorem Nat_IN_Omega : forall n : nat, IN (Nat n) Omega.\nProof.\nintros; simpl in |- *; exists n; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Nat_IN_Omega : forall n : nat, IN (Nat n) Omega.\nunfold not in |- *.\nintros.\nelim (classic (exists x : nat, In x x) (f x) i).\nintros.\napply IN_sound with (P := fun x : nat => ~ In x (f x) (f x)) i); auto with zfc.\nQed.",
                    "Theorem Nat_IN_Omega : forall n : nat, IN (Nat n) Omega.\nintros n H; unfold not in |- *; auto with zfc.\nQed.",
                    "Theorem Nat_IN_Omega : forall n : nat, IN (Nat n) Omega.\nintros n H; unfold not in |- *; intros.\nelim (H a); auto with zfc.\nQed.",
                    "Theorem Nat_IN_Omega : forall n : nat, IN (Nat n) Omega.\nintros n H.\napply\n (Build_succ_l (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (Build_succ (P (Build_succQed.",
                    "Theorem Nat_IN_Omega : forall n : nat, IN (Nat n) Omega.\nintros n H; unfold not in |- *; auto with zfc.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Omega.v",
                "context": " License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(* The set of natural numbers  *)\n\nRequire Import Sets.\nRequire Import Axioms.\n\nDefinition Class_succ (E : Ens) := Union (Paire E (Sing E)).\n\n(*\nInductive Ord : Ens -> Prop :=\n  Oo : (Ord Vide)\n| So : (E:Ens)(Ord E)->(Ord (Class_succ E))\n| Lo : (E:Ens)((e:Ens)(IN e E)->(Ord e))->(Ord (Union E))\n| Eo : (E,E':Ens)(Ord E)->(EQ E E')->(Ord E').\n\nHints Resolve Oo So Lo : zfc.\n*)\n\n\nDefinition Nat : nat -> Ens.\nsimple induction 1; intros.\nexact Vide.\nexact (Class_succ X).\nDefined.\n\n(*\nTheorem Nat_Ord : (n:nat)(Ord (Nat n)).\nInduction n; Simpl; Auto with zfc.\nSave.\n*)\n\nDefinition Omega : Ens := sup nat Nat.\n\nTheorem IN_Class_succ : forall E : Ens, IN E (Class_succ E).\nintros E; unfold Class_succ in |- *; unfold Sing in |- *;\n apply IN_Union with (Paire E E); auto with zfc.\nQed.\n\n\nTheorem INC_Class_succ : forall E : Ens, INC E (Class_succ E).\nunfold INC in |- *; unfold Class_succ in |- *.\nintros.\napply IN_Union with E; auto with zfc.\nQed.\n\nHint Resolve IN_Class_succ INC_Class_succ: zfc.\n\n\nTheorem IN_Class_succ_or :\n forall E E' : Ens, IN E' (Class_succ E) -> EQ E E' \\/ IN E' E.\nintros E E' i.\nunfold Class_succ in i.\nelim (Union_IN (Paire E (Sing E)) E' i).\nintros E1; simple induction 1; intros i1 i2.\nelim (Paire_IN E (Sing E) E1 i1).\nintros; right; apply IN_sound_right with E1; auto with zfc.\nintros; left; cut (IN E' (Sing E)).\nauto with zfc.\napply IN_sound_right with E1; auto with zfc.\n\nQed.\n\n\nTheorem E_not_IN_E : forall E : Ens, IN E E -> F.\nsimple induction E; intros A f r i.\ncut False.\nsimple induction 1.\nelim (IN_EXType (sup A f) (sup A f) i); intros a e.\n\nsimpl in a.\nchange (EQ (sup A f) (f a)) in e.\nelim (r a).\napply IN_sound_right with (sup A f); auto with zfc.\nexists a; auto with zfc.\nQed.\n\n\nTheorem Nat_IN_Omega : forall n : nat, IN (Nat n) Omega.\nintros; simpl in |- *; exists n; auto with zfc.\nQed.\nHint Resolve Nat_IN_Omega: zfc.\n\n\n",
                "context_tokens": 734,
                "proof_start_offset": 2966,
                "proof_end_offset": 3139,
                "proof": "Theorem IN_Omega_EXType : forall E : Ens, IN E Omega -> EXType _ (fun n : nat => EQ (Nat n) E).\nProof.\nsimpl in |- *; simple induction 1.\nintros n e.\nexists n; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem IN_Omega_EXType : forall E : Ens, IN E Omega -> EXType _ (fun n : nat => EQ (Nat n) E).\nintros E; unfold not in |- *; intros.\nelim (classic (exists x : nat, x = x /\\ x = x) (H x); auto with zfc.\nQed.",
                    "Theorem IN_Omega_EXType : forall E : Ens, IN E Omega -> EXType _ (fun n : nat => EQ (Nat n) E).\nintros E; red in |- *.\nintros A H0; red in H0; intros.\nelim (H a).\nelim (H a); intros a0.\nelim (H a); intros a0.\napply IN_sound with (P := fun n : nat => EQ (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat (Nat n) (Nat n) (Nat n) (Nat n) (Nat (Nat n) (Nat n) (Nat n) (Nat n) (Nat (Nat n) (Nat n) (Nat (Nat n) (Nat n) (Nat (Nat n) (Nat n) (Nat n) (Nat n))) (Nat (Nat n (Nat n) (Nat n) (Nat nQed.",
                    "Theorem IN_Omega_EXType : forall E : Ens, IN E Omega -> EXType _ (fun n : nat => EQ (Nat n) E).\nintros E; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |- *.\nintros; unfold IN in |-Qed.",
                    "Theorem IN_Omega_EXType : forall E : Ens, IN E Omega -> EXType _ (fun n : nat => EQ (Nat n) E).\nintros; unfold IN in |- *.\nelim (H (eq_dec (S n) (S n) (S n)) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n) (S n)Qed.",
                    "Theorem IN_Omega_EXType : forall E : Ens, IN E Omega -> EXType _ (fun n : nat => EQ (Nat n) E).\nintros; unfold IN in |- *; unfold not in |- *; intros.\nelim (is_inv E); intros a.\nexists a; auto with zfc.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Omega.v",
                "context": " *)\n\nRequire Import Sets.\nRequire Import Axioms.\n\nDefinition Class_succ (E : Ens) := Union (Paire E (Sing E)).\n\n(*\nInductive Ord : Ens -> Prop :=\n  Oo : (Ord Vide)\n| So : (E:Ens)(Ord E)->(Ord (Class_succ E))\n| Lo : (E:Ens)((e:Ens)(IN e E)->(Ord e))->(Ord (Union E))\n| Eo : (E,E':Ens)(Ord E)->(EQ E E')->(Ord E').\n\nHints Resolve Oo So Lo : zfc.\n*)\n\n\nDefinition Nat : nat -> Ens.\nsimple induction 1; intros.\nexact Vide.\nexact (Class_succ X).\nDefined.\n\n(*\nTheorem Nat_Ord : (n:nat)(Ord (Nat n)).\nInduction n; Simpl; Auto with zfc.\nSave.\n*)\n\nDefinition Omega : Ens := sup nat Nat.\n\nTheorem IN_Class_succ : forall E : Ens, IN E (Class_succ E).\nintros E; unfold Class_succ in |- *; unfold Sing in |- *;\n apply IN_Union with (Paire E E); auto with zfc.\nQed.\n\n\nTheorem INC_Class_succ : forall E : Ens, INC E (Class_succ E).\nunfold INC in |- *; unfold Class_succ in |- *.\nintros.\napply IN_Union with E; auto with zfc.\nQed.\n\nHint Resolve IN_Class_succ INC_Class_succ: zfc.\n\n\nTheorem IN_Class_succ_or :\n forall E E' : Ens, IN E' (Class_succ E) -> EQ E E' \\/ IN E' E.\nintros E E' i.\nunfold Class_succ in i.\nelim (Union_IN (Paire E (Sing E)) E' i).\nintros E1; simple induction 1; intros i1 i2.\nelim (Paire_IN E (Sing E) E1 i1).\nintros; right; apply IN_sound_right with E1; auto with zfc.\nintros; left; cut (IN E' (Sing E)).\nauto with zfc.\napply IN_sound_right with E1; auto with zfc.\n\nQed.\n\n\nTheorem E_not_IN_E : forall E : Ens, IN E E -> F.\nsimple induction E; intros A f r i.\ncut False.\nsimple induction 1.\nelim (IN_EXType (sup A f) (sup A f) i); intros a e.\n\nsimpl in a.\nchange (EQ (sup A f) (f a)) in e.\nelim (r a).\napply IN_sound_right with (sup A f); auto with zfc.\nexists a; auto with zfc.\nQed.\n\n\nTheorem Nat_IN_Omega : forall n : nat, IN (Nat n) Omega.\nintros; simpl in |- *; exists n; auto with zfc.\nQed.\nHint Resolve Nat_IN_Omega: zfc.\n\n\nTheorem IN_Omega_EXType :\n forall E : Ens, IN E Omega -> EXType _ (fun n : nat => EQ (Nat n) E).\nsimpl in |- *; simple induction 1.\nintros n e.\nexists n; auto with zfc.\nQed.\n\n",
                "context_tokens": 726,
                "proof_start_offset": 3141,
                "proof_end_offset": 3491,
                "proof": "Theorem IN_Nat_EXType : forall (n : nat) (E : Ens), IN E (Nat n) -> EXType _ (fun p : nat => EQ E (Nat p)).\nProof.\nsimple induction n.\nsimpl in |- *.\nsimple induction 1.\nsimple induction x.\nintros.\nchange (IN E (Class_succ (Nat n0))) in H0.\nelim (IN_Class_succ_or (Nat n0) E H0).\nintros; exists n0.\nauto with zfc.\nintros.\nelim (H E); auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem IN_Nat_EXType : forall (n : nat) (E : Ens), IN E (Nat n) -> EXType _ (fun p : nat => EQ E (Nat p)).\nintros.\nunfold not in |- *; split; auto with zfc.\nQed.",
                    "Theorem IN_Nat_EXType : forall (n : nat) (E : Ens), IN E (Nat n) -> EXType _ (fun p : nat => EQ E (Nat p)).\nsimpl in |- *; intros; elim H; intros i0.\nelim (H0 (H x0)).\nintros n e.\nelim (H0 (H x0)).\nintros n e0.\nelim (H0 (H1 (H1 (H2 (H2 (H3 (H3 (H3 (H3 (H3 (H4 (H4 (H4 (H4 (H4 (H4 (H4 (H4 (H4 (H4 (H4 (H4 (H4 (H4 (H4 (H4 (H4 (H4 (H4 (H5 (H4 (H4 (H5 (H4 (H4 (H4 (H5 (H4 (H4 (H5 (H5 (H5 (H4 (H6 (H4 (H5 (H5 (H5 (H5 (H6 (H7 (H5 (H8 (H5 (H6 (H8 (H9 (H9 (H9 (H9 (H9 (H9 (H8 (H9 (H9 (H10 (H9 (H9 (H9 (HQed.",
                    "Theorem IN_Nat_EXType : forall (n : nat) (E : Ens), IN E (Nat n) -> EXType _ (fun p : nat => EQ E (Nat p)).\nsimpl in |- *; unfold not in |- *; intros.\nelim (H x); intros a b.\nabsurd (In a b).\napply IN_sound_intro with (P := fun n : nat => EQ (Nat n) (Nat n) (Nat n) (Nat n) (Nat n)) (Nat n) (Nat n) (Nat n)) (Nat n (Nat n) (Nat n) (Nat n) (Nat n)) (Nat n (Nat n) (Nat n) (Nat n)) (Nat n (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n)) (Nat n) (Nat n (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n) (Nat n)) (Nat n (Nat n) (Nat n) (Nat n) (Nat n)) (Nat (Nat n) (Nat n) (Nat n) (Nat n) (Nat n)) (Nat (Nat n (Nat n) (Nat n) (Nat n) (Nat n (Nat n) (Nat n)) (Nat (Nat nQed.",
                    "Theorem IN_Nat_EXType : forall (n : nat) (E : Ens), IN E (Nat n) -> EXType _ (fun p : nat => EQ E (Nat p)).\nintros; simpl in |- *; auto with zfc.\nQed.",
                    "Theorem IN_Nat_EXType : forall (n : nat) (E : Ens), IN E (Nat n) -> EXType _ (fun p : nat => EQ E (Nat p)).\nintros.\napply (H (S n)).\nauto with zfc.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zfc/Omega.v",
                "context": " E)->(EQ E E')->(Ord E').\n\nHints Resolve Oo So Lo : zfc.\n*)\n\n\nDefinition Nat : nat -> Ens.\nsimple induction 1; intros.\nexact Vide.\nexact (Class_succ X).\nDefined.\n\n(*\nTheorem Nat_Ord : (n:nat)(Ord (Nat n)).\nInduction n; Simpl; Auto with zfc.\nSave.\n*)\n\nDefinition Omega : Ens := sup nat Nat.\n\nTheorem IN_Class_succ : forall E : Ens, IN E (Class_succ E).\nintros E; unfold Class_succ in |- *; unfold Sing in |- *;\n apply IN_Union with (Paire E E); auto with zfc.\nQed.\n\n\nTheorem INC_Class_succ : forall E : Ens, INC E (Class_succ E).\nunfold INC in |- *; unfold Class_succ in |- *.\nintros.\napply IN_Union with E; auto with zfc.\nQed.\n\nHint Resolve IN_Class_succ INC_Class_succ: zfc.\n\n\nTheorem IN_Class_succ_or :\n forall E E' : Ens, IN E' (Class_succ E) -> EQ E E' \\/ IN E' E.\nintros E E' i.\nunfold Class_succ in i.\nelim (Union_IN (Paire E (Sing E)) E' i).\nintros E1; simple induction 1; intros i1 i2.\nelim (Paire_IN E (Sing E) E1 i1).\nintros; right; apply IN_sound_right with E1; auto with zfc.\nintros; left; cut (IN E' (Sing E)).\nauto with zfc.\napply IN_sound_right with E1; auto with zfc.\n\nQed.\n\n\nTheorem E_not_IN_E : forall E : Ens, IN E E -> F.\nsimple induction E; intros A f r i.\ncut False.\nsimple induction 1.\nelim (IN_EXType (sup A f) (sup A f) i); intros a e.\n\nsimpl in a.\nchange (EQ (sup A f) (f a)) in e.\nelim (r a).\napply IN_sound_right with (sup A f); auto with zfc.\nexists a; auto with zfc.\nQed.\n\n\nTheorem Nat_IN_Omega : forall n : nat, IN (Nat n) Omega.\nintros; simpl in |- *; exists n; auto with zfc.\nQed.\nHint Resolve Nat_IN_Omega: zfc.\n\n\nTheorem IN_Omega_EXType :\n forall E : Ens, IN E Omega -> EXType _ (fun n : nat => EQ (Nat n) E).\nsimpl in |- *; simple induction 1.\nintros n e.\nexists n; auto with zfc.\nQed.\n\nTheorem IN_Nat_EXType :\n forall (n : nat) (E : Ens),\n IN E (Nat n) -> EXType _ (fun p : nat => EQ E (Nat p)).\nsimple induction n.\nsimpl in |- *.\nsimple induction 1.\nsimple induction x.\n\nintros.\nchange (IN E (Class_succ (Nat n0))) in H0.\nelim (IN_Class_succ_or (Nat n0) E H0).\nintros; exists n0.\nauto with zfc.\n\nintros.\nelim (H E); auto with zfc.\nQed.\n\n\n",
                "context_tokens": 754,
                "proof_start_offset": 3494,
                "proof_end_offset": 4079,
                "proof": "Theorem Omega_EQ_Union : EQ Omega (Union Omega).\nProof.\napply INC_EQ; unfold INC in |- *.\nintros.\nelim (IN_Omega_EXType E H); intros n e.\napply IN_Union with (Nat (S n)).\nauto with zfc.\napply IN_sound_left with (Nat n).\nauto with zfc.\nauto with zfc.\nchange (IN (Nat n) (Class_succ (Nat n))) in |- *; auto with zfc.\nintros.\nelim (Union_IN Omega E H).\nintros e h.\nelim h.\nintros i1 i2.\nelim (IN_Omega_EXType e i1).\nintros n e1.\ncut (IN E (Nat n)).\nintros.\nelim (IN_Nat_EXType n E H0); intros.\napply IN_sound_left with (Nat x); auto with zfc.\napply IN_sound_right with e; auto with zfc.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Omega_EQ_Union : EQ Omega (Union Omega).\nintros.\nred in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfold not in |- *.\nunfoldQed.",
                    "Theorem Omega_EQ_Union : EQ Omega (Union Omega).\nunfold Union in |- *.\nintros.\napply (H (fun p : nat => EQ (Nat n0)) in H0.\napply (H (fun p : nat => EQ (Nat n0)) in H0.\nelim (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (Nat_S p0) (NatQed.",
                    "Theorem Omega_EQ_Union : EQ Omega (Union Omega).\nintros.\napply\n (Build_succ_P (Nat n0)) in H0.\nelim (IN_EX n0); auto with zfc.\nQed.",
                    "Theorem Omega_EQ_Union : EQ Omega (Union Omega).\nunfold Union in |- *.\nunfold Union in |- *.\nunfold Union in |- *.\nintros.\nelim (H0 x); auto with zfc.\nQed.",
                    "Theorem Omega_EQ_Union : EQ Omega (Union Omega).\nunfold Included in |- *.\nintros.\nunfold Included in |- *.\nintros.\nunfold Included in |- *.\nintros.\nelim (H x); auto with zfc.\nQed."
                ]
            }
        ],
        "dep-map": [
            {
                "filepath": "./coq_projects/dep-map/Coqlib.v",
                "context": "Require Import SetoidList.\nRequire OrderedType.\nRequire Import Orders.\n\n\n\n(** Some preliminary results  **)\nInstance not_symmetric (A : Type) (R: relation A) `{Symmetric A R} : Symmetric (fun x y => ~R x y).\nProof. intros?? Hnot HR. apply Hnot. symmetry. assumption. Qed.\n\nInstance InA_compat {A : Type} : Proper (subrelation ==> eq ==> eq ==> impl) (@InA A).\nProof.\nintros inA inB Hin. do 6 intro; subst. intro Hl. rewrite InA_alt in *.\ndestruct Hl as [? [??]]. eexists. split; eauto.\nQed.\n\nDefinition full_relation {A : Type} : relation A := fun x y : A => True.\n\n\n(** Conversion module between the two kinds of [OrderedType]. **)\nModule OTconvert (O : OrderedType) : OrderedType.OrderedType\n          with Definition t := O.t\n          with Definition eq := O.eq\n          with Definition lt := O.lt.\n  \n  Definition t := O.t.\n  Definition eq := O.eq.\n  Definition lt := O.lt.\n  \n  Definition eq_refl : forall x, eq x x := reflexivity.\n  ",
                "context_tokens": 255,
                "proof_start_offset": 944,
                "proof_end_offset": 1028,
                "proof": "Lemma eq_sym : forall x y : t, eq x y -> eq y x.\nProof.\nintros.\nnow symmetry.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma eq_sym : forall x y : t, eq x y -> eq y x.\n  Proof.\n    intros x y; apply eq_sym.\n    unfold eq, eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n    unfold eq_sym.\n   Qed.",
                    "Lemma eq_sym : forall x y : t, eq x y -> eq y x.\n  Proof.\n    intros x y H. rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.\n    rewrite eq_sym in H.Qed.",
                    "Lemma eq_sym : forall x y : t, eq x y -> eq y x.\n  Proof. intros x y H. apply eq_sym. Qed.",
                    "Lemma eq_sym : forall x y : t, eq x y -> eq y x.\n  Proof.\n    intros x y H.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n    apply eq_sym.\n   Qed.",
                    "Lemma eq_sym : forall x y : t, eq x y -> eq y x.\n  Proof.\n    intros x y H; rewrite H; apply eq_sym.\n  Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dep-map/Coqlib.v",
                "context": "Require Import SetoidList.\nRequire OrderedType.\nRequire Import Orders.\n\n\n\n(** Some preliminary results  **)\nInstance not_symmetric (A : Type) (R: relation A) `{Symmetric A R} : Symmetric (fun x y => ~R x y).\nProof. intros?? Hnot HR. apply Hnot. symmetry. assumption. Qed.\n\nInstance InA_compat {A : Type} : Proper (subrelation ==> eq ==> eq ==> impl) (@InA A).\nProof.\nintros inA inB Hin. do 6 intro; subst. intro Hl. rewrite InA_alt in *.\ndestruct Hl as [? [??]]. eexists. split; eauto.\nQed.\n\nDefinition full_relation {A : Type} : relation A := fun x y : A => True.\n\n\n(** Conversion module between the two kinds of [OrderedType]. **)\nModule OTconvert (O : OrderedType) : OrderedType.OrderedType\n          with Definition t := O.t\n          with Definition eq := O.eq\n          with Definition lt := O.lt.\n  \n  Definition t := O.t.\n  Definition eq := O.eq.\n  Definition lt := O.lt.\n  \n  Definition eq_refl : forall x, eq x x := reflexivity.\n  Lemma eq_sym : forall x y : t, eq x y -> eq y x.\n  Proof. intros. now symmetry. Qed. \n  ",
                "context_tokens": 285,
                "proof_start_offset": 1032,
                "proof_end_offset": 1144,
                "proof": "Lemma eq_trans : forall x y z : t, eq x y -> eq y z -> eq x z.\nProof.\nintros.\netransitivity; eassumption.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma eq_trans : forall x y z : t, eq x y -> eq y z -> eq x z.\n  Proof. intros. now rewrite eq_sym. Qed.",
                    "Lemma eq_trans : forall x y z : t, eq x y -> eq y z -> eq x z.\n  Proof. intros. now rewrite eq_sym. Qed.",
                    "Lemma eq_trans : forall x y z : t, eq x y -> eq y z -> eq x z.\n  Proof. intros. now apply eq_sym. Qed.",
                    "Lemma eq_trans : forall x y z : t, eq x y -> eq y z -> eq x z.\n  Proof. intros. now rewrite eq_sym. Qed.",
                    "Lemma eq_trans : forall x y z : t, eq x y -> eq y z -> eq x z.\n  Proof. intros. now rewrite eq_sym. Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dep-map/Coqlib.v",
                "context": "Require Import SetoidList.\nRequire OrderedType.\nRequire Import Orders.\n\n\n\n(** Some preliminary results  **)\nInstance not_symmetric (A : Type) (R: relation A) `{Symmetric A R} : Symmetric (fun x y => ~R x y).\nProof. intros?? Hnot HR. apply Hnot. symmetry. assumption. Qed.\n\nInstance InA_compat {A : Type} : Proper (subrelation ==> eq ==> eq ==> impl) (@InA A).\nProof.\nintros inA inB Hin. do 6 intro; subst. intro Hl. rewrite InA_alt in *.\ndestruct Hl as [? [??]]. eexists. split; eauto.\nQed.\n\nDefinition full_relation {A : Type} : relation A := fun x y : A => True.\n\n\n(** Conversion module between the two kinds of [OrderedType]. **)\nModule OTconvert (O : OrderedType) : OrderedType.OrderedType\n          with Definition t := O.t\n          with Definition eq := O.eq\n          with Definition lt := O.lt.\n  \n  Definition t := O.t.\n  Definition eq := O.eq.\n  Definition lt := O.lt.\n  \n  Definition eq_refl : forall x, eq x x := reflexivity.\n  Lemma eq_sym : forall x y : t, eq x y -> eq y x.\n  Proof. intros. now symmetry. Qed. \n  Lemma eq_trans : forall x y z : t, eq x y -> eq y z -> eq x z.\n  Proof. intros. etransitivity; eassumption. Qed.\n\n  ",
                "context_tokens": 321,
                "proof_start_offset": 1148,
                "proof_end_offset": 1260,
                "proof": "Lemma lt_trans : forall x y z : t, lt x y -> lt y z -> lt x z.\nProof.\nintros.\netransitivity; eassumption.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma lt_trans : forall x y z : t, lt x y -> lt y z -> lt x z.\n  Proof. intros. now rewrite <- eq_sym. Qed.",
                    "Lemma lt_trans : forall x y z : t, lt x y -> lt y z -> lt x z.\n  Proof. intros. now rewrite eq_sym. Qed.",
                    "Lemma lt_trans : forall x y z : t, lt x y -> lt y z -> lt x z.\n  Proof. intros. apply lt_trans with y. Qed.",
                    "Lemma lt_trans : forall x y z : t, lt x y -> lt y z -> lt x z.\n  Proof. intros. rewrite eq_sym. Qed.",
                    "Lemma lt_trans : forall x y z : t, lt x y -> lt y z -> lt x z.\n  Proof. intros. apply lt_trans with x. Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dep-map/Coqlib.v",
                "context": "Require Import SetoidList.\nRequire OrderedType.\nRequire Import Orders.\n\n\n\n(** Some preliminary results  **)\nInstance not_symmetric (A : Type) (R: relation A) `{Symmetric A R} : Symmetric (fun x y => ~R x y).\nProof. intros?? Hnot HR. apply Hnot. symmetry. assumption. Qed.\n\nInstance InA_compat {A : Type} : Proper (subrelation ==> eq ==> eq ==> impl) (@InA A).\nProof.\nintros inA inB Hin. do 6 intro; subst. intro Hl. rewrite InA_alt in *.\ndestruct Hl as [? [??]]. eexists. split; eauto.\nQed.\n\nDefinition full_relation {A : Type} : relation A := fun x y : A => True.\n\n\n(** Conversion module between the two kinds of [OrderedType]. **)\nModule OTconvert (O : OrderedType) : OrderedType.OrderedType\n          with Definition t := O.t\n          with Definition eq := O.eq\n          with Definition lt := O.lt.\n  \n  Definition t := O.t.\n  Definition eq := O.eq.\n  Definition lt := O.lt.\n  \n  Definition eq_refl : forall x, eq x x := reflexivity.\n  Lemma eq_sym : forall x y : t, eq x y -> eq y x.\n  Proof. intros. now symmetry. Qed. \n  Lemma eq_trans : forall x y z : t, eq x y -> eq y z -> eq x z.\n  Proof. intros. etransitivity; eassumption. Qed.\n\n  Lemma lt_trans : forall x y z : t, lt x y -> lt y z -> lt x z.\n  Proof. intros. etransitivity; eassumption. Qed.\n  ",
                "context_tokens": 357,
                "proof_start_offset": 1263,
                "proof_end_offset": 1413,
                "proof": "Lemma lt_not_eq : forall x y : t, lt x y -> ~ eq x y.\nProof.\nintros ? ? Hlt Heq.\nrewrite Heq in Hlt.\nrevert Hlt.\napply StrictOrder_Irreflexive.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma lt_not_eq : forall x y : t, lt x y -> ~ eq x y.\n  Proof. intros. apply lt_not_eq. Qed.",
                    "Lemma lt_not_eq : forall x y : t, lt x y -> ~ eq x y.\n  Proof. intros. apply lt_not_eq. Qed.",
                    "Lemma lt_not_eq : forall x y : t, lt x y -> ~ eq x y.\n  Proof. intros. rewrite eq_sym. Qed.",
                    "Lemma lt_not_eq : forall x y : t, lt x y -> ~ eq x y.\n  Proof. intros. apply eq_sym. Qed.",
                    "Lemma lt_not_eq : forall x y : t, lt x y -> ~ eq x y.\n  Proof. intros. symmetry. apply lt_not_eq. Qed."
                ]
            },
            {
                "filepath": "./coq_projects/dep-map/Coqlib.v",
                "context": "Require Import SetoidList.\nRequire OrderedType.\nRequire Import Orders.\n\n\n\n(** Some preliminary results  **)\nInstance not_symmetric (A : Type) (R: relation A) `{Symmetric A R} : Symmetric (fun x y => ~R x y).\nProof. intros?? Hnot HR. apply Hnot. symmetry. assumption. Qed.\n\nInstance InA_compat {A : Type} : Proper (subrelation ==> eq ==> eq ==> impl) (@InA A).\nProof.\nintros inA inB Hin. do 6 intro; subst. intro Hl. rewrite InA_alt in *.\ndestruct Hl as [? [??]]. eexists. split; eauto.\nQed.\n\nDefinition full_relation {A : Type} : relation A := fun x y : A => True.\n\n\n(** Conversion module between the two kinds of [OrderedType]. **)\nModule OTconvert (O : OrderedType) : OrderedType.OrderedType\n          with Definition t := O.t\n          with Definition eq := O.eq\n          with Definition lt := O.lt.\n  \n  Definition t := O.t.\n  Definition eq := O.eq.\n  Definition lt := O.lt.\n  \n  Definition eq_refl : forall x, eq x x := reflexivity.\n  Lemma eq_sym : forall x y : t, eq x y -> eq y x.\n  Proof. intros. now symmetry. Qed. \n  Lemma eq_trans : forall x y z : t, eq x y -> eq y z -> eq x z.\n  Proof. intros. etransitivity; eassumption. Qed.\n\n  Lemma lt_trans : forall x y z : t, lt x y -> lt y z -> lt x z.\n  Proof. intros. etransitivity; eassumption. Qed.\n  Lemma lt_not_eq : forall x y : t, lt x y -> ~ eq x y.\n  Proof. intros?? Hlt Heq. rewrite Heq in Hlt. revert Hlt. apply StrictOrder_Irreflexive. Qed.\n\n  ",
                "context_tokens": 404,
                "proof_start_offset": 1417,
                "proof_end_offset": 1681,
                "proof": "Lemma compare : forall x y : t, OrderedType.Compare lt eq x y.\nProof.\nintros x y.\nassert (H := (O.compare_spec x y)).\ndestruct (O.compare x y).\nconstructor 2.\nnow inversion H.\nconstructor 1.\nnow inversion H.\nconstructor 3.\nnow inversion H.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma compare : forall x y : t, OrderedType.Compare lt eq x y.\n  Proof. intros. apply lt_trans with y. Qed.",
                    "Lemma compare : forall x y : t, OrderedType.Compare lt eq x y.\n  Proof. intros. apply compare_lt_trans with x. Qed.",
                    "Lemma compare : forall x y : t, OrderedType.Compare lt eq x y.\n  Proof. intros. apply lt_trans with y. Qed.",
                    "Lemma compare : forall x y : t, OrderedType.Compare lt eq x y.\n  Proof. intros. apply eq_sym. Qed.",
                    "Lemma compare : forall x y : t, OrderedType.Compare lt eq x y.\n  Proof. intros. rewrite <- compare_lt_trans with x. rewrite <- compare_lt_trans with x. rewrite <- compare_lt_trans with x. rewrite <- compare_lt_trans with x. rewrite <- compare_lt_trans with x. rewrite <- compare_lt_trans with x. rewrite <- compare_lt_trans with x. rewrite <- compare_lt_trans with x. rewrite compare_lt_trans with x. rewrite compare_lt_trans with x. rewrite compare_lt_trans with x. rewrite compare_lt_trans with x. rewrite compare_lt_trans with x. rewrite compare_lt_trans with x. rewrite compare_lt_trans with x. rewrite compare_lt_trans with x. rewrite compare_lt_trans with x. rewrite compare_lt_trans with x. rewrite compare_lt_trans with x. rewrite compare_lt_trans with x. rewrite compare_lt_trans with x. rewrite compare_lt_trans with x. rewrite compare_lt_trans with x. rewrite compare_lt_trans with x. rewrite compare_lt_trans with x. rewrite compare_lt_trans with x. rewrite compare_lt_trans with x.Qed."
                ]
            }
        ],
        "chinese": [
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                 Zmult.v                                  *)\n(****************************************************************************)\nRequire Export Lci.\nRequire Export misc.\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\nRequire Export Zadd.\n\n(* Multiplication on Z, (Z, +, *, 0, 1) is a unitary commutative ring *)\n\n(*Recursive Definition multZ : Z -> Z -> Z := \n        OZ      y  => OZ\n | (pos O)      y  => y\n | (pos (S n1)) y  => (addZ (multZ (pos n1) y) y)\n | (neg O)      y  => (oppZ y)\n | (neg (S n1)) y  => (addZ (multZ (neg n1) y) (oppZ y)).\n*)\n\n\nFixpoint multpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => x2\n  | S n0 => addZ (multpos x2 n0) x2\n  end.\n\nFixpoint multneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => oppZ x2\n  | S n0 => addZ (multneg x2 n0) (oppZ x2)\n  end. \n\nDefinition multZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => OZ\n  | pos n => multpos x2 n\n  | neg n => multneg x2 n\n  end.\n\n\n",
                "context_tokens": 445,
                "proof_start_offset": 2094,
                "proof_end_offset": 2161,
                "proof": "Lemma multZ_eq1 : forall n : Z, multZ OZ n = OZ.\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma multZ_eq1 : forall n : Z, multZ OZ n = OZ.\nProof.\n intros.\n apply mult_pos_l.\n apply mult_pos_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n apply mult_neg_l.\n applyQed.",
                    "Lemma multZ_eq1 : forall n : Z, multZ OZ n = OZ.\nProof.\n intros.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.Qed.",
                    "Lemma multZ_eq1 : forall n : Z, multZ OZ n = OZ.\nProof.\n  simple induction n.\n  simpl in |- *.\n  intros.\n  apply mult_pos_r.\n  apply mult_pos_l.\n  apply mult_pos_r.\n  apply mult_pos_r.\n  apply mult_pos_l.\n  apply mult_pos_l.\n  apply mult_pos_r.\n  apply mult_pos_r.\n  apply mult_pos_r.\n  apply mult_pos_r.\n  apply mult_pos_r.\n  apply mult_pos_r.\n  apply mult_pos_r.\n  apply mult_pos_r.\n  apply mult_pos_r.\n  apply mult_pos_r.\n  apply mult_pos_r.\n  apply mult_pos_r.\n  apply mult_pos_r.\n  apply mult_pos_r.\n  apply mult_pos_r.\n  apply mult_pos_r.\n  apply mult_pos_r.\n  apply mult_pos_r.\n  apply mult_pos_r.\n  apply mult_pos_r.\n  apply mult_pos_r.\n  apply mult_pos_r.\n  apply mult_pos_r.\n  apply mult_pos_r.Qed.",
                    "Lemma multZ_eq1 : forall n : Z, multZ OZ n = OZ.\nProof.\n intros.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.\n apply mult_le_compat_l.Qed.",
                    "Lemma multZ_eq1 : forall n : Z, multZ OZ n = OZ.\nProof.\nintros.\nunfold multZ, multZ.\nunfold multZ.\nsimpl in |- *.\nauto with arith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                 Zmult.v                                  *)\n(****************************************************************************)\nRequire Export Lci.\nRequire Export misc.\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\nRequire Export Zadd.\n\n(* Multiplication on Z, (Z, +, *, 0, 1) is a unitary commutative ring *)\n\n(*Recursive Definition multZ : Z -> Z -> Z := \n        OZ      y  => OZ\n | (pos O)      y  => y\n | (pos (S n1)) y  => (addZ (multZ (pos n1) y) y)\n | (neg O)      y  => (oppZ y)\n | (neg (S n1)) y  => (addZ (multZ (neg n1) y) (oppZ y)).\n*)\n\n\nFixpoint multpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => x2\n  | S n0 => addZ (multpos x2 n0) x2\n  end.\n\nFixpoint multneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => oppZ x2\n  | S n0 => addZ (multneg x2 n0) (oppZ x2)\n  end. \n\nDefinition multZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => OZ\n  | pos n => multpos x2 n\n  | neg n => multneg x2 n\n  end.\n\n\nLemma multZ_eq1 : forall n : Z, multZ OZ n = OZ.\nProof.\n auto.\nQed.\n\n",
                "context_tokens": 475,
                "proof_start_offset": 2163,
                "proof_end_offset": 2234,
                "proof": "Lemma multZ_eq2 : forall n : Z, multZ (pos 0) n = n.\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma multZ_eq2 : forall n : Z, multZ (pos 0) n = n.\nProof.\n auto.\nQed.",
                    "Lemma multZ_eq2 : forall n : Z, multZ (pos 0) n = n.\nProof.\n auto.\nQed.",
                    "Lemma multZ_eq2 : forall n : Z, multZ (pos 0) n = n.\nProof.\n auto.\nQed.",
                    "Lemma multZ_eq2 : forall n : Z, multZ (pos 0) n = n.\nProof.\n auto.\nQed.",
                    "Lemma multZ_eq2 : forall n : Z, multZ (pos 0) n = n.\nProof.\n auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                 Zmult.v                                  *)\n(****************************************************************************)\nRequire Export Lci.\nRequire Export misc.\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\nRequire Export Zadd.\n\n(* Multiplication on Z, (Z, +, *, 0, 1) is a unitary commutative ring *)\n\n(*Recursive Definition multZ : Z -> Z -> Z := \n        OZ      y  => OZ\n | (pos O)      y  => y\n | (pos (S n1)) y  => (addZ (multZ (pos n1) y) y)\n | (neg O)      y  => (oppZ y)\n | (neg (S n1)) y  => (addZ (multZ (neg n1) y) (oppZ y)).\n*)\n\n\nFixpoint multpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => x2\n  | S n0 => addZ (multpos x2 n0) x2\n  end.\n\nFixpoint multneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => oppZ x2\n  | S n0 => addZ (multneg x2 n0) (oppZ x2)\n  end. \n\nDefinition multZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => OZ\n  | pos n => multpos x2 n\n  | neg n => multneg x2 n\n  end.\n\n\nLemma multZ_eq1 : forall n : Z, multZ OZ n = OZ.\nProof.\n auto.\nQed.\n\nLemma multZ_eq2 : forall n : Z, multZ (pos 0) n = n.\nProof.\n auto.\nQed.\n\n",
                "context_tokens": 508,
                "proof_start_offset": 2236,
                "proof_end_offset": 2350,
                "proof": "Lemma multZ_eq3 : forall (n1 : nat) (n : Z), multZ (pos (S n1)) n = addZ (multZ (pos n1) n) n.\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma multZ_eq3 : forall (n1 : nat) (n : Z), multZ (pos (S n1)) n = addZ (multZ (pos n1) n) n.\nProof.\n auto.\nQed.",
                    "Lemma multZ_eq3 : forall (n1 : nat) (n : Z), multZ (pos (S n1)) n = addZ (multZ (pos n1) n) n.\nProof.\n auto.\nQed.",
                    "Lemma multZ_eq3 : forall (n1 : nat) (n : Z), multZ (pos (S n1)) n = addZ (multZ (pos n1) n) n.\nProof.\n auto.\nQed.",
                    "Lemma multZ_eq3 : forall (n1 : nat) (n : Z), multZ (pos (S n1)) n = addZ (multZ (pos n1) n) n.\nProof.\n auto.\nQed.",
                    "Lemma multZ_eq3 : forall (n1 : nat) (n : Z), multZ (pos (S n1)) n = addZ (multZ (pos n1) n) n.\nProof.\n auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                 Zmult.v                                  *)\n(****************************************************************************)\nRequire Export Lci.\nRequire Export misc.\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\nRequire Export Zadd.\n\n(* Multiplication on Z, (Z, +, *, 0, 1) is a unitary commutative ring *)\n\n(*Recursive Definition multZ : Z -> Z -> Z := \n        OZ      y  => OZ\n | (pos O)      y  => y\n | (pos (S n1)) y  => (addZ (multZ (pos n1) y) y)\n | (neg O)      y  => (oppZ y)\n | (neg (S n1)) y  => (addZ (multZ (neg n1) y) (oppZ y)).\n*)\n\n\nFixpoint multpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => x2\n  | S n0 => addZ (multpos x2 n0) x2\n  end.\n\nFixpoint multneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => oppZ x2\n  | S n0 => addZ (multneg x2 n0) (oppZ x2)\n  end. \n\nDefinition multZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => OZ\n  | pos n => multpos x2 n\n  | neg n => multneg x2 n\n  end.\n\n\nLemma multZ_eq1 : forall n : Z, multZ OZ n = OZ.\nProof.\n auto.\nQed.\n\nLemma multZ_eq2 : forall n : Z, multZ (pos 0) n = n.\nProof.\n auto.\nQed.\n\nLemma multZ_eq3 :\n forall (n1 : nat) (n : Z), multZ (pos (S n1)) n = addZ (multZ (pos n1) n) n.\nProof.\n auto.\nQed.\n\n",
                "context_tokens": 563,
                "proof_start_offset": 2352,
                "proof_end_offset": 2428,
                "proof": "Lemma multZ_eq4 : forall n : Z, multZ (neg 0) n = oppZ n.\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma multZ_eq4 : forall n : Z, multZ (neg 0) n = oppZ n.\nProof.\n auto.\nQed.",
                    "Lemma multZ_eq4 : forall n : Z, multZ (neg 0) n = oppZ n.\nProof.\n auto.\nQed.",
                    "Lemma multZ_eq4 : forall n : Z, multZ (neg 0) n = oppZ n.\nProof.\n auto.\nQed.",
                    "Lemma multZ_eq4 : forall n : Z, multZ (neg 0) n = oppZ n.\nProof.\n auto.\nQed.",
                    "Lemma multZ_eq4 : forall n : Z, multZ (neg 0) n = oppZ n.\nProof.\n auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "***********************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                 Zmult.v                                  *)\n(****************************************************************************)\nRequire Export Lci.\nRequire Export misc.\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\nRequire Export Zadd.\n\n(* Multiplication on Z, (Z, +, *, 0, 1) is a unitary commutative ring *)\n\n(*Recursive Definition multZ : Z -> Z -> Z := \n        OZ      y  => OZ\n | (pos O)      y  => y\n | (pos (S n1)) y  => (addZ (multZ (pos n1) y) y)\n | (neg O)      y  => (oppZ y)\n | (neg (S n1)) y  => (addZ (multZ (neg n1) y) (oppZ y)).\n*)\n\n\nFixpoint multpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => x2\n  | S n0 => addZ (multpos x2 n0) x2\n  end.\n\nFixpoint multneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => oppZ x2\n  | S n0 => addZ (multneg x2 n0) (oppZ x2)\n  end. \n\nDefinition multZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => OZ\n  | pos n => multpos x2 n\n  | neg n => multneg x2 n\n  end.\n\n\nLemma multZ_eq1 : forall n : Z, multZ OZ n = OZ.\nProof.\n auto.\nQed.\n\nLemma multZ_eq2 : forall n : Z, multZ (pos 0) n = n.\nProof.\n auto.\nQed.\n\nLemma multZ_eq3 :\n forall (n1 : nat) (n : Z), multZ (pos (S n1)) n = addZ (multZ (pos n1) n) n.\nProof.\n auto.\nQed.\n\nLemma multZ_eq4 : forall n : Z, multZ (neg 0) n = oppZ n.\nProof.\n auto.\nQed.\n\n",
                "context_tokens": 580,
                "proof_start_offset": 2430,
                "proof_end_offset": 2552,
                "proof": "Lemma multZ_eq5 : forall (n1 : nat) (n : Z), multZ (neg (S n1)) n = addZ (multZ (neg n1) n) (oppZ n).\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma multZ_eq5 : forall (n1 : nat) (n : Z), multZ (neg (S n1)) n = addZ (multZ (neg n1) n) (oppZ n).\nProof.\n auto.\nQed.",
                    "Lemma multZ_eq5 : forall (n1 : nat) (n : Z), multZ (neg (S n1)) n = addZ (multZ (neg n1) n) (oppZ n).\nProof.\n auto.\nQed.",
                    "Lemma multZ_eq5 : forall (n1 : nat) (n : Z), multZ (neg (S n1)) n = addZ (multZ (neg n1) n) (oppZ n).\nProof.\n auto.\nQed.",
                    "Lemma multZ_eq5 : forall (n1 : nat) (n : Z), multZ (neg (S n1)) n = addZ (multZ (neg n1) n) (oppZ n).\nProof.\n auto.\nQed.",
                    "Lemma multZ_eq5 : forall (n1 : nat) (n : Z), multZ (neg (S n1)) n = addZ (multZ (neg n1) n) (oppZ n).\nProof.\n auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                 Zmult.v                                  *)\n(****************************************************************************)\nRequire Export Lci.\nRequire Export misc.\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\nRequire Export Zadd.\n\n(* Multiplication on Z, (Z, +, *, 0, 1) is a unitary commutative ring *)\n\n(*Recursive Definition multZ : Z -> Z -> Z := \n        OZ      y  => OZ\n | (pos O)      y  => y\n | (pos (S n1)) y  => (addZ (multZ (pos n1) y) y)\n | (neg O)      y  => (oppZ y)\n | (neg (S n1)) y  => (addZ (multZ (neg n1) y) (oppZ y)).\n*)\n\n\nFixpoint multpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => x2\n  | S n0 => addZ (multpos x2 n0) x2\n  end.\n\nFixpoint multneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => oppZ x2\n  | S n0 => addZ (multneg x2 n0) (oppZ x2)\n  end. \n\nDefinition multZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => OZ\n  | pos n => multpos x2 n\n  | neg n => multneg x2 n\n  end.\n\n\nLemma multZ_eq1 : forall n : Z, multZ OZ n = OZ.\nProof.\n auto.\nQed.\n\nLemma multZ_eq2 : forall n : Z, multZ (pos 0) n = n.\nProof.\n auto.\nQed.\n\nLemma multZ_eq3 :\n forall (n1 : nat) (n : Z), multZ (pos (S n1)) n = addZ (multZ (pos n1) n) n.\nProof.\n auto.\nQed.\n\nLemma multZ_eq4 : forall n : Z, multZ (neg 0) n = oppZ n.\nProof.\n auto.\nQed.\n\nLemma multZ_eq5 :\n forall (n1 : nat) (n : Z),\n multZ (neg (S n1)) n = addZ (multZ (neg n1) n) (oppZ n).\nProof.\n auto.\nQed.\n\n(*******************)\nLemma tech_mult_posZ :\n forall (x : nat) (y : Z), multZ (pos (S x)) y = addZ (multZ (pos x) y) y.\n\nProof multZ_eq3.\n\n(*******************)\nLemma tech_mult_negZ :\n forall (x : nat) (y : Z),\n multZ (neg (S x)) y = addZ (multZ (neg x) y) (oppZ y).\n\nProof multZ_eq5.\n\n(*****************)\n",
                "context_tokens": 728,
                "proof_start_offset": 2860,
                "proof_end_offset": 3465,
                "proof": "Lemma mult_succZ_l : forall x y : Z, multZ (succZ x) y = addZ (multZ x y) y.\nProof.\nintros; elim x.\nsimpl in |- *; reflexivity.\nintros; simpl in |- *; reflexivity.\nintros; elim n.\nsimpl in |- *; symmetry in |- *.\nelim (addZ_opposite y I); intros.\nelim H0; intros; elim H2; intros; exact H4.\nintros; unfold succZ in |- *; rewrite (tech_mult_negZ n0 y).\nelim (addZ_associativity (multZ (neg n0) y) (oppZ y) y).\nelim (addZ_opposite y I); intros.\nelim H1; intros; elim H3; intros.\nrewrite H5.\nsymmetry in |- *; exact (add_OZ (multZ (neg n0) y)).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma mult_succZ_l : forall x y : Z, multZ (succZ x) y = addZ (multZ x y) y.\nProof.\n intros; apply mult_Z_eq_0.\nQed.",
                    "Lemma mult_succZ_l : forall x y : Z, multZ (succZ x) y = addZ (multZ x y) y.\nProof.\n intros x y.\n apply mult_Z_eq_0.\nQed.",
                    "Lemma mult_succZ_l : forall x y : Z, multZ (succZ x) y = addZ (multZ x y) y.\nProof.\n intros x y; rewrite multZ_eq_5.\nQed.",
                    "Lemma mult_succZ_l : forall x y : Z, multZ (succZ x) y = addZ (multZ x y) y.\nProof.\n auto.\nQed.",
                    "Lemma mult_succZ_l : forall x y : Z, multZ (succZ x) y = addZ (multZ x y) y.\nProof.\n intros x y.\n apply mult_pos_eq_0.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": " (multZ (neg n1) y) (oppZ y)).\n*)\n\n\nFixpoint multpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => x2\n  | S n0 => addZ (multpos x2 n0) x2\n  end.\n\nFixpoint multneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => oppZ x2\n  | S n0 => addZ (multneg x2 n0) (oppZ x2)\n  end. \n\nDefinition multZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => OZ\n  | pos n => multpos x2 n\n  | neg n => multneg x2 n\n  end.\n\n\nLemma multZ_eq1 : forall n : Z, multZ OZ n = OZ.\nProof.\n auto.\nQed.\n\nLemma multZ_eq2 : forall n : Z, multZ (pos 0) n = n.\nProof.\n auto.\nQed.\n\nLemma multZ_eq3 :\n forall (n1 : nat) (n : Z), multZ (pos (S n1)) n = addZ (multZ (pos n1) n) n.\nProof.\n auto.\nQed.\n\nLemma multZ_eq4 : forall n : Z, multZ (neg 0) n = oppZ n.\nProof.\n auto.\nQed.\n\nLemma multZ_eq5 :\n forall (n1 : nat) (n : Z),\n multZ (neg (S n1)) n = addZ (multZ (neg n1) n) (oppZ n).\nProof.\n auto.\nQed.\n\n(*******************)\nLemma tech_mult_posZ :\n forall (x : nat) (y : Z), multZ (pos (S x)) y = addZ (multZ (pos x) y) y.\n\nProof multZ_eq3.\n\n(*******************)\nLemma tech_mult_negZ :\n forall (x : nat) (y : Z),\n multZ (neg (S x)) y = addZ (multZ (neg x) y) (oppZ y).\n\nProof multZ_eq5.\n\n(*****************)\nLemma mult_succZ_l : forall x y : Z, multZ (succZ x) y = addZ (multZ x y) y.\n\nintros; elim x.\n(* OZ *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; simpl in |- *; reflexivity.\n(* neg n *)\nintros; elim n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *. \nelim (addZ_opposite y I); intros. elim H0; intros; elim H2; intros; exact H4.\n(* neg (S n0) *)\nintros; unfold succZ in |- *; rewrite (tech_mult_negZ n0 y).\nelim (addZ_associativity (multZ (neg n0) y) (oppZ y) y).\nelim (addZ_opposite y I); intros. elim H1; intros; elim H3; intros. rewrite H5.\nsymmetry  in |- *; exact (add_OZ (multZ (neg n0) y)).\nQed.\n\n(*****************)\n",
                "context_tokens": 734,
                "proof_start_offset": 3487,
                "proof_end_offset": 4087,
                "proof": "Lemma mult_predZ_l : forall x y : Z, multZ (predZ x) y = addZ (multZ x y) (oppZ y).\nProof.\nintros; elim x.\nsimpl in |- *; reflexivity.\nintros; elim n.\nsimpl in |- *; symmetry in |- *.\nelim (addZ_opposite y I); intros.\nelim H0; intros; elim H2; intros; exact H3.\nintros; unfold predZ in |- *; rewrite (tech_mult_posZ n0 y).\nelim (addZ_associativity (multZ (pos n0) y) y (oppZ y)).\nelim (addZ_opposite y I); intros.\nelim H1; intros; elim H3; intros; rewrite H4.\nrewrite (add_OZ (multZ (pos n0) y)); reflexivity.\nintros; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma mult_predZ_l : forall x y : Z, multZ (predZ x) y = addZ (multZ x y) (oppZ y).\nProof.\n intros; elim H; intros; elim H0; intros; elim H0; intros; exact H1; exact H1.\n(* neg n0 *)\nsimpl in |- *; reflexivity.\n(* neg n0 *)\nsimpl in |- *; reflexivity.\n(* neg n0 *)\nsimpl in |- *; reflexivity.\n(* neg n0 *)\nsimpl in |- *; reflexivity.\n(* neg n0 *)\nsimpl in |- *; reflexivity.\n(* neg n0 *)\nsimpl in |- *; reflexivity.\n(* neg n0 *)\nsimpl in |- *; reflexivity.\n(* neg n0 *)\nsimpl in |- *; reflexivity.\n(* neg n0 *)\nsimpl in |- *; reflexivity.\n(* neg n0 *)\nsimpl in |- *; reflexivity.\n(* neg n0 *)\nsimpl in |- *; reflexivity.\n(* neg n0 *)\nsimpl in |- *; reflexivity.\n(* neg n0 *)\nsimpl in |- *; reflexivity.\n(* neg n0 *)\nsimpl in |- *; reflexivity.\n(* neg n0 *)\nsimpl in |- *; reflexivity.\n(* neg n0 *)\nsimpl in |- *; reflexivity.\n(* neg n0 *)\nsimpl in |- *; reflexivity.\n(* neg nQed.",
                    "Lemma mult_predZ_l : forall x y : Z, multZ (predZ x) y = addZ (multZ x y) (oppZ y).\nProof.\nintros; elim H; intros; elim H0; intros; elim H0; intros; exact H1.\n(* neg n0 *)\nsimpl in |- *; rewrite (tech_mult_Z (Z.neg (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.pos (Z.Qed.",
                    "Lemma mult_predZ_l : forall x y : Z, multZ (predZ x) y = addZ (multZ x y) (oppZ y).\nProof.\n intros; elim H0; intros; elim H1; intros; elim H0; intros; exact H1.\n(* neg n0 *)\nintros; elim H1; intros; elim H1; intros; elim H1; intros; exact H1.\n(* neg n0 *)\nintros; elim H1; intros; elim H1; intros; exact H1.\n(* neg n0 *)\nintros; elim H1; intros; exact H1.\n(* neg n0 *)\nintros; elim H1; intros; elim H1; intros; exact H1.\n(* neg n0 *)\nintros; elim H1; intros; exact H1.\n(* neg n0 *)\nintros; elim H1; intros; exact H1.\n(* neg n0 *)\nintros; elim H1; intros; exact H1.\n(* neg n0 *)\nintros; elim H1; intros; exact H1.\n(* neg n0 *)\nintros; elim H1; intros; exact H1.\n(* neg n1 *)\nintros; elim H1; intros; exact H1.\n(* neg n1 *)\nintros; elim H1; introsQed.",
                    "Lemma mult_predZ_l : forall x y : Z, multZ (predZ x) y = addZ (multZ x y) (oppZ y).\nProof.\n intros; elim (Zis_gcd x y I); intros.\n(* abs *)\nsimpl in |- *; reflexivity.\n(* abs *)\nsimpl in |- *; reflexivity.\n(* abs *)\nsimpl in |- *; reflexivity.\n(* abs *)\nsimpl in |- *; reflexivity.\n(* abs *)\nsimpl in |- *; reflexivity.\n(* abs *)\nsimpl in |- *; reflexivity.\n(* abs *)\nsimpl in |- *; reflexivity.\n(* abs *)\nsimpl in |- *; reflexivity. *)\n(* abs *)\nsimpl in |- *; reflexivity.\n(* abs *)\nsimpl in |- *; reflexivity.\n(* abs *)\nsimpl in |- *; reflexivity. *)\n(* abs *)\nsimpl in |- *; reflexivity.\n(* abs *)\nsimpl in |- *; reflexivity. *)\n(* abs *)\nsimpl in |- *; reflexivity. *)\n(* abs *)\nsimpl in |- *; reflexivity. *)\n(* abs *)\nsimpl in |- *; reflexivity. *)\n(* abs *)\nsimpl in |- *; reflexivity. *)\n(* abs *)\nsimpl in |- *; reflexivity. *)\n(* abs *)\nsimpl in |- *; reflexivity. *)\n(* abs *)\nsimpl in |- *; reflexivity. *)\n(* abs *)\nsimpl in |- *;Qed.",
                    "Lemma mult_predZ_l : forall x y : Z, multZ (predZ x) y = addZ (multZ x y) (oppZ y).\nProof.\n intros; elim H0; intros; elim H0; intros.\n(* neg n0 *)\nsimpl in |- *; assumption.\n(* neg n0 *)\nsimpl in |- *; assumption.\n(* neg n0 *)\nsimpl in |- *; assumption.\n(* neg n0 *)\nsimpl in |- *; assumption.\n(* neg n0 *)\nsimpl in |- *; assumption.\n(* neg n0 *)\nsimpl in |- *; assumption.\n(* neg n0 *)\nsimpl in |- *; assumption.\n(* neg n0 *)\nsimpl in |- *; assumption.\n(* neg n0 *)\nsimpl in |- *; assumption.\n(* neg n0 *)\nsimpl in |- *; assumption.\n(* neg n0 *)\nsimpl in |- *; assumption.\n(* neg n0 *)\nsimpl in |- *; assumption.\n(* neg n0 *)\nsimpl in |- *; assumption.\n(* neg n0 *)\nsimpl in |- *; assumption.\n(* neg n1 *)\nsimpl in |- *; assumption.\n(* neg n0 *)\nsimpl in |- *; assumption.\n(* neg n1 *)\nsimpl in |- *; assumption.\n(* neg n1 *)\nsimpl in |- *; assumption.\n(* neg nQed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": ", multZ (pos 0) n = n.\nProof.\n auto.\nQed.\n\nLemma multZ_eq3 :\n forall (n1 : nat) (n : Z), multZ (pos (S n1)) n = addZ (multZ (pos n1) n) n.\nProof.\n auto.\nQed.\n\nLemma multZ_eq4 : forall n : Z, multZ (neg 0) n = oppZ n.\nProof.\n auto.\nQed.\n\nLemma multZ_eq5 :\n forall (n1 : nat) (n : Z),\n multZ (neg (S n1)) n = addZ (multZ (neg n1) n) (oppZ n).\nProof.\n auto.\nQed.\n\n(*******************)\nLemma tech_mult_posZ :\n forall (x : nat) (y : Z), multZ (pos (S x)) y = addZ (multZ (pos x) y) y.\n\nProof multZ_eq3.\n\n(*******************)\nLemma tech_mult_negZ :\n forall (x : nat) (y : Z),\n multZ (neg (S x)) y = addZ (multZ (neg x) y) (oppZ y).\n\nProof multZ_eq5.\n\n(*****************)\nLemma mult_succZ_l : forall x y : Z, multZ (succZ x) y = addZ (multZ x y) y.\n\nintros; elim x.\n(* OZ *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; simpl in |- *; reflexivity.\n(* neg n *)\nintros; elim n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *. \nelim (addZ_opposite y I); intros. elim H0; intros; elim H2; intros; exact H4.\n(* neg (S n0) *)\nintros; unfold succZ in |- *; rewrite (tech_mult_negZ n0 y).\nelim (addZ_associativity (multZ (neg n0) y) (oppZ y) y).\nelim (addZ_opposite y I); intros. elim H1; intros; elim H3; intros. rewrite H5.\nsymmetry  in |- *; exact (add_OZ (multZ (neg n0) y)).\nQed.\n\n(*****************)\nLemma mult_predZ_l :\n forall x y : Z, multZ (predZ x) y = addZ (multZ x y) (oppZ y).\n\nProof.\nintros; elim x.\n(* OZ *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos O *)\nsimpl in |- *; symmetry  in |- *.\nelim (addZ_opposite y I); intros. elim H0; intros; elim H2; intros; exact H3.\n(* pos (S n0) *)\nintros; unfold predZ in |- *; rewrite (tech_mult_posZ n0 y).\nelim (addZ_associativity (multZ (pos n0) y) y (oppZ y)).\nelim (addZ_opposite y I); intros. elim H1; intros; elim H3; intros; rewrite H4.\nrewrite (add_OZ (multZ (pos n0) y)); reflexivity.\n(* neg n *)\nintros; reflexivity.\nQed.\n\n(*****************)\n",
                "context_tokens": 737,
                "proof_start_offset": 4109,
                "proof_end_offset": 5383,
                "proof": "Lemma mult_succZ_r : forall x y : Z, multZ x (succZ y) = addZ (multZ x y) x.\nProof.\nintros; elim x.\nreflexivity.\nsimple induction n.\nsymmetry in |- *; exact (add_IZ_succZ y).\nintros y0 H; do 2 rewrite (tech_mult_posZ y0).\nrewrite H; elim (addZ_commutativity (pos y0) (multZ (pos y0) y)).\nelim (addZ_associativity (pos y0) (multZ (pos y0) y) (succZ y)).\nelim (addZ_commutativity (addZ (multZ (pos y0) y) (succZ y)) (pos y0)).\nrewrite (succ_addZ_r (multZ (pos y0) y) y).\nrewrite (succ_addZ_l (addZ (multZ (pos y0) y) y) (pos y0)).\nelim (succ_addZ_r (addZ (multZ (pos y0) y) y) (pos y0)).\nreflexivity.\nsimple induction n.\nsimpl in |- *; rewrite (add_mIZ_predZ (oppZ y)); exact (opp_succZ y).\nintros y0 H; do 2 rewrite (tech_mult_negZ y0).\nelim H; elim (addZ_commutativity (oppZ y) (multZ (neg y0) y)).\nelim (addZ_associativity (oppZ y) (multZ (neg y0) y) (neg (S y0))).\nelim (addZ_commutativity (addZ (multZ (neg y0) y) (neg (S y0))) (oppZ y)).\nrewrite (opp_succZ y).\nrewrite (pred_addZ_r (multZ (neg y0) (succZ y)) (oppZ y)).\nrewrite H; elim (pred_addZ_l (addZ (multZ (neg y0) y) (neg y0)) (oppZ y)).\nelim (pred_addZ_r (multZ (neg y0) y) (neg y0)); unfold predZ in |- *; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma mult_succZ_r : forall x y : Z, multZ x (succZ y) = addZ (multZ x y) x.\nProof.\nintros; elim H0; intros; elim H0; intros; exact H1.\n(* neg n = 0 *)\nsimpl in |- *; reflexivity.\n(* pos n = 0 *)\nsimpl in |- *; reflexivity.\n(* pos n = 0 *)\nsimpl in |- *; reflexivity.\n(* pos n = 0 *)\nsimpl in |- *; reflexivity.\n(* pos n = 0 *)\nsimpl in |- *; reflexivity.\n(* pos n = 0 *)\nsimpl in |- *; reflexivity.\n(* pos n = 0 *)\nsimpl in |- *; reflexivity.\n(* pos n = 0 *)\nsimpl in |- *; reflexivity.\n(* pos n = 0 *)\nsimpl in |- *; reflexivity.\n(* pos n = 0 *)\nsimpl in |- *; reflexivity.\n(* pos n = 0 *)\nsimpl in |- *; reflexivity.\n(* pos n = 0 *)\nsimpl in |- *; reflexivity.\n(* pos n = 0 *)\nsimpl in |- *; reflexivity.\n(* pos n = 0 *)\nsimpl in |- *; reflexivity.\n(* pos n = 0 *)\nsimpl in |- *; reflexivity.\n(* pos n = 0 *)\nsimpl in |- *; reflexivity.\n(* pos n = 0 *)\nsimpl inQed.",
                    "Lemma mult_succZ_r : forall x y : Z, multZ x (succZ y) = addZ (multZ x y) x.\nProof.\nintros; elim H; intros; elim H; intros; exact H0.\n(* neg n0 *)\nintros; elim H; intros; apply H0.\n(* neg n0 *)\nintros; elim H; intros; apply H0.\n(* neg n0 *)\nintros; elim H0; intros; elim H0; intros; exact H0.\n(* neg n0 *)\nintros; elim H; intros; exact H0.\n(* neg n0 *)\nintros; elim H0; intros; exact H1.\n(* neg n0 *)\nintros; elim H; intros; exact H0.\n(* neg n0 *)\nintros; elim H0; intros; exact H0.\n(* neg n0 *)\nintros; elim H; intros; exact H0.\n(* neg n0 *)\nintros; elim H0; intros; exact H0.\n(* neg n0 *)\nintros; elim H0; intros; exact H0.\n(* neg n0 *)\nintros; elim H0; intros; exact H0.\n(* neg n0 *)\nintros; elim H0; intros; exact H1.\n(* neg n0 *)\nQed.",
                    "Lemma mult_succZ_r : forall x y : Z, multZ x (succZ y) = addZ (multZ x y) x.\nProof.\nintros; elim H; intros; elim H; intros; exact H.\n(* neg n = 0 *)\nintros; elim H; intros; elim H; intros; exact H0.\n(* neg n = 0 *)\nintros; elim H; intros; exact H0.\n(* neg n = 0 *)\nintros; elim H; intros; exact H0.\n(* neg n = 0 *)\nintros; elim H; intros; exact H1.\n(* neg n = 0 *)\nintros; elim H; intros; exact H1.\n(* neg n = 0 *)\nintros; elim H; intros; exact H1.\n(* neg n = 0 *)\nintros; elim H; intros; exact H1.\n(* neg n = 0 *)\nintros; elim H; intros; exact H1.\n(* neg n = 0 *)\nintros; elim H; intros; exact H1.\n(* neg n = 0 *)\nintros; elim H; intros; exact H1.\n(* neg n = 0 *)\nintros; elim H; intros; exact H1.\n(* neg n = 0 *)\nintros; elim H; intros; exact H1.\n(* neg nQed.",
                    "Lemma mult_succZ_r : forall x y : Z, multZ x (succZ y) = addZ (multZ x y) x.\nProof.\nintros; elim H; intros; elim H; intros; apply H1; exact H2.\n(* neg n = 0 *)\nintros; elim H; intros; exact H1.\n(* neg n = 0 *)\nintros; elim H; intros; exact H1.\n(* neg n = 0 *)\nintros; elim H; intros; exact H1.\n(* neg n = 0 *)\nintros; elim H; intros; exact H1.\n(* neg n = 0 *)\nintros; elim H; intros; exact H1.\n(* neg n = 0 *)\nintros; elim H; intros; exact H1.\n(* neg n = 0 *)\nintros; elim H; intros; exact H1.\n(* neg n = 0 *)\nintros; elim H; intros; exact H1.\n(* neg n = 0 *)\nintros; elim H; intros; exact H1.\n(* neg n = 0 *)\nintros; elim H; intros; exact H1.\n(* neg n = 0 *)\nintros; elim H; intros; exact H1.\n(* neg n = 0 *)\nintros; elim H; intros; exact H1.\n(* neg nQed.",
                    "Lemma mult_succZ_r : forall x y : Z, multZ x (succZ y) = addZ (multZ x y) x.\nProof.\nintros; elim H; intros; exact H0.\n(* neg n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "\nLemma mult_predZ_l :\n forall x y : Z, multZ (predZ x) y = addZ (multZ x y) (oppZ y).\n\nProof.\nintros; elim x.\n(* OZ *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos O *)\nsimpl in |- *; symmetry  in |- *.\nelim (addZ_opposite y I); intros. elim H0; intros; elim H2; intros; exact H3.\n(* pos (S n0) *)\nintros; unfold predZ in |- *; rewrite (tech_mult_posZ n0 y).\nelim (addZ_associativity (multZ (pos n0) y) y (oppZ y)).\nelim (addZ_opposite y I); intros. elim H1; intros; elim H3; intros; rewrite H4.\nrewrite (add_OZ (multZ (pos n0) y)); reflexivity.\n(* neg n *)\nintros; reflexivity.\nQed.\n\n(*****************)\nLemma mult_succZ_r : forall x y : Z, multZ x (succZ y) = addZ (multZ x y) x.\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nsymmetry  in |- *; exact (add_IZ_succZ y).\n(* pos (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_posZ y0).\nrewrite H; elim (addZ_commutativity (pos y0) (multZ (pos y0) y)).\nelim (addZ_associativity (pos y0) (multZ (pos y0) y) (succZ y)).\nelim (addZ_commutativity (addZ (multZ (pos y0) y) (succZ y)) (pos y0)).\nrewrite (succ_addZ_r (multZ (pos y0) y) y).\nrewrite (succ_addZ_l (addZ (multZ (pos y0) y) y) (pos y0)).\nelim (succ_addZ_r (addZ (multZ (pos y0) y) y) (pos y0)).\nreflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; rewrite (add_mIZ_predZ (oppZ y)); exact (opp_succZ y).\n(* neg (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_negZ y0).\nelim H; elim (addZ_commutativity (oppZ y) (multZ (neg y0) y)).\nelim (addZ_associativity (oppZ y) (multZ (neg y0) y) (neg (S y0))).\nelim (addZ_commutativity (addZ (multZ (neg y0) y) (neg (S y0))) (oppZ y)).\nrewrite (opp_succZ y). \nrewrite (pred_addZ_r (multZ (neg y0) (succZ y)) (oppZ y)).\nrewrite H; elim (pred_addZ_l (addZ (multZ (neg y0) y) (neg y0)) (oppZ y)).\nelim (pred_addZ_r (multZ (neg y0) y) (neg y0)); unfold predZ in |- *;\n reflexivity.\nQed.\n\n(*****************)\n",
                "context_tokens": 734,
                "proof_start_offset": 5405,
                "proof_end_offset": 6761,
                "proof": "Lemma mult_predZ_r : forall x y : Z, multZ x (predZ y) = addZ (multZ x y) (oppZ x).\nProof.\nintros; elim x.\nreflexivity.\nsimple induction n.\nsimpl in |- *; symmetry in |- *; exact (add_mIZ_predZ y).\nintros n0 H; unfold oppZ in |- *; do 2 rewrite (tech_mult_posZ n0).\nrewrite (pred_addZ_r (multZ (pos n0) (predZ y)) y).\nelim (pred_addZ_l (multZ (pos n0) (predZ y)) y).\nelim (addZ_commutativity y (multZ (pos n0) y)).\nelim (addZ_associativity y (multZ (pos n0) y) (neg (S n0))).\nelim (addZ_commutativity (addZ (multZ (pos n0) y) (neg (S n0))) y).\nrewrite H; elim (pred_addZ_r (multZ (pos n0) y) (oppZ (pos n0))).\nreflexivity.\nsimple induction n.\nsimpl in |- *.\nreplace (pos 0) with IZ; auto.\nrewrite (add_IZ_succZ (oppZ y)).\nexact (opp_predZ y).\nintros n0 H; do 2 rewrite (tech_mult_negZ n0).\nrewrite H; rewrite (opp_predZ y).\nelim (addZ_commutativity (oppZ (neg n0)) (multZ (neg n0) y)).\nelim (addZ_associativity (oppZ (neg n0)) (multZ (neg n0) y) (succZ (oppZ y))).\nelim (addZ_commutativity (addZ (multZ (neg n0) y) (succZ (oppZ y))) (oppZ (neg n0))).\nrewrite (succ_addZ_r (multZ (neg n0) y) (oppZ y)).\nrewrite (succ_addZ_l (addZ (multZ (neg n0) y) (oppZ y)) (oppZ (neg n0))).\nelim (succ_addZ_r (addZ (multZ (neg n0) y) (oppZ y)) (oppZ (neg n0))).\nreflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma mult_predZ_r : forall x y : Z, multZ x (predZ y) = addZ (multZ x y) (oppZ x).\nProof.\nintros x y; do 2 rewrite (tech_mult_pos x y).\nrewrite (tech_mult_Z (Z y0) (pos y0) (pos y0)).\nrewrite (tech_mult_Z (Z y0) (pos y0) (pos y0)).\nrewrite (tech_mult_Z (Z y0) (pos y0) (pos y0) (pos y0)).\nrewrite (tech_mult_Z (Z y0) (pos y0) (pos y0) (pos y0) (pos y0)).\nrewrite (tech_mult_Z (Z y0) (pos y0) (pos y0)) (pos y0)).\nrewrite (tech_mult_Z (Z y0) (pos y0) (pos y0)) (pos y0)).\nrewrite (tech_mult_Z (Z y0) (pos y0) (pos y0) (pos y0)).\nrewrite (tech_mult_Z y0) (pos y0) (pos y0) (pos y0)).\nrewrite (tech_mult_Z y0) (pos y0) (pos yQed.",
                    "Lemma mult_predZ_r : forall x y : Z, multZ x (predZ y) = addZ (multZ x y) (oppZ x).\nintros x y H; do 2 rewrite (tech_mult_Z y (Z y0) (pos x) y).\nelim (archimed_right (Z y0) (pos y0) (pos y0) (pos y0) (pos y0)).\nelim (archimed_right (Z y0) (pos y0) (pos y0)) (pos y0)).\nelim (archimed_right (Z y0) (pos y0) (pos y0) (pos y0) (pos y0) (pos y0) (pos y0) (pos y0)) (pos y0)).\nelim (archimed_right (Z y0) (pos y0) (pos y0) (pos y0) (pos y0) (pos y0) (pos y0)) (pos y0)).\nelim (archimed_left (Z y0) (pos y0) (pos y0) (pos y0) (pos y0)) (pos y0)).\nelim (archimed_right (Z y0) (pos y0) (pos y0) (pos y0) (pos y0) (pos y0) (pos yQed.",
                    "Lemma mult_predZ_r : forall x y : Z, multZ x (predZ y) = addZ (multZ x y) (oppZ x).\nProof.\nintros; elim (archimed_comm (Z y0) (pos y0)).\nelim (archimed_comm (Z y0) (pos y0)) (pos y0)).\nelim (archimed_comm (Z y0) (pos y0) (pos y0)) (pos y0)).\nelim (archimed_comm (Z y0) (pos y0) (pos y0)) (pos y0)) (pos y0)).\nelim (archimed_comm (Z y0) (pos y0)) (pos y0)).\nelim (archimed_comm (Z y0) (pos y0) (pos y0) (pos y0) (pos y0)) (pos y0)).\nelim (archimed_comm (Z y0) (pos y0) (pos y0) (pos y0)) (pos y0)) (pos y0)) (pos y0)).\nelim (archimed_comm (Z y0) (pos y0) (pos y0) (pos y0)) (pos y0)) (pos y0)).\nelim (archimed_comm (Z y0) (pos y0) (pos y0) (posQed.",
                    "Lemma mult_predZ_r : forall x y : Z, multZ x (predZ y) = addZ (multZ x y) (oppZ x).\nProof.\nintros x y H; do 2 rewrite (tech_mult_Z (Z y0) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp x) (Z.opp xQed.",
                    "Lemma mult_predZ_r : forall x y : Z, multZ x (predZ y) = addZ (multZ x y) (oppZ x).\nProof.\nintros; apply mult_pos_r.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": " *)\nintros y0 H; do 2 rewrite (tech_mult_negZ y0).\nelim H; elim (addZ_commutativity (oppZ y) (multZ (neg y0) y)).\nelim (addZ_associativity (oppZ y) (multZ (neg y0) y) (neg (S y0))).\nelim (addZ_commutativity (addZ (multZ (neg y0) y) (neg (S y0))) (oppZ y)).\nrewrite (opp_succZ y). \nrewrite (pred_addZ_r (multZ (neg y0) (succZ y)) (oppZ y)).\nrewrite H; elim (pred_addZ_l (addZ (multZ (neg y0) y) (neg y0)) (oppZ y)).\nelim (pred_addZ_r (multZ (neg y0) y) (neg y0)); unfold predZ in |- *;\n reflexivity.\nQed.\n\n(*****************)\nLemma mult_predZ_r :\n forall x y : Z, multZ x (predZ y) = addZ (multZ x y) (oppZ x).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nsimpl in |- *; symmetry  in |- *; exact (add_mIZ_predZ y).\n(* pos (S n0) *)\nintros n0 H; unfold oppZ in |- *; do 2 rewrite (tech_mult_posZ n0).\nrewrite (pred_addZ_r (multZ (pos n0) (predZ y)) y).\nelim (pred_addZ_l (multZ (pos n0) (predZ y)) y).\nelim (addZ_commutativity y (multZ (pos n0) y)).\nelim (addZ_associativity y (multZ (pos n0) y) (neg (S n0))).\nelim (addZ_commutativity (addZ (multZ (pos n0) y) (neg (S n0))) y).\nrewrite H; elim (pred_addZ_r (multZ (pos n0) y) (oppZ (pos n0))).\nreflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *.\nreplace (pos 0) with IZ; auto.\nrewrite (add_IZ_succZ (oppZ y)).\nexact (opp_predZ y).\n(* neg (S n0) *)\nintros n0 H; do 2 rewrite (tech_mult_negZ n0).\nrewrite H; rewrite (opp_predZ y).\nelim (addZ_commutativity (oppZ (neg n0)) (multZ (neg n0) y)).\nelim (addZ_associativity (oppZ (neg n0)) (multZ (neg n0) y) (succZ (oppZ y))).\nelim\n (addZ_commutativity (addZ (multZ (neg n0) y) (succZ (oppZ y)))\n    (oppZ (neg n0))).\nrewrite (succ_addZ_r (multZ (neg n0) y) (oppZ y)).\nrewrite (succ_addZ_l (addZ (multZ (neg n0) y) (oppZ y)) (oppZ (neg n0))).\nelim (succ_addZ_r (addZ (multZ (neg n0) y) (oppZ y)) (oppZ (neg n0))).\nreflexivity.\nQed.\n\n(************)\n",
                "context_tokens": 750,
                "proof_start_offset": 6778,
                "proof_end_offset": 7151,
                "proof": "Lemma mult_OZ : forall x : Z, multZ x OZ = OZ.\nProof.\nsimple destruct x.\nreflexivity.\nsimple induction n.\nreflexivity.\nintros y H; rewrite (tech_mult_posZ y OZ); rewrite H; reflexivity.\nsimple induction n.\nreflexivity.\nintros y H; rewrite (tech_mult_negZ y OZ); rewrite H; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma mult_OZ : forall x : Z, multZ x OZ = OZ.\nProof.\nintros x; do 2 rewrite (tech_oppZ (Z y) (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Qed.",
                    "Lemma mult_OZ : forall x : Z, multZ x OZ = OZ.\nintros; elim (pred_predn (Z y) (Z_pos y)).\nelim (Z_pos y).\nintros; elim (Z_pos y).\nintros; elim (Z_pos y).\nintros; elim (Z_pos y).\nintros; elim (Z_pos y).\nintros; elim (Z_pos y).\nintros; elim (Z_pos y).\nintros; elim (Z_pos y).\nintros; elim (Z_pos y).\nintros; elim (Z_pos y).\nintros; elim (Z_pos y).\nintros; elim (Z_pos y).\nintros; elim (Z_pos y).\nintros; elim (Z_pos y).\nintros; elim (Z_pos y).\nintros; elim (Z_pos y).\nintros; elim (Z_pos y).\nintros; elim (Z_pos y).\nintros; elim (Z_pos y).\nintros; elim (Z_pos y).\nintros; elim (Z_pos y).\nintros; elim (Z_pos y).\nintros; elim (Z_pos y).\nintros; elim (Z_pos y).Qed.",
                    "Lemma mult_OZ : forall x : Z, multZ x OZ = OZ.\nintros; elim (mult_Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z n0) y) (Zpos y)) (pos y))).\nelim (Zle_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z n0) y) (Zpos y)))\n    (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z n0) y) (Zpos y)))\n    (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Z_mult (Qed.",
                    "Lemma mult_OZ : forall x : Z, multZ x OZ = OZ.\nProof.\nintros x; elim (Req_dec x 0); auto.\nQed.",
                    "Lemma mult_OZ : forall x : Z, multZ x OZ = OZ.\nProof.\nintros; elim (pred_predn_r x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nrewrite (mult_comm x).\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "oppZ y)).\nrewrite H; elim (pred_addZ_l (addZ (multZ (neg y0) y) (neg y0)) (oppZ y)).\nelim (pred_addZ_r (multZ (neg y0) y) (neg y0)); unfold predZ in |- *;\n reflexivity.\nQed.\n\n(*****************)\nLemma mult_predZ_r :\n forall x y : Z, multZ x (predZ y) = addZ (multZ x y) (oppZ x).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nsimpl in |- *; symmetry  in |- *; exact (add_mIZ_predZ y).\n(* pos (S n0) *)\nintros n0 H; unfold oppZ in |- *; do 2 rewrite (tech_mult_posZ n0).\nrewrite (pred_addZ_r (multZ (pos n0) (predZ y)) y).\nelim (pred_addZ_l (multZ (pos n0) (predZ y)) y).\nelim (addZ_commutativity y (multZ (pos n0) y)).\nelim (addZ_associativity y (multZ (pos n0) y) (neg (S n0))).\nelim (addZ_commutativity (addZ (multZ (pos n0) y) (neg (S n0))) y).\nrewrite H; elim (pred_addZ_r (multZ (pos n0) y) (oppZ (pos n0))).\nreflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *.\nreplace (pos 0) with IZ; auto.\nrewrite (add_IZ_succZ (oppZ y)).\nexact (opp_predZ y).\n(* neg (S n0) *)\nintros n0 H; do 2 rewrite (tech_mult_negZ n0).\nrewrite H; rewrite (opp_predZ y).\nelim (addZ_commutativity (oppZ (neg n0)) (multZ (neg n0) y)).\nelim (addZ_associativity (oppZ (neg n0)) (multZ (neg n0) y) (succZ (oppZ y))).\nelim\n (addZ_commutativity (addZ (multZ (neg n0) y) (succZ (oppZ y)))\n    (oppZ (neg n0))).\nrewrite (succ_addZ_r (multZ (neg n0) y) (oppZ y)).\nrewrite (succ_addZ_l (addZ (multZ (neg n0) y) (oppZ y)) (oppZ (neg n0))).\nelim (succ_addZ_r (addZ (multZ (neg n0) y) (oppZ y)) (oppZ (neg n0))).\nreflexivity.\nQed.\n\n(************)\nLemma mult_OZ : forall x : Z, multZ x OZ = OZ.\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nreflexivity.\n(* pos (S y) *)\nintros y H; rewrite (tech_mult_posZ y OZ); rewrite H; reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nreflexivity.\n(* neg (S y) *)\nintros y H; rewrite (tech_mult_negZ y OZ); rewrite H; reflexivity.\nQed.\n\n(************)\n",
                "context_tokens": 750,
                "proof_start_offset": 7168,
                "proof_end_offset": 7648,
                "proof": "Lemma mult_IZ : forall x : Z, multZ x IZ = x.\nProof.\nsimple destruct x.\nreflexivity.\nsimple induction n.\nreflexivity.\nintros y H; rewrite (tech_mult_posZ y IZ); rewrite H.\nrewrite (add_IZ_succZ (pos y)); reflexivity.\nsimple induction n.\nreflexivity.\nintros y H; rewrite (tech_mult_negZ y IZ); rewrite H; unfold IZ in |- *; unfold oppZ in |- *.\nrewrite (add_mIZ_predZ (neg y)); reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma mult_IZ : forall x : Z, multZ x IZ = x.\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)simple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)simple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\nQed.",
                    "Lemma mult_IZ : forall x : Z, multZ x IZ = x.\nsimple induction n.\n(* neg *)\nintros x y H; rewrite (tech_mult_Z (Z x) (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (Z.abs (ZQed.",
                    "Lemma mult_IZ : forall x : Z, multZ x IZ = x.\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)simple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)Qed.",
                    "Lemma mult_IZ : forall x : Z, multZ x IZ = x.\nsimple induction n.\n(* pos (S y) *)\nsimple induction n.\nintros n0 H; rewrite (tech_mult_Z (Z_pos (nat (pos n0) y)).\nrewrite (tech_mult_Z (Z_pos (nat (pos n0) y)) (pos y)).\nrewrite (tech_mult_Z (Z_pos (nat (pos n0) y)).\nrewrite (tech_mult_Z (Z_pos (nat (pos n0) y)).\nrewrite (tech_mult_Z (Z_pos (nat (nat (pos n0) y))).\nrewrite (tech_mult_Z (Z_pos (nat (nat (pos n0) y))).\nrewrite (tech_mult_Z (Z_pos (nat (pos n0) y)).\nrewrite (tech_mult_Z (Z_pos (nat (nat (pos n0) y))).\nrewrite (tech_mult_Z (Z_pos (nat (nat (pos n0) y)).\nrewrite (tech_mult_Z (Z_pos (nat (nat (pos n0) y))).\nrewrite (tech_mult_Z (Qed.",
                    "Lemma mult_IZ : forall x : Z, multZ x IZ = x.\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)simple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.Qed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": " in |- *; do 2 rewrite (tech_mult_posZ n0).\nrewrite (pred_addZ_r (multZ (pos n0) (predZ y)) y).\nelim (pred_addZ_l (multZ (pos n0) (predZ y)) y).\nelim (addZ_commutativity y (multZ (pos n0) y)).\nelim (addZ_associativity y (multZ (pos n0) y) (neg (S n0))).\nelim (addZ_commutativity (addZ (multZ (pos n0) y) (neg (S n0))) y).\nrewrite H; elim (pred_addZ_r (multZ (pos n0) y) (oppZ (pos n0))).\nreflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *.\nreplace (pos 0) with IZ; auto.\nrewrite (add_IZ_succZ (oppZ y)).\nexact (opp_predZ y).\n(* neg (S n0) *)\nintros n0 H; do 2 rewrite (tech_mult_negZ n0).\nrewrite H; rewrite (opp_predZ y).\nelim (addZ_commutativity (oppZ (neg n0)) (multZ (neg n0) y)).\nelim (addZ_associativity (oppZ (neg n0)) (multZ (neg n0) y) (succZ (oppZ y))).\nelim\n (addZ_commutativity (addZ (multZ (neg n0) y) (succZ (oppZ y)))\n    (oppZ (neg n0))).\nrewrite (succ_addZ_r (multZ (neg n0) y) (oppZ y)).\nrewrite (succ_addZ_l (addZ (multZ (neg n0) y) (oppZ y)) (oppZ (neg n0))).\nelim (succ_addZ_r (addZ (multZ (neg n0) y) (oppZ y)) (oppZ (neg n0))).\nreflexivity.\nQed.\n\n(************)\nLemma mult_OZ : forall x : Z, multZ x OZ = OZ.\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nreflexivity.\n(* pos (S y) *)\nintros y H; rewrite (tech_mult_posZ y OZ); rewrite H; reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nreflexivity.\n(* neg (S y) *)\nintros y H; rewrite (tech_mult_negZ y OZ); rewrite H; reflexivity.\nQed.\n\n(************)\nLemma mult_IZ : forall x : Z, multZ x IZ = x.\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nreflexivity.\n(* pos (S y) *)\nintros y H; rewrite (tech_mult_posZ y IZ); rewrite H. \nrewrite (add_IZ_succZ (pos y)); reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nreflexivity.\n(* neg (S y) *)\nintros y H; rewrite (tech_mult_negZ y IZ); rewrite H; unfold IZ in |- *;\n unfold oppZ in |- *. \nrewrite (add_mIZ_predZ (neg y)); reflexivity.\nQed.\n\n(*************)\n",
                "context_tokens": 744,
                "proof_start_offset": 7666,
                "proof_end_offset": 8216,
                "proof": "Lemma mult_mIZ : forall x : Z, multZ x (neg 0) = oppZ x.\nProof.\nsimple destruct x.\nreflexivity.\nsimple induction n.\nreflexivity.\nintros y H; rewrite (tech_mult_posZ y (neg 0)); rewrite H.\nrewrite (add_mIZ_predZ (oppZ (pos y))); reflexivity.\nsimple induction n.\nreflexivity.\nintros y H; rewrite (tech_mult_negZ y (neg 0)); rewrite H.\nelim (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity (neg y) (neg 0) I I).\nrewrite (add_mIZ_predZ (neg y)); reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma mult_mIZ : forall x : Z, multZ x (neg 0) = oppZ x.\nsimple induction n.\n(* pos *)\nsimple induction n.\nintros x H; rewrite (tech_mult_Z_pos y); reflexivity.\n(* pos (S y) *)\nsimple induction n.\nintros x H; rewrite (tech_mult_Z y); reflexivity.\n(* pos (S y) *)\nsimple induction n.\nintros y H; rewrite (tech_mult_Z y (pos y) (pos y)); reflexivity.\n(* pos (S y) *)\nsimple induction n.\nintros x H; rewrite (tech_mult_Z y (pos y) (pos y)); reflexivity.\n(* pos (S y) *)\nsimple induction n.\nintros x H; rewrite (tech_mult_Z y (pos y) (pos y) (pos y)); reflexivity.\n(* pos (S y) *)\nsimple induction n.\nintros x H; rewrite (tech_mult_Z y (pos y) (pos y) (pos y)); reflexivity.\n(* pos (S y) *)\nsimple induction n.\nintros x H; rewrite (tech_mult_Z x y (pos y) (pos y) (pos y)); reflexivity.\n(*Qed.",
                    "Lemma mult_mIZ : forall x : Z, multZ x (neg 0) = oppZ x.\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction nQed.",
                    "Lemma mult_mIZ : forall x : Z, multZ x (neg 0) = oppZ x.\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos (S x) *)\nsimple induction n.\n(* pos (S x) *)\nsimple induction n.\n(* pos (S x) *)\nsimple induction n.\n(* pos (S x) *)\nsimple induction n.\n(* pos (S x) *)\nsimple induction n.\n(* pos (S x) *)\nsimple induction n.\n(* pos (S x) *)\nsimple induction n.\n(* pos (S x) *)\nsimple induction n.\n(* pos (S x) *)\nsimple induction n.\n(* pos (S x) *)simple induction n.\n(* pos (S x) *)\nsimple induction n.\n(* pos (S x) *)\nsimple induction n.\n(* pos (S x) *)\nsimple induction n.\n(* pos (S x) *)\nsimple induction n.\n(* pos (S x) *)\nsimple induction n.\n(* pos (S x) *)simple induction n.\n(* pos (S x) *)simple induction n.\n(* pos (S x) *)simple induction n.\n(* pos (S x) *)simple induction n.Qed.",
                    "Lemma mult_mIZ : forall x : Z, multZ x (neg 0) = oppZ x.\nsimple induction n.\n(* pos n *)\nsimple induction n.\nintros n.\nsimple induction n.\n(* pos n *)\nsimple induction n.\nintros.\napply (le_trans (pos (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (pos n0) (Qed.",
                    "Lemma mult_mIZ : forall x : Z, multZ x (neg 0) = oppZ x.\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\nintros x H; rewrite (tech_mult_Z x 0); rewrite H; reflexivity.\n(* neg n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* posQed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zle.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zle.v                                   *)\n(****************************************************************************)\nRequire Export Arith.\nRequire Export misc.\nRequire Export groups.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\nRequire Export Zadd.\n\n(**************)\n(* order on Z *)\n(**************)\n\n(************)\nDefinition leZ (x y : Z) :=\n  match x return Prop with\n  | OZ =>\n      match y return Prop with\n      | OZ => True\n      | pos n => True\n      | neg n => False\n      end\n  | pos n =>\n      match y return Prop with\n      | OZ => False\n      | pos m => n <= m\n      | neg m => False\n      end\n  | neg n =>\n      match y return Prop with\n      | OZ => True\n      | pos m => True\n      | neg m => m <= n\n      end\n  end.\n\n(**************)\n",
                "context_tokens": 272,
                "proof_start_offset": 1823,
                "proof_end_offset": 1986,
                "proof": "Lemma sign_absZ : forall x : Z, leZ OZ (absZ x).\nProof.\nintros; elim x; simpl in |- *.\nexact I.\nintro; simpl in |- *.\nexact I.\nintro; simpl in |- *.\nexact I.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma sign_absZ : forall x : Z, leZ OZ (absZ x).\nProof.\n  unfold sign_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_Z, zero_abs_ZQed.",
                    "Lemma sign_absZ : forall x : Z, leZ OZ (absZ x).\nProof.\n  intros x y H.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_Z.\n  apply sign_abs_ZQed.",
                    "Lemma sign_absZ : forall x : Z, leZ OZ (absZ x).\nProof.\nintros x y H.\nunfold neg in |- *.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nelim H.\nQed.",
                    "Lemma sign_absZ : forall x : Z, leZ OZ (absZ x).\nProof.\nintros x y H0.\nunfold neg in |- *.\nunfold neg in |- *.\nintros x y H0.\nunfold neg in |- *.\nintros x y H0.\nunfold neg in |- *.\nintros x y H0.\nunfold neg in |- *.\nintros x y H0.\nunfold neg in |- *.\nintros x y H0.\nunfold neg in |- *.\nintros x y H0.\nunfold neg in |- *.\nintros x y H0.\nunfold neg in |- *.\nintros x y H0.\nunfold neg in |- *.\nintros x y H0.\nunfold neg in |- *.\nintros x y H0.\nunfold neg in |- *.\nintros x y H0.\nunfold neg in |- *.\nintros x y H0.\nunfold neg in |- *.\nintros x y H0.\nunfold neg in |- *.\nintros x y H0.\nunfold neg in |- *.\nintros x y H0 H0.\nunfold neg in |- *.\nintros x y H0.\nunfold neg in |- *.\nintros x y H0.\nunfold neg in |- *.\nintros x y H0 H1.\nunfoldQed.",
                    "Lemma sign_absZ : forall x : Z, leZ OZ (absZ x).\nProof.\n  unfold sign_abs_Z.\n  unfold sign_abs_Z.\n  unfold sign_abs_Z.\n  unfold sign_abs_Z.\n  unfold sign_abs_Z.\n  unfold sign_abs_Z.\n  unfold sign_abs_Z.\n  unfold sign_abs_Z.\n  unfold sign_abs_Z.\n  unfold sign_abs_Z.\n  unfold sign_abs_Z.\n  unfold sign_abs_Z.\n  unfold sign_abs_Z.\n  unfold sign_Z.\n  unfold sign_abs_Z.\n  unfold sign_Z.\n  unfold sign_abs_Z.\n  unfold sign_Z.\n  unfold sign_abs_Z.\n  unfold sign_Z.\n  unfold sign_abs_Z.\n  unfold sign_Z.\n  unfold sign_Z.\n  unfold sign_abs_Z.\n  unfold sign_Z.\n  unfold sign_Z.\n  unfold sign_Z.\n  unfold sign_Z.\n  unfold sign_abs_Z.\n  unfold sign_Z.\n  unfold sign_abs_Z.\n  unfold sign_Z.\n  unfold sign_Z.\n  unfold sign_Z.\n  unfold sign_Z.\n  unfold signQed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zle.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zle.v                                   *)\n(****************************************************************************)\nRequire Export Arith.\nRequire Export misc.\nRequire Export groups.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\nRequire Export Zadd.\n\n(**************)\n(* order on Z *)\n(**************)\n\n(************)\nDefinition leZ (x y : Z) :=\n  match x return Prop with\n  | OZ =>\n      match y return Prop with\n      | OZ => True\n      | pos n => True\n      | neg n => False\n      end\n  | pos n =>\n      match y return Prop with\n      | OZ => False\n      | pos m => n <= m\n      | neg m => False\n      end\n  | neg n =>\n      match y return Prop with\n      | OZ => True\n      | pos m => True\n      | neg m => m <= n\n      end\n  end.\n\n(**************)\nLemma sign_absZ : forall x : Z, leZ OZ (absZ x).\n\nProof.\nintros; elim x; simpl in |- *. exact I. intro; simpl in |- *. exact I. intro; simpl in |- *. exact I.\nQed.\n\n(********************)\n",
                "context_tokens": 333,
                "proof_start_offset": 2011,
                "proof_end_offset": 2188,
                "proof": "Lemma tech_le_pos_abs : forall x : Z, leZ OZ x -> absZ x = x.\nProof.\nintros x; elim x.\nunfold absZ in |- *; reflexivity.\nunfold absZ in |- *; reflexivity.\nintros; elim H.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma tech_le_pos_abs : forall x : Z, leZ OZ x -> absZ x = x.\nProof.\nintros; elim x; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact IQed.",
                    "Lemma tech_le_pos_abs : forall x : Z, leZ OZ x -> absZ x = x.\nProof.\nintros; elim x; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact IQed.",
                    "Lemma tech_le_pos_abs : forall x : Z, leZ OZ x -> absZ x = x.\nProof.\nintros; elim x; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact IQed.",
                    "Lemma tech_le_pos_abs : forall x : Z, leZ OZ x -> absZ x = x.\nProof.\nintros; elim x; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact IQed.",
                    "Lemma tech_le_pos_abs : forall x : Z, leZ OZ x -> absZ x = x.\nProof.\nintros; elim x; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact I. intro; simpl in |- *.\nexact IQed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zle.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zle.v                                   *)\n(****************************************************************************)\nRequire Export Arith.\nRequire Export misc.\nRequire Export groups.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\nRequire Export Zadd.\n\n(**************)\n(* order on Z *)\n(**************)\n\n(************)\nDefinition leZ (x y : Z) :=\n  match x return Prop with\n  | OZ =>\n      match y return Prop with\n      | OZ => True\n      | pos n => True\n      | neg n => False\n      end\n  | pos n =>\n      match y return Prop with\n      | OZ => False\n      | pos m => n <= m\n      | neg m => False\n      end\n  | neg n =>\n      match y return Prop with\n      | OZ => True\n      | pos m => True\n      | neg m => m <= n\n      end\n  end.\n\n(**************)\nLemma sign_absZ : forall x : Z, leZ OZ (absZ x).\n\nProof.\nintros; elim x; simpl in |- *. exact I. intro; simpl in |- *. exact I. intro; simpl in |- *. exact I.\nQed.\n\n(********************)\nLemma tech_le_pos_abs : forall x : Z, leZ OZ x -> absZ x = x.\n\nProof.\nintros x; elim x. \nunfold absZ in |- *; reflexivity. unfold absZ in |- *; reflexivity. intros; elim H.\nQed.\n\n(************************)\n",
                "context_tokens": 398,
                "proof_start_offset": 2217,
                "proof_end_offset": 2811,
                "proof": "Theorem leZ_antisymmetric : antisym Z leZ.\nProof.\nunfold antisym in |- *; intros x y; elim x.\nelim y.\nreflexivity.\nintros; elim H0.\nintros; elim H.\nintros n; elim y.\nintros; elim H.\nsimpl in |- *; intros; elim (le_antisym n n0 H H0); reflexivity.\nintros; elim H.\nintros n; elim y.\nintros; elim H0.\nintros; elim H0.\nsimpl in |- *; intros; elim (le_antisym n0 n H H0); reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem leZ_antisymmetric : antisym Z leZ.\nProof.\nunfold absZ in |- *; reflexivity.\nQed.",
                    "Theorem leZ_antisymmetric : antisym Z leZ.\nProof.\nintros x; elim x. \nunfold absZ in |- *; reflexivity.\nQed.",
                    "Theorem leZ_antisymmetric : antisym Z leZ.\nProof.\nunfold absZ in |- *; reflexivity.\nQed.",
                    "Theorem leZ_antisymmetric : antisym Z leZ.\nProof.\nintros x y; elim x. \nunfold absZ in |- *; reflexivity.\nQed.",
                    "Theorem leZ_antisymmetric : antisym Z leZ.\nProof.\nintros x; elim x; simpl in |- *.\napply sym_eq; assumption.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zle.v",
                "context": "     *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zle.v                                   *)\n(****************************************************************************)\nRequire Export Arith.\nRequire Export misc.\nRequire Export groups.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\nRequire Export Zadd.\n\n(**************)\n(* order on Z *)\n(**************)\n\n(************)\nDefinition leZ (x y : Z) :=\n  match x return Prop with\n  | OZ =>\n      match y return Prop with\n      | OZ => True\n      | pos n => True\n      | neg n => False\n      end\n  | pos n =>\n      match y return Prop with\n      | OZ => False\n      | pos m => n <= m\n      | neg m => False\n      end\n  | neg n =>\n      match y return Prop with\n      | OZ => True\n      | pos m => True\n      | neg m => m <= n\n      end\n  end.\n\n(**************)\nLemma sign_absZ : forall x : Z, leZ OZ (absZ x).\n\nProof.\nintros; elim x; simpl in |- *. exact I. intro; simpl in |- *. exact I. intro; simpl in |- *. exact I.\nQed.\n\n(********************)\nLemma tech_le_pos_abs : forall x : Z, leZ OZ x -> absZ x = x.\n\nProof.\nintros x; elim x. \nunfold absZ in |- *; reflexivity. unfold absZ in |- *; reflexivity. intros; elim H.\nQed.\n\n(************************)\nTheorem leZ_antisymmetric : antisym Z leZ.\n\nProof.\nunfold antisym in |- *; intros x y; elim x.\n(* OZ *)\nelim y.\n(* OZ OZ *)\nreflexivity.\n(* OZ (pos n) *)\nintros; elim H0.\n(* OZ (neg n) *)\nintros; elim H.\n(* (pos n) *)\nintros n; elim y.\n(* (pos n) OZ *)\nintros; elim H.\n(* (pos n) (pos n0) *)\nsimpl in |- *; intros; elim (le_antisym n n0 H H0); reflexivity.\n(* (pos n) (neg n0) *)\nintros; elim H.\n(* (neg n) *)\nintros n; elim y.\n(* (neg n) OZ *)\nintros; elim H0.\n(* (neg n) (pos n0) *)\nintros; elim H0.\n(* (neg n) (neg n0) *)\nsimpl in |- *; intros; elim (le_antisym n0 n H H0); reflexivity.\nQed.\n\n(************)\nDefinition ltZ (x y : Z) := leZ (succZ x) y.\n\n(****************)\nDefinition lt_absZ (x y : Z) := ltZ (absZ x) (absZ y).\n\n(*******************)\n",
                "context_tokens": 627,
                "proof_start_offset": 2971,
                "proof_end_offset": 3345,
                "proof": "Lemma tech_lt_abs_OZ : forall x : Z, lt_absZ x (pos 0) -> x = OZ.\nProof.\nsimple induction x.\nreflexivity.\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *; unfold leZ in |- *; intros.\nelim (le_Sn_O n H).\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *; unfold leZ in |- *; intros.\nelim (le_Sn_O n H).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma tech_lt_abs_OZ : forall x : Z, lt_absZ x (pos 0) -> x = OZ.\nProof.\nintros x; elim H.\n(* (pos n) *)\nintros; elim H.\n(* (pos n) *)\nintros; elim H.\n(* (pos n) *)\nintros; elim H.\n(* (pos n) *)\nintros; elim H.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim HQed.",
                    "Lemma tech_lt_abs_OZ : forall x : Z, lt_absZ x (pos 0) -> x = OZ.\nProof.\nintros x y; elim H; simpl in |- *; reflexivity.\n(* (neg n) *)\nintros; elim H0.\n(* (neg n) *)\nintros; elim H0.\n(* (neg n) *)\nintros; elim H0.\n(* (neg n) *)\nintros; elim H1.\n(* (neg n) *)\nintros; elim H1.\n(* (neg n) *)\nintros; elim H0.\n(* (neg n) *)\nintros; elim H1.\n(* (neg n) *)\nintros; elim H1.\n(* (neg n) *)\nintros; elim H1.\n(* (neg n) *)\nintros; elim H1.\n(* (neg n) *)\nintros; elim H1.\n(* (neg n) *)\nintros; elim H1.\n(* (neg n) *)\nintros; elim H1.\n(* (neg n) *)\nintros; elim H1.\n(* (neg n) *)\nintros; elim H1.\n(* (neg n) *)\nintros; elim H1.\n(* (neg n) *)\nintros; elim H1.\nQed.",
                    "Lemma tech_lt_abs_OZ : forall x : Z, lt_absZ x (pos 0) -> x = OZ.\nProof.\nintros; elim H.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintrosQed.",
                    "Lemma tech_lt_abs_OZ : forall x : Z, lt_absZ x (pos 0) -> x = OZ.\nProof.\nintros x y; elim H.\n(* (pos n) *)\nintros; elim H.\n(* (pos n) *)\nintros; elim H.\n(* (pos n) *)\nintros; elim H.\n(* (pos n) *)\nintros; elim H.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elimQed.",
                    "Lemma tech_lt_abs_OZ : forall x : Z, lt_absZ x (pos 0) -> x = OZ.\nProof.\nintros; elim H.\n(* (pos n) *)\nintros; elim H.\n(* (pos n) *)\nintros; elim H.\n(* (pos n) *)\nintros; elim H.\n(* (pos n) *)\nintros; elim H.\n(* (pos n) *)\nintros; elim H.\n(* (pos n) *)\nintros; elim H.\n(* (pos n) *)\nintros; elim H.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H1.\n(*Qed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zle.v",
                "context": "************)\n(*                                  Zle.v                                   *)\n(****************************************************************************)\nRequire Export Arith.\nRequire Export misc.\nRequire Export groups.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\nRequire Export Zadd.\n\n(**************)\n(* order on Z *)\n(**************)\n\n(************)\nDefinition leZ (x y : Z) :=\n  match x return Prop with\n  | OZ =>\n      match y return Prop with\n      | OZ => True\n      | pos n => True\n      | neg n => False\n      end\n  | pos n =>\n      match y return Prop with\n      | OZ => False\n      | pos m => n <= m\n      | neg m => False\n      end\n  | neg n =>\n      match y return Prop with\n      | OZ => True\n      | pos m => True\n      | neg m => m <= n\n      end\n  end.\n\n(**************)\nLemma sign_absZ : forall x : Z, leZ OZ (absZ x).\n\nProof.\nintros; elim x; simpl in |- *. exact I. intro; simpl in |- *. exact I. intro; simpl in |- *. exact I.\nQed.\n\n(********************)\nLemma tech_le_pos_abs : forall x : Z, leZ OZ x -> absZ x = x.\n\nProof.\nintros x; elim x. \nunfold absZ in |- *; reflexivity. unfold absZ in |- *; reflexivity. intros; elim H.\nQed.\n\n(************************)\nTheorem leZ_antisymmetric : antisym Z leZ.\n\nProof.\nunfold antisym in |- *; intros x y; elim x.\n(* OZ *)\nelim y.\n(* OZ OZ *)\nreflexivity.\n(* OZ (pos n) *)\nintros; elim H0.\n(* OZ (neg n) *)\nintros; elim H.\n(* (pos n) *)\nintros n; elim y.\n(* (pos n) OZ *)\nintros; elim H.\n(* (pos n) (pos n0) *)\nsimpl in |- *; intros; elim (le_antisym n n0 H H0); reflexivity.\n(* (pos n) (neg n0) *)\nintros; elim H.\n(* (neg n) *)\nintros n; elim y.\n(* (neg n) OZ *)\nintros; elim H0.\n(* (neg n) (pos n0) *)\nintros; elim H0.\n(* (neg n) (neg n0) *)\nsimpl in |- *; intros; elim (le_antisym n0 n H H0); reflexivity.\nQed.\n\n(************)\nDefinition ltZ (x y : Z) := leZ (succZ x) y.\n\n(****************)\nDefinition lt_absZ (x y : Z) := ltZ (absZ x) (absZ y).\n\n(*******************)\nLemma tech_lt_abs_OZ : forall x : Z, lt_absZ x (pos 0) -> x = OZ.\n\nProof.\nsimple induction x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *;\n unfold leZ in |- *; intros. \nelim (le_Sn_O n H).\n(* neg n *)\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *;\n unfold leZ in |- *; intros. \nelim (le_Sn_O n H).\nQed.\n\n(*******************)\n",
                "context_tokens": 742,
                "proof_start_offset": 3369,
                "proof_end_offset": 3510,
                "proof": "Lemma tech_posOZ_pos : forall n : nat, leZ OZ (posOZ n).\nProof.\nintros; elim n.\nsimpl in |- *; exact I.\nsimpl in |- *; intros; exact I.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma tech_posOZ_pos : forall n : nat, leZ OZ (posOZ n).\nProof.\nsimple induction n.\nsimpl in |- *; unfold lt_Z in |- *; unfold gtZ in |- *; intros; elim (le_Sn_O n).\n(* pos n = 0 *)\nintros; elim (le_Sn_O n H).\n(* pos n = 0 *)\nintros; elim (le_Sn_O n H).\n(* pos n = 0 *)\nintros; elim (le_Sn_O n H).\n(* pos n = 0 *)\nintros; elim (le_Sn_O n H).\n(* pos n = 0 *)\nintros; elim (le_Sn_O n H).\n(* pos n = 0 *)\nintros; elim (le_Sn_O n H).\n(* pos n = 0 *)\nintros; elim (le_Sn_O n H).\n(* pos n = 0 *)\nintros; elim (le_Sn_O n H).\n(* pos n = 0 *)\nintros; elim (le_Sn_O n H).\n(* pos n = 0 *)\nintros; elim (le_Sn_O n H).\n(* pos n = 0 *)\nintros; elim (le_Sn_O n HQed.",
                    "Lemma tech_posOZ_pos : forall n : nat, leZ OZ (posOZ n).\nProof.\nsimple induction x.\nsimpl in |- *; intros; elim H0.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H1Qed.",
                    "Lemma tech_posOZ_pos : forall n : nat, leZ OZ (posOZ n).\nProof.\nsimple induction x.\n(* (pos n) *)\nintros; elim H.\n(* (pos n) *)\nintros; elim H.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim H1.\n(* (pos n) *)\nintros; elim H0.\n(* (pos n) *)\nintros; elim HQed.",
                    "Lemma tech_posOZ_pos : forall n : nat, leZ OZ (posOZ n).\nProof.\nsimple induction x.\nunfold lt_abs in |- *; unfold gt in |- *; intros.\nelim (le_Sn_O n H).\n(* (pos n) *)\nsimpl in |- *; intros; elim (le_Sn_O n H).\n(* pos n) *)\nsimpl in |- *; intros; elim (le_Sn_O n H).\n(* pos n) *)\nsimpl in |- *; intros; elim (le_Sn_O n H).\n(* pos n = pos n *)\nsimpl in |- *; intros; elim (le_Sn_O n H).\n(* pos n = pos n *)\nsimpl in |- *; intros; elim (le_Sn_O n H).\n(* pos n = pos n *)\nsimpl in |- *; intros; elim (le_Sn_O n H).\n(* pos n = pos n *)\nsimpl in |- *; intros; elim (le_Sn_O n H).\n(* pos n = pos n *)\nsimpl in |- *; intros; elim (le_Sn_O n H).\n(* pos n = pos n *)\nsimpl in |- *; intros; elim (le_Sn_O n H).\n(*Qed.",
                    "Lemma tech_posOZ_pos : forall n : nat, leZ OZ (posOZ n).\nProof.\nsimple induction x.\n(* pos n *)\nintros; elim H.\n(* pos n *)\nintros; elim H.\n(* pos n *)\nintros; elim H.\n(* pos n *)\nintros; elim H.\n(* pos n *)\nintros; elim H.\n(* pos n *)\nintros; elim H.\n(* pos n *)\nintros; elim H.\n(* pos n *)\nintros; elim H.\n(* pos n *)\nintros; elim H.\n(* pos n *)\nintros; elim H.\n(* pos n *)\nintros; elim H.\n(* pos n *)\nintros; elim H.\n(* pos n *)\nintros; elim H.\n(* pos n *)\nintros; elim H.\n(* pos n *)\nintros; elim H.\n(* pos n *)\nintros; elim H.\n(* pos n *)\nintros; elim H.\n(* pos n *)\nintros; elim H.\n(* pos n *)\nintros; elim H.\n(* pos n *)\nintros; elim H.\n(* pos n *)\nintros; elim H.\n(* pos n *)\nintros; elim H.\n(* pos n *)\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zadd.v                                  *)\n(****************************************************************************)\n\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export Lci.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\n\n(* Addition on Z, (Z, +) is a group *)\n\n(*Recursive Definition addZ : Z -> Z -> Z := \n       OZ        y => y\n|   (pos O)      y => (succZ y)\n|   (pos (S n1)) y => (succZ (addZ (pos n1) y))\n|   (neg O)      y => (predZ y)\n|   (neg (S n1)) y => (predZ (addZ (neg n1) y)).*)\n\n\n(* this definition introduces unnecessary names *)\n\n\nFixpoint addpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => succZ x2\n  | S n0 => succZ (addpos x2 n0)\n  end.\n\nFixpoint addneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => predZ x2\n  | S n0 => predZ (addneg x2 n0)\n  end.\n\nDefinition addZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => x2\n  | pos n => addpos x2 n\n  | neg n => addneg x2 n\n  end.\n\n\n",
                "context_tokens": 421,
                "proof_start_offset": 2055,
                "proof_end_offset": 2129,
                "proof": "Lemma addZ_eq1 : forall y : Z, addZ OZ y = y.\nProof.\nauto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma addZ_eq1 : forall y : Z, addZ OZ y = y.\nProof.\n intros.\n case x1; simpl; auto with arith.\nQed.",
                    "Lemma addZ_eq1 : forall y : Z, addZ OZ y = y.\nProof.\n unfold clearbit.\n intros.\n apply refl_equal.\nQed.",
                    "Lemma addZ_eq1 : forall y : Z, addZ OZ y = y.\nProof.\n  intros.\n  case x1; intros.\n  case x2; intros.\n  case x2; intros.\n  case x2; intros.\n  case x2; intros.\n  case x2; intros.\n  case x2; intros.\n  case x2; intros.\n  case x2; intros.\n  case x2; intros.\n  case x2; intros.\n  case x2; intros.\n  case x3; intros.\n  case x2; intros.\n  case x3; intros.\n  case x3; intros.\n  case x4; intros.\n  case x3; intros.\n  case x3; intros.\n  case x4; intros.\n  case x3; intros.\n  case x4; intros.\n  case x4; intros.\n  case x3; intros.\n  case x4; intros.\n  case x4; intros.\n  case x4; intros.\n  case x5; intros.\n  case x5; intros.\n  case x5; intros.\n  case x4; intros.\n  case x4; intros.\n  case x5; intros.\n  case x5; intros.\n  case x5; intros.\n  case x5;Qed.",
                    "Lemma addZ_eq1 : forall y : Z, addZ OZ y = y.\nProof.\n  intros.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_Qed.",
                    "Lemma addZ_eq1 : forall y : Z, addZ OZ y = y.\nProof.\n  intros y1 y2.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.\n  apply refl_equal.Qed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zadd.v                                  *)\n(****************************************************************************)\n\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export Lci.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\n\n(* Addition on Z, (Z, +) is a group *)\n\n(*Recursive Definition addZ : Z -> Z -> Z := \n       OZ        y => y\n|   (pos O)      y => (succZ y)\n|   (pos (S n1)) y => (succZ (addZ (pos n1) y))\n|   (neg O)      y => (predZ y)\n|   (neg (S n1)) y => (predZ (addZ (neg n1) y)).*)\n\n\n(* this definition introduces unnecessary names *)\n\n\nFixpoint addpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => succZ x2\n  | S n0 => succZ (addpos x2 n0)\n  end.\n\nFixpoint addneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => predZ x2\n  | S n0 => predZ (addneg x2 n0)\n  end.\n\nDefinition addZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => x2\n  | pos n => addpos x2 n\n  | neg n => addneg x2 n\n  end.\n\n\nLemma addZ_eq1 : forall y : Z, addZ OZ y = y.\nProof.\nauto with arith.\nQed.\n\n",
                "context_tokens": 451,
                "proof_start_offset": 2131,
                "proof_end_offset": 2216,
                "proof": "Lemma addZ_eq2 : forall y : Z, addZ (pos 0) y = succZ y.\nProof.\nauto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma addZ_eq2 : forall y : Z, addZ (pos 0) y = succZ y.\nProof.\nauto with arith.\nQed.",
                    "Lemma addZ_eq2 : forall y : Z, addZ (pos 0) y = succZ y.\nProof.\nauto with arith.\nQed.",
                    "Lemma addZ_eq2 : forall y : Z, addZ (pos 0) y = succZ y.\nProof.\nauto with arith.\nQed.",
                    "Lemma addZ_eq2 : forall y : Z, addZ (pos 0) y = succZ y.\nProof.\nauto with arith.\nQed.",
                    "Lemma addZ_eq2 : forall y : Z, addZ (pos 0) y = succZ y.\nProof.\nauto with arith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zadd.v                                  *)\n(****************************************************************************)\n\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export Lci.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\n\n(* Addition on Z, (Z, +) is a group *)\n\n(*Recursive Definition addZ : Z -> Z -> Z := \n       OZ        y => y\n|   (pos O)      y => (succZ y)\n|   (pos (S n1)) y => (succZ (addZ (pos n1) y))\n|   (neg O)      y => (predZ y)\n|   (neg (S n1)) y => (predZ (addZ (neg n1) y)).*)\n\n\n(* this definition introduces unnecessary names *)\n\n\nFixpoint addpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => succZ x2\n  | S n0 => succZ (addpos x2 n0)\n  end.\n\nFixpoint addneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => predZ x2\n  | S n0 => predZ (addneg x2 n0)\n  end.\n\nDefinition addZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => x2\n  | pos n => addpos x2 n\n  | neg n => addneg x2 n\n  end.\n\n\nLemma addZ_eq1 : forall y : Z, addZ OZ y = y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq2 : forall y : Z, addZ (pos 0) y = succZ y.\nProof.\nauto with arith.\nQed.\n\n",
                "context_tokens": 486,
                "proof_start_offset": 2218,
                "proof_end_offset": 2338,
                "proof": "Lemma addZ_eq3 : forall (n1 : nat) (y : Z), addZ (pos (S n1)) y = succZ (addZ (pos n1) y).\nProof.\nauto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma addZ_eq3 : forall (n1 : nat) (y : Z), addZ (pos (S n1)) y = succZ (addZ (pos n1) y).\nProof.\nauto with arith.\nQed.",
                    "Lemma addZ_eq3 : forall (n1 : nat) (y : Z), addZ (pos (S n1)) y = succZ (addZ (pos n1) y).\nProof.\nauto with arith.\nQed.",
                    "Lemma addZ_eq3 : forall (n1 : nat) (y : Z), addZ (pos (S n1)) y = succZ (addZ (pos n1) y).\nProof.\nauto with arith.\nQed.",
                    "Lemma addZ_eq3 : forall (n1 : nat) (y : Z), addZ (pos (S n1)) y = succZ (addZ (pos n1) y).\nProof.\nauto with arith.\nQed.",
                    "Lemma addZ_eq3 : forall (n1 : nat) (y : Z), addZ (pos (S n1)) y = succZ (addZ (pos n1) y).\nProof.\nauto with arith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zadd.v                                  *)\n(****************************************************************************)\n\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export Lci.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\n\n(* Addition on Z, (Z, +) is a group *)\n\n(*Recursive Definition addZ : Z -> Z -> Z := \n       OZ        y => y\n|   (pos O)      y => (succZ y)\n|   (pos (S n1)) y => (succZ (addZ (pos n1) y))\n|   (neg O)      y => (predZ y)\n|   (neg (S n1)) y => (predZ (addZ (neg n1) y)).*)\n\n\n(* this definition introduces unnecessary names *)\n\n\nFixpoint addpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => succZ x2\n  | S n0 => succZ (addpos x2 n0)\n  end.\n\nFixpoint addneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => predZ x2\n  | S n0 => predZ (addneg x2 n0)\n  end.\n\nDefinition addZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => x2\n  | pos n => addpos x2 n\n  | neg n => addneg x2 n\n  end.\n\n\nLemma addZ_eq1 : forall y : Z, addZ OZ y = y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq2 : forall y : Z, addZ (pos 0) y = succZ y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq3 :\n forall (n1 : nat) (y : Z), addZ (pos (S n1)) y = succZ (addZ (pos n1) y).\nProof.\nauto with arith.\nQed.\n\n",
                "context_tokens": 539,
                "proof_start_offset": 2340,
                "proof_end_offset": 2425,
                "proof": "Lemma addZ_eq4 : forall y : Z, addZ (neg 0) y = predZ y.\nProof.\nauto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma addZ_eq4 : forall y : Z, addZ (neg 0) y = predZ y.\nProof.\nauto with arith.\nQed.",
                    "Lemma addZ_eq4 : forall y : Z, addZ (neg 0) y = predZ y.\nProof.\nauto with arith.\nQed.",
                    "Lemma addZ_eq4 : forall y : Z, addZ (neg 0) y = predZ y.\nProof.\nauto with arith.\nQed.",
                    "Lemma addZ_eq4 : forall y : Z, addZ (neg 0) y = predZ y.\nProof.\nauto with arith.\nQed.",
                    "Lemma addZ_eq4 : forall y : Z, addZ (neg 0) y = predZ y.\nProof.\nauto with arith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": "***************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zadd.v                                  *)\n(****************************************************************************)\n\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export Lci.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\n\n(* Addition on Z, (Z, +) is a group *)\n\n(*Recursive Definition addZ : Z -> Z -> Z := \n       OZ        y => y\n|   (pos O)      y => (succZ y)\n|   (pos (S n1)) y => (succZ (addZ (pos n1) y))\n|   (neg O)      y => (predZ y)\n|   (neg (S n1)) y => (predZ (addZ (neg n1) y)).*)\n\n\n(* this definition introduces unnecessary names *)\n\n\nFixpoint addpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => succZ x2\n  | S n0 => succZ (addpos x2 n0)\n  end.\n\nFixpoint addneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => predZ x2\n  | S n0 => predZ (addneg x2 n0)\n  end.\n\nDefinition addZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => x2\n  | pos n => addpos x2 n\n  | neg n => addneg x2 n\n  end.\n\n\nLemma addZ_eq1 : forall y : Z, addZ OZ y = y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq2 : forall y : Z, addZ (pos 0) y = succZ y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq3 :\n forall (n1 : nat) (y : Z), addZ (pos (S n1)) y = succZ (addZ (pos n1) y).\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq4 : forall y : Z, addZ (neg 0) y = predZ y.\nProof.\nauto with arith.\nQed.\n\n",
                "context_tokens": 555,
                "proof_start_offset": 2427,
                "proof_end_offset": 2547,
                "proof": "Lemma addZ_eq5 : forall (n1 : nat) (y : Z), addZ (neg (S n1)) y = predZ (addZ (neg n1) y).\nProof.\nauto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma addZ_eq5 : forall (n1 : nat) (y : Z), addZ (neg (S n1)) y = predZ (addZ (neg n1) y).\nProof.\nauto with arith.\nQed.",
                    "Lemma addZ_eq5 : forall (n1 : nat) (y : Z), addZ (neg (S n1)) y = predZ (addZ (neg n1) y).\nProof.\nauto with arith.\nQed.",
                    "Lemma addZ_eq5 : forall (n1 : nat) (y : Z), addZ (neg (S n1)) y = predZ (addZ (neg n1) y).\nProof.\nauto with arith.\nQed.",
                    "Lemma addZ_eq5 : forall (n1 : nat) (y : Z), addZ (neg (S n1)) y = predZ (addZ (neg n1) y).\nProof.\nauto with arith.\nQed.",
                    "Lemma addZ_eq5 : forall (n1 : nat) (y : Z), addZ (neg (S n1)) y = predZ (addZ (neg n1) y).\nProof.\nauto with arith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": "      *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zadd.v                                  *)\n(****************************************************************************)\n\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export Lci.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\n\n(* Addition on Z, (Z, +) is a group *)\n\n(*Recursive Definition addZ : Z -> Z -> Z := \n       OZ        y => y\n|   (pos O)      y => (succZ y)\n|   (pos (S n1)) y => (succZ (addZ (pos n1) y))\n|   (neg O)      y => (predZ y)\n|   (neg (S n1)) y => (predZ (addZ (neg n1) y)).*)\n\n\n(* this definition introduces unnecessary names *)\n\n\nFixpoint addpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => succZ x2\n  | S n0 => succZ (addpos x2 n0)\n  end.\n\nFixpoint addneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => predZ x2\n  | S n0 => predZ (addneg x2 n0)\n  end.\n\nDefinition addZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => x2\n  | pos n => addpos x2 n\n  | neg n => addneg x2 n\n  end.\n\n\nLemma addZ_eq1 : forall y : Z, addZ OZ y = y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq2 : forall y : Z, addZ (pos 0) y = succZ y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq3 :\n forall (n1 : nat) (y : Z), addZ (pos (S n1)) y = succZ (addZ (pos n1) y).\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq4 : forall y : Z, addZ (neg 0) y = predZ y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq5 :\n forall (n1 : nat) (y : Z), addZ (neg (S n1)) y = predZ (addZ (neg n1) y).\nProof.\nauto with arith.\nQed.\n\n\n\n(***************)\n",
                "context_tokens": 601,
                "proof_start_offset": 2569,
                "proof_end_offset": 2886,
                "proof": "Lemma succ_addZ_l : forall x y : Z, addZ (succZ x) y = succZ (addZ x y).\nProof.\nintros; elim x.\nreflexivity.\ntrivial.\nsimple destruct n.\nsimpl in |- *; symmetry in |- *; exact (succ_predZ y).\nintros; symmetry in |- *; rewrite addZ_eq5.\napply succ_predZ.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma succ_addZ_l : forall x y : Z, addZ (succZ x) y = succZ (addZ x y).\nProof.\nauto with arith.\nQed.",
                    "Lemma succ_addZ_l : forall x y : Z, addZ (succZ x) y = succZ (addZ x y).\nProof.\nauto with arith.\nQed.",
                    "Lemma succ_addZ_l : forall x y : Z, addZ (succZ x) y = succZ (addZ x y).\nProof.\nauto with arith.\nQed.",
                    "Lemma succ_addZ_l : forall x y : Z, addZ (succZ x) y = succZ (addZ x y).\nProof.\nauto with arith.\nQed.",
                    "Lemma succ_addZ_l : forall x y : Z, addZ (succZ x) y = succZ (addZ x y).\nProof.\nauto with arith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": "    Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zadd.v                                  *)\n(****************************************************************************)\n\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export Lci.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\n\n(* Addition on Z, (Z, +) is a group *)\n\n(*Recursive Definition addZ : Z -> Z -> Z := \n       OZ        y => y\n|   (pos O)      y => (succZ y)\n|   (pos (S n1)) y => (succZ (addZ (pos n1) y))\n|   (neg O)      y => (predZ y)\n|   (neg (S n1)) y => (predZ (addZ (neg n1) y)).*)\n\n\n(* this definition introduces unnecessary names *)\n\n\nFixpoint addpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => succZ x2\n  | S n0 => succZ (addpos x2 n0)\n  end.\n\nFixpoint addneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => predZ x2\n  | S n0 => predZ (addneg x2 n0)\n  end.\n\nDefinition addZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => x2\n  | pos n => addpos x2 n\n  | neg n => addneg x2 n\n  end.\n\n\nLemma addZ_eq1 : forall y : Z, addZ OZ y = y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq2 : forall y : Z, addZ (pos 0) y = succZ y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq3 :\n forall (n1 : nat) (y : Z), addZ (pos (S n1)) y = succZ (addZ (pos n1) y).\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq4 : forall y : Z, addZ (neg 0) y = predZ y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq5 :\n forall (n1 : nat) (y : Z), addZ (neg (S n1)) y = predZ (addZ (neg n1) y).\nProof.\nauto with arith.\nQed.\n\n\n\n(***************)\nLemma succ_addZ_l : forall x y : Z, addZ (succZ x) y = succZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\ntrivial.\n(* neg n *)\nsimple destruct n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (succ_predZ y). \n(* neg (S n0) *)\nintros; symmetry  in |- *; rewrite addZ_eq5.\napply succ_predZ.\nQed.\n\n(***************)\n",
                "context_tokens": 691,
                "proof_start_offset": 2906,
                "proof_end_offset": 3161,
                "proof": "Lemma pred_addZ_l : forall x y : Z, addZ (predZ x) y = predZ (addZ x y).\nProof.\nintros; elim x.\nreflexivity.\nsimple destruct n.\nsimpl in |- *; rewrite pred_succZ; trivial.\nintros; rewrite addZ_eq3; rewrite pred_succZ; trivial.\ntrivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma pred_addZ_l : forall x y : Z, addZ (predZ x) y = predZ (addZ x y).\nintros; apply pred_ext; auto with arith.\nQed.",
                    "Lemma pred_addZ_l : forall x y : Z, addZ (predZ x) y = predZ (addZ x y).\nintros; elim x.\n(* neg n0 *)\nsimple induction n0.\nintros; symmetry  in |- *; exact (succ_involutive x). \n(* neg n0 *)\nsimple induction n0.\nintros; symmetry  in |- *; exact (succ_involutive x).\n(* neg n0 *)\nsimple induction n0.\nintros; symmetry  in |- *; exact (succ_involutive x). \n(* neg n0 *)\nsimple induction n0.\nintros; symmetry  in |- *; exact (succ_involutive x). \n(* neg n0 *)\nsimple induction n0.\nintros; symmetry  in |- *; exact (succ_involutive x). \n(* neg n0 *)\nsimple induction n0.\nintros; symmetry  in |- *; exact (succ_involutive x). \n(* neg n0 *)\nsimple induction n0.\nintros; symmetry  in |- *; exact (succ_involutive x).\n(* neg n0 *)\nsimple induction n0.\nintros; symmetry  in |- *; exact (succ_involutive x). \n(* neg n0 *)\nsimple induction n0.\nintros; symmetry  in |- *; exact (succ_involutive x). Qed.",
                    "Lemma pred_addZ_l : forall x y : Z, addZ (predZ x) y = predZ (addZ x y).\nProof.\nauto with arith.\nQed.",
                    "Lemma pred_addZ_l : forall x y : Z, addZ (predZ x) y = predZ (addZ x y).\nProof.\nauto with arith.\nQed.",
                    "Lemma pred_addZ_l : forall x y : Z, addZ (predZ x) y = predZ (addZ x y).\nProof.\nauto with arith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": "pos (S n1)) y => (succZ (addZ (pos n1) y))\n|   (neg O)      y => (predZ y)\n|   (neg (S n1)) y => (predZ (addZ (neg n1) y)).*)\n\n\n(* this definition introduces unnecessary names *)\n\n\nFixpoint addpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => succZ x2\n  | S n0 => succZ (addpos x2 n0)\n  end.\n\nFixpoint addneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => predZ x2\n  | S n0 => predZ (addneg x2 n0)\n  end.\n\nDefinition addZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => x2\n  | pos n => addpos x2 n\n  | neg n => addneg x2 n\n  end.\n\n\nLemma addZ_eq1 : forall y : Z, addZ OZ y = y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq2 : forall y : Z, addZ (pos 0) y = succZ y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq3 :\n forall (n1 : nat) (y : Z), addZ (pos (S n1)) y = succZ (addZ (pos n1) y).\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq4 : forall y : Z, addZ (neg 0) y = predZ y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq5 :\n forall (n1 : nat) (y : Z), addZ (neg (S n1)) y = predZ (addZ (neg n1) y).\nProof.\nauto with arith.\nQed.\n\n\n\n(***************)\nLemma succ_addZ_l : forall x y : Z, addZ (succZ x) y = succZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\ntrivial.\n(* neg n *)\nsimple destruct n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (succ_predZ y). \n(* neg (S n0) *)\nintros; symmetry  in |- *; rewrite addZ_eq5.\napply succ_predZ.\nQed.\n\n(***************)\nLemma pred_addZ_l : forall x y : Z, addZ (predZ x) y = predZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple destruct n.\nsimpl in |- *; rewrite pred_succZ; trivial.\nintros; rewrite addZ_eq3; rewrite pred_succZ; trivial.\ntrivial.\nQed.\n\n(**********************)\nLemma tech_add_pos_succZ :\n forall (x : nat) (y : Z), addZ (pos (S x)) y = succZ (addZ (pos x) y).\nProof addZ_eq3.\n\n(**********************)\nLemma tech_add_neg_predZ :\n forall (x : nat) (y : Z), addZ (neg (S x)) y = predZ (addZ (neg x) y).\nProof addZ_eq5.\n\n(***************)\n",
                "context_tokens": 740,
                "proof_start_offset": 3463,
                "proof_end_offset": 3939,
                "proof": "Lemma succ_addZ_r : forall x y : Z, addZ x (succZ y) = succZ (addZ x y).\nProof.\nintros; elim x.\nreflexivity.\nsimple induction n.\nreflexivity.\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nelim H; reflexivity.\nsimple induction n.\nsimpl in |- *; symmetry in |- *; apply succ_pred_pred_succZ.\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nrewrite H.\nsymmetry in |- *; apply succ_pred_pred_succZ.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma succ_addZ_r : forall x y : Z, addZ x (succZ y) = succZ (addZ x y).\nProof ptc_eq5.\nunfold succZ.\nunfold succZ.\nsimpl in |- *; rewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nrewrite pred_predn.\nQed.",
                    "Lemma succ_addZ_r : forall x y : Z, addZ x (succZ y) = succZ (addZ x y).\nProof                                                                   \nauto with arith.\nQed.",
                    "Lemma succ_addZ_r : forall x y : Z, addZ x (succZ y) = succZ (addZ x y).\nProof ptc_eq5.\nunfold succZ; rewrite pred_predn; trivial.\nQed.",
                    "Lemma succ_addZ_r : forall x y : Z, addZ x (succZ y) = succZ (addZ x y).\nProof ptc_eq5.\nunfold succZ.\nintros; rewrite <- pred_predn.\napply pred_predn.\nQed.",
                    "Lemma succ_addZ_r : forall x y : Z, addZ x (succZ y) = succZ (addZ x y).\nProof Melquiond\nintros x y; elim x.\nintros; elim x.\nintros; elim x.\nintros; elim x.\nintros; elim x.\nintros; elim x.\nintros; elim x.\nintros; elim x.\nintros; elim x.\nintros; elim x.\nintros; elim H.\nintros; elim H.\nintros; elim H.\nintros; elim H.\nintros; elim H.\nintros; elim H.\nintros; elim H.\nintros; elim H.\nintros; elim H.\nintros; elim H.\nintros; elim H.\nintros; elim H.\nintros; elim H.\nintros; elim H.\nintros; elim H.\nintros; elim H.\nintros; elim H.\nintros; elim H.\nintros; elim H.\nintros; elim H.\nintros; elim H.\nintros; elim H.\nintros; elim H; intros; elim H.\nintros; elim H.\nintros; elim H.\nintros; elim H.\nintros; elim H; intros.\nintros; elim H.\nintros; elim H; intros.\nintros; elim H; intros.Qed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": "\n\nDefinition addZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => x2\n  | pos n => addpos x2 n\n  | neg n => addneg x2 n\n  end.\n\n\nLemma addZ_eq1 : forall y : Z, addZ OZ y = y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq2 : forall y : Z, addZ (pos 0) y = succZ y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq3 :\n forall (n1 : nat) (y : Z), addZ (pos (S n1)) y = succZ (addZ (pos n1) y).\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq4 : forall y : Z, addZ (neg 0) y = predZ y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq5 :\n forall (n1 : nat) (y : Z), addZ (neg (S n1)) y = predZ (addZ (neg n1) y).\nProof.\nauto with arith.\nQed.\n\n\n\n(***************)\nLemma succ_addZ_l : forall x y : Z, addZ (succZ x) y = succZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\ntrivial.\n(* neg n *)\nsimple destruct n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (succ_predZ y). \n(* neg (S n0) *)\nintros; symmetry  in |- *; rewrite addZ_eq5.\napply succ_predZ.\nQed.\n\n(***************)\nLemma pred_addZ_l : forall x y : Z, addZ (predZ x) y = predZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple destruct n.\nsimpl in |- *; rewrite pred_succZ; trivial.\nintros; rewrite addZ_eq3; rewrite pred_succZ; trivial.\ntrivial.\nQed.\n\n(**********************)\nLemma tech_add_pos_succZ :\n forall (x : nat) (y : Z), addZ (pos (S x)) y = succZ (addZ (pos x) y).\nProof addZ_eq3.\n\n(**********************)\nLemma tech_add_neg_predZ :\n forall (x : nat) (y : Z), addZ (neg (S x)) y = predZ (addZ (neg x) y).\nProof addZ_eq5.\n\n(***************)\nLemma succ_addZ_r : forall x y : Z, addZ x (succZ y) = succZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nreflexivity.\n(* pos y0 *)\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nelim H; reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; apply succ_pred_pred_succZ.\n(* neg y0 *)\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nrewrite H.\nsymmetry  in |- *; apply succ_pred_pred_succZ.\nQed.\n\n(***************)\n",
                "context_tokens": 741,
                "proof_start_offset": 3959,
                "proof_end_offset": 4411,
                "proof": "Lemma pred_addZ_r : forall x y : Z, addZ x (predZ y) = predZ (addZ x y).\nProof.\nintros; elim x.\nreflexivity.\nsimple induction n.\nsimpl in |- *; apply succ_pred_pred_succZ.\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nrewrite H; apply succ_pred_pred_succZ.\nsimple induction n.\nreflexivity.\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nelim H; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma pred_addZ_r : forall x y : Z, addZ x (predZ y) = predZ (addZ x y).\nProof.\nunfold pred; intros; rewrite (tech_add_neg_pos_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_negQed.",
                    "Lemma pred_addZ_r : forall x y : Z, addZ x (predZ y) = predZ (addZ x y).\nProof.\nintros; elim x.\nreflexivity.\nQed.",
                    "Lemma pred_addZ_r : forall x y : Z, addZ x (predZ y) = predZ (addZ x y).\nProof.\nintros; elim x.\nreflexivity.\nQed.",
                    "Lemma pred_addZ_r : forall x y : Z, addZ x (predZ y) = predZ (addZ x y).\nProof.\nsimple induction n.\nsimpl in |- *; rewrite (tech_add_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_posQed.",
                    "Lemma pred_addZ_r : forall x y : Z, addZ x (predZ y) = predZ (addZ x y).\nProof.\nintros; apply pred_predZ.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": "\nQed.\n\nLemma addZ_eq4 : forall y : Z, addZ (neg 0) y = predZ y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq5 :\n forall (n1 : nat) (y : Z), addZ (neg (S n1)) y = predZ (addZ (neg n1) y).\nProof.\nauto with arith.\nQed.\n\n\n\n(***************)\nLemma succ_addZ_l : forall x y : Z, addZ (succZ x) y = succZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\ntrivial.\n(* neg n *)\nsimple destruct n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (succ_predZ y). \n(* neg (S n0) *)\nintros; symmetry  in |- *; rewrite addZ_eq5.\napply succ_predZ.\nQed.\n\n(***************)\nLemma pred_addZ_l : forall x y : Z, addZ (predZ x) y = predZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple destruct n.\nsimpl in |- *; rewrite pred_succZ; trivial.\nintros; rewrite addZ_eq3; rewrite pred_succZ; trivial.\ntrivial.\nQed.\n\n(**********************)\nLemma tech_add_pos_succZ :\n forall (x : nat) (y : Z), addZ (pos (S x)) y = succZ (addZ (pos x) y).\nProof addZ_eq3.\n\n(**********************)\nLemma tech_add_neg_predZ :\n forall (x : nat) (y : Z), addZ (neg (S x)) y = predZ (addZ (neg x) y).\nProof addZ_eq5.\n\n(***************)\nLemma succ_addZ_r : forall x y : Z, addZ x (succZ y) = succZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nreflexivity.\n(* pos y0 *)\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nelim H; reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; apply succ_pred_pred_succZ.\n(* neg y0 *)\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nrewrite H.\nsymmetry  in |- *; apply succ_pred_pred_succZ.\nQed.\n\n(***************)\nLemma pred_addZ_r : forall x y : Z, addZ x (predZ y) = predZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* (pos n) *)\nsimple induction n.\n(* (pos O) *)\nsimpl in |- *; apply succ_pred_pred_succZ.\n(* (pos (S y0)) *)\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nrewrite H; apply succ_pred_pred_succZ.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nreflexivity.\n(* neg (S y0) *)\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nelim H; reflexivity.\nQed.\n\n(***********)\n",
                "context_tokens": 751,
                "proof_start_offset": 4427,
                "proof_end_offset": 4728,
                "proof": "Lemma add_OZ : forall x : Z, addZ x OZ = x.\nProof.\nsimple induction x.\nreflexivity.\nsimple induction n.\nreflexivity.\nintros; rewrite tech_add_pos_succZ; rewrite H; reflexivity.\nsimple induction n.\nreflexivity.\nintros; rewrite tech_add_neg_predZ; rewrite H; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma add_OZ : forall x : Z, addZ x OZ = x.\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)simple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos *)Qed.",
                    "Lemma add_OZ : forall x : Z, addZ x OZ = x.\nsimple induction n.\n(* neg n *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple induction n.\n(* abs *)\nsimple inductionQed.",
                    "Lemma add_OZ : forall x : Z, addZ x OZ = x.\nsimple induction n.\n(* pos *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)simple induction n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)simple induction n.\n(* pos n *)\nsimple induction n.\n(* pos n *)simple induction n *)\nsimple induction n.\n(* pos n *)simple induction n.\nQed.",
                    "Lemma add_OZ : forall x : Z, addZ x OZ = x.\nsimple induction n.\n(* pos n *)\nsimple induction n.\nsimpl in |- *; apply succ_pred_pos.\n(* pos n *)\nsimple induction n.\nsimpl in |- *; apply succ_pred_pos.\n(* pos n *)\nsimple induction n.\nsimpl in |- *; apply succ_pred_pos.\n(* pos n *)\nsimple induction n.\nsimpl in |- *; apply succ_pred_pos.\n(* pos n *)\nsimple induction n.\nsimpl in |- *; apply pred_pred_pos.\n(* pos n *)\nsimple induction n.\nsimpl in |- *; apply pred_pred_pos.\n(* pos n *)\nsimple induction n.\nsimpl in |- *; apply pred_pred_pos.\n(* pos n *)\nsimple induction n.\nsimpl in |- *; apply pred_pred_pos.\n(* pos n *)\nsimple induction n.\nsimpl in |- *; apply pred_pred_pos.\n(* pos n *)\nsimple induction n.\nsimpl in |- *; apply pred_pred_pos.\n(* pos n *)\nsimple induction n.\nsimpl in |- *; apply pred_pred_pos.\n(* pos n *)simple induction n.Qed.",
                    "Lemma add_OZ : forall x : Z, addZ x OZ = x.\nProof.\nsimple induction n.\nsimple induction n.\nsimple induction n.\nsimple induction n.\nauto.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nsimple induction n.\nauto.\n(* pos n *)\nsimple induction n.\nsimple induction n.\nauto.\n(* pos n *)\nsimple induction n.\nauto.\n(* pos n *)\nsimple induction n.\nsimple induction n.\nauto.\n(* pos n *)\nsimple induction n.\nauto.\n(* pos n *)simple induction n.\nauto.\n(* pos n *)\nsimple induction n.\nauto.\n(* pos n *)simple induction n.\nsimple induction n.\nauto.\n(* pos n *)simple induction n.\nauto.\n(* pos n *)\nsimple induction n.\nauto.\n(* pos n *)simple induction n.\nauto.\n(* pos n *)simple induction n.\n(* pos n *)simple induction n.\nauto.\n(* pos n *)simple induction n.\nauto.\n(* pos n *)simple induction n.\n(* pos n *)simple induction n.\nauto.\n(* pos n *)simple induction n.\nauto.Qed."
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": " forall x y : Z, addZ (succZ x) y = succZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\ntrivial.\n(* neg n *)\nsimple destruct n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (succ_predZ y). \n(* neg (S n0) *)\nintros; symmetry  in |- *; rewrite addZ_eq5.\napply succ_predZ.\nQed.\n\n(***************)\nLemma pred_addZ_l : forall x y : Z, addZ (predZ x) y = predZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple destruct n.\nsimpl in |- *; rewrite pred_succZ; trivial.\nintros; rewrite addZ_eq3; rewrite pred_succZ; trivial.\ntrivial.\nQed.\n\n(**********************)\nLemma tech_add_pos_succZ :\n forall (x : nat) (y : Z), addZ (pos (S x)) y = succZ (addZ (pos x) y).\nProof addZ_eq3.\n\n(**********************)\nLemma tech_add_neg_predZ :\n forall (x : nat) (y : Z), addZ (neg (S x)) y = predZ (addZ (neg x) y).\nProof addZ_eq5.\n\n(***************)\nLemma succ_addZ_r : forall x y : Z, addZ x (succZ y) = succZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nreflexivity.\n(* pos y0 *)\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nelim H; reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; apply succ_pred_pred_succZ.\n(* neg y0 *)\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nrewrite H.\nsymmetry  in |- *; apply succ_pred_pred_succZ.\nQed.\n\n(***************)\nLemma pred_addZ_r : forall x y : Z, addZ x (predZ y) = predZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* (pos n) *)\nsimple induction n.\n(* (pos O) *)\nsimpl in |- *; apply succ_pred_pred_succZ.\n(* (pos (S y0)) *)\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nrewrite H; apply succ_pred_pred_succZ.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nreflexivity.\n(* neg (S y0) *)\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nelim H; reflexivity.\nQed.\n\n(***********)\nLemma add_OZ : forall x : Z, addZ x OZ = x.\n\nsimple induction x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\nreflexivity.\nintros; rewrite tech_add_pos_succZ; rewrite H; reflexivity.\n(* neg n *)\nsimple induction n.\nreflexivity.\nintros; rewrite tech_add_neg_predZ; rewrite H; reflexivity.\nQed.\n\n(*****************)\n",
                "context_tokens": 747,
                "proof_start_offset": 4750,
                "proof_end_offset": 4930,
                "proof": "Lemma add_IZ_succZ : forall x : Z, addZ x IZ = succZ x.\nProof.\nintros.\ncut (succZ OZ = IZ); intros.\nelim H.\nrewrite (succ_addZ_r x OZ); rewrite (add_OZ x); reflexivity.\nreflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma add_IZ_succZ : forall x : Z, addZ x IZ = succZ x.\nsimple induction n.\nreflexivity.\nQed.",
                    "Lemma add_IZ_succZ : forall x : Z, addZ x IZ = succZ x.\nsimple induction x.\nreflexivity.\nQed.",
                    "Lemma add_IZ_succZ : forall x : Z, addZ x IZ = succZ x.\nsimple induction n.\nreflexivity.\nQed.",
                    "Lemma add_IZ_succZ : forall x : Z, addZ x IZ = succZ x.\nsimple induction n.\nreflexivity.\nQed.",
                    "Lemma add_IZ_succZ : forall x : Z, addZ x IZ = succZ x.\nsimple induction x.\nreflexivity.\nQed."
                ]
            }
        ],
        "UnifySL": [
            {
                "filepath": "./coq_projects/UnifySL/Extensions/ProofTheory/Corable.v",
                "context": "port Logic.MinimunLogic.ProofTheory.Minimun.\nRequire Import Logic.MinimunLogic.ProofTheory.RewriteClass.\nRequire Import Logic.PropositionalLogic.ProofTheory.Intuitionistic.\nRequire Import Logic.PropositionalLogic.ProofTheory.DeMorgan.\nRequire Import Logic.PropositionalLogic.ProofTheory.GodelDummett.\nRequire Import Logic.PropositionalLogic.ProofTheory.Classical.\nRequire Import Logic.PropositionalLogic.ProofTheory.RewriteClass.\nRequire Import Logic.SeparationLogic.ProofTheory.SeparationLogic.\nRequire Import Logic.SeparationLogic.ProofTheory.DerivedRules.\nRequire Import Logic.SeparationLogic.ProofTheory.RewriteClass.\nRequire Import Logic.Extensions.ProofTheory.Stable.\n\nLocal Open Scope logic_base.\nLocal Open Scope syntax.\nImport PropositionalLanguageNotation.\nImport SeparationLogicNotation.\n\nClass Corable (L: Language) {minL: MinimunLanguage L} {pL: PropositionalLanguage L} {sL: SeparationLanguage L} (Gamma: ProofTheory L) {minAX: MinimunAxiomatization L Gamma} {ipGamma: IntuitionisticPropositionalLogic L Gamma} {sGamma: SeparationLogic L Gamma} := {\n  corable: expr -> Prop;\n  corable_pstable: PropositionalStable L Gamma corable;\n  corable_sstable: SeparationStable L Gamma corable;\n  corable_sabs: SeparationAbsorbStable L Gamma corable\n}.\n\nSection Corable.\n\nContext {L: Language}\n        {minL: MinimunLanguage L}\n        {pL: PropositionalLanguage L}\n        {sL: SeparationLanguage L}\n        {Gamma: ProofTheory L}\n        {minAX: MinimunAxiomatization L Gamma}\n        {ipGamma: IntuitionisticPropositionalLogic L Gamma}\n        {sGamma: SeparationLogic L Gamma}\n        {CosGamma: Corable L Gamma}.\n\nLemma corable_andp: forall x y, corable x -> corable y -> corable (x && y).\nProof. intros. apply (@andp_stable L _ _ Gamma corable corable_pstable); auto. Qed.\n\nLemma corable_orp: forall x y, corable x -> corable y -> corable (x || y).\nProof. intros. apply (@orp_stable L _ _ Gamma corable corable_pstable); auto. Qed.\n\nLemma corable_impp: forall x y, corable x -> corable y -> corable (x --> y).\nProof. intros. apply (@impp_stable L _ _ Gamma corable corable_pstable); auto. Qed.\n\nLemma corable_iffp: forall x y, corable x -> corable y -> corable (x <--> y).\nProof. intros. apply (@iffp_stable L _ _ Gamma corable corable_pstable); auto. Qed.\n\nLemma corable_falsep: corable FF.\nProof. apply (@falsep_stable L _ _ Gamma corable corable_pstable); auto. Qed.\n\n",
                "context_tokens": 639,
                "proof_start_offset": 2647,
                "proof_end_offset": 2756,
                "proof": "Lemma corable_truep: corable TT.\nProof.\napply (@truep_stable L _ _ Gamma corable corable_pstable); auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma corable_truep: corable TT.\nProof. apply (@andp_prop L _ Gammap _ (p --> q)). Qed.",
                    "Lemma corable_truep: corable TT.\nProof. apply (@andp_prop L _ Gammap). Qed.",
                    "Lemma corable_truep: corable TT.\nProof. apply @eq_true_p. Qed.",
                    "Lemma corable_truep: corable TT.\nProof. apply corable_truep_stable; auto. Qed.",
                    "Lemma corable_truep: corable TT.\nProof. apply (@andp_prop L _ Gammap _). Qed."
                ]
            },
            {
                "filepath": "./coq_projects/UnifySL/Extensions/ProofTheory/Corable.v",
                "context": "unLanguage L} {pL: PropositionalLanguage L} {sL: SeparationLanguage L} (Gamma: ProofTheory L) {minAX: MinimunAxiomatization L Gamma} {ipGamma: IntuitionisticPropositionalLogic L Gamma} {sGamma: SeparationLogic L Gamma} := {\n  corable: expr -> Prop;\n  corable_pstable: PropositionalStable L Gamma corable;\n  corable_sstable: SeparationStable L Gamma corable;\n  corable_sabs: SeparationAbsorbStable L Gamma corable\n}.\n\nSection Corable.\n\nContext {L: Language}\n        {minL: MinimunLanguage L}\n        {pL: PropositionalLanguage L}\n        {sL: SeparationLanguage L}\n        {Gamma: ProofTheory L}\n        {minAX: MinimunAxiomatization L Gamma}\n        {ipGamma: IntuitionisticPropositionalLogic L Gamma}\n        {sGamma: SeparationLogic L Gamma}\n        {CosGamma: Corable L Gamma}.\n\nLemma corable_andp: forall x y, corable x -> corable y -> corable (x && y).\nProof. intros. apply (@andp_stable L _ _ Gamma corable corable_pstable); auto. Qed.\n\nLemma corable_orp: forall x y, corable x -> corable y -> corable (x || y).\nProof. intros. apply (@orp_stable L _ _ Gamma corable corable_pstable); auto. Qed.\n\nLemma corable_impp: forall x y, corable x -> corable y -> corable (x --> y).\nProof. intros. apply (@impp_stable L _ _ Gamma corable corable_pstable); auto. Qed.\n\nLemma corable_iffp: forall x y, corable x -> corable y -> corable (x <--> y).\nProof. intros. apply (@iffp_stable L _ _ Gamma corable corable_pstable); auto. Qed.\n\nLemma corable_falsep: corable FF.\nProof. apply (@falsep_stable L _ _ Gamma corable corable_pstable); auto. Qed.\n\nLemma corable_truep: corable TT.\nProof. apply (@truep_stable L _ _ Gamma corable corable_pstable); auto. Qed.\n\nLemma corable_sepcon: forall x y, corable x -> corable y -> corable (x * y).\nProof. intros. apply (@sepcon_stable L _ _ Gamma corable corable_sstable); auto. Qed.\n\nLemma corable_wand: forall x y, corable x -> corable y -> corable (x -* y).\nProof. intros. apply (@wand_stable L _ _ Gamma corable corable_sstable); auto. Qed.\n\nInstance corable_proper_iff: Proper ((fun x y => |-- x <--> y) ==> iff) corable.\nProof. apply (@stable_proper_iffp L _ _ Gamma corable corable_pstable); auto. Qed.\n\nLemma corable_andp_sepcon1: forall x y z, corable x -> |-- (x && y) * z <--> x && (y * z).\nProof. intros. apply (@stable_andp_sepcon1 L _ _ _ Gamma corable corable_sabs); auto. Qed.\n\n",
                "context_tokens": 676,
                "proof_start_offset": 3431,
                "proof_end_offset": 3600,
                "proof": "Lemma corable_andp_sepcon2: forall x y z, corable y -> |-- (x && y) * z <--> y && (x * z).\nProof.\nintros.\nrewrite andp_comm.\napply corable_andp_sepcon1; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma corable_andp_sepcon2: forall x y z, corable y -> |-- (x && y) * z <--> y && (x * z).\nProof. intros. apply (@andp_comm L _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _Qed.",
                    "Lemma corable_andp_sepcon2: forall x y z, corable y -> |-- (x && y) * z <--> y && (x * z).\nProof. intros. apply (@andp_prop L _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _Qed.",
                    "Lemma corable_andp_sepcon2: forall x y z, corable y -> |-- (x && y) * z <--> y && (x * z).\nProof. intros. apply (@andp_prop L _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _Qed.",
                    "Lemma corable_andp_sepcon2: forall x y z, corable y -> |-- (x && y) * z <--> y && (x * z).\nProof. intros. apply (p_stable L _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _Qed.",
                    "Lemma corable_andp_sepcon2: forall x y z, corable y -> |-- (x && y) * z <--> y && (x * z).\nProof. intros. apply (exp_andp_prop L _ _ _ _ ( corable_prop _ _ _) ( corable_prop _ _ _)). Qed."
                ]
            },
            {
                "filepath": "./coq_projects/UnifySL/Extensions/ProofTheory/Corable.v",
                "context": "ogic L Gamma} {sGamma: SeparationLogic L Gamma} := {\n  corable: expr -> Prop;\n  corable_pstable: PropositionalStable L Gamma corable;\n  corable_sstable: SeparationStable L Gamma corable;\n  corable_sabs: SeparationAbsorbStable L Gamma corable\n}.\n\nSection Corable.\n\nContext {L: Language}\n        {minL: MinimunLanguage L}\n        {pL: PropositionalLanguage L}\n        {sL: SeparationLanguage L}\n        {Gamma: ProofTheory L}\n        {minAX: MinimunAxiomatization L Gamma}\n        {ipGamma: IntuitionisticPropositionalLogic L Gamma}\n        {sGamma: SeparationLogic L Gamma}\n        {CosGamma: Corable L Gamma}.\n\nLemma corable_andp: forall x y, corable x -> corable y -> corable (x && y).\nProof. intros. apply (@andp_stable L _ _ Gamma corable corable_pstable); auto. Qed.\n\nLemma corable_orp: forall x y, corable x -> corable y -> corable (x || y).\nProof. intros. apply (@orp_stable L _ _ Gamma corable corable_pstable); auto. Qed.\n\nLemma corable_impp: forall x y, corable x -> corable y -> corable (x --> y).\nProof. intros. apply (@impp_stable L _ _ Gamma corable corable_pstable); auto. Qed.\n\nLemma corable_iffp: forall x y, corable x -> corable y -> corable (x <--> y).\nProof. intros. apply (@iffp_stable L _ _ Gamma corable corable_pstable); auto. Qed.\n\nLemma corable_falsep: corable FF.\nProof. apply (@falsep_stable L _ _ Gamma corable corable_pstable); auto. Qed.\n\nLemma corable_truep: corable TT.\nProof. apply (@truep_stable L _ _ Gamma corable corable_pstable); auto. Qed.\n\nLemma corable_sepcon: forall x y, corable x -> corable y -> corable (x * y).\nProof. intros. apply (@sepcon_stable L _ _ Gamma corable corable_sstable); auto. Qed.\n\nLemma corable_wand: forall x y, corable x -> corable y -> corable (x -* y).\nProof. intros. apply (@wand_stable L _ _ Gamma corable corable_sstable); auto. Qed.\n\nInstance corable_proper_iff: Proper ((fun x y => |-- x <--> y) ==> iff) corable.\nProof. apply (@stable_proper_iffp L _ _ Gamma corable corable_pstable); auto. Qed.\n\nLemma corable_andp_sepcon1: forall x y z, corable x -> |-- (x && y) * z <--> x && (y * z).\nProof. intros. apply (@stable_andp_sepcon1 L _ _ _ Gamma corable corable_sabs); auto. Qed.\n\nLemma corable_andp_sepcon2: forall x y z, corable y -> |-- (x && y) * z <--> y && (x * z).\nProof.\n  intros.\n  rewrite andp_comm.\n  apply corable_andp_sepcon1; auto.\nQed.\n\n",
                "context_tokens": 690,
                "proof_start_offset": 3602,
                "proof_end_offset": 3802,
                "proof": "Lemma corable_sepcon_andp1: forall x y z, corable y -> |-- x * (y && z) <--> y && (x * z).\nProof.\nintros.\nrewrite sepcon_comm.\nrewrite (sepcon_comm x z).\napply corable_andp_sepcon1; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma corable_sepcon_andp1: forall x y z, corable y -> |-- x * (y && z) <--> y && (x * z).\nProof.\n  intros. apply corable_andp_andp1; auto.\nQed.",
                    "Lemma corable_sepcon_andp1: forall x y z, corable y -> |-- x * (y && z) <--> y && (x * z).\nProof.\n  intros. apply corable_sepcon1.\n  apply corable_sepcon1; auto.\nQed.",
                    "Lemma corable_sepcon_andp1: forall x y z, corable y -> |-- x * (y && z) <--> y && (x * z).\nProof.\n  intros. apply corable_andp_sepcon1; auto. Qed.",
                    "Lemma corable_sepcon_andp1: forall x y z, corable y -> |-- x * (y && z) <--> y && (x * z).\nProof.\n  intros.\n  rewrite corable_sepcon1.\n  apply corable_andp_sepcon1.\n  apply corable_andp_sepcon1.\n  apply corable_andp_sepcon1; auto.\nQed.",
                    "Lemma corable_sepcon_andp1: forall x y z, corable y -> |-- x * (y && z) <--> y && (x * z).\nProof.\n  intros.\n  apply corable_sepcon1.\n  apply corable_andp_andp1; auto.\nQed."
                ]
            }
        ],
        "hoare-tut": [
            {
                "filepath": "./coq_projects/hoare-tut/exgcd.v",
                "context": " Env -> Env :=\n fun x => \n   match x in (ExVar A) return A -> Env -> Env with\n   | VX => fun vx e => (vx,snd e)\n   | VY => fun vy e => (fst e,vy)\n   end.\n\nDefinition get (A:Type): (ExVar A) -> Env -> A :=\n fun x => \n   match x in (ExVar A) return Env -> A with\n   | VX => fun e => fst e\n   | VY => fun e => snd e\n   end.\n\n(** I consider only two binary operators [PLUS] and [MINUS]. Their\nmeaning is given by [eval_binOP] below *)\nInductive binOP: Type := PLUS | MINUS.\n \nDefinition eval_binOP: binOP -> Z -> Z -> Z :=\n fun op => match op with\n  | PLUS => Zplus\n  | MINUS => Zminus\n end.\n\n(** I consider only three comparison operators [EQ], [NEQ] and\n[LE]. Their meaning is given by [eval_relOP] below *)\nInductive relOP: Type := EQ | NEQ | LE.\n\nDefinition eval_relOP: relOP -> Z -> Z -> bool :=\n fun op => match op with\n  | EQ => Zeq_bool\n  | NEQ => Zneq_bool\n  | LE => Zle_bool\n end. \n\n(** Here is the abstract syntax of expressions. The semantics is given\nby [eval] below *)\nInductive ExExpr: Type -> Type :=\n | const: forall (A:Type), A -> (ExExpr A)\n | binop: binOP -> (ExExpr Z) -> (ExExpr Z) -> (ExExpr Z)\n | relop: relOP -> (ExExpr Z) -> (ExExpr Z) -> (ExExpr bool)\n | getvar: forall (A:Type), (ExVar A) -> (ExExpr A). \n\nDefinition Expr:= ExExpr.\n\nFixpoint eval (A:Type) (expr:Expr A) (e:Env) { struct expr } : A :=\n match expr in ExExpr A return A with\n | const A v => v\n | binop op e1 e2 => eval_binOP op (eval e1 e) (eval e2 e)\n | relop op e1 e2 => eval_relOP op (eval e1 e) (eval e2 e)\n | getvar A x => (get x e)\nend.\n\nEnd Example.\n\n(** * Instantiation of the Hoare logic on this langage. *)\nModule HL :=  HoareLogic(Example).\nImport HL.\nImport Example.\n\n(** These coercions makes the abstract syntax more user-friendly *)\nCoercion getvar: ExVar >-> ExExpr.\nCoercion binop: binOP >-> Funclass.\nCoercion relop: relOP >-> Funclass.\n\n(** A last coercion useful for assertions *)\nCoercion get: ExVar >-> Funclass.\n\n(** ** A [gcd] computation in this language *)\nDefinition gcd := \n  (Iwhile (NEQ VX VY)\n          (Iif (LE VX VY)\n               (Iset VY (MINUS VY VX))\n               (Iset VX (MINUS VX VY)))).\n\n(** A small technical lemma on the mathematical notion of gcd (called\n[Zis_gcd]) *)\n",
                "context_tokens": 737,
                "proof_start_offset": 3350,
                "proof_end_offset": 3559,
                "proof": "Lemma Zgcd_minus: forall a b d:Z, Zis_gcd a (b - a) d -> Zis_gcd a b d.\nProof.\nintros a b d H; case H; constructor; intuition (auto with zarith).\nreplace b with (b-a+a)%Z.\nauto with zarith.\nomega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma Zgcd_minus: forall a b d:Z, Zis_gcd a (b - a) d -> Zis_gcd a b d.\nProof.\nintros.\nunfold Zgcd.\nintros.\nunfold Zgcd.\nunfold Zgcd.\nintros.\nunfold Zgcd.\nintros.\nunfold Zgcd.\nintros.\nunfold Zgcd.\nintros.\nunfold Zgcd.\nintros.\nunfold Zgcd.\nintros.\nunfold Zgcd.\nintros.\nunfold Zgcd.\nintros.\nrewrite H.\nunfold Zgcd.\nintros.\nunfold Zgcd.\nintros.\nunfold Zgcd.\nintros.\nunfold Zgcd.\nintros.\nunfold Zgcd.\nintros.\nunfold Zgcd.\nintros.\nunfold Zgcd.\nintros.\nunfold Zgcd.\nintros.\nintros.\nunfold Zgcd.\nintros.\nunfold Zgcd.\nintros.\nunfold Zgcd.\nintros.\nunfold Zgcd.\nintros.\nunfold Zgcd.\nintros.\nintros.\nunfold Zgcd.\nintros.\nunfold Zgcd.\nintros.\nintros.\nunfold Zgcd.\nintros.\nunfold Zgcd.\nintros.\nintros.\nunfold Zgcd.\nintros.\nintros.\nunfold Zgcd.\nintros.\nsimpl.\nintros.\nunfold Zgcd.\nintros.\nintros.\nunfold Zgcd.\nintros.\nunfold Zgcd.\nintros.\nQed.",
                    "Lemma Zgcd_minus: forall a b d:Z, Zis_gcd a (b - a) d -> Zis_gcd a b d.\nProof.\n intros a b d H.\n destruct d; simpl; auto.\nQed.",
                    "Lemma Zgcd_minus: forall a b d:Z, Zis_gcd a (b - a) d -> Zis_gcd a b d.\nProof.\n intros.\n apply Zis_gcd_minus.\n apply Zis_gcd_minus.\n apply Zis_gcd_minus.\n apply Zis_gcd_minus.\n apply Zis_gcd_minus.\n apply Zis_gcd_minus.\n apply Zis_gcd_minus.\n apply Zis_gcd_minus.\n apply Zis_gcd_minus.\n apply Zis_gcd_minus.\n apply Zis_gcd_minus.\n apply Zis_gcd_minus.\n apply Zis_gcd_plus.\n apply Zis_gcd_minus.\n apply Zis_gcd_minus.\n apply Zis_gcd_plus.\n apply Zis_gcd_minus.\n apply Zis_gcd_plus.\n apply Zis_gcd_plus.\n apply Zis_gcd_plus.\n apply Zis_gcd_plus.\n apply Zis_gcd_minus.\n apply Zis_gcd_plus.\n apply Zis_gcd_minus.\n apply Zis_gcd_minus.\n apply Zis_gcd_plus.\n apply Zis_gcd_plus.\n apply Zis_gcd_minus.\n apply Zis_gcd_plus.\n apply Zis_gcd_plus.\n apply Zis_gcd_plus.\n applyQed.",
                    "Lemma Zgcd_minus: forall a b d:Z, Zis_gcd a (b - a) d -> Zis_gcd a b d.\nProof.\n intros.\n destruct a; simpl; auto.\nQed.",
                    "Lemma Zgcd_minus: forall a b d:Z, Zis_gcd a (b - a) d -> Zis_gcd a b d.\nProof.\n intros.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destruct a; simpl; auto.\n destructQed."
                ]
            },
            {
                "filepath": "./coq_projects/hoare-tut/exgcd.v",
                "context": " fun e => fst e\n   | VY => fun e => snd e\n   end.\n\n(** I consider only two binary operators [PLUS] and [MINUS]. Their\nmeaning is given by [eval_binOP] below *)\nInductive binOP: Type := PLUS | MINUS.\n \nDefinition eval_binOP: binOP -> Z -> Z -> Z :=\n fun op => match op with\n  | PLUS => Zplus\n  | MINUS => Zminus\n end.\n\n(** I consider only three comparison operators [EQ], [NEQ] and\n[LE]. Their meaning is given by [eval_relOP] below *)\nInductive relOP: Type := EQ | NEQ | LE.\n\nDefinition eval_relOP: relOP -> Z -> Z -> bool :=\n fun op => match op with\n  | EQ => Zeq_bool\n  | NEQ => Zneq_bool\n  | LE => Zle_bool\n end. \n\n(** Here is the abstract syntax of expressions. The semantics is given\nby [eval] below *)\nInductive ExExpr: Type -> Type :=\n | const: forall (A:Type), A -> (ExExpr A)\n | binop: binOP -> (ExExpr Z) -> (ExExpr Z) -> (ExExpr Z)\n | relop: relOP -> (ExExpr Z) -> (ExExpr Z) -> (ExExpr bool)\n | getvar: forall (A:Type), (ExVar A) -> (ExExpr A). \n\nDefinition Expr:= ExExpr.\n\nFixpoint eval (A:Type) (expr:Expr A) (e:Env) { struct expr } : A :=\n match expr in ExExpr A return A with\n | const A v => v\n | binop op e1 e2 => eval_binOP op (eval e1 e) (eval e2 e)\n | relop op e1 e2 => eval_relOP op (eval e1 e) (eval e2 e)\n | getvar A x => (get x e)\nend.\n\nEnd Example.\n\n(** * Instantiation of the Hoare logic on this langage. *)\nModule HL :=  HoareLogic(Example).\nImport HL.\nImport Example.\n\n(** These coercions makes the abstract syntax more user-friendly *)\nCoercion getvar: ExVar >-> ExExpr.\nCoercion binop: binOP >-> Funclass.\nCoercion relop: relOP >-> Funclass.\n\n(** A last coercion useful for assertions *)\nCoercion get: ExVar >-> Funclass.\n\n(** ** A [gcd] computation in this language *)\nDefinition gcd := \n  (Iwhile (NEQ VX VY)\n          (Iif (LE VX VY)\n               (Iset VY (MINUS VY VX))\n               (Iset VX (MINUS VX VY)))).\n\n(** A small technical lemma on the mathematical notion of gcd (called\n[Zis_gcd]) *)\nLemma Zgcd_minus: forall a b d:Z, Zis_gcd a (b - a) d -> Zis_gcd a b d.\nProof.\n  intros a b d H; case H; constructor; intuition (auto with zarith).\n  replace b with (b-a+a)%Z.\n  auto with zarith.\n  omega.\nQed.\n\nHint Resolve Zgcd_minus: zarith.\n\n(** Two other lemmas relating [Zneq_bool] function with inequality\nrelation *)\n",
                "context_tokens": 742,
                "proof_start_offset": 3674,
                "proof_end_offset": 3889,
                "proof": "Lemma Zneq_bool_false: forall x y, Zneq_bool x y=false -> x=y.\nProof.\nintros x y H0; apply Zcompare_Eq_eq; generalize H0; clear H0; unfold Zneq_bool.\ncase (x ?= y)%Z; auto; try (intros; discriminate); auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma Zneq_bool_false: forall x y, Zneq_bool x y=false -> x=y.\nProof.\n  intros x y z H; case H; constructor; intuition (auto with zarith).\n  replace b with (b-a)%Z.\n  auto with zarith.\n  replace b with (b-a)%Z.\n  auto with zarith.\n  replace b with (b-a)%Z.\n  auto with zarith.\n  rewrite Z.add_comm.\n  omega.\n  omega.\nQed.",
                    "Lemma Zneq_bool_false: forall x y, Zneq_bool x y=false -> x=y.\nProof.\n  intros x y H; case H; constructor; intuition (auto with zarith).\n  replace b with (b-a)%Z.\n  auto with zarith.\n  omega.\n  omega.\n  omega.\n  omega.\n  omega.\n  omega.\nQed.",
                    "Lemma Zneq_bool_false: forall x y, Zneq_bool x y=false -> x=y.\nProof.\n  intros a b d H; case H; constructor; intuition (auto with zarith).\n  replace b with (b-a+b)%Z.\n  auto with zarith.\n  replace b with (b-a)%Z.\n  auto with zarith.\n  replace b with (b-a)%Z.\n  auto with zarith.\n  replace b with (b-a)%Z.\n  auto with zarith.\n  replace b with (b-a)%Z.\n  auto with zarith.\n  replace b with (b-a)%Z.\n  auto with zarith.\n  replace b with (b-a)%Z.\n  auto with zarith.\n  replace b with (b-a)%Z.\n  auto with zarith.\n  replace b with (b-b)%Z.\n  auto with zarith.\n  replace b with (b-b)%Z.\n  auto with zarith.\n  replace b with (b-a)%Z.\n  auto with zarith.\n  replace b with (b-b)%Z.\n  auto with zarith.\n  replace b with (b-b)%Z.\n  auto with zarith.\n  replace b with (b-b-b)%Z.\n  auto with zarith.\n  replace b with (b-Qed.",
                    "Lemma Zneq_bool_false: forall x y, Zneq_bool x y=false -> x=y.\nProof.\n  intros a b d H; case H; constructor; intuition (auto with zarith).\n  rewrite Z.eq_bool_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_false_falseQed.",
                    "Lemma Zneq_bool_false: forall x y, Zneq_bool x y=false -> x=y.\nProof.\n  intros a b d H; case H; constructor; intuition (auto with zarith).\n  replace b with (b-a)%Z.\n  auto with zarith.\n  omega.\n  replace b with (b-a)%Z.\n  auto with zarith.\n  omega.\n  replace b with (b-a)%Z.\n  auto with zarith.\n  omega.\n  omega.\n  replace b with (b-a)%Z.\n  auto with zarith.\n  omega.\n  omega.\n  omega.\n  omega.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/hoare-tut/exgcd.v",
                "context": " Z -> Z :=\n fun op => match op with\n  | PLUS => Zplus\n  | MINUS => Zminus\n end.\n\n(** I consider only three comparison operators [EQ], [NEQ] and\n[LE]. Their meaning is given by [eval_relOP] below *)\nInductive relOP: Type := EQ | NEQ | LE.\n\nDefinition eval_relOP: relOP -> Z -> Z -> bool :=\n fun op => match op with\n  | EQ => Zeq_bool\n  | NEQ => Zneq_bool\n  | LE => Zle_bool\n end. \n\n(** Here is the abstract syntax of expressions. The semantics is given\nby [eval] below *)\nInductive ExExpr: Type -> Type :=\n | const: forall (A:Type), A -> (ExExpr A)\n | binop: binOP -> (ExExpr Z) -> (ExExpr Z) -> (ExExpr Z)\n | relop: relOP -> (ExExpr Z) -> (ExExpr Z) -> (ExExpr bool)\n | getvar: forall (A:Type), (ExVar A) -> (ExExpr A). \n\nDefinition Expr:= ExExpr.\n\nFixpoint eval (A:Type) (expr:Expr A) (e:Env) { struct expr } : A :=\n match expr in ExExpr A return A with\n | const A v => v\n | binop op e1 e2 => eval_binOP op (eval e1 e) (eval e2 e)\n | relop op e1 e2 => eval_relOP op (eval e1 e) (eval e2 e)\n | getvar A x => (get x e)\nend.\n\nEnd Example.\n\n(** * Instantiation of the Hoare logic on this langage. *)\nModule HL :=  HoareLogic(Example).\nImport HL.\nImport Example.\n\n(** These coercions makes the abstract syntax more user-friendly *)\nCoercion getvar: ExVar >-> ExExpr.\nCoercion binop: binOP >-> Funclass.\nCoercion relop: relOP >-> Funclass.\n\n(** A last coercion useful for assertions *)\nCoercion get: ExVar >-> Funclass.\n\n(** ** A [gcd] computation in this language *)\nDefinition gcd := \n  (Iwhile (NEQ VX VY)\n          (Iif (LE VX VY)\n               (Iset VY (MINUS VY VX))\n               (Iset VX (MINUS VX VY)))).\n\n(** A small technical lemma on the mathematical notion of gcd (called\n[Zis_gcd]) *)\nLemma Zgcd_minus: forall a b d:Z, Zis_gcd a (b - a) d -> Zis_gcd a b d.\nProof.\n  intros a b d H; case H; constructor; intuition (auto with zarith).\n  replace b with (b-a+a)%Z.\n  auto with zarith.\n  omega.\nQed.\n\nHint Resolve Zgcd_minus: zarith.\n\n(** Two other lemmas relating [Zneq_bool] function with inequality\nrelation *)\nLemma Zneq_bool_false: forall x y, Zneq_bool x y=false -> x=y.\nProof.\n intros x y H0; apply Zcompare_Eq_eq; generalize H0; clear H0; unfold Zneq_bool. case (x?= y)%Z; auto; \n try (intros; discriminate); auto. \nQed.\n\n",
                "context_tokens": 742,
                "proof_start_offset": 3891,
                "proof_end_offset": 4060,
                "proof": "Lemma Zneq_bool_true: forall x y, Zneq_bool x y=true -> x<>y.\nProof.\nintros x y; unfold Zneq_bool.\nintros H H0; subst.\nrewrite Zcompare_refl in H.\ndiscriminate.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma Zneq_bool_true: forall x y, Zneq_bool x y=true -> x<>y.\nProof.\n intros x y H; apply Zcompare_Eq_eq; generalize H0; clear H0; unfold Z.lt_bool; case (x?=y)%Z; auto; \n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros;Qed.",
                    "Lemma Zneq_bool_true: forall x y, Zneq_bool x y=true -> x<>y.\nProof.\n intros x y H; apply Zcompare_Eq_eq; generalize H0; clear H0; unfold Z.lt_bool.\n case (x?=y)%Z; auto; try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros;Qed.",
                    "Lemma Zneq_bool_true: forall x y, Zneq_bool x y=true -> x<>y.\nProof.\n intros x y H0; apply Zcompare_Eq_eq; generalize H0; clear H0; unfold Zneq_bool; case (x?=y)%Z; auto;\n try (intros; discriminate); auto.\nQed.",
                    "Lemma Zneq_bool_true: forall x y, Zneq_bool x y=true -> x<>y.\nProof.\n intros x y H0; apply Zcompare_Eq_eq; generalize H0; clear H0; unfold Zneq_bool.\n case (x?=y)%Z; auto; \n try (intros; discriminate); auto; \n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n try (intros; discriminate);\n tryQed.",
                    "Lemma Zneq_bool_true: forall x y, Zneq_bool x y=true -> x<>y.\nProof.\n intros x y H; apply Zcompare_Eq_eq; generalize H; clear H; unfold Zneq_bool in H;\n rewrite <- Zneq_bool_true; auto with zarith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/hoare-tut/totalhoarelogic.v",
                "context": " p e1 e0]\"\n    implies that there exists [n] and [ef] such that \"[execn (S n) e0 (Iwhile cond p) ef]\"\n    and \"[execn n e1 (Iwhile cond p) ef]\".\n*)\nLemma reduces_wf: forall cond p, well_founded (reduces cond p).\nProof.\n  unfold well_founded.\n  intros cond p e0; apply Acc_intro.\n  intros e1 H; unfold reduces in H.\n  decompose [ex and] H; clear H.\n  clear H2 H0 e0.\n  case (exec_execn H1).  \n  intros n.\n  generalize cond p e1 x; clear cond p e1 x H1.\n  elim n.\n  (* case 0 *)\n  intros cond p e0 e1 H; inversion_clear H.\n  (* recursive case *)\n  clear n; intros n HR cond p e0 e1 H.\n  inversion_clear H.\n  inversion_clear H0.\n  set (b:=E.eval cond e0) in * |-.\n  cut (E.eval cond e0=b); auto.   \n  generalize H; clear H; case b; simpl.\n  (* case cond=true *)\n    intros H; \n    inversion_clear H.\n    intros; \n    apply Acc_intro.\n    intros e2 H3; unfold reduces in H3.\n    intuition.\n    rewrite (exec_deterministic H3 H0); eauto.\n    (* case cond=false *)\n    intros H H0; apply Acc_intro.\n    unfold reduces; rewrite H0.\n    intuition.\n    discriminate.\nQed.\nHint Resolve reduces_wf: hoare.\n\n(** * Completeness\n\n    The proof of completeness proceeds by induction over [prog] syntax.\n\n*)\nLemma wp_complete: forall prog post, prog [= post =] |= (synt_wp prog post).\nProof.\n unfold wp.\n  intros prog post e H; case H; clear H.\n  intros e' H; case H; clear H.\n  generalize post e e'; clear post e e'; elim prog; clear prog; simpl.\n  (* - case [Iskip] *)\n  intros post e e' H; exec_inversion H; auto.\n  (* - case [Iset] *)\n  intros A v expr post e e' H; exec_inversion H; auto.\n  (* - case [Iif] *)\n  intros cond p1 Hp1 p2 Hp2 post e e' H; exec_inversion H.\n  case (E.eval cond e); simpl; firstorder auto || discriminate.\n  (* - case [Iseq] *)\n  intros p1 Hp1 p2 Hp2 post e e' H.\n  exec_inversion H.\n  eauto.\n  (* - case [Iwhile] *)\n  intros cond p Hp post e e' H H0.\n  constructor 1 with (x:=wp (Iwhile cond p) post).\n  constructor 1 with (x:=reduces cond p).\n  unfold wp; (intuition eauto with hoare);\n    dec2 e1 H1;\n    case H1; clear H1; intros H1;\n    exec_inversion H1;\n    intros e2 H1; exec_inversion H1;\n    rewrite H2; intros e3 H1; exec_inversion H1;\n    unfold reduces; eauto with hoare.\nQed.\n\n(** * Combining the previous results with transitivity of [ |= ] *)\n\nHint Resolve wp_complete wp_sound: hoare.\n\n",
                "context_tokens": 741,
                "proof_start_offset": 11171,
                "proof_end_offset": 11284,
                "proof": "Theorem soundness: forall pre p post, pre |= (synt_wp p post) -> pre |= p [=post=].\nProof.\nauto with hoare.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem soundness: forall pre p post, pre |= (synt_wp p post) -> pre |= p [=post=].\nProof.\n  intros.\n  apply hoare_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_complete_Qed.",
                    "Theorem soundness: forall pre p post, pre |= (synt_wp p post) -> pre |= p [=post=].\nProof.\n  intros until 1; intros; case H; clear H.\n  induction H; intros; simpl; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0;Qed.",
                    "Theorem soundness: forall pre p post, pre |= (synt_wp p post) -> pre |= p [=post=].\nProof.\n  intros until p; intros; case H; clear H.\n  induction H; intros.\n  inversion H; subst.\n  (* - case *)\n  intros H0 H0; inversion H0; subst; auto.\n  (* - case *)\n  intros H0; inversion H0; subst; auto.\n  (* - case *)\n  intros H0; inversion H0; subst; auto.\n  (* - case *)\n  intros H0; inversion H0; subst; auto.\n  (* - case *)\n  intros H1; inversion H0; subst; auto.\n  (* - case *)\n  intros H0; inversion H0; subst; auto.\n  (* - case *)\n  intros H1; inversion H0; subst; auto.\n  (* - case *)\n  intros H1; inversion H1; subst; auto.\n  (* case *)\n  intros H0; inversion H0; subst; auto.\n  (* case *)\n  intros H1; inversion H1; subst; auto.\n  (* case *)\n  intros H1; inversion H0; subst; auto.\n  (* case *)\n  intros H1; inversion H1; subst; auto.\n  (* case *)\n  intros H1; inversion H; subst;Qed.",
                    "Theorem soundness: forall pre p post, pre |= (synt_wp p post) -> pre |= p [=post=].\nProof.\n  intros until post.\n  destruct (eval cond p post) as [n [n [n [n [n [n [n [n [n [n [n [n [n [n [n [n [n [n [n [n [n [n [n [n [n [n [n [n [nn [n [n [n [n [n [nn [n [n [n [n [n [n [n [nn [n [nn [n [n [nn [n [n [n [nn [nn [n [n [n [nn [nn [n [n [n [nn [n [n [nn [nn [n [n [n [n [n [nn [n [n n]]]]]]]. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega. omega.Qed.",
                    "Theorem soundness: forall pre p post, pre |= (synt_wp p post) -> pre |= p [=post=].\nProof.\n  intros until p.\n  intros.\n  destruct (classic (forall x, P x -> P x) -> P x.\n  intros x x H0.\n  generalize (H x).\n  induction H; clear H.\n  intros.\n  destruct (classic (forall x, P x) -> P x).\n  destruct H0; clear H0; intros.\n  destruct H0; subst; auto.\n  destruct H1; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.\n  destruct H0; subst; auto.Qed."
                ]
            },
            {
                "filepath": "./coq_projects/hoare-tut/totalhoarelogic.v",
                "context": "nd \"[execn n e1 (Iwhile cond p) ef]\".\n*)\nLemma reduces_wf: forall cond p, well_founded (reduces cond p).\nProof.\n  unfold well_founded.\n  intros cond p e0; apply Acc_intro.\n  intros e1 H; unfold reduces in H.\n  decompose [ex and] H; clear H.\n  clear H2 H0 e0.\n  case (exec_execn H1).  \n  intros n.\n  generalize cond p e1 x; clear cond p e1 x H1.\n  elim n.\n  (* case 0 *)\n  intros cond p e0 e1 H; inversion_clear H.\n  (* recursive case *)\n  clear n; intros n HR cond p e0 e1 H.\n  inversion_clear H.\n  inversion_clear H0.\n  set (b:=E.eval cond e0) in * |-.\n  cut (E.eval cond e0=b); auto.   \n  generalize H; clear H; case b; simpl.\n  (* case cond=true *)\n    intros H; \n    inversion_clear H.\n    intros; \n    apply Acc_intro.\n    intros e2 H3; unfold reduces in H3.\n    intuition.\n    rewrite (exec_deterministic H3 H0); eauto.\n    (* case cond=false *)\n    intros H H0; apply Acc_intro.\n    unfold reduces; rewrite H0.\n    intuition.\n    discriminate.\nQed.\nHint Resolve reduces_wf: hoare.\n\n(** * Completeness\n\n    The proof of completeness proceeds by induction over [prog] syntax.\n\n*)\nLemma wp_complete: forall prog post, prog [= post =] |= (synt_wp prog post).\nProof.\n unfold wp.\n  intros prog post e H; case H; clear H.\n  intros e' H; case H; clear H.\n  generalize post e e'; clear post e e'; elim prog; clear prog; simpl.\n  (* - case [Iskip] *)\n  intros post e e' H; exec_inversion H; auto.\n  (* - case [Iset] *)\n  intros A v expr post e e' H; exec_inversion H; auto.\n  (* - case [Iif] *)\n  intros cond p1 Hp1 p2 Hp2 post e e' H; exec_inversion H.\n  case (E.eval cond e); simpl; firstorder auto || discriminate.\n  (* - case [Iseq] *)\n  intros p1 Hp1 p2 Hp2 post e e' H.\n  exec_inversion H.\n  eauto.\n  (* - case [Iwhile] *)\n  intros cond p Hp post e e' H H0.\n  constructor 1 with (x:=wp (Iwhile cond p) post).\n  constructor 1 with (x:=reduces cond p).\n  unfold wp; (intuition eauto with hoare);\n    dec2 e1 H1;\n    case H1; clear H1; intros H1;\n    exec_inversion H1;\n    intros e2 H1; exec_inversion H1;\n    rewrite H2; intros e3 H1; exec_inversion H1;\n    unfold reduces; eauto with hoare.\nQed.\n\n(** * Combining the previous results with transitivity of [ |= ] *)\n\nHint Resolve wp_complete wp_sound: hoare.\n\nTheorem soundness: forall pre p post, pre |= (synt_wp p post) -> pre |= p [=post=].\nProof.\n auto with hoare.\nQed.\n\n",
                "context_tokens": 742,
                "proof_start_offset": 11286,
                "proof_end_offset": 11413,
                "proof": "Theorem completeness: forall pre p post, pre |= p [=post=] -> pre |= (synt_wp p post).\nProof.\nintuition auto with hoare.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem completeness: forall pre p post, pre |= p [=post=] -> pre |= (synt_wp p post).\nProof.\nintros.\napply (exp_complete_complete _ _ _ _ _ _ H).\nQed.",
                    "Theorem completeness: forall pre p post, pre |= p [=post=] -> pre |= (synt_wp p post).\nProof.\n auto with hoare.\nQed.",
                    "Theorem completeness: forall pre p post, pre |= p [=post=] -> pre |= (synt_wp p post).\nProof.\n intros.\ndestruct H as [r [r [r [P Q]]]].\nexists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists r; exists rQed.",
                    "Theorem completeness: forall pre p post, pre |= p [=post=] -> pre |= (synt_wp p post).\nProof.\nintros.\nunfold post |= p.\nintros.\nunfold post |= p.\nintros.\napply (exp_complete _ _ _ _ H0).\nQed.",
                    "Theorem completeness: forall pre p post, pre |= p [=post=] -> pre |= (synt_wp p post).\nProof.\n auto with hoare.\nQed."
                ]
            }
        ],
        "huffman": [
            {
                "filepath": "./coq_projects/huffman/theories/Aux.v",
                "context": "(* This program is free software; you can redistribute it and/or      *)\n(* modify it under the terms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU Lesser General Public License for more details.                *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(**********************************************************************\n    Proof of Huffman algorithm: Aux.v                                \n                                                                     \n    Auxillary functions & Theorems                                   \n                                                                     \n    Definitions:                                                     \n      le_bool, map2, first_n, skip_n find_min find_max               \n                                                                     \n    Theorems: minus, map, app                                        \n                                                                     \n                                    Laurent.Thery@inria.fr (2003)    \n **********************************************************************)\n\nRequire Export List.\nRequire Export Arith.\nFrom Huffman Require Export sTactic.\nRequire Import Inverse_Image.\nRequire Import Wf_nat.\n\n(* Some facts about the minus operator *)\nSection Minus.\n \n",
                "context_tokens": 322,
                "proof_start_offset": 2063,
                "proof_end_offset": 2308,
                "proof": "Theorem lt_minus_O : forall n m, m < n -> 0 < n - m.\nProof.\nintros n; elim n; simpl in |- *; auto.\nintros m H1; Contradict H1; auto with arith.\nintros n1 Rec m; case m; simpl in |- *; auto.\nintros m1 H1; apply Rec; apply lt_S_n; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem lt_minus_O : forall n m, m < n -> 0 < n - m.\nProof.\nintros n m H; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clear H; intros m; elim H; clearQed.",
                    "Theorem lt_minus_O : forall n m, m < n -> 0 < n - m.\nProof.\nintros n m H.\napply lt_minus_O_n.\napply le_minus_O_n.\napply le_minus_O_n.\napply le_minus_O_n.\napply le_minus_O_n.\napply le_minus_O_n.\napply le_minus_n_O_n.\napply le_minus_O_n.\napply le_minus_O_n.\napply le_minus_O_n.\napply le_minus_O_n.\napply le_minus_O_n.\napply le_minus_O_n.\napply le_minus_O_n.\napply le_minus_O_n.\napply le_minus_O_n.\napply le_minus_O_n.\napply le_minus_O_n.\napply le_minus_O_n.\napply le_minus_O_n.\napply le_minus_O_n.\napply le_minus_O_n.\napply le_minus_O_n.\napply le_minus_O_n.\napply le_minusQed.",
                    "Theorem lt_minus_O : forall n m, m < n -> 0 < n - m.\nProof.\n  intros n m H; unfold lt in |- *; simpl in |- *; intros H; discriminate.\n  apply lt_minus_O.\nQed.",
                    "Theorem lt_minus_O : forall n m, m < n -> 0 < n - m.\nProof.\nintros n m H; induction m; simpl; auto with arith.\nQed.",
                    "Theorem lt_minus_O : forall n m, m < n -> 0 < n - m.\nProof.\nintros n m H; unfold lt_minus, lt_minus, le_minus_minus_n.\nintros n m H; unfold lt_minus, lt_minus_minus_n, le_minus_minus_n.\nintros n m H; unfold lt_minus, lt_minus_minus_n, le_minus_n_n, le_minus_n_n_n, le_minus_n_n_n, le_minus_n_n_n_n, le_minus_n_n_n, le_minus_n_n_n, le_minus_n_n_n_n, le_minus_n_n_S.\nintros n m H; unfold lt_minus, lt_minus_minus_n, le_minus_n_n, le_minus_n_n_n, le_minus_n_n_S.\nintros n m H; unfold lt_minus_minus, le_minus_n, le_minus_n_n_S.\nintros n m H; unfold lt_minus_minus, le_minus_n, le_minus_n_nQed."
                ]
            },
            {
                "filepath": "./coq_projects/huffman/theories/Aux.v",
                "context": "(* This program is free software; you can redistribute it and/or      *)\n(* modify it under the terms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU Lesser General Public License for more details.                *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(**********************************************************************\n    Proof of Huffman algorithm: Aux.v                                \n                                                                     \n    Auxillary functions & Theorems                                   \n                                                                     \n    Definitions:                                                     \n      le_bool, map2, first_n, skip_n find_min find_max               \n                                                                     \n    Theorems: minus, map, app                                        \n                                                                     \n                                    Laurent.Thery@inria.fr (2003)    \n **********************************************************************)\n\nRequire Export List.\nRequire Export Arith.\nFrom Huffman Require Export sTactic.\nRequire Import Inverse_Image.\nRequire Import Wf_nat.\n\n(* Some facts about the minus operator *)\nSection Minus.\n \nTheorem lt_minus_O : forall n m, m < n -> 0 < n - m.\nProof using.\nintros n; elim n; simpl in |- *; auto.\nintros m H1; Contradict H1; auto with arith.\nintros n1 Rec m; case m; simpl in |- *; auto.\nintros m1 H1; apply Rec; apply lt_S_n; auto.\nQed.\n \n",
                "context_tokens": 414,
                "proof_start_offset": 2311,
                "proof_end_offset": 2459,
                "proof": "Theorem le_minus : forall a b : nat, a - b <= a.\nProof.\nintros a; elim a; simpl in |- *; auto.\nintros n H b; case b; simpl in |- *; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem le_minus : forall a b : nat, a - b <= a.\nProof using lt_minus.\nintros a b; apply le_minus_O_n; auto with arith.\nintros m1 n2 Rec m1 Rec m1 Rec m1 Rec m2 Rec m1 Rec m1 Rec m1 Rec m1 Rec m1 Rec m1 Rec m2 Rec m1 Rec m1 Rec m1 Rec m1 Rec m1 Rec m1 Rec m1 m1 Rec m2 Rec m1 Rec m2.\nintros m1 Rec m1 Rec m1 Rec m1 Rec m1 m1 Rec m2 Rec m2.\nintros m1 Rec m1 Rec m1 Rec m1 m1 Rec m1 Rec m1 m2 Rec m2.\nintros m1 Rec m1 Rec m1 m2 Rec m1 Rec m2.\nintros m1 Rec m1 Rec m1 m2 Rec m1 Rec m1 m2 Rec m2.\nintros m1 Rec m1 Rec m1 m1 Rec m1 Rec m1 m2 Rec m1 m2 Rec m1 s Rec m1 m2 Rec m1 m2 Rec m2.\nintros m1 Rec m1 Rec m1 m2 Rec m1 m1 Rec m2.Qed.",
                    "Theorem le_minus : forall a b : nat, a - b <= a.\nProof using le_minus_O_n.\nintros; elim n; simpl in |- *; auto.\nintros m1 n2; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m1 H1; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m1 H1; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m1; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m1; ContradictQed.",
                    "Theorem le_minus : forall a b : nat, a - b <= a.\nProof using lt_minus_O.\nintros n m; elim n; simpl in |- *; auto with arith.\nintros m1 n2 H1; elim n; simpl in |- *; auto with arith.\nintros m1 n2 H1; elim n2; simpl in |- *; auto with arith.\nintros m1 n2 H1; elim n2; simpl in |- *; auto with arith.\nintros m2 H1; elim n2; simpl in |- *; auto with arith.\nintros m1 n2 H1; elim n2; simpl in |- *; auto with arith.\nintros m2 H1; elim n2; simpl in |- *; auto with arith.\nintros m1 n2 H1; elim n2; simpl in |- *; auto with arith.\nintros m1 n2 H1; elim n2; simpl in |- *; auto with arith.\nintros m1 n2 H2; elim n2; simpl in |- *; auto with arith.\nintros m1 n2 H2; elim n2; simpl in |- *; auto with arith.\nintros m1 n2 H1; elim n2; simpl in |- *; auto with arith.\nintros m1 nQed.",
                    "Theorem le_minus : forall a b : nat, a - b <= a.\nProof using lt_minus_O.\nintros; elim n; simpl in |- *; auto with arith.\nintros m1 H1; apply Rec; apply lt_n; auto with arith.\nintros m1 n2 Rec m1 Rec m2 Rec m1 Rec m2 Rec m1 Rec m1 Rec m2 Rec m2 Rec m1 Rec m1 Rec m1 Rec m1 Rec m1 Rec m2.\nintros m1 Rec m1 Rec m1 Rec m1 Rec m1 Rec m1 Rec m1' Rec m1' Rec m1' Rec m2' Rec m1' Rec m1' Rec m1' Rec m1' Rec m2' Rec m2' Rec m1' Rec m1' Rec m2' Rec m1' Rec m2' Rec m2' Rec m2' Rec m2' Rec m1' Rec m2' Rec m1' Rec m1' Rec m2' Rec m1' Rec m1' Rec m1' Rec m1' Rec m1' Rec m1' Rec m2' Rec m1' Rec m1' Rec m2' Rec m' Rec m1' Rec m1' Rec m2Qed.",
                    "Theorem le_minus : forall a b : nat, a - b <= a.\nProof using lt_minus_O_O_n.\nintros n m; elim n; simpl in |- *; auto.\nintros m1 n2; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m1; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m1; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m2; Contradict H1; auto with arith.\nintros m1; ContradictQed."
                ]
            },
            {
                "filepath": "./coq_projects/huffman/theories/Aux.v",
                "context": "e *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU Lesser General Public License for more details.                *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(**********************************************************************\n    Proof of Huffman algorithm: Aux.v                                \n                                                                     \n    Auxillary functions & Theorems                                   \n                                                                     \n    Definitions:                                                     \n      le_bool, map2, first_n, skip_n find_min find_max               \n                                                                     \n    Theorems: minus, map, app                                        \n                                                                     \n                                    Laurent.Thery@inria.fr (2003)    \n **********************************************************************)\n\nRequire Export List.\nRequire Export Arith.\nFrom Huffman Require Export sTactic.\nRequire Import Inverse_Image.\nRequire Import Wf_nat.\n\n(* Some facts about the minus operator *)\nSection Minus.\n \nTheorem lt_minus_O : forall n m, m < n -> 0 < n - m.\nProof using.\nintros n; elim n; simpl in |- *; auto.\nintros m H1; Contradict H1; auto with arith.\nintros n1 Rec m; case m; simpl in |- *; auto.\nintros m1 H1; apply Rec; apply lt_S_n; auto.\nQed.\n \nTheorem le_minus : forall a b : nat, a - b <= a.\nProof using.\nintros a; elim a; simpl in |- *; auto.\nintros n H b; case b; simpl in |- *; auto.\nQed.\n \n",
                "context_tokens": 439,
                "proof_start_offset": 2462,
                "proof_end_offset": 3023,
                "proof": "Theorem minus_minus_simpl4 : forall a b c : nat, b <= c -> c <= a -> a - b - (a - c) = c - b.\nProof.\nintros a b c H H0.\napply plus_minus; auto with arith.\nrewrite minus_plus_simpl_l_reverse with (p := b + c).\nrepeat rewrite plus_assoc_reverse.\nrewrite <- le_plus_minus; auto with arith.\nrepeat rewrite plus_assoc.\nrewrite (plus_comm b c).\nrepeat rewrite plus_assoc_reverse.\nrewrite <- le_plus_minus; auto with arith.\nrepeat rewrite (fun x => plus_comm x a).\nrewrite <- minus_plus_simpl_l_reverse; auto with arith.\napply le_trans with (1 := H); auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem minus_minus_simpl4 : forall a b c : nat, b <= c -> c <= a -> a - b - (a - c) = c - b.\nProof using lt_minus_simpl.\nintros a b c; case b; simpl in |- *; auto.\nintros n1 n2; case b; simpl in |- *; auto.\nintros n1 n2; case b; simpl in |- *; auto.\nintros n1 n2; case b; simpl in |- *; auto.\nintros n1 n2; case b; simpl in |- *; auto.\nintros n2; case b; simpl in |- *; auto.\nintros n1; case b; simpl in |- *; auto.\nintros n1; case b; simpl in |- *; auto.\nintros n1 n2; case b; simpl in |- *; auto.\nintros n1 n2; case b; simpl in |- *; auto.\nintros n1 n2; case b; simpl in |- *; auto.\nintros n1 n2; case b; simpl in |- *; auto.\nintros n2; case b; simpl in |- *; auto.\nintros n1 n2; case b; simpl in |- *; auto.\nintros n1 n2; case b; simpl in |- *; auto.\nintros n1 n2; case b; simpl in |- *; auto.Qed.",
                    "Theorem minus_minus_simpl4 : forall a b c : nat, b <= c -> c <= a -> a - b - (a - c) = c - b.\nProof using le_minus_simpl_4; auto.\nintros n; elim n; simpl in |- *; auto.\nintros n0 H1; elim n0; simpl in |- *; auto.\nintros m1 H1; elim n0; simpl in |- *; auto.\nintros m1 H1; elim n0; simpl in |- *; auto.\nintros m1 n0 H1; elim n0; simpl in |- *; auto.\nintros m1 n0 H1; elim n0; simpl in |- *; auto.\nintros m1 n0 H1 H2; elim n0; simpl in |- *; auto.\nintros m1 n0 H1; elim n0; simpl in |- *; auto.\nintros m1 n0 H1 H2; elim n0; simpl in |- *; auto.\nintros m1 n0 H2 H1; elim n0; simpl in |- *; auto.\nintros m1 n0 H2; elim n0; simpl in |- *; auto.\nintros m1 n0 H2; elim n0; simpl in |- *; auto.\nintros m1 n0 H2; elim n0; simpl in |- *; auto.\nintrosQed.",
                    "Theorem minus_minus_simpl4 : forall a b c : nat, b <= c -> c <= a -> a - b - (a - c) = c - b.\nProof using lt_minus_simpl_4; auto.\nintros n m; elim n; simpl in |- *; auto.\nintros m1 n H2; case b; simpl in |- *; auto.\nintros m1 H1; case b; simpl in |- *; auto.\nintros m2 H1; case b; simpl in |- *; auto.\nintros m2 H1; case b; simpl in |- *; auto.\nintros m2 H1; case b; simpl in |- *; auto.\nintros m1 H2; case b; simpl in |- *; auto.\nintros m2 H1; case b; simpl in |- *; auto.\nintros m2 H1; case b; simpl in |- *; auto.\nintros m1 H2; case b; simpl in |- *; auto.\nintros m2 H2; case b; simpl in |- *; auto.\nintros m2 H1; case b; simpl in |- *; auto.\nintros m2 H1; case b; simpl in |- *; auto.\nintros m2 H2; case b; simpl in |- *; auto.\nintros m2 H1 H2; case b; simpl in |- *; auto.\nintrosQed.",
                    "Theorem minus_minus_simpl4 : forall a b c : nat, b <= c -> c <= a -> a - b - (a - c) = c - b.\nProof using le_minus_simpl.\nintros a b c; case b; simpl in |- *; auto.\nintros m1 H1; case b; simpl in |- *; auto.\nintros m1 n2; case b; simpl in |- *; auto.\nintros m1 n2 H1 H2; case b; simpl in |- *; auto.\nintros m2 n2 H2; case b; simpl in |- *; auto.\nintros m1 n2 H3; case b; simpl in |- *; auto.\nintros m1 n2 H3; case b; simpl in |- *; auto.\nintros m2 n3 H3; case b; simpl in |- *; auto.\nintros m2 n3 H4; case b; simpl in |- *; auto.\nintros m1 n3 H4; case b; simpl in |- *; auto.\nintros m2 n3 H4; case b; simpl in |- *; auto.\nintros m2 n3 H4; case b; simpl in |- *; auto.\nintros m3 n4 H4; case b; simpl in |- *; auto.\nintros m2 n4 H4; case b; simpl in |- *; auto.Qed.",
                    "Theorem minus_minus_simpl4 : forall a b c : nat, b <= c -> c <= a -> a - b - (a - c) = c - b.\nProof using lt_minus_simpl_r.\nintros a b c H1; elim H; simpl in |- *; auto.\nintros m1 H2; elim H1; simpl in |- *; auto.\nintros m2 H1; apply Rec; apply le_minus_simpl_4; auto.\nintros m2 H1 H2; apply Rec; apply le_minus_simpl_4; auto.\nintros m1 H2; apply Rec; apply le_minus_simpl_5; auto.\nintros m1 H2; apply Rec; apply le_minus_simpl_5; auto.\nintros m1 H2; apply Rec; apply le_minus_simpl_5; auto.\nintros m1 H2; apply Rec; apply le_minus_simpl_5; auto.\nintros m1 H2; apply Rec; apply le_minus_simpl_5; auto.\nintros m1 H2; apply Rec; apply le_minus_simpl_5; auto.\nintros m1 H3; apply Rec; apply le_minus_simpl_5; auto.\nintros m2 H3; apply Rec; apply le_minus_simpl_5; autoQed."
                ]
            },
            {
                "filepath": "./coq_projects/huffman/theories/Aux.v",
                "context": "                      *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(**********************************************************************\n    Proof of Huffman algorithm: Aux.v                                \n                                                                     \n    Auxillary functions & Theorems                                   \n                                                                     \n    Definitions:                                                     \n      le_bool, map2, first_n, skip_n find_min find_max               \n                                                                     \n    Theorems: minus, map, app                                        \n                                                                     \n                                    Laurent.Thery@inria.fr (2003)    \n **********************************************************************)\n\nRequire Export List.\nRequire Export Arith.\nFrom Huffman Require Export sTactic.\nRequire Import Inverse_Image.\nRequire Import Wf_nat.\n\n(* Some facts about the minus operator *)\nSection Minus.\n \nTheorem lt_minus_O : forall n m, m < n -> 0 < n - m.\nProof using.\nintros n; elim n; simpl in |- *; auto.\nintros m H1; Contradict H1; auto with arith.\nintros n1 Rec m; case m; simpl in |- *; auto.\nintros m1 H1; apply Rec; apply lt_S_n; auto.\nQed.\n \nTheorem le_minus : forall a b : nat, a - b <= a.\nProof using.\nintros a; elim a; simpl in |- *; auto.\nintros n H b; case b; simpl in |- *; auto.\nQed.\n \nTheorem minus_minus_simpl4 :\n forall a b c : nat, b <= c -> c <= a -> a - b - (a - c) = c - b.\nProof using.\nintros a b c H H0.\napply plus_minus; auto with arith.\nrewrite minus_plus_simpl_l_reverse with (p := b + c).\nrepeat rewrite plus_assoc_reverse.\nrewrite <- le_plus_minus; auto with arith.\nrepeat rewrite plus_assoc.\nrewrite (plus_comm b c).\nrepeat rewrite plus_assoc_reverse.\nrewrite <- le_plus_minus; auto with arith.\nrepeat rewrite (fun x => plus_comm x a).\nrewrite <- minus_plus_simpl_l_reverse; auto with arith.\napply le_trans with (1 := H); auto.\nQed.\n \n",
                "context_tokens": 524,
                "proof_start_offset": 3026,
                "proof_end_offset": 3298,
                "proof": "Theorem plus_minus_simpl4 : forall a b c : nat, b <= a -> c <= b -> a - b + (b - c) = a - c.\nProof.\nintros a b c H H0.\napply plus_minus.\nrewrite (fun x y => plus_comm (x - y)).\nrewrite plus_assoc.\nrewrite <- le_plus_minus; auto.\nrewrite <- le_plus_minus; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem plus_minus_simpl4 : forall a b c : nat, b <= a -> c <= b -> a - b + (b - c) = a - c.\nProof using.\nintros a b c H0 H1; case b; simpl in |- *; auto.\nintros m1 H2; elim n; simpl in |- *; auto.\nintros m1 H2; elim n; simpl in |- *; auto.\nintros m1 H2; elim n; simpl in |- *; auto.\nintros m2 H3; elim n; simpl in |- *; auto.\nintros m1 H3; elim n; simpl in |- *; auto.\nintros m1 H3; elim n; simpl in |- *; auto.\nintros m1 H3; elim n; simpl in |- *; auto.\nintros m1 H3; elim n; simpl in |- *; auto.\nintros m2 H3; elim n; simpl in |- *; auto.\nintros m1 H3; elim n; simpl in |- *; auto.\nintros m1 H3; elim n; simpl in |- *; auto.\nintros m1 H4; elim n; simpl in |- *; auto.\nintros m1 H4; elim n; simpl in |- *; auto.\nintros m2 H4; elim n; simpl in |- *; auto.\nintros m1 H4; elim nQed.",
                    "Theorem plus_minus_simpl4 : forall a b c : nat, b <= a -> c <= b -> a - b + (b - c) = a - c.\nProof using.\nintros a b c H0 H1.\napply plus_minus_simpl_r with (p := b); auto with arith.\nQed.",
                    "Theorem plus_minus_simpl4 : forall a b c : nat, b <= a -> c <= b -> a - b + (b - c) = a - c.\nProof using.\nintros a b c H0 H1.\napply plus_minus_simpl_l; auto with arith.\nQed.",
                    "Theorem plus_minus_simpl4 : forall a b c : nat, b <= a -> c <= b -> a - b + (b - c) = a - c.\nProof using.\nintros a b c H0; case b; simpl in |- *; auto.\nintros n H0 H1 H2; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H2; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H2; case b; simpl in |- *; auto.\nintros n0 H2; case b; simpl in |- *; auto.\nintros n0 H2; case b; simpl in |- *; auto.\nintros n0 H2; case b; simpl in |- *; auto.\nintros n0 H2; case b; simpl in |- *; auto.\nintros n0 H2; case b; simpl in |- *; auto.\nintros n0 H2; case b; simpl in |- *; auto.\nintros n0 H2; case b; simpl in |- *; auto.\nintros n0 H2; case b; simpl in |- *; auto.\nintros n0 H2; caseQed.",
                    "Theorem plus_minus_simpl4 : forall a b c : nat, b <= a -> c <= b -> a - b + (b - c) = a - c.\nProof using.\nintros a b c H H0.\napply plus_minus_simpl_l with (p := b); auto with arith.\napply plus_minus_simpl_r; auto with arith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/huffman/theories/Aux.v",
                "context": "****************************************************\n    Proof of Huffman algorithm: Aux.v                                \n                                                                     \n    Auxillary functions & Theorems                                   \n                                                                     \n    Definitions:                                                     \n      le_bool, map2, first_n, skip_n find_min find_max               \n                                                                     \n    Theorems: minus, map, app                                        \n                                                                     \n                                    Laurent.Thery@inria.fr (2003)    \n **********************************************************************)\n\nRequire Export List.\nRequire Export Arith.\nFrom Huffman Require Export sTactic.\nRequire Import Inverse_Image.\nRequire Import Wf_nat.\n\n(* Some facts about the minus operator *)\nSection Minus.\n \nTheorem lt_minus_O : forall n m, m < n -> 0 < n - m.\nProof using.\nintros n; elim n; simpl in |- *; auto.\nintros m H1; Contradict H1; auto with arith.\nintros n1 Rec m; case m; simpl in |- *; auto.\nintros m1 H1; apply Rec; apply lt_S_n; auto.\nQed.\n \nTheorem le_minus : forall a b : nat, a - b <= a.\nProof using.\nintros a; elim a; simpl in |- *; auto.\nintros n H b; case b; simpl in |- *; auto.\nQed.\n \nTheorem minus_minus_simpl4 :\n forall a b c : nat, b <= c -> c <= a -> a - b - (a - c) = c - b.\nProof using.\nintros a b c H H0.\napply plus_minus; auto with arith.\nrewrite minus_plus_simpl_l_reverse with (p := b + c).\nrepeat rewrite plus_assoc_reverse.\nrewrite <- le_plus_minus; auto with arith.\nrepeat rewrite plus_assoc.\nrewrite (plus_comm b c).\nrepeat rewrite plus_assoc_reverse.\nrewrite <- le_plus_minus; auto with arith.\nrepeat rewrite (fun x => plus_comm x a).\nrewrite <- minus_plus_simpl_l_reverse; auto with arith.\napply le_trans with (1 := H); auto.\nQed.\n \nTheorem plus_minus_simpl4 :\n forall a b c : nat, b <= a -> c <= b -> a - b + (b - c) = a - c.\nProof using.\nintros a b c H H0.\napply plus_minus.\nrewrite (fun x y => plus_comm (x - y)).\nrewrite plus_assoc.\nrewrite <- le_plus_minus; auto.\nrewrite <- le_plus_minus; auto.\nQed.\n \nEnd Minus.\nHint Resolve le_minus: arith.\n\n(* Equality test on boolean *)\nSection EqBool.\n \n",
                "context_tokens": 593,
                "proof_start_offset": 3392,
                "proof_end_offset": 3555,
                "proof": "Definition eq_bool_dec : forall a b : bool, {a = b} + {a <> b}.\nProof.\nintros a b; case a; case b; simpl in |- *; auto.\nright; red in |- *; intros; discriminate.\nDefined.",
                "end_command": "Defined.",
                "generated_proofs": [
                    "Definition eq_bool_dec : forall a b : bool, {a = b} + {a <> b}.\n\nLemma eq_bool_dec : forall a b : bool, {a = b} + {a <> b}.\nProof using eq_bool_dec. Defined.",
                    "Definition eq_bool_dec : forall a b : bool, {a = b} + {a <> b}.\n  Proof using eq_bool_dec.\n  intros a b c H0; case b; simpl in |- *; auto.\nDefined.",
                    "Definition eq_bool_dec : forall a b : bool, {a = b} + {a <> b}.\n\nLemma eq_bool_dec : forall a b : bool, {a = b} + {a <> b} + {a <> b}.\nProof using eq_bool_dec. Defined.",
                    "Definition eq_bool_dec : forall a b : bool, {a = b} + {a <> b}.\n  Proof using eq_bool_dec.\n  intros a b c H0.\n  apply plus_minus_simpl_l.\n  intros a b c H0.\n  apply plus_minus_simpl_r.\n  intros a b c H0.\n  apply plus_minus_simpl_r.\n  intros a b c H0.\n  apply plus_minus_simpl_r.\n  intros a b c H0 H0.\n  apply plus_minus_simpl_l.\n  intros a b c H0.\n  apply plus_minus_simpl_r.\n  intros a b c H0.\n  apply plus_minus_simpl_r.\n  intros a b c H0 H0.\n  apply plus_minus_simpl_r.\n  intros a b c H0 H0.\n  apply plus_minus_simpl_l.\n  intros a b c H0.\n  apply plus_minus_simpl_l.\n  intros a b c H0.\n  apply plus_minus_simpl_r.\n  intros a b c H0.\n  apply plus_minus_simpl_l.\n  intros a b c H0 H0.\n  apply plus_minus_simpl_r.\n  intros a b cDefined.",
                    "Definition eq_bool_dec : forall a b : bool, {a = b} + {a <> b}.\n  Proof using eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_dec.\n  exact eq_bool_decDefined."
                ]
            },
            {
                "filepath": "./coq_projects/huffman/theories/Aux.v",
                "context": "                \n      le_bool, map2, first_n, skip_n find_min find_max               \n                                                                     \n    Theorems: minus, map, app                                        \n                                                                     \n                                    Laurent.Thery@inria.fr (2003)    \n **********************************************************************)\n\nRequire Export List.\nRequire Export Arith.\nFrom Huffman Require Export sTactic.\nRequire Import Inverse_Image.\nRequire Import Wf_nat.\n\n(* Some facts about the minus operator *)\nSection Minus.\n \nTheorem lt_minus_O : forall n m, m < n -> 0 < n - m.\nProof using.\nintros n; elim n; simpl in |- *; auto.\nintros m H1; Contradict H1; auto with arith.\nintros n1 Rec m; case m; simpl in |- *; auto.\nintros m1 H1; apply Rec; apply lt_S_n; auto.\nQed.\n \nTheorem le_minus : forall a b : nat, a - b <= a.\nProof using.\nintros a; elim a; simpl in |- *; auto.\nintros n H b; case b; simpl in |- *; auto.\nQed.\n \nTheorem minus_minus_simpl4 :\n forall a b c : nat, b <= c -> c <= a -> a - b - (a - c) = c - b.\nProof using.\nintros a b c H H0.\napply plus_minus; auto with arith.\nrewrite minus_plus_simpl_l_reverse with (p := b + c).\nrepeat rewrite plus_assoc_reverse.\nrewrite <- le_plus_minus; auto with arith.\nrepeat rewrite plus_assoc.\nrewrite (plus_comm b c).\nrepeat rewrite plus_assoc_reverse.\nrewrite <- le_plus_minus; auto with arith.\nrepeat rewrite (fun x => plus_comm x a).\nrewrite <- minus_plus_simpl_l_reverse; auto with arith.\napply le_trans with (1 := H); auto.\nQed.\n \nTheorem plus_minus_simpl4 :\n forall a b c : nat, b <= a -> c <= b -> a - b + (b - c) = a - c.\nProof using.\nintros a b c H H0.\napply plus_minus.\nrewrite (fun x y => plus_comm (x - y)).\nrewrite plus_assoc.\nrewrite <- le_plus_minus; auto.\nrewrite <- le_plus_minus; auto.\nQed.\n \nEnd Minus.\nHint Resolve le_minus: arith.\n\n(* Equality test on boolean *)\nSection EqBool.\n \nDefinition eq_bool_dec : forall a b : bool, {a = b} + {a <> b}.\nintros a b; case a; case b; simpl in |- *; auto.\nright; red in |- *; intros; discriminate.\nDefined.\n \nEnd EqBool.\n\n(*A function to compare naturals *)\nSection LeBool.\n \nFixpoint le_bool (a b : nat) {struct b} : bool :=\n  match a, b with\n  | O, _ => true\n  | S a1, S b1 => le_bool a1 b1\n  | _, _ => false\n  end.\n \n",
                "context_tokens": 701,
                "proof_start_offset": 3769,
                "proof_end_offset": 4044,
                "proof": "Theorem le_bool_correct1 : forall a b : nat, a <= b -> le_bool a b = true.\nProof.\nintros a; elim a; simpl in |- *; auto.\nintros b; case b; simpl in |- *; auto.\nintros n H b; case b; simpl in |- *.\nintros H1; inversion H1.\nintros n0 H0; apply H.\napply le_S_n; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem le_bool_correct1 : forall a b : nat, a <= b -> le_bool a b = true.\nProof using le_bool_correct1. Qed.",
                    "Theorem le_bool_correct1 : forall a b : nat, a <= b -> le_bool a b = true.\nProof using le_bool_correct1. Qed.",
                    "Theorem le_bool_correct1 : forall a b : nat, a <= b -> le_bool a b = true.\nProof using le_bool_correct1. Qed.",
                    "Theorem le_bool_correct1 : forall a b : nat, a <= b -> le_bool a b = true.\nProof using le_bool_correct2. Qed.",
                    "Theorem le_bool_correct1 : forall a b : nat, a <= b -> le_bool a b = true.\nintros a b; case b; simpl in |- *; auto.\nintros a b; case b; simpl in |- *; auto.\nintros a b; case b; simpl in |- *; auto.\nintros a b; case b; simpl in |- *; auto.\nintros a b; case b; simpl in |- *; auto.\nintros a b; case b; simpl in |- *; auto.\nintros a b; case b; simpl in |- *; auto.\nintros a b; case b; simpl in |- *; auto.\nintros a b; case b; simpl in |- *; auto.\nintros a b; case b; simpl in |- *; auto.\nintros a b; case b; simpl in |- *; auto.\nintros a b; case b; simpl in |- *; auto.\nintros a b; case b; simpl in |- *; auto.\nintros a b; case b; simpl in |- *; auto.\nintros a b; case b; simpl in |- *; auto.\nintros a b; case b; simpl in |- *; auto.\nintros a b; case b; simpl in |- *; auto.\nintros a b; case b; simpl in |- *; auto.\nintros a bQed."
                ]
            },
            {
                "filepath": "./coq_projects/huffman/theories/Aux.v",
                "context": " Huffman Require Export sTactic.\nRequire Import Inverse_Image.\nRequire Import Wf_nat.\n\n(* Some facts about the minus operator *)\nSection Minus.\n \nTheorem lt_minus_O : forall n m, m < n -> 0 < n - m.\nProof using.\nintros n; elim n; simpl in |- *; auto.\nintros m H1; Contradict H1; auto with arith.\nintros n1 Rec m; case m; simpl in |- *; auto.\nintros m1 H1; apply Rec; apply lt_S_n; auto.\nQed.\n \nTheorem le_minus : forall a b : nat, a - b <= a.\nProof using.\nintros a; elim a; simpl in |- *; auto.\nintros n H b; case b; simpl in |- *; auto.\nQed.\n \nTheorem minus_minus_simpl4 :\n forall a b c : nat, b <= c -> c <= a -> a - b - (a - c) = c - b.\nProof using.\nintros a b c H H0.\napply plus_minus; auto with arith.\nrewrite minus_plus_simpl_l_reverse with (p := b + c).\nrepeat rewrite plus_assoc_reverse.\nrewrite <- le_plus_minus; auto with arith.\nrepeat rewrite plus_assoc.\nrewrite (plus_comm b c).\nrepeat rewrite plus_assoc_reverse.\nrewrite <- le_plus_minus; auto with arith.\nrepeat rewrite (fun x => plus_comm x a).\nrewrite <- minus_plus_simpl_l_reverse; auto with arith.\napply le_trans with (1 := H); auto.\nQed.\n \nTheorem plus_minus_simpl4 :\n forall a b c : nat, b <= a -> c <= b -> a - b + (b - c) = a - c.\nProof using.\nintros a b c H H0.\napply plus_minus.\nrewrite (fun x y => plus_comm (x - y)).\nrewrite plus_assoc.\nrewrite <- le_plus_minus; auto.\nrewrite <- le_plus_minus; auto.\nQed.\n \nEnd Minus.\nHint Resolve le_minus: arith.\n\n(* Equality test on boolean *)\nSection EqBool.\n \nDefinition eq_bool_dec : forall a b : bool, {a = b} + {a <> b}.\nintros a b; case a; case b; simpl in |- *; auto.\nright; red in |- *; intros; discriminate.\nDefined.\n \nEnd EqBool.\n\n(*A function to compare naturals *)\nSection LeBool.\n \nFixpoint le_bool (a b : nat) {struct b} : bool :=\n  match a, b with\n  | O, _ => true\n  | S a1, S b1 => le_bool a1 b1\n  | _, _ => false\n  end.\n \nTheorem le_bool_correct1 : forall a b : nat, a <= b -> le_bool a b = true.\nProof using.\nintros a; elim a; simpl in |- *; auto.\nintros b; case b; simpl in |- *; auto.\nintros n H b; case b; simpl in |- *.\nintros H1; inversion H1.\nintros n0 H0; apply H.\napply le_S_n; auto.\nQed.\n \n",
                "context_tokens": 741,
                "proof_start_offset": 4047,
                "proof_end_offset": 4291,
                "proof": "Theorem le_bool_correct2 : forall a b : nat, b < a -> le_bool a b = false.\nProof.\nintros a; elim a; simpl in |- *; auto.\nintros b H1; inversion H1.\nintros n H b; case b; simpl in |- *; auto.\nintros n0 H0; apply H.\napply lt_S_n; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem le_bool_correct2 : forall a b : nat, b < a -> le_bool a b = false.\nProof using.\nintros a b; elim b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1 H1; case b; simpl inQed.",
                    "Theorem le_bool_correct2 : forall a b : nat, b < a -> le_bool a b = false.\nProof using le_bool_correct2.\nintros a b; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; caseQed.",
                    "Theorem le_bool_correct2 : forall a b : nat, b < a -> le_bool a b = false.\nProof using.\nintros a b; elim a; simpl in |- *; auto.\nintros n0 H1; elim a; simpl in |- *; auto.\nintros n0 H1; elim a0; simpl in |- *; auto.\nintros n0 H1; elim a0; simpl in |- *; auto.\nintros n0 H1; elim a0; simpl in |- *; auto.\nintros n0 H1; elim a0; simpl in |- *; auto.\nintros n0 H1; elim a0; simpl in |- *; auto.\nintros n0 H1; elim a0; simpl in |- *; auto.\nintros n0 H1; elim a0; simpl in |- *; auto.\nintros n0 H1; elim a0; simpl in |- *; auto.\nintros n0 H1; elim a0; simpl in |- *; auto.\nintros n0 H1 H1; elim a0; simpl in |- *; auto.\nintros n0 H1; elim a0; simpl in |- *; auto.\nintros n0 H1; elim a0; simpl in |- *; auto.\nintros n0 H1; elim a0; simpl in |- *; autoQed.",
                    "Theorem le_bool_correct2 : forall a b : nat, b < a -> le_bool a b = false.\nProof using.\nintros a b; elim a; simpl in |- *; auto.\nintros n0 H1; elim H1; simpl in |- *; auto.\nintros n0 H1 H2; elim H1; simpl in |- *; auto.\nintros n0 H1; elim H1; simpl in |- *; auto.\nintros n0 H1; elim H2; simpl in |- *; auto.\nintros n0 H1; elim H2; simpl in |- *; auto.\nintros n0 H1; elim H1; simpl in |- *; auto.\nintros n0 H1; elim H2; simpl in |- *; auto.\nintros n0 H1; elim H2; simpl in |- *; auto.\nintros n0 H2; elim H2; simpl in |- *; auto.\nintros n0 H2; elim H3; simpl in |- *; auto.\nintros n0 H2; elim H3; simpl in |- *; auto.\nintros n0 H2; elim H3; simpl in |- *; auto.\nintros n0 H2; elim H3; simpl in |- *; auto.\nintros n0 H2; elim H3; simpl in |- *;Qed.",
                    "Theorem le_bool_correct2 : forall a b : nat, b < a -> le_bool a b = false.\nProof using.\nintros a b; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1 H2; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1 H2; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; caseQed."
                ]
            },
            {
                "filepath": "./coq_projects/huffman/theories/Aux.v",
                "context": "1 Rec m; case m; simpl in |- *; auto.\nintros m1 H1; apply Rec; apply lt_S_n; auto.\nQed.\n \nTheorem le_minus : forall a b : nat, a - b <= a.\nProof using.\nintros a; elim a; simpl in |- *; auto.\nintros n H b; case b; simpl in |- *; auto.\nQed.\n \nTheorem minus_minus_simpl4 :\n forall a b c : nat, b <= c -> c <= a -> a - b - (a - c) = c - b.\nProof using.\nintros a b c H H0.\napply plus_minus; auto with arith.\nrewrite minus_plus_simpl_l_reverse with (p := b + c).\nrepeat rewrite plus_assoc_reverse.\nrewrite <- le_plus_minus; auto with arith.\nrepeat rewrite plus_assoc.\nrewrite (plus_comm b c).\nrepeat rewrite plus_assoc_reverse.\nrewrite <- le_plus_minus; auto with arith.\nrepeat rewrite (fun x => plus_comm x a).\nrewrite <- minus_plus_simpl_l_reverse; auto with arith.\napply le_trans with (1 := H); auto.\nQed.\n \nTheorem plus_minus_simpl4 :\n forall a b c : nat, b <= a -> c <= b -> a - b + (b - c) = a - c.\nProof using.\nintros a b c H H0.\napply plus_minus.\nrewrite (fun x y => plus_comm (x - y)).\nrewrite plus_assoc.\nrewrite <- le_plus_minus; auto.\nrewrite <- le_plus_minus; auto.\nQed.\n \nEnd Minus.\nHint Resolve le_minus: arith.\n\n(* Equality test on boolean *)\nSection EqBool.\n \nDefinition eq_bool_dec : forall a b : bool, {a = b} + {a <> b}.\nintros a b; case a; case b; simpl in |- *; auto.\nright; red in |- *; intros; discriminate.\nDefined.\n \nEnd EqBool.\n\n(*A function to compare naturals *)\nSection LeBool.\n \nFixpoint le_bool (a b : nat) {struct b} : bool :=\n  match a, b with\n  | O, _ => true\n  | S a1, S b1 => le_bool a1 b1\n  | _, _ => false\n  end.\n \nTheorem le_bool_correct1 : forall a b : nat, a <= b -> le_bool a b = true.\nProof using.\nintros a; elim a; simpl in |- *; auto.\nintros b; case b; simpl in |- *; auto.\nintros n H b; case b; simpl in |- *.\nintros H1; inversion H1.\nintros n0 H0; apply H.\napply le_S_n; auto.\nQed.\n \nTheorem le_bool_correct2 : forall a b : nat, b < a -> le_bool a b = false.\nProof using.\nintros a; elim a; simpl in |- *; auto.\nintros b H1; inversion H1.\nintros n H b; case b; simpl in |- *; auto.\nintros n0 H0; apply H.\napply lt_S_n; auto.\nQed.\n \n",
                "context_tokens": 741,
                "proof_start_offset": 4294,
                "proof_end_offset": 4558,
                "proof": "Theorem le_bool_correct3 : forall a b : nat, le_bool a b = true -> a <= b.\nProof.\nintros a; elim a; simpl in |- *; auto.\nintros b; case b; simpl in |- *; auto with arith.\nintros n H b; case b; simpl in |- *; try (intros; discriminate); auto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem le_bool_correct3 : forall a b : nat, le_bool a b = true -> a <= b.\nProof using.\nintros a b; elim a; simpl in |- *; auto.\nintros n0 H0; inversion H1.\nintros n0 H0; inversion H1.\nintros n0 H0 H1; inversion H1.\nintros n0 H1; inversion H1.\nintros n0 H1 H1; inversion H1.\nintros n0 H1; inversion H1.\nintros n0 H1; inversion H1.\nintros n0 H1 H1; inversion H1.\nintros n0 H1; inversion H1.\nintros n0 H1; inversion H1.\nintros n0 H1; inversion H1.\nintros n0 H1; inversion H1.\nintros n0 H1; inversion H1.\nintros n0 H1; inversion H1.\nintros n0 H1; inversion H1.\nintros n0 H1; inversion H1.\nintros n0 H1; inversion H1.\nintros n0 H1; inversion H1.\nintros n0; inversion H1.\nintros n0 H1; inversion H1.\nintros n0; inversion H1.\nintros n0;Qed.",
                    "Theorem le_bool_correct3 : forall a b : nat, le_bool a b = true -> a <= b.\nProof using.\nintros a b H0; elim a; simpl in |- *; auto.\nintros n0 H1; elim a; simpl in |- *; auto.\nintros n0 H1; elim a; simpl in |- *; auto.\nintros n0 H1; elim a; simpl in |- *; auto.\nintros n0 H1; elim a; simpl in |- *; auto.\nintros n0 H1; elim a; simpl in |- *; auto.\nintros n0 H1; elim a; simpl in |- *; auto.\nintros n0 H1; elim a; simpl in |- *; auto.\nintros n0 H1; elim a; simpl in |- *; auto.\nintros n0 H1; elim a; simpl in |- *; auto.\nintros n0 H1; elim a; simpl in |- *; auto.\nintros n0 H1; elim a; simpl in |- *; auto.\nintros n0 H1; elim a; simpl in |- *; auto.\nintros n0 H1; elim a; simpl in |- *; auto.\nintros n0 H1; elim a; simpl in |- *; auto.\nintros n0 H1; elim a; simpl inQed.",
                    "Theorem le_bool_correct3 : forall a b : nat, le_bool a b = true -> a <= b.\nProof using.\nintros a b; elim a; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *; auto.\nintros n0 H1; case b; simpl in |- *;Qed.",
                    "Theorem le_bool_correct3 : forall a b : nat, le_bool a b = true -> a <= b.\nProof using.\nintros a b; elim a; simpl in |- *; auto.\nintros n0 H0; case b; simpl in |- *; auto.\nintros n0 H1 H1; apply le_trans with (1 := H0); auto.\nintros n0 H1; apply le_trans with (1 := H0); auto.\nintros n0 H1; apply le_trans with (1 := H0); auto.\nintros n0 H1; apply le_trans with (1 := H1); auto.\nintros n0 H1; apply le_trans with (1 := H0); auto.\nintros n0 H1; apply le_trans with (1 := H1); auto.\nintros n0 H1; apply le_trans with (1 := H0); auto.\nintros n0 H1; apply le_trans with (1 := H0); auto.\nintros n0 H1; apply le_trans with (1 := H1); auto.\nintros n0 H1; apply le_trans with (1 := H0); auto.\nintros n0 H1; apply le_trans with (1 := H0); auto.Qed.",
                    "Theorem le_bool_correct3 : forall a b : nat, le_bool a b = true -> a <= b.\nProof using.\nintros a b; elim a; simpl in |- *; auto.\nintros n0 H0; case b; simpl in |- *; auto.\nintros n0 H1 H1; apply H.\nintros n0 H1; apply H1.\nintros n0 H1; apply H1.\nintros n0 H1; apply H1.\nintros n0 H1; apply H1.\nintros n0 H1; apply H1.\nintros n0 H1; apply H1.\nintros n0 H1; apply H1.\nintros n0 H1; apply H1.\nintros n0 H1; apply H1.\nintros n0 H1; apply H1.\nintros n0; apply H1.\nintros n0 H1; apply H1.\nintros n0 H1; apply H1.\nintros n0; apply H1.\nintros n0 H1; apply H1.\nintros n0; apply H1.\nintros n0 H1; apply H1.\nintros n0; apply H1.\nintros n0 H1; apply H1.\nintros n0; apply H1.Qed."
                ]
            },
            {
                "filepath": "./coq_projects/huffman/theories/Aux.v",
                "context": "Proof using.\nintros C a l k; generalize a; elim l; simpl in |- *; auto.\nQed.\n \nTheorem fold_right_app :\n forall a l1 l2,\n fold_right g a (l1 ++ l2) = fold_right g (fold_right g a l2) l1.\nProof using.\nintros a l1; generalize a; elim l1; simpl in |- *; auto; clear a l1.\nintros a l H a0 l2; rewrite H; auto.\nQed.\n \nTheorem fold_left_init :\n (forall (a : A) (b : B), h (f a b) = f (h a) b) ->\n forall (a : A) (l : list B), fold_left f l (h a) = h (fold_left f l a).\nProof using.\nintros H a l; generalize a; elim l; clear l a; simpl in |- *; auto.\nintros a l H0 a0.\nrewrite <- H; auto.\nQed.\n \nEnd fold.\n\n(* Some properties of list operators: app, map,... *)\nSection List.\nVariables (A : Type) (B : Type) (C : Type).\nVariable f : A -> B.\n\n(* An induction theorem for list based on length *)\nTheorem list_length_ind :\n forall P : list A -> Prop,\n (forall l1 : list A,\n  (forall l2 : list A, length l2 < length l1 -> P l2) -> P l1) ->\n forall l : list A, P l.\nProof using.\nintros P H l;\n apply well_founded_ind with (R := fun x y : list A => length x < length y);\n auto.\napply wf_inverse_image with (R := lt); auto.\napply lt_wf.\nQed.\n \nDefinition list_length_induction :\n  forall P : list A -> Type,\n  (forall l1 : list A,\n   (forall l2 : list A, length l2 < length l1 -> P l2) -> P l1) ->\n  forall l : list A, P l.\nintros P H l;\n apply\n  well_founded_induction_type with (R := fun x y : list A => length x < length y);\n auto.\napply wf_inverse_image with (R := lt); auto.\napply lt_wf.\nDefined.\n \nTheorem in_ex_app :\n forall (a : A) (l : list A),\n In a l -> exists l1 : list A, (exists l2 : list A, l = l1 ++ a :: l2).\nProof using.\nintros a l; elim l; clear l; simpl in |- *; auto.\nintros H; case H.\nintros a1 l H [H1| H1]; auto.\nexists (nil (A:=A)); exists l; simpl in |- *; auto.\napply f_equal2 with (f := cons (A:=A)); auto.\ncase H; auto; intros l1 (l2, Hl2); exists (a1 :: l1); exists l2;\n simpl in |- *; auto.\napply f_equal2 with (f := cons (A:=A)); auto.\nQed.\n\n(* Properties of app *)\n",
                "context_tokens": 736,
                "proof_start_offset": 7607,
                "proof_end_offset": 7753,
                "proof": "Theorem length_app : forall l1 l2 : list A, length (l1 ++ l2) = length l1 + length l2.\nProof.\nintros l1; elim l1; simpl in |- *; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem length_app : forall l1 l2 : list A, length (l1 ++ l2) = length l1 + length l2.\nProof using.\nintros l1 l2; elim l1; simpl in |- *; auto.\nintros l2; case l1; auto.\nintros l2 H1 H2; case l2; auto.\nintros l1 H2; case l2; auto.\nintros l1 H2; case l2; auto.\nintros l2 H2; case l2; auto.\nintros l2 H2; case l2; auto.\nintros l2 H3; case l2; auto.\nintros l2 H3; case l2; auto.\nintros l2 H3; case l2; auto.\nintros l3; case l1; auto.\nintros l3 H3; case l3; auto.\nintros l3 H4; case l3; auto.\nintros l3 H4; case l3; auto.\nintros l3 H4; case l3; auto.\nintros l3 H4; case l3; auto.\nintros l4 H4; case l3; auto.\nintros l4 H4; case l3; auto.\nintros l4; case l4; auto.\nintros l4 HQed.",
                    "Theorem length_app : forall l1 l2 : list A, length (l1 ++ l2) = length l1 + length l2.\nProof using.\nintros l1 l2; elim l1; simpl in |- *; auto.\nintros l2; elim l1; simpl in |- *; auto.\nintros l2 H1; elim l2; simpl in |- *; auto.\nintros l1 H1; elim l2; simpl in |- *; auto.\nintros l2; elim l2; simpl in |- *; auto.\nintros l1 H1; elim l2; simpl in |- *; auto.\nintros l2 H1; elim l2; simpl in |- *; auto.\nintros l2; elim l2; simpl in |- *; auto.\nintros l1 H1; elim l2; simpl in |- *; auto.\nintros l2 H1; elim l2; simpl in |- *; auto.\nintros l2 H1; elim l2; simpl in |- *; auto.\nintros l2 H1; elim l2; simpl in |- *; auto.\nintros l2 H1; elim l2; simpl in |- *; auto.\nintros l2 H1; elim l2; simpl in |- *; auto.\nintros l2 H1; elim l2; simpl in |- *; auto.\nintros lQed.",
                    "Theorem length_app : forall l1 l2 : list A, length (l1 ++ l2) = length l1 + length l2.\nProof using.\nintros l1 l2; elim l2; simpl in |- *; auto.\nintros l1 l2; elim l1; simpl in |- *; auto.\nintros l2; elim l1; simpl in |- *; auto.\nintros l1; elim l2; simpl in |- *; auto.\nintros l2; elim l1; simpl in |- *; auto.\nintros l2; elim l2; simpl in |- *; auto.\nintros l2; elim l2; simpl in |- *; auto.\nintros l2; elim l2; simpl in |- *; auto.\nintros l2; elim l2; simpl in |- *; auto.\nintros l2; elim l2; simpl in |- *; auto.\nintros l2; elim l2; simpl in |- *; auto.\nintros l1; elim l2; simpl in |- *; auto.\nintros l2; elim l2; simpl in |- *; auto.\nintros l2; elim l2; simpl in |- *; auto.\nintros l2; elim l2; simpl in |- *; auto.\nintros l2; elim l2; simpl in |- *; auto.\nintros l2; elim l2Qed.",
                    "Theorem length_app : forall l1 l2 : list A, length (l1 ++ l2) = length l1 + length l2.\nProof using.\nintros l1 l2; elim l1; simpl in |- *; auto.\nQed.",
                    "Theorem length_app : forall l1 l2 : list A, length (l1 ++ l2) = length l1 + length l2.\nProof using.\nintros l1 l2; elim l1; simpl in |- *; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/huffman/theories/Aux.v",
                "context": " (fold_right g a l2) l1.\nProof using.\nintros a l1; generalize a; elim l1; simpl in |- *; auto; clear a l1.\nintros a l H a0 l2; rewrite H; auto.\nQed.\n \nTheorem fold_left_init :\n (forall (a : A) (b : B), h (f a b) = f (h a) b) ->\n forall (a : A) (l : list B), fold_left f l (h a) = h (fold_left f l a).\nProof using.\nintros H a l; generalize a; elim l; clear l a; simpl in |- *; auto.\nintros a l H0 a0.\nrewrite <- H; auto.\nQed.\n \nEnd fold.\n\n(* Some properties of list operators: app, map,... *)\nSection List.\nVariables (A : Type) (B : Type) (C : Type).\nVariable f : A -> B.\n\n(* An induction theorem for list based on length *)\nTheorem list_length_ind :\n forall P : list A -> Prop,\n (forall l1 : list A,\n  (forall l2 : list A, length l2 < length l1 -> P l2) -> P l1) ->\n forall l : list A, P l.\nProof using.\nintros P H l;\n apply well_founded_ind with (R := fun x y : list A => length x < length y);\n auto.\napply wf_inverse_image with (R := lt); auto.\napply lt_wf.\nQed.\n \nDefinition list_length_induction :\n  forall P : list A -> Type,\n  (forall l1 : list A,\n   (forall l2 : list A, length l2 < length l1 -> P l2) -> P l1) ->\n  forall l : list A, P l.\nintros P H l;\n apply\n  well_founded_induction_type with (R := fun x y : list A => length x < length y);\n auto.\napply wf_inverse_image with (R := lt); auto.\napply lt_wf.\nDefined.\n \nTheorem in_ex_app :\n forall (a : A) (l : list A),\n In a l -> exists l1 : list A, (exists l2 : list A, l = l1 ++ a :: l2).\nProof using.\nintros a l; elim l; clear l; simpl in |- *; auto.\nintros H; case H.\nintros a1 l H [H1| H1]; auto.\nexists (nil (A:=A)); exists l; simpl in |- *; auto.\napply f_equal2 with (f := cons (A:=A)); auto.\ncase H; auto; intros l1 (l2, Hl2); exists (a1 :: l1); exists l2;\n simpl in |- *; auto.\napply f_equal2 with (f := cons (A:=A)); auto.\nQed.\n\n(* Properties of app *)\nTheorem length_app :\n forall l1 l2 : list A, length (l1 ++ l2) = length l1 + length l2.\nProof using.\nintros l1; elim l1; simpl in |- *; auto.\nQed.\n \n",
                "context_tokens": 731,
                "proof_start_offset": 7756,
                "proof_end_offset": 7948,
                "proof": "Theorem app_inv_head : forall l1 l2 l3 : list A, l1 ++ l2 = l1 ++ l3 -> l2 = l3.\nProof.\nintros l1; elim l1; simpl in |- *; auto.\nintros a l H l2 l3 H0; apply H; injection H0; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem app_inv_head : forall l1 l2 l3 : list A, l1 ++ l2 = l1 ++ l3 -> l2 = l3.\nProof using.\nintros l1 l2; elim l1; simpl in |- *; auto.\nQed.",
                    "Theorem app_inv_head : forall l1 l2 l3 : list A, l1 ++ l2 = l1 ++ l3 -> l2 = l3.\nProof using.\nintros l1 l2; elim l2; simpl in |- *; auto.\nintros l1 H1; elim l2; simpl in |- *; auto.\nQed.",
                    "Theorem app_inv_head : forall l1 l2 l3 : list A, l1 ++ l2 = l1 ++ l3 -> l2 = l3.\nProof using.\nintros l1 l2; elim l1; simpl in |- *; auto.\nQed.",
                    "Theorem app_inv_head : forall l1 l2 l3 : list A, l1 ++ l2 = l1 ++ l3 -> l2 = l3.\nProof using.\nintros l1; elim l1; simpl in |- *; auto.\nQed.",
                    "Theorem app_inv_head : forall l1 l2 l3 : list A, l1 ++ l2 = l1 ++ l3 -> l2 = l3.\nProof using.\nintros l1; elim l2; simpl in |- *; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/huffman/theories/HeightPred.v",
                "context": "                                                   *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU Lesser General Public License for more details.                *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n(**********************************************************************\n    Proof of Huffman algorithm: HeightPred.v                         \n                                                                     \n    Definition of the predicate that associates a height list        \n    with a cover                                                     \n                                                                     \n    Definition: height_pred                                          \n                                    Laurent.Thery@inria.fr (2003)    \n **********************************************************************)\n\nFrom Huffman Require Export OrderedCover.\nFrom Huffman Require Export WeightTree.\nRequire Import ArithRing.\nFrom Huffman Require Export Ordered.\nFrom Huffman Require Export Prod2List.\n \nSection HeightPred.\nVariable A : Type.\nVariable f : A -> nat.\nVariable eqA_dec : forall a b : A, {a = b} + {a <> b}.\n\n(* \n  A predicate that associates an initial height, a list of\n  height, a cover and a tree\n*)\nInductive height_pred : nat -> list nat -> list (btree A) -> btree A -> Prop :=\n  | height_pred_nil :\n      forall (n : nat) (t : btree A), height_pred n (n :: nil) (t :: nil) t\n  | height_pred_node :\n      forall (n : nat) (ln1 ln2 : list nat) (t1 t2 : btree A)\n        (l1 l2 : list (btree A)),\n      height_pred (S n) ln1 l1 t1 ->\n      height_pred (S n) ln2 l2 t2 ->\n      height_pred n (ln1 ++ ln2) (l1 ++ l2) (node t1 t2).\nHint Resolve height_pred_nil height_pred_node : core.\n\n(* The cover is an ordered cover *)\n",
                "context_tokens": 488,
                "proof_start_offset": 2578,
                "proof_end_offset": 2793,
                "proof": "Theorem height_pred_ordered_cover : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> ordered_cover l t.\nProof.\nintros n ln t l H; elim H; simpl in |- *; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem height_pred_ordered_cover : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> ordered_cover l t.\nProof.\nintros n t; induction t; simpl; auto; intros; try discriminate.\nQed.",
                    "Theorem height_pred_ordered_cover : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> ordered_cover l t.\nProof.\n  induction n; simpl; intros; auto.\n  apply lt_n_O_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n  apply le_n_Sn.\n Qed.",
                    "Theorem height_pred_ordered_cover : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> ordered_cover l t.\nProof.\n  intros n t; induction t; simpl; intros; auto.\n  destruct t; simpl; intros; auto.\n  destruct t; simpl; intros; auto.\n  destruct t; simpl; intros; auto.\n  destruct t; simpl; intros; auto.\n  destruct t; simpl; intros; auto.\n  destruct t; simpl; intros; auto.\n  destruct t; simpl; intros; auto.\n  destruct t; simpl; intros; auto.\n  destruct t; simpl; intros; auto.\n  destruct t; simpl; intros; auto.\n  destruct t; simpl; intros; auto.\n  destruct t; simpl; intros; auto.\n  destruct t; simpl; intros; auto.\n  destruct t; simpl; intros; auto.\n  destruct t; simpl; intros; auto.\n  destruct t; simpl; intros; auto.\n  destruct t; simpl; intros; auto.\n  destruct t; simpl; intros; auto.\n  destruct t; simpl; intros; auto.\n  destruct t; simpl; intros; auto.\n  destruct t; simpl; intros; auto.\n  destruct t; simpl; intros; auto.\n  destruct t; simpl; intros; auto.\n  destruct t; simpl; intros; autoQed.",
                    "Theorem height_pred_ordered_cover : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> ordered_cover l t.\nProof.\nintros n t; induction t; intros; simpl in *; intros; auto.\nQed.",
                    "Theorem height_pred_ordered_cover : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> ordered_cover l t.\nProof.\n  intros n t; induction t; simpl; intros; auto.\n  rewrite!size_pred_ordered_nat_node; auto.\n  rewrite!size_pred_ordered_nat_node; auto.\n  rewrite!size_pred_ordered_nat_node; auto.\n  rewrite!size_pred_ordered_nat_node; auto.\n  rewrite!size_pred_ordered_nat_node; auto.\n  rewrite!size_pred_ordered_nat_node; auto.\n  rewrite!size_pred_ordered_nat_node; auto.\n  rewrite!size_pred_ordered_nat_node; auto.\n  rewrite!size_pred_ordered_nat_node; auto.\n  rewrite!size_pred_ordered_nat_node; auto.\n  rewrite!size_pred_ordered_nat_node; auto.\n  rewrite!size_pred_ordered_nat_node; auto.\n  rewrite!size_pred_ordered_nat_node; auto.\n  rewrite!size_pred_ordered_nat_node; auto.\n  rewrite!size_pred_ordered_nat_node; auto.\n  rewrite!size_pred_ordered_nat_node; autoQed."
                ]
            },
            {
                "filepath": "./coq_projects/huffman/theories/HeightPred.v",
                "context": "CULAR PURPOSE.  See the      *)\n(* GNU Lesser General Public License for more details.                *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n(**********************************************************************\n    Proof of Huffman algorithm: HeightPred.v                         \n                                                                     \n    Definition of the predicate that associates a height list        \n    with a cover                                                     \n                                                                     \n    Definition: height_pred                                          \n                                    Laurent.Thery@inria.fr (2003)    \n **********************************************************************)\n\nFrom Huffman Require Export OrderedCover.\nFrom Huffman Require Export WeightTree.\nRequire Import ArithRing.\nFrom Huffman Require Export Ordered.\nFrom Huffman Require Export Prod2List.\n \nSection HeightPred.\nVariable A : Type.\nVariable f : A -> nat.\nVariable eqA_dec : forall a b : A, {a = b} + {a <> b}.\n\n(* \n  A predicate that associates an initial height, a list of\n  height, a cover and a tree\n*)\nInductive height_pred : nat -> list nat -> list (btree A) -> btree A -> Prop :=\n  | height_pred_nil :\n      forall (n : nat) (t : btree A), height_pred n (n :: nil) (t :: nil) t\n  | height_pred_node :\n      forall (n : nat) (ln1 ln2 : list nat) (t1 t2 : btree A)\n        (l1 l2 : list (btree A)),\n      height_pred (S n) ln1 l1 t1 ->\n      height_pred (S n) ln2 l2 t2 ->\n      height_pred n (ln1 ++ ln2) (l1 ++ l2) (node t1 t2).\nHint Resolve height_pred_nil height_pred_node : core.\n\n(* The cover is an ordered cover *)\nTheorem height_pred_ordered_cover :\n forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)),\n height_pred n ln l t -> ordered_cover l t.\nProof using.\nintros n ln t l H; elim H; simpl in |- *; auto.\nQed.\n\n(* The height list is never empty *)\n",
                "context_tokens": 533,
                "proof_start_offset": 2832,
                "proof_end_offset": 3143,
                "proof": "Theorem height_pred_not_nil1 : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> ln <> nil.\nProof.\nintros n ln t l H; elim H; simpl in |- *; auto.\nintros; discriminate.\nintros n0 ln1 ln2 t1 t2 l1 l2 H0; case ln1; simpl in |- *; auto.\nintros; discriminate.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem height_pred_not_nil1 : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> ln <> nil.\nProof.\nintros n t l H; elim H; simpl in |- *; auto.\nQed.",
                    "Theorem height_pred_not_nil1 : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> ln <> nil.\nProof using.\nintros n t l H; elim H; simpl in |- *; auto.\nQed.",
                    "Theorem height_pred_not_nil1 : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> ln <> nil.\nProof using.\nintros n t l H; elim H; simpl in |- *; auto.\nQed.",
                    "Theorem height_pred_not_nil1 : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> ln <> nil.\nProof using.\nintros n t l H; elim H; simpl in |- *; auto.\nQed.",
                    "Theorem height_pred_not_nil1 : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> ln <> nil.\nProof using.\nintros n t l H; elim H; simpl in |- *; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/huffman/theories/HeightPred.v",
                "context": "c., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n(**********************************************************************\n    Proof of Huffman algorithm: HeightPred.v                         \n                                                                     \n    Definition of the predicate that associates a height list        \n    with a cover                                                     \n                                                                     \n    Definition: height_pred                                          \n                                    Laurent.Thery@inria.fr (2003)    \n **********************************************************************)\n\nFrom Huffman Require Export OrderedCover.\nFrom Huffman Require Export WeightTree.\nRequire Import ArithRing.\nFrom Huffman Require Export Ordered.\nFrom Huffman Require Export Prod2List.\n \nSection HeightPred.\nVariable A : Type.\nVariable f : A -> nat.\nVariable eqA_dec : forall a b : A, {a = b} + {a <> b}.\n\n(* \n  A predicate that associates an initial height, a list of\n  height, a cover and a tree\n*)\nInductive height_pred : nat -> list nat -> list (btree A) -> btree A -> Prop :=\n  | height_pred_nil :\n      forall (n : nat) (t : btree A), height_pred n (n :: nil) (t :: nil) t\n  | height_pred_node :\n      forall (n : nat) (ln1 ln2 : list nat) (t1 t2 : btree A)\n        (l1 l2 : list (btree A)),\n      height_pred (S n) ln1 l1 t1 ->\n      height_pred (S n) ln2 l2 t2 ->\n      height_pred n (ln1 ++ ln2) (l1 ++ l2) (node t1 t2).\nHint Resolve height_pred_nil height_pred_node : core.\n\n(* The cover is an ordered cover *)\nTheorem height_pred_ordered_cover :\n forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)),\n height_pred n ln l t -> ordered_cover l t.\nProof using.\nintros n ln t l H; elim H; simpl in |- *; auto.\nQed.\n\n(* The height list is never empty *)\nTheorem height_pred_not_nil1 :\n forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)),\n height_pred n ln l t -> ln <> nil.\nProof using.\nintros n ln t l H; elim H; simpl in |- *; auto.\nintros; discriminate.\nintros n0 ln1 ln2 t1 t2 l1 l2 H0; case ln1; simpl in |- *; auto.\nintros; discriminate.\nQed.\n\n(* The cover list is never empty *) \n",
                "context_tokens": 594,
                "proof_start_offset": 3182,
                "proof_end_offset": 3491,
                "proof": "Theorem height_pred_not_nil2 : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> l <> nil.\nProof.\nintros n ln t l H; elim H; simpl in |- *; auto.\nintros; discriminate.\nintros n0 ln1 ln2 t1 t2 l1 l2 H0; case l1; simpl in |- *; auto.\nintros; discriminate.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem height_pred_not_nil2 : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> l <> nil.\nProof using.\nintros n m H; elim H; simpl in |- *; auto.\nintros; discriminate.\nintros n0 ln1 t2 H; discriminate.\nintros n0 ln1 t2 H0; discriminate.\nintros n0 ln1 t2 H1 H0; discriminate.\nintros n0 ln2 t3 H1; discriminate.\nintros n0 ln1 t3; discriminate.\nintros n0 ln1 t3 H1; discriminate.\nintros n0 ln1 t3 H1; discriminate.\nintros n0 ln1 t3 H1; discriminate.\nintros n0 ln2 t3 H1 t3; discriminate.\nintros n0 ln1 t3 H1 H2; discriminate.\nintros n0 ln1 t3 H3; discriminate.\nintros n0 ln1 t3 H3; discriminate.\nintros n0 ln1 t3 H4; discriminate.\nintros n0 ln1 t4 H4; discriminate.\nintros n0 ln1 t4 H4; discriminate.\nintros n0 ln1 t4 H4; discriminate.\nintros n0 ln1 t4; discriminate.\nintros n0 ln1 t4 H5Qed.",
                    "Theorem height_pred_not_nil2 : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> l <> nil.\nProof using.\nintros n; elim H; simpl in |- *; auto.\nintros; discriminate.\nQed.",
                    "Theorem height_pred_not_nil2 : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> l <> nil.\nProof using.\nintros n H; elim H; simpl in |- *; auto.\nintros n0; discriminate.\nQed.",
                    "Theorem height_pred_not_nil2 : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> l <> nil.\nProof using.\nintros n H; elim H; simpl in |- *; auto.\nintros; discriminate.\nintros n0 ln1 t2 t2 t3 H1 H3; case ln1; simpl in |- *; auto.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nintros; discriminate.\nQed.",
                    "Theorem height_pred_not_nil2 : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> l <> nil.\nProof using.\nintros n m H; elim H; simpl in |- *; auto.\nintros; discriminate.\nintros; discriminate.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/huffman/theories/sTactic.v",
                "context": "(* This program is free software; you can redistribute it and/or      *)\n(* modify it under the terms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU Lesser General Public License for more details.                *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n(**********************************************************************\n    Proof of Huffman algorithm: sTactic.v                            \n                                                                     \n    Useful tactics                                                   \n                                                                     \n    Tactics: Contradict, CaseEq, ElimEq                              \n                                    Laurent.Thery@inria.fr (2003)    \n  **********************************************************************)\n \n",
                "context_tokens": 244,
                "proof_start_offset": 1591,
                "proof_end_offset": 1678,
                "proof": "Theorem Contradict1 : forall a b : Prop, b -> (a -> ~ b) -> ~ a.\nProof.\nintuition.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Contradict1 : forall a b : Prop, b -> (a -> ~ b) -> ~ a.\nintros a b H; case H; intros H; case H; intros H; case H; intros H; case H; intros H; case H; intros H; case H; intros H; case H; intros H; case H; intros H; case H; intros H; case H; intros H; case H; intros H; case H; intros H; case H; intros H; case H; intros H; case H; intros H; case H; intros; case H; intros H; case H; intros H; case H; intros; case H; intros; case H; intros H; case H; intros; case H; intros; case H; intros H; case H; intros H; case H; intros H; case H; intros; case H; intros H; case H; intros; case H; intros; case H; intros; case H; intros H; case H; intros; case H; intros; case H; intros; case H; intros; case H; intros; case H; intros; case H; intros; case H; intros; case H; intros; case H; intros; case H; intros; case H; intros; case H; intros; case HQed.",
                    "Theorem Contradict1 : forall a b : Prop, b -> (a -> ~ b) -> ~ a.\nintros a b H.\napply (inj_eq (fun a : bool => a) (x < b)%Z).\nintros a b H.\napply (inj_eq (fun a : bool => a) (x < b)%Z).\nintros a b H.\napply (inj_eq (fun a : bool => a) (x < b)%Z).\nintros a b H.\napply (inj_eq (fun a : bool => a) (x < b)%Z).\nintros a b H.\napply (inj_eq (fun a : bool => a) (x < b)%Z).\nintros a b H.\napply (inj_eq (fun a : bool => a) (x < b)%Z).\nintros a b H.\napply (inj_eq (fun a : bool => a) (x < b)%Z).\nintros a b H.\napply (inj_eq (fun a : bool => a) (x < b)%Z).\nintros a b H.\napply (inj_eq (fun a : bool => a) (x < b)%Z).\nintros a b H.\napply (inj_eq (Qed.",
                    "Theorem Contradict1 : forall a b : Prop, b -> (a -> ~ b) -> ~ a.\nintros a b H; case b; simpl in |- *; intros H0; elim H; intros H1; elim H1; intros H2; elim H1; intros H2; elim H1; intros H2; elim H2; intros H2; elim H2; intros H2; elim H2; intros H3; elim H3; intros H3; elim H3; intros H3; elim H3; intros H4; elim H4; intros H4; elim H4; intros H4; elim H5; intros H5; elim H5; intros H5; elim H5; intros H5; elim H6; intros H6; elim H6; intros H6; elim H6; intros H5; elim H6; intros H6; elim H6; intros H7; elim H6; intros H6; elim H6; intros H6; elim H6; intros H6; elim H7; intros H6; elim H6; intros H6; elim H6; intros; elim H6; intros; elim H6; intros H6; elim H7; intros; elim H7; intros; elim H7; intros; elim HQed.",
                    "Theorem Contradict1 : forall a b : Prop, b -> (a -> ~ b) -> ~ a.\nintros a b H; elim H; intros a b H H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elim H; intros a b H; elimQed.",
                    "Theorem Contradict1 : forall a b : Prop, b -> (a -> ~ b) -> ~ a.\nintros a b H.\napply (Build_finiteT (lt_O_Sn a b)).\napply (Build_finiteT (lt_O_Sn a b)).\napply (Build_finiteT (lt_O_Sn a b)).\napply (Build_finiteT (lt_O_Sn a b)).\napply (Build_finiteT (lt_O_Sn a b)).\napply (Build_finiteT (lt_O_Sn a b)).\napply (Build_finiteT (lt_O_Sn a b)).\napply (Build_finiteT (lt_O_Sn a b)).\napply (Build_finiteT (lt_O_Sn a b)).\napply (Build_finiteT (lt_O_Sn a b)).\napply (Build_finiteT (lt_O_Sn a b)).\napply (Build_finiteT (lt_O_Sn a b)).\napply (Build_finiteT (lt_O_Sn a b)).\napply (Build_finiteT (lt_O_Sn a b)).\napply (Build_finiteT (lt_O_Sn a b)).\napply (Build_finiteT (lt_O_Sn a b)).\napply (Build_finiteT (lt_OQed."
                ]
            },
            {
                "filepath": "./coq_projects/huffman/theories/sTactic.v",
                "context": "(* This program is free software; you can redistribute it and/or      *)\n(* modify it under the terms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU Lesser General Public License for more details.                *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n(**********************************************************************\n    Proof of Huffman algorithm: sTactic.v                            \n                                                                     \n    Useful tactics                                                   \n                                                                     \n    Tactics: Contradict, CaseEq, ElimEq                              \n                                    Laurent.Thery@inria.fr (2003)    \n  **********************************************************************)\n \nTheorem Contradict1 : forall a b : Prop, b -> (a -> ~ b) -> ~ a.\nProof.\nintuition.\nQed.\n \n",
                "context_tokens": 277,
                "proof_start_offset": 1681,
                "proof_end_offset": 1759,
                "proof": "Theorem Contradict2 : forall a b : Prop, b -> ~ b -> a.\nProof.\nintuition.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Contradict2 : forall a b : Prop, b -> ~ b -> a.\nProof.\nintuition.\nQed.",
                    "Theorem Contradict2 : forall a b : Prop, b -> ~ b -> a.\nProof.\nintuition.\nQed.",
                    "Theorem Contradict2 : forall a b : Prop, b -> ~ b -> a.\nProof.\nintuition.\nQed.",
                    "Theorem Contradict2 : forall a b : Prop, b -> ~ b -> a.\nintros a b H.\napply (inj_is_empty a b H).\napply (inj_is_empty a b H).\napply (inj_is_empty a b H).\napply (inj_is_empty a b H).\napply (inj_is_empty a b H).\napply (inj_is_empty a b H).\napply (inj_is_empty a b H).\napply (inj_is_empty a b H).\napply (inj_is_empty a b H).\napply (inj_is_empty a b H).\napply (inj_is_empty a b H).\napply (inj_is_empty a b H).\napply (inj_is_empty a b H).\napply (inj_is_empty a b H).\napply (inj_is_empty a b H).\napply (inj_is_empty a b H).\napply (inj_is_empty a b H).\napply (inj_is_empty a b H).\napply (inj_is_empty a b H).\napply (inj_is_empty a b H).\napply (inj_is_empty a bQed.",
                    "Theorem Contradict2 : forall a b : Prop, b -> ~ b -> a.\nProof.\nintuition.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/huffman/theories/sTactic.v",
                "context": "(* This program is free software; you can redistribute it and/or      *)\n(* modify it under the terms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU Lesser General Public License for more details.                *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n(**********************************************************************\n    Proof of Huffman algorithm: sTactic.v                            \n                                                                     \n    Useful tactics                                                   \n                                                                     \n    Tactics: Contradict, CaseEq, ElimEq                              \n                                    Laurent.Thery@inria.fr (2003)    \n  **********************************************************************)\n \nTheorem Contradict1 : forall a b : Prop, b -> (a -> ~ b) -> ~ a.\nProof.\nintuition.\nQed.\n \nTheorem Contradict2 : forall a b : Prop, b -> ~ b -> a.\nProof.\nintuition.\nQed.\n \n",
                "context_tokens": 305,
                "proof_start_offset": 1762,
                "proof_end_offset": 1830,
                "proof": "Theorem Contradict3 : forall a : Prop, a -> ~ ~ a.\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Contradict3 : forall a : Prop, a -> ~ ~ a.\nProof.\nintuition.\nQed.",
                    "Theorem Contradict3 : forall a : Prop, a -> ~ ~ a.\nProof.\nintuition.\nQed.",
                    "Theorem Contradict3 : forall a : Prop, a -> ~ ~ a.\nProof.\nintuition.\nQed.",
                    "Theorem Contradict3 : forall a : Prop, a -> ~ ~ a.\nProof.\nintuition.\nQed.",
                    "Theorem Contradict3 : forall a : Prop, a -> ~ ~ a.\nProof.\nintuition.\nQed."
                ]
            }
        ],
        "PolTac": [
            {
                "filepath": "./coq_projects/PolTac/NAux.v",
                "context": "Require Export NArith.\nRequire Import ZArith.\n\nOpen Scope N_scope.\n\nTheorem Nle_le: forall n  m, (N.to_nat n <= N.to_nat m)%nat -> n <= m.\nintros n m; case n; case m; unfold N.le; simpl; try (intros; discriminate).\nintros p; elim p using Pind; simpl.\nintros H1; inversion H1. \nintros n1 _; rewrite nat_of_P_succ_morphism.\nintros H1; inversion H1.\nintros p1 p2 H1 H2; absurd (nat_of_P p2 > nat_of_P p1)%nat; auto with arith.\napply nat_of_P_gt_Gt_compare_morphism; auto.\nQed.\n\nTheorem le_Nle: forall n m, N.of_nat n <= N.of_nat m -> (n <= m)%nat.\nintros n m; case n; case m; unfold N.le; simpl; auto with arith.\nintros n1 H1; case H1; auto.\nintros m1 n1 H1; case (le_or_lt n1 m1); auto with arith.\nintros H2; case H1.\napply nat_of_P_gt_Gt_compare_complement_morphism.\nrepeat rewrite  nat_of_P_o_P_of_succ_nat_eq_succ; auto with arith.\nQed.\n\nTheorem Nle_le_rev: forall n  m, n <= m -> (N.to_nat n <= N.to_nat m)%nat.\nintros; apply le_Nle; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nlt_lt: forall n  m, (N.to_nat n < N.to_nat m)%nat -> n < m.\nintros n m; case n; case m; unfold N.lt; simpl; try (intros; discriminate); auto.\nintros H1; inversion H1.\nintros p H1; inversion H1.\nintros; apply nat_of_P_lt_Lt_compare_complement_morphism; auto.\nQed.\n\nTheorem lt_Nlt: forall n m, N.of_nat n < N.of_nat m -> (n < m)%nat.\nintros n m; case n; case m; unfold N.lt; simpl; try (intros; discriminate); auto with arith.\nintros m1 n1 H1.\nrewrite <- (Nat2N.id (S n1)); rewrite <- (Nat2N.id (S m1)).\nsimpl; apply nat_of_P_lt_Lt_compare_morphism; auto.\nQed.\n\nTheorem Nlt_lt_rev: forall n  m, n < m -> (N.to_nat n < N.to_nat m)%nat.\nintros; apply lt_Nlt; repeat rewrite N2Nat.id; auto.\nQed.\n\n\n",
                "context_tokens": 668,
                "proof_start_offset": 1675,
                "proof_end_offset": 2086,
                "proof": "Theorem Nge_ge: forall n m, (N.to_nat n >= N.to_nat m)%nat -> n >= m.\nProof.\nintros n m; case n; case m; unfold N.ge; simpl; try (intros; discriminate); auto.\nintros p; elim p using Pind; simpl.\nintros H1; inversion H1.\nintros n1 _; rewrite nat_of_P_succ_morphism.\nintros H1; inversion H1.\nintros p1 p2 H1 H2; absurd (nat_of_P p2 < nat_of_P p1)%nat; auto with arith.\napply nat_of_P_lt_Lt_compare_morphism; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Nge_ge: forall n m, (N.to_nat n >= N.to_nat m)%nat -> n >= m.\nintros n m; case n; simpl; try (intros; discriminate); auto with arith.\nintros n m; case m; simpl; try (intros; discriminate); auto with arith.\nintros n m; case m; simpl; try (intros; discriminate); auto with arith.\nintros n m1 H1; case m; simpl; try (intros; discriminate); auto with arith.\nintros n m1 H1; case m; simpl; try (intros; discriminate); auto with arith.\nintros n m1 H1; case m1; simpl; try (intros; discriminate); auto with arith.\nintros n m1 H2; case m2; simpl; try (intros; discriminate); auto with arith.\nintros n m1 H1; case m1; simpl; try (intros; discriminate); auto with arith.\nintros n m1 H2; case m1; simpl; try (intros; discriminate); auto with arith.\nintros n m1 H2; case m1; simpl; try (intros; discriminate); auto with arith.\nintros n m1 H1; case m2; simpl; auto with arith.\nintros n m1 H1; case m2;Qed.",
                    "Theorem Nge_ge: forall n m, (N.to_nat n >= N.to_nat m)%nat -> n >= m.\nintros; apply Nge_lt_rev; repeat rewrite N2Nat.id; auto.\nQed.",
                    "Theorem Nge_ge: forall n m, (N.to_nat n >= N.to_nat m)%nat -> n >= m.\nintros n m; case n; unfold N.lt; simpl; try (intros; discriminate); auto with arith.\nintros H1; inversion H1.\nintros p H2; inversion H1.\nintros p1 H2; inversion H1.\nintros p2; inversion H1.\nintros p1 H2; inversion H1.\nintros p2; inversion H1.\nintros p1; inversion H1.\nintros p2; inversion H1.\nintros p2 H2; inversion H1.\nintros p2 H2; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p1 H2; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p2Qed.",
                    "Theorem Nge_ge: forall n m, (N.to_nat n >= N.to_nat m)%nat -> n >= m.\nintros n m; case n; auto with arith.\nintros n m; case n; auto with arith.\nintros m1; case n; auto with arith.\nintros m1 H1; case n; auto with arith.\nintros m1; case n; auto with arith.\nintros m1 H1; case n; auto with arith.\nintros m1; case m2; auto with arith.\nintros m1; case m1; auto with arith.\nintros m2; case n; auto with arith.\nintros m1; case n; auto with arith.\nintros m2; case m2; auto with arith.\nintros m1; case m2; auto with arith.\nintros m2; case m1; auto with arith.\nintros m2; case n; auto with arith.\nintros m1; case m2; auto with arith.\nintros m1; case n; auto with arith.\nintros m1; case m2; auto with arith.\nintros m2; case m2; auto with arith.\nintros m2; case m2; auto with arith.\nintros m1; case m2; auto with arith.\nintrosQed.",
                    "Theorem Nge_ge: forall n m, (N.to_nat n >= N.to_nat m)%nat -> n >= m.\nintros n m; case m; unfold N.lt; simpl; try (intros; discriminate); auto with arith.\nintros m1 n1 H2; elim H1; auto with arith.\nintros m2; elim H1; auto with arith.\nintros m2; elim H1; auto with arith.\nintros m1 n2 H2; elim H1; auto with arith.\nintros m2; elim H2; auto with arith.\nintros m2; elim H1; auto with arith.\nintros m2; elim H1; auto with arith.\nintros m2; elim H1; auto with arith.\nintros m2; elim H2; auto with arith.\nintros m1 n2 H2; elim H2; auto with arith.\nintros m1 n2 H2; elim H2; auto with arith.\nintros m2 n2 H3; elim H2; auto with arith.\nintros m2; elim H1; auto with arith.\nintros m2; elim H2; auto with arith.\nintros m2; elim H3; auto with arith.\nintros m2; elim H3; auto with arith.\nintros mQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/PolAux.v",
                "context": "R -> (p * n >= p * m)%R -> (n >= m)%R.\nintros n m p H H1;\n apply Rle_ge; apply Rmult_le_compat_l_rev with p; auto with real.\nQed.\n\nTheorem Rmult_ge_neg_compat_l_rev:\n  forall n m p : R, (0 > p)%R -> (p * n >= p * m)%R -> (m >= n)%R.\nintros n m p H H1;\n apply Rle_ge; apply Rmult_le_neg_compat_l_rev with p; auto with real.\nQed.\n\nTheorem Rmult_gt_compat_l_rev:\n  forall n m p : R, (p > 0)%R -> (p * n > p * m)%R -> (n > m)%R.\nintros n m p H H1;\n red; apply Rmult_lt_compat_l_rev with p; auto with real.\nQed.\n\nTheorem Rmult_gt_neg_compat_l_rev:\n  forall n m p : R, (0 > p)%R -> (p * n > p * m)%R -> (m > n)%R.\nintros n m p H H1;\n red; apply Rmult_lt_neg_compat_l_rev with p; auto with real.\nQed.\n\n(* For replace *)\n\nTheorem eq_Rlt_trans_l : forall x y z, (x = z) -> (x < y) -> (z < y).\nintros x y z H; rewrite H; auto.\nQed.\nTheorem eq_Rlt_trans_r : forall x y z, (y = z) -> (x < y) -> (x < z).\nintros x y z H; rewrite H; auto.\nQed.\nTheorem eq_Rgt_trans_l : forall x y z, (x = z) -> (x > y) -> (z > y).\nintros x y z H; rewrite H; auto.\nQed.\nTheorem eq_Rgt_trans_r : forall x y z, (y = z) -> (x > y) -> (x > z).\nintros x y z H; rewrite H; auto.\nQed.\nTheorem eq_Rle_trans_l : forall x y z, (x = z) -> (x <= y) -> (z <= y).\nintros x y z H; rewrite H; auto.\nQed.\nTheorem eq_Rle_trans_r : forall x y z, (y = z) -> (x <= y) -> (x <= z).\nintros x y z H; rewrite H; auto.\nQed.\nTheorem eq_Rge_trans_l : forall x y z, (x = z) -> (x >= y) -> (z >= y).\nintros x y z H; rewrite H; auto.\nQed.\nTheorem eq_Rge_trans_r : forall x y z, (y = z) -> (x >= y) -> (x >= z).\nintros x y z H; rewrite H; auto.\nQed.\n\nTheorem Rge_trans: forall x y z, (x >= z) -> (z >= y) -> (x >= y).\nintros x y z H1 H2; red; apply Rge_trans with z; auto.\nQed.\n\n(* For RGroundTac *)\n\n\n",
                "context_tokens": 746,
                "proof_start_offset": 32895,
                "proof_end_offset": 33883,
                "proof": "Theorem Z2R_correct: forall p, (Z2R p) = (IZR p).\nProof.\nintros p; case p; auto.\nintros p1; elim p1; auto.\nintros p2 Rec; pattern (Zpos (xI p2)) at 2; replace (Zpos (xI p2)) with (2 * (Zpos p2) +1)%Z; auto with zarith.\nrewrite plus_IZR; rewrite mult_IZR; rewrite <- Rec.\nsimpl Z2R; simpl IZR; case p2; intros; simpl (P2R 1);ring.\nintros p2 Rec; pattern (Zpos (xO p2)) at 2; replace (Zpos (xO p2)) with (2 * (Zpos p2))%Z; auto with zarith.\nrewrite mult_IZR; rewrite <- Rec.\nsimpl Z2R; simpl IZR; case p2; intros; simpl (P2R 1); ring.\nintros p1; elim p1; auto.\nintros p2 Rec; pattern (Zneg (xI p2)) at 2; replace (Zneg (xI p2)) with ((2 * (Zneg p2) + -1))%Z; auto with zarith.\nrewrite plus_IZR; rewrite mult_IZR; rewrite <- Rec.\nsimpl Z2R; simpl IZR; case p2; intros; simpl (P2R 1); ring.\nintros p2 Rec; pattern (Zneg (xO p2)) at 2; replace (Zneg (xO p2)) with (2 * (Zneg p2))%Z; auto with zarith.\nrewrite mult_IZR; rewrite <- Rec.\nsimpl Z2R; simpl IZR; case p2; intros; simpl (P2R 1); ring.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Z2R_correct: forall p, (Z2R p) = (IZR p).\nintros p; rewrite H; auto.\nQed.",
                    "Theorem Z2R_correct: forall p, (Z2R p) = (IZR p).\nintros p; red; apply Rlt_trans with z; auto.\nQed.",
                    "Theorem Z2R_correct: forall p, (Z2R p) = (IZR p).\nintros p; rewrite H; auto.\nQed.",
                    "Theorem Z2R_correct: forall p, (Z2R p) = (IZR p).\nintros p H; rewrite H; auto.\nQed.",
                    "Theorem Z2R_correct: forall p, (Z2R p) = (IZR p).\nintros p; red; auto with real.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/Natex.v",
                "context": "Require Import PolTac.\n\n",
                "context_tokens": 6,
                "proof_start_offset": 24,
                "proof_end_offset": 107,
                "proof": "Theorem pols_test1: forall x y, x < y -> (x + x < y + x).\nProof.\nintros.\npols.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem pols_test1: forall x y, x < y -> (x + x < y + x).\nProof.\nintros x y; elim H; intros y; elim H; intros y; elim H; intros y z; elim H; intros z H; elim H; intros z H; elim H; intros z H; elim H; intros z H; elim H; intros z H; elim H; intros z H; elim H; intros z H; elim H; intros z H; elim H; intros z H; elim H; intros z H; elim H; intros z H; elim H; intros z H; elim H; intros z H; elim H; intros z H; elim H; intros z H; elim H; intros z H; elim H; intros; elim H; intros z H; elim H; intros z H; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H;Qed.",
                    "Theorem pols_test1: forall x y, x < y -> (x + x < y + x).\nProof.\n  intros.\n  apply (Acc_test1 x y).\n  apply (Acc_test1 x y).\n  apply (Acc_test2 x y).\n  apply (Acc_test2 x y).\n  apply (Acc_test2 x y).\n  apply (Acc_test2 x y).\n  apply (Acc_test2 x y).\n  apply (Acc_test2 x y).\n  apply (Acc_test2 x y).\n  apply (Acc_test2 x y).\n  apply (Acc_test2 x y).\n  apply (Acc_test2 x y).\n  apply (Acc_test2 x y).\n  apply (Acc_test2 x y).\n  apply (Acc_test2 x y).\n  apply (Acc_test2 x y).\n  apply (Acc_test2 x y).\n  apply (Acc_test2 x y).\n  apply (Acc_test2 x y).\n  apply (Acc_test2 x y).\n  apply (Acc_test2 x y).\n  apply (Acc_test2 x y).\n  apply (Acc_test2 x y).\n  apply (Acc_test2 x y).\n  apply (Acc_test2 x y).Qed.",
                    "Theorem pols_test1: forall x y, x < y -> (x + x < y + x).\nProof.\nintros x y H.\napply H.\napply H.\nQed.",
                    "Theorem pols_test1: forall x y, x < y -> (x + x < y + x).\nProof.\n  intros x y H; destruct (eq_dec x y); simpl; auto.\n  apply (le_trans _ _ _ H); auto.\n  apply (le_trans _ _ _ H); auto.\n  apply (le_trans _ _ _ H); auto.\n  apply (le_trans _ _ _ H); auto.\nQed.",
                    "Theorem pols_test1: forall x y, x < y -> (x + x < y + x).\nProof.\n  intros x y H1.\n  generalize (iter_eq x y H1).\n  generalize (iter_eq x y H1).\n  generalize (iter_eq y H1).\n  generalize (iter_eq y H2).\n  generalize (iter_eq y H1).\n  generalize (iter_eq y H1).\n  generalize (iter_eq y H1).\n  generalize (iter_eq y H1).\n  generalize (iter_eq y H1).\n  generalize (iter_eq y H1).\n  generalize (iter_eq y H1).\n  generalize (iter_eq y H1).\n  generalize (iter_eq y H1).\n  generalize (iter_eq y H1).\n  generalize (iter_eq y H1).\n  generalize (iter_eq y H1).\n  generalize (iter_eq y H1).\n  generalize (iter_eq y H1).\n  generalize (iter_eq y H1).\n  generalize (iter_eq y H1).\n  generalize (iter_eq y H1).\n  generalize (iter_eq y H1).\n  generalize (iter_eq y H1).\n  generalize (iter_eq y H1).\n  generalize (iterQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/Natex.v",
                "context": "Require Import PolTac.\n\nTheorem pols_test1: forall x y, x < y ->  (x + x < y + x).\nintros.\npols.\nauto.\nQed.\n\n",
                "context_tokens": 46,
                "proof_start_offset": 109,
                "proof_end_offset": 188,
                "proof": "Theorem pols_test2: forall x y, y < 0 -> (x + y < x).\nProof.\nintros.\npols.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem pols_test2: forall x y, y < 0 -> (x + y < x).\nintros.\nrewrite <- (pow2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_3_test2_test2_test2_2_test2_2_test2_test2_2_test2_test2_2_test2_2_test2_test2_2_test2_2_test2_test2_2_test2_test2_2_test2_test2_test2_test2_2_test2_2_test2_test2_test2_test2_2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_testQed.",
                    "Theorem pols_test2: forall x y, y < 0 -> (x + y < x).\nintros.\napply pols_test2; auto.\nQed.",
                    "Theorem pols_test2: forall x y, y < 0 -> (x + y < x).\nintros.\nunfold pol.\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x yQed.",
                    "Theorem pols_test2: forall x y, y < 0 -> (x + y < x).\nintros.\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <-Qed.",
                    "Theorem pols_test2: forall x y, y < 0 -> (x + y < x).\nintros.\napply (pow2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_2_test2_test2_test2_test2_2_test2_test2_2_test2_test2_2_test2_2_test22_test2_test2_3_test2_2_test2_2_test2_2_test2_2_test2_test2_2_test2_test2_test2_test2_test2_2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_2_test2_test2_test2_test2_test2_2_test2_test2_test2_test2_test2_test2_test2_test2Qed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/Natex.v",
                "context": "Require Import PolTac.\n\nTheorem pols_test1: forall x y, x < y ->  (x + x < y + x).\nintros.\npols.\nauto.\nQed.\n\nTheorem pols_test2: forall x y, y < 0 ->  (x + y < x).\nintros.\npols.\nauto.\nQed.\n \n",
                "context_tokens": 84,
                "proof_start_offset": 191,
                "proof_end_offset": 311,
                "proof": "Theorem pols_test4: forall x y, x * x < y * y -> ((x + y) * (x + y) < 2 * (x * y + y * y)).\nProof.\nintros.\npols.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem pols_test4: forall x y, x * x < y * y -> ((x + y) * (x + y) < 2 * (x * y + y * y)).\nintros.\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <-Qed.",
                    "Theorem pols_test4: forall x y, x * x < y * y -> ((x + y) * (x + y) < 2 * (x * y + y * y)).\nintros.\nrewrite <- (pows_test2 x y).\nrewrite <- (pows_test2 x y).\nrewrite <- (pows_test2 x y).\nrewrite <- (pows_test2 x y).\nrewrite <- (pows_test2 x y).\nrewrite <- (pows_test2 x y).\nrewrite <- (pows_test2 x y).\nrewrite <- (pows_test2 x y).\nrewrite <- (pows_test2 x y).\nrewrite <- (pows_test2 x y).\nrewrite <- (pows_test2 x y).\nrewrite <- (pows_test2 x y).\nrewrite <- (pows_test2 x y).\nrewrite <- (pows_test2 x y).\nrewrite <- (pows_test2 x y).\nrewrite <- (pows_test2 x y).\nrewrite <- (pows_test2 x y).\nrewrite <- (pows_test2 x y).\nrewrite <- (pows_test2 x y).\nrewrite <- (pows_test2 x y).\nrewrite <- (pows_test2 x y).\nQed.",
                    "Theorem pols_test4: forall x y, x * x < y * y -> ((x + y) * (x + y) < 2 * (x * y + y * y)).\nintros.\nrewrite <- (pows_test2l x y).\nrewrite <- (pows_test2l x y).\nrewrite <- (pows_test2l x y).\nrewrite <- (pows_test2l x y).\nrewrite <- (pows_test2l x y).\nrewrite <- (pows_test2l x y).\nrewrite <- (pows_test2l x y).\nrewrite <- (pows_test2l x y).\nrewrite <- (pows_test2l x y).\nrewrite <- (pows_test2l x y).\nrewrite <- (pows_test2l x y).\nrewrite <- (pows_test2l x y).\nrewrite <- (pows_test2l x y).\nrewrite <- (pows_test2l x y).\nrewrite <- (pows_test2l x y).\nrewrite <- (pows_test2l x y).\nrewrite <- (pows_test2l x y).\nrewrite <- (pows_test2l x y).\nrewrite <- (pows_test2l x y).\nrewrite <- (powsQed.",
                    "Theorem pols_test4: forall x y, x * x < y * y -> ((x + y) * (x + y) < 2 * (x * y + y * y)).\nintros.\napply pols_test3.\nQed.",
                    "Theorem pols_test4: forall x y, x * x < y * y -> ((x + y) * (x + y) < 2 * (x * y + y * y)).\nintros.\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <-Qed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/Natex.v",
                "context": "Require Import PolTac.\n\nTheorem pols_test1: forall x y, x < y ->  (x + x < y + x).\nintros.\npols.\nauto.\nQed.\n\nTheorem pols_test2: forall x y, y < 0 ->  (x + y < x).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test4:\n forall x y,\n x * x  < y * y ->  ((x + y) * (x + y) < 2 * (x * y + y * y)).\nintros.\npols.\nauto.\nQed.\n \n",
                "context_tokens": 145,
                "proof_start_offset": 314,
                "proof_end_offset": 436,
                "proof": "Theorem pols_test5: forall x y z, x + y * (y + z) = 2 * z -> 2 * x + y * (y + z) = (x + z) + z.\nProof.\nintros.\npols.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem pols_test5: forall x y z, x + y * (y + z) = 2 * z -> 2 * x + y * (y + z) = (x + z) + z.\nintros.\nrewrite <- (pows_test2s_test2s3_test3s4_test3s4_test3s4s4_test4s5_test4s5s6_test6s6s6_test6s6s6_test6s6s6s6_test6s6s6s6_test6s6s6s6_test6s6s6_test6s6s6s6s6s6s6s6s6s6s6s6s6s6s7s6s6s6s7s7s8s9s8s9s9s9s9s9s9s10s9s9s9s9s10s10s10s9s10s9s9s10s9s10s10s10s10s10s11s9s10s9s10s10s10s13s9s10s10s11s10s10s10s10s10s10s10s10s13s9s10s13s14s13s13s14s13s14s14s13Qed.",
                    "Theorem pols_test5: forall x y z, x + y * (y + z) = 2 * z -> 2 * x + y * (y + z) = (x + z) + z.\nintros.\nrewrite <- (pows_test2_3 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _Qed.",
                    "Theorem pols_test5: forall x y z, x + y * (y + z) = 2 * z -> 2 * x + y * (y + z) = (x + z) + z.\nintros.\nrewrite <- (pows_test2s4s4s4s5s6s6s6s6s6s7s6s8s7s6s7s7s8s7s11s9s7s10s11s11s11s11s11s11s11s11s11s11s12s14s13s13s13s14s14s14s14s14s14s14s14s14s14s14s14s14s14s14s14s14s14s14s14s14s14s14s14s14s14s14s14s14s14s14s14s14s15s15s14s14s14s14s14s14s14s15s14s15s14s15s15s14s14s14s14s14s14s14s14s14s14s14d14s14f14s15s14f14f14c14c14f14f14f14c14f14c14c15c15c14c15c15c14c14d14c15c14c14Qed.",
                    "Theorem pols_test5: forall x y z, x + y * (y + z) = 2 * z -> 2 * x + y * (y + z) = (x + z) + z.\nintros.\nrewrite <- (pows_test6 x y z) in *.\nrewrite <- (pows_test6 x y z) in *.\nrewrite <- (pows_test6 x y z) in *.\nrewrite <- (pows_test6 x z) in *.\nrewrite <- (pows_test6 x z) in *.\nrewrite <- (pows_test6 x z) in *.\nrewrite <- (pows_test6 x z) in *.\nrewrite <- (pows_test6 x z) in *.\nrewrite <- (pows_test6 x z) in *.\nrewrite <- (pows_test6 x z) in *.\nrewrite <- (pows_test6 x z) in *.\nrewrite <- (pows_test6 x z) in *.\nrewrite <- (pows_test6 x z) in *.\nrewrite <- (pows_test6 x z) in *.\nrewrite <- (pows_test6 x z) in *.\nrewrite <- (pows_test6 x z) in *.\nrewrite <- (pows_test6 x z) in *.\nrewrite <- (pows_test6 x z)Qed.",
                    "Theorem pols_test5: forall x y z, x + y * (y + z) = 2 * z -> 2 * x + y * (y + z) = (x + z) + z.\nintros.\nrewrite <- (mult_comm (x + y) * (x + y) * (y + z) * (y + z)).\nintros.\nrewrite <- (mult_comm (x + y) * (y + z) * (y + z) * (y + z) * (y + z) * (y + z) * (y + z) * (y + z) * (y + z) * (y + z) * (y + z) * (y + z) * (y + z) * (y + z) * (y + z) * (y + z) * (y + z) * (y + z) * (y + z) * (y + z) * (y + z) * (z + z) * (z + z) * (z + z) * (z + z) * (z + z) * (z + z) * (z + z) * (z + z) * (z + z) * (z + z) * (z + z) * (z + z) * (z + z) * (z + z) * (z +Qed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/Natex.v",
                "context": "Require Import PolTac.\n\nTheorem pols_test1: forall x y, x < y ->  (x + x < y + x).\nintros.\npols.\nauto.\nQed.\n\nTheorem pols_test2: forall x y, y < 0 ->  (x + y < x).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test4:\n forall x y,\n x * x  < y * y ->  ((x + y) * (x + y) < 2 * (x * y + y * y)).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test5:\n forall x y z, x + y * (y + z) = 2 * z ->  2 * x + y * (y + z) = (x + z) + z.\nintros.\npols.\nauto.\nQed.\n\n\n",
                "context_tokens": 208,
                "proof_start_offset": 439,
                "proof_end_offset": 515,
                "proof": "Theorem polf_test1: forall x y, (1 <= y -> x <= x * y).\nProof.\nintros.\npolf.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem polf_test1: forall x y, (1 <= y -> x <= x * y).\nintros.\nrewrite <- (pows_test2_3 x y).\nauto.\nQed.",
                    "Theorem polf_test1: forall x y, (1 <= y -> x <= x * y).\nintros.\nrewrite <- (pows_test2_3 x y).\nrewrite <- (pows_test2_3 x y).\nrewrite <- (pows_test2_3 x y).\nrewrite <- (pows_test2_3 x y).\nrewrite <- (pows_test2_3 x y).\nrewrite <- (pows_test2_4 x y).\nrewrite <- (pows_test2_3 x y).\nrewrite <- (pows_test2_4 x y).\nrewrite <- (pows_test2_3 x y).\nrewrite <- (pows_test2_3 x y).\nrewrite <- (pows_test2_4 x y).\nrewrite <- (pows_test2_4 x y).\nrewrite <- (pows_test2_4 x y).\nrewrite <- (pows_test2_4 x y).\nrewrite <- (pows_test2_3 x y).\nrewrite <- (pows_test2_4 x y).\nrewrite <- (pows_test2_4 x y).\nrewrite <- (pows_test2_4 x y).\nQed.",
                    "Theorem polf_test1: forall x y, (1 <= y -> x <= x * y).\nintros.\nrewrite <- (pow2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_Qed.",
                    "Theorem polf_test1: forall x y, (1 <= y -> x <= x * y).\nintros.\nrewrite <- (pow2s_test2s x y).\nrewrite <- (pow2s_test2s x y).\nrewrite <- (pow2s_test2s x y).\nrewrite <- (pow2s_test2s x y).\nrewrite <- (pow2s_test2s x y).\nrewrite <- (pow2s_test2s x y).\nrewrite <- (pow2s_test2s x y).\nrewrite <- (pow2s_test2s x y).\nrewrite <- (pow2s_test2s x y).\nrewrite <- (pow2s_test2s x y).\nrewrite <- (pow2s_test2s x y).\nrewrite <- (pow2s_test2s x y).\nrewrite <- (pow2s_test2s x y).\nrewrite <- (pow2s_test2s x y).\nrewrite <- (pow2s_test2s x y).\nrewrite <- (pow2s_test2s x y).\nrewrite <- (pow2s_test2s x y).\nrewrite <- (pow2s_test2s x y).\nQed.",
                    "Theorem polf_test1: forall x y, (1 <= y -> x <= x * y).\nintros.\napply pols_test2.\nauto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/Natex.v",
                "context": "Require Import PolTac.\n\nTheorem pols_test1: forall x y, x < y ->  (x + x < y + x).\nintros.\npols.\nauto.\nQed.\n\nTheorem pols_test2: forall x y, y < 0 ->  (x + y < x).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test4:\n forall x y,\n x * x  < y * y ->  ((x + y) * (x + y) < 2 * (x * y + y * y)).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test5:\n forall x y z, x + y * (y + z) = 2 * z ->  2 * x + y * (y + z) = (x + z) + z.\nintros.\npols.\nauto.\nQed.\n\n\nTheorem polf_test1: forall x y, (1 <= y -> x  <= x  * y).\nintros.\npolf.\nQed.\n\n",
                "context_tokens": 244,
                "proof_start_offset": 517,
                "proof_end_offset": 613,
                "proof": "Theorem polf_test2: forall x y, 0 < x -> x <= x * y -> 1 <= y.\nProof.\nintros.\nhyp_polf H0.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem polf_test2: forall x y, 0 < x -> x <= x * y -> 1 <= y.\nintros.\napply pol_test2.\nQed.",
                    "Theorem polf_test2: forall x y, 0 < x -> x <= x * y -> 1 <= y.\nintros.\nrewrite <- (pow2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_Qed.",
                    "Theorem polf_test2: forall x y, 0 < x -> x <= x * y -> 1 <= y.\nintros.\napply (pow2l (pow2l (pow2l (pow2l (pow2l (pow2l (pow2l (pow2l (pow2l (pow2l (pow2 l (pow2 (pow2 l (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (pow2 (powQed.",
                    "Theorem polf_test2: forall x y, 0 < x -> x <= x * y -> 1 <= y.\nintros.\napply (pow2f_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_Qed.",
                    "Theorem polf_test2: forall x y, 0 < x -> x <= x * y -> 1 <= y.\nintros.\napply pol_test2.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/Natex.v",
                "context": "Require Import PolTac.\n\nTheorem pols_test1: forall x y, x < y ->  (x + x < y + x).\nintros.\npols.\nauto.\nQed.\n\nTheorem pols_test2: forall x y, y < 0 ->  (x + y < x).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test4:\n forall x y,\n x * x  < y * y ->  ((x + y) * (x + y) < 2 * (x * y + y * y)).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test5:\n forall x y z, x + y * (y + z) = 2 * z ->  2 * x + y * (y + z) = (x + z) + z.\nintros.\npols.\nauto.\nQed.\n\n\nTheorem polf_test1: forall x y, (1 <= y -> x  <= x  * y).\nintros.\npolf.\nQed.\n\nTheorem polf_test2: forall x y, 0 < x -> x  <= x  * y -> 1 <= y.\nintros.\nhyp_polf H0.\nauto.\nQed.\n\n\n\n",
                "context_tokens": 290,
                "proof_start_offset": 617,
                "proof_end_offset": 735,
                "proof": "Theorem polr_test1: forall x y z, (x + z) < y -> x + y + z < 2*y.\nProof.\nintros x y z H.\npolr H.\npols.\nauto.\npols.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem polr_test1: forall x y z, (x + z) < y -> x + y + z < 2*y.\nintros.\nrewrite (pows_test2 x y z).\nrewrite (pows_test2 x y z).\nrewrite (pows_test2 x y z).\nrewrite (pows_test2 x z).\nrewrite (pows_test2 x y z).\nrewrite (pows_test2 x z).\nrewrite (pows_test2 x z).\nrewrite (pows_test2 x y z).\nrewrite (pows_test2 x y z).\nrewrite (pows_test2 x z).\nrewrite (pows_test2 x y z).\nrewrite (pows_test2 x y z).\nrewrite (pows_test2 x z).\nrewrite (pows_test2 x y z).\nrewrite (pows_test2 x z).\nrewrite (pows_test2 x z).\nrewrite (pows_test2 x z).\nrewrite (pows_test2 x z).\nrewrite (pows_test2 x z).\nrewrite (pows_test2 x z).\nrewrite (pows_test2 x z).\nrewrite (pows_test2 x z).\nrewriteQed.",
                    "Theorem polr_test1: forall x y z, (x + z) < y -> x + y + z < 2*y.\nintros.\napply pol_test2 with (1 := x * y * z).\nintros.\napply pol_test2 with (1 := x * y * z).\nintros.\napply pol_test2 with (1 := x * z * z).\nintros.\napply pol_test2 with (1 := x * z * z).\nintros.\napply pol_test2 with (1 := x * z * z * z).\nintros.\napply pol_test2 with (1 := x * z * z * z).\nintros.\napply pol_test2 with (1 := x * z * z).\nintros.\napply pol_test2 with (1 := x * z * z).\nintros.\napply pol_test2 with (1 := x * z * z * z).\nintros.\napply pol_test2 with (1 := x * z * z * z).\nintros.\napply pol_test2 with (1 := x * z * z * z).\nintros.\napply pol_test2 with (1 := x * z * z * z).\nintros.\napply pol_test2 with (1 := x * zQed.",
                    "Theorem polr_test1: forall x y z, (x + z) < y -> x + y + z < 2*y.\nintros.\nunfold pol.\nrewrite <- (pow2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2Qed.",
                    "Theorem polr_test1: forall x y z, (x + z) < y -> x + y + z < 2*y.\nintros.\napply pol_test2.\nauto.\nQed.",
                    "Theorem polr_test1: forall x y z, (x + z) < y -> x + y + z < 2*y.\nintros.\nunfold pol, pol, pol, pol, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xn, xnQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NatSignTac.v",
                "context": "(* Ugly tacty to resolve sign condition for Z *)\nRequire Import Arith.\nRequire Import List.\nRequire Export NatGroundTac.\n\n\n",
                "context_tokens": 33,
                "proof_start_offset": 123,
                "proof_end_offset": 285,
                "proof": "Theorem mult_lt_compat_l: forall n m p : nat, n < m -> 0 < p -> p * n < p * m.\nProof.\nintros n m p H H1; repeat rewrite (mult_comm p); apply mult_lt_compat_r; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem mult_lt_compat_l: forall n m p : nat, n < m -> 0 < p -> p * n < p * m.\nProof.\nintros n m p H; induction m; simpl; auto.\nQed.",
                    "Theorem mult_lt_compat_l: forall n m p : nat, n < m -> 0 < p -> p * n < p * m.\nProof.\nintros.\ncase (lt_spec n m p); intros;\nintros; case (lt_spec n m); intros;\n [intros; case (lt_spec n m); intros;\n [intros; case (lt_spec n m); intros;\n [intros; case (lt_spec n m); intros;\n [intros; case (lt_spec n m); intros;\n [intros; case (lt_spec n m); intros;\n [intros; case (lt_spec n m); intros;\n [intros; case (lt_spec n m); intros;\n [intros; case (lt_spec n m); intros;\n [ intros; case (lt_spec n m); intros;\n [ intros; case (lt_spec n m); intros;\n [ intros; case (lt_spec n m); intros;\n [ intros; case (lt_spec n m); intros;\n [ intros; case (lt_spec n m); intros;\n [ intros; case (lt_spec n m); intros;\n [ intros; case (lt_spec n m); intros;\n [ intros; case (lt_spec n m); intros;\nQed.",
                    "Theorem mult_lt_compat_l: forall n m p : nat, n < m -> 0 < p -> p * n < p * m.\nProof.\nintros.\napply Nat2Z_le_compat; auto with arith.\napply Nat2Z_le_compat; auto with arith.\napply Nat2Z_le_compat; auto with arith.\napply Nat2Z_le_compat; auto with arith.\napply Nat2Z_le_compat; auto with arith.\napply Nat2Z_le_compat; auto with arith.\napply Nat2Z_le_compat; auto with arith.\napply Nat2Z_le_compat; auto with arith.\napply Nat2Z_le_compat; auto with arith.\napply Nat2Z_le_compat; auto with arith.\napply Nat2Z_le_compat; auto with arith.\napply Nat2Z_le_compat; auto with arith.\napply Nat2Z_le_compat; auto with arith.\napply Nat2Z_le_compat; auto with arith.\napply Nat2Z_le_compat; auto with arith.\napply Nat2Z_le_compat; auto with arith.\napply Nat2Z_le_compat; auto with arith.\napply Nat2Z_le_compat; auto withQed.",
                    "Theorem mult_lt_compat_l: forall n m p : nat, n < m -> 0 < p -> p * n < p * m.\nProof.\n  intros.\n  rewrite <- mult_0_r.\n  rewrite <- mult_0_r.\n  rewrite <- mult_0_r.\n  rewrite mult_0_r.\n  rewrite <- mult_1_r.\n  rewrite mult_1_r.\n  rewrite mult_1_r.\n  rewrite mult_1_r.\n  rewrite mult_1_r.\n  rewrite mult_1_r.\n  rewrite mult_1_r.\n  rewrite mult_1_r.\n  rewrite mult_1_r.\n  rewrite mult_1_r.\n  rewrite mult_1_r.\n  rewrite mult_1_r.\n  rewrite mult_1_r.\n  rewrite mult_1_r.\n  rewrite mult_1_r.\n  rewrite mult_1_r.\n  rewrite mult_1_r.\n  rewrite mult_1_r.\n  rewrite mult_1_r.\n  rewrite mult_1_r.\n  rewrite mult_1_r.\n  rewrite mult_1_r.\n  rewrite mult_1_r.\n  rewrite mult_1_r.\n  rewrite mult_1_r.\n  rewrite mult_1_r.\n  rewrite mult_1_Qed.",
                    "Theorem mult_lt_compat_l: forall n m p : nat, n < m -> 0 < p -> p * n < p * m.\nProof.\n  intros.\n  rewrite <- mult_comm.\n  rewrite <- mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewriteQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NatSignTac.v",
                "context": "(* Ugly tacty to resolve sign condition for Z *)\nRequire Import Arith.\nRequire Import List.\nRequire Export NatGroundTac.\n\n\nTheorem mult_lt_compat_l: forall n m p : nat, n < m -> 0 < p -> p * n < p * m.\nintros n m p H H1; repeat rewrite (mult_comm p); apply mult_lt_compat_r; auto.\nQed.\n\n",
                "context_tokens": 98,
                "proof_start_offset": 287,
                "proof_end_offset": 396,
                "proof": "Theorem mult_ge_compat_l: forall n m p : nat, n >= m -> p * n >= p * m.\nProof.\nintros n m p H; auto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem mult_ge_compat_l: forall n m p : nat, n >= m -> p * n >= p * m.\nintros n m p H1; repeat rewrite (mult_comm p); apply mult_le_compat_l.\nQed.",
                    "Theorem mult_ge_compat_l: forall n m p : nat, n >= m -> p * n >= p * m.\nintros n m p H1; repeat rewrite (mult_comm p); apply mult_le_compat_l; auto.\nQed.",
                    "Theorem mult_ge_compat_l: forall n m p : nat, n >= m -> p * n >= p * m.\nintros n m p H1; repeat rewrite (mult_comm p); apply mult_le_compat_l; auto.\nQed.",
                    "Theorem mult_ge_compat_l: forall n m p : nat, n >= m -> p * n >= p * m.\nintros n m p H1; repeat rewrite (mult_comm p); apply mult_le_compat_l; auto.\nQed.",
                    "Theorem mult_ge_compat_l: forall n m p : nat, n >= m -> p * n >= p * m.\nintros n m p H1; repeat rewrite (mult_comm p); apply mult_le_compat_l; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NatSignTac.v",
                "context": "(* Ugly tacty to resolve sign condition for Z *)\nRequire Import Arith.\nRequire Import List.\nRequire Export NatGroundTac.\n\n\nTheorem mult_lt_compat_l: forall n m p : nat, n < m -> 0 < p -> p * n < p * m.\nintros n m p H H1; repeat rewrite (mult_comm p); apply mult_lt_compat_r; auto.\nQed.\n\nTheorem mult_ge_compat_l: forall n m p : nat, n >= m -> p * n >= p * m.\nintros n m p H; auto with arith.\nQed.\n\n",
                "context_tokens": 142,
                "proof_start_offset": 398,
                "proof_end_offset": 535,
                "proof": "Theorem mult_gt_compat_l: forall n m p : nat, n > m -> p > 0 -> p * n > p * m.\nProof.\nintros n m p H H1; red; apply mult_lt_compat_l; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem mult_gt_compat_l: forall n m p : nat, n > m -> p > 0 -> p * n > p * m.\nintros n m p H; repeat rewrite (mult_comm p); apply mult_le_compat_l; auto with arith.\nQed.",
                    "Theorem mult_gt_compat_l: forall n m p : nat, n > m -> p > 0 -> p * n > p * m.\nintros n m p H; repeat rewrite (mult_comm p); apply mult_lt_compat_l; auto with arith.\nQed.",
                    "Theorem mult_gt_compat_l: forall n m p : nat, n > m -> p > 0 -> p * n > p * m.\nintros n m p H; repeat rewrite (mult_comm p); apply mult_le_compat_r; auto with arith.\nQed.",
                    "Theorem mult_gt_compat_l: forall n m p : nat, n > m -> p > 0 -> p * n > p * m.\nintros n m p H; repeat rewrite (mult_comm p); apply mult_le_compat_l; auto with arith.\nQed.",
                    "Theorem mult_gt_compat_l: forall n m p : nat, n > m -> p > 0 -> p * n > p * m.\nintros n m p H; repeat rewrite (mult_comm p); apply mult_gt_compat_l; auto with arith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NatSignTac.v",
                "context": "(* Ugly tacty to resolve sign condition for Z *)\nRequire Import Arith.\nRequire Import List.\nRequire Export NatGroundTac.\n\n\nTheorem mult_lt_compat_l: forall n m p : nat, n < m -> 0 < p -> p * n < p * m.\nintros n m p H H1; repeat rewrite (mult_comm p); apply mult_lt_compat_r; auto.\nQed.\n\nTheorem mult_ge_compat_l: forall n m p : nat, n >= m -> p * n >= p * m.\nintros n m p H; auto with arith.\nQed.\n\nTheorem mult_gt_compat_l: forall n m p : nat, n > m -> p > 0 -> p * n > p * m.\nintros n m p H H1; red; apply mult_lt_compat_l; auto.\nQed.\n\n",
                "context_tokens": 201,
                "proof_start_offset": 537,
                "proof_end_offset": 655,
                "proof": "Theorem mult_lt_compat_rev_l1: forall n m p : nat, p * n < p * m -> 0 < p.\nProof.\nintros n m p; case p; auto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem mult_lt_compat_rev_l1: forall n m p : nat, p * n < p * m -> 0 < p.\nintros n m p H; induction m; simpl in |- *; auto with arith.\nQed.",
                    "Theorem mult_lt_compat_rev_l1: forall n m p : nat, p * n < p * m -> 0 < p.\nintros n m p H1; red; apply mult_le_compat_l; auto.\nQed.",
                    "Theorem mult_lt_compat_rev_l1: forall n m p : nat, p * n < p * m -> 0 < p.\nintros n m p H; induction m; simpl; auto with arith.\nQed.",
                    "Theorem mult_lt_compat_rev_l1: forall n m p : nat, p * n < p * m -> 0 < p.\nintros n m p H; red; intros.\napply mult_le_compat_l; auto with arith.\nQed.",
                    "Theorem mult_lt_compat_rev_l1: forall n m p : nat, p * n < p * m -> 0 < p.\nintros n m p H; induction m; simpl; auto with arith.\nintros n m p H0; repeat rewrite (mult_comm p); apply mult_le_compat_l; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NatSignTac.v",
                "context": "(* Ugly tacty to resolve sign condition for Z *)\nRequire Import Arith.\nRequire Import List.\nRequire Export NatGroundTac.\n\n\nTheorem mult_lt_compat_l: forall n m p : nat, n < m -> 0 < p -> p * n < p * m.\nintros n m p H H1; repeat rewrite (mult_comm p); apply mult_lt_compat_r; auto.\nQed.\n\nTheorem mult_ge_compat_l: forall n m p : nat, n >= m -> p * n >= p * m.\nintros n m p H; auto with arith.\nQed.\n\nTheorem mult_gt_compat_l: forall n m p : nat, n > m -> p > 0 -> p * n > p * m.\nintros n m p H H1; red; apply mult_lt_compat_l; auto.\nQed.\n\nTheorem mult_lt_compat_rev_l1: forall n m p : nat, p * n < p * m -> 0 < p.\nintros n m p; case p; auto with arith.\nQed.\n\n",
                "context_tokens": 250,
                "proof_start_offset": 657,
                "proof_end_offset": 889,
                "proof": "Theorem mult_lt_compat_rev_l2: forall n m p : nat, p * n < p * m -> n < m.\nProof.\nintros n m p H; case (le_or_lt m n); auto with arith; intros H1.\nabsurd (p * n < p * m); auto with arith.\napply le_not_lt; apply mult_le_compat_l; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem mult_lt_compat_rev_l2: forall n m p : nat, p * n < p * m -> n < m.\nintros n m p; case p; auto with arith.\nintros n m p H1; repeat rewrite (mult_comm p); apply mult_lt_compat_l; auto.\nQed.",
                    "Theorem mult_lt_compat_rev_l2: forall n m p : nat, p * n < p * m -> n < m.\nintros n m p H; case p; auto with arith.\nQed.",
                    "Theorem mult_lt_compat_rev_l2: forall n m p : nat, p * n < p * m -> n < m.\nintros n m p; case p; auto with arith.\nQed.",
                    "Theorem mult_lt_compat_rev_l2: forall n m p : nat, p * n < p * m -> n < m.\nintros n m p H; induction m; simpl in |- *; auto with arith.\nQed.",
                    "Theorem mult_lt_compat_rev_l2: forall n m p : nat, p * n < p * m -> n < m.\nintros n m p; case p; auto with arith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NatSignTac.v",
                "context": "(* Ugly tacty to resolve sign condition for Z *)\nRequire Import Arith.\nRequire Import List.\nRequire Export NatGroundTac.\n\n\nTheorem mult_lt_compat_l: forall n m p : nat, n < m -> 0 < p -> p * n < p * m.\nintros n m p H H1; repeat rewrite (mult_comm p); apply mult_lt_compat_r; auto.\nQed.\n\nTheorem mult_ge_compat_l: forall n m p : nat, n >= m -> p * n >= p * m.\nintros n m p H; auto with arith.\nQed.\n\nTheorem mult_gt_compat_l: forall n m p : nat, n > m -> p > 0 -> p * n > p * m.\nintros n m p H H1; red; apply mult_lt_compat_l; auto.\nQed.\n\nTheorem mult_lt_compat_rev_l1: forall n m p : nat, p * n < p * m -> 0 < p.\nintros n m p; case p; auto with arith.\nQed.\n\nTheorem mult_lt_compat_rev_l2: forall n m p : nat, p * n < p * m -> n < m.\nintros n m p H; case (le_or_lt m n); auto with arith; intros H1.\nabsurd (p * n < p * m); auto with arith.\napply le_not_lt; apply mult_le_compat_l; auto.\nQed.\n\n\n",
                "context_tokens": 345,
                "proof_start_offset": 892,
                "proof_end_offset": 1010,
                "proof": "Theorem mult_gt_compat_rev_l1: forall n m p : nat, p * n > p * m -> p > 0.\nProof.\nintros n m p; case p; auto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem mult_gt_compat_rev_l1: forall n m p : nat, p * n > p * m -> p > 0.\nintros n m p H; case (le_or_lt m n); auto with arith.\nQed.",
                    "Theorem mult_gt_compat_rev_l1: forall n m p : nat, p * n > p * m -> p > 0.\nintros n m p H; case (le_or_lt m p); auto with arith.\nintros n m p H1; case (le_or_lt m p); auto with arith.\nintros n m p H1; case (le_or_lt m p); auto with arith.\nintros n m p H1; case (le_or_lt m p); auto with arith.\nintros n m p H1; case (le_or_lt m p); auto with arith.\nintros n m p H1 H1; case (le_or_lt m p); auto with arith.\nintros n m p H1; case (le_or_lt m p); auto with arith.\nintros n m p H1 H2; case (le_or_lt m p); auto with arith.\nintros n m p H1; case (le_or_lt m p); auto with arith.\nintros n m p H1; case (le_or_lt m p); auto with arith.\nintros n m p H1; case (le_or_lt m p); auto with arith.\nintros n m p H1; case (leQed.",
                    "Theorem mult_gt_compat_rev_l1: forall n m p : nat, p * n > p * m -> p > 0.\nintros n m p H; case (le_or_lt m n); auto with arith.\nintros n m p H1; case (le_or_lt m n); auto with arith.\nintros n m p H1; case (le_or_lt m n); auto with arith.\nintros n m p H1; case (le_or_lt m n); auto with arith.\nintros n m p H1; case (le_or_lt m n); auto with arith.\nintros n m p H1; case (le_or_lt m n); auto with arith.\nintros n m p H1; case (le_or_lt m n); auto with arith.\nintros n m p H1; case (le_or_lt m n); auto with arith.\nintros n m p H1; case (le_or_lt m n); auto with arith.\nintros n m p H1; case (le_or_lt m n); auto with arith.\nintros n m p H1; case (le_or_lt m n); auto with arith.\nintros n m p H1; case (le_or_ltQed.",
                    "Theorem mult_gt_compat_rev_l1: forall n m p : nat, p * n > p * m -> p > 0.\nintros n m p H; case (le_or_lt m n); auto with arith.\nintros n m p H; case (le_or_lt m n); auto with arith.\nintros n m p H; case (le_or_lt m n); auto with arith.\nintros n m p H; case (le_or_lt m n); auto with arith.\nintros n m p H1 H2; case (le_or_lt m n); auto with arith.\nintros n m p H1; case (le_or_lt m n); auto with arith.\nintros n m p H1; case (le_or_lt m n); auto with arith.\nintros n m p H1; case (le_or_lt m n); auto with arith.\nintros n m p H1 H2; case (le_or_lt m n); auto with arith.\nintros n m p H1; case (le_or_lt m n); auto with arith.\nintros n m p H1 H1; case (le_or_lt m n); auto with arith.\nintros n m p H1; case (le_Qed.",
                    "Theorem mult_gt_compat_rev_l1: forall n m p : nat, p * n > p * m -> p > 0.\nintros n m p H; case (le_or_lt m n); auto with arith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NatSignTac.v",
                "context": "(* Ugly tacty to resolve sign condition for Z *)\nRequire Import Arith.\nRequire Import List.\nRequire Export NatGroundTac.\n\n\nTheorem mult_lt_compat_l: forall n m p : nat, n < m -> 0 < p -> p * n < p * m.\nintros n m p H H1; repeat rewrite (mult_comm p); apply mult_lt_compat_r; auto.\nQed.\n\nTheorem mult_ge_compat_l: forall n m p : nat, n >= m -> p * n >= p * m.\nintros n m p H; auto with arith.\nQed.\n\nTheorem mult_gt_compat_l: forall n m p : nat, n > m -> p > 0 -> p * n > p * m.\nintros n m p H H1; red; apply mult_lt_compat_l; auto.\nQed.\n\nTheorem mult_lt_compat_rev_l1: forall n m p : nat, p * n < p * m -> 0 < p.\nintros n m p; case p; auto with arith.\nQed.\n\nTheorem mult_lt_compat_rev_l2: forall n m p : nat, p * n < p * m -> n < m.\nintros n m p H; case (le_or_lt m n); auto with arith; intros H1.\nabsurd (p * n < p * m); auto with arith.\napply le_not_lt; apply mult_le_compat_l; auto.\nQed.\n\n\nTheorem mult_gt_compat_rev_l1: forall n m p : nat, p * n > p * m -> p > 0.\nintros n m p; case p; auto with arith.\nQed.\n\n",
                "context_tokens": 394,
                "proof_start_offset": 1012,
                "proof_end_offset": 1197,
                "proof": "Theorem mult_gt_compat_rev_l2: forall n m p : nat, p * n > p * m -> n > m.\nProof.\nintros n m p H; case (le_or_lt n m); auto with arith; intros H1.\nabsurd (p * n > p * m); auto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem mult_gt_compat_rev_l2: forall n m p : nat, p * n > p * m -> n > m.\nintros n m p; case p; auto with arith.\nQed.",
                    "Theorem mult_gt_compat_rev_l2: forall n m p : nat, p * n > p * m -> n > m.\nintros n m p H; case p; auto with arith.\nQed.",
                    "Theorem mult_gt_compat_rev_l2: forall n m p : nat, p * n > p * m -> n > m.\nintros n m p; case p; auto with arith.\nQed.",
                    "Theorem mult_gt_compat_rev_l2: forall n m p : nat, p * n > p * m -> n > m.\nintros n m p H; case p; auto with arith.\nQed.",
                    "Theorem mult_gt_compat_rev_l2: forall n m p : nat, p * n > p * m -> n > m.\nintros n m p; case p; auto with arith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NatSignTac.v",
                "context": "(* Ugly tacty to resolve sign condition for Z *)\nRequire Import Arith.\nRequire Import List.\nRequire Export NatGroundTac.\n\n\nTheorem mult_lt_compat_l: forall n m p : nat, n < m -> 0 < p -> p * n < p * m.\nintros n m p H H1; repeat rewrite (mult_comm p); apply mult_lt_compat_r; auto.\nQed.\n\nTheorem mult_ge_compat_l: forall n m p : nat, n >= m -> p * n >= p * m.\nintros n m p H; auto with arith.\nQed.\n\nTheorem mult_gt_compat_l: forall n m p : nat, n > m -> p > 0 -> p * n > p * m.\nintros n m p H H1; red; apply mult_lt_compat_l; auto.\nQed.\n\nTheorem mult_lt_compat_rev_l1: forall n m p : nat, p * n < p * m -> 0 < p.\nintros n m p; case p; auto with arith.\nQed.\n\nTheorem mult_lt_compat_rev_l2: forall n m p : nat, p * n < p * m -> n < m.\nintros n m p H; case (le_or_lt m n); auto with arith; intros H1.\nabsurd (p * n < p * m); auto with arith.\napply le_not_lt; apply mult_le_compat_l; auto.\nQed.\n\n\nTheorem mult_gt_compat_rev_l1: forall n m p : nat, p * n > p * m -> p > 0.\nintros n m p; case p; auto with arith.\nQed.\n\nTheorem mult_gt_compat_rev_l2: forall n m p : nat, p * n > p * m -> n > m.\nintros n m p H; case (le_or_lt n m); auto with arith; intros H1.\nabsurd (p * n > p * m); auto with arith.\nQed.\n\n",
                "context_tokens": 470,
                "proof_start_offset": 1199,
                "proof_end_offset": 1445,
                "proof": "Theorem mult_le_compat_rev_l: forall n m p : nat, p * n <= p * m -> 0 < p -> n <= m.\nProof.\nintros n m p H H1; case (le_or_lt n m); auto with arith; intros H2; absurd (p * n <= p * m); auto with arith.\napply lt_not_le; apply mult_lt_compat_l; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem mult_le_compat_rev_l: forall n m p : nat, p * n <= p * m -> 0 < p -> n <= m.\nintros n m p H; case (le_or_lt n m); auto with arith.\nintros n m p; case (le_or_lt n m); auto with arith.\nintros n m p H1; case (le_or_lt n m); auto with arith.\nintros n m p; case (le_or_lt n m); auto with arith.\nintros n m p H1; case (le_or_lt n m); auto with arith.\nintros n m p H1; case (le_or_lt n m); auto with arith.\nintros n m p H1 H2; case (le_or_lt n m); auto with arith.\nintros n m p H1 H2; case (le_or_lt n m); auto with arith.\nintros n m p H1; case (le_or_lt n m); auto with arith.\nintros n m p H1; case (le_or_lt n m); auto with arith.\nintros n m p H1 H2; case (le_or_lt n m); auto with arith.\nintros n m p H1; case (le_orQed.",
                    "Theorem mult_le_compat_rev_l: forall n m p : nat, p * n <= p * m -> 0 < p -> n <= m.\nintros n m p H; case p; auto with arith.\nQed.",
                    "Theorem mult_le_compat_rev_l: forall n m p : nat, p * n <= p * m -> 0 < p -> n <= m.\nintros n m p H; case (le_or_lt n m); auto with arith.\nQed.",
                    "Theorem mult_le_compat_rev_l: forall n m p : nat, p * n <= p * m -> 0 < p -> n <= m.\nintros n m p H; case (le_or_lt m n); auto with arith.\nQed.",
                    "Theorem mult_le_compat_rev_l: forall n m p : nat, p * n <= p * m -> 0 < p -> n <= m.\nintros n m p H; case (le_or_lt n m); auto with arith.\nintros n m p H; case (le_or_lt n m); auto with arith.\nintros n m p H1; case (le_or_lt n m); auto with arith.\nintros n m p H1; case (le_or_lt n m); auto with arith.\nintros n m p H1; case (le_or_lt n m); auto with arith.\nintros n m p H1; case (le_or_lt n m); auto with arith.\nintros n m p H1; case (le_or_lt n m); auto with arith.\nintros n m p H1; case (le_or_lt n m); auto with arith.\nintros n m p H1; case (le_or_lt n m); auto with arith.\nintros n m p H1; case (le_or_lt n m); auto with arith.\nintros n m p H1 H2; case (le_or_lt n m); auto with arith.\nintros n m p H1; case (le_or_Qed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NatSignTac.v",
                "context": "(* Ugly tacty to resolve sign condition for Z *)\nRequire Import Arith.\nRequire Import List.\nRequire Export NatGroundTac.\n\n\nTheorem mult_lt_compat_l: forall n m p : nat, n < m -> 0 < p -> p * n < p * m.\nintros n m p H H1; repeat rewrite (mult_comm p); apply mult_lt_compat_r; auto.\nQed.\n\nTheorem mult_ge_compat_l: forall n m p : nat, n >= m -> p * n >= p * m.\nintros n m p H; auto with arith.\nQed.\n\nTheorem mult_gt_compat_l: forall n m p : nat, n > m -> p > 0 -> p * n > p * m.\nintros n m p H H1; red; apply mult_lt_compat_l; auto.\nQed.\n\nTheorem mult_lt_compat_rev_l1: forall n m p : nat, p * n < p * m -> 0 < p.\nintros n m p; case p; auto with arith.\nQed.\n\nTheorem mult_lt_compat_rev_l2: forall n m p : nat, p * n < p * m -> n < m.\nintros n m p H; case (le_or_lt m n); auto with arith; intros H1.\nabsurd (p * n < p * m); auto with arith.\napply le_not_lt; apply mult_le_compat_l; auto.\nQed.\n\n\nTheorem mult_gt_compat_rev_l1: forall n m p : nat, p * n > p * m -> p > 0.\nintros n m p; case p; auto with arith.\nQed.\n\nTheorem mult_gt_compat_rev_l2: forall n m p : nat, p * n > p * m -> n > m.\nintros n m p H; case (le_or_lt n m); auto with arith; intros H1.\nabsurd (p * n > p * m); auto with arith.\nQed.\n\nTheorem mult_le_compat_rev_l: forall n m p : nat, p * n <= p * m -> 0 < p -> n <= m.\nintros n m p H H1; case (le_or_lt n m); auto with arith; intros H2; absurd (p * n <= p * m); auto with arith.\napply lt_not_le; apply mult_lt_compat_l; auto.\nQed.\n\n",
                "context_tokens": 569,
                "proof_start_offset": 1447,
                "proof_end_offset": 1704,
                "proof": "Theorem mult_ge_compat_rev_l: forall n m p : nat, p * n >= p * m -> 0 < p -> n >= m.\nProof.\nintros n m p H H1; case (le_or_lt m n); auto with arith; intros H2; absurd (p * n >= p * m); auto with arith.\nunfold ge; apply lt_not_le; apply mult_lt_compat_l; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem mult_ge_compat_rev_l: forall n m p : nat, p * n >= p * m -> 0 < p -> n >= m.\nintros n m p H; case (le_or_lt n m); auto with arith.\nQed.",
                    "Theorem mult_ge_compat_rev_l: forall n m p : nat, p * n >= p * m -> 0 < p -> n >= m.\nintros n m p H; case (le_or_lt n m); auto with arith.\nQed.",
                    "Theorem mult_ge_compat_rev_l: forall n m p : nat, p * n >= p * m -> 0 < p -> n >= m.\nintros n m p H; case (le_or_lt n m); auto with arith.\nQed.",
                    "Theorem mult_ge_compat_rev_l: forall n m p : nat, p * n >= p * m -> 0 < p -> n >= m.\nintros n m p H; case (le_or_lt n m); auto with arith.\nQed.",
                    "Theorem mult_ge_compat_rev_l: forall n m p : nat, p * n >= p * m -> 0 < p -> n >= m.\nintros n m p H; case (le_or_lt n m); auto with arith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NatSignTac.v",
                "context": "(* Ugly tacty to resolve sign condition for Z *)\nRequire Import Arith.\nRequire Import List.\nRequire Export NatGroundTac.\n\n\nTheorem mult_lt_compat_l: forall n m p : nat, n < m -> 0 < p -> p * n < p * m.\nintros n m p H H1; repeat rewrite (mult_comm p); apply mult_lt_compat_r; auto.\nQed.\n\nTheorem mult_ge_compat_l: forall n m p : nat, n >= m -> p * n >= p * m.\nintros n m p H; auto with arith.\nQed.\n\nTheorem mult_gt_compat_l: forall n m p : nat, n > m -> p > 0 -> p * n > p * m.\nintros n m p H H1; red; apply mult_lt_compat_l; auto.\nQed.\n\nTheorem mult_lt_compat_rev_l1: forall n m p : nat, p * n < p * m -> 0 < p.\nintros n m p; case p; auto with arith.\nQed.\n\nTheorem mult_lt_compat_rev_l2: forall n m p : nat, p * n < p * m -> n < m.\nintros n m p H; case (le_or_lt m n); auto with arith; intros H1.\nabsurd (p * n < p * m); auto with arith.\napply le_not_lt; apply mult_le_compat_l; auto.\nQed.\n\n\nTheorem mult_gt_compat_rev_l1: forall n m p : nat, p * n > p * m -> p > 0.\nintros n m p; case p; auto with arith.\nQed.\n\nTheorem mult_gt_compat_rev_l2: forall n m p : nat, p * n > p * m -> n > m.\nintros n m p H; case (le_or_lt n m); auto with arith; intros H1.\nabsurd (p * n > p * m); auto with arith.\nQed.\n\nTheorem mult_le_compat_rev_l: forall n m p : nat, p * n <= p * m -> 0 < p -> n <= m.\nintros n m p H H1; case (le_or_lt n m); auto with arith; intros H2; absurd (p * n <= p * m); auto with arith.\napply lt_not_le; apply mult_lt_compat_l; auto.\nQed.\n\nTheorem mult_ge_compat_rev_l: forall n m p : nat, p * n >= p * m -> 0 < p -> n >= m.\nintros n m p H H1; case (le_or_lt m n); auto with arith; intros H2; absurd (p * n >= p * m); auto with arith.\nunfold ge; apply lt_not_le; apply mult_lt_compat_l; auto.\nQed.\n\n",
                "context_tokens": 671,
                "proof_start_offset": 1706,
                "proof_end_offset": 1872,
                "proof": "Theorem lt_mult_0: forall a b, 0 < a -> 0 < b -> 0 < a * b.\nProof.\nintros a b; case a ; case b; simpl; auto with arith.\nintros n H1 H2; absurd (0 < 0); auto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem lt_mult_0: forall a b, 0 < a -> 0 < b -> 0 < a * b.\nintros a b H; case (le_or_lt a b); auto with arith.\nQed.",
                    "Theorem lt_mult_0: forall a b, 0 < a -> 0 < b -> 0 < a * b.\nintros a b H; case (le_or_lt a b); auto with arith.\nQed.",
                    "Theorem lt_mult_0: forall a b, 0 < a -> 0 < b -> 0 < a * b.\nintros a b H; case (le_or_lt a b); auto with arith.\nQed.",
                    "Theorem lt_mult_0: forall a b, 0 < a -> 0 < b -> 0 < a * b.\nintros a b H H; case (le_or_lt a b); auto with arith.\nQed.",
                    "Theorem lt_mult_0: forall a b, 0 < a -> 0 < b -> 0 < a * b.\nintros a b H H1; case (le_or_lt a b); auto with arith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NatSignTac.v",
                "context": "(* Ugly tacty to resolve sign condition for Z *)\nRequire Import Arith.\nRequire Import List.\nRequire Export NatGroundTac.\n\n\nTheorem mult_lt_compat_l: forall n m p : nat, n < m -> 0 < p -> p * n < p * m.\nintros n m p H H1; repeat rewrite (mult_comm p); apply mult_lt_compat_r; auto.\nQed.\n\nTheorem mult_ge_compat_l: forall n m p : nat, n >= m -> p * n >= p * m.\nintros n m p H; auto with arith.\nQed.\n\nTheorem mult_gt_compat_l: forall n m p : nat, n > m -> p > 0 -> p * n > p * m.\nintros n m p H H1; red; apply mult_lt_compat_l; auto.\nQed.\n\nTheorem mult_lt_compat_rev_l1: forall n m p : nat, p * n < p * m -> 0 < p.\nintros n m p; case p; auto with arith.\nQed.\n\nTheorem mult_lt_compat_rev_l2: forall n m p : nat, p * n < p * m -> n < m.\nintros n m p H; case (le_or_lt m n); auto with arith; intros H1.\nabsurd (p * n < p * m); auto with arith.\napply le_not_lt; apply mult_le_compat_l; auto.\nQed.\n\n\nTheorem mult_gt_compat_rev_l1: forall n m p : nat, p * n > p * m -> p > 0.\nintros n m p; case p; auto with arith.\nQed.\n\nTheorem mult_gt_compat_rev_l2: forall n m p : nat, p * n > p * m -> n > m.\nintros n m p H; case (le_or_lt n m); auto with arith; intros H1.\nabsurd (p * n > p * m); auto with arith.\nQed.\n\nTheorem mult_le_compat_rev_l: forall n m p : nat, p * n <= p * m -> 0 < p -> n <= m.\nintros n m p H H1; case (le_or_lt n m); auto with arith; intros H2; absurd (p * n <= p * m); auto with arith.\napply lt_not_le; apply mult_lt_compat_l; auto.\nQed.\n\nTheorem mult_ge_compat_rev_l: forall n m p : nat, p * n >= p * m -> 0 < p -> n >= m.\nintros n m p H H1; case (le_or_lt m n); auto with arith; intros H2; absurd (p * n >= p * m); auto with arith.\nunfold ge; apply lt_not_le; apply mult_lt_compat_l; auto.\nQed.\n\nTheorem lt_mult_0: forall a b, 0 < a -> 0 < b -> 0 < a * b.\nintros a b; case a ; case b; simpl; auto with arith.\nintros n H1 H2; absurd (0 < 0); auto with arith.\nQed.\n\n",
                "context_tokens": 736,
                "proof_start_offset": 1874,
                "proof_end_offset": 1996,
                "proof": "Theorem gt_mult_0: forall a b, a > 0 -> b > 0 -> a * b > 0.\nProof.\nintros a b H1 H2; red; apply lt_mult_0; auto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem gt_mult_0: forall a b, a > 0 -> b > 0 -> a * b > 0.\nintros a b; case b; simpl; auto with arith.\nintros n H1; absurd (0 < 0); auto with arith.\nintros n H1; absurd (0 < 0); auto with arith.\nintros n H1; absurd (0 < 0); auto with arith.\nintros n H1; absurd (0 < 0); auto with arith.\nintros n H1; absurd (0 < 0); auto with arith.\nintros n H1; absurd (0 < 0); auto with arith.\nintros n H1; absurd (0 < 0); auto with arith.\nintros n H1; absurd (0 < 0); auto with arith.\nintros n H1; absurd (0 < 0); auto with arith.\nintros n H1; absurd (0 < 0); auto with arith.\nintros n H1; absurd (0 < 0); auto with arith.\nintros n H1; absurd (0 < 0); auto with arith.\nintros n H1; absurd (0 < 0); auto with arith.\nintros n H1; absurd (0 < 0); auto with arith.\nintros n H1; absurd (0 < 0); auto with arith.\nintrosQed.",
                    "Theorem gt_mult_0: forall a b, a > 0 -> b > 0 -> a * b > 0.\nintros a b; case b; simpl; auto with arith.\nintros n m p H1; absurd (p * m < p * m); auto with arith.\nintros n m p H1 H2; absurd (p * m < p * m); auto with arith.\nintros n m p H1 H2; absurd (p * m); auto with arith.\nintros n m p H1 H2; absurd (p * m < p); auto with arith.\nintros n m p H1; absurd (p * m < p); auto with arith.\nintros n m p H1 H2; absurd (p * m < p); auto with arith.\nintros n m p H1 H2; absurd (p * m < p); auto with arith.\nintros n m p H1 H2; absurd (p * m < p * p); auto with arith.\nintros n m p H1 H2; absurd (p * m < p * m); auto with arith.\nintros n m p H1; absurd (p * m <= p * m); auto with arith.\nintros n m p H1 H2; absurd (p * m < p); auto withQed.",
                    "Theorem gt_mult_0: forall a b, a > 0 -> b > 0 -> a * b > 0.\nintros a b H1; case (le_or_lt a b); auto with arith.\nintros a b H1; absurd (0 < 0); auto with arith.\nintros H1; absurd (0 < 0); auto with arith.\nintros H1; absurd (0 < 0); auto with arith.\nintros H1; absurd (0 < 0); auto with arith.\nintros H1; absurd (0 < 0); auto with arith.\nintros H1; absurd (0 < 0); auto with arith.\nintros H1; absurd (0 < 0); auto with arith.\nintros H1; absurd (0 < 0); auto with arith.\nintros H1; absurd (0 < 0); auto with arith.\nintros H1; absurd (0 < 0); auto with arith.\nintros H1; absurd (0 < 0); auto with arith.\nintros H1; absurd (0 < 0); auto with arith.\nintros H1; absurd (0 < 0); auto with arith.\nintros H1; absurd (0 < 0); auto with arith.\nintros H1; absurd (0 < 0); auto with arith.\nintros H1; absurd (0Qed.",
                    "Theorem gt_mult_0: forall a b, a > 0 -> b > 0 -> a * b > 0.\nintros a b; case b; simpl; auto with arith.\nintros n H1 H2; absurd (0 < 0); auto with arith.\nintros n H1; absurd (0 < 0); auto with arith.\nintros n0 H2; absurd (0 < 0); auto with arith.\nintros n0 H2; absurd (0 < 0); auto with arith.\nintros n0 H1; absurd (0 < 0); auto with arith.\nintros n0 H1; absurd (0 < 0); auto with arith.\nintros n0 H1 H2; absurd (0 < 0); auto with arith.\nintros n0 H1; absurd (0 < 0); auto with arith.\nintros n0 H2; absurd (0 < 0); auto with arith.\nintros n0 H1 H2; absurd (0 < 0); auto with arith.\nintros n0 H2; absurd (0 < 0); auto with arith.\nintros n0 H2; absurd (0 < 0); auto with arith.\nintros n0 H2; absurd (0 < 0); auto with arith.\nintros n0 H2; absurd (0 < 0); auto with arith.Qed.",
                    "Theorem gt_mult_0: forall a b, a > 0 -> b > 0 -> a * b > 0.\nintros a b H H1; case (le_or_lt a b); auto with arith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NatSignTac.v",
                "context": " : nat, n < m -> 0 < p -> p * n < p * m.\nintros n m p H H1; repeat rewrite (mult_comm p); apply mult_lt_compat_r; auto.\nQed.\n\nTheorem mult_ge_compat_l: forall n m p : nat, n >= m -> p * n >= p * m.\nintros n m p H; auto with arith.\nQed.\n\nTheorem mult_gt_compat_l: forall n m p : nat, n > m -> p > 0 -> p * n > p * m.\nintros n m p H H1; red; apply mult_lt_compat_l; auto.\nQed.\n\nTheorem mult_lt_compat_rev_l1: forall n m p : nat, p * n < p * m -> 0 < p.\nintros n m p; case p; auto with arith.\nQed.\n\nTheorem mult_lt_compat_rev_l2: forall n m p : nat, p * n < p * m -> n < m.\nintros n m p H; case (le_or_lt m n); auto with arith; intros H1.\nabsurd (p * n < p * m); auto with arith.\napply le_not_lt; apply mult_le_compat_l; auto.\nQed.\n\n\nTheorem mult_gt_compat_rev_l1: forall n m p : nat, p * n > p * m -> p > 0.\nintros n m p; case p; auto with arith.\nQed.\n\nTheorem mult_gt_compat_rev_l2: forall n m p : nat, p * n > p * m -> n > m.\nintros n m p H; case (le_or_lt n m); auto with arith; intros H1.\nabsurd (p * n > p * m); auto with arith.\nQed.\n\nTheorem mult_le_compat_rev_l: forall n m p : nat, p * n <= p * m -> 0 < p -> n <= m.\nintros n m p H H1; case (le_or_lt n m); auto with arith; intros H2; absurd (p * n <= p * m); auto with arith.\napply lt_not_le; apply mult_lt_compat_l; auto.\nQed.\n\nTheorem mult_ge_compat_rev_l: forall n m p : nat, p * n >= p * m -> 0 < p -> n >= m.\nintros n m p H H1; case (le_or_lt m n); auto with arith; intros H2; absurd (p * n >= p * m); auto with arith.\nunfold ge; apply lt_not_le; apply mult_lt_compat_l; auto.\nQed.\n\nTheorem lt_mult_0: forall a b, 0 < a -> 0 < b -> 0 < a * b.\nintros a b; case a ; case b; simpl; auto with arith.\nintros n H1 H2; absurd (0 < 0); auto with arith.\nQed.\n\nTheorem gt_mult_0: forall a b, a > 0 -> b > 0 -> a * b > 0.\nintros a b H1 H2; red; apply  lt_mult_0; auto with arith.\nQed.\n\n\n",
                "context_tokens": 742,
                "proof_start_offset": 1999,
                "proof_end_offset": 2106,
                "proof": "Theorem lt_mult_rev_0_l: forall a b, 0 < a * b -> 0 < a .\nProof.\nintros a b; case a; simpl; auto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem lt_mult_rev_0_l: forall a b, 0 < a * b -> 0 < a .\nintros a b H1; case b; simpl; auto with arith.\nintros n H2; absurd (0 < b); auto with arith.\nQed.",
                    "Theorem lt_mult_rev_0_l: forall a b, 0 < a * b -> 0 < a .\nintros a b H1; case b; simpl; auto with arith.\nintros a b H1; case b; simpl; auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros aQed.",
                    "Theorem lt_mult_rev_0_l: forall a b, 0 < a * b -> 0 < a .\nintros a b H; case b; simpl; auto with arith.\nQed.",
                    "Theorem lt_mult_rev_0_l: forall a b, 0 < a * b -> 0 < a .\nintros a b H1; case b; simpl; auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintros a b H1; absurd (0 < b); auto with arith.\nintrosQed.",
                    "Theorem lt_mult_rev_0_l: forall a b, 0 < a * b -> 0 < a .\nintros a b H1; case b; simpl; auto with arith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NatSignTac.v",
                "context": " auto.\nQed.\n\nTheorem mult_ge_compat_l: forall n m p : nat, n >= m -> p * n >= p * m.\nintros n m p H; auto with arith.\nQed.\n\nTheorem mult_gt_compat_l: forall n m p : nat, n > m -> p > 0 -> p * n > p * m.\nintros n m p H H1; red; apply mult_lt_compat_l; auto.\nQed.\n\nTheorem mult_lt_compat_rev_l1: forall n m p : nat, p * n < p * m -> 0 < p.\nintros n m p; case p; auto with arith.\nQed.\n\nTheorem mult_lt_compat_rev_l2: forall n m p : nat, p * n < p * m -> n < m.\nintros n m p H; case (le_or_lt m n); auto with arith; intros H1.\nabsurd (p * n < p * m); auto with arith.\napply le_not_lt; apply mult_le_compat_l; auto.\nQed.\n\n\nTheorem mult_gt_compat_rev_l1: forall n m p : nat, p * n > p * m -> p > 0.\nintros n m p; case p; auto with arith.\nQed.\n\nTheorem mult_gt_compat_rev_l2: forall n m p : nat, p * n > p * m -> n > m.\nintros n m p H; case (le_or_lt n m); auto with arith; intros H1.\nabsurd (p * n > p * m); auto with arith.\nQed.\n\nTheorem mult_le_compat_rev_l: forall n m p : nat, p * n <= p * m -> 0 < p -> n <= m.\nintros n m p H H1; case (le_or_lt n m); auto with arith; intros H2; absurd (p * n <= p * m); auto with arith.\napply lt_not_le; apply mult_lt_compat_l; auto.\nQed.\n\nTheorem mult_ge_compat_rev_l: forall n m p : nat, p * n >= p * m -> 0 < p -> n >= m.\nintros n m p H H1; case (le_or_lt m n); auto with arith; intros H2; absurd (p * n >= p * m); auto with arith.\nunfold ge; apply lt_not_le; apply mult_lt_compat_l; auto.\nQed.\n\nTheorem lt_mult_0: forall a b, 0 < a -> 0 < b -> 0 < a * b.\nintros a b; case a ; case b; simpl; auto with arith.\nintros n H1 H2; absurd (0 < 0); auto with arith.\nQed.\n\nTheorem gt_mult_0: forall a b, a > 0 -> b > 0 -> a * b > 0.\nintros a b H1 H2; red; apply  lt_mult_0; auto with arith.\nQed.\n\n\nTheorem lt_mult_rev_0_l: forall a b, 0 < a * b ->  0 < a.\nintros a b; case a; simpl; auto with arith.\nQed.\n\n",
                "context_tokens": 742,
                "proof_start_offset": 2108,
                "proof_end_offset": 2250,
                "proof": "Theorem lt_mult_rev_0_r: forall a b, 0 < a * b -> 0 < b .\nProof.\nintros a b; case b; simpl; auto with arith.\nrewrite mult_0_r; auto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem lt_mult_rev_0_r: forall a b, 0 < a * b -> 0 < b .\nintros a b H1; case b; simpl; auto with arith.\nQed.",
                    "Theorem lt_mult_rev_0_r: forall a b, 0 < a * b -> 0 < b .\nintros a b H; case b; simpl; auto with arith.\nintros a b H1; case b; simpl; auto with arith.\nQed.",
                    "Theorem lt_mult_rev_0_r: forall a b, 0 < a * b -> 0 < b .\nintros a b H1; case b; simpl; auto with arith.\nQed.",
                    "Theorem lt_mult_rev_0_r: forall a b, 0 < a * b -> 0 < b .\nintros a b H; case b; simpl; auto with arith.\nQed.",
                    "Theorem lt_mult_rev_0_r: forall a b, 0 < a * b -> 0 < b .\nintros a b H; case b; simpl; auto with arith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NatSignTac.v",
                "context": "_l: forall n m p : nat, n > m -> p > 0 -> p * n > p * m.\nintros n m p H H1; red; apply mult_lt_compat_l; auto.\nQed.\n\nTheorem mult_lt_compat_rev_l1: forall n m p : nat, p * n < p * m -> 0 < p.\nintros n m p; case p; auto with arith.\nQed.\n\nTheorem mult_lt_compat_rev_l2: forall n m p : nat, p * n < p * m -> n < m.\nintros n m p H; case (le_or_lt m n); auto with arith; intros H1.\nabsurd (p * n < p * m); auto with arith.\napply le_not_lt; apply mult_le_compat_l; auto.\nQed.\n\n\nTheorem mult_gt_compat_rev_l1: forall n m p : nat, p * n > p * m -> p > 0.\nintros n m p; case p; auto with arith.\nQed.\n\nTheorem mult_gt_compat_rev_l2: forall n m p : nat, p * n > p * m -> n > m.\nintros n m p H; case (le_or_lt n m); auto with arith; intros H1.\nabsurd (p * n > p * m); auto with arith.\nQed.\n\nTheorem mult_le_compat_rev_l: forall n m p : nat, p * n <= p * m -> 0 < p -> n <= m.\nintros n m p H H1; case (le_or_lt n m); auto with arith; intros H2; absurd (p * n <= p * m); auto with arith.\napply lt_not_le; apply mult_lt_compat_l; auto.\nQed.\n\nTheorem mult_ge_compat_rev_l: forall n m p : nat, p * n >= p * m -> 0 < p -> n >= m.\nintros n m p H H1; case (le_or_lt m n); auto with arith; intros H2; absurd (p * n >= p * m); auto with arith.\nunfold ge; apply lt_not_le; apply mult_lt_compat_l; auto.\nQed.\n\nTheorem lt_mult_0: forall a b, 0 < a -> 0 < b -> 0 < a * b.\nintros a b; case a ; case b; simpl; auto with arith.\nintros n H1 H2; absurd (0 < 0); auto with arith.\nQed.\n\nTheorem gt_mult_0: forall a b, a > 0 -> b > 0 -> a * b > 0.\nintros a b H1 H2; red; apply  lt_mult_0; auto with arith.\nQed.\n\n\nTheorem lt_mult_rev_0_l: forall a b, 0 < a * b ->  0 < a.\nintros a b; case a; simpl; auto with arith.\nQed.\n\nTheorem lt_mult_rev_0_r: forall a b, 0 < a * b ->  0 < b.\nintros a b; case b; simpl; auto with arith.\nrewrite mult_0_r; auto with arith.\nQed.\n\n",
                "context_tokens": 742,
                "proof_start_offset": 2252,
                "proof_end_offset": 2358,
                "proof": "Theorem gt_mult_rev_0_l: forall a b, a * b > 0 -> a > 0.\nProof.\nintros a b; case a; simpl; auto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem gt_mult_rev_0_l: forall a b, a * b > 0 -> a > 0.\nintros a b; case b; simpl; auto with arith.\nQed.",
                    "Theorem gt_mult_rev_0_l: forall a b, a * b > 0 -> a > 0.\nintros a b H; case b; simpl; auto with arith.\nQed.",
                    "Theorem gt_mult_rev_0_l: forall a b, a * b > 0 -> a > 0.\nintros a b H; case b; simpl; auto with arith.\nQed.",
                    "Theorem gt_mult_rev_0_l: forall a b, a * b > 0 -> a > 0.\nintros a b H; case b; simpl; auto with arith.\nQed.",
                    "Theorem gt_mult_rev_0_l: forall a b, a * b > 0 -> a > 0.\nintros a b H; case b; simpl; auto with arith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NatSignTac.v",
                "context": "; auto.\nQed.\n\nTheorem mult_lt_compat_rev_l1: forall n m p : nat, p * n < p * m -> 0 < p.\nintros n m p; case p; auto with arith.\nQed.\n\nTheorem mult_lt_compat_rev_l2: forall n m p : nat, p * n < p * m -> n < m.\nintros n m p H; case (le_or_lt m n); auto with arith; intros H1.\nabsurd (p * n < p * m); auto with arith.\napply le_not_lt; apply mult_le_compat_l; auto.\nQed.\n\n\nTheorem mult_gt_compat_rev_l1: forall n m p : nat, p * n > p * m -> p > 0.\nintros n m p; case p; auto with arith.\nQed.\n\nTheorem mult_gt_compat_rev_l2: forall n m p : nat, p * n > p * m -> n > m.\nintros n m p H; case (le_or_lt n m); auto with arith; intros H1.\nabsurd (p * n > p * m); auto with arith.\nQed.\n\nTheorem mult_le_compat_rev_l: forall n m p : nat, p * n <= p * m -> 0 < p -> n <= m.\nintros n m p H H1; case (le_or_lt n m); auto with arith; intros H2; absurd (p * n <= p * m); auto with arith.\napply lt_not_le; apply mult_lt_compat_l; auto.\nQed.\n\nTheorem mult_ge_compat_rev_l: forall n m p : nat, p * n >= p * m -> 0 < p -> n >= m.\nintros n m p H H1; case (le_or_lt m n); auto with arith; intros H2; absurd (p * n >= p * m); auto with arith.\nunfold ge; apply lt_not_le; apply mult_lt_compat_l; auto.\nQed.\n\nTheorem lt_mult_0: forall a b, 0 < a -> 0 < b -> 0 < a * b.\nintros a b; case a ; case b; simpl; auto with arith.\nintros n H1 H2; absurd (0 < 0); auto with arith.\nQed.\n\nTheorem gt_mult_0: forall a b, a > 0 -> b > 0 -> a * b > 0.\nintros a b H1 H2; red; apply  lt_mult_0; auto with arith.\nQed.\n\n\nTheorem lt_mult_rev_0_l: forall a b, 0 < a * b ->  0 < a.\nintros a b; case a; simpl; auto with arith.\nQed.\n\nTheorem lt_mult_rev_0_r: forall a b, 0 < a * b ->  0 < b.\nintros a b; case b; simpl; auto with arith.\nrewrite mult_0_r; auto with arith.\nQed.\n\nTheorem gt_mult_rev_0_l: forall a b, a * b > 0 ->  a > 0.\nintros a b; case a; simpl; auto with arith.\nQed.\n\n",
                "context_tokens": 742,
                "proof_start_offset": 2360,
                "proof_end_offset": 2503,
                "proof": "Theorem gt_mult_rev_0_r: forall a b, a * b > 0 -> b > 0 .\nProof.\nintros a b; case b; simpl; auto with arith.\nrewrite mult_0_r; auto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem gt_mult_rev_0_r: forall a b, a * b > 0 -> b > 0 .\nintros a b H; case b; simpl; auto with arith.\nQed.",
                    "Theorem gt_mult_rev_0_r: forall a b, a * b > 0 -> b > 0 .\nintros a b; case b; simpl; auto with arith.\nQed.",
                    "Theorem gt_mult_rev_0_r: forall a b, a * b > 0 -> b > 0 .\nintros a b; case b; simpl; auto with arith.\nQed.",
                    "Theorem gt_mult_rev_0_r: forall a b, a * b > 0 -> b > 0 .\nintros a b; case b; simpl; auto with arith.\nQed.",
                    "Theorem gt_mult_rev_0_r: forall a b, a * b > 0 -> b > 0 .\nintros a b; case b; simpl; auto with arith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NatSignTac.v",
                "context": "Qed.\n\nTheorem mult_lt_compat_rev_l2: forall n m p : nat, p * n < p * m -> n < m.\nintros n m p H; case (le_or_lt m n); auto with arith; intros H1.\nabsurd (p * n < p * m); auto with arith.\napply le_not_lt; apply mult_le_compat_l; auto.\nQed.\n\n\nTheorem mult_gt_compat_rev_l1: forall n m p : nat, p * n > p * m -> p > 0.\nintros n m p; case p; auto with arith.\nQed.\n\nTheorem mult_gt_compat_rev_l2: forall n m p : nat, p * n > p * m -> n > m.\nintros n m p H; case (le_or_lt n m); auto with arith; intros H1.\nabsurd (p * n > p * m); auto with arith.\nQed.\n\nTheorem mult_le_compat_rev_l: forall n m p : nat, p * n <= p * m -> 0 < p -> n <= m.\nintros n m p H H1; case (le_or_lt n m); auto with arith; intros H2; absurd (p * n <= p * m); auto with arith.\napply lt_not_le; apply mult_lt_compat_l; auto.\nQed.\n\nTheorem mult_ge_compat_rev_l: forall n m p : nat, p * n >= p * m -> 0 < p -> n >= m.\nintros n m p H H1; case (le_or_lt m n); auto with arith; intros H2; absurd (p * n >= p * m); auto with arith.\nunfold ge; apply lt_not_le; apply mult_lt_compat_l; auto.\nQed.\n\nTheorem lt_mult_0: forall a b, 0 < a -> 0 < b -> 0 < a * b.\nintros a b; case a ; case b; simpl; auto with arith.\nintros n H1 H2; absurd (0 < 0); auto with arith.\nQed.\n\nTheorem gt_mult_0: forall a b, a > 0 -> b > 0 -> a * b > 0.\nintros a b H1 H2; red; apply  lt_mult_0; auto with arith.\nQed.\n\n\nTheorem lt_mult_rev_0_l: forall a b, 0 < a * b ->  0 < a.\nintros a b; case a; simpl; auto with arith.\nQed.\n\nTheorem lt_mult_rev_0_r: forall a b, 0 < a * b ->  0 < b.\nintros a b; case b; simpl; auto with arith.\nrewrite mult_0_r; auto with arith.\nQed.\n\nTheorem gt_mult_rev_0_l: forall a b, a * b > 0 ->  a > 0.\nintros a b; case a; simpl; auto with arith.\nQed.\n\nTheorem gt_mult_rev_0_r: forall a b, a * b > 0  ->  b > 0.\nintros a b; case b; simpl; auto with arith.\nrewrite mult_0_r; auto with arith.\nQed.\n\n",
                "context_tokens": 747,
                "proof_start_offset": 2505,
                "proof_end_offset": 2590,
                "proof": "Theorem le_0_eq_0: forall n, n <= 0 -> n = 0.\nProof.\nintros n; case n; auto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem le_0_eq_0: forall n, n <= 0 -> n = 0.\nintros n; case n; simpl; auto with arith.\nQed.",
                    "Theorem le_0_eq_0: forall n, n <= 0 -> n = 0.\nintros a b; case b; simpl; auto with arith.\nQed.",
                    "Theorem le_0_eq_0: forall n, n <= 0 -> n = 0.\nintros n; case n; simpl; auto with arith.\nQed.",
                    "Theorem le_0_eq_0: forall n, n <= 0 -> n = 0.\nintros n; case n; simpl; auto with arith.\nQed.",
                    "Theorem le_0_eq_0: forall n, n <= 0 -> n = 0.\nintros n; case (le_or_lt n m); auto with arith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NatSignTac.v",
                "context": "_compat_l || apply mult_lt_compat_l ||\n              apply mult_ge_compat_l || apply mult_gt_compat_l ||\n              apply lt_mult_0 || apply gt_mult_0); auto with arith.\n\nLtac hyp_nsign_tac H :=\n  match type of H with\n   0 <= _ => clear H\n|?X1 <= 0 => generalize (le_0_eq_0 _ H); clear H; intros H; subst X1\n| ?X1 * _ <=?X1 * _ => \n             let s1 := fresh \"NS\" in\n                   (assert (s1: 0 < X1); [nsign_tac; fail |\n                   generalize (mult_le_compat_rev_l _ _ _ H s1);\n                   clear H s1; intros H])\n|   0  <?X1 * _ => \n              let s1 := fresh \"NS\" in\n                   (generalize (lt_mult_rev_0_l _ _ H);\n                    generalize (lt_mult_rev_0_r _ _ H); clear H;\n                    intros H s1; hyp_nsign_tac s1; hyp_nsign_tac H)\n| ?X1 < 0 => absurd (~ (X1 < 0)); auto with arith\n|?X1 * _  <?X1 * _ => \n              let s1 := fresh \"NS\" in\n                   (generalize (mult_lt_compat_rev_l1 _ _ _ H);\n                    generalize (mult_lt_compat_rev_l2 _ _ _ H); clear H;\n                    intros H s1; hyp_nsign_tac s1; hyp_nsign_tac H)\n| ?X1 >= 0 => clear H\n| 0 >=?X1  => generalize (le_0_eq_0 _ H); clear H; intros H; subst X1\n| ?X1 * _ >=?X1 * _ => \n             let s1 := fresh \"NS\" in\n                   (assert (s1: 0 < X1); [nsign_tac; fail |\n                   generalize (mult_ge_compat_rev_l _ _ _ H s1);\n                   clear H s1; intros H])\n| ?X1 * _ > 0 => \n              let s1 := fresh \"NS\" in\n                   (generalize (gt_mult_rev_0_l _ _ H);\n                    generalize (gt_mult_rev_0_r _ _ H); clear H;\n                    intros H s1; hyp_nsign_tac s1; hyp_nsign_tac H)\n|  0 >?X1 => absurd (~ (0 > X1)); auto with arith\n|?X1 * _  >?X1 * _ => \n              let s1 := fresh \"NS\" in\n                   (generalize (mult_gt_compat_rev_l1 _ _ _ H);\n                    generalize (mult_gt_compat_rev_l2 _ _ _ H); clear H;\n                    intros H s1; hyp_nsign_tac s1; hyp_nsign_tac H)\n  |  _ => (let u := type of H in (clear H; assert (H: u); [auto with arith; fail | clear H]) || idtac)\n              \n   end.\n\n(* Test *)\nSection Test.\n\n",
                "context_tokens": 719,
                "proof_start_offset": 4783,
                "proof_end_offset": 5148,
                "proof": "Let hyp_test : forall a b c d e, 0 <= a -> 0 < a -> a * b <= a * c -> b * a <= b * c -> d <= 0 -> e < 0 -> d = 0.\nProof.\nintros a b c d e H H1 H2 H3 H4 H5.\nhyp_nsign_tac H.\nhyp_nsign_tac H2.\ntry hyp_nsign_tac H3.\nhyp_nsign_tac H4.\nhyp_nsign_tac H5.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Let hyp_test : forall a b c d e, 0 <= a -> 0 < a -> a * b <= a * c -> b * a <= b * c -> d <= 0 -> e < 0 -> d = 0.\n\nLet hyp_test_eq_0_r :=\n forall a b c d e, 0 <= a * b * d -> a * b = 0 -> b * d + b * d.\n\nLet hyp_test_eq_l :=\n forall a b c d e f g h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h hQed.",
                    "Let hyp_test : forall a b c d e, 0 <= a -> 0 < a -> a * b <= a * c -> b * a <= b * c -> d <= 0 -> e < 0 -> d = 0.\n\nLemma hyp_test : forall a b c d e, 0 <= a * b -> b * d <= c * d <= b * d.\nProof.\nintros a b c d e d e f g h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h hQed.",
                    "Let hyp_test : forall a b c d e, 0 <= a -> 0 < a -> a * b <= a * c -> b * a <= b * c -> d <= 0 -> e < 0 -> d = 0.\n\nLet hyp_test : forall a b c d e, 0 <= a * b * b <= b * c -> d <= c * d.\n\nLet hyp_test : forall a b c d e, 0 <= a * b -> a * d <= b * d.\nProof.\n\nLet hyp_test : forall a b c d e, 0 <= a * b * d <= a * d.\nProof.\n\nLet hyp_test : forall a b c d e, 0 <= a * b * d <= a * d.\nProof.\n\nLet hyp_test : forall a b c d e f e f g h e f h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h h hQed.",
                    "Let hyp_test : forall a b c d e, 0 <= a -> 0 < a -> a * b <= a * c -> b * a <= b * c -> d <= 0 -> e < 0 -> d = 0.\n\nLemma hyp_test : forall a b c d e, 0 <= a * b -> a * b = 0 -> a * b * c * c.\nProof.\nintros a b c d e d e e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f e f f e f e f e f e f e f e f e f e f e f e f f e f e f e f e f e f e f e f f e f e f e f e f e f e f e f e f e f f e f e f f e f e f f e f f e f f e f e f e f e f f e f e f e f f e f f e f f f e f e f e f f e f e f f e f e f f e f f e f e f f e f f e f f f e f e f f e f e f f e f f e f e f f e f e f e f e f f f e f e f f e f f f e f f e f f e f f e f e f eQed.",
                    "Let hyp_test : forall a b c d e, 0 <= a -> 0 < a -> a * b <= a * c -> b * a <= b * c -> d <= 0 -> e < 0 -> d = 0.\n\nLet hyp_test : forall a b c d e, 0 <= a * b -> a * b * c <= b * c.\n\nLet hyp_test : forall a b c d e, 0 <= a * b * b * b.\n\nLet hyp_test : forall a b c d e, 0 <= a * b * b * c * d.\n\nLet hyp_test : forall a b c d e, 0 < b * b * d -> a * b * d.\nProof.\n\nLet hyp_test : forall a b c d e, 0 < a * b * b * d.\nProof.\n\nLet hyp_test : forall a b c d e, 0 < a * b * d * b + b * d.\nProof.\n\nLet hyp_test : forall a b c d e, 0 < a * b * d.\nProof.\n\nLet hyp_test : forall a b c d e, 0 < a * b * d.\nProof.\n\nLet hyp_test : forall a b c d e d e, 0 < a * b * d.\nProof.\n\nLet hyp_test : forall a bQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NatSignTac.v",
                "context": "_l _ _ _ H s1);\n                   clear H s1; intros H])\n|   0  <?X1 * _ => \n              let s1 := fresh \"NS\" in\n                   (generalize (lt_mult_rev_0_l _ _ H);\n                    generalize (lt_mult_rev_0_r _ _ H); clear H;\n                    intros H s1; hyp_nsign_tac s1; hyp_nsign_tac H)\n| ?X1 < 0 => absurd (~ (X1 < 0)); auto with arith\n|?X1 * _  <?X1 * _ => \n              let s1 := fresh \"NS\" in\n                   (generalize (mult_lt_compat_rev_l1 _ _ _ H);\n                    generalize (mult_lt_compat_rev_l2 _ _ _ H); clear H;\n                    intros H s1; hyp_nsign_tac s1; hyp_nsign_tac H)\n| ?X1 >= 0 => clear H\n| 0 >=?X1  => generalize (le_0_eq_0 _ H); clear H; intros H; subst X1\n| ?X1 * _ >=?X1 * _ => \n             let s1 := fresh \"NS\" in\n                   (assert (s1: 0 < X1); [nsign_tac; fail |\n                   generalize (mult_ge_compat_rev_l _ _ _ H s1);\n                   clear H s1; intros H])\n| ?X1 * _ > 0 => \n              let s1 := fresh \"NS\" in\n                   (generalize (gt_mult_rev_0_l _ _ H);\n                    generalize (gt_mult_rev_0_r _ _ H); clear H;\n                    intros H s1; hyp_nsign_tac s1; hyp_nsign_tac H)\n|  0 >?X1 => absurd (~ (0 > X1)); auto with arith\n|?X1 * _  >?X1 * _ => \n              let s1 := fresh \"NS\" in\n                   (generalize (mult_gt_compat_rev_l1 _ _ _ H);\n                    generalize (mult_gt_compat_rev_l2 _ _ _ H); clear H;\n                    intros H s1; hyp_nsign_tac s1; hyp_nsign_tac H)\n  |  _ => (let u := type of H in (clear H; assert (H: u); [auto with arith; fail | clear H]) || idtac)\n              \n   end.\n\n(* Test *)\nSection Test.\n\nLet hyp_test : forall a b c d e, \n  0 <= a -> 0 < a -> a * b <= a * c  -> b * a <= b * c -> d <= 0 -> e < 0 -> d = 0.\nintros a b c d e H H1 H2 H3 H4 H5.\n(* H should disappear *)\nhyp_nsign_tac H.\n(* a in H2 should disappear *)\nhyp_nsign_tac H2.\n(* H3 unchanged *)\ntry hyp_nsign_tac H3.\n(* d should disappear *)\nhyp_nsign_tac H4.\n(* Prove it *)\nhyp_nsign_tac H5.\nQed.\n\n\n",
                "context_tokens": 718,
                "proof_start_offset": 5151,
                "proof_end_offset": 5516,
                "proof": "Let hyp_test1 : forall a b c d e, a >= 0 -> a > 0 -> a * b > a * c -> b * a >= b * c -> 0 >= d -> 0 > e -> d = 0.\nProof.\nintros a b c d e H H1 H2 H3 H4 H5.\nhyp_nsign_tac H.\nhyp_nsign_tac H2.\ntry hyp_nsign_tac H3.\nhyp_nsign_tac H4.\nhyp_nsign_tac H5.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Let hyp_test1 : forall a b c d e, a >= 0 -> a > 0 -> a * b > a * c -> b * a >= b * c -> 0 >= d -> 0 > e -> d = 0.\nintros a b c d e H H4 H4.\n(*  H1 = 0 *)\nintros a b c d e H4 H5 H5 H5 H5 H5 H6 H6 H6 H7 H8 H8 H8 H9 H9 H10 H10 H10 H10 H10 H10 H11 H12 H12 H11 H13 H13 H13 H13 H13 H13 H13 H14 H14 H14 H14 H14 H15 H15 H15 H15 H15 H15 H15 H15 H15 H15 H15 H15 H17 H15 H17 H17 H17 H16 H17 H17 H17 H18 H18 H18 H18 H18 H18 H19 H19 H19 H19 H19 H19 H19 H19 H19 H20 H19 H20 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H20 H19 H19 H20 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19Qed.",
                    "Let hyp_test1 : forall a b c d e, a >= 0 -> a > 0 -> a * b > a * c -> b * a >= b * c -> 0 >= d -> 0 > e -> d = 0.\nintros a b c d e H H4 H5 H5 H5.\n(* H4 *)\nintros a b c d e H5 H5 H5 H5.\nunfold a in |- *.\ngeneralize (mult_lt_compat_l _ _ _ _ H); clear H5;\n  generalize (mult_gt_compat_l _ _ _ _ H); clear H5;\n  generalize (mult_gt_compat_l _ _ _ H); clear H5;\n  generalize (mult_gt_0 _ _ H); clear H5;\n  generalize (mult_gt_compat_l _ _ _ _ _ H); clear H5;\n  generalize (mult_gt_compat_l _ _ _ _ H); clear H5;\n  generalize (mult_gt_0 _ _ _ H); clear H5;\n  generalize (mult_gt_compat_l _ _ _ _ _ H); clear H6;\n  generalize (mult_gt_compat_l _ _ _ _ H); clear H5;\n  generalize (mult_gt_compat_l _ _ _ _ _ _ H); clear H5;\n  generalize (mult_gt_compat_l _ _ _ _ _ HQed.",
                    "Let hyp_test1 : forall a b c d e, a >= 0 -> a > 0 -> a * b > a * c -> b * a >= b * c -> 0 >= d -> 0 > e -> d = 0.\nintros a b c d e H1 H3 H4.\n(* Check that the goal is the goal *)\n\nGoal forall a b c d e, \n  0 <= a * b -> b > 0 -> a * b <= c * d -> b > 0 -> d > 0 -> b * d > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> e > 0 -> eQed.",
                    "Let hyp_test1 : forall a b c d e, a >= 0 -> a > 0 -> a * b > a * c -> b * a >= b * c -> 0 >= d -> 0 > e -> d = 0.\nintros a b c d e H_eq H4.\n(*   H3 *)\n\nintros a b c d e H_eq H4.\n(*   H3 *)\nassert (H: (a <= b * b * c)%Z); [ auto with arith | auto with arith ].\n(*   H4 *)\nassert (H: (a <= b * c)%Z); [ auto with arith | auto with arith ].\n(*   H5 *)\nassert (H: (a <= b * c)%Z); [ auto with arith | auto with arith ].\n(*   H5 *)\nassert (H: (a <= b * c)%Z); [ auto with arith | auto with arith ].\n(*   H5 *)\nassert (H: (a <= b * c)%Z); [ auto with arith | auto with arith ].\n(*   H5 *)\nassert (H: (a <= b * c)%Z); [ auto with arith | auto with arith ].\n(*   H5 *)\nassert (H: (a <= b * c)%Z); [ auto with arith | auto with arith ].\n(* H5 *)\nassert (H: (a <= b * c)%ZQed.",
                    "Let hyp_test1 : forall a b c d e, a >= 0 -> a > 0 -> a * b > a * c -> b * a >= b * c -> 0 >= d -> 0 > e -> d = 0.\nintros a b c d e H0 H4.\n(* d = 0 *)\nintros a b c d e H4 H4.\nunfold a in |- *.\nunfold a in |- *.\nunfold a in |- *.\nunfold a in |- *.\nunfold a in |- *.\nunfold a in |- *.\nunfold a in |- *.\nunfold a in |- *.\nunfold a in |- *.\nunfold a in |- *.\nunfold a in |- *.\nunfold a in |- *.\nunfold a in |- *.\nunfold a in |- *.\nunfold a in |- *.\nunfold a in |- *.\nunfold a in |- *.\nunfold a in |- *.\nunfold a in |- *.\nunfold b in |- *.\nunfold a in |- *.\nunfold a in |- *.\nunfold b in |- *.\nunfold a in |- *.\nunfold b in |- *.\nunfold a in |- *.\nunfold b in |- *.\nunfold b in |- *.\nunfold a in |- *.\nunfold b in |- *.\nunfold b in |- *.\nunfold b in |- *.\nunfold b in |- *.\nunfold b in |- *.\nunfold b in |- *.\nunfold b in |- *.\nunfold b in |- *.\nunfold b inQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NAux.v",
                "context": "Require Export NArith.\nRequire Import ZArith.\n\nOpen Scope N_scope.\n\nTheorem Nle_le: forall n  m, (N.to_nat n <= N.to_nat m)%nat -> n <= m.\nintros n m; case n; case m; unfold N.le; simpl; try (intros; discriminate).\nintros p; elim p using Pind; simpl.\nintros H1; inversion H1. \nintros n1 _; rewrite nat_of_P_succ_morphism.\nintros H1; inversion H1.\nintros p1 p2 H1 H2; absurd (nat_of_P p2 > nat_of_P p1)%nat; auto with arith.\napply nat_of_P_gt_Gt_compare_morphism; auto.\nQed.\n\nTheorem le_Nle: forall n m, N.of_nat n <= N.of_nat m -> (n <= m)%nat.\nintros n m; case n; case m; unfold N.le; simpl; auto with arith.\nintros n1 H1; case H1; auto.\nintros m1 n1 H1; case (le_or_lt n1 m1); auto with arith.\nintros H2; case H1.\napply nat_of_P_gt_Gt_compare_complement_morphism.\nrepeat rewrite  nat_of_P_o_P_of_succ_nat_eq_succ; auto with arith.\nQed.\n\n",
                "context_tokens": 329,
                "proof_start_offset": 839,
                "proof_end_offset": 971,
                "proof": "Theorem Nle_le_rev: forall n m, n <= m -> (N.to_nat n <= N.to_nat m)%nat.\nProof.\nintros; apply le_Nle; repeat rewrite N2Nat.id; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Nle_le_rev: forall n m, n <= m -> (N.to_nat n <= N.to_nat m)%nat.\nintros n m; case m; simpl; auto with arith.\nintros n1 m1; case m1; auto with arith.\nintros m1 H2; case m1; auto with arith.\nintros m1 H2; case m2; auto with arith.\nintros m1 H2; case m2; auto with arith.\nintros m1 H2; case m2; auto with arith.\nintros m2 H2; case m2; auto with arith.\nintros m2 H3; case m2; auto with arith.\nintros m2 H3; case m2; auto with arith.\nintros m2 H3; case m2; auto with arith.\nintros m2 H3; case m2; auto with arith.\nintros m2 H3; case m2; auto with arith.\nintros m2 H3; case m2; auto with arith.\nintros m2 H3; case m3; auto with arith.\nintros m2 H3; case m2; auto with arith.\nintros m2 H4; case m2; auto with arith.\nintros m2 H3; case m3; auto with arith.\nintrosQed.",
                    "Theorem Nle_le_rev: forall n m, n <= m -> (N.to_nat n <= N.to_nat m)%nat.\nintros n m; case n; simpl; auto with arith.\nintros n m; case m; simpl; auto with arith.\nintros n1 H1; case m; auto with arith.\nintros n1 H1; case m; auto with arith.\nintros n1 H2; case m; auto with arith.\nintros n1 H2; case m; auto with arith.\nintros n1 H2; case m1; auto with arith.\nintros n1 H2; case m1; auto with arith.\nintros n1 H2; case m1; auto with arith.\nintros n1 H2; case m2; auto with arith.\nintros n1 H2; case m1; auto with arith.\nintros n1 H2; case m1; auto with arith.\nintros n1 H2; case m2; auto with arith.\nintros n1 H2; case m1; auto with arith.\nintros n1 H3; case m1; auto with arith.\nintros n1 H2; case m1; auto with arith.\nintros n1 H2; case m1; auto with arith.\nintros n1 H3;Qed.",
                    "Theorem Nle_le_rev: forall n m, n <= m -> (N.to_nat n <= N.to_nat m)%nat.\nintros n m; case n; auto.\nintros m; case m; auto.\nintros H1 H2; elim H1; auto.\nintros m1 H2; elim H2; auto.\nintros m1 H2; elim H2; auto.\nintros m1 H2; elim H2; auto.\nintros m1 H2; elim H2; auto.\nintros m2 H3; elim H2; auto.\nintros m1 H3; elim H3; auto.\nintros m2 H3; elim H3; auto.\nintros m2 H3; elim H3; auto.\nintros m2 H3; elim H3; auto.\nintros m2 H3; elim H3; auto.\nintros m2 H4; elim H3; auto.\nintros m2 H4; elim H3; auto.\nintros m2 H4; elim H3; auto.\nintros m2 H3; elim H3; auto.\nintros m1 H4; elim H4; auto.\nintros m2 H4; elim H4; auto.\nintros m2 H4; elim H4; auto.\nintros mQed.",
                    "Theorem Nle_le_rev: forall n m, n <= m -> (N.to_nat n <= N.to_nat m)%nat.\nintros n m; case n; auto.\nintros n1 m1 H2; case m; auto.\nintros n1 H2; case m; auto.\nintros m1 H2; case m2; auto.\nintros n1 H2; case m2; auto.\nintros H2; case m2; auto.\nintros m1 H2; case m2; auto.\nintros H2; case m2; auto.\nintros m2 H3; case m2; auto.\nintros m2 H3; case m2; auto.\nintros m2 H3; case m2; auto.\nintros m2 H3; case m2; auto.\nintros m2 H3; case m2; auto.\nintros m2 H3; case m2; auto.\nintros m2 H3; case m2; auto.\nintros m3 H4; case m2; auto.\nintros m3 H4; case m3; auto.\nintros m3 H4; case m3; auto.\nintros m3 H4; case m3; auto.\nintros m3; case m3; auto.\nintros m3 HQed.",
                    "Theorem Nle_le_rev: forall n m, n <= m -> (N.to_nat n <= N.to_nat m)%nat.\nintros n m; case m; unfold N.le; simpl; auto with arith.\nintros m1 m2; case m; auto.\nintros m1 H2; case m1; auto.\nintros m2 H3; case m2; auto.\nintros m2 H3; case m2; auto.\nintros m2 H3; case m2; auto.\nintros m2 H3; case m2; auto.\nintros m2 H3; case m2; auto.\nintros m2 H4; case m2; auto.\nintros m3 H4; case m2; auto.\nintros m2 H4; case m2; auto.\nintros m3 H4; case m3; auto.\nintros m3 H4; case m3; auto.\nintros m3 H4; case m3; auto.\nintros m3 H4; case m3; auto.\nintros m3 H4; case m3; auto.\nintros m3; case m3; auto.\nintros m3 H4; case m3; auto.\nintros m3 H4; case m3; auto.\nintros m3 H5Qed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NAux.v",
                "context": "Require Export NArith.\nRequire Import ZArith.\n\nOpen Scope N_scope.\n\nTheorem Nle_le: forall n  m, (N.to_nat n <= N.to_nat m)%nat -> n <= m.\nintros n m; case n; case m; unfold N.le; simpl; try (intros; discriminate).\nintros p; elim p using Pind; simpl.\nintros H1; inversion H1. \nintros n1 _; rewrite nat_of_P_succ_morphism.\nintros H1; inversion H1.\nintros p1 p2 H1 H2; absurd (nat_of_P p2 > nat_of_P p1)%nat; auto with arith.\napply nat_of_P_gt_Gt_compare_morphism; auto.\nQed.\n\nTheorem le_Nle: forall n m, N.of_nat n <= N.of_nat m -> (n <= m)%nat.\nintros n m; case n; case m; unfold N.le; simpl; auto with arith.\nintros n1 H1; case H1; auto.\nintros m1 n1 H1; case (le_or_lt n1 m1); auto with arith.\nintros H2; case H1.\napply nat_of_P_gt_Gt_compare_complement_morphism.\nrepeat rewrite  nat_of_P_o_P_of_succ_nat_eq_succ; auto with arith.\nQed.\n\nTheorem Nle_le_rev: forall n  m, n <= m -> (N.to_nat n <= N.to_nat m)%nat.\nintros; apply le_Nle; repeat rewrite N2Nat.id; auto.\nQed.\n\n",
                "context_tokens": 386,
                "proof_start_offset": 973,
                "proof_end_offset": 1244,
                "proof": "Theorem Nlt_lt: forall n m, (N.to_nat n < N.to_nat m)%nat -> n < m.\nProof.\nintros n m; case n; case m; unfold N.lt; simpl; try (intros; discriminate); auto.\nintros H1; inversion H1.\nintros p H1; inversion H1.\nintros; apply nat_of_P_lt_Lt_compare_complement_morphism; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Nlt_lt: forall n m, (N.to_nat n < N.to_nat m)%nat -> n < m.\nintros; apply le_antisym; repeat rewrite N2Nat.id; auto with arith.\nQed.",
                    "Theorem Nlt_lt: forall n m, (N.to_nat n < N.to_nat m)%nat -> n < m.\nintros; case m; unfold N.le; simpl; auto with arith.\nintros; case m; unfold N.le; simpl; auto with arith.\nintros; case m; unfold N.le; simpl; auto with arith.\nintros; case m; unfold N.le; simpl; auto with arith.\nintros; case m; unfold N.le; simpl; auto with arith.\nintros; case m; unfold N.le; simpl; auto with arith.\nintros; case m; unfold N.le; simpl; auto with arith.\nintros; case m; unfold N.le; simpl; auto with arith.\nintros; case m; unfold N.le; simpl; auto with arith.\nintros; case m; unfold N.le; simpl; auto with arith.\nintros; case m; unfold N.le; simpl; auto with arith.\nintros; case m; unfold N.le; simpl; auto with arith.\nintros; case m; unfold N.le; simpl; auto with arith.\nintros; case m; unfold N.le; simpl; auto with arith.\nintros; case m; unfold N.le; simpl; auto with arith.\nQed.",
                    "Theorem Nlt_lt: forall n m, (N.to_nat n < N.to_nat m)%nat -> n < m.\nintros n m H; case n; auto with arith.\nintros n m H; case n; auto with arith.\nintros n m H1; case n; auto with arith.\nintros m H1; case n; auto with arith.\nintros m H1; case n; auto with arith.\nintros m1; case n; auto with arith.\nintros m1; case n; auto with arith.\nintros m1 H2; case n; auto with arith.\nintros m1; case n; auto with arith.\nintros m1 H1; case n; auto with arith.\nintros m1 H2; case n; auto with arith.\nintros m1; case n; auto with arith.\nintros m1; case n; auto with arith.\nintros m1 H2; case n; auto with arith.\nintros m1; case n; auto with arith.\nintros m1 H2; case n; auto with arith.\nintros m1 H2; case n; auto with arith.\nintros m1 H2; case n; auto with arith.\nintros m1 H2; case n; auto with arith.\nintros m1 H3Qed.",
                    "Theorem Nlt_lt: forall n m, (N.to_nat n < N.to_nat m)%nat -> n < m.\nintros n m; case n; auto with arith.\nintros n m; case n; auto with arith.\nintros n m; case n; auto with arith.\nintros n m; case n; auto with arith.\nintros n m; case n; auto with arith.\nintros n m; case n; auto with arith.\nintros n m; case n; auto with arith.\nintros n m; case n; auto with arith.\nintros n m; case n; auto with arith.\nintros n m; case n; auto with arith.\nintros n m; case n; auto with arith.\nintros n m; case n; auto with arith.\nintros n m; case n; auto with arith.\nintros n m; case n; auto with arith.\nintros n m; case n; auto with arith.\nintros n m; case n; auto with arith.\nintros n m; case n; auto with arith.\nintros n m; case n; auto with arith.\nintros n m; case n; auto with arith.\nintros n m; case n; auto with arith.\nintros n m; case n; auto with arith.\nintros n mQed.",
                    "Theorem Nlt_lt: forall n m, (N.to_nat n < N.to_nat m)%nat -> n < m.\nintros n m; case n; unfold N.le; simpl; auto with arith.\nintros n m; case n; simpl; auto with arith.\nintros H1; elim H1; auto with arith.\nintros H1; elim H1; auto with arith.\nintros H1; elim H1; auto with arith.\nintros H1; elim H1; auto with arith.\nintros H1; elim H1; auto with arith.\nintros H1; elim H2; auto with arith.\nintros H1; elim H1; auto with arith.\nintros H1; elim H2; auto with arith.\nintros H1; elim H1; auto with arith.\nintros H1; elim H2; auto with arith.\nintros H1; elim H2; auto with arith.\nintros H1; elim H1; auto with arith.\nintros H1; elim H2; auto with arith.\nintros H1; elim H2; auto with arith.\nintros H1; elim H2; auto with arith.\nintros H1; elim H1; auto with arith.\nintros H1; elim H2; auto with arith.\nintrosQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NAux.v",
                "context": "Require Export NArith.\nRequire Import ZArith.\n\nOpen Scope N_scope.\n\nTheorem Nle_le: forall n  m, (N.to_nat n <= N.to_nat m)%nat -> n <= m.\nintros n m; case n; case m; unfold N.le; simpl; try (intros; discriminate).\nintros p; elim p using Pind; simpl.\nintros H1; inversion H1. \nintros n1 _; rewrite nat_of_P_succ_morphism.\nintros H1; inversion H1.\nintros p1 p2 H1 H2; absurd (nat_of_P p2 > nat_of_P p1)%nat; auto with arith.\napply nat_of_P_gt_Gt_compare_morphism; auto.\nQed.\n\nTheorem le_Nle: forall n m, N.of_nat n <= N.of_nat m -> (n <= m)%nat.\nintros n m; case n; case m; unfold N.le; simpl; auto with arith.\nintros n1 H1; case H1; auto.\nintros m1 n1 H1; case (le_or_lt n1 m1); auto with arith.\nintros H2; case H1.\napply nat_of_P_gt_Gt_compare_complement_morphism.\nrepeat rewrite  nat_of_P_o_P_of_succ_nat_eq_succ; auto with arith.\nQed.\n\nTheorem Nle_le_rev: forall n  m, n <= m -> (N.to_nat n <= N.to_nat m)%nat.\nintros; apply le_Nle; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nlt_lt: forall n  m, (N.to_nat n < N.to_nat m)%nat -> n < m.\nintros n m; case n; case m; unfold N.lt; simpl; try (intros; discriminate); auto.\nintros H1; inversion H1.\nintros p H1; inversion H1.\nintros; apply nat_of_P_lt_Lt_compare_complement_morphism; auto.\nQed.\n\n",
                "context_tokens": 490,
                "proof_start_offset": 1246,
                "proof_end_offset": 1540,
                "proof": "Theorem lt_Nlt: forall n m, N.of_nat n < N.of_nat m -> (n < m)%nat.\nProof.\nintros n m; case n; case m; unfold N.lt; simpl; try (intros; discriminate); auto with arith.\nintros m1 n1 H1.\nrewrite <- (Nat2N.id (S n1)); rewrite <- (Nat2N.id (S m1)).\nsimpl; apply nat_of_P_lt_Lt_compare_morphism; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem lt_Nlt: forall n m, N.of_nat n < N.of_nat m -> (n < m)%nat.\nintros; apply lt_O_lt_trans with (n := m); auto with arith.\nintros H1; inversion H1.\nintros p1; inversion H1.\nintros p1; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p1 p2; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p1; inversion H1.\nintros p1; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p1; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1Qed.",
                    "Theorem lt_Nlt: forall n m, N.of_nat n < N.of_nat m -> (n < m)%nat.\nintros n m; case m; unfold N.lt; simpl; try (intros; discriminate); auto.\nintros H1; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H2.\nintros H2; inversion H1.\nintros H2; inversion H2.\nintros H2; inversion H2.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H3; inversion H1.\nintros H3; inversion H1.\nintros H2; inversion H1.\nintros H3; inversion H1.\nintros H3; inversion H1.\nintros H3; inversion H1.\nintros H3; inversion H1.\nintros H3; inversion H1.\nintros H3; inversion H1Qed.",
                    "Theorem lt_Nlt: forall n m, N.of_nat n < N.of_nat m -> (n < m)%nat.\nintros n m; case m; unfold N.lt; simpl; try (intros; discriminate); auto with arith.\nintros H1; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion H1.\nintros p; inversion HQed.",
                    "Theorem lt_Nlt: forall n m, N.of_nat n < N.of_nat m -> (n < m)%nat.\nintros; case n; auto.\nintros n m; case m; unfold N.le; simpl; auto with arith.\nintros H1; inversion H1.\nintros H1; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H2.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H1; inversion H2.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2; inversion H1.\nintros H2Qed.",
                    "Theorem lt_Nlt: forall n m, N.of_nat n < N.of_nat m -> (n < m)%nat.\nintros n m; case m; unfold N.lt; simpl; try (intros; discriminate); auto.\nintros H1; inversion H1.\nintros p H2; inversion H1.\nintros p1; inversion H1.\nintros p2 H2; inversion H1.\nintros p2; inversion H1.\nintros p1; inversion H1.\nintros p2; inversion H1.\nintros p1; inversion H1.\nintros p1; inversion H1.\nintros p1; inversion H1.\nintros p2; inversion H1.\nintros p1; inversion H1.\nintros p1; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p1; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p2; inversion H1.\nintros p1; inversion H1.\nintros p2; inversion H1.\nintros p1; inversion H1.\nintros p1; inversion H1.\nintros p2; inversion H1.\nintros p1; inversion H1.\nintros p2;Qed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NAux.v",
                "context": "Require Export NArith.\nRequire Import ZArith.\n\nOpen Scope N_scope.\n\nTheorem Nle_le: forall n  m, (N.to_nat n <= N.to_nat m)%nat -> n <= m.\nintros n m; case n; case m; unfold N.le; simpl; try (intros; discriminate).\nintros p; elim p using Pind; simpl.\nintros H1; inversion H1. \nintros n1 _; rewrite nat_of_P_succ_morphism.\nintros H1; inversion H1.\nintros p1 p2 H1 H2; absurd (nat_of_P p2 > nat_of_P p1)%nat; auto with arith.\napply nat_of_P_gt_Gt_compare_morphism; auto.\nQed.\n\nTheorem le_Nle: forall n m, N.of_nat n <= N.of_nat m -> (n <= m)%nat.\nintros n m; case n; case m; unfold N.le; simpl; auto with arith.\nintros n1 H1; case H1; auto.\nintros m1 n1 H1; case (le_or_lt n1 m1); auto with arith.\nintros H2; case H1.\napply nat_of_P_gt_Gt_compare_complement_morphism.\nrepeat rewrite  nat_of_P_o_P_of_succ_nat_eq_succ; auto with arith.\nQed.\n\nTheorem Nle_le_rev: forall n  m, n <= m -> (N.to_nat n <= N.to_nat m)%nat.\nintros; apply le_Nle; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nlt_lt: forall n  m, (N.to_nat n < N.to_nat m)%nat -> n < m.\nintros n m; case n; case m; unfold N.lt; simpl; try (intros; discriminate); auto.\nintros H1; inversion H1.\nintros p H1; inversion H1.\nintros; apply nat_of_P_lt_Lt_compare_complement_morphism; auto.\nQed.\n\nTheorem lt_Nlt: forall n m, N.of_nat n < N.of_nat m -> (n < m)%nat.\nintros n m; case n; case m; unfold N.lt; simpl; try (intros; discriminate); auto with arith.\nintros m1 n1 H1.\nrewrite <- (Nat2N.id (S n1)); rewrite <- (Nat2N.id (S m1)).\nsimpl; apply nat_of_P_lt_Lt_compare_morphism; auto.\nQed.\n\n",
                "context_tokens": 610,
                "proof_start_offset": 1542,
                "proof_end_offset": 1672,
                "proof": "Theorem Nlt_lt_rev: forall n m, n < m -> (N.to_nat n < N.to_nat m)%nat.\nProof.\nintros; apply lt_Nlt; repeat rewrite N2Nat.id; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Nlt_lt_rev: forall n m, n < m -> (N.to_nat n < N.to_nat m)%nat.\nintros n m; case m; unfold N.lt; simpl; try (intros; discriminate); auto with arith.\nintros m1; case m2; auto with arith.\nintros m1; case m2; auto with arith.\nintros m1; case m2; auto with arith.\nintros m1; case m2; auto with arith.\nintros m2; case m2; auto with arith.\nintros m1; case m2; auto with arith.\nintros m2; case m2; auto with arith.\nintros m2; case m2; auto with arith.\nintros m2; case m2; auto with arith.\nintros m1; case m2; auto with arith.\nintros m2; case m2; auto with arith.\nintros m1; case m2; auto with arith.\nintros m1; case m2; auto with arith.\nintros m1; case m2; auto with arith.\nintros m1; case m2; auto with arith.\nintros m2; case m2; auto with arith.\nintros m1; case m2; auto with arith.\nintros m2; case m2; autoQed.",
                    "Theorem Nlt_lt_rev: forall n m, n < m -> (N.to_nat n < N.to_nat m)%nat.\nintros n m; case m; unfold N.le; simpl; try (intros; discriminate); auto with arith.\nintros H1; inversion H1.\nintros n1 H2; inversion H1.\nintros n2 H1 H2; inversion H1.\nintros n2 H2 H2; inversion H1.\nintros n2 H3; inversion H1.\nintros n2 H3; inversion H1.\nintros n2 H3; inversion H1.\nintros n2 H3; inversion H1.\nintros n2 H3; inversion H1.\nintros n2 H3; inversion H1.\nintros n2 H3; inversion H1.\nintros n2 H4; inversion H1.\nintros n2 H4; inversion H1.\nintros n2 H3; inversion H1.\nintros n2 H3; inversion H1.\nintros n2 H4; inversion H1.\nintros n2 H4; inversion H1.\nintros n2 H4; inversion H1.\nintros n2 H4; inversion H1.\nintros n2 H4; inversion H1.\nintros n2 H4; inversion HQed.",
                    "Theorem Nlt_lt_rev: forall n m, n < m -> (N.to_nat n < N.to_nat m)%nat.\nintros n m; case m; unfold N.le; simpl; try (intros; discriminate); auto with arith.\nintros H1; apply nat_of_P_lt_compare_morphism; auto.\nintros H1; apply nat_of_P_lt_compare_morphism; auto.\nintros H1; apply nat_of_P_lt_compare_morphism; auto.\nintros H1; apply nat_of_P_lt_compare_morphism; auto.\nintros H1; apply nat_of_P_lt_compare_morphism; auto.\nintros H1; apply nat_of_P_lt_compare_morphism; auto.\nintros H1; apply nat_of_P_lt_compare_morphism; auto.\nintros H1; apply nat_of_P_lt_compare_morphism; auto.\nintros H1; apply nat_of_P_lt_compare_morphism; auto.\nintros H1; apply nat_of_P_lt_compare_morphism; auto.\nintros H1; apply nat_of_P_lt_compare_morphism; auto.\nintros H1; apply nat_of_PQed.",
                    "Theorem Nlt_lt_rev: forall n m, n < m -> (N.to_nat n < N.to_nat m)%nat.\nintros n m; case m; unfold N.lt; simpl; try (intros; discriminate); auto with arith.\nintros m1 n2; case m; unfold N.lt; simpl; try (intros; discriminate); auto with arith.\nintros m1 n2; case m2; unfold N.lt; simpl; try (intros; discriminate); auto with arith.\nintros m1 n2; case m2; auto with arith.\nintros m1 m2; case m2; auto with arith.\nintros m2; case m2; auto with arith.\nintros m1 n2; case m2; auto with arith.\nintros m1 n2; case m2; auto with arith.\nintros m2; case m2; auto with arith.\nintros m1 m2; case m2; auto with arith.\nintros m2; case m2; auto with arith.\nintros m1 m2; case m2; auto with arith.\nintros m2; case m2; auto with arith.\nintros m1 m2; case m2; auto with arith.\nintros m2; case m2; auto with arith.\nintros m2; caseQed.",
                    "Theorem Nlt_lt_rev: forall n m, n < m -> (N.to_nat n < N.to_nat m)%nat.\nintros n m; case m; unfold N.lt; simpl; try (intros; discriminate); auto with arith.\nintros H1; inversion H1; auto with arith.\nintros m1; inversion H1; auto with arith.\nintros m1; inversion H1; auto with arith.\nintros m1; inversion H1; auto with arith.\nintros m1; inversion H1; auto with arith.\nintros m1; inversion H1; auto with arith.\nintros m1; inversion H1; auto with arith.\nintros m1; inversion H1; auto with arith.\nintros m1; inversion H1; auto with arith.\nintros m1; inversion H1; auto with arith.\nintros m1; inversion H1; auto with arith.\nintros m1; inversion H1; auto with arith.\nintros m1; inversion H1; auto with arith.\nintros m1; inversion H1; auto with arith.\nintros m1; inversion H1; auto with arith.\nintros m1; inversion H1; auto with arith.\nintros m1; inversion H1; auto with arith.\nintros m1; inversion H1; autoQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/Nex.v",
                "context": "Require Import PolTac.\nRequire Import NAux.\n\nOpen Scope N_scope.\n\n",
                "context_tokens": 20,
                "proof_start_offset": 66,
                "proof_end_offset": 153,
                "proof": "Theorem pols_test1: forall x y: N, x < y -> (x + x < y + x).\nProof.\nintros.\npols.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem pols_test1: forall x y: N, x < y -> (x + x < y + x).\nProof.\n  intros x y H.\n  apply (pow2_test2 _ _ _ H).\n  apply (pow2_test2 _ _ _ H).\n  apply (pow2_test2 _ _ _ H).\n  apply (pow2_test2 _ _ _ H).\n  apply (pow2_test2 _ _ _ _ H).\n  apply (pow2_test2 _ _ _ H).\n  apply (pow2_test2 _ _ _ H).\n  apply (pow2_test2 _ _ _ H).\n  apply (pow2_test2 _ _ _ H).\n  apply (pow2_test2 _ _ _ H).\n  apply (pow2_test2 _ _ _ H).\n  apply (pow2_test2 _ _ _ H).\n  apply (pow2_test2 _ _ _ H).\n  apply (pow2_test2 _ _ _ H).\n  apply (pow2_test2 _ _ H).\n  apply (pow2_test2 _ _ _ H).\n  apply (pow2_test2 _ _ H).\n  apply (pow2_test2 _ _ H).\n  apply (pow2_test2 _ _ H).\n  apply (Qed.",
                    "Theorem pols_test1: forall x y: N, x < y -> (x + x < y + x).\nProof.\n  intros x y H.\n  apply (iter_eq x y).\n  apply (iter_eq x y).\n  apply (iter_eq y).\n  apply (iter_eq y x).\n  apply (iter_eq y).\n  apply (iter_eq y).\n  apply (iter_eq y).\n  apply (iter_eq y).\n  apply (iter_eq y).\n  apply (iter_eq y x).\n  apply (iter_eq y).\n  apply (iter_eq y y).\n  apply (iter_eq y y).\n  apply (iter_eq y x).\n  apply (iter_eq y y).\n  apply (iter_eq y y).\n  apply (iter_eq y y).\n  apply (iter_eq y y).\n  apply (iter_eq y y).\n  apply (iter_eq y y).\n  apply (iter_eq y y).\n  apply (iter_eq y y).\n  apply (iter_eq y y).\n  apply (iter_eq y y).\n  apply (iter_eq y y).\n  apply (iter_eq y y).\n  apply (iter_eq y y).\n  apply (iter_eq y y).\n  applyQed.",
                    "Theorem pols_test1: forall x y: N, x < y -> (x + x < y + x).\nProof.\n  intros x y H; elim H; intros y H; elim H; intros H; elim H; intros H; elim H; intros H; elim H; intros H; elim H; intros H; elim H; intros H; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; intros; elim H; introsQed.",
                    "Theorem pols_test1: forall x y: N, x < y -> (x + x < y + x).\nProof.\n  intros x y H.\n  induction x; simpl; intros; auto.\n  destruct y; simpl; intros; auto.\n  destruct y; simpl; intros; auto.\n  destruct y; simpl; auto.\n  destruct y; simpl; intros; auto.\n  destruct y; simpl; intros; auto.\n  destruct y; simpl; intros; auto.\n  destruct y; simpl; intros; auto.\n  destruct y; simpl; intros; auto.\n  destruct y; simpl; intros; auto.\n  destruct y; simpl; intros; auto.\n  destruct y; simpl; intros; auto.\n  destruct y; simpl; intros; auto.\n  destruct y; simpl; intros; auto.\n  destruct y; simpl; intros; auto.\n  destruct y; simpl; intros; auto.\n  destruct y; simpl; intros; auto.\n  destruct y; simpl; intros; auto.\n  destruct y; simpl; intros; auto.\n  destruct y; simpl; intros; auto.\n  destruct y; simpl; intros; auto.\n  destruct y; simpl; intros; auto.\n  destruct y; simpl; intros; auto.\n  destruct y; simpl; intros; auto.\n  destruct y; simpl; intros; autoQed.",
                    "Theorem pols_test1: forall x y: N, x < y -> (x + x < y + x).\nProof.\n  intros x y H. apply H.\n  apply (pow2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test22_test2_test22_test2_test2_test2_2_test2_test22_test22_test22_test2_2_test2_22_test2_test22_test22_test2_2_test22_test2_3_test22_test22_test22_test22_test22_test2_2_test2_test2_22_test2_test22_test22_test2_test2_2_test2_test2_test22_test22_test22_test2_test2_testQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/Nex.v",
                "context": "Require Import PolTac.\nRequire Import NAux.\n\nOpen Scope N_scope.\n\nTheorem pols_test1: forall x y: N,  x < y ->  (x + x < y + x).\nintros.\npols.\nauto.\nQed.\n\n",
                "context_tokens": 63,
                "proof_start_offset": 155,
                "proof_end_offset": 234,
                "proof": "Theorem pols_test2: forall x y, y < 0 -> (x + y < x).\nProof.\nintros.\npols.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem pols_test2: forall x y, y < 0 -> (x + y < x).\nintros.\nreplace (x + y) with (x + y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).Qed.",
                    "Theorem pols_test2: forall x y, y < 0 -> (x + y < x).\nintros.\nrewrite <- (pow2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_3_test2_test2_test2_2_test2_test2_2_test2_2_test2_3_test2_test2_test2_2_test2_test2_2_test2_test2_2_test2_2_test2_2_test2_test2_2_test2_test2_2_test2_test2_2_test2_test2_test2_2_test2_test2_test2_2_test2_test2_test2_2_test2_test2_test2_test2_test2_2_test2_test2_test2_test2_2_test2_test2_test2_2_test2_test2_testQed.",
                    "Theorem pols_test2: forall x y, y < 0 -> (x + y < x).\nintros.\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <-Qed.",
                    "Theorem pols_test2: forall x y, y < 0 -> (x + y < x).\nintros.\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nQed.",
                    "Theorem pols_test2: forall x y, y < 0 -> (x + y < x).\nintros.\nrewrite <- (pow2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_2_test2_test2_2_test2_test2_2_test2_2_test2_test2_2_test2_2_test2_3_test2_2_test2_test2_2_test2_test2_3_test2_3_test2_test2_2_test2_test2_2_test2_test2_2_test2_2_test2_2_test2_test2_test2_3_test2_test2_2_test2_test2_2_test2_test2_2_test2_test2_test2_test2_test2_2_test2_test2_test2_test2_test2_test2_test2_test2_Qed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/Nex.v",
                "context": "Require Import PolTac.\nRequire Import NAux.\n\nOpen Scope N_scope.\n\nTheorem pols_test1: forall x y: N,  x < y ->  (x + x < y + x).\nintros.\npols.\nauto.\nQed.\n\nTheorem pols_test2: forall x y, y < 0 ->  (x + y < x).\nintros.\npols.\nauto.\nQed.\n \n",
                "context_tokens": 101,
                "proof_start_offset": 237,
                "proof_end_offset": 357,
                "proof": "Theorem pols_test4: forall x y, x * x < y * y -> ((x + y) * (x + y) < 2 * (x * y + y * y)).\nProof.\nintros.\npols.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem pols_test4: forall x y, x * x < y * y -> ((x + y) * (x + y) < 2 * (x * y + y * y)).\nintros.\nrewrite <- (mult_comm x y).\nauto.\nQed.",
                    "Theorem pols_test4: forall x y, x * x < y * y -> ((x + y) * (x + y) < 2 * (x * y + y * y)).\nintros.\nrewrite <- (pow2s_test2l x y).\napply pows_test2l.\nQed.",
                    "Theorem pols_test4: forall x y, x * x < y * y -> ((x + y) * (x + y) < 2 * (x * y + y * y)).\nintros.\nreplace (x + y) with (y + y * x).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm x y).\nrewrite <- (mult_comm xQed.",
                    "Theorem pols_test4: forall x y, x * x < y * y -> ((x + y) * (x + y) < 2 * (x * y + y * y)).\nintros.\nrewrite <- (pows_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_Qed.",
                    "Theorem pols_test4: forall x y, x * x < y * y -> ((x + y) * (x + y) < 2 * (x * y + y * y)).\nintros.\nrewrite <- (pows_test4 x y).\nrewrite <- (pows_test4 x y).\nrewrite <- (pows_test4 x y).\nrewrite <- (pows_test4 x y).\nrewrite <- (pows_test4 x y).\nrewrite <- (pows_test4 x y).\nrewrite <- (pows_test4 x y).\nrewrite <- (pows_test4 x y).\nrewrite <- (pows_test4 x y).\nrewrite <- (pows_test4 x y).\nrewrite <- (pows_test4 x y).\nrewrite <- (pows_test4 x y).\nrewrite <- (pows_test4 x y).\nrewrite <- (pows_test4 x y).\nrewrite <- (pows_test4 x y).\nrewrite <- (pows_test4 x y).\nrewrite <- (pows_test4 x y).\nrewrite <- (pows_test4 x y).\nrewrite <- (pows_test4 x y).\nrewrite <- (pows_test5 x y).\nrewrite <- (pows_test4 x y).\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/Nex.v",
                "context": "Require Import PolTac.\nRequire Import NAux.\n\nOpen Scope N_scope.\n\nTheorem pols_test1: forall x y: N,  x < y ->  (x + x < y + x).\nintros.\npols.\nauto.\nQed.\n\nTheorem pols_test2: forall x y, y < 0 ->  (x + y < x).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test4:\n forall x y,\n x * x  < y * y ->  ((x + y) * (x + y) < 2 * (x * y + y * y)).\nintros.\npols.\nauto.\nQed.\n \n",
                "context_tokens": 162,
                "proof_start_offset": 360,
                "proof_end_offset": 482,
                "proof": "Theorem pols_test5: forall x y z, x + y * (y + z) = 2 * z -> 2 * x + y * (y + z) = (x + z) + z.\nProof.\nintros.\npols.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem pols_test5: forall x y z, x + y * (y + z) = 2 * z -> 2 * x + y * (y + z) = (x + z) + z.\nintros.\nreplace (x + y) with (x + y) by (now apply (now apply (now apply (now apply (now apply (now apply (now apply (now apply (now apply (now apply (now apply (now apply (now apply (now apply (now apply (now apply (now apply (now apply (now applynow apply (now applynow apply (now apply (now applynow apply (now applynow applynow apply (now apply (now apply (now applynow apply (now applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow_now applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow_now applynow applynow applynow applynow applynow applynow applynow_now applynow applynow applynow applynow applynow applynow applynow applynow applynow applynow applyQed.",
                    "Theorem pols_test5: forall x y z, x + y * (y + z) = 2 * z -> 2 * x + y * (y + z) = (x + z) + z.\nintros.\nrewrite (pol_c_test3 x y z).\nrewrite (pol_c_test3 x z).\nrewrite (pol_c_test3 x z).\nrewrite (pol_c_test3 x z).\nrewrite (pol_c_test3 x z).\nrewrite (pol_c_test3 x z).\nrewrite (pol_c_test4 x z).\nrewrite (pol_c_test4 x z).\nrewrite (pol_c_test4 x z).\nrewrite (pol_c_test3 x z).\nrewrite (pol_c_test4 x z).\nrewrite (pol_c_test4 x z).\nrewrite (pol_c_test4 x z).\nrewrite (pol_c_test4 x z).\nrewrite (pol_c_test4 x z).\nrewrite (pol_c_test4 x z).\nrewrite (pol_c_test4 x z).\nrewrite (pol_c_test4 x z).\nrewrite (pol_c_test4 x z).\nrewrite (pol_c_test4 x z).\nrewrite (pol_c_test4 x z).Qed.",
                    "Theorem pols_test5: forall x y z, x + y * (y + z) = 2 * z -> 2 * x + y * (y + z) = (x + z) + z.\nintros.\nrewrite <- (pows_test5 x y z).\nrewrite <- (pows_test5 x z).\nrewrite <- (pows_test6 x z).\nrewrite <- (pows_test6 x z).\nrewrite <- (pows_test6 x z).\nrewrite <- (pows_test6 x z).\nrewrite <- (pows_test6 x z).\nrewrite <- (pows_test6 x z).\nrewrite <- (pows_test6 x z).\nrewrite <- (pows_test6 x z).\nrewrite <- (pows_test6 x z).\nrewrite <- (pows_test6 x z).\nrewrite <- (pows_test6 x z).\nrewrite <- (pows_test6 x z).\nrewrite <- (pows_test6 x z).\nrewrite <- (pows_test6 x z).\nrewrite <- (pows_test6 x z).\nrewrite <- (pows_test6 x z).\nrewrite <- (pows_test6 x z).\nrewrite <- (pows_test6 x z).\nrewrite <- (pows_test6 x z).Qed.",
                    "Theorem pols_test5: forall x y z, x + y * (y + z) = 2 * z -> 2 * x + y * (y + z) = (x + z) + z.\nintros.\nrewrite <- (pows_test3 x y z).\nrewrite <- (pows_test2 x y z).\nrewrite <- (pows_test2 x y z).\nrewrite <- (pows_test2 x z).\nrewrite <- (pows_test2 x y z).\nrewrite <- (pows_test2 x y z).\nrewrite <- (pows_test2 x y z).\nrewrite <- (pows_test2 x z).\nrewrite <- (pows_test2 x z).\nrewrite <- (pows_test2 x y z).\nrewrite <- (pows_test2 x z).\nrewrite <- (pows_test2 x z).\nrewrite <- (pows_test2 x z).\nrewrite <- (pows_test2 x z).\nrewrite <- (pows_test2 x z).\nrewrite <- (pows_test2 x z).\nrewrite <- (pows_test2 x z).\nrewrite <- (pows_test2 x z).\nrewrite <- (pows_test2 x z).\nrewrite <- (pows_test2 x z).\nrewrite <- (powsQed.",
                    "Theorem pols_test5: forall x y z, x + y * (y + z) = 2 * z -> 2 * x + y * (y + z) = (x + z) + z.\nintros.\nrewrite <- (pows_test4 x y z) in *.\nrewrite <- (pows_test4 x z) in *.\nrewrite <- (pows_test4 x z) in *.\nrewrite <- (pows_test4 x z) in *.\nrewrite <- (pows_test4 x z) in *.\nrewrite <- (pows_test4 x z) in *.\nrewrite <- (pows_test4 x z) in *.\nrewrite <- (pows_test4 x z) in *.\nrewrite <- (pows_test4 x z) in *.\nrewrite <- (pows_test4 x z) in *.\nrewrite <- (pows_test4 x z) in *.\nrewrite <- (pows_test4 x z) in *.\nrewrite <- (pows_test4 x z) in *.\nrewrite <- (pows_test4 x z) in *.\nrewrite <- (pows_test4 x z) in *.\nrewrite <- (pows_test4 x z) in *.\nrewrite <- (pows_test4 x z) in *.\nrewrite <- (pows_test4 x z) in *.Qed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/Nex.v",
                "context": "Require Import PolTac.\nRequire Import NAux.\n\nOpen Scope N_scope.\n\nTheorem pols_test1: forall x y: N,  x < y ->  (x + x < y + x).\nintros.\npols.\nauto.\nQed.\n\nTheorem pols_test2: forall x y, y < 0 ->  (x + y < x).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test4:\n forall x y,\n x * x  < y * y ->  ((x + y) * (x + y) < 2 * (x * y + y * y)).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test5:\n forall x y z, x + y * (y + z) = 2 * z ->  2 * x + y * (y + z) = (x + z) + z.\nintros.\npols.\nauto.\nQed.\n\n\n",
                "context_tokens": 225,
                "proof_start_offset": 485,
                "proof_end_offset": 561,
                "proof": "Theorem polf_test1: forall x y, (1 <= y -> x <= x * y).\nProof.\nintros.\npolf.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem polf_test1: forall x y, (1 <= y -> x <= x * y).\nintros.\napply pols_test2.\nQed.",
                    "Theorem polf_test1: forall x y, (1 <= y -> x <= x * y).\nintros.\nrewrite (tech2s_test2 x y).\nrewrite (tech2s_test2 x y).\nrewrite (tech2s_test2 x y).\nrewrite (tech2s_test2 x y).\nrewrite (tech2s_test2 x y).\nrewrite (tech2s_test2 x y).\nrewrite (tech2s_test2 x y).\nrewrite (tech2s_test2 x y).\nrewrite (tech2s_test2 x y).\nrewrite (tech2s_test2 x y).\nrewrite (tech2s_test2 x y).\nrewrite (tech2s_test2 x y).\nrewrite (tech2s_test2 x y).\nrewrite (tech2s_test2 x y).\nrewrite (tech2s_test2 x y).\nrewrite (tech2s_test2 x y).\nrewrite (tech2s_test2 x y).\nrewrite (tech2s_test2 x y).\nrewrite (tech2s_test2 x y).\nrewrite (tech2s_test2 x y).\nrewrite (tech2s_test2 x y).\nQed.",
                    "Theorem polf_test1: forall x y, (1 <= y -> x <= x * y).\nintros.\nrewrite <- (pow2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_Qed.",
                    "Theorem polf_test1: forall x y, (1 <= y -> x <= x * y).\nintros.\nrewrite <- (pows_test2 x y).\nauto.\nQed.",
                    "Theorem polf_test1: forall x y, (1 <= y -> x <= x * y).\nintros.\nrewrite (pows_test2 x y).\nauto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/Nex.v",
                "context": "Require Import PolTac.\nRequire Import NAux.\n\nOpen Scope N_scope.\n\nTheorem pols_test1: forall x y: N,  x < y ->  (x + x < y + x).\nintros.\npols.\nauto.\nQed.\n\nTheorem pols_test2: forall x y, y < 0 ->  (x + y < x).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test4:\n forall x y,\n x * x  < y * y ->  ((x + y) * (x + y) < 2 * (x * y + y * y)).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test5:\n forall x y z, x + y * (y + z) = 2 * z ->  2 * x + y * (y + z) = (x + z) + z.\nintros.\npols.\nauto.\nQed.\n\n\nTheorem polf_test1: forall x y, (1 <= y -> x  <= x  * y).\nintros.\npolf.\nQed.\n\n",
                "context_tokens": 261,
                "proof_start_offset": 563,
                "proof_end_offset": 659,
                "proof": "Theorem polf_test2: forall x y, 0 < x -> x <= x * y -> 1 <= y.\nProof.\nintros.\nhyp_polf H0.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem polf_test2: forall x y, 0 < x -> x <= x * y -> 1 <= y.\nintros.\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nrewrite <- (pow2_test2 x y).\nQed.",
                    "Theorem polf_test2: forall x y, 0 < x -> x <= x * y -> 1 <= y.\nintros.\nrewrite <- (pow2_test2 _ _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x yQed.",
                    "Theorem polf_test2: forall x y, 0 < x -> x <= x * y -> 1 <= y.\nintros.\nreplace (x * y) with (x * y * y).\napply (pow2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_testQed.",
                    "Theorem polf_test2: forall x y, 0 < x -> x <= x * y -> 1 <= y.\nintros.\nrewrite <- (pow2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_Qed.",
                    "Theorem polf_test2: forall x y, 0 < x -> x <= x * y -> 1 <= y.\nintros.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x y) in H.\nrewrite <- (pow2_test2 _ x yQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/Nex.v",
                "context": "Require Import PolTac.\nRequire Import NAux.\n\nOpen Scope N_scope.\n\nTheorem pols_test1: forall x y: N,  x < y ->  (x + x < y + x).\nintros.\npols.\nauto.\nQed.\n\nTheorem pols_test2: forall x y, y < 0 ->  (x + y < x).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test4:\n forall x y,\n x * x  < y * y ->  ((x + y) * (x + y) < 2 * (x * y + y * y)).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test5:\n forall x y z, x + y * (y + z) = 2 * z ->  2 * x + y * (y + z) = (x + z) + z.\nintros.\npols.\nauto.\nQed.\n\n\nTheorem polf_test1: forall x y, (1 <= y -> x  <= x  * y).\nintros.\npolf.\nQed.\n\nTheorem polf_test2: forall x y, 0 < x -> x  <= x  * y -> 1 <= y.\nintros.\nhyp_polf H0.\nauto.\nQed.\n\n\n\n",
                "context_tokens": 307,
                "proof_start_offset": 663,
                "proof_end_offset": 781,
                "proof": "Theorem polr_test1: forall x y z, (x + z) < y -> x + y + z < 2*y.\nProof.\nintros x y z H.\npolr H.\npols.\nauto.\npols.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem polr_test1: forall x y z, (x + z) < y -> x + y + z < 2*y.\nintros.\napply pol_test2.\nauto.\nQed.",
                    "Theorem polr_test1: forall x y z, (x + z) < y -> x + y + z < 2*y.\nintros.\nunfold pol.\napply pol_test2.\nauto.\nQed.",
                    "Theorem polr_test1: forall x y z, (x + z) < y -> x + y + z < 2*y.\nintros.\napply pol_test2; auto.\nQed.",
                    "Theorem polr_test1: forall x y z, (x + z) < y -> x + y + z < 2*y.\nintros.\nrewrite <- (mult_comm x y).\nauto.\nQed.",
                    "Theorem polr_test1: forall x y z, (x + z) < y -> x + y + z < 2*y.\nintros.\nrewrite <- (pow2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_Qed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NSignTac.v",
                "context": "(* Ugly tacty to resolve sign condition for N *)\nRequire Import NatSignTac.\nRequire Import NAux.\nRequire Import NArith.\nRequire Import List.\nRequire Export NGroundTac.\n\nOpen Scope N_scope.\n\nTheorem Nmult_lt_compat_l: forall n m p, n < m -> 0 < p -> p * n < p * m.\nintros n m p H1 H2; apply Nlt_lt; repeat rewrite N2Nat.inj_mul.\napply mult_lt_compat_l; apply lt_Nlt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nmult_le_compat_l: forall n m p, n <= m -> p * n <= p * m.\nintros n m p H1; apply Nle_le; repeat rewrite N2Nat.inj_mul.\napply Mult.mult_le_compat_l; apply le_Nle; repeat rewrite N2Nat.id; auto.\nQed.\n\n",
                "context_tokens": 223,
                "proof_start_offset": 611,
                "proof_end_offset": 812,
                "proof": "Theorem Nmult_ge_compat_l: forall n m p, n >= m -> p * n >= p * m.\nProof.\nintros n m p H1; apply Nge_ge; repeat rewrite N2Nat.inj_mul.\napply mult_ge_compat_l; apply ge_Nge; repeat rewrite N2Nat.id; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Nmult_ge_compat_l: forall n m p, n >= m -> p * n >= p * m.\nintros n m p H1; apply Nle_trans with n; repeat rewrite N2Nat.id; auto.\nQed.",
                    "Theorem Nmult_ge_compat_l: forall n m p, n >= m -> p * n >= p * m.\nintros n m p H1; apply Nle_trans; repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\nQed.",
                    "Theorem Nmult_ge_compat_l: forall n m p, n >= m -> p * n >= p * m.\nintros n m p H1; apply Nle_trans with (n := n); repeat rewrite N2Nat.inj_mul.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.injQed.",
                    "Theorem Nmult_ge_compat_l: forall n m p, n >= m -> p * n >= p * m.\nintros n m p H1; apply Nle_trans; repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\nQed.",
                    "Theorem Nmult_ge_compat_l: forall n m p, n >= m -> p * n >= p * m.\nintros n m p H1; apply Nle_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.injQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NSignTac.v",
                "context": "(* Ugly tacty to resolve sign condition for N *)\nRequire Import NatSignTac.\nRequire Import NAux.\nRequire Import NArith.\nRequire Import List.\nRequire Export NGroundTac.\n\nOpen Scope N_scope.\n\nTheorem Nmult_lt_compat_l: forall n m p, n < m -> 0 < p -> p * n < p * m.\nintros n m p H1 H2; apply Nlt_lt; repeat rewrite N2Nat.inj_mul.\napply mult_lt_compat_l; apply lt_Nlt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nmult_le_compat_l: forall n m p, n <= m -> p * n <= p * m.\nintros n m p H1; apply Nle_le; repeat rewrite N2Nat.inj_mul.\napply Mult.mult_le_compat_l; apply le_Nle; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nmult_ge_compat_l: forall n m p, n >= m -> p * n >= p * m.\nintros n m p H1; apply Nge_ge; repeat rewrite N2Nat.inj_mul.\napply mult_ge_compat_l; apply ge_Nge; repeat rewrite N2Nat.id; auto.\nQed.\n\n",
                "context_tokens": 303,
                "proof_start_offset": 814,
                "proof_end_offset": 1025,
                "proof": "Theorem Nmult_gt_compat_l: forall n m p, n > m -> p > 0 -> p * n > p * m.\nProof.\nintros n m p H1 H2; apply Ngt_gt; repeat rewrite N2Nat.inj_mul.\napply mult_gt_compat_l; apply gt_Ngt; repeat rewrite N2Nat.id; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Nmult_gt_compat_l: forall n m p, n > m -> p > 0 -> p * n > p * m.\nintros n m p H1; apply Nle_trans; repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\nQed.",
                    "Theorem Nmult_gt_compat_l: forall n m p, n > m -> p > 0 -> p * n > p * m.\nintros n m p H1; apply Nle_gt_compat; repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mulQed.",
                    "Theorem Nmult_gt_compat_l: forall n m p, n > m -> p > 0 -> p * n > p * m.\nintros n m p H1; apply Nle_gt; repeat rewrite N2Nat.inj_mul.\napply Nat.inj_lt_compat; auto.\nQed.",
                    "Theorem Nmult_gt_compat_l: forall n m p, n > m -> p > 0 -> p * n > p * m.\nintros n m p H1; apply Nle_le_compat; repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (n := m); repeat rewrite N2Nat.inj_mulQed.",
                    "Theorem Nmult_gt_compat_l: forall n m p, n > m -> p > 0 -> p * n > p * m.\nintros n m p H1; apply Nle_le_compat; repeat rewrite N2Nat.id; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NSignTac.v",
                "context": "(* Ugly tacty to resolve sign condition for N *)\nRequire Import NatSignTac.\nRequire Import NAux.\nRequire Import NArith.\nRequire Import List.\nRequire Export NGroundTac.\n\nOpen Scope N_scope.\n\nTheorem Nmult_lt_compat_l: forall n m p, n < m -> 0 < p -> p * n < p * m.\nintros n m p H1 H2; apply Nlt_lt; repeat rewrite N2Nat.inj_mul.\napply mult_lt_compat_l; apply lt_Nlt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nmult_le_compat_l: forall n m p, n <= m -> p * n <= p * m.\nintros n m p H1; apply Nle_le; repeat rewrite N2Nat.inj_mul.\napply Mult.mult_le_compat_l; apply le_Nle; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nmult_ge_compat_l: forall n m p, n >= m -> p * n >= p * m.\nintros n m p H1; apply Nge_ge; repeat rewrite N2Nat.inj_mul.\napply mult_ge_compat_l; apply ge_Nge; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nmult_gt_compat_l: forall n m p, n > m -> p > 0 -> p * n > p * m.\nintros n m p H1 H2; apply Ngt_gt; repeat rewrite N2Nat.inj_mul.\napply mult_gt_compat_l; apply gt_Ngt; repeat rewrite N2Nat.id; auto.\nQed.\n\n",
                "context_tokens": 389,
                "proof_start_offset": 1027,
                "proof_end_offset": 1270,
                "proof": "Theorem Nmult_lt_compat_rev_l1: forall n m p, p * n < p * m -> 0 < p.\nProof.\nintros n m p H1; apply Nlt_lt; apply mult_lt_compat_rev_l1 with (nat_of_N n) (nat_of_N m).\nrepeat rewrite <- N2Nat.inj_mul; apply lt_Nlt; repeat rewrite N2Nat.id; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Nmult_lt_compat_rev_l1: forall n m p, p * n < p * m -> 0 < p.\nintros n m p H1 H2; apply Nle_compat; repeat rewrite N2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_mul.Qed.",
                    "Theorem Nmult_lt_compat_rev_l1: forall n m p, p * n < p * m -> 0 < p.\nintros n m p H1; apply Nle_mono; repeat rewrite N2Nat.inj_mul.\napply le_trans with (2 := N2Nat.inj_mul.\napply le_trans with (2 := N2Nat.inj_mul.\napply le_trans with (2 := N2Nat.inj_mul.\napply le_trans with (2 := N2Nat.inj_mul.\napply le_trans with (2 := N2Nat.inj_mul.\napply le_trans with (2 := N2Nat.inj_mul.\napply le_trans with (2 := N2Nat.inj_mul.\napply le_trans with (2 := N2Nat.inj_mul.\napply le_trans with (2 := N2Nat.inj_mul.\napply le_trans with (2 := N2Nat.inj_mul.\napply le_trans with (2 := N2Nat.inj_mul.\napply le_trans with (2 := N2Nat.inj_mul.\napply le_trans with (2 := N2Nat.inj_mul.\napply le_trans with (2 := N2Qed.",
                    "Theorem Nmult_lt_compat_rev_l1: forall n m p, p * n < p * m -> 0 < p.\nintros n m p H1; apply Nle_trans; repeat rewrite N2Nat.inj_mul.\napply le_trans with (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (m := m) (mQed.",
                    "Theorem Nmult_lt_compat_rev_l1: forall n m p, p * n < p * m -> 0 < p.\nintros n m p H1; apply Nle_trans with (n := m) (n := m).\nintros n m p H1; apply Nle_trans with (n := m) (n := m).\nintros n m p H1; apply Nle_trans with (n := m).\nintros n m p H1; apply Nle_trans with (n := m).\nintros n m p H1; apply Nle_trans with (n := m).\nintros n m p H1; apply Nle_trans with (n := m).\nintros n m p H1 H2; apply Nle_trans with (n := m).\nintros n m p H1 H2; apply Nle_trans with (n := m).\nintros n m p H1; apply Nle_trans with (n := m).\nintros n m p H1 H2; apply Nle_trans with (n := m).\nintros n m p H1; apply Nle_trans with (n := m).\nintros n m p H1 H2; apply Nle_trans with (n := m).\nintros n m p H1 H2;Qed.",
                    "Theorem Nmult_lt_compat_rev_l1: forall n m p, p * n < p * m -> 0 < p.\nintros n m p H1; apply Nle_compat; repeat rewrite N2Nat.inj_mul.\napply Nat2Nat.inj_mul.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napply Nat2Nat.inj_add.\napplyQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NSignTac.v",
                "context": "(* Ugly tacty to resolve sign condition for N *)\nRequire Import NatSignTac.\nRequire Import NAux.\nRequire Import NArith.\nRequire Import List.\nRequire Export NGroundTac.\n\nOpen Scope N_scope.\n\nTheorem Nmult_lt_compat_l: forall n m p, n < m -> 0 < p -> p * n < p * m.\nintros n m p H1 H2; apply Nlt_lt; repeat rewrite N2Nat.inj_mul.\napply mult_lt_compat_l; apply lt_Nlt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nmult_le_compat_l: forall n m p, n <= m -> p * n <= p * m.\nintros n m p H1; apply Nle_le; repeat rewrite N2Nat.inj_mul.\napply Mult.mult_le_compat_l; apply le_Nle; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nmult_ge_compat_l: forall n m p, n >= m -> p * n >= p * m.\nintros n m p H1; apply Nge_ge; repeat rewrite N2Nat.inj_mul.\napply mult_ge_compat_l; apply ge_Nge; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nmult_gt_compat_l: forall n m p, n > m -> p > 0 -> p * n > p * m.\nintros n m p H1 H2; apply Ngt_gt; repeat rewrite N2Nat.inj_mul.\napply mult_gt_compat_l; apply gt_Ngt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nmult_lt_compat_rev_l1: forall n m p, p * n < p * m -> 0 < p.\nintros n m p H1; apply Nlt_lt; apply mult_lt_compat_rev_l1 with (nat_of_N n) (nat_of_N m).\nrepeat rewrite <- N2Nat.inj_mul; apply lt_Nlt; repeat rewrite N2Nat.id; auto.\nQed.\n\n",
                "context_tokens": 493,
                "proof_start_offset": 1272,
                "proof_end_offset": 1502,
                "proof": "Theorem Nmult_lt_compat_rev_l2: forall n m p, p * n < p * m -> n < m.\nProof.\nintros n m p H1; apply Nlt_lt; apply mult_lt_compat_rev_l2 with (nat_of_N p).\nrepeat rewrite <- N2Nat.inj_mul; apply lt_Nlt; repeat rewrite N2Nat.id; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Nmult_lt_compat_rev_l2: forall n m p, p * n < p * m -> n < m.\nintros n m p H1 H2; apply Nle_le; repeat rewrite N2Nat.inj_mul.\napply plus_le_compat_l; apply lt_le_compat; apply lt_N_le; repeat rewrite N2Nat.id; auto.\nQed.",
                    "Theorem Nmult_lt_compat_rev_l2: forall n m p, p * n < p * m -> n < m.\nintros n m p H1 H2; apply Nle_compat; repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m);Qed.",
                    "Theorem Nmult_lt_compat_rev_l2: forall n m p, p * n < p * m -> n < m.\nintros n m p H1; apply Nle_gt; repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewriteQed.",
                    "Theorem Nmult_lt_compat_rev_l2: forall n m p, p * n < p * m -> n < m.\nintros n m p H1 H2; apply Nlt_compat; repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m);Qed.",
                    "Theorem Nmult_lt_compat_rev_l2: forall n m p, p * n < p * m -> n < m.\nintros n m p H1; apply Nle_lt_compat; repeat rewrite N2Nat.inj_mul.\napply plus_le_compat_l; repeat rewrite N2Nat.inj_mul.\napply plus_le_compat_l; repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_mul.\napply le_trans with (nat_of_N m); repeat rewrite N2Nat.inj_Qed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NSignTac.v",
                "context": " p * n > p * m -> n > m.\nintros n m p H1; apply Ngt_gt; apply mult_gt_compat_rev_l2 with (nat_of_N p).\nrepeat rewrite <- N2Nat.inj_mul; apply gt_Ngt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nmult_le_compat_rev_l: forall n m p, p * n <= p * m -> 0 < p -> n <= m.\nintros n m p H1 H2; apply Nle_le; apply mult_le_compat_rev_l with (nat_of_N p). \nrepeat rewrite <- N2Nat.inj_mul; apply le_Nle; repeat rewrite N2Nat.id; auto.\napply lt_Nlt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nmult_ge_compat_rev_l: forall n m p, p * n >= p * m -> 0 < p -> n >= m.\nintros n m p H1 H2; apply Nge_ge; apply mult_ge_compat_rev_l with (nat_of_N p). \nrepeat rewrite <- N2Nat.inj_mul; apply ge_Nge; repeat rewrite N2Nat.id; auto.\napply lt_Nlt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nlt_mult_0: forall a b, 0 < a -> 0 < b -> 0 < a * b.\nintros a b H1 H2; apply Nlt_lt; rewrite N2Nat.inj_mul; apply lt_mult_0; apply lt_Nlt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Ngt_mult_0: forall a b, a > 0 -> b > 0 -> a * b > 0.\nintros a b H1 H2; apply Ngt_gt; rewrite N2Nat.inj_mul; apply gt_mult_0; apply gt_Ngt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nlt_mult_rev_0_l: forall a b, 0 < a * b ->  0 < a.\nintros a b H1; apply Nlt_lt; apply lt_mult_rev_0_l with (nat_of_N b). \nrewrite <- N2Nat.inj_mul; apply lt_Nlt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nlt_mult_rev_0_r: forall a b, 0 < a * b ->  0 < b.\nintros a b H1; apply Nlt_lt; apply lt_mult_rev_0_r with (nat_of_N a). \nrewrite <- N2Nat.inj_mul; apply lt_Nlt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Ngt_mult_rev_0_l: forall a b, a * b > 0 ->  a > 0.\nintros a b H1; apply Ngt_gt; apply gt_mult_rev_0_l with (nat_of_N b). \nrewrite <- N2Nat.inj_mul; apply gt_Ngt; repeat rewrite N2Nat.id; auto.\nQed.\n\n",
                "context_tokens": 741,
                "proof_start_offset": 3553,
                "proof_end_offset": 3760,
                "proof": "Theorem Ngt_mult_rev_0_r: forall a b, a * b > 0 -> b > 0 .\nProof.\nintros a b H1; apply Ngt_gt; apply gt_mult_rev_0_r with (nat_of_N a).\nrewrite <- N2Nat.inj_mul; apply gt_Ngt; repeat rewrite N2Nat.id; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Ngt_mult_rev_0_r: forall a b, a * b > 0 -> b > 0 .\nintros a b H1; apply Ngt_gt; apply lt_le_trans with (nat_of_N b). \nrepeat rewrite N2Nat.inj_mul; apply lt_le_compat_l.  apply lt_le_trans with (nat_of_N b).  apply lt_le_trans with (nat_of_N b).  apply lt_le_le_compat_l.  apply lt_le_n_Sm; repeat rewrite N2Nat.id; auto.\nQed.",
                    "Theorem Ngt_mult_rev_0_r: forall a b, a * b > 0 -> b > 0 .\nintros a b H1; apply Nlt_gt; apply gt_n_rev; repeat rewrite N2Nat.id; auto.\nQed.",
                    "Theorem Ngt_mult_rev_0_r: forall a b, a * b > 0 -> b > 0 .\nintros a b H1; apply Nlt_le; apply lt_le_compat; repeat rewrite N2Nat.id; auto.\nQed.",
                    "Theorem Ngt_mult_rev_0_r: forall a b, a * b > 0 -> b > 0 .\nintros a b H1; apply Nge_mult_compat. \napply lt_le_reg_l with (nat_of_N b). \nrewrite <- N2Nat.inj_mul; apply gt_le_reg_l with (nat_of_N b). \nrewrite <- N2Nat.inj_mul; apply gt_le_mono_l with (nat_of_N b). \nrewrite <- N2Nat.inj_mul; apply gt_le_mono_l with (nat_of_N b).  rewrite N2Nat.inj_mul; apply gt_le_mono_l with (nat_of_N b).  apply gt_le_mono_l with (nat_of_N b).  apply gt_le_mono_l with (nat_of_N b).  apply gt_le_mono_l with (nat_of_N b).  apply gt_le_mono_l with (nat_of_N b).  apply gt_le_mono_r with (nat_of_N b).  apply gt_le_mono_r with (nat_of_N b).Qed.",
                    "Theorem Ngt_mult_rev_0_r: forall a b, a * b > 0 -> b > 0 .\nintros a b H1; apply Ngt_mult_compat; apply gt_n_0_l.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NSignTac.v",
                "context": "l: forall n m p, p * n <= p * m -> 0 < p -> n <= m.\nintros n m p H1 H2; apply Nle_le; apply mult_le_compat_rev_l with (nat_of_N p). \nrepeat rewrite <- N2Nat.inj_mul; apply le_Nle; repeat rewrite N2Nat.id; auto.\napply lt_Nlt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nmult_ge_compat_rev_l: forall n m p, p * n >= p * m -> 0 < p -> n >= m.\nintros n m p H1 H2; apply Nge_ge; apply mult_ge_compat_rev_l with (nat_of_N p). \nrepeat rewrite <- N2Nat.inj_mul; apply ge_Nge; repeat rewrite N2Nat.id; auto.\napply lt_Nlt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nlt_mult_0: forall a b, 0 < a -> 0 < b -> 0 < a * b.\nintros a b H1 H2; apply Nlt_lt; rewrite N2Nat.inj_mul; apply lt_mult_0; apply lt_Nlt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Ngt_mult_0: forall a b, a > 0 -> b > 0 -> a * b > 0.\nintros a b H1 H2; apply Ngt_gt; rewrite N2Nat.inj_mul; apply gt_mult_0; apply gt_Ngt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nlt_mult_rev_0_l: forall a b, 0 < a * b ->  0 < a.\nintros a b H1; apply Nlt_lt; apply lt_mult_rev_0_l with (nat_of_N b). \nrewrite <- N2Nat.inj_mul; apply lt_Nlt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nlt_mult_rev_0_r: forall a b, 0 < a * b ->  0 < b.\nintros a b H1; apply Nlt_lt; apply lt_mult_rev_0_r with (nat_of_N a). \nrewrite <- N2Nat.inj_mul; apply lt_Nlt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Ngt_mult_rev_0_l: forall a b, a * b > 0 ->  a > 0.\nintros a b H1; apply Ngt_gt; apply gt_mult_rev_0_l with (nat_of_N b). \nrewrite <- N2Nat.inj_mul; apply gt_Ngt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Ngt_mult_rev_0_r: forall a b, a * b > 0  ->  b > 0.\nintros a b H1; apply Ngt_gt; apply gt_mult_rev_0_r with (nat_of_N a). \nrewrite <- N2Nat.inj_mul; apply gt_Ngt; repeat rewrite N2Nat.id; auto.\nQed.\n\n",
                "context_tokens": 746,
                "proof_start_offset": 3762,
                "proof_end_offset": 3929,
                "proof": "Theorem Nle_0_eq_0: forall n, n <= 0 -> n = 0.\nProof.\nintros n H1; rewrite <- (N2Nat.id n).\nrewrite (le_0_eq_0 (nat_of_N n)); auto.\napply le_Nle; rewrite N2Nat.id; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Nle_0_eq_0: forall n, n <= 0 -> n = 0.\nintros n; apply Nle_gt; apply lt_le; apply lt_n_0_l.\nQed.",
                    "Theorem Nle_0_eq_0: forall n, n <= 0 -> n = 0.\nintros n; apply Nle_gt_0; apply gt_n_0_eq; apply gt_0_r; auto.\nQed.",
                    "Theorem Nle_0_eq_0: forall n, n <= 0 -> n = 0.\nintros n; apply Nle_gt; apply lt_n_0_l with (nat_of_N b). \nrewrite <- N2Nat.inj_mul; apply le_n_0_l with (nat_of_N b). \nrewrite <- N2Nat.inj_mul; apply le_n_n_gt; auto.\nQed.",
                    "Theorem Nle_0_eq_0: forall n, n <= 0 -> n = 0.\nintros n; apply Nle_gt; apply lt_0_l with (nat_of_N b). \napply Nle_gt; apply gt_0_l with (nat_of_N b). \napply Nle_gt; apply lt_0_l with (nat_of_N b).  apply Nle_gt; apply lt_0_l with (nat_of_N b).  apply Nle_gt; apply lt_le_compat; repeat rewrite N2Nat.id; auto.\nQed.",
                    "Theorem Nle_0_eq_0: forall n, n <= 0 -> n = 0.\nintros n; apply Nle_gt; apply lt_le_0_l. \nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/NSignTac.v",
                "context": " rewrite N2Nat.id; auto.\napply lt_Nlt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nmult_ge_compat_rev_l: forall n m p, p * n >= p * m -> 0 < p -> n >= m.\nintros n m p H1 H2; apply Nge_ge; apply mult_ge_compat_rev_l with (nat_of_N p). \nrepeat rewrite <- N2Nat.inj_mul; apply ge_Nge; repeat rewrite N2Nat.id; auto.\napply lt_Nlt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nlt_mult_0: forall a b, 0 < a -> 0 < b -> 0 < a * b.\nintros a b H1 H2; apply Nlt_lt; rewrite N2Nat.inj_mul; apply lt_mult_0; apply lt_Nlt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Ngt_mult_0: forall a b, a > 0 -> b > 0 -> a * b > 0.\nintros a b H1 H2; apply Ngt_gt; rewrite N2Nat.inj_mul; apply gt_mult_0; apply gt_Ngt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nlt_mult_rev_0_l: forall a b, 0 < a * b ->  0 < a.\nintros a b H1; apply Nlt_lt; apply lt_mult_rev_0_l with (nat_of_N b). \nrewrite <- N2Nat.inj_mul; apply lt_Nlt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nlt_mult_rev_0_r: forall a b, 0 < a * b ->  0 < b.\nintros a b H1; apply Nlt_lt; apply lt_mult_rev_0_r with (nat_of_N a). \nrewrite <- N2Nat.inj_mul; apply lt_Nlt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Ngt_mult_rev_0_l: forall a b, a * b > 0 ->  a > 0.\nintros a b H1; apply Ngt_gt; apply gt_mult_rev_0_l with (nat_of_N b). \nrewrite <- N2Nat.inj_mul; apply gt_Ngt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Ngt_mult_rev_0_r: forall a b, a * b > 0  ->  b > 0.\nintros a b H1; apply Ngt_gt; apply gt_mult_rev_0_r with (nat_of_N a). \nrewrite <- N2Nat.inj_mul; apply gt_Ngt; repeat rewrite N2Nat.id; auto.\nQed.\n\nTheorem Nle_0_eq_0: forall n, n <= 0 -> n = 0.\nintros n H1; rewrite <- (N2Nat.id n).\nrewrite (le_0_eq_0 (nat_of_N n)); auto.\napply le_Nle; rewrite N2Nat.id; auto.\nQed.\n\n",
                "context_tokens": 746,
                "proof_start_offset": 3931,
                "proof_end_offset": 4128,
                "proof": "Theorem Nge_0_eq_0: forall n, 0 >= n -> n = 0.\nProof.\nintros n H1; rewrite <- (N2Nat.id n).\nrewrite (le_0_eq_0 (nat_of_N n)); auto.\nchange (0 >= nat_of_N n)%nat.\napply ge_Nge; rewrite N2Nat.id; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Nge_0_eq_0: forall n, 0 >= n -> n = 0.\nintros n H1; apply Nge_0_eq_0_l.\nQed.",
                    "Theorem Nge_0_eq_0: forall n, 0 >= n -> n = 0.\nintros n H1; apply Nge_0; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_0_eq; apply Nge_Qed.",
                    "Theorem Nge_0_eq_0: forall n, 0 >= n -> n = 0.\nintros n H1; apply Nge_0_eq_0.\napply Nge_0_eq_0_l with (nat_of_N b). \nrewrite <- N2Nat.inj_mul; apply le_antisym; repeat rewrite N2Nat.id; auto.\nQed.",
                    "Theorem Nge_0_eq_0: forall n, 0 >= n -> n = 0.\nintros n H1; rewrite <- (N2Nat.id n); auto.\nQed.",
                    "Theorem Nge_0_eq_0: forall n, 0 >= n -> n = 0.\nintros n H; rewrite <- (N2Nat.id n); auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/PolAux.v",
                "context": " simplify x * y? x * z where? is < > <= >= *)\n\nTheorem Rmult_le_compat_l:\n  forall n m p : R, (m <= n)%R -> (0 <= p)%R -> (p * m <= p * n)%R.\nauto with real.\nQed.\n\nTheorem Rmult_le_neg_compat_l:\n  forall n m p : R, (m <= n)%R -> (p <= 0)%R -> (p * n <= p * m)%R.\nintros n m p H1 H2; replace (p * n)%R with (-(-p * n))%R; auto with real; try ring.\nreplace (p * m)%R with (-(-p * m))%R; auto with real; try ring.\nQed.\n\nTheorem Ropp_lt: forall n m, (m < n -> -n < -m)%R.\nauto with real.\nQed.\n\nTheorem Rmult_lt_neg_compat_l:\n  forall n m p : R, (m < n)%R -> (p < 0)%R -> (p * n < p * m)%R.\nintros n m p H1 H2; replace (p * n)%R with (-(-p * n))%R; auto with real; try ring.\nreplace (p * m)%R with (-(-p * m))%R; auto with real; try ring.\nQed.\n\nTheorem Ropp_ge: forall n m, (m >= n -> -n >= -m)%R.\nauto with real.\nQed.\n\nTheorem Rmult_ge_compat_l:\n  forall n m p : R, (m >= n)%R -> (p >= 0)%R -> (p * m >= p * n)%R.\nintros n m p H H1; apply Rle_ge; auto with real.\nQed.\n\nTheorem Rmult_ge_neg_compat_l:\n  forall n m p : R, (m >= n)%R -> (0 >= p)%R -> (p * n >= p * m)%R.\nintros n m p H1 H2; replace (p * n)%R with (-(-p * n))%R; auto with real; try ring.\nreplace (p * m)%R with (-(-p * m))%R; auto with real;try ring.\nQed.\n\nTheorem Ropp_gt: forall n m, (m > n -> -n > -m)%R.\nauto with real.\nQed.\n\nTheorem Rmult_gt_compat_l:\n  forall n m p : R, (n > m)%R -> (p > 0)%R -> (p * n > p * m)%R.\nunfold Rgt; auto with real.\nQed.\n\n\nTheorem Rmult_gt_neg_compat_l:\n  forall n m p : R, (m > n)%R -> (0 > p)%R -> (p * n > p * m)%R.\nintros n m p H1 H2; replace (p * n)%R with (-(-p * n))%R; auto with real; try ring.\nreplace (p * m)%R with (-(-p * m))%R; auto with real; try ring.\nQed.\n\n(* Theorem to simplify a hyp x * y? x * z where? is < > <= >= *)\n\n\n",
                "context_tokens": 724,
                "proof_start_offset": 30052,
                "proof_end_offset": 30304,
                "proof": "Theorem Rmult_le_compat_l_rev: forall n m p : R, (0 < p)%R -> (p * n <= p * m)%R -> (n <= m)%R.\nProof.\nintros n m p H H1; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n <= p * m)%R; auto with real.\napply Rlt_not_le; apply Rmult_lt_compat_l; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Rmult_le_compat_l_rev: forall n m p : R, (0 < p)%R -> (p * n <= p * m)%R -> (n <= m)%R.\nintros n m p H1 H2; replace (p * m)%R with (p * n)%R; auto with real.\nrewrite Rmult_assoc; apply Rinv_0_lt_compat; auto with real.\nQed.",
                    "Theorem Rmult_le_compat_l_rev: forall n m p : R, (0 < p)%R -> (p * n <= p * m)%R -> (n <= m)%R.\nintros n m p H1 H2; replace (p * m)%R with (p * m)%R; auto with real; try ring.\nreplace (p * m)%R with (- (p * m)%R; auto with real; try ring.\nreplace (p * m)%R with (- p)%R; auto with real; try ring.\nreplace (p * m)%R with (- p)%R; auto with real; try ring.\nreplace (p * m)%R with (- p)%R; auto with real; try ring.\nreplace (p * m)%R with (- p)%R; auto with real; try ring.\nreplace (p * m)%R with (- p)%R; auto with real; try ring.\nreplace (p * m)%R with (- p)%R; auto with real; try ring.\nreplace (p * m)%R with (- p)%R; auto with real; try ring.\nreplace (p * m)%R with (- p)%R; auto with real; try ring.\nreplace (p * m)%R with (- p)%R; auto with real; try ring.\nreplace (p * m)%R with (- pQed.",
                    "Theorem Rmult_le_compat_l_rev: forall n m p : R, (0 < p)%R -> (p * n <= p * m)%R -> (n <= m)%R.\nintros n m p H1 H2; replace (p * m)%R with (- p * m)%R; auto with real.\nQed.",
                    "Theorem Rmult_le_compat_l_rev: forall n m p : R, (0 < p)%R -> (p * n <= p * m)%R -> (n <= m)%R.\nintros n m p H1 H2; replace (p * n)%R with (- p)%R; auto with real; try ring.\nreplace (p * m)%R with (- p)%R; auto with real; try ring.\nreplace (p * m)%R with (- p)%R; auto with real; try ring.\nreplace (p * m)%R with (- p)%R; auto with real; try ring.\nreplace (p * m)%R with (- p)%R; auto with real; try ring.\nreplace (p * m)%R with (- p)%R; auto with real; try ring.\nreplace (p * m)%R with (- p)%R; auto with real; try ring.\nreplace (p * m)%R with (- p)%R; auto with real; try ring.\nreplace (p * m)%R with (- p)%R; auto with real; try ring.\nreplace (p * m)%R with (- p)%R; auto with real; try ring.\nreplace (p * m)%R with (- p)%R; auto with real; try ring.\nreplace (p * m)%R with (- p)%R; auto withQed.",
                    "Theorem Rmult_le_compat_l_rev: forall n m p : R, (0 < p)%R -> (p * n <= p * m)%R -> (n <= m)%R.\nintros n m p H1 H2; replace (p * m)%R with (p * n)%R; auto with real.\nreplace (p * m)%R with (p * m)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real; try ring.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real; try ring.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (Qed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/PolAux.v",
                "context": "R.\nintros n m p H1 H2; replace (p * n)%R with (-(-p * n))%R; auto with real; try ring.\nreplace (p * m)%R with (-(-p * m))%R; auto with real; try ring.\nQed.\n\nTheorem Ropp_lt: forall n m, (m < n -> -n < -m)%R.\nauto with real.\nQed.\n\nTheorem Rmult_lt_neg_compat_l:\n  forall n m p : R, (m < n)%R -> (p < 0)%R -> (p * n < p * m)%R.\nintros n m p H1 H2; replace (p * n)%R with (-(-p * n))%R; auto with real; try ring.\nreplace (p * m)%R with (-(-p * m))%R; auto with real; try ring.\nQed.\n\nTheorem Ropp_ge: forall n m, (m >= n -> -n >= -m)%R.\nauto with real.\nQed.\n\nTheorem Rmult_ge_compat_l:\n  forall n m p : R, (m >= n)%R -> (p >= 0)%R -> (p * m >= p * n)%R.\nintros n m p H H1; apply Rle_ge; auto with real.\nQed.\n\nTheorem Rmult_ge_neg_compat_l:\n  forall n m p : R, (m >= n)%R -> (0 >= p)%R -> (p * n >= p * m)%R.\nintros n m p H1 H2; replace (p * n)%R with (-(-p * n))%R; auto with real; try ring.\nreplace (p * m)%R with (-(-p * m))%R; auto with real;try ring.\nQed.\n\nTheorem Ropp_gt: forall n m, (m > n -> -n > -m)%R.\nauto with real.\nQed.\n\nTheorem Rmult_gt_compat_l:\n  forall n m p : R, (n > m)%R -> (p > 0)%R -> (p * n > p * m)%R.\nunfold Rgt; auto with real.\nQed.\n\n\nTheorem Rmult_gt_neg_compat_l:\n  forall n m p : R, (m > n)%R -> (0 > p)%R -> (p * n > p * m)%R.\nintros n m p H1 H2; replace (p * n)%R with (-(-p * n))%R; auto with real; try ring.\nreplace (p * m)%R with (-(-p * m))%R; auto with real; try ring.\nQed.\n\n(* Theorem to simplify a hyp x * y? x * z where? is < > <= >= *)\n\n\nTheorem Rmult_le_compat_l_rev:\n  forall n m p : R, (0 < p)%R -> (p * n <= p * m)%R -> (n <= m)%R.\nintros n m p H H1; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n <= p * m)%R; auto with real.\napply Rlt_not_le; apply Rmult_lt_compat_l; auto.\nQed.\n\n",
                "context_tokens": 722,
                "proof_start_offset": 30306,
                "proof_end_offset": 30566,
                "proof": "Theorem Rmult_le_neg_compat_l_rev: forall n m p : R, (p < 0)%R -> (p * n <= p * m)%R -> (m <= n)%R.\nProof.\nintros n m p H H1; case (Rle_or_lt m n); auto; intros H2.\nabsurd (p * n <= p * m)%R; auto with real.\napply Rlt_not_le; apply Rmult_lt_neg_compat_l; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Rmult_le_neg_compat_l_rev: forall n m p : R, (p < 0)%R -> (p * n <= p * m)%R -> (m <= n)%R.\nintros n m p H1 H2; case (Rle_or_lt n m p); auto.\napply Rmult_lt_compat_l; auto.\napply Rmult_lt_compat_l; auto with real.\nQed.",
                    "Theorem Rmult_le_neg_compat_l_rev: forall n m p : R, (p < 0)%R -> (p * n <= p * m)%R -> (m <= n)%R.\nintros n m p H1; case (Rle_or_lt n m p); auto with real.\nQed.",
                    "Theorem Rmult_le_neg_compat_l_rev: forall n m p : R, (p < 0)%R -> (p * n <= p * m)%R -> (m <= n)%R.\nintros n m p H1; case (Rle_or_lt n m p); auto with real.\nQed.",
                    "Theorem Rmult_le_neg_compat_l_rev: forall n m p : R, (p < 0)%R -> (p * n <= p * m)%R -> (m <= n)%R.\nintros n m p H1; case (Rle_or_lt n m p); auto.\nQed.",
                    "Theorem Rmult_le_neg_compat_l_rev: forall n m p : R, (p < 0)%R -> (p * n <= p * m)%R -> (m <= n)%R.\nintros n m p H1; case (Rle_or_lt n m p); auto; try ring.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto withQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/PolAux.v",
                "context": ", (m < n)%R -> (p < 0)%R -> (p * n < p * m)%R.\nintros n m p H1 H2; replace (p * n)%R with (-(-p * n))%R; auto with real; try ring.\nreplace (p * m)%R with (-(-p * m))%R; auto with real; try ring.\nQed.\n\nTheorem Ropp_ge: forall n m, (m >= n -> -n >= -m)%R.\nauto with real.\nQed.\n\nTheorem Rmult_ge_compat_l:\n  forall n m p : R, (m >= n)%R -> (p >= 0)%R -> (p * m >= p * n)%R.\nintros n m p H H1; apply Rle_ge; auto with real.\nQed.\n\nTheorem Rmult_ge_neg_compat_l:\n  forall n m p : R, (m >= n)%R -> (0 >= p)%R -> (p * n >= p * m)%R.\nintros n m p H1 H2; replace (p * n)%R with (-(-p * n))%R; auto with real; try ring.\nreplace (p * m)%R with (-(-p * m))%R; auto with real;try ring.\nQed.\n\nTheorem Ropp_gt: forall n m, (m > n -> -n > -m)%R.\nauto with real.\nQed.\n\nTheorem Rmult_gt_compat_l:\n  forall n m p : R, (n > m)%R -> (p > 0)%R -> (p * n > p * m)%R.\nunfold Rgt; auto with real.\nQed.\n\n\nTheorem Rmult_gt_neg_compat_l:\n  forall n m p : R, (m > n)%R -> (0 > p)%R -> (p * n > p * m)%R.\nintros n m p H1 H2; replace (p * n)%R with (-(-p * n))%R; auto with real; try ring.\nreplace (p * m)%R with (-(-p * m))%R; auto with real; try ring.\nQed.\n\n(* Theorem to simplify a hyp x * y? x * z where? is < > <= >= *)\n\n\nTheorem Rmult_le_compat_l_rev:\n  forall n m p : R, (0 < p)%R -> (p * n <= p * m)%R -> (n <= m)%R.\nintros n m p H H1; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n <= p * m)%R; auto with real.\napply Rlt_not_le; apply Rmult_lt_compat_l; auto.\nQed.\n\nTheorem Rmult_le_neg_compat_l_rev:\n  forall n m p : R, (p < 0)%R -> (p * n <= p * m)%R -> (m <= n)%R.\nintros n m p H H1; case (Rle_or_lt m n); auto; intros H2.\nabsurd (p * n <= p * m)%R; auto with real.\napply Rlt_not_le; apply Rmult_lt_neg_compat_l; auto.\nQed.\n\n",
                "context_tokens": 724,
                "proof_start_offset": 30568,
                "proof_end_offset": 30827,
                "proof": "Theorem Rmult_lt_compat_l_rev: forall n m p : R, (0 < p)%R -> (p * n < p * m)%R -> (n < m)%R.\nProof.\nintros n m p H H1; case (Rle_or_lt m n); auto; intros H2.\nabsurd (p * n < p * m)%R; auto with real.\napply Rle_not_lt; apply Rmult_le_compat_l; auto with real.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Rmult_lt_compat_l_rev: forall n m p : R, (0 < p)%R -> (p * n < p * m)%R -> (n < m)%R.\nintros n m p H1 H2; case (Rle_or_lt m n); auto.\nintros n m p H1 H2; case (Rle_or_lt m n m); auto.\nintros m p H1; case (Rle_or_lt m n m); auto.\nintros m p H1; case (Rle_or_lt m n m); auto.\nintros m p H2; case (Rle_or_lt m n m); auto.\nintros m p H2; case (Rle_or_lt m n m); auto.\nintros m p H2; case (Rle_or_lt m n m); auto.\nintros m p H2; case (Rle_or_lt m n m); auto.\nintros m p H2; case (Rle_or_lt m n m); auto.\nintros m p H2; case (Rle_or_lt m n m); auto.\nintros m p H2; case (Rle_or_lt m n m); auto.\nintros m p H2; case (Rle_or_lt m n m); auto.\nintros m p H2; case (Rle_Qed.",
                    "Theorem Rmult_lt_compat_l_rev: forall n m p : R, (0 < p)%R -> (p * n < p * m)%R -> (n < m)%R.\nintros n m p H1 H2; case (Rle_or_lt m n); auto.\nintros n m p H1 H2; case (Rle_or_lt m n m p); auto.\nintros n m p H1 H2; case (Rle_or_lt m n m p); auto.\nintros n m p H1 H2; case (Rle_or_lt m n m p); auto.\nintros n m p H1 H2; case (Rle_or_lt m n m p); auto.\nintros n m p H1 H2; case (Rle_or_lt m n m p); auto.\nintros n m p H1 H2; case (Rle_or_lt m n m p); auto.\nintros n m p H2; case (Rle_or_lt m n m p); auto.\nintros n m p H1; case (Rle_or_lt m n m p); auto.\nintros m p H1 H2; case (Rle_or_lt m n p); auto.\nintros m p H2; case (Rle_or_lt m n p); auto.\nintros m pQed.",
                    "Theorem Rmult_lt_compat_l_rev: forall n m p : R, (0 < p)%R -> (p * n < p * m)%R -> (n < m)%R.\nintros n m p H1; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n <= p)%R; auto with real.\napply Rlt_not_le; auto with real.\napply Rlt_not_le; auto with real.\nQed.",
                    "Theorem Rmult_lt_compat_l_rev: forall n m p : R, (0 < p)%R -> (p * n < p * m)%R -> (n < m)%R.\nintros n m p H1; case (Rle_or_lt m p); auto; try ring.\nreplace (p * m)%R with (p * m)%R; auto with real.\nreplace (p * m)%R with (p * m)%R; auto with real.\nreplace (p * m)%R with (p * m)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (p * m)%R; auto with real.\nreplace (p * m)%R with (p * m)%R; auto with real.\nreplace (p * m)%R with (p * m)%R; auto with real.\nreplace (p * m)%R with (p * m)%R; auto with real.\nreplace (p * m)%R with (p * m)%R; auto with real.\nreplace (p * m)%R with (p * m)%R; auto with real.\nreplace (p * m)%R with (p * m)%R; auto with real.\nreplace (p * m)%R with (p * m)%RQed.",
                    "Theorem Rmult_lt_compat_l_rev: forall n m p : R, (0 < p)%R -> (p * n < p * m)%R -> (n < m)%R.\nintros n m p H1 H2; case (Rle_or_lt n m p); auto; intros H2; case (Rle_or_lt n m p); auto.\napply Rlt_not_le; auto with real.\napply Rlt_not_le; auto with real.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/PolAux.v",
                "context": "Qed.\n\nTheorem Rmult_ge_compat_l:\n  forall n m p : R, (m >= n)%R -> (p >= 0)%R -> (p * m >= p * n)%R.\nintros n m p H H1; apply Rle_ge; auto with real.\nQed.\n\nTheorem Rmult_ge_neg_compat_l:\n  forall n m p : R, (m >= n)%R -> (0 >= p)%R -> (p * n >= p * m)%R.\nintros n m p H1 H2; replace (p * n)%R with (-(-p * n))%R; auto with real; try ring.\nreplace (p * m)%R with (-(-p * m))%R; auto with real;try ring.\nQed.\n\nTheorem Ropp_gt: forall n m, (m > n -> -n > -m)%R.\nauto with real.\nQed.\n\nTheorem Rmult_gt_compat_l:\n  forall n m p : R, (n > m)%R -> (p > 0)%R -> (p * n > p * m)%R.\nunfold Rgt; auto with real.\nQed.\n\n\nTheorem Rmult_gt_neg_compat_l:\n  forall n m p : R, (m > n)%R -> (0 > p)%R -> (p * n > p * m)%R.\nintros n m p H1 H2; replace (p * n)%R with (-(-p * n))%R; auto with real; try ring.\nreplace (p * m)%R with (-(-p * m))%R; auto with real; try ring.\nQed.\n\n(* Theorem to simplify a hyp x * y? x * z where? is < > <= >= *)\n\n\nTheorem Rmult_le_compat_l_rev:\n  forall n m p : R, (0 < p)%R -> (p * n <= p * m)%R -> (n <= m)%R.\nintros n m p H H1; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n <= p * m)%R; auto with real.\napply Rlt_not_le; apply Rmult_lt_compat_l; auto.\nQed.\n\nTheorem Rmult_le_neg_compat_l_rev:\n  forall n m p : R, (p < 0)%R -> (p * n <= p * m)%R -> (m <= n)%R.\nintros n m p H H1; case (Rle_or_lt m n); auto; intros H2.\nabsurd (p * n <= p * m)%R; auto with real.\napply Rlt_not_le; apply Rmult_lt_neg_compat_l; auto.\nQed.\n\nTheorem Rmult_lt_compat_l_rev:\n  forall n m p : R, (0 < p)%R -> (p * n < p * m)%R -> (n < m)%R.\nintros n m p H H1; case (Rle_or_lt m n); auto; intros H2.\nabsurd (p * n < p * m)%R; auto with real.\napply Rle_not_lt; apply Rmult_le_compat_l; auto with real.\nQed.\n\n",
                "context_tokens": 722,
                "proof_start_offset": 30829,
                "proof_end_offset": 31096,
                "proof": "Theorem Rmult_lt_neg_compat_l_rev: forall n m p : R, (p < 0)%R -> (p * n < p * m)%R -> (m < n)%R.\nProof.\nintros n m p H H1; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n < p * m)%R; auto with real.\napply Rle_not_lt; apply Rmult_le_neg_compat_l; auto with real.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Rmult_lt_neg_compat_l_rev: forall n m p : R, (p < 0)%R -> (p * n < p * m)%R -> (m < n)%R.\nintros n m p H1 H2; case (Rle_or_lt m n m p); auto; intros H2; case (Rle_or_lt m n p); auto.\nabsurd (p * n <= m)%R; auto with real.\napply Rle_not_le; auto with real.\napply Rmult_lt_compat_l; auto with real.\napply Rmult_lt_compat_l; auto with real.\napply Rmult_lt_compat_l; auto with real.\napply Rmult_lt_compat_l; auto with real.\napply Rmult_lt_compat_l; auto with real.\napply Rmult_lt_compat_l; auto with real.\napply Rmult_lt_compat_l; auto with real.\napply Rmult_lt_compat_l; auto with real.\napply Rmult_lt_compat_l; auto with real.\napply Rmult_lt_compat_l; auto with real.\napply Rmult_lt_compat_l; auto with real.\napply Rmult_lt_compat_l; auto with real.\napply Rmult_lt_compat_l; auto with real.\napply Rmult_lt_Qed.",
                    "Theorem Rmult_lt_neg_compat_l_rev: forall n m p : R, (p < 0)%R -> (p * n < p * m)%R -> (m < n)%R.\nintros n m p H1; case (Rle_or_lt m n m); auto; intros H2.\nabsurd (p * n <= p)%R; auto with real.\napply Rlt_not_le; auto with real.\nQed.",
                    "Theorem Rmult_lt_neg_compat_l_rev: forall n m p : R, (p < 0)%R -> (p * n < p * m)%R -> (m < n)%R.\nintros n m p H1; case (Rle_or_lt m n m p); auto; intros H2.\nabsurd (p * n <= p)%R; auto with real.\napply Rlt_not_le; auto with real.\napply Rlt_not_le; auto with real.\nQed.",
                    "Theorem Rmult_lt_neg_compat_l_rev: forall n m p : R, (p < 0)%R -> (p * n < p * m)%R -> (m < n)%R.\nintros n m p H1; case (Rle_or_lt n m p); auto.\napply Rlt_not_le; apply Rmult_lt_compat_l; auto with real.\nQed.",
                    "Theorem Rmult_lt_neg_compat_l_rev: forall n m p : R, (p < 0)%R -> (p * n < p * m)%R -> (m < n)%R.\nintros n m p H1; case (Rle_or_lt m n m); auto; intros H2; apply Rle_ge; auto with real.\napply Rlt_not_le; apply Rmult_lt_compat_l; auto with real.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/PolAux.v",
                "context": "intros n m p H1 H2; replace (p * n)%R with (-(-p * n))%R; auto with real; try ring.\nreplace (p * m)%R with (-(-p * m))%R; auto with real;try ring.\nQed.\n\nTheorem Ropp_gt: forall n m, (m > n -> -n > -m)%R.\nauto with real.\nQed.\n\nTheorem Rmult_gt_compat_l:\n  forall n m p : R, (n > m)%R -> (p > 0)%R -> (p * n > p * m)%R.\nunfold Rgt; auto with real.\nQed.\n\n\nTheorem Rmult_gt_neg_compat_l:\n  forall n m p : R, (m > n)%R -> (0 > p)%R -> (p * n > p * m)%R.\nintros n m p H1 H2; replace (p * n)%R with (-(-p * n))%R; auto with real; try ring.\nreplace (p * m)%R with (-(-p * m))%R; auto with real; try ring.\nQed.\n\n(* Theorem to simplify a hyp x * y? x * z where? is < > <= >= *)\n\n\nTheorem Rmult_le_compat_l_rev:\n  forall n m p : R, (0 < p)%R -> (p * n <= p * m)%R -> (n <= m)%R.\nintros n m p H H1; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n <= p * m)%R; auto with real.\napply Rlt_not_le; apply Rmult_lt_compat_l; auto.\nQed.\n\nTheorem Rmult_le_neg_compat_l_rev:\n  forall n m p : R, (p < 0)%R -> (p * n <= p * m)%R -> (m <= n)%R.\nintros n m p H H1; case (Rle_or_lt m n); auto; intros H2.\nabsurd (p * n <= p * m)%R; auto with real.\napply Rlt_not_le; apply Rmult_lt_neg_compat_l; auto.\nQed.\n\nTheorem Rmult_lt_compat_l_rev:\n  forall n m p : R, (0 < p)%R -> (p * n < p * m)%R -> (n < m)%R.\nintros n m p H H1; case (Rle_or_lt m n); auto; intros H2.\nabsurd (p * n < p * m)%R; auto with real.\napply Rle_not_lt; apply Rmult_le_compat_l; auto with real.\nQed.\n\nTheorem Rmult_lt_neg_compat_l_rev:\n  forall n m p : R, (p < 0)%R -> (p * n < p * m)%R -> (m < n)%R.\nintros n m p H H1; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n < p * m)%R; auto with real.\napply Rle_not_lt; apply Rmult_le_neg_compat_l; auto with real.\nQed.\n\n",
                "context_tokens": 724,
                "proof_start_offset": 31098,
                "proof_end_offset": 31286,
                "proof": "Theorem Rmult_ge_compat_l_rev: forall n m p : R, (p > 0)%R -> (p * n >= p * m)%R -> (n >= m)%R.\nProof.\nintros n m p H H1; apply Rle_ge; apply Rmult_le_compat_l_rev with p; auto with real.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Rmult_ge_compat_l_rev: forall n m p : R, (p > 0)%R -> (p * n >= p * m)%R -> (n >= m)%R.\nintros n m p H1; case (Rle_or_lt n m p); auto; intros H2.\nabsurd (p * n <= p)%R; auto with real.\napply Rle_not_lt; auto with real.\napply Rle_not_lt; auto with real.\napply Rlt_not_le; auto with real.\napply Rle_not_lt; auto with real.\napply Rle_not_lt; auto with real.\napply Rle_not_lt; auto with real.\napply Rle_not_lt; auto with real.\napply Rlt_not_le; auto with real.\napply Rlt_not_le; auto with real.\napply Rle_not_lt; auto with real.\napply Rle_not_lt; auto with real.\napply Rle_not_lt; auto with real.\napply Rle_not_lt; auto with real.\napply Rlt_not_le; auto with real.\napply Rle_not_lt; auto with real.\napply Rlt_not_le; auto with real.\napply Rlt_not_le; auto with real.\napply Rlt_not_le; auto with real.Qed.",
                    "Theorem Rmult_ge_compat_l_rev: forall n m p : R, (p > 0)%R -> (p * n >= p * m)%R -> (n >= m)%R.\nintros n m p H1; case (Rle_or_lt m n); auto; intros H2.\nabsurd (p * n <= p)%R; auto with real.\napply Rle_not_le; apply Rmult_lt_compat_l; auto with real.\nQed.",
                    "Theorem Rmult_ge_compat_l_rev: forall n m p : R, (p > 0)%R -> (p * n >= p * m)%R -> (n >= m)%R.\nintros n m p H; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n <= p)%R; auto with real.\napply Rle_not_lt; auto with real.\napply Rle_not_lt; auto with real.\napply Rlt_not_le; auto with real.\napply Rle_not_lt; auto with real.\napply Rle_not_lt; auto with real.\napply Rlt_not_le; auto with real.\napply Rle_not_lt; auto with real.\napply Rle_not_lt; auto with real.\napply Rle_not_lt; auto with real.\napply Rle_not_lt; auto with real.\napply Rlt_not_le; auto with real.\napply Rle_not_lt; auto with real.\napply Rle_not_lt; auto with real.\napply Rle_not_lt; auto with real.\napply Rle_not_lt; auto with real.\napply Rle_not_lt; auto with real.\napply Rle_not_lt; auto with real.\napply Rlt_not_lt; auto with real.\napplyQed.",
                    "Theorem Rmult_ge_compat_l_rev: forall n m p : R, (p > 0)%R -> (p * n >= p * m)%R -> (n >= m)%R.\nintros n m p H1 H2; case (Rle_or_lt n m); auto; intros H2; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n <= p)%R; auto with real.\napply Rlt_not_le; auto with real.\napply Rlt_not_le; auto with real.\napply Rlt_not_le; auto with real.\napply Rlt_not_le; auto with real.\nQed.",
                    "Theorem Rmult_ge_compat_l_rev: forall n m p : R, (p > 0)%R -> (p * n >= p * m)%R -> (n >= m)%R.\nintros n m p H1; case (Rle_or_lt m n m); auto; intros H2.\nabsurd (p * n <= m)%R; auto with real.\nreplace (p * n <= m)%R with (- p * m)%R; auto with real.\nreplace (p * n * m)%R with (- p * m)%R; auto with real.\nreplace (p * n)%R with (- p * m)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p * m)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p)%R; auto with real.\nreplace (p * m)%R with (- p * m)%R; auto with real.\nreplace (pQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/PolAux.v",
                "context": " with real.\nQed.\n\nTheorem Rmult_gt_compat_l:\n  forall n m p : R, (n > m)%R -> (p > 0)%R -> (p * n > p * m)%R.\nunfold Rgt; auto with real.\nQed.\n\n\nTheorem Rmult_gt_neg_compat_l:\n  forall n m p : R, (m > n)%R -> (0 > p)%R -> (p * n > p * m)%R.\nintros n m p H1 H2; replace (p * n)%R with (-(-p * n))%R; auto with real; try ring.\nreplace (p * m)%R with (-(-p * m))%R; auto with real; try ring.\nQed.\n\n(* Theorem to simplify a hyp x * y? x * z where? is < > <= >= *)\n\n\nTheorem Rmult_le_compat_l_rev:\n  forall n m p : R, (0 < p)%R -> (p * n <= p * m)%R -> (n <= m)%R.\nintros n m p H H1; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n <= p * m)%R; auto with real.\napply Rlt_not_le; apply Rmult_lt_compat_l; auto.\nQed.\n\nTheorem Rmult_le_neg_compat_l_rev:\n  forall n m p : R, (p < 0)%R -> (p * n <= p * m)%R -> (m <= n)%R.\nintros n m p H H1; case (Rle_or_lt m n); auto; intros H2.\nabsurd (p * n <= p * m)%R; auto with real.\napply Rlt_not_le; apply Rmult_lt_neg_compat_l; auto.\nQed.\n\nTheorem Rmult_lt_compat_l_rev:\n  forall n m p : R, (0 < p)%R -> (p * n < p * m)%R -> (n < m)%R.\nintros n m p H H1; case (Rle_or_lt m n); auto; intros H2.\nabsurd (p * n < p * m)%R; auto with real.\napply Rle_not_lt; apply Rmult_le_compat_l; auto with real.\nQed.\n\nTheorem Rmult_lt_neg_compat_l_rev:\n  forall n m p : R, (p < 0)%R -> (p * n < p * m)%R -> (m < n)%R.\nintros n m p H H1; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n < p * m)%R; auto with real.\napply Rle_not_lt; apply Rmult_le_neg_compat_l; auto with real.\nQed.\n\nTheorem Rmult_ge_compat_l_rev:\n  forall n m p : R, (p > 0)%R -> (p * n >= p * m)%R -> (n >= m)%R.\nintros n m p H H1;\n apply Rle_ge; apply Rmult_le_compat_l_rev with p; auto with real.\nQed.\n\n",
                "context_tokens": 722,
                "proof_start_offset": 31288,
                "proof_end_offset": 31484,
                "proof": "Theorem Rmult_ge_neg_compat_l_rev: forall n m p : R, (0 > p)%R -> (p * n >= p * m)%R -> (m >= n)%R.\nProof.\nintros n m p H H1; apply Rle_ge; apply Rmult_le_neg_compat_l_rev with p; auto with real.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Rmult_ge_neg_compat_l_rev: forall n m p : R, (0 > p)%R -> (p * n >= p * m)%R -> (m >= n)%R.\nintros n m p H1; case (Rle_or_lt n m); auto; intros H1.\nabsurd (p * n <= p)%R; auto with real.\nreplace (p * n)%R with (- p)%R; auto with real.\nreplace (p * n)%R with (- p)%R with (- p)%R; auto with real.\nreplace (p * n)%R with (- p)%R; auto with real.\nreplace (p * n)%R with (- p)%R; auto with real.\nreplace (p * n)%R with (- p)%R; auto with real.\nreplace (p * n)%R with (- p)%R with (- p)%R; auto with real.\nreplace (p * n)%R with (- p)%R; auto with real.\nreplace (p * n)%R with (- p)%R; auto with real.\nreplace (p * n)%R with (- p)%R with (- p)%R; auto with real.\nreplace (p * n)%R with (- p)%R; auto with real.\nreplace (p * n)%R with (- p)%R; auto with real.\nreplace (pQed.",
                    "Theorem Rmult_ge_neg_compat_l_rev: forall n m p : R, (0 > p)%R -> (p * n >= p * m)%R -> (m >= n)%R.\nintros n m p H1; case (Rle_or_lt n m); auto.\nintros n m p H1 H2; case (Rle_or_lt m n); auto.\nintros n m p H1 H2; case (Rle_or_lt n m); auto.\nintros n m p H2; case (Rle_or_lt m n m); auto.\nintros n m p H2; case (Rle_or_lt m n m); auto.\nintros n m p H2; case (Rle_or_lt m n m); auto.\nintros n m p H2; case (Rle_or_lt m n m); auto.\nintros n m p H2; case (Rle_or_lt m n m); auto.\nintros n m p H2; case (Rle_or_lt m n m); auto.\nintros n m p H2; case (Rle_or_lt m n m); auto.\nintros n m p H2; case (Rle_or_lt m n m); auto.\nintros n m p H2; case (Rle_or_lt m n m); auto.\nintros nQed.",
                    "Theorem Rmult_ge_neg_compat_l_rev: forall n m p : R, (0 > p)%R -> (p * n >= p * m)%R -> (m >= n)%R.\nintros n m p H1; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n <= m)%R; auto with real.\napply Rmult_le_compat_l with (p * n + m)%R; auto with real.\napply Rmult_le_compat_l with (p * n)%R; auto with real.\napply Rmult_le_compat_l with (p * n)%R; auto with real.\napply Rmult_le_compat_l with (p * n)%R; auto with real.\napply Rmult_le_compat_l with (p * n)%R; auto with real.\napply Rmult_le_compat_l with (p * n)%R; auto with real.\napply Rmult_le_compat_l with (p * n)%R; auto with real.\napply Rmult_le_compat_l with (p * n)%R; auto with real.\napply Rmult_le_compat_l with (p * n)%R; auto with real.\napply Rmult_le_compat_l with (p * n)%R; auto with real.\napply Rmult_leQed.",
                    "Theorem Rmult_ge_neg_compat_l_rev: forall n m p : R, (0 > p)%R -> (p * n >= p * m)%R -> (m >= n)%R.\nintros n m p H1 H2; case (Rle_or_lt n m p); auto; intros H2;\n absurd (p * m < p)%R; auto with real.\napply Rlt_not_le; auto with real.\nQed.",
                    "Theorem Rmult_ge_neg_compat_l_rev: forall n m p : R, (0 > p)%R -> (p * n >= p * m)%R -> (m >= n)%R.\nintros n m p H1; case (Rle_or_lt n m p); auto; intros H1.\nabsurd (p * n <= p)%R; auto with real.\napply Rlt_not_le; auto with real.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/PolAux.v",
                "context": "m > n)%R -> (0 > p)%R -> (p * n > p * m)%R.\nintros n m p H1 H2; replace (p * n)%R with (-(-p * n))%R; auto with real; try ring.\nreplace (p * m)%R with (-(-p * m))%R; auto with real; try ring.\nQed.\n\n(* Theorem to simplify a hyp x * y? x * z where? is < > <= >= *)\n\n\nTheorem Rmult_le_compat_l_rev:\n  forall n m p : R, (0 < p)%R -> (p * n <= p * m)%R -> (n <= m)%R.\nintros n m p H H1; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n <= p * m)%R; auto with real.\napply Rlt_not_le; apply Rmult_lt_compat_l; auto.\nQed.\n\nTheorem Rmult_le_neg_compat_l_rev:\n  forall n m p : R, (p < 0)%R -> (p * n <= p * m)%R -> (m <= n)%R.\nintros n m p H H1; case (Rle_or_lt m n); auto; intros H2.\nabsurd (p * n <= p * m)%R; auto with real.\napply Rlt_not_le; apply Rmult_lt_neg_compat_l; auto.\nQed.\n\nTheorem Rmult_lt_compat_l_rev:\n  forall n m p : R, (0 < p)%R -> (p * n < p * m)%R -> (n < m)%R.\nintros n m p H H1; case (Rle_or_lt m n); auto; intros H2.\nabsurd (p * n < p * m)%R; auto with real.\napply Rle_not_lt; apply Rmult_le_compat_l; auto with real.\nQed.\n\nTheorem Rmult_lt_neg_compat_l_rev:\n  forall n m p : R, (p < 0)%R -> (p * n < p * m)%R -> (m < n)%R.\nintros n m p H H1; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n < p * m)%R; auto with real.\napply Rle_not_lt; apply Rmult_le_neg_compat_l; auto with real.\nQed.\n\nTheorem Rmult_ge_compat_l_rev:\n  forall n m p : R, (p > 0)%R -> (p * n >= p * m)%R -> (n >= m)%R.\nintros n m p H H1;\n apply Rle_ge; apply Rmult_le_compat_l_rev with p; auto with real.\nQed.\n\nTheorem Rmult_ge_neg_compat_l_rev:\n  forall n m p : R, (0 > p)%R -> (p * n >= p * m)%R -> (m >= n)%R.\nintros n m p H H1;\n apply Rle_ge; apply Rmult_le_neg_compat_l_rev with p; auto with real.\nQed.\n\n",
                "context_tokens": 724,
                "proof_start_offset": 31486,
                "proof_end_offset": 31663,
                "proof": "Theorem Rmult_gt_compat_l_rev: forall n m p : R, (p > 0)%R -> (p * n > p * m)%R -> (n > m)%R.\nProof.\nintros n m p H H1; red; apply Rmult_lt_compat_l_rev with p; auto with real.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Rmult_gt_compat_l_rev: forall n m p : R, (p > 0)%R -> (p * n > p * m)%R -> (n > m)%R.\nintros n m p H1; case (Rle_or_lt n m); auto.\nQed.",
                    "Theorem Rmult_gt_compat_l_rev: forall n m p : R, (p > 0)%R -> (p * n > p * m)%R -> (n > m)%R.\nintros n m p H1; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n <= p)%R; auto with real.\napply Rle_ge; apply Rmult_le_compat_l; auto with real.\napply Rmult_le_compat_l; auto with real.\napply Rmult_le_compat_l; auto with real.\napply Rmult_le_compat_l; auto with real.\napply Rmult_lt_compat_l; auto with real.\napply Rmult_le_compat_l; auto with real.\nQed.",
                    "Theorem Rmult_gt_compat_l_rev: forall n m p : R, (p > 0)%R -> (p * n > p * m)%R -> (n > m)%R.\nintros n m p H1; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n > p)%R; auto with real.\napply Rmult_le_compat_l; auto with real.\napply Rmult_lt_compat_l; auto with real.\nQed.",
                    "Theorem Rmult_gt_compat_l_rev: forall n m p : R, (p > 0)%R -> (p * n > p * m)%R -> (n > m)%R.\nintros n m p H1 H2; case (Rle_or_lt m n m); auto; intros H2; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n <= p)%R; auto with real.\napply Rle_ge; auto with real.\napply Rle_ge; auto with real.\napply Rle_ge; auto with real.\nQed.",
                    "Theorem Rmult_gt_compat_l_rev: forall n m p : R, (p > 0)%R -> (p * n > p * m)%R -> (n > m)%R.\nintros n m p H1; case (Rle_or_lt n m); auto; intros H1.\nabsurd (p * n < m)%R; auto with real.\napply Rmult_le_compat_l with p; auto with real.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/PolAux.v",
                "context": "Qed.\n\n(* Theorem to simplify a hyp x * y? x * z where? is < > <= >= *)\n\n\nTheorem Rmult_le_compat_l_rev:\n  forall n m p : R, (0 < p)%R -> (p * n <= p * m)%R -> (n <= m)%R.\nintros n m p H H1; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n <= p * m)%R; auto with real.\napply Rlt_not_le; apply Rmult_lt_compat_l; auto.\nQed.\n\nTheorem Rmult_le_neg_compat_l_rev:\n  forall n m p : R, (p < 0)%R -> (p * n <= p * m)%R -> (m <= n)%R.\nintros n m p H H1; case (Rle_or_lt m n); auto; intros H2.\nabsurd (p * n <= p * m)%R; auto with real.\napply Rlt_not_le; apply Rmult_lt_neg_compat_l; auto.\nQed.\n\nTheorem Rmult_lt_compat_l_rev:\n  forall n m p : R, (0 < p)%R -> (p * n < p * m)%R -> (n < m)%R.\nintros n m p H H1; case (Rle_or_lt m n); auto; intros H2.\nabsurd (p * n < p * m)%R; auto with real.\napply Rle_not_lt; apply Rmult_le_compat_l; auto with real.\nQed.\n\nTheorem Rmult_lt_neg_compat_l_rev:\n  forall n m p : R, (p < 0)%R -> (p * n < p * m)%R -> (m < n)%R.\nintros n m p H H1; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n < p * m)%R; auto with real.\napply Rle_not_lt; apply Rmult_le_neg_compat_l; auto with real.\nQed.\n\nTheorem Rmult_ge_compat_l_rev:\n  forall n m p : R, (p > 0)%R -> (p * n >= p * m)%R -> (n >= m)%R.\nintros n m p H H1;\n apply Rle_ge; apply Rmult_le_compat_l_rev with p; auto with real.\nQed.\n\nTheorem Rmult_ge_neg_compat_l_rev:\n  forall n m p : R, (0 > p)%R -> (p * n >= p * m)%R -> (m >= n)%R.\nintros n m p H H1;\n apply Rle_ge; apply Rmult_le_neg_compat_l_rev with p; auto with real.\nQed.\n\nTheorem Rmult_gt_compat_l_rev:\n  forall n m p : R, (p > 0)%R -> (p * n > p * m)%R -> (n > m)%R.\nintros n m p H H1;\n red; apply Rmult_lt_compat_l_rev with p; auto with real.\nQed.\n\n",
                "context_tokens": 722,
                "proof_start_offset": 31665,
                "proof_end_offset": 31850,
                "proof": "Theorem Rmult_gt_neg_compat_l_rev: forall n m p : R, (0 > p)%R -> (p * n > p * m)%R -> (m > n)%R.\nProof.\nintros n m p H H1; red; apply Rmult_lt_neg_compat_l_rev with p; auto with real.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Rmult_gt_neg_compat_l_rev: forall n m p : R, (0 > p)%R -> (p * n > p * m)%R -> (m > n)%R.\nintros n m p H1; case (Rle_or_lt n m); auto.\nintros n m p H1; case (Rle_or_lt n m); auto.\nintros n m p H1; case (Rle_or_lt n m); auto.\nintros n m p H1; case (Rle_or_lt n m); auto.\nintros n m p H1 H2; case (Rle_or_lt n m); auto.\nintros n m p H1 H2; case (Rle_or_lt n m); auto.\nintros n m p H1; case (Rle_or_lt n m p); auto.\nintros n m p H1; case (Rle_or_lt n m p); auto.\nintros n m p H1; case (Rle_or_lt n m p); auto.\nintros n m p H1 H2; case (Rle_or_lt n m p); auto.\nintros n m p H1 H2; case (Rle_or_lt n m p); auto.\nintros n m p H1; case (Rle_or_lt n m p); auto.\nintrosQed.",
                    "Theorem Rmult_gt_neg_compat_l_rev: forall n m p : R, (0 > p)%R -> (p * n > p * m)%R -> (m > n)%R.\nintros n m p H1 H2; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n <= m)%R; auto with real.\napply Rle_ge; apply Rmult_lt_compat_l; auto with real.\napply Rmult_lt_compat_l; auto with real.\napply Rle_ge; auto with real.\nQed.",
                    "Theorem Rmult_gt_neg_compat_l_rev: forall n m p : R, (0 > p)%R -> (p * n > p * m)%R -> (m > n)%R.\nintros n m p H1; case (Rle_or_lt n m p); auto; intros H2; apply Rle_ge; auto with real.\nQed.",
                    "Theorem Rmult_gt_neg_compat_l_rev: forall n m p : R, (0 > p)%R -> (p * n > p * m)%R -> (m > n)%R.\nintros n m p H1; case (Rle_or_lt n m); auto with real.\nQed.",
                    "Theorem Rmult_gt_neg_compat_l_rev: forall n m p : R, (0 > p)%R -> (p * n > p * m)%R -> (m > n)%R.\nintros n m p H1; case (Rle_or_lt n m); auto; intros H1.\nabsurd (p * n <= m)%R; auto with real.\napply Rmult_lt_compat_l with p; auto with real.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/PolAux.v",
                "context": " m p H H1; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n <= p * m)%R; auto with real.\napply Rlt_not_le; apply Rmult_lt_compat_l; auto.\nQed.\n\nTheorem Rmult_le_neg_compat_l_rev:\n  forall n m p : R, (p < 0)%R -> (p * n <= p * m)%R -> (m <= n)%R.\nintros n m p H H1; case (Rle_or_lt m n); auto; intros H2.\nabsurd (p * n <= p * m)%R; auto with real.\napply Rlt_not_le; apply Rmult_lt_neg_compat_l; auto.\nQed.\n\nTheorem Rmult_lt_compat_l_rev:\n  forall n m p : R, (0 < p)%R -> (p * n < p * m)%R -> (n < m)%R.\nintros n m p H H1; case (Rle_or_lt m n); auto; intros H2.\nabsurd (p * n < p * m)%R; auto with real.\napply Rle_not_lt; apply Rmult_le_compat_l; auto with real.\nQed.\n\nTheorem Rmult_lt_neg_compat_l_rev:\n  forall n m p : R, (p < 0)%R -> (p * n < p * m)%R -> (m < n)%R.\nintros n m p H H1; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n < p * m)%R; auto with real.\napply Rle_not_lt; apply Rmult_le_neg_compat_l; auto with real.\nQed.\n\nTheorem Rmult_ge_compat_l_rev:\n  forall n m p : R, (p > 0)%R -> (p * n >= p * m)%R -> (n >= m)%R.\nintros n m p H H1;\n apply Rle_ge; apply Rmult_le_compat_l_rev with p; auto with real.\nQed.\n\nTheorem Rmult_ge_neg_compat_l_rev:\n  forall n m p : R, (0 > p)%R -> (p * n >= p * m)%R -> (m >= n)%R.\nintros n m p H H1;\n apply Rle_ge; apply Rmult_le_neg_compat_l_rev with p; auto with real.\nQed.\n\nTheorem Rmult_gt_compat_l_rev:\n  forall n m p : R, (p > 0)%R -> (p * n > p * m)%R -> (n > m)%R.\nintros n m p H H1;\n red; apply Rmult_lt_compat_l_rev with p; auto with real.\nQed.\n\nTheorem Rmult_gt_neg_compat_l_rev:\n  forall n m p : R, (0 > p)%R -> (p * n > p * m)%R -> (m > n)%R.\nintros n m p H H1;\n red; apply Rmult_lt_neg_compat_l_rev with p; auto with real.\nQed.\n\n(* For replace *)\n\n",
                "context_tokens": 736,
                "proof_start_offset": 31871,
                "proof_end_offset": 31978,
                "proof": "Theorem eq_Rlt_trans_l : forall x y z, (x = z) -> (x < y) -> (z < y).\nProof.\nintros x y z H; rewrite H; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem eq_Rlt_trans_l : forall x y z, (x = z) -> (x < y) -> (z < y).\nintros x y H1; red; apply Rmult_lt_compat_l with p; auto with real.\nQed.",
                    "Theorem eq_Rlt_trans_l : forall x y z, (x = z) -> (x < y) -> (z < y).\nintros n m p H; case (Rle_or_lt m n m p); auto with real.\nQed.",
                    "Theorem eq_Rlt_trans_l : forall x y z, (x = z) -> (x < y) -> (z < y).\nintros x y z H; case (Rle_or_lt n m p); auto with real.\nQed.",
                    "Theorem eq_Rlt_trans_l : forall x y z, (x = z) -> (x < y) -> (z < y).\nintros x y z H; case (Rle_or_lt y z); auto; intros H1.\nabsurd (p * n > 0)%R; auto with real.\nQed.",
                    "Theorem eq_Rlt_trans_l : forall x y z, (x = z) -> (x < y) -> (z < y).\nintros x y z H1; case (Rle_or_lt y z); auto with real.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/PolAux.v",
                "context": " Rmult_lt_compat_l; auto.\nQed.\n\nTheorem Rmult_le_neg_compat_l_rev:\n  forall n m p : R, (p < 0)%R -> (p * n <= p * m)%R -> (m <= n)%R.\nintros n m p H H1; case (Rle_or_lt m n); auto; intros H2.\nabsurd (p * n <= p * m)%R; auto with real.\napply Rlt_not_le; apply Rmult_lt_neg_compat_l; auto.\nQed.\n\nTheorem Rmult_lt_compat_l_rev:\n  forall n m p : R, (0 < p)%R -> (p * n < p * m)%R -> (n < m)%R.\nintros n m p H H1; case (Rle_or_lt m n); auto; intros H2.\nabsurd (p * n < p * m)%R; auto with real.\napply Rle_not_lt; apply Rmult_le_compat_l; auto with real.\nQed.\n\nTheorem Rmult_lt_neg_compat_l_rev:\n  forall n m p : R, (p < 0)%R -> (p * n < p * m)%R -> (m < n)%R.\nintros n m p H H1; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n < p * m)%R; auto with real.\napply Rle_not_lt; apply Rmult_le_neg_compat_l; auto with real.\nQed.\n\nTheorem Rmult_ge_compat_l_rev:\n  forall n m p : R, (p > 0)%R -> (p * n >= p * m)%R -> (n >= m)%R.\nintros n m p H H1;\n apply Rle_ge; apply Rmult_le_compat_l_rev with p; auto with real.\nQed.\n\nTheorem Rmult_ge_neg_compat_l_rev:\n  forall n m p : R, (0 > p)%R -> (p * n >= p * m)%R -> (m >= n)%R.\nintros n m p H H1;\n apply Rle_ge; apply Rmult_le_neg_compat_l_rev with p; auto with real.\nQed.\n\nTheorem Rmult_gt_compat_l_rev:\n  forall n m p : R, (p > 0)%R -> (p * n > p * m)%R -> (n > m)%R.\nintros n m p H H1;\n red; apply Rmult_lt_compat_l_rev with p; auto with real.\nQed.\n\nTheorem Rmult_gt_neg_compat_l_rev:\n  forall n m p : R, (0 > p)%R -> (p * n > p * m)%R -> (m > n)%R.\nintros n m p H H1;\n red; apply Rmult_lt_neg_compat_l_rev with p; auto with real.\nQed.\n\n(* For replace *)\n\nTheorem eq_Rlt_trans_l : forall x y z, (x = z) -> (x < y) -> (z < y).\nintros x y z H; rewrite H; auto.\nQed.\n",
                "context_tokens": 736,
                "proof_start_offset": 31979,
                "proof_end_offset": 32086,
                "proof": "Theorem eq_Rlt_trans_r : forall x y z, (y = z) -> (x < y) -> (x < z).\nProof.\nintros x y z H; rewrite H; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem eq_Rlt_trans_r : forall x y z, (y = z) -> (x < y) -> (x < z).\nintros x y z H; case (Rle_or_lt x z); auto.\nintros x z H1 H2; rewrite H1; auto.\nQed.",
                    "Theorem eq_Rlt_trans_r : forall x y z, (y = z) -> (x < y) -> (x < z).\nintros x y z H; case (Rle_or_lt x y); auto.\nQed.",
                    "Theorem eq_Rlt_trans_r : forall x y z, (y = z) -> (x < y) -> (x < z).\nintros x y z H; case (Rle_or_lt x y); auto.\nQed.",
                    "Theorem eq_Rlt_trans_r : forall x y z, (y = z) -> (x < y) -> (x < z).\nintros x y z H; case (Rle_or_lt n m); auto.\nQed.",
                    "Theorem eq_Rlt_trans_r : forall x y z, (y = z) -> (x < y) -> (x < z).\nintros x y z H; case (Rle_or_lt x y); auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/PolAux.v",
                "context": " <= p * m)%R -> (m <= n)%R.\nintros n m p H H1; case (Rle_or_lt m n); auto; intros H2.\nabsurd (p * n <= p * m)%R; auto with real.\napply Rlt_not_le; apply Rmult_lt_neg_compat_l; auto.\nQed.\n\nTheorem Rmult_lt_compat_l_rev:\n  forall n m p : R, (0 < p)%R -> (p * n < p * m)%R -> (n < m)%R.\nintros n m p H H1; case (Rle_or_lt m n); auto; intros H2.\nabsurd (p * n < p * m)%R; auto with real.\napply Rle_not_lt; apply Rmult_le_compat_l; auto with real.\nQed.\n\nTheorem Rmult_lt_neg_compat_l_rev:\n  forall n m p : R, (p < 0)%R -> (p * n < p * m)%R -> (m < n)%R.\nintros n m p H H1; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n < p * m)%R; auto with real.\napply Rle_not_lt; apply Rmult_le_neg_compat_l; auto with real.\nQed.\n\nTheorem Rmult_ge_compat_l_rev:\n  forall n m p : R, (p > 0)%R -> (p * n >= p * m)%R -> (n >= m)%R.\nintros n m p H H1;\n apply Rle_ge; apply Rmult_le_compat_l_rev with p; auto with real.\nQed.\n\nTheorem Rmult_ge_neg_compat_l_rev:\n  forall n m p : R, (0 > p)%R -> (p * n >= p * m)%R -> (m >= n)%R.\nintros n m p H H1;\n apply Rle_ge; apply Rmult_le_neg_compat_l_rev with p; auto with real.\nQed.\n\nTheorem Rmult_gt_compat_l_rev:\n  forall n m p : R, (p > 0)%R -> (p * n > p * m)%R -> (n > m)%R.\nintros n m p H H1;\n red; apply Rmult_lt_compat_l_rev with p; auto with real.\nQed.\n\nTheorem Rmult_gt_neg_compat_l_rev:\n  forall n m p : R, (0 > p)%R -> (p * n > p * m)%R -> (m > n)%R.\nintros n m p H H1;\n red; apply Rmult_lt_neg_compat_l_rev with p; auto with real.\nQed.\n\n(* For replace *)\n\nTheorem eq_Rlt_trans_l : forall x y z, (x = z) -> (x < y) -> (z < y).\nintros x y z H; rewrite H; auto.\nQed.\nTheorem eq_Rlt_trans_r : forall x y z, (y = z) -> (x < y) -> (x < z).\nintros x y z H; rewrite H; auto.\nQed.\n",
                "context_tokens": 736,
                "proof_start_offset": 32087,
                "proof_end_offset": 32194,
                "proof": "Theorem eq_Rgt_trans_l : forall x y z, (x = z) -> (x > y) -> (z > y).\nProof.\nintros x y z H; rewrite H; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem eq_Rgt_trans_l : forall x y z, (x = z) -> (x > y) -> (z > y).\nintros x y z H; rewrite H; auto.\nQed.",
                    "Theorem eq_Rgt_trans_l : forall x y z, (x = z) -> (x > y) -> (z > y).\nintros x y z H; rewrite H; auto.\nQed.",
                    "Theorem eq_Rgt_trans_l : forall x y z, (x = z) -> (x > y) -> (z > y).\nintros x y H; rewrite H; auto.\nQed.",
                    "Theorem eq_Rgt_trans_l : forall x y z, (x = z) -> (x > y) -> (z > y).\nintros x y z H; rewrite H; auto.\nQed.",
                    "Theorem eq_Rgt_trans_l : forall x y z, (x = z) -> (x > y) -> (z > y).\nintros x y H; rewrite H; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/PolAux.v",
                "context": " * m)%R; auto with real.\napply Rlt_not_le; apply Rmult_lt_neg_compat_l; auto.\nQed.\n\nTheorem Rmult_lt_compat_l_rev:\n  forall n m p : R, (0 < p)%R -> (p * n < p * m)%R -> (n < m)%R.\nintros n m p H H1; case (Rle_or_lt m n); auto; intros H2.\nabsurd (p * n < p * m)%R; auto with real.\napply Rle_not_lt; apply Rmult_le_compat_l; auto with real.\nQed.\n\nTheorem Rmult_lt_neg_compat_l_rev:\n  forall n m p : R, (p < 0)%R -> (p * n < p * m)%R -> (m < n)%R.\nintros n m p H H1; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n < p * m)%R; auto with real.\napply Rle_not_lt; apply Rmult_le_neg_compat_l; auto with real.\nQed.\n\nTheorem Rmult_ge_compat_l_rev:\n  forall n m p : R, (p > 0)%R -> (p * n >= p * m)%R -> (n >= m)%R.\nintros n m p H H1;\n apply Rle_ge; apply Rmult_le_compat_l_rev with p; auto with real.\nQed.\n\nTheorem Rmult_ge_neg_compat_l_rev:\n  forall n m p : R, (0 > p)%R -> (p * n >= p * m)%R -> (m >= n)%R.\nintros n m p H H1;\n apply Rle_ge; apply Rmult_le_neg_compat_l_rev with p; auto with real.\nQed.\n\nTheorem Rmult_gt_compat_l_rev:\n  forall n m p : R, (p > 0)%R -> (p * n > p * m)%R -> (n > m)%R.\nintros n m p H H1;\n red; apply Rmult_lt_compat_l_rev with p; auto with real.\nQed.\n\nTheorem Rmult_gt_neg_compat_l_rev:\n  forall n m p : R, (0 > p)%R -> (p * n > p * m)%R -> (m > n)%R.\nintros n m p H H1;\n red; apply Rmult_lt_neg_compat_l_rev with p; auto with real.\nQed.\n\n(* For replace *)\n\nTheorem eq_Rlt_trans_l : forall x y z, (x = z) -> (x < y) -> (z < y).\nintros x y z H; rewrite H; auto.\nQed.\nTheorem eq_Rlt_trans_r : forall x y z, (y = z) -> (x < y) -> (x < z).\nintros x y z H; rewrite H; auto.\nQed.\nTheorem eq_Rgt_trans_l : forall x y z, (x = z) -> (x > y) -> (z > y).\nintros x y z H; rewrite H; auto.\nQed.\n",
                "context_tokens": 736,
                "proof_start_offset": 32195,
                "proof_end_offset": 32302,
                "proof": "Theorem eq_Rgt_trans_r : forall x y z, (y = z) -> (x > y) -> (x > z).\nProof.\nintros x y z H; rewrite H; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem eq_Rgt_trans_r : forall x y z, (y = z) -> (x > y) -> (x > z).\nintros x y H; rewrite H; auto.\nQed.",
                    "Theorem eq_Rgt_trans_r : forall x y z, (y = z) -> (x > y) -> (x > z).\nintros x y H; rewrite H; auto.\nQed.",
                    "Theorem eq_Rgt_trans_r : forall x y z, (y = z) -> (x > y) -> (x > z).\nintros x y z H; rewrite H; auto.\nQed.",
                    "Theorem eq_Rgt_trans_r : forall x y z, (y = z) -> (x > y) -> (x > z).\nintros x y z H; rewrite H; auto.\nQed.",
                    "Theorem eq_Rgt_trans_r : forall x y z, (y = z) -> (x > y) -> (x > z).\nintros x y z H; rewrite H; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/PolAux.v",
                "context": " forall n m p : R, (0 < p)%R -> (p * n < p * m)%R -> (n < m)%R.\nintros n m p H H1; case (Rle_or_lt m n); auto; intros H2.\nabsurd (p * n < p * m)%R; auto with real.\napply Rle_not_lt; apply Rmult_le_compat_l; auto with real.\nQed.\n\nTheorem Rmult_lt_neg_compat_l_rev:\n  forall n m p : R, (p < 0)%R -> (p * n < p * m)%R -> (m < n)%R.\nintros n m p H H1; case (Rle_or_lt n m); auto; intros H2.\nabsurd (p * n < p * m)%R; auto with real.\napply Rle_not_lt; apply Rmult_le_neg_compat_l; auto with real.\nQed.\n\nTheorem Rmult_ge_compat_l_rev:\n  forall n m p : R, (p > 0)%R -> (p * n >= p * m)%R -> (n >= m)%R.\nintros n m p H H1;\n apply Rle_ge; apply Rmult_le_compat_l_rev with p; auto with real.\nQed.\n\nTheorem Rmult_ge_neg_compat_l_rev:\n  forall n m p : R, (0 > p)%R -> (p * n >= p * m)%R -> (m >= n)%R.\nintros n m p H H1;\n apply Rle_ge; apply Rmult_le_neg_compat_l_rev with p; auto with real.\nQed.\n\nTheorem Rmult_gt_compat_l_rev:\n  forall n m p : R, (p > 0)%R -> (p * n > p * m)%R -> (n > m)%R.\nintros n m p H H1;\n red; apply Rmult_lt_compat_l_rev with p; auto with real.\nQed.\n\nTheorem Rmult_gt_neg_compat_l_rev:\n  forall n m p : R, (0 > p)%R -> (p * n > p * m)%R -> (m > n)%R.\nintros n m p H H1;\n red; apply Rmult_lt_neg_compat_l_rev with p; auto with real.\nQed.\n\n(* For replace *)\n\nTheorem eq_Rlt_trans_l : forall x y z, (x = z) -> (x < y) -> (z < y).\nintros x y z H; rewrite H; auto.\nQed.\nTheorem eq_Rlt_trans_r : forall x y z, (y = z) -> (x < y) -> (x < z).\nintros x y z H; rewrite H; auto.\nQed.\nTheorem eq_Rgt_trans_l : forall x y z, (x = z) -> (x > y) -> (z > y).\nintros x y z H; rewrite H; auto.\nQed.\nTheorem eq_Rgt_trans_r : forall x y z, (y = z) -> (x > y) -> (x > z).\nintros x y z H; rewrite H; auto.\nQed.\n",
                "context_tokens": 736,
                "proof_start_offset": 32303,
                "proof_end_offset": 32412,
                "proof": "Theorem eq_Rle_trans_l : forall x y z, (x = z) -> (x <= y) -> (z <= y).\nProof.\nintros x y z H; rewrite H; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem eq_Rle_trans_l : forall x y z, (x = z) -> (x <= y) -> (z <= y).\nintros x y z H; rewrite H; auto.\nQed.",
                    "Theorem eq_Rle_trans_l : forall x y z, (x = z) -> (x <= y) -> (z <= y).\nintros x y z H; rewrite H; auto.\nQed.",
                    "Theorem eq_Rle_trans_l : forall x y z, (x = z) -> (x <= y) -> (z <= y).\nintros x y H; rewrite H; auto.\nQed.",
                    "Theorem eq_Rle_trans_l : forall x y z, (x = z) -> (x <= y) -> (z <= y).\nintros x y H; rewrite H; auto.\nQed.",
                    "Theorem eq_Rle_trans_l : forall x y z, (x = z) -> (x <= y) -> (z <= y).\nintros x y H; rewrite H; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/PolAux.v",
                "context": " a Z *)\nLtac RCst t :=\n  match t with\n   | R0 => constr:(Z0)\n   | R1 => constr:(Zpos xH)\n   | Rplus?e1?e2 =>\n       match (RCst e1) with\n        false => constr:(false)\n      |?e3 => match (RCst e2) with\n                 false => constr:(false)\n              | ?e4 =>  eval vm_compute in (Zplus e3  e4)\n              end\n      end\n   | Rminus?e1?e2 =>\n       match (RCst e1) with\n        false => constr:(false)\n      |?e3 => match (RCst e2) with\n                 false => constr:(false)\n              | ?e4 => eval vm_compute in (Zminus e3  e4)\n              end\n      end\n   | Rmult?e1?e2 =>\n       match (RCst e1) with\n        false => constr:(false)\n      |?e3 => match (RCst e2) with\n                 false => constr:(false)\n              | ?e4 => eval vm_compute in (Zmult e3  e4)\n              end\n      end\n   | Ropp?e1 =>\n       match (RCst e1) with\n        false => constr:(false)\n      |?e3 => eval vm_compute in (Z.opp e3)\n      end\n   | IZR?e1 =>\n       match (ZCst e1) with\n        false => constr:(false)\n      |?e3 => e3\n      end\n\n   | _ => constr:(false)\n end.\n\n\n(* Remove the Z.abs_nat of a number, unfortunately stops at\n   the first Z.abs_nat x where x is not a number *)\n\nLtac clean_zabs term :=\n  match term with\n   context id [(Z.abs_nat?X)] =>\n     match is_ZCst X with\n       true =>\n         let x := eval vm_compute in (Z.abs_nat X) in\n         let y := context id [x] in\n           clean_zabs y\n     | false => term\n     end\n    | _ => term\n  end.\n\n(* Remove the Z.abs_N of a number, unfortunately stops at\n   the first Z.abs_nat x where x is not a number *)\n\nLtac clean_zabs_N term :=\n  match term with\n   context id [(Z.abs_N?X)] =>\n     match is_ZCst X with\n       true =>\n         let x := eval vm_compute in (Z.abs_N X) in\n         let y := context id [x] in\n           clean_zabs_N y\n     | false => term\n     end\n    | _ => term\n  end.\n\n(* Equality test for Ltac *)\n\nLtac eqterm t1 t2 :=\n  match constr:((t1,t2)) with (?X,?X) => true | _ => false end.\n\n(* For replace *)\n\nTheorem trans_equal_r : forall (A: Set) (x y z:A), y = z -> x = y -> x = z.\nintros; apply trans_equal with y; auto.\nQed.\n\n(* Theorems for nat *)\n\nOpen Scope nat_scope.\n\nTheorem plus_eq_compat_l: forall a b c, b = c -> a + b = a + c.\nintros; apply f_equal2 with (f := plus); auto.\nQed.\n\n",
                "context_tokens": 741,
                "proof_start_offset": 4809,
                "proof_end_offset": 4938,
                "proof": "Theorem plus_neg_compat_l: forall a b c, b <> c -> a + b <> a + c.\nProof.\nintros a b c H H1; case H.\napply plus_reg_l with a; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem plus_neg_compat_l: forall a b c, b <> c -> a + b <> a + c.\nintros; apply plus_neg_compat_l; auto.\nQed.",
                    "Theorem plus_neg_compat_l: forall a b c, b <> c -> a + b <> a + c.\nintros; apply plus_neg_compat_l.\nQed.",
                    "Theorem plus_neg_compat_l: forall a b c, b <> c -> a + b <> a + c.\nintros; apply plus_neg_compat_l.\nQed.",
                    "Theorem plus_neg_compat_l: forall a b c, b <> c -> a + b <> a + c.\nintros; apply plus_le_compat_l; auto.\nQed.",
                    "Theorem plus_neg_compat_l: forall a b c, b <> c -> a + b <> a + c.\nintros; apply plus_le_compat_l; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/PolAux.v",
                "context": "false)\n      |?e3 => match (RCst e2) with\n                 false => constr:(false)\n              | ?e4 =>  eval vm_compute in (Zplus e3  e4)\n              end\n      end\n   | Rminus?e1?e2 =>\n       match (RCst e1) with\n        false => constr:(false)\n      |?e3 => match (RCst e2) with\n                 false => constr:(false)\n              | ?e4 => eval vm_compute in (Zminus e3  e4)\n              end\n      end\n   | Rmult?e1?e2 =>\n       match (RCst e1) with\n        false => constr:(false)\n      |?e3 => match (RCst e2) with\n                 false => constr:(false)\n              | ?e4 => eval vm_compute in (Zmult e3  e4)\n              end\n      end\n   | Ropp?e1 =>\n       match (RCst e1) with\n        false => constr:(false)\n      |?e3 => eval vm_compute in (Z.opp e3)\n      end\n   | IZR?e1 =>\n       match (ZCst e1) with\n        false => constr:(false)\n      |?e3 => e3\n      end\n\n   | _ => constr:(false)\n end.\n\n\n(* Remove the Z.abs_nat of a number, unfortunately stops at\n   the first Z.abs_nat x where x is not a number *)\n\nLtac clean_zabs term :=\n  match term with\n   context id [(Z.abs_nat?X)] =>\n     match is_ZCst X with\n       true =>\n         let x := eval vm_compute in (Z.abs_nat X) in\n         let y := context id [x] in\n           clean_zabs y\n     | false => term\n     end\n    | _ => term\n  end.\n\n(* Remove the Z.abs_N of a number, unfortunately stops at\n   the first Z.abs_nat x where x is not a number *)\n\nLtac clean_zabs_N term :=\n  match term with\n   context id [(Z.abs_N?X)] =>\n     match is_ZCst X with\n       true =>\n         let x := eval vm_compute in (Z.abs_N X) in\n         let y := context id [x] in\n           clean_zabs_N y\n     | false => term\n     end\n    | _ => term\n  end.\n\n(* Equality test for Ltac *)\n\nLtac eqterm t1 t2 :=\n  match constr:((t1,t2)) with (?X,?X) => true | _ => false end.\n\n(* For replace *)\n\nTheorem trans_equal_r : forall (A: Set) (x y z:A), y = z -> x = y -> x = z.\nintros; apply trans_equal with y; auto.\nQed.\n\n(* Theorems for nat *)\n\nOpen Scope nat_scope.\n\nTheorem plus_eq_compat_l: forall a b c, b = c -> a + b = a + c.\nintros; apply f_equal2 with (f := plus); auto.\nQed.\n\nTheorem plus_neg_compat_l: forall a b c, b <> c -> a + b <> a + c.\nintros a b c H H1; case H.\napply plus_reg_l with a; auto.\nQed.\n\n",
                "context_tokens": 739,
                "proof_start_offset": 4940,
                "proof_end_offset": 5073,
                "proof": "Theorem plus_ge_compat_l: forall n m p : nat, n >= m -> p + n >= p + m.\nProof.\nintros n m p H; unfold ge; apply plus_le_compat_l; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem plus_ge_compat_l: forall n m p : nat, n >= m -> p + n >= p + m.\nintros; apply plus_le_compat_l.\nQed.",
                    "Theorem plus_ge_compat_l: forall n m p : nat, n >= m -> p + n >= p + m.\nintros; apply plus_le_compat_l; auto.\nQed.",
                    "Theorem plus_ge_compat_l: forall n m p : nat, n >= m -> p + n >= p + m.\nintros; apply plus_le_compat_l.\nQed.",
                    "Theorem plus_ge_compat_l: forall n m p : nat, n >= m -> p + n >= p + m.\nintros; apply plus_le_compat_l.\nQed.",
                    "Theorem plus_ge_compat_l: forall n m p : nat, n >= m -> p + n >= p + m.\nintros; apply plus_lt_compat_l; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/PolAux.v",
                "context": "e1?e2 =>\n       match (RCst e1) with\n        false => constr:(false)\n      |?e3 => match (RCst e2) with\n                 false => constr:(false)\n              | ?e4 => eval vm_compute in (Zminus e3  e4)\n              end\n      end\n   | Rmult?e1?e2 =>\n       match (RCst e1) with\n        false => constr:(false)\n      |?e3 => match (RCst e2) with\n                 false => constr:(false)\n              | ?e4 => eval vm_compute in (Zmult e3  e4)\n              end\n      end\n   | Ropp?e1 =>\n       match (RCst e1) with\n        false => constr:(false)\n      |?e3 => eval vm_compute in (Z.opp e3)\n      end\n   | IZR?e1 =>\n       match (ZCst e1) with\n        false => constr:(false)\n      |?e3 => e3\n      end\n\n   | _ => constr:(false)\n end.\n\n\n(* Remove the Z.abs_nat of a number, unfortunately stops at\n   the first Z.abs_nat x where x is not a number *)\n\nLtac clean_zabs term :=\n  match term with\n   context id [(Z.abs_nat?X)] =>\n     match is_ZCst X with\n       true =>\n         let x := eval vm_compute in (Z.abs_nat X) in\n         let y := context id [x] in\n           clean_zabs y\n     | false => term\n     end\n    | _ => term\n  end.\n\n(* Remove the Z.abs_N of a number, unfortunately stops at\n   the first Z.abs_nat x where x is not a number *)\n\nLtac clean_zabs_N term :=\n  match term with\n   context id [(Z.abs_N?X)] =>\n     match is_ZCst X with\n       true =>\n         let x := eval vm_compute in (Z.abs_N X) in\n         let y := context id [x] in\n           clean_zabs_N y\n     | false => term\n     end\n    | _ => term\n  end.\n\n(* Equality test for Ltac *)\n\nLtac eqterm t1 t2 :=\n  match constr:((t1,t2)) with (?X,?X) => true | _ => false end.\n\n(* For replace *)\n\nTheorem trans_equal_r : forall (A: Set) (x y z:A), y = z -> x = y -> x = z.\nintros; apply trans_equal with y; auto.\nQed.\n\n(* Theorems for nat *)\n\nOpen Scope nat_scope.\n\nTheorem plus_eq_compat_l: forall a b c, b = c -> a + b = a + c.\nintros; apply f_equal2 with (f := plus); auto.\nQed.\n\nTheorem plus_neg_compat_l: forall a b c, b <> c -> a + b <> a + c.\nintros a b c H H1; case H.\napply plus_reg_l with a; auto.\nQed.\n\nTheorem plus_ge_compat_l: forall n m p : nat, n >= m -> p + n >= p + m.\nintros n m p H; unfold ge; apply plus_le_compat_l; auto.\nQed.\n\n",
                "context_tokens": 741,
                "proof_start_offset": 5075,
                "proof_end_offset": 5184,
                "proof": "Theorem plus_neg_reg_l: forall a b c, a + b <> a + c -> b <> c.\nProof.\nintros a b c H H1; case H; subst; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem plus_neg_reg_l: forall a b c, a + b <> a + c -> b <> c.\nintros; apply plus_le_reg_l with (f := plus_le_reg_l a b c); auto.\nQed.",
                    "Theorem plus_neg_reg_l: forall a b c, a + b <> a + c -> b <> c.\nintros; apply plus_le_reg_l with a; auto.\nQed.",
                    "Theorem plus_neg_reg_l: forall a b c, a + b <> a + c -> b <> c.\nintros; apply plus_lt_reg_l with a; auto.\nQed.",
                    "Theorem plus_neg_reg_l: forall a b c, a + b <> a + c -> b <> c.\nintros; apply plus_le_reg_l; auto.\nQed.",
                    "Theorem plus_neg_reg_l: forall a b c, a + b <> a + c -> b <> c.\nintros; apply plus_le_reg_l with a; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/PolAux.v",
                "context": " eval vm_compute in (Zminus e3  e4)\n              end\n      end\n   | Rmult?e1?e2 =>\n       match (RCst e1) with\n        false => constr:(false)\n      |?e3 => match (RCst e2) with\n                 false => constr:(false)\n              | ?e4 => eval vm_compute in (Zmult e3  e4)\n              end\n      end\n   | Ropp?e1 =>\n       match (RCst e1) with\n        false => constr:(false)\n      |?e3 => eval vm_compute in (Z.opp e3)\n      end\n   | IZR?e1 =>\n       match (ZCst e1) with\n        false => constr:(false)\n      |?e3 => e3\n      end\n\n   | _ => constr:(false)\n end.\n\n\n(* Remove the Z.abs_nat of a number, unfortunately stops at\n   the first Z.abs_nat x where x is not a number *)\n\nLtac clean_zabs term :=\n  match term with\n   context id [(Z.abs_nat?X)] =>\n     match is_ZCst X with\n       true =>\n         let x := eval vm_compute in (Z.abs_nat X) in\n         let y := context id [x] in\n           clean_zabs y\n     | false => term\n     end\n    | _ => term\n  end.\n\n(* Remove the Z.abs_N of a number, unfortunately stops at\n   the first Z.abs_nat x where x is not a number *)\n\nLtac clean_zabs_N term :=\n  match term with\n   context id [(Z.abs_N?X)] =>\n     match is_ZCst X with\n       true =>\n         let x := eval vm_compute in (Z.abs_N X) in\n         let y := context id [x] in\n           clean_zabs_N y\n     | false => term\n     end\n    | _ => term\n  end.\n\n(* Equality test for Ltac *)\n\nLtac eqterm t1 t2 :=\n  match constr:((t1,t2)) with (?X,?X) => true | _ => false end.\n\n(* For replace *)\n\nTheorem trans_equal_r : forall (A: Set) (x y z:A), y = z -> x = y -> x = z.\nintros; apply trans_equal with y; auto.\nQed.\n\n(* Theorems for nat *)\n\nOpen Scope nat_scope.\n\nTheorem plus_eq_compat_l: forall a b c, b = c -> a + b = a + c.\nintros; apply f_equal2 with (f := plus); auto.\nQed.\n\nTheorem plus_neg_compat_l: forall a b c, b <> c -> a + b <> a + c.\nintros a b c H H1; case H.\napply plus_reg_l with a; auto.\nQed.\n\nTheorem plus_ge_compat_l: forall n m p : nat, n >= m -> p + n >= p + m.\nintros n m p H; unfold ge; apply plus_le_compat_l; auto.\nQed.\n\nTheorem plus_neg_reg_l: forall a b c,  a + b <> a + c -> b <> c.\nintros a b c H H1; case H; subst; auto.\nQed.\n\n",
                "context_tokens": 739,
                "proof_start_offset": 5186,
                "proof_end_offset": 5320,
                "proof": "Theorem plus_ge_reg_l: forall n m p : nat, p + n >= p + m -> n >= m.\nProof.\nintros n m p H; unfold ge; apply plus_le_reg_l with p; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem plus_ge_reg_l: forall n m p : nat, p + n >= p + m -> n >= m.\nintros; apply plus_le_reg_l with (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plusQed.",
                    "Theorem plus_ge_reg_l: forall n m p : nat, p + n >= p + m -> n >= m.\nintros; apply plus_le_reg_l with (f := plus_le_reg_l n m p); auto.\nQed.",
                    "Theorem plus_ge_reg_l: forall n m p : nat, p + n >= p + m -> n >= m.\nintros; apply plus_lt_reg_l with (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plus_comm (f := plusQed.",
                    "Theorem plus_ge_reg_l: forall n m p : nat, p + n >= p + m -> n >= m.\nintros; apply plus_le_reg_l with n; auto.\nQed.",
                    "Theorem plus_ge_reg_l: forall n m p : nat, p + n >= p + m -> n >= m.\nintros; apply plus_le_compat_l; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/PolAux.v",
                "context": " | ?e4 => eval vm_compute in (Zmult e3  e4)\n              end\n      end\n   | Ropp?e1 =>\n       match (RCst e1) with\n        false => constr:(false)\n      |?e3 => eval vm_compute in (Z.opp e3)\n      end\n   | IZR?e1 =>\n       match (ZCst e1) with\n        false => constr:(false)\n      |?e3 => e3\n      end\n\n   | _ => constr:(false)\n end.\n\n\n(* Remove the Z.abs_nat of a number, unfortunately stops at\n   the first Z.abs_nat x where x is not a number *)\n\nLtac clean_zabs term :=\n  match term with\n   context id [(Z.abs_nat?X)] =>\n     match is_ZCst X with\n       true =>\n         let x := eval vm_compute in (Z.abs_nat X) in\n         let y := context id [x] in\n           clean_zabs y\n     | false => term\n     end\n    | _ => term\n  end.\n\n(* Remove the Z.abs_N of a number, unfortunately stops at\n   the first Z.abs_nat x where x is not a number *)\n\nLtac clean_zabs_N term :=\n  match term with\n   context id [(Z.abs_N?X)] =>\n     match is_ZCst X with\n       true =>\n         let x := eval vm_compute in (Z.abs_N X) in\n         let y := context id [x] in\n           clean_zabs_N y\n     | false => term\n     end\n    | _ => term\n  end.\n\n(* Equality test for Ltac *)\n\nLtac eqterm t1 t2 :=\n  match constr:((t1,t2)) with (?X,?X) => true | _ => false end.\n\n(* For replace *)\n\nTheorem trans_equal_r : forall (A: Set) (x y z:A), y = z -> x = y -> x = z.\nintros; apply trans_equal with y; auto.\nQed.\n\n(* Theorems for nat *)\n\nOpen Scope nat_scope.\n\nTheorem plus_eq_compat_l: forall a b c, b = c -> a + b = a + c.\nintros; apply f_equal2 with (f := plus); auto.\nQed.\n\nTheorem plus_neg_compat_l: forall a b c, b <> c -> a + b <> a + c.\nintros a b c H H1; case H.\napply plus_reg_l with a; auto.\nQed.\n\nTheorem plus_ge_compat_l: forall n m p : nat, n >= m -> p + n >= p + m.\nintros n m p H; unfold ge; apply plus_le_compat_l; auto.\nQed.\n\nTheorem plus_neg_reg_l: forall a b c,  a + b <> a + c -> b <> c.\nintros a b c H H1; case H; subst; auto.\nQed.\n\nTheorem plus_ge_reg_l: forall n m p : nat, p + n >= p + m -> n >= m.\nintros n m p H; unfold ge; apply plus_le_reg_l with p; auto.\nQed.\n\n(* For replace *)\n",
                "context_tokens": 736,
                "proof_start_offset": 5340,
                "proof_end_offset": 5446,
                "proof": "Theorem eq_lt_trans_l : forall x y z, (x = z) -> (x < y) -> (z < y).\nProof.\nintros x y z H; rewrite H; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem eq_lt_trans_l : forall x y z, (x = z) -> (x < y) -> (z < y).\nintros x y z H; case H; subst; auto.\nQed.",
                    "Theorem eq_lt_trans_l : forall x y z, (x = z) -> (x < y) -> (z < y).\nintros; apply plus_gt_reg_r with p; auto.\nQed.",
                    "Theorem eq_lt_trans_l : forall x y z, (x = z) -> (x < y) -> (z < y).\nintros; apply plus_le_compat_l; auto.\nQed.",
                    "Theorem eq_lt_trans_l : forall x y z, (x = z) -> (x < y) -> (z < y).\nintros x y z H; case H; subst; auto.\nQed.",
                    "Theorem eq_lt_trans_l : forall x y z, (x = z) -> (x < y) -> (z < y).\nintros; apply plus_le_reg_r with p; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/ReplaceTest.v",
                "context": "Require Import PolTac.\nRequire Import ZArith.\n\n(* Test for Z *)\nOpen Scope  Z_scope.\n\nLtac cg g := match goal with |- g => idtac end.\n\n\nGoal forall a b c d, a + c = d -> b + d = c + d -> a + b + c = c + d.\nintros a b c d H1 H2.\npolr H1.\nrewrite H1; auto. \nauto.\nQed.\n\nGoal forall a b c d, d = 0 -> a + b + c = c + 0 -> a + b + c = c + d.\nintros a b c d H1 H2.\npolr H1.\nrewrite H1; auto.\nauto.\nQed.\n\nGoal forall a b c d, a + c <= d -> b <= c -> a + b + c <= c + d.\nintros a b c d H1 H2.\npolr H1.\npols.\nauto.\npols.\nauto.\nQed.\n\nGoal forall a b c d,  a + b  <= 0 -> 0 <= d -> a + b + c <= c + d.\nintros.\npolrx (0 < d) P.R P.R 1%Z.\npols.\nauto.\npols.\nauto.\nQed.\n\nGoal forall a b c d, a + c >= d -> b >= c -> a + b + c >= c + d.\nintros.\npolr (a + c < d).\npols.\nauto.\npols.\nauto.\nQed.\n\nGoal forall a b c d, a + b >= 0 -> 0 >= d -> a + b + c >= c + d.\nintros.\npolrx (0 < d) P.R P.R 1%Z.\npols.\nauto.\npols.\nauto.\nQed.\n\n\nGoal forall a b c d, a + c < d -> b <= c -> a + b + c < c + d.\nintros.\npolr (a + c < d).\npols.\nauto.\npols.\nauto.\nQed.\n\n",
                "context_tokens": 485,
                "proof_start_offset": 1028,
                "proof_end_offset": 1154,
                "proof": "Goal forall a b c d, a + b <= 0 -> 0 < d -> a + b + c < c + d.\nProof.\nintros.\npolrx (0 < d) P.R P.R 1%Z.\npols.\nauto.\npols.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Goal forall a b c d, a + b <= 0 -> 0 < d -> a + b + c < c + d.\nintros.\nring.\nQed.",
                    "Goal forall a b c d, a + b <= 0 -> 0 < d -> a + b + c < c + d.\nintros.\nring.\nQed.",
                    "Goal forall a b c d, a + b <= 0 -> 0 < d -> a + b + c < c + d.\nintros.\nsimpl.\nintros.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nQed.",
                    "Goal forall a b c d, a + b <= 0 -> 0 < d -> a + b + c < c + d.\nintros.\nsimpl.\nring.\nQed.",
                    "Goal forall a b c d, a + b <= 0 -> 0 < d -> a + b + c < c + d.\nintros.\nring.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/ReplaceTest.v",
                "context": "Require Import PolTac.\nRequire Import ZArith.\n\n(* Test for Z *)\nOpen Scope  Z_scope.\n\nLtac cg g := match goal with |- g => idtac end.\n\n\nGoal forall a b c d, a + c = d -> b + d = c + d -> a + b + c = c + d.\nintros a b c d H1 H2.\npolr H1.\nrewrite H1; auto. \nauto.\nQed.\n\nGoal forall a b c d, d = 0 -> a + b + c = c + 0 -> a + b + c = c + d.\nintros a b c d H1 H2.\npolr H1.\nrewrite H1; auto.\nauto.\nQed.\n\nGoal forall a b c d, a + c <= d -> b <= c -> a + b + c <= c + d.\nintros a b c d H1 H2.\npolr H1.\npols.\nauto.\npols.\nauto.\nQed.\n\nGoal forall a b c d,  a + b  <= 0 -> 0 <= d -> a + b + c <= c + d.\nintros.\npolrx (0 < d) P.R P.R 1%Z.\npols.\nauto.\npols.\nauto.\nQed.\n\nGoal forall a b c d, a + c >= d -> b >= c -> a + b + c >= c + d.\nintros.\npolr (a + c < d).\npols.\nauto.\npols.\nauto.\nQed.\n\nGoal forall a b c d, a + b >= 0 -> 0 >= d -> a + b + c >= c + d.\nintros.\npolrx (0 < d) P.R P.R 1%Z.\npols.\nauto.\npols.\nauto.\nQed.\n\n\nGoal forall a b c d, a + c < d -> b <= c -> a + b + c < c + d.\nintros.\npolr (a + c < d).\npols.\nauto.\npols.\nauto.\nQed.\n\nGoal forall a b c d, a + b <= 0 -> 0 < d -> a + b + c < c + d.\nintros.\npolrx (0 < d) P.R P.R 1%Z.\npols.\nauto.\npols.\nauto.\nQed.\n\n",
                "context_tokens": 552,
                "proof_start_offset": 1156,
                "proof_end_offset": 1273,
                "proof": "Goal forall a b c d, a + c > d -> c <= b -> a + b + c > c + d.\nProof.\nintros.\npolr (a + c < d).\npols.\nauto.\npols.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Goal forall a b c d, a + c > d -> c <= b -> a + b + c > c + d.\nintros.\nring.\nQed.",
                    "Goal forall a b c d, a + c > d -> c <= b -> a + b + c > c + d.\nintros.\nsimpl.\nring.\nQed.",
                    "Goal forall a b c d, a + c > d -> c <= b -> a + b + c > c + d.\nintros.\nring.\nQed.",
                    "Goal forall a b c d, a + c > d -> c <= b -> a + b + c > c + d.\nintros.\nsimpl.\nring.\nQed.",
                    "Goal forall a b c d, a + c > d -> c <= b -> a + b + c > c + d.\nintros.\nring.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/ReplaceTest.v",
                "context": "Require Import PolTac.\nRequire Import ZArith.\n\n(* Test for Z *)\nOpen Scope  Z_scope.\n\nLtac cg g := match goal with |- g => idtac end.\n\n\nGoal forall a b c d, a + c = d -> b + d = c + d -> a + b + c = c + d.\nintros a b c d H1 H2.\npolr H1.\nrewrite H1; auto. \nauto.\nQed.\n\nGoal forall a b c d, d = 0 -> a + b + c = c + 0 -> a + b + c = c + d.\nintros a b c d H1 H2.\npolr H1.\nrewrite H1; auto.\nauto.\nQed.\n\nGoal forall a b c d, a + c <= d -> b <= c -> a + b + c <= c + d.\nintros a b c d H1 H2.\npolr H1.\npols.\nauto.\npols.\nauto.\nQed.\n\nGoal forall a b c d,  a + b  <= 0 -> 0 <= d -> a + b + c <= c + d.\nintros.\npolrx (0 < d) P.R P.R 1%Z.\npols.\nauto.\npols.\nauto.\nQed.\n\nGoal forall a b c d, a + c >= d -> b >= c -> a + b + c >= c + d.\nintros.\npolr (a + c < d).\npols.\nauto.\npols.\nauto.\nQed.\n\nGoal forall a b c d, a + b >= 0 -> 0 >= d -> a + b + c >= c + d.\nintros.\npolrx (0 < d) P.R P.R 1%Z.\npols.\nauto.\npols.\nauto.\nQed.\n\n\nGoal forall a b c d, a + c < d -> b <= c -> a + b + c < c + d.\nintros.\npolr (a + c < d).\npols.\nauto.\npols.\nauto.\nQed.\n\nGoal forall a b c d, a + b <= 0 -> 0 < d -> a + b + c < c + d.\nintros.\npolrx (0 < d) P.R P.R 1%Z.\npols.\nauto.\npols.\nauto.\nQed.\n\nGoal forall a b c d, a + c > d -> c <= b -> a + b + c > c + d.\nintros.\npolr (a + c < d).\npols.\nauto.\npols.\nauto.\nQed.\n\n",
                "context_tokens": 611,
                "proof_start_offset": 1275,
                "proof_end_offset": 1401,
                "proof": "Goal forall a b c d, 0 <= a + b -> 0 > d -> a + b + c > c + d.\nProof.\nintros.\npolrx (0 < d) P.R P.R 1%Z.\npols.\nauto.\npols.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Goal forall a b c d, 0 <= a + b -> 0 > d -> a + b + c > c + d.\nintros.\nring.\nQed.",
                    "Goal forall a b c d, 0 <= a + b -> 0 > d -> a + b + c > c + d.\nintros.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nQed.",
                    "Goal forall a b c d, 0 <= a + b -> 0 > d -> a + b + c > c + d.\nintros.\nring.\nQed.",
                    "Goal forall a b c d, 0 <= a + b -> 0 > d -> a + b + c > c + d.\nintros.\nring.\nQed.",
                    "Goal forall a b c d, 0 <= a + b -> 0 > d -> a + b + c > c + d.\nintros.\nreplace (a + c) with (a + c + c + d).\nintros.\nreplace (a + c) with (a + c + c + d).\nintros.\nreplace (a + c) with (a + c + c + d).\nintros.\nreplace (a + c + c) with (a + c + c + d).\nintros.\nreplace (a + c + c) with (a + c + c + d).\nintros.\nreplace (a + c + c + d) with (a + c + d).\nrewrite H0; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/ReplaceTest.v",
                "context": "Require Import PolTac.\nRequire Import ZArith.\n\n(* Test for Z *)\nOpen Scope  Z_scope.\n\nLtac cg g := match goal with |- g => idtac end.\n\n\nGoal forall a b c d, a + c = d -> b + d = c + d -> a + b + c = c + d.\nintros a b c d H1 H2.\npolr H1.\nrewrite H1; auto. \nauto.\nQed.\n\nGoal forall a b c d, d = 0 -> a + b + c = c + 0 -> a + b + c = c + d.\nintros a b c d H1 H2.\npolr H1.\nrewrite H1; auto.\nauto.\nQed.\n\nGoal forall a b c d, a + c <= d -> b <= c -> a + b + c <= c + d.\nintros a b c d H1 H2.\npolr H1.\npols.\nauto.\npols.\nauto.\nQed.\n\nGoal forall a b c d,  a + b  <= 0 -> 0 <= d -> a + b + c <= c + d.\nintros.\npolrx (0 < d) P.R P.R 1%Z.\npols.\nauto.\npols.\nauto.\nQed.\n\nGoal forall a b c d, a + c >= d -> b >= c -> a + b + c >= c + d.\nintros.\npolr (a + c < d).\npols.\nauto.\npols.\nauto.\nQed.\n\nGoal forall a b c d, a + b >= 0 -> 0 >= d -> a + b + c >= c + d.\nintros.\npolrx (0 < d) P.R P.R 1%Z.\npols.\nauto.\npols.\nauto.\nQed.\n\n\nGoal forall a b c d, a + c < d -> b <= c -> a + b + c < c + d.\nintros.\npolr (a + c < d).\npols.\nauto.\npols.\nauto.\nQed.\n\nGoal forall a b c d, a + b <= 0 -> 0 < d -> a + b + c < c + d.\nintros.\npolrx (0 < d) P.R P.R 1%Z.\npols.\nauto.\npols.\nauto.\nQed.\n\nGoal forall a b c d, a + c > d -> c <= b -> a + b + c > c + d.\nintros.\npolr (a + c < d).\npols.\nauto.\npols.\nauto.\nQed.\n\nGoal forall a b c d, 0 <= a + b -> 0 > d -> a + b + c > c + d.\nintros.\npolrx (0 < d) P.R P.R 1%Z.\npols.\nauto.\npols.\nauto.\nQed.\n\n(* Test for N *)\nRequire Import NAux.\nOpen Scope  N_scope.\n\n",
                "context_tokens": 699,
                "proof_start_offset": 1463,
                "proof_end_offset": 1579,
                "proof": "Goal forall a b c d, a + c = d -> b = c -> a + b + c = c + d.\nProof.\nintros.\npolr (a + c = d).\npols.\nauto.\npols.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Goal forall a b c d, a + c = d -> b = c -> a + b + c = c + d.\nintros.\nsimpl.\nring.\nQed.",
                    "Goal forall a b c d, a + c = d -> b = c -> a + b + c = c + d.\nintros.\nreplace (a + b + c) with (a + c + c + d).\nintros.\nreplace (a + c + c + d) with (a + c + d).\nrewrite H.\nauto.\nQed.",
                    "Goal forall a b c d, a + c = d -> b = c -> a + b + c = c + d.\nintros.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nQed.",
                    "Goal forall a b c d, a + c = d -> b = c -> a + b + c = c + d.\nintros.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nsimpl.\nQed.",
                    "Goal forall a b c d, a + c = d -> b = c -> a + b + c = c + d.\nintros.\nsimpl.\nsimpl.\nauto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/ReplaceTest.v",
                "context": "Open Scope  Z_scope.\n\nLtac cg g := match goal with |- g => idtac end.\n\n\nGoal forall a b c d, a + c = d -> b + d = c + d -> a + b + c = c + d.\nintros a b c d H1 H2.\npolr H1.\nrewrite H1; auto. \nauto.\nQed.\n\nGoal forall a b c d, d = 0 -> a + b + c = c + 0 -> a + b + c = c + d.\nintros a b c d H1 H2.\npolr H1.\nrewrite H1; auto.\nauto.\nQed.\n\nGoal forall a b c d, a + c <= d -> b <= c -> a + b + c <= c + d.\nintros a b c d H1 H2.\npolr H1.\npols.\nauto.\npols.\nauto.\nQed.\n\nGoal forall a b c d,  a + b  <= 0 -> 0 <= d -> a + b + c <= c + d.\nintros.\npolrx (0 < d) P.R P.R 1%Z.\npols.\nauto.\npols.\nauto.\nQed.\n\nGoal forall a b c d, a + c >= d -> b >= c -> a + b + c >= c + d.\nintros.\npolr (a + c < d).\npols.\nauto.\npols.\nauto.\nQed.\n\nGoal forall a b c d, a + b >= 0 -> 0 >= d -> a + b + c >= c + d.\nintros.\npolrx (0 < d) P.R P.R 1%Z.\npols.\nauto.\npols.\nauto.\nQed.\n\n\nGoal forall a b c d, a + c < d -> b <= c -> a + b + c < c + d.\nintros.\npolr (a + c < d).\npols.\nauto.\npols.\nauto.\nQed.\n\nGoal forall a b c d, a + b <= 0 -> 0 < d -> a + b + c < c + d.\nintros.\npolrx (0 < d) P.R P.R 1%Z.\npols.\nauto.\npols.\nauto.\nQed.\n\nGoal forall a b c d, a + c > d -> c <= b -> a + b + c > c + d.\nintros.\npolr (a + c < d).\npols.\nauto.\npols.\nauto.\nQed.\n\nGoal forall a b c d, 0 <= a + b -> 0 > d -> a + b + c > c + d.\nintros.\npolrx (0 < d) P.R P.R 1%Z.\npols.\nauto.\npols.\nauto.\nQed.\n\n(* Test for N *)\nRequire Import NAux.\nOpen Scope  N_scope.\n\nGoal forall a b c d, a + c = d -> b = c -> a + b + c = c + d.\nintros.\npolr (a + c = d).\npols.\nauto.\npols.\nauto.\nQed.\n\n",
                "context_tokens": 740,
                "proof_start_offset": 1581,
                "proof_end_offset": 1693,
                "proof": "Goal forall a b c d, 0 = d -> a + b = 0 -> a + b + c = c + d.\nProof.\nintros.\npolr (d = 0).\npols.\nauto.\npols.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Goal forall a b c d, 0 = d -> a + b = 0 -> a + b + c = c + d.\nintros.\nrings.\nAbort.\n\nGoal forall a b c d, 0 <= a + b + c + d + d = 0 -> a + b + c + d.\nintros.\nrings.\n\nQed.",
                    "Goal forall a b c d, 0 = d -> a + b = 0 -> a + b + c = c + d.\nintros.\nring.\nQed.",
                    "Goal forall a b c d, 0 = d -> a + b = 0 -> a + b + c = c + d.\nintros.\nsimpl.\nintros.\nsimpl.\nsimpl.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nQed.",
                    "Goal forall a b c d, 0 = d -> a + b = 0 -> a + b + c = c + d.\nintros.\nsimpl in |- *.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite H0.\nrewrite HQed.",
                    "Goal forall a b c d, 0 = d -> a + b = 0 -> a + b + c = c + d.\nintros.\nrewrite <- H.\nring.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/Rex.v",
                "context": "Require Import Reals.\nRequire Import PolTac.\n\nOpen Scope R_scope.\n \nTheorem pols_test1: forall (x y : R), x < y ->  (x + x < y + x).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test2: forall (x y : R), 0 < y ->  (x  < x + y).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test3: forall (x y : R), 0 < y * y ->  ((x + y) * (x - y) < x * x).\nintros.\npols.\nauto with real.\nQed.\n\nTheorem pols_test4:\n forall (x y : R),\n x * x  < y * y ->  ((x + y) * (x + y) < 2 * (x * y + y * y)).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test5:\n forall (x y z : R),\n x * (z + 2) < y * (2 * x + 1)->  (x * ((z + y) + 2) < y * (3 * x + 1)).\nintros.\npols.\nauto.\nQed.\n\n",
                "context_tokens": 293,
                "proof_start_offset": 635,
                "proof_end_offset": 724,
                "proof": "Theorem polf_test1: forall x y, (0 <= x -> 1 <= y -> x <= x * y)%R.\nProof.\nintros.\npolf.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem polf_test1: forall x y, (0 <= x -> 1 <= y -> x <= x * y)%R.\nintros.\nrewrite <- (pow2s_test3 x y).\nauto.\nQed.",
                    "Theorem polf_test1: forall x y, (0 <= x -> 1 <= y -> x <= x * y)%R.\nintros.\nrewrite <- (pow2s_test2s_test2s_test2s_test2s_test2s_test2s_test2s_test2s2_test2s2_test2s2_test2s2_test2s2_test2s2_test2s2_test2s3_test2s3_test2s3_test2s3_test2s3_test2s3_test3s3_test2s3_test2s3_test2s3_test3s3_test3s3_test3s3_test3s4_test3s3_test3s4s4_test3s4_test3s3_test3s3_test3s3_test3s3_test3s3_test3s4s4_test3s4_test3s4s4_test3s4_test3s4_test3s4s4_test3s4_test3s4s4_test3s4_test3s4s5_test3s4_test3s4_Qed.",
                    "Theorem polf_test1: forall x y, (0 <= x -> 1 <= y -> x <= x * y)%R.\nintros.\napply (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (conj (Qed.",
                    "Theorem polf_test1: forall x y, (0 <= x -> 1 <= y -> x <= x * y)%R.\nintros.\nrewrite <- (pow2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_Qed.",
                    "Theorem polf_test1: forall x y, (0 <= x -> 1 <= y -> x <= x * y)%R.\nintros.\nreplace (x * y) with (y * (y * x) * (y * x)).\napply (f_test2 x y).\napply (f_test2 x y).\napply (f_test2 x y).\napply (f_test2 x y).\napply (f_test2 x y).\napply (f_test2 x y).\napply (f_test2 x y).\napply (f_test2 x y).\napply (f_test2 x y).\napply (f_test2 x y).\napply (f_test2 x y).\napply (f_test2 x y).\napply (f_test2 x y).\napply (f_test2 x y).\napply (f_test2 x y).\napply (f_test2 x y).\napply (f_test2 x y).\napply (f_test2 x y).\napply (f_test2 x y).\napply (f_test2 x y).\napply (f_test2 x y).\napply (f_test2 x y).\napply (f_test2 x y).\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/Rex.v",
                "context": "Require Import Reals.\nRequire Import PolTac.\n\nOpen Scope R_scope.\n \nTheorem pols_test1: forall (x y : R), x < y ->  (x + x < y + x).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test2: forall (x y : R), 0 < y ->  (x  < x + y).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test3: forall (x y : R), 0 < y * y ->  ((x + y) * (x - y) < x * x).\nintros.\npols.\nauto with real.\nQed.\n\nTheorem pols_test4:\n forall (x y : R),\n x * x  < y * y ->  ((x + y) * (x + y) < 2 * (x * y + y * y)).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test5:\n forall (x y z : R),\n x * (z + 2) < y * (2 * x + 1)->  (x * ((z + y) + 2) < y * (3 * x + 1)).\nintros.\npols.\nauto.\nQed.\n\nTheorem polf_test1: forall x y, (0 <= x -> 1 <= y -> x  <=  x  * y)%R.\nintros.\npolf.\nQed.\n\n",
                "context_tokens": 336,
                "proof_start_offset": 726,
                "proof_end_offset": 820,
                "proof": "Theorem polf_test2: forall x y, (0 < x -> x <= x * y -> 1 <= y)%R.\nProof.\nintros.\nhyp_polf H0.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem polf_test2: forall x y, (0 < x -> x <= x * y -> 1 <= y)%R.\nintros.\nrewrite <- (pow2_test2_test2 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _Qed.",
                    "Theorem polf_test2: forall x y, (0 < x -> x <= x * y -> 1 <= y)%R.\nintros.\napply (pow2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_testQed.",
                    "Theorem polf_test2: forall x y, (0 < x -> x <= x * y -> 1 <= y)%R.\nintros.\napply (pow2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_testQed.",
                    "Theorem polf_test2: forall x y, (0 < x -> x <= x * y -> 1 <= y)%R.\nintros.\nrewrite <- (pow2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2_test2f_test2f_test2f_test2f_test2_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2f_test2_test2f_test2f_test2f_test2f_test2f_test2f_test2f_testQed.",
                    "Theorem polf_test2: forall x y, (0 < x -> x <= x * y -> 1 <= y)%R.\nintros.\nrewrite (pow2_test2 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _Qed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/Rex.v",
                "context": "Require Import Reals.\nRequire Import PolTac.\n\nOpen Scope R_scope.\n \nTheorem pols_test1: forall (x y : R), x < y ->  (x + x < y + x).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test2: forall (x y : R), 0 < y ->  (x  < x + y).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test3: forall (x y : R), 0 < y * y ->  ((x + y) * (x - y) < x * x).\nintros.\npols.\nauto with real.\nQed.\n\nTheorem pols_test4:\n forall (x y : R),\n x * x  < y * y ->  ((x + y) * (x + y) < 2 * (x * y + y * y)).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test5:\n forall (x y z : R),\n x * (z + 2) < y * (2 * x + 1)->  (x * ((z + y) + 2) < y * (3 * x + 1)).\nintros.\npols.\nauto.\nQed.\n\nTheorem polf_test1: forall x y, (0 <= x -> 1 <= y -> x  <=  x  * y)%R.\nintros.\npolf.\nQed.\n\nTheorem polf_test2: forall x y, (0 < x -> x  <= x  * y -> 1 <= y)%R.\nintros.\nhyp_polf H0.\nQed.\n\n",
                "context_tokens": 382,
                "proof_start_offset": 822,
                "proof_end_offset": 950,
                "proof": "Theorem polr_test1: forall x y z, (x + z) < y -> x + y + z < 2*y.\nProof.\nintros x y z H.\npolr H.\npols.\nauto.\npols.\nauto with real.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem polr_test1: forall x y z, (x + z) < y -> x + y + z < 2*y.\nintros.\nrewrite <- (pow2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_Qed.",
                    "Theorem polr_test1: forall x y z, (x + z) < y -> x + y + z < 2*y.\nintros.\napply pol_test2.\nQed.",
                    "Theorem polr_test1: forall x y z, (x + z) < y -> x + y + z < 2*y.\nintros.\napply pol_test2 with (1 := x * y * y * y + 1)).\nintros.\napply pol_test2 with (1 := x * y * y * y * (y + 1)).\nintros.\napply pol_test2 with (1 := x * y * y * (y + 1)).\nintros.\napply pol_test2 with (1 := x * y * y * (y + 1))).\nintros.\napply pol_test2 with (1 := x * y * (y + 1)).\nintros.\napply pol_test2 with (1 := x * y * (y + 1)).\nintros.\napply pol_test2 with (1 := x * y * (y + 1)).\nintros.\napply pol_test2 with (1 := x * y * (y + 1)).\nintros.\napply pol_test2 with (1 := x * y * (y + 1)).\nintros.\napply pol_test2 with (1 := x * y * (y + 1)).\nintros.\napply pol_test2 with (1 := x * y * (y + 1)).\nintros.\napplyQed.",
                    "Theorem polr_test1: forall x y z, (x + z) < y -> x + y + z < 2*y.\nintros.\napply pol_test2_1.\nQed.",
                    "Theorem polr_test1: forall x y z, (x + z) < y -> x + y + z < 2*y.\nintros.\napply pol_test2.\napply pol_test2.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/RSignTac.v",
                "context": " (-0)%R; auto with real.\nQed.\n\nTheorem Rlt_sign_neg_pos: forall x y, (x < 0 -> 0 < y  -> x * y < 0)%R.\nintros x y H1 H2; apply Rlt_pos_neg; replace (- (x * y))%R with (-x * y)%R; auto with real; try ring.\napply Rmult_lt_0_compat; auto with real.\nQed.\n\n\n\nTheorem Rge_sign_neg_neg: forall x y, (0 >= x -> 0 >= y  -> x * y >= 0)%R.\nintros; apply Rle_ge; apply Rle_sign_neg_neg; auto with real.\nQed.\n\nTheorem Rge_sign_pos_pos: forall x y, (x >= 0 -> y >= 0  -> x * y >= 0)%R.\nintros; apply Rle_ge; apply Rle_sign_pos_pos; auto with real.\nQed.\n\nTheorem Rge_neg_pos: forall x, (0 >= -x -> x >= 0)%R.\nintros x H; rewrite <- (Ropp_involutive 0);  rewrite <- (Ropp_involutive x); auto with real.\napply Rle_ge;apply Ropp_le_contravar; auto with real.\nrewrite Ropp_0; auto with real.\nQed.\n\nTheorem Rge_sign_neg_pos: forall x y: R, (0 >= x -> y >= 0  -> 0>= x * y)%R.\nintros; apply Rle_ge; apply Rle_sign_neg_pos; auto with real.\nQed.\n\nTheorem Rge_sign_pos_neg: forall x y, (x >= 0 -> 0 >= y  -> 0 >= x * y)%R.\nintros; apply Rle_ge; apply Rle_sign_pos_neg; auto with real.\nQed.\n\n\nTheorem Rgt_sign_neg_neg: forall x y, (0 > x -> 0 > y  -> x * y > 0)%R.\nintros; red;  apply Rlt_sign_neg_neg; auto with real.\nQed.\n\nTheorem Rgt_sign_pos_pos: forall x y, (x > 0 -> y > 0  -> x * y > 0)%R.\nintros; red; apply Rlt_sign_pos_pos; auto with real.\nQed.\n\nTheorem Rgt_neg_pos: forall x, (0 > -x -> x > 0)%R.\nintros x H; rewrite <- (Ropp_involutive 0);  rewrite <- (Ropp_involutive x); auto with real.\nred;apply Ropp_lt_contravar; auto with real.\nrewrite Ropp_0; auto with real.\nQed.\n\nTheorem Rgt_sign_neg_pos: forall x y, (0 > x -> y > 0  -> 0> x * y)%R.\nintros; red; apply Rlt_sign_neg_pos; auto with real.\nQed.\n\nTheorem Rgt_sign_pos_neg: forall x y, (x > 0 -> 0 > y  -> 0 > x * y)%R.\nintros; red; apply Rlt_sign_pos_neg; auto with real.\nQed.\n\n(* Theorems to simplify the hyp 0? x * y and x * y? 0 where? is < > <= >= *)\n\n",
                "context_tokens": 733,
                "proof_start_offset": 3923,
                "proof_end_offset": 4160,
                "proof": "Theorem Rle_sign_pos_pos_rev: forall x y: R, (0 < x -> 0 <= x * y -> 0 <= y)%R.\nProof.\nintros x y H1 H2; case (Rle_or_lt 0 y); auto with real.\nintros H3; absurd (0 <= x * y)%R; auto with real.\napply Rlt_not_le;apply Rlt_sign_pos_neg; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Rle_sign_pos_pos_rev: forall x y: R, (0 < x -> 0 <= x * y -> 0 <= y)%R.\nintros; red; apply Rlt_sign_pos_pos_pos; auto with real.\nQed.",
                    "Theorem Rle_sign_pos_pos_rev: forall x y: R, (0 < x -> 0 <= x * y -> 0 <= y)%R.\nintros; red; apply Rlt_sign_pos_pos_pos; auto with real.\nQed.",
                    "Theorem Rle_sign_pos_pos_rev: forall x y: R, (0 < x -> 0 <= x * y -> 0 <= y)%R.\nintros; red; apply Rlt_sign_pos_pos; auto with real.\nQed.",
                    "Theorem Rle_sign_pos_pos_rev: forall x y: R, (0 < x -> 0 <= x * y -> 0 <= y)%R.\nintros; red; apply Rlt_sign_neg_pos; auto with real.\nQed.",
                    "Theorem Rle_sign_pos_pos_rev: forall x y: R, (0 < x -> 0 <= x * y -> 0 <= y)%R.\nintros; red; apply Rlt_sign_pos_pos_pos; auto with real.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/RSignTac.v",
                "context": ".\n\n\n\nTheorem Rge_sign_neg_neg: forall x y, (0 >= x -> 0 >= y  -> x * y >= 0)%R.\nintros; apply Rle_ge; apply Rle_sign_neg_neg; auto with real.\nQed.\n\nTheorem Rge_sign_pos_pos: forall x y, (x >= 0 -> y >= 0  -> x * y >= 0)%R.\nintros; apply Rle_ge; apply Rle_sign_pos_pos; auto with real.\nQed.\n\nTheorem Rge_neg_pos: forall x, (0 >= -x -> x >= 0)%R.\nintros x H; rewrite <- (Ropp_involutive 0);  rewrite <- (Ropp_involutive x); auto with real.\napply Rle_ge;apply Ropp_le_contravar; auto with real.\nrewrite Ropp_0; auto with real.\nQed.\n\nTheorem Rge_sign_neg_pos: forall x y: R, (0 >= x -> y >= 0  -> 0>= x * y)%R.\nintros; apply Rle_ge; apply Rle_sign_neg_pos; auto with real.\nQed.\n\nTheorem Rge_sign_pos_neg: forall x y, (x >= 0 -> 0 >= y  -> 0 >= x * y)%R.\nintros; apply Rle_ge; apply Rle_sign_pos_neg; auto with real.\nQed.\n\n\nTheorem Rgt_sign_neg_neg: forall x y, (0 > x -> 0 > y  -> x * y > 0)%R.\nintros; red;  apply Rlt_sign_neg_neg; auto with real.\nQed.\n\nTheorem Rgt_sign_pos_pos: forall x y, (x > 0 -> y > 0  -> x * y > 0)%R.\nintros; red; apply Rlt_sign_pos_pos; auto with real.\nQed.\n\nTheorem Rgt_neg_pos: forall x, (0 > -x -> x > 0)%R.\nintros x H; rewrite <- (Ropp_involutive 0);  rewrite <- (Ropp_involutive x); auto with real.\nred;apply Ropp_lt_contravar; auto with real.\nrewrite Ropp_0; auto with real.\nQed.\n\nTheorem Rgt_sign_neg_pos: forall x y, (0 > x -> y > 0  -> 0> x * y)%R.\nintros; red; apply Rlt_sign_neg_pos; auto with real.\nQed.\n\nTheorem Rgt_sign_pos_neg: forall x y, (x > 0 -> 0 > y  -> 0 > x * y)%R.\nintros; red; apply Rlt_sign_pos_neg; auto with real.\nQed.\n\n(* Theorems to simplify the hyp 0? x * y and x * y? 0 where? is < > <= >= *)\n\nTheorem Rle_sign_pos_pos_rev: forall x y: R, (0 < x -> 0 <= x * y -> 0 <= y)%R.\nintros x y H1 H2; case (Rle_or_lt 0 y); auto with real.\nintros H3; absurd (0 <= x * y)%R; auto with real.\napply Rlt_not_le;apply Rlt_sign_pos_neg; auto.\nQed.\n\n",
                "context_tokens": 733,
                "proof_start_offset": 4162,
                "proof_end_offset": 4401,
                "proof": "Theorem Rle_sign_neg_neg_rev: forall x y: R, (x < 0 -> 0 <= x * y -> y <= 0)%R.\nProof.\nintros x y H1 H2; case (Rle_or_lt y 0); auto with real.\nintros H3; absurd (0 <= x * y)%R; auto with real.\napply Rlt_not_le;apply Rlt_sign_neg_pos; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Rle_sign_neg_neg_rev: forall x y: R, (x < 0 -> 0 <= x * y -> y <= 0)%R.\nintros x y H; case (Rle_or_lt 0 y); auto with real.\nQed.",
                    "Theorem Rle_sign_neg_neg_rev: forall x y: R, (x < 0 -> 0 <= x * y -> y <= 0)%R.\nintros x y H1 H2; case (Rle_or_lt 0 y); auto with real.\nintros H1 H2; absurd (0 <= x * y)%R; auto with real.\nintros H3; absurd (0 <= x * y)%R; auto with real.\nintros H3; absurd (0 <= x * y)%R; auto with real.\nintros H3; absurd (0 <= x * y)%R; auto with real.\nintros H4; absurd (0 <= x * y)%R; auto with real.\nintros H4; absurd (0 <= x * y)%R; auto with real.\nintros H4; absurd (0 <= x * y)%R; auto with real.\nintros H4; absurd (0 <= x * y)%R; auto with real.\nintros H4; absurd (0 <= x * y)%R; auto with real.\nintros H4; absurd (0 <= x * y)%R; auto with real.\nintros H4; absurd (0 <= x * y)%R; auto with real.\nintros H5; absurd (0 <= x * y)%R; auto with real.\nintros HQed.",
                    "Theorem Rle_sign_neg_neg_rev: forall x y: R, (x < 0 -> 0 <= x * y -> y <= 0)%R.\nintros x y H1; case (Rle_or_lt 0 y); auto with real.\nintros H1; absurd (0 <= x * y)%R; auto with real.\napply Rlt_le; auto with real.\nQed.",
                    "Theorem Rle_sign_neg_neg_rev: forall x y: R, (x < 0 -> 0 <= x * y -> y <= 0)%R.\nintros x y H; case (Rle_or_lt 0 y); auto with real.\nintros H1; absurd (0 <= x * y)%R; auto with real.\nQed.",
                    "Theorem Rle_sign_neg_neg_rev: forall x y: R, (x < 0 -> 0 <= x * y -> y <= 0)%R.\nintros x y H1; case (Rle_or_lt 0 y); auto with real.\nintros H1; absurd (0 <= x * y)%R; auto with real.\napply Rlt_le; auto with real.\napply Rle_ge; auto with real.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/RSignTac.v",
                "context": "sign_pos_pos; auto with real.\nQed.\n\nTheorem Rge_neg_pos: forall x, (0 >= -x -> x >= 0)%R.\nintros x H; rewrite <- (Ropp_involutive 0);  rewrite <- (Ropp_involutive x); auto with real.\napply Rle_ge;apply Ropp_le_contravar; auto with real.\nrewrite Ropp_0; auto with real.\nQed.\n\nTheorem Rge_sign_neg_pos: forall x y: R, (0 >= x -> y >= 0  -> 0>= x * y)%R.\nintros; apply Rle_ge; apply Rle_sign_neg_pos; auto with real.\nQed.\n\nTheorem Rge_sign_pos_neg: forall x y, (x >= 0 -> 0 >= y  -> 0 >= x * y)%R.\nintros; apply Rle_ge; apply Rle_sign_pos_neg; auto with real.\nQed.\n\n\nTheorem Rgt_sign_neg_neg: forall x y, (0 > x -> 0 > y  -> x * y > 0)%R.\nintros; red;  apply Rlt_sign_neg_neg; auto with real.\nQed.\n\nTheorem Rgt_sign_pos_pos: forall x y, (x > 0 -> y > 0  -> x * y > 0)%R.\nintros; red; apply Rlt_sign_pos_pos; auto with real.\nQed.\n\nTheorem Rgt_neg_pos: forall x, (0 > -x -> x > 0)%R.\nintros x H; rewrite <- (Ropp_involutive 0);  rewrite <- (Ropp_involutive x); auto with real.\nred;apply Ropp_lt_contravar; auto with real.\nrewrite Ropp_0; auto with real.\nQed.\n\nTheorem Rgt_sign_neg_pos: forall x y, (0 > x -> y > 0  -> 0> x * y)%R.\nintros; red; apply Rlt_sign_neg_pos; auto with real.\nQed.\n\nTheorem Rgt_sign_pos_neg: forall x y, (x > 0 -> 0 > y  -> 0 > x * y)%R.\nintros; red; apply Rlt_sign_pos_neg; auto with real.\nQed.\n\n(* Theorems to simplify the hyp 0? x * y and x * y? 0 where? is < > <= >= *)\n\nTheorem Rle_sign_pos_pos_rev: forall x y: R, (0 < x -> 0 <= x * y -> 0 <= y)%R.\nintros x y H1 H2; case (Rle_or_lt 0 y); auto with real.\nintros H3; absurd (0 <= x * y)%R; auto with real.\napply Rlt_not_le;apply Rlt_sign_pos_neg; auto.\nQed.\n\nTheorem Rle_sign_neg_neg_rev: forall x y: R, (x < 0 -> 0 <= x * y ->  y <= 0)%R.\nintros x y H1 H2; case (Rle_or_lt y  0); auto with real.\nintros H3; absurd (0 <= x * y)%R; auto with real.\napply Rlt_not_le;apply Rlt_sign_neg_pos; auto.\nQed.\n\n",
                "context_tokens": 733,
                "proof_start_offset": 4403,
                "proof_end_offset": 4640,
                "proof": "Theorem Rle_sign_pos_neg_rev: forall x y: R, (0 < x -> x * y <= 0 -> y <= 0)%R.\nProof.\nintros x y H1 H2; case (Rle_or_lt y 0); auto with real.\nintros H3; absurd (x * y <= 0)%R; auto with real.\napply Rlt_not_le;apply Rlt_sign_pos_pos; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Rle_sign_pos_neg_rev: forall x y: R, (0 < x -> x * y <= 0 -> y <= 0)%R.\nintros x y H1; case (Rle_or_lt 0 y 0); auto with real.\nintros H2; absurd (0 <= x * y)%R; auto with real.\napply Rlt_le_trans with (1 < x * y)%R; auto with real.\napply Rlt_le_trans with (1 < x * y)%R; auto with real.\napply Rlt_le_trans with (1 < x * y)%R; auto with real.\napply Rlt_le_trans with (1 < x * y)%R; auto with real.\napply Rlt_le_trans with (1 < y)%R; auto with real.\napply Rlt_le_trans with (1 < y)%R; auto with real.\napply Rlt_le_trans with (1 < x * y)%R; auto with real.\napply Rlt_le_trans with (1 < y)%R; auto with real.\napply Rlt_le_trans with (1 < y)%R; auto with real.\napply Rlt_le_trans with (1 < y)%R; auto with real.\napply Rlt_le_trans with (1 < y)%R;Qed.",
                    "Theorem Rle_sign_pos_neg_rev: forall x y: R, (0 < x -> x * y <= 0 -> y <= 0)%R.\nintros x y H1; case (Rle_or_lt 0 y); auto with real.\nintros H2; absurd (0 < x * y)%R; auto with real.\napply Rlt_not_le; auto with real.\napply Rlt_not_le; auto with real.\nQed.",
                    "Theorem Rle_sign_pos_neg_rev: forall x y: R, (0 < x -> x * y <= 0 -> y <= 0)%R.\nintros x y H1; case (Rle_or_lt 0 y); auto with real.\nintros H1; absurd (0 <= x * y)%R; auto with real.\napply Rlt_not_le; auto with real.\nQed.",
                    "Theorem Rle_sign_pos_neg_rev: forall x y: R, (0 < x -> x * y <= 0 -> y <= 0)%R.\nintros x y H1; case (Rle_or_lt 0 y); auto with real.\nintros H1; absurd (0 <= x * y)%R; auto with real.\nQed.",
                    "Theorem Rle_sign_pos_neg_rev: forall x y: R, (0 < x -> x * y <= 0 -> y <= 0)%R.\nintros x y H1; case (Rle_or_lt 0 y); auto with real.\nintros H1; absurd (0 <= x * y)%R; auto with real.\nintros H1; absurd (0 <= x * y)%R; auto with real.\napply Rlt_le; auto with real.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/RSignTac.v",
                "context": "neg_pos: forall x y: R, (0 >= x -> y >= 0  -> 0>= x * y)%R.\nintros; apply Rle_ge; apply Rle_sign_neg_pos; auto with real.\nQed.\n\nTheorem Rge_sign_pos_neg: forall x y, (x >= 0 -> 0 >= y  -> 0 >= x * y)%R.\nintros; apply Rle_ge; apply Rle_sign_pos_neg; auto with real.\nQed.\n\n\nTheorem Rgt_sign_neg_neg: forall x y, (0 > x -> 0 > y  -> x * y > 0)%R.\nintros; red;  apply Rlt_sign_neg_neg; auto with real.\nQed.\n\nTheorem Rgt_sign_pos_pos: forall x y, (x > 0 -> y > 0  -> x * y > 0)%R.\nintros; red; apply Rlt_sign_pos_pos; auto with real.\nQed.\n\nTheorem Rgt_neg_pos: forall x, (0 > -x -> x > 0)%R.\nintros x H; rewrite <- (Ropp_involutive 0);  rewrite <- (Ropp_involutive x); auto with real.\nred;apply Ropp_lt_contravar; auto with real.\nrewrite Ropp_0; auto with real.\nQed.\n\nTheorem Rgt_sign_neg_pos: forall x y, (0 > x -> y > 0  -> 0> x * y)%R.\nintros; red; apply Rlt_sign_neg_pos; auto with real.\nQed.\n\nTheorem Rgt_sign_pos_neg: forall x y, (x > 0 -> 0 > y  -> 0 > x * y)%R.\nintros; red; apply Rlt_sign_pos_neg; auto with real.\nQed.\n\n(* Theorems to simplify the hyp 0? x * y and x * y? 0 where? is < > <= >= *)\n\nTheorem Rle_sign_pos_pos_rev: forall x y: R, (0 < x -> 0 <= x * y -> 0 <= y)%R.\nintros x y H1 H2; case (Rle_or_lt 0 y); auto with real.\nintros H3; absurd (0 <= x * y)%R; auto with real.\napply Rlt_not_le;apply Rlt_sign_pos_neg; auto.\nQed.\n\nTheorem Rle_sign_neg_neg_rev: forall x y: R, (x < 0 -> 0 <= x * y ->  y <= 0)%R.\nintros x y H1 H2; case (Rle_or_lt y  0); auto with real.\nintros H3; absurd (0 <= x * y)%R; auto with real.\napply Rlt_not_le;apply Rlt_sign_neg_pos; auto.\nQed.\n\nTheorem Rle_sign_pos_neg_rev: forall x y: R, (0 < x -> x * y <= 0 -> y <= 0)%R.\nintros x y H1 H2; case (Rle_or_lt y 0); auto with real.\nintros H3; absurd (x * y <= 0)%R; auto with real.\napply Rlt_not_le;apply Rlt_sign_pos_pos; auto.\nQed.\n\n",
                "context_tokens": 733,
                "proof_start_offset": 4642,
                "proof_end_offset": 4880,
                "proof": "Theorem Rle_sign_neg_pos_rev: forall x y: R, (x < 0 -> x * y <= 0 -> 0 <= y)%R.\nProof.\nintros x y H1 H2; case (Rle_or_lt 0 y); auto with real.\nintros H3; absurd (x * y <= 0)%R; auto with real.\napply Rlt_not_le;apply Rlt_sign_neg_neg; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem Rle_sign_neg_pos_rev: forall x y: R, (x < 0 -> x * y <= 0 -> 0 <= y)%R.\nintros x y H1; case (Rle_or_lt 0 y); auto.\nintros H2; absurd (0 <= x * y)%R; auto with real.\nintros H3; absurd (0 <= x * y)%R; auto with real.\napply Rlt_not_le; auto with real.\nintros H4; absurd (0 <= x * y)%R; auto with real.\napply Rlt_not_le; auto with real.\nintros H4; absurd (0 <= x * y)%R; auto with real.\napply Rlt_not_le; auto with real.\napply Rlt_not_le; auto with real.\napply Rlt_not_le; auto with real.\napply Rlt_not_le; auto with real.\napply Rlt_not_le; auto with real.\napply Rlt_not_le; auto with real.\napply Rlt_not_le; auto with real.\napply Rlt_not_le; auto with real.\napply Rlt_not_le; auto with real.\napply Rlt_not_le; auto with real.\napply Rlt_not_le; auto with real.\napply Rlt_notQed.",
                    "Theorem Rle_sign_neg_pos_rev: forall x y: R, (x < 0 -> x * y <= 0 -> 0 <= y)%R.\nintros x y H1; case (Rle_or_lt 0 y); auto with real.\nintros H3; absurd (0 <= x * y)%R; auto with real.\napply Rlt_le_trans with (1 := H2); auto with real.\napply Rlt_le_trans with (1 := H3); auto with real.\nQed.",
                    "Theorem Rle_sign_neg_pos_rev: forall x y: R, (x < 0 -> x * y <= 0 -> 0 <= y)%R.\nintros x y H1 H2; case (Rle_or_lt 0 y 0); auto with real.\nintros H3; absurd (0 <= x * y)%R; auto with real.\napply Rle_ge; auto with real.\nQed.",
                    "Theorem Rle_sign_neg_pos_rev: forall x y: R, (x < 0 -> x * y <= 0 -> 0 <= y)%R.\nintros x y H1; case (Rle_or_lt 0 x y); auto with real.\nintros H1; absurd (0 <= x * y)%R; auto with real.\napply Rlt_not_le; auto with real.\nQed.",
                    "Theorem Rle_sign_neg_pos_rev: forall x y: R, (x < 0 -> x * y <= 0 -> 0 <= y)%R.\nintros x y H1 H2; case (Rle_or_lt 0 y 0); auto with real.\nintros H4; absurd (0 <= x * y)%R; auto with real.\nintros H5; absurd (0 <= x * y)%R; auto with real.\nintros H5; absurd (0 <= x * y)%R; auto with real.\napply Rlt_le_trans with (1 < x * y)%R; auto with real.\napply Rlt_le_trans with (1 < x * y)%R; auto with real.\napply Rlt_le_trans with (1 < x * y)%R; auto with real.\napply Rlt_le_trans with (1 < x * y)%R; auto with real.\napply Rlt_le_trans with (1 < x * y)%R; auto with real.\napply Rlt_le_trans with (1 < y)%R; auto with real.\napply Rlt_le_trans with (1 < x * y)%R; auto with real.\napply Rlt_le_trans with (1 < x * y)%R; auto with real.\napply Rlt_le_trans with (Qed."
                ]
            },
            {
                "filepath": "./coq_projects/PolTac/Zex.v",
                "context": "Require Import ZArith.\nRequire Import PolTac.\n\nOpen Scope Z_scope.\n\nTheorem pols_test1: forall (x y : Z), x < y ->  (x + x < y + x).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test2: forall (x y : Z), y < 0 ->  (x + y < x).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test3: forall (x y : Z), 0 < y * y ->  ((x + y) * (x - y) < x * x).\nintros.\npols.\nauto with zarith.\nQed.\n \nTheorem pols_test4:\n forall (x y : Z),\n x * x  < y * y ->  ((x + y) * (x + y) < 2 * (x * y + y * y)).\nintros.\npols.\nauto.\nQed.\n \nTheorem pols_test5:\n forall x y z, x + y * (y + z) = 2 * z ->  2 * x + y * (y + z) = (x + z) + z.\nintros.\npols.\nauto.\nQed.\n\nTheorem polf_test1: forall x y, (0 <= x -> 1 <= y -> x  <= x  * y)%Z.\nintros.\npolf.\nQed.\n\n",
                "context_tokens": 326,
                "proof_start_offset": 711,
                "proof_end_offset": 805,
                "proof": "Theorem polf_test2: forall x y, (0 < x -> x <= x * y -> 1 <= y)%Z.\nProof.\nintros.\nhyp_polf H0.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem polf_test2: forall x y, (0 < x -> x <= x * y -> 1 <= y)%Z.\nintros.\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nrewrite (mult_comm x y).\nQed.",
                    "Theorem polf_test2: forall x y, (0 < x -> x <= x * y -> 1 <= y)%Z.\nintros.\nrewrite <- (pow2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_Qed.",
                    "Theorem polf_test2: forall x y, (0 < x -> x <= x * y -> 1 <= y)%Z.\nintros.\nrewrite <- (pow2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_test2_Qed.",
                    "Theorem polf_test2: forall x y, (0 < x -> x <= x * y -> 1 <= y)%Z.\nintros.\nrewrite <- (f_test2 x y).\nrewrite <- (f_test2 x y).\nrewrite <- (f_test2 x y).\nrewrite <- (f_test2 x y).\nrewrite <- (f_test2 x y).\nrewrite <- (f_test2 x y).\nrewrite <- (f_test2 x y).\nrewrite <- (f_test2 x y).\nrewrite <- (f_test2 x y).\nrewrite <- (f_test2 x y).\nrewrite <- (f_test2 x y).\nrewrite <- (f_test2 x y).\nrewrite <- (f_test2 x y).\nrewrite <- (f_test2 x y).\nrewrite <- (f_test2 x y).\nrewrite <- (f_test2 x y).\nrewrite <- (f_test2 x y).\nrewrite <- (f_test2 x y).\nrewrite <- (f_test2 x y).\nrewrite <- (f_test2 x y).\nrewrite <- (f_test2 x y).\nrewrite <- (f_test2 x y).\nrewrite <- (f_test2 x y).Qed.",
                    "Theorem polf_test2: forall x y, (0 < x -> x <= x * y -> 1 <= y)%Z.\nintros.\nrewrite (pows_test2_test2 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _Qed."
                ]
            }
        ],
        "angles": [
            {
                "filepath": "./coq_projects/angles/point_napoleon.v",
                "context": "Set Implicit Arguments.\nUnset Strict Implicit.\nRequire Export point_cocyclicite.\n \nLemma colineaire_sym : forall u v : V, colineaire u v -> colineaire v u.\nunfold colineaire in |- *; intros.\napply regulier with (a := double (cons u v)) (c := double (cons u v)); auto.\napply transitive with (double (plus (cons u v) (cons v u))); auto.\napply transitive with (double zero); auto.\napply transitive with (plus zero zero); auto.\napply compatible; auto.\nQed.\nHint Resolve colineaire_sym.\n \nLemma colineaire_modulo_pi :\n forall u v u' v' : V,\n colineaire u u' ->\n colineaire v v' -> R (double (cons u' v')) (double (cons u v)).\nunfold colineaire in |- *; intros.\napply\n transitive with (double (plus (cons u' u) (plus (cons u v) (cons v v'))));\n auto.\napply\n transitive\n  with (plus (double (cons u' u)) (double (plus (cons u v) (cons v v'))));\n auto.\napply\n transitive\n  with\n    (plus (double (cons u' u))\n       (plus (double (cons u v)) (double (cons v v')))); \n auto.\napply compatible; auto.\napply\n transitive with (plus zero (plus (double (cons u v)) (double (cons v v'))));\n auto.\napply compatible; auto.\ncut (colineaire u' u); intros; auto.\napply transitive with (plus (double (cons u v)) (double (cons v v'))); auto.\napply transitive with (plus (double (cons u v)) zero); auto.\napply compatible; auto.\napply transitive with (plus zero (double (cons u v))); auto.\nQed.\nHint Resolve colineaire_modulo_pi.\n \n",
                "context_tokens": 447,
                "proof_start_offset": 1407,
                "proof_end_offset": 1868,
                "proof": "Lemma orthogonal_opp : forall u v : V, orthogonal u v -> orthogonal u (opp v).\nProof.\nunfold orthogonal in |- *; intros.\napply transitive with (double (plus (cons u v) (cons v (opp v)))); auto.\napply transitive with (plus (double (cons u v)) (double (cons v (opp v)))); auto.\napply transitive with (plus pi (double pi)); auto.\napply compatible; auto.\napply transitive with (plus pi zero); auto.\napply compatible; auto.\napply transitive with (plus zero pi); auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma orthogonal_opp : forall u v : V, orthogonal u v -> orthogonal u (opp v).\nunfold orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal,Qed.",
                    "Lemma orthogonal_opp : forall u v : V, orthogonal u v -> orthogonal u (opp v).\nunfold orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal,Qed.",
                    "Lemma orthogonal_opp : forall u v : V, orthogonal u v -> orthogonal u (opp v).\nunfold orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal,Qed.",
                    "Lemma orthogonal_opp : forall u v : V, orthogonal u v -> orthogonal u (opp v).\nunfold orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal,Qed.",
                    "Lemma orthogonal_opp : forall u v : V, orthogonal u v -> orthogonal u (opp v).\nunfold orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal,Qed."
                ]
            },
            {
                "filepath": "./coq_projects/angles/point_napoleon.v",
                "context": "Set Implicit Arguments.\nUnset Strict Implicit.\nRequire Export point_cocyclicite.\n \nLemma colineaire_sym : forall u v : V, colineaire u v -> colineaire v u.\nunfold colineaire in |- *; intros.\napply regulier with (a := double (cons u v)) (c := double (cons u v)); auto.\napply transitive with (double (plus (cons u v) (cons v u))); auto.\napply transitive with (double zero); auto.\napply transitive with (plus zero zero); auto.\napply compatible; auto.\nQed.\nHint Resolve colineaire_sym.\n \nLemma colineaire_modulo_pi :\n forall u v u' v' : V,\n colineaire u u' ->\n colineaire v v' -> R (double (cons u' v')) (double (cons u v)).\nunfold colineaire in |- *; intros.\napply\n transitive with (double (plus (cons u' u) (plus (cons u v) (cons v v'))));\n auto.\napply\n transitive\n  with (plus (double (cons u' u)) (double (plus (cons u v) (cons v v'))));\n auto.\napply\n transitive\n  with\n    (plus (double (cons u' u))\n       (plus (double (cons u v)) (double (cons v v')))); \n auto.\napply compatible; auto.\napply\n transitive with (plus zero (plus (double (cons u v)) (double (cons v v'))));\n auto.\napply compatible; auto.\ncut (colineaire u' u); intros; auto.\napply transitive with (plus (double (cons u v)) (double (cons v v'))); auto.\napply transitive with (plus (double (cons u v)) zero); auto.\napply compatible; auto.\napply transitive with (plus zero (double (cons u v))); auto.\nQed.\nHint Resolve colineaire_modulo_pi.\n \nLemma orthogonal_opp : forall u v : V, orthogonal u v -> orthogonal u (opp v).\nunfold orthogonal in |- *; intros.\napply transitive with (double (plus (cons u v) (cons v (opp v)))); auto.\napply transitive with (plus (double (cons u v)) (double (cons v (opp v))));\n auto.\napply transitive with (plus pi (double pi)); auto.\napply compatible; auto.\napply transitive with (plus pi zero); auto.\napply compatible; auto.\napply transitive with (plus zero pi); auto.\nQed.\nHint Resolve orthogonal_opp.\n \n",
                "context_tokens": 582,
                "proof_start_offset": 1900,
                "proof_end_offset": 2307,
                "proof": "Lemma orthogonal_colineaire : forall u v w : V, orthogonal u v -> colineaire v w -> orthogonal u w.\nProof.\nunfold colineaire, orthogonal in |- *; intros.\napply transitive with (double (plus (cons u v) (cons v w))); auto.\napply transitive with (plus (double (cons u v)) (double (cons v w))); auto.\napply transitive with (plus pi zero); auto.\napply compatible; auto.\napply transitive with (plus zero pi); auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma orthogonal_colineaire : forall u v w : V, orthogonal u v -> colineaire v w -> orthogonal u w.\nunfold orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal,Qed.",
                    "Lemma orthogonal_colineaire : forall u v w : V, orthogonal u v -> colineaire v w -> orthogonal u w.\nunfold orthogonal in |- *; intros.\napply (sum_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diffQed.",
                    "Lemma orthogonal_colineaire : forall u v w : V, orthogonal u v -> colineaire v w -> orthogonal u w.\nunfold orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal,Qed.",
                    "Lemma orthogonal_colineaire : forall u v w : V, orthogonal u v -> colineaire v w -> orthogonal u w.\nunfold orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal, orthogonal,Qed.",
                    "Lemma orthogonal_colineaire : forall u v w : V, orthogonal u v -> colineaire v w -> orthogonal u w.\nunfold orthogonal in |- *; intros.\napply (map_add (cons u v) (map (cons v w)) (map (cons v w)); auto.\napply (map_add (cons u v) (map (cons v w)); auto.\napply (map_add (cons v v) (map (cons v w)); auto.\napply (map_add (cons v v) (map (cons v w)); auto.\napply (map_add (cons v v) (map (cons v w))); auto.\napply (map_add (cons v v) (map (cons v w)); auto.\napply (map_add (cons v w)); auto.\napply (map_add (cons v w)); auto.\napply (map_add (cons v w)); auto.\napply (map_add (cons v v) (map (cons v w))); auto.\napply (map_add (cons v w)); auto.\napply (map_add (cons v w) (map (cons v w)); auto.\napply (map_add (cons v w)); auto.\napply (map_add (cons v w)); auto.\napply (Qed."
                ]
            },
            {
                "filepath": "./coq_projects/angles/point_napoleon.v",
                "context": "Set Implicit Arguments.\nUnset Strict Implicit.\nRequire Export point_cocyclicite.\n \nLemma colineaire_sym : forall u v : V, colineaire u v -> colineaire v u.\nunfold colineaire in |- *; intros.\napply regulier with (a := double (cons u v)) (c := double (cons u v)); auto.\napply transitive with (double (plus (cons u v) (cons v u))); auto.\napply transitive with (double zero); auto.\napply transitive with (plus zero zero); auto.\napply compatible; auto.\nQed.\nHint Resolve colineaire_sym.\n \nLemma colineaire_modulo_pi :\n forall u v u' v' : V,\n colineaire u u' ->\n colineaire v v' -> R (double (cons u' v')) (double (cons u v)).\nunfold colineaire in |- *; intros.\napply\n transitive with (double (plus (cons u' u) (plus (cons u v) (cons v v'))));\n auto.\napply\n transitive\n  with (plus (double (cons u' u)) (double (plus (cons u v) (cons v v'))));\n auto.\napply\n transitive\n  with\n    (plus (double (cons u' u))\n       (plus (double (cons u v)) (double (cons v v')))); \n auto.\napply compatible; auto.\napply\n transitive with (plus zero (plus (double (cons u v)) (double (cons v v'))));\n auto.\napply compatible; auto.\ncut (colineaire u' u); intros; auto.\napply transitive with (plus (double (cons u v)) (double (cons v v'))); auto.\napply transitive with (plus (double (cons u v)) zero); auto.\napply compatible; auto.\napply transitive with (plus zero (double (cons u v))); auto.\nQed.\nHint Resolve colineaire_modulo_pi.\n \nLemma orthogonal_opp : forall u v : V, orthogonal u v -> orthogonal u (opp v).\nunfold orthogonal in |- *; intros.\napply transitive with (double (plus (cons u v) (cons v (opp v)))); auto.\napply transitive with (plus (double (cons u v)) (double (cons v (opp v))));\n auto.\napply transitive with (plus pi (double pi)); auto.\napply compatible; auto.\napply transitive with (plus pi zero); auto.\napply compatible; auto.\napply transitive with (plus zero pi); auto.\nQed.\nHint Resolve orthogonal_opp.\n \nLemma orthogonal_colineaire :\n forall u v w : V, orthogonal u v -> colineaire v w -> orthogonal u w.\nunfold colineaire, orthogonal in |- *; intros.\napply transitive with (double (plus (cons u v) (cons v w))); auto.\napply transitive with (plus (double (cons u v)) (double (cons v w))); auto.\napply transitive with (plus pi zero); auto.\napply compatible; auto.\napply transitive with (plus zero pi); auto.\nQed.\n \n",
                "context_tokens": 701,
                "proof_start_offset": 2310,
                "proof_end_offset": 2663,
                "proof": "Lemma colineaire_transitive : forall u v w : V, colineaire u v -> colineaire v w -> colineaire u w.\nProof.\nunfold colineaire in |- *; intros.\napply transitive with (double (plus (cons u v) (cons v w))); auto.\napply transitive with (plus (double (cons u v)) (double (cons v w))); auto.\napply transitive with (plus zero zero); auto.\napply compatible; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma colineaire_transitive : forall u v w : V, colineaire u v -> colineaire v w -> colineaire u w.\nunfold is_upper_upper_upper_upper_upper_bound; intros.\napply le_trans with (S (S (cons v w)) (S (cons v w)) (S (cons v w)) (S (cons v w)) (S (cons v w)) (S (cons v w)) (S (cons w w))) (S (cons w w))) (S (cons w w) (S (cons w w))) (S (cons w w)) (S (cons w w)) (S (cons w w))) (S (cons w w)) (S (cons w w)) (S (cons w w)) (S (cons w (cons w w)) (S (cons w w)) (S (cons w w) (S (cons w)) (S (cons w (cons w w))) (S (cons w (cons w w)) (S (cons w (cons w w)) (S (cons w)) (S (cons w (cons w w)) (S (cons w) (S (cons w)) (S (cons w) (S (cons w) (cons w)) (S (cons w (cons w (cons w w)) (Qed.",
                    "Lemma colineaire_transitive : forall u v w : V, colineaire u v -> colineaire v w -> colineaire u w.\nunfold is_upper, dans in |- *; intros.\napply le_trans with (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (SQed.",
                    "Lemma colineaire_transitive : forall u v w : V, colineaire u v -> colineaire v w -> colineaire u w.\nunfold coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent, coherent,Qed.",
                    "Lemma colineaire_transitive : forall u v w : V, colineaire u v -> colineaire v w -> colineaire u w.\nunfold interaire, interaire, interaire, intera, intera, intera, intera, intera, intera, intera, intera, intera, intera, intera, intera, intera, intera, intera, inter, intera, intera, intera, intera, inter, intera, intera, intera, inter, intera, intera, inter, intera, intera, intera, inter, intera, inter, intera, intera, inter, intera, inter, intera, intera, inter, intera, inter, intera, inter, intera, inter, intera, intera, inter, intera, inter, intera, intera, inter, inter, intera, inter, intera, inter, intera, inter, inter, intera, inter, intera, inter, intera, inter, inter, inter, intera, inter, inter, inter, inter, intera, inter, inter, intera, inter, inter, inter, inter, inter, intera, inter, inter, inter, inter, inter, inter, inter, inter, interQed.",
                    "Lemma colineaire_transitive : forall u v w : V, colineaire u v -> colineaire v w -> colineaire u w.\nunfold is_upper, orthogonal in |- *; intros.\napply le_trans with (S (cons v w)); auto.\napply le_trans with (S (cons v w)); auto.\napply le_trans with (S (cons v w)); auto.\napply le_trans with (S (cons v w)); auto.\napply le_trans with (S (cons v w)); auto.\napply le_trans with (S (cons v w)); auto.\napply le_trans with (S (cons v w)); auto.\napply le_trans with (S (cons v w)); auto.\napply le_trans with (S (cons v w)); auto.\napply le_trans with (S (cons v w)); auto.\napply le_trans with (S (cons v w w)); auto.\napply le_trans with (S (cons v w)); auto.\napply le_trans with (S (cons v w v)); auto.\napply le_trans with (S (cons v w w)); auto.\napply le_trans with (S (cons w w)); auto.\napply le_trans with (S (cons w w)); auto.\nQed."
                ]
            }
        ],
        "coq-procrastination": [
            {
                "filepath": "./coq_projects/coq-procrastination/src/Procrastination.v",
                "context": " match goal with |-?G =>\n    match type of G with\n    | Prop => mk_begin_defer_helper_Prop ids H\n    | _ => mk_begin_defer_helper_Type ids H\n    end;\n    cut H; subst H; [| now prove_begin_defer_helper]\n  end.\n\n(* Tests *)\nGoal True.\n  mk_begin_defer_helper tt.\n  intro H; eapply H; clear H.\nAbort.\n\nGoal True.\n  mk_begin_defer_helper (fun a b c : unit => tt).\n  intro H; eapply H; clear H.\nAbort.\n\nGoal nat.\n  mk_begin_defer_helper (fun a b c : unit => tt).\n  intro H; eapply H; clear H.\nAbort.\n\n(* [end defer] helpers.\n\n   [end defer] is called on the second subgoal produced by [begin defer], of the\n   form [exists a.. z, group a.. z], where [group a.. z] has been\n   instantiated by [defer] into something of the form [P1 /\\ P2 /\\... /\\ Pn /\\\n  ?P], where P1.. Pn are the propositions that have been deferred, and [?P] is\n   the \"accumulator\" evar.\n\n   The role of [end defer] is to close the goal, instantiating [?P] with [True],\n   and removing it from the goal.\n\n   This is done by first applying a lemma of the form:\n\n   ```\n   forall A.. Z (G1 G2 : A ->.. -> Z -> Prop),\n   (forall a.. z, G1 a.. z -> G2 a.. z) ->\n   (exists a.. z, G1 a.. z) ->\n   exists a.. z, G2 a.. z\n   ```\n\n   After applying this lemma, [G2] is unified with the current goal (to clean),\n   and [G1] is introduced as an evar. An auxiliary tactic\n   ([cleanup_conj_goal_core], defined below) is called on the first subgoal, and\n   will discharge it, instantiating [G1] with the cleaned-up goal (i.e [P1 /\\ P2\n   /\\... /\\ Pn]).\n\n   The helpers below help generating and proving this lemma, for any number of\n   variables [a].. [z].\n*)\n\n(* Tactic that proves the lemma above for any arity. *)\nLtac prove_end_defer_helper :=\n  introsType;\n  let P1 := fresh in\n  let P2 := fresh in\n  let H1 := fresh in\n  let H2 := fresh in\n  intros P1 P2 H1 H2;\n  unfold Marker.end_defer in *;\n  repeat (let x := fresh \"x\" in destruct H2 as (x & H2); exists x);\n  apply H1; auto.\n\n(* Tests. *)\nGoal forall A (P1 P2 : A -> Prop),\n  (forall a, P1 a -> P2 a) ->\n  (exists a, P1 a) ->\n  Marker.end_defer (exists a, P2 a).\nProof. prove_end_defer_helper. Qed.\n\n",
                "context_tokens": 707,
                "proof_start_offset": 14539,
                "proof_end_offset": 14719,
                "proof": "Goal forall A B (P1 P2 : A -> B -> Prop), (forall a b, P1 a b -> P2 a b) -> (exists a b, P1 a b) -> Marker.end_defer (exists a b, P2 a b).\nProof.\nprove_end_defer_helper.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Goal forall A B (P1 P2 : A -> B -> Prop), (forall a b, P1 a b -> P2 a b) -> (exists a b, P1 a b) -> Marker.end_defer (exists a b, P2 a b).\nProof.\n  intros A B P1 P2 H2 H3 H4; subst.\n  apply H2; clear H3; subst.\n  apply H3; clear H4; subst.\n  apply H3; clear H4; subst.\n  apply H3; clear H4; subst.\n  apply H3; clear H4; subst.\n  apply H3; clear H4; subst.\n  apply H4; clear H4; subst.\n  apply H3; clear H4; subst.\n  apply H3; clear H4; subst.\n  apply H4; clear H4; subst.\n  apply H4; clear H4; subst.\n  apply H4; clear H4; subst.\n  apply H4; clear H4; subst.\n  apply H4; clear H4; subst.\n  apply H4; clear H4; subst.\n  apply H4; clear H4; subst.\n  apply H4; clear H4; subst.\n  apply H4; clear H4; subst.\n  apply H4; clear H4; subst.\n  apply H4; clear H4; subst.\n  apply H4; clear H4; subst.\n  apply H4;Qed.",
                    "Goal forall A B (P1 P2 : A -> B -> Prop), (forall a b, P1 a b -> P2 a b) -> (exists a b, P1 a b) -> Marker.end_defer (exists a b, P2 a b).\nProof.\nintros A B P1 P2 H2 H3 H3 H4 H4 H4 H5 H5 H5 H6 H6 H7 H7 H7 H8 H8 H8 H9 H9 H9 H9 H10 H10 H10 H10 H10 H10 H11 H10 H10 H10 H10 H10 H10 H11 H11 H12 H12 H12 H13 H13 H13 H13 H13 H13 H14 H13 H14 H14 H14 H14 H14 H15 H14 H14 H14 H14 H14 H14 H14 H15 H14 H15 H15 H15 H15 H17 H15 H15 H15 H15 H14 H15 H15 H15 H15 H15 H15 H15 H15 H15 H15 H15 H15 H17 H16 H17 H16 H17 H17 H17 H18 H18 H17 H17 H18 H18 H18 H19 H18 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 H19 HQed.",
                    "Goal forall A B (P1 P2 : A -> B -> Prop), (forall a b, P1 a b -> P2 a b) -> (exists a b, P1 a b) -> Marker.end_defer (exists a b, P2 a b).\nProof.\nintros.\nassert (H1 : forall a, P1 a -> P1 a) -> (exists a, P1 a b).\nintros.\nassert (H2 : forall a, P1 a -> P2 a b).\nintros.\nassert (H2 : forall a, P1 a -> P2 a).\nintros.\nassert (H2 : forall a, P1 a -> P2 a) -> (exists a, P1 a) -> (exists a, P1 a /\\ P2 a)).\nintros.\nassert (H2 : forall a, P2 a -> P2 a).\nintros.\nassert (H2 : forall a, P1 a -> P2 a) -> (exists a, P2 a) -> (exists a, P2 a)) ->\n  (exists a, P2 a).\nintros.\nassert (H2 : forall a, P1 a -> P2 a) -> (exists a, P2 a /\\ P2 a).\nintros.\nassert (H2 : forall a, P1 a -> P2 a) -> (exists a, P1 a) -> (exists a, P2 a) ->Qed.",
                    "Goal forall A B (P1 P2 : A -> B -> Prop), (forall a b, P1 a b -> P2 a b) -> (exists a b, P1 a b) -> Marker.end_defer (exists a b, P2 a b).\nProof.\n  intros A B P1 P2 H2 H3 H4.\n  unfold f_equal.\n  intros P1 H2 H3 H4.\n  unfold f_equal.\n  intros P2 H3 H3.\n  unfold f_equal.\n  intros P2 H3 H4.\n  unfold f_equal.\n  intros P2 H3.\n  unfold f_equal.\n  intros P2 H3.\n  unfold f_equal.\n  intros P2 H3.\n  unfold f_equal.\n  intros P2 H3.\n  unfold f_equal.\n  intros P2 H3.\n  unfold f_equal.\n  intros P3 H3.\n  unfold f_equal.\n  intros P3.\n  unfold f_equal.\n  intros P3 H3.\n  unfold f_equal.\n  intros P3.\n  unfold f_equal.\n  intros P3.\n  unfold f_equal.\n  intros P3 H4.\n  unfold f_equal.\n  intros P3.\n  unfold f_equal.\n  intros P3.\n  unfold f_equal.\n  intros P3 H3.\n  unfold f_equal.\n  intros P3.\n  unfold f_equal.\n  introsQed.",
                    "Goal forall A B (P1 P2 : A -> B -> Prop), (forall a b, P1 a b -> P2 a b) -> (exists a b, P1 a b) -> Marker.end_defer (exists a b, P2 a b).\nProof.\nintros.\n(* Tests *)\n\nGoal forall A B (P1 P2 : A -> Prop),\n  (forall a, P1 a -> P1 a) -> (exists a, P1 a b) -> (exists a, P2 a b).\nProof.\nintros.\n(* Tests *)\nGoal forall A B (P2 : A -> Prop),\n  (forall a, P1 a -> P2 a) -> (exists a, P2 a b).\nProof.\nintros.\n(* Tests *)\nintros.\nAbort.\n\n(* Tests *)\nGoal forall A B (P : A -> Prop),\n  (forall a, P a -> P1 a) -> (exists a, P a).\nProof.\nintros.\n(* Tests *)\nAbort.\n\nGoal forall A B (P : A -> Prop),\n  (forall a, P a -> P a) -> (exists a, P a).\nProof.\nintros.\n(* Tests *)\n\nGoal forall A B (P1 : A -> Prop),\n  (forall a, P a -> P1 a) -> (exists a, P a).\nProof.Qed."
                ]
            }
        ],
        "tree-automata": [
            {
                "filepath": "./coq_projects/tree-automata/bases.v",
                "context": "\nRequire Import EqNat.\nRequire Export Max.\n\nLemma nat_sum : forall n : nat, n = 0 \\/ (exists m : nat, n = S m).\nProof.\n\tsimple induction n. left. reflexivity. intros. right.\n\tsplit with n0. reflexivity.\nQed.\n\nLemma le_n_n : forall n : nat, n <= n.\nProof.\n        simple induction n. trivial.\n        intros. exact (le_n_S n0 n0 H).\nQed.\n\nLemma le_l_or_r : forall n m : nat, n <= m \\/ m <= n.\nProof.\n        intros. cut (n <= m \\/ m < n). intros. elim H.\n        intros. left. assumption.\n        intros. right. exact (lt_le_weak m n H0).\n        exact (le_or_lt n m).\nQed.\n\nLemma plus_n_O : forall n : nat, n + 0 = n.\n Proof.\n       simple induction n. trivial.\n       intros. simpl in |- *. rewrite H. trivial.\n Qed.\n \n Lemma S_plus_l : forall n m : nat, S (n + m) = S n + m.\n Proof.\n       simpl in |- *. trivial.\n Qed.\n \n Lemma S_plus_r : forall n m : nat, S (n + m) = n + S m.\n Proof.\n       intros. rewrite (plus_comm n (S m)). rewrite (plus_comm n m).\n       simpl in |- *. trivial.\n Qed.\n\n\n(* lemmes concernant max *)\n\nLemma max_le_Sr_0 :\n forall n m : nat, max n m <= max n (S m) /\\ max (S n) m <= max (S n) (S m).\nProof.\n\tsimple induction n; simple induction m. simpl in |- *. split. exact (le_n_Sn 0).\n\texact (le_n_n 1).\n\tintros. split. elim H. intros. intros. simpl in |- *. exact (le_n_Sn (S n0)).\n\telim H. intros. simpl in |- *. exact (le_n_Sn (S n0)).\n\tsplit. simpl in |- *. cut (max n0 0 = n0). intros. rewrite H0. trivial.\n\trewrite max_l; auto with arith.\n \tsimpl in |- *. exact (le_n_n (S (S n0))).\n\tintros. elim H0. intros. split. simpl in |- *. elim (H n1). intros.\n\texact (le_n_S (max n0 n1) (max n0 (S n1)) H3).\n\tcut (max (S (S n0)) (S n1) = S (max (S n0) n1)).\n\tcut (max (S (S n0)) (S (S n1)) = S (max (S n0) (S n1))).\n\tintros. rewrite H3. rewrite H4. elim (H (S n1)).\n\tintros. elim (H n1). intros.\n\texact (le_n_S (max (S n0) n1) (max (S n0) (S n1)) H8).\n\tsimpl in |- *. trivial.\n\tsimpl in |- *. trivial.\nQed.\n\n",
                "context_tokens": 744,
                "proof_start_offset": 3102,
                "proof_end_offset": 3223,
                "proof": "Lemma max_le_Sr : forall n m : nat, max n m <= max n (S m).\nProof.\nintros.\nelim (max_le_Sr_0 n m).\nintros.\nexact H.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma max_le_Sr : forall n m : nat, max n m <= max n (S m).\nProof.\n\tsimple induction n.\n\tintros. simpl in |- *. trivial.\nQed.",
                    "Lemma max_le_Sr : forall n m : nat, max n m <= max n (S m).\nProof.\n\tintros. elim (le_n_S (S n0) (S m)).\n\tintros.\n\tapply (le_n_S (S m0) (S m0)).\n\tintros.\n\tapply (le_n_S (S m0) (S m0)).\n\tintros.\n\tapply (le_S (S m0) (S m0))).\n\tintros.\n\tapply (le_n_S (S m0) (S m0)).\n\tintros.\n\tapply (le_n_S (S m0) (S m0)) (S m0)).\n\tintros.\n\tapply (le_n_S (S m0) (S m0)).\n\tintros.\n\tapply (le_S (S m0) (S m0) (S m0)) (S m0)).\n\tintros.\n\tapply (le_S (S m0) (S m0)).\n\tintros.\n\tapply (le_S (S m0) (S m0) (S m0)).\n\tintros.\n\trewrite (le_S (S mQed.",
                    "Lemma max_le_Sr : forall n m : nat, max n m <= max n (S m).\nProof.\n\tintros.\n\tapply max_le_trans with (n := m) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (S n0)) (max (SQed.",
                    "Lemma max_le_Sr : forall n m : nat, max n m <= max n (S m).\nProof.\n\tintros.\n\tapply max_le_compat_l.\n\tintros.\n\tapply max_le_compat_l.\n\tintros.\n\tapply max_le_compat_l.\n\tintros.\n\tapply max_le_compat_l.\n\tintros.\n\tapply max_le_compat_l.\n\tintros.\n\tapply max_le_compat_l.\n\tintros.\n\tapply max_le_compat_l.\n\tintros.\n\tapply max_le_compat_l.\n\tintros.\n\tapply max_le_compat_l.\n\tintros.\n\tapply max_le_compat_l.\n\tintros.\n\tapply max_le_compat_l.\n\tintros.\n\tapply max_le_compat_l.\n\tintros.\n\tapply max_le_compat_l.\n\tintros.\n\tapply max_le_compat_l.\n\tintros.\n\tapply max_le_compat_l.\n\tintros.\n\tapply max_le_compat_l.\n\tintros.\n\tapply max_le_compat_Qed.",
                    "Lemma max_le_Sr : forall n m : nat, max n m <= max n (S m).\nProof.\n\tintros.\n\tapply (le_trans (S m) (max n m)).\n\tintros.\n\tapply (le_trans (S m) (max n m)).\n\tintros.\n\tapply (le_trans (S m) (max n m)).\n\tintros.\n\tapply (le_trans (S m) (max n m)).\n\tintros.\n\tapply (le_trans (S m) (max n m)).\n\tintros.\n\tapply (le_trans (S m) (max n m)).\n\tintros.\n\tapply (le_trans (S m) (max n m)).\n\tintros.\n\tapply (le_trans (S m) (max n m)).\n\tintros.\n\tapply (le_trans (S m) (max n m)).\n\tintros.\n\tapply (le_trans (S m) (max n m)).\n\tintros.\n\tapply (le_trans (S m) (max n m)).\n\tintros.\n\tapply (le_trans (S m) (max n m)).\n\tintros.\n\tapply (le_trans (SQed."
                ]
            },
            {
                "filepath": "./coq_projects/tree-automata/bases.v",
                "context": "0. reflexivity.\nQed.\n\nLemma le_n_n : forall n : nat, n <= n.\nProof.\n        simple induction n. trivial.\n        intros. exact (le_n_S n0 n0 H).\nQed.\n\nLemma le_l_or_r : forall n m : nat, n <= m \\/ m <= n.\nProof.\n        intros. cut (n <= m \\/ m < n). intros. elim H.\n        intros. left. assumption.\n        intros. right. exact (lt_le_weak m n H0).\n        exact (le_or_lt n m).\nQed.\n\nLemma plus_n_O : forall n : nat, n + 0 = n.\n Proof.\n       simple induction n. trivial.\n       intros. simpl in |- *. rewrite H. trivial.\n Qed.\n \n Lemma S_plus_l : forall n m : nat, S (n + m) = S n + m.\n Proof.\n       simpl in |- *. trivial.\n Qed.\n \n Lemma S_plus_r : forall n m : nat, S (n + m) = n + S m.\n Proof.\n       intros. rewrite (plus_comm n (S m)). rewrite (plus_comm n m).\n       simpl in |- *. trivial.\n Qed.\n\n\n(* lemmes concernant max *)\n\nLemma max_le_Sr_0 :\n forall n m : nat, max n m <= max n (S m) /\\ max (S n) m <= max (S n) (S m).\nProof.\n\tsimple induction n; simple induction m. simpl in |- *. split. exact (le_n_Sn 0).\n\texact (le_n_n 1).\n\tintros. split. elim H. intros. intros. simpl in |- *. exact (le_n_Sn (S n0)).\n\telim H. intros. simpl in |- *. exact (le_n_Sn (S n0)).\n\tsplit. simpl in |- *. cut (max n0 0 = n0). intros. rewrite H0. trivial.\n\trewrite max_l; auto with arith.\n \tsimpl in |- *. exact (le_n_n (S (S n0))).\n\tintros. elim H0. intros. split. simpl in |- *. elim (H n1). intros.\n\texact (le_n_S (max n0 n1) (max n0 (S n1)) H3).\n\tcut (max (S (S n0)) (S n1) = S (max (S n0) n1)).\n\tcut (max (S (S n0)) (S (S n1)) = S (max (S n0) (S n1))).\n\tintros. rewrite H3. rewrite H4. elim (H (S n1)).\n\tintros. elim (H n1). intros.\n\texact (le_n_S (max (S n0) n1) (max (S n0) (S n1)) H8).\n\tsimpl in |- *. trivial.\n\tsimpl in |- *. trivial.\nQed.\n\nLemma max_le_Sr : forall n m : nat, max n m <= max n (S m).\nProof.\n\tintros. elim (max_le_Sr_0 n m). intros. exact H.\nQed.\n\n(* lemmes arithm\u00e9tiques *)\n\n",
                "context_tokens": 749,
                "proof_start_offset": 3253,
                "proof_end_offset": 3397,
                "proof": "Lemma plus_O_r : forall n : nat, n + 0 = n.\nProof.\nsimple induction n.\nsimpl in |- *.\ntrivial.\nintros.\nsimpl in |- *.\nrewrite H.\ntrivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma plus_O_r : forall n : nat, n + 0 = n.\nProof.\n\tintros. elim (le_n_S (S n) (S m)).\n\tintros.\n\tapply (le_n_S (S m) (S m)).\n\tintros.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0.\n\trewrite H0Qed.",
                    "Lemma plus_O_r : forall n : nat, n + 0 = n.\nProof.\n\tintros. elim (le_le_n_S n m). intros.\n\tapply (le_trans _ _ _ H).\n\trewrite (le_n_S (S n0) (S n0)) (S n0)).\n\tintros.\n\trewrite (le_n_S (S n0) (S n0)).\n\trewrite (le_n_S (S n0) (S n0)).\n\trewrite (le_n_S (S n0) (S n0)) (S n0)).\n\trewrite (le_n_S (S n0) (S n0)) (S n0)).\n\trewrite (le_S n0 (S n0)).\n\trewrite (le_n_S n0 (S n0)) (S n0)).\n\trewrite (le_n_S n0 (S n0)).\n\trewrite (le_n_S (S n0)) (S n0)).\n\trewrite (le_n_S (S n0) (S n0)).\n\trewrite (le_n_S (S n0) (S n0)).\nQed.",
                    "Lemma plus_O_r : forall n : nat, n + 0 = n.\nProof.\n\tintros.\n\tapply (le_S n m).\n\tintros.\n\tapply (le_S_n m).\n\tintros.\n\tapply (le_trans (S m)).\n\tintros.\n\tapply (le_trans (S m)).\n\tintros.\n\tapply (le_trans (S m)).\n\tintros.\n\tapply (le_trans (S m)).\n\tintros.\n\tapply (le_trans (S m)).\n\tintros.\n\tapply (le_trans (S m)).\n\tintros.\n\tapply (le_trans (S m)).\n\tintros.\n\tapply (le_trans (S m)).\n\tintros.\n\tapply (le_trans (S m)).\n\tintros.\n\tapply (le_trans (S m)).\n\tintros.\n\tapply (le_trans (S m)).\n\tintros.\n\tapply (le_trans (S m)).\n\tintros.\n\tapply (le_trans (S m)).\n\tintros.\n\tapply (le_trans (S m)).\n\tintros.\n\tapply (le_trans (S mQed.",
                    "Lemma plus_O_r : forall n : nat, n + 0 = n.\nProof.\n\tintros. elim (le_gt_S n m). intros.\n\tapply (le_trans _ _ _ H).\n\tapply (le_trans _ _ _ H).\n\tapply (le_trans _ _ _ H).\n\tapply (le_trans _ _ _ _ H).\n\tapply (le_trans _ _ _ _ H).\n\tapply (le_trans _ _ _ H).\n\tapply (le_trans _ _ _ _ H).\n\tapply (le_trans _ _ _ H).\n\tapply (le_trans _ _ _ _ H).\n\tapply (le_trans _ _ _ _ H).\n\tapply (le_trans _ _ _ _ H).\n\tapply (le_trans _ _ _ _ H).\n\tapply (le_trans _ _ _ _ H).\n\tapply (le_trans _ _ _ _ H).\n\tapply (le_trans _ _ _ _ H).\n\tapply (le_trans _ _ _ H).\n\tapply (le_trans _ _ _ H).\n\tapply (le_trans _ _ _ H).\n\tapply (le_trans _ _ _ _Qed.",
                    "Lemma plus_O_r : forall n : nat, n + 0 = n.\nProof.\n\tintros. elim (le_n_O _ _ H). intros.\n\trewrite <- (le_n_O _ _ H).\n\trewrite <- (le_n_O _ _ H).\n\trewrite <- (le_n_O _ _ H).\n\trewrite <- (le_n_O _ _ H).\n\trewrite <- (le_n_O _ H).\n\trewrite <- (le_n_O _ _ H).\n\trewrite <- (le_n_O _ _ H).\n\trewrite <- (le_n_O _ _ H).\n\trewrite <- (le_n_O _ _ H).\n\trewrite <- (le_n_O _ _ H).\n\trewrite <- (le_n_O _ _ H).\n\trewrite <- (le_n_O _ _ _ H).\n\trewrite <- (le_n_O _ _ _ H).\n\trewrite <- (le_n_O _ _ _ H).\n\trewrite <- (le_n_O _ _ H).\n\trewrite <- (le_n_O _ _ H).\n\trewrite <- (le_n_OQed."
                ]
            },
            {
                "filepath": "./coq_projects/tree-automata/bases.v",
                "context": "\nQed.\n\nLemma le_l_or_r : forall n m : nat, n <= m \\/ m <= n.\nProof.\n        intros. cut (n <= m \\/ m < n). intros. elim H.\n        intros. left. assumption.\n        intros. right. exact (lt_le_weak m n H0).\n        exact (le_or_lt n m).\nQed.\n\nLemma plus_n_O : forall n : nat, n + 0 = n.\n Proof.\n       simple induction n. trivial.\n       intros. simpl in |- *. rewrite H. trivial.\n Qed.\n \n Lemma S_plus_l : forall n m : nat, S (n + m) = S n + m.\n Proof.\n       simpl in |- *. trivial.\n Qed.\n \n Lemma S_plus_r : forall n m : nat, S (n + m) = n + S m.\n Proof.\n       intros. rewrite (plus_comm n (S m)). rewrite (plus_comm n m).\n       simpl in |- *. trivial.\n Qed.\n\n\n(* lemmes concernant max *)\n\nLemma max_le_Sr_0 :\n forall n m : nat, max n m <= max n (S m) /\\ max (S n) m <= max (S n) (S m).\nProof.\n\tsimple induction n; simple induction m. simpl in |- *. split. exact (le_n_Sn 0).\n\texact (le_n_n 1).\n\tintros. split. elim H. intros. intros. simpl in |- *. exact (le_n_Sn (S n0)).\n\telim H. intros. simpl in |- *. exact (le_n_Sn (S n0)).\n\tsplit. simpl in |- *. cut (max n0 0 = n0). intros. rewrite H0. trivial.\n\trewrite max_l; auto with arith.\n \tsimpl in |- *. exact (le_n_n (S (S n0))).\n\tintros. elim H0. intros. split. simpl in |- *. elim (H n1). intros.\n\texact (le_n_S (max n0 n1) (max n0 (S n1)) H3).\n\tcut (max (S (S n0)) (S n1) = S (max (S n0) n1)).\n\tcut (max (S (S n0)) (S (S n1)) = S (max (S n0) (S n1))).\n\tintros. rewrite H3. rewrite H4. elim (H (S n1)).\n\tintros. elim (H n1). intros.\n\texact (le_n_S (max (S n0) n1) (max (S n0) (S n1)) H8).\n\tsimpl in |- *. trivial.\n\tsimpl in |- *. trivial.\nQed.\n\nLemma max_le_Sr : forall n m : nat, max n m <= max n (S m).\nProof.\n\tintros. elim (max_le_Sr_0 n m). intros. exact H.\nQed.\n\n(* lemmes arithm\u00e9tiques *)\n\nLemma plus_O_r : forall n : nat, n + 0 = n.\nProof.\n\tsimple induction n. simpl in |- *. trivial.\n\tintros. simpl in |- *. rewrite H. trivial.\nQed.\n\n",
                "context_tokens": 749,
                "proof_start_offset": 3399,
                "proof_end_offset": 3543,
                "proof": "Lemma plus_O_l : forall n : nat, n + 0 = n.\nProof.\nsimple induction n.\nsimpl in |- *; trivial.\nintros; simpl in |- *.\nrewrite H.\ntrivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma plus_O_l : forall n : nat, n + 0 = n.\nProof.\n\tintros. elim (le_n_O n). intros. elim (le_O_n_O_O_n (S n0) (S n0)). intros.\n\trewrite <- (plus_comm n0).\n\trewrite <- (plus_comm n0).\n\trewrite <- (plus_comm n0).\n\trewrite <- (plus_comm n0).\n\trewrite <- (plus_comm n0).\n\trewrite <- (plus_comm n0).\n\trewrite <- (plus_comm n0).\n\trewrite <- (plus_comm n0).\n\trewrite <- (plus_comm n0).\n\trewrite <- (plus_comm n0).\n\trewrite <- (plus_comm n0).\n\trewrite <- (plus_comm n0).\n\trewrite <- (plus_comm n0).\n\trewrite <- (plus_comm n0).\n\trewrite <- (plus_comm n0).\n\trewrite <- (plus_comm n0).\n\trewrite <- (plus_comm n0).\n\trewrite <- (plus_comm n0).\n\trewrite <- (plus_comm n0).\n\trewrite <-Qed.",
                    "Lemma plus_O_l : forall n : nat, n + 0 = n.\nProof.\n\tintros.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plusQed.",
                    "Lemma plus_O_l : forall n : nat, n + 0 = n.\nProof.\n\tintros.\n\tapply le_trans with (n + m)%nat.\n\tintros.\n\tapply le_trans with (n + m)%nat.\n\tapply le_trans with (n + m)%nat.\n\tintros.\n\tapply le_trans with (n + m)%nat.\n\tapply le_trans with (n + m)%nat.\n\tapply le_trans with (n + m)%nat.\n\tapply le_trans with (n + m)%nat.\n\tapply le_trans with (n + m)%nat.\n\tapply le_trans with (n + m)%nat.\n\tapply le_trans with (n + m)%nat.\n\tapply le_trans with (n + m)%nat.\n\tapply le_trans with (n + m)%nat.\n\tapply le_trans with (n + m)%nat.\n\tapply le_trans with (n + m)%nat.\n\tapply le_trans with (n + m)%nat.\n\tapply le_trans with (n + m)%nat.\n\tapply le_trans with (n + m)%nat.\n\tapplyQed.",
                    "Lemma plus_O_l : forall n : nat, n + 0 = n.\nProof.\n\tintros.\n\trewrite (plus_O_r (S n) (S n)).\n\trewrite (plus_O_r (S n)).\n\trewrite (plus_O_r (S n)).\n\trewrite (plus_O_r (S n)).\n\trewrite (plus_O_r (S n)).\n\trewrite (plus_O_r (S n)).\n\trewrite (plus_O_r (S n)).\n\trewrite (plus_O_r (S n)).\n\trewrite (plus_O_r (S n)).\n\trewrite (plus_O_r (S n)).\n\trewrite (plus_O_r (S n)).\n\trewrite (plus_O_r (S n)).\n\trewrite (plus_O_r (S n)).\n\trewrite (plus_O_r (S n)).\n\trewrite (plus_O_r (S n)).\n\trewrite (plus_O_r (S n)).\n\trewrite (plus_O_r (S n)).\n\trewrite (plus_O_r (S n)).\n\trewrite (plus_O_r (SQed.",
                    "Lemma plus_O_l : forall n : nat, n + 0 = n.\nProof.\n\tintros.\n\tapply le_trans with (n + m)%nat.\n\tintros.\n\tapply le_trans with (n + m)%nat.\n\tintros.\n\tapply le_trans with (n + m)%nat.\n\tintros.\n\tapply le_trans with (n + m)%nat.\n\tintros.\n\tapply le_trans with (n + m)%nat.\n\tapply le_trans with (n + m)%nat.\n\tintros.\n\tapply le_trans with (n + m)%nat.\n\tapply le_trans with (n + m)%nat.\n\tapply le_trans with (n + m)%nat.\n\tintros.\n\tapply le_trans with (n + m)%nat.\n\tapply le_trans with (n + m)%nat.\n\tintros.\n\tapply le_trans with (n + m)%nat.\n\tintros.\n\tapply le_trans with (n + m)%nat.\n\tintros.\n\tapply le_trans with (n + m)%nat.\n\tintros.\n\tapply le_trans with (n + m)%natQed."
                ]
            },
            {
                "filepath": "./coq_projects/tree-automata/bases.v",
                "context": "\n        intros. right. exact (lt_le_weak m n H0).\n        exact (le_or_lt n m).\nQed.\n\nLemma plus_n_O : forall n : nat, n + 0 = n.\n Proof.\n       simple induction n. trivial.\n       intros. simpl in |- *. rewrite H. trivial.\n Qed.\n \n Lemma S_plus_l : forall n m : nat, S (n + m) = S n + m.\n Proof.\n       simpl in |- *. trivial.\n Qed.\n \n Lemma S_plus_r : forall n m : nat, S (n + m) = n + S m.\n Proof.\n       intros. rewrite (plus_comm n (S m)). rewrite (plus_comm n m).\n       simpl in |- *. trivial.\n Qed.\n\n\n(* lemmes concernant max *)\n\nLemma max_le_Sr_0 :\n forall n m : nat, max n m <= max n (S m) /\\ max (S n) m <= max (S n) (S m).\nProof.\n\tsimple induction n; simple induction m. simpl in |- *. split. exact (le_n_Sn 0).\n\texact (le_n_n 1).\n\tintros. split. elim H. intros. intros. simpl in |- *. exact (le_n_Sn (S n0)).\n\telim H. intros. simpl in |- *. exact (le_n_Sn (S n0)).\n\tsplit. simpl in |- *. cut (max n0 0 = n0). intros. rewrite H0. trivial.\n\trewrite max_l; auto with arith.\n \tsimpl in |- *. exact (le_n_n (S (S n0))).\n\tintros. elim H0. intros. split. simpl in |- *. elim (H n1). intros.\n\texact (le_n_S (max n0 n1) (max n0 (S n1)) H3).\n\tcut (max (S (S n0)) (S n1) = S (max (S n0) n1)).\n\tcut (max (S (S n0)) (S (S n1)) = S (max (S n0) (S n1))).\n\tintros. rewrite H3. rewrite H4. elim (H (S n1)).\n\tintros. elim (H n1). intros.\n\texact (le_n_S (max (S n0) n1) (max (S n0) (S n1)) H8).\n\tsimpl in |- *. trivial.\n\tsimpl in |- *. trivial.\nQed.\n\nLemma max_le_Sr : forall n m : nat, max n m <= max n (S m).\nProof.\n\tintros. elim (max_le_Sr_0 n m). intros. exact H.\nQed.\n\n(* lemmes arithm\u00e9tiques *)\n\nLemma plus_O_r : forall n : nat, n + 0 = n.\nProof.\n\tsimple induction n. simpl in |- *. trivial.\n\tintros. simpl in |- *. rewrite H. trivial.\nQed.\n\nLemma plus_O_l : forall n : nat, n + 0 = n.\nProof.\n\tsimple induction n. simpl in |- *; trivial.\n\tintros; simpl in |- *. rewrite H. trivial.\nQed.\n\n",
                "context_tokens": 744,
                "proof_start_offset": 3545,
                "proof_end_offset": 3788,
                "proof": "Lemma le_mult_lS : forall n m : nat, n * m <= S n * m.\nProof.\nsimple induction n.\nsimpl in |- *.\nintro.\ncut (m + 0 = m).\nintros.\nrewrite H.\nexact (le_O_n m).\nexact (plus_O_r m).\nsimpl in |- *.\nintros.\nexact (le_plus_r m (m + n0 * m)).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma le_mult_lS : forall n m : nat, n * m <= S n * m.\nProof.\n\tintros. simpl in |- *. rewrite H. trivial.\nQed.",
                    "Lemma le_mult_lS : forall n m : nat, n * m <= S n * m.\nProof.\n\tintros.\n\tapply le_mult_r_l_S; trivial.\nQed.",
                    "Lemma le_mult_lS : forall n m : nat, n * m <= S n * m.\nProof.\n\tintros.\n\tapply le_plus_l_S.\n\tintros.\n\tapply le_plus_l_S_l.\n\tintros.\n\tapply le_plus_l_S_n_Sn.\n\tintros.\n\tapply le_plus_n_Sn.\n\tintros.\n\tapply le_plus_n_Sn.\n\tintros.\n\tapply le_plus_n_Sn.\n\tintros.\n\tapply le_plus_n_Sn.\n\tintros.\n\tapply le_plus_n_Sn.\n\tintros.\n\tapply le_plus_n_Sn.\n\tintros.\n\tapply le_plus_n_Sn.\n\tintros.\n\tapply le_plus_n_Sn.\n\tintros.\n\tapply le_plus_n_Sn.\n\tintros.\n\tapply le_plus_n_Sn.\n\tintros.\n\tapply le_plus_n_Sn.\n\tintros.\n\tapply le_plus_n_Sn.\n\tintros.\n\tapply le_plus_n_Sn.\n\tintros.\n\tapplyQed.",
                    "Lemma le_mult_lS : forall n m : nat, n * m <= S n * m.\nProof.\n\tintros.\n\tapply le_mult_n_O_n_Sn.\n\tintros.\n\tapply le_mult_n_Sn.\n\tintros.\n\tapply le_mult_n_Sn.\n\tintros.\n\tapply le_mult_n_Sn.\n\tintros.\n\tapply le_mult_n_Sn.\n\tintros.\n\tapply le_mult_n_Sn.\n\tintros.\n\tapply le_mult_n_Sn.\n\tintros.\n\tapply le_mult_n_Sn.\n\tintros.\n\tapply le_mult_n_Sn.\n\tintros.\n\tapply le_mult_n_Sn.\n\tintros.\n\tapply le_mult_n_Sn.\n\tintros.\n\tapply le_mult_n_Sn.\n\tintros.\n\tapply le_mult_n_Sn.\n\tintros.\n\tapply le_mult_n_Sn.\n\tintros.\n\tapply le_mult_n_Sn.\n\tintros.\n\tapply le_mult_n_Sn.\n\tintros.\n\tapply le_Qed.",
                    "Lemma le_mult_lS : forall n m : nat, n * m <= S n * m.\nProof.\n\tintros.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plus_comm.\n\trewrite plusQed."
                ]
            },
            {
                "filepath": "./coq_projects/tree-automata/bases.v",
                "context": "\n Proof.\n       simpl in |- *. trivial.\n Qed.\n \n Lemma S_plus_r : forall n m : nat, S (n + m) = n + S m.\n Proof.\n       intros. rewrite (plus_comm n (S m)). rewrite (plus_comm n m).\n       simpl in |- *. trivial.\n Qed.\n\n\n(* lemmes concernant max *)\n\nLemma max_le_Sr_0 :\n forall n m : nat, max n m <= max n (S m) /\\ max (S n) m <= max (S n) (S m).\nProof.\n\tsimple induction n; simple induction m. simpl in |- *. split. exact (le_n_Sn 0).\n\texact (le_n_n 1).\n\tintros. split. elim H. intros. intros. simpl in |- *. exact (le_n_Sn (S n0)).\n\telim H. intros. simpl in |- *. exact (le_n_Sn (S n0)).\n\tsplit. simpl in |- *. cut (max n0 0 = n0). intros. rewrite H0. trivial.\n\trewrite max_l; auto with arith.\n \tsimpl in |- *. exact (le_n_n (S (S n0))).\n\tintros. elim H0. intros. split. simpl in |- *. elim (H n1). intros.\n\texact (le_n_S (max n0 n1) (max n0 (S n1)) H3).\n\tcut (max (S (S n0)) (S n1) = S (max (S n0) n1)).\n\tcut (max (S (S n0)) (S (S n1)) = S (max (S n0) (S n1))).\n\tintros. rewrite H3. rewrite H4. elim (H (S n1)).\n\tintros. elim (H n1). intros.\n\texact (le_n_S (max (S n0) n1) (max (S n0) (S n1)) H8).\n\tsimpl in |- *. trivial.\n\tsimpl in |- *. trivial.\nQed.\n\nLemma max_le_Sr : forall n m : nat, max n m <= max n (S m).\nProof.\n\tintros. elim (max_le_Sr_0 n m). intros. exact H.\nQed.\n\n(* lemmes arithm\u00e9tiques *)\n\nLemma plus_O_r : forall n : nat, n + 0 = n.\nProof.\n\tsimple induction n. simpl in |- *. trivial.\n\tintros. simpl in |- *. rewrite H. trivial.\nQed.\n\nLemma plus_O_l : forall n : nat, n + 0 = n.\nProof.\n\tsimple induction n. simpl in |- *; trivial.\n\tintros; simpl in |- *. rewrite H. trivial.\nQed.\n\nLemma le_mult_lS : forall n m : nat, n * m <= S n * m.\nProof.\n\tsimple induction n. simpl in |- *. intro. cut (m + 0 = m). intros.\n\trewrite H. exact (le_O_n m).\n\texact (plus_O_r m).\n\tsimpl in |- *. intros. exact (le_plus_r m (m + n0 * m)).\nQed.\n\n",
                "context_tokens": 744,
                "proof_start_offset": 3790,
                "proof_end_offset": 4019,
                "proof": "Lemma le_mult_rS : forall n m : nat, n * m <= n * S m.\nProof.\nintros.\ncut (n * m = m * n).\ncut (n * S m = S m * n).\nintros.\nrewrite H.\nrewrite H0.\nexact (le_mult_lS m n).\nexact (mult_comm n (S m)).\nexact (mult_comm n m).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma le_mult_rS : forall n m : nat, n * m <= n * S m.\nProof.\n\tsimple induction n. simpl in |- *. intros.\n\trewrite H0. trivial.\nQed.",
                    "Lemma le_mult_rS : forall n m : nat, n * m <= n * S m.\nProof.\n\tintros.\n\tapply le_plus_l.\n\tapply le_plus_l.\n\tapply le_plus_n_Sn.\n\tapply le_plus_n_Sn.\n\tapply le_plus_n_Sn.\n\tapply le_plus_n_Sn.\n\tapply le_plus_n_Sn.\n\tapply le_plus_n_Sn.\n\tapply le_plus_n_Sn.\n\tapply le_plus_n_Sn.\n\tapply le_plus_n_Sn.\n\tapply le_plus_n_Sn.\n\tapply le_plus_n_Sn.\n\tapply le_plus_n_Sn.\n\tapply le_plus_n_Sn.\n\tapply le_plus_n_Sn.\n\tapply le_plus_n_Sn.\n\tapply le_plus_n_Sn.\n\tapply le_plus_n_Sn.\n\tapply le_plus_n_Sn.\n\tapply le_plus_n_Sn.\n\tapply le_plus_n_Sn.\n\tapply le_plus_n_Sn.Qed.",
                    "Lemma le_mult_rS : forall n m : nat, n * m <= n * S m.\nProof.\n\tsimple induction n. simpl in |- *. intros.\n\trewrite H. trivial.\nQed.",
                    "Lemma le_mult_rS : forall n m : nat, n * m <= n * S m.\nProof.\n\tsimple induction n. simpl in |- *.\n\tintros.\n\tapply le_mult_n_Sn.\n\tapply le_mult_n_Sn.\n\tapply le_mult_n_Sn.\n\tsimpl in |- *.\n\tintros.\n\tapply le_mult_n_Sn.\n\tapply le_mult_n_Sn.\n\tapply le_mult_n_Sn.\n\tsimpl in |- *.\n\tintros.\n\tapply le_mult_n_Sn.\n\tsimpl in |- *.\n\tintros.\n\tapply le_mult_n_Sn.\n\tsimpl in |- *.\n\tintros.\n\tapply le_mult_n_Sn.\n\tapply le_mult_n_Sn.\n\tapply le_mult_n_Sn.\n\tsimpl in |- *.\n\tintros.\n\tapply le_mult_n_Sn.\n\tsimpl in |- *.\n\tintros.\n\tapply le_mult_n_Sn.\n\tsimpl in |- *.\n\tintros.\n\tapply le_mult_n_Sn.\n\tsimpl in |- *.\n\tintros.\n\tapply le_Qed.",
                    "Lemma le_mult_rS : forall n m : nat, n * m <= n * S m.\nProof.\n\tintros.\n\tapply le_plus_l.\n\tapply le_plus_r.\n\tintros.\n\tapply le_plus_trans with (m + n0) (m + n0) (m + n0) (m + n0) (m + n0)) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (m + n0) (mQed."
                ]
            },
            {
                "filepath": "./coq_projects/tree-automata/bases.v",
                "context": " n m <= max n (S m) /\\ max (S n) m <= max (S n) (S m).\nProof.\n\tsimple induction n; simple induction m. simpl in |- *. split. exact (le_n_Sn 0).\n\texact (le_n_n 1).\n\tintros. split. elim H. intros. intros. simpl in |- *. exact (le_n_Sn (S n0)).\n\telim H. intros. simpl in |- *. exact (le_n_Sn (S n0)).\n\tsplit. simpl in |- *. cut (max n0 0 = n0). intros. rewrite H0. trivial.\n\trewrite max_l; auto with arith.\n \tsimpl in |- *. exact (le_n_n (S (S n0))).\n\tintros. elim H0. intros. split. simpl in |- *. elim (H n1). intros.\n\texact (le_n_S (max n0 n1) (max n0 (S n1)) H3).\n\tcut (max (S (S n0)) (S n1) = S (max (S n0) n1)).\n\tcut (max (S (S n0)) (S (S n1)) = S (max (S n0) (S n1))).\n\tintros. rewrite H3. rewrite H4. elim (H (S n1)).\n\tintros. elim (H n1). intros.\n\texact (le_n_S (max (S n0) n1) (max (S n0) (S n1)) H8).\n\tsimpl in |- *. trivial.\n\tsimpl in |- *. trivial.\nQed.\n\nLemma max_le_Sr : forall n m : nat, max n m <= max n (S m).\nProof.\n\tintros. elim (max_le_Sr_0 n m). intros. exact H.\nQed.\n\n(* lemmes arithm\u00e9tiques *)\n\nLemma plus_O_r : forall n : nat, n + 0 = n.\nProof.\n\tsimple induction n. simpl in |- *. trivial.\n\tintros. simpl in |- *. rewrite H. trivial.\nQed.\n\nLemma plus_O_l : forall n : nat, n + 0 = n.\nProof.\n\tsimple induction n. simpl in |- *; trivial.\n\tintros; simpl in |- *. rewrite H. trivial.\nQed.\n\nLemma le_mult_lS : forall n m : nat, n * m <= S n * m.\nProof.\n\tsimple induction n. simpl in |- *. intro. cut (m + 0 = m). intros.\n\trewrite H. exact (le_O_n m).\n\texact (plus_O_r m).\n\tsimpl in |- *. intros. exact (le_plus_r m (m + n0 * m)).\nQed.\n\nLemma le_mult_rS : forall n m : nat, n * m <= n * S m.\nProof.\n\tintros. cut (n * m = m * n). cut (n * S m = S m * n).\n\tintros. rewrite H. rewrite H0. exact (le_mult_lS m n).\n\texact (mult_comm n (S m)).\n\texact (mult_comm n m).\nQed.\n\n",
                "context_tokens": 743,
                "proof_start_offset": 4021,
                "proof_end_offset": 4242,
                "proof": "Lemma le_disj : forall n m : nat, n <= m -> n = m \\/ S n <= m.\nProof.\nintros.\ncut (m <= n \\/ n < m).\nintro.\nelim H0; intros.\nleft.\nexact (le_antisym n m H H1).\nright.\nexact (lt_le_S n m H1).\nexact (le_or_lt m n).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma le_disj : forall n m : nat, n <= m -> n = m \\/ S n <= m.\nProof.\n\tintros.\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plusQed.",
                    "Lemma le_disj : forall n m : nat, n <= m -> n = m \\/ S n <= m.\nProof.\n\tintros.\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plusQed.",
                    "Lemma le_disj : forall n m : nat, n <= m -> n = m \\/ S n <= m.\nProof.\n\tintros.\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_plus_comm m).\n\trewrite (le_minus_minus_l m).\n\trewrite (le_plus_comm m).\n\trewrite (le_minus_comm m).\n\trewrite (le_minus_comm m).\n\trewrite (le_minus_comm m).\n\trewrite (le_minus_comm m).\n\trewrite (le_minus_comm m).\n\trewrite (le_minus_comm m).\n\trewrite (le_minus_minus_r m).\n\trewrite (le_minus_minus_distr_l m).\n\trewrite (le_minus_minus_distr_l m).\n\trewrite (le_minus_minus_distr_r m).\n\trewrite (le_minus_minus_distr_r m).\n\trewrite (le_minus_minus_distr_l m).\n\trewrite (le_minus_minus_distr_l m).\n\trewrite (le_minus_minus_distr_r m).\n\trewrite (le_minus_Qed.",
                    "Lemma le_disj : forall n m : nat, n <= m -> n = m \\/ S n <= m.\nProof.\n\tintros.\n\tapply le_plus_l.\n\tsimpl in |- *.\n\tintros.\n\tapply le_plus_l.\n\tsimpl in |- *.\n\tintros.\n\tapply le_plus_l.\n\tsimpl in |- *.\n\tintros.\n\tapply le_plus_n_Sn.\n\tsimpl in |- *.\n\tintros.\n\tapply le_plus_n_Sn.\n\tsimpl in |- *.\n\tintros.\n\tapply le_plus_n_Sn.\n\tsimpl in |- *.\n\tintros.\n\tapply le_plus_n_Sn.\n\tsimpl in |- *.\n\tintros.\n\tapply le_plus_n_Sn.\n\tsimpl in |- *.\n\tintros.\n\tapply le_plus_n_Sn.\n\tsimpl in |- *.\n\tintros.\n\tapply le_plus_n_Sn.\n\tsimpl in |- *.\n\tintros.\n\tapply le_plus_n_Sn.\n\tsimpl in |- *.\n\tintros.\n\tapply le_plus_n_Sn.\n\tsimpl in |- *.\n\tintros.\n\tapplyQed.",
                    "Lemma le_disj : forall n m : nat, n <= m -> n = m \\/ S n <= m.\nProof.\n\tintros.\n\tapply le_plus_n_Sn.\n\tintros.\n\trewrite <- H.\n\tapply le_plus_minus_n_Sn.\n\tintros.\n\trewrite <- H.\n\trewrite <- H.\n\tapply le_plus_minus_n_Sn.\n\tintros.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\trewrite <- H.\n\tQed."
                ]
            },
            {
                "filepath": "./coq_projects/tree-automata/bases.v",
                "context": " intros. simpl in |- *. exact (le_n_Sn (S n0)).\n\tsplit. simpl in |- *. cut (max n0 0 = n0). intros. rewrite H0. trivial.\n\trewrite max_l; auto with arith.\n \tsimpl in |- *. exact (le_n_n (S (S n0))).\n\tintros. elim H0. intros. split. simpl in |- *. elim (H n1). intros.\n\texact (le_n_S (max n0 n1) (max n0 (S n1)) H3).\n\tcut (max (S (S n0)) (S n1) = S (max (S n0) n1)).\n\tcut (max (S (S n0)) (S (S n1)) = S (max (S n0) (S n1))).\n\tintros. rewrite H3. rewrite H4. elim (H (S n1)).\n\tintros. elim (H n1). intros.\n\texact (le_n_S (max (S n0) n1) (max (S n0) (S n1)) H8).\n\tsimpl in |- *. trivial.\n\tsimpl in |- *. trivial.\nQed.\n\nLemma max_le_Sr : forall n m : nat, max n m <= max n (S m).\nProof.\n\tintros. elim (max_le_Sr_0 n m). intros. exact H.\nQed.\n\n(* lemmes arithm\u00e9tiques *)\n\nLemma plus_O_r : forall n : nat, n + 0 = n.\nProof.\n\tsimple induction n. simpl in |- *. trivial.\n\tintros. simpl in |- *. rewrite H. trivial.\nQed.\n\nLemma plus_O_l : forall n : nat, n + 0 = n.\nProof.\n\tsimple induction n. simpl in |- *; trivial.\n\tintros; simpl in |- *. rewrite H. trivial.\nQed.\n\nLemma le_mult_lS : forall n m : nat, n * m <= S n * m.\nProof.\n\tsimple induction n. simpl in |- *. intro. cut (m + 0 = m). intros.\n\trewrite H. exact (le_O_n m).\n\texact (plus_O_r m).\n\tsimpl in |- *. intros. exact (le_plus_r m (m + n0 * m)).\nQed.\n\nLemma le_mult_rS : forall n m : nat, n * m <= n * S m.\nProof.\n\tintros. cut (n * m = m * n). cut (n * S m = S m * n).\n\tintros. rewrite H. rewrite H0. exact (le_mult_lS m n).\n\texact (mult_comm n (S m)).\n\texact (mult_comm n m).\nQed.\n\nLemma le_disj : forall n m : nat, n <= m -> n = m \\/ S n <= m.\nProof.\n\tintros. cut (m <= n \\/ n < m). intro. elim H0; intros.\n\tleft. exact (le_antisym n m H H1).\n\tright. exact (lt_le_S n m H1).\n\texact (le_or_lt m n).\nQed.\n\n",
                "context_tokens": 741,
                "proof_start_offset": 4244,
                "proof_end_offset": 5286,
                "proof": "Lemma le_mult_l : forall n m p : nat, n <= m -> n * p <= m * p.\nProof.\nintro.\nsimple induction m.\nintros.\ncut (n = 0).\nintro.\nrewrite H0; trivial.\nsymmetry in |- *.\nexact (le_n_O_eq n H).\ninduction n as [| n Hrecn].\nintros.\nsimpl in |- *.\nexact (le_O_n (p + n * p)).\nintros.\nsimpl in |- *.\ncut (n = n0 \\/ S n <= n0).\nintro.\ncut (n * p <= n0 * p).\nintro.\nelim H1; intros.\ncut (p <= p).\nintros.\nexact (plus_le_compat p p (n * p) (n0 * p) H4 H2).\nexact (le_n_n p).\ncut (n * p <= S n * p).\ncut (S n * p <= n0 * p).\nintros.\napply (le_trans (p + n * p) (p + S n * p) (p + n0 * p)).\nexact (plus_le_compat p p (n * p) (S n * p) (le_n_n p) H5).\nexact (plus_le_compat p p (S n * p) (n0 * p) (le_n_n p) H4).\nexact (H p H3).\nexact (le_mult_lS n p).\nelim H1; intros.\nrewrite H2.\nexact (le_n_n (n0 * p)).\ncut (n * p <= S n * p).\nintro.\ncut (S n * p <= n0 * p).\nintro.\nexact (le_trans (n * p) (S n * p) (n0 * p) H3 H4).\nexact (H p H2).\nexact (le_mult_lS n p).\ncut (n <= n0).\nintro.\nexact (le_disj n n0 H1).\nexact (le_S_n n n0 H0).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma le_mult_l : forall n m p : nat, n <= m -> n * p <= m * p.\nProof.\n\tintros.\n\telim (le_le_trans _ _ _ _ _ H).\n\tintros.\n\tapply le_trans with (n := m * n * m).\n\tapply le_trans with (n := m * n * m).\n\tapply le_trans with (n := m * n).\n\tapply le_trans with (n := m).\n\tapply le_trans with (n := m * n).\n\tapply le_trans with (n := m * n).\n\tapply le_trans with (n := m * n).\n\tapply le_trans with (n := m * n).\n\tapply le_trans with (n := m * n).\n\tapply le_trans with (n := m * n).\n\tapply le_trans with (n := m * n).\n\tapply le_trans with (n := m * n).\n\tapply le_trans with (n := m).\n\tapply le_trans with (n := m * n).\n\tapply le_trans with (n := m * n).\n\tapply le_trans with (n := m * n).\n\tapply le_Qed.",
                    "Lemma le_mult_l : forall n m p : nat, n <= m -> n * p <= m * p.\nProof.\n\tintros.\n\tapply le_mult_l.\n\tapply le_plus_l.\n\tapply le_plus_r.\n\tapply le_plus_l.\n\tapply le_plus_minus_l.\n\tapply le_plus_minus_l.\n\tapply le_plus_minus_l.\n\tapply le_plus_minus_l.\n\tapply le_plus_minus_l.\n\tapply le_plus_minus_l.\n\tapply le_plus_minus_l.\n\tapply le_plus_minus_l.\n\tapply le_plus_minus_l.\n\tapply le_plus_minus_r.\n\tapply le_plus_minus_l.\n\tapply le_minus_minus_l.\n\tapply le_plus_minus_l.\n\tapply le_minus_minus_l.\n\tapply le_plus_minus_l.\n\tapply le_plus_minus_l.\n\tapply le_minus_minus_l.\n\tapply le_plus_minus_l.\n\tapply le_minus_minus_l.\n\tapply leQed.",
                    "Lemma le_mult_l : forall n m p : nat, n <= m -> n * p <= m * p.\nProof.\n\tintros.\n\tapply le_plus_l.\n\tapply le_plus_n_Sm.\n\tapply le_plus_n_Sm.\n\tapply le_plus_n_Sm.\n\tapply le_plus_n_Sm.\n\tapply le_plus_n_Sm.\n\tapply le_plus_n_Sm.\n\tapply le_plus_n_Sm.\n\tapply le_plus_n_Sm.\n\tapply le_plus_n_Sm.\n\tapply le_plus_n_Sm.\n\tapply le_plus_n_Sm.\n\tapply le_plus_n_Sm.\n\tapply le_plus_n_Sm.\n\tapply le_plus_n_Sm.\n\tapply le_plus_n_Sm.\n\tapply le_plus_n_Sm.\n\tapply le_plus_n_Sm.\n\tapply le_plus_n_Sm.\n\tapply le_plus_n_Sm.\n\tapply le_plus_n_Sm.\n\tapply le_plus_n_Sm.\n\tapply le_plus_n_Qed.",
                    "Lemma le_mult_l : forall n m p : nat, n <= m -> n * p <= m * p.\nProof.\n\tintros.\n\trewrite (le_plus_comm n m).\n\tapply (le_le_trans (S n) (S m)).\n\tapply (le_trans (S n) (S m)).\n\tapply (le_trans (S m)).\n\tapply (le_trans (S m)).\n\tapply (le_trans (S m)).\n\tapply (le_trans (S m)).\n\tapply (le_trans (S m)).\n\tapply (le_trans (S m)).\n\tapply (le_trans (S m)).\n\tapply (le_trans (S m)).\n\tapply (le_trans (S m)).\n\tapply (le_trans (S m)).\n\tapply (le_trans (S m)).\n\tapply (le_trans (S m)).\n\tapply (le_trans (S m)).\n\tapply (le_trans (S m)).\n\tapply (le_trans (S m)).\n\tapply (le_trans (S m)).\n\tapply (le_trans (S m)).\n\tapply (le_trans (S m)).\n\tapply (le_transQed.",
                    "Lemma le_mult_l : forall n m p : nat, n <= m -> n * p <= m * p.\nProof.\n\tintros.\n\tapply le_plus_l.\n\tapply le_plus_l.\n\tapply le_plus_l.\n\tapply le_plus_l.\n\tapply le_plus_l.\n\tapply le_plus_l.\n\tapply le_plus_l.\n\tapply le_plus_r.\n\tapply le_plus_l.\n\tapply le_plus_l.\n\tapply le_plus_l.\n\tapply le_plus_l.\n\tapply le_plus_l.\n\tapply le_plus_l.\n\tapply le_plus_l.\n\tapply le_plus_l.\n\tapply le_plus_l.\n\tapply le_plus_l.\n\tapply le_plus_l.\n\tapply le_plus_l.\n\tapply le_plus_l.\n\tapply le_plus_l.\n\tapply le_plus_l.\n\tapply le_plus_l.\n\tapply le_plus_r.\n\tapply le_plus_r.\n\tapply le_plus_l.\n\tapply le_plusQed."
                ]
            }
        ],
        "coquelicot": [
            {
                "filepath": "./coq_projects/coquelicot/theories/Derive.v",
                "context": "\n  exact Hl.\nQed.\n\nLemma linear_cont (l : U -> V) (x : U) :\n  is_linear l -> continuous l x.\nProof.\n  intros Hl.\n  apply filterlim_locally_ball_norm => eps.\n  apply locally_le_locally_norm.\n  case: (linear_norm _ Hl) => M Hn.\n  assert (0 < eps / M).\n    apply Rdiv_lt_0_compat.\n    apply cond_pos.\n    apply Hn.\n  exists (mkposreal _ H) => y Hy.\n  rewrite /ball_norm /minus -linear_opp // -linear_plus //.\n  eapply Rle_lt_trans.\n  by apply Hn.\n  evar_last.\n  apply Rmult_lt_compat_l with (2 := Hy).\n  apply Hn.\n  simpl.\n  field.\n  apply Rgt_not_eq, Hn.\nQed.\n\nLemma is_linear_ext (l1 l2 : U -> V) :\n  (forall x, l1 x = l2 x) -> is_linear l1 -> is_linear l2.\nProof.\n  intros Hl Hl1.\n  split.\n  intros ; rewrite -!Hl ; apply Hl1.\n  intros ; rewrite -!Hl ; apply Hl1.\n  case: Hl1 => _ _ [M Hl1].\n  exists M ; split.\n  by apply Hl1.\n  intros ; rewrite -!Hl ; apply Hl1.\nQed.\n\n(** zero in a linear function *)\nLemma is_linear_zero : is_linear (fun _ => zero).\nProof.\n  repeat split.\n  - move => _ _ ; by rewrite plus_zero_l.\n  - move => k _ ; by rewrite scal_zero_r.\n  - exists 1 ; split.\n    exact Rlt_0_1.\n    move => x ; rewrite Rmult_1_l norm_zero.\n    apply norm_ge_0.\nQed.\n\nEnd LinearFct.\n\nLemma is_linear_comp {K : AbsRing} {U V W : NormedModule K}\n  (l1 : U -> V) (l2 : V -> W) :\n  is_linear l1 -> is_linear l2 -> is_linear (fun x => l2 (l1 x)).\nProof.\n  intros Hl1 Hl2.\n  split.\n  - move => x y.\n    by rewrite!linear_plus.\n  - move => k x.\n    by rewrite!linear_scal.\n  - destruct (linear_norm _ Hl1) as [M1 Hn1].\n    destruct (linear_norm _ Hl2) as [M2 Hn2].\n    exists (M2 * M1) ; split.\n    now apply Rmult_lt_0_compat.\n    move => x.\n    eapply Rle_trans.\n    by apply Hn2.\n    rewrite Rmult_assoc.\n    apply Rmult_le_compat_l.\n    now apply Rlt_le.\n    apply Hn1.\nQed.\n\nSection Op_LinearFct.\n\nContext {K : AbsRing} {V : NormedModule K}.\n\n(** id is a linear function *)\nLemma is_linear_id : is_linear (fun (x : V) => x).\nProof.\n  repeat split.\n  - exists 1 ; split.\n    exact Rlt_0_1.\n    move => x ; rewrite Rmult_1_l.\n    by apply Rle_refl.\nQed.\n\n(** opp is a linear function *)\n",
                "context_tokens": 753,
                "proof_start_offset": 3935,
                "proof_end_offset": 4211,
                "proof": "Lemma is_linear_opp : is_linear (@opp V).\nProof.\nrepeat split.\nmove => x y.\nnow apply opp_plus.\nmove => k x.\napply sym_eq.\napply: scal_opp_r.\nexists 1 ; split.\nexact Rlt_0_1.\nmove => x ; rewrite norm_opp Rmult_1_l.\nby apply Rle_refl.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma is_linear_opp : is_linear (@opp V).\nProof.\n  intros x y.\n  - exists (x + y) ; split.\n    exact Rlt_0_1.\n    exact Rlt_0_1.\n    exact Rlt_0_1.\n    exact Rlt_0_1.\n  - apply Rlt_0_1_r.\n    exact Rlt_0_1_r.\n    exact Rlt_0_1_r.\n    exact Rlt_0_1_r.\nQed.",
                    "Lemma is_linear_opp : is_linear (@opp V).\nProof.\n  intros x y.\n  apply is_linear_opp.\n  - apply is_linear_opp.\n    exact Rlt_0_1.\nQed.",
                    "Lemma is_linear_opp : is_linear (@opp V).\nProof.\n  intros x.\n  - rewrite is_linear_opp.\n    exact Rlt_0_1.\n  - exact Rlt_0_1.\n  - exact Rlt_0_1.\nQed.",
                    "Lemma is_linear_opp : is_linear (@opp V).\nProof.\n  intros x y.\n  apply Rle_trans with (1 := Hx).\n  - now apply Rle_trans with (1 := Hx).\n    now apply Rlt_le_0_compat.\nQed.",
                    "Lemma is_linear_opp : is_linear (@opp V).\nProof.\n  intros x y.\n  rewrite is_linear_opp.\n  - apply is_linear_opp.\n    exact Rlt_0_1.\n  - apply is_linear_opp.\n    exact Rlt_0_1.\n  - apply is_linear_linear.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/coquelicot/theories/Derive.v",
                "context": " - exists 1 ; split.\n    exact Rlt_0_1.\n    move => x ; rewrite Rmult_1_l norm_zero.\n    apply norm_ge_0.\nQed.\n\nEnd LinearFct.\n\nLemma is_linear_comp {K : AbsRing} {U V W : NormedModule K}\n  (l1 : U -> V) (l2 : V -> W) :\n  is_linear l1 -> is_linear l2 -> is_linear (fun x => l2 (l1 x)).\nProof.\n  intros Hl1 Hl2.\n  split.\n  - move => x y.\n    by rewrite!linear_plus.\n  - move => k x.\n    by rewrite!linear_scal.\n  - destruct (linear_norm _ Hl1) as [M1 Hn1].\n    destruct (linear_norm _ Hl2) as [M2 Hn2].\n    exists (M2 * M1) ; split.\n    now apply Rmult_lt_0_compat.\n    move => x.\n    eapply Rle_trans.\n    by apply Hn2.\n    rewrite Rmult_assoc.\n    apply Rmult_le_compat_l.\n    now apply Rlt_le.\n    apply Hn1.\nQed.\n\nSection Op_LinearFct.\n\nContext {K : AbsRing} {V : NormedModule K}.\n\n(** id is a linear function *)\nLemma is_linear_id : is_linear (fun (x : V) => x).\nProof.\n  repeat split.\n  - exists 1 ; split.\n    exact Rlt_0_1.\n    move => x ; rewrite Rmult_1_l.\n    by apply Rle_refl.\nQed.\n\n(** opp is a linear function *)\nLemma is_linear_opp : is_linear (@opp V).\nProof.\n  repeat split.\n  - move => x y.\n    now apply opp_plus.\n  - move => k x.\n    apply sym_eq.\n    apply: scal_opp_r.\n  - exists 1 ; split.\n    exact Rlt_0_1.\n    move => x ; rewrite norm_opp Rmult_1_l.\n    by apply Rle_refl.\nQed.\n\n(** plus is a linear function *)\nLemma is_linear_plus : is_linear (fun x : V * V => plus (fst x) (snd x)).\nProof.\n  repeat split.\n  - move => x y.\n    rewrite -!plus_assoc ; apply f_equal.\n    rewrite plus_comm -!plus_assoc.\n    by apply f_equal, @plus_comm.\n  - move => k x.\n    now rewrite scal_distr_l.\n  - exists 2 ; split.\n    exact Rlt_0_2.\n    move => x /= ; eapply Rle_trans.\n    by apply @norm_triangle.\n    rewrite Rmult_plus_distr_r Rmult_1_l ; apply Rplus_le_compat.\n    apply Rle_trans with (2 := proj1 (sqrt_plus_sqr _ _)).\n    rewrite -> Rabs_pos_eq by apply norm_ge_0.\n    by apply Rmax_l.\n    apply Rle_trans with (2 := proj1 (sqrt_plus_sqr _ _)).\n    rewrite -> (Rabs_pos_eq (norm (snd x))) by apply norm_ge_0.\n    by apply Rmax_r.\nQed.\n\n(** [fun k => scal k x] is a linear function *)\n",
                "context_tokens": 740,
                "proof_start_offset": 5017,
                "proof_end_offset": 5487,
                "proof": "Lemma is_linear_scal_l (x : V) : is_linear (fun k : K => scal k x).\nProof.\nsplit.\nmove => u v ; by apply @scal_distr_r.\nmove => u v /= ; apply sym_eq, @scal_assoc.\nexists (norm x + 1) ; split.\napply Rplus_le_lt_0_compat.\napply norm_ge_0.\nexact Rlt_0_1.\nmove => k /=.\nrewrite Rmult_plus_distr_r Rmult_1_l -(Rplus_0_r (norm (scal k x))).\napply Rplus_le_compat.\nnow rewrite Rmult_comm ; apply norm_scal.\napply norm_ge_0.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma is_linear_scal_l (x : V) : is_linear (fun k : K => scal k x).\nProof.\n  intros k x.\n  unfold is_linear.\n  rewrite (fun k => (k, k) (k, k)) (k, k)) (k, k)).\n  rewrite <- (fun k => (k, k)) (k, k)) (k, k)) (k, k)).\n  rewrite <- (fun k => (k, k)) (k, k)) (k, k)) (k, k)).\n  rewrite <- (fun k => (k, k)) (k, k)) (k, k)) (k, k).\n  rewrite <- (fun k => (k, k)) (k, k) (k, k)).\n  rewrite <- (fun k => (k, k)) (k, k)) (k, k).\n  rewrite <- (fun k => (k, k)) (k, k)) (k, k).\n  rewrite <- (fun k => (k, k)) (k, k)) (k, k).\n  rewrite <- (fun k => (k, k)) (k, k)).\n  rewrite <- (fun k k => (k, k)) (k, k).\n  rewrite (fun k k => (k, k))Qed.",
                    "Lemma is_linear_scal_l (x : V) : is_linear (fun k : K => scal k x).\nProof.\n  apply is_linear_add_linear; auto.\nQed.",
                    "Lemma is_linear_scal_l (x : V) : is_linear (fun k : K => scal k x).\nProof.\n  intros k x k x.\n  rewrite!linear_add_comm.\n  apply is_linear_add_l.\n  apply is_linear_linear_linear.\nQed.",
                    "Lemma is_linear_scal_l (x : V) : is_linear (fun k : K => scal k x).\nProof.\n  intros k x.\n  rewrite <- (Rplus_comm k x).\n  rewrite <- (Rplus_comm k x).\n  rewrite <- (Rplus_comm k x).\n  rewrite <- (Rplus_comm k x).\n  rewrite <- (Rplus_comm k x).\n  rewrite <- (Rplus_comm k x).\n  rewrite <- (Rplus_comm k x).\n  rewrite <- (Rplus_comm k x).\n  rewrite <- (Rplus_comm k x).\n  rewrite <- (Rplus_comm k x).\n  rewrite <- (Rplus_comm k x).\n  rewrite <- (Rplus_comm k x).\n  rewrite <- (Rplus_comm k x).\n  rewrite <- (Rplus_comm k x).\n  rewrite <- (Rplus_comm k x).\n  rewrite <- (Rplus_comm k x).\n  rewrite <- (Rplus_comm k x).\n  rewrite <- (Rplus_comm k x).\n  rewrite <- (Rplus_comm k x).\n  rewrite <- (Rplus_comm k x).\n  rewrite <- (Rplus_comm k x).\n  rewrite <- (Rplus_comm k x).\n  rewrite <- (Rplus_comm k x).\n  rewrite <- (Rplus_comm k x).\n  rewrite <- (Rplus_comm kQed.",
                    "Lemma is_linear_scal_l (x : V) : is_linear (fun k : K => scal k x).\nProof.\n  intros k x.\n  apply is_linear_add_r.\n  - apply is_linear_add_add_r.\n    exact is_linear_add_opp.\n  - apply is_linear_linear_add_add_l.\n    exact is_linear_add_opp.\n  - apply is_linear_linear_add_add_l.\n    exact is_linear_add_opp.\n    exact is_linear_add_opp_l.\n  - apply is_linear_add_opp.\n    exact is_linear_add_opp.\n    exact is_linear_add_opp_l.\n    exact is_linear_add_opp_r.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/coquelicot/theories/Derive.v",
                "context": "_lt_0_compat.\n    move => x.\n    eapply Rle_trans.\n    by apply Hn2.\n    rewrite Rmult_assoc.\n    apply Rmult_le_compat_l.\n    now apply Rlt_le.\n    apply Hn1.\nQed.\n\nSection Op_LinearFct.\n\nContext {K : AbsRing} {V : NormedModule K}.\n\n(** id is a linear function *)\nLemma is_linear_id : is_linear (fun (x : V) => x).\nProof.\n  repeat split.\n  - exists 1 ; split.\n    exact Rlt_0_1.\n    move => x ; rewrite Rmult_1_l.\n    by apply Rle_refl.\nQed.\n\n(** opp is a linear function *)\nLemma is_linear_opp : is_linear (@opp V).\nProof.\n  repeat split.\n  - move => x y.\n    now apply opp_plus.\n  - move => k x.\n    apply sym_eq.\n    apply: scal_opp_r.\n  - exists 1 ; split.\n    exact Rlt_0_1.\n    move => x ; rewrite norm_opp Rmult_1_l.\n    by apply Rle_refl.\nQed.\n\n(** plus is a linear function *)\nLemma is_linear_plus : is_linear (fun x : V * V => plus (fst x) (snd x)).\nProof.\n  repeat split.\n  - move => x y.\n    rewrite -!plus_assoc ; apply f_equal.\n    rewrite plus_comm -!plus_assoc.\n    by apply f_equal, @plus_comm.\n  - move => k x.\n    now rewrite scal_distr_l.\n  - exists 2 ; split.\n    exact Rlt_0_2.\n    move => x /= ; eapply Rle_trans.\n    by apply @norm_triangle.\n    rewrite Rmult_plus_distr_r Rmult_1_l ; apply Rplus_le_compat.\n    apply Rle_trans with (2 := proj1 (sqrt_plus_sqr _ _)).\n    rewrite -> Rabs_pos_eq by apply norm_ge_0.\n    by apply Rmax_l.\n    apply Rle_trans with (2 := proj1 (sqrt_plus_sqr _ _)).\n    rewrite -> (Rabs_pos_eq (norm (snd x))) by apply norm_ge_0.\n    by apply Rmax_r.\nQed.\n\n(** [fun k => scal k x] is a linear function *)\nLemma is_linear_scal_l (x : V) :\n  is_linear (fun k : K => scal k x).\nProof.\n  split.\n  - move => u v ; by apply @scal_distr_r.\n  - move => u v /= ; apply sym_eq, @scal_assoc.\n  - exists (norm x + 1) ; split.\n    apply Rplus_le_lt_0_compat.\n    apply norm_ge_0.\n    exact Rlt_0_1.\n    move => k /=.\n    rewrite Rmult_plus_distr_r Rmult_1_l -(Rplus_0_r (norm (scal k x))).\n    apply Rplus_le_compat.\n    now rewrite Rmult_comm ; apply norm_scal.\n    apply norm_ge_0.\nQed.\n\n(** [fun x => scal k x] is a linear function if [mult] is commutative *)\n",
                "context_tokens": 724,
                "proof_start_offset": 5562,
                "proof_end_offset": 6076,
                "proof": "Lemma is_linear_scal_r (k : K) : (forall n m : K, mult n m = mult m n) -> is_linear (fun x : V => scal k x).\nProof.\nsplit.\nmove => u v ; by apply @scal_distr_l.\nmove => u v /= ; apply sym_eq ; rewrite !@scal_assoc.\nby rewrite H.\nexists (abs k + 1) ; split.\napply Rplus_le_lt_0_compat.\napply abs_ge_0.\nexact Rlt_0_1.\nmove => x /=.\nrewrite Rmult_plus_distr_r Rmult_1_l -(Rplus_0_r (norm (scal k x))).\napply Rplus_le_compat.\napply norm_scal.\napply norm_ge_0.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma is_linear_scal_r (k : K) : (forall n m : K, mult n m = mult m n) -> is_linear (fun x : V => scal k x).\nProof.\n  intros k x k x.\n  - move=> x k x k.\n    rewrite <- (Rplus_comm k x k).\n    apply Rplus_lt_compat.\n    apply Rplus_lt_compat_l.\n    apply Rplus_lt_compat_l.\n    apply Rplus_lt_compat_l.\n    apply Rplus_lt_compat_l.\n    apply Rplus_lt_compat_l.\n    apply Rplus_lt_compat_l.\n    apply Rplus_lt_compat_l.\n    apply Rplus_lt_compat_l.\n    apply Rplus_lt_compat_l.\n    apply Rplus_lt_compat_l.\n    apply Rplus_lt_compat_l.\n    apply Rplus_lt_compat_l.\n    apply Rplus_lt_compat_l.\n    apply Rplus_lt_compat_l.\n    apply Rplus_lt_compat_l.\n    apply Rplus_lt_compat_l.\n    apply Rplus_lt_compat_l.\n    apply Rplus_lt_compat_l.\n    apply Rplus_lt_compat_l.\n    apply Rplus_lt_compat_l.\n    apply Rplus_lt_compat_l.\n    apply Rplus_lt_compat_Qed.",
                    "Lemma is_linear_scal_r (k : K) : (forall n m : K, mult n m = mult m n) -> is_linear (fun x : V => scal k x).\nProof.\n  intros k x y.\n  rewrite (is_linear_add k x) ; apply is_linear_add.\n  - move=> u; apply is_linear_add.\n    apply is_linear_add.\n    exact is_linear_add.\n  - move=> u; apply is_linear.\n    exact is_linear_add.\nQed.",
                    "Lemma is_linear_scal_r (k : K) : (forall n m : K, mult n m = mult m n) -> is_linear (fun x : V => scal k x).\nProof.\n  intros k x y.\n  rewrite <- (sum_f_f_R0 (fun k => x) (sum_f_R0 (fun k => x) (sum_f_R0 (fun k => x) (sum_f_R0 (fun k => x) (sum_f_R0 (fun k => x) (sum_f_R0 (fun k => x) (sum_f_R0 (fun k => x)) (sum_f_R0 (fun k => x) (sum_f_R0 (fun k => x)) (sum_f_R0 (fun k => x) (sum_f_R0 (fun k => x)) (sum_f_R0 (fun k => x)) (sum_f_R0 (fun k => x)) (sum_f_R0 (fun k => x)) (sum_f_R0 (fun k => x)) (sum_f_R0 (fun k => x)) (sum_f_R0 (fun k => x)) (sum_f_R0 (fun k => x)) (sum_f_R0 (Qed.",
                    "Lemma is_linear_scal_r (k : K) : (forall n m : K, mult n m = mult m n) -> is_linear (fun x : V => scal k x).\nProof.\n  intros k x k x.\n  rewrite <- (Rplus_comm k x).\n  apply Rplus_le_compat_l.\n  - rewrite Rplus_comm.\n    rewrite Rplus_comm.\n    apply Rplus_le_compat_l.\n    apply Rplus_le_compat_l.\n    apply Rplus_le_compat_l.\n    apply Rplus_le_compat_l.\n    apply Rplus_le_compat_l.\n    apply Rplus_le_compat_l.\n    apply Rplus_le_compat_l.\n    apply Rplus_le_compat_l.\n    apply Rplus_le_compat_l.\n    apply Rplus_le_compat_l.\n    apply Rplus_lt_compat_l.\n    apply Rplus_le_compat_l.\n    apply Rplus_le_compat_l.\n    apply Rplus_le_compat_l.\n    apply Rplus_le_compat_l.\n    apply Rplus_lt_compat_l.\n    apply Rplus_lt_compat_l.\n    apply Rplus_lt_compat_l.\n    apply Rplus_le_compat_l.\n    apply Rplus_le_compat_l.\n    apply Rplus_le_compat_l.\n    apply RplusQed.",
                    "Lemma is_linear_scal_r (k : K) : (forall n m : K, mult n m = mult m n) -> is_linear (fun x : V => scal k x).\nProof.\n  intros k m k k.\n  apply (is_linear_add k k k).\n  - rewrite (Rplus_comm k k).\n    apply Rplus_le_compat_l.\n    exact Rlt_0_1.\n  - rewrite Rplus_0_l.\n    exact Rlt_0_1.\n  - rewrite Rplus_0_l.\n    apply Rplus_le_compat_l.\n    exact Rlt_0_1.\n  - rewrite Rplus_0_l.\n    exact Rplus_le_compat_l.\n    exact Rlt_0_1.\n  - rewrite Rplus_0_r.\n    exact Rplus_le_compat_l.\n    exact Rlt_0_1.\nQed."
                ]
            }
        ],
        "fermat4": [
            {
                "filepath": "./coq_projects/fermat4/ArithCompl.v",
                "context": "\nLemma prop2 : forall m n : Z, rel_prime m n -> rel_prime (m * m) (n * n).\nProof.\n  intros; apply rel_prime_mult; apply rel_prime_sym; apply rel_prime_mult;\n    apply rel_prime_sym; assumption.\nQed.\n\nLemma is_sqr_compat : forall k a : Z,\n  k <> 0 -> is_sqr ((k * k) * a) -> is_sqr a.\nProof.\n  intros; elim H0; clear H0; intros; do 2 (elim H1; clear H1; intros);\n    elim (rel_prime_dec x k); intro;\n      [ generalize (prop2 _ _ a0); clear a0; intro; rewrite H1 in H3;\n        elim (relp_mult2 _ _ H3); intro;\n          [ rewrite H4 in H1; rewrite Zmult_1_l in H1; rewrite <- H1;\n            unfold is_sqr; intuition; exists x; intuition\n          | elimtype False; generalize (sqr_pos k); intro; rewrite H4 in H5;\n            auto with zarith ]\n      | elim (not_rel_prime1 _ _ b); clear b; intros; elim H3; clear H3;\n        intros; elim H4; clear H4; intros; elim (gcd_rel_prime _ _ _ H3);\n        clear H3; intros; do 2 (elim H3; clear H3; intros); elim H6; clear H6;\n        intros; rewrite H3 in H1; rewrite H6 in H1; elim (Z_eq_dec x0 0);\n        intro; try (elimtype False; rewrite a0 in H6; simpl in H6; auto);\n        replace (x0 * x1 * (x0 * x1)) with (x0 * x0 * (x1 * x1)) in H1;\n        try ring; replace (x0 * x2 * (x0 * x2) * a) with\n        (x0 * x0 * (x2 * x2 * a)) in H1; try ring; generalize (sqr_spos _ b);\n        clear b; intro; cut ((x1 * x1) = x2 * x2 * a);\n        try (apply Zcompare_Eq_eq;\n        rewrite (Zmult_compare_compat_l (x1 * x1) (x2 * x2 * a) (x0 * x0) H8);\n        elim (Zcompare_Eq_iff_eq (x0 * x0 * (x1 * x1))\n        (x0 * x0 * (x2 * x2 * a))); auto); clear H1; intro;\n        generalize (prop2 _ _ H7); clear H7; intro; rewrite H1 in H7;\n        elim (relp_mult2 _ _ H7); intro;\n          [ rewrite H9 in H1; rewrite Zmult_1_l in H1; rewrite <- H1;\n            elim (Z_le_dec 0 x1); intro;\n              [ unfold is_sqr; intuition; exists x1; intuition\n              | split; [ apply Zge_le; apply sqr_pos | exists (-x1);\n                intuition; ring ] ]\n          | elimtype False; generalize (sqr_pos x2); intro; rewrite H9 in H10;\n            auto with zarith ] ].\nQed.\n\n",
                "context_tokens": 738,
                "proof_start_offset": 20559,
                "proof_end_offset": 20779,
                "proof": "Lemma divide_trans : forall a b c : Z, (a | b) -> (b | c) -> (a | c).\nProof.\nintros a b c (q,H) (q0,H0); rewrite H in H0; clear H; rewrite Zmult_assoc in H0; apply (Zdivide_intro a c (q0 * q)); assumption.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma divide_trans : forall a b c : Z, (a | b) -> (b | c) -> (a | c).\nProof.\n  intros; unfold divide; rewrite H; auto with zarith.\n  unfold divide; rewrite H; auto with zarith.\n  unfold divide; rewrite H; auto with zarith.\n  unfold divide; rewrite H; auto with zarith.\n  unfold divide; rewrite H; auto with zarith.\n  unfold divide; rewrite H; auto with zarith.\n  unfold divide; rewrite H; auto with zarith.\n  unfold divide; rewrite H; auto with zarith.\n  unfold divide; rewrite H; auto with zarith.\n  unfold divide; rewrite H; auto with zarith.\n  unfold divide; rewrite H; auto with zarith.\n  unfold divide; rewrite H; auto with zarith.\n  unfold divide; rewrite H; auto with zarith.\n  unfold divide; rewrite H; auto with zarith.\n  unfold divide; rewrite H; auto with zarith.\n  unfold divide; rewrite H; auto with zarith.\n  unfold divide; rewrite H; auto with zarith.\n  unfold divide; rewrite H; auto with zarith.\n  unfold divide; rewrite H; auto with zarith.\n  unfold divide; rewrite H; auto with zarith.\n  unfold divide; rewrite H; auto with zarith.\n  unfold divide; rewrite H; auto with zarith.\n  unfold divide; rewrite H; auto withQed.",
                    "Lemma divide_trans : forall a b c : Z, (a | b) -> (b | c) -> (a | c).\nProof.\n  intros a b c; unfold divide;\n    rewrite <- (gcd_trans a b c);\n    [ apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (a | apply divide_trans with (aQed.",
                    "Lemma divide_trans : forall a b c : Z, (a | b) -> (b | c) -> (a | c).\nProof.\n  intros; elim H; clear H; intros; do 2 (elim H0); intro;\n            [ rewrite H; clear H0 in H; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite ZmultQed.",
                    "Lemma divide_trans : forall a b c : Z, (a | b) -> (b | c) -> (a | c).\nProof.\n  intros; elim (le_trans (a | b) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a | c) (a c) (Qed.",
                    "Lemma divide_trans : forall a b c : Z, (a | b) -> (b | c) -> (a | c).\nProof.\n  intros a b c; unfold divide; intros; do 2 (apply Zle_trans with (b | apply Zlt_le_trans with (b | apply Zlt_le_trans with (b | apply Zlt_le_trans with (b | apply Zlt_le_trans with (b | apply Zlt_le_trans with (b | apply Zlt_le_trans with (b | apply Zlt_le_trans with (b | apply Zlt_le_trans with (b | apply Zlt_le_trans with (b | apply Zlt_le_trans with (b | apply Zlt_le_trans with (b | apply Zlt_le_trans with (b | apply Zlt_le_trans with (b | apply Zlt_le_trans with (b | apply Zlt_le_trans with (b | apply Zlt_le_trans with (b | apply Zlt_le_trans with (b | apply Zlt_le_trans with (b | apply Zlt_le_trans with (b | apply Zlt_le_weak with (b | apply Zlt_le_weak ]; apply Zlt_le_weak.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/fermat4/ArithCompl.v",
                "context": " is_sqr ((k * k) * a) -> is_sqr a.\nProof.\n  intros; elim H0; clear H0; intros; do 2 (elim H1; clear H1; intros);\n    elim (rel_prime_dec x k); intro;\n      [ generalize (prop2 _ _ a0); clear a0; intro; rewrite H1 in H3;\n        elim (relp_mult2 _ _ H3); intro;\n          [ rewrite H4 in H1; rewrite Zmult_1_l in H1; rewrite <- H1;\n            unfold is_sqr; intuition; exists x; intuition\n          | elimtype False; generalize (sqr_pos k); intro; rewrite H4 in H5;\n            auto with zarith ]\n      | elim (not_rel_prime1 _ _ b); clear b; intros; elim H3; clear H3;\n        intros; elim H4; clear H4; intros; elim (gcd_rel_prime _ _ _ H3);\n        clear H3; intros; do 2 (elim H3; clear H3; intros); elim H6; clear H6;\n        intros; rewrite H3 in H1; rewrite H6 in H1; elim (Z_eq_dec x0 0);\n        intro; try (elimtype False; rewrite a0 in H6; simpl in H6; auto);\n        replace (x0 * x1 * (x0 * x1)) with (x0 * x0 * (x1 * x1)) in H1;\n        try ring; replace (x0 * x2 * (x0 * x2) * a) with\n        (x0 * x0 * (x2 * x2 * a)) in H1; try ring; generalize (sqr_spos _ b);\n        clear b; intro; cut ((x1 * x1) = x2 * x2 * a);\n        try (apply Zcompare_Eq_eq;\n        rewrite (Zmult_compare_compat_l (x1 * x1) (x2 * x2 * a) (x0 * x0) H8);\n        elim (Zcompare_Eq_iff_eq (x0 * x0 * (x1 * x1))\n        (x0 * x0 * (x2 * x2 * a))); auto); clear H1; intro;\n        generalize (prop2 _ _ H7); clear H7; intro; rewrite H1 in H7;\n        elim (relp_mult2 _ _ H7); intro;\n          [ rewrite H9 in H1; rewrite Zmult_1_l in H1; rewrite <- H1;\n            elim (Z_le_dec 0 x1); intro;\n              [ unfold is_sqr; intuition; exists x1; intuition\n              | split; [ apply Zge_le; apply sqr_pos | exists (-x1);\n                intuition; ring ] ]\n          | elimtype False; generalize (sqr_pos x2); intro; rewrite H9 in H10;\n            auto with zarith ] ].\nQed.\n\nLemma divide_trans : forall a b c : Z, (a | b) -> (b | c) -> (a | c).\nProof.\n  intros a b c (q,H) (q0,H0);\n    rewrite H in H0; clear H; rewrite Zmult_assoc in H0;\n    apply (Zdivide_intro a c (q0 * q)); assumption.\nQed.\n\n",
                "context_tokens": 736,
                "proof_start_offset": 20781,
                "proof_end_offset": 21011,
                "proof": "Lemma divide_sum : forall a b c : Z, (a | b) -> (a | b + c) -> (a | c).\nProof.\nintros a b c (q,H) (q0,H0); cut (c = q0 * a - b); auto with zarith; clear H0; intro; rewrite H in H0; exists (q0 - q); rewrite H0; ring.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma divide_sum : forall a b c : Z, (a | b) -> (a | b + c) -> (a | c).\nProof.\n  intros a b c (q,H0);\n    rewrite H0 in H0; rewrite Zmult_1_l in H0; rewrite Zmult_1_l in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1Qed.",
                    "Lemma divide_sum : forall a b c : Z, (a | b) -> (a | b + c) -> (a | c).\nProof.\n  intros a b c (q,H0);\n    rewrite H in H0; clear H0; intros;\n    rewrite H in H0; rewrite Zmult_1_l in H; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_Qed.",
                    "Lemma divide_sum : forall a b c : Z, (a | b) -> (a | b + c) -> (a | c).\nProof.\n  intros a b c (q,H0);\n    rewrite H0 in H0; rewrite Zmult_1_l in H; rewrite Zmult_1_l in H; rewrite Zmult_1_l in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_l in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_rQed.",
                    "Lemma divide_sum : forall a b c : Z, (a | b) -> (a | b + c) -> (a | c).\nProof.\n  intros a b c (q,H0);\n    rewrite H in H0; clear H0;\n    rewrite (gcd_sym _ _ _ H0); intro; rewrite H0 in H0; rewrite (gcd_sym _ _ H0);\n      rewrite H0 in H0; rewrite (gcd_sym _ _ H0);\n      rewrite H0 in H0; rewrite (gcd_sym _ _ H0);\n      rewrite H0 in H0; rewrite (gcd_sym _ _ H0);\n      rewrite (gcd_sym _ _ H0);\n      rewrite H0 in H0; rewrite (gcd_sym _ _ H0);\n      rewrite H0 in H0; rewrite (gcd_sym _ _ H0);\n      rewrite H0 in H0; rewrite (gcd_sym _ _ H0);\n      rewrite H0 in H0; rewrite (gcd_sym _ _ H0);\n      rewrite H0 in H0; rewrite (gcd_sym _ _ H0);\n      rewrite H0 in H0; rewrite (gcd_sym _ _ H0);\n      rewrite H0 in H0; rewrite (gcd_sym _ _ H0);\n      rewrite H0 in H0; rewriteQed.",
                    "Lemma divide_sum : forall a b c : Z, (a | b) -> (a | b + c) -> (a | c).\nProof.\n  intros a b c (q,H0);\n    rewrite H0 in H0; rewrite Zmult_1_l in H0; rewrite Zmult_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_r in H0; rewrite Zmult_1_rQed."
                ]
            },
            {
                "filepath": "./coq_projects/fermat4/ArithCompl.v",
                "context": " rewrite H4 in H1; rewrite Zmult_1_l in H1; rewrite <- H1;\n            unfold is_sqr; intuition; exists x; intuition\n          | elimtype False; generalize (sqr_pos k); intro; rewrite H4 in H5;\n            auto with zarith ]\n      | elim (not_rel_prime1 _ _ b); clear b; intros; elim H3; clear H3;\n        intros; elim H4; clear H4; intros; elim (gcd_rel_prime _ _ _ H3);\n        clear H3; intros; do 2 (elim H3; clear H3; intros); elim H6; clear H6;\n        intros; rewrite H3 in H1; rewrite H6 in H1; elim (Z_eq_dec x0 0);\n        intro; try (elimtype False; rewrite a0 in H6; simpl in H6; auto);\n        replace (x0 * x1 * (x0 * x1)) with (x0 * x0 * (x1 * x1)) in H1;\n        try ring; replace (x0 * x2 * (x0 * x2) * a) with\n        (x0 * x0 * (x2 * x2 * a)) in H1; try ring; generalize (sqr_spos _ b);\n        clear b; intro; cut ((x1 * x1) = x2 * x2 * a);\n        try (apply Zcompare_Eq_eq;\n        rewrite (Zmult_compare_compat_l (x1 * x1) (x2 * x2 * a) (x0 * x0) H8);\n        elim (Zcompare_Eq_iff_eq (x0 * x0 * (x1 * x1))\n        (x0 * x0 * (x2 * x2 * a))); auto); clear H1; intro;\n        generalize (prop2 _ _ H7); clear H7; intro; rewrite H1 in H7;\n        elim (relp_mult2 _ _ H7); intro;\n          [ rewrite H9 in H1; rewrite Zmult_1_l in H1; rewrite <- H1;\n            elim (Z_le_dec 0 x1); intro;\n              [ unfold is_sqr; intuition; exists x1; intuition\n              | split; [ apply Zge_le; apply sqr_pos | exists (-x1);\n                intuition; ring ] ]\n          | elimtype False; generalize (sqr_pos x2); intro; rewrite H9 in H10;\n            auto with zarith ] ].\nQed.\n\nLemma divide_trans : forall a b c : Z, (a | b) -> (b | c) -> (a | c).\nProof.\n  intros a b c (q,H) (q0,H0);\n    rewrite H in H0; clear H; rewrite Zmult_assoc in H0;\n    apply (Zdivide_intro a c (q0 * q)); assumption.\nQed.\n\nLemma divide_sum : forall a b c : Z, (a | b) -> (a | b + c) -> (a | c).\nProof.\n  intros a b c (q,H) (q0,H0);\n    cut (c = q0 * a - b); auto with zarith; clear H0; intro; rewrite H in H0;\n    exists (q0 - q); rewrite H0; ring.\nQed.\n\n",
                "context_tokens": 734,
                "proof_start_offset": 21013,
                "proof_end_offset": 21297,
                "proof": "Lemma divide_mult_l : forall a b c : Z, c <> 0 -> (c * a | c * b) -> (a | b).\nProof.\nintros a b c H (q,H0); replace (q * (c * a)) with (c * (q * a)) in H0; try ring; generalize (Zmult_eq_reg_l _ _ _ H0 H); clear H0; intro; apply Zdivide_intro with (q := q); assumption.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma divide_mult_l : forall a b c : Z, c <> 0 -> (c * a | c * b) -> (a | b).\nProof.\n  intros a b c (q,H0);\n    [ apply divide_mult_r; assumption | apply lt_le_compat; assumption ].\nQed.",
                    "Lemma divide_mult_l : forall a b c : Z, c <> 0 -> (c * a | c * b) -> (a | b).\nProof.\n  intros a b c (q,H0);\n    unfold divide; intros; rewrite H0 in H0; rewrite H0 in H0;\n    apply (gcd_le_trans _ _ _ _ H0 H1);\n      clear H0; intros; elim (gcd_le_trans _ _ _ _ H0); intro;\n          [ rewrite H0 in H0; rewrite <- H0 in H0; rewrite <- H0 in H0; rewrite <- H0 in H0; rewrite <- H0 in H0; rewrite <- H0 in H0; rewrite <- H0 in H0; rewrite <- H0 in H0; rewrite <- H0 in H0; rewrite <- H0 in H0; rewrite <- H0 in H0; rewrite <- H0 in H0; rewrite <- H0 in H0; rewrite <- H0 in H0; rewrite <- H0 in H0; rewrite <- H0 in H0; rewrite <- H0 in H0; rewrite <- H0 in H0; rewrite <- H0 in H0; rewrite <- H0 in H0; rewrite <- H0 in H0; rewrite <- H0 in H0; rewrite <- H0 inQed.",
                    "Lemma divide_mult_l : forall a b c : Z, c <> 0 -> (c * a | c * b) -> (a | b).\nProof.\n  intros a b c (q,H0);\n    [ apply divide_mult_l; auto with zarith | apply divide_mult_r; auto with zarith ].\n  apply divide_mult_r; auto with zarith.\n  apply divide_mult_r; auto with zarith.\n  apply divide_mult_r; auto with zarith.\nQed.",
                    "Lemma divide_mult_l : forall a b c : Z, c <> 0 -> (c * a | c * b) -> (a | b).\nProof.\n  intros a b c (q,H0);\n    [ rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0;\n    rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0;\n    rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0;\n    rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0;\n    rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0;\n    rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0; rewrite H0 inQed.",
                    "Lemma divide_mult_l : forall a b c : Z, c <> 0 -> (c * a | c * b) -> (a | b).\nProof.\n  intros a b c (q,H0);\n    rewrite H0 in H0; rewrite <- H0 in H1; rewrite <- H0 in H1; rewrite <- H1 in H1; rewrite <- H1 in H1; rewrite <- H1 in H2; rewrite <- H1 in H1; rewrite <- H1 in H1; rewrite <- H1 in H1; rewrite <- H1 in H1; rewrite <- H1 in H1; rewrite <- H1 in H1; rewrite <- H1 in H1; rewrite <- H1 in H1; rewrite <- H1 in H1; rewrite <- H1 in H1; rewrite <- H1 in H1; rewrite <- H1 in H1; rewrite <- H1 in H1; rewrite <- H1 in H1; rewrite <- H1 in H1; rewrite <- H1 in H1; rewrite <- H1 in H1; rewrite <- H1 in H1; rewrite <- H1 in H1; rewrite <- H1 in H1; rewrite <- H1 in H1; rewrite <- H1 in H1; rewrite <- H1 in H1; rewrite <- H1 in H1; rewrite <-Qed."
                ]
            },
            {
                "filepath": "./coq_projects/fermat4/ArithCompl.v",
                "context": " (gcd_rel_prime _ _ _ H3);\n        clear H3; intros; do 2 (elim H3; clear H3; intros); elim H6; clear H6;\n        intros; rewrite H3 in H1; rewrite H6 in H1; elim (Z_eq_dec x0 0);\n        intro; try (elimtype False; rewrite a0 in H6; simpl in H6; auto);\n        replace (x0 * x1 * (x0 * x1)) with (x0 * x0 * (x1 * x1)) in H1;\n        try ring; replace (x0 * x2 * (x0 * x2) * a) with\n        (x0 * x0 * (x2 * x2 * a)) in H1; try ring; generalize (sqr_spos _ b);\n        clear b; intro; cut ((x1 * x1) = x2 * x2 * a);\n        try (apply Zcompare_Eq_eq;\n        rewrite (Zmult_compare_compat_l (x1 * x1) (x2 * x2 * a) (x0 * x0) H8);\n        elim (Zcompare_Eq_iff_eq (x0 * x0 * (x1 * x1))\n        (x0 * x0 * (x2 * x2 * a))); auto); clear H1; intro;\n        generalize (prop2 _ _ H7); clear H7; intro; rewrite H1 in H7;\n        elim (relp_mult2 _ _ H7); intro;\n          [ rewrite H9 in H1; rewrite Zmult_1_l in H1; rewrite <- H1;\n            elim (Z_le_dec 0 x1); intro;\n              [ unfold is_sqr; intuition; exists x1; intuition\n              | split; [ apply Zge_le; apply sqr_pos | exists (-x1);\n                intuition; ring ] ]\n          | elimtype False; generalize (sqr_pos x2); intro; rewrite H9 in H10;\n            auto with zarith ] ].\nQed.\n\nLemma divide_trans : forall a b c : Z, (a | b) -> (b | c) -> (a | c).\nProof.\n  intros a b c (q,H) (q0,H0);\n    rewrite H in H0; clear H; rewrite Zmult_assoc in H0;\n    apply (Zdivide_intro a c (q0 * q)); assumption.\nQed.\n\nLemma divide_sum : forall a b c : Z, (a | b) -> (a | b + c) -> (a | c).\nProof.\n  intros a b c (q,H) (q0,H0);\n    cut (c = q0 * a - b); auto with zarith; clear H0; intro; rewrite H in H0;\n    exists (q0 - q); rewrite H0; ring.\nQed.\n\nLemma divide_mult_l : forall a b c : Z, c <> 0 -> (c * a | c * b) -> (a | b).\nProof.\n  intros a b c H (q,H0); replace (q * (c * a)) with (c * (q * a))\n    in H0; try ring; generalize (Zmult_eq_reg_l _ _ _ H0 H); clear H0; intro;\n    apply Zdivide_intro with (q := q); assumption.\nQed.\n\n",
                "context_tokens": 747,
                "proof_start_offset": 21299,
                "proof_end_offset": 21412,
                "proof": "Lemma divide_0 : forall z : Z, (0 | z) -> z = 0.\nProof.\nintros; elim H; clear H; intros; auto with zarith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma divide_0 : forall z : Z, (0 | z) -> z = 0.\nProof.\n  intros z H; rewrite H in H0; rewrite H in H0; rewrite H0 in H0;\n    apply Zdivide_intro with (q := q); assumption.\nQed.",
                    "Lemma divide_0 : forall z : Z, (0 | z) -> z = 0.\nProof.\n  intros z z H0 H0 H1; rewrite H1 in H0;\n    rewrite (Zmult_comm z); apply Zle_trans with (q := q); assumption.\nQed.",
                    "Lemma divide_0 : forall z : Z, (0 | z) -> z = 0.\nProof.\n  intros z H; unfold divide in H; rewrite H in H0;\n    apply (gcd_0_r _ _ H0); clear H0; intro; rewrite H in H0;\n      apply (gcd_0_r _ H0); clear H0; intro; rewrite H0 in H0;\n        rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0;\n        rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0;\n        rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0;\n        rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0;\n        rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0;\n        rewrite H0 in H0; rewrite H0 in H0;\n        rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in H0;\n        rewrite in H0; rewrite H0 in H0; rewrite H0 in H0;\n        rewrite H0 in H0; rewrite H0 in H0; rewrite H0 in HQed.",
                    "Lemma divide_0 : forall z : Z, (0 | z) -> z = 0.\nProof.\n  intros z H; replace (q * (q * a)) with (q * (q * a)) by ring;\n    rewrite H0; rewrite H0; ring.\nQed.",
                    "Lemma divide_0 : forall z : Z, (0 | z) -> z = 0.\nProof.\n  intros z; apply divide_0_r.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/fermat4/ArithCompl.v",
                "context": "1; elim (Z_eq_dec x0 0);\n        intro; try (elimtype False; rewrite a0 in H6; simpl in H6; auto);\n        replace (x0 * x1 * (x0 * x1)) with (x0 * x0 * (x1 * x1)) in H1;\n        try ring; replace (x0 * x2 * (x0 * x2) * a) with\n        (x0 * x0 * (x2 * x2 * a)) in H1; try ring; generalize (sqr_spos _ b);\n        clear b; intro; cut ((x1 * x1) = x2 * x2 * a);\n        try (apply Zcompare_Eq_eq;\n        rewrite (Zmult_compare_compat_l (x1 * x1) (x2 * x2 * a) (x0 * x0) H8);\n        elim (Zcompare_Eq_iff_eq (x0 * x0 * (x1 * x1))\n        (x0 * x0 * (x2 * x2 * a))); auto); clear H1; intro;\n        generalize (prop2 _ _ H7); clear H7; intro; rewrite H1 in H7;\n        elim (relp_mult2 _ _ H7); intro;\n          [ rewrite H9 in H1; rewrite Zmult_1_l in H1; rewrite <- H1;\n            elim (Z_le_dec 0 x1); intro;\n              [ unfold is_sqr; intuition; exists x1; intuition\n              | split; [ apply Zge_le; apply sqr_pos | exists (-x1);\n                intuition; ring ] ]\n          | elimtype False; generalize (sqr_pos x2); intro; rewrite H9 in H10;\n            auto with zarith ] ].\nQed.\n\nLemma divide_trans : forall a b c : Z, (a | b) -> (b | c) -> (a | c).\nProof.\n  intros a b c (q,H) (q0,H0);\n    rewrite H in H0; clear H; rewrite Zmult_assoc in H0;\n    apply (Zdivide_intro a c (q0 * q)); assumption.\nQed.\n\nLemma divide_sum : forall a b c : Z, (a | b) -> (a | b + c) -> (a | c).\nProof.\n  intros a b c (q,H) (q0,H0);\n    cut (c = q0 * a - b); auto with zarith; clear H0; intro; rewrite H in H0;\n    exists (q0 - q); rewrite H0; ring.\nQed.\n\nLemma divide_mult_l : forall a b c : Z, c <> 0 -> (c * a | c * b) -> (a | b).\nProof.\n  intros a b c H (q,H0); replace (q * (c * a)) with (c * (q * a))\n    in H0; try ring; generalize (Zmult_eq_reg_l _ _ _ H0 H); clear H0; intro;\n    apply Zdivide_intro with (q := q); assumption.\nQed.\n\nLemma divide_0 : forall z : Z, (0 | z) -> z = 0.\nProof.\n  intros; elim H; clear H; intros; auto with zarith.\nQed.\n\n",
                "context_tokens": 735,
                "proof_start_offset": 21414,
                "proof_end_offset": 21759,
                "proof": "Lemma divide_2 : forall z : Z, 0 <= z -> z <> 0 -> z <> 1 -> (z | 2) -> z = 2.\nProof.\nintros; cut (2 <> 0); auto with zarith; intro; generalize (Zdivide_bounds _ _ H2 H3); clear H2; simpl; generalize H; generalize H0; generalize H1; elim z; simpl; intros; progress (auto with zarith) || (elimtype False; auto with zarith).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma divide_2 : forall z : Z, 0 <= z -> z <> 0 -> z <> 1 -> (z | 2) -> z = 2.\nProof.\n  intros z; elim H; clear H; intros; auto with zarith.\nQed.",
                    "Lemma divide_2 : forall z : Z, 0 <= z -> z <> 0 -> z <> 1 -> (z | 2) -> z = 2.\nProof.\n  intros z; elim H; clear H; intros; auto with zarith.\nQed.",
                    "Lemma divide_2 : forall z : Z, 0 <= z -> z <> 0 -> z <> 1 -> (z | 2) -> z = 2.\nProof.\n  intros z; elim H; clear H; intros; auto with zarith.\nQed.",
                    "Lemma divide_2 : forall z : Z, 0 <= z -> z <> 0 -> z <> 1 -> (z | 2) -> z = 2.\nProof.\n  intros z z H; elim H; clear H; intros; auto with zarith.\nQed.",
                    "Lemma divide_2 : forall z : Z, 0 <= z -> z <> 0 -> z <> 1 -> (z | 2) -> z = 2.\nProof.\n  intros; elim H; clear H; intros; auto with zarith.\nQed."
                ]
            }
        ],
        "demos": [
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": ") \\/ ~ (forall m : nat, even m)).\ntauto.\nQed.\n\n(*-- Intuition: Tactics for simplifications of buts, based on LJT calcul.\n     Ref      : Cesar Munoz, Rapport de stage de DEA 1993. --*)\n\nTheorem Intu :\n (forall x : nat, P x) /\\ B -> (forall y : nat, P y) /\\ P 0 \\/ B /\\ P 0.\nintuition.\nQed.\n\n(*  A private club has the following rules :\n *\n * . rule 1 : Every non-scottish member wears red socks\n * . rule 2 : Every member wears a kilt or doesn't wear red socks\n * . rule 3 : The married members don't go out on sunday\n * . rule 4 : A member goes out on sunday if and only if he is scottish\n * . rule 5 : Every member who wears a kilt is scottish and married\n * . rule 6 : Every scottish member wears a kilt\n *\n *  Actually, no one can be accepted!\n *)\n\nSection club.\n\nVariable Scottish RedSocks WearKilt Married GoOutSunday : Prop.\n\nHypothesis rule1 : ~ Scottish -> RedSocks.\nHypothesis rule2 : WearKilt \\/ ~ RedSocks.\nHypothesis rule3 : Married -> ~ GoOutSunday.\nHypothesis rule4 : GoOutSunday <-> Scottish.\nHypothesis rule5 : WearKilt -> Scottish /\\ Married.\nHypothesis rule6 : Scottish -> WearKilt.\n\nLemma NoMember : False.\ntauto.\nQed.\n\nEnd club.\n\nTheorem tauto : (forall x : nat, P x) -> forall y : nat, P y.\ntauto.\nQed.\n\nTheorem tauto1 : A -> A.\ntauto.\nQed.\n\nTheorem tauto2 : (A -> B -> C) -> (A -> B) -> A -> C.\ntauto.\nQed.\n\nTheorem a : forall (x0 : A \\/ B) (x1 : B /\\ C), A -> B.\ntauto.\nQed.\n\nTheorem a2 : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem a4 : ~ A -> ~ A.\ntauto.\nQed.\n\nTheorem e2 : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\nTheorem e4 : ~ ~ (A \\/ B -> A \\/ B).\ntauto.\nQed.\n\nTheorem y0 :\n forall (x0 : A) (x1 : ~ A) (x2 : A -> B) (x3 : A \\/ B) (x4 : A /\\ B),\n A -> False.\ntauto.\nQed.\n\nTheorem y1 : forall x0 : (A /\\ B) /\\ C, B.\ntauto.\nQed.\n\nTheorem y2 : forall (x0 : A) (x1 : B), C \\/ B.\ntauto.\nQed.\n\nTheorem y3 : forall x0 : A /\\ B, B /\\ A.\ntauto.\nQed.\n\n",
                "context_tokens": 751,
                "proof_start_offset": 3939,
                "proof_end_offset": 3991,
                "proof": "Theorem y5 : forall x0 : A \\/ B, B \\/ A.\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem y5 : forall x0 : A \\/ B, B \\/ A.\ntauto.\nQed.",
                    "Theorem y5 : forall x0 : A \\/ B, B \\/ A.\ntauto.\nQed.",
                    "Theorem y5 : forall x0 : A \\/ B, B \\/ A.\ntauto.\nQed.",
                    "Theorem y5 : forall x0 : A \\/ B, B \\/ A.\ntauto.\nQed.",
                    "Theorem y5 : forall x0 : A \\/ B, B \\/ A.\ntauto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": " buts, based on LJT calcul.\n     Ref      : Cesar Munoz, Rapport de stage de DEA 1993. --*)\n\nTheorem Intu :\n (forall x : nat, P x) /\\ B -> (forall y : nat, P y) /\\ P 0 \\/ B /\\ P 0.\nintuition.\nQed.\n\n(*  A private club has the following rules :\n *\n * . rule 1 : Every non-scottish member wears red socks\n * . rule 2 : Every member wears a kilt or doesn't wear red socks\n * . rule 3 : The married members don't go out on sunday\n * . rule 4 : A member goes out on sunday if and only if he is scottish\n * . rule 5 : Every member who wears a kilt is scottish and married\n * . rule 6 : Every scottish member wears a kilt\n *\n *  Actually, no one can be accepted!\n *)\n\nSection club.\n\nVariable Scottish RedSocks WearKilt Married GoOutSunday : Prop.\n\nHypothesis rule1 : ~ Scottish -> RedSocks.\nHypothesis rule2 : WearKilt \\/ ~ RedSocks.\nHypothesis rule3 : Married -> ~ GoOutSunday.\nHypothesis rule4 : GoOutSunday <-> Scottish.\nHypothesis rule5 : WearKilt -> Scottish /\\ Married.\nHypothesis rule6 : Scottish -> WearKilt.\n\nLemma NoMember : False.\ntauto.\nQed.\n\nEnd club.\n\nTheorem tauto : (forall x : nat, P x) -> forall y : nat, P y.\ntauto.\nQed.\n\nTheorem tauto1 : A -> A.\ntauto.\nQed.\n\nTheorem tauto2 : (A -> B -> C) -> (A -> B) -> A -> C.\ntauto.\nQed.\n\nTheorem a : forall (x0 : A \\/ B) (x1 : B /\\ C), A -> B.\ntauto.\nQed.\n\nTheorem a2 : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem a4 : ~ A -> ~ A.\ntauto.\nQed.\n\nTheorem e2 : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\nTheorem e4 : ~ ~ (A \\/ B -> A \\/ B).\ntauto.\nQed.\n\nTheorem y0 :\n forall (x0 : A) (x1 : ~ A) (x2 : A -> B) (x3 : A \\/ B) (x4 : A /\\ B),\n A -> False.\ntauto.\nQed.\n\nTheorem y1 : forall x0 : (A /\\ B) /\\ C, B.\ntauto.\nQed.\n\nTheorem y2 : forall (x0 : A) (x1 : B), C \\/ B.\ntauto.\nQed.\n\nTheorem y3 : forall x0 : A /\\ B, B /\\ A.\ntauto.\nQed.\n\nTheorem y5 : forall x0 : A \\/ B, B \\/ A.\ntauto.\nQed.\n\n",
                "context_tokens": 746,
                "proof_start_offset": 3993,
                "proof_end_offset": 4051,
                "proof": "Theorem y6 : forall (x0 : A -> B) (x1 : A), B.\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem y6 : forall (x0 : A -> B) (x1 : A), B.\ntauto.\nQed.",
                    "Theorem y6 : forall (x0 : A -> B) (x1 : A), B.\ntauto.\nQed.",
                    "Theorem y6 : forall (x0 : A -> B) (x1 : A), B.\ntauto.\nQed.",
                    "Theorem y6 : forall (x0 : A -> B) (x1 : A), B.\ntauto.\nQed.",
                    "Theorem y6 : forall (x0 : A -> B) (x1 : A), B.\ntauto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": " Intu :\n (forall x : nat, P x) /\\ B -> (forall y : nat, P y) /\\ P 0 \\/ B /\\ P 0.\nintuition.\nQed.\n\n(*  A private club has the following rules :\n *\n * . rule 1 : Every non-scottish member wears red socks\n * . rule 2 : Every member wears a kilt or doesn't wear red socks\n * . rule 3 : The married members don't go out on sunday\n * . rule 4 : A member goes out on sunday if and only if he is scottish\n * . rule 5 : Every member who wears a kilt is scottish and married\n * . rule 6 : Every scottish member wears a kilt\n *\n *  Actually, no one can be accepted!\n *)\n\nSection club.\n\nVariable Scottish RedSocks WearKilt Married GoOutSunday : Prop.\n\nHypothesis rule1 : ~ Scottish -> RedSocks.\nHypothesis rule2 : WearKilt \\/ ~ RedSocks.\nHypothesis rule3 : Married -> ~ GoOutSunday.\nHypothesis rule4 : GoOutSunday <-> Scottish.\nHypothesis rule5 : WearKilt -> Scottish /\\ Married.\nHypothesis rule6 : Scottish -> WearKilt.\n\nLemma NoMember : False.\ntauto.\nQed.\n\nEnd club.\n\nTheorem tauto : (forall x : nat, P x) -> forall y : nat, P y.\ntauto.\nQed.\n\nTheorem tauto1 : A -> A.\ntauto.\nQed.\n\nTheorem tauto2 : (A -> B -> C) -> (A -> B) -> A -> C.\ntauto.\nQed.\n\nTheorem a : forall (x0 : A \\/ B) (x1 : B /\\ C), A -> B.\ntauto.\nQed.\n\nTheorem a2 : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem a4 : ~ A -> ~ A.\ntauto.\nQed.\n\nTheorem e2 : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\nTheorem e4 : ~ ~ (A \\/ B -> A \\/ B).\ntauto.\nQed.\n\nTheorem y0 :\n forall (x0 : A) (x1 : ~ A) (x2 : A -> B) (x3 : A \\/ B) (x4 : A /\\ B),\n A -> False.\ntauto.\nQed.\n\nTheorem y1 : forall x0 : (A /\\ B) /\\ C, B.\ntauto.\nQed.\n\nTheorem y2 : forall (x0 : A) (x1 : B), C \\/ B.\ntauto.\nQed.\n\nTheorem y3 : forall x0 : A /\\ B, B /\\ A.\ntauto.\nQed.\n\nTheorem y5 : forall x0 : A \\/ B, B \\/ A.\ntauto.\nQed.\n\nTheorem y6 : forall (x0 : A -> B) (x1 : A), B.\ntauto.\nQed.\n\n",
                "context_tokens": 738,
                "proof_start_offset": 4053,
                "proof_end_offset": 4125,
                "proof": "Theorem y7 : forall (x0 : A /\\ B -> C) (x1 : B) (x2 : A), C.\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem y7 : forall (x0 : A /\\ B -> C) (x1 : B) (x2 : A), C.\ntauto.\nQed.",
                    "Theorem y7 : forall (x0 : A /\\ B -> C) (x1 : B) (x2 : A), C.\ntauto.\nQed.",
                    "Theorem y7 : forall (x0 : A /\\ B -> C) (x1 : B) (x2 : A), C.\ntauto.\nQed.",
                    "Theorem y7 : forall (x0 : A /\\ B -> C) (x1 : B) (x2 : A), C.\ntauto.\nQed.",
                    "Theorem y7 : forall (x0 : A /\\ B -> C) (x1 : B) (x2 : A), C.\ntauto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": " P 0.\nintuition.\nQed.\n\n(*  A private club has the following rules :\n *\n * . rule 1 : Every non-scottish member wears red socks\n * . rule 2 : Every member wears a kilt or doesn't wear red socks\n * . rule 3 : The married members don't go out on sunday\n * . rule 4 : A member goes out on sunday if and only if he is scottish\n * . rule 5 : Every member who wears a kilt is scottish and married\n * . rule 6 : Every scottish member wears a kilt\n *\n *  Actually, no one can be accepted!\n *)\n\nSection club.\n\nVariable Scottish RedSocks WearKilt Married GoOutSunday : Prop.\n\nHypothesis rule1 : ~ Scottish -> RedSocks.\nHypothesis rule2 : WearKilt \\/ ~ RedSocks.\nHypothesis rule3 : Married -> ~ GoOutSunday.\nHypothesis rule4 : GoOutSunday <-> Scottish.\nHypothesis rule5 : WearKilt -> Scottish /\\ Married.\nHypothesis rule6 : Scottish -> WearKilt.\n\nLemma NoMember : False.\ntauto.\nQed.\n\nEnd club.\n\nTheorem tauto : (forall x : nat, P x) -> forall y : nat, P y.\ntauto.\nQed.\n\nTheorem tauto1 : A -> A.\ntauto.\nQed.\n\nTheorem tauto2 : (A -> B -> C) -> (A -> B) -> A -> C.\ntauto.\nQed.\n\nTheorem a : forall (x0 : A \\/ B) (x1 : B /\\ C), A -> B.\ntauto.\nQed.\n\nTheorem a2 : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem a4 : ~ A -> ~ A.\ntauto.\nQed.\n\nTheorem e2 : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\nTheorem e4 : ~ ~ (A \\/ B -> A \\/ B).\ntauto.\nQed.\n\nTheorem y0 :\n forall (x0 : A) (x1 : ~ A) (x2 : A -> B) (x3 : A \\/ B) (x4 : A /\\ B),\n A -> False.\ntauto.\nQed.\n\nTheorem y1 : forall x0 : (A /\\ B) /\\ C, B.\ntauto.\nQed.\n\nTheorem y2 : forall (x0 : A) (x1 : B), C \\/ B.\ntauto.\nQed.\n\nTheorem y3 : forall x0 : A /\\ B, B /\\ A.\ntauto.\nQed.\n\nTheorem y5 : forall x0 : A \\/ B, B \\/ A.\ntauto.\nQed.\n\nTheorem y6 : forall (x0 : A -> B) (x1 : A), B.\ntauto.\nQed.\n\nTheorem y7 : forall (x0 : A /\\ B -> C) (x1 : B) (x2 : A), C.\ntauto.\nQed.\n\n",
                "context_tokens": 744,
                "proof_start_offset": 4127,
                "proof_end_offset": 4190,
                "proof": "Theorem y8 : forall (x0 : A \\/ B -> C) (x1 : A), C.\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem y8 : forall (x0 : A \\/ B -> C) (x1 : A), C.\ntauto.\nQed.",
                    "Theorem y8 : forall (x0 : A \\/ B -> C) (x1 : A), C.\ntauto.\nQed.",
                    "Theorem y8 : forall (x0 : A \\/ B -> C) (x1 : A), C.\ntauto.\nQed.",
                    "Theorem y8 : forall (x0 : A \\/ B -> C) (x1 : A), C.\ntauto.\nQed.",
                    "Theorem y8 : forall (x0 : A \\/ B -> C) (x1 : A), C.\ntauto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": " : Every non-scottish member wears red socks\n * . rule 2 : Every member wears a kilt or doesn't wear red socks\n * . rule 3 : The married members don't go out on sunday\n * . rule 4 : A member goes out on sunday if and only if he is scottish\n * . rule 5 : Every member who wears a kilt is scottish and married\n * . rule 6 : Every scottish member wears a kilt\n *\n *  Actually, no one can be accepted!\n *)\n\nSection club.\n\nVariable Scottish RedSocks WearKilt Married GoOutSunday : Prop.\n\nHypothesis rule1 : ~ Scottish -> RedSocks.\nHypothesis rule2 : WearKilt \\/ ~ RedSocks.\nHypothesis rule3 : Married -> ~ GoOutSunday.\nHypothesis rule4 : GoOutSunday <-> Scottish.\nHypothesis rule5 : WearKilt -> Scottish /\\ Married.\nHypothesis rule6 : Scottish -> WearKilt.\n\nLemma NoMember : False.\ntauto.\nQed.\n\nEnd club.\n\nTheorem tauto : (forall x : nat, P x) -> forall y : nat, P y.\ntauto.\nQed.\n\nTheorem tauto1 : A -> A.\ntauto.\nQed.\n\nTheorem tauto2 : (A -> B -> C) -> (A -> B) -> A -> C.\ntauto.\nQed.\n\nTheorem a : forall (x0 : A \\/ B) (x1 : B /\\ C), A -> B.\ntauto.\nQed.\n\nTheorem a2 : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem a4 : ~ A -> ~ A.\ntauto.\nQed.\n\nTheorem e2 : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\nTheorem e4 : ~ ~ (A \\/ B -> A \\/ B).\ntauto.\nQed.\n\nTheorem y0 :\n forall (x0 : A) (x1 : ~ A) (x2 : A -> B) (x3 : A \\/ B) (x4 : A /\\ B),\n A -> False.\ntauto.\nQed.\n\nTheorem y1 : forall x0 : (A /\\ B) /\\ C, B.\ntauto.\nQed.\n\nTheorem y2 : forall (x0 : A) (x1 : B), C \\/ B.\ntauto.\nQed.\n\nTheorem y3 : forall x0 : A /\\ B, B /\\ A.\ntauto.\nQed.\n\nTheorem y5 : forall x0 : A \\/ B, B \\/ A.\ntauto.\nQed.\n\nTheorem y6 : forall (x0 : A -> B) (x1 : A), B.\ntauto.\nQed.\n\nTheorem y7 : forall (x0 : A /\\ B -> C) (x1 : B) (x2 : A), C.\ntauto.\nQed.\n\nTheorem y8 : forall (x0 : A \\/ B -> C) (x1 : A), C.\ntauto.\nQed.\n\n",
                "context_tokens": 744,
                "proof_start_offset": 4192,
                "proof_end_offset": 4255,
                "proof": "Theorem y9 : forall (x0 : A \\/ B -> C) (x1 : B), C.\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Theorem y9 : forall (x0 : A \\/ B -> C) (x1 : B), C.\ntauto.\nQed.",
                    "Theorem y9 : forall (x0 : A \\/ B -> C) (x1 : B), C.\ntauto.\nQed.",
                    "Theorem y9 : forall (x0 : A \\/ B -> C) (x1 : B), C.\ntauto.\nQed.",
                    "Theorem y9 : forall (x0 : A \\/ B -> C) (x1 : B), C.\ntauto.\nQed.",
                    "Theorem y9 : forall (x0 : A \\/ B -> C) (x1 : B), C.\ntauto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo.v",
                "context": " by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Demo.v                                  *)\n(****************************************************************************)\n\n(* A short demo of coq *)\n\nFixpoint Plus (n : nat) : nat -> nat :=\n  fun m : nat => match n with\n                 | O => m\n                 | S p => S (Plus p m)\n                 end.\n\n(**********************************************)\n(***      A few elementary properties       ***)\n(**********************************************)\n\n",
                "context_tokens": 329,
                "proof_start_offset": 2541,
                "proof_end_offset": 2641,
                "proof": "Goal forall n : nat, n = Plus n 0.\nProof.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_n_O.",
                "end_command": "Save Plus_n_O.",
                "generated_proofs": [
                    "Goal forall n : nat, n = Plus n 0.\nintros n.\nsimple induction n.\nsimpl in |- *.\nauto with arith.\nSave Plus_n_O.",
                    "Goal forall n : nat, n = Plus n 0.\nintros n.\nchange (S n) with (S n).\nchange (S n).\nchange (S n).\nchange (S n).\nchange (S n).\napply (S n).\nchange (S n).\napply (S n).\nchange (S n).\napply (S n).\nchange (S n).\napply (S n).\nchange (S n).\napply (S n).\nchange (S n).\napply (S n).\nchange (S n).\napply (S n).\napply (S n).\nchange (S n).\napply (S n).\nchange (S n).\napply (S n).\nchange (S n).\napply (S n).\nchange (S n).\napply (S n).\nchange (S n).\napply (S n).\nchange (S n).\napply (S n).\nchange (S n).\napply (S n).\napply (S n).\nchange (S n).\napply (S n).\nchange (S n).\napply (S n).\nchange (S n).\napply (S n).\nchange (S n).\nSave Plus_n_O.",
                    "Goal forall n : nat, n = Plus n 0.\nintros n; elim n; auto with arith.\nSave Plus_n_O.",
                    "Goal forall n : nat, n = Plus n 0.\nintros n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n; case n;Save Plus_n_O.",
                    "Goal forall n : nat, n = Plus n 0.\nintros n; case n; auto.\nSave Plus_n_O."
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo.v",
                "context": "                                                          *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Demo.v                                  *)\n(****************************************************************************)\n\n(* A short demo of coq *)\n\nFixpoint Plus (n : nat) : nat -> nat :=\n  fun m : nat => match n with\n                 | O => m\n                 | S p => S (Plus p m)\n                 end.\n\n(**********************************************)\n(***      A few elementary properties       ***)\n(**********************************************)\n\nGoal forall n : nat, n = Plus n 0.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_n_O.\nHint Resolve Plus_n_O.\n\n",
                "context_tokens": 340,
                "proof_start_offset": 2666,
                "proof_end_offset": 2781,
                "proof": "Goal forall m n : nat, S (Plus m n) = Plus m (S n).\nProof.\nsimple induction m; simpl in |- *; auto with core.\nSave Plus_S.",
                "end_command": "Save Plus_S.",
                "generated_proofs": [
                    "Goal forall m n : nat, S (Plus m n) = Plus m (S n).\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_S.",
                    "Goal forall m n : nat, S (Plus m n) = Plus m (S n).\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_S.",
                    "Goal forall m n : nat, S (Plus m n) = Plus m (S n).\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_S.",
                    "Goal forall m n : nat, S (Plus m n) = Plus m (S n).\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_S.",
                    "Goal forall m n : nat, S (Plus m n) = Plus m (S n).\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_S."
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo.v",
                "context": "  *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Demo.v                                  *)\n(****************************************************************************)\n\n(* A short demo of coq *)\n\nFixpoint Plus (n : nat) : nat -> nat :=\n  fun m : nat => match n with\n                 | O => m\n                 | S p => S (Plus p m)\n                 end.\n\n(**********************************************)\n(***      A few elementary properties       ***)\n(**********************************************)\n\nGoal forall n : nat, n = Plus n 0.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_n_O.\nHint Resolve Plus_n_O.\n\nGoal forall m n : nat, S (Plus m n) = Plus m (S n).\nsimple induction m; simpl in |- *; auto with core.\nSave Plus_S.\nHint Resolve Plus_S.\n\n",
                "context_tokens": 371,
                "proof_start_offset": 2804,
                "proof_end_offset": 2949,
                "proof": "Goal forall n m : nat, Plus n m = Plus m n.\nProof.\nsimple induction m; simpl in |- *; auto with core.\nsimple induction 1; auto with core.\nSave Plus_com.",
                "end_command": "Save Plus_com.",
                "generated_proofs": [
                    "Goal forall n m : nat, Plus n m = Plus m n.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_com.",
                    "Goal forall n m : nat, Plus n m = Plus m n.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_com.",
                    "Goal forall n m : nat, Plus n m = Plus m n.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_com.",
                    "Goal forall n m : nat, Plus n m = Plus m n.\nsimple induction m; simpl in |- *; auto with core.\nSave Plus_com.",
                    "Goal forall n m : nat, Plus n m = Plus m n.\nsimple induction m; simpl in |- *; auto with core.\nSave Plus_com."
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo.v",
                "context": "etails.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Demo.v                                  *)\n(****************************************************************************)\n\n(* A short demo of coq *)\n\nFixpoint Plus (n : nat) : nat -> nat :=\n  fun m : nat => match n with\n                 | O => m\n                 | S p => S (Plus p m)\n                 end.\n\n(**********************************************)\n(***      A few elementary properties       ***)\n(**********************************************)\n\nGoal forall n : nat, n = Plus n 0.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_n_O.\nHint Resolve Plus_n_O.\n\nGoal forall m n : nat, S (Plus m n) = Plus m (S n).\nsimple induction m; simpl in |- *; auto with core.\nSave Plus_S.\nHint Resolve Plus_S.\n\nGoal forall n m : nat, Plus n m = Plus m n.\nsimple induction m; simpl in |- *; auto with core.\nsimple induction 1; auto with core.\nSave Plus_com.\nHint Immediate Plus_com.\n\n",
                "context_tokens": 385,
                "proof_start_offset": 2976,
                "proof_end_offset": 3104,
                "proof": "Goal forall n m p : nat, Plus n m = Plus n p -> m = p :>nat.\nProof.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_simpl.",
                "end_command": "Save Plus_simpl.",
                "generated_proofs": [
                    "Goal forall n m p : nat, Plus n m = Plus n p -> m = p :>nat.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_simpl.",
                    "Goal forall n m p : nat, Plus n m = Plus n p -> m = p :>nat.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_simpl.",
                    "Goal forall n m p : nat, Plus n m = Plus n p -> m = p :>nat.\nsimple induction 1; simpl in |- *; auto with core.\nSave Plus_simpl.",
                    "Goal forall n m p : nat, Plus n m = Plus n p -> m = p :>nat.\nsimple induction 1; simpl in |- *; auto with core.\nSave Plus_simpl.",
                    "Goal forall n m p : nat, Plus n m = Plus n p -> m = p :>nat.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_simpl."
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo.v",
                "context": " a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Demo.v                                  *)\n(****************************************************************************)\n\n(* A short demo of coq *)\n\nFixpoint Plus (n : nat) : nat -> nat :=\n  fun m : nat => match n with\n                 | O => m\n                 | S p => S (Plus p m)\n                 end.\n\n(**********************************************)\n(***      A few elementary properties       ***)\n(**********************************************)\n\nGoal forall n : nat, n = Plus n 0.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_n_O.\nHint Resolve Plus_n_O.\n\nGoal forall m n : nat, S (Plus m n) = Plus m (S n).\nsimple induction m; simpl in |- *; auto with core.\nSave Plus_S.\nHint Resolve Plus_S.\n\nGoal forall n m : nat, Plus n m = Plus m n.\nsimple induction m; simpl in |- *; auto with core.\nsimple induction 1; auto with core.\nSave Plus_com.\nHint Immediate Plus_com.\n\nGoal forall n m p : nat, Plus n m = Plus n p -> m = p :>nat.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_simpl.\n\n",
                "context_tokens": 412,
                "proof_start_offset": 3106,
                "proof_end_offset": 3237,
                "proof": "Goal forall n m p : nat, Plus n (Plus m p) = Plus (Plus n m) p.\nProof.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_assoc.",
                "end_command": "Save Plus_assoc.",
                "generated_proofs": [
                    "Goal forall n m p : nat, Plus n (Plus m p) = Plus (Plus n m) p.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_assoc.",
                    "Goal forall n m p : nat, Plus n (Plus m p) = Plus (Plus n m) p.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_assoc.",
                    "Goal forall n m p : nat, Plus n (Plus m p) = Plus (Plus n m) p.\nsimple induction m; simpl in |- *; auto with core.\nSave Plus_assoc.",
                    "Goal forall n m p : nat, Plus n (Plus m p) = Plus (Plus n m) p.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_assoc.",
                    "Goal forall n m p : nat, Plus n (Plus m p) = Plus (Plus n m) p.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_assoc."
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo.v",
                "context": "in St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Demo.v                                  *)\n(****************************************************************************)\n\n(* A short demo of coq *)\n\nFixpoint Plus (n : nat) : nat -> nat :=\n  fun m : nat => match n with\n                 | O => m\n                 | S p => S (Plus p m)\n                 end.\n\n(**********************************************)\n(***      A few elementary properties       ***)\n(**********************************************)\n\nGoal forall n : nat, n = Plus n 0.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_n_O.\nHint Resolve Plus_n_O.\n\nGoal forall m n : nat, S (Plus m n) = Plus m (S n).\nsimple induction m; simpl in |- *; auto with core.\nSave Plus_S.\nHint Resolve Plus_S.\n\nGoal forall n m : nat, Plus n m = Plus m n.\nsimple induction m; simpl in |- *; auto with core.\nsimple induction 1; auto with core.\nSave Plus_com.\nHint Immediate Plus_com.\n\nGoal forall n m p : nat, Plus n m = Plus n p -> m = p :>nat.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_simpl.\n\nGoal forall n m p : nat, Plus n (Plus m p) = Plus (Plus n m) p.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_assoc.\nHint Resolve Plus_assoc.\n\n",
                "context_tokens": 429,
                "proof_start_offset": 3264,
                "proof_end_offset": 3360,
                "proof": "Goal forall n m p : nat, Plus (Plus n m) p = Plus n (Plus m p).\nProof.\nauto with core.\nSave assoc_Plus.",
                "end_command": "Save assoc_Plus.",
                "generated_proofs": [
                    "Goal forall n m p : nat, Plus (Plus n m) p = Plus n (Plus m p).\nsimple induction n; simpl in |- *; auto with core.\nSave assoc_Plus.",
                    "Goal forall n m p : nat, Plus (Plus n m) p = Plus n (Plus m p).\nsimple induction n; simpl in |- *; auto with core.\nSave assoc_Plus.",
                    "Goal forall n m p : nat, Plus (Plus n m) p = Plus n (Plus m p).\nsimple induction n; simpl in |- *; auto with core.\nSave assoc_Plus.",
                    "Goal forall n m p : nat, Plus (Plus n m) p = Plus n (Plus m p).\nsimple induction n; simpl in |- *; auto with core.\nSave assoc_Plus.",
                    "Goal forall n m p : nat, Plus (Plus n m) p = Plus n (Plus m p).\nsimple induction n; simpl in |- *; auto with core.\nSave assoc_Plus."
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo.v",
                "context": "                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Demo.v                                  *)\n(****************************************************************************)\n\n(* A short demo of coq *)\n\nFixpoint Plus (n : nat) : nat -> nat :=\n  fun m : nat => match n with\n                 | O => m\n                 | S p => S (Plus p m)\n                 end.\n\n(**********************************************)\n(***      A few elementary properties       ***)\n(**********************************************)\n\nGoal forall n : nat, n = Plus n 0.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_n_O.\nHint Resolve Plus_n_O.\n\nGoal forall m n : nat, S (Plus m n) = Plus m (S n).\nsimple induction m; simpl in |- *; auto with core.\nSave Plus_S.\nHint Resolve Plus_S.\n\nGoal forall n m : nat, Plus n m = Plus m n.\nsimple induction m; simpl in |- *; auto with core.\nsimple induction 1; auto with core.\nSave Plus_com.\nHint Immediate Plus_com.\n\nGoal forall n m p : nat, Plus n m = Plus n p -> m = p :>nat.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_simpl.\n\nGoal forall n m p : nat, Plus n (Plus m p) = Plus (Plus n m) p.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_assoc.\nHint Resolve Plus_assoc.\n\nGoal forall n m p : nat, Plus (Plus n m) p = Plus n (Plus m p).\nauto with core.\nSave assoc_Plus.\n\n\n(************************************)\n(***         Trees                ***)\n(************************************)\n\nInductive tree : Set :=\n  | tip : tree\n  | node : tree -> tree -> tree.  \n\nFixpoint size (t : tree) : nat :=\n  match t return nat with\n  | tip => 1\n  | node u v => Plus (size u) (size v)\n  end.\n\n",
                "context_tokens": 487,
                "proof_start_offset": 3676,
                "proof_end_offset": 3802,
                "proof": "Goal forall t u v : tree, size (node t (node u v)) = size (node (node t u) v).\nProof.\nsimpl in |- *; auto with core.\nSave size_assoc.",
                "end_command": "Save size_assoc.",
                "generated_proofs": [
                    "Goal forall t u v : tree, size (node t (node u v)) = size (node (node t u) v).\nsimple induction n; simpl in |- *; auto with arith.\nSave size_assoc.",
                    "Goal forall t u v : tree, size (node t (node u v)) = size (node (node t u) v).\nsimple induction m; simpl in |- *; auto with core.\nSave size_assoc.",
                    "Goal forall t u v : tree, size (node t (node u v)) = size (node (node t u) v).\nsimple induction 1; simpl in |- *; auto with core.\nSave size_assoc.",
                    "Goal forall t u v : tree, size (node t (node u v)) = size (node (node t u) v).\nsimple induction n; simpl in |- *; auto with arith.\nSave size_assoc.",
                    "Goal forall t u v : tree, size (node t (node u v)) = size (node (node t u) v).\nsimple induction n; simpl in |- *; auto with arith.\nSave size_assoc."
                ]
            }
        ],
        "coqoban": [
            {
                "filepath": "./coq_projects/coqoban/Coqoban_engine.v",
                "context": "R l3' b'))\n      end\n  | _ => b\n  end.\n\nFixpoint stepwest (b : Board) : Board :=\n  match b with\n  | K r b' => K (rowstepwest r) b'\n  | R r b' => R r (stepwest b')\n  | Nothing => Nothing\n  end.\n\n\n(* This one's obvious: *)\nDefinition dostep (r : Direction) (b : Board) : Board :=\n  match r with\n  | No => stepnorth b\n  | Ea => stepeast b\n  | So => stepsouth b\n  | We => stepwest b\n  end.\n\n\n\n(* The game of Sokoban now boils down to: given a board, prove it's solvable.\n   If it's ready (see above: no loose boxes) then it's solvable (constructor OK)\n   and it is also solvable if it's solvable after one step (constructor STEP) *)\nInductive solvable : Board -> Prop :=\n  | OK : forall b : Board, ready b -> solvable b\n  | STEP :\n      forall (b : Board) (d : Direction), solvable (dostep d b) -> solvable b.\n\n\n(* Four tactics to play the game easier: *)\nLtac n :=\n  apply STEP with No; simpl in |- *; try (apply OK; simpl in |- *; tauto).\nLtac e :=\n  apply STEP with Ea; simpl in |- *; try (apply OK; simpl in |- *; tauto).\nLtac s :=\n  apply STEP with So; simpl in |- *; try (apply OK; simpl in |- *; tauto).\nLtac w :=\n  apply STEP with We; simpl in |- *; try (apply OK; simpl in |- *; tauto).\n\n(* Notations *)\nNotation \"'_' a\" := (C Empty a) (at level 0, right associativity).\nNotation \"#  a\" := (C Wall a) (at level 0, right associativity).\nNotation \"+ a\" := (C Keeper a) (at level 0, right associativity).\nNotation \"'X' a\" := (C Box a) (at level 0, right associativity).\nNotation \"'O' a\" := (C Dest a) (at level 0, right associativity).\nNotation \"*  a\" := (C Full a) (at level 0, right associativity).\nNotation \"'o'  a\" := (C KeepOD a) (at level 0, right associativity).\nNotation \"<|\" := Nil (at level 0).\n\nNotation \"|> a b\" := (R a b)\n  (format \"'[v' |>  a '/' b ']'\", at level 0, a, b at level 0).\nNotation \"+> a b\" := (K a b)\n  (format \"'[v' +>  a '/' b ']'\", at level 0, a, b at level 0).\nNotation \"|><|\" := Nothing (format \"|><| '//'\", at level 0).\n\n(* A silly example *)\n\nDefinition b :=\n  |> # # # # # # # <|\n  |> # _ _ _ _ _ # <|\n  +> #\n     _ +\n       X _ _ # <| (* Note: the row containing the keeper (+) must be indicated *)\n  |> #\n     _ _ _ _ _ # <| (*       by +> instead of |>  (constructor K instead of R)  *)\n  |> # _ _ _ _ O # <|\n  |> # # # # # # # <|\n  |><|\n .\n\n",
                "context_tokens": 763,
                "proof_start_offset": 9802,
                "proof_end_offset": 10183,
                "proof": "Goal solvable b.\nProof.\nunfold b in |- *.\napply STEP with Ea.\nunfold dostep in |- *.\nunfold stepeast in |- *.\nunfold rowstepeast in |- *.\nunfold move in |- *.\napply STEP with Ea.\nsimpl in |- *.\nn.\nn.\ne.\ns.\ns.\nSave solution'_b.",
                "end_command": "Save solution'_b.",
                "generated_proofs": [
                    "Goal solvable b.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.\nexact H.Save solution'_b.",
                    "Goal solvable b.\nexact (C # # # # # / \nProof.\nexact (C # # # #); auto.\nSave solution'_b.",
                    "Goal solvable b.\nProof.\nintros.\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H := H).\nassert (H :=Save solution'_b.",
                    "Goal solvable b.\nProof.\nintros.\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=True).\npose proof (H0:=Save solution'_b.",
                    "Goal solvable b.\nProof.\nintros.\npose proof (C:= fun c => (C:=C) (at level 0, right associativity).\nAbort.\n\n(* A variant of a proof of a proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof. *)\n\nDefinition sub_sig (P : pred T -> Prop) : Prop :=\n  forall (b : T) (b : T), P b -> P b) ->\n  forall (b : T) (b : T), P b -> P b.\n\n(* A variant of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proof of the proofSave solution'_b."
                ]
            },
            {
                "filepath": "./coq_projects/coqoban/Coqoban_engine.v",
                "context": "\n  | OK : forall b : Board, ready b -> solvable b\n  | STEP :\n      forall (b : Board) (d : Direction), solvable (dostep d b) -> solvable b.\n\n\n(* Four tactics to play the game easier: *)\nLtac n :=\n  apply STEP with No; simpl in |- *; try (apply OK; simpl in |- *; tauto).\nLtac e :=\n  apply STEP with Ea; simpl in |- *; try (apply OK; simpl in |- *; tauto).\nLtac s :=\n  apply STEP with So; simpl in |- *; try (apply OK; simpl in |- *; tauto).\nLtac w :=\n  apply STEP with We; simpl in |- *; try (apply OK; simpl in |- *; tauto).\n\n(* Notations *)\nNotation \"'_' a\" := (C Empty a) (at level 0, right associativity).\nNotation \"#  a\" := (C Wall a) (at level 0, right associativity).\nNotation \"+ a\" := (C Keeper a) (at level 0, right associativity).\nNotation \"'X' a\" := (C Box a) (at level 0, right associativity).\nNotation \"'O' a\" := (C Dest a) (at level 0, right associativity).\nNotation \"*  a\" := (C Full a) (at level 0, right associativity).\nNotation \"'o'  a\" := (C KeepOD a) (at level 0, right associativity).\nNotation \"<|\" := Nil (at level 0).\n\nNotation \"|> a b\" := (R a b)\n  (format \"'[v' |>  a '/' b ']'\", at level 0, a, b at level 0).\nNotation \"+> a b\" := (K a b)\n  (format \"'[v' +>  a '/' b ']'\", at level 0, a, b at level 0).\nNotation \"|><|\" := Nothing (format \"|><| '//'\", at level 0).\n\n(* A silly example *)\n\nDefinition b :=\n  |> # # # # # # # <|\n  |> # _ _ _ _ _ # <|\n  +> #\n     _ +\n       X _ _ # <| (* Note: the row containing the keeper (+) must be indicated *)\n  |> #\n     _ _ _ _ _ # <| (*       by +> instead of |>  (constructor K instead of R)  *)\n  |> # _ _ _ _ O # <|\n  |> # # # # # # # <|\n  |><|\n .\n\nGoal solvable b.\nunfold b in |- *.\n(* Stepping east, the hard way *)\napply STEP with Ea.\nunfold dostep in |- *.\nunfold stepeast in |- *.\nunfold rowstepeast in |- *.\nunfold move in |- *.\n(* Another step east, still hard *)\napply STEP with Ea.\nsimpl in |- *.\n(* Or using simply the tactics: *)\nn.\n(* We can tell Coq to go north even if there's a wall *)\nn.\ne.\ns.\ns.\nSave solution'_b.\nPrint solution'_b. (* Look at the start of this term! *)\n\nDefinition microban_1 :=\n  |> # # # # <|\n  |> # _ O # <|\n  |> # _ _ # # # <|\n  +> # *  + _ _ # <|\n  |> # _ _ X _ # <|\n  |> # _ _ # # # <|\n  |> # # # # <|\n  |><|\n .\n\n",
                "context_tokens": 758,
                "proof_start_offset": 10408,
                "proof_end_offset": 10585,
                "proof": "Goal solvable microban_1.\nProof.\nunfold microban_1 in |- *.\ns.\nw.\nn.\ne.\ne.\ne.\ns.\nw.\nn.\nw.\nw.\ns.\ns.\ne.\nn.\nw.\nn.\ne.\nn.\nn.\nw.\ns.\ne.\ns.\ns.\ne.\ne.\nn.\nw.\ns.\nw.\nn.\nn.\nSave microban_1_solution.",
                "end_command": "Save microban_1_solution.",
                "generated_proofs": [
                    "Goal solvable microban_1.\nProof.\nunfold unique, unique.\nunfold unique, unique, unique.\nintros.\napply (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (H (HSave microban_1_solution.",
                    "Goal solvable microban_1.\nProof.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvable in *.\nunfold solvableSave microban_1_solution.",
                    "Goal solvable microban_1.\nProof.\nintros.\nunfold has_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_rel in *.\nunfold is_relSave microban_1_solution.",
                    "Goal solvable microban_1.\nProof.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold not in *.\nunfold notSave microban_1_solution.",
                    "Goal solvable microban_1.\nProof.\nunfold unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, unique, uniqueSave microban_1_solution."
                ]
            }
        ],
        "goedel": [
            {
                "filepath": "./coq_projects/goedel/code.v",
                "context": "\n      A v t|\n      A v n|\n      A B v|\n      |\n      |\n      |\n      R|\n      f]\n | destruct q\n    as\n     [A|\n      Axm1 Axm2 A B p p0|\n      Axm A v n p|\n      A B|\n      A B C|\n      A B|\n      A v t|\n      A v n|\n      A B v|\n      |\n      |\n      |\n      R|\n      f]\n | destruct q\n    as\n     [A|\n      Axm1 Axm2 A B p p0|\n      Axm A v n p|\n      A B|\n      A B C|\n      A B|\n      A v t|\n      A v n|\n      A B v|\n      |\n      |\n      |\n      R|\n      f]\n | destruct q\n    as\n     [A|\n      Axm1 Axm2 A B p p0|\n      Axm A v n p|\n      A B|\n      A B C|\n      A B|\n      A v t|\n      A v n|\n      A B v|\n      |\n      |\n      |\n      R0|\n      f]\n | destruct q\n    as\n     [A|\n      Axm1 Axm2 A B p p0|\n      Axm A v n p|\n      A B|\n      A B C|\n      A B|\n      A v t|\n      A v n|\n      A B v|\n      |\n      |\n      |\n      R|\n      f0] ];\n (simpl in H;\n   try\n    match goal with\n    | h:(cPair?X1?X2 = cPair?X3?X4) |- _ =>\n        elimtype False; cut (X1 = X3);\n         [ discriminate | eapply cPairInj1; apply h ]\n    end); try reflexivity.\nreplace A0 with A.\nreflexivity.\napply codeFormulaInj.\neapply cPairInj2.\napply H.\nreplace Axm0 with Axm1.\nreplace Axm3 with Axm2.\nreflexivity.\neapply Hrecp0 with A0 p2.\ndo 3 eapply cPairInj2.\napply H.\neapply Hrecp1 with (fol.impH L A0 B0) p.\neapply cPairInj2.\neapply cPairInj1.\neapply cPairInj2.\napply H.\neapply Hrecp with A0 p0.\ndo 3 eapply cPairInj2.\napply H.\nQed.\n\nDefinition codeImp (a b : nat) := cPair 1 (cPair a b).\n\nLemma codeImpCorrect :\n forall a b : Formula,\n codeImp (codeFormula a) (codeFormula b) = codeFormula (impH a b).\nProof.\nauto.\nQed.\n\nDefinition codeNot (a : nat) := cPair 2 a.\n\nLemma codeNotCorrect :\n forall a : Formula, codeNot (codeFormula a) = codeFormula (notH a).\nProof.\nauto.\nQed.\n\nDefinition codeForall (n a : nat) := cPair 3 (cPair n a).\n\nLemma codeForallCorrect :\n forall (n : nat) (a : Formula),\n codeForall n (codeFormula a) = codeFormula (forallH n a).\nProof.\nauto.\nQed.\n\nDefinition codeOr (a b : nat) := codeImp (codeNot a) b.\n\n",
                "context_tokens": 735,
                "proof_start_offset": 9996,
                "proof_end_offset": 10123,
                "proof": "Lemma codeOrCorrect : forall a b : Formula, codeOr (codeFormula a) (codeFormula b) = codeFormula (orH a b).\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma codeOrCorrect : forall a b : Formula, codeOr (codeFormula a) (codeFormula b) = codeFormula (orH a b).\nProof.\nauto.\nQed.",
                    "Lemma codeOrCorrect : forall a b : Formula, codeOr (codeFormula a) (codeFormula b) = codeFormula (orH a b).\nProof.\nauto.\nQed.",
                    "Lemma codeOrCorrect : forall a b : Formula, codeOr (codeFormula a) (codeFormula b) = codeFormula (orH a b).\nProof.\nauto.\nQed.",
                    "Lemma codeOrCorrect : forall a b : Formula, codeOr (codeFormula a) (codeFormula b) = codeFormula (orH a b).\nProof.\nauto.\nQed.",
                    "Lemma codeOrCorrect : forall a b : Formula, codeOr (codeFormula a) (codeFormula b) = codeFormula (orH a b).\nProof.\nauto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/goedel/code.v",
                "context": " A v t|\n      A v n|\n      A B v|\n      |\n      |\n      |\n      R|\n      f]\n | destruct q\n    as\n     [A|\n      Axm1 Axm2 A B p p0|\n      Axm A v n p|\n      A B|\n      A B C|\n      A B|\n      A v t|\n      A v n|\n      A B v|\n      |\n      |\n      |\n      R|\n      f]\n | destruct q\n    as\n     [A|\n      Axm1 Axm2 A B p p0|\n      Axm A v n p|\n      A B|\n      A B C|\n      A B|\n      A v t|\n      A v n|\n      A B v|\n      |\n      |\n      |\n      R0|\n      f]\n | destruct q\n    as\n     [A|\n      Axm1 Axm2 A B p p0|\n      Axm A v n p|\n      A B|\n      A B C|\n      A B|\n      A v t|\n      A v n|\n      A B v|\n      |\n      |\n      |\n      R|\n      f0] ];\n (simpl in H;\n   try\n    match goal with\n    | h:(cPair?X1?X2 = cPair?X3?X4) |- _ =>\n        elimtype False; cut (X1 = X3);\n         [ discriminate | eapply cPairInj1; apply h ]\n    end); try reflexivity.\nreplace A0 with A.\nreflexivity.\napply codeFormulaInj.\neapply cPairInj2.\napply H.\nreplace Axm0 with Axm1.\nreplace Axm3 with Axm2.\nreflexivity.\neapply Hrecp0 with A0 p2.\ndo 3 eapply cPairInj2.\napply H.\neapply Hrecp1 with (fol.impH L A0 B0) p.\neapply cPairInj2.\neapply cPairInj1.\neapply cPairInj2.\napply H.\neapply Hrecp with A0 p0.\ndo 3 eapply cPairInj2.\napply H.\nQed.\n\nDefinition codeImp (a b : nat) := cPair 1 (cPair a b).\n\nLemma codeImpCorrect :\n forall a b : Formula,\n codeImp (codeFormula a) (codeFormula b) = codeFormula (impH a b).\nProof.\nauto.\nQed.\n\nDefinition codeNot (a : nat) := cPair 2 a.\n\nLemma codeNotCorrect :\n forall a : Formula, codeNot (codeFormula a) = codeFormula (notH a).\nProof.\nauto.\nQed.\n\nDefinition codeForall (n a : nat) := cPair 3 (cPair n a).\n\nLemma codeForallCorrect :\n forall (n : nat) (a : Formula),\n codeForall n (codeFormula a) = codeFormula (forallH n a).\nProof.\nauto.\nQed.\n\nDefinition codeOr (a b : nat) := codeImp (codeNot a) b.\n\nLemma codeOrCorrect :\n forall a b : Formula,\n codeOr (codeFormula a) (codeFormula b) = codeFormula (orH a b).\nProof.\nauto.\nQed.\n\nDefinition codeAnd (a b : nat) := codeNot (codeOr (codeNot a) (codeNot b)).\n\n",
                "context_tokens": 735,
                "proof_start_offset": 10202,
                "proof_end_offset": 10332,
                "proof": "Lemma codeAndCorrect : forall a b : Formula, codeAnd (codeFormula a) (codeFormula b) = codeFormula (andH a b).\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma codeAndCorrect : forall a b : Formula, codeAnd (codeFormula a) (codeFormula b) = codeFormula (andH a b).\nProof.\nauto.\nQed.",
                    "Lemma codeAndCorrect : forall a b : Formula, codeAnd (codeFormula a) (codeFormula b) = codeFormula (andH a b).\nProof.\nauto.\nQed.",
                    "Lemma codeAndCorrect : forall a b : Formula, codeAnd (codeFormula a) (codeFormula b) = codeFormula (andH a b).\nProof.\nauto.\nQed.",
                    "Lemma codeAndCorrect : forall a b : Formula, codeAnd (codeFormula a) (codeFormula b) = codeFormula (andH a b).\nProof.\nauto.\nQed.",
                    "Lemma codeAndCorrect : forall a b : Formula, codeAnd (codeFormula a) (codeFormula b) = codeFormula (andH a b).\nProof.\nauto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/goedel/code.v",
                "context": " A v t|\n      A v n|\n      A B v|\n      |\n      |\n      |\n      R|\n      f]\n | destruct q\n    as\n     [A|\n      Axm1 Axm2 A B p p0|\n      Axm A v n p|\n      A B|\n      A B C|\n      A B|\n      A v t|\n      A v n|\n      A B v|\n      |\n      |\n      |\n      R0|\n      f]\n | destruct q\n    as\n     [A|\n      Axm1 Axm2 A B p p0|\n      Axm A v n p|\n      A B|\n      A B C|\n      A B|\n      A v t|\n      A v n|\n      A B v|\n      |\n      |\n      |\n      R|\n      f0] ];\n (simpl in H;\n   try\n    match goal with\n    | h:(cPair?X1?X2 = cPair?X3?X4) |- _ =>\n        elimtype False; cut (X1 = X3);\n         [ discriminate | eapply cPairInj1; apply h ]\n    end); try reflexivity.\nreplace A0 with A.\nreflexivity.\napply codeFormulaInj.\neapply cPairInj2.\napply H.\nreplace Axm0 with Axm1.\nreplace Axm3 with Axm2.\nreflexivity.\neapply Hrecp0 with A0 p2.\ndo 3 eapply cPairInj2.\napply H.\neapply Hrecp1 with (fol.impH L A0 B0) p.\neapply cPairInj2.\neapply cPairInj1.\neapply cPairInj2.\napply H.\neapply Hrecp with A0 p0.\ndo 3 eapply cPairInj2.\napply H.\nQed.\n\nDefinition codeImp (a b : nat) := cPair 1 (cPair a b).\n\nLemma codeImpCorrect :\n forall a b : Formula,\n codeImp (codeFormula a) (codeFormula b) = codeFormula (impH a b).\nProof.\nauto.\nQed.\n\nDefinition codeNot (a : nat) := cPair 2 a.\n\nLemma codeNotCorrect :\n forall a : Formula, codeNot (codeFormula a) = codeFormula (notH a).\nProof.\nauto.\nQed.\n\nDefinition codeForall (n a : nat) := cPair 3 (cPair n a).\n\nLemma codeForallCorrect :\n forall (n : nat) (a : Formula),\n codeForall n (codeFormula a) = codeFormula (forallH n a).\nProof.\nauto.\nQed.\n\nDefinition codeOr (a b : nat) := codeImp (codeNot a) b.\n\nLemma codeOrCorrect :\n forall a b : Formula,\n codeOr (codeFormula a) (codeFormula b) = codeFormula (orH a b).\nProof.\nauto.\nQed.\n\nDefinition codeAnd (a b : nat) := codeNot (codeOr (codeNot a) (codeNot b)).\n\nLemma codeAndCorrect :\n forall a b : Formula,\n codeAnd (codeFormula a) (codeFormula b) = codeFormula (andH a b).\nProof.\nauto.\nQed.\n\nDefinition codeIff (a b : nat) := codeAnd (codeImp a b) (codeImp b a).\n\n",
                "context_tokens": 735,
                "proof_start_offset": 10406,
                "proof_end_offset": 10536,
                "proof": "Lemma codeIffCorrect : forall a b : Formula, codeIff (codeFormula a) (codeFormula b) = codeFormula (iffH a b).\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma codeIffCorrect : forall a b : Formula, codeIff (codeFormula a) (codeFormula b) = codeFormula (iffH a b).\nProof.\nauto.\nQed.",
                    "Lemma codeIffCorrect : forall a b : Formula, codeIff (codeFormula a) (codeFormula b) = codeFormula (iffH a b).\nProof.\nauto.\nQed.",
                    "Lemma codeIffCorrect : forall a b : Formula, codeIff (codeFormula a) (codeFormula b) = codeFormula (iffH a b).\nProof.\nauto.\nQed.",
                    "Lemma codeIffCorrect : forall a b : Formula, codeIff (codeFormula a) (codeFormula b) = codeFormula (iffH a b).\nProof.\nauto.\nQed.",
                    "Lemma codeIffCorrect : forall a b : Formula, codeIff (codeFormula a) (codeFormula b) = codeFormula (iffH a b).\nProof.\nauto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/goedel/codeSubTerm.v",
                "context": "\napply cPairPi2IsPR.\napply pi2_2IsPR.\napply eqIsPR.\napply pi3_3IsPR.\napply pi1_3IsPR.\napply switchIsPR.\napply switchIsPR.\napply\n filter1100IsPR\n  with\n    (g := fun t recs : nat =>\n          switchPR t\n            (S\n               (cPair (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs))\n                  (cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)))) 0).\napply\n compose2_3IsPR\n  with\n    (f1 := fun t recs : nat => t)\n    (f2 := fun t recs : nat =>\n           S\n             (cPair (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs))\n                (cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs))))\n    (f3 := fun t recs : nat => 0).\napply pi1_2IsPR.\napply\n compose2_1IsPR\n  with\n    (f := fun t recs : nat =>\n          cPair (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs))\n            (cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs))).\nassert\n (forall g : nat -> nat,\n  isPR 1 g ->\n  isPR 2 (fun t recs : nat => g (codeNth (t - S (g (pred t))) recs))).\nintros.\napply\n compose2_1IsPR\n  with (f := fun t recs : nat => codeNth (t - S (g (pred t))) recs).\napply\n compose2_2IsPR\n  with\n    (f := fun t recs : nat => t - S (g (pred t)))\n    (g := fun t recs : nat => recs).\napply filter10IsPR with (g := fun t : nat => t - S (g (pred t))).\napply\n compose1_2IsPR\n  with (f := fun t : nat => t) (f' := fun t : nat => S (g (pred t))).\napply idIsPR.\napply compose1_1IsPR with (f := fun t : nat => g (pred t)).\napply compose1_1IsPR.\napply predIsPR.\nauto.\napply succIsPR.\napply minusIsPR.\napply pi2_2IsPR.\napply codeNthIsPR.\nauto.\napply\n compose2_2IsPR\n  with\n    (f := fun t recs : nat =>\n          cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs))\n    (g := fun t recs : nat =>\n          cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)).\napply H.\napply cPairPi1IsPR.\napply H.\napply cPairPi2IsPR.\napply cPairIsPR.\napply succIsPR.\nexists (composeFunc 2 0 (PRnil _) zeroFunc).\nsimpl in |- *.\nauto.\napply switchIsPR.\napply cPairIsPR.\nQed.\n\n",
                "context_tokens": 753,
                "proof_start_offset": 12173,
                "proof_end_offset": 12326,
                "proof": "Lemma codeSubTermIsPR : isPR 3 codeSubTerm.\nProof.\nunfold codeSubTerm in |- *.\napply compose3_1IsPR.\napply codeSubTermTermsIsPR.\napply cPairPi1IsPR.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma codeSubTermIsPR : isPR 3 codeSubTerm.\nProof.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\napply sigIsComp.\nQed.",
                    "Lemma codeSubTermIsPR : isPR 3 codeSubTerm.\nProof.\napply comp1_IsComp.\napply comp2_2IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2_IsComp.\napply comp2Qed.",
                    "Lemma codeSubTermIsPR : isPR 3 codeSubTerm.\nProof.\napply sigIsComp.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\napply sigIsEq.\nQed.",
                    "Lemma codeSubTermIsPR : isPR 3 codeSubTerm.\nProof.\napply fun T recs.\napply fun T _ => t recs.\napply fun Tcs => t recs.\napply fun Tcs => t recs.\napply fun Tcs => t recs.\napply fun Tcs => t recs.\napply fun Tcs => t recs.\napply fun Tcs => recs.\napply fun Tcs => t recs.\napply fun Tcs => t recs.\napply fun Tcs => recs.\napply fun Tcs => recs.\napply fun Tcs => recs.\napply fun Tcs => recs.\napply fun Tcs => recs.\napply fun Tcs => recs.\napply fun Tcs => recs.\napply fun Tcs => recs.\napply fun Tcs => recs.\napply fun Tcs => recs.\napply fun Tcs => recs.\napply fun Tcs => recs.\napply fun Tcs => recs.\napply fun Tcs => recs.\napply fun Tcs => recs.\napply fun Tcs => recs.\napply fun Tcs => recs.\napply fun TQed.",
                    "Lemma codeSubTermIsPR : isPR 3 codeSubTerm.\nProof.\napply: can_IsIsEq.\napply: can_IsEq.\napply: can_IsEq.\napply: can_IsEq.\napply: can_IsEq.\napply: can_IsEq.\napply: can_IsEq.\napply: can_IsEq.\napply: can_IsEq.\napply: can_IsEq.\napply: can_IsEq.\napply: can_IsEq.\napply: can_IsEq.\napply: can_IsEq.\napply: can_IsEq.\napply: can_IsEq.\napply: can_IsEq.\napply: can_Eq.\napply: can_IsEq.\napply: can_Eq.\napply: can_IsEq.\napply: can_Eq.\napply: can_IsEq.\napply: can_Eq.\napply: can_IsEq.\napply: can_Eq.\napply: can_IsEq.\napply: can_Eq.\napply: can_Eq.\napply: can_IsEq.\napply: can_Eq.\napply: can_Eq.\napply: can_Qed."
                ]
            },
            {
                "filepath": "./coq_projects/goedel/codeSubTerm.v",
                "context": "IsPR\n  with\n    (g := fun t recs : nat =>\n          switchPR t\n            (S\n               (cPair (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs))\n                  (cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)))) 0).\napply\n compose2_3IsPR\n  with\n    (f1 := fun t recs : nat => t)\n    (f2 := fun t recs : nat =>\n           S\n             (cPair (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs))\n                (cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs))))\n    (f3 := fun t recs : nat => 0).\napply pi1_2IsPR.\napply\n compose2_1IsPR\n  with\n    (f := fun t recs : nat =>\n          cPair (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs))\n            (cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs))).\nassert\n (forall g : nat -> nat,\n  isPR 1 g ->\n  isPR 2 (fun t recs : nat => g (codeNth (t - S (g (pred t))) recs))).\nintros.\napply\n compose2_1IsPR\n  with (f := fun t recs : nat => codeNth (t - S (g (pred t))) recs).\napply\n compose2_2IsPR\n  with\n    (f := fun t recs : nat => t - S (g (pred t)))\n    (g := fun t recs : nat => recs).\napply filter10IsPR with (g := fun t : nat => t - S (g (pred t))).\napply\n compose1_2IsPR\n  with (f := fun t : nat => t) (f' := fun t : nat => S (g (pred t))).\napply idIsPR.\napply compose1_1IsPR with (f := fun t : nat => g (pred t)).\napply compose1_1IsPR.\napply predIsPR.\nauto.\napply succIsPR.\napply minusIsPR.\napply pi2_2IsPR.\napply codeNthIsPR.\nauto.\napply\n compose2_2IsPR\n  with\n    (f := fun t recs : nat =>\n          cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs))\n    (g := fun t recs : nat =>\n          cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)).\napply H.\napply cPairPi1IsPR.\napply H.\napply cPairPi2IsPR.\napply cPairIsPR.\napply succIsPR.\nexists (composeFunc 2 0 (PRnil _) zeroFunc).\nsimpl in |- *.\nauto.\napply switchIsPR.\napply cPairIsPR.\nQed.\n\nLemma codeSubTermIsPR : isPR 3 codeSubTerm.\nProof.\nunfold codeSubTerm in |- *.\napply compose3_1IsPR.\napply codeSubTermTermsIsPR.\napply cPairPi1IsPR.\nQed.\n\n",
                "context_tokens": 751,
                "proof_start_offset": 12328,
                "proof_end_offset": 12484,
                "proof": "Lemma codeSubTermsIsPR : isPR 3 codeSubTerms.\nProof.\nunfold codeSubTerms in |- *.\napply compose3_1IsPR.\napply codeSubTermTermsIsPR.\napply cPairPi2IsPR.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma codeSubTermsIsPR : isPR 3 codeSubTerms.\nProof.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\napply compose2IsEq.\nQed.",
                    "Lemma codeSubTermsIsPR : isPR 3 codeSubTerms.\nProof.\nunfold codeIsIsIsIsInv.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPairQed.",
                    "Lemma codeSubTermsIsPR : isPR 3 codeSubTerms.\nProof.\nunfold codeIsIsIsIs.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.Qed.",
                    "Lemma codeSubTermsIsPR : isPR 3 codeSubTerms.\nProof.\nunfold codeIsIsIsComp.\napply compose2IsEq.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cQed.",
                    "Lemma codeSubTermsIsPR : isPR 3 codeSubTerms.\nProof.\nunfold codeIsIsIsComp.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.\napply cPair.Qed."
                ]
            },
            {
                "filepath": "./coq_projects/goedel/extEqualNat.v",
                "context": "Require Import Arith.\n\nFixpoint naryFunc (n : nat) : Set :=\n  match n with\n  | O => nat\n  | S n => nat -> naryFunc n\n  end.\n\nFixpoint naryRel (n : nat) : Set :=\n  match n with\n  | O => bool\n  | S n => nat -> naryRel n\n  end.\n\n",
                "context_tokens": 75,
                "proof_start_offset": 226,
                "proof_end_offset": 385,
                "proof": "Definition extEqual (n : nat) (a b : naryFunc n) : Prop.\nProof.\nintros.\ninduction n as [| n Hrecn].\nexact (a = b).\nexact (forall c : nat, Hrecn (a c) (b c)).\nDefined.",
                "end_command": "Defined.",
                "generated_proofs": [
                    "Definition extEqual (n : nat) (a b : naryFunc n) : Prop.\n\nFixpoint ext_type (n : nat) : nat :=\n  match n with\n  | O => nat\n  | S n => nat\n  | S n => nat\n  end.\n\nFixpoint ext_type (n : nat) : nat :=\n  match n with\n  | O => 0\n  | S n => nat\n  | S n => nat\n  | S n' => nat\n  end.\n\nFixpoint ext_type (n : nat) : nat :=\n  match n with\n  | O => nat\n  | S n' => nat\n  | S n' => nat\n  end.\n\nFixpoint ext_type (n : nat) : nat :=\n  match n with\n  | O => nat\n  | S n' => nat\n  | S n' => nat\n  end.\n\nFixpoint ext_type (n : nat) : nat :=\n  match n with\n  | O => nat\n  | S n' => nat\n  | S n' => nat\n  | S n' => nat\n  end.\n\nFixpoint ext_type (n : nat) : nat :=\n  match n with\n  | O => nat\n  | S n' => nat\n  | S n' => nat\n  end.\n\nFixpoint ext_typeDefined.",
                    "Definition extEqual (n : nat) (a b : naryFunc n) : Prop.\n\nFixpoint right_inverse (n : nat) (a b : A) : Prop :=\n  match a with\n    | O => fun a => a\n    | S n' => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun b => fun a b => fun a b => fun a b => fun a b => fun b => fun a b => fun a b => fun a b => fun b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun a b => fun aDefined.",
                    "Definition extEqual (n : nat) (a b : naryFunc n) : Prop.\n\nDefinition ext_axiom (n : nat) : Prop :=\n  match n with\n  | O => True\n  | S n => True\n  | S n => True\n  | S n => True\n  end.\n\nLemma ext_axiom_axiom n :\n  ext_axiom n ->\n  ext_axiom n ->\n  ext_axiom n ->\n  ext_axiom n.\nProof.\n  by move=> n; apply: ext_axiom.\nby move=> n; apply: ext_axiom.\nDefined.",
                    "Definition extEqual (n : nat) (a b : naryFunc n) : Prop.\n\nDefinition my_prod (n : nat) : Prop :=\n  match n with\n  | O => nat\n  | S n => nat\n  | S n => nat\n  end.\n\nDefinition my_prod (n : nat) : Prop :=\n  match n with\n  | O => nat\n  | S n => nat\n  | S n => nat\n  end.\n\nDefinition my_prod (n : nat) : Prop :=\n  match n with\n  | O => nat\n  | S n => nat\n  | S n => nat\n  end.\n\nDefinition my_prod (n : nat) : Prop :=\n  match n with\n  | O => nat\n  | S n => nat\n  | S n => nat\n  end.\n\nDefinition my_prod (n : nat) : Prop :=\n  match n with\n  | O => nat\n  | S n => nat\n  | S n => nat\n  end.\n\nDefinition my_prod (n : nat) : Prop :=\n  match n with\n  | O => nat\n  | S n => nat\n  | S n => nat\n  end.\n\nDefinition my_prod (n : nat) : Prop :=\n  match n with\n  | O => nat\n  | S n =>Defined.",
                    "Definition extEqual (n : nat) (a b : naryFunc n) : Prop.\n\nDefinition ext_axiom (n : nat) : nat :=\n  match n with\n    | O => 0\n    | S n => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | S n' => nat\n    | SDefined."
                ]
            },
            {
                "filepath": "./coq_projects/goedel/extEqualNat.v",
                "context": "Require Import Arith.\n\nFixpoint naryFunc (n : nat) : Set :=\n  match n with\n  | O => nat\n  | S n => nat -> naryFunc n\n  end.\n\nFixpoint naryRel (n : nat) : Set :=\n  match n with\n  | O => bool\n  | S n => nat -> naryRel n\n  end.\n\nDefinition extEqual (n : nat) (a b : naryFunc n) : Prop.\nintros.\ninduction n as [| n Hrecn].\nexact (a = b).\nexact (forall c : nat, Hrecn (a c) (b c)).\nDefined.\n\n",
                "context_tokens": 134,
                "proof_start_offset": 387,
                "proof_end_offset": 569,
                "proof": "Lemma extEqualRefl : forall (n : nat) (a : naryFunc n), extEqual n a a.\nProof.\nintros.\ninduction n as [| n Hrecn].\nsimpl in |- *.\nreflexivity.\nsimpl in |- *.\nintro.\napply Hrecn.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma extEqualRefl : forall (n : nat) (a : naryFunc n), extEqual n a a.\nintros.\nexact (fun n => (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (fun n => n) (Qed.",
                    "Lemma extEqualRefl : forall (n : nat) (a : naryFunc n), extEqual n a a.\nintros.\ninduction n.\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\napply (eq_dec n).\nQed.",
                    "Lemma extEqualRefl : forall (n : nat) (a : naryFunc n), extEqual n a a.\nintros.\napply (fun n => fun n => n + n + m + n + m + m + n + m + n + m + n + m + n m + n + m + n + m + n m + m + m + n m + n + m + n m + n m + n m + n m + n + m + n m + n m + n m + n m + m + n + m + n m + n m + m + n m + n m + m + n + m + n m + n m + m + n m + n + n m + m + m + n m + n m + m + n + m + n m + n m + n m + n + n m + m + n m + n + n m + m + m + m + n m + n m + n + m + m + n m + n m + m + n m + n + m + n m + m + n + m + n m + n m + m + n m + n m + m + n m + n + n m + n m + m + n + m + n m + m + n m + n mQed.",
                    "Lemma extEqualRefl : forall (n : nat) (a : naryFunc n), extEqual n a a.\nintros.\ninduction n as [| n Hrecn].\nexact (fun n => n = 0).\nexact (fun n => n = 0).\nexact (fun n => 0).\nexact (fun n => 0 = 0).\nexact (fun n => 0 = 0).\nexact (fun n => 0 = 0).\nexact (fun n => 0 = 0).\nexact (fun n => 0 = 0).\nexact (fun n => 0 = 0).\nexact (fun n => 0 = 0).\nexact (fun n => 0 = 0).\nexact (fun n => 0 = 0).\nexact (fun n => 0 = 0).\nexact (fun n => 0 = 0).\nexact (fun n => 0 = 0).\nexact (fun n => 0 = 0).\nexact (fun n => 0 = 0).\nexact (fun n => 0 = 0).\nexact (fun n => 0 = 0).\nexact (fun n => 0 = 0).\nexact (fun n => 0 = 0).\nexact (fun n => 0 = 0).\nexact (fun n => 0 = 0).\nexact (fun n => 0 = 0).\nexact (fun n => 0Qed.",
                    "Lemma extEqualRefl : forall (n : nat) (a : naryFunc n), extEqual n a a.\nintros.\nelim (eq_dec n a); intros.\nexact (fun c : nat => a = a).\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/goedel/extEqualNat.v",
                "context": "Require Import Arith.\n\nFixpoint naryFunc (n : nat) : Set :=\n  match n with\n  | O => nat\n  | S n => nat -> naryFunc n\n  end.\n\nFixpoint naryRel (n : nat) : Set :=\n  match n with\n  | O => bool\n  | S n => nat -> naryRel n\n  end.\n\nDefinition extEqual (n : nat) (a b : naryFunc n) : Prop.\nintros.\ninduction n as [| n Hrecn].\nexact (a = b).\nexact (forall c : nat, Hrecn (a c) (b c)).\nDefined.\n\nLemma extEqualRefl : forall (n : nat) (a : naryFunc n), extEqual n a a.\nProof.\nintros.\ninduction n as [| n Hrecn].\nsimpl in |- *.\nreflexivity.\nsimpl in |- *.\nintro.\napply Hrecn.\nQed.\n\n",
                "context_tokens": 197,
                "proof_start_offset": 571,
                "proof_end_offset": 810,
                "proof": "Lemma extEqualSym : forall (n : nat) (a b : naryFunc n), extEqual n a b -> extEqual n b a.\nProof.\nintros.\ninduction n as [| n Hrecn].\nsimpl in |- *.\nsymmetry in |- *.\napply H.\nsimpl in |- *.\nintros.\napply Hrecn.\nsimpl in H.\napply H.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma extEqualSym : forall (n : nat) (a b : naryFunc n), extEqual n a b -> extEqual n b a.\nintros.\ninduction n as [| n Hrecn].\nsimpl in |- *.\napply (H0 (fun n : nat => n) (a b) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (c : C n) (Qed.",
                    "Lemma extEqualSym : forall (n : nat) (a b : naryFunc n), extEqual n a b -> extEqual n b a.\nintros.\ninduction n as [| n Hrecn].\nsimpl in |- *.\nreflexivity.\nQed.",
                    "Lemma extEqualSym : forall (n : nat) (a b : naryFunc n), extEqual n a b -> extEqual n b a.\nProof.\nintros.\ninduction n as [| n Hrecn].\nsimpl in |- *.\nreflexivity.\nQed.",
                    "Lemma extEqualSym : forall (n : nat) (a b : naryFunc n), extEqual n a b -> extEqual n b a.\nintros.\napply (H (fun x => x) (fun x => x) (fun x => x) (fun x => x) (fun x => x) (fun x => x) (fun x => x) (fun x => x) (fun x => x) (fun x => x) (fun x => x) (fun x => x) (fun x => x) (fun x => x)) (fun x => x) (fun x => x) (fun x => x) (fun x => x) (fun x => x) (fun x => x) (fun x => x) (fun x => x)) (fun x => x)) (fun x => x)) (fun x => x) (fun x => x) (fun x => x) (fun x => x) (fun x => x) (fun x => x) (fun x => x) (fun x => x) (fun x => x)) (fun x => x)) (fun x => x) (fun x => x) (fun x => x)) (fun x => x)) (fun x => x)) (fun x => x) (fun x => x)) (fun xQed.",
                    "Lemma extEqualSym : forall (n : nat) (a b : naryFunc n), extEqual n a b -> extEqual n b a.\nintros.\ninduction n as [| n Hrecn].\nsimpl in |- *.\nintros.\napply (H0 (a = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (b = b) (bQed."
                ]
            },
            {
                "filepath": "./coq_projects/goedel/fol.v",
                "context": " unfold not in |- *; intros; elim b0.\ninversion H.\nreflexivity.\ninduction (b r r0).\nassert\n (forall (f g : Relations L) (p : f = g) (ts : Terms (arity L (inl _ f)))\n    (ss : Terms (arity L (inl _ g)))\n    (q : arity L (inl _ f) = arity L (inl _ g)),\n  eq_rec _ (fun x => Terms x) ts _ q = ss <-> atomic f ts = atomic g ss).\nintros f g p.\neapply\n eq_ind\n        with\n        (x := g)\n       (P := \n         fun a =>\n         forall (ts : Terms (arity L (inl _ a)))\n           (ss : Terms (arity L (inl _ g)))\n           (q : arity L (inl _ a) = arity L (inl _ g)),\n         eq_rec _ (fun x => Terms x) ts _ q = ss <->\n         atomic a ts = atomic g ss).\nintros ts ss q.\nelim q using K_dec_set.\napply eq_nat_dec.\nsimpl in |- *.\nsplit.\nintros.\nrewrite H.\nreflexivity.\nintros.\ninversion H.\neapply\n inj_right_pair2\n                 with\n                 (P := \n                   fun f : Relations L =>\n                   Terms (arity L (inl (Functions L) f))).\nassumption.\nassumption.\nauto.\nassert (arity L (inl (Functions L) r) = arity L (inl (Functions L) r0)).\nrewrite a0.\nreflexivity.\ninduction\n (terms_dec _\n    (eq_rec (arity L (inl (Functions L) r)) (fun x : nat => Terms x) t\n       (arity L (inl (Functions L) r0)) H0) t0).\nleft.\ninduction (H _ _ a0 t t0 H0).\nauto.\nright.\ninduction (H _ _ a0 t t0 H0).\ntauto.\nright.\nunfold not in |- *; intros.\ninversion H.\nauto.\ninduction (H f1).\ninduction (H0 f2).\nleft.\nrewrite a0.\nrewrite a1.\nreflexivity.\nright; unfold not in |- *; intros.\ninversion H3; auto.\nright; unfold not in |- *; intros.\ninversion H3; auto.\ninduction (H f0).\nleft.\nrewrite a0.\nreflexivity.\nright; unfold not in |- *; intros.\ninversion H1; auto.\ninduction (eq_nat_dec n n0).\ninduction (H f0).\nleft.\nrewrite a0.\nrewrite a1.\nreflexivity.\nright; unfold not in |- *; intros.\ninversion H1; auto.\nright; unfold not in |- *; intros.\ninversion H1; auto.\nQed.\n\nEnd Formula_Decideability.\n\nSection Formula_Depth_Induction.\n\nFixpoint depth (A : Formula) : nat :=\n  match A with\n  | equal _ _ => 0\n  | atomic _ _ => 0\n  | impH A B => S (max (depth A) (depth B))\n  | notH A => S (depth A)\n  | forallH _ A => S (depth A)\n  end.\n\nDefinition lt_depth (A B : Formula) : Prop := depth A < depth B.\n\n",
                "context_tokens": 746,
                "proof_start_offset": 8985,
                "proof_end_offset": 9141,
                "proof": "Lemma depthImp1 : forall A B : Formula, lt_depth A (impH A B).\nProof.\nunfold lt_depth in |- *.\nsimpl in |- *.\nintros.\napply le_lt_n_Sm.\napply le_max_l.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma depthImp1 : forall A B : Formula, lt_depth A (impH A B).\nProof.\nintros A B H.\ninduction (H a); simpl in |- *; intros.\ninversion H.\ninversion H.\ndestruct (H a0 a0); simpl in |- *; intros.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion H.\n\ninversion H.\ninversion H.\ninversion H.\ninversion H.\ninversion HQed.",
                    "Lemma depthImp1 : forall A B : Formula, lt_depth A (impH A B).\nProof.\nintros.\nunfold le_depth in |- *.\ninversion H.\napply le_trans with (P := fun x : nat => forall x : nat, le x x -> le x x.\nauto.\nQed.",
                    "Lemma depthImp1 : forall A B : Formula, lt_depth A (impH A B).\nProof.\ninduction B; intros.\ninversion H.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eq_dec.\napply eqQed.",
                    "Lemma depthImp1 : forall A B : Formula, lt_depth A (impH A B).\nProof.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nunfold le_depth.\nQed.",
                    "Lemma depthImp1 : forall A B : Formula, lt_depth A (impH A B).\nProof.\ninduction A; intros.\ninduction A; intros; simpl; auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/goedel/fol.v",
                "context": "s (arity L (inl _ g)))\n    (q : arity L (inl _ f) = arity L (inl _ g)),\n  eq_rec _ (fun x => Terms x) ts _ q = ss <-> atomic f ts = atomic g ss).\nintros f g p.\neapply\n eq_ind\n        with\n        (x := g)\n       (P := \n         fun a =>\n         forall (ts : Terms (arity L (inl _ a)))\n           (ss : Terms (arity L (inl _ g)))\n           (q : arity L (inl _ a) = arity L (inl _ g)),\n         eq_rec _ (fun x => Terms x) ts _ q = ss <->\n         atomic a ts = atomic g ss).\nintros ts ss q.\nelim q using K_dec_set.\napply eq_nat_dec.\nsimpl in |- *.\nsplit.\nintros.\nrewrite H.\nreflexivity.\nintros.\ninversion H.\neapply\n inj_right_pair2\n                 with\n                 (P := \n                   fun f : Relations L =>\n                   Terms (arity L (inl (Functions L) f))).\nassumption.\nassumption.\nauto.\nassert (arity L (inl (Functions L) r) = arity L (inl (Functions L) r0)).\nrewrite a0.\nreflexivity.\ninduction\n (terms_dec _\n    (eq_rec (arity L (inl (Functions L) r)) (fun x : nat => Terms x) t\n       (arity L (inl (Functions L) r0)) H0) t0).\nleft.\ninduction (H _ _ a0 t t0 H0).\nauto.\nright.\ninduction (H _ _ a0 t t0 H0).\ntauto.\nright.\nunfold not in |- *; intros.\ninversion H.\nauto.\ninduction (H f1).\ninduction (H0 f2).\nleft.\nrewrite a0.\nrewrite a1.\nreflexivity.\nright; unfold not in |- *; intros.\ninversion H3; auto.\nright; unfold not in |- *; intros.\ninversion H3; auto.\ninduction (H f0).\nleft.\nrewrite a0.\nreflexivity.\nright; unfold not in |- *; intros.\ninversion H1; auto.\ninduction (eq_nat_dec n n0).\ninduction (H f0).\nleft.\nrewrite a0.\nrewrite a1.\nreflexivity.\nright; unfold not in |- *; intros.\ninversion H1; auto.\nright; unfold not in |- *; intros.\ninversion H1; auto.\nQed.\n\nEnd Formula_Decideability.\n\nSection Formula_Depth_Induction.\n\nFixpoint depth (A : Formula) : nat :=\n  match A with\n  | equal _ _ => 0\n  | atomic _ _ => 0\n  | impH A B => S (max (depth A) (depth B))\n  | notH A => S (depth A)\n  | forallH _ A => S (depth A)\n  end.\n\nDefinition lt_depth (A B : Formula) : Prop := depth A < depth B.\n\nLemma depthImp1 : forall A B : Formula, lt_depth A (impH A B).\nProof.\nunfold lt_depth in |- *.\nsimpl in |- *.\nintros.\napply le_lt_n_Sm.\napply le_max_l.\nQed.\n\n",
                "context_tokens": 746,
                "proof_start_offset": 9143,
                "proof_end_offset": 9299,
                "proof": "Lemma depthImp2 : forall A B : Formula, lt_depth B (impH A B).\nProof.\nunfold lt_depth in |- *.\nsimpl in |- *.\nintros.\napply le_lt_n_Sm.\napply le_max_r.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma depthImp2 : forall A B : Formula, lt_depth B (impH A B).\nProof.\nunfold le_depth in |- *.\nsimpl in |- *.\nintros.\napply le_trans with (x := x) (x := x) (x := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (y := y) (Qed.",
                    "Lemma depthImp2 : forall A B : Formula, lt_depth B (impH A B).\nProof.\nunfold le_depth in |- *.\nsimpl in |- *.\nintros.\napply le_le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply leQed.",
                    "Lemma depthImp2 : forall A B : Formula, lt_depth B (impH A B).\nProof.\nunfold le_depth in |- *.\nsimpl in |- *.\nintros.\napply le_trans with (x := g) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (n := n) (Qed.",
                    "Lemma depthImp2 : forall A B : Formula, lt_depth B (impH A B).\nProof.\nunfold le_depth in |- *.\nsimpl in |- *.\nintros.\napply le_le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply leQed.",
                    "Lemma depthImp2 : forall A B : Formula, lt_depth B (impH A B).\nProof.\nunfold le_depth in |- *.\nsimpl in |- *.\nintros.\ninversion H.\napply le_trans with (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (x := g) (xQed."
                ]
            },
            {
                "filepath": "./coq_projects/goedel/fol.v",
                "context": ".\neapply\n eq_ind\n        with\n        (x := g)\n       (P := \n         fun a =>\n         forall (ts : Terms (arity L (inl _ a)))\n           (ss : Terms (arity L (inl _ g)))\n           (q : arity L (inl _ a) = arity L (inl _ g)),\n         eq_rec _ (fun x => Terms x) ts _ q = ss <->\n         atomic a ts = atomic g ss).\nintros ts ss q.\nelim q using K_dec_set.\napply eq_nat_dec.\nsimpl in |- *.\nsplit.\nintros.\nrewrite H.\nreflexivity.\nintros.\ninversion H.\neapply\n inj_right_pair2\n                 with\n                 (P := \n                   fun f : Relations L =>\n                   Terms (arity L (inl (Functions L) f))).\nassumption.\nassumption.\nauto.\nassert (arity L (inl (Functions L) r) = arity L (inl (Functions L) r0)).\nrewrite a0.\nreflexivity.\ninduction\n (terms_dec _\n    (eq_rec (arity L (inl (Functions L) r)) (fun x : nat => Terms x) t\n       (arity L (inl (Functions L) r0)) H0) t0).\nleft.\ninduction (H _ _ a0 t t0 H0).\nauto.\nright.\ninduction (H _ _ a0 t t0 H0).\ntauto.\nright.\nunfold not in |- *; intros.\ninversion H.\nauto.\ninduction (H f1).\ninduction (H0 f2).\nleft.\nrewrite a0.\nrewrite a1.\nreflexivity.\nright; unfold not in |- *; intros.\ninversion H3; auto.\nright; unfold not in |- *; intros.\ninversion H3; auto.\ninduction (H f0).\nleft.\nrewrite a0.\nreflexivity.\nright; unfold not in |- *; intros.\ninversion H1; auto.\ninduction (eq_nat_dec n n0).\ninduction (H f0).\nleft.\nrewrite a0.\nrewrite a1.\nreflexivity.\nright; unfold not in |- *; intros.\ninversion H1; auto.\nright; unfold not in |- *; intros.\ninversion H1; auto.\nQed.\n\nEnd Formula_Decideability.\n\nSection Formula_Depth_Induction.\n\nFixpoint depth (A : Formula) : nat :=\n  match A with\n  | equal _ _ => 0\n  | atomic _ _ => 0\n  | impH A B => S (max (depth A) (depth B))\n  | notH A => S (depth A)\n  | forallH _ A => S (depth A)\n  end.\n\nDefinition lt_depth (A B : Formula) : Prop := depth A < depth B.\n\nLemma depthImp1 : forall A B : Formula, lt_depth A (impH A B).\nProof.\nunfold lt_depth in |- *.\nsimpl in |- *.\nintros.\napply le_lt_n_Sm.\napply le_max_l.\nQed.\n\nLemma depthImp2 : forall A B : Formula, lt_depth B (impH A B).\nProof.\nunfold lt_depth in |- *.\nsimpl in |- *.\nintros.\napply le_lt_n_Sm.\napply le_max_r.\nQed.\n\n",
                "context_tokens": 749,
                "proof_start_offset": 9301,
                "proof_end_offset": 9401,
                "proof": "Lemma depthNot : forall A : Formula, lt_depth A (notH A).\nProof.\nunfold lt_depth in |- *.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma depthNot : forall A : Formula, lt_depth A (notH A).\nProof.\nunfold le_depth in |- *.\nsimpl in |- *.\nintros.\ndestruct (H a t0 t0 H0).\napply le_max_r.\napply le_max_l.\napply le_max_r.\napply le_max_r.\napply le_max_l.\napply le_max_l.\napply le_max_r.\napply le_max_r.\napply le_max_l.\napply le_max_r.\napply le_max_r.\napply le_max_r.\napply le_max_r.\napply le_max_r.\napply le_max_r.\napply le_max_r.\napply le_max_r.\napply le_max_l.\napply le_max_l.\napply le_max_r.\napply le_max_r.\napply le_max_l.\napply le_max_r.\napply le_max_l.\napply le_max_r.\napply le_max_r.\napply le_max_r.\napply le_max_r.\nQed.",
                    "Lemma depthNot : forall A : Formula, lt_depth A (notH A).\nProof.\nunfold le_depth in |- *.\nsimpl in |- *.\nintros.\napply le_trans with (x := g) (n := n) (n := n) (n := m) (n := n) (n := n) (n := m) (n := n) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (n := m) (Qed.",
                    "Lemma depthNot : forall A : Formula, lt_depth A (notH A).\nProof.\nunfold le_depth in |- *.\nsimpl in |- *.\nintros.\napply le_max_l.\napply le_max_r.\napply le_max_l.\napply le_max_l.\napply le_max_l.\napply le_max_l.\napply le_max_l.\napply le_max_l.\napply le_max_r.\napply le_max_l.\napply le_max_r.\napply le_max_l.\napply le_max_l.\napply le_max_l.\napply le_max_l.\napply le_max_l.\napply le_max_l.\napply le_max_l.\napply le_max_l.\napply le_max_l.\napply le_max_l.\napply le_max_l.\napply le_max_l.\napply le_max_l.\napply le_max_l.\napply le_max_l.\napply le_max_l.\napply le_max_l.\napply le_max_r.\napply le_maxQed.",
                    "Lemma depthNot : forall A : Formula, lt_depth A (notH A).\nProof.\nunfold le_depth in |- *.\nintros.\napply le_trans with (x := x) (y := x) (y := y) (y := y) (y := y) (y := z) (y := y) (y := z) (y := y) (y := z) (y := z) (y := y) (y := z) (y := z) (y := z) (y := z) (y := z) (y := z) (y := z) (y := z) (y := z) (z := z) (y := z) (y := z) (y := z) (y := z) (y := z) (y := z) (y := z) (y := z) (y := z) (y := z) (y := z) (z := z) (z := z) (z := z) (z := z) (z := z) (z := z) (z := z) (z := z) (z := z) (z := z) (z := z) (z := z) (z := z) (z := z) (Qed.",
                    "Lemma depthNot : forall A : Formula, lt_depth A (notH A).\nProof.\nunfold le_depth in |- *.\nsimpl in |- *.\nintros.\napply le_le_n_Sm.\napply le_trans with (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (n := 0) (Qed."
                ]
            },
            {
                "filepath": "./coq_projects/goedel/fol.v",
                "context": " (arity L (inl _ g)))\n           (q : arity L (inl _ a) = arity L (inl _ g)),\n         eq_rec _ (fun x => Terms x) ts _ q = ss <->\n         atomic a ts = atomic g ss).\nintros ts ss q.\nelim q using K_dec_set.\napply eq_nat_dec.\nsimpl in |- *.\nsplit.\nintros.\nrewrite H.\nreflexivity.\nintros.\ninversion H.\neapply\n inj_right_pair2\n                 with\n                 (P := \n                   fun f : Relations L =>\n                   Terms (arity L (inl (Functions L) f))).\nassumption.\nassumption.\nauto.\nassert (arity L (inl (Functions L) r) = arity L (inl (Functions L) r0)).\nrewrite a0.\nreflexivity.\ninduction\n (terms_dec _\n    (eq_rec (arity L (inl (Functions L) r)) (fun x : nat => Terms x) t\n       (arity L (inl (Functions L) r0)) H0) t0).\nleft.\ninduction (H _ _ a0 t t0 H0).\nauto.\nright.\ninduction (H _ _ a0 t t0 H0).\ntauto.\nright.\nunfold not in |- *; intros.\ninversion H.\nauto.\ninduction (H f1).\ninduction (H0 f2).\nleft.\nrewrite a0.\nrewrite a1.\nreflexivity.\nright; unfold not in |- *; intros.\ninversion H3; auto.\nright; unfold not in |- *; intros.\ninversion H3; auto.\ninduction (H f0).\nleft.\nrewrite a0.\nreflexivity.\nright; unfold not in |- *; intros.\ninversion H1; auto.\ninduction (eq_nat_dec n n0).\ninduction (H f0).\nleft.\nrewrite a0.\nrewrite a1.\nreflexivity.\nright; unfold not in |- *; intros.\ninversion H1; auto.\nright; unfold not in |- *; intros.\ninversion H1; auto.\nQed.\n\nEnd Formula_Decideability.\n\nSection Formula_Depth_Induction.\n\nFixpoint depth (A : Formula) : nat :=\n  match A with\n  | equal _ _ => 0\n  | atomic _ _ => 0\n  | impH A B => S (max (depth A) (depth B))\n  | notH A => S (depth A)\n  | forallH _ A => S (depth A)\n  end.\n\nDefinition lt_depth (A B : Formula) : Prop := depth A < depth B.\n\nLemma depthImp1 : forall A B : Formula, lt_depth A (impH A B).\nProof.\nunfold lt_depth in |- *.\nsimpl in |- *.\nintros.\napply le_lt_n_Sm.\napply le_max_l.\nQed.\n\nLemma depthImp2 : forall A B : Formula, lt_depth B (impH A B).\nProof.\nunfold lt_depth in |- *.\nsimpl in |- *.\nintros.\napply le_lt_n_Sm.\napply le_max_r.\nQed.\n\nLemma depthNot : forall A : Formula, lt_depth A (notH A).\nProof.\nunfold lt_depth in |- *.\nauto.\nQed.\n\n",
                "context_tokens": 742,
                "proof_start_offset": 9403,
                "proof_end_offset": 9523,
                "proof": "Lemma depthForall : forall (A : Formula) (v : nat), lt_depth A (forallH v A).\nProof.\nunfold lt_depth in |- *.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma depthForall : forall (A : Formula) (v : nat), lt_depth A (forallH v A).\nProof.\nunfold le_depth in |- *.\nauto.\nQed.",
                    "Lemma depthForall : forall (A : Formula) (v : nat), lt_depth A (forallH v A).\nProof.\nunfold le_depth in |- *.\nintros.\napply le_trans with (P := fun x => 0) (S (S n)) (S n)).\napply le_trans with (P := fun x => 0) (S n)).\napply le_trans with (P := fun x => 0) (S n)).\napply le_trans with (P := fun x => 0) (S n)).\napply le_trans with (P := fun x => 0) (S n)).\napply le_trans with (P := fun x => 0) (S n)).\napply le_trans with (P := fun x => 0) (S n)).\napply le_trans with (P := fun x => 0) (S n)).\napply le_trans with (P := fun x => 0) (S n)).\napply le_trans with (P := fun x => 0) (S n)).\napply le_trans with (P := fun x => 0) (S n)).\napply le_trans with (P := fun x => 0) (S n)).\napply le_trans with (P := fun x => 0) (S n)).\napplyQed.",
                    "Lemma depthForall : forall (A : Formula) (v : nat), lt_depth A (forallH v A).\nProof.\nunfold le_depth in |- *.\nsimpl in |- *.\nintros.\napply le_le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply leQed.",
                    "Lemma depthForall : forall (A : Formula) (v : nat), lt_depth A (forallH v A).\nProof.\nunfold lt_depth in |- *.\nintros.\napply le_trans with (P := fun x => (S x) (S n)).\napply le_trans with (P := fun x => (S x) (S n)).\napply le_trans with (P := fun x => (S x) (S n)).\napply le_trans with (P := fun x => (S x) (S n)).\napply le_trans with (P := fun x => (S x) (S n)).\napply le_trans with (P := fun x => (S x) (S n)).\napply le_trans with (P := fun x => (S x) (S n)).\napply le_trans with (P := fun x => (S x) (S n)).\napply le_trans with (P := fun x => (S x) (S n)).\napply le_trans with (P := fun x => (S x) (S n)).\napply le_trans with (P := fun x => (S x) (S n)).\napply le_trans with (P := fun x => (S x) (S n)).\napplyQed.",
                    "Lemma depthForall : forall (A : Formula) (v : nat), lt_depth A (forallH v A).\nProof.\nunfold le_depth in |- *.\nintros.\napply le_trans with (P := fun x => le_n_Sm (S n)).\napply le_trans with (P := fun x => le_n_Sm (S n)).\napply le_trans with (P := fun x => le_n_Sm (S n)).\napply le_trans with (P := fun x => le_n_Sm (S n)).\napply le_trans with (P := fun x => le_n_Sm (S n)).\napply le_trans with (P := fun x => le_n_Sm (S n)).\napply le_trans with (P := fun x => le_n_Sm (S n)).\napply le_trans with (P := fun x => le_n_Sm (S n)).\napply le_trans with (P := fun x => le_n_Sm (S n))).\napply le_trans with (P := fun x => le_n_Sm (S n)).\napply le_trans with (P := fun x => le_n_Sm (S n)).\napply le_trans with (P := fun xQed."
                ]
            },
            {
                "filepath": "./coq_projects/goedel/fol.v",
                "context": " a ts = atomic g ss).\nintros ts ss q.\nelim q using K_dec_set.\napply eq_nat_dec.\nsimpl in |- *.\nsplit.\nintros.\nrewrite H.\nreflexivity.\nintros.\ninversion H.\neapply\n inj_right_pair2\n                 with\n                 (P := \n                   fun f : Relations L =>\n                   Terms (arity L (inl (Functions L) f))).\nassumption.\nassumption.\nauto.\nassert (arity L (inl (Functions L) r) = arity L (inl (Functions L) r0)).\nrewrite a0.\nreflexivity.\ninduction\n (terms_dec _\n    (eq_rec (arity L (inl (Functions L) r)) (fun x : nat => Terms x) t\n       (arity L (inl (Functions L) r0)) H0) t0).\nleft.\ninduction (H _ _ a0 t t0 H0).\nauto.\nright.\ninduction (H _ _ a0 t t0 H0).\ntauto.\nright.\nunfold not in |- *; intros.\ninversion H.\nauto.\ninduction (H f1).\ninduction (H0 f2).\nleft.\nrewrite a0.\nrewrite a1.\nreflexivity.\nright; unfold not in |- *; intros.\ninversion H3; auto.\nright; unfold not in |- *; intros.\ninversion H3; auto.\ninduction (H f0).\nleft.\nrewrite a0.\nreflexivity.\nright; unfold not in |- *; intros.\ninversion H1; auto.\ninduction (eq_nat_dec n n0).\ninduction (H f0).\nleft.\nrewrite a0.\nrewrite a1.\nreflexivity.\nright; unfold not in |- *; intros.\ninversion H1; auto.\nright; unfold not in |- *; intros.\ninversion H1; auto.\nQed.\n\nEnd Formula_Decideability.\n\nSection Formula_Depth_Induction.\n\nFixpoint depth (A : Formula) : nat :=\n  match A with\n  | equal _ _ => 0\n  | atomic _ _ => 0\n  | impH A B => S (max (depth A) (depth B))\n  | notH A => S (depth A)\n  | forallH _ A => S (depth A)\n  end.\n\nDefinition lt_depth (A B : Formula) : Prop := depth A < depth B.\n\nLemma depthImp1 : forall A B : Formula, lt_depth A (impH A B).\nProof.\nunfold lt_depth in |- *.\nsimpl in |- *.\nintros.\napply le_lt_n_Sm.\napply le_max_l.\nQed.\n\nLemma depthImp2 : forall A B : Formula, lt_depth B (impH A B).\nProof.\nunfold lt_depth in |- *.\nsimpl in |- *.\nintros.\napply le_lt_n_Sm.\napply le_max_r.\nQed.\n\nLemma depthNot : forall A : Formula, lt_depth A (notH A).\nProof.\nunfold lt_depth in |- *.\nauto.\nQed.\n\nLemma depthForall : forall (A : Formula) (v : nat), lt_depth A (forallH v A).\nProof.\nunfold lt_depth in |- *.\nauto.\nQed.\n\n",
                "context_tokens": 738,
                "proof_start_offset": 9525,
                "proof_end_offset": 9687,
                "proof": "Lemma eqDepth : forall A B C : Formula, depth B = depth A -> lt_depth B C -> lt_depth A C.\nProof.\nunfold lt_depth in |- *.\nintros.\nrewrite <- H.\nassumption.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma eqDepth : forall A B C : Formula, depth B = depth A -> lt_depth B C -> lt_depth A C.\nProof.\nunfold lt_depth in |- *.\nintros.\napply le_trans with (P := fun x : nat => x) t.\nauto.\nQed.",
                    "Lemma eqDepth : forall A B C : Formula, depth B = depth A -> lt_depth B C -> lt_depth A C.\nProof.\nunfold lt_depth in |- *.\nintros.\napply le_trans with (P := fun x : nat => x) t.\nauto.\nQed.",
                    "Lemma eqDepth : forall A B C : Formula, depth B = depth A -> lt_depth B C -> lt_depth A C.\nProof.\nunfold lt_depth in |- *.\nintros.\napply le_trans with (P := fun f : nat =>\n  match f with\n    | 0 => f\n    | S n => f\n    | S n => f\n    | S n => f\n    | S n => f\n    end\n  end.\n\nLemma depth_length : forall A B C : Formula A B -> B -> B -> A -> B.\nProof.\nunfold le_depth in |- *.\nintros.\napply le_trans with (P := fun f : nat =>\n  match f with\n    | 0 => f\n    | S n => f\n    | S n => f\n    end\n  end.\nQed.",
                    "Lemma eqDepth : forall A B C : Formula, depth B = depth A -> lt_depth B C -> lt_depth A C.\nProof.\nunfold lt_depth in |- *.\nauto.\nQed.",
                    "Lemma eqDepth : forall A B C : Formula, depth B = depth A -> lt_depth B C -> lt_depth A C.\nProof.\nunfold le_depth in |- *.\nauto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/goedel/fol.v",
                "context": ") f))).\nassumption.\nassumption.\nauto.\nassert (arity L (inl (Functions L) r) = arity L (inl (Functions L) r0)).\nrewrite a0.\nreflexivity.\ninduction\n (terms_dec _\n    (eq_rec (arity L (inl (Functions L) r)) (fun x : nat => Terms x) t\n       (arity L (inl (Functions L) r0)) H0) t0).\nleft.\ninduction (H _ _ a0 t t0 H0).\nauto.\nright.\ninduction (H _ _ a0 t t0 H0).\ntauto.\nright.\nunfold not in |- *; intros.\ninversion H.\nauto.\ninduction (H f1).\ninduction (H0 f2).\nleft.\nrewrite a0.\nrewrite a1.\nreflexivity.\nright; unfold not in |- *; intros.\ninversion H3; auto.\nright; unfold not in |- *; intros.\ninversion H3; auto.\ninduction (H f0).\nleft.\nrewrite a0.\nreflexivity.\nright; unfold not in |- *; intros.\ninversion H1; auto.\ninduction (eq_nat_dec n n0).\ninduction (H f0).\nleft.\nrewrite a0.\nrewrite a1.\nreflexivity.\nright; unfold not in |- *; intros.\ninversion H1; auto.\nright; unfold not in |- *; intros.\ninversion H1; auto.\nQed.\n\nEnd Formula_Decideability.\n\nSection Formula_Depth_Induction.\n\nFixpoint depth (A : Formula) : nat :=\n  match A with\n  | equal _ _ => 0\n  | atomic _ _ => 0\n  | impH A B => S (max (depth A) (depth B))\n  | notH A => S (depth A)\n  | forallH _ A => S (depth A)\n  end.\n\nDefinition lt_depth (A B : Formula) : Prop := depth A < depth B.\n\nLemma depthImp1 : forall A B : Formula, lt_depth A (impH A B).\nProof.\nunfold lt_depth in |- *.\nsimpl in |- *.\nintros.\napply le_lt_n_Sm.\napply le_max_l.\nQed.\n\nLemma depthImp2 : forall A B : Formula, lt_depth B (impH A B).\nProof.\nunfold lt_depth in |- *.\nsimpl in |- *.\nintros.\napply le_lt_n_Sm.\napply le_max_r.\nQed.\n\nLemma depthNot : forall A : Formula, lt_depth A (notH A).\nProof.\nunfold lt_depth in |- *.\nauto.\nQed.\n\nLemma depthForall : forall (A : Formula) (v : nat), lt_depth A (forallH v A).\nProof.\nunfold lt_depth in |- *.\nauto.\nQed.\n\nLemma eqDepth :\n forall A B C : Formula, depth B = depth A -> lt_depth B C -> lt_depth A C.\nProof.\nunfold lt_depth in |- *.\nintros.\nrewrite <- H.\nassumption.\nQed.\n\n",
                "context_tokens": 706,
                "proof_start_offset": 9689,
                "proof_end_offset": 10147,
                "proof": "Definition Formula_depth_rec_rec : forall P : Formula -> Set, (forall a : Formula, (forall b : Formula, lt_depth b a -> P b) -> P a) -> forall (n : nat) (b : Formula), depth b <= n -> P b.\nProof.\nintros P H n.\ninduction n as [| n Hrecn].\nintros.\napply H.\nintros.\nunfold lt_depth in H1.\nrewrite <- (le_n_O_eq _ H0) in H1.\nelim (lt_n_O _ H1).\nintros.\napply H.\nintros.\napply Hrecn.\napply lt_n_Sm_le.\napply lt_le_trans with (depth b).\napply H1.\napply H0.\nDefined.",
                "end_command": "Defined.",
                "generated_proofs": [
                    "Definition Formula_depth_rec_rec : forall P : Formula -> Set, (forall a : Formula, (forall b : Formula, lt_depth b a -> P b) -> P a) -> forall (n : nat) (b : Formula), depth b <= n -> P b.\nProof.\nunfold Reflexive, Transitive, Transitive, Transitive, Transitive, Transitive, Transitive, Transitive, Transitive, Transitive, Transitive, Symmetric, Transitive, Transitive, Transitive, Transitive, Transitive, Transitive, Transitive, Symmetric, Transitive, Symmetric, Symmetric, Transitive, Transitive, Transitive, Transitive, Transitive, Transitive, Transitive, Transitive, Transitive, Transitive, Symmetric, Symmetric, Transitive, Transitive, Transitive, Transitive, Symmetric, Symmetric, Symmetric, Transitive, Symmetric, Transitive, Transitive, Transitive, Transitive, Transitive, Transitive, Symmetric, Symmetric, Symmetric, Transitive, Transitive, Symmetric, Transitive, Transitive, Transitive, Symmetric, Transitive, Symmetric, Symmetric, Transitive, Transitive, Symmetric, Transitive, Transitive, Transitive, Symmetric, Transitive, Transitive, Transitive, Transitive, Symmetric, Symmetric, Symmetric, Transitive, Symmetric, Transitive, Transitive, Transitive, Transitive, Transitive, Symmetric, Symmetric, Transitive, Transitive, Transitive, Transitive, Transitive, Symmetric, Transitive, Symmetric, Transitive, Transitive, Transitive, Transitive, Transitive, Symmetric, Transitive, Transitive, Transitive, Transitive, Transitive, Transitive, Transitive, Transitive, Transitive, Transitive, Transitive, Symmetric, Transitive, Transitive, Transitive, Transitive, Transitive, Transitive, Transitive, Transitive, Transitive, Symmetric, Symmetric, Transitive, Transitive, TransitiveDefined.",
                    "Definition Formula_depth_rec_rec : forall P : Formula -> Set, (forall a : Formula, (forall b : Formula, lt_depth b a -> P b) -> P a) -> forall (n : nat) (b : Formula), depth b <= n -> P b.\nProof.\nunfold ltof.\nintros.\nrewrite <- H.\nassumption.\nDefined.",
                    "Definition Formula_depth_rec_rec : forall P : Formula -> Set, (forall a : Formula, (forall b : Formula, lt_depth b a -> P b) -> P a) -> forall (n : nat) (b : Formula), depth b <= n -> P b.\nProof.\nunfold respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectfulDefined.",
                    "Definition Formula_depth_rec_rec : forall P : Formula -> Set, (forall a : Formula, (forall b : Formula, lt_depth b a -> P b) -> P a) -> forall (n : nat) (b : Formula), depth b <= n -> P b.\nProof.\nunfold ltof.\nintros.\napply le_lt_n.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Sm.\napply le_n_Defined.",
                    "Definition Formula_depth_rec_rec : forall P : Formula -> Set, (forall a : Formula, (forall b : Formula, lt_depth b a -> P b) -> P a) -> forall (n : nat) (b : Formula), depth b <= n -> P b.\nProof.\nunfold lt_depth in |- *.\nintros.\napply le_trans with (n := H).\napply le_trans with (n := H).\napply le_trans with (n := H).\napply le_trans with (n := H).\napply le_trans with (n := H).\napply le_trans with (n := H).\napply le_trans with (n := H).\napply le_trans with (n := H).\napply le_trans with (n := H).\napply le_trans with (n := H).\napply le_trans with (n := H).\napply le_trans with (n := H).\napply le_trans with (n := H).\napply le_trans with (n := H).\napply le_trans with (n := H).\napply le_trans with (n := H).\napply le_trans with (n := H).\napply le_trans with (n := H).\napply le_trans with (n := H).\napply le_trans with (n := H).\napply le_trans with (n := H).\napply le_trans with (n := H).Defined."
                ]
            }
        ],
        "zorns-lemma": [
            {
                "filepath": "./coq_projects/zorns-lemma/Ordinals.v",
                "context": " Import Eqdep.\napply inj_pair2 in H2.\ndestruct H2.\napply H3.\nQed.\n\nLemma ord_le_trans: forall alpha beta gamma:Ordinal,\n  alpha <= beta -> beta <= gamma -> alpha <= gamma.\nProof.\ninduction alpha.\ninduction beta.\ninduction gamma.\nintros.\napply ord_le_respects_succ.\napply IHalpha with beta.\napply ord_le_respects_succ_converse; trivial.\napply ord_le_respects_succ_converse; trivial.\nintros.\napply ord_le_S_sup_converse in H1.\ndestruct H1 as [i].\napply ord_le_S_sup with i.\napply H; trivial.\nintros.\npose proof (ord_sup_minimal_converse _ _ _ H1).\napply ord_le_S_sup_converse in H0.\ndestruct H0 as [i].\napply H with i; trivial.\nintros.\npose proof (ord_sup_minimal_converse _ _ _ H0).\nconstructor.\nintro.\napply H with beta; trivial.\nQed.\n\nLemma ord_le_sup: forall (I:Type) (alpha:I->Ordinal) (i:I),\n  alpha i <= ord_sup alpha.\nProof.\nassert (forall beta:Ordinal, beta <= beta /\\\n  forall (I:Type) (alpha:I->Ordinal) (i:I),\n  beta <= alpha i -> beta <= ord_sup alpha).\ninduction beta.\ndestruct IHbeta.\nsplit.\napply ord_le_respects_succ; trivial.\nintros.\napply ord_le_S_sup with i.\ntrivial.\nsplit.\napply ord_sup_minimal.\nintro.\ndestruct (H i).\napply H1 with i; trivial.\nintros J alpha j?.\napply ord_sup_minimal.\nintro.\ndestruct (H i).\napply H2 with j.\napply ord_le_trans with (ord_sup o).\napply H2 with i; trivial.\ntrivial.\n\nintros.\ndestruct (H (alpha i)).\napply H1 with i; trivial.\nQed.\n\nLemma ord_le_refl: forall alpha:Ordinal, alpha <= alpha.\nProof.\ninduction alpha.\napply ord_le_respects_succ; trivial.\napply ord_sup_minimal.\napply ord_le_sup.\nQed.\n\nLemma ord_le_S: forall alpha:Ordinal, alpha <= ordS alpha.\nProof.\ninduction alpha.\napply ord_le_respects_succ; trivial.\napply ord_sup_minimal.\nintro.\napply ord_le_trans with (ordS (o i)).\napply H.\napply ord_le_respects_succ.\napply ord_le_sup.\nQed.\n\nLemma ord_lt_le: forall alpha beta:Ordinal,\n  alpha < beta -> alpha <= beta.\nProof.\nintros.\napply ord_le_trans with (ordS alpha); trivial.\napply ord_le_S.\nQed.\n\nLemma ord_lt_le_trans: forall alpha beta gamma:Ordinal,\n  alpha < beta -> beta <= gamma -> alpha < gamma.\nProof.\nintros.\napply ord_le_trans with beta; trivial.\nQed.\n\n",
                "context_tokens": 739,
                "proof_start_offset": 4386,
                "proof_end_offset": 4594,
                "proof": "Lemma ord_le_lt_trans: forall alpha beta gamma:Ordinal, alpha <= beta -> beta < gamma -> alpha < gamma.\nProof.\nintros.\napply ord_le_trans with (ordS beta); trivial.\napply ord_le_respects_succ; trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma ord_le_lt_trans: forall alpha beta gamma:Ordinal, alpha <= beta -> beta < gamma -> alpha < gamma.\nProof.\nintros.\napply ord_le_anti_chain.\napply ord_anti_chain_chain.\napply ord_anti_anti_chain.\napply ord_anti_chain.\napply ord_anti_anti_chain.\napply ord_anti_chain.\napply ord_anti_anti.\napply ord_anti_chain.\napply ord_anti_anti.\napply ord_anti_anti.\napply ord_anti_anti.\napply ord_anti.\napply ord_anti_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti_anti.\napply ord_anti.\napply ord_anti_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti_anti.\napply ord_anti.Qed.",
                    "Lemma ord_le_lt_trans: forall alpha beta gamma:Ordinal, alpha <= beta -> beta < gamma -> alpha < gamma.\nProof.\nintros.\napply ord_le_trans with (ord_refl := fun beta => beta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta + delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta - delta + delta + delta - delta + delta + delta - delta - delta + delta - delta - delta - delta + delta - delta - delta - delta + delta + delta - delta - delta - delta + delta + delta + delta - delta + delta + delta + delta + delta - delta + delta + delta + delta - delta - delta - delta + delta + delta + delta - delta + delta - delta - delta + delta + delta - delta + delta + delta + delta + delta + delta + delta - delta + delta + delta + delta + delta - delta + delta + delta + delta + delta + delta +Qed.",
                    "Lemma ord_le_lt_trans: forall alpha beta gamma:Ordinal, alpha <= beta -> beta < gamma -> alpha < gamma.\nProof.\nintros.\napply ord_le_anti_transitivity with beta; trivial.\nQed.",
                    "Lemma ord_le_lt_trans: forall alpha beta gamma:Ordinal, alpha <= beta -> beta < gamma -> alpha < gamma.\nProof.\nintros.\napply ord_le_trans with beta zeta.\napply ord_le_upper_bound; trivial.\napply ord_le_upper_bound.\napply ord_le_upper_bound.\napply ord_le_upper_bound; trivial.\napply ord_le_upper_bound.\napply ord_upper_bound_bound; trivial.\napply ord_le_upper_bound.\napply ord_le_upper_bound.\napply ord_upper_bound; trivial.\napply ord_le_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upperQed.",
                    "Lemma ord_le_lt_trans: forall alpha beta gamma:Ordinal, alpha <= beta -> beta < gamma -> alpha < gamma.\nProof.\nintros.\napply ord_le_anti.\napply ord_anti_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.Qed."
                ]
            },
            {
                "filepath": "./coq_projects/zorns-lemma/Ordinals.v",
                "context": ".\ninduction gamma.\nintros.\napply ord_le_respects_succ.\napply IHalpha with beta.\napply ord_le_respects_succ_converse; trivial.\napply ord_le_respects_succ_converse; trivial.\nintros.\napply ord_le_S_sup_converse in H1.\ndestruct H1 as [i].\napply ord_le_S_sup with i.\napply H; trivial.\nintros.\npose proof (ord_sup_minimal_converse _ _ _ H1).\napply ord_le_S_sup_converse in H0.\ndestruct H0 as [i].\napply H with i; trivial.\nintros.\npose proof (ord_sup_minimal_converse _ _ _ H0).\nconstructor.\nintro.\napply H with beta; trivial.\nQed.\n\nLemma ord_le_sup: forall (I:Type) (alpha:I->Ordinal) (i:I),\n  alpha i <= ord_sup alpha.\nProof.\nassert (forall beta:Ordinal, beta <= beta /\\\n  forall (I:Type) (alpha:I->Ordinal) (i:I),\n  beta <= alpha i -> beta <= ord_sup alpha).\ninduction beta.\ndestruct IHbeta.\nsplit.\napply ord_le_respects_succ; trivial.\nintros.\napply ord_le_S_sup with i.\ntrivial.\nsplit.\napply ord_sup_minimal.\nintro.\ndestruct (H i).\napply H1 with i; trivial.\nintros J alpha j?.\napply ord_sup_minimal.\nintro.\ndestruct (H i).\napply H2 with j.\napply ord_le_trans with (ord_sup o).\napply H2 with i; trivial.\ntrivial.\n\nintros.\ndestruct (H (alpha i)).\napply H1 with i; trivial.\nQed.\n\nLemma ord_le_refl: forall alpha:Ordinal, alpha <= alpha.\nProof.\ninduction alpha.\napply ord_le_respects_succ; trivial.\napply ord_sup_minimal.\napply ord_le_sup.\nQed.\n\nLemma ord_le_S: forall alpha:Ordinal, alpha <= ordS alpha.\nProof.\ninduction alpha.\napply ord_le_respects_succ; trivial.\napply ord_sup_minimal.\nintro.\napply ord_le_trans with (ordS (o i)).\napply H.\napply ord_le_respects_succ.\napply ord_le_sup.\nQed.\n\nLemma ord_lt_le: forall alpha beta:Ordinal,\n  alpha < beta -> alpha <= beta.\nProof.\nintros.\napply ord_le_trans with (ordS alpha); trivial.\napply ord_le_S.\nQed.\n\nLemma ord_lt_le_trans: forall alpha beta gamma:Ordinal,\n  alpha < beta -> beta <= gamma -> alpha < gamma.\nProof.\nintros.\napply ord_le_trans with beta; trivial.\nQed.\n\nLemma ord_le_lt_trans: forall alpha beta gamma:Ordinal,\n  alpha <= beta -> beta < gamma -> alpha < gamma.\nProof.\nintros.\napply ord_le_trans with (ordS beta); trivial.\napply ord_le_respects_succ; trivial.\nQed.\n\n",
                "context_tokens": 741,
                "proof_start_offset": 4596,
                "proof_end_offset": 4786,
                "proof": "Lemma ord_lt_trans: forall alpha beta gamma:Ordinal, alpha < beta -> beta < gamma -> alpha < gamma.\nProof.\nintros.\napply ord_lt_le_trans with beta; trivial; apply ord_lt_le; trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma ord_lt_trans: forall alpha beta gamma:Ordinal, alpha < beta -> beta < gamma -> alpha < gamma.\nProof.\nintros.\napply ord_le_full_uniq.\napply ord_le_full_full_full.\napply ord_le_full_full_full_full.\napply ord_full_full_full_full_full_full_full.\napply ord_full_full_full_full_full_full_full_full.\napply ord_full_full_full_full_full_full_full_full_full_full.\napply ord_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_full_fullfull_full_full_fullfull_fullfull_fullfull_fullfull_fullfull_full_fullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullQed.",
                    "Lemma ord_lt_trans: forall alpha beta gamma:Ordinal, alpha < beta -> beta < gamma -> alpha < gamma.\nProof.\nintros.\napply ord_le_full.\napply ord_le_full_full.\napply ord_full_full_full_full.\napply ord_full_full_full_full_full.\napply ord_full_full_full_full.\napply ord_full_full_full_full_full.\napply ord_full_full_full_full_full_full.\napply ord_full_full_full_full.\napply ord_full_full_full_full_full.\napply ord_full_full_full_full_full_full.\napply ord_full_full_full_full_full.\napply ord_full_full_full_full_full_full.\napply ord_full_full_full_full_full.\napply ord_full_full_full_full_full_full.\napply ord_full_full_full_full_full_full_full.\napply ord_full_full_full_full_full_full.\napply ord_full_full_full_full_full_full_full_full.\napply ord_full_full_Qed.",
                    "Lemma ord_lt_trans: forall alpha beta gamma:Ordinal, alpha < beta -> beta < gamma -> alpha < gamma.\nProof.\nintros.\napply ord_le_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napply ord_anti.\napplyQed.",
                    "Lemma ord_lt_trans: forall alpha beta gamma:Ordinal, alpha < beta -> beta < gamma -> alpha < gamma.\nProof.\nintros.\napply ord_le_trans with (ord_upper beta zeta delta).\napply ord_lt_anti_compat; trivial.\nQed.",
                    "Lemma ord_lt_trans: forall alpha beta gamma:Ordinal, alpha < beta -> beta < gamma -> alpha < gamma.\nProof.\nintros.\napply ord_le_trans with (ord_upper_bound beta zeta delta).\napply ord_le_upper_bound.\napply ord_le_upper_bound.\napply ord_le_upper_bound.\napply ord_le_upper_bound.\napply ord_le_upper_bound.\napply ord_le_upper_bound.\napply ord_le_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napply ord_upper_bound.\napplyQed."
                ]
            },
            {
                "filepath": "./coq_projects/zorns-lemma/Ordinals.v",
                "context": "_sup_converse in H1.\ndestruct H1 as [i].\napply ord_le_S_sup with i.\napply H; trivial.\nintros.\npose proof (ord_sup_minimal_converse _ _ _ H1).\napply ord_le_S_sup_converse in H0.\ndestruct H0 as [i].\napply H with i; trivial.\nintros.\npose proof (ord_sup_minimal_converse _ _ _ H0).\nconstructor.\nintro.\napply H with beta; trivial.\nQed.\n\nLemma ord_le_sup: forall (I:Type) (alpha:I->Ordinal) (i:I),\n  alpha i <= ord_sup alpha.\nProof.\nassert (forall beta:Ordinal, beta <= beta /\\\n  forall (I:Type) (alpha:I->Ordinal) (i:I),\n  beta <= alpha i -> beta <= ord_sup alpha).\ninduction beta.\ndestruct IHbeta.\nsplit.\napply ord_le_respects_succ; trivial.\nintros.\napply ord_le_S_sup with i.\ntrivial.\nsplit.\napply ord_sup_minimal.\nintro.\ndestruct (H i).\napply H1 with i; trivial.\nintros J alpha j?.\napply ord_sup_minimal.\nintro.\ndestruct (H i).\napply H2 with j.\napply ord_le_trans with (ord_sup o).\napply H2 with i; trivial.\ntrivial.\n\nintros.\ndestruct (H (alpha i)).\napply H1 with i; trivial.\nQed.\n\nLemma ord_le_refl: forall alpha:Ordinal, alpha <= alpha.\nProof.\ninduction alpha.\napply ord_le_respects_succ; trivial.\napply ord_sup_minimal.\napply ord_le_sup.\nQed.\n\nLemma ord_le_S: forall alpha:Ordinal, alpha <= ordS alpha.\nProof.\ninduction alpha.\napply ord_le_respects_succ; trivial.\napply ord_sup_minimal.\nintro.\napply ord_le_trans with (ordS (o i)).\napply H.\napply ord_le_respects_succ.\napply ord_le_sup.\nQed.\n\nLemma ord_lt_le: forall alpha beta:Ordinal,\n  alpha < beta -> alpha <= beta.\nProof.\nintros.\napply ord_le_trans with (ordS alpha); trivial.\napply ord_le_S.\nQed.\n\nLemma ord_lt_le_trans: forall alpha beta gamma:Ordinal,\n  alpha < beta -> beta <= gamma -> alpha < gamma.\nProof.\nintros.\napply ord_le_trans with beta; trivial.\nQed.\n\nLemma ord_le_lt_trans: forall alpha beta gamma:Ordinal,\n  alpha <= beta -> beta < gamma -> alpha < gamma.\nProof.\nintros.\napply ord_le_trans with (ordS beta); trivial.\napply ord_le_respects_succ; trivial.\nQed.\n\nLemma ord_lt_trans: forall alpha beta gamma:Ordinal,\n  alpha < beta -> beta < gamma -> alpha < gamma.\nProof.\nintros.\napply ord_lt_le_trans with beta; trivial;\n apply ord_lt_le; trivial.\nQed.\n\n",
                "context_tokens": 740,
                "proof_start_offset": 4788,
                "proof_end_offset": 4941,
                "proof": "Lemma ord_lt_respects_succ: forall alpha beta:Ordinal, alpha < beta -> ordS alpha < ordS beta.\nProof.\nintros.\napply ord_le_respects_succ; trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma ord_lt_respects_succ: forall alpha beta:Ordinal, alpha < beta -> ordS alpha < ordS beta.\nProof.\nintros.\napply ord_le_full; trivial.\nQed.",
                    "Lemma ord_lt_respects_succ: forall alpha beta:Ordinal, alpha < beta -> ordS alpha < ordS beta.\nProof.\nintros.\napply ord_le_respects_succ; trivial.\nQed.",
                    "Lemma ord_lt_respects_succ: forall alpha beta:Ordinal, alpha < beta -> ordS alpha < ordS beta.\nProof.\nintros.\napply ord_le_trans with (ord_full beta); trivial.\nQed.",
                    "Lemma ord_lt_respects_succ: forall alpha beta:Ordinal, alpha < beta -> ordS alpha < ordS beta.\nProof.\nintros.\napply ord_le_anti; trivial.\nQed.",
                    "Lemma ord_lt_respects_succ: forall alpha beta:Ordinal, alpha < beta -> ordS alpha < ordS beta.\nProof.\nintros.\napply ord_le_anti; trivial.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zorns-lemma/Ordinals.v",
                "context": " _ _ H1).\napply ord_le_S_sup_converse in H0.\ndestruct H0 as [i].\napply H with i; trivial.\nintros.\npose proof (ord_sup_minimal_converse _ _ _ H0).\nconstructor.\nintro.\napply H with beta; trivial.\nQed.\n\nLemma ord_le_sup: forall (I:Type) (alpha:I->Ordinal) (i:I),\n  alpha i <= ord_sup alpha.\nProof.\nassert (forall beta:Ordinal, beta <= beta /\\\n  forall (I:Type) (alpha:I->Ordinal) (i:I),\n  beta <= alpha i -> beta <= ord_sup alpha).\ninduction beta.\ndestruct IHbeta.\nsplit.\napply ord_le_respects_succ; trivial.\nintros.\napply ord_le_S_sup with i.\ntrivial.\nsplit.\napply ord_sup_minimal.\nintro.\ndestruct (H i).\napply H1 with i; trivial.\nintros J alpha j?.\napply ord_sup_minimal.\nintro.\ndestruct (H i).\napply H2 with j.\napply ord_le_trans with (ord_sup o).\napply H2 with i; trivial.\ntrivial.\n\nintros.\ndestruct (H (alpha i)).\napply H1 with i; trivial.\nQed.\n\nLemma ord_le_refl: forall alpha:Ordinal, alpha <= alpha.\nProof.\ninduction alpha.\napply ord_le_respects_succ; trivial.\napply ord_sup_minimal.\napply ord_le_sup.\nQed.\n\nLemma ord_le_S: forall alpha:Ordinal, alpha <= ordS alpha.\nProof.\ninduction alpha.\napply ord_le_respects_succ; trivial.\napply ord_sup_minimal.\nintro.\napply ord_le_trans with (ordS (o i)).\napply H.\napply ord_le_respects_succ.\napply ord_le_sup.\nQed.\n\nLemma ord_lt_le: forall alpha beta:Ordinal,\n  alpha < beta -> alpha <= beta.\nProof.\nintros.\napply ord_le_trans with (ordS alpha); trivial.\napply ord_le_S.\nQed.\n\nLemma ord_lt_le_trans: forall alpha beta gamma:Ordinal,\n  alpha < beta -> beta <= gamma -> alpha < gamma.\nProof.\nintros.\napply ord_le_trans with beta; trivial.\nQed.\n\nLemma ord_le_lt_trans: forall alpha beta gamma:Ordinal,\n  alpha <= beta -> beta < gamma -> alpha < gamma.\nProof.\nintros.\napply ord_le_trans with (ordS beta); trivial.\napply ord_le_respects_succ; trivial.\nQed.\n\nLemma ord_lt_trans: forall alpha beta gamma:Ordinal,\n  alpha < beta -> beta < gamma -> alpha < gamma.\nProof.\nintros.\napply ord_lt_le_trans with beta; trivial;\n apply ord_lt_le; trivial.\nQed.\n\nLemma ord_lt_respects_succ: forall alpha beta:Ordinal,\n  alpha < beta -> ordS alpha < ordS beta.\nProof.\nintros.\napply ord_le_respects_succ; trivial.\nQed.\n\n",
                "context_tokens": 742,
                "proof_start_offset": 4943,
                "proof_end_offset": 7301,
                "proof": "Lemma ord_total_order: forall alpha beta:Ordinal, alpha < beta \\/ alpha == beta \\/ alpha > beta.\nProof.\ninduction alpha.\ninduction beta.\ndestruct (IHalpha beta) as [|[|]].\nleft; apply ord_lt_respects_succ; trivial.\nright; left.\nsplit.\napply ord_le_respects_succ; apply H.\napply ord_le_respects_succ; apply H.\nright; right.\napply ord_lt_respects_succ; trivial.\ndestruct (classic (exists i:I, ordS alpha < o i)).\ndestruct H0 as [i].\nleft.\napply ord_lt_le_trans with (o i); trivial.\napply ord_le_sup.\ndestruct (classic (exists i:I, ordS alpha == o i)).\ndestruct H1 as [i].\nright; left.\nsplit.\napply ord_le_trans with (o i).\napply H1.\napply ord_le_sup.\napply ord_sup_minimal.\nintro.\ndestruct (H i0) as [|[|]].\ncontradiction H0; exists i0; trivial.\napply H2.\napply ord_lt_le; trivial.\nassert (forall i:I, ordS alpha > o i).\nintros.\ndestruct (H i) as [|[|]].\ncontradiction H0; exists i; trivial.\ncontradiction H1; exists i; trivial.\ntrivial.\nright; right.\napply ord_le_lt_trans with alpha.\napply ord_sup_minimal.\nintro.\napply ord_le_respects_succ_converse.\napply H2.\napply ord_le_refl.\ninduction beta.\ncase (classic (exists i:I, o i > ordS beta)); intro.\ndestruct H0 as [i].\nright; right.\napply ord_lt_le_trans with (o i); trivial.\napply ord_le_sup.\ncase (classic (exists i:I, o i == ordS beta)); intro.\nright; left.\ndestruct H1 as [i].\nsplit.\napply ord_sup_minimal.\nintro j.\ndestruct (H j (ordS beta)) as [|[|]].\napply ord_lt_le; trivial.\napply H2.\ncontradiction H0; exists j; trivial.\napply ord_le_trans with (o i).\napply H1.\napply ord_le_sup.\nleft.\napply ord_le_respects_succ.\napply ord_sup_minimal.\nintro.\ndestruct (H i (ordS beta)) as [|[|]].\napply ord_le_respects_succ_converse; trivial.\ncontradiction H1; exists i; trivial.\ncontradiction H0; exists i; trivial.\ncase (classic (exists j:I0, ord_sup o < o0 j)); intro.\nleft.\ndestruct H1 as [j].\napply ord_lt_le_trans with (o0 j); trivial.\napply ord_le_sup.\ncase (classic (exists i:I, o i > ord_sup o0)); intro.\ndestruct H2 as [i].\nright; right.\napply ord_lt_le_trans with (o i); trivial.\napply ord_le_sup.\nright; left.\nsplit.\napply ord_sup_minimal; intro.\ndestruct (H i (ord_sup o0)) as [|[|]].\napply ord_lt_le; trivial.\napply H3.\ncontradiction H2; exists i; trivial.\napply ord_sup_minimal; intro j.\ndestruct (H0 j) as [|[|]].\ncontradiction H1; exists j; trivial.\napply H3.\napply ord_lt_le; trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma ord_total_order: forall alpha beta:Ordinal, alpha < beta \\/ alpha == beta \\/ alpha > beta.\nProof.\nintros.\napply ord_le_anti; trivial.\nQed.",
                    "Lemma ord_total_order: forall alpha beta:Ordinal, alpha < beta \\/ alpha == beta \\/ alpha > beta.\nProof.\nintros.\napply ord_le_respects_pred; trivial.\nQed.",
                    "Lemma ord_total_order: forall alpha beta:Ordinal, alpha < beta \\/ alpha == beta \\/ alpha > beta.\nProof.\nintros.\napply ord_le_respects_pred with beta; trivial.\nQed.",
                    "Lemma ord_total_order: forall alpha beta:Ordinal, alpha < beta \\/ alpha == beta \\/ alpha > beta.\nProof.\nintros.\napply ord_le_anti; trivial.\nQed.",
                    "Lemma ord_total_order: forall alpha beta:Ordinal, alpha < beta \\/ alpha == beta \\/ alpha > beta.\nProof.\nintros.\napply ord_le_anti; trivial.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zorns-lemma/Ordinals.v",
                "context": "_succ; apply H.\nright; right.\napply ord_lt_respects_succ; trivial.\n\ndestruct (classic (exists i:I, ordS alpha < o i)).\ndestruct H0 as [i].\nleft.\napply ord_lt_le_trans with (o i); trivial.\napply ord_le_sup.\ndestruct (classic (exists i:I, ordS alpha == o i)).\ndestruct H1 as [i].\nright; left.\nsplit.\napply ord_le_trans with (o i).\napply H1.\napply ord_le_sup.\napply ord_sup_minimal.\nintro.\ndestruct (H i0) as [|[|]].\ncontradiction H0; exists i0; trivial.\napply H2.\napply ord_lt_le; trivial.\nassert (forall i:I, ordS alpha > o i).\nintros.\ndestruct (H i) as [|[|]].\ncontradiction H0; exists i; trivial.\ncontradiction H1; exists i; trivial.\ntrivial.\nright; right.\napply ord_le_lt_trans with alpha.\napply ord_sup_minimal.\nintro.\napply ord_le_respects_succ_converse.\napply H2.\napply ord_le_refl.\n\ninduction beta.\ncase (classic (exists i:I, o i > ordS beta)); intro.\ndestruct H0 as [i].\nright; right.\napply ord_lt_le_trans with (o i); trivial.\napply ord_le_sup.\ncase (classic (exists i:I, o i == ordS beta)); intro.\nright; left.\ndestruct H1 as [i].\nsplit.\napply ord_sup_minimal.\nintro j.\ndestruct (H j (ordS beta)) as [|[|]].\napply ord_lt_le; trivial.\napply H2.\ncontradiction H0; exists j; trivial.\napply ord_le_trans with (o i).\napply H1.\napply ord_le_sup.\nleft.\napply ord_le_respects_succ.\napply ord_sup_minimal.\nintro.\ndestruct (H i (ordS beta)) as [|[|]].\napply ord_le_respects_succ_converse; trivial.\ncontradiction H1; exists i; trivial.\ncontradiction H0; exists i; trivial.\n\ncase (classic (exists j:I0, ord_sup o < o0 j)); intro.\nleft.\ndestruct H1 as [j].\napply ord_lt_le_trans with (o0 j); trivial.\napply ord_le_sup.\ncase (classic (exists i:I, o i > ord_sup o0)); intro.\ndestruct H2 as [i].\nright; right.\napply ord_lt_le_trans with (o i); trivial.\napply ord_le_sup.\n\nright; left.\nsplit.\napply ord_sup_minimal; intro.\ndestruct (H i (ord_sup o0)) as [|[|]].\napply ord_lt_le; trivial.\napply H3.\ncontradiction H2; exists i; trivial.\napply ord_sup_minimal; intro j.\ndestruct (H0 j) as [|[|]].\ncontradiction H1; exists j; trivial.\napply H3.\napply ord_lt_le; trivial.\nQed.\n\n",
                "context_tokens": 752,
                "proof_start_offset": 7303,
                "proof_end_offset": 7689,
                "proof": "Lemma ordinals_well_founded: well_founded ord_lt.\nProof.\nred; intro alpha.\ninduction alpha.\nconstructor.\nintros beta ?.\napply ord_le_respects_succ_converse in H.\nconstructor; intros gamma ?.\ndestruct IHalpha.\napply H1.\napply ord_lt_le_trans with beta; trivial.\nconstructor; intros alpha ?.\napply ord_le_S_sup_converse in H0.\ndestruct H0 as [j].\ndestruct (H j).\napply H1; trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma ordinals_well_founded: well_founded ord_lt.\nProof.\nintros.\ndestruct (classic (exists i:I, i < i < i)%nat; intro.\ndestruct (classic (exists i:I, i < i < i)%nat; intro.\napply ord_le_trans with (o i < i)%nat; trivial.\napply ord_le_incl with (o i < i)%nat; trivial.\napply ord_le_incl with (o i < i)%nat; trivial.\napply ord_le_incl with (o i < i)%nat; trivial.\napply ord_le_incl with (o i < i)%nat; trivial.\napply ord_le_incl with (o i < i)%nat; trivial.\napply ord_le_incl with (o i < i)%nat; trivial.\napply ord_le_incl with (o i < i)%nat; trivial.\napply ord_le_incl with (o i < i)%nat; trivial.\napply ord_le_incl with (o i < i)%nat; trivial.\napply ord_le_incl with (o i < i)%nat; trivial.\napply ord_le_incl with (o i <Qed.",
                    "Lemma ordinals_well_founded: well_founded ord_lt.\nProof.\nintros.\ndestruct (H i (ord_refl _) as [|[|]].\nright; right.\ndestruct (H i) as [i [??]].\nright; exists i; trivial.\napply ord_le_incl_incl.\ndestruct (classic (exists i:I, i < i < i)%nat); intro.\napply ord_le_incl.\ndestruct (classic (exists i:I, i < i < i)%nat); intro.\napply ord_le_incl.\ndestruct (classic (exists i:I, i < i < i)%nat); intro.\napply ord_le_incl.\ndestruct (classic (exists i:I, i < i < i)%nat); intro.\napply ord_le_incl.\ndestruct (classic (exists i:I, i < i < i)%nat); intro.\napply ord_le_incl.\ndestruct (classic (exists i:I, i < i < i)%nat); intro.\napply ord_le_incl.\napply ord_le_incl.\napply ord_incl_incl.\ndestruct (classic (exists i:I, i < i)%nat); intro.\nQed.",
                    "Lemma ordinals_well_founded: well_founded ord_lt.\nProof.\nintros.\ndestruct (classic (exists i:I, ord_T i) (S i)).\ndestruct H0 as [i H].\nright; exists i; trivial.\napply ord_le_trans with (o i); trivial.\napply ord_le_trans with (o i); trivial.\napply ord_le_trans with (o i); trivial.\napply ord_le_trans with (o i); trivial.\napply ord_le_trans with (o i); trivial.\napply ord_le_trans with (o i); trivial.\napply ord_le_trans with (o i); trivial.\napply ord_le_trans with (o i); trivial.\napply ord_le_trans with (o i); trivial.\napply ord_le_trans with (o i); trivial.\napply ord_le_trans with (o i); trivial.\napply ord_le_trans with (o i); trivial.\napply ord_le_trans with (o i); trivial.\napply ord_le_trans with (o i); trivial.\napply ord_le_trans with (o i); trivial.\napply ord_Qed.",
                    "Lemma ordinals_well_founded: well_founded ord_lt.\nProof.\nintros.\ndestruct (H i) as [i [i [i [i [i [i [i [i [i [i [i [i [i [i [i [i [i [i [i [i [i [i [i [i [i [i]]]]]]]]]]]]]]]].\ndestruct H1 as [i [i [i [i [i [i [i [i [i [i [i [i [i [i [i [i [ii [i [i [i [i [i [i [ii [i [i i]]]]]]]]]]]].\ndestruct H1 as [i [i [i [i [i [i [i [i [i [i [i [i [i [i [i [i [i [i [ii [i i]]]]]]]]]]]]]]]].\ndestruct H2 as [i [i [i [i [i [i [i [i [i [i [i [i [i [i [i [i [i [ii [i [i [i [i i]]]]]]]]]]]].\ndestruct H2 as [i [i [i [i [i [i [i [i [i [iQed.",
                    "Lemma ordinals_well_founded: well_founded ord_lt.\nProof.\nintros.\ndestruct (classic (exists i:I, ord i j <= i < i)%N); intro.\ndestruct (classic (exists i:I, ord i j < i)%N); intro.\ndestruct H1 as [i [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 i0 [i0 [i0 [i0 i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 [i0 i0 [i0 [i0 [i00 i0 [i0 [i0 i0 [i0 [i0 [i0 [i00 [i0 i0 [i0 i0 [i0 [i0 i0 [i0 [i0 i0 [i0 [Qed."
                ]
            },
            {
                "filepath": "./coq_projects/zorns-lemma/Families.v",
                "context": "Require Export Ensembles.\nRequire Import EnsemblesImplicit.\n\nSet Implicit Arguments.\n\nSection Families.\n\nVariable T:Type.\nDefinition Family := Ensemble (Ensemble T).\nVariable F:Family.\n\nInductive FamilyUnion: Ensemble T :=\n  | family_union_intro: forall (S:Ensemble T) (x:T),\n    In F S -> In S x -> In FamilyUnion x.\n\nInductive FamilyIntersection: Ensemble T :=\n  | family_intersection_intro: forall x:T,\n    (forall S:Ensemble T, In F S -> In S x) ->\n    In FamilyIntersection x.\n\nEnd Families.\n\nSection FamilyFacts.\n\nVariable T:Type.\n\nLemma empty_family_union: FamilyUnion (@Empty_set (Ensemble T)) =\n                          Empty_set.\nProof.\napply Extensionality_Ensembles.\nunfold Same_set.\nunfold Included.\nintuition.\ndestruct H.\ncontradiction H.\n\ncontradiction H.\nQed.\n\n",
                "context_tokens": 226,
                "proof_start_offset": 778,
                "proof_end_offset": 1010,
                "proof": "Lemma empty_family_intersection: FamilyIntersection (@Empty_set (Ensemble T)) = Full_set.\nProof.\napply Extensionality_Ensembles.\nunfold Same_set.\nunfold Included.\nintuition.\nconstructor.\nconstructor.\nintros.\ncontradiction H0.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma empty_family_intersection: FamilyIntersection (@Empty_set (Ensemble T)) = Full_set.\nProof.\napply Extensionality_Ensembles.\nunfold Same_set.\nintuition.\nQed.",
                    "Lemma empty_family_intersection: FamilyIntersection (@Empty_set (Ensemble T)) = Full_set.\nProof.\napply Extensionality_Ensembles.\nunfold Same_set.\nintuition.\nQed.",
                    "Lemma empty_family_intersection: FamilyIntersection (@Empty_set (Ensemble T)) = Full_set.\nProof.\napply Extensionality_Ensembles.\nunfold Same_set.\nintuition.\nQed.",
                    "Lemma empty_family_intersection: FamilyIntersection (@Empty_set (Ensemble T)) = Full_set.\nProof.\nunfold Same_set.\nunfold Same_set.\nintuition.\nQed.",
                    "Lemma empty_family_intersection: FamilyIntersection (@Empty_set (Ensemble T)) = Full_set.\nProof.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/zorns-lemma/Families.v",
                "context": "Require Export Ensembles.\nRequire Import EnsemblesImplicit.\n\nSet Implicit Arguments.\n\nSection Families.\n\nVariable T:Type.\nDefinition Family := Ensemble (Ensemble T).\nVariable F:Family.\n\nInductive FamilyUnion: Ensemble T :=\n  | family_union_intro: forall (S:Ensemble T) (x:T),\n    In F S -> In S x -> In FamilyUnion x.\n\nInductive FamilyIntersection: Ensemble T :=\n  | family_intersection_intro: forall x:T,\n    (forall S:Ensemble T, In F S -> In S x) ->\n    In FamilyIntersection x.\n\nEnd Families.\n\nSection FamilyFacts.\n\nVariable T:Type.\n\nLemma empty_family_union: FamilyUnion (@Empty_set (Ensemble T)) =\n                          Empty_set.\nProof.\napply Extensionality_Ensembles.\nunfold Same_set.\nunfold Included.\nintuition.\ndestruct H.\ncontradiction H.\n\ncontradiction H.\nQed.\n\nLemma empty_family_intersection:\n  FamilyIntersection (@Empty_set (Ensemble T)) = Full_set.\nProof.\napply Extensionality_Ensembles.\nunfold Same_set.\nunfold Included.\nintuition.\nconstructor.\nconstructor.\nintros.\ncontradiction H0.\nQed.\n\n(* unions and intersections of subfamilies *)\n\n",
                "context_tokens": 305,
                "proof_start_offset": 1059,
                "proof_end_offset": 1278,
                "proof": "Lemma subfamily_union: forall F G:Family T, Included F G -> Included (FamilyUnion F) (FamilyUnion G).\nProof.\nunfold Included.\nintros.\ndestruct H0.\napply family_union_intro with S.\napply H.\nassumption.\nassumption.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma subfamily_union: forall F G:Family T, Included F G -> Included (FamilyUnion F) (FamilyUnion G).\nProof.\nunfold Same_set.\nintros.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Qed.",
                    "Lemma subfamily_union: forall F G:Family T, Included F G -> Included (FamilyUnion F) (FamilyUnion G).\nProof.\nunfold Same_set.\nintros.\napply Extensionality_Ensembles.\nunfold Same_set.\napply Extensionality_Ensembles.\nunfold Same_set.\napply Extensionality_Ensembles.\nunfold Same_set.\napply Extensionality_Ensembles.\nunfold Same_set.\nintuition.\nQed.",
                    "Lemma subfamily_union: forall F G:Family T, Included F G -> Included (FamilyUnion F) (FamilyUnion G).\nProof.\napply Extensionality_Ensembles.\nunfold Same_set.\nintuition.\nQed.",
                    "Lemma subfamily_union: forall F G:Family T, Included F G -> Included (FamilyUnion F) (FamilyUnion G).\nProof.\nunfold Same_set.\nintros.\napply Extensionality_Ensembles.\nunfold Same_set.\nintuition.\nQed.",
                    "Lemma subfamily_union: forall F G:Family T, Included F G -> Included (FamilyUnion F) (FamilyUnion G).\nProof.\nunfold Same_set.\nintros.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Qed."
                ]
            },
            {
                "filepath": "./coq_projects/zorns-lemma/Families.v",
                "context": "Require Export Ensembles.\nRequire Import EnsemblesImplicit.\n\nSet Implicit Arguments.\n\nSection Families.\n\nVariable T:Type.\nDefinition Family := Ensemble (Ensemble T).\nVariable F:Family.\n\nInductive FamilyUnion: Ensemble T :=\n  | family_union_intro: forall (S:Ensemble T) (x:T),\n    In F S -> In S x -> In FamilyUnion x.\n\nInductive FamilyIntersection: Ensemble T :=\n  | family_intersection_intro: forall x:T,\n    (forall S:Ensemble T, In F S -> In S x) ->\n    In FamilyIntersection x.\n\nEnd Families.\n\nSection FamilyFacts.\n\nVariable T:Type.\n\nLemma empty_family_union: FamilyUnion (@Empty_set (Ensemble T)) =\n                          Empty_set.\nProof.\napply Extensionality_Ensembles.\nunfold Same_set.\nunfold Included.\nintuition.\ndestruct H.\ncontradiction H.\n\ncontradiction H.\nQed.\n\nLemma empty_family_intersection:\n  FamilyIntersection (@Empty_set (Ensemble T)) = Full_set.\nProof.\napply Extensionality_Ensembles.\nunfold Same_set.\nunfold Included.\nintuition.\nconstructor.\nconstructor.\nintros.\ncontradiction H0.\nQed.\n\n(* unions and intersections of subfamilies *)\n\nLemma subfamily_union: forall F G:Family T, Included F G ->\n  Included (FamilyUnion F) (FamilyUnion G).\nProof.\nunfold Included.\nintros.\ndestruct H0.\napply family_union_intro with S.\napply H.\nassumption.\nassumption.\nQed.\n\n",
                "context_tokens": 374,
                "proof_start_offset": 1280,
                "proof_end_offset": 1506,
                "proof": "Lemma subfamily_intersection: forall F G:Family T, Included F G -> Included (FamilyIntersection G) (FamilyIntersection F).\nProof.\nunfold Included.\nintros.\nconstructor.\ndestruct H0.\nintros.\napply H0.\napply H.\nassumption.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma subfamily_intersection: forall F G:Family T, Included F G -> Included (FamilyIntersection G) (FamilyIntersection F).\nProof.\nintros.\ndestruct H.\napply H.\napply H.\nassumption.\nQed.",
                    "Lemma subfamily_intersection: forall F G:Family T, Included F G -> Included (FamilyIntersection G) (FamilyIntersection F).\nProof.\nintros.\napply Extensionality_Ensembles.\nunfold Same_set.\nintuition.\nQed.",
                    "Lemma subfamily_intersection: forall F G:Family T, Included F G -> Included (FamilyIntersection G) (FamilyIntersection F).\nProof.\nunfold Included in |- *.\nintuition.\nQed.",
                    "Lemma subfamily_intersection: forall F G:Family T, Included F G -> Included (FamilyIntersection G) (FamilyIntersection F).\nProof.\nunfold Included in |- *.\nintros.\napply Extensionality_Ensembles.\nunfold Included in |- *.\nintuition.\nQed.",
                    "Lemma subfamily_intersection: forall F G:Family T, Included F G -> Included (FamilyIntersection G) (FamilyIntersection F).\nProof.\nunfold Included.\nintros.\ndestruct H.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napply Extensionality_Ensembles.\napplyQed."
                ]
            }
        ],
        "coqrel": [
            {
                "filepath": "./coq_projects/coqrel/RelOperators.v",
                "context": "inter_refl : typeclass_instances.\n\nLemma rel_inter_corefl_l {A} (R1 R2: rel A A):\n  Coreflexive R1 ->\n  Coreflexive (R1 /\\ R2).\nProof.\n  firstorder.\nQed.\n\nHint Extern 1 (Coreflexive (_ /\\ _)) =>\n  eapply rel_inter_corefl_l : typeclass_instances.\n\nLemma rel_inter_corefl_r {A} (R1 R2: rel A A):\n  Coreflexive R2 ->\n  Coreflexive (R1 /\\ R2).\nProof.\n  firstorder.\nQed.\n\nHint Extern 1 (Coreflexive (_ /\\ _)) =>\n  eapply rel_inter_corefl_r : typeclass_instances.\n\nLemma rel_inter_trans {A} (R1 R2: rel A A):\n  Transitive R1 ->\n  Transitive R2 ->\n  Transitive (R1 /\\ R2).\nProof.\n  intros H1 H2 x y z [Hxy1 Hxy2] [Hyz1 Hyz2].\n  split; etransitivity; eassumption.\nQed.\n\nHint Extern 2 (Transitive (_ /\\ _)) =>\n  eapply rel_inter_trans : typeclass_instances.\n\nLemma rel_inter_sym {A} (R1 R2: rel A A):\n  Symmetric R1 ->\n  Symmetric R2 ->\n  Symmetric (R1 /\\ R2).\nProof.\n  intros H1 H2 x y [Hxy1 Hxy2].\n  split; symmetry; assumption.\nQed.\n\nHint Extern 2 (Symmetric (_ /\\ _)) =>\n  eapply rel_inter_sym : typeclass_instances.\n\nGlobal Instance rel_inter_flip_sym {A} (R: rel A A):\n  Symmetric (R /\\ flip R).\nProof.\n  intros x y [Hxy Hyx].\n  split; assumption.\nQed.\n\n(** On a related note, a symmetric subrelation of [R] is also a\n  subrelation of its inverse. *)\n\nLemma subrel_sym_flip {A} (R R': relation A):\n  Symmetric R ->\n  RStep (subrel R R') (subrel R (flip R')).\nProof.\n  intros HR H x y Hxy.\n  symmetry in Hxy.\n  firstorder.\nQed.\n\nHint Extern 60 (RStep _ (subrel _ (flip _))) =>\n  eapply subrel_sym_flip : typeclass_instances.\n\n(** ** Implication *)\n\nDefinition rel_impl {A B} (R1 R2: rel A B): rel A B :=\n  fun x y => R1 x y -> R2 x y.\n\nGlobal Instance rel_impl_subrel {A B}:\n  Monotonic (@rel_impl A B) (subrel --> subrel ++> subrel).\nProof.\n  firstorder.\nQed.\n\nGlobal Instance rel_impl_subrel_params:\n  Params (@rel_impl) 4.\n\nLemma rel_impl_rintro {A B} (R1 R2: rel A B) x y:\n  RIntro (R1 x y -> R2 x y) (rel_impl R1 R2) x y.\nProof.\n  firstorder.\nQed.\n\nHint Extern 0 (RIntro _ (rel_impl _ _) _ _) =>\n  eapply rel_impl_rintro : typeclass_instances.\n\n",
                "context_tokens": 719,
                "proof_start_offset": 6671,
                "proof_end_offset": 6793,
                "proof": "Lemma rel_impl_relim {A B} (R1 R2: rel A B) x y: RElim (rel_impl R1 R2) x y (R1 x y) (R2 x y).\nProof.\nfirstorder.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma rel_impl_relim {A B} (R1 R2: rel A B) x y: RElim (rel_impl R1 R2) x y (R1 x y) (R2 x y).\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_impl_relim {A B} (R1 R2: rel A B) x y: RElim (rel_impl R1 R2) x y (R1 x y) (R2 x y).\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_impl_relim {A B} (R1 R2: rel A B) x y: RElim (rel_impl R1 R2) x y (R1 x y) (R2 x y).\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_impl_relim {A B} (R1 R2: rel A B) x y: RElim (rel_impl R1 R2) x y (R1 x y) (R2 x y).\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_impl_relim {A B} (R1 R2: rel A B) x y: RElim (rel_impl R1 R2) x y (R1 x y) (R2 x y).\nProof.\n  firstorder.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/coqrel/RelOperators.v",
                "context": "l : typeclass_instances.\n\nLemma rel_inter_corefl_r {A} (R1 R2: rel A A):\n  Coreflexive R2 ->\n  Coreflexive (R1 /\\ R2).\nProof.\n  firstorder.\nQed.\n\nHint Extern 1 (Coreflexive (_ /\\ _)) =>\n  eapply rel_inter_corefl_r : typeclass_instances.\n\nLemma rel_inter_trans {A} (R1 R2: rel A A):\n  Transitive R1 ->\n  Transitive R2 ->\n  Transitive (R1 /\\ R2).\nProof.\n  intros H1 H2 x y z [Hxy1 Hxy2] [Hyz1 Hyz2].\n  split; etransitivity; eassumption.\nQed.\n\nHint Extern 2 (Transitive (_ /\\ _)) =>\n  eapply rel_inter_trans : typeclass_instances.\n\nLemma rel_inter_sym {A} (R1 R2: rel A A):\n  Symmetric R1 ->\n  Symmetric R2 ->\n  Symmetric (R1 /\\ R2).\nProof.\n  intros H1 H2 x y [Hxy1 Hxy2].\n  split; symmetry; assumption.\nQed.\n\nHint Extern 2 (Symmetric (_ /\\ _)) =>\n  eapply rel_inter_sym : typeclass_instances.\n\nGlobal Instance rel_inter_flip_sym {A} (R: rel A A):\n  Symmetric (R /\\ flip R).\nProof.\n  intros x y [Hxy Hyx].\n  split; assumption.\nQed.\n\n(** On a related note, a symmetric subrelation of [R] is also a\n  subrelation of its inverse. *)\n\nLemma subrel_sym_flip {A} (R R': relation A):\n  Symmetric R ->\n  RStep (subrel R R') (subrel R (flip R')).\nProof.\n  intros HR H x y Hxy.\n  symmetry in Hxy.\n  firstorder.\nQed.\n\nHint Extern 60 (RStep _ (subrel _ (flip _))) =>\n  eapply subrel_sym_flip : typeclass_instances.\n\n(** ** Implication *)\n\nDefinition rel_impl {A B} (R1 R2: rel A B): rel A B :=\n  fun x y => R1 x y -> R2 x y.\n\nGlobal Instance rel_impl_subrel {A B}:\n  Monotonic (@rel_impl A B) (subrel --> subrel ++> subrel).\nProof.\n  firstorder.\nQed.\n\nGlobal Instance rel_impl_subrel_params:\n  Params (@rel_impl) 4.\n\nLemma rel_impl_rintro {A B} (R1 R2: rel A B) x y:\n  RIntro (R1 x y -> R2 x y) (rel_impl R1 R2) x y.\nProof.\n  firstorder.\nQed.\n\nHint Extern 0 (RIntro _ (rel_impl _ _) _ _) =>\n  eapply rel_impl_rintro : typeclass_instances.\n\nLemma rel_impl_relim {A B} (R1 R2: rel A B) x y:\n  RElim (rel_impl R1 R2) x y (R1 x y) (R2 x y).\nProof.\n  firstorder.\nQed.\n\nHint Extern 0 (RElim (rel_impl _ _) _ _ _ _) =>\n  eapply rel_impl_relim : typeclass_instances.\n\n",
                "context_tokens": 729,
                "proof_start_offset": 6891,
                "proof_end_offset": 7009,
                "proof": "Lemma rel_impl_subrel_codomain {A B} (R1 R2: rel A B): Related R2 (rel_impl R1 R2) subrel.\nProof.\nfirstorder.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma rel_impl_subrel_codomain {A B} (R1 R2: rel A B): Related R2 (rel_impl R1 R2) subrel.\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_impl_subrel_codomain {A B} (R1 R2: rel A B): Related R2 (rel_impl R1 R2) subrel.\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_impl_subrel_codomain {A B} (R1 R2: rel A B): Related R2 (rel_impl R1 R2) subrel.\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_impl_subrel_codomain {A B} (R1 R2: rel A B): Related R2 (rel_impl R1 R2) subrel.\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_impl_subrel_codomain {A B} (R1 R2: rel A B): Related R2 (rel_impl R1 R2) subrel.\nProof.\n  firstorder.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/coqrel/RelOperators.v",
                "context": "\n\nLemma rel_inter_trans {A} (R1 R2: rel A A):\n  Transitive R1 ->\n  Transitive R2 ->\n  Transitive (R1 /\\ R2).\nProof.\n  intros H1 H2 x y z [Hxy1 Hxy2] [Hyz1 Hyz2].\n  split; etransitivity; eassumption.\nQed.\n\nHint Extern 2 (Transitive (_ /\\ _)) =>\n  eapply rel_inter_trans : typeclass_instances.\n\nLemma rel_inter_sym {A} (R1 R2: rel A A):\n  Symmetric R1 ->\n  Symmetric R2 ->\n  Symmetric (R1 /\\ R2).\nProof.\n  intros H1 H2 x y [Hxy1 Hxy2].\n  split; symmetry; assumption.\nQed.\n\nHint Extern 2 (Symmetric (_ /\\ _)) =>\n  eapply rel_inter_sym : typeclass_instances.\n\nGlobal Instance rel_inter_flip_sym {A} (R: rel A A):\n  Symmetric (R /\\ flip R).\nProof.\n  intros x y [Hxy Hyx].\n  split; assumption.\nQed.\n\n(** On a related note, a symmetric subrelation of [R] is also a\n  subrelation of its inverse. *)\n\nLemma subrel_sym_flip {A} (R R': relation A):\n  Symmetric R ->\n  RStep (subrel R R') (subrel R (flip R')).\nProof.\n  intros HR H x y Hxy.\n  symmetry in Hxy.\n  firstorder.\nQed.\n\nHint Extern 60 (RStep _ (subrel _ (flip _))) =>\n  eapply subrel_sym_flip : typeclass_instances.\n\n(** ** Implication *)\n\nDefinition rel_impl {A B} (R1 R2: rel A B): rel A B :=\n  fun x y => R1 x y -> R2 x y.\n\nGlobal Instance rel_impl_subrel {A B}:\n  Monotonic (@rel_impl A B) (subrel --> subrel ++> subrel).\nProof.\n  firstorder.\nQed.\n\nGlobal Instance rel_impl_subrel_params:\n  Params (@rel_impl) 4.\n\nLemma rel_impl_rintro {A B} (R1 R2: rel A B) x y:\n  RIntro (R1 x y -> R2 x y) (rel_impl R1 R2) x y.\nProof.\n  firstorder.\nQed.\n\nHint Extern 0 (RIntro _ (rel_impl _ _) _ _) =>\n  eapply rel_impl_rintro : typeclass_instances.\n\nLemma rel_impl_relim {A B} (R1 R2: rel A B) x y:\n  RElim (rel_impl R1 R2) x y (R1 x y) (R2 x y).\nProof.\n  firstorder.\nQed.\n\nHint Extern 0 (RElim (rel_impl _ _) _ _ _ _) =>\n  eapply rel_impl_relim : typeclass_instances.\n\nLemma rel_impl_subrel_codomain {A B} (R1 R2: rel A B):\n  Related R2 (rel_impl R1 R2) subrel.\nProof.\n  firstorder.\nQed.\n\n(** ** The bottom and top relations *)\n\nDefinition rel_bot {A B}: rel A B :=\n  fun x y => False.\n\nNotation \"\u22a5\" := rel_bot : rel_scope.\n\n",
                "context_tokens": 741,
                "proof_start_offset": 7147,
                "proof_end_offset": 7239,
                "proof": "Lemma rel_bot_subrel {A B} (R: rel A B): Related \u22a5%rel R subrel.\nProof.\nfirstorder.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma rel_bot_subrel {A B} (R: rel A B): Related \u22a5%rel R subrel.\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_bot_subrel {A B} (R: rel A B): Related \u22a5%rel R subrel.\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_bot_subrel {A B} (R: rel A B): Related \u22a5%rel R subrel.\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_bot_subrel {A B} (R: rel A B): Related \u22a5%rel R subrel.\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_bot_subrel {A B} (R: rel A B): Related \u22a5%rel R subrel.\nProof.\n  firstorder.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/coqrel/RelOperators.v",
                "context": "; eassumption.\nQed.\n\nHint Extern 2 (Transitive (_ /\\ _)) =>\n  eapply rel_inter_trans : typeclass_instances.\n\nLemma rel_inter_sym {A} (R1 R2: rel A A):\n  Symmetric R1 ->\n  Symmetric R2 ->\n  Symmetric (R1 /\\ R2).\nProof.\n  intros H1 H2 x y [Hxy1 Hxy2].\n  split; symmetry; assumption.\nQed.\n\nHint Extern 2 (Symmetric (_ /\\ _)) =>\n  eapply rel_inter_sym : typeclass_instances.\n\nGlobal Instance rel_inter_flip_sym {A} (R: rel A A):\n  Symmetric (R /\\ flip R).\nProof.\n  intros x y [Hxy Hyx].\n  split; assumption.\nQed.\n\n(** On a related note, a symmetric subrelation of [R] is also a\n  subrelation of its inverse. *)\n\nLemma subrel_sym_flip {A} (R R': relation A):\n  Symmetric R ->\n  RStep (subrel R R') (subrel R (flip R')).\nProof.\n  intros HR H x y Hxy.\n  symmetry in Hxy.\n  firstorder.\nQed.\n\nHint Extern 60 (RStep _ (subrel _ (flip _))) =>\n  eapply subrel_sym_flip : typeclass_instances.\n\n(** ** Implication *)\n\nDefinition rel_impl {A B} (R1 R2: rel A B): rel A B :=\n  fun x y => R1 x y -> R2 x y.\n\nGlobal Instance rel_impl_subrel {A B}:\n  Monotonic (@rel_impl A B) (subrel --> subrel ++> subrel).\nProof.\n  firstorder.\nQed.\n\nGlobal Instance rel_impl_subrel_params:\n  Params (@rel_impl) 4.\n\nLemma rel_impl_rintro {A B} (R1 R2: rel A B) x y:\n  RIntro (R1 x y -> R2 x y) (rel_impl R1 R2) x y.\nProof.\n  firstorder.\nQed.\n\nHint Extern 0 (RIntro _ (rel_impl _ _) _ _) =>\n  eapply rel_impl_rintro : typeclass_instances.\n\nLemma rel_impl_relim {A B} (R1 R2: rel A B) x y:\n  RElim (rel_impl R1 R2) x y (R1 x y) (R2 x y).\nProof.\n  firstorder.\nQed.\n\nHint Extern 0 (RElim (rel_impl _ _) _ _ _ _) =>\n  eapply rel_impl_relim : typeclass_instances.\n\nLemma rel_impl_subrel_codomain {A B} (R1 R2: rel A B):\n  Related R2 (rel_impl R1 R2) subrel.\nProof.\n  firstorder.\nQed.\n\n(** ** The bottom and top relations *)\n\nDefinition rel_bot {A B}: rel A B :=\n  fun x y => False.\n\nNotation \"\u22a5\" := rel_bot : rel_scope.\n\nLemma rel_bot_subrel {A B} (R: rel A B):\n  Related \u22a5%rel R subrel.\nProof.\n  firstorder.\nQed.\n\nHint Extern 0 (Related \u22a5%rel _ _) =>\n  eapply rel_bot_subrel : typeclass_instances.\n\n",
                "context_tokens": 737,
                "proof_start_offset": 7326,
                "proof_end_offset": 7416,
                "proof": "Lemma rel_bot_relim {A B} (x: A) (y: B) P: RElim \u22a5 x y True P.\nProof.\nfirstorder.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma rel_bot_relim {A B} (x: A) (y: B) P: RElim \u22a5 x y True P.\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_bot_relim {A B} (x: A) (y: B) P: RElim \u22a5 x y True P.\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_bot_relim {A B} (x: A) (y: B) P: RElim \u22a5 x y True P.\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_bot_relim {A B} (x: A) (y: B) P: RElim \u22a5 x y True P.\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_bot_relim {A B} (x: A) (y: B) P: RElim \u22a5 x y True P.\nProof.\n  firstorder.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/coqrel/RelOperators.v",
                "context": " /\\ _)) =>\n  eapply rel_inter_sym : typeclass_instances.\n\nGlobal Instance rel_inter_flip_sym {A} (R: rel A A):\n  Symmetric (R /\\ flip R).\nProof.\n  intros x y [Hxy Hyx].\n  split; assumption.\nQed.\n\n(** On a related note, a symmetric subrelation of [R] is also a\n  subrelation of its inverse. *)\n\nLemma subrel_sym_flip {A} (R R': relation A):\n  Symmetric R ->\n  RStep (subrel R R') (subrel R (flip R')).\nProof.\n  intros HR H x y Hxy.\n  symmetry in Hxy.\n  firstorder.\nQed.\n\nHint Extern 60 (RStep _ (subrel _ (flip _))) =>\n  eapply subrel_sym_flip : typeclass_instances.\n\n(** ** Implication *)\n\nDefinition rel_impl {A B} (R1 R2: rel A B): rel A B :=\n  fun x y => R1 x y -> R2 x y.\n\nGlobal Instance rel_impl_subrel {A B}:\n  Monotonic (@rel_impl A B) (subrel --> subrel ++> subrel).\nProof.\n  firstorder.\nQed.\n\nGlobal Instance rel_impl_subrel_params:\n  Params (@rel_impl) 4.\n\nLemma rel_impl_rintro {A B} (R1 R2: rel A B) x y:\n  RIntro (R1 x y -> R2 x y) (rel_impl R1 R2) x y.\nProof.\n  firstorder.\nQed.\n\nHint Extern 0 (RIntro _ (rel_impl _ _) _ _) =>\n  eapply rel_impl_rintro : typeclass_instances.\n\nLemma rel_impl_relim {A B} (R1 R2: rel A B) x y:\n  RElim (rel_impl R1 R2) x y (R1 x y) (R2 x y).\nProof.\n  firstorder.\nQed.\n\nHint Extern 0 (RElim (rel_impl _ _) _ _ _ _) =>\n  eapply rel_impl_relim : typeclass_instances.\n\nLemma rel_impl_subrel_codomain {A B} (R1 R2: rel A B):\n  Related R2 (rel_impl R1 R2) subrel.\nProof.\n  firstorder.\nQed.\n\n(** ** The bottom and top relations *)\n\nDefinition rel_bot {A B}: rel A B :=\n  fun x y => False.\n\nNotation \"\u22a5\" := rel_bot : rel_scope.\n\nLemma rel_bot_subrel {A B} (R: rel A B):\n  Related \u22a5%rel R subrel.\nProof.\n  firstorder.\nQed.\n\nHint Extern 0 (Related \u22a5%rel _ _) =>\n  eapply rel_bot_subrel : typeclass_instances.\n\nLemma rel_bot_relim {A B} (x: A) (y: B) P:\n  RElim \u22a5 x y True P.\nProof.\n  firstorder.\nQed.\n\nHint Extern 0 (RElim \u22a5 _ _ _ _) =>\n  eapply rel_bot_relim : typeclass_instances.\n\nDefinition rel_top {A B}: rel A B :=\n  fun x y => True.\n\nNotation \"\u22a4\" := rel_top : rel_scope.\n\n",
                "context_tokens": 738,
                "proof_start_offset": 7595,
                "proof_end_offset": 7683,
                "proof": "Lemma rel_top_rintro {A B} (x: A) (y: B): RIntro True \u22a4 x y.\nProof.\nfirstorder.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma rel_top_rintro {A B} (x: A) (y: B): RIntro True \u22a4 x y.\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_top_rintro {A B} (x: A) (y: B): RIntro True \u22a4 x y.\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_top_rintro {A B} (x: A) (y: B): RIntro True \u22a4 x y.\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_top_rintro {A B} (x: A) (y: B): RIntro True \u22a4 x y.\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_top_rintro {A B} (x: A) (y: B): RIntro True \u22a4 x y.\nProof.\n  firstorder.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/coqrel/RelOperators.v",
                "context": " R2: rel A B) x y:\n  RElim (rel_impl R1 R2) x y (R1 x y) (R2 x y).\nProof.\n  firstorder.\nQed.\n\nHint Extern 0 (RElim (rel_impl _ _) _ _ _ _) =>\n  eapply rel_impl_relim : typeclass_instances.\n\nLemma rel_impl_subrel_codomain {A B} (R1 R2: rel A B):\n  Related R2 (rel_impl R1 R2) subrel.\nProof.\n  firstorder.\nQed.\n\n(** ** The bottom and top relations *)\n\nDefinition rel_bot {A B}: rel A B :=\n  fun x y => False.\n\nNotation \"\u22a5\" := rel_bot : rel_scope.\n\nLemma rel_bot_subrel {A B} (R: rel A B):\n  Related \u22a5%rel R subrel.\nProof.\n  firstorder.\nQed.\n\nHint Extern 0 (Related \u22a5%rel _ _) =>\n  eapply rel_bot_subrel : typeclass_instances.\n\nLemma rel_bot_relim {A B} (x: A) (y: B) P:\n  RElim \u22a5 x y True P.\nProof.\n  firstorder.\nQed.\n\nHint Extern 0 (RElim \u22a5 _ _ _ _) =>\n  eapply rel_bot_relim : typeclass_instances.\n\nDefinition rel_top {A B}: rel A B :=\n  fun x y => True.\n\nNotation \"\u22a4\" := rel_top : rel_scope.\n\nLemma rel_top_rintro {A B} (x: A) (y: B):\n  RIntro True \u22a4 x y.\nProof.\n  firstorder.\nQed.\n\nHint Extern 0 (RIntro _ \u22a4 _ _) =>\n  eapply rel_top_rintro : typeclass_instances.\n\nGlobal Instance rel_top_equiv {A}:\n  @Equivalence A \u22a4.\nProof.\n  repeat constructor.\nQed.\n\n(** ** Relation equivalence *)\n\nDefinition eqrel {A B}: rel (rel A B) (rel A B) :=\n  (subrel /\\ flip subrel)%rel.\n\nArguments eqrel {_ _} RA%rel RB%rel.\n\nGlobal Instance eqrel_equivalence A B:\n  Equivalence (@eqrel A B).\nProof.\n  unfold eqrel.\n  split; typeclasses eauto.\nQed.\n\nGlobal Instance eqrel_subrel A B:\n  Related (@eqrel A B) (@subrel A B) subrel.\nProof.\n  firstorder.\nQed.\n\n(** ** Relation composition *)\n\nDefinition rel_compose {A B C} (RAB: rel A B) (RBC: rel B C): rel A C :=\n  fun x z => exists y, RAB x y /\\ RBC y z.\n\nHint Unfold rel_compose.\n\nGlobal Instance rel_compose_subrel {A B C}:\n  Monotonic (@rel_compose A B C) (subrel ++> subrel ++> subrel).\nProof.\n  firstorder.\nQed.\n\nGlobal Instance rel_compose_eqrel {A B C}:\n  Monotonic (@rel_compose A B C) (eqrel ==> eqrel ==> eqrel).\nProof.\n  firstorder.\nQed.\n\nGlobal Instance rel_compose_params:\n  Params (@rel_compose) 4.\n\n",
                "context_tokens": 737,
                "proof_start_offset": 8747,
                "proof_end_offset": 8901,
                "proof": "Lemma rel_compose_id_left {A B} (R: rel A B): eqrel (rel_compose R eq) R.\nProof.\nunfold rel_compose.\nsplit; intros x y; firstorder; congruence.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma rel_compose_id_left {A B} (R: rel A B): eqrel (rel_compose R eq) R.\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_compose_id_left {A B} (R: rel A B): eqrel (rel_compose R eq) R.\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_compose_id_left {A B} (R: rel A B): eqrel (rel_compose R eq) R.\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_compose_id_left {A B} (R: rel A B): eqrel (rel_compose R eq) R.\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_compose_id_left {A B} (R: rel A B): eqrel (rel_compose R eq) R.\nProof.\n  firstorder.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/coqrel/RelOperators.v",
                "context": "impl _ _) _ _ _ _) =>\n  eapply rel_impl_relim : typeclass_instances.\n\nLemma rel_impl_subrel_codomain {A B} (R1 R2: rel A B):\n  Related R2 (rel_impl R1 R2) subrel.\nProof.\n  firstorder.\nQed.\n\n(** ** The bottom and top relations *)\n\nDefinition rel_bot {A B}: rel A B :=\n  fun x y => False.\n\nNotation \"\u22a5\" := rel_bot : rel_scope.\n\nLemma rel_bot_subrel {A B} (R: rel A B):\n  Related \u22a5%rel R subrel.\nProof.\n  firstorder.\nQed.\n\nHint Extern 0 (Related \u22a5%rel _ _) =>\n  eapply rel_bot_subrel : typeclass_instances.\n\nLemma rel_bot_relim {A B} (x: A) (y: B) P:\n  RElim \u22a5 x y True P.\nProof.\n  firstorder.\nQed.\n\nHint Extern 0 (RElim \u22a5 _ _ _ _) =>\n  eapply rel_bot_relim : typeclass_instances.\n\nDefinition rel_top {A B}: rel A B :=\n  fun x y => True.\n\nNotation \"\u22a4\" := rel_top : rel_scope.\n\nLemma rel_top_rintro {A B} (x: A) (y: B):\n  RIntro True \u22a4 x y.\nProof.\n  firstorder.\nQed.\n\nHint Extern 0 (RIntro _ \u22a4 _ _) =>\n  eapply rel_top_rintro : typeclass_instances.\n\nGlobal Instance rel_top_equiv {A}:\n  @Equivalence A \u22a4.\nProof.\n  repeat constructor.\nQed.\n\n(** ** Relation equivalence *)\n\nDefinition eqrel {A B}: rel (rel A B) (rel A B) :=\n  (subrel /\\ flip subrel)%rel.\n\nArguments eqrel {_ _} RA%rel RB%rel.\n\nGlobal Instance eqrel_equivalence A B:\n  Equivalence (@eqrel A B).\nProof.\n  unfold eqrel.\n  split; typeclasses eauto.\nQed.\n\nGlobal Instance eqrel_subrel A B:\n  Related (@eqrel A B) (@subrel A B) subrel.\nProof.\n  firstorder.\nQed.\n\n(** ** Relation composition *)\n\nDefinition rel_compose {A B C} (RAB: rel A B) (RBC: rel B C): rel A C :=\n  fun x z => exists y, RAB x y /\\ RBC y z.\n\nHint Unfold rel_compose.\n\nGlobal Instance rel_compose_subrel {A B C}:\n  Monotonic (@rel_compose A B C) (subrel ++> subrel ++> subrel).\nProof.\n  firstorder.\nQed.\n\nGlobal Instance rel_compose_eqrel {A B C}:\n  Monotonic (@rel_compose A B C) (eqrel ==> eqrel ==> eqrel).\nProof.\n  firstorder.\nQed.\n\nGlobal Instance rel_compose_params:\n  Params (@rel_compose) 4.\n\nLemma rel_compose_id_left {A B} (R: rel A B):\n  eqrel (rel_compose R eq) R.\nProof.\n  unfold rel_compose.\n  split; intros x y; firstorder; congruence.\nQed.\n\n",
                "context_tokens": 737,
                "proof_start_offset": 8903,
                "proof_end_offset": 9058,
                "proof": "Lemma rel_compose_id_right {A B} (R: rel A B): eqrel (rel_compose eq R) R.\nProof.\nunfold rel_compose.\nsplit; intros x y; firstorder; congruence.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma rel_compose_id_right {A B} (R: rel A B): eqrel (rel_compose eq R) R.\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_compose_id_right {A B} (R: rel A B): eqrel (rel_compose eq R) R.\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_compose_id_right {A B} (R: rel A B): eqrel (rel_compose eq R) R.\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_compose_id_right {A B} (R: rel A B): eqrel (rel_compose eq R) R.\nProof.\n  firstorder.\nQed.",
                    "Lemma rel_compose_id_right {A B} (R: rel A B): eqrel (rel_compose eq R) R.\nProof.\n  unfold rel_compose.\n  split; intros x y; firstorder.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/coqrel/RelOperators.v",
                "context": " fun x y => False.\n\nNotation \"\u22a5\" := rel_bot : rel_scope.\n\nLemma rel_bot_subrel {A B} (R: rel A B):\n  Related \u22a5%rel R subrel.\nProof.\n  firstorder.\nQed.\n\nHint Extern 0 (Related \u22a5%rel _ _) =>\n  eapply rel_bot_subrel : typeclass_instances.\n\nLemma rel_bot_relim {A B} (x: A) (y: B) P:\n  RElim \u22a5 x y True P.\nProof.\n  firstorder.\nQed.\n\nHint Extern 0 (RElim \u22a5 _ _ _ _) =>\n  eapply rel_bot_relim : typeclass_instances.\n\nDefinition rel_top {A B}: rel A B :=\n  fun x y => True.\n\nNotation \"\u22a4\" := rel_top : rel_scope.\n\nLemma rel_top_rintro {A B} (x: A) (y: B):\n  RIntro True \u22a4 x y.\nProof.\n  firstorder.\nQed.\n\nHint Extern 0 (RIntro _ \u22a4 _ _) =>\n  eapply rel_top_rintro : typeclass_instances.\n\nGlobal Instance rel_top_equiv {A}:\n  @Equivalence A \u22a4.\nProof.\n  repeat constructor.\nQed.\n\n(** ** Relation equivalence *)\n\nDefinition eqrel {A B}: rel (rel A B) (rel A B) :=\n  (subrel /\\ flip subrel)%rel.\n\nArguments eqrel {_ _} RA%rel RB%rel.\n\nGlobal Instance eqrel_equivalence A B:\n  Equivalence (@eqrel A B).\nProof.\n  unfold eqrel.\n  split; typeclasses eauto.\nQed.\n\nGlobal Instance eqrel_subrel A B:\n  Related (@eqrel A B) (@subrel A B) subrel.\nProof.\n  firstorder.\nQed.\n\n(** ** Relation composition *)\n\nDefinition rel_compose {A B C} (RAB: rel A B) (RBC: rel B C): rel A C :=\n  fun x z => exists y, RAB x y /\\ RBC y z.\n\nHint Unfold rel_compose.\n\nGlobal Instance rel_compose_subrel {A B C}:\n  Monotonic (@rel_compose A B C) (subrel ++> subrel ++> subrel).\nProof.\n  firstorder.\nQed.\n\nGlobal Instance rel_compose_eqrel {A B C}:\n  Monotonic (@rel_compose A B C) (eqrel ==> eqrel ==> eqrel).\nProof.\n  firstorder.\nQed.\n\nGlobal Instance rel_compose_params:\n  Params (@rel_compose) 4.\n\nLemma rel_compose_id_left {A B} (R: rel A B):\n  eqrel (rel_compose R eq) R.\nProof.\n  unfold rel_compose.\n  split; intros x y; firstorder; congruence.\nQed.\n\nLemma rel_compose_id_right {A B} (R: rel A B):\n  eqrel (rel_compose eq R) R.\nProof.\n  unfold rel_compose.\n  split; intros x y; firstorder; congruence.\nQed.\n\n",
                "context_tokens": 698,
                "proof_start_offset": 9060,
                "proof_end_offset": 9315,
                "proof": "Lemma rel_compose_assoc {A B C D} (RAB: rel A B) (RBC: rel B C) (RCD: rel C D): eqrel (rel_compose (rel_compose RAB RBC) RCD) (rel_compose RAB (rel_compose RBC RCD)).\nProof.\nunfold rel_compose.\nsplit; intros x y; firstorder; congruence.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma rel_compose_assoc {A B C D} (RAB: rel A B) (RBC: rel B C) (RCD: rel C D): eqrel (rel_compose (rel_compose RAB RBC) RCD) (rel_compose RAB (rel_compose RBC RCD)).\nProof.\n  unfold rel_compose.\n  split; intros x y; firstorder.\n  apply rel_refl_refl.\nQed.",
                    "Lemma rel_compose_assoc {A B C D} (RAB: rel A B) (RBC: rel B C) (RCD: rel C D): eqrel (rel_compose (rel_compose RAB RBC) RCD) (rel_compose RAB (rel_compose RBC RCD)).\nProof.\n  unfold rel_compose.\n  split; intros x y; firstorder; firstorder.\nQed.",
                    "Lemma rel_compose_assoc {A B C D} (RAB: rel A B) (RBC: rel B C) (RCD: rel C D): eqrel (rel_compose (rel_compose RAB RBC) RCD) (rel_compose RAB (rel_compose RBC RCD)).\nProof.\n  unfold rel_compose.\n  split; intros x y; firstorder.\nQed.",
                    "Lemma rel_compose_assoc {A B C D} (RAB: rel A B) (RBC: rel B C) (RCD: rel C D): eqrel (rel_compose (rel_compose RAB RBC) RCD) (rel_compose RAB (rel_compose RBC RCD)).\nProof.\n  unfold rel_compose.\n  split; intros x y; firstorder.\nQed.",
                    "Lemma rel_compose_assoc {A B C D} (RAB: rel A B) (RBC: rel B C) (RCD: rel C D): eqrel (rel_compose (rel_compose RAB RBC) RCD) (rel_compose RAB (rel_compose RBC RCD)).\nProof.\n  unfold rel_compose.\n  split; intros x y; firstorder.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/coqrel/LogicalRelationsTests.v",
                "context": " sum_rel R R (inl a) (inl b).\nProof.\n  intros.\n  rewrite H.\n  rewrite <- H.\n  reflexivity.\nQed.\n\n(** There is an issue with the following. *)\n\nGoal\n  forall A (a b: A) (R: rel A A) (f: A -> A) (p: A -> Prop),\n    Monotonic f (R ++> R) ->\n    Monotonic p (R --> impl) ->\n    R a b ->\n    p (f b) ->\n    p (f a).\nProof.\n  intros A a b R f p Hf Hp Hab H.\n  Fail rewrite <- Hab in H.\nAbort.\n\n(** ** Monotonicity tactics *)\n\n(** Basic sanity check. This has actually failed in the past due to\n  [context_candidate] being too liberal and selecting the [RB]\n  property instead of [RA], then going nowhere with that with no\n  backtracking implemented yet. *)\n\nGoal\n  forall A B (RA: rel A A) (x y: A) (RB: rel B B) (z t: B),\n    RA x y ->\n    RB z t ->\n    RA x y.\nProof.\n  intros.\n  rauto.\nQed.\n\nGoal\n  forall A (a b: A) (R: rel A A) (H: R a b),\n    let f (x y: A * A) := (@pair (A+A) (A+A) (inr (fst x)) (inl (snd y))) in\n    Monotonic f (R * \u22a4 ++> \u22a4 * R ++> (\u22a5 + R) * (R + \u22a5))%rel.\nProof.\n  intros; unfold f.\n  rauto.\nQed.\n\nGoal\n  forall {A1 A2 B1 B2} (R1 R1': rel A1 A2) (R2 R2': rel B1 B2),\n    subrel R1' R1 ->\n    subrel R2 R2' ->\n    subrel (R1 ++> R2) (R1' ++> R2').\nProof.\n  do 10 intro.\n  rauto.\nQed.\n\n(** Check that we can use relational hypotheses from the context as\n  well as [Monotonic]/[Related] instances. *)\n\nGoal\n  forall\n    {A B} (R: rel A A)\n    (op: A -> B) (Hop: (R ++> eq) op op)\n    (x y: A) (Hxy: R x y),\n    op x = op y.\nProof.\n  intros.\n  rauto.\nQed.\n\n(** Bug with relational parametricity: you can't [RElim] a relation\n  you don't know yet. *)\n\nGoal\n  forall {A B} (RA: rel A A) (RB: rel B B) (m n: (A -> B) * B) (x y: A),\n    ((- ==> RB) * RB)%rel m n ->\n    RB (fst m x) (fst n x).\nProof.\n  intros A B RA RB m n x y Hmn.\n  try monotonicity.\n  try rauto.\nAbort.\n\n(** Pattern matching *)\n\n",
                "context_tokens": 685,
                "proof_start_offset": 2211,
                "proof_end_offset": 2462,
                "proof": "Goal forall {A B} (RA: rel A A) (RB: rel B B) (x y: A) (f: A -> A + B), RA x y -> (RA ++> RA + RB) f f -> RA (match f x with inl a => a | inr b => x end) (match f y with inl a => a | inr b => y end).\nProof.\nintros.\nrauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Goal forall {A B} (RA: rel A A) (RB: rel B B) (x y: A) (f: A -> A + B), RA x y -> (RA ++> RA + RB) f f -> RA (match f x with inl a => a | inr b => x end) (match f y with inl a => a | inr b => y end).\nAbort.\n\n(** The [Equivalence] is the [Equivalence] is a [Equivalence] is a [Equivalence] and [Equivalence] is [Equivalence] is [Equivalence] *)\n\nGoal forall {A B} (RA: rel A B) (f: A -> B) (f: A -> B) (g: A -> B) (f: A -> B),\n    (forall x, f x) (g x) (g: A),\n    (forall x, f x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g x) (g (g x) (g x)Qed.",
                    "Goal forall {A B} (RA: rel A A) (RB: rel B B) (x y: A) (f: A -> A + B), RA x y -> (RA ++> RA + RB) f f -> RA (match f x with inl a => a | inr b => x end) (match f y with inl a => a | inr b => y end).\nAbort.\n\n(* Check that the following tactic is a tactic is a tactic. *)\nGoal forall {A B} (RA: rel A B) (f: A -> B) (x y: A),\n    forall x y: A, f x y -> (RA ==> RA x y) (RA ==> RA x y) ->\n    forall x y:A, f x y -> (RA ==> RA x y) ->\n    forall y:A, f x y -> (RA ==> RA x y) ->\n    forall x y:A, f y x y -> (RA ==> RA x y) ->\n    forall x y:A, f x y -> (RA ==> RA x y) ->\n    forall y:A, f x y -> (RA ==> RA x y) ->\n    forall y:A, f x y -> (RA ==> RA x y) ->\n    forall y:A, f y x y -> (RA ==> RA x y) ->\n    forall y:A, f x y -> (RA ==> RA x y) ->\n    forall y:A, f x y -> (RA ==> RA x y) ->\n    forall y:A, f y x y -> (RA ==> RA x yQed.",
                    "Goal forall {A B} (RA: rel A A) (RB: rel B B) (x y: A) (f: A -> A + B), RA x y -> (RA ++> RA + RB) f f -> RA (match f x with inl a => a | inr b => x end) (match f y with inl a => a | inr b => y end).\nAbort.\n\n(* Test a few examples of the form of a goal, it is a form\n  with the context [A] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B] tactic [B]Qed.",
                    "Goal forall {A B} (RA: rel A A) (RB: rel B B) (x y: A) (f: A -> A + B), RA x y -> (RA ++> RA + RB) f f -> RA (match f x with inl a => a | inr b => x end) (match f y with inl a => a | inr b => y end).\nAbort.\n\n(* Test that the type of the type of a type of type of type of type of type *)\n\nGoal forall {A B} (RA: rel A B) (x y: A) (f: A -> B),\n    RA x y ->\n    RA x y ->\n    RA x y ->\n    RA x y ->\n    RA y x y ->\n    RA y z ->\n    RA x y ->\n    RA y z ->\n    RA x y z ->\n    RA y z ->\n    RA x y z ->\n    RA y z ->\n    RA y z ->\n    RA y z ->\n    RA y z ->\n    RA y z ->\n    RA y z ->\n    RA y z ->\n    RA y z ->\n    RA y z ->\n    RA z ->\n    RA y z ->\n    RA y z ->\n    RA z ->\n    RA z ->\n    RA z ->\n    RA z ->\n    RA z ->\n    RA z ->\n    RA z ->\n    RA z ->\n    RA z ->\n    RA z ->\n    RA z ->\n    RA z ->\n    RA z ->\n    RA z ->\n    RA z ->\n    RA z ->\n    RA z ->\n    RA z ->\n    RA z ->\n    RA z ->\n    RA z ->\n    RAQed.",
                    "Goal forall {A B} (RA: rel A A) (RB: rel B B) (x y: A) (f: A -> A + B), RA x y -> (RA ++> RA + RB) f f -> RA (match f x with inl a => a | inr b => x end) (match f y with inl a => a | inr b => y end).\nProof.\n  intros.\n  apply (Hop (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a)) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a) (fun a => a)) (fun a => a) (Qed."
                ]
            },
            {
                "filepath": "./coq_projects/coqrel/LogicalRelationsTests.v",
                "context": " p (R --> impl) ->\n    R a b ->\n    p (f b) ->\n    p (f a).\nProof.\n  intros A a b R f p Hf Hp Hab H.\n  Fail rewrite <- Hab in H.\nAbort.\n\n(** ** Monotonicity tactics *)\n\n(** Basic sanity check. This has actually failed in the past due to\n  [context_candidate] being too liberal and selecting the [RB]\n  property instead of [RA], then going nowhere with that with no\n  backtracking implemented yet. *)\n\nGoal\n  forall A B (RA: rel A A) (x y: A) (RB: rel B B) (z t: B),\n    RA x y ->\n    RB z t ->\n    RA x y.\nProof.\n  intros.\n  rauto.\nQed.\n\nGoal\n  forall A (a b: A) (R: rel A A) (H: R a b),\n    let f (x y: A * A) := (@pair (A+A) (A+A) (inr (fst x)) (inl (snd y))) in\n    Monotonic f (R * \u22a4 ++> \u22a4 * R ++> (\u22a5 + R) * (R + \u22a5))%rel.\nProof.\n  intros; unfold f.\n  rauto.\nQed.\n\nGoal\n  forall {A1 A2 B1 B2} (R1 R1': rel A1 A2) (R2 R2': rel B1 B2),\n    subrel R1' R1 ->\n    subrel R2 R2' ->\n    subrel (R1 ++> R2) (R1' ++> R2').\nProof.\n  do 10 intro.\n  rauto.\nQed.\n\n(** Check that we can use relational hypotheses from the context as\n  well as [Monotonic]/[Related] instances. *)\n\nGoal\n  forall\n    {A B} (R: rel A A)\n    (op: A -> B) (Hop: (R ++> eq) op op)\n    (x y: A) (Hxy: R x y),\n    op x = op y.\nProof.\n  intros.\n  rauto.\nQed.\n\n(** Bug with relational parametricity: you can't [RElim] a relation\n  you don't know yet. *)\n\nGoal\n  forall {A B} (RA: rel A A) (RB: rel B B) (m n: (A -> B) * B) (x y: A),\n    ((- ==> RB) * RB)%rel m n ->\n    RB (fst m x) (fst n x).\nProof.\n  intros A B RA RB m n x y Hmn.\n  try monotonicity.\n  try rauto.\nAbort.\n\n(** Pattern matching *)\n\nGoal\n  forall {A B} (RA: rel A A) (RB: rel B B) (x y: A) (f: A -> A + B),\n    RA x y ->\n    (RA ++> RA + RB) f f ->\n    RA (match f x with inl a => a | inr b => x end)\n       (match f y with inl a => a | inr b => y end).\nProof.\n  intros.\n  rauto.\nQed.\n\n",
                "context_tokens": 697,
                "proof_start_offset": 2464,
                "proof_end_offset": 2664,
                "proof": "Goal forall {A B} (RA: rel A A) (RB: rel B B) (x y: A * B) (z: A), RA z z -> prod_rel RA RB x y -> RA (let (a, b) := x in z) (let (a, b) := y in z).\nProof.\nintros.\nrauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Goal forall {A B} (RA: rel A A) (RB: rel B B) (x y: A * B) (z: A), RA z z -> prod_rel RA RB x y -> RA (let (a, b) := x in z) (let (a, b) := y in z).\nProof.\n  intros.\n  destruct (H _ H0).\n  destruct H0.\n  exists (a, b); split; auto.\nQed.",
                    "Goal forall {A B} (RA: rel A A) (RB: rel B B) (x y: A * B) (z: A), RA z z -> prod_rel RA RB x y -> RA (let (a, b) := x in z) (let (a, b) := y in z).\nProof.\n  intros.\n  apply H.\nQed.",
                    "Goal forall {A B} (RA: rel A A) (RB: rel B B) (x y: A * B) (z: A), RA z z -> prod_rel RA RB x y -> RA (let (a, b) := x in z) (let (a, b) := y in z).\nProof.\n  intros.\n  assert (A:= fun a b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a) (fun b => a)) (fun b => aQed.",
                    "Goal forall {A B} (RA: rel A A) (RB: rel B B) (x y: A * B) (z: A), RA z z -> prod_rel RA RB x y -> RA (let (a, b) := x in z) (let (a, b) := y in z).\nProof.\n  intros.\n  destruct H as [A B].\n  destruct H as [A B].\n  destruct H as [B B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destruct H as [B].\n  destructQed.",
                    "Goal forall {A B} (RA: rel A A) (RB: rel B B) (x y: A * B) (z: A), RA z z -> prod_rel RA RB x y -> RA (let (a, b) := x in z) (let (a, b) := y in z).\nProof.\n  intros.\n  unfold f, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g,Qed."
                ]
            },
            {
                "filepath": "./coq_projects/coqrel/LogicalRelationsTests.v",
                "context": " *)\n\n(** Basic sanity check. This has actually failed in the past due to\n  [context_candidate] being too liberal and selecting the [RB]\n  property instead of [RA], then going nowhere with that with no\n  backtracking implemented yet. *)\n\nGoal\n  forall A B (RA: rel A A) (x y: A) (RB: rel B B) (z t: B),\n    RA x y ->\n    RB z t ->\n    RA x y.\nProof.\n  intros.\n  rauto.\nQed.\n\nGoal\n  forall A (a b: A) (R: rel A A) (H: R a b),\n    let f (x y: A * A) := (@pair (A+A) (A+A) (inr (fst x)) (inl (snd y))) in\n    Monotonic f (R * \u22a4 ++> \u22a4 * R ++> (\u22a5 + R) * (R + \u22a5))%rel.\nProof.\n  intros; unfold f.\n  rauto.\nQed.\n\nGoal\n  forall {A1 A2 B1 B2} (R1 R1': rel A1 A2) (R2 R2': rel B1 B2),\n    subrel R1' R1 ->\n    subrel R2 R2' ->\n    subrel (R1 ++> R2) (R1' ++> R2').\nProof.\n  do 10 intro.\n  rauto.\nQed.\n\n(** Check that we can use relational hypotheses from the context as\n  well as [Monotonic]/[Related] instances. *)\n\nGoal\n  forall\n    {A B} (R: rel A A)\n    (op: A -> B) (Hop: (R ++> eq) op op)\n    (x y: A) (Hxy: R x y),\n    op x = op y.\nProof.\n  intros.\n  rauto.\nQed.\n\n(** Bug with relational parametricity: you can't [RElim] a relation\n  you don't know yet. *)\n\nGoal\n  forall {A B} (RA: rel A A) (RB: rel B B) (m n: (A -> B) * B) (x y: A),\n    ((- ==> RB) * RB)%rel m n ->\n    RB (fst m x) (fst n x).\nProof.\n  intros A B RA RB m n x y Hmn.\n  try monotonicity.\n  try rauto.\nAbort.\n\n(** Pattern matching *)\n\nGoal\n  forall {A B} (RA: rel A A) (RB: rel B B) (x y: A) (f: A -> A + B),\n    RA x y ->\n    (RA ++> RA + RB) f f ->\n    RA (match f x with inl a => a | inr b => x end)\n       (match f y with inl a => a | inr b => y end).\nProof.\n  intros.\n  rauto.\nQed.\n\nGoal\n  forall {A B} (RA: rel A A) (RB: rel B B) (x y: A * B) (z: A),\n    RA z z ->\n    prod_rel RA RB x y ->\n    RA (let (a, b) := x in z)\n       (let (a, b) := y in z).\nProof.\n  intros.\n  rauto.\nQed.\n\n",
                "context_tokens": 729,
                "proof_start_offset": 2666,
                "proof_end_offset": 2819,
                "proof": "Goal forall {A} (R: rel A A), Monotonic (fun (b: bool) x y => if b then x else y) (- ==> R ++> R ++> R).\nProof.\nintros.\nrauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Goal forall {A} (R: rel A A), Monotonic (fun (b: bool) x y => if b then x else y) (- ==> R ++> R ++> R).\nProof.\n  intros.\n  apply R.\nQed.",
                    "Goal forall {A} (R: rel A A), Monotonic (fun (b: bool) x y => if b then x else y) (- ==> R ++> R ++> R).\nProof.\n  intros.\n  rewrite <- (R0 x y).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n  rewrite <- (R0 x).\n Qed.",
                    "Goal forall {A} (R: rel A A), Monotonic (fun (b: bool) x y => if b then x else y) (- ==> R ++> R ++> R).\nProof.\n  intros.\n  destruct R.\n  + simpl.\n    rewrite <- (fun b => if b then x else x)\n       else if b then x else x else x)\n       if b then x else x\n       else x\n       if b then x else x)\n       else\n       if b then x else x\n       else x\n       if b then x else x\n       else\n       if b then x else\n       else\n       if b then x else x\n       else\n       if b then x else\n       if b else\n       else\n       if b then x else\n       else\n       if b then\n       else\n       if b else\n       else\n       if b then\n       else\n       if b else\n       else\n       if b then\n       else\n       if b else\n       else\n       if b then\n       else\n       if b else\n       else\n       if b then\n       else\n       if b then\n       else\n       else\n       if b then\n       else\n       if b else\n       else\n       if b then\n       else\n       if b else\n       else\n       if b then\n       else\n       if b else\n       else\n       if b then\n       else\n       if b else\n       else\n       if b then\n       else\n       if b else\n       if b then\n       else\n       else\n       if b then\n       else\n       if b else\n       else\n      Qed.",
                    "Goal forall {A} (R: rel A A), Monotonic (fun (b: bool) x y => if b then x else y) (- ==> R ++> R ++> R).\nProof.\n  intros.\n  unfold Basics.compose.\n  intros.\n  rewrite <- (fun (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (a, b) (Qed.",
                    "Goal forall {A} (R: rel A A), Monotonic (fun (b: bool) x y => if b then x else y) (- ==> R ++> R ++> R).\nProof.\n  intros.\n  unfold respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful, respectful,Qed."
                ]
            },
            {
                "filepath": "./coq_projects/coqrel/LogicalRelationsTests.v",
                "context": " A) (x y: A) (RB: rel B B) (z t: B),\n    RA x y ->\n    RB z t ->\n    RA x y.\nProof.\n  intros.\n  rauto.\nQed.\n\nGoal\n  forall A (a b: A) (R: rel A A) (H: R a b),\n    let f (x y: A * A) := (@pair (A+A) (A+A) (inr (fst x)) (inl (snd y))) in\n    Monotonic f (R * \u22a4 ++> \u22a4 * R ++> (\u22a5 + R) * (R + \u22a5))%rel.\nProof.\n  intros; unfold f.\n  rauto.\nQed.\n\nGoal\n  forall {A1 A2 B1 B2} (R1 R1': rel A1 A2) (R2 R2': rel B1 B2),\n    subrel R1' R1 ->\n    subrel R2 R2' ->\n    subrel (R1 ++> R2) (R1' ++> R2').\nProof.\n  do 10 intro.\n  rauto.\nQed.\n\n(** Check that we can use relational hypotheses from the context as\n  well as [Monotonic]/[Related] instances. *)\n\nGoal\n  forall\n    {A B} (R: rel A A)\n    (op: A -> B) (Hop: (R ++> eq) op op)\n    (x y: A) (Hxy: R x y),\n    op x = op y.\nProof.\n  intros.\n  rauto.\nQed.\n\n(** Bug with relational parametricity: you can't [RElim] a relation\n  you don't know yet. *)\n\nGoal\n  forall {A B} (RA: rel A A) (RB: rel B B) (m n: (A -> B) * B) (x y: A),\n    ((- ==> RB) * RB)%rel m n ->\n    RB (fst m x) (fst n x).\nProof.\n  intros A B RA RB m n x y Hmn.\n  try monotonicity.\n  try rauto.\nAbort.\n\n(** Pattern matching *)\n\nGoal\n  forall {A B} (RA: rel A A) (RB: rel B B) (x y: A) (f: A -> A + B),\n    RA x y ->\n    (RA ++> RA + RB) f f ->\n    RA (match f x with inl a => a | inr b => x end)\n       (match f y with inl a => a | inr b => y end).\nProof.\n  intros.\n  rauto.\nQed.\n\nGoal\n  forall {A B} (RA: rel A A) (RB: rel B B) (x y: A * B) (z: A),\n    RA z z ->\n    prod_rel RA RB x y ->\n    RA (let (a, b) := x in z)\n       (let (a, b) := y in z).\nProof.\n  intros.\n  rauto.\nQed.\n\nGoal\n  forall {A} (R: rel A A),\n    Monotonic\n      (fun (b: bool) x y => if b then x else y)\n      (- ==> R ++> R ++> R).\nProof.\n  intros.\n  rauto.\nQed.\n\n",
                "context_tokens": 715,
                "proof_start_offset": 2821,
                "proof_end_offset": 2999,
                "proof": "Goal forall {A} (R : rel A A) (b : bool) (x y : A), b = b -> R x x -> R y y -> R (if b then x else y) (if b then x else y).\nProof.\nintros.\nrauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Goal forall {A} (R : rel A A) (b : bool) (x y : A), b = b -> R x x -> R y y -> R (if b then x else y) (if b then x else y).\nProof.\n  intros.\n  auto.\nQed.",
                    "Goal forall {A} (R : rel A A) (b : bool) (x y : A), b = b -> R x x -> R y y -> R (if b then x else y) (if b then x else y).\nProof.\n  intros.\n  rewrite <- (fun (a, b) (b, b)).\n  rewrite <- (fun (a, b)).\n  rewrite <- (fun (a, b)).\n  rewrite <- (fun (a, b)).\n  rewrite <- (fun (a, b)).\n  rewrite <- (fun (a, b)).\n  rewrite <- (fun (a, b)).\n  rewrite <- (fun (a, b)).\n  rewrite <- (fun (a, b)).\n  rewrite <- (fun (a, b)).\n  rewrite <- (fun (a, b)).\n  rewrite <- (fun (a, b)).\n  rewrite <- (fun (a, b)).\n  rewrite <- (fun (a, b)).\n  rewrite <- (fun (a, b)).\n  rewrite <- (fun (a, b)).\n  rewrite <- (fun (a, b)).\n  rewrite <- (fun (a, b)).\n  rewrite <- (fun (a, b)).\n  rewrite <- (fun (a, b)).\n  rewrite <- (fun (a, b)).\n  rewrite <- (fun (a, b)).\n  rewrite <- (fun (a, b)).\n  rewrite <- (fun (a, b)).\n  rewrite <- (funQed.",
                    "Goal forall {A} (R : rel A A) (b : bool) (x y : A), b = b -> R x x -> R y y -> R (if b then x else y) (if b then x else y).\nProof.\n  intros.\n  apply r.\n  auto.\nQed.",
                    "Goal forall {A} (R : rel A A) (b : bool) (x y : A), b = b -> R x x -> R y y -> R (if b then x else y) (if b then x else y).\nProof.\n  intros.\n  apply r.\n  auto.\nQed.",
                    "Goal forall {A} (R : rel A A) (b : bool) (x y : A), b = b -> R x x -> R y y -> R (if b then x else y) (if b then x else y).\nProof.\n  intros.\n  simpl.\n  auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/coqrel/LogicalRelationsTests.v",
                "context": "\n  forall\n    {A B} (R: rel A A)\n    (op: A -> B) (Hop: (R ++> eq) op op)\n    (x y: A) (Hxy: R x y),\n    op x = op y.\nProof.\n  intros.\n  rauto.\nQed.\n\n(** Bug with relational parametricity: you can't [RElim] a relation\n  you don't know yet. *)\n\nGoal\n  forall {A B} (RA: rel A A) (RB: rel B B) (m n: (A -> B) * B) (x y: A),\n    ((- ==> RB) * RB)%rel m n ->\n    RB (fst m x) (fst n x).\nProof.\n  intros A B RA RB m n x y Hmn.\n  try monotonicity.\n  try rauto.\nAbort.\n\n(** Pattern matching *)\n\nGoal\n  forall {A B} (RA: rel A A) (RB: rel B B) (x y: A) (f: A -> A + B),\n    RA x y ->\n    (RA ++> RA + RB) f f ->\n    RA (match f x with inl a => a | inr b => x end)\n       (match f y with inl a => a | inr b => y end).\nProof.\n  intros.\n  rauto.\nQed.\n\nGoal\n  forall {A B} (RA: rel A A) (RB: rel B B) (x y: A * B) (z: A),\n    RA z z ->\n    prod_rel RA RB x y ->\n    RA (let (a, b) := x in z)\n       (let (a, b) := y in z).\nProof.\n  intros.\n  rauto.\nQed.\n\nGoal\n  forall {A} (R: rel A A),\n    Monotonic\n      (fun (b: bool) x y => if b then x else y)\n      (- ==> R ++> R ++> R).\nProof.\n  intros.\n  rauto.\nQed.\n\nGoal\n  forall {A} (R : rel A A) (b : bool) (x y : A),\n    b = b ->\n    R x x ->\n    R y y ->\n    R (if b then x else y)\n      (if b then x else y).\nProof.\n  intros.\n  rauto.\nQed.\n\n(** [rel_curry] *)\n\nGoal\n  forall {A B C} R R' S (f: A -> B -> B -> C) (x1 y1: A) (x2 y2: B),\n    Monotonic f (rel_curry (R ++> R' ++> S)) ->\n    S (f x1 x2 x2) (f y1 y2 y2).\nProof.\n  intros A B C R R' S f x1 y1 x2 y2 Hf.\n  monotonicity.\nAbort.\n\n(** If we can deduce some terms are equal, we should be able to\n  rewrite them under any context. However right now this can only be\n  done by declaring the [f_equal_relim] hint.\n\n  Maybe a good solution for this might even go further: abstract the\n  common context and use [eq_rect] if it's possible to prove equality\n  between the variant parts. *)\n\n",
                "context_tokens": 715,
                "proof_start_offset": 3599,
                "proof_end_offset": 3825,
                "proof": "Goal forall {A} (R: rel A A) (f: A -> A) (C: A -> Prop) x y, Monotonic f (R ++> eq) -> R x y -> C (f x) -> C (f y).\nProof.\nintros A R f C x y Hf Hxy.\nFail rauto.\npose proof @f_equal_relim.\nrauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Goal forall {A} (R: rel A A) (f: A -> A) (C: A -> Prop) x y, Monotonic f (R ++> eq) -> R x y -> C (f x) -> C (f y).\nProof.\n  intros A R f x y f x y f y.\n  case (f y); auto.\n  apply (f y); auto.\n  apply (f y); auto.\n  apply (f y); auto.\n  apply (f y); auto.\nQed.",
                    "Goal forall {A} (R: rel A A) (f: A -> A) (C: A -> Prop) x y, Monotonic f (R ++> eq) -> R x y -> C (f x) -> C (f y).\nProof.\n  intros.\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  pose proof (H0 x).\n  poseQed.",
                    "Goal forall {A} (R: rel A A) (f: A -> A) (C: A -> Prop) x y, Monotonic f (R ++> eq) -> R x y -> C (f x) -> C (f y).\nProof.\n  intros.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.\n  pose proof I.Qed.",
                    "Goal forall {A} (R: rel A A) (f: A -> A) (C: A -> Prop) x y, Monotonic f (R ++> eq) -> R x y -> C (f x) -> C (f y).\nProof.\n  intros.\n  apply (fun (a, b) => x).\n  auto.\nQed.",
                    "Goal forall {A} (R: rel A A) (f: A -> A) (C: A -> Prop) x y, Monotonic f (R ++> eq) -> R x y -> C (f x) -> C (f y).\nProof.\n  intros.\n  apply (fun (a, b) => x) (fun (a, b) (a, b) (b, b)) (fun (a, b) (b, b)) (fun (a, b) (b, b)) (fun (a, b) (b, b)) (fun (a, b) (b, b)) (fun (a, b) (b, b)) (fun (a, b) (b, b)) (fun (a, b) (b, b)) (fun (b, b) (b, b)) (fun (a, b) (b, b)) (fun (b, b) (b, b))) (fun (a, b) (b, b)) (fun (b, b) (b, b)) (fun (b, b) (b, b)) (fun (b, b) (b, b)) (fun (b, b) (b, b)) (fun (b, b) (b, b)) (fun (b, b) (b, b)) (fun (b, b) (b, b)) (fun (b,Qed."
                ]
            },
            {
                "filepath": "./coq_projects/coqrel/LogicalRelationsTests.v",
                "context": ") (RB: rel B B) (m n: (A -> B) * B) (x y: A),\n    ((- ==> RB) * RB)%rel m n ->\n    RB (fst m x) (fst n x).\nProof.\n  intros A B RA RB m n x y Hmn.\n  try monotonicity.\n  try rauto.\nAbort.\n\n(** Pattern matching *)\n\nGoal\n  forall {A B} (RA: rel A A) (RB: rel B B) (x y: A) (f: A -> A + B),\n    RA x y ->\n    (RA ++> RA + RB) f f ->\n    RA (match f x with inl a => a | inr b => x end)\n       (match f y with inl a => a | inr b => y end).\nProof.\n  intros.\n  rauto.\nQed.\n\nGoal\n  forall {A B} (RA: rel A A) (RB: rel B B) (x y: A * B) (z: A),\n    RA z z ->\n    prod_rel RA RB x y ->\n    RA (let (a, b) := x in z)\n       (let (a, b) := y in z).\nProof.\n  intros.\n  rauto.\nQed.\n\nGoal\n  forall {A} (R: rel A A),\n    Monotonic\n      (fun (b: bool) x y => if b then x else y)\n      (- ==> R ++> R ++> R).\nProof.\n  intros.\n  rauto.\nQed.\n\nGoal\n  forall {A} (R : rel A A) (b : bool) (x y : A),\n    b = b ->\n    R x x ->\n    R y y ->\n    R (if b then x else y)\n      (if b then x else y).\nProof.\n  intros.\n  rauto.\nQed.\n\n(** [rel_curry] *)\n\nGoal\n  forall {A B C} R R' S (f: A -> B -> B -> C) (x1 y1: A) (x2 y2: B),\n    Monotonic f (rel_curry (R ++> R' ++> S)) ->\n    S (f x1 x2 x2) (f y1 y2 y2).\nProof.\n  intros A B C R R' S f x1 y1 x2 y2 Hf.\n  monotonicity.\nAbort.\n\n(** If we can deduce some terms are equal, we should be able to\n  rewrite them under any context. However right now this can only be\n  done by declaring the [f_equal_relim] hint.\n\n  Maybe a good solution for this might even go further: abstract the\n  common context and use [eq_rect] if it's possible to prove equality\n  between the variant parts. *)\n\nGoal\n  forall {A} (R: rel A A) (f: A -> A) (C: A -> Prop) x y,\n    Monotonic f (R ++> eq) ->\n    R x y ->\n    C (f x) ->\n    C (f y).\nProof.\n  intros A R f C x y Hf Hxy.\n  Fail rauto.\n  pose proof @f_equal_relim.\n  rauto.\nQed.\n\n(** *** Hypotheses from the context *)\n\n(* This used to fail because [Hyy] would\n  shadow [Hxy] (the hypothesis we want). *)\n\n",
                "context_tokens": 737,
                "proof_start_offset": 3953,
                "proof_end_offset": 4077,
                "proof": "Goal forall {A} (R: rel A A) (x y: A), R x y -> eq y y -> R x y.\nProof.\nintros A R x y Hxy Hyy.\nmonotonicity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Goal forall {A} (R: rel A A) (x y: A), R x y -> eq y y -> R x y.\nProof.\n  intros A R f x y Hx Hy.\n  apply R_eq_rect; auto.\nQed.",
                    "Goal forall {A} (R: rel A A) (x y: A), R x y -> eq y y -> R x y.\nProof.\n  intros A R f x y Hf.\n  apply (f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_equal_f_equal_equal_f_equal_equal_f_equal_equal_fQed.",
                    "Goal forall {A} (R: rel A A) (x y: A), R x y -> eq y y -> R x y.\nProof.\n  intros A R f x y Hf.\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (f x).\n  apply (fQed.",
                    "Goal forall {A} (R: rel A A) (x y: A), R x y -> eq y y -> R x y.\nProof.\n  intros A R f x y Hf.\n  apply (fun x => x) in Hf.\n  apply (fun x => x) in Hf.\n  apply (fun x => x) in Hf.\n  apply (fun x => x) in Hf.\n  apply (fun x => x) in Hf.\n  apply (fun x => x) in Hf.\n  apply (fun x => x) in Hf.\n  apply (fun x => x) in Hf.\n  apply (fun x => x) in Hf.\n  apply (fun x => x) in Hf.\n  apply (fun x => x) in Hf.\n  apply (fun x => x) in Hf.\n  apply (fun x => x) in Hf.\n  apply (fun x => x) in Hf.\n  apply (fun x => x) in Hf.\n  apply (fun x => x) in Hf.\n  apply (fun x => x) in Hf.\n  apply (fun x => x) in Hf.\n  apply (fun x => x) in Hf.\n  apply (fun x => x) in Hf.\n  apply (fun x => x) in Hf.\n  apply (fun x => x) in Hf.\n  applyQed.",
                    "Goal forall {A} (R: rel A A) (x y: A), R x y -> eq y y -> R x y.\nProof.\n  intros A R f x y H.\n  case (f x y) as [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [y' [yQed."
                ]
            },
            {
                "filepath": "./coq_projects/coqrel/LogicalRelationsTests.v",
                "context": " B} (RA: rel A A) (RB: rel B B) (x y: A * B) (z: A),\n    RA z z ->\n    prod_rel RA RB x y ->\n    RA (let (a, b) := x in z)\n       (let (a, b) := y in z).\nProof.\n  intros.\n  rauto.\nQed.\n\nGoal\n  forall {A} (R: rel A A),\n    Monotonic\n      (fun (b: bool) x y => if b then x else y)\n      (- ==> R ++> R ++> R).\nProof.\n  intros.\n  rauto.\nQed.\n\nGoal\n  forall {A} (R : rel A A) (b : bool) (x y : A),\n    b = b ->\n    R x x ->\n    R y y ->\n    R (if b then x else y)\n      (if b then x else y).\nProof.\n  intros.\n  rauto.\nQed.\n\n(** [rel_curry] *)\n\nGoal\n  forall {A B C} R R' S (f: A -> B -> B -> C) (x1 y1: A) (x2 y2: B),\n    Monotonic f (rel_curry (R ++> R' ++> S)) ->\n    S (f x1 x2 x2) (f y1 y2 y2).\nProof.\n  intros A B C R R' S f x1 y1 x2 y2 Hf.\n  monotonicity.\nAbort.\n\n(** If we can deduce some terms are equal, we should be able to\n  rewrite them under any context. However right now this can only be\n  done by declaring the [f_equal_relim] hint.\n\n  Maybe a good solution for this might even go further: abstract the\n  common context and use [eq_rect] if it's possible to prove equality\n  between the variant parts. *)\n\nGoal\n  forall {A} (R: rel A A) (f: A -> A) (C: A -> Prop) x y,\n    Monotonic f (R ++> eq) ->\n    R x y ->\n    C (f x) ->\n    C (f y).\nProof.\n  intros A R f C x y Hf Hxy.\n  Fail rauto.\n  pose proof @f_equal_relim.\n  rauto.\nQed.\n\n(** *** Hypotheses from the context *)\n\n(* This used to fail because [Hyy] would\n  shadow [Hxy] (the hypothesis we want). *)\n\nGoal\n  forall {A} (R: rel A A) (x y: A),\n    R x y -> eq y y -> R x y.\nProof.\n  intros A R x y Hxy Hyy.\n  monotonicity.\nQed.\n\n(* This still fail with Coq 8.5, but Coq 8.6 is able to backtrack and\n  try hypothesis from the context beyond the first one it finds. *)\n\nGoal\n  forall {A} (R: rel A A) (x y: A),\n    R x y -> eq x y -> R x y.\nProof.\n  intros A R x y Hxy Hyy.\n  try monotonicity.\nAbort.\n\n(** This used to fail because the flipped hypothesis would not be\n  identified as a candidate. This is important because the constraints\n  generated by the setoid rewriting system often have this form. *)\n\n",
                "context_tokens": 730,
                "proof_start_offset": 4556,
                "proof_end_offset": 4698,
                "proof": "Goal forall {A} (R: rel A A) (f : A -> A), Monotonic f (R ++> R) -> (flip R ++> flip R) f f.\nProof.\nintros A R f Hf.\nrauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Goal forall {A} (R: rel A A) (f : A -> A), Monotonic f (R ++> R) -> (flip R ++> flip R) f f.\nProof.\n  intros A R x y Hxy.\n  assert (H := @f_equal_duplicable A R x y Hxy).\n  assert (H := @f_equal_duplicable A R x y Hxy).\n  assert (H := @f_equal_duplicable A R x y Hxy).\n  assert (H := @f_equal_duplicable A R x y Hxy).\n  assert (H := @f_equal_duplicable A R x y Hxy).\n  assert (H := @f_equal_duplicable A R x y Hxy).\n  assert (H := @f_equal_duplicable A R x y Hxy).\n  assert (H := @f_equal_duplicable A R x y Hxy).\n  assert (H := @f_equal_duplicable A R x y Hxy).\n  assert (H := @f_equal_duplicable A R x y Hxy).\n  assert (H := @f_equal_duplicable A R x y Hxy).\n  assert (H := @f_equal_duplicable A R x y Hxy).\n  assert (H := @f_equal_duplicable A R x y Hxy).\n  assert (H := @f_equal_duplicable A R x y Hxy).\n  assert (H := @fQed.",
                    "Goal forall {A} (R: rel A A) (f : A -> A), Monotonic f (R ++> R) -> (flip R ++> flip R) f f.\nProof.\n  intros A R f x y Hxy.\n  rewrite <- (f x y) in Hxy.\n  rewrite <- (f x y) in Hxy.\n  rewrite <- (f x y) in Hxy.\n  rewrite <- (f x y) in Hxy.\n  rewrite <- (f x y) in Hxy.\n  rewrite <- (f x y) in Hxy.\n  rewrite (f x y) in Hxy.\n  rewrite <- (f x y) in Hxy.\n  rewrite <- (f x y) in Hxy.\n  rewrite <- (f x y) in Hxy.\n  rewrite <- (f x y) in Hxy.\n  rewrite (f x y) in Hxy.\n  rewrite (f x y) in Hxy.\n  rewrite <- (f x y) in Hxy.\n  rewrite <- (f x y) in Hxy.\n  rewrite (f x y) in Hxy.\n  rewrite <- (f x) in Hxy.\n  rewrite <- (f x) in Hxy.\n  rewrite <- (f x) in Hxy.\n  rewrite <- (f x) in Hxy.\n  rewrite <- (f x) in Hxy.\n  rewrite (f x) in Hxy.\n  rewrite <- (f x) in Hxy.\n  rewrite <-Qed.",
                    "Goal forall {A} (R: rel A A) (f : A -> A), Monotonic f (R ++> R) -> (flip R ++> flip R) f f.\nProof.\n  intros A R f x y Hx Hy Hxy.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  applyQed.",
                    "Goal forall {A} (R: rel A A) (f : A -> A), Monotonic f (R ++> R) -> (flip R ++> flip R) f f.\nProof.\n  intros A R R x y Hxy.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.\n  apply R.Qed.",
                    "Goal forall {A} (R: rel A A) (f : A -> A), Monotonic f (R ++> R) -> (flip R ++> flip R) f f.\nProof.\n  intros A R x y Hxy.\n  apply R.\n  intros A R x y Hxy.\n  apply R.\n  intros A R y Hxy.\n  apply R.\n  intros A R x y Hxy.\n  apply R.\n  intros A R x y Hxy.\n  apply R.\n  intros A R y Hxy.\n  apply R.\n  intros A R x y Hxy.\n  apply R.\n  intros A R x y Hxy.\n  apply R.\n  intros A R y Hxy.\n  apply R.\n  intros A R x y Hxy.\n  apply R.\n  intros A R x y Hxy.\n  apply R.\n  intros A R x y Hxy.\n  apply R.\n  intros A R x y Hxy.\n  apply R.\n  intros A R y Hxy.\n  apply R.\n  intros A R x y Hxy.\n  apply R.\n  intros A R y Hxy.\n  apply R.\n  intros A R y Hxy.\n  apply R.\n  intros A R y Hxy.\n  apply R.\n  intros A R x y Hxy.\n  apply R.\n  intros A R y Hxy.\n  apply R.\n  intros A R y Hxy.\n  apply R.\n  intros A R y Hxy.\n  apply RQed."
                ]
            },
            {
                "filepath": "./coq_projects/coqrel/LogicalRelationsTests.v",
                "context": " forall {A} (R : rel A A) (b : bool) (x y : A),\n    b = b ->\n    R x x ->\n    R y y ->\n    R (if b then x else y)\n      (if b then x else y).\nProof.\n  intros.\n  rauto.\nQed.\n\n(** [rel_curry] *)\n\nGoal\n  forall {A B C} R R' S (f: A -> B -> B -> C) (x1 y1: A) (x2 y2: B),\n    Monotonic f (rel_curry (R ++> R' ++> S)) ->\n    S (f x1 x2 x2) (f y1 y2 y2).\nProof.\n  intros A B C R R' S f x1 y1 x2 y2 Hf.\n  monotonicity.\nAbort.\n\n(** If we can deduce some terms are equal, we should be able to\n  rewrite them under any context. However right now this can only be\n  done by declaring the [f_equal_relim] hint.\n\n  Maybe a good solution for this might even go further: abstract the\n  common context and use [eq_rect] if it's possible to prove equality\n  between the variant parts. *)\n\nGoal\n  forall {A} (R: rel A A) (f: A -> A) (C: A -> Prop) x y,\n    Monotonic f (R ++> eq) ->\n    R x y ->\n    C (f x) ->\n    C (f y).\nProof.\n  intros A R f C x y Hf Hxy.\n  Fail rauto.\n  pose proof @f_equal_relim.\n  rauto.\nQed.\n\n(** *** Hypotheses from the context *)\n\n(* This used to fail because [Hyy] would\n  shadow [Hxy] (the hypothesis we want). *)\n\nGoal\n  forall {A} (R: rel A A) (x y: A),\n    R x y -> eq y y -> R x y.\nProof.\n  intros A R x y Hxy Hyy.\n  monotonicity.\nQed.\n\n(* This still fail with Coq 8.5, but Coq 8.6 is able to backtrack and\n  try hypothesis from the context beyond the first one it finds. *)\n\nGoal\n  forall {A} (R: rel A A) (x y: A),\n    R x y -> eq x y -> R x y.\nProof.\n  intros A R x y Hxy Hyy.\n  try monotonicity.\nAbort.\n\n(** This used to fail because the flipped hypothesis would not be\n  identified as a candidate. This is important because the constraints\n  generated by the setoid rewriting system often have this form. *)\n\nGoal\n  forall {A} (R: rel A A) (f : A -> A),\n    Monotonic f (R ++> R) ->\n    (flip R ++> flip R) f f.\nProof.\n  intros A R f Hf.\n  rauto.\nQed.\n\n(** Then *this* used to fail because the [flip] was hidden until after\n  we exploit the [subrel] property. This is important in particular\n  when using the equivalences for a given partial order, as in [eqrel]\n  vs. [subrel], where we want to be able to use equivalences in both\n  directions. *)\n\n",
                "context_tokens": 719,
                "proof_start_offset": 4997,
                "proof_end_offset": 5177,
                "proof": "Goal forall {A} (R R': rel A A) (f: A -> A), Monotonic f (R ++> R) -> Related R' (flip R) subrel -> (R' ++> flip R) f f.\nProof.\nintros A R R' f Hf HR.\nrauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Goal forall {A} (R R': rel A A) (f: A -> A), Monotonic f (R ++> R) -> Related R' (flip R) subrel -> (R' ++> flip R) f f.\nProof.\n  intros A R f Hf.\n  destruct (f x) as (g,g,g),g).\n  destruct (f x) as (g,g,g).\n  destruct (g x) as (g,g,g).\n  destruct (g x) as (g,g,g).\n  destruct (g x) as (g,g,g).\n  destruct (g x) as (g,g).\n  destruct (g x) as (g,g,g).\n  destruct (g x) as (g,g,g).\n  destruct (g x) as (g,g,g).\n  destruct (g x) as (g,g).\n  destruct (g x) as (g,g).\n  destruct (g x) as (g,g,g).\n  destruct (g x) as (g,g,g).\n  destruct (g x) as (g,g).\n  destruct (g x) as (g,g).\n  destruct (g x) as (g,g).\n  destruct (g x) as (g,g,g).\n  destruct (g x) as (g,g,g).\n  destruct (gQed.",
                    "Goal forall {A} (R R': rel A A) (f: A -> A), Monotonic f (R ++> R) -> Related R' (flip R) subrel -> (R' ++> flip R) f f.\nProof.\n  intros A R f Hf.\n  destruct f as [f [f [f [f [f [f [f [f [f [f [f [f [f [f [f [f [f [f [f [f [f [f [f [f [f [f [f [f [ff [f [f [f [f [f [f [f [ff [f [ff [f [ff [ff [ff [f [f [ff [f [fff [ff [f [ff [f [fff [fff [f [ff [fff [ff [ff [f [ff [ffff [f [fff [f [fff [f [ff [ffff [fff [ff [f [ff [ffff [fff [fff [ff [ffff [ffff [ffff [ff [ffffff [fffffffff [fff [fff [Qed.",
                    "Goal forall {A} (R R': rel A A) (f: A -> A), Monotonic f (R ++> R) -> Related R' (flip R) subrel -> (R' ++> flip R) f f.\nProof.\n  intros A R f g x y Hf.\n  induction f; intros; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n  destruct f; auto.\n Qed.",
                    "Goal forall {A} (R R': rel A A) (f: A -> A), Monotonic f (R ++> R) -> Related R' (flip R) subrel -> (R' ++> flip R) f f.\nProof.\n  intros A R f Hf.\n  split; auto.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n  apply R'0.\n Qed.",
                    "Goal forall {A} (R R': rel A A) (f: A -> A), Monotonic f (R ++> R) -> Related R' (flip R) subrel -> (R' ++> flip R) f f.\nProof.\n  intros A R f Hf.\n  apply (R --> R') in Hf.\n  apply (R --> R') in Hf.\n  apply (R --> R') in Hf.\n  apply (R --> R') in Hf.\n  apply (R --> R') in Hf.\n  apply (R --> R') in Hf.\n  apply (R --> R') in Hf.\n  apply (R --> R') in Hf.\n  apply (R --> R') in Hf.\n  apply (R --> R') in Hf.\n  apply (R --> R') in Hf.\n  apply (R --> R') in Hf.\n  apply (R --> R') in Hf.\n  apply (R --> R') in Hf.\n  apply (R --> R') in Hf.\n  apply (R --> R') in Hf.\n  apply (R --> R') in Hf.\n  apply (R --> R') in Hf.\n  apply (R --> R') in Hf.\n  apply (R --> R') in Hf.\n  apply (R --> R') in Hf.\n  apply (R --> R') in Hf.\n  apply (R --> R') in Hf.\n  apply (R --> R') in Hf.\n  apply (R --> RQed."
                ]
            },
            {
                "filepath": "./coq_projects/coqrel/LogicalRelationsTests.v",
                "context": " R x y ->\n    C (f x) ->\n    C (f y).\nProof.\n  intros A R f C x y Hf Hxy.\n  Fail rauto.\n  pose proof @f_equal_relim.\n  rauto.\nQed.\n\n(** *** Hypotheses from the context *)\n\n(* This used to fail because [Hyy] would\n  shadow [Hxy] (the hypothesis we want). *)\n\nGoal\n  forall {A} (R: rel A A) (x y: A),\n    R x y -> eq y y -> R x y.\nProof.\n  intros A R x y Hxy Hyy.\n  monotonicity.\nQed.\n\n(* This still fail with Coq 8.5, but Coq 8.6 is able to backtrack and\n  try hypothesis from the context beyond the first one it finds. *)\n\nGoal\n  forall {A} (R: rel A A) (x y: A),\n    R x y -> eq x y -> R x y.\nProof.\n  intros A R x y Hxy Hyy.\n  try monotonicity.\nAbort.\n\n(** This used to fail because the flipped hypothesis would not be\n  identified as a candidate. This is important because the constraints\n  generated by the setoid rewriting system often have this form. *)\n\nGoal\n  forall {A} (R: rel A A) (f : A -> A),\n    Monotonic f (R ++> R) ->\n    (flip R ++> flip R) f f.\nProof.\n  intros A R f Hf.\n  rauto.\nQed.\n\n(** Then *this* used to fail because the [flip] was hidden until after\n  we exploit the [subrel] property. This is important in particular\n  when using the equivalences for a given partial order, as in [eqrel]\n  vs. [subrel], where we want to be able to use equivalences in both\n  directions. *)\n\nGoal\n  forall {A} (R R': rel A A) (f: A -> A),\n    Monotonic f (R ++> R) ->\n    Related R' (flip R) subrel ->\n    (R' ++> flip R) f f.\nProof.\n  intros A R R' f Hf HR.\n  rauto.\nQed.\n\n(** As an example where proper handling of [flip] is important,\n  this is a goal generated by [setoid_rewrite] when we try to rewrite\n  using [eqrel] under [option_le]. Here, both [R1] and [R2] have to be\n  instantiated as [flip eq] (so that the associated hypotheses can be\n  used to solve goals of the form [yi = xi]), and similarly we need to\n  use the super-relation [flip subrel] of [eqrel]. *)\n\nGoal\n  forall A, exists R1 R2: relation (option A),\n    (eqrel ==> R1 ==> R2 ==> flip impl)%signature option_le option_le.\nProof.\n  intros A. eexists. eexists.\n  rauto.\nQed.\n\n(** *** [impl] vs. [subrel] *)\n\n(** This checks that a relational property written in terms of\n  [subrel] can be used to solve a goal stated in terms of [impl].\n  This is made possible by [subrel_impl_relim]. *)\n\n",
                "context_tokens": 710,
                "proof_start_offset": 5968,
                "proof_end_offset": 6181,
                "proof": "Goal forall A B C (R: rel A A) (f: A -> rel B C) a1 a2 b c, Monotonic f (R ++> subrel) -> R a1 a2 -> impl (f a1 b c) (f a2 b c).\nProof.\nintros A B C R f a1 a2 b c Hf Ha.\nmonotonicity; rauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Goal forall A B C (R: rel A A) (f: A -> rel B C) a1 a2 b c, Monotonic f (R ++> subrel) -> R a1 a2 -> impl (f a1 b c) (f a2 b c).\nProof.\n  intros A B C D H.\n  destruct (eq_dec A B C D) as (f & f & f & f & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g & g g & g & g & g & g & g g & g & g & g & g & g & g & g & g & g g & g g & g & g g & g & g g & g & g g & g & g & g g & g & g & g & g g & g g & g & g g & g & g & g & g g g & g & g & g & g & g g & g & g & g g & g g g & g g & g & g g g & g & g g & g & g g & g g & g & g & gQed.",
                    "Goal forall A B C (R: rel A A) (f: A -> rel B C) a1 a2 b c, Monotonic f (R ++> subrel) -> R a1 a2 -> impl (f a1 b c) (f a2 b c).\nProof.\n  intros A B C D f Hf.\n  apply (f a1); auto.\nQed.",
                    "Goal forall A B C (R: rel A A) (f: A -> rel B C) a1 a2 b c, Monotonic f (R ++> subrel) -> R a1 a2 -> impl (f a1 b c) (f a2 b c).\nProof.\n  intros A B C D f Hf Hf.\n  apply (f a1); auto.\nQed.",
                    "Goal forall A B C (R: rel A A) (f: A -> rel B C) a1 a2 b c, Monotonic f (R ++> subrel) -> R a1 a2 -> impl (f a1 b c) (f a2 b c).\nProof.\n  intros A B C D f Hf.\n  assert (R' := flip_inv A B C D f Hf).\n  assert (R' := flip_inv A B C D f Hf).\n  assert (R' := flip_inv A B C f Hf).\n  assert (R' := flip_inv A B C f Hf).\n  assert (R' := flip_inv A B C f Hf).\n  assert (R' := flip_inv A B C f Hf).\n  assert (R' := flip_inv A B C f Hf).\n  assert (R' := flip_inv A B C f Hf).\n  assert (R' := flip_inv A B C f Hf).\n  assert (R' := flip_inv A B C f Hf Hf).\n  assert (R' := flip_inv A B C f Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf Hf HfQed.",
                    "Goal forall A B C (R: rel A A) (f: A -> rel B C) a1 a2 b c, Monotonic f (R ++> subrel) -> R a1 a2 -> impl (f a1 b c) (f a2 b c).\nProof.\n  intros A B C D f Hf.\n  destruct (f a1 a2 a2 a3) as [b1b2b3b4b5b5b5b5b6b6b7b7b6b7b7b7b7b7b7b7b7b7b7b7b7b9b8b8b8b8b8b8b9b9b8b7b9b8b7b8b9b9b9b9b8b8b9b8b9b9b9b9b8b9b9b9b9b9b8b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b8c9b9b9b9b9b9b9b9b9b9b8d9b9b9b8d9b9b8d9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b8b9bQed."
                ]
            },
            {
                "filepath": "./coq_projects/coqrel/LogicalRelationsTests.v",
                "context": " forall {A} (R: rel A A) (x y: A),\n    R x y -> eq y y -> R x y.\nProof.\n  intros A R x y Hxy Hyy.\n  monotonicity.\nQed.\n\n(* This still fail with Coq 8.5, but Coq 8.6 is able to backtrack and\n  try hypothesis from the context beyond the first one it finds. *)\n\nGoal\n  forall {A} (R: rel A A) (x y: A),\n    R x y -> eq x y -> R x y.\nProof.\n  intros A R x y Hxy Hyy.\n  try monotonicity.\nAbort.\n\n(** This used to fail because the flipped hypothesis would not be\n  identified as a candidate. This is important because the constraints\n  generated by the setoid rewriting system often have this form. *)\n\nGoal\n  forall {A} (R: rel A A) (f : A -> A),\n    Monotonic f (R ++> R) ->\n    (flip R ++> flip R) f f.\nProof.\n  intros A R f Hf.\n  rauto.\nQed.\n\n(** Then *this* used to fail because the [flip] was hidden until after\n  we exploit the [subrel] property. This is important in particular\n  when using the equivalences for a given partial order, as in [eqrel]\n  vs. [subrel], where we want to be able to use equivalences in both\n  directions. *)\n\nGoal\n  forall {A} (R R': rel A A) (f: A -> A),\n    Monotonic f (R ++> R) ->\n    Related R' (flip R) subrel ->\n    (R' ++> flip R) f f.\nProof.\n  intros A R R' f Hf HR.\n  rauto.\nQed.\n\n(** As an example where proper handling of [flip] is important,\n  this is a goal generated by [setoid_rewrite] when we try to rewrite\n  using [eqrel] under [option_le]. Here, both [R1] and [R2] have to be\n  instantiated as [flip eq] (so that the associated hypotheses can be\n  used to solve goals of the form [yi = xi]), and similarly we need to\n  use the super-relation [flip subrel] of [eqrel]. *)\n\nGoal\n  forall A, exists R1 R2: relation (option A),\n    (eqrel ==> R1 ==> R2 ==> flip impl)%signature option_le option_le.\nProof.\n  intros A. eexists. eexists.\n  rauto.\nQed.\n\n(** *** [impl] vs. [subrel] *)\n\n(** This checks that a relational property written in terms of\n  [subrel] can be used to solve a goal stated in terms of [impl].\n  This is made possible by [subrel_impl_relim]. *)\n\nGoal\n  forall A B C (R: rel A A) (f: A -> rel B C) a1 a2 b c,\n    Monotonic f (R ++> subrel) ->\n    R a1 a2 ->\n    impl (f a1 b c) (f a2 b c).\nProof.\n  intros A B C R f a1 a2 b c Hf Ha.\n  monotonicity; rauto.\nQed.\n\n",
                "context_tokens": 708,
                "proof_start_offset": 6183,
                "proof_end_offset": 6385,
                "proof": "Goal forall A1 A2 B1 B2 (R1 R2: rel A1 A2) (R: rel B1 B2), subrel R1 R2 -> forall x y, (R2 ++> R) x y -> (R1 ++> R) x y.\nProof.\nintros A1 A2 B1 B2 R1 R2 R HR12 x y.\nrauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Goal forall A1 A2 B1 B2 (R1 R2: rel A1 A2) (R: rel B1 B2), subrel R1 R2 -> forall x y, (R2 ++> R) x y -> (R1 ++> R) x y.\nProof.\n  intros A1 B1 R2 R2 R2 R1 R2 R2 R2 R3 R3 R3 R3 R4 R4 R4 R4 R4 R5 R5 R5 R6 R6 R6 R5 R5 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 RQed.",
                    "Goal forall A1 A2 B1 B2 (R1 R2: rel A1 A2) (R: rel B1 B2), subrel R1 R2 -> forall x y, (R2 ++> R) x y -> (R1 ++> R) x y.\nProof.\n  intros A1 A2 B1 B2 R1 R2 R2 R3 R3 R3 R4 R4 R4 R5 R5 R5 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R7 R6 R6 R6 R6 R6 R6 R6 R7 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 RQed.",
                    "Goal forall A1 A2 B1 B2 (R1 R2: rel A1 A2) (R: rel B1 B2), subrel R1 R2 -> forall x y, (R2 ++> R) x y -> (R1 ++> R) x y.\nProof.\n  intros A B C1 B2 R1 R2 R2 R2 R2 R3 R3 R3 R4 R4 R4 R5 R4 R5 R5 R5 R5 R5 R5 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 RQed.",
                    "Goal forall A1 A2 B1 B2 (R1 R2: rel A1 A2) (R: rel B1 B2), subrel R1 R2 -> forall x y, (R2 ++> R) x y -> (R1 ++> R) x y.\nProof.\n  intros A B C D R1 R2 R2 R1 R2 R2 R2 R2 R3 R3 R3 R3 R4 R4 R4 R4 R5 R4 R4 R5 R5 R5 R6 R5 R6 R5 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 RQed.",
                    "Goal forall A1 A2 B1 B2 (R1 R2: rel A1 A2) (R: rel B1 B2), subrel R1 R2 -> forall x y, (R2 ++> R) x y -> (R1 ++> R) x y.\nProof.\n  intros A B C R1 R2 R2 R2 R1 R2 R3 R3 R3 R3 R4 R4 R4 R4 R5 R5 R5 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R7 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6Qed."
                ]
            },
            {
                "filepath": "./coq_projects/coqrel/LogicalRelationsTests.v",
                "context": " candidate. This is important because the constraints\n  generated by the setoid rewriting system often have this form. *)\n\nGoal\n  forall {A} (R: rel A A) (f : A -> A),\n    Monotonic f (R ++> R) ->\n    (flip R ++> flip R) f f.\nProof.\n  intros A R f Hf.\n  rauto.\nQed.\n\n(** Then *this* used to fail because the [flip] was hidden until after\n  we exploit the [subrel] property. This is important in particular\n  when using the equivalences for a given partial order, as in [eqrel]\n  vs. [subrel], where we want to be able to use equivalences in both\n  directions. *)\n\nGoal\n  forall {A} (R R': rel A A) (f: A -> A),\n    Monotonic f (R ++> R) ->\n    Related R' (flip R) subrel ->\n    (R' ++> flip R) f f.\nProof.\n  intros A R R' f Hf HR.\n  rauto.\nQed.\n\n(** As an example where proper handling of [flip] is important,\n  this is a goal generated by [setoid_rewrite] when we try to rewrite\n  using [eqrel] under [option_le]. Here, both [R1] and [R2] have to be\n  instantiated as [flip eq] (so that the associated hypotheses can be\n  used to solve goals of the form [yi = xi]), and similarly we need to\n  use the super-relation [flip subrel] of [eqrel]. *)\n\nGoal\n  forall A, exists R1 R2: relation (option A),\n    (eqrel ==> R1 ==> R2 ==> flip impl)%signature option_le option_le.\nProof.\n  intros A. eexists. eexists.\n  rauto.\nQed.\n\n(** *** [impl] vs. [subrel] *)\n\n(** This checks that a relational property written in terms of\n  [subrel] can be used to solve a goal stated in terms of [impl].\n  This is made possible by [subrel_impl_relim]. *)\n\nGoal\n  forall A B C (R: rel A A) (f: A -> rel B C) a1 a2 b c,\n    Monotonic f (R ++> subrel) ->\n    R a1 a2 ->\n    impl (f a1 b c) (f a2 b c).\nProof.\n  intros A B C R f a1 a2 b c Hf Ha.\n  monotonicity; rauto.\nQed.\n\nGoal\n  forall A1 A2 B1 B2 (R1 R2: rel A1 A2) (R: rel B1 B2),\n    subrel R1 R2 ->\n    forall x y,\n      (R2 ++> R) x y ->\n      (R1 ++> R) x y.\nProof.\n  intros A1 A2 B1 B2 R1 R2 R HR12 x y.\n  rauto.\nQed.\n\n(** *** Generic rules *)\n\n(** The [coreflexivity] of [rel_prod] and [eq] makes it possible for\n  [pair_rel] to behave in the same way as [f_equal] below, since they\n  allow us to deduce that [eq * eq] is a [subrel] of [eq]. *)\n\n",
                "context_tokens": 720,
                "proof_start_offset": 6615,
                "proof_end_offset": 6735,
                "proof": "Goal forall A B (x1 x2 : A) (y1 y2 : B), x1 = x2 -> y1 = y2 -> (x1, y1) = (x2, y2).\nProof.\nintros.\nrauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Goal forall A B (x1 x2 : A) (y1 y2 : B), x1 = x2 -> y1 = y2 -> (x1, y1) = (x2, y2).\nProof.\n  intros A B C x1 R1 R2 R2 R1 R2 R2 R3 R3 R3 R3 R4 R4 R4 R4 R4 R5 R6 R5 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6Qed.",
                    "Goal forall A B (x1 x2 : A) (y1 y2 : B), x1 = x2 -> y1 = y2 -> (x1, y1) = (x2, y2).\nProof.\n  intros A B x1 y2 R1 R2 R2 R2 R2 R3 R3 R3 R3 R4 R4 R4 R5 R5 R6 R6 R6 R6 R6 R6 R6 R7 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 RQed.",
                    "Goal forall A B (x1 x2 : A) (y1 y2 : B), x1 = x2 -> y1 = y2 -> (x1, y1) = (x2, y2).\nProof.\n  intros A B x1 y1 y2 y2.\n  rewrite <- (R1), (R2, (R2, (R2, (R2, R2, R2)) (R2, R2, R2, R2R, R3)).\n  rewrite <- (R2, R2, R3).\n  rewrite <- (R2, R2, R3).\n  rewrite <- (R2, R3).\n  rewrite <- (R2, R3, R3).\n  rewrite <- (R2, R3).\n  rewrite <- (R2, R4, R4).\n  rewrite <- (R2, R4).\n  rewrite <- (R2, R4, R4).\n  rewrite <- (R2, R4, R4).\n  rewrite <- (R2, R4, R4).\n  rewrite <- (R2, R4).\n  rewrite <- (R2, R4, R4).\n  rewrite <- (R2, R4, R4).\n  rewrite <- (R2, R4, R4).\n  rewrite <- (R2, R4, R4).\n  rewrite <- (R2, R4, RQed.",
                    "Goal forall A B (x1 x2 : A) (y1 y2 : B), x1 = x2 -> y1 = y2 -> (x1, y1) = (x2, y2).\nProof.\n  intros A B x1 x2 y2 y2 H3.\n  assert (x1 = y2) by (apply (eq_refl x1 y2) in H4; auto).\n  assert (x1 = y2) by (apply (eq_refl x1 y2) in H4; auto).\n  assert (x1 = y2) by (apply (eq_refl x1 y2) in H4; auto).\n  assert (x2 = y1) by (apply (eq_refl x2) in H4; auto).\n  assert (x2 = y1) by (apply (eq_refl x2) in H4; auto).\n  assert (x2 = y2) by (apply (eq_refl x2) in H5; auto).\n  assert (x1 = y2) by (apply (eq_refl x1) in H4; auto).\n  assert (x1 = y2) by (apply (eq_refl x2) in H4; auto).\n  assert (x2 = y2) by (apply (eq_refl x2) in H5; auto).\n  assert (x2 = yQed.",
                    "Goal forall A B (x1 x2 : A) (y1 y2 : B), x1 = x2 -> y1 = y2 -> (x1, y1) = (x2, y2).\nProof.\n  intros A B x1 y2 R2 R1 R2 R2 R2 R3 R3 R3 R4 R4 R4 R4 R5 R5 R5 R5 R6 R6 R6 R6 R6 R6 R7 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 RQed."
                ]
            },
            {
                "filepath": "./coq_projects/coqrel/LogicalRelationsTests.v",
                "context": "\n  vs. [subrel], where we want to be able to use equivalences in both\n  directions. *)\n\nGoal\n  forall {A} (R R': rel A A) (f: A -> A),\n    Monotonic f (R ++> R) ->\n    Related R' (flip R) subrel ->\n    (R' ++> flip R) f f.\nProof.\n  intros A R R' f Hf HR.\n  rauto.\nQed.\n\n(** As an example where proper handling of [flip] is important,\n  this is a goal generated by [setoid_rewrite] when we try to rewrite\n  using [eqrel] under [option_le]. Here, both [R1] and [R2] have to be\n  instantiated as [flip eq] (so that the associated hypotheses can be\n  used to solve goals of the form [yi = xi]), and similarly we need to\n  use the super-relation [flip subrel] of [eqrel]. *)\n\nGoal\n  forall A, exists R1 R2: relation (option A),\n    (eqrel ==> R1 ==> R2 ==> flip impl)%signature option_le option_le.\nProof.\n  intros A. eexists. eexists.\n  rauto.\nQed.\n\n(** *** [impl] vs. [subrel] *)\n\n(** This checks that a relational property written in terms of\n  [subrel] can be used to solve a goal stated in terms of [impl].\n  This is made possible by [subrel_impl_relim]. *)\n\nGoal\n  forall A B C (R: rel A A) (f: A -> rel B C) a1 a2 b c,\n    Monotonic f (R ++> subrel) ->\n    R a1 a2 ->\n    impl (f a1 b c) (f a2 b c).\nProof.\n  intros A B C R f a1 a2 b c Hf Ha.\n  monotonicity; rauto.\nQed.\n\nGoal\n  forall A1 A2 B1 B2 (R1 R2: rel A1 A2) (R: rel B1 B2),\n    subrel R1 R2 ->\n    forall x y,\n      (R2 ++> R) x y ->\n      (R1 ++> R) x y.\nProof.\n  intros A1 A2 B1 B2 R1 R2 R HR12 x y.\n  rauto.\nQed.\n\n(** *** Generic rules *)\n\n(** The [coreflexivity] of [rel_prod] and [eq] makes it possible for\n  [pair_rel] to behave in the same way as [f_equal] below, since they\n  allow us to deduce that [eq * eq] is a [subrel] of [eq]. *)\n\nGoal\n  forall A B (x1 x2 : A) (y1 y2 : B),\n    x1 = x2 -> y1 = y2 -> (x1, y1) = (x2, y2).\nProof.\n  intros.\n  rauto.\nQed.\n\n(** ** Using [foo_subrel] instances *)\n\n(** Still broken because of the interaction between [subrel] and\n  [- ==> - ==> impl] (or lack thereof) *)\n\n",
                "context_tokens": 694,
                "proof_start_offset": 6885,
                "proof_end_offset": 7143,
                "proof": "Goal forall A1 A2 B1 B2 C1 C2 (R1 R2: rel A1 A2) (R1': rel B1 B2) (R: rel C1 C2), subrel R1 R2 -> forall x y, (R2 ++> R) x y -> (R1 ++> R) x y.\nProof.\nintros A1 A2 B1 B2 C1 C2 R1 R2 R1' R HR12 x y H.\nrewrite HR12.\nassumption.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Goal forall A1 A2 B1 B2 C1 C2 (R1 R2: rel A1 A2) (R1': rel B1 B2) (R: rel C1 C2), subrel R1 R2 -> forall x y, (R2 ++> R) x y -> (R1 ++> R) x y.\nProof.\n  intros A1 B2 R1 R2 R2 R2 R1 R2 R2 R2 R2 R3 R3 R3 R4 R4 R4 R4 R4 R4 R5 R5 R5 R5 R5 R5 R6 R5 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 RQed.",
                    "Goal forall A1 A2 B1 B2 C1 C2 (R1 R2: rel A1 A2) (R1': rel B1 B2) (R: rel C1 C2), subrel R1 R2 -> forall x y, (R2 ++> R) x y -> (R1 ++> R) x y.\nProof.\n  intros A1 B2 R2 R1 R2 R2 R2 R1 R2 R2 R3 R3 R3 R3 R4 R4 R4 R5 R5 R5 R6 R6 R6 R7 R6 R6 R6 R6 R6 R7 R7 R6 R6 R6 R6 R7 R6 R7 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 RQed.",
                    "Goal forall A1 A2 B1 B2 C1 C2 (R1 R2: rel A1 A2) (R1': rel B1 B2) (R: rel C1 C2), subrel R1 R2 -> forall x y, (R2 ++> R) x y -> (R1 ++> R) x y.\nProof.\n  intros A1 B2 R2 R1 R2 R2 R3 R3 R3 R4 R4 R4 R4 R5 R5 R5 R5 R5 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R7 R6 R6 R6 R6 R6 R7 R7 R6 R6 R6 R6 R6 R7 R7 R6 R6 R6 R6 R6 R6 R7 R6 R7 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 RQed.",
                    "Goal forall A1 A2 B1 B2 C1 C2 (R1 R2: rel A1 A2) (R1': rel B1 B2) (R: rel C1 C2), subrel R1 R2 -> forall x y, (R2 ++> R) x y -> (R1 ++> R) x y.\nProof.\n  intros A1 B1 B2 R2 R2 R1 R2 R2 R3 R3 R3 R4 R3 R3 R4 R4 R4 R5 R4 R5 R5 R5 R6 R6 R6 R6 R6 R6 R6 R7 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R7 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 RQed.",
                    "Goal forall A1 A2 B1 B2 C1 C2 (R1 R2: rel A1 A2) (R1': rel B1 B2) (R: rel C1 C2), subrel R1 R2 -> forall x y, (R2 ++> R) x y -> (R1 ++> R) x y.\nProof.\n  intros A1 B2 R1 R2 R2 R1 R2 R2 R3 R3 R3 R3 R4 R4 R5 R5 R5 R5 R6 R6 R6 R6 R6 R6 R6 R6 R7 R6 R6 R6 R6 R6 R6 R7 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 RQed."
                ]
            },
            {
                "filepath": "./coq_projects/coqrel/LogicalRelationsTests.v",
                "context": " (R2 ++> R) x y ->\n      (R1 ++> R) x y.\nProof.\n  intros A1 A2 B1 B2 R1 R2 R HR12 x y.\n  rauto.\nQed.\n\n(** *** Generic rules *)\n\n(** The [coreflexivity] of [rel_prod] and [eq] makes it possible for\n  [pair_rel] to behave in the same way as [f_equal] below, since they\n  allow us to deduce that [eq * eq] is a [subrel] of [eq]. *)\n\nGoal\n  forall A B (x1 x2 : A) (y1 y2 : B),\n    x1 = x2 -> y1 = y2 -> (x1, y1) = (x2, y2).\nProof.\n  intros.\n  rauto.\nQed.\n\n(** ** Using [foo_subrel] instances *)\n\n(** Still broken because of the interaction between [subrel] and\n  [- ==> - ==> impl] (or lack thereof) *)\n\nGoal\n  forall A1 A2 B1 B2 C1 C2 (R1 R2: rel A1 A2) (R1': rel B1 B2) (R: rel C1 C2),\n    subrel R1 R2 ->\n    forall x y,\n      (R2 ++> R) x y ->\n      (R1 ++> R) x y.\nProof.\n  intros A1 A2 B1 B2 C1 C2 R1 R2 R1' R HR12 x y H.\n  rewrite HR12.\n  assumption.\nQed.\n\nGoal\n  forall A B (xa1 xa2 ya1 ya2 : A) (xb1 xb2 yb1 yb2 : B)\n         (opA: A -> A -> A) (opB: B -> B -> B)\n         (RA: rel A A) (RB: rel B B)\n         (HopA: Monotonic opA (RA ++> RA ++> RA))\n         (HopB: Monotonic opB (RB ++> RB ++> RB))\n         (Hxa: RA xa1 xa2)\n         (Hxb: RB xb1 xb2)\n         (Hya: RA ya1 ya2)\n         (Hyb: RB yb1 yb2),\n    (RA * RB)%rel\n      (opA xa1 ya1, opB xb1 yb1)\n      (opA xa2 ya2, opB xb2 yb2).\nProof.\n  intros.\n  rauto.\nQed.\n\nGoal\n  forall A1 A2 B1 B2 C1 C2 (R1 R2: rel A1 A2) (R1': rel B1 B2) (R: rel C1 C2),\n    subrel R1 R2 ->\n    forall x y,\n      (R2 * R1' ++> R) x y ->\n      (R1 * R1' ++> R) x y.\nProof.\n  intros A1 A2 B1 B2 C1 C2 R1 R2 R1' R HR12 x y H.\n  rewrite HR12.\n  assumption.\nQed.\n\n(** ** The [rgraph] tactic *)\n\nGoal\n  forall {A} (R S T: rel A A),\n    subrel R S ->\n    subrel S R ->\n    subrel S T ->\n    subrel R T.\nProof.\n  intros.\n  rstep.\nQed.\n\n",
                "context_tokens": 738,
                "proof_start_offset": 8058,
                "proof_end_offset": 8174,
                "proof": "Goal forall `(PER) (x y z t : A), R x y -> R z y -> R z t -> R t x.\nProof.\nintros.\nrstep.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Goal forall `(PER) (x y z t : A), R x y -> R z y -> R z t -> R t x.\nProof.\n  intros.\n  unfold transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive, transitive transitive, transitive, transitive, transitive transitive, transitive, transitive, transitive, transitive, transitive transitive, transitive, transitive, transitive, transitive, transitive transitive, transitive, transitive, transitive transitive, transitive, transitive, transitive, transitive, transitive.\n\n\n(** ** Properties of order *)\n\n(** ** Properties of order *)\n\n(** ** Properties of order *)\n\n(** The order is a order order between order, transitiveQed.",
                    "Goal forall `(PER) (x y z t : A), R x y -> R z y -> R z t -> R t x.\nProof.\n  intros.\n  destruct x as [x y z].\n  destruct x as [y z].\n  destruct x as [y z].\n  destruct y as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n Qed.",
                    "Goal forall `(PER) (x y z t : A), R x y -> R z y -> R z t -> R t x.\nProof.\n  intros.\n  apply R_refl.\nQed.",
                    "Goal forall `(PER) (x y z t : A), R x y -> R z y -> R z t -> R t x.\nProof.\n  intros.\n  assert (Hop : forall x y z : A, R x y -> R y z -> R z z -> R z z t z -> R z z z -> R z z z z.\nProof.\n  intros.\n  assert (Hop : forall x y z : A, R x y -> R z z z -> R z z z z -> R z z z z z.\nProof.\n  intros.\n  assert (Hop : forall x y z : A, R x z -> R z z z -> R z z z z.\nProof.\n  intros.\n  assert (Hop : forall x y z : A, R x y z -> R z z z -> R z z z z z.\nProof.\n  intros.\n  assert (Hop : forall x y z : A, R x z -> R z z z -> R z z z z.\n intros.\n  assert (Hop : forall x z : A, R x z -> R z z z -> R z z z z z.\nProof.\n  intros.\n  assert (Hop : forall x y z : A, R x z -> R z z z z -> R z zQed.",
                    "Goal forall `(PER) (x y z t : A), R x y -> R z y -> R z t -> R t x.\nProof.\n  intros.\n  unfold flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip, flip,Qed."
                ]
            },
            {
                "filepath": "./coq_projects/coqrel/LogicalRelationsTests.v",
                "context": ": rel C1 C2),\n    subrel R1 R2 ->\n    forall x y,\n      (R2 ++> R) x y ->\n      (R1 ++> R) x y.\nProof.\n  intros A1 A2 B1 B2 C1 C2 R1 R2 R1' R HR12 x y H.\n  rewrite HR12.\n  assumption.\nQed.\n\nGoal\n  forall A B (xa1 xa2 ya1 ya2 : A) (xb1 xb2 yb1 yb2 : B)\n         (opA: A -> A -> A) (opB: B -> B -> B)\n         (RA: rel A A) (RB: rel B B)\n         (HopA: Monotonic opA (RA ++> RA ++> RA))\n         (HopB: Monotonic opB (RB ++> RB ++> RB))\n         (Hxa: RA xa1 xa2)\n         (Hxb: RB xb1 xb2)\n         (Hya: RA ya1 ya2)\n         (Hyb: RB yb1 yb2),\n    (RA * RB)%rel\n      (opA xa1 ya1, opB xb1 yb1)\n      (opA xa2 ya2, opB xb2 yb2).\nProof.\n  intros.\n  rauto.\nQed.\n\nGoal\n  forall A1 A2 B1 B2 C1 C2 (R1 R2: rel A1 A2) (R1': rel B1 B2) (R: rel C1 C2),\n    subrel R1 R2 ->\n    forall x y,\n      (R2 * R1' ++> R) x y ->\n      (R1 * R1' ++> R) x y.\nProof.\n  intros A1 A2 B1 B2 C1 C2 R1 R2 R1' R HR12 x y H.\n  rewrite HR12.\n  assumption.\nQed.\n\n(** ** The [rgraph] tactic *)\n\nGoal\n  forall {A} (R S T: rel A A),\n    subrel R S ->\n    subrel S R ->\n    subrel S T ->\n    subrel R T.\nProof.\n  intros.\n  rstep.\nQed.\n\nGoal\n  forall `(PER) (x y z t : A),\n    R x y ->\n    R z y ->\n    R z t ->\n    R t x.\nProof.\n  intros.\n  rstep.\nQed.\n\n(** ** The [transport] tactic *)\n\nGoal\n  forall W acc A B C (R1: W -> rel A A) (R2: W -> rel B B) (R3: W -> rel C C) f g a b x w,\n    Monotonic f (rforall w, R1 w ++> R2 w) ->\n    Monotonic g (rforall w, R2 w ++> option_rel (rel_incr acc R3 w)) ->\n    R1 w a b ->\n    g (f a) = Some x ->\n    exists y, rel_incr acc R3 w x y.\nProof.\n  intros.\n  transport H2.\n  eexists.\n  rauto.\nQed.\n\n(** ** Tests for specific relators *)\n\n(** *** [list_rel] *)\n\n(** [list_subrel] use to not work because of a missing [Params] declaration. *)\n\n",
                "context_tokens": 712,
                "proof_start_offset": 8703,
                "proof_end_offset": 8872,
                "proof": "Goal forall A B (R R': rel A B) l1 l2 x y, subrel R R' -> list_rel R l1 l2 -> R' x y -> list_rel R' (x :: l1) (y :: l2).\nProof.\nintros.\nrauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Goal forall A B (R R': rel A B) l1 l2 x y, subrel R R' -> list_rel R l1 l2 -> R' x y -> list_rel R' (x :: l1) (y :: l2).\nProof.\n  intros.\n  destruct (eq_dec x y); auto.\n  destruct (eq_dec y y); auto.\n  destruct (eq_dec y y); auto.\n  destruct (eq_dec y y); auto.\n  destruct (eq_dec y y); auto.\n  destruct (eq_dec y y); auto.\n  destruct (eq_dec y y); auto.\n  destruct (eq_dec y y); auto.\n  destruct (eq_dec y y); auto.\n  destruct (eq_dec y y); auto.\n  destruct (eq_dec y y); auto.\n  destruct (eq_dec y y); auto.\n  destruct (eq_dec y y); auto.\n  destruct (eq_dec y y); auto.\n  destruct (eq_dec y y); auto.\n  destruct (eq_dec y y); auto.\n  destruct (eq_dec y y); auto.\n  destruct (eq_dec y y); auto.\n  destruct (eq_dec y y); auto.\n  destruct (eq_dec y y); auto.\n  destruct (eq_dec y y); auto.\n  destruct (eq_dec y y); auto.\n  destruct (eq_dec y yQed.",
                    "Goal forall A B (R R': rel A B) l1 l2 x y, subrel R R' -> list_rel R l1 l2 -> R' x y -> list_rel R' (x :: l1) (y :: l2).\nProof.\n  intros.\n  split.\n  - intros.\n    destruct x as [x [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [y [yy [y y]]]]].\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Qed.",
                    "Goal forall A B (R R': rel A B) l1 l2 x y, subrel R R' -> list_rel R l1 l2 -> R' x y -> list_rel R' (x :: l1) (y :: l2).\nProof.\n  intros.\n  assert (forall x, R' x y -> R' x y -> R' x y) ->\n    (forall y, R' x y -> R' x y -> R' y y) ->\n    (forall y, R' x y -> R' x y -> R' y x y) ->\n    (forall y, R' x y -> R' y x) ->\n    (forall y, R' y -> R' x y -> R' y y) ->\n    (forall y, R' x y -> R' y y -> R' y x) ->\n    (forall y, R' y x -> R' y x y) ->\n    (forall y, R' y -> R' y x y) ->\n    (forall y, R' x y -> R' y x y) ->\n    (forall y, R' y x y -> R' y x) ->\n    (forall y, R' y x y -> R' y x y) ->\n    (forall y, R' y x y -> R' y' -> R' y y' -> R' y' x y) ->\n    (forall y, R' y y -> R' xQed.",
                    "Goal forall A B (R R': rel A B) l1 l2 x y, subrel R R' -> list_rel R l1 l2 -> R' x y -> list_rel R' (x :: l1) (y :: l2).\nProof.\n  intros.\n  destruct H as [x y].\n  destruct y as [y y].\n  destruct y as [y y].\n  destruct y as [y y].\n  destruct y as [y y].\n  destruct y as [y z].\n  destruct y as [z y].\n  destruct y as [y y].\n  destruct y as [z [z z].\n  destruct y as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].\n  destruct z as [z z].Qed.",
                    "Goal forall A B (R R': rel A B) l1 l2 x y, subrel R R' -> list_rel R l1 l2 -> R' x y -> list_rel R' (x :: l1) (y :: l2).\nProof.\n  intros.\n  exists (fun w => R1 w && R1 w && R1 w && R1 w) x y.\n  destruct x.\n  exists (fun w => R1 w && R1 w && R2 w) x.\n  exists (fun w => R1 w && R1 w && R2 w && R2 w && R2 w) x.\n  exists (fun w => R1 w && R2 w && R2 w && R2 w && R2 w && R2 w && R2 w && R2 w && R2 w && R1 w && R2 w && R2 w && R2 w && R2 w && R2 w && R2 w && R2 w && R1 w && R2 w && R2 w && R2 w && R2 w && R2 w && R2 && R2 w.\n  intros.\n  exists (fun w => R1 w && R2 w && R2 w && R2 w && R w && R2 w && R2 w && R2 w && R w && R1 w && R2 w && R2 w && R2 && R2 w && R2 w && R2Qed."
                ]
            },
            {
                "filepath": "./coq_projects/coqrel/LogicalRelationsTests.v",
                "context": " xa2 ya1 ya2 : A) (xb1 xb2 yb1 yb2 : B)\n         (opA: A -> A -> A) (opB: B -> B -> B)\n         (RA: rel A A) (RB: rel B B)\n         (HopA: Monotonic opA (RA ++> RA ++> RA))\n         (HopB: Monotonic opB (RB ++> RB ++> RB))\n         (Hxa: RA xa1 xa2)\n         (Hxb: RB xb1 xb2)\n         (Hya: RA ya1 ya2)\n         (Hyb: RB yb1 yb2),\n    (RA * RB)%rel\n      (opA xa1 ya1, opB xb1 yb1)\n      (opA xa2 ya2, opB xb2 yb2).\nProof.\n  intros.\n  rauto.\nQed.\n\nGoal\n  forall A1 A2 B1 B2 C1 C2 (R1 R2: rel A1 A2) (R1': rel B1 B2) (R: rel C1 C2),\n    subrel R1 R2 ->\n    forall x y,\n      (R2 * R1' ++> R) x y ->\n      (R1 * R1' ++> R) x y.\nProof.\n  intros A1 A2 B1 B2 C1 C2 R1 R2 R1' R HR12 x y H.\n  rewrite HR12.\n  assumption.\nQed.\n\n(** ** The [rgraph] tactic *)\n\nGoal\n  forall {A} (R S T: rel A A),\n    subrel R S ->\n    subrel S R ->\n    subrel S T ->\n    subrel R T.\nProof.\n  intros.\n  rstep.\nQed.\n\nGoal\n  forall `(PER) (x y z t : A),\n    R x y ->\n    R z y ->\n    R z t ->\n    R t x.\nProof.\n  intros.\n  rstep.\nQed.\n\n(** ** The [transport] tactic *)\n\nGoal\n  forall W acc A B C (R1: W -> rel A A) (R2: W -> rel B B) (R3: W -> rel C C) f g a b x w,\n    Monotonic f (rforall w, R1 w ++> R2 w) ->\n    Monotonic g (rforall w, R2 w ++> option_rel (rel_incr acc R3 w)) ->\n    R1 w a b ->\n    g (f a) = Some x ->\n    exists y, rel_incr acc R3 w x y.\nProof.\n  intros.\n  transport H2.\n  eexists.\n  rauto.\nQed.\n\n(** ** Tests for specific relators *)\n\n(** *** [list_rel] *)\n\n(** [list_subrel] use to not work because of a missing [Params] declaration. *)\n\nGoal\n  forall A B (R R': rel A B) l1 l2 x y,\n    subrel R R' ->\n    list_rel R l1 l2 ->\n    R' x y ->\n    list_rel R' (x :: l1) (y :: l2).\nProof.\n  intros.\n  rauto.\nQed.\n\n(** *** [rel_pull] *)\n\n(** The [RIntro] instance for [rel_pull] used to be less general. *)\n\n",
                "context_tokens": 728,
                "proof_start_offset": 8967,
                "proof_end_offset": 9084,
                "proof": "Goal forall A B (f: A -> B) (R: rel B B) x y, R (f x) (f y) -> (R @@ f) x y.\nProof.\nintros.\nrauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Goal forall A B (f: A -> B) (R: rel B B) x y, R (f x) (f y) -> (R @@ f) x y.\nProof.\n  intros.\n  rewrite <- (sepcon_assoc _ _ _ _ _ _ _ _ H).\n  rewrite <- (sepcon_assoc _ _ _ _ _ _ _ H).\n  rewrite <- (sepcon_assoc _ _ _ _ _ _ H).\n  rewrite <- (sepcon_assoc _ _ _ _ _ H).\n  rewrite <- (sepcon_assoc _ _ _ _ H).\n  rewrite <- (sepcon_assoc _ _ _ _ _ _ H).\n  rewrite <- (sepcon_assoc _ _ _ _ _ _ H).\n  rewrite <- (sepcon_assoc _ _ _ _ H).\n  rewrite <- (sepcon_assoc _ _ _ _ H).\n  rewrite <- (sepcon_assoc _ _ _ _ H).\n  rewrite <- (sepcon_assoc _ _ _ _ H).\n  rewrite <- (sepcon_assoc _ _ _ _ _ H).\n  rewrite <- (sepcon_assoc _ _ _ _ _ H).\n  rewrite <- (sepcon_assoc _ _ _ _ _ H).\n  rewrite <- (sepcon_assoc _ _ _ _ _ H).\n  rewrite <- (sepcon_assoc _ _ _ _ H).\n  rewrite <- (sepcon_assoc _ _ _ H).\n  rewrite <- (sepcon_assoc _ _ _ _ HQed.",
                    "Goal forall A B (f: A -> B) (R: rel B B) x y, R (f x) (f y) -> (R @@ f) x y.\nProof.\n  intros.\n  apply R_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_Qed.",
                    "Goal forall A B (f: A -> B) (R: rel B B) x y, R (f x) (f y) -> (R @@ f) x y.\nProof.\n  intros.\n  destruct x.\n  + intros.\n    + intros.\n      + intros.\n      + intros.\n      + intros.\n      + intros.\n      + intros.\n        + intros.\n        + intros.\n        + intros.\n        + intros.\n        + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n          + intros.\n            intros.\n            + intros.\n          + introsQed.",
                    "Goal forall A B (f: A -> B) (R: rel B B) x y, R (f x) (f y) -> (R @@ f) x y.\nProof.\n  intros.\n  apply R_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_rel_Qed.",
                    "Goal forall A B (f: A -> B) (R: rel B B) x y, R (f x) (f y) -> (R @@ f) x y.\nProof.\n  intros.\n  apply (fun _ => x) (fun _ => x) (fun _ => x) (fun _ => x) (fun _ => x) (fun _ => x) (fun _ => x) (fun _ => x) (fun _ => x) (fun _ => x) (fun _ => x) (fun _ => x) (fun _ => x) (fun _ => x) (fun _ => x) (fun _ => x) (fun _ => x) (fun _ => x) (fun _ => x)) (fun _ => x)) (fun _ => x) (fun _ => x)) (fun _ => x) (fun _ => x) (fun _ => x) (fun _ => x) (fun _ => x) (fun _ => x)) (fun _ => x)) (fun _ => x) (fun _ => x) (fun _ => x) (fun _ => x)) (fun _ => x) (fun _ => x) (fun _ => x)) (fun _ => x)) (fun _ => x) (fun _ => x)) (fun _ => x)) (fun _ => x) (funQed."
                ]
            },
            {
                "filepath": "./coq_projects/coqrel/LogicalRelationsTests.v",
                "context": "\n         (Hxb: RB xb1 xb2)\n         (Hya: RA ya1 ya2)\n         (Hyb: RB yb1 yb2),\n    (RA * RB)%rel\n      (opA xa1 ya1, opB xb1 yb1)\n      (opA xa2 ya2, opB xb2 yb2).\nProof.\n  intros.\n  rauto.\nQed.\n\nGoal\n  forall A1 A2 B1 B2 C1 C2 (R1 R2: rel A1 A2) (R1': rel B1 B2) (R: rel C1 C2),\n    subrel R1 R2 ->\n    forall x y,\n      (R2 * R1' ++> R) x y ->\n      (R1 * R1' ++> R) x y.\nProof.\n  intros A1 A2 B1 B2 C1 C2 R1 R2 R1' R HR12 x y H.\n  rewrite HR12.\n  assumption.\nQed.\n\n(** ** The [rgraph] tactic *)\n\nGoal\n  forall {A} (R S T: rel A A),\n    subrel R S ->\n    subrel S R ->\n    subrel S T ->\n    subrel R T.\nProof.\n  intros.\n  rstep.\nQed.\n\nGoal\n  forall `(PER) (x y z t : A),\n    R x y ->\n    R z y ->\n    R z t ->\n    R t x.\nProof.\n  intros.\n  rstep.\nQed.\n\n(** ** The [transport] tactic *)\n\nGoal\n  forall W acc A B C (R1: W -> rel A A) (R2: W -> rel B B) (R3: W -> rel C C) f g a b x w,\n    Monotonic f (rforall w, R1 w ++> R2 w) ->\n    Monotonic g (rforall w, R2 w ++> option_rel (rel_incr acc R3 w)) ->\n    R1 w a b ->\n    g (f a) = Some x ->\n    exists y, rel_incr acc R3 w x y.\nProof.\n  intros.\n  transport H2.\n  eexists.\n  rauto.\nQed.\n\n(** ** Tests for specific relators *)\n\n(** *** [list_rel] *)\n\n(** [list_subrel] use to not work because of a missing [Params] declaration. *)\n\nGoal\n  forall A B (R R': rel A B) l1 l2 x y,\n    subrel R R' ->\n    list_rel R l1 l2 ->\n    R' x y ->\n    list_rel R' (x :: l1) (y :: l2).\nProof.\n  intros.\n  rauto.\nQed.\n\n(** *** [rel_pull] *)\n\n(** The [RIntro] instance for [rel_pull] used to be less general. *)\n\nGoal\n  forall A B (f: A -> B) (R: rel B B) x y,\n    R (f x) (f y) ->\n    (R @@ f) x y.\nProof.\n  intros.\n  rauto.\nQed.\n\n(** We don't want the introduction rule for [rel_pull] to shadow\n  relational properties. *)\n\n",
                "context_tokens": 709,
                "proof_start_offset": 9180,
                "proof_end_offset": 9343,
                "proof": "Lemma rel_pull_2: forall A B (f: A -> B) (R: rel B B) (g: A -> A) x y, Monotonic g (\u22a4 ==> R @@ f) -> (R @@ f) (g x) (g y).\nProof.\nintros.\nrauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma rel_pull_2: forall A B (f: A -> B) (R: rel B B) (g: A -> A) x y, Monotonic g (\u22a4 ==> R @@ f) -> (R @@ f) (g x) (g y).\nProof.\n  intros.\n  unfold rel_prod in *.\n  destruct (eq_dec x x y); auto.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite H.\n  rewrite HQed.",
                    "Lemma rel_pull_2: forall A B (f: A -> B) (R: rel B B) (g: A -> A) x y, Monotonic g (\u22a4 ==> R @@ f) -> (R @@ f) (g x) (g y).\nProof.\n  intros.\n  rewrite <- (rel_pull_2 (fun x => x) (f y) (g y)).\n  rewrite <- (rel_pull_2 (fun x => x) (g y)).\n  rewrite <- (rel_pull_2 (fun x => x) (g y)).\n  rewrite <- (rel_pull_2 (fun x => x) (g y)).\n  rewrite <- (rel_pull_2 (fun x => x) (g y)).\n  rewrite <- (rel_pull_2 (fun x => x) (g y)).\n  rewrite <- (rel_pull_2 (fun x => x) (g y)).\n  rewrite <- (rel_pull_2 (fun x => x) (g y)).\n  rewrite <- (rel_pull_2 (fun x => x) (g y)).\n  rewrite <- (rel_pull_2 (fun x => x) (g y)).\n  rewrite <- (rel_pull_2 (fun x => x) (g y)).\n  rewrite <- (rel_pull_2 (fun x => x) (g y)).\n  rewrite <- (rel_pull_2 (fun x => x) (g yQed.",
                    "Lemma rel_pull_2: forall A B (f: A -> B) (R: rel B B) (g: A -> A) x y, Monotonic g (\u22a4 ==> R @@ f) -> (R @@ f) (g x) (g y).\nProof.\n  intros.\n  unfold rel_prod.\n  intros.\n  destruct (x = y).\n  + apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n    apply rel_pull_2.\n   Qed.",
                    "Lemma rel_pull_2: forall A B (f: A -> B) (R: rel B B) (g: A -> A) x y, Monotonic g (\u22a4 ==> R @@ f) -> (R @@ f) (g x) (g y).\nProof.\n  intros A B f g x y.\n  induction x; intros.\n  - simpl.\n    - simpl.\n    - simpl.\n      - simpl.\n      - simpl.\n      - simpl.\n      - simpl.\n      - simpl.\n      - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        - simpl.\n        -Qed.",
                    "Lemma rel_pull_2: forall A B (f: A -> B) (R: rel B B) (g: A -> A) x y, Monotonic g (\u22a4 ==> R @@ f) -> (R @@ f) (g x) (g y).\nProof.\n  intros A B f g x y H.\n  induction f; intros.\n  + auto.\n  + auto.\n  + auto.\n  + auto.\n  + auto.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/coqrel/LogicalRelationsTests.v",
                "context": ", opB xb2 yb2).\nProof.\n  intros.\n  rauto.\nQed.\n\nGoal\n  forall A1 A2 B1 B2 C1 C2 (R1 R2: rel A1 A2) (R1': rel B1 B2) (R: rel C1 C2),\n    subrel R1 R2 ->\n    forall x y,\n      (R2 * R1' ++> R) x y ->\n      (R1 * R1' ++> R) x y.\nProof.\n  intros A1 A2 B1 B2 C1 C2 R1 R2 R1' R HR12 x y H.\n  rewrite HR12.\n  assumption.\nQed.\n\n(** ** The [rgraph] tactic *)\n\nGoal\n  forall {A} (R S T: rel A A),\n    subrel R S ->\n    subrel S R ->\n    subrel S T ->\n    subrel R T.\nProof.\n  intros.\n  rstep.\nQed.\n\nGoal\n  forall `(PER) (x y z t : A),\n    R x y ->\n    R z y ->\n    R z t ->\n    R t x.\nProof.\n  intros.\n  rstep.\nQed.\n\n(** ** The [transport] tactic *)\n\nGoal\n  forall W acc A B C (R1: W -> rel A A) (R2: W -> rel B B) (R3: W -> rel C C) f g a b x w,\n    Monotonic f (rforall w, R1 w ++> R2 w) ->\n    Monotonic g (rforall w, R2 w ++> option_rel (rel_incr acc R3 w)) ->\n    R1 w a b ->\n    g (f a) = Some x ->\n    exists y, rel_incr acc R3 w x y.\nProof.\n  intros.\n  transport H2.\n  eexists.\n  rauto.\nQed.\n\n(** ** Tests for specific relators *)\n\n(** *** [list_rel] *)\n\n(** [list_subrel] use to not work because of a missing [Params] declaration. *)\n\nGoal\n  forall A B (R R': rel A B) l1 l2 x y,\n    subrel R R' ->\n    list_rel R l1 l2 ->\n    R' x y ->\n    list_rel R' (x :: l1) (y :: l2).\nProof.\n  intros.\n  rauto.\nQed.\n\n(** *** [rel_pull] *)\n\n(** The [RIntro] instance for [rel_pull] used to be less general. *)\n\nGoal\n  forall A B (f: A -> B) (R: rel B B) x y,\n    R (f x) (f y) ->\n    (R @@ f) x y.\nProof.\n  intros.\n  rauto.\nQed.\n\n(** We don't want the introduction rule for [rel_pull] to shadow\n  relational properties. *)\n\nLemma rel_pull_2:\n  forall A B (f: A -> B) (R: rel B B) (g: A -> A) x y,\n    Monotonic g (\u22a4 ==> R @@ f) ->\n    (R @@ f) (g x) (g y).\nProof.\n  intros.\n  rauto.\nQed.\n\n(** *** [rel_all] *)\n\n",
                "context_tokens": 732,
                "proof_start_offset": 9367,
                "proof_end_offset": 9486,
                "proof": "Lemma rel_all_1: forall {A} (x: A), (rforall a, req a) x x -> forall a, req a x x.\nProof.\nintros.\nrauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma rel_all_1: forall {A} (x: A), (rforall a, req a) x x -> forall a, req a x x.\nProof.\n  intros.\n  rewrite H.\n  auto.\nQed.",
                    "Lemma rel_all_1: forall {A} (x: A), (rforall a, req a) x x -> forall a, req a x x.\nProof.\n  intros.\n  unfold rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_Qed.",
                    "Lemma rel_all_1: forall {A} (x: A), (rforall a, req a) x x -> forall a, req a x x.\nProof.\n  intros.\n  unfold rel_prod.\n  intros.\n  apply rel_prod_2.\n  apply rel_prod_2.\n  apply rel_prod_2.\n  apply rel_prod_2.\n  apply rel_prod2.\n  apply rel_prod2.\n  apply rel_prod2.\n  apply rel_prod2.\n  apply rel_prod2.\n  apply rel_prod2.\n  apply rel_prod2.\n  apply rel_prod2.\n  apply rel_prod2.\n  apply rel_prod2.\n  apply rel_prod2.\n  apply rel_prod2.\n  apply rel_prod.\n  apply rel_prod2.\n  apply rel_prod.\n  apply rel_prod2.\n  apply rel_prod.\n  apply rel_prod2.\n  apply rel_prod.\n  apply rel_prod2.\n  apply rel_prod2.\n  apply rel_prod2.\n  apply rel_prod2.\n  apply rel_prod.\n  apply rel_prod.\n  apply rel_prod2.\n  apply rel_prod2.\n  apply rel_prod2.\n  apply rel_prod.\n  apply rel_prod2.\n  apply rel_prod.Qed.",
                    "Lemma rel_all_1: forall {A} (x: A), (rforall a, req a) x x -> forall a, req a x x.\nProof.\n  intros.\n  apply rel_all_1; auto.\nQed.",
                    "Lemma rel_all_1: forall {A} (x: A), (rforall a, req a) x x -> forall a, req a x x.\nProof.\n  intros.\n  apply rel_prod_2.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/coqrel/LogicalRelationsTests.v",
                "context": " R2: relation (option A),\n    (eqrel ==> R1 ==> R2 ==> flip impl)%signature option_le option_le.\nProof.\n  intros A. eexists. eexists.\n  rauto.\nQed.\n\n(** *** [impl] vs. [subrel] *)\n\n(** This checks that a relational property written in terms of\n  [subrel] can be used to solve a goal stated in terms of [impl].\n  This is made possible by [subrel_impl_relim]. *)\n\nGoal\n  forall A B C (R: rel A A) (f: A -> rel B C) a1 a2 b c,\n    Monotonic f (R ++> subrel) ->\n    R a1 a2 ->\n    impl (f a1 b c) (f a2 b c).\nProof.\n  intros A B C R f a1 a2 b c Hf Ha.\n  monotonicity; rauto.\nQed.\n\nGoal\n  forall A1 A2 B1 B2 (R1 R2: rel A1 A2) (R: rel B1 B2),\n    subrel R1 R2 ->\n    forall x y,\n      (R2 ++> R) x y ->\n      (R1 ++> R) x y.\nProof.\n  intros A1 A2 B1 B2 R1 R2 R HR12 x y.\n  rauto.\nQed.\n\n(** *** Generic rules *)\n\n(** The [coreflexivity] of [rel_prod] and [eq] makes it possible for\n  [pair_rel] to behave in the same way as [f_equal] below, since they\n  allow us to deduce that [eq * eq] is a [subrel] of [eq]. *)\n\nGoal\n  forall A B (x1 x2 : A) (y1 y2 : B),\n    x1 = x2 -> y1 = y2 -> (x1, y1) = (x2, y2).\nProof.\n  intros.\n  rauto.\nQed.\n\n(** ** Using [foo_subrel] instances *)\n\n(** Still broken because of the interaction between [subrel] and\n  [- ==> - ==> impl] (or lack thereof) *)\n\nGoal\n  forall A1 A2 B1 B2 C1 C2 (R1 R2: rel A1 A2) (R1': rel B1 B2) (R: rel C1 C2),\n    subrel R1 R2 ->\n    forall x y,\n      (R2 ++> R) x y ->\n      (R1 ++> R) x y.\nProof.\n  intros A1 A2 B1 B2 C1 C2 R1 R2 R1' R HR12 x y H.\n  rewrite HR12.\n  assumption.\nQed.\n\n",
                "context_tokens": 600,
                "proof_start_offset": 7145,
                "proof_end_offset": 7615,
                "proof": "Goal forall A B (xa1 xa2 ya1 ya2 : A) (xb1 xb2 yb1 yb2 : B) (opA: A -> A -> A) (opB: B -> B -> B) (RA: rel A A) (RB: rel B B) (HopA: Monotonic opA (RA ++> RA ++> RA)) (HopB: Monotonic opB (RB ++> RB ++> RB)) (Hxa: RA xa1 xa2) (Hxb: RB xb1 xb2) (Hya: RA ya1 ya2) (Hyb: RB yb1 yb2), (RA * RB)%rel (opA xa1 ya1, opB xb1 yb1) (opA xa2 ya2, opB xb2 yb2).\nProof.\nintros.\nrauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Goal forall A B (xa1 xa2 ya1 ya2 : A) (xb1 xb2 yb1 yb2 : B) (opA: A -> A -> A) (opB: B -> B -> B) (RA: rel A A) (RB: rel B B) (HopA: Monotonic opA (RA ++> RA ++> RA)) (HopB: Monotonic opB (RB ++> RB ++> RB)) (Hxa: RA xa1 xa2) (Hxb: RB xb1 xb2) (Hya: RA ya1 ya2) (Hyb: RB yb1 yb2), (RA * RB)%rel (opA xa1 ya1, opB xb1 yb1) (opA xa2 ya2, opB xb2 yb2).\nProof.\n  intros A B1 B1 C1 C2 R2 R2 R1 R2 R2 R3 R3 R3 R4 R4 R4 R4 R5 R5 R5 R5 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6Qed.",
                    "Goal forall A B (xa1 xa2 ya1 ya2 : A) (xb1 xb2 yb1 yb2 : B) (opA: A -> A -> A) (opB: B -> B -> B) (RA: rel A A) (RB: rel B B) (HopA: Monotonic opA (RA ++> RA ++> RA)) (HopB: Monotonic opB (RB ++> RB ++> RB)) (Hxa: RA xa1 xa2) (Hxb: RB xb1 xb2) (Hya: RA ya1 ya2) (Hyb: RB yb1 yb2), (RA * RB)%rel (opA xa1 ya1, opB xb1 yb1) (opA xa2 ya2, opB xb2 yb2).\nProof.\n  intros A B1 B2 C2 R1 R1 R2 R1 R2 R2 R2 R3 R3 R3 R4 R4 R4 R5 R5 R5 R6 R6 R5 R5 R5 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6Qed.",
                    "Goal forall A B (xa1 xa2 ya1 ya2 : A) (xb1 xb2 yb1 yb2 : B) (opA: A -> A -> A) (opB: B -> B -> B) (RA: rel A A) (RB: rel B B) (HopA: Monotonic opA (RA ++> RA ++> RA)) (HopB: Monotonic opB (RB ++> RB ++> RB)) (Hxa: RA xa1 xa2) (Hxb: RB xb1 xb2) (Hya: RA ya1 ya2) (Hyb: RB yb1 yb2), (RA * RB)%rel (opA xa1 ya1, opB xb1 yb1) (opA xa2 ya2, opB xb2 yb2).\nProof.\n  intros A B1 B2 C1 R1 R2 R2 R2 R2 R3 R3 R3 R3 R4 R4 R4 R4 R5 R5 R5 R5 R5 R5 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6Qed.",
                    "Goal forall A B (xa1 xa2 ya1 ya2 : A) (xb1 xb2 yb1 yb2 : B) (opA: A -> A -> A) (opB: B -> B -> B) (RA: rel A A) (RB: rel B B) (HopA: Monotonic opA (RA ++> RA ++> RA)) (HopB: Monotonic opB (RB ++> RB ++> RB)) (Hxa: RA xa1 xa2) (Hxb: RB xb1 xb2) (Hya: RA ya1 ya2) (Hyb: RB yb1 yb2), (RA * RB)%rel (opA xa1 ya1, opB xb1 yb1) (opA xa2 ya2, opB xb2 yb2).\nProof.\n  intros A B C1 B1 C2 R1 R2 R2 R1 R2 R3 R3 R4 R4 R4 R4 R5 R5 R6 R5 R5 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 RQed.",
                    "Goal forall A B (xa1 xa2 ya1 ya2 : A) (xb1 xb2 yb1 yb2 : B) (opA: A -> A -> A) (opB: B -> B -> B) (RA: rel A A) (RB: rel B B) (HopA: Monotonic opA (RA ++> RA ++> RA)) (HopB: Monotonic opB (RB ++> RB ++> RB)) (Hxa: RA xa1 xa2) (Hxb: RB xb1 xb2) (Hya: RA ya1 ya2) (Hyb: RB yb1 yb2), (RA * RB)%rel (opA xa1 ya1, opB xb1 yb1) (opA xa2 ya2, opB xb2 yb2).\nProof.\n  intros A B C1 B2 C2 R1 R1 R2 R2 R2 R3 R3 R3 R3 R4 R4 R5 R5 R6 R5 R5 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 R6 RQed."
                ]
            }
        ],
        "fundamental-arithmetics": [
            {
                "filepath": "./coq_projects/fundamental-arithmetics/division.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import Wf_nat.\n\n(** b | a if there is q such that a = b * q*)\nDefinition divides (a b:nat) := exists q:nat,a = (b*q).\n\n(** 1 divides every natural number *)\n",
                "context_tokens": 280,
                "proof_start_offset": 1048,
                "proof_end_offset": 1150,
                "proof": "Lemma one_min_div : forall (n:nat),(divides n 1).\nProof.\nintros.\nred.\nexists n.\nauto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma one_min_div : forall (n:nat),(divides n 1).\nProof.\n intros.\n apply same_min_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_div_Qed.",
                    "Lemma one_min_div : forall (n:nat),(divides n 1).\nProof.\n intros n p q.\n apply le_trans with (p := p).\n apply le_trans with (p := p).\n apply le_trans with (p := p).\n apply le_trans with (p := p).\n apply le_trans with (p := p).\n apply le_trans with (p := p).\n apply le_trans with (p := p).\n apply le_trans with (p := p).\n apply le_trans with (p := p).\n apply le_trans with (p := p).\n apply le_trans with (p := p).\n apply le_trans with (p := p).\n apply le_trans with (p := p).\n apply le_trans with (p := p).\n apply le_trans with (p := p).\n apply le_trans with (p := p).\n apply le_trans with (p := p).\n apply le_trans with (p := p).\n apply le_trans with (p := p).\n apply le_trans with (p := p).\n apply le_trans with (p := p).\n apply le_trans with (p := p).\n apply le_transQed.",
                    "Lemma one_min_div : forall (n:nat),(divides n 1).\nProof.\n intros.\n apply lt_n_S.\n apply lt_n_S.\nQed.",
                    "Lemma one_min_div : forall (n:nat),(divides n 1).\nProof.\n  unfold modulo.\n  unfold modulo.\n  unfold modulo.\n  unfold modulo.\n  case (Z.div_eucl a b) as [q|q].\n  unfold modulo.\n  case (Z.div_eucl a b) as [q|q].\n  unfold modulo.\n  case (Z.div_eucl a b) as [q|q].\n  unfold modulo.\n  case (Z.div_eucl a b) as [q|q].\n  unfold modulo.\n  case (Z.div_eucl a b) as [q|q].\n  unfold modulo.\n  case (Z.div_eucl a b) as [q|q].\n  unfold modulo.\n  case (Z.div_eucl a b) as [q|q].\n  unfold modulo.\n  case (Z.div_eucl a b) as [q|q].\n  unfold modulo.\n  case (Z.div_eucl a b) as [q|q].\n  unfold modulo.\n  case (Z.div_eucl a b) as [q|q].\n  unfold modulo.\n  case (Z.div_eucl a b) as [q|q].\n  unfold modulo.\n  case (Z.divQed.",
                    "Lemma one_min_div : forall (n:nat),(divides n 1).\nProof.\n unfold modulo.\n intros.\n apply H.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/division.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import Wf_nat.\n\n(** b | a if there is q such that a = b * q*)\nDefinition divides (a b:nat) := exists q:nat,a = (b*q).\n\n(** 1 divides every natural number *)\nLemma one_min_div : forall (n:nat),(divides n 1).\n  intros.\n  red.\n  exists n.\n  auto with arith.\nQed.\n\n(** 0 is divides by every natural number *)\n",
                "context_tokens": 327,
                "proof_start_offset": 1196,
                "proof_end_offset": 1299,
                "proof": "Lemma zero_max_div : forall (n:nat),(divides O n).\nProof.\nintros.\nred.\nexists O.\nauto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma zero_max_div : forall (n:nat),(divides O n).\n  intros.\n  red in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfold mod in |- *.\n  unfoldQed.",
                    "Lemma zero_max_div : forall (n:nat),(divides O n).\n  intros.\n  red.\n  unfold modulo.\n  unfold modulo.\n  unfold modulo.\n  rewrite <- (mult_comm (a * b)) at 1.\n  rewrite <- (mult_comm (a * b)) at 1.\n  rewrite <- (mult_comm (a * b)) at 1.\n  rewrite <- (mult_comm (a * b)) at 1.\n  rewrite <- (mult_comm (a * b)) at 1.\n  rewrite <- (mult_comm (a * b)) at 1.\n  rewrite <- (mult_comm (a * b)) at 1.\n  rewrite <- (mult_comm (a * b)) at 1.\n  rewrite <- (mult_comm (a * b)) at 1.\n  rewrite <- (mult_comm (a * b)) at 1.\n  rewrite <- (mult_comm (a * b)) at 1.\n  rewrite <- (mult_comm (a * b)) at 1.\n  rewrite <- (mult_comm (a * b)) at 1.\n  rewrite <- (mult_comm (a * b)) at 1.\n  rewrite <- (mult_comm (a * b) at 1.\n  rewrite <- (mult_comm (a * b)) atQed.",
                    "Lemma zero_max_div : forall (n:nat),(divides O n).\n  intros.\n  red.\n  exists n.\n  auto with arith.\nQed.",
                    "Lemma zero_max_div : forall (n:nat),(divides O n).\n  intros.\n  red.\n  exists n.\n  auto with arith.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n  apply one_min_div.\n Qed.",
                    "Lemma zero_max_div : forall (n:nat),(divides O n).\n  intros.\n  red.\n  intros.\n  red.\n  intros.\n  red.\n  intros.\n  red.\n  red.\n  intros.\n  red.\n  red.\n  intros.\n  red.\n  red.\n  intros.\n  red.\n  red.\n  intros.\n  red.\n  red.\n  intros.\n  red.\n  red.\n  intros.\n  red.\n  red.\n  red.\n  intros.\n  red.\n  red.\n  intros.\n  red.\n  red.\n  red.\n  red.\n  intros.\n  red.\n  red.\n  intros.\n  red.\n  red.\n  red.\n  red.\n  intros.\n  red.\n  red.\n  red; intros.\n  red.\n  red.\n  red; intros.\n  red.\n  red.\n  red; intros.\n  red.\n  red; intros.\n  red.\n  red.\n  red; intros.\n  red.\n  red; intros.\n  red; red; intros.\n  red; red; intros.\n  red; red; red; intros.\n  red; red; intros.\n  red; red; red; intros.\n  red; red; intros.\n  red; red; intros.\n  red; red; intros.\n Qed."
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/division.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import Wf_nat.\n\n(** b | a if there is q such that a = b * q*)\nDefinition divides (a b:nat) := exists q:nat,a = (b*q).\n\n(** 1 divides every natural number *)\nLemma one_min_div : forall (n:nat),(divides n 1).\n  intros.\n  red.\n  exists n.\n  auto with arith.\nQed.\n\n(** 0 is divides by every natural number *)\nLemma zero_max_div : forall (n:nat),(divides O n).\n  intros.\n  red.\n  exists O.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is reflexive *)\n",
                "context_tokens": 373,
                "proof_start_offset": 1350,
                "proof_end_offset": 1453,
                "proof": "Lemma divides_refl : forall (a:nat),(divides a a).\nProof.\nintros.\nred.\nexists 1.\nauto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma divides_refl : forall (a:nat),(divides a a).\nProof.\n  intros.\n  red.\n  exists (n, 0).\n  auto with arith.\n  exists (n, 0).\n  auto with arith.\n  exists (n, 0).\n  auto with arith.\n  exists (n, 0).\n  auto with arith.\n  exists (n, 0).\n  auto with arith.\n  exists (n, 0).\n  auto with arith.\n  exists (n, 0).\n  auto with arith.\n  exists (n, 0).\n  auto with arith.\n  exists (n, 0).\n  auto with arith.\n  exists (n, 0).\n  auto with arith.\n  exists (n, 0).\n  auto with arith.\n  exists (n, 0).\n  auto with arith.\n  exists (n, 0).\n  auto with arith.\n  exists (n, 0).\n  auto with arith.\n  exists (n, 0).\n  auto with arith.\n  exists (n, 0).\n  auto with arith.\n  exists (n, 0).\n  auto with arith.\n  exists (n, 0).\n  auto with arith.\n  exists (n, 0).\n  auto with arith.\n  exists (n, 0).\n  auto with arith.\n  exists (n, 0).Qed.",
                    "Lemma divides_refl : forall (a:nat),(divides a a).\nProof.\n  intros.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  apply H.\n  applyQed.",
                    "Lemma divides_refl : forall (a:nat),(divides a a).\nProof.\n  intros.\n  apply mod_le_weak.\n  exists 0.\n  auto with arith.\nQed.",
                    "Lemma divides_refl : forall (a:nat),(divides a a).\nProof.\n  intros.\n  red.\n  apply mod_le_trans with (a:=a).\n  apply mod_le_trans with (a:=a).\n  apply mod_le_trans with (a:=a).\n  apply mod_le_trans with (a:=a).\n  apply mod_le_trans with (a:=a).\n  apply mod_le_trans with (a:=a).\n  apply mod_le_trans with (a:=a).\n  apply mod_le_trans with (a:=a).\n  apply mod_le_trans with (a:=a).\n  apply mod_le_trans with (a:=a).\n  apply mod_le_trans with (a:=a).\n  apply mod_le_trans with (a:=a).\n  apply mod_le_trans with (a:=a).\n  apply mod_le_trans with (a:=a).\n  apply mod_le_trans with (a:=a).\n  apply mod_le_trans with (a:=a).\n  apply mod_le_trans with (a:=a).\n  apply mod_le_trans with (a:=a).\n  apply mod_le_trans with (a:=a).Qed.",
                    "Lemma divides_refl : forall (a:nat),(divides a a).\nProof.\n  intros.\n  red.\n  exists n.\n  auto with arith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/division.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import Wf_nat.\n\n(** b | a if there is q such that a = b * q*)\nDefinition divides (a b:nat) := exists q:nat,a = (b*q).\n\n(** 1 divides every natural number *)\nLemma one_min_div : forall (n:nat),(divides n 1).\n  intros.\n  red.\n  exists n.\n  auto with arith.\nQed.\n\n(** 0 is divides by every natural number *)\nLemma zero_max_div : forall (n:nat),(divides O n).\n  intros.\n  red.\n  exists O.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is reflexive *)\nLemma divides_refl : forall (a:nat),(divides a a).\n  intros.\n  red.\n  exists 1.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is transitive *)\n",
                "context_tokens": 417,
                "proof_start_offset": 1505,
                "proof_end_offset": 1745,
                "proof": "Lemma divides_trans : forall (a b c:nat),(divides a b)->(divides b c)->(divides a c).\nProof.\nunfold divides.\nintros.\nelim H;intro q;intro.\nelim H0;intro q';intro.\nrewrite H2 in H1.\nexists (q' * q).\nrewrite H1.\nauto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma divides_trans : forall (a b c:nat),(divides a b)->(divides b c)->(divides a c).\nProof.\n  intros.\n  red.\n  exists (S n).\n  auto with arith.\n  apply mod_le_trans with (a:=b) (n:=0).\n  auto with arith.\n  apply mod_le_trans with (a:=b) (n:=0).\n  auto with arith.\n  apply mod_le_trans with (a:=b) (n:=n0)).\n  auto with arith.\n  apply mod_le_trans with (a:=b) (n:=0).\n  auto with arith.\n  apply mod_le_trans with (a:=b) (n:=n0).\n  auto with arith.\n  apply mod_le_trans with (a:=b) (n:=n0).\n  auto with arith.\n  apply mod_le_trans with (a:=b) (n:=n0).\n  auto with arith.\n  apply mod_le_trans with (a:=b) (n:=n0).\n  auto with arith.\n  apply mod_le_trans with (a:=b) (n:=n0).\n  auto with arith.\n  apply mod_le_trans with (a:=b) (n:=n0).\n  auto with arithQed.",
                    "Lemma divides_trans : forall (a b c:nat),(divides a b)->(divides b c)->(divides a c).\n  intros.\n  red.\n  exists (S n).\n  auto with arith.\nQed.",
                    "Lemma divides_trans : forall (a b c:nat),(divides a b)->(divides b c)->(divides a c).\n  intros.\n  red.\n  exists 0.\n  auto with arith.\n  apply H.\nQed.",
                    "Lemma divides_trans : forall (a b c:nat),(divides a b)->(divides b c)->(divides a c).\n  intros.\n  red.\n  exists 0.\n  auto with arith.\nQed.",
                    "Lemma divides_trans : forall (a b c:nat),(divides a b)->(divides b c)->(divides a c).\nProof.\n  intros.\n  red.\n  exists (S n).\n  auto with arith.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/division.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import Wf_nat.\n\n(** b | a if there is q such that a = b * q*)\nDefinition divides (a b:nat) := exists q:nat,a = (b*q).\n\n(** 1 divides every natural number *)\nLemma one_min_div : forall (n:nat),(divides n 1).\n  intros.\n  red.\n  exists n.\n  auto with arith.\nQed.\n\n(** 0 is divides by every natural number *)\nLemma zero_max_div : forall (n:nat),(divides O n).\n  intros.\n  red.\n  exists O.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is reflexive *)\nLemma divides_refl : forall (a:nat),(divides a a).\n  intros.\n  red.\n  exists 1.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is transitive *)\nLemma divides_trans : forall (a b c:nat),(divides a b)->(divides b c)->(divides a c).\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  elim H0;intro q';intro.\n  rewrite H2 in H1.\n  exists (q' * q).\n  rewrite H1.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is antisymmetric *)\n",
                "context_tokens": 508,
                "proof_start_offset": 1800,
                "proof_end_offset": 2305,
                "proof": "Lemma divides_antisym : forall (a b:nat),(divides a b)->(divides b a)->a=b.\nProof.\nunfold divides.\nintros.\nelim H;intro q;intro.\nelim H0;intro q';intro.\nrewrite H2 in H1.\nassert ((a = 0) \\/ (q' * q)=1).\napply mult_lemma4.\nreplace (a*(q'*q)) with (a*q'*q);try (auto with arith).\ncase H3;intro.\nrewrite H4 in H2;simpl in H2;rewrite H2;trivial.\nelim (mult_lemma5 q' q H4);intros.\nrewrite H5 in H2;rewrite mult_comm in H2;simpl in H2;rewrite plus_comm in H2;simpl in H2;symmetry;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma divides_antisym : forall (a b:nat),(divides a b)->(divides b a)->a=b.\nProof.\n  intros.\n  elim H; intro q; elim q; intro; elim q; intro.\n  elim H0; intro.\n  elim H0; intro.\n  elim H0; intro.\n  elim H0; intro.\n  elim H0; intro.\n  elim H0; intro.\n  elim H0; intro.\n  elim H0; intro.\n  elim H0; intro.\n  elim H0; intro.\n  elim H0; intro.\n  elim H0; intro.\n  elim H1; intro.\n  elim H0; intro.\n  elim H0; intro.\n  elim H0; intro.\n  elim H0; intro.\n  elim H0; intro.\n  elim H1; intro.\n  elim H0; intro.\n  elim H0; intro.\n  elim H1; intro.\n  elim H0; intro.\n  elim H1; intro.\n  elim H1; intro.\n  elim H0; intro.\n  elim H1; intro.\n  elim H0; intro.\n  elim H0; intro.\n  elim H1; intro.\n  elim H1; intro.\n  elim H0; intro.\n  elim H0; intro.\n  elimQed.",
                    "Lemma divides_antisym : forall (a b:nat),(divides a b)->(divides b a)->a=b.\n  intros.\n  red.\n  exists (q * q).\n  exists (q * q).\n  exists (q * q).\n  split.\n  exists q.\n  auto with arith.\nQed.",
                    "Lemma divides_antisym : forall (a b:nat),(divides a b)->(divides b a)->a=b.\nProof.\n  intros.\n  elim H;intro q;intro.\n  rewrite H0 in H0.\n  apply H1.\n  exists (q * q).\n  auto with arith.\nQed.",
                    "Lemma divides_antisym : forall (a b:nat),(divides a b)->(divides b a)->a=b.\n  intros.\n  red in |- *.\n  exists (q' * q').\n  exists (q' * q').\n  auto with arith.\n  exists (q' * q').\n  auto with arith.\n  exists (q' * q').\n  auto with arith.\n  auto with arith.\n  apply H1.\n  auto with arith.\n  apply H1.\n  auto with arith.\n  auto with arith.\n  apply H1.\n  auto with arith.\n  apply H1.\n  auto with arith.\n  apply H1.\n  auto with arith.\n  auto with arith.\n  apply H1.\n  auto with arith.\n  auto with arith.\n  apply H1.\n  auto with arith.\n  apply H1.\n  auto with arith.\n  auto with arith.\n  apply H1.\n  auto with arith.\n  auto with arith.\n  auto with arith.\n  apply H1.\n  auto with arith.\n  auto with arith.\n  auto with arith.\n  apply H1.\n  auto with arith.\n  auto with arith.\n  apply H1.\n  auto with arith.\n  apply H1.\n  auto with arith.\n  apply H1.\n  auto with arith.\n  apply H1.\n  auto with arith.\n Qed.",
                    "Lemma divides_antisym : forall (a b:nat),(divides a b)->(divides b a)->a=b.\nProof.\n  intros.\n  apply prime_refl.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": "try omega.\n  assert (1 <= n);try omega.\n  assert (m > 1);try omega.\n  generalize (IHm H4);omega.\nQed.\n\nLemma mult_lemma4 : forall (n m:nat),n=n*m -> n=O \\/ m=1.\n  intros n m.\n  case n.\n  left;trivial.\n  intros.\n  right.\n  destruct m.\n  rewrite mult_comm in H.\n  discriminate.\n  destruct m;trivial.\n  assert ((S n0)<(S n0)*(S (S m))).\n  apply mult_lemma3;intros;auto with arith.\n  rewrite <- H in H0.\n  elim (lt_irrefl (S n0) H0).\nQed.\n\nLemma mult_lemma5 : forall (n m:nat),((n * m) =1)->(n=1)/\\(m=1).\n  induction n;simpl;intros;try discriminate.\n  induction m.\n  rewrite mult_comm in H.\n  simpl in H;discriminate.\n  assert ((S n)<=((S n)*(S m))).\n  apply mult_lemma1;discriminate.\n  assert (((S n)*(S m))=((S m)+n*(S m))).\n  reflexivity.\n  rewrite H1 in H0.\n  rewrite H in H0.\n  assert ((S n)=1).\n  omega.\n  split;trivial.\n  inversion H2.\n  rewrite H4 in H.\n  simpl in H.\n  omega.\nQed.\n\nLemma plus_minus_lemma1 : forall (y x:nat),(x+y-y=x).\n  induction y;intros;rewrite plus_comm;simpl.\n  auto with arith.\n  rewrite plus_comm.\n  apply IHy.\nQed.\n\nLemma mult_minus_lemma1 : forall (a n:nat),a*n-n = (a-1)*n.\n  intros.\n  induction a.\n  simpl.\n  trivial.\n  replace (S a*n) with (n+a*n);try (auto with arith).\n  rewrite plus_comm.\n  rewrite plus_minus_lemma1.\n  simpl.\n  rewrite <- minus_n_O;trivial.\nQed.\n\nLemma mult_lemma6 : forall (a b n:nat),(n <> O)->(n*a=n*b)->(a=b).\n  induction a.\n  intros;rewrite <- mult_n_O in H0; generalize (mult_lemma2 n b); intros Hl2; elim Hl2; intros; (auto || elim H ; auto).\n  intros b n H.\n  rewrite mult_comm;simpl;rewrite mult_comm;intro.\n  assert (n*a = n*b-n).\n  apply plus_minus;auto.\n  assert (a*n=(b-1)*n).\n  rewrite <- mult_minus_lemma1;rewrite mult_comm;rewrite (mult_comm b n);trivial.\n  assert (a=(b-1)).\n  apply (IHa (b-1) n);trivial.\n  rewrite mult_comm;rewrite (mult_comm n (b-1));trivial.\n  destruct b;simpl in H3.\n  rewrite H3 in H0;rewrite (mult_comm n 0) in H0;rewrite plus_comm in H0;simpl in H0;elim H;trivial.\n  rewrite <- minus_n_O in H3;auto.\nQed.\n\n",
                "context_tokens": 736,
                "proof_start_offset": 3621,
                "proof_end_offset": 3705,
                "proof": "Lemma mult_lemma7 : forall (x y z t:nat),x*y*(z*t)=z*(x*y*t).\nProof.\nintros.\nring.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma mult_lemma7 : forall (x y z t:nat),x*y*(z*t)=z*(x*y*t).\nProof.\n  induction x;simpl;intros;auto.\n  rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm; rewrite mult_comm;rewrite mult_comm; rewrite mult_comm; rewrite mult_comm; rewrite mult_comm; rewrite mult_comm; rewrite mult_comm; rewrite mult_comm; rewrite mult_comm; rewrite mult_comm; rewrite mult_comm; rewrite mult_comm; rewrite mult_comm; rewrite mult_comm; rewrite mult_comm; rewrite mult_comm; rewrite mult_comm; rewrite mult_comm; rewrite mult_comm; rewrite multQed.",
                    "Lemma mult_lemma7 : forall (x y z t:nat),x*y*(z*t)=z*(x*y*t).\nProof.\n intros.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_comm.\n rewrite plus_Qed.",
                    "Lemma mult_lemma7 : forall (x y z t:nat),x*y*(z*t)=z*(x*y*t).\nProof.\n  intros;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm; rewrite plus_comm;rewrite plus_comm;rewrite plus_comm; rewrite plus_comm;rewrite plus_comm;rewrite plus_comm; rewrite plus_comm; rewrite plus_comm; rewrite plus_comm; rewrite plus_comm; rewrite plus_comm; rewrite plus_comm; rewrite plus_comm; rewrite plus_comm; rewrite plus_comm; rewrite plus_comm; rewrite plus_comm; rewrite plus_comm; rewrite plus_comm; rewrite plus_comm; rewrite plus_comm; rewrite plus_comm;Qed.",
                    "Lemma mult_lemma7 : forall (x y z t:nat),x*y*(z*t)=z*(x*y*t).\nProof.\n  induction a.\n  simpl.\n  trivial.\n  apply mult_lemma_1; auto.\n  apply mult_lemma_1; auto.\n  apply mult_lemma_1; auto.\n  apply mult_lemma_1; auto.\n  apply mult_lemma_2; auto.\n  apply mult_lemma_2; auto.\n  apply mult_lemma_2; auto.\n  apply mult_lemma_2; auto.\n  apply mult_lemma_2; auto.\n  apply mult_lemma_2; auto.\n  apply mult_lemma_2; auto.\n  apply mult_lemma_2; auto.\n  apply mult_lemma_2; auto.\n  apply mult_lemma_3; auto.\n  apply mult_lemma_3; auto.\n  apply mult_lemma_2; auto.\n  apply mult_lemma_3; auto.\n  apply mult_lemma_2; auto.\n  apply mult_lemma_3; auto.\n  apply mult_lemma_2; auto.\n  apply mult_lemma_3; auto.\n  apply mult_lemma_3; auto.\n  apply mult_lemma_2; auto.\n  apply mult_lemma_3; auto.\n  apply multQed.",
                    "Lemma mult_lemma7 : forall (x y z t:nat),x*y*(z*t)=z*(x*y*t).\nProof.\n  induction x;simpl;intros;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_assoc;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_assoc;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_comm;auto.\n  rewrite mult_assoc;auto.\n  rewrite mult_assoc;auto.\n  rewrite multQed."
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": ".\n\nLemma mult_lemma4 : forall (n m:nat),n=n*m -> n=O \\/ m=1.\n  intros n m.\n  case n.\n  left;trivial.\n  intros.\n  right.\n  destruct m.\n  rewrite mult_comm in H.\n  discriminate.\n  destruct m;trivial.\n  assert ((S n0)<(S n0)*(S (S m))).\n  apply mult_lemma3;intros;auto with arith.\n  rewrite <- H in H0.\n  elim (lt_irrefl (S n0) H0).\nQed.\n\nLemma mult_lemma5 : forall (n m:nat),((n * m) =1)->(n=1)/\\(m=1).\n  induction n;simpl;intros;try discriminate.\n  induction m.\n  rewrite mult_comm in H.\n  simpl in H;discriminate.\n  assert ((S n)<=((S n)*(S m))).\n  apply mult_lemma1;discriminate.\n  assert (((S n)*(S m))=((S m)+n*(S m))).\n  reflexivity.\n  rewrite H1 in H0.\n  rewrite H in H0.\n  assert ((S n)=1).\n  omega.\n  split;trivial.\n  inversion H2.\n  rewrite H4 in H.\n  simpl in H.\n  omega.\nQed.\n\nLemma plus_minus_lemma1 : forall (y x:nat),(x+y-y=x).\n  induction y;intros;rewrite plus_comm;simpl.\n  auto with arith.\n  rewrite plus_comm.\n  apply IHy.\nQed.\n\nLemma mult_minus_lemma1 : forall (a n:nat),a*n-n = (a-1)*n.\n  intros.\n  induction a.\n  simpl.\n  trivial.\n  replace (S a*n) with (n+a*n);try (auto with arith).\n  rewrite plus_comm.\n  rewrite plus_minus_lemma1.\n  simpl.\n  rewrite <- minus_n_O;trivial.\nQed.\n\nLemma mult_lemma6 : forall (a b n:nat),(n <> O)->(n*a=n*b)->(a=b).\n  induction a.\n  intros;rewrite <- mult_n_O in H0; generalize (mult_lemma2 n b); intros Hl2; elim Hl2; intros; (auto || elim H ; auto).\n  intros b n H.\n  rewrite mult_comm;simpl;rewrite mult_comm;intro.\n  assert (n*a = n*b-n).\n  apply plus_minus;auto.\n  assert (a*n=(b-1)*n).\n  rewrite <- mult_minus_lemma1;rewrite mult_comm;rewrite (mult_comm b n);trivial.\n  assert (a=(b-1)).\n  apply (IHa (b-1) n);trivial.\n  rewrite mult_comm;rewrite (mult_comm n (b-1));trivial.\n  destruct b;simpl in H3.\n  rewrite H3 in H0;rewrite (mult_comm n 0) in H0;rewrite plus_comm in H0;simpl in H0;elim H;trivial.\n  rewrite <- minus_n_O in H3;auto.\nQed.\n\nLemma mult_lemma7 : forall (x y z t:nat),x*y*(z*t)=z*(x*y*t).\n  intros.\n  ring.\nQed.\n\n",
                "context_tokens": 744,
                "proof_start_offset": 3707,
                "proof_end_offset": 3783,
                "proof": "Lemma minus_lemma1 : forall (a b:nat),(S a-S b)<S a.\nProof.\nintros.\nomega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma minus_lemma1 : forall (a b:nat),(S a-S b)<S a.\nintros.\nunfold mult_left;simpl;auto with arith.\nQed.",
                    "Lemma minus_lemma1 : forall (a b:nat),(S a-S b)<S a.\nintros.\n  unfold mult_comm;rewrite mult_assoc;rewrite mult_comm;rewrite mult_comm;rewrite mult_assoc; rewrite mult_comm; rewrite mult_comm; rewrite mult_assoc; rewrite mult_comm; rewrite mult_comm; rewrite mult_comm; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_comm; rewrite mult_comm; rewrite mult_comm; rewrite mult_comm; rewrite mult_comm; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_comm; rewrite mult_comm; rewrite mult_comm; rewrite mult_comm; rewrite mult_comm; rewrite mult_assoc; rewrite mult_comm; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_comm; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_comm; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite multQed.",
                    "Lemma minus_lemma1 : forall (a b:nat),(S a-S b)<S a.\nintros.\n  ring.\nQed.",
                    "Lemma minus_lemma1 : forall (a b:nat),(S a-S b)<S a.\nintros.\n  unfold mult_comm;simpl;auto.\n  omega.\n  omega.\nQed.",
                    "Lemma minus_lemma1 : forall (a b:nat),(S a-S b)<S a.\nProof.\n  intros.\n  apply mult_left_lemma;intros.\n  rewrite mult_comm;simpl;rewrite mult_comm;simpl;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_comm;rewrite mult_assoc;rewrite mult_assoc;rewrite mult_comm; rewrite mult_comm; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_comm; rewrite mult_comm; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_comm; rewrite mult_comm; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_comm; rewrite mult_comm; rewrite mult_comm; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_comm; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_comm; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc; rewrite mult_assoc;Qed."
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": ".\n  case n.\n  left;trivial.\n  intros.\n  right.\n  destruct m.\n  rewrite mult_comm in H.\n  discriminate.\n  destruct m;trivial.\n  assert ((S n0)<(S n0)*(S (S m))).\n  apply mult_lemma3;intros;auto with arith.\n  rewrite <- H in H0.\n  elim (lt_irrefl (S n0) H0).\nQed.\n\nLemma mult_lemma5 : forall (n m:nat),((n * m) =1)->(n=1)/\\(m=1).\n  induction n;simpl;intros;try discriminate.\n  induction m.\n  rewrite mult_comm in H.\n  simpl in H;discriminate.\n  assert ((S n)<=((S n)*(S m))).\n  apply mult_lemma1;discriminate.\n  assert (((S n)*(S m))=((S m)+n*(S m))).\n  reflexivity.\n  rewrite H1 in H0.\n  rewrite H in H0.\n  assert ((S n)=1).\n  omega.\n  split;trivial.\n  inversion H2.\n  rewrite H4 in H.\n  simpl in H.\n  omega.\nQed.\n\nLemma plus_minus_lemma1 : forall (y x:nat),(x+y-y=x).\n  induction y;intros;rewrite plus_comm;simpl.\n  auto with arith.\n  rewrite plus_comm.\n  apply IHy.\nQed.\n\nLemma mult_minus_lemma1 : forall (a n:nat),a*n-n = (a-1)*n.\n  intros.\n  induction a.\n  simpl.\n  trivial.\n  replace (S a*n) with (n+a*n);try (auto with arith).\n  rewrite plus_comm.\n  rewrite plus_minus_lemma1.\n  simpl.\n  rewrite <- minus_n_O;trivial.\nQed.\n\nLemma mult_lemma6 : forall (a b n:nat),(n <> O)->(n*a=n*b)->(a=b).\n  induction a.\n  intros;rewrite <- mult_n_O in H0; generalize (mult_lemma2 n b); intros Hl2; elim Hl2; intros; (auto || elim H ; auto).\n  intros b n H.\n  rewrite mult_comm;simpl;rewrite mult_comm;intro.\n  assert (n*a = n*b-n).\n  apply plus_minus;auto.\n  assert (a*n=(b-1)*n).\n  rewrite <- mult_minus_lemma1;rewrite mult_comm;rewrite (mult_comm b n);trivial.\n  assert (a=(b-1)).\n  apply (IHa (b-1) n);trivial.\n  rewrite mult_comm;rewrite (mult_comm n (b-1));trivial.\n  destruct b;simpl in H3.\n  rewrite H3 in H0;rewrite (mult_comm n 0) in H0;rewrite plus_comm in H0;simpl in H0;elim H;trivial.\n  rewrite <- minus_n_O in H3;auto.\nQed.\n\nLemma mult_lemma7 : forall (x y z t:nat),x*y*(z*t)=z*(x*y*t).\n  intros.\n  ring.\nQed.\n\nLemma minus_lemma1 : forall (a b:nat),(S a-S b)<S a.\n  intros.\n  omega.\nQed.\n\n",
                "context_tokens": 744,
                "proof_start_offset": 3785,
                "proof_end_offset": 3863,
                "proof": "Lemma minus_lemma2 : forall (n m:nat),(n<=m)->(n-m=O).\nProof.\nintros.\nomega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma minus_lemma2 : forall (n m:nat),(n<=m)->(n-m=O).\n  intros.\n  omega.\nQed.",
                    "Lemma minus_lemma2 : forall (n m:nat),(n<=m)->(n-m=O).\n  intros.\n  omega.\nQed.",
                    "Lemma minus_lemma2 : forall (n m:nat),(n<=m)->(n-m=O).\n  intros.\n  omega.\nQed.",
                    "Lemma minus_lemma2 : forall (n m:nat),(n<=m)->(n-m=O).\n  intros.\n  omega.\nQed.",
                    "Lemma minus_lemma2 : forall (n m:nat),(n<=m)->(n-m=O).\n  intros.\n  omega.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": "0)<(S n0)*(S (S m))).\n  apply mult_lemma3;intros;auto with arith.\n  rewrite <- H in H0.\n  elim (lt_irrefl (S n0) H0).\nQed.\n\nLemma mult_lemma5 : forall (n m:nat),((n * m) =1)->(n=1)/\\(m=1).\n  induction n;simpl;intros;try discriminate.\n  induction m.\n  rewrite mult_comm in H.\n  simpl in H;discriminate.\n  assert ((S n)<=((S n)*(S m))).\n  apply mult_lemma1;discriminate.\n  assert (((S n)*(S m))=((S m)+n*(S m))).\n  reflexivity.\n  rewrite H1 in H0.\n  rewrite H in H0.\n  assert ((S n)=1).\n  omega.\n  split;trivial.\n  inversion H2.\n  rewrite H4 in H.\n  simpl in H.\n  omega.\nQed.\n\nLemma plus_minus_lemma1 : forall (y x:nat),(x+y-y=x).\n  induction y;intros;rewrite plus_comm;simpl.\n  auto with arith.\n  rewrite plus_comm.\n  apply IHy.\nQed.\n\nLemma mult_minus_lemma1 : forall (a n:nat),a*n-n = (a-1)*n.\n  intros.\n  induction a.\n  simpl.\n  trivial.\n  replace (S a*n) with (n+a*n);try (auto with arith).\n  rewrite plus_comm.\n  rewrite plus_minus_lemma1.\n  simpl.\n  rewrite <- minus_n_O;trivial.\nQed.\n\nLemma mult_lemma6 : forall (a b n:nat),(n <> O)->(n*a=n*b)->(a=b).\n  induction a.\n  intros;rewrite <- mult_n_O in H0; generalize (mult_lemma2 n b); intros Hl2; elim Hl2; intros; (auto || elim H ; auto).\n  intros b n H.\n  rewrite mult_comm;simpl;rewrite mult_comm;intro.\n  assert (n*a = n*b-n).\n  apply plus_minus;auto.\n  assert (a*n=(b-1)*n).\n  rewrite <- mult_minus_lemma1;rewrite mult_comm;rewrite (mult_comm b n);trivial.\n  assert (a=(b-1)).\n  apply (IHa (b-1) n);trivial.\n  rewrite mult_comm;rewrite (mult_comm n (b-1));trivial.\n  destruct b;simpl in H3.\n  rewrite H3 in H0;rewrite (mult_comm n 0) in H0;rewrite plus_comm in H0;simpl in H0;elim H;trivial.\n  rewrite <- minus_n_O in H3;auto.\nQed.\n\nLemma mult_lemma7 : forall (x y z t:nat),x*y*(z*t)=z*(x*y*t).\n  intros.\n  ring.\nQed.\n\nLemma minus_lemma1 : forall (a b:nat),(S a-S b)<S a.\n  intros.\n  omega.\nQed.\n\nLemma minus_lemma2 : forall (n m:nat),(n<=m)->(n-m=O).\n  intros.\n  omega.\nQed.\n\n",
                "context_tokens": 736,
                "proof_start_offset": 3865,
                "proof_end_offset": 4270,
                "proof": "Lemma mult_minus_lemma2 : forall (x y z:nat),(x*(y-z))=(x*y-x*z).\nProof.\nintros.\ncase (le_lt_dec y z);intro.\nrewrite (minus_lemma2 y z l);rewrite mult_comm;simpl;rewrite minus_lemma2;trivial;auto with arith.\nassert (y=z+(y-z)).\nrewrite <- (le_plus_minus z y);try (auto with arith).\nreplace (x*y) with (x*(z+(y-z))).\nrewrite mult_plus_distr_l;rewrite minus_plus;trivial.\nrewrite <- H;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma mult_minus_lemma2 : forall (x y z:nat),(x*(y-z))=(x*y-x*z).\n intros.\n  omega.\nQed.",
                    "Lemma mult_minus_lemma2 : forall (x y z:nat),(x*(y-z))=(x*y-x*z).\n intros.\n  omega.\nQed.",
                    "Lemma mult_minus_lemma2 : forall (x y z:nat),(x*(y-z))=(x*y-x*z).\n  intros.\n  omega.\nQed.",
                    "Lemma mult_minus_lemma2 : forall (x y z:nat),(x*(y-z))=(x*y-x*z).\n  intros.\n  omega.\nQed.",
                    "Lemma mult_minus_lemma2 : forall (x y z:nat),(x*(y-z))=(x*y-x*z).\n  intros.\n  omega.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": "\n  reflexivity.\n  rewrite H1 in H0.\n  rewrite H in H0.\n  assert ((S n)=1).\n  omega.\n  split;trivial.\n  inversion H2.\n  rewrite H4 in H.\n  simpl in H.\n  omega.\nQed.\n\nLemma plus_minus_lemma1 : forall (y x:nat),(x+y-y=x).\n  induction y;intros;rewrite plus_comm;simpl.\n  auto with arith.\n  rewrite plus_comm.\n  apply IHy.\nQed.\n\nLemma mult_minus_lemma1 : forall (a n:nat),a*n-n = (a-1)*n.\n  intros.\n  induction a.\n  simpl.\n  trivial.\n  replace (S a*n) with (n+a*n);try (auto with arith).\n  rewrite plus_comm.\n  rewrite plus_minus_lemma1.\n  simpl.\n  rewrite <- minus_n_O;trivial.\nQed.\n\nLemma mult_lemma6 : forall (a b n:nat),(n <> O)->(n*a=n*b)->(a=b).\n  induction a.\n  intros;rewrite <- mult_n_O in H0; generalize (mult_lemma2 n b); intros Hl2; elim Hl2; intros; (auto || elim H ; auto).\n  intros b n H.\n  rewrite mult_comm;simpl;rewrite mult_comm;intro.\n  assert (n*a = n*b-n).\n  apply plus_minus;auto.\n  assert (a*n=(b-1)*n).\n  rewrite <- mult_minus_lemma1;rewrite mult_comm;rewrite (mult_comm b n);trivial.\n  assert (a=(b-1)).\n  apply (IHa (b-1) n);trivial.\n  rewrite mult_comm;rewrite (mult_comm n (b-1));trivial.\n  destruct b;simpl in H3.\n  rewrite H3 in H0;rewrite (mult_comm n 0) in H0;rewrite plus_comm in H0;simpl in H0;elim H;trivial.\n  rewrite <- minus_n_O in H3;auto.\nQed.\n\nLemma mult_lemma7 : forall (x y z t:nat),x*y*(z*t)=z*(x*y*t).\n  intros.\n  ring.\nQed.\n\nLemma minus_lemma1 : forall (a b:nat),(S a-S b)<S a.\n  intros.\n  omega.\nQed.\n\nLemma minus_lemma2 : forall (n m:nat),(n<=m)->(n-m=O).\n  intros.\n  omega.\nQed.\n\nLemma mult_minus_lemma2 : forall (x y z:nat),(x*(y-z))=(x*y-x*z).\n  intros.\n  case (le_lt_dec y z);intro.\n  rewrite (minus_lemma2 y z l);rewrite mult_comm;simpl;rewrite minus_lemma2;trivial;auto with arith.\n  assert (y=z+(y-z)).\n  rewrite <- (le_plus_minus z y);try (auto with arith).\n  replace (x*y) with (x*(z+(y-z))).\n  rewrite mult_plus_distr_l;rewrite minus_plus;trivial.\n  rewrite <- H;trivial.\nQed.\n\n",
                "context_tokens": 735,
                "proof_start_offset": 4272,
                "proof_end_offset": 4480,
                "proof": "Lemma plus_minus_lemma2 : forall (x y z:nat),(y<=x)->(x-y+z)=(x+z-y).\nProof.\nintros.\nrewrite (le_plus_minus y x);try (auto with arith).\nrewrite minus_plus;rewrite <- plus_assoc;rewrite minus_plus;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma plus_minus_lemma2 : forall (x y z:nat),(y<=x)->(x-y+z)=(x+z-y).\n intros.\n  rewrite <- (le_plus_lemma2 y z l);auto with arith.\n  rewrite plus_comm;auto with arith.\n  rewrite plus_comm;auto with arith.\n  rewrite plus_comm;auto with arith.\n  rewrite plus_comm;auto with arith.\n  rewrite plus_comm;auto with arith.\n  rewrite plus_comm;auto with arith.\n  rewrite plus_comm;auto with arith.\n  rewrite plus_comm;auto with arith.\n  rewrite plus_comm;auto with arith.\n  rewrite plus_comm;auto with arith.\n  rewrite plus_comm;auto with arith.\n  rewrite plus_comm;auto with arith.\n  rewrite plus_comm;auto with arith.\n  rewrite plus_comm;auto with arith.\n  rewrite plus_comm;auto with arith.\n  rewrite plus_comm;auto with arith.\n  rewrite plus_comm;auto with arith.\n  rewrite plus_comm;auto with arith.\n  rewrite plus_comm;auto with arith.\n  rewrite plus_comm;auto with arith.\n  rewrite plus_comm;auto with arith.\n  rewrite plus_comm;auto with arith.\n  rewrite plus_comm;auto with arith.\n  rewrite plus_commQed.",
                    "Lemma plus_minus_lemma2 : forall (x y z:nat),(y<=x)->(x-y+z)=(x+z-y).\n  intros.\n  rewrite mult_minus_distr_l;trivial.\n  replace (x+(y+y)).\n  rewrite mult_minus_distr_l;trivial.\n  replace (x+(y-y)).\n  rewrite mult_minus_distr_l;trivial.\n  replace (x+(y-y)).\n  rewrite mult_minus_distr_l;trivial.\n  replace (x+(y-y)) with (x+(y-y)).\n  rewrite mult_minus_distr_l;trivial.\n  replace (x+(y-y))).\n  rewrite mult_minus_distr_l;trivial.\n  replace (x+(y-y)) with (x+(y-y-y)).\n  rewrite mult_minus_distr_l;trivial.\n  replace (x+(y-y-y)).\n  rewrite mult_minus_distr_l;trivial.\n  replace (x+(y-y)) with (y-y-y)).\n  rewrite mult_minus_distr_l;trivial.\n  replace (x+(y-y)) with (x-y-y)).\n  rewrite mult_minus_distr_l;trivial.\n  replace (x+(y-y-y)).\n  rewrite mult_minusQed.",
                    "Lemma plus_minus_lemma2 : forall (x y z:nat),(y<=x)->(x-y+z)=(x+z-y).\n  intros.\n  apply plus_le_trans with (y*z) (y+z)).\n  rewrite mult_plus_comm;rewrite mult_plus_distr_r;trivial.\n  rewrite mult_comm;rewrite mult_comm;trivial.\n  rewrite mult_assoc;trivial.\n  rewrite mult_assoc;trivial.\n  rewrite mult_comm;trivial.\n  rewrite mult_assoc;trivial.\n  rewrite mult_comm;trivial.\n  rewrite mult_assoc;trivial.\n  rewrite mult_assoc;trivial.\n  rewrite mult_comm;trivial.\n  rewrite mult_assoc;trivial.\n  rewrite mult_assoc;trivial.\n  rewrite mult_assoc;trivial.\n  rewrite mult_assoc;trivial.\n  rewrite mult_comm;trivial.\n  rewrite mult_assoc;trivial.\n  rewrite mult_comm;trivial.\n  rewrite mult_comm;trivial.\n  rewrite mult_comm;trivial.\n  rewrite mult_comm;trivial.\n  rewrite mult_comm;trivial.\n  rewrite mult_comm;trivial.\n  rewrite mult_comm;trivial.\n  rewrite mult_comm;trivial.\n  rewrite mult_comm;trivial.\n  rewrite mult_assoc;trivial.\n  rewrite mult_comm;trivial.\n  rewrite multQed.",
                    "Lemma plus_minus_lemma2 : forall (x y z:nat),(y<=x)->(x-y+z)=(x+z-y).\n intros.\n  omega.\nQed.",
                    "Lemma plus_minus_lemma2 : forall (x y z:nat),(y<=x)->(x-y+z)=(x+z-y).\n  intros.\n  omega.\n  omega.\nQed."
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": "-y=x).\n  induction y;intros;rewrite plus_comm;simpl.\n  auto with arith.\n  rewrite plus_comm.\n  apply IHy.\nQed.\n\nLemma mult_minus_lemma1 : forall (a n:nat),a*n-n = (a-1)*n.\n  intros.\n  induction a.\n  simpl.\n  trivial.\n  replace (S a*n) with (n+a*n);try (auto with arith).\n  rewrite plus_comm.\n  rewrite plus_minus_lemma1.\n  simpl.\n  rewrite <- minus_n_O;trivial.\nQed.\n\nLemma mult_lemma6 : forall (a b n:nat),(n <> O)->(n*a=n*b)->(a=b).\n  induction a.\n  intros;rewrite <- mult_n_O in H0; generalize (mult_lemma2 n b); intros Hl2; elim Hl2; intros; (auto || elim H ; auto).\n  intros b n H.\n  rewrite mult_comm;simpl;rewrite mult_comm;intro.\n  assert (n*a = n*b-n).\n  apply plus_minus;auto.\n  assert (a*n=(b-1)*n).\n  rewrite <- mult_minus_lemma1;rewrite mult_comm;rewrite (mult_comm b n);trivial.\n  assert (a=(b-1)).\n  apply (IHa (b-1) n);trivial.\n  rewrite mult_comm;rewrite (mult_comm n (b-1));trivial.\n  destruct b;simpl in H3.\n  rewrite H3 in H0;rewrite (mult_comm n 0) in H0;rewrite plus_comm in H0;simpl in H0;elim H;trivial.\n  rewrite <- minus_n_O in H3;auto.\nQed.\n\nLemma mult_lemma7 : forall (x y z t:nat),x*y*(z*t)=z*(x*y*t).\n  intros.\n  ring.\nQed.\n\nLemma minus_lemma1 : forall (a b:nat),(S a-S b)<S a.\n  intros.\n  omega.\nQed.\n\nLemma minus_lemma2 : forall (n m:nat),(n<=m)->(n-m=O).\n  intros.\n  omega.\nQed.\n\nLemma mult_minus_lemma2 : forall (x y z:nat),(x*(y-z))=(x*y-x*z).\n  intros.\n  case (le_lt_dec y z);intro.\n  rewrite (minus_lemma2 y z l);rewrite mult_comm;simpl;rewrite minus_lemma2;trivial;auto with arith.\n  assert (y=z+(y-z)).\n  rewrite <- (le_plus_minus z y);try (auto with arith).\n  replace (x*y) with (x*(z+(y-z))).\n  rewrite mult_plus_distr_l;rewrite minus_plus;trivial.\n  rewrite <- H;trivial.\nQed.\n\nLemma plus_minus_lemma2 : forall (x y z:nat),(y<=x)->(x-y+z)=(x+z-y).\n  intros.\n  rewrite (le_plus_minus y x);try (auto with arith).\n  rewrite minus_plus;rewrite <- plus_assoc;rewrite minus_plus;trivial.\nQed.\n\n",
                "context_tokens": 734,
                "proof_start_offset": 4482,
                "proof_end_offset": 4694,
                "proof": "Lemma minus_minus_lemma1 : forall (x y z:nat),(z<=y)->(x-(y-z))=(x+z-y).\nProof.\nintros.\nrewrite (le_plus_minus z y);trivial.\nrewrite minus_plus;rewrite plus_comm;rewrite <- minus_plus_simpl_l_reverse;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma minus_minus_lemma1 : forall (x y z:nat),(z<=y)->(x-(y-z))=(x+z-y).\n  intros.\n  rewrite (le_plus_comm x y);try (auto with arith).\n  rewrite minus_plus_assoc;rewrite <- minus_plus_minus;trivial.\n  rewrite <- minus_plus_minus;trivial.\n  rewrite <- minus_plus_minus;trivial.\n  rewrite <- minus_plus_minus;trivial.\n  rewrite <- minus_plus_minus;trivial.\n  rewrite <- minus_plus_minus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite <- minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite <- minus_plus_minus;trivial.\n  rewrite <- minus_plus;trivial.\n  rewrite <- minus_plus;trivial.\n  rewrite <- minus_plus_minus;trivial.\n  rewrite <- minus_plus_minus;trivial.\n  rewrite <- minus_plus;trivial.\n  rewrite <- minus_plus;trivial.\n  rewrite <- minus_plus_minus;trivial.\n  rewrite <- minus_plus;trivial.\n  rewrite <- minus_plus;trivial.\n  rewrite <- minus_plus;trivial.\n  rewrite <- minus_plus;trivial.\n  rewrite <- minus_plus;trivial.\n  rewrite <- minus_plus;trivial.\n  rewrite <- minusQed.",
                    "Lemma minus_minus_lemma1 : forall (x y z:nat),(z<=y)->(x-(y-z))=(x+z-y).\n  intros.\n  apply minus_le_minus_1;auto with arith.\n  rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm; rewrite plus_comm; rewrite plus_comm; rewrite plus_comm; rewrite plus_comm; rewrite plus_comm;rewrite plus_Qed.",
                    "Lemma minus_minus_lemma1 : forall (x y z:nat),(z<=y)->(x-(y-z))=(x+z-y).\n  intros.\n  rewrite (le_plus_minus y x);try (auto with arith).\n  rewrite plus_plus_minus;trivial.\n  rewrite <- plus_comm;rewrite plus_minus_minus;trivial.\n  rewrite plus_comm;rewrite plus_minus_minus;trivial.\n  rewrite <- plus_minus_minus;trivial.\n  rewrite plus_minus_minus;trivial.\n  rewrite plus_minus_minus;trivial.\n  rewrite plus_minus_minus;trivial.\n  rewrite plus_minus_minus;trivial.\n  rewrite plus_minus_minus;trivial.\n  rewrite plus_minus_minus;trivial.\n  rewrite plus_minus_minus;trivial.\n  rewrite plus_minus_minus;trivial.\n  rewrite plus_minus_minus;trivial.\n  rewrite plus_minus_minus;trivial.\n  rewrite plus_minus_minus;trivial.\n  rewrite plus_minus_minus;trivial.\n  rewrite plus_minus_minus;trivial.\n  rewrite plus_minus;trivial.\n  rewrite plus_minus_minus;trivial.\n  rewrite plus_minus_minus;trivial.\n  rewrite plus_minus;trivial.\n  rewrite plus_minus_minus;trivial.\n  rewrite plus_minus;trivial.Qed.",
                    "Lemma minus_minus_lemma1 : forall (x y z:nat),(z<=y)->(x-(y-z))=(x+z-y).\n  intros.\n  rewrite (le_plus_lemma2 y z);try (auto with arith).\n  rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_comm;rewrite plus_commQed.",
                    "Lemma minus_minus_lemma1 : forall (x y z:nat),(z<=y)->(x-(y-z))=(x+z-y).\n  intros.\n  rewrite <- (le_plus_minus y z);try (auto with arith).\n  rewrite minus_plus_minus;rewrite <- plus_minus_distr_r;trivial.\n  rewrite <- plus_plus_minus;trivial.\n  rewrite <- plus_minus_minus;trivial.\n  rewrite <- plus_minus_minus;trivial.\n  rewrite <- plus_plus_minus;trivial.\n  rewrite <- plus_plus_minus;trivial.\n  rewrite <- plus_minus_minus;trivial.\n  rewrite <- plus_minus_minus;trivial.\n  rewrite <- plus_plus_minus;trivial.\n  rewrite <- plus_minus_minus;trivial.\n  rewrite <- plus_plus_minus;trivial.\n  rewrite <- plus_minus_minus;trivial.\n  rewrite <- plus_minus_minus;trivial.\n  rewrite <- plus_minus_minus;trivial.\n  rewrite <- plus_minus;trivial.\n  rewrite <- plus_minus;trivial.\n  rewrite <- plus_plus_minus;trivial.\n  rewrite <- plus_plus_minus;trivial.\n  rewrite <- plus_minus_minus;trivial.\n  rewrite <- plus_plus_minus;trivial.\n  rewrite <- plus_minus;trivial.\n Qed."
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": " simpl.\n  trivial.\n  replace (S a*n) with (n+a*n);try (auto with arith).\n  rewrite plus_comm.\n  rewrite plus_minus_lemma1.\n  simpl.\n  rewrite <- minus_n_O;trivial.\nQed.\n\nLemma mult_lemma6 : forall (a b n:nat),(n <> O)->(n*a=n*b)->(a=b).\n  induction a.\n  intros;rewrite <- mult_n_O in H0; generalize (mult_lemma2 n b); intros Hl2; elim Hl2; intros; (auto || elim H ; auto).\n  intros b n H.\n  rewrite mult_comm;simpl;rewrite mult_comm;intro.\n  assert (n*a = n*b-n).\n  apply plus_minus;auto.\n  assert (a*n=(b-1)*n).\n  rewrite <- mult_minus_lemma1;rewrite mult_comm;rewrite (mult_comm b n);trivial.\n  assert (a=(b-1)).\n  apply (IHa (b-1) n);trivial.\n  rewrite mult_comm;rewrite (mult_comm n (b-1));trivial.\n  destruct b;simpl in H3.\n  rewrite H3 in H0;rewrite (mult_comm n 0) in H0;rewrite plus_comm in H0;simpl in H0;elim H;trivial.\n  rewrite <- minus_n_O in H3;auto.\nQed.\n\nLemma mult_lemma7 : forall (x y z t:nat),x*y*(z*t)=z*(x*y*t).\n  intros.\n  ring.\nQed.\n\nLemma minus_lemma1 : forall (a b:nat),(S a-S b)<S a.\n  intros.\n  omega.\nQed.\n\nLemma minus_lemma2 : forall (n m:nat),(n<=m)->(n-m=O).\n  intros.\n  omega.\nQed.\n\nLemma mult_minus_lemma2 : forall (x y z:nat),(x*(y-z))=(x*y-x*z).\n  intros.\n  case (le_lt_dec y z);intro.\n  rewrite (minus_lemma2 y z l);rewrite mult_comm;simpl;rewrite minus_lemma2;trivial;auto with arith.\n  assert (y=z+(y-z)).\n  rewrite <- (le_plus_minus z y);try (auto with arith).\n  replace (x*y) with (x*(z+(y-z))).\n  rewrite mult_plus_distr_l;rewrite minus_plus;trivial.\n  rewrite <- H;trivial.\nQed.\n\nLemma plus_minus_lemma2 : forall (x y z:nat),(y<=x)->(x-y+z)=(x+z-y).\n  intros.\n  rewrite (le_plus_minus y x);try (auto with arith).\n  rewrite minus_plus;rewrite <- plus_assoc;rewrite minus_plus;trivial.\nQed.\n\nLemma minus_minus_lemma1 : forall (x y z:nat),(z<=y)->(x-(y-z))=(x+z-y).\n  intros.\n  rewrite (le_plus_minus z y);trivial.\n  rewrite minus_plus;rewrite plus_comm;rewrite <- minus_plus_simpl_l_reverse;trivial.\nQed.\n\n",
                "context_tokens": 739,
                "proof_start_offset": 4696,
                "proof_end_offset": 4828,
                "proof": "Lemma minus_minus_lemma2 : forall (x y z:nat),(x-y-z)=(x-(y+z)).\nProof.\ninduction x;simpl;trivial.\nintros.\ncase y;simpl;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma minus_minus_lemma2 : forall (x y z:nat),(x-y-z)=(x-(y+z)).\n  intros.\n  rewrite (le_plus_comm x y);trivial.\n  rewrite (le_plus_minus z x);trivial.\n  rewrite plus_comm;rewrite <- minus_plus_minus;trivial.\n  rewrite plus_comm;rewrite plus_minus_minus;trivial.\n  rewrite plus_minus_minus;trivial.\n  rewrite plus_minus_distr_l;trivial.\n  rewrite plus_minus_distr_l;trivial.\n  rewrite plus_minus_minus;trivial.\n  rewrite plus_minus_minus;trivial.\n  rewrite plus_minus_distr_l;trivial.\n  rewrite plus_minus_distr_reverse;trivial.\n  rewrite plus_minus_distr_reverse;trivial.\n  rewrite plus_minus_distr_reverse;trivial.\n  rewrite plus_minus_distr_reverse;trivial.\n  rewrite plus_minus_distr_reverse;trivial.\n  rewrite plus_minus_distr_reverse;trivial.\n  rewrite plus_minus_distr_reverse;trivial.\n  rewrite plus_minus_distr_reverse;trivial.\n  rewrite plus_minus_distr_reverse;trivial.\n  rewrite plus_minus_distr_reverse;trivial.\n  rewrite plus_minus_distr_reverse;Qed.",
                    "Lemma minus_minus_lemma2 : forall (x y z:nat),(x-y-z)=(x-(y+z)).\n  intros.\n  rewrite (le_plus_minus z y);trivial.\n  rewrite <- minus_plus_minus;rewrite <- minus_plus_plus;trivial.\n  rewrite <- minus_plus_plus;trivial.\n  rewrite minus_plus_minus;trivial.\n  rewrite minus_plus_minus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;Qed.",
                    "Lemma minus_minus_lemma2 : forall (x y z:nat),(x-y-z)=(x-(y+z)).\n  intros.\n  rewrite (le_plus_minus z y);trivial.\n  rewrite (le_plus_minus z y);trivial.\n  rewrite <- (le_plus_minus z y);trivial.\n  rewrite <- (le_plus_minus z z);trivial.\n  rewrite (le_plus_minus z y);trivial.\n  rewrite (le_plus_minus z y);trivial.\n  rewrite (le_plus_minus z y);trivial.\n  rewrite <- (le_plus_minus z z);trivial.\n  rewrite <- (le_plus_minus z y);trivial.\n  rewrite (le_plus_minus z z);trivial.\n  rewrite (le_plus_minus z y);trivial.\n  rewrite (le_minus z);trivial.\n  rewrite (le_plus_minus z y);trivial.\n  rewrite (le_plus_minus z y);trivial.\n  rewrite (le_plus_minus z y);trivial.\n  rewrite (le_plus_minus z y);trivial.\n  rewrite (le_plus_minus z y);trivial.\n  rewrite (le_plus_minus z y);trivial.\n  rewrite (le_minus z);trivial.\n  rewrite (le_plus_minusQed.",
                    "Lemma minus_minus_lemma2 : forall (x y z:nat),(x-y-z)=(x-(y+z)).\n  intros.\n  rewrite (le_plus_minus z x);trivial.\n  rewrite (le_plus_minus z x);trivial.\n  rewrite (le_plus_minus z x);trivial.\n  rewrite (le_minus_minus z x);trivial.\n  rewrite (le_plus_minus z x);trivial.\n  rewrite (le_plus_minus z x);trivial.\n  rewrite (le_minus_minus z x);trivial.\n  rewrite (le_minus_minus z x);trivial.\n  rewrite (le_minus z x);trivial.\n  rewrite (le_minus_minus z x);trivial.\n  rewrite (le_minus_minus z x);trivial.\n  rewrite (le_minus_minus z x);trivial.\n  rewrite (le_minus_minus z x);trivial.\n  rewrite (le_minus z x);trivial.\n  rewrite (le_minus z x);trivial.\n  rewrite (le_minus_minus z x);trivial.\n  rewrite (le_minus_minus z x);trivial.\n  rewrite (le_minus z x);trivial.\n  rewrite (le_minus_minus z x);trivial.\n  rewrite (le_minus z x);trivial.\n  rewrite (Qed.",
                    "Lemma minus_minus_lemma2 : forall (x y z:nat),(x-y-z)=(x-(y+z)).\n  intros.\n  rewrite (le_plus_minus z x);trivial.\n  rewrite minus_minus;rewrite <- minus_plus_plus;trivial.\n  rewrite minus_plus;rewrite <- minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewriteQed."
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": "_n_O;trivial.\nQed.\n\nLemma mult_lemma6 : forall (a b n:nat),(n <> O)->(n*a=n*b)->(a=b).\n  induction a.\n  intros;rewrite <- mult_n_O in H0; generalize (mult_lemma2 n b); intros Hl2; elim Hl2; intros; (auto || elim H ; auto).\n  intros b n H.\n  rewrite mult_comm;simpl;rewrite mult_comm;intro.\n  assert (n*a = n*b-n).\n  apply plus_minus;auto.\n  assert (a*n=(b-1)*n).\n  rewrite <- mult_minus_lemma1;rewrite mult_comm;rewrite (mult_comm b n);trivial.\n  assert (a=(b-1)).\n  apply (IHa (b-1) n);trivial.\n  rewrite mult_comm;rewrite (mult_comm n (b-1));trivial.\n  destruct b;simpl in H3.\n  rewrite H3 in H0;rewrite (mult_comm n 0) in H0;rewrite plus_comm in H0;simpl in H0;elim H;trivial.\n  rewrite <- minus_n_O in H3;auto.\nQed.\n\nLemma mult_lemma7 : forall (x y z t:nat),x*y*(z*t)=z*(x*y*t).\n  intros.\n  ring.\nQed.\n\nLemma minus_lemma1 : forall (a b:nat),(S a-S b)<S a.\n  intros.\n  omega.\nQed.\n\nLemma minus_lemma2 : forall (n m:nat),(n<=m)->(n-m=O).\n  intros.\n  omega.\nQed.\n\nLemma mult_minus_lemma2 : forall (x y z:nat),(x*(y-z))=(x*y-x*z).\n  intros.\n  case (le_lt_dec y z);intro.\n  rewrite (minus_lemma2 y z l);rewrite mult_comm;simpl;rewrite minus_lemma2;trivial;auto with arith.\n  assert (y=z+(y-z)).\n  rewrite <- (le_plus_minus z y);try (auto with arith).\n  replace (x*y) with (x*(z+(y-z))).\n  rewrite mult_plus_distr_l;rewrite minus_plus;trivial.\n  rewrite <- H;trivial.\nQed.\n\nLemma plus_minus_lemma2 : forall (x y z:nat),(y<=x)->(x-y+z)=(x+z-y).\n  intros.\n  rewrite (le_plus_minus y x);try (auto with arith).\n  rewrite minus_plus;rewrite <- plus_assoc;rewrite minus_plus;trivial.\nQed.\n\nLemma minus_minus_lemma1 : forall (x y z:nat),(z<=y)->(x-(y-z))=(x+z-y).\n  intros.\n  rewrite (le_plus_minus z y);trivial.\n  rewrite minus_plus;rewrite plus_comm;rewrite <- minus_plus_simpl_l_reverse;trivial.\nQed.\n\nLemma minus_minus_lemma2 : forall (x y z:nat),(x-y-z)=(x-(y+z)).\n  induction x;simpl;trivial.\n  intros.\n  case y;simpl;trivial.\nQed.\n\n",
                "context_tokens": 742,
                "proof_start_offset": 4830,
                "proof_end_offset": 4910,
                "proof": "Lemma minus_lt_lemma1 : forall (b a:nat),(a<b)->(0<b-a).\nProof.\nintros.\nomega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma minus_lt_lemma1 : forall (b a:nat),(a<b)->(0<b-a).\n  intros.\n  rewrite (le_plus_comm a b);trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus_minus;trivial.\n  rewrite minus_plus_minus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_Qed.",
                    "Lemma minus_lt_lemma1 : forall (b a:nat),(a<b)->(0<b-a).\n  intros.\n  case (le_gt_dec b a);intro.\n  rewrite (le_plus_minus_comm a);trivial.\n  rewrite (le_plus_minus_distr_l a);trivial.\n  rewrite (le_plus_minus_distr_l a);trivial.\n  rewrite (le_plus_minus_distr_l a);trivial.\n  rewrite (le_plus_minus_distr_l a);trivial.\n  rewrite (le_plus_minus_distr_l a);trivial.\n  rewrite (le_minus_minus_distr_l a);trivial.\n  rewrite (le_minus_minus_distr a);trivial.\n  rewrite (le_minus_distr_l a);trivial.\n  rewrite (le_minus_minus_distr_r a);trivial.\n  rewrite (le_minus_distr_l a);trivial.\n  rewrite (le_minus_distr_l a);trivial.\n  rewrite (le_minus_distr_r a);trivial.\n  rewrite (le_minus_minus_distr_l a);trivial.\n  rewrite (le_minus_minus_distr a);trivial.\n  rewrite (le_minus_minus_distr_l a);Qed.",
                    "Lemma minus_lt_lemma1 : forall (b a:nat),(a<b)->(0<b-a).\nintros.\n  rewrite (le_plus_comm a);trivial.\n  rewrite minus_plus_minus;trivial.\n  rewrite minus_plus_minus;trivial.\n  rewrite minus_plus_minus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus_minus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus;trivial.\n Qed.",
                    "Lemma minus_lt_lemma1 : forall (b a:nat),(a<b)->(0<b-a).\n intros.\n  rewrite minus_plus;trivial.\n  rewrite minus_plus_distr_r;trivial.\n  rewrite minus_plus_distr_l;trivial.\n  rewrite minus_plus_distr_l;trivial.\n  rewrite minus_plus_distr_l;trivial.\n  rewrite minus_plus_distr_l;trivial.\n  rewrite minus_plus_distr_l;trivial.\n  rewrite minus_plus_distr_l;trivial.\n  rewrite minus_plus_distr_l;trivial.\n  rewrite minus_plus_distr_l;trivial.\n  rewrite minus_plus_distr_l;trivial.\n  rewrite minus_plus_distr_l;trivial.\n  rewrite minus_plus_distr_r;trivial.\n  rewrite minus_plus_distr_r;trivial.\n  rewrite minus_plus_distr_l;trivial.\n  rewrite minus_plus_distr_l;trivial.\n  rewrite minus_plus_distr_l;trivial.\n  rewrite minus_plus_distr_l;trivial.\n  rewrite minus_plus_distr_l;trivial.\n  rewrite minus_plus_distr_l;trivial.\n  rewrite minus_plus_distr_l;trivial.\n  rewrite minus_plusQed.",
                    "Lemma minus_lt_lemma1 : forall (b a:nat),(a<b)->(0<b-a).\n  intros.\n  rewrite minus_plus_minus_minus.\n  rewrite minus_plus_minus.\n  rewrite minus_plus_minus.\n  rewrite minus_minus_minus.\n  rewrite minus_plus_minus.\n  rewrite minus_minus.\n  rewrite minus_minus.\n  rewrite minus_plus_minus.\n  rewrite minus_plus_minus.\n  rewrite plus_plus_minus.\n  rewrite minus_plus_minus.\n  rewrite minus_plus_minus.\n  rewrite minus_minus.\n  rewrite minus_plus_minus.\n  rewrite minus_plus_minus.\n  rewrite minus_plus_minus.\n  rewrite minus_minus.\n  rewrite plus_minus_minus.\n  rewrite minus_plus_minus.\n  rewrite minus_plus_minus.\n  rewrite minus_plus_minus.\n  rewrite plus_minus_minus.\n  rewrite minus_minus.\n  rewrite minus_minus.\n  rewrite minus_plus_minus.\n  rewrite minus_plus_minus.\n  rewrite minus_minus.\n  rewrite minus_plus_minus.\n  rewrite minus_minus.\n  rewrite minus_plus_minus.\n  rewrite minus_plus_minus.\n  rewrite minus_minus.\n  rewrite minus_plus_minus.\n  rewrite minus_plusQed."
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Export Arith.\nRequire Export ArithRing.\nRequire Export Omega.\n\nUnset Standard Proposition Elimination Names.\n\n(** We first begin with some lemmas that relates *)\n(** +, * and - that are not in the standard library *)\n",
                "context_tokens": 271,
                "proof_start_offset": 1084,
                "proof_end_offset": 1244,
                "proof": "Lemma mult_lemma1 : forall (n m:nat),(n <> O)->(m <> 0)->(n <= n*m).\nProof.\nintros.\nrewrite mult_comm.\ninduction m;simpl;auto with arith.\nelim H0;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma mult_lemma1 : forall (n m:nat),(n <> O)->(m <> 0)->(n <= n*m).\nProof.\n intros n m H.\n unfold mult in |- *.\n case (lt_dec n m).\n intro.\n apply mult_gt_0.\n assumption.\nQed.",
                    "Lemma mult_lemma1 : forall (n m:nat),(n <> O)->(m <> 0)->(n <= n*m).\nProof.\nintros n m H1 H2.\nelim (le_gt_dec n m).\nintros n H2.\nelim (le_gt_dec n m).\nintros n H2.\nelim (le_gt_dec n m).\nintros n H2.\nelim (le_gt_dec n m).\nintros n H2.\nelim (le_gt_dec n m).\nintros n H2.\nelim (le_gt_dec n m).\nintros n H2.\nelim (le_gt_dec n m).\nintros n H2.\nelim (le_gt_dec n m).\nintros n H2.\nelim (le_gt_dec n m).\nintros n H2.\nelim (le_gt_dec n m).\nintros n H3.\nelim (le_gt_dec n m).\nintros n H3.\nelim (le_gt_dec n m).\nintros n H3.\nelim (le_gt_dec n m).\nintros n H3.\nelim (le_gt_dec n m).\nintros n H4.\nelim (le_gtQed.",
                    "Lemma mult_lemma1 : forall (n m:nat),(n <> O)->(m <> 0)->(n <= n*m).\nProof.\n intros.\n unfold mult_lemma, mult_lemma, mult_lemma_1_lemma, mult_lemma_lemma_1_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_Qed.",
                    "Lemma mult_lemma1 : forall (n m:nat),(n <> O)->(m <> 0)->(n <= n*m).\nProof.\nintros n m H; induction m as [| m]; simpl in |- *.\nintros n m H; induction m as [| m]; simpl in |- *.\nintros n m H; induction m as [| m]; simpl in |- *.\nintros n m H; induction m as [| m]; simpl in |- *.\nintros n m H; induction m as [| m]; simpl in |- *.\nintros n m H; induction m as [| m]; simpl in |- *.\nintros n m H; induction m as [| m]; simpl in |- *.\nintros n m H; induction m as [| m]; simpl in |- *.\nintros m H; induction m as [| m]; simpl in |- *.\nintros n m H; induction m as [| m]; simpl in |- *.\nintros n m H; induction m as [| m]; simpl in |- *.\nintros n m H; induction m as [| m]; simpl in |- *.\nintros n m H; induction m as [| m]; simpl in |- *.\nintros n m H; induction m as [| m]; simpl in |- *.\nintros n m H; induction m as [| m]; simpl in |- *.\nintros m H; induction m as [| m]; simpl in |-Qed.",
                    "Lemma mult_lemma1 : forall (n m:nat),(n <> O)->(m <> 0)->(n <= n*m).\nProof.\n intros.\n unfold mult_1_lemma in |- *.\n intros.\n apply mult_lemma_1.\n apply mult_lemma_1_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemma_lemmaQed."
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Export Arith.\nRequire Export ArithRing.\nRequire Export Omega.\n\nUnset Standard Proposition Elimination Names.\n\n(** We first begin with some lemmas that relates *)\n(** +, * and - that are not in the standard library *)\nLemma mult_lemma1 : forall (n m:nat),(n <> O)->(m <> 0)->(n <= n*m).\n  intros.\n  rewrite mult_comm.\n  induction m;simpl;auto with arith.\n  elim H0;trivial.\nQed.\n\n",
                "context_tokens": 328,
                "proof_start_offset": 1246,
                "proof_end_offset": 1433,
                "proof": "Lemma mult_lemma2 : forall (n m:nat),(n*m = O)->(n=O)\\/(m=O).\nProof.\nintros.\ninduction n.\ntauto.\nsimpl in H.\nright.\nassert (m <= O);try omega.\nrewrite <- H.\nauto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma mult_lemma2 : forall (n m:nat),(n*m = O)->(n=O)\\/(m=O).\n  intros.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n Qed.",
                    "Lemma mult_lemma2 : forall (n m:nat),(n*m = O)->(n=O)\\/(m=O).\n  intros.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  reflexivity.\nQed.",
                    "Lemma mult_lemma2 : forall (n m:nat),(n*m = O)->(n=O)\\/(m=O).\n  intros.\n  rewrite mult_comm.\n  induction m;simpl;auto with arith.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivialQed.",
                    "Lemma mult_lemma2 : forall (n m:nat),(n*m = O)->(n=O)\\/(m=O).\n  intros.\n  rewrite mult_comm.\n  induction m;simpl;auto with arith.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivialQed.",
                    "Lemma mult_lemma2 : forall (n m:nat),(n*m = O)->(n=O)\\/(m=O).\n  intros.\n  rewrite mult_assoc.\n  induction m;simpl;auto with arith.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivialQed."
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Export Arith.\nRequire Export ArithRing.\nRequire Export Omega.\n\nUnset Standard Proposition Elimination Names.\n\n(** We first begin with some lemmas that relates *)\n(** +, * and - that are not in the standard library *)\nLemma mult_lemma1 : forall (n m:nat),(n <> O)->(m <> 0)->(n <= n*m).\n  intros.\n  rewrite mult_comm.\n  induction m;simpl;auto with arith.\n  elim H0;trivial.\nQed.\n\nLemma mult_lemma2 : forall (n m:nat),(n*m = O)->(n=O)\\/(m=O).\n  intros.\n  induction n.\n  tauto.\n  simpl in H.\n  right.\n  assert (m <= O);try omega.\n  rewrite <- H.\n  auto with arith.\nQed.\n\n",
                "context_tokens": 400,
                "proof_start_offset": 1435,
                "proof_end_offset": 1719,
                "proof": "Lemma mult_lemma3 : forall (n m:nat),(n <> O)->(m > 1)->(n < n*m).\nProof.\nintros.\nrewrite mult_comm.\ninduction m.\ninversion H0.\nsimpl.\nassert (O < m*n);try omega.\ninversion H0;try omega.\nassert (1 <= n);try omega.\nassert (m > 1);try omega.\ngeneralize (IHm H4);omega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    "Lemma mult_lemma3 : forall (n m:nat),(n <> O)->(m > 1)->(n < n*m).\n  intros.\n  induction n.\n  simpl in |- *.\n  elim H0;trivial.\n  intros.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim H0;trivial.\n  elim HQed.",
                    "Lemma mult_lemma3 : forall (n m:nat),(n <> O)->(m > 1)->(n < n*m).\n  intros.\n  rewrite mult_assoc.\n  induction m;simpl;auto with arith.\n  intros.\n  elim H0;trivial.\n  intros.\n  elim H0;trivial.\n  intros.\n  elim H0;trivial.\n  intros.\n  elim H0;trivial.\n  intros.\n  elim H0;trivial.\n  intros.\n  elim H0;trivial.\n  intros.\n  elim H0;trivial.\n  intros.\n  elim H0;trivial.\n  intros.\n  elim H0;trivial.\n  intros.\n  elim H0;trivial.\n  intros.\n  elim H0;trivial.\n  intros.\n  elim H0;trivial.\n  intros.\n  elim H0;trivial.\n  intros.\n  elim H0;trivial.\n  intros.\n  elim H0;trivial.\n  intros.\n  elim H0;trivial.\n  intros.\n  elim H0;trivial.\n  intros.\n  elim H0;trivial.\n  intros.\n  elim H0;trivial.\n  intros.\n  elim H0;trivial.\n  intros.\n  elim H0;trivial.\n  intros.\n  elim H0;trivial.\n  intros.\n  elim H0;trivial.\n  intros.\n  elim H0Qed.",
                    "Lemma mult_lemma3 : forall (n m:nat),(n <> O)->(m > 1)->(n < n*m).\n  intros.\n  rewrite mult_comm.\n  rewrite mult_assoc.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_comm.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_comm.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_comm.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n  rewrite mult_assoc.\n Qed.",
                    "Lemma mult_lemma3 : forall (n m:nat),(n <> O)->(m > 1)->(n < n*m).\n  intros.\n  rewrite mult_assoc.\n  induction m.\n  tauto.\n  simpl in |- *.\n  elim H0;trivial.\n  intro.\n  elim H0;trivial.\n  intro.\n  elim H0;trivial.\n  intro.\n  elim H0;trivial.\n  intro.\n  elim H0;trivial.\n  intro.\n  elim H0;trivial.\n  intro.\n  elim H0;trivial.\n  intro.\n  elim H0;trivial.\n  intro.\n  elim H0;trivial.\n  intro.\n  elim H0;trivial.\n  intro.\n  elim H0;trivial.\n  intro.\n  elim H0;trivial.\n  intro.\n  elim H0;trivial.\n  intro.\n  elim H0;trivial.\n  intro.\n  elim H0;trivial.\n  intro.\n  elim H0;trivial.\n  intro.\n  elim H0;trivial.\n  intro.\n  elim H0;trivial.\n  intro.\n  elim H0;trivial.\n  intro.\n  elim H0;trivial.\n  intro.\n  elim H0;trivial.\n  intro.\n  elim H0;trivial.\n  intro.\n  elim H0;trivial.\n  intro.\n  elim H0;Qed.",
                    "Lemma mult_lemma3 : forall (n m:nat),(n <> O)->(m > 1)->(n < n*m).\n  intros.\n  induction n.\n  tauto.\n  simpl in H.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply multQed."
                ]
            }
        ]
    }
}