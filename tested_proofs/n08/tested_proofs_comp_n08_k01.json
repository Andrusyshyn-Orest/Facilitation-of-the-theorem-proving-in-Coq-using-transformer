{
    "hyperparams": {
        "sequence_length": 1024,
        "max_new_tokens": 256,
        "batch_size": 32,
        "proofs_per_theorem": 1,
        "temperature": 0.2,
        "do_sample": true,
        "top_p": 0.95,
        "model_repo_name": "Andrusyshyn/gpt2-pretrained-for-coq-pt-custom-train",
        "model_commit_hash": "d6ca15d94f30cb6c9419c7b69673b5d38d203572"
    },
    "projects": {
        "zchinese": [
            {
                "filepath": "./coq_projects/zchinese/groups.v",
                "context": "Require Export Lci.\nRequire Export misc.\n\nSection groups.\n\nVariable S : Set.\nVariable G : S -> Prop.\nVariable Add : S -> S -> S.\nVariable O : S.\nVariable Opp : S -> S.\n\nDefinition is_group :=\n  intern S G Add /\\\n  associativity S Add /\\ neutral S G Add O /\\ opposite S G Add O Opp. \n\n",
                "context_tokens": 86,
                "proof_start_offset": 284,
                "proof_end_offset": 841,
                "proof": "Lemma regular_l : is_group -> forall y z : S, G y -> G z -> forall x : S, G x -> Add x y = Add x z -> y = z.\nProof.\nintros.\nelim H; intros; elim H5; intros; elim H7; intros; elim H8; intros.\nclear H4 H5 H7 H10.\nelim (H11 y H0); intros; elim H5; clear H4 H5.\nelim (H11 z H1); intros; elim H5; clear H4 H5 H8 H11.\nelim (H9 x H2); intros; elim H5; intros; elim H8; intros; elim H11.\nclear H4 H5 H7 H8 H9 H10 H11.\nelim (H6 (Opp x) x y); elim (H6 (Opp x) x z).\nelim H3; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma regular_l : is_group -> forall y z : S, G y -> G z -> forall x : S, G x -> Add x y = Add x z -> y = z.\nProof.\nintros x y z H; elim H; intros H1 H2; elim H2; intros H3 H4; elim H4;\n intros H5 H6; elim H6; intros H6 H7; elim H7; intros H8 H9;\n elim H8; intros H10 H11; elim H12; intros H12 H13; elim H13;\n intros H14 H15; elim H15; intros H15 H16; elim H16;\n intros H16 H17; elim H17; intros H17 H17; elim H17;\n intros H17 H17; elim H17; intros H17 H17; elim H17;\n intros H17 H17; elim H18; intros H17 H18; elim H18;\n intros H17 H18; elim H18; intros H19 H20; elim H20;\n intros H17 H18; elim H18; intros H20 H20; elim H20;\n intros H20 H20; elim H20; intros H20 H20; elim H20;\n intros H20 H20; elim H20; intros H20 H20; elim H20;\n intros HQed.",
                        "correct": false,
                        "error_msg": "Warning: -extra and -extra-phony are deprecated.\nWarning: Write the extra targets in Makefile.coq.local.\n\nFile \"./groups.v\", line 18, characters 16-22:\nError: Not an inductive product.\n\nmake[2]: *** [Makefile.coq:663: groups.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/groups.v",
                "context": "Require Export Lci.\nRequire Export misc.\n\nSection groups.\n\nVariable S : Set.\nVariable G : S -> Prop.\nVariable Add : S -> S -> S.\nVariable O : S.\nVariable Opp : S -> S.\n\nDefinition is_group :=\n  intern S G Add /\\\n  associativity S Add /\\ neutral S G Add O /\\ opposite S G Add O Opp. \n\nLemma regular_l :\n is_group ->\n forall y z : S,\n G y -> G z -> forall x : S, G x -> Add x y = Add x z -> y = z.\nProof.\nintros.\nelim H; intros; elim H5; intros; elim H7; intros; elim H8; intros. \nclear H4 H5 H7 H10.\n(* use of neutral *)\nelim (H11 y H0); intros; elim H5; clear H4 H5.\nelim (H11 z H1); intros; elim H5; clear H4 H5 H8 H11.\n(* use of opposite *)\nelim (H9 x H2); intros; elim H5; intros; elim H8; intros; elim H11. \nclear H4 H5 H7 H8 H9 H10 H11.\n(* use of associativity *)\nelim (H6 (Opp x) x y); elim (H6 (Opp x) x z).\nelim H3; reflexivity.\nQed.\n\n",
                "context_tokens": 316,
                "proof_start_offset": 843,
                "proof_end_offset": 1170,
                "proof": "Lemma add_add : commutativity S Add -> associativity S Add -> forall x1 y1 x2 y2 : S, Add (Add x1 y1) (Add x2 y2) = Add (Add x1 x2) (Add y1 y2).\nProof.\nintros com ass x1 y1 x2 y2.\nrewrite (ass (Add x1 y1) x2 y2); elim (ass x1 y1 x2); elim (com x2 y1).\nrewrite (ass x1 x2 y1); elim (ass (Add x1 x2) y1 y2); reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma add_add : commutativity S Add -> associativity S Add -> forall x1 y1 x2 y2 : S, Add (Add x1 y1) (Add x2 y2) = Add (Add x1 x2) (Add y1 y2).\nProof.\nintros.\nelim (add_add x1 y1 y2); intros; elim H1; reflexivity.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./groups.v\", line 38, characters 6-13:\nError: The reference add_add was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: groups.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/groups.v",
                "context": "Require Export Lci.\nRequire Export misc.\n\nSection groups.\n\nVariable S : Set.\nVariable G : S -> Prop.\nVariable Add : S -> S -> S.\nVariable O : S.\nVariable Opp : S -> S.\n\nDefinition is_group :=\n  intern S G Add /\\\n  associativity S Add /\\ neutral S G Add O /\\ opposite S G Add O Opp. \n\nLemma regular_l :\n is_group ->\n forall y z : S,\n G y -> G z -> forall x : S, G x -> Add x y = Add x z -> y = z.\nProof.\nintros.\nelim H; intros; elim H5; intros; elim H7; intros; elim H8; intros. \nclear H4 H5 H7 H10.\n(* use of neutral *)\nelim (H11 y H0); intros; elim H5; clear H4 H5.\nelim (H11 z H1); intros; elim H5; clear H4 H5 H8 H11.\n(* use of opposite *)\nelim (H9 x H2); intros; elim H5; intros; elim H8; intros; elim H11. \nclear H4 H5 H7 H8 H9 H10 H11.\n(* use of associativity *)\nelim (H6 (Opp x) x y); elim (H6 (Opp x) x z).\nelim H3; reflexivity.\nQed.\n\nLemma add_add :\n commutativity S Add ->\n associativity S Add ->\n forall x1 y1 x2 y2 : S,\n Add (Add x1 y1) (Add x2 y2) = Add (Add x1 x2) (Add y1 y2).\nProof.\nintros com ass x1 y1 x2 y2.\nrewrite (ass (Add x1 y1) x2 y2); elim (ass x1 y1 x2); elim (com x2 y1).\nrewrite (ass x1 x2 y1); elim (ass (Add x1 x2) y1 y2); reflexivity.\nQed.\n\n",
                "context_tokens": 459,
                "proof_start_offset": 1172,
                "proof_end_offset": 1792,
                "proof": "Lemma opp_unicity : is_group -> forall x y : S, is_opposite S G Add O x y -> y = Opp x.\nProof.\nintros.\nelim H0; intros; elim H2; intros.\nelim H; intros; elim H6; intros; elim H8; intros; elim H9; intros.\nelim (H12 y H3); intros; elim H14; clear H H2 H3 H5 H6 H8 H11 H12 H13 H14.\nelim (H10 x H1); intros; elim H2; intros; elim H5; intros; elim H8.\nclear H H1 H2 H5 H6 H8 H10.\nelim (H7 (Opp x) x y).\nelim H4; intros; rewrite H; clear H H0 H1 H4 H7.\nelim H9; intros; elim (H0 (Opp x) H3); intros.\nexact H1.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma opp_unicity : is_group -> forall x y : S, is_opposite S G Add O x y -> y = Opp x.\nProof.\nintros.\nelim H; intros; elim H0; intros; elim H0; intros; elim H1; intros; elim H2;\n clear H0; intros.\nrewrite (Add_commutative x y); rewrite (Add_commutative x y); reflexivity.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./groups.v\", line 49, characters 50-57:\nError: Not an inductive product.\n\nmake[2]: *** [Makefile.coq:663: groups.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/groups.v",
                "context": " misc.\n\nSection groups.\n\nVariable S : Set.\nVariable G : S -> Prop.\nVariable Add : S -> S -> S.\nVariable O : S.\nVariable Opp : S -> S.\n\nDefinition is_group :=\n  intern S G Add /\\\n  associativity S Add /\\ neutral S G Add O /\\ opposite S G Add O Opp. \n\nLemma regular_l :\n is_group ->\n forall y z : S,\n G y -> G z -> forall x : S, G x -> Add x y = Add x z -> y = z.\nProof.\nintros.\nelim H; intros; elim H5; intros; elim H7; intros; elim H8; intros. \nclear H4 H5 H7 H10.\n(* use of neutral *)\nelim (H11 y H0); intros; elim H5; clear H4 H5.\nelim (H11 z H1); intros; elim H5; clear H4 H5 H8 H11.\n(* use of opposite *)\nelim (H9 x H2); intros; elim H5; intros; elim H8; intros; elim H11. \nclear H4 H5 H7 H8 H9 H10 H11.\n(* use of associativity *)\nelim (H6 (Opp x) x y); elim (H6 (Opp x) x z).\nelim H3; reflexivity.\nQed.\n\nLemma add_add :\n commutativity S Add ->\n associativity S Add ->\n forall x1 y1 x2 y2 : S,\n Add (Add x1 y1) (Add x2 y2) = Add (Add x1 x2) (Add y1 y2).\nProof.\nintros com ass x1 y1 x2 y2.\nrewrite (ass (Add x1 y1) x2 y2); elim (ass x1 y1 x2); elim (com x2 y1).\nrewrite (ass x1 x2 y1); elim (ass (Add x1 x2) y1 y2); reflexivity.\nQed.\n\nLemma opp_unicity :\n is_group -> forall x y : S, is_opposite S G Add O x y -> y = Opp x.\nProof.\nintros.\n(* [G y] *)\nelim H0; intros; elim H2; intros.\n(* [y = 0+y] *)\nelim H; intros; elim H6; intros; elim H8; intros; elim H9; intros.\nelim (H12 y H3); intros; elim H14; clear H H2 H3 H5 H6 H8 H11 H12 H13 H14.\n(* [0=(-x)+x] *)\nelim (H10 x H1); intros; elim H2; intros; elim H5; intros; elim H8.\nclear H H1 H2 H5 H6 H8 H10.\n(* [((-x)+x)+y=(-x)+(x+y)] *)\nelim (H7 (Opp x) x y).\n(* [x+y = 0] *)\nelim H4; intros; rewrite H; clear H H0 H1 H4 H7.\n(* [(-x)+0=(-x)] *)\nelim H9; intros; elim (H0 (Opp x) H3); intros. exact H1.\nQed.\n\n",
                "context_tokens": 733,
                "proof_start_offset": 1794,
                "proof_end_offset": 2147,
                "proof": "Lemma opp_opp : is_group -> forall x : S, G x -> x = Opp (Opp x).\nProof.\nintros.\napply (opp_unicity H (Opp x) x).\nunfold is_opposite in |- *; split.\nelim H; intros; elim H2; intros; elim H4; intros; elim (H6 x H0); intros.\nelim H8; trivial.\nelim H; intros; elim H2; intros; elim H4; intros; elim (H6 x H0); intros.\nelim H8; intros; elim H10; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma opp_opp : is_group -> forall x : S, G x -> x = Opp (Opp x).\nProof.\nintros.\nelim H; intros; elim H; intros; elim H0; intros; elim H1; intros; elim H2;\n intros; elim H2; intros; elim H3; intros; elim H4; intros; elim H5; \n intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n introsQed.",
                        "correct": false,
                        "error_msg": "File \"./groups.v\", line 81, characters 1-10:\nError: The reference introsQed was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: groups.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/groups.v",
                "context": ". \nclear H4 H5 H7 H10.\n(* use of neutral *)\nelim (H11 y H0); intros; elim H5; clear H4 H5.\nelim (H11 z H1); intros; elim H5; clear H4 H5 H8 H11.\n(* use of opposite *)\nelim (H9 x H2); intros; elim H5; intros; elim H8; intros; elim H11. \nclear H4 H5 H7 H8 H9 H10 H11.\n(* use of associativity *)\nelim (H6 (Opp x) x y); elim (H6 (Opp x) x z).\nelim H3; reflexivity.\nQed.\n\nLemma add_add :\n commutativity S Add ->\n associativity S Add ->\n forall x1 y1 x2 y2 : S,\n Add (Add x1 y1) (Add x2 y2) = Add (Add x1 x2) (Add y1 y2).\nProof.\nintros com ass x1 y1 x2 y2.\nrewrite (ass (Add x1 y1) x2 y2); elim (ass x1 y1 x2); elim (com x2 y1).\nrewrite (ass x1 x2 y1); elim (ass (Add x1 x2) y1 y2); reflexivity.\nQed.\n\nLemma opp_unicity :\n is_group -> forall x y : S, is_opposite S G Add O x y -> y = Opp x.\nProof.\nintros.\n(* [G y] *)\nelim H0; intros; elim H2; intros.\n(* [y = 0+y] *)\nelim H; intros; elim H6; intros; elim H8; intros; elim H9; intros.\nelim (H12 y H3); intros; elim H14; clear H H2 H3 H5 H6 H8 H11 H12 H13 H14.\n(* [0=(-x)+x] *)\nelim (H10 x H1); intros; elim H2; intros; elim H5; intros; elim H8.\nclear H H1 H2 H5 H6 H8 H10.\n(* [((-x)+x)+y=(-x)+(x+y)] *)\nelim (H7 (Opp x) x y).\n(* [x+y = 0] *)\nelim H4; intros; rewrite H; clear H H0 H1 H4 H7.\n(* [(-x)+0=(-x)] *)\nelim H9; intros; elim (H0 (Opp x) H3); intros. exact H1.\nQed.\n\nLemma opp_opp : is_group -> forall x : S, G x -> x = Opp (Opp x).\nProof.\nintros.\napply (opp_unicity H (Opp x) x).\nunfold is_opposite in |- *; split.\nelim H; intros; elim H2; intros; elim H4; intros; elim (H6 x H0); intros. \nelim H8; trivial.\nelim H; intros; elim H2; intros; elim H4; intros; elim (H6 x H0); intros.\nelim H8; intros; elim H10; auto.\nQed.\n\n",
                "context_tokens": 716,
                "proof_start_offset": 2149,
                "proof_end_offset": 3302,
                "proof": "Lemma opp_add : is_group -> commutativity S Add -> forall x y : S, G x -> G y -> Opp (Add x y) = Add (Opp x) (Opp y).\nProof.\nintros; symmetry in |- *; apply (opp_unicity H (Add x y) (Add (Opp x) (Opp y))).\nunfold is_opposite in |- *; split.\nelim H; intros; apply (H3 x y H1 H2).\nsplit.\nelim H; intros; elim H4; intros; elim H6; intros; clear H4 H5 H6 H7.\nelim (H8 x H1); intros; elim H5; intros; clear H4 H5 H7.\nelim (H8 y H2); intros; elim H5; intros.\napply (H3 (Opp x) (Opp y) H6 H7).\nelim H; intros; elim H4; intros; clear H3 H4 H6.\nrewrite (add_add H0 H5 x y (Opp x) (Opp y)).\nrewrite (add_add H0 H5 (Opp x) (Opp y) x y); clear H5.\nelim H; intros; elim H4; intros; elim H6; intros.\nelim (H8 x H1); intros; elim H10; intros; elim H12; intros.\nrewrite H13; rewrite H14.\nclear H H0 H1 H3 H4 H5 H6 H9 H10 H11 H12 H13 H14.\nelim (H8 y H2); intros; elim H0; intros; elim H3; intros.\nrewrite H4; rewrite H5.\nclear H H0 H1 H2 H3 H4 H5 H8.\nelim H7; intros; exact (H0 O H).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma opp_add : is_group -> commutativity S Add -> forall x y : S, G x -> G y -> Opp (Add x y) = Add (Opp x) (Opp y).\nProof.\nintros.\napply (opp_unicity H (Opp x y) y).\nunfold is_symmetric in |- *; split.\nelim H; intros; elim H2; intros; elim H3; intros; elim H4; intros; elim H5;\n intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5;\n intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5; \n intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5; \n intros; elim H5; intros; elim H5; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros;Qed.",
                        "correct": false,
                        "error_msg": "File \"./groups.v\", line 80, characters 22-29:\nError: Illegal application (Non-functional construction): \nThe expression \"Opp x\" of type \"S\" cannot be applied to the term\n \"y\" : \"S\"\n\nmake[2]: *** [Makefile.coq:663: groups.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/groups.v",
                "context": "\n(* [((-x)+x)+y=(-x)+(x+y)] *)\nelim (H7 (Opp x) x y).\n(* [x+y = 0] *)\nelim H4; intros; rewrite H; clear H H0 H1 H4 H7.\n(* [(-x)+0=(-x)] *)\nelim H9; intros; elim (H0 (Opp x) H3); intros. exact H1.\nQed.\n\nLemma opp_opp : is_group -> forall x : S, G x -> x = Opp (Opp x).\nProof.\nintros.\napply (opp_unicity H (Opp x) x).\nunfold is_opposite in |- *; split.\nelim H; intros; elim H2; intros; elim H4; intros; elim (H6 x H0); intros. \nelim H8; trivial.\nelim H; intros; elim H2; intros; elim H4; intros; elim (H6 x H0); intros.\nelim H8; intros; elim H10; auto.\nQed.\n\nLemma opp_add :\n is_group ->\n commutativity S Add ->\n forall x y : S, G x -> G y -> Opp (Add x y) = Add (Opp x) (Opp y).\nProof.\nintros; symmetry  in |- *;\n apply (opp_unicity H (Add x y) (Add (Opp x) (Opp y))).\nunfold is_opposite in |- *; split.\n(* [G (x+y)] *)\nelim H; intros; apply (H3 x y H1 H2).\nsplit.\n(* [G ((-x)+(-y))] *)\nelim H; intros; elim H4; intros; elim H6; intros; clear H4 H5 H6 H7.\nelim (H8 x H1); intros; elim H5; intros; clear H4 H5 H7.\nelim (H8 y H2); intros; elim H5; intros.\napply (H3 (Opp x) (Opp y) H6 H7).\n(* [(x+y)+((-x)+(-y)) = 0 & ((-x)+(-y))+(x+y) = 0] *)\nelim H; intros; elim H4; intros; clear H3 H4 H6.\nrewrite (add_add H0 H5 x y (Opp x) (Opp y)).\nrewrite (add_add H0 H5 (Opp x) (Opp y) x y); clear H5.\nelim H; intros; elim H4; intros; elim H6; intros. \n  (* [x+(-x) = 0 (-x)+x = 0] *)\nelim (H8 x H1); intros; elim H10; intros; elim H12; intros. \nrewrite H13; rewrite H14.\nclear H H0 H1 H3 H4 H5 H6 H9 H10 H11 H12 H13 H14.\n  (* [y+(-y) = 0 (-y)+y = 0] *)\nelim (H8 y H2); intros; elim H0; intros; elim H3; intros. \nrewrite H4; rewrite H5.\nclear H H0 H1 H2 H3 H4 H5 H8.\n  (* [0+0 = 0] *)\nelim H7; intros; exact (H0 O H).\nQed.\n\n",
                "context_tokens": 743,
                "proof_start_offset": 3304,
                "proof_end_offset": 3522,
                "proof": "Lemma opp_neutral : is_group -> Opp O = O.\nProof.\nintros.\nelim (opp_unicity H O O).\nreflexivity.\nunfold is_opposite in |- *.\nelim H; intros; elim H1; intros; elim H3; intros; elim H4; intros.\nelim (H7 O H6); auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma opp_neutral : is_group -> Opp O = O.\nProof.\nintros; apply opp_is_zero.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./groups.v\", line 112, characters 14-25:\nError: The reference opp_is_zero was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: groups.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Zgcd.v",
                "context": "Require Export misc.\nRequire Export Zstruct.\nRequire Export ZArith.\nRequire Import Omega.\nRequire Import ZArithRing.\nRequire Import Zcomplements.\nRequire Import Zdiv.\n\nUnset Standard Proposition Elimination Names.\n\n",
                "context_tokens": 44,
                "proof_start_offset": 215,
                "proof_end_offset": 725,
                "proof": "Lemma gcd_unicity_apart_sign : forall a b c d : Z, is_gcd Z IdZ Zmult 0%Z a b c -> is_gcd Z IdZ Zmult 0%Z a b d -> d = c \\/ d = (- c)%Z.\nProof.\nintros.\nelim (gcd_unicity_apart_unities Z IdZ Zplus Zmult 0%Z 1%Z Zopp Z_unitary_commutative_ring integrityZ a b c d H H0).\nintros.\nelim (inversibleZ x); intros.\nleft.\nelim H1; intros; elim H4; intros.\nrewrite H6.\nrewrite H2; auto with zarith.\nright.\nelim H1; intros; elim H4; intros.\nrewrite H6.\nrewrite H2; auto with zarith.\nelim H1; intros; exact H2.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_unicity_apart_sign : forall a b c d : Z, is_gcd Z IdZ Zmult 0%Z a b c -> is_gcd Z IdZ Zmult 0%Z a b d -> d = c \\/ d = (- c)%Z.\nProof.\n intros a b c d H H0.\n case (Z_lt_eq_dec a b); intros H1.\n rewrite H1 in H.\n rewrite H0 in H.\n discriminate H.\nQed.",
                        "correct": false,
                        "error_msg": "Warning: -extra and -extra-phony are deprecated.\nWarning: Write the extra targets in Makefile.coq.local.\n\nFile \"./Zgcd.v\", line 9, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 14, characters 7-18:\nError: The reference Z_lt_eq_dec was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Zgcd.v",
                "context": "Require Export misc.\nRequire Export Zstruct.\nRequire Export ZArith.\nRequire Import Omega.\nRequire Import ZArithRing.\nRequire Import Zcomplements.\nRequire Import Zdiv.\n\nUnset Standard Proposition Elimination Names.\n\nLemma gcd_unicity_apart_sign :\n forall a b c d : Z,\n is_gcd Z IdZ Zmult 0%Z a b c ->\n is_gcd Z IdZ Zmult 0%Z a b d -> d = c \\/ d = (- c)%Z.\nProof.\nintros.\nelim\n (gcd_unicity_apart_unities Z IdZ Zplus Zmult 0%Z 1%Z Zopp\n    Z_unitary_commutative_ring integrityZ a b c d H H0).\nintros.\nelim (inversibleZ x); intros.\nleft. elim H1; intros; elim H4; intros. rewrite H6. rewrite H2; auto with zarith.\nright. elim H1; intros; elim H4; intros. rewrite H6. rewrite H2; auto with zarith.\nelim H1; intros; exact H2.\nQed.\n\n",
                "context_tokens": 238,
                "proof_start_offset": 727,
                "proof_end_offset": 1860,
                "proof": "Lemma gcd_OZ_absZ : forall b : Z, is_gcd Z IdZ Zmult 0%Z 0%Z b (Zabs b).\nProof.\nintros.\nelim (Z_le_gt_dec 0 b); intros.\nrewrite Zabs_eq; auto with zarith.\nunfold is_gcd in |- *; split.\nunfold divide in |- *; unfold IdZ in |- *; split.\nexact I.\nsplit.\nexact I.\nleft; reflexivity.\nsplit; unfold divide in |- *; unfold IdZ in |- *.\nsplit.\nexact I.\nsplit.\nexact I.\nelim (Z_zerop b); intro y0.\nleft; exact y0.\nright.\nsplit.\nexact y0.\nexists 1%Z.\nsplit.\nexact I.\nauto with zarith.\nintros; exact H0.\nrewrite Zabs_non_eq; auto with zarith.\nunfold is_gcd in |- *; split.\nunfold divide in |- *; unfold IdZ in |- *; split.\nexact I.\nsplit.\nexact I.\nleft; reflexivity.\nsplit; unfold divide in |- *; unfold IdZ in |- *; split.\nexact I.\nsplit.\nexact I.\nright.\nsplit; auto with zarith.\nexists (-1)%Z; split.\nexact I.\nauto with zarith.\nexact I.\nsplit.\nexact I.\nelim H0; intros; elim H2; intros; elim H4; intros.\nrewrite H5.\nleft; reflexivity.\nright; split.\nelim H5; intros; exact H6.\nelim H5; intros; elim H7; intros.\nexists (- x)%Z.\nsplit.\nexact I.\nelim H8; intros; rewrite H10.\nrewrite <- Zopp_mult_distr_r; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_OZ_absZ : forall b : Z, is_gcd Z IdZ Zmult 0%Z 0%Z b (Zabs b).\nProof.\n intros.\n elim (gcd_bezout_non_zero Z IdZ Z_div_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos).\n intros.\n elim (gcd_bezout_non_zero Z IdZ Z_div_pos_pos_pos_pos_pos_pos).\n intros.\n elim (gcd_bezout_non_zero Z IdZ Z_div_pos_pos).\n intros.\n elim (gcd_bezout_non_zero Z IdZ Z_div_pos).\n intros.\n elim (gcd_bezout_non_zero Z IdZ Z_div_pos).\n intros.\n elim (gcd_bezout_non_zero Z IdZ Z_div_pos).\n intros.\n elim (gcd_bezout_non_zero Z IdZ Z_div_pos).\n intros.\n elim (gcd_bezout_non_zero Z IdZ Z_div_pos).\n intros.\n elim (gcd_bezout_non_zero Z Z_div_pos).\n intros.\n elim (gcd_bezoutQed.",
                        "correct": false,
                        "error_msg": "File \"./Zgcd.v\", line 9, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 27, characters 64-68:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 30, characters 7-26:\nError: The reference gcd_bezout_non_zero was not found in the current\nenvironment.\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Zgcd.v",
                "context": " is_gcd Z IdZ Zmult 0%Z a b d -> d = c \\/ d = (- c)%Z.\nProof.\nintros.\nelim\n (gcd_unicity_apart_unities Z IdZ Zplus Zmult 0%Z 1%Z Zopp\n    Z_unitary_commutative_ring integrityZ a b c d H H0).\nintros.\nelim (inversibleZ x); intros.\nleft. elim H1; intros; elim H4; intros. rewrite H6. rewrite H2; auto with zarith.\nright. elim H1; intros; elim H4; intros. rewrite H6. rewrite H2; auto with zarith.\nelim H1; intros; exact H2.\nQed.\n\nLemma gcd_OZ_absZ : forall b : Z, is_gcd Z IdZ Zmult 0%Z 0%Z b (Zabs b).\nProof.\nintros. \nelim (Z_le_gt_dec 0 b); intros.\n(* |b|=b *)\nrewrite Zabs_eq; auto with zarith.\nunfold is_gcd in |- *; split.\nunfold divide in |- *; unfold IdZ in |- *; split. exact I. split. exact I. left; reflexivity.\nsplit; unfold divide in |- *; unfold IdZ in |- *. split. exact I. split. exact I.\nelim (Z_zerop b); intro y0. \nleft; exact y0.\nright. split. exact y0. exists 1%Z. split. exact I. auto with zarith.\nintros; exact H0.\n(* |b|=(-b) *)\nrewrite Zabs_non_eq; auto with zarith.\nunfold is_gcd in |- *; split.\nunfold divide in |- *; unfold IdZ in |- *; split. exact I. split. exact I. left; reflexivity.\nsplit; unfold divide in |- *; unfold IdZ in |- *; split. exact I. split. exact I.\nright. split; auto with zarith.\nexists (-1)%Z; split. exact I.\nauto with zarith.\nexact I. split. exact I.\nelim H0; intros; elim H2; intros; elim H4; intros. rewrite H5. \nleft; reflexivity.\nright; split. elim H5; intros; exact H6. elim H5; intros; elim H7; intros.\nexists (- x)%Z. split. exact I. elim H8; intros; rewrite H10.\nrewrite <- Zopp_mult_distr_r; auto.\nQed.\n\nInductive is_gcdZ : Z -> Z -> Z -> Prop :=\n  | gcd_OZ : forall b : Z, is_gcdZ 0%Z b (Zabs b)\n  | gcd_mod :\n      forall b a d q r : Z,\n      b <> 0%Z ->\n      (0 <= r < Zabs b)%Z ->\n      a = (b * q + r)%Z -> is_gcdZ r b d -> is_gcdZ b a d.\n\nDefinition have_gcdZ (a b : Z) := {d : Z | is_gcdZ a b d}.\n\nDefinition gcdZ_i (a b : Z) := exist (is_gcdZ a b).\n\nDefinition P (a : Z) := forall b : Z, have_gcdZ a b.\n\n",
                "context_tokens": 725,
                "proof_start_offset": 2271,
                "proof_end_offset": 2745,
                "proof": "Lemma acc_P : forall n : Z, (forall m : Z, (Zabs m < Zabs n)%Z -> P m) -> P n.\nProof.\nintros.\ncase (Z_zerop n); intro.\nunfold P in |- *.\nintro.\nsplit with (Zabs b).\nrewrite e.\napply (gcd_OZ b).\nunfold P in |- *; intro.\nelim (Zdiv_eucl_extended n0 b).\nintro p; elim p; intros q r H0; elim H0; clear p H0; intros.\ncut (Zabs r < Zabs n)%Z; intros.\nelim (H r H2 n).\nintros.\nsplit with x.\napply gcd_mod with q r; trivial.\nrewrite Zabs_eq; auto with zarith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma acc_P : forall n : Z, (forall m : Z, (Zabs m < Zabs n)%Z -> P m) -> P n.\nProof.\n intros.\n apply (Build_P (fun m : Z => forall n : Z, (Zabs m < Zabs n)%Z -> P m)).\n apply (Build_P (fun m : Z => forall n : Z, (Zabs m < Zabs n)%Z -> P m)).\n apply (Build_P (fun m : Z => forall n : Z, (Zabs m < Zabs n)%Z -> P m)).\n apply (Build_P (fun m : Z => forall n : Z, (Zabs m < Zabs n)%Z -> P m)).\n apply (Build_P (fun m : Z => forall n : Z, (Zabs m < Zabs n)%Z -> P m)).\n apply (Build_P (fun m : Z => forall n : Z, (Zabs m < Zabs n)%Z -> P m)).\n apply (Build_P (fun m : Z => forall n : Z, (Zabs m < Zabs n)%Z -> P m)).\n apply (Build_P (fun m : Z => forall n : Z, (Zabs m < Zabs n)%Z -> P m).\n apply (Build_P (fun m : Z => forall n : Z, (Qed.",
                        "correct": false,
                        "error_msg": "File \"./Zgcd.v\", line 9, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 27, characters 64-68:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 57, characters 42-46:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 61, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 70, characters 44-48:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 70, characters 53-57:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 73, characters 45-49:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 73, characters 54-58:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 73, characters 8-15:\nError: The reference Build_P was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Zgcd.v",
                "context": "Qed.\n\nLemma gcd_OZ_absZ : forall b : Z, is_gcd Z IdZ Zmult 0%Z 0%Z b (Zabs b).\nProof.\nintros. \nelim (Z_le_gt_dec 0 b); intros.\n(* |b|=b *)\nrewrite Zabs_eq; auto with zarith.\nunfold is_gcd in |- *; split.\nunfold divide in |- *; unfold IdZ in |- *; split. exact I. split. exact I. left; reflexivity.\nsplit; unfold divide in |- *; unfold IdZ in |- *. split. exact I. split. exact I.\nelim (Z_zerop b); intro y0. \nleft; exact y0.\nright. split. exact y0. exists 1%Z. split. exact I. auto with zarith.\nintros; exact H0.\n(* |b|=(-b) *)\nrewrite Zabs_non_eq; auto with zarith.\nunfold is_gcd in |- *; split.\nunfold divide in |- *; unfold IdZ in |- *; split. exact I. split. exact I. left; reflexivity.\nsplit; unfold divide in |- *; unfold IdZ in |- *; split. exact I. split. exact I.\nright. split; auto with zarith.\nexists (-1)%Z; split. exact I.\nauto with zarith.\nexact I. split. exact I.\nelim H0; intros; elim H2; intros; elim H4; intros. rewrite H5. \nleft; reflexivity.\nright; split. elim H5; intros; exact H6. elim H5; intros; elim H7; intros.\nexists (- x)%Z. split. exact I. elim H8; intros; rewrite H10.\nrewrite <- Zopp_mult_distr_r; auto.\nQed.\n\nInductive is_gcdZ : Z -> Z -> Z -> Prop :=\n  | gcd_OZ : forall b : Z, is_gcdZ 0%Z b (Zabs b)\n  | gcd_mod :\n      forall b a d q r : Z,\n      b <> 0%Z ->\n      (0 <= r < Zabs b)%Z ->\n      a = (b * q + r)%Z -> is_gcdZ r b d -> is_gcdZ b a d.\n\nDefinition have_gcdZ (a b : Z) := {d : Z | is_gcdZ a b d}.\n\nDefinition gcdZ_i (a b : Z) := exist (is_gcdZ a b).\n\nDefinition P (a : Z) := forall b : Z, have_gcdZ a b.\n\nLemma acc_P : forall n : Z, (forall m : Z, (Zabs m < Zabs n)%Z -> P m) -> P n.\nProof.\n  intros. case (Z_zerop n); intro. unfold P in |- *. intro.\n  split with (Zabs b). rewrite e. apply (gcd_OZ b).\n  unfold P in |- *; intro. elim (Zdiv_eucl_extended n0 b). \n  intro p; elim p; intros q r H0; elim H0; clear p H0; intros.\n  cut (Zabs r < Zabs n)%Z; intros.\n  elim (H r H2 n). intros. split with x.\n  apply gcd_mod with q r; trivial. \n  rewrite Zabs_eq; auto with zarith.\nQed.\n\n",
                "context_tokens": 738,
                "proof_start_offset": 2747,
                "proof_end_offset": 2841,
                "proof": "Lemma gcdZ_exists : forall a b : Z, have_gcdZ a b.\nProof.\nexact (Z_lt_abs_rec _ acc_P).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcdZ_exists : forall a b : Z, have_gcdZ a b.\nProof.\n  intros.\n  case (Z_zerop b); intro.\n  case (Z_zerop b); intro.\n  rewrite e.\n  apply (gcd_bezout a b).\n  unfold P in |- *; intro.\n  elim (Zdiv_eucl_extended n0 b).\n  intro p; elim p; intros.\n  split with x.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  apply gcd_sym.\n  applyQed.",
                        "correct": false,
                        "error_msg": "File \"./Zgcd.v\", line 9, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 27, characters 64-68:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 57, characters 42-46:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 61, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 70, characters 44-48:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 70, characters 53-57:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 73, characters 14-18:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 73, characters 14-18:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 7-11:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 7-11:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 88, characters 9-19:\nError: The reference gcd_bezout was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Zgcd.v",
                "context": "b|=b *)\nrewrite Zabs_eq; auto with zarith.\nunfold is_gcd in |- *; split.\nunfold divide in |- *; unfold IdZ in |- *; split. exact I. split. exact I. left; reflexivity.\nsplit; unfold divide in |- *; unfold IdZ in |- *. split. exact I. split. exact I.\nelim (Z_zerop b); intro y0. \nleft; exact y0.\nright. split. exact y0. exists 1%Z. split. exact I. auto with zarith.\nintros; exact H0.\n(* |b|=(-b) *)\nrewrite Zabs_non_eq; auto with zarith.\nunfold is_gcd in |- *; split.\nunfold divide in |- *; unfold IdZ in |- *; split. exact I. split. exact I. left; reflexivity.\nsplit; unfold divide in |- *; unfold IdZ in |- *; split. exact I. split. exact I.\nright. split; auto with zarith.\nexists (-1)%Z; split. exact I.\nauto with zarith.\nexact I. split. exact I.\nelim H0; intros; elim H2; intros; elim H4; intros. rewrite H5. \nleft; reflexivity.\nright; split. elim H5; intros; exact H6. elim H5; intros; elim H7; intros.\nexists (- x)%Z. split. exact I. elim H8; intros; rewrite H10.\nrewrite <- Zopp_mult_distr_r; auto.\nQed.\n\nInductive is_gcdZ : Z -> Z -> Z -> Prop :=\n  | gcd_OZ : forall b : Z, is_gcdZ 0%Z b (Zabs b)\n  | gcd_mod :\n      forall b a d q r : Z,\n      b <> 0%Z ->\n      (0 <= r < Zabs b)%Z ->\n      a = (b * q + r)%Z -> is_gcdZ r b d -> is_gcdZ b a d.\n\nDefinition have_gcdZ (a b : Z) := {d : Z | is_gcdZ a b d}.\n\nDefinition gcdZ_i (a b : Z) := exist (is_gcdZ a b).\n\nDefinition P (a : Z) := forall b : Z, have_gcdZ a b.\n\nLemma acc_P : forall n : Z, (forall m : Z, (Zabs m < Zabs n)%Z -> P m) -> P n.\nProof.\n  intros. case (Z_zerop n); intro. unfold P in |- *. intro.\n  split with (Zabs b). rewrite e. apply (gcd_OZ b).\n  unfold P in |- *; intro. elim (Zdiv_eucl_extended n0 b). \n  intro p; elim p; intros q r H0; elim H0; clear p H0; intros.\n  cut (Zabs r < Zabs n)%Z; intros.\n  elim (H r H2 n). intros. split with x.\n  apply gcd_mod with q r; trivial. \n  rewrite Zabs_eq; auto with zarith.\nQed.\n\nLemma gcdZ_exists : forall a b : Z, have_gcdZ a b.\nProof.\n  exact (Z_lt_abs_rec _ acc_P).\nQed.\n\n",
                "context_tokens": 720,
                "proof_start_offset": 2843,
                "proof_end_offset": 3586,
                "proof": "Lemma gcdZ_is_gcd : forall a b d : Z, is_gcdZ a b d -> is_gcd Z IdZ Zmult 0%Z a b d.\nProof.\nintros.\nelim H.\nintros.\napply (gcd_OZ_absZ b0).\nclear H a b d; intros.\nunfold is_gcd in |- *.\nelim H3; clear H3; intros.\nelim H4; clear H4; intros.\nsplit.\nexact H4.\nsplit.\nrewrite H1.\napply (div_add Z IdZ Zplus Zmult 0%Z Zopp Z_ring (b * q)%Z r d).\napply (div_mult Z IdZ Zplus Zmult 0%Z Zopp Z_ring b q d).\nexact H4.\nexact I.\nexact H3.\nintros.\napply (H5 q0).\ncut (r = (a - b * q)%Z); intros.\nrewrite H8.\napply (div_add Z IdZ Zplus Zmult 0%Z Zopp Z_ring a (- (b * q))%Z q0 H7).\napply (div_opp Z IdZ Zplus Zmult 0%Z Zopp Z_ring (b * q)%Z q0).\nexact (div_mult Z IdZ Zplus Zmult 0%Z Zopp Z_ring b q q0 H6 I).\nrewrite H1; auto with zarith.\nexact H6.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcdZ_is_gcd : forall a b d : Z, is_gcdZ a b d -> is_gcd Z IdZ Zmult 0%Z a b d.\nProof.\n  exact (Z_lt_is_gcd _ _ _ _ _ H).\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zgcd.v\", line 9, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 27, characters 64-68:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 57, characters 42-46:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 61, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 70, characters 44-48:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 70, characters 53-57:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 73, characters 14-18:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 73, characters 14-18:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 7-11:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 7-11:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 89, characters 9-20:\nError: The reference Z_lt_is_gcd was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Zgcd.v",
                "context": "_mult_distr_r; auto.\nQed.\n\nInductive is_gcdZ : Z -> Z -> Z -> Prop :=\n  | gcd_OZ : forall b : Z, is_gcdZ 0%Z b (Zabs b)\n  | gcd_mod :\n      forall b a d q r : Z,\n      b <> 0%Z ->\n      (0 <= r < Zabs b)%Z ->\n      a = (b * q + r)%Z -> is_gcdZ r b d -> is_gcdZ b a d.\n\nDefinition have_gcdZ (a b : Z) := {d : Z | is_gcdZ a b d}.\n\nDefinition gcdZ_i (a b : Z) := exist (is_gcdZ a b).\n\nDefinition P (a : Z) := forall b : Z, have_gcdZ a b.\n\nLemma acc_P : forall n : Z, (forall m : Z, (Zabs m < Zabs n)%Z -> P m) -> P n.\nProof.\n  intros. case (Z_zerop n); intro. unfold P in |- *. intro.\n  split with (Zabs b). rewrite e. apply (gcd_OZ b).\n  unfold P in |- *; intro. elim (Zdiv_eucl_extended n0 b). \n  intro p; elim p; intros q r H0; elim H0; clear p H0; intros.\n  cut (Zabs r < Zabs n)%Z; intros.\n  elim (H r H2 n). intros. split with x.\n  apply gcd_mod with q r; trivial. \n  rewrite Zabs_eq; auto with zarith.\nQed.\n\nLemma gcdZ_exists : forall a b : Z, have_gcdZ a b.\nProof.\n  exact (Z_lt_abs_rec _ acc_P).\nQed.\n\nLemma gcdZ_is_gcd :\n forall a b d : Z, is_gcdZ a b d -> is_gcd Z IdZ Zmult 0%Z a b d.\nProof.\nintros. elim H. intros. apply (gcd_OZ_absZ b0). \nclear H a b d; intros. unfold is_gcd in |- *.\nelim H3; clear H3; intros. elim H4; clear H4; intros. split. exact H4.\nsplit. rewrite H1.\napply (div_add Z IdZ Zplus Zmult 0%Z Zopp Z_ring (b * q)%Z r d).\napply (div_mult Z IdZ Zplus Zmult 0%Z Zopp Z_ring b q d).\nexact H4. exact I. exact H3.\nintros. apply (H5 q0).\ncut (r = (a - b * q)%Z); intros. rewrite H8.\napply (div_add Z IdZ Zplus Zmult 0%Z Zopp Z_ring a (- (b * q))%Z q0 H7).\napply (div_opp Z IdZ Zplus Zmult 0%Z Zopp Z_ring (b * q)%Z q0).\nexact (div_mult Z IdZ Zplus Zmult 0%Z Zopp Z_ring b q q0 H6 I).\nrewrite H1; auto with zarith.\nexact H6.\nQed.\n\nDefinition gcdZ (a b : Z) := pi1 Z (is_gcdZ a b) (gcdZ_exists a b).\n\n",
                "context_tokens": 733,
                "proof_start_offset": 3657,
                "proof_end_offset": 3793,
                "proof": "Theorem gcdZ_correct : forall a b : Z, is_gcdZ a b (gcdZ a b).\nProof.\nexact (fun a b : Z => pi2 Z (is_gcdZ a b) (gcdZ_exists a b)).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem gcdZ_correct : forall a b : Z, is_gcdZ a b (gcdZ a b).\nProof.\nintros.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_sym.\napply gcd_Qed.",
                        "correct": false,
                        "error_msg": "File \"./Zgcd.v\", line 9, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 27, characters 64-68:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 57, characters 42-46:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 61, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 70, characters 44-48:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 70, characters 53-57:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 73, characters 14-18:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 73, characters 14-18:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 7-11:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 7-11:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 94, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 94, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 95, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 95, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 99, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 99, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 100, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 100, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 101, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 101, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 111, characters 6-13:\nError: The reference gcd_sym was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Zgcd.v",
                "context": ",\n      b <> 0%Z ->\n      (0 <= r < Zabs b)%Z ->\n      a = (b * q + r)%Z -> is_gcdZ r b d -> is_gcdZ b a d.\n\nDefinition have_gcdZ (a b : Z) := {d : Z | is_gcdZ a b d}.\n\nDefinition gcdZ_i (a b : Z) := exist (is_gcdZ a b).\n\nDefinition P (a : Z) := forall b : Z, have_gcdZ a b.\n\nLemma acc_P : forall n : Z, (forall m : Z, (Zabs m < Zabs n)%Z -> P m) -> P n.\nProof.\n  intros. case (Z_zerop n); intro. unfold P in |- *. intro.\n  split with (Zabs b). rewrite e. apply (gcd_OZ b).\n  unfold P in |- *; intro. elim (Zdiv_eucl_extended n0 b). \n  intro p; elim p; intros q r H0; elim H0; clear p H0; intros.\n  cut (Zabs r < Zabs n)%Z; intros.\n  elim (H r H2 n). intros. split with x.\n  apply gcd_mod with q r; trivial. \n  rewrite Zabs_eq; auto with zarith.\nQed.\n\nLemma gcdZ_exists : forall a b : Z, have_gcdZ a b.\nProof.\n  exact (Z_lt_abs_rec _ acc_P).\nQed.\n\nLemma gcdZ_is_gcd :\n forall a b d : Z, is_gcdZ a b d -> is_gcd Z IdZ Zmult 0%Z a b d.\nProof.\nintros. elim H. intros. apply (gcd_OZ_absZ b0). \nclear H a b d; intros. unfold is_gcd in |- *.\nelim H3; clear H3; intros. elim H4; clear H4; intros. split. exact H4.\nsplit. rewrite H1.\napply (div_add Z IdZ Zplus Zmult 0%Z Zopp Z_ring (b * q)%Z r d).\napply (div_mult Z IdZ Zplus Zmult 0%Z Zopp Z_ring b q d).\nexact H4. exact I. exact H3.\nintros. apply (H5 q0).\ncut (r = (a - b * q)%Z); intros. rewrite H8.\napply (div_add Z IdZ Zplus Zmult 0%Z Zopp Z_ring a (- (b * q))%Z q0 H7).\napply (div_opp Z IdZ Zplus Zmult 0%Z Zopp Z_ring (b * q)%Z q0).\nexact (div_mult Z IdZ Zplus Zmult 0%Z Zopp Z_ring b q q0 H6 I).\nrewrite H1; auto with zarith.\nexact H6.\nQed.\n\nDefinition gcdZ (a b : Z) := pi1 Z (is_gcdZ a b) (gcdZ_exists a b).\n\nTheorem gcdZ_correct : forall a b : Z, is_gcdZ a b (gcdZ a b).\nProof.\nexact (fun a b : Z => pi2 Z (is_gcdZ a b) (gcdZ_exists a b)).\nQed.\n\n",
                "context_tokens": 727,
                "proof_start_offset": 3795,
                "proof_end_offset": 3912,
                "proof": "Lemma positive_is_gcdZ : forall a b d : Z, is_gcdZ a b d -> (0 <= d)%Z.\nProof.\nintros; elim H; auto with zarith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma positive_is_gcdZ : forall a b d : Z, is_gcdZ a b d -> (0 <= d)%Z.\nProof.\nintros.\napply (Build_gcd_is_gcdZ a b d).\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zgcd.v\", line 9, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 27, characters 64-68:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 57, characters 42-46:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 61, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 70, characters 44-48:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 70, characters 53-57:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 73, characters 14-18:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 73, characters 14-18:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 7-11:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 7-11:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 94, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 94, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 95, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 95, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 99, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 99, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 100, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 100, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 101, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 101, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 116, characters 7-24:\nError: The reference Build_gcd_is_gcdZ was not found in the current\nenvironment.\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Zgcd.v",
                "context": "a b : Z) := {d : Z | is_gcdZ a b d}.\n\nDefinition gcdZ_i (a b : Z) := exist (is_gcdZ a b).\n\nDefinition P (a : Z) := forall b : Z, have_gcdZ a b.\n\nLemma acc_P : forall n : Z, (forall m : Z, (Zabs m < Zabs n)%Z -> P m) -> P n.\nProof.\n  intros. case (Z_zerop n); intro. unfold P in |- *. intro.\n  split with (Zabs b). rewrite e. apply (gcd_OZ b).\n  unfold P in |- *; intro. elim (Zdiv_eucl_extended n0 b). \n  intro p; elim p; intros q r H0; elim H0; clear p H0; intros.\n  cut (Zabs r < Zabs n)%Z; intros.\n  elim (H r H2 n). intros. split with x.\n  apply gcd_mod with q r; trivial. \n  rewrite Zabs_eq; auto with zarith.\nQed.\n\nLemma gcdZ_exists : forall a b : Z, have_gcdZ a b.\nProof.\n  exact (Z_lt_abs_rec _ acc_P).\nQed.\n\nLemma gcdZ_is_gcd :\n forall a b d : Z, is_gcdZ a b d -> is_gcd Z IdZ Zmult 0%Z a b d.\nProof.\nintros. elim H. intros. apply (gcd_OZ_absZ b0). \nclear H a b d; intros. unfold is_gcd in |- *.\nelim H3; clear H3; intros. elim H4; clear H4; intros. split. exact H4.\nsplit. rewrite H1.\napply (div_add Z IdZ Zplus Zmult 0%Z Zopp Z_ring (b * q)%Z r d).\napply (div_mult Z IdZ Zplus Zmult 0%Z Zopp Z_ring b q d).\nexact H4. exact I. exact H3.\nintros. apply (H5 q0).\ncut (r = (a - b * q)%Z); intros. rewrite H8.\napply (div_add Z IdZ Zplus Zmult 0%Z Zopp Z_ring a (- (b * q))%Z q0 H7).\napply (div_opp Z IdZ Zplus Zmult 0%Z Zopp Z_ring (b * q)%Z q0).\nexact (div_mult Z IdZ Zplus Zmult 0%Z Zopp Z_ring b q q0 H6 I).\nrewrite H1; auto with zarith.\nexact H6.\nQed.\n\nDefinition gcdZ (a b : Z) := pi1 Z (is_gcdZ a b) (gcdZ_exists a b).\n\nTheorem gcdZ_correct : forall a b : Z, is_gcdZ a b (gcdZ a b).\nProof.\nexact (fun a b : Z => pi2 Z (is_gcdZ a b) (gcdZ_exists a b)).\nQed.\n\nLemma positive_is_gcdZ : forall a b d : Z, is_gcdZ a b d -> (0 <= d)%Z.\nProof.\nintros; elim H; auto with zarith.\nQed.\n\n",
                "context_tokens": 720,
                "proof_start_offset": 3914,
                "proof_end_offset": 4352,
                "proof": "Lemma unicity_is_gcdZ : forall a b c d : Z, is_gcdZ a b c -> is_gcdZ a b d -> d = c.\nProof.\nintros.\nelim (gcd_unicity_apart_sign a b c d (gcdZ_is_gcd a b c H) (gcdZ_is_gcd a b d H0)).\nintros; exact H1.\nintros.\ncut (d = 0%Z).\nintro eq; rewrite eq; rewrite eq in H1; auto with zarith.\napply Zle_antisym.\nrewrite H1; set (c_pos := positive_is_gcdZ a b c H) in *.\nomega.\nset (d_pos := positive_is_gcdZ a b d H0) in *.\nauto with zarith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma unicity_is_gcdZ : forall a b c d : Z, is_gcdZ a b c -> is_gcdZ a b d -> d = c.\nProof.\nintros; elim H; auto with zarith.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zgcd.v\", line 9, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 27, characters 64-68:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 57, characters 42-46:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 61, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 70, characters 44-48:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 70, characters 53-57:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 73, characters 14-18:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 73, characters 14-18:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 7-11:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 7-11:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 94, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 94, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 95, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 95, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 99, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 99, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 100, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 100, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 101, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 101, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 121, characters 0-4:\nError: Attempt to save an incomplete proof (in proof unicity_is_gcdZ)\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Zgcd.v",
                "context": "; intros.\n  cut (Zabs r < Zabs n)%Z; intros.\n  elim (H r H2 n). intros. split with x.\n  apply gcd_mod with q r; trivial. \n  rewrite Zabs_eq; auto with zarith.\nQed.\n\nLemma gcdZ_exists : forall a b : Z, have_gcdZ a b.\nProof.\n  exact (Z_lt_abs_rec _ acc_P).\nQed.\n\nLemma gcdZ_is_gcd :\n forall a b d : Z, is_gcdZ a b d -> is_gcd Z IdZ Zmult 0%Z a b d.\nProof.\nintros. elim H. intros. apply (gcd_OZ_absZ b0). \nclear H a b d; intros. unfold is_gcd in |- *.\nelim H3; clear H3; intros. elim H4; clear H4; intros. split. exact H4.\nsplit. rewrite H1.\napply (div_add Z IdZ Zplus Zmult 0%Z Zopp Z_ring (b * q)%Z r d).\napply (div_mult Z IdZ Zplus Zmult 0%Z Zopp Z_ring b q d).\nexact H4. exact I. exact H3.\nintros. apply (H5 q0).\ncut (r = (a - b * q)%Z); intros. rewrite H8.\napply (div_add Z IdZ Zplus Zmult 0%Z Zopp Z_ring a (- (b * q))%Z q0 H7).\napply (div_opp Z IdZ Zplus Zmult 0%Z Zopp Z_ring (b * q)%Z q0).\nexact (div_mult Z IdZ Zplus Zmult 0%Z Zopp Z_ring b q q0 H6 I).\nrewrite H1; auto with zarith.\nexact H6.\nQed.\n\nDefinition gcdZ (a b : Z) := pi1 Z (is_gcdZ a b) (gcdZ_exists a b).\n\nTheorem gcdZ_correct : forall a b : Z, is_gcdZ a b (gcdZ a b).\nProof.\nexact (fun a b : Z => pi2 Z (is_gcdZ a b) (gcdZ_exists a b)).\nQed.\n\nLemma positive_is_gcdZ : forall a b d : Z, is_gcdZ a b d -> (0 <= d)%Z.\nProof.\nintros; elim H; auto with zarith.\nQed.\n\nLemma unicity_is_gcdZ :\n forall a b c d : Z, is_gcdZ a b c -> is_gcdZ a b d -> d = c.\nProof.\nintros.\nelim\n (gcd_unicity_apart_sign a b c d (gcdZ_is_gcd a b c H) (gcdZ_is_gcd a b d H0)).\nintros; exact H1.\nintros.\ncut (d = 0%Z).\nintro eq; rewrite eq; rewrite eq in H1; auto with zarith.\napply Zle_antisym.\nrewrite H1; set (c_pos := positive_is_gcdZ a b c H) in *.\nomega.\nset (d_pos := positive_is_gcdZ a b d H0) in *.\nauto with zarith.\nQed.\n\n",
                "context_tokens": 726,
                "proof_start_offset": 4354,
                "proof_end_offset": 4506,
                "proof": "Lemma gcdZ_is_gcdZ : forall a b d : Z, is_gcdZ a b d -> d = gcdZ a b.\nProof.\nintros.\napply (unicity_is_gcdZ a b (gcdZ a b) d (gcdZ_correct a b) H).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcdZ_is_gcdZ : forall a b d : Z, is_gcdZ a b d -> d = gcdZ a b.\nProof.\nintros.\nelim (gcd_bezout_is_gcdZ a b d (gcdZ_is_gcd_Z a b d H) (gcdZ_is_gcd_Z a b d H0)).\nintros; apply H1.\napply gcd_divide_r; auto with zarith.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zgcd.v\", line 9, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 27, characters 64-68:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 57, characters 42-46:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 61, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 70, characters 44-48:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 70, characters 53-57:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 73, characters 14-18:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 73, characters 14-18:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 7-11:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 7-11:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 94, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 94, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 95, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 95, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 99, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 99, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 100, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 100, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 101, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 101, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 138, characters 6-24:\nError: The reference gcd_bezout_is_gcdZ was not found in the current\nenvironment.\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Zgcd.v",
                "context": " _ acc_P).\nQed.\n\nLemma gcdZ_is_gcd :\n forall a b d : Z, is_gcdZ a b d -> is_gcd Z IdZ Zmult 0%Z a b d.\nProof.\nintros. elim H. intros. apply (gcd_OZ_absZ b0). \nclear H a b d; intros. unfold is_gcd in |- *.\nelim H3; clear H3; intros. elim H4; clear H4; intros. split. exact H4.\nsplit. rewrite H1.\napply (div_add Z IdZ Zplus Zmult 0%Z Zopp Z_ring (b * q)%Z r d).\napply (div_mult Z IdZ Zplus Zmult 0%Z Zopp Z_ring b q d).\nexact H4. exact I. exact H3.\nintros. apply (H5 q0).\ncut (r = (a - b * q)%Z); intros. rewrite H8.\napply (div_add Z IdZ Zplus Zmult 0%Z Zopp Z_ring a (- (b * q))%Z q0 H7).\napply (div_opp Z IdZ Zplus Zmult 0%Z Zopp Z_ring (b * q)%Z q0).\nexact (div_mult Z IdZ Zplus Zmult 0%Z Zopp Z_ring b q q0 H6 I).\nrewrite H1; auto with zarith.\nexact H6.\nQed.\n\nDefinition gcdZ (a b : Z) := pi1 Z (is_gcdZ a b) (gcdZ_exists a b).\n\nTheorem gcdZ_correct : forall a b : Z, is_gcdZ a b (gcdZ a b).\nProof.\nexact (fun a b : Z => pi2 Z (is_gcdZ a b) (gcdZ_exists a b)).\nQed.\n\nLemma positive_is_gcdZ : forall a b d : Z, is_gcdZ a b d -> (0 <= d)%Z.\nProof.\nintros; elim H; auto with zarith.\nQed.\n\nLemma unicity_is_gcdZ :\n forall a b c d : Z, is_gcdZ a b c -> is_gcdZ a b d -> d = c.\nProof.\nintros.\nelim\n (gcd_unicity_apart_sign a b c d (gcdZ_is_gcd a b c H) (gcdZ_is_gcd a b d H0)).\nintros; exact H1.\nintros.\ncut (d = 0%Z).\nintro eq; rewrite eq; rewrite eq in H1; auto with zarith.\napply Zle_antisym.\nrewrite H1; set (c_pos := positive_is_gcdZ a b c H) in *.\nomega.\nset (d_pos := positive_is_gcdZ a b d H0) in *.\nauto with zarith.\nQed.\n\nLemma gcdZ_is_gcdZ : forall a b d : Z, is_gcdZ a b d -> d = gcdZ a b.\nProof.\nintros. apply (unicity_is_gcdZ a b (gcdZ a b) d (gcdZ_correct a b) H).\nQed.\n\n",
                "context_tokens": 706,
                "proof_start_offset": 4508,
                "proof_end_offset": 4744,
                "proof": "Lemma gcd_modZ : forall a b q r : Z, b <> 0%Z -> (0 <= r < Zabs b)%Z -> a = (b * q + r)%Z -> gcdZ r b = gcdZ b a.\nProof.\nintros.\napply (gcdZ_is_gcdZ b a (gcdZ r b)).\napply (gcd_mod b a (gcdZ r b) q r H H0 H1 (gcdZ_correct r b)).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_modZ : forall a b q r : Z, b <> 0%Z -> (0 <= r < Zabs b)%Z -> a = (b * q + r)%Z -> gcdZ r b = gcdZ b a.\nProof.\nintros.\napply (unique_gcd_bezout_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_for_euclid_forQed.",
                        "correct": false,
                        "error_msg": "File \"./Zgcd.v\", line 9, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 27, characters 64-68:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 57, characters 42-46:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 61, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 70, characters 44-48:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 70, characters 53-57:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 73, characters 14-18:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 73, characters 14-18:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 7-11:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 7-11:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 94, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 94, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 95, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 95, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 99, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 99, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 100, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 100, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 101, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 101, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 140, characters 59-63:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 143, characters 691-692:\nError:\nSyntax error: '|' or ',' or ')' expected after [constr:operconstr level 200] (in [constr:operconstr]).\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Zgcd.v",
                "context": "ring b q d).\nexact H4. exact I. exact H3.\nintros. apply (H5 q0).\ncut (r = (a - b * q)%Z); intros. rewrite H8.\napply (div_add Z IdZ Zplus Zmult 0%Z Zopp Z_ring a (- (b * q))%Z q0 H7).\napply (div_opp Z IdZ Zplus Zmult 0%Z Zopp Z_ring (b * q)%Z q0).\nexact (div_mult Z IdZ Zplus Zmult 0%Z Zopp Z_ring b q q0 H6 I).\nrewrite H1; auto with zarith.\nexact H6.\nQed.\n\nDefinition gcdZ (a b : Z) := pi1 Z (is_gcdZ a b) (gcdZ_exists a b).\n\nTheorem gcdZ_correct : forall a b : Z, is_gcdZ a b (gcdZ a b).\nProof.\nexact (fun a b : Z => pi2 Z (is_gcdZ a b) (gcdZ_exists a b)).\nQed.\n\nLemma positive_is_gcdZ : forall a b d : Z, is_gcdZ a b d -> (0 <= d)%Z.\nProof.\nintros; elim H; auto with zarith.\nQed.\n\nLemma unicity_is_gcdZ :\n forall a b c d : Z, is_gcdZ a b c -> is_gcdZ a b d -> d = c.\nProof.\nintros.\nelim\n (gcd_unicity_apart_sign a b c d (gcdZ_is_gcd a b c H) (gcdZ_is_gcd a b d H0)).\nintros; exact H1.\nintros.\ncut (d = 0%Z).\nintro eq; rewrite eq; rewrite eq in H1; auto with zarith.\napply Zle_antisym.\nrewrite H1; set (c_pos := positive_is_gcdZ a b c H) in *.\nomega.\nset (d_pos := positive_is_gcdZ a b d H0) in *.\nauto with zarith.\nQed.\n\nLemma gcdZ_is_gcdZ : forall a b d : Z, is_gcdZ a b d -> d = gcdZ a b.\nProof.\nintros. apply (unicity_is_gcdZ a b (gcdZ a b) d (gcdZ_correct a b) H).\nQed.\n\nLemma gcd_modZ :\n forall a b q r : Z,\n b <> 0%Z -> (0 <= r < Zabs b)%Z -> a = (b * q + r)%Z -> gcdZ r b = gcdZ b a. \nProof.\nintros. apply (gcdZ_is_gcdZ b a (gcdZ r b)).\napply (gcd_mod b a (gcdZ r b) q r H H0 H1 (gcdZ_correct r b)).\nQed.\n\nInductive verify_BezoutZ (a b : Z) : Set :=\n    Bezout_i :\n      forall u v : Z, (a * u + b * v)%Z = gcdZ a b -> verify_BezoutZ a b.\n\nDefinition Q (a : Z) := forall b : Z, verify_BezoutZ a b.\n\n",
                "context_tokens": 725,
                "proof_start_offset": 4939,
                "proof_end_offset": 5677,
                "proof": "Lemma acc_Q : forall n : Z, (forall m : Z, (Zabs m < Zabs n)%Z -> Q m) -> Q n.\nProof.\nintros q f.\nelim (Z_zerop q); intro e.\nunfold Q in |- *; intro b.\nsplit with 1%Z (Zsgn b).\nrewrite e.\nsimpl in |- *.\nrewrite (Zsgn_Zabs b).\napply (gcdZ_is_gcdZ 0 b (Zabs b)); apply gcd_OZ.\nunfold Q in |- *; intro b.\nelim (Zdiv_eucl_extended e b).\nintro p; elim p; clear p.\nintros div r; intros.\ncut (Zabs r < Zabs q)%Z; intros.\nelim (f r H q).\nintros.\nsplit with (v + - (div * u))%Z u.\nelim p.\nintros.\nelim H1.\nintros.\nintros.\npattern b at 1 in |- *.\nrewrite H0; auto with zarith.\nrewrite <- (gcd_modZ b q div r); auto with zarith.\nrewrite <- e0.\nring.\nelim p; intros; elim H0; intros.\nrewrite Zabs_eq; auto with zarith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma acc_Q : forall n : Z, (forall m : Z, (Zabs m < Zabs n)%Z -> Q m) -> Q n.\nProof.\nintros.\napply (pre_is_gcdZ n (Zabs m)); auto with zarith.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zgcd.v\", line 9, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 27, characters 64-68:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 57, characters 42-46:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 61, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 70, characters 44-48:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 70, characters 53-57:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 73, characters 14-18:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 73, characters 14-18:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 7-11:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 7-11:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 94, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 94, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 95, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 95, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 99, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 99, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 100, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 100, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 101, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 101, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 142, characters 23-27:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 154, characters 44-48:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 154, characters 53-57:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 157, characters 22-26:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 157, characters 7-18:\nError: The reference pre_is_gcdZ was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Zgcd.v",
                "context": "is_gcdZ : forall a b d : Z, is_gcdZ a b d -> (0 <= d)%Z.\nProof.\nintros; elim H; auto with zarith.\nQed.\n\nLemma unicity_is_gcdZ :\n forall a b c d : Z, is_gcdZ a b c -> is_gcdZ a b d -> d = c.\nProof.\nintros.\nelim\n (gcd_unicity_apart_sign a b c d (gcdZ_is_gcd a b c H) (gcdZ_is_gcd a b d H0)).\nintros; exact H1.\nintros.\ncut (d = 0%Z).\nintro eq; rewrite eq; rewrite eq in H1; auto with zarith.\napply Zle_antisym.\nrewrite H1; set (c_pos := positive_is_gcdZ a b c H) in *.\nomega.\nset (d_pos := positive_is_gcdZ a b d H0) in *.\nauto with zarith.\nQed.\n\nLemma gcdZ_is_gcdZ : forall a b d : Z, is_gcdZ a b d -> d = gcdZ a b.\nProof.\nintros. apply (unicity_is_gcdZ a b (gcdZ a b) d (gcdZ_correct a b) H).\nQed.\n\nLemma gcd_modZ :\n forall a b q r : Z,\n b <> 0%Z -> (0 <= r < Zabs b)%Z -> a = (b * q + r)%Z -> gcdZ r b = gcdZ b a. \nProof.\nintros. apply (gcdZ_is_gcdZ b a (gcdZ r b)).\napply (gcd_mod b a (gcdZ r b) q r H H0 H1 (gcdZ_correct r b)).\nQed.\n\nInductive verify_BezoutZ (a b : Z) : Set :=\n    Bezout_i :\n      forall u v : Z, (a * u + b * v)%Z = gcdZ a b -> verify_BezoutZ a b.\n\nDefinition Q (a : Z) := forall b : Z, verify_BezoutZ a b.\n\nLemma acc_Q : forall n : Z, (forall m : Z, (Zabs m < Zabs n)%Z -> Q m) -> Q n.\nProof.\n  intros q f. elim (Z_zerop q); intro e. unfold Q in |- *; intro b.\n  split with 1%Z (Zsgn b). rewrite e. simpl in |- *. rewrite (Zsgn_Zabs b).\n  apply (gcdZ_is_gcdZ 0 b (Zabs b)); apply gcd_OZ. unfold Q in |- *; intro b.\n  elim (Zdiv_eucl_extended e b). intro p; elim p; clear p.\n  intros div r; intros. cut (Zabs r < Zabs q)%Z; intros.\n  elim (f r H q). intros. split with (v + - (div * u))%Z u.\n  elim p. intros. elim H1. intros. intros. pattern b at 1 in |- *.\n  rewrite H0; auto with zarith.\n  rewrite <- (gcd_modZ b q div r); auto with zarith.\n  rewrite <- e0.\n  ring.\n  elim p; intros; elim H0; intros. \n  rewrite Zabs_eq; auto with zarith.\nQed.\n\n",
                "context_tokens": 739,
                "proof_start_offset": 5679,
                "proof_end_offset": 5780,
                "proof": "Lemma Bezout_exists : forall a b : Z, verify_BezoutZ a b.\nProof.\nexact (Z_lt_abs_rec _ acc_Q).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma Bezout_exists : forall a b : Z, verify_BezoutZ a b.\nProof.\n  intros a b.\n  unfold Q in |- *.\n  split.\n  unfold Q in |- *.\n  split.\n  unfold Q in |- *.\n  split.\n  unfold Q in |- *.\n  split.\n  unfold Q in |- *.\n  split.\n  unfold Q in |- *.\n  split.\n  unfold Q in |- *.\n  unfold Z.\n  split.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n  unfold Z.\n Qed.",
                        "correct": false,
                        "error_msg": "File \"./Zgcd.v\", line 9, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 27, characters 64-68:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 57, characters 42-46:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 61, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 70, characters 44-48:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 70, characters 53-57:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 73, characters 14-18:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 73, characters 14-18:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 7-11:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 7-11:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 94, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 94, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 95, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 95, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 99, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 99, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 100, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 100, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 101, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 101, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 142, characters 23-27:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 154, characters 44-48:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 154, characters 53-57:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 157, characters 18-22:\nWarning: Zsgn is Z.sgn [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 157, characters 18-22:\nWarning: Zsgn is Z.sgn [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 158, characters 27-31:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 158, characters 27-31:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 160, characters 29-33:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 160, characters 38-42:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 160, characters 29-33:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 160, characters 38-42:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 168, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 168, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 168, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 168, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 175, characters 2-7:\nError: Unable to find an instance for the variables u, v.\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Zgcd.v",
                "context": " a b d -> d = c.\nProof.\nintros.\nelim\n (gcd_unicity_apart_sign a b c d (gcdZ_is_gcd a b c H) (gcdZ_is_gcd a b d H0)).\nintros; exact H1.\nintros.\ncut (d = 0%Z).\nintro eq; rewrite eq; rewrite eq in H1; auto with zarith.\napply Zle_antisym.\nrewrite H1; set (c_pos := positive_is_gcdZ a b c H) in *.\nomega.\nset (d_pos := positive_is_gcdZ a b d H0) in *.\nauto with zarith.\nQed.\n\nLemma gcdZ_is_gcdZ : forall a b d : Z, is_gcdZ a b d -> d = gcdZ a b.\nProof.\nintros. apply (unicity_is_gcdZ a b (gcdZ a b) d (gcdZ_correct a b) H).\nQed.\n\nLemma gcd_modZ :\n forall a b q r : Z,\n b <> 0%Z -> (0 <= r < Zabs b)%Z -> a = (b * q + r)%Z -> gcdZ r b = gcdZ b a. \nProof.\nintros. apply (gcdZ_is_gcdZ b a (gcdZ r b)).\napply (gcd_mod b a (gcdZ r b) q r H H0 H1 (gcdZ_correct r b)).\nQed.\n\nInductive verify_BezoutZ (a b : Z) : Set :=\n    Bezout_i :\n      forall u v : Z, (a * u + b * v)%Z = gcdZ a b -> verify_BezoutZ a b.\n\nDefinition Q (a : Z) := forall b : Z, verify_BezoutZ a b.\n\nLemma acc_Q : forall n : Z, (forall m : Z, (Zabs m < Zabs n)%Z -> Q m) -> Q n.\nProof.\n  intros q f. elim (Z_zerop q); intro e. unfold Q in |- *; intro b.\n  split with 1%Z (Zsgn b). rewrite e. simpl in |- *. rewrite (Zsgn_Zabs b).\n  apply (gcdZ_is_gcdZ 0 b (Zabs b)); apply gcd_OZ. unfold Q in |- *; intro b.\n  elim (Zdiv_eucl_extended e b). intro p; elim p; clear p.\n  intros div r; intros. cut (Zabs r < Zabs q)%Z; intros.\n  elim (f r H q). intros. split with (v + - (div * u))%Z u.\n  elim p. intros. elim H1. intros. intros. pattern b at 1 in |- *.\n  rewrite H0; auto with zarith.\n  rewrite <- (gcd_modZ b q div r); auto with zarith.\n  rewrite <- e0.\n  ring.\n  elim p; intros; elim H0; intros. \n  rewrite Zabs_eq; auto with zarith.\nQed.\n\nLemma Bezout_exists : forall a b : Z, verify_BezoutZ a b.\nProof.\n  exact (Z_lt_abs_rec _ acc_Q).\nQed.\n\nDefinition congruentZ (x y n : Z) := divide Z IdZ Zmult 0%Z n (x + - y)%Z.\n\n",
                "context_tokens": 735,
                "proof_start_offset": 5858,
                "proof_end_offset": 6105,
                "proof": "Lemma divide_selfZ : forall x : Z, divide Z IdZ Zmult 0%Z x x.\nProof.\nintros.\nunfold divide in |- *.\nsplit.\nexact I.\nsplit.\nexact I.\nelim (Z_zerop x); intros.\nleft; exact a.\nright; split.\nexact b.\nexists 1%Z.\nsplit.\nexact I.\nauto with zarith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma divide_selfZ : forall x : Z, divide Z IdZ Zmult 0%Z x x.\nProof.\n  exact (Z_lt_abs_rec _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _Qed.",
                        "correct": false,
                        "error_msg": "File \"./Zgcd.v\", line 9, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 27, characters 64-68:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 57, characters 42-46:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 61, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 70, characters 44-48:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 70, characters 53-57:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 73, characters 14-18:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 73, characters 14-18:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 7-11:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 7-11:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 94, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 94, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 95, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 95, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 99, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 99, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 100, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 100, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 101, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 101, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 142, characters 23-27:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 154, characters 44-48:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 154, characters 53-57:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 157, characters 18-22:\nWarning: Zsgn is Z.sgn [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 157, characters 18-22:\nWarning: Zsgn is Z.sgn [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 158, characters 27-31:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 158, characters 27-31:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 160, characters 29-33:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 160, characters 38-42:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 160, characters 29-33:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 160, characters 38-42:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 168, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 168, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 168, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 168, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 180, characters 510-511:\nError:\nSyntax error: '|' or ',' or ')' expected after [constr:operconstr level 200] (in [constr:operconstr]).\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Zgcd.v",
                "context": "pos := positive_is_gcdZ a b c H) in *.\nomega.\nset (d_pos := positive_is_gcdZ a b d H0) in *.\nauto with zarith.\nQed.\n\nLemma gcdZ_is_gcdZ : forall a b d : Z, is_gcdZ a b d -> d = gcdZ a b.\nProof.\nintros. apply (unicity_is_gcdZ a b (gcdZ a b) d (gcdZ_correct a b) H).\nQed.\n\nLemma gcd_modZ :\n forall a b q r : Z,\n b <> 0%Z -> (0 <= r < Zabs b)%Z -> a = (b * q + r)%Z -> gcdZ r b = gcdZ b a. \nProof.\nintros. apply (gcdZ_is_gcdZ b a (gcdZ r b)).\napply (gcd_mod b a (gcdZ r b) q r H H0 H1 (gcdZ_correct r b)).\nQed.\n\nInductive verify_BezoutZ (a b : Z) : Set :=\n    Bezout_i :\n      forall u v : Z, (a * u + b * v)%Z = gcdZ a b -> verify_BezoutZ a b.\n\nDefinition Q (a : Z) := forall b : Z, verify_BezoutZ a b.\n\nLemma acc_Q : forall n : Z, (forall m : Z, (Zabs m < Zabs n)%Z -> Q m) -> Q n.\nProof.\n  intros q f. elim (Z_zerop q); intro e. unfold Q in |- *; intro b.\n  split with 1%Z (Zsgn b). rewrite e. simpl in |- *. rewrite (Zsgn_Zabs b).\n  apply (gcdZ_is_gcdZ 0 b (Zabs b)); apply gcd_OZ. unfold Q in |- *; intro b.\n  elim (Zdiv_eucl_extended e b). intro p; elim p; clear p.\n  intros div r; intros. cut (Zabs r < Zabs q)%Z; intros.\n  elim (f r H q). intros. split with (v + - (div * u))%Z u.\n  elim p. intros. elim H1. intros. intros. pattern b at 1 in |- *.\n  rewrite H0; auto with zarith.\n  rewrite <- (gcd_modZ b q div r); auto with zarith.\n  rewrite <- e0.\n  ring.\n  elim p; intros; elim H0; intros. \n  rewrite Zabs_eq; auto with zarith.\nQed.\n\nLemma Bezout_exists : forall a b : Z, verify_BezoutZ a b.\nProof.\n  exact (Z_lt_abs_rec _ acc_Q).\nQed.\n\nDefinition congruentZ (x y n : Z) := divide Z IdZ Zmult 0%Z n (x + - y)%Z.\n\nLemma divide_selfZ : forall x : Z, divide Z IdZ Zmult 0%Z x x.\nProof.\nintros. unfold divide in |- *. split. exact I. split. exact I.\nelim (Z_zerop x); intros. left; exact a.\nright; split. exact b. exists 1%Z. split. exact I. auto with zarith.\nQed.\n\n",
                "context_tokens": 715,
                "proof_start_offset": 6107,
                "proof_end_offset": 7147,
                "proof": "Theorem chinese_remaindering_theorem : forall a b x y : Z, gcdZ a b = 1%Z -> {z : Z | congruentZ z x a /\\ congruentZ z y b}.\nProof.\nintros.\nelim (Bezout_exists a b); intros.\nexists (x * (b * v) + y * (a * u))%Z.\nunfold congruentZ in |- *; split.\nrewrite H in e.\nreplace (x * (b * v) + y * (a * u) + - x)%Z with (a * (u * (y - x)))%Z.\nunfold divide in |- *.\nsplit.\nexact I.\nsplit.\nexact I.\nelim (Z_zerop a); intros.\nleft; rewrite a0; auto with zarith.\nright; split; trivial; exists (u * (y - x))%Z; auto with zarith.\nsplit.\nexact I.\nreflexivity.\nreplace (b * v)%Z with (1 + - (a * u))%Z; auto with zarith.\nring.\nrewrite H in e.\nreplace (x * (b * v) + y * (a * u) + - y)%Z with (b * (v * (x - y)))%Z.\nunfold divide in |- *.\nsplit.\nexact I.\nsplit.\nexact I.\nelim (Z_zerop b); intros.\nleft; rewrite a0; auto with zarith.\nright; split; trivial; exists (v * (x - y))%Z; auto with zarith.\nsplit.\nexact I.\nreflexivity.\nreplace (a * u)%Z with (1 + - (b * v))%Z; auto with zarith.\nring.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem chinese_remaindering_theorem : forall a b x y : Z, gcdZ a b = 1%Z -> {z : Z | congruentZ z x a /\\ congruentZ z y b}.\nProof.\n  intros.\n  apply (Z_lt_abs_pos x y H).\n  apply (Z_lt_abs_pos y z H).\n  apply (Z_lt_abs_pos y z H).\n  apply (Z_lt_abs_pos y z H).\n  apply (Z_lt_abs_pos y z H).\n  apply (Z_lt_abs_pos y z H).\n  apply (Z_lt_abs_pos z H).\n  apply (Z_lt_abs_pos z H).\n  apply (Z_lt_abs_pos z H).\n  apply (Z_lt_abs_pos z H).\n  apply (Z_lt_abs_pos z H).\n  apply (Z_lt_abs_pos z H).\n  apply (Z_lt_abs_pos z H).\n  apply (Z_lt_abs_pos z H).\n  apply (Z_lt_abs_pos z H).\n  apply (Z_lt_abs_pos z H).\n  apply (Z_lt_abs_pos z H).\n  apply (Z_lt_abs_pos z H).\n  apply (Z_lt_abs_posQed.",
                        "correct": false,
                        "error_msg": "File \"./Zgcd.v\", line 9, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 18, characters 54-58:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 27, characters 64-68:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 32, characters 8-15:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 57, characters 42-46:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 61, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 70, characters 44-48:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 70, characters 53-57:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 73, characters 14-18:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 73, characters 14-18:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 7-11:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 7-11:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 76, characters 16-20:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 79, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 94, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 94, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 95, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 95, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 99, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 99, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 100, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 100, characters 37-41:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 101, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 101, characters 38-42:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 142, characters 23-27:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 154, characters 44-48:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 154, characters 53-57:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 157, characters 18-22:\nWarning: Zsgn is Z.sgn [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 157, characters 18-22:\nWarning: Zsgn is Z.sgn [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 158, characters 27-31:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 158, characters 27-31:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 160, characters 29-33:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 160, characters 38-42:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 160, characters 29-33:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 160, characters 38-42:\nWarning: Zabs is Z.abs [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 168, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 168, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 168, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 168, characters 10-17:\nWarning: Zabs_eq is Z.abs_eq [compatibility-notation,deprecated]\nFile \"./Zgcd.v\", line 188, characters 9-21:\nError: The reference Z_lt_abs_pos was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Zstruct.v",
                "context": "Require Export Lci.\nRequire Export misc.\nRequire Export Arith.\nRequire Export groups.\nRequire Export rings.\nRequire Export ZArith.\nRequire Import Omega.\n\n(* Addition on Z, (Z, +) is a group *)\n\nDefinition IdZ (x : Z) := True.\n\n",
                "context_tokens": 65,
                "proof_start_offset": 227,
                "proof_end_offset": 453,
                "proof": "Theorem Z_group : is_group Z IdZ Zplus 0%Z Zopp.\nProof.\nsplit.\nred in |- *; trivial.\nsplit.\nred in |- *; auto with zarith.\nsplit; red in |- *.\nsplit; auto with zarith.\nunfold IdZ in |- *; trivial.\nsplit; auto with zarith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem Z_group : is_group Z IdZ Zplus 0%Z Zopp.\nProof.\nunfold Z.abs.\nintros x.\nunfold Z.abs.\nrewrite Zmult_comm.\napply Z_to_group_nat_complete_pos.\nQed.",
                        "correct": false,
                        "error_msg": "Warning: -extra and -extra-phony are deprecated.\nWarning: Write the extra targets in Makefile.coq.local.\n\nFile \"./Zstruct.v\", line 13, characters 43-47:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zstruct.v\", line 16, characters 0-8:\nError: No product even after head-reduction.\n\nmake[2]: *** [Makefile.coq:663: Zstruct.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Zstruct.v",
                "context": "Require Export Lci.\nRequire Export misc.\nRequire Export Arith.\nRequire Export groups.\nRequire Export rings.\nRequire Export ZArith.\nRequire Import Omega.\n\n(* Addition on Z, (Z, +) is a group *)\n\nDefinition IdZ (x : Z) := True.\n\nTheorem Z_group : is_group Z IdZ Zplus 0%Z Zopp.\nProof.\nsplit.\nred in |- *; trivial.\nsplit.\nred in |- *; auto with zarith.\nsplit; red in |- *.\nsplit; auto with zarith.\nunfold IdZ in |- *; trivial.\nsplit; auto with zarith.\nQed.\n\n(* Multiplication on Z, (Z, +, *, 0, 1) is a unitary commutative ring *)\n\n",
                "context_tokens": 167,
                "proof_start_offset": 529,
                "proof_end_offset": 762,
                "proof": "Theorem Z_ring : is_ring Z IdZ Zplus Zmult 0%Z Zopp.\nProof.\nunfold is_ring in |- *.\nsplit.\nred in |- *; auto with zarith.\nsplit.\nexact Z_group.\nsplit.\nunfold intern in |- *.\nintros.\nexact I.\nsplit; red in |- *; auto with zarith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem Z_ring : is_ring Z IdZ Zplus Zmult 0%Z Zopp.\nProof.\nsplit.\nred in |- *; auto with zarith.\nunfold Z in |- *; auto with zarith.\nunfold Z in |- *; auto with zarith.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zstruct.v\", line 13, characters 43-47:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zstruct.v\", line 27, characters 47-51:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zstruct.v\", line 31, characters 0-35:\nError: Cannot coerce Z to an evaluable reference.\n\nmake[2]: *** [Makefile.coq:663: Zstruct.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Zstruct.v",
                "context": "Require Export Lci.\nRequire Export misc.\nRequire Export Arith.\nRequire Export groups.\nRequire Export rings.\nRequire Export ZArith.\nRequire Import Omega.\n\n(* Addition on Z, (Z, +) is a group *)\n\nDefinition IdZ (x : Z) := True.\n\nTheorem Z_group : is_group Z IdZ Zplus 0%Z Zopp.\nProof.\nsplit.\nred in |- *; trivial.\nsplit.\nred in |- *; auto with zarith.\nsplit; red in |- *.\nsplit; auto with zarith.\nunfold IdZ in |- *; trivial.\nsplit; auto with zarith.\nQed.\n\n(* Multiplication on Z, (Z, +, *, 0, 1) is a unitary commutative ring *)\n\nTheorem Z_ring : is_ring Z IdZ Zplus Zmult 0%Z Zopp.\nProof.\nunfold is_ring in |- *.\nsplit.\nred in |- *; auto with zarith.\nsplit. exact Z_group.\nsplit. unfold intern in |- *. intros. exact I.\nsplit; red in |- *; auto with zarith.\nQed.\n\n",
                "context_tokens": 245,
                "proof_start_offset": 764,
                "proof_end_offset": 1037,
                "proof": "Theorem Z_unitary_commutative_ring : is_unitary_commutative_ring Z IdZ Zplus Zmult 0%Z 1%Z Zopp.\nProof.\nunfold is_unitary_commutative_ring in |- *.\nsplit.\nexact Z_ring.\nsplit.\nred in |- *; auto with zarith.\nsplit.\nunfold IdZ in |- *; trivial.\nsplit; auto with zarith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem Z_unitary_commutative_ring : is_unitary_commutative_ring Z IdZ Zplus Zmult 0%Z 1%Z Zopp.\nProof.\nunfold is_ring in |- *.\nsplit.\napply Z_unit_equiv.\nunfold opp in |- *. intros. exact I.\nsplit.\napply Z_unit_equiv.\nunfold opp in |- *. intros. exact I.\nsplit.\napply Z_unit_equiv.\nunfold opp in |- *. intros. exact I.\nsplit.\napply Z_unit_equiv.\nunfold opp in |- *. intros. exact I.\nsplit.\napply Z_unit_equiv.\nunfold opp in |- *. intros. exact I.\nsplit.\napply Z_unit_equiv.\nunfold opp in |- *. intros. exact I.\nsplit.\napply Z_unit_equiv.\nunfold opp in |- *. intros. exact I.\nsplit.\napply Z_unit_equiv.\nunfold opp in |- *. intros. exact I.\nsplit.\napply Z_unit_equiv.\nunfold opp in |- *. intros. exact I.\nsplit.\napply Z_unit_equiv.\nunfold opp in |- *. intros. exact I.\nsplit.\napply Z_unit_equiv.\nunfold opp in |- *. intros. exact I.\nsplit.Qed.",
                        "correct": false,
                        "error_msg": "File \"./Zstruct.v\", line 13, characters 43-47:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zstruct.v\", line 27, characters 47-51:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zstruct.v\", line 37, characters 91-95:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zstruct.v\", line 41, characters 6-18:\nError: The reference Z_unit_equiv was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zstruct.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Zstruct.v",
                "context": "Require Export Lci.\nRequire Export misc.\nRequire Export Arith.\nRequire Export groups.\nRequire Export rings.\nRequire Export ZArith.\nRequire Import Omega.\n\n(* Addition on Z, (Z, +) is a group *)\n\nDefinition IdZ (x : Z) := True.\n\nTheorem Z_group : is_group Z IdZ Zplus 0%Z Zopp.\nProof.\nsplit.\nred in |- *; trivial.\nsplit.\nred in |- *; auto with zarith.\nsplit; red in |- *.\nsplit; auto with zarith.\nunfold IdZ in |- *; trivial.\nsplit; auto with zarith.\nQed.\n\n(* Multiplication on Z, (Z, +, *, 0, 1) is a unitary commutative ring *)\n\nTheorem Z_ring : is_ring Z IdZ Zplus Zmult 0%Z Zopp.\nProof.\nunfold is_ring in |- *.\nsplit.\nred in |- *; auto with zarith.\nsplit. exact Z_group.\nsplit. unfold intern in |- *. intros. exact I.\nsplit; red in |- *; auto with zarith.\nQed.\n\nTheorem Z_unitary_commutative_ring :\n is_unitary_commutative_ring Z IdZ Zplus Zmult 0%Z 1%Z Zopp.\nProof.\nunfold is_unitary_commutative_ring in |- *.\nsplit. exact Z_ring.\nsplit.\nred in |- *; auto with zarith.\nsplit.\nunfold IdZ in |- *; trivial.\nsplit; auto with zarith.\nQed.\n\n(* Z is an integral domain *)\n\n",
                "context_tokens": 346,
                "proof_start_offset": 1070,
                "proof_end_offset": 1413,
                "proof": "Theorem integrityZ : integrity Z Zmult 0%Z.\nProof.\nunfold integrity in |- *.\nintros a b; elim a.\nintros; left; reflexivity.\nintros; right.\ngeneralize H; clear H; simpl in |- *; case b; intros; inversion H; trivial.\nintros; right.\ngeneralize H; clear H; simpl in |- *; case b; intros; inversion H; trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem integrityZ : integrity Z Zmult 0%Z.\nProof.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverse in |- *.\nunfold Z_inverseQed.",
                        "correct": false,
                        "error_msg": "File \"./Zstruct.v\", line 13, characters 43-47:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zstruct.v\", line 27, characters 47-51:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zstruct.v\", line 38, characters 55-59:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zstruct.v\", line 53, characters 7-16:\nError: The reference Z_inverse was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zstruct.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Zstruct.v",
                "context": "Require Export Lci.\nRequire Export misc.\nRequire Export Arith.\nRequire Export groups.\nRequire Export rings.\nRequire Export ZArith.\nRequire Import Omega.\n\n(* Addition on Z, (Z, +) is a group *)\n\nDefinition IdZ (x : Z) := True.\n\nTheorem Z_group : is_group Z IdZ Zplus 0%Z Zopp.\nProof.\nsplit.\nred in |- *; trivial.\nsplit.\nred in |- *; auto with zarith.\nsplit; red in |- *.\nsplit; auto with zarith.\nunfold IdZ in |- *; trivial.\nsplit; auto with zarith.\nQed.\n\n(* Multiplication on Z, (Z, +, *, 0, 1) is a unitary commutative ring *)\n\nTheorem Z_ring : is_ring Z IdZ Zplus Zmult 0%Z Zopp.\nProof.\nunfold is_ring in |- *.\nsplit.\nred in |- *; auto with zarith.\nsplit. exact Z_group.\nsplit. unfold intern in |- *. intros. exact I.\nsplit; red in |- *; auto with zarith.\nQed.\n\nTheorem Z_unitary_commutative_ring :\n is_unitary_commutative_ring Z IdZ Zplus Zmult 0%Z 1%Z Zopp.\nProof.\nunfold is_unitary_commutative_ring in |- *.\nsplit. exact Z_ring.\nsplit.\nred in |- *; auto with zarith.\nsplit.\nunfold IdZ in |- *; trivial.\nsplit; auto with zarith.\nQed.\n\n(* Z is an integral domain *)\n\nTheorem integrityZ : integrity Z Zmult 0%Z.\nProof.\nunfold integrity in |- *.\nintros a b; elim a.\n(* OZ *)\nintros; left; reflexivity.\n(* pos n *)\nintros; right.\ngeneralize H; clear H; simpl in |- *; case b; intros; inversion H; trivial.\n(* neg n *)\nintros; right.\ngeneralize H; clear H; simpl in |- *; case b; intros; inversion H; trivial.\nQed.\n\n",
                "context_tokens": 458,
                "proof_start_offset": 1415,
                "proof_end_offset": 2552,
                "proof": "Lemma inversibleZ : forall x : Z, inversible Z Zmult 1%Z x -> x = 1%Z \\/ x = (-1)%Z.\nProof.\nunfold inversible in |- *.\nintros.\ninversion_clear H.\ninversion_clear H0.\nclear H1.\ngeneralize H; clear H.\nelim (Z_lt_ge_dec 0 x); intros.\nleft.\nelim (Z_le_lt_eq_dec 1 x); auto with zarith; intros.\ncut (1 > x0)%Z; intros.\nabsurd (0 < x0)%Z; intros; auto with zarith.\napply Zgt_lt.\napply Zmult_gt_0_reg_l with x; auto with zarith.\napply Zmult_gt_reg_r with x; auto with zarith.\nrewrite Zmult_1_l; rewrite Zmult_comm; auto with zarith.\nelim (Z_le_lt_eq_dec x 0); auto with zarith; intros.\nclear b.\nright.\nelim (Z_le_lt_eq_dec 1 (- x)); auto with zarith; intros.\ncut (1 > - x0)%Z; intros.\nabsurd (0 < - x0)%Z; intros; auto with zarith.\napply Zgt_lt.\napply Zmult_gt_0_reg_l with (- x)%Z; auto with zarith.\nrewrite Zopp_mult_distr_l_reverse; rewrite <- Zopp_mult_distr_r; auto with zarith.\napply Zmult_gt_reg_r with (- x)%Z; auto with zarith.\nrewrite Zmult_1_l; rewrite Zmult_comm.\nrewrite Zopp_mult_distr_l_reverse; rewrite <- Zopp_mult_distr_r; auto with zarith.\nrewrite b0 in H; simpl in H; inversion H.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma inversibleZ : forall x : Z, inversible Z Zmult 1%Z x -> x = 1%Z \\/ x = (-1)%Z.\nProof.\nintros x H; elim H; simpl in |- *; auto with zarith.\nintros; right.\ngeneralize H; clear H; simpl in |- *; case b; intros; inversion H; trivial.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zstruct.v\", line 13, characters 43-47:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zstruct.v\", line 27, characters 47-51:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zstruct.v\", line 38, characters 55-59:\nWarning: Zopp is Z.opp [compatibility-notation,deprecated]\nFile \"./Zstruct.v\", line 69, characters 43-44:\nError: The reference b was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zstruct.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Lci.v",
                "context": "\n(* Properties of the laws of internal composition. *)\n\nSection Internal.\n\nVariable S : Set.\nVariable G : S -> Prop.\nVariable Add : S -> S -> S.\nVariable O I : S.\nVariable Opp Inv : S -> S.\n\nDefinition intern := forall x y : S, G x -> G y -> G (Add x y).\n\nDefinition commutativity := forall x y : S, Add x y = Add y x.\n\nDefinition associativity :=\n  forall x y z : S, Add x (Add y z) = Add (Add x y) z :>S.\n\nDefinition neutral (S : Set) (G : S -> Prop) (Add : S -> S -> S) \n  (O : S) := G O /\\ (forall x : S, G x -> Add x O = x /\\ Add O x = x).\n\n",
                "context_tokens": 187,
                "proof_start_offset": 546,
                "proof_end_offset": 679,
                "proof": "Lemma neutral_add : neutral S G Add O -> O = Add O O.\nProof.\nintros; symmetry in |- *.\nelim H; intros; elim (H1 O H0); trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma neutral_add : neutral S G Add O -> O = Add O O.\nProof.\nintros.\napply (E_0_l (fun x y : S => Add x O = x /\\ Add x O = x /\\ Add O x = x)).\nrewrite E_0; auto.\nQed.",
                        "correct": false,
                        "error_msg": "Warning: -extra and -extra-phony are deprecated.\nWarning: Write the extra targets in Makefile.coq.local.\n\nFile \"./Lci.v\", line 25, characters 7-12:\nError: The reference E_0_l was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Lci.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/Lci.v",
                "context": "\n(* Properties of the laws of internal composition. *)\n\nSection Internal.\n\nVariable S : Set.\nVariable G : S -> Prop.\nVariable Add : S -> S -> S.\nVariable O I : S.\nVariable Opp Inv : S -> S.\n\nDefinition intern := forall x y : S, G x -> G y -> G (Add x y).\n\nDefinition commutativity := forall x y : S, Add x y = Add y x.\n\nDefinition associativity :=\n  forall x y z : S, Add x (Add y z) = Add (Add x y) z :>S.\n\nDefinition neutral (S : Set) (G : S -> Prop) (Add : S -> S -> S) \n  (O : S) := G O /\\ (forall x : S, G x -> Add x O = x /\\ Add O x = x).\n\nLemma neutral_add : neutral S G Add O -> O = Add O O.\nProof.\nintros; symmetry  in |- *.\nelim H; intros; elim (H1 O H0); trivial.\nQed.\n\nDefinition is_opposite (x y : S) := G x /\\ G y /\\ Add x y = O /\\ Add y x = O.\n\n",
                "context_tokens": 267,
                "proof_start_offset": 760,
                "proof_end_offset": 981,
                "proof": "Lemma opp_com : commutativity -> forall x y : S, G x -> G y -> Add x y = O -> is_opposite x y.\nProof.\nintros.\nunfold is_opposite in |- *.\nsplit.\nexact H0.\nsplit.\nexact H1.\nsplit.\nexact H2.\nelim (H x y).\nexact H2.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma opp_com : commutativity -> forall x y : S, G x -> G y -> Add x y = O -> is_opposite x y.\nProof.\nintros; symmetry  in |- *.\nelim H0; intros; elim (H0 O H1); trivial.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Lci.v\", line 32, characters 8-25:\nError:\nLtac call to \"symmetry in (in_clause)\" failed.\nTactic failure:  The relation is_opposite is not a declared symmetric relation. Maybe you need to require the Coq.Classes.RelationClasses library.\n\nmake[2]: *** [Makefile.coq:663: Lci.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/rings.v",
                "context": "Require Export Lci.\nRequire Export misc.\nRequire Export groups.\nRequire Export Compare_dec.\n\n\nSection ring.\n\nVariable S : Set.\nVariable A : S -> Prop.\nVariable Add Mult : S -> S -> S.\nVariable O I : S.\nVariable Opp : S -> S.\nVariable v : S -> nat.\n\nDefinition is_ring :=\n  commutativity S Add /\\\n  is_group S A Add O Opp /\\\n  intern S A Mult /\\ associativity S Mult /\\ distributivity S Add Mult.\n\n",
                "context_tokens": 114,
                "proof_start_offset": 397,
                "proof_end_offset": 1206,
                "proof": "Lemma mult_O : is_ring -> forall x : S, A x -> Mult x O = O /\\ Mult O x = O.\nProof.\nintros.\nelim H; intros; elim H2; intros; elim H3; intros; elim H4; intros.\nelim H6; intros; elim H8; intros; elim H10; intros; elim H13; intros.\nclear H2 H4 H5 H6 H8 H9 H10 H11 H13 H14.\nsplit.\napply (regular_l S A Add O Opp H3 (Mult x O) O (H7 x O H0 H15) H15 (Mult x O) (H7 x O H0 H15)).\nelim (H16 (Mult x O) (H7 x O H0 H15)); intros; rewrite H2.\nelim (H12 x O O); intros; elim H6.\nelim (H16 O H15); intros; rewrite H8; reflexivity.\napply (regular_l S A Add O Opp H3 (Mult O x) O (H7 O x H15 H0) H15 (Mult O x) (H7 O x H15 H0)).\nelim (H16 (Mult O x) (H7 O x H15 H0)); intros; rewrite H2.\nelim (H12 O O x); intros; elim H5.\nelim (H16 O H15); intros; rewrite H8; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_O : is_ring -> forall x : S, A x -> Mult x O = O /\\ Mult O x = O.\nProof.\nintros x x.\nunfold is_ring in |- *.\nelim x.\nintros x0 y0 H1 H2.\nrewrite H1.\nrewrite <- H2.\nrewrite <- H1.\nrewrite <- H2.\nrewrite <- H2.\nrewrite <- H3.\nrewrite <- H1.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- H3.\nrewrite <- HQed.",
                        "correct": false,
                        "error_msg": "Warning: -extra and -extra-phony are deprecated.\nWarning: Write the extra targets in Makefile.coq.local.\n\nFile \"./rings.v\", line 23, characters 9-10:\nError: x is used twice.\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/rings.v",
                "context": "Require Export Lci.\nRequire Export misc.\nRequire Export groups.\nRequire Export Compare_dec.\n\n\nSection ring.\n\nVariable S : Set.\nVariable A : S -> Prop.\nVariable Add Mult : S -> S -> S.\nVariable O I : S.\nVariable Opp : S -> S.\nVariable v : S -> nat.\n\nDefinition is_ring :=\n  commutativity S Add /\\\n  is_group S A Add O Opp /\\\n  intern S A Mult /\\ associativity S Mult /\\ distributivity S Add Mult.\n\nLemma mult_O : is_ring -> forall x : S, A x -> Mult x O = O /\\ Mult O x = O.\nProof.\nintros.\nelim H; intros; elim H2; intros; elim H3; intros; elim H4; intros. \nelim H6; intros; elim H8; intros; elim H10; intros; elim H13; intros.\nclear H2 H4 H5 H6 H8 H9 H10 H11 H13 H14. \nsplit.\n(* [x*0 = 0] *)\napply\n (regular_l S A Add O Opp H3 (Mult x O) O (H7 x O H0 H15) H15 \n    (Mult x O) (H7 x O H0 H15)).\nelim (H16 (Mult x O) (H7 x O H0 H15)); intros; rewrite H2.\nelim (H12 x O O); intros; elim H6.\nelim (H16 O H15); intros; rewrite H8; reflexivity.\n(* [0*x = 0] *)\napply\n (regular_l S A Add O Opp H3 (Mult O x) O (H7 O x H15 H0) H15 \n    (Mult O x) (H7 O x H15 H0)).\nelim (H16 (Mult O x) (H7 O x H15 H0)); intros; rewrite H2.\nelim (H12 O O x); intros; elim H5.\nelim (H16 O H15); intros; rewrite H8; reflexivity.\nQed.\n\n",
                "context_tokens": 463,
                "proof_start_offset": 1208,
                "proof_end_offset": 1952,
                "proof": "Lemma mult_opp_r : is_ring -> forall x y : S, A x -> A y -> Mult x (Opp y) = Opp (Mult x y).\nProof.\nintros.\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim (H15 y H1); intros.\nelim H17; intros; elim H19; intros.\nclear H2 H3 H5 H6 H7 H9 H10 H11 H12 H14 H15 H16 H17 H19.\napply (opp_unicity S A Add O Opp H4 (Mult x y) (Mult x (Opp y))).\nunfold is_opposite in |- *; split.\nexact (H8 x y H0 H1).\nsplit.\nexact (H8 x (Opp y) H0 H18).\nelim (mult_O H x H0); intros; elim H2; clear H H0 H1 H2 H3 H4 H8 H18.\npattern O at 1 in |- *; elim H20; elim H21; clear H20 H21.\nelim (H13 x y (Opp y)); intros; rewrite H0; clear H H0.\nelim (H13 x (Opp y) y); intros; rewrite H0; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_opp_r : is_ring -> forall x y : S, A x -> A y -> Mult x (Opp y) = Opp (Mult x y).\nProof.\nintros.\nelim H; intros; elim H0; intros; elim H1; intros; elim H2; intros; elim H3; intros; elim H4; intros;\n elim H5; intros; elim H5; intros; elim H5; intros; elim H6; intros;\n elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros;\n elim H6; intros; elim H6; intros; elim H6; intros;\n elim H6; intros; elim H6; intros; elim H6; intros;\n elim H6; intros; elim H6; intros; elim H6; intros;\n elim H6; intros; elim H6; intros; elim H6; intros;\n elim H6; intros; elim H6; intros; elim H6; intros;\n elim H6; intros; elim H6; intros; elim H6; intros;\n elim H6; intros; elim H6; intros; elim H6; intros;\n elim H6; intros; elim H6; intros; elim H6; intros;\n elim H6; intros; elim H6; introsQed.",
                        "correct": false,
                        "error_msg": "File \"./rings.v\", line 58, characters 27-36:\nError: The reference introsQed was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/rings.v",
                "context": " -> S.\nVariable O I : S.\nVariable Opp : S -> S.\nVariable v : S -> nat.\n\nDefinition is_ring :=\n  commutativity S Add /\\\n  is_group S A Add O Opp /\\\n  intern S A Mult /\\ associativity S Mult /\\ distributivity S Add Mult.\n\nLemma mult_O : is_ring -> forall x : S, A x -> Mult x O = O /\\ Mult O x = O.\nProof.\nintros.\nelim H; intros; elim H2; intros; elim H3; intros; elim H4; intros. \nelim H6; intros; elim H8; intros; elim H10; intros; elim H13; intros.\nclear H2 H4 H5 H6 H8 H9 H10 H11 H13 H14. \nsplit.\n(* [x*0 = 0] *)\napply\n (regular_l S A Add O Opp H3 (Mult x O) O (H7 x O H0 H15) H15 \n    (Mult x O) (H7 x O H0 H15)).\nelim (H16 (Mult x O) (H7 x O H0 H15)); intros; rewrite H2.\nelim (H12 x O O); intros; elim H6.\nelim (H16 O H15); intros; rewrite H8; reflexivity.\n(* [0*x = 0] *)\napply\n (regular_l S A Add O Opp H3 (Mult O x) O (H7 O x H15 H0) H15 \n    (Mult O x) (H7 O x H15 H0)).\nelim (H16 (Mult O x) (H7 O x H15 H0)); intros; rewrite H2.\nelim (H12 O O x); intros; elim H5.\nelim (H16 O H15); intros; rewrite H8; reflexivity.\nQed.\n\nLemma mult_opp_r :\n is_ring -> forall x y : S, A x -> A y -> Mult x (Opp y) = Opp (Mult x y).\nProof.\nintros.\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim (H15 y H1); intros.\nelim H17; intros; elim H19; intros.\nclear H2 H3 H5 H6 H7 H9 H10 H11 H12 H14 H15 H16 H17 H19.\napply (opp_unicity S A Add O Opp H4 (Mult x y) (Mult x (Opp y))).\nunfold is_opposite in |- *; split.\nexact (H8 x y H0 H1).\nsplit.\nexact (H8 x (Opp y) H0 H18).\nelim (mult_O H x H0); intros; elim H2; clear H H0 H1 H2 H3 H4 H8 H18.\npattern O at 1 in |- *; elim H20; elim H21; clear H20 H21.\nelim (H13 x y (Opp y)); intros; rewrite H0; clear H H0.\nelim (H13 x (Opp y) y); intros; rewrite H0; auto.\nQed.\n\n",
                "context_tokens": 721,
                "proof_start_offset": 1954,
                "proof_end_offset": 2696,
                "proof": "Lemma mult_opp_l : is_ring -> forall x y : S, A x -> A y -> Mult (Opp x) y = Opp (Mult x y).\nProof.\nintros.\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim (H15 x H0); intros.\nelim H17; intros; elim H19; intros.\nclear H2 H3 H5 H6 H7 H9 H10 H11 H12 H14 H15 H16 H17 H19.\napply (opp_unicity S A Add O Opp H4 (Mult x y) (Mult (Opp x) y)).\nunfold is_opposite in |- *; split.\nexact (H8 x y H0 H1).\nsplit.\nexact (H8 (Opp x) y H18 H1).\nelim (mult_O H y H1); intros; elim H3; clear H H0 H1 H2 H3 H4 H8 H18.\npattern O at 1 in |- *; elim H20; elim H21; clear H20 H21.\nelim (H13 x (Opp x) y); intros; rewrite H; clear H H0.\nelim (H13 (Opp x) x y); intros; rewrite H; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_opp_l : is_ring -> forall x y : S, A x -> A y -> Mult (Opp x) y = Opp (Mult x y).\nProof.\nintros.\nelim H; intros; elim H0; intros; elim H1; intros; elim H2; intros; elim H3; intros;\n elim H3; intros; elim H4; intros; elim H5; intros; elim H5; \n intros; elim H5; intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; introsQed.",
                        "correct": false,
                        "error_msg": "File \"./rings.v\", line 77, characters 18-27:\nError: The reference introsQed was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/rings.v",
                "context": "l S A Add O Opp H3 (Mult O x) O (H7 O x H15 H0) H15 \n    (Mult O x) (H7 O x H15 H0)).\nelim (H16 (Mult O x) (H7 O x H15 H0)); intros; rewrite H2.\nelim (H12 O O x); intros; elim H5.\nelim (H16 O H15); intros; rewrite H8; reflexivity.\nQed.\n\nLemma mult_opp_r :\n is_ring -> forall x y : S, A x -> A y -> Mult x (Opp y) = Opp (Mult x y).\nProof.\nintros.\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim (H15 y H1); intros.\nelim H17; intros; elim H19; intros.\nclear H2 H3 H5 H6 H7 H9 H10 H11 H12 H14 H15 H16 H17 H19.\napply (opp_unicity S A Add O Opp H4 (Mult x y) (Mult x (Opp y))).\nunfold is_opposite in |- *; split.\nexact (H8 x y H0 H1).\nsplit.\nexact (H8 x (Opp y) H0 H18).\nelim (mult_O H x H0); intros; elim H2; clear H H0 H1 H2 H3 H4 H8 H18.\npattern O at 1 in |- *; elim H20; elim H21; clear H20 H21.\nelim (H13 x y (Opp y)); intros; rewrite H0; clear H H0.\nelim (H13 x (Opp y) y); intros; rewrite H0; auto.\nQed.\n\nLemma mult_opp_l :\n is_ring -> forall x y : S, A x -> A y -> Mult (Opp x) y = Opp (Mult x y).\nProof.\nintros.\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim (H15 x H0); intros.\nelim H17; intros; elim H19; intros.\nclear H2 H3 H5 H6 H7 H9 H10 H11 H12 H14 H15 H16 H17 H19.\napply (opp_unicity S A Add O Opp H4 (Mult x y) (Mult (Opp x) y)).\nunfold is_opposite in |- *; split.\nexact (H8 x y H0 H1).\nsplit.\nexact (H8 (Opp x) y H18 H1).\nelim (mult_O H y H1); intros; elim H3; clear H H0 H1 H2 H3 H4 H8 H18.\npattern O at 1 in |- *; elim H20; elim H21; clear H20 H21.\nelim (H13 x (Opp x) y); intros; rewrite H; clear H H0.\nelim (H13 (Opp x) x y); intros; rewrite H; auto.\nQed.\n\n",
                "context_tokens": 720,
                "proof_start_offset": 2698,
                "proof_end_offset": 3190,
                "proof": "Lemma mult_opp_opp : is_ring -> forall x y : S, A x -> A y -> Mult (Opp x) (Opp y) = Mult x y.\nProof.\nintros.\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim (H15 x H0); intros.\nelim H17; intros; clear H2 H3 H5 H6 H7 H9 H10 H11 H12 H13 H14 H15 H16 H17 H19.\nrewrite (mult_opp_r H (Opp x) y H18 H1).\nrewrite (mult_opp_l H x y H0 H1).\nsymmetry in |- *.\nexact (opp_opp S A Add O Opp H4 (Mult x y) (H8 x y H0 H1)).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_opp_opp : is_ring -> forall x y : S, A x -> A y -> Mult (Opp x) (Opp y) = Mult x y.\nProof.\nintros.\nelim H; intros; elim H0; intros; elim H1; intros; elim H2; intros; elim H3; intros; elim H4; intros; \n elim H4; intros; elim H4; intros; elim H5; intros; elim H5; intros; \n elim H5; intros; elim H5; intros; elim H5; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; introsQed.",
                        "correct": false,
                        "error_msg": "File \"./rings.v\", line 96, characters 27-36:\nError: The reference introsQed was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/rings.v",
                "context": "\nsplit.\nexact (H8 x (Opp y) H0 H18).\nelim (mult_O H x H0); intros; elim H2; clear H H0 H1 H2 H3 H4 H8 H18.\npattern O at 1 in |- *; elim H20; elim H21; clear H20 H21.\nelim (H13 x y (Opp y)); intros; rewrite H0; clear H H0.\nelim (H13 x (Opp y) y); intros; rewrite H0; auto.\nQed.\n\nLemma mult_opp_l :\n is_ring -> forall x y : S, A x -> A y -> Mult (Opp x) y = Opp (Mult x y).\nProof.\nintros.\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim (H15 x H0); intros.\nelim H17; intros; elim H19; intros.\nclear H2 H3 H5 H6 H7 H9 H10 H11 H12 H14 H15 H16 H17 H19.\napply (opp_unicity S A Add O Opp H4 (Mult x y) (Mult (Opp x) y)).\nunfold is_opposite in |- *; split.\nexact (H8 x y H0 H1).\nsplit.\nexact (H8 (Opp x) y H18 H1).\nelim (mult_O H y H1); intros; elim H3; clear H H0 H1 H2 H3 H4 H8 H18.\npattern O at 1 in |- *; elim H20; elim H21; clear H20 H21.\nelim (H13 x (Opp x) y); intros; rewrite H; clear H H0.\nelim (H13 (Opp x) x y); intros; rewrite H; auto.\nQed.\n\nLemma mult_opp_opp :\n is_ring -> forall x y : S, A x -> A y -> Mult (Opp x) (Opp y) = Mult x y.\nProof.\nintros.\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim (H15 x H0); intros.\nelim H17; intros; clear H2 H3 H5 H6 H7 H9 H10 H11 H12 H13 H14 H15 H16 H17 H19.\nrewrite (mult_opp_r H (Opp x) y H18 H1).\nrewrite (mult_opp_l H x y H0 H1).\nsymmetry  in |- *.\nexact (opp_opp S A Add O Opp H4 (Mult x y) (H8 x y H0 H1)).\nQed.\n\nDefinition integrity := forall a b : S, Mult a b = O -> {a = O} + {b = O}.\n\nDefinition is_unitary_commutative_ring :=\n  is_ring /\\ commutativity S Mult /\\ neutral S A Mult I.\n\n(* Division *)\n\nDefinition divide (a b : S) :=\n  A a /\\ A b /\\ (b = O \\/ a <> O /\\ (exists q : S, A q /\\ b = Mult a q)).\n\n",
                "context_tokens": 742,
                "proof_start_offset": 3490,
                "proof_end_offset": 3729,
                "proof": "Theorem div_O_O : is_ring -> divide O O.\nProof.\nunfold divide in |- *; intros.\nelim H; intros; elim H1; intros; elim H2; intros; elim H5; intros.\nelim H7; intros; elim H8; intros.\nsplit.\nexact H10.\nsplit.\nexact H10.\nleft; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem div_O_O : is_ring -> divide O O.\nProof.\nunfold divide in |- *.\nintros a b H; elim H; intros; elim H; intros; elim H0; intros; elim H1; intros;\n elim H1; intros; elim H2; intros; elim H3; intros; elim H4; intros;\n elim H5; intros; elim H5; intros; elim H5; intros; elim H6;\n intros; elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6;Qed.",
                        "correct": false,
                        "error_msg": "File \"./rings.v\", line 119, characters 43-46:\nError: The reference Qed was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/rings.v",
                "context": "Opp y) y); intros; rewrite H0; auto.\nQed.\n\nLemma mult_opp_l :\n is_ring -> forall x y : S, A x -> A y -> Mult (Opp x) y = Opp (Mult x y).\nProof.\nintros.\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim (H15 x H0); intros.\nelim H17; intros; elim H19; intros.\nclear H2 H3 H5 H6 H7 H9 H10 H11 H12 H14 H15 H16 H17 H19.\napply (opp_unicity S A Add O Opp H4 (Mult x y) (Mult (Opp x) y)).\nunfold is_opposite in |- *; split.\nexact (H8 x y H0 H1).\nsplit.\nexact (H8 (Opp x) y H18 H1).\nelim (mult_O H y H1); intros; elim H3; clear H H0 H1 H2 H3 H4 H8 H18.\npattern O at 1 in |- *; elim H20; elim H21; clear H20 H21.\nelim (H13 x (Opp x) y); intros; rewrite H; clear H H0.\nelim (H13 (Opp x) x y); intros; rewrite H; auto.\nQed.\n\nLemma mult_opp_opp :\n is_ring -> forall x y : S, A x -> A y -> Mult (Opp x) (Opp y) = Mult x y.\nProof.\nintros.\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim (H15 x H0); intros.\nelim H17; intros; clear H2 H3 H5 H6 H7 H9 H10 H11 H12 H13 H14 H15 H16 H17 H19.\nrewrite (mult_opp_r H (Opp x) y H18 H1).\nrewrite (mult_opp_l H x y H0 H1).\nsymmetry  in |- *.\nexact (opp_opp S A Add O Opp H4 (Mult x y) (H8 x y H0 H1)).\nQed.\n\nDefinition integrity := forall a b : S, Mult a b = O -> {a = O} + {b = O}.\n\nDefinition is_unitary_commutative_ring :=\n  is_ring /\\ commutativity S Mult /\\ neutral S A Mult I.\n\n(* Division *)\n\nDefinition divide (a b : S) :=\n  A a /\\ A b /\\ (b = O \\/ a <> O /\\ (exists q : S, A q /\\ b = Mult a q)).\n\nTheorem div_O_O : is_ring -> divide O O.\nProof.\nunfold divide in |- *; intros.\nelim H; intros; elim H1; intros; elim H2; intros; elim H5; intros.\nelim H7; intros; elim H8; intros.\nsplit. exact H10.\nsplit. exact H10.\nleft; reflexivity.\nQed.\n\n",
                "context_tokens": 726,
                "proof_start_offset": 3731,
                "proof_end_offset": 4957,
                "proof": "Theorem div_add : is_ring -> forall a b d : S, divide d a -> divide d b -> divide d (Add a b).\nProof.\nunfold divide in |- *; intros.\nsplit.\nelim H0; trivial.\nsplit.\nelim H; intros; elim H3; intros; elim H4; intros.\nelim H0; intros; elim H9; intros; elim H1; intros; elim H13; intros.\nexact (H6 a b H10 H14).\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim H14; intros.\nclear H H2 H3 H4 H5 H7 H8 H9 H10 H11 H12 H14 H15 H16.\nelim H0; intros; elim H2; intros; clear H H0 H2.\nelim H1; intros; elim H0; intros; clear H H0 H1.\nelim H4; intros.\nrewrite H.\nelim (H17 b H2); intros.\nrewrite H1.\nexact H5.\nelim H5; intros.\nrewrite H0.\nelim (H17 a H3); intros.\nrewrite H1.\nexact H4.\nclear H2 H3 H4 H5 H17.\nright.\nelim H; intros; elim H2; intros; elim H3; intros; clear H H2 H3.\nelim H0; intros; elim H2; intros; elim H3; intros; clear H H0 H2 H3.\nsplit.\nexact H1.\nclear H1.\nexists (Add x x0).\nsplit.\nexact (H6 x x0 H4 H7).\nelim (H13 d x x0); intros.\nclear H4 H6 H7 H13.\nrewrite H0.\nclear H H0.\nelim H5; elim H8; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem div_add : is_ring -> forall a b d : S, divide d a -> divide d b -> divide d (Add a b).\nProof.\nunfold divide in |- *; intros.\nelim H; intros; elim H0; intros; elim H1; intros; elim H2; intros; elim H3; intros;\n elim H5; intros; elim H5; intros; elim H5; intros; elim H5; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros;Qed.",
                        "correct": false,
                        "error_msg": "File \"./rings.v\", line 129, characters 17-20:\nError: The reference Qed was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/rings.v",
                "context": " O Opp H4 (Mult x y) (H8 x y H0 H1)).\nQed.\n\nDefinition integrity := forall a b : S, Mult a b = O -> {a = O} + {b = O}.\n\nDefinition is_unitary_commutative_ring :=\n  is_ring /\\ commutativity S Mult /\\ neutral S A Mult I.\n\n(* Division *)\n\nDefinition divide (a b : S) :=\n  A a /\\ A b /\\ (b = O \\/ a <> O /\\ (exists q : S, A q /\\ b = Mult a q)).\n\nTheorem div_O_O : is_ring -> divide O O.\nProof.\nunfold divide in |- *; intros.\nelim H; intros; elim H1; intros; elim H2; intros; elim H5; intros.\nelim H7; intros; elim H8; intros.\nsplit. exact H10.\nsplit. exact H10.\nleft; reflexivity.\nQed.\n\nTheorem div_add :\n is_ring -> forall a b d : S, divide d a -> divide d b -> divide d (Add a b).\nProof.\nunfold divide in |- *; intros.\nsplit.\n(* [A d] *)\nelim H0; trivial.\nsplit.\n(* [A (a+b)] *)\nelim H; intros; elim H3; intros; elim H4; intros. \nelim H0; intros; elim H9; intros; elim H1; intros; elim H13; intros.\nexact (H6 a b H10 H14).\n(* [a+b = 0 or d <> 0 and a+b = d*q] *)\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim H14; intros.\nclear H H2 H3 H4 H5 H7 H8 H9 H10 H11 H12 H14 H15 H16.\nelim H0; intros; elim H2; intros; clear H H0 H2.\nelim H1; intros; elim H0; intros; clear H H0 H1.\n  (* [a = 0] *)\nelim H4; intros. rewrite H. \nelim (H17 b H2); intros. rewrite H1.\nexact H5.\n  (* [b = 0] *)\nelim H5; intros. rewrite H0.\nelim (H17 a H3); intros. rewrite H1.\nexact H4. clear H2 H3 H4 H5 H17.\n  (* [a <> 0 and b <> 0] *)\nright.\nelim H; intros; elim H2; intros; elim H3; intros; clear H H2 H3.\nelim H0; intros; elim H2; intros; elim H3; intros; clear H H0 H2 H3.\nsplit.\nexact H1. clear H1.\nexists (Add x x0).\nsplit.\nexact (H6 x x0 H4 H7). \nelim (H13 d x x0); intros. clear H4 H6 H7 H13.\nrewrite H0. clear H H0.\nelim H5; elim H8; reflexivity.\nQed.\n\n",
                "context_tokens": 727,
                "proof_start_offset": 4959,
                "proof_end_offset": 5659,
                "proof": "Theorem div_mult : is_ring -> forall a b d : S, divide d a -> A b -> divide d (Mult a b).\nProof.\nunfold divide in |- *; intros.\nelim H0; intros.\nsplit.\nexact H2.\nclear H0 H2.\nelim H; intros; elim H2; intros; elim H5; intros; elim H7; intros.\nclear H0 H2 H4 H5 H7 H9.\nelim H3; intros.\nsplit.\nexact (H6 a b H0 H1).\nclear H0 H3.\nelim H2; intros.\nrewrite H0.\nelim (mult_O H b H1); intros.\nrewrite H4.\nleft; reflexivity.\nclear H H2.\nright.\nelim H0; intros; elim H2; intros.\nsplit.\nexact H.\nexists (Mult x b).\nelim H3; intros.\nsplit.\nexact (H6 x b H4 H1).\nrewrite (H8 d x b).\nelim H5; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem div_mult : is_ring -> forall a b d : S, divide d a -> A b -> divide d (Mult a b).\nProof.\nunfold divide in |- *; intros.\nelim H; intros; elim H0; intros; elim H1; intros; elim H2; intros.\nelim (H0 b H2); intros.\nelim (H0 b H2); intros.\nelim (H1 b H3); intros.\nelim (H2 b H3); intros.\nelim (H3 b H4); intros.\nelim (H4 b H4); intros.\nelim (H5 b H5); intros.\nelim (H6 b H6); intros.\nelim (H6 b H6); intros.\nelim (H6 b H6); intros.\nelim (H6 b H6); intros.\nelim (H7 b H6); intros.\nelim (H6 b H6); intros.\nelim (H6 b H6); intros.\nelim (H7 b H6); intros.\nelim (H7 b H7); intros.\nelim (H7 b H7); intros.\nelim (H7 b H7); intros.\nelim (H7 b H7); intros.\nelim (H7 b H8); intros.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./rings.v\", line 158, characters 33-40:\nError: Not an inductive product.\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/rings.v",
                "context": "+b)] *)\nelim H; intros; elim H3; intros; elim H4; intros. \nelim H0; intros; elim H9; intros; elim H1; intros; elim H13; intros.\nexact (H6 a b H10 H14).\n(* [a+b = 0 or d <> 0 and a+b = d*q] *)\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim H14; intros.\nclear H H2 H3 H4 H5 H7 H8 H9 H10 H11 H12 H14 H15 H16.\nelim H0; intros; elim H2; intros; clear H H0 H2.\nelim H1; intros; elim H0; intros; clear H H0 H1.\n  (* [a = 0] *)\nelim H4; intros. rewrite H. \nelim (H17 b H2); intros. rewrite H1.\nexact H5.\n  (* [b = 0] *)\nelim H5; intros. rewrite H0.\nelim (H17 a H3); intros. rewrite H1.\nexact H4. clear H2 H3 H4 H5 H17.\n  (* [a <> 0 and b <> 0] *)\nright.\nelim H; intros; elim H2; intros; elim H3; intros; clear H H2 H3.\nelim H0; intros; elim H2; intros; elim H3; intros; clear H H0 H2 H3.\nsplit.\nexact H1. clear H1.\nexists (Add x x0).\nsplit.\nexact (H6 x x0 H4 H7). \nelim (H13 d x x0); intros. clear H4 H6 H7 H13.\nrewrite H0. clear H H0.\nelim H5; elim H8; reflexivity.\nQed.\n\nTheorem div_mult :\n is_ring -> forall a b d : S, divide d a -> A b -> divide d (Mult a b).\nProof.\nunfold divide in |- *; intros.\n(* [A d] *)\nelim H0; intros. split. exact H2. clear H0 H2.\n(* [A (a*b)] *)\nelim H; intros; elim H2; intros; elim H5; intros; elim H7; intros.\nclear H0 H2 H4 H5 H7 H9.\nelim H3; intros.\nsplit. exact (H6 a b H0 H1). clear H0 H3.\n(* [a*b = 0 or d <> 0 and a*b = d*q] *)\n  (* [a = 0] *)\nelim H2; intros. rewrite H0. \nelim (mult_O H b H1); intros. rewrite H4. left; reflexivity. clear H H2.\n  (* [a <> 0] *)\nright.\nelim H0; intros; elim H2; intros. split. exact H.\nexists (Mult x b). \nelim H3; intros. split. exact (H6 x b H4 H1).\nrewrite (H8 d x b). elim H5; reflexivity.\nQed.\n\n",
                "context_tokens": 732,
                "proof_start_offset": 5661,
                "proof_end_offset": 6477,
                "proof": "Theorem div_opp : is_ring -> forall a d : S, divide d a -> divide d (Opp a).\nProof.\nunfold divide in |- *; intros.\nelim H0; intros; elim H2; intros.\nsplit.\nexact H1.\nclear H0 H2.\nelim H; intros; elim H2; intros; elim H5; intros; elim H8; intros.\nelim H10; intros; elim (H12 a H3); intros; elim H14; intros.\nsplit.\nexact H15.\nclear H0 H2 H3 H6 H7 H8 H9 H10 H13 H14 H15 H16.\nelim H4; intros.\nrewrite H0.\nleft.\nexact (opp_neutral S A Add O Opp H5).\nclear H4 H11.\nright.\nelim H0; intros; elim H3; intros; elim H4; intros.\nsplit.\nexact H2.\nclear H0 H2 H3 H4.\nexists (Opp x).\nelim (H12 x H6); intros; elim H2; intros.\nsplit.\nexact H3.\nclear H3 H4 H5 H6 H12.\nrewrite (mult_opp_r H d x H1 H0).\nelim H7; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem div_opp : is_ring -> forall a d : S, divide d a -> divide d (Opp a).\nProof.\nunfold divide in |- *; intros.\n(* [a] *)\nelim H; intros.\nelim H; intros.\nelim H0; intros.\nelim H1; intros.\nelim H1; intros.\nelim H2; intros.\nelim H2; intros.\nelim H3; intros.\nelim H4; intros.\nelim H4; intros.\nelim H5; intros.\nelim H5; intros.\nelim H5; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim HQed.",
                        "correct": false,
                        "error_msg": "File \"./rings.v\", line 185, characters 0-7:\nError: Cannot refine with term\n \"eq_ind (Add ?M754 ?M755)\n    (fun _ : S =>\n     A d /\\\n     A (Opp a) /\\\n     (Opp a = O \\/ d <> O /\\ (exists q : S, A q /\\ Opp a = Mult d q))) \n    ?M759 (Add ?M755 ?M754) (H1 ?M754 ?M755)\"\nbecause a metavariable has several occurrences.\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/rings.v",
                "context": "\nsplit.\nexact (H6 x x0 H4 H7). \nelim (H13 d x x0); intros. clear H4 H6 H7 H13.\nrewrite H0. clear H H0.\nelim H5; elim H8; reflexivity.\nQed.\n\nTheorem div_mult :\n is_ring -> forall a b d : S, divide d a -> A b -> divide d (Mult a b).\nProof.\nunfold divide in |- *; intros.\n(* [A d] *)\nelim H0; intros. split. exact H2. clear H0 H2.\n(* [A (a*b)] *)\nelim H; intros; elim H2; intros; elim H5; intros; elim H7; intros.\nclear H0 H2 H4 H5 H7 H9.\nelim H3; intros.\nsplit. exact (H6 a b H0 H1). clear H0 H3.\n(* [a*b = 0 or d <> 0 and a*b = d*q] *)\n  (* [a = 0] *)\nelim H2; intros. rewrite H0. \nelim (mult_O H b H1); intros. rewrite H4. left; reflexivity. clear H H2.\n  (* [a <> 0] *)\nright.\nelim H0; intros; elim H2; intros. split. exact H.\nexists (Mult x b). \nelim H3; intros. split. exact (H6 x b H4 H1).\nrewrite (H8 d x b). elim H5; reflexivity.\nQed.\n\nTheorem div_opp : is_ring -> forall a d : S, divide d a -> divide d (Opp a).\nProof.\nunfold divide in |- *; intros.\n(* [A d] *)\nelim H0; intros; elim H2; intros. split. exact H1. clear H0 H2.\n(* [A (-a)] *)\nelim H; intros; elim H2; intros; elim H5; intros; elim H8; intros.\nelim H10; intros; elim (H12 a H3); intros; elim H14; intros.\nsplit. exact H15. clear H0 H2 H3 H6 H7 H8 H9 H10 H13 H14 H15 H16.\n(* [(-a) = 0 or d <> 0 and (-a)= d*q] *)\n  (* [a = 0] *)\nelim H4; intros. rewrite H0. left. exact (opp_neutral S A Add O Opp H5).\nclear H4 H11.\n  (* [a <> 0] *)\nright.\nelim H0; intros; elim H3; intros; elim H4; intros. \nsplit. exact H2. clear H0 H2 H3 H4.\nexists (Opp x). \nelim (H12 x H6); intros; elim H2; intros. split. exact H3. \nclear H3 H4 H5 H6 H12.\nrewrite (mult_opp_r H d x H1 H0). elim H7; reflexivity.\nQed.\n\nDefinition is_gcd (a b d : S) :=\n  divide d a /\\\n  divide d b /\\ (forall q : S, divide q a -> divide q b -> divide q d).\n\n",
                "context_tokens": 731,
                "proof_start_offset": 6601,
                "proof_end_offset": 6974,
                "proof": "Lemma gcd_null : forall a b : S, is_gcd a b O -> a = O /\\ b = O.\nProof.\nunfold is_gcd in |- *; intros.\nelim H; intros; elim H0; intros; elim H3; intros.\nelim H5; intros.\nsplit.\nexact H6.\nclear H H0 H2 H3 H4 H5 H6.\nelim H1; intros; elim H; intros; elim H3; intros; elim H5; intros.\nexact H6.\nelim H6; intros; elim H7; reflexivity.\nelim H6; intros; elim H7; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_null : forall a b : S, is_gcd a b O -> a = O /\\ b = O.\nProof.\nintros a b H.\nelim H; intros.\nelim (gcd_0_l a b H0); intros.\nsplit.\nexact (gcd_0_l b H0).\nelim (gcd_0_l b H0); intros.\nsplit.\nexact (gcd_0_l b H0).\nelim (gcd_0_l b H0); intros.\nsplit.\nexact (gcd_0_l b H0).\nelim (gcd_0_l b H0); intros.\nsplit.\nexact (gcd_0_l b H0).\nelim (gcd_0_l b H0); intros.\nsplit.\nexact (gcd_0_l b H0).\nelim (gcd_0_l b H0); intros.\nsplit.\nexact (gcd_0_l b H0).\nelim (gcd_0_l b H0); intros.\nsplit.\nexact (gcd_0_l b H0).\nelim (gcd_0_l b H0); intros.\nsplit.\nexact (gcd_0_l b H0).\nsplit.\nexact (gcd_Qed.",
                        "correct": false,
                        "error_msg": "File \"./rings.v\", line 209, characters 6-13:\nError: The reference gcd_0_l was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/rings.v",
                "context": "elim H; intros; elim H2; intros; elim H5; intros; elim H7; intros.\nclear H0 H2 H4 H5 H7 H9.\nelim H3; intros.\nsplit. exact (H6 a b H0 H1). clear H0 H3.\n(* [a*b = 0 or d <> 0 and a*b = d*q] *)\n  (* [a = 0] *)\nelim H2; intros. rewrite H0. \nelim (mult_O H b H1); intros. rewrite H4. left; reflexivity. clear H H2.\n  (* [a <> 0] *)\nright.\nelim H0; intros; elim H2; intros. split. exact H.\nexists (Mult x b). \nelim H3; intros. split. exact (H6 x b H4 H1).\nrewrite (H8 d x b). elim H5; reflexivity.\nQed.\n\nTheorem div_opp : is_ring -> forall a d : S, divide d a -> divide d (Opp a).\nProof.\nunfold divide in |- *; intros.\n(* [A d] *)\nelim H0; intros; elim H2; intros. split. exact H1. clear H0 H2.\n(* [A (-a)] *)\nelim H; intros; elim H2; intros; elim H5; intros; elim H8; intros.\nelim H10; intros; elim (H12 a H3); intros; elim H14; intros.\nsplit. exact H15. clear H0 H2 H3 H6 H7 H8 H9 H10 H13 H14 H15 H16.\n(* [(-a) = 0 or d <> 0 and (-a)= d*q] *)\n  (* [a = 0] *)\nelim H4; intros. rewrite H0. left. exact (opp_neutral S A Add O Opp H5).\nclear H4 H11.\n  (* [a <> 0] *)\nright.\nelim H0; intros; elim H3; intros; elim H4; intros. \nsplit. exact H2. clear H0 H2 H3 H4.\nexists (Opp x). \nelim (H12 x H6); intros; elim H2; intros. split. exact H3. \nclear H3 H4 H5 H6 H12.\nrewrite (mult_opp_r H d x H1 H0). elim H7; reflexivity.\nQed.\n\nDefinition is_gcd (a b d : S) :=\n  divide d a /\\\n  divide d b /\\ (forall q : S, divide q a -> divide q b -> divide q d).\n\nLemma gcd_null : forall a b : S, is_gcd a b O -> a = O /\\ b = O.\nProof.\nunfold is_gcd in |- *; intros.\nelim H; intros; elim H0; intros; elim H3; intros.\nelim H5; intros. split. exact H6. clear H H0 H2 H3 H4 H5 H6.\nelim H1; intros; elim H; intros; elim H3; intros; elim H5; intros. exact H6.\nelim H6; intros; elim H7; reflexivity.\nelim H6; intros; elim H7; reflexivity.\nQed.\n\n",
                "context_tokens": 731,
                "proof_start_offset": 6976,
                "proof_end_offset": 7247,
                "proof": "Lemma gcd_null2 : is_ring -> forall d : S, is_gcd O O d -> d = O.\nProof.\nunfold is_gcd in |- *.\nintros.\nelim H0; intros; elim H2; intros.\nelim (H4 O (div_O_O H) (div_O_O H)); intros; elim H6; intros.\nelim H8; intros.\nexact H9.\nelim H9; intros; elim H10; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_null2 : is_ring -> forall d : S, is_gcd O O d -> d = O.\nProof.\nunfold is_gcd in |- *; intros.\nelim H; intros; elim H; intros.\nelim H; intros.\nelim (gcd_0_l _ _ H1); intros.\nsplit. exact (H1 (H0 (H1 (H2 H3))).\nelim H1; intros.\nsplit. exact (H1 (H2 (H1 (H2 H3))).\nelim H1; intros.\nsplit. exact (H1 (H2 (H2 H3))).\nelim H2; intros.\nsplit. exact (H1 (H2 (H3 H3))).\nelim H3; intros.\nsplit. exact (H1 (H1 (H2 H3))).\nelim H3; intros.\nsplit. exact (H1 (H2 (H2 H3))).\nelim H3; intros.\nsplit. exact (H1 (H2 (H3 H3))).\nelim H3; intros.\nsplit. exact (H1 (H1 (H2 H3))).\nelim H3; intros.\nsplit. exact (H1 (H2 (H2 H3))).\nelim H3;Qed.",
                        "correct": false,
                        "error_msg": "File \"./rings.v\", line 220, characters 6-13:\nError: The reference gcd_0_l was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/rings.v",
                "context": "2.\n  (* [a <> 0] *)\nright.\nelim H0; intros; elim H2; intros. split. exact H.\nexists (Mult x b). \nelim H3; intros. split. exact (H6 x b H4 H1).\nrewrite (H8 d x b). elim H5; reflexivity.\nQed.\n\nTheorem div_opp : is_ring -> forall a d : S, divide d a -> divide d (Opp a).\nProof.\nunfold divide in |- *; intros.\n(* [A d] *)\nelim H0; intros; elim H2; intros. split. exact H1. clear H0 H2.\n(* [A (-a)] *)\nelim H; intros; elim H2; intros; elim H5; intros; elim H8; intros.\nelim H10; intros; elim (H12 a H3); intros; elim H14; intros.\nsplit. exact H15. clear H0 H2 H3 H6 H7 H8 H9 H10 H13 H14 H15 H16.\n(* [(-a) = 0 or d <> 0 and (-a)= d*q] *)\n  (* [a = 0] *)\nelim H4; intros. rewrite H0. left. exact (opp_neutral S A Add O Opp H5).\nclear H4 H11.\n  (* [a <> 0] *)\nright.\nelim H0; intros; elim H3; intros; elim H4; intros. \nsplit. exact H2. clear H0 H2 H3 H4.\nexists (Opp x). \nelim (H12 x H6); intros; elim H2; intros. split. exact H3. \nclear H3 H4 H5 H6 H12.\nrewrite (mult_opp_r H d x H1 H0). elim H7; reflexivity.\nQed.\n\nDefinition is_gcd (a b d : S) :=\n  divide d a /\\\n  divide d b /\\ (forall q : S, divide q a -> divide q b -> divide q d).\n\nLemma gcd_null : forall a b : S, is_gcd a b O -> a = O /\\ b = O.\nProof.\nunfold is_gcd in |- *; intros.\nelim H; intros; elim H0; intros; elim H3; intros.\nelim H5; intros. split. exact H6. clear H H0 H2 H3 H4 H5 H6.\nelim H1; intros; elim H; intros; elim H3; intros; elim H5; intros. exact H6.\nelim H6; intros; elim H7; reflexivity.\nelim H6; intros; elim H7; reflexivity.\nQed.\n\nLemma gcd_null2 : is_ring -> forall d : S, is_gcd O O d -> d = O.\nProof.\nunfold is_gcd in |- *. intros.\nelim H0; intros; elim H2; intros.\nelim (H4 O (div_O_O H) (div_O_O H)); intros; elim H6; intros.\nelim H8; intros. exact H9.\nelim H9; intros; elim H10; reflexivity.\nQed.\n\n",
                "context_tokens": 711,
                "proof_start_offset": 7249,
                "proof_end_offset": 8153,
                "proof": "Lemma simplification_integrity : is_unitary_commutative_ring -> integrity -> forall a x : S, A a -> A x -> a <> O -> Mult a x = a -> x = I.\nProof.\nintros.\nelim H; intros; elim H5; intros; elim H6; intros; elim H8; intros.\nelim H11; intros; elim H12; intros; elim H14; intros; elim H16; intros.\nelim H18; intros.\nclear H6 H8 H9 H12 H13 H14 H15 H16 H17 H18 H19 H21.\nrewrite (opp_opp S A Add O Opp H11 x H2).\nsymmetry in |- *; apply (opp_unicity S A Add O Opp H11 (Opp x) I).\nelim (H22 x H2); intros; elim H8; intros; elim H10; intros.\napply (opp_com S A Add O H7 (Opp x) I H9 H13).\nclear H6 H8 H12 H13.\nelim (H0 a (Add (Opp x) I)); intros.\nelim H3.\nexact a0.\nexact b.\nelim (H20 a (Opp x) I); intros.\nrewrite H8.\nelim (H14 a H1); intros.\nrewrite H12.\nclear H6 H8 H9 H12 H13 H14.\nrewrite (mult_opp_r H5 a x H1 H2).\nrewrite H4.\nelim (H22 a H1); intros; elim H8; intros; elim H12; intros; exact H14.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma simplification_integrity : is_unitary_commutative_ring -> integrity -> forall a x : S, A a -> A x -> a <> O -> Mult a x = a -> x = I.\nProof.\nunfold is_gcd in |- *. intros.\nelim H0; intros; elim H0; intros.\nelim (H0 O (div_O_O H1) (div_O_O H0) (div_O_O H1) H1).\nelim (H0 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (Qed.",
                        "correct": false,
                        "error_msg": "File \"./rings.v\", line 227, characters 0-7:\nError: Unable to find an instance for the variables a, b.\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/rings.v",
                "context": "rewrite (mult_opp_r H d x H1 H0). elim H7; reflexivity.\nQed.\n\nDefinition is_gcd (a b d : S) :=\n  divide d a /\\\n  divide d b /\\ (forall q : S, divide q a -> divide q b -> divide q d).\n\nLemma gcd_null : forall a b : S, is_gcd a b O -> a = O /\\ b = O.\nProof.\nunfold is_gcd in |- *; intros.\nelim H; intros; elim H0; intros; elim H3; intros.\nelim H5; intros. split. exact H6. clear H H0 H2 H3 H4 H5 H6.\nelim H1; intros; elim H; intros; elim H3; intros; elim H5; intros. exact H6.\nelim H6; intros; elim H7; reflexivity.\nelim H6; intros; elim H7; reflexivity.\nQed.\n\nLemma gcd_null2 : is_ring -> forall d : S, is_gcd O O d -> d = O.\nProof.\nunfold is_gcd in |- *. intros.\nelim H0; intros; elim H2; intros.\nelim (H4 O (div_O_O H) (div_O_O H)); intros; elim H6; intros.\nelim H8; intros. exact H9.\nelim H9; intros; elim H10; reflexivity.\nQed.\n\nLemma simplification_integrity :\n is_unitary_commutative_ring ->\n integrity -> forall a x : S, A a -> A x -> a <> O -> Mult a x = a -> x = I.\nProof.\nintros. elim H; intros; elim H5; intros; elim H6; intros; elim H8; intros. \nelim H11; intros; elim H12; intros; elim H14; intros; elim H16; intros.\nelim H18; intros. clear H6 H8 H9 H12 H13 H14 H15 H16 H17 H18 H19 H21.\nrewrite (opp_opp S A Add O Opp H11 x H2). \nsymmetry  in |- *; apply (opp_unicity S A Add O Opp H11 (Opp x) I).\nelim (H22 x H2); intros; elim H8; intros; elim H10; intros.\napply (opp_com S A Add O H7 (Opp x) I H9 H13). clear H6 H8 H12 H13.\nelim (H0 a (Add (Opp x) I)); intros. \nelim H3. exact a0. exact b.\nelim (H20 a (Opp x) I); intros. rewrite H8. elim (H14 a H1); intros.\nrewrite H12. clear H6 H8 H9 H12 H13 H14.\nrewrite (mult_opp_r H5 a x H1 H2). rewrite H4.\nelim (H22 a H1); intros; elim H8; intros; elim H12; intros; exact H14.\nQed.\n\n",
                "context_tokens": 684,
                "proof_start_offset": 8155,
                "proof_end_offset": 9563,
                "proof": "Lemma gcd_unicity_apart_unities : is_unitary_commutative_ring -> integrity -> forall a b d1 d2 : S, is_gcd a b d1 -> is_gcd a b d2 -> exists x : S, inversible S Mult I x /\\ A x /\\ d2 = Mult d1 x.\nProof.\nintros.\nelim H2; intros; elim H4; intros; elim H1; intros; elim H8; intros.\nelim (H6 d1 H7 H9); intros; elim H12; intros; elim H14; intros.\nexists I.\nunfold inversible in |- *.\nelim H; intros; elim H17; intros; elim H19; intros.\nsplit.\nexists I.\nexact (H21 I H20).\nsplit.\nexact H20.\nelim (gcd_null a b); intros.\nrewrite H15.\nrewrite (gcd_null2 H16 d1).\nelim (mult_O H16 I); intros.\nsymmetry in |- *; exact H25.\nexact H20.\npattern O at 1 in |- *; elim H22; elim H23; exact H1.\nelim H15; exact H2.\nelim H15; intros; elim H17; intros.\nexists x.\nelim H; intros; elim H20; intros.\nsplit.\napply (inv_com S Mult I x H21).\nelim H1; intros; elim H24; intros; elim (H26 d2 H3 H5); intros.\nelim H28; intros; elim H30; intros.\nelim H16; exact H31.\nelim H31; intros; elim H33; intros.\nexists x0.\nelim H34; intro; clear H35.\nelim H18; intro; intro.\nrewrite H36.\nelim H; intros H37 H38; elim H37; intros H39 H40; elim H40; intros H41 H42.\nelim H42; intros H43 H44; elim H44; intros H45 H46; elim (H45 d1 x x0); intros.\nelim H34; intros.\napply (simplification_integrity H H0 d1 (Mult x x0) H11 (H43 x x0 H35 H48) H16).\nsymmetry in |- *; exact H47.\nexact H18.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_unicity_apart_unities : is_unitary_commutative_ring -> integrity -> forall a b d1 d2 : S, is_gcd a b d1 -> is_gcd a b d2 -> exists x : S, inversible S Mult I x /\\ A x /\\ d2 = Mult d1 x.\nProof.\nintros.\nelim H; intros; elim H; intros.\nelim (H0 a H0); intros.\nelim (H1 a H1); intros.\nelim (H2 a H1); intros.\nelim (H2 a H2); intros.\nelim (H3 a H2); intros.\nelim (H4 a H2); intros.\nelim (H5 a H2); intros.\nelim (H5 a H2); intros.\nelim (H6 b H2); intros.\nelim (H6 b H3); intros.\nelim (H6 b H3); intros.\nelim (H6 b H3); intros.\nelim (H6 b H3); intros.\nelim (H6 b H3); intros.\nelim (H6 b H3); intros.\nelim (H6 b H3); intros.\nelim (H6 b H3); intros.\nelim (H6 b H3); intros.\nelim (H6 b H3); intros.\nelim (H6 b H3); intros.\nelim (H6 b H3); intros.\nelim (H6 b H3Qed.",
                        "correct": false,
                        "error_msg": "File \"./rings.v\", line 247, characters 11-13:\nError:\nIn environment\nS : Set\nA : S -> Prop\nAdd, Mult : S -> S -> S\nO, I : S\nOpp : S -> S\nv : S -> nat\nH : is_unitary_commutative_ring\nH0 : integrity\na, b, d1, d2 : S\nH1 : is_gcd a b d1\nH2 : is_gcd a b d2\nH3 : is_ring\nH4 : commutativity S Mult /\\ neutral S A Mult I\nH5 : is_ring\nH6 : commutativity S Mult /\\ neutral S A Mult I\nThe term \"H0\" has type \"integrity\" while it is expected to have type \"S\".\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/rings.v",
                "context": "elim (H22 x H2); intros; elim H8; intros; elim H10; intros.\napply (opp_com S A Add O H7 (Opp x) I H9 H13). clear H6 H8 H12 H13.\nelim (H0 a (Add (Opp x) I)); intros. \nelim H3. exact a0. exact b.\nelim (H20 a (Opp x) I); intros. rewrite H8. elim (H14 a H1); intros.\nrewrite H12. clear H6 H8 H9 H12 H13 H14.\nrewrite (mult_opp_r H5 a x H1 H2). rewrite H4.\nelim (H22 a H1); intros; elim H8; intros; elim H12; intros; exact H14.\nQed.\n\nLemma gcd_unicity_apart_unities :\n is_unitary_commutative_ring ->\n integrity ->\n forall a b d1 d2 : S,\n is_gcd a b d1 ->\n is_gcd a b d2 ->\n exists x : S, inversible S Mult I x /\\ A x /\\ d2 = Mult d1 x.\nProof.\nintros.\nelim H2; intros; elim H4; intros; elim H1; intros; elim H8; intros.\nelim (H6 d1 H7 H9); intros; elim H12; intros; elim H14; intros.\n(* [d2 = O] *)\nexists I. unfold inversible in |- *.\nelim H; intros; elim H17; intros; elim H19; intros.\nsplit. exists I. exact (H21 I H20). split. exact H20.\nelim (gcd_null a b); intros. rewrite H15. rewrite (gcd_null2 H16 d1). \nelim (mult_O H16 I); intros. symmetry  in |- *; exact H25. exact H20.\npattern O at 1 in |- *; elim H22; elim H23; exact H1. elim H15; exact H2.\n(* [d2 <> 0] *)\nelim H15; intros; elim H17; intros. exists x.\nelim H; intros; elim H20; intros. split. apply (inv_com S Mult I x H21).\nelim H1; intros; elim H24; intros; elim (H26 d2 H3 H5); intros.\nelim H28; intros; elim H30; intros. elim H16; exact H31.\n(* [d1 <> 0] *)\nelim H31; intros; elim H33; intros. exists x0.\nelim H34; intro; clear H35. elim H18; intro; intro. rewrite H36.\nelim H; intros H37 H38; elim H37; intros H39 H40; elim H40; intros H41 H42.\nelim H42; intros H43 H44; elim H44; intros H45 H46; elim (H45 d1 x x0);\n intros.\nelim H34; intros.\napply\n (simplification_integrity H H0 d1 (Mult x x0) H11 (H43 x x0 H35 H48) H16).\nsymmetry  in |- *; exact H47.\nexact H18.\nQed.\n\n",
                "context_tokens": 731,
                "proof_start_offset": 9565,
                "proof_end_offset": 9774,
                "proof": "Lemma opp_O : is_ring -> forall x : S, A x -> Opp x = O -> x = O.\nProof.\nintros.\nelim H; intros; elim H3; intros.\nrewrite (opp_opp S A Add O Opp H4 x H0).\nrewrite H1.\nexact (opp_neutral S A Add O Opp H4).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma opp_O : is_ring -> forall x : S, A x -> Opp x = O -> x = O.\nProof.\nintros.\nelim H; intros; elim H0; intros; elim H1; intros.\nelim H2; intros.\nelim H3; intros.\nelim H4; intros.\nelim H5; intros.\nelim H5; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./rings.v\", line 282, characters 16-23:\nError: Not an inductive product.\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/misc.v",
                "context": "Require Export Lci.\n\nDefinition antisym (A : Set) (R : A -> A -> Prop) :=\n  forall x y : A, R x y -> R y x -> x = y :>A.\n\n",
                "context_tokens": 46,
                "proof_start_offset": 122,
                "proof_end_offset": 234,
                "proof": "Definition pi1 : forall (A : Set) (P : A -> Prop), {x : A | P x} -> A.\nProof.\nsimple induction 1; auto.\nDefined.",
                "end_command": "Defined.",
                "generated_proofs": [
                    {
                        "proof": "Definition pi1 : forall (A : Set) (P : A -> Prop), {x : A | P x} -> A.\nProof.\n  intros A P H x H0.\n  elim H0; intros.\n  elim H1; intros.\n  elim H2; intros.\n  elim H3; intros.\n  elim H4; intros.\n  elim H5; intros.\n  elim H6; intros.\n  elim H6; intros.\n  elim H7; intros.\n  elim H7; intros.\n  elim H7; intros.\n  elim H7; intros.\n  elim H7; intros.\n  elim H7; intros.\n  elim H8; intros.\n  elim H7; intros.\n  elim H8; intros.\n  elim H8; intros.\n  elim H9; intros.\n  elim H9; intros.\n  elim H9; intros.\n  elim H9; intros.\n  elim H10; intros.\n  elim H10; intros.\n  elim H10; intros.\n  elim H10; intros.\n  elim H10; intros.\n  elim H10; intros.\n  elim H10; intros.\n  elim H10; intros.\n  elim H10; intros.\n  elim H10; intros.\n  elim H10; intros.\n  elim H10; intros.\n  elim H10; introsDefined.",
                        "correct": false,
                        "error_msg": "Warning: -extra and -extra-phony are deprecated.\nWarning: Write the extra targets in Makefile.coq.local.\n\nFile \"./misc.v\", line 8, characters 2-19:\nError: No product even after head-reduction.\n\nmake[2]: *** [Makefile.coq:663: misc.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/misc.v",
                "context": "Require Export Lci.\n\nDefinition antisym (A : Set) (R : A -> A -> Prop) :=\n  forall x y : A, R x y -> R y x -> x = y :>A.\n\nDefinition pi1 : forall (A : Set) (P : A -> Prop), {x : A | P x} -> A.\nProof.\nsimple induction 1; auto.\nDefined.\n\n",
                "context_tokens": 89,
                "proof_start_offset": 236,
                "proof_end_offset": 378,
                "proof": "Lemma pi2 : forall (A : Set) (P : A -> Prop) (p : {x : A | P x}), P (pi1 A P p).\nProof.\nsimple induction p; unfold pi1 in |- *; trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma pi2 : forall (A : Set) (P : A -> Prop) (p : {x : A | P x}), P (pi1 A P p).\nProof.\nsimple induction 1; auto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./misc.v\", line 13, characters 0-18:\nError:\nLtac call to \"simple induction (quant_hyp)\" failed.\nNo 1st non dependent hypothesis in current goal even after head-reduction.\n\nmake[2]: *** [Makefile.coq:663: misc.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/zchinese/misc.v",
                "context": "Require Export Lci.\n\nDefinition antisym (A : Set) (R : A -> A -> Prop) :=\n  forall x y : A, R x y -> R y x -> x = y :>A.\n\nDefinition pi1 : forall (A : Set) (P : A -> Prop), {x : A | P x} -> A.\nProof.\nsimple induction 1; auto.\nDefined.\n\nLemma pi2 :\n forall (A : Set) (P : A -> Prop) (p : {x : A | P x}), P (pi1 A P p).\nProof.\nsimple induction p; unfold pi1 in |- *; trivial.\nQed.\n\nDefinition inversible (S : Set) (Mult : S -> S -> S) \n  (I x : S) := exists y : S, Mult x y = I /\\ Mult y x = I.\n\n\n",
                "context_tokens": 192,
                "proof_start_offset": 495,
                "proof_end_offset": 763,
                "proof": "Lemma inv_com : forall (S : Set) (Mult : S -> S -> S) (I x : S), commutativity S Mult -> (exists y : S, Mult x y = I) -> inversible S Mult I x.\nProof.\nintros; unfold inversible in |- *.\nelim H0; intros.\nexists x0.\nsplit.\nassumption.\nelim (H x x0); assumption.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma inv_com : forall (S : Set) (Mult : S -> S -> S) (I x : S), commutativity S Mult -> (exists y : S, Mult x y = I) -> inversible S Mult I x.\nProof.\nsimple induction 1; intros.\ninversion H1.\ninversion H2.\ninversion H3.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\ninversion H4.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./misc.v\", line 23, characters 0-18:\nError:\nLtac call to \"simple induction (quant_hyp)\" failed.\nCannot refine with term\n \"eq_ind (Mult ?M160 ?M161)\n    (fun _ : S => (exists y : S, Mult x y = I) -> inversible S Mult I x)\n    ?M165 (Mult ?M161 ?M160) (H ?M160 ?M161)\"\nbecause a metavariable has several occurrences.\n\nmake[2]: *** [Makefile.coq:663: misc.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            }
        ],
        "chinese": [
            {
                "filepath": "./coq_projects/chinese/groups.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                 groups.v                                 *)\n(****************************************************************************)\nRequire Export Lci.\nRequire Export misc.\n\n(*****************************************************************************)\nSection groups.\n\nVariable S : Set.\nVariable G : S -> Prop.\nVariable Add : S -> S -> S.\nVariable O : S.\nVariable Opp : S -> S.\n(*****************************************************************************)\n\n(*****************)\nDefinition is_group :=\n  intern S G Add /\\\n  associativity S Add /\\ neutral S G Add O /\\ opposite S G Add O Opp. \n\n(**************)\n",
                "context_tokens": 200,
                "proof_start_offset": 1664,
                "proof_end_offset": 2222,
                "proof": "Lemma regular_l : is_group -> forall y z : S, G y -> G z -> forall x : S, G x -> Add x y = Add x z -> y = z.\nProof.\nintros.\nelim H; intros; elim H5; intros; elim H7; intros; elim H8; intros.\nclear H4 H5 H7 H10.\nelim (H11 y H0); intros; elim H5; clear H4 H5.\nelim (H11 z H1); intros; elim H5; clear H4 H5 H8 H11.\nelim (H9 x H2); intros; elim H5; intros; elim H8; intros; elim H11.\nclear H4 H5 H7 H8 H9 H10 H11.\nelim (H6 (Opp x) x y); elim (H6 (Opp x) x z).\nelim H3; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma regular_l : is_group -> forall y z : S, G y -> G z -> forall x : S, G x -> Add x y = Add x z -> y = z.\nsimple induction 1; intros.\napply H1; auto with sets.\nintros y z H' H'0; elim H'0; intros H'1 H'2; elim H'2; intros H'3 H'4; elim H'4; intros H'5 H'6;\n elim H'6; intros H'7 H'8; elim H'8; intros H'9 H'10; elim H'11; intros H'11 H'12;\n elim H'12; intros H'12 H'13; elim H'14; intros H'15 H'16;\n elim H'15; intros H'16 H'17; elim H'16; intros H'16 H'17;\n elim H'18; intros H'18 H'20; elim H'18; intros H'20 H'20;\n elim H'20; intros H'20 H'20; elim H'20; intros H'20 H'20;\n elim H'20; intros H'20 H'20; elim H'20; intros H'20 H20;\n elim H'20; intros H'20 H'20; elim H20Qed.",
                        "correct": false,
                        "error_msg": "Warning: -extra and -extra-phony are deprecated.\nWarning: Write the extra targets in Makefile.coq.local.\n\nFile \"./groups.v\", line 38, characters 6-8:\nError:\nIn environment\nS : Set\nG : S -> Prop\nAdd : S -> S -> S\nO : S\nOpp : S -> S\nH : is_group\nH0 : intern S G Add\nH1 : associativity S Add /\\ neutral S G Add O /\\ opposite S G Add O Opp\ny, z : S\nH2 : G y\nH3 : G z\nx : S\nH4 : G x\nH5 : Add x y = Add x z\nUnable to unify\n \"associativity S Add /\\ neutral S G Add O /\\ opposite S G Add O Opp\" with\n \"y = z\".\n\nmake[2]: *** [Makefile.coq:663: groups.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/groups.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                 groups.v                                 *)\n(****************************************************************************)\nRequire Export Lci.\nRequire Export misc.\n\n(*****************************************************************************)\nSection groups.\n\nVariable S : Set.\nVariable G : S -> Prop.\nVariable Add : S -> S -> S.\nVariable O : S.\nVariable Opp : S -> S.\n(*****************************************************************************)\n\n(*****************)\nDefinition is_group :=\n  intern S G Add /\\\n  associativity S Add /\\ neutral S G Add O /\\ opposite S G Add O Opp. \n\n(**************)\nLemma regular_l :\n is_group ->\n forall y z : S,\n G y -> G z -> forall x : S, G x -> Add x y = Add x z -> y = z.\n\nProof.\nintros.\nelim H; intros; elim H5; intros; elim H7; intros; elim H8; intros. \nclear H4 H5 H7 H10.\n(* use of neutral *)\nelim (H11 y H0); intros; elim H5; clear H4 H5.\nelim (H11 z H1); intros; elim H5; clear H4 H5 H8 H11.\n(* use of opposite *)\nelim (H9 x H2); intros; elim H5; intros; elim H8; intros; elim H11. \nclear H4 H5 H7 H8 H9 H10 H11.\n(* use of associativity *)\nelim (H6 (Opp x) x y); elim (H6 (Opp x) x z).\nelim H3; reflexivity.\nQed.\n\n(************)\n",
                "context_tokens": 434,
                "proof_start_offset": 2239,
                "proof_end_offset": 2567,
                "proof": "Lemma add_add : commutativity S Add -> associativity S Add -> forall x1 y1 x2 y2 : S, Add (Add x1 y1) (Add x2 y2) = Add (Add x1 x2) (Add y1 y2).\nProof.\nintros com ass x1 y1 x2 y2.\nrewrite (ass (Add x1 y1) x2 y2); elim (ass x1 y1 x2); elim (com x2 y1).\nrewrite (ass x1 x2 y1); elim (ass (Add x1 x2) y1 y2); reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma add_add : commutativity S Add -> associativity S Add -> forall x1 y1 x2 y2 : S, Add (Add x1 y1) (Add x2 y2) = Add (Add x1 x2) (Add y1 y2).\nProof.\nintros.\nelim H; intros; elim H; intros; elim H1; intros; elim H2; intros; elim H3; intros; \n elim H4; intros; elim H5; intros; elim H5; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros;Qed.",
                        "correct": false,
                        "error_msg": "File \"./groups.v\", line 71, characters 34-37:\nError: The reference Qed was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: groups.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/groups.v",
                "context": "                                                  *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                 groups.v                                 *)\n(****************************************************************************)\nRequire Export Lci.\nRequire Export misc.\n\n(*****************************************************************************)\nSection groups.\n\nVariable S : Set.\nVariable G : S -> Prop.\nVariable Add : S -> S -> S.\nVariable O : S.\nVariable Opp : S -> S.\n(*****************************************************************************)\n\n(*****************)\nDefinition is_group :=\n  intern S G Add /\\\n  associativity S Add /\\ neutral S G Add O /\\ opposite S G Add O Opp. \n\n(**************)\nLemma regular_l :\n is_group ->\n forall y z : S,\n G y -> G z -> forall x : S, G x -> Add x y = Add x z -> y = z.\n\nProof.\nintros.\nelim H; intros; elim H5; intros; elim H7; intros; elim H8; intros. \nclear H4 H5 H7 H10.\n(* use of neutral *)\nelim (H11 y H0); intros; elim H5; clear H4 H5.\nelim (H11 z H1); intros; elim H5; clear H4 H5 H8 H11.\n(* use of opposite *)\nelim (H9 x H2); intros; elim H5; intros; elim H8; intros; elim H11. \nclear H4 H5 H7 H8 H9 H10 H11.\n(* use of associativity *)\nelim (H6 (Opp x) x y); elim (H6 (Opp x) x z).\nelim H3; reflexivity.\nQed.\n\n(************)\nLemma add_add :\n commutativity S Add ->\n associativity S Add ->\n forall x1 y1 x2 y2 : S,\n Add (Add x1 y1) (Add x2 y2) = Add (Add x1 x2) (Add y1 y2).\n\nProof.\nintros com ass x1 y1 x2 y2.\nrewrite (ass (Add x1 y1) x2 y2); elim (ass x1 y1 x2); elim (com x2 y1).\nrewrite (ass x1 x2 y1); elim (ass (Add x1 x2) y1 y2); reflexivity.\nQed.\n\n(****************)\n",
                "context_tokens": 549,
                "proof_start_offset": 2588,
                "proof_end_offset": 3197,
                "proof": "Lemma opp_unicity : is_group -> forall x y : S, is_opposite S G Add O x y -> y = Opp x.\nProof.\nintros.\nelim H0; intros; elim H2; intros.\nelim H; intros; elim H6; intros; elim H8; intros; elim H9; intros.\nelim (H12 y H3); intros; elim H14; clear H H2 H3 H5 H6 H8 H11 H12 H13 H14.\nelim (H10 x H1); intros; elim H2; intros; elim H5; intros; elim H8.\nclear H H1 H2 H5 H6 H8 H10.\nelim (H7 (Opp x) x y).\nelim H4; intros; rewrite H; clear H H0 H1 H4 H7.\nelim H9; intros; elim (H0 (Opp x) H3); intros.\nexact H1.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma opp_unicity : is_group -> forall x y : S, is_opposite S G Add O x y -> y = Opp x.\nProof.\nintros.\nelim H; intros; elim H0; intros; elim H1; intros; elim H2; intros; elim H3; intros; elim H4;\n intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5;\n intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6;\n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; introsQed.",
                        "correct": false,
                        "error_msg": "File \"./groups.v\", line 84, characters 18-27:\nError: The reference introsQed was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: groups.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/groups.v",
                "context": " Set.\nVariable G : S -> Prop.\nVariable Add : S -> S -> S.\nVariable O : S.\nVariable Opp : S -> S.\n(*****************************************************************************)\n\n(*****************)\nDefinition is_group :=\n  intern S G Add /\\\n  associativity S Add /\\ neutral S G Add O /\\ opposite S G Add O Opp. \n\n(**************)\nLemma regular_l :\n is_group ->\n forall y z : S,\n G y -> G z -> forall x : S, G x -> Add x y = Add x z -> y = z.\n\nProof.\nintros.\nelim H; intros; elim H5; intros; elim H7; intros; elim H8; intros. \nclear H4 H5 H7 H10.\n(* use of neutral *)\nelim (H11 y H0); intros; elim H5; clear H4 H5.\nelim (H11 z H1); intros; elim H5; clear H4 H5 H8 H11.\n(* use of opposite *)\nelim (H9 x H2); intros; elim H5; intros; elim H8; intros; elim H11. \nclear H4 H5 H7 H8 H9 H10 H11.\n(* use of associativity *)\nelim (H6 (Opp x) x y); elim (H6 (Opp x) x z).\nelim H3; reflexivity.\nQed.\n\n(************)\nLemma add_add :\n commutativity S Add ->\n associativity S Add ->\n forall x1 y1 x2 y2 : S,\n Add (Add x1 y1) (Add x2 y2) = Add (Add x1 x2) (Add y1 y2).\n\nProof.\nintros com ass x1 y1 x2 y2.\nrewrite (ass (Add x1 y1) x2 y2); elim (ass x1 y1 x2); elim (com x2 y1).\nrewrite (ass x1 x2 y1); elim (ass (Add x1 x2) y1 y2); reflexivity.\nQed.\n\n(****************)\nLemma opp_unicity :\n is_group -> forall x y : S, is_opposite S G Add O x y -> y = Opp x.\n\nProof.\nintros.\n(* G y *)\nelim H0; intros; elim H2; intros.\n(* y = 0+y *)\nelim H; intros; elim H6; intros; elim H8; intros; elim H9; intros.\nelim (H12 y H3); intros; elim H14; clear H H2 H3 H5 H6 H8 H11 H12 H13 H14.\n(* 0=(-x)+x *)\nelim (H10 x H1); intros; elim H2; intros; elim H5; intros; elim H8.\nclear H H1 H2 H5 H6 H8 H10.\n(* ((-x)+x)+y=(-x)+(x+y) *)\nelim (H7 (Opp x) x y).\n(* x+y = 0 *)\nelim H4; intros; rewrite H; clear H H0 H1 H4 H7.\n(* (-x)+0=(-x) *)\nelim H9; intros; elim (H0 (Opp x) H3); intros. exact H1.\nQed.\n\n(************)\n",
                "context_tokens": 733,
                "proof_start_offset": 3214,
                "proof_end_offset": 3568,
                "proof": "Lemma opp_opp : is_group -> forall x : S, G x -> x = Opp (Opp x).\nProof.\nintros.\napply (opp_unicity H (Opp x) x).\nunfold is_opposite in |- *; split.\nelim H; intros; elim H2; intros; elim H4; intros; elim (H6 x H0); intros.\nelim H8; trivial.\nelim H; intros; elim H2; intros; elim H4; intros; elim (H6 x H0); intros.\nelim H8; intros; elim H10; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma opp_opp : is_group -> forall x : S, G x -> x = Opp (Opp x).\nProof.\nintros.\nelim H; intros; elim H; intros; elim H0; intros; elim H0; intros; elim H1; intros; elim H2;\n intros; elim H2; intros; elim H3; intros; elim H4; intros; elim H5;\n intros; elim H5; intros; elim H5; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros;Qed.",
                        "correct": false,
                        "error_msg": "File \"./groups.v\", line 106, characters 42-45:\nError: The reference Qed was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: groups.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/groups.v",
                "context": "5 H7 H10.\n(* use of neutral *)\nelim (H11 y H0); intros; elim H5; clear H4 H5.\nelim (H11 z H1); intros; elim H5; clear H4 H5 H8 H11.\n(* use of opposite *)\nelim (H9 x H2); intros; elim H5; intros; elim H8; intros; elim H11. \nclear H4 H5 H7 H8 H9 H10 H11.\n(* use of associativity *)\nelim (H6 (Opp x) x y); elim (H6 (Opp x) x z).\nelim H3; reflexivity.\nQed.\n\n(************)\nLemma add_add :\n commutativity S Add ->\n associativity S Add ->\n forall x1 y1 x2 y2 : S,\n Add (Add x1 y1) (Add x2 y2) = Add (Add x1 x2) (Add y1 y2).\n\nProof.\nintros com ass x1 y1 x2 y2.\nrewrite (ass (Add x1 y1) x2 y2); elim (ass x1 y1 x2); elim (com x2 y1).\nrewrite (ass x1 x2 y1); elim (ass (Add x1 x2) y1 y2); reflexivity.\nQed.\n\n(****************)\nLemma opp_unicity :\n is_group -> forall x y : S, is_opposite S G Add O x y -> y = Opp x.\n\nProof.\nintros.\n(* G y *)\nelim H0; intros; elim H2; intros.\n(* y = 0+y *)\nelim H; intros; elim H6; intros; elim H8; intros; elim H9; intros.\nelim (H12 y H3); intros; elim H14; clear H H2 H3 H5 H6 H8 H11 H12 H13 H14.\n(* 0=(-x)+x *)\nelim (H10 x H1); intros; elim H2; intros; elim H5; intros; elim H8.\nclear H H1 H2 H5 H6 H8 H10.\n(* ((-x)+x)+y=(-x)+(x+y) *)\nelim (H7 (Opp x) x y).\n(* x+y = 0 *)\nelim H4; intros; rewrite H; clear H H0 H1 H4 H7.\n(* (-x)+0=(-x) *)\nelim H9; intros; elim (H0 (Opp x) H3); intros. exact H1.\nQed.\n\n(************)\nLemma opp_opp : is_group -> forall x : S, G x -> x = Opp (Opp x).\n\nProof.\nintros.\napply (opp_unicity H (Opp x) x).\nunfold is_opposite in |- *; split.\nelim H; intros; elim H2; intros; elim H4; intros; elim (H6 x H0); intros. \nelim H8; trivial.\nelim H; intros; elim H2; intros; elim H4; intros; elim (H6 x H0); intros.\nelim H8; intros; elim H10; auto.\nQed.\n\n(************)\n",
                "context_tokens": 716,
                "proof_start_offset": 3585,
                "proof_end_offset": 4727,
                "proof": "Lemma opp_add : is_group -> commutativity S Add -> forall x y : S, G x -> G y -> Opp (Add x y) = Add (Opp x) (Opp y).\nProof.\nintros; symmetry in |- *; apply (opp_unicity H (Add x y) (Add (Opp x) (Opp y))).\nunfold is_opposite in |- *; split.\nelim H; intros; apply (H3 x y H1 H2).\nsplit.\nelim H; intros; elim H4; intros; elim H6; intros; clear H4 H5 H6 H7.\nelim (H8 x H1); intros; elim H5; intros; clear H4 H5 H7.\nelim (H8 y H2); intros; elim H5; intros.\napply (H3 (Opp x) (Opp y) H6 H7).\nelim H; intros; elim H4; intros; clear H3 H4 H6.\nrewrite (add_add H0 H5 x y (Opp x) (Opp y)).\nrewrite (add_add H0 H5 (Opp x) (Opp y) x y); clear H5.\nelim H; intros; elim H4; intros; elim H6; intros.\nelim (H8 x H1); intros; elim H10; intros; elim H12; intros.\nrewrite H13; rewrite H14.\nclear H H0 H1 H3 H4 H5 H6 H9 H10 H11 H12 H13 H14.\nelim (H8 y H2); intros; elim H0; intros; elim H3; intros.\nrewrite H4; rewrite H5.\nclear H H0 H1 H2 H3 H4 H5 H8.\nelim H7; intros; exact (H0 O H).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma opp_add : is_group -> commutativity S Add -> forall x y : S, G x -> G y -> Opp (Add x y) = Add (Opp x) (Opp y).\nProof.\nintros.\napply (opp_uniqueness H (Opp x y) x).\nunfold is_symmetric in |- *; split.\nelim H0; intros; elim H1; intros; elim H2; intros; elim H3; intros; elim H4;\n intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5;\n intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5; \n intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; introsQed.",
                        "correct": false,
                        "error_msg": "File \"./groups.v\", line 108, characters 7-21:\nError: The reference opp_uniqueness was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: groups.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/groups.v",
                "context": "\n(* ((-x)+x)+y=(-x)+(x+y) *)\nelim (H7 (Opp x) x y).\n(* x+y = 0 *)\nelim H4; intros; rewrite H; clear H H0 H1 H4 H7.\n(* (-x)+0=(-x) *)\nelim H9; intros; elim (H0 (Opp x) H3); intros. exact H1.\nQed.\n\n(************)\nLemma opp_opp : is_group -> forall x : S, G x -> x = Opp (Opp x).\n\nProof.\nintros.\napply (opp_unicity H (Opp x) x).\nunfold is_opposite in |- *; split.\nelim H; intros; elim H2; intros; elim H4; intros; elim (H6 x H0); intros. \nelim H8; trivial.\nelim H; intros; elim H2; intros; elim H4; intros; elim (H6 x H0); intros.\nelim H8; intros; elim H10; auto.\nQed.\n\n(************)\nLemma opp_add :\n is_group ->\n commutativity S Add ->\n forall x y : S, G x -> G y -> Opp (Add x y) = Add (Opp x) (Opp y).\n\nProof.\nintros; symmetry  in |- *;\n apply (opp_unicity H (Add x y) (Add (Opp x) (Opp y))).\nunfold is_opposite in |- *; split.\n(* G (x+y) *)\nelim H; intros; apply (H3 x y H1 H2).\nsplit.\n(* G ((-x)+(-y)) *)\nelim H; intros; elim H4; intros; elim H6; intros; clear H4 H5 H6 H7.\nelim (H8 x H1); intros; elim H5; intros; clear H4 H5 H7.\nelim (H8 y H2); intros; elim H5; intros.\napply (H3 (Opp x) (Opp y) H6 H7).\n(* (x+y)+((-x)+(-y)) = 0 & ((-x)+(-y))+(x+y) = 0 *)\nelim H; intros; elim H4; intros; clear H3 H4 H6.\nrewrite (add_add H0 H5 x y (Opp x) (Opp y)).\nrewrite (add_add H0 H5 (Opp x) (Opp y) x y); clear H5.\nelim H; intros; elim H4; intros; elim H6; intros. \n  (* x+(-x) = 0 (-x)+x = 0 *)\nelim (H8 x H1); intros; elim H10; intros; elim H12; intros. \nrewrite H13; rewrite H14.\nclear H H0 H1 H3 H4 H5 H6 H9 H10 H11 H12 H13 H14.\n  (* y+(-y) = 0 (-y)+y = 0 *)\nelim (H8 y H2); intros; elim H0; intros; elim H3; intros. \nrewrite H4; rewrite H5.\nclear H H0 H1 H2 H3 H4 H5 H8.\n  (* 0+0 = 0 *)\nelim H7; intros; exact (H0 O H).\nQed.\n\n(****************)\n",
                "context_tokens": 743,
                "proof_start_offset": 4748,
                "proof_end_offset": 4967,
                "proof": "Lemma opp_neutral : is_group -> Opp O = O.\nProof.\nintros.\nelim (opp_unicity H O O).\nreflexivity.\nunfold is_opposite in |- *.\nelim H; intros; elim H1; intros; elim H3; intros; elim H4; intros.\nelim (H7 O H6); auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma opp_neutral : is_group -> Opp O = O.\nProof.\nintros; apply opp_zero_l.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./groups.v\", line 142, characters 14-24:\nError: The reference opp_zero_l was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: groups.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                 Zmult.v                                  *)\n(****************************************************************************)\nRequire Export Lci.\nRequire Export misc.\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\nRequire Export Zadd.\n\n(* Multiplication on Z, (Z, +, *, 0, 1) is a unitary commutative ring *)\n\n(*Recursive Definition multZ : Z -> Z -> Z := \n        OZ      y  => OZ\n | (pos O)      y  => y\n | (pos (S n1)) y  => (addZ (multZ (pos n1) y) y)\n | (neg O)      y  => (oppZ y)\n | (neg (S n1)) y  => (addZ (multZ (neg n1) y) (oppZ y)).\n*)\n\n\nFixpoint multpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => x2\n  | S n0 => addZ (multpos x2 n0) x2\n  end.\n\nFixpoint multneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => oppZ x2\n  | S n0 => addZ (multneg x2 n0) (oppZ x2)\n  end. \n\nDefinition multZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => OZ\n  | pos n => multpos x2 n\n  | neg n => multneg x2 n\n  end.\n\n\n",
                "context_tokens": 445,
                "proof_start_offset": 2094,
                "proof_end_offset": 2161,
                "proof": "Lemma multZ_eq1 : forall n : Z, multZ OZ n = OZ.\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma multZ_eq1 : forall n : Z, multZ OZ n = OZ.\nProof.\n simple induction n; simpl in |- *; auto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                 Zmult.v                                  *)\n(****************************************************************************)\nRequire Export Lci.\nRequire Export misc.\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\nRequire Export Zadd.\n\n(* Multiplication on Z, (Z, +, *, 0, 1) is a unitary commutative ring *)\n\n(*Recursive Definition multZ : Z -> Z -> Z := \n        OZ      y  => OZ\n | (pos O)      y  => y\n | (pos (S n1)) y  => (addZ (multZ (pos n1) y) y)\n | (neg O)      y  => (oppZ y)\n | (neg (S n1)) y  => (addZ (multZ (neg n1) y) (oppZ y)).\n*)\n\n\nFixpoint multpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => x2\n  | S n0 => addZ (multpos x2 n0) x2\n  end.\n\nFixpoint multneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => oppZ x2\n  | S n0 => addZ (multneg x2 n0) (oppZ x2)\n  end. \n\nDefinition multZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => OZ\n  | pos n => multpos x2 n\n  | neg n => multneg x2 n\n  end.\n\n\nLemma multZ_eq1 : forall n : Z, multZ OZ n = OZ.\nProof.\n auto.\nQed.\n\n",
                "context_tokens": 475,
                "proof_start_offset": 2163,
                "proof_end_offset": 2234,
                "proof": "Lemma multZ_eq2 : forall n : Z, multZ (pos 0) n = n.\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma multZ_eq2 : forall n : Z, multZ (pos 0) n = n.\nProof.\n auto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                 Zmult.v                                  *)\n(****************************************************************************)\nRequire Export Lci.\nRequire Export misc.\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\nRequire Export Zadd.\n\n(* Multiplication on Z, (Z, +, *, 0, 1) is a unitary commutative ring *)\n\n(*Recursive Definition multZ : Z -> Z -> Z := \n        OZ      y  => OZ\n | (pos O)      y  => y\n | (pos (S n1)) y  => (addZ (multZ (pos n1) y) y)\n | (neg O)      y  => (oppZ y)\n | (neg (S n1)) y  => (addZ (multZ (neg n1) y) (oppZ y)).\n*)\n\n\nFixpoint multpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => x2\n  | S n0 => addZ (multpos x2 n0) x2\n  end.\n\nFixpoint multneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => oppZ x2\n  | S n0 => addZ (multneg x2 n0) (oppZ x2)\n  end. \n\nDefinition multZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => OZ\n  | pos n => multpos x2 n\n  | neg n => multneg x2 n\n  end.\n\n\nLemma multZ_eq1 : forall n : Z, multZ OZ n = OZ.\nProof.\n auto.\nQed.\n\nLemma multZ_eq2 : forall n : Z, multZ (pos 0) n = n.\nProof.\n auto.\nQed.\n\n",
                "context_tokens": 508,
                "proof_start_offset": 2236,
                "proof_end_offset": 2350,
                "proof": "Lemma multZ_eq3 : forall (n1 : nat) (n : Z), multZ (pos (S n1)) n = addZ (multZ (pos n1) n) n.\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma multZ_eq3 : forall (n1 : nat) (n : Z), multZ (pos (S n1)) n = addZ (multZ (pos n1) n) n.\nProof.\n auto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                 Zmult.v                                  *)\n(****************************************************************************)\nRequire Export Lci.\nRequire Export misc.\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\nRequire Export Zadd.\n\n(* Multiplication on Z, (Z, +, *, 0, 1) is a unitary commutative ring *)\n\n(*Recursive Definition multZ : Z -> Z -> Z := \n        OZ      y  => OZ\n | (pos O)      y  => y\n | (pos (S n1)) y  => (addZ (multZ (pos n1) y) y)\n | (neg O)      y  => (oppZ y)\n | (neg (S n1)) y  => (addZ (multZ (neg n1) y) (oppZ y)).\n*)\n\n\nFixpoint multpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => x2\n  | S n0 => addZ (multpos x2 n0) x2\n  end.\n\nFixpoint multneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => oppZ x2\n  | S n0 => addZ (multneg x2 n0) (oppZ x2)\n  end. \n\nDefinition multZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => OZ\n  | pos n => multpos x2 n\n  | neg n => multneg x2 n\n  end.\n\n\nLemma multZ_eq1 : forall n : Z, multZ OZ n = OZ.\nProof.\n auto.\nQed.\n\nLemma multZ_eq2 : forall n : Z, multZ (pos 0) n = n.\nProof.\n auto.\nQed.\n\nLemma multZ_eq3 :\n forall (n1 : nat) (n : Z), multZ (pos (S n1)) n = addZ (multZ (pos n1) n) n.\nProof.\n auto.\nQed.\n\n",
                "context_tokens": 563,
                "proof_start_offset": 2352,
                "proof_end_offset": 2428,
                "proof": "Lemma multZ_eq4 : forall n : Z, multZ (neg 0) n = oppZ n.\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma multZ_eq4 : forall n : Z, multZ (neg 0) n = oppZ n.\nProof.\n auto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "***********************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                 Zmult.v                                  *)\n(****************************************************************************)\nRequire Export Lci.\nRequire Export misc.\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\nRequire Export Zadd.\n\n(* Multiplication on Z, (Z, +, *, 0, 1) is a unitary commutative ring *)\n\n(*Recursive Definition multZ : Z -> Z -> Z := \n        OZ      y  => OZ\n | (pos O)      y  => y\n | (pos (S n1)) y  => (addZ (multZ (pos n1) y) y)\n | (neg O)      y  => (oppZ y)\n | (neg (S n1)) y  => (addZ (multZ (neg n1) y) (oppZ y)).\n*)\n\n\nFixpoint multpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => x2\n  | S n0 => addZ (multpos x2 n0) x2\n  end.\n\nFixpoint multneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => oppZ x2\n  | S n0 => addZ (multneg x2 n0) (oppZ x2)\n  end. \n\nDefinition multZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => OZ\n  | pos n => multpos x2 n\n  | neg n => multneg x2 n\n  end.\n\n\nLemma multZ_eq1 : forall n : Z, multZ OZ n = OZ.\nProof.\n auto.\nQed.\n\nLemma multZ_eq2 : forall n : Z, multZ (pos 0) n = n.\nProof.\n auto.\nQed.\n\nLemma multZ_eq3 :\n forall (n1 : nat) (n : Z), multZ (pos (S n1)) n = addZ (multZ (pos n1) n) n.\nProof.\n auto.\nQed.\n\nLemma multZ_eq4 : forall n : Z, multZ (neg 0) n = oppZ n.\nProof.\n auto.\nQed.\n\n",
                "context_tokens": 580,
                "proof_start_offset": 2430,
                "proof_end_offset": 2552,
                "proof": "Lemma multZ_eq5 : forall (n1 : nat) (n : Z), multZ (neg (S n1)) n = addZ (multZ (neg n1) n) (oppZ n).\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma multZ_eq5 : forall (n1 : nat) (n : Z), multZ (neg (S n1)) n = addZ (multZ (neg n1) n) (oppZ n).\nProof.\n auto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "S-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                 Zmult.v                                  *)\n(****************************************************************************)\nRequire Export Lci.\nRequire Export misc.\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\nRequire Export Zadd.\n\n(* Multiplication on Z, (Z, +, *, 0, 1) is a unitary commutative ring *)\n\n(*Recursive Definition multZ : Z -> Z -> Z := \n        OZ      y  => OZ\n | (pos O)      y  => y\n | (pos (S n1)) y  => (addZ (multZ (pos n1) y) y)\n | (neg O)      y  => (oppZ y)\n | (neg (S n1)) y  => (addZ (multZ (neg n1) y) (oppZ y)).\n*)\n\n\nFixpoint multpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => x2\n  | S n0 => addZ (multpos x2 n0) x2\n  end.\n\nFixpoint multneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => oppZ x2\n  | S n0 => addZ (multneg x2 n0) (oppZ x2)\n  end. \n\nDefinition multZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => OZ\n  | pos n => multpos x2 n\n  | neg n => multneg x2 n\n  end.\n\n\nLemma multZ_eq1 : forall n : Z, multZ OZ n = OZ.\nProof.\n auto.\nQed.\n\nLemma multZ_eq2 : forall n : Z, multZ (pos 0) n = n.\nProof.\n auto.\nQed.\n\nLemma multZ_eq3 :\n forall (n1 : nat) (n : Z), multZ (pos (S n1)) n = addZ (multZ (pos n1) n) n.\nProof.\n auto.\nQed.\n\nLemma multZ_eq4 : forall n : Z, multZ (neg 0) n = oppZ n.\nProof.\n auto.\nQed.\n\nLemma multZ_eq5 :\n forall (n1 : nat) (n : Z),\n multZ (neg (S n1)) n = addZ (multZ (neg n1) n) (oppZ n).\nProof.\n auto.\nQed.\n\n(*******************)\nLemma tech_mult_posZ :\n forall (x : nat) (y : Z), multZ (pos (S x)) y = addZ (multZ (pos x) y) y.\n\nProof multZ_eq3.\n\n(*******************)\nLemma tech_mult_negZ :\n forall (x : nat) (y : Z),\n multZ (neg (S x)) y = addZ (multZ (neg x) y) (oppZ y).\n\nProof multZ_eq5.\n\n(*****************)\n",
                "context_tokens": 727,
                "proof_start_offset": 2860,
                "proof_end_offset": 3465,
                "proof": "Lemma mult_succZ_l : forall x y : Z, multZ (succZ x) y = addZ (multZ x y) y.\nProof.\nintros; elim x.\nsimpl in |- *; reflexivity.\nintros; simpl in |- *; reflexivity.\nintros; elim n.\nsimpl in |- *; symmetry in |- *.\nelim (addZ_opposite y I); intros.\nelim H0; intros; elim H2; intros; exact H4.\nintros; unfold succZ in |- *; rewrite (tech_mult_negZ n0 y).\nelim (addZ_associativity (multZ (neg n0) y) (oppZ y) y).\nelim (addZ_opposite y I); intros.\nelim H1; intros; elim H3; intros.\nrewrite H5.\nsymmetry in |- *; exact (add_OZ (multZ (neg n0) y)).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_succZ_l : forall x y : Z, multZ (succZ x) y = addZ (multZ x y) y.\nProof.\n auto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 103, characters 0-4:\nError: Attempt to save an incomplete proof (in proof mult_succZ_l)\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": " (oppZ y)).\n*)\n\n\nFixpoint multpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => x2\n  | S n0 => addZ (multpos x2 n0) x2\n  end.\n\nFixpoint multneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => oppZ x2\n  | S n0 => addZ (multneg x2 n0) (oppZ x2)\n  end. \n\nDefinition multZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => OZ\n  | pos n => multpos x2 n\n  | neg n => multneg x2 n\n  end.\n\n\nLemma multZ_eq1 : forall n : Z, multZ OZ n = OZ.\nProof.\n auto.\nQed.\n\nLemma multZ_eq2 : forall n : Z, multZ (pos 0) n = n.\nProof.\n auto.\nQed.\n\nLemma multZ_eq3 :\n forall (n1 : nat) (n : Z), multZ (pos (S n1)) n = addZ (multZ (pos n1) n) n.\nProof.\n auto.\nQed.\n\nLemma multZ_eq4 : forall n : Z, multZ (neg 0) n = oppZ n.\nProof.\n auto.\nQed.\n\nLemma multZ_eq5 :\n forall (n1 : nat) (n : Z),\n multZ (neg (S n1)) n = addZ (multZ (neg n1) n) (oppZ n).\nProof.\n auto.\nQed.\n\n(*******************)\nLemma tech_mult_posZ :\n forall (x : nat) (y : Z), multZ (pos (S x)) y = addZ (multZ (pos x) y) y.\n\nProof multZ_eq3.\n\n(*******************)\nLemma tech_mult_negZ :\n forall (x : nat) (y : Z),\n multZ (neg (S x)) y = addZ (multZ (neg x) y) (oppZ y).\n\nProof multZ_eq5.\n\n(*****************)\nLemma mult_succZ_l : forall x y : Z, multZ (succZ x) y = addZ (multZ x y) y.\n\nintros; elim x.\n(* OZ *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; simpl in |- *; reflexivity.\n(* neg n *)\nintros; elim n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *. \nelim (addZ_opposite y I); intros. elim H0; intros; elim H2; intros; exact H4.\n(* neg (S n0) *)\nintros; unfold succZ in |- *; rewrite (tech_mult_negZ n0 y).\nelim (addZ_associativity (multZ (neg n0) y) (oppZ y) y).\nelim (addZ_opposite y I); intros. elim H1; intros; elim H3; intros. rewrite H5.\nsymmetry  in |- *; exact (add_OZ (multZ (neg n0) y)).\nQed.\n\n(*****************)\n",
                "context_tokens": 724,
                "proof_start_offset": 3487,
                "proof_end_offset": 4087,
                "proof": "Lemma mult_predZ_l : forall x y : Z, multZ (predZ x) y = addZ (multZ x y) (oppZ y).\nProof.\nintros; elim x.\nsimpl in |- *; reflexivity.\nintros; elim n.\nsimpl in |- *; symmetry in |- *.\nelim (addZ_opposite y I); intros.\nelim H0; intros; elim H2; intros; exact H3.\nintros; unfold predZ in |- *; rewrite (tech_mult_posZ n0 y).\nelim (addZ_associativity (multZ (pos n0) y) y (oppZ y)).\nelim (addZ_opposite y I); intros.\nelim H1; intros; elim H3; intros; rewrite H4.\nrewrite (add_OZ (multZ (pos n0) y)); reflexivity.\nintros; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_predZ_l : forall x y : Z, multZ (predZ x) y = addZ (multZ x y) (oppZ y).\nProof.\n intros; elim x.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)Qed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 128, characters 15-26:\nError: In environment\nx, y : Z\nn : nat\nUnable to unify \"addZ y (oppZ y)\" with \"OZ\".\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": ".\nProof.\n auto.\nQed.\n\nLemma multZ_eq3 :\n forall (n1 : nat) (n : Z), multZ (pos (S n1)) n = addZ (multZ (pos n1) n) n.\nProof.\n auto.\nQed.\n\nLemma multZ_eq4 : forall n : Z, multZ (neg 0) n = oppZ n.\nProof.\n auto.\nQed.\n\nLemma multZ_eq5 :\n forall (n1 : nat) (n : Z),\n multZ (neg (S n1)) n = addZ (multZ (neg n1) n) (oppZ n).\nProof.\n auto.\nQed.\n\n(*******************)\nLemma tech_mult_posZ :\n forall (x : nat) (y : Z), multZ (pos (S x)) y = addZ (multZ (pos x) y) y.\n\nProof multZ_eq3.\n\n(*******************)\nLemma tech_mult_negZ :\n forall (x : nat) (y : Z),\n multZ (neg (S x)) y = addZ (multZ (neg x) y) (oppZ y).\n\nProof multZ_eq5.\n\n(*****************)\nLemma mult_succZ_l : forall x y : Z, multZ (succZ x) y = addZ (multZ x y) y.\n\nintros; elim x.\n(* OZ *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; simpl in |- *; reflexivity.\n(* neg n *)\nintros; elim n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *. \nelim (addZ_opposite y I); intros. elim H0; intros; elim H2; intros; exact H4.\n(* neg (S n0) *)\nintros; unfold succZ in |- *; rewrite (tech_mult_negZ n0 y).\nelim (addZ_associativity (multZ (neg n0) y) (oppZ y) y).\nelim (addZ_opposite y I); intros. elim H1; intros; elim H3; intros. rewrite H5.\nsymmetry  in |- *; exact (add_OZ (multZ (neg n0) y)).\nQed.\n\n(*****************)\nLemma mult_predZ_l :\n forall x y : Z, multZ (predZ x) y = addZ (multZ x y) (oppZ y).\n\nProof.\nintros; elim x.\n(* OZ *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos O *)\nsimpl in |- *; symmetry  in |- *.\nelim (addZ_opposite y I); intros. elim H0; intros; elim H2; intros; exact H3.\n(* pos (S n0) *)\nintros; unfold predZ in |- *; rewrite (tech_mult_posZ n0 y).\nelim (addZ_associativity (multZ (pos n0) y) y (oppZ y)).\nelim (addZ_opposite y I); intros. elim H1; intros; elim H3; intros; rewrite H4.\nrewrite (add_OZ (multZ (pos n0) y)); reflexivity.\n(* neg n *)\nintros; reflexivity.\nQed.\n\n(*****************)\n",
                "context_tokens": 727,
                "proof_start_offset": 4109,
                "proof_end_offset": 5383,
                "proof": "Lemma mult_succZ_r : forall x y : Z, multZ x (succZ y) = addZ (multZ x y) x.\nProof.\nintros; elim x.\nreflexivity.\nsimple induction n.\nsymmetry in |- *; exact (add_IZ_succZ y).\nintros y0 H; do 2 rewrite (tech_mult_posZ y0).\nrewrite H; elim (addZ_commutativity (pos y0) (multZ (pos y0) y)).\nelim (addZ_associativity (pos y0) (multZ (pos y0) y) (succZ y)).\nelim (addZ_commutativity (addZ (multZ (pos y0) y) (succZ y)) (pos y0)).\nrewrite (succ_addZ_r (multZ (pos y0) y) y).\nrewrite (succ_addZ_l (addZ (multZ (pos y0) y) y) (pos y0)).\nelim (succ_addZ_r (addZ (multZ (pos y0) y) y) (pos y0)).\nreflexivity.\nsimple induction n.\nsimpl in |- *; rewrite (add_mIZ_predZ (oppZ y)); exact (opp_succZ y).\nintros y0 H; do 2 rewrite (tech_mult_negZ y0).\nelim H; elim (addZ_commutativity (oppZ y) (multZ (neg y0) y)).\nelim (addZ_associativity (oppZ y) (multZ (neg y0) y) (neg (S y0))).\nelim (addZ_commutativity (addZ (multZ (neg y0) y) (neg (S y0))) (oppZ y)).\nrewrite (opp_succZ y).\nrewrite (pred_addZ_r (multZ (neg y0) (succZ y)) (oppZ y)).\nrewrite H; elim (pred_addZ_l (addZ (multZ (neg y0) y) (neg y0)) (oppZ y)).\nelim (pred_addZ_r (multZ (neg y0) y) (neg y0)); unfold predZ in |- *; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_succZ_r : forall x y : Z, multZ x (succZ y) = addZ (multZ x y) x.\nProof.\nintros; elim x.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)Qed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 150, characters 15-26:\nError: In environment\nx, y : Z\nn : nat\nUnable to unify \"addZ y (pos 0)\" with \"succZ y\".\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": " x y : Z, multZ (predZ x) y = addZ (multZ x y) (oppZ y).\n\nProof.\nintros; elim x.\n(* OZ *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos O *)\nsimpl in |- *; symmetry  in |- *.\nelim (addZ_opposite y I); intros. elim H0; intros; elim H2; intros; exact H3.\n(* pos (S n0) *)\nintros; unfold predZ in |- *; rewrite (tech_mult_posZ n0 y).\nelim (addZ_associativity (multZ (pos n0) y) y (oppZ y)).\nelim (addZ_opposite y I); intros. elim H1; intros; elim H3; intros; rewrite H4.\nrewrite (add_OZ (multZ (pos n0) y)); reflexivity.\n(* neg n *)\nintros; reflexivity.\nQed.\n\n(*****************)\nLemma mult_succZ_r : forall x y : Z, multZ x (succZ y) = addZ (multZ x y) x.\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nsymmetry  in |- *; exact (add_IZ_succZ y).\n(* pos (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_posZ y0).\nrewrite H; elim (addZ_commutativity (pos y0) (multZ (pos y0) y)).\nelim (addZ_associativity (pos y0) (multZ (pos y0) y) (succZ y)).\nelim (addZ_commutativity (addZ (multZ (pos y0) y) (succZ y)) (pos y0)).\nrewrite (succ_addZ_r (multZ (pos y0) y) y).\nrewrite (succ_addZ_l (addZ (multZ (pos y0) y) y) (pos y0)).\nelim (succ_addZ_r (addZ (multZ (pos y0) y) y) (pos y0)).\nreflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; rewrite (add_mIZ_predZ (oppZ y)); exact (opp_succZ y).\n(* neg (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_negZ y0).\nelim H; elim (addZ_commutativity (oppZ y) (multZ (neg y0) y)).\nelim (addZ_associativity (oppZ y) (multZ (neg y0) y) (neg (S y0))).\nelim (addZ_commutativity (addZ (multZ (neg y0) y) (neg (S y0))) (oppZ y)).\nrewrite (opp_succZ y). \nrewrite (pred_addZ_r (multZ (neg y0) (succZ y)) (oppZ y)).\nrewrite H; elim (pred_addZ_l (addZ (multZ (neg y0) y) (neg y0)) (oppZ y)).\nelim (pred_addZ_r (multZ (neg y0) y) (neg y0)); unfold predZ in |- *;\n reflexivity.\nQed.\n\n(*****************)\n",
                "context_tokens": 724,
                "proof_start_offset": 5405,
                "proof_end_offset": 6761,
                "proof": "Lemma mult_predZ_r : forall x y : Z, multZ x (predZ y) = addZ (multZ x y) (oppZ x).\nProof.\nintros; elim x.\nreflexivity.\nsimple induction n.\nsimpl in |- *; symmetry in |- *; exact (add_mIZ_predZ y).\nintros n0 H; unfold oppZ in |- *; do 2 rewrite (tech_mult_posZ n0).\nrewrite (pred_addZ_r (multZ (pos n0) (predZ y)) y).\nelim (pred_addZ_l (multZ (pos n0) (predZ y)) y).\nelim (addZ_commutativity y (multZ (pos n0) y)).\nelim (addZ_associativity y (multZ (pos n0) y) (neg (S n0))).\nelim (addZ_commutativity (addZ (multZ (pos n0) y) (neg (S n0))) y).\nrewrite H; elim (pred_addZ_r (multZ (pos n0) y) (oppZ (pos n0))).\nreflexivity.\nsimple induction n.\nsimpl in |- *.\nreplace (pos 0) with IZ; auto.\nrewrite (add_IZ_succZ (oppZ y)).\nexact (opp_predZ y).\nintros n0 H; do 2 rewrite (tech_mult_negZ n0).\nrewrite H; rewrite (opp_predZ y).\nelim (addZ_commutativity (oppZ (neg n0)) (multZ (neg n0) y)).\nelim (addZ_associativity (oppZ (neg n0)) (multZ (neg n0) y) (succZ (oppZ y))).\nelim (addZ_commutativity (addZ (multZ (neg n0) y) (succZ (oppZ y))) (oppZ (neg n0))).\nrewrite (succ_addZ_r (multZ (neg n0) y) (oppZ y)).\nrewrite (succ_addZ_l (addZ (multZ (neg n0) y) (oppZ y)) (oppZ (neg n0))).\nelim (succ_addZ_r (addZ (multZ (neg n0) y) (oppZ y)) (oppZ (neg n0))).\nreflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_predZ_r : forall x y : Z, multZ x (predZ y) = addZ (multZ x y) (oppZ x).\nProof.\nintros; elim x.\n(* pos pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 183, characters 15-26:\nError: In environment\nx, y : Z\nn : nat\nUnable to unify \"addZ (multpos y n) (neg n)\" with \n\"multpos (predZ y) n\".\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": " (tech_mult_negZ y0).\nelim H; elim (addZ_commutativity (oppZ y) (multZ (neg y0) y)).\nelim (addZ_associativity (oppZ y) (multZ (neg y0) y) (neg (S y0))).\nelim (addZ_commutativity (addZ (multZ (neg y0) y) (neg (S y0))) (oppZ y)).\nrewrite (opp_succZ y). \nrewrite (pred_addZ_r (multZ (neg y0) (succZ y)) (oppZ y)).\nrewrite H; elim (pred_addZ_l (addZ (multZ (neg y0) y) (neg y0)) (oppZ y)).\nelim (pred_addZ_r (multZ (neg y0) y) (neg y0)); unfold predZ in |- *;\n reflexivity.\nQed.\n\n(*****************)\nLemma mult_predZ_r :\n forall x y : Z, multZ x (predZ y) = addZ (multZ x y) (oppZ x).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nsimpl in |- *; symmetry  in |- *; exact (add_mIZ_predZ y).\n(* pos (S n0) *)\nintros n0 H; unfold oppZ in |- *; do 2 rewrite (tech_mult_posZ n0).\nrewrite (pred_addZ_r (multZ (pos n0) (predZ y)) y).\nelim (pred_addZ_l (multZ (pos n0) (predZ y)) y).\nelim (addZ_commutativity y (multZ (pos n0) y)).\nelim (addZ_associativity y (multZ (pos n0) y) (neg (S n0))).\nelim (addZ_commutativity (addZ (multZ (pos n0) y) (neg (S n0))) y).\nrewrite H; elim (pred_addZ_r (multZ (pos n0) y) (oppZ (pos n0))).\nreflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *.\nreplace (pos 0) with IZ; auto.\nrewrite (add_IZ_succZ (oppZ y)).\nexact (opp_predZ y).\n(* neg (S n0) *)\nintros n0 H; do 2 rewrite (tech_mult_negZ n0).\nrewrite H; rewrite (opp_predZ y).\nelim (addZ_commutativity (oppZ (neg n0)) (multZ (neg n0) y)).\nelim (addZ_associativity (oppZ (neg n0)) (multZ (neg n0) y) (succZ (oppZ y))).\nelim\n (addZ_commutativity (addZ (multZ (neg n0) y) (succZ (oppZ y)))\n    (oppZ (neg n0))).\nrewrite (succ_addZ_r (multZ (neg n0) y) (oppZ y)).\nrewrite (succ_addZ_l (addZ (multZ (neg n0) y) (oppZ y)) (oppZ (neg n0))).\nelim (succ_addZ_r (addZ (multZ (neg n0) y) (oppZ y)) (oppZ (neg n0))).\nreflexivity.\nQed.\n\n(************)\n",
                "context_tokens": 740,
                "proof_start_offset": 6778,
                "proof_end_offset": 7151,
                "proof": "Lemma mult_OZ : forall x : Z, multZ x OZ = OZ.\nProof.\nsimple destruct x.\nreflexivity.\nsimple induction n.\nreflexivity.\nintros y H; rewrite (tech_mult_posZ y OZ); rewrite H; reflexivity.\nsimple induction n.\nreflexivity.\nintros y H; rewrite (tech_mult_negZ y OZ); rewrite H; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_OZ : forall x : Z, multZ x OZ = OZ.\nProof.\nintros; elim x.\n(* pos 0 *)\nsimpl in |- *; reflexivity.\n(* pos 0 *)\nsimpl in |- *; reflexivity.\n(* pos 0 *)\nsimpl in |- *; reflexivity.\n(* pos 0 *)\nsimpl in |- *; reflexivity.\n(* pos 0 *)\nsimpl in |- *; reflexivity.\n(* pos 0 *)\nsimpl in |- *; reflexivity.\n(* pos 0 *)\nsimpl in |- *; reflexivity.\n(* pos 0 *)\nsimpl in |- *; reflexivity.\n(* pos 0 *)\nsimpl in |- *; reflexivity.\n(* pos 0 *)\nsimpl in |- *; reflexivity.\n(* pos 0 *)\nsimpl in |- *; reflexivity.\n(* pos 0 *)\nsimpl in |- *; reflexivity.\n(* pos 0 *)\nsimpl in |- *; reflexivity.\n(* pos 0 *)\nsimpl in |- *; reflexivity.\n(* pos 0 *)\nsimpl in |- *; reflexivity.\n(* pos 0 *)\nsimpl in |- *; reflexivity.\n(* pos 0 *)\nsimpl in |- *; reflexivity.\n(* pos 0 *)\nsimpl in |- *; reflexivity.\n(* pos 0 *)\nsimpl in |- *; reflexivity.\n(* pos 0 *)\nsimpl in |- *; reflexivity.\n(* pos 0 *)\nsimplQed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 224, characters 15-26:\nError: In environment\nx : Z\nn : nat\nUnable to unify \"OZ\" with \"multpos OZ n\".\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "pred_addZ_l (addZ (multZ (neg y0) y) (neg y0)) (oppZ y)).\nelim (pred_addZ_r (multZ (neg y0) y) (neg y0)); unfold predZ in |- *;\n reflexivity.\nQed.\n\n(*****************)\nLemma mult_predZ_r :\n forall x y : Z, multZ x (predZ y) = addZ (multZ x y) (oppZ x).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nsimpl in |- *; symmetry  in |- *; exact (add_mIZ_predZ y).\n(* pos (S n0) *)\nintros n0 H; unfold oppZ in |- *; do 2 rewrite (tech_mult_posZ n0).\nrewrite (pred_addZ_r (multZ (pos n0) (predZ y)) y).\nelim (pred_addZ_l (multZ (pos n0) (predZ y)) y).\nelim (addZ_commutativity y (multZ (pos n0) y)).\nelim (addZ_associativity y (multZ (pos n0) y) (neg (S n0))).\nelim (addZ_commutativity (addZ (multZ (pos n0) y) (neg (S n0))) y).\nrewrite H; elim (pred_addZ_r (multZ (pos n0) y) (oppZ (pos n0))).\nreflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *.\nreplace (pos 0) with IZ; auto.\nrewrite (add_IZ_succZ (oppZ y)).\nexact (opp_predZ y).\n(* neg (S n0) *)\nintros n0 H; do 2 rewrite (tech_mult_negZ n0).\nrewrite H; rewrite (opp_predZ y).\nelim (addZ_commutativity (oppZ (neg n0)) (multZ (neg n0) y)).\nelim (addZ_associativity (oppZ (neg n0)) (multZ (neg n0) y) (succZ (oppZ y))).\nelim\n (addZ_commutativity (addZ (multZ (neg n0) y) (succZ (oppZ y)))\n    (oppZ (neg n0))).\nrewrite (succ_addZ_r (multZ (neg n0) y) (oppZ y)).\nrewrite (succ_addZ_l (addZ (multZ (neg n0) y) (oppZ y)) (oppZ (neg n0))).\nelim (succ_addZ_r (addZ (multZ (neg n0) y) (oppZ y)) (oppZ (neg n0))).\nreflexivity.\nQed.\n\n(************)\nLemma mult_OZ : forall x : Z, multZ x OZ = OZ.\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nreflexivity.\n(* pos (S y) *)\nintros y H; rewrite (tech_mult_posZ y OZ); rewrite H; reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nreflexivity.\n(* neg (S y) *)\nintros y H; rewrite (tech_mult_negZ y OZ); rewrite H; reflexivity.\nQed.\n\n(************)\n",
                "context_tokens": 740,
                "proof_start_offset": 7168,
                "proof_end_offset": 7648,
                "proof": "Lemma mult_IZ : forall x : Z, multZ x IZ = x.\nProof.\nsimple destruct x.\nreflexivity.\nsimple induction n.\nreflexivity.\nintros y H; rewrite (tech_mult_posZ y IZ); rewrite H.\nrewrite (add_IZ_succZ (pos y)); reflexivity.\nsimple induction n.\nreflexivity.\nintros y H; rewrite (tech_mult_negZ y IZ); rewrite H; unfold IZ in |- *; unfold oppZ in |- *.\nrewrite (add_mIZ_predZ (neg y)); reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_IZ : forall x : Z, multZ x IZ = x.\nsimple destruct x.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |-Qed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 247, characters 15-26:\nError:\nIn environment\nx : Z\nn, n0 : nat\nH : multpos IZ n0 = pos n0\nUnable to unify \"pos (S n0)\" with \"addZ (multpos IZ n0) IZ\".\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "_posZ n0).\nrewrite (pred_addZ_r (multZ (pos n0) (predZ y)) y).\nelim (pred_addZ_l (multZ (pos n0) (predZ y)) y).\nelim (addZ_commutativity y (multZ (pos n0) y)).\nelim (addZ_associativity y (multZ (pos n0) y) (neg (S n0))).\nelim (addZ_commutativity (addZ (multZ (pos n0) y) (neg (S n0))) y).\nrewrite H; elim (pred_addZ_r (multZ (pos n0) y) (oppZ (pos n0))).\nreflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *.\nreplace (pos 0) with IZ; auto.\nrewrite (add_IZ_succZ (oppZ y)).\nexact (opp_predZ y).\n(* neg (S n0) *)\nintros n0 H; do 2 rewrite (tech_mult_negZ n0).\nrewrite H; rewrite (opp_predZ y).\nelim (addZ_commutativity (oppZ (neg n0)) (multZ (neg n0) y)).\nelim (addZ_associativity (oppZ (neg n0)) (multZ (neg n0) y) (succZ (oppZ y))).\nelim\n (addZ_commutativity (addZ (multZ (neg n0) y) (succZ (oppZ y)))\n    (oppZ (neg n0))).\nrewrite (succ_addZ_r (multZ (neg n0) y) (oppZ y)).\nrewrite (succ_addZ_l (addZ (multZ (neg n0) y) (oppZ y)) (oppZ (neg n0))).\nelim (succ_addZ_r (addZ (multZ (neg n0) y) (oppZ y)) (oppZ (neg n0))).\nreflexivity.\nQed.\n\n(************)\nLemma mult_OZ : forall x : Z, multZ x OZ = OZ.\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nreflexivity.\n(* pos (S y) *)\nintros y H; rewrite (tech_mult_posZ y OZ); rewrite H; reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nreflexivity.\n(* neg (S y) *)\nintros y H; rewrite (tech_mult_negZ y OZ); rewrite H; reflexivity.\nQed.\n\n(************)\nLemma mult_IZ : forall x : Z, multZ x IZ = x.\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nreflexivity.\n(* pos (S y) *)\nintros y H; rewrite (tech_mult_posZ y IZ); rewrite H. \nrewrite (add_IZ_succZ (pos y)); reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nreflexivity.\n(* neg (S y) *)\nintros y H; rewrite (tech_mult_negZ y IZ); rewrite H; unfold IZ in |- *;\n unfold oppZ in |- *. \nrewrite (add_mIZ_predZ (neg y)); reflexivity.\nQed.\n\n(*************)\n",
                "context_tokens": 734,
                "proof_start_offset": 7666,
                "proof_end_offset": 8216,
                "proof": "Lemma mult_mIZ : forall x : Z, multZ x (neg 0) = oppZ x.\nProof.\nsimple destruct x.\nreflexivity.\nsimple induction n.\nreflexivity.\nintros y H; rewrite (tech_mult_posZ y (neg 0)); rewrite H.\nrewrite (add_mIZ_predZ (oppZ (pos y))); reflexivity.\nsimple induction n.\nreflexivity.\nintros y H; rewrite (tech_mult_negZ y (neg 0)); rewrite H.\nelim (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity (neg y) (neg 0) I I).\nrewrite (add_mIZ_predZ (neg y)); reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_mIZ : forall x : Z, multZ x (neg 0) = oppZ x.\nsimple induction x.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivityQed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 270, characters 0-11:\nError:\nIn environment\nx : Z\nn, n0 : nat\nH : multZ (pos n0) (neg 0) = oppZ (pos n0)\nUnable to unify \"oppZ (pos (S n0))\" with \"multZ (pos (S n0)) (neg 0)\".\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "Z y)).\nexact (opp_predZ y).\n(* neg (S n0) *)\nintros n0 H; do 2 rewrite (tech_mult_negZ n0).\nrewrite H; rewrite (opp_predZ y).\nelim (addZ_commutativity (oppZ (neg n0)) (multZ (neg n0) y)).\nelim (addZ_associativity (oppZ (neg n0)) (multZ (neg n0) y) (succZ (oppZ y))).\nelim\n (addZ_commutativity (addZ (multZ (neg n0) y) (succZ (oppZ y)))\n    (oppZ (neg n0))).\nrewrite (succ_addZ_r (multZ (neg n0) y) (oppZ y)).\nrewrite (succ_addZ_l (addZ (multZ (neg n0) y) (oppZ y)) (oppZ (neg n0))).\nelim (succ_addZ_r (addZ (multZ (neg n0) y) (oppZ y)) (oppZ (neg n0))).\nreflexivity.\nQed.\n\n(************)\nLemma mult_OZ : forall x : Z, multZ x OZ = OZ.\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nreflexivity.\n(* pos (S y) *)\nintros y H; rewrite (tech_mult_posZ y OZ); rewrite H; reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nreflexivity.\n(* neg (S y) *)\nintros y H; rewrite (tech_mult_negZ y OZ); rewrite H; reflexivity.\nQed.\n\n(************)\nLemma mult_IZ : forall x : Z, multZ x IZ = x.\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nreflexivity.\n(* pos (S y) *)\nintros y H; rewrite (tech_mult_posZ y IZ); rewrite H. \nrewrite (add_IZ_succZ (pos y)); reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nreflexivity.\n(* neg (S y) *)\nintros y H; rewrite (tech_mult_negZ y IZ); rewrite H; unfold IZ in |- *;\n unfold oppZ in |- *. \nrewrite (add_mIZ_predZ (neg y)); reflexivity.\nQed.\n\n(*************)\nLemma mult_mIZ : forall x : Z, multZ x (neg 0) = oppZ x.\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nreflexivity.\n(* pos (S y) *)\nintros y H; rewrite (tech_mult_posZ y (neg 0)); rewrite H. \nrewrite (add_mIZ_predZ (oppZ (pos y))); reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nreflexivity.\n(* neg (S y) *)\nintros y H; rewrite (tech_mult_negZ y (neg 0)); rewrite H.\nelim\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity (neg y) (neg 0) I I).\nrewrite (add_mIZ_predZ (neg y)); reflexivity.\nQed.\n\n(**************************)\n",
                "context_tokens": 746,
                "proof_start_offset": 8247,
                "proof_end_offset": 8887,
                "proof": "Theorem multZ_commutativity : commutativity Z multZ.\nProof.\nunfold commutativity in |- *; intros; elim x.\nrewrite (mult_OZ y); unfold multZ in |- *; reflexivity.\nsimple induction n.\nsimpl in |- *; symmetry in |- *; exact (mult_IZ y).\nintros y0 H; rewrite (tech_mult_posZ y0 y); rewrite H.\nelim (mult_succZ_r y (pos y0)); unfold succZ in |- *; reflexivity.\nintros; elim n.\nsimpl in |- *; symmetry in |- *; exact (mult_mIZ y).\nintros y0 H; rewrite (tech_mult_negZ y0 y); rewrite H.\nelim (mult_predZ_r y (neg y0)); unfold predZ in |- *; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem multZ_commutativity : commutativity Z multZ.\nsimple destruct x.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nintros x H; rewrite (tech_mult_negZ x (neg 0)); rewrite H; reflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nintros x H; rewrite (tech_mult_negZ x (neg 0)); rewrite H; reflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nintros x H; rewrite (tech_mult_negZ x (neg 0)); rewrite H; reflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nintros x H; rewrite (tech_mult_negZ x (neg 0)); rewrite H; reflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nintros x H; rewrite (tech_mult_negZ x (neg 0)); rewrite H; reflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nintros x H; rewrite (tech_mult_negZ x (neg 0)); rewrite H; reflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nintros x H; rewrite (tech_mult_negZ xQed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 288, characters 0-11:\nError: In environment\nx, y : Z\nUnable to unify \"multZ y OZ\" with \"multZ OZ y\".\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "neg n0))).\nreflexivity.\nQed.\n\n(************)\nLemma mult_OZ : forall x : Z, multZ x OZ = OZ.\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nreflexivity.\n(* pos (S y) *)\nintros y H; rewrite (tech_mult_posZ y OZ); rewrite H; reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nreflexivity.\n(* neg (S y) *)\nintros y H; rewrite (tech_mult_negZ y OZ); rewrite H; reflexivity.\nQed.\n\n(************)\nLemma mult_IZ : forall x : Z, multZ x IZ = x.\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nreflexivity.\n(* pos (S y) *)\nintros y H; rewrite (tech_mult_posZ y IZ); rewrite H. \nrewrite (add_IZ_succZ (pos y)); reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nreflexivity.\n(* neg (S y) *)\nintros y H; rewrite (tech_mult_negZ y IZ); rewrite H; unfold IZ in |- *;\n unfold oppZ in |- *. \nrewrite (add_mIZ_predZ (neg y)); reflexivity.\nQed.\n\n(*************)\nLemma mult_mIZ : forall x : Z, multZ x (neg 0) = oppZ x.\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nreflexivity.\n(* pos (S y) *)\nintros y H; rewrite (tech_mult_posZ y (neg 0)); rewrite H. \nrewrite (add_mIZ_predZ (oppZ (pos y))); reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nreflexivity.\n(* neg (S y) *)\nintros y H; rewrite (tech_mult_negZ y (neg 0)); rewrite H.\nelim\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity (neg y) (neg 0) I I).\nrewrite (add_mIZ_predZ (neg y)); reflexivity.\nQed.\n\n(**************************)\nTheorem multZ_commutativity : commutativity Z multZ.\n\nunfold commutativity in |- *; intros; elim x.\n(* OZ *)\nrewrite (mult_OZ y); unfold multZ in |- *; reflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nsimpl in |- *; symmetry  in |- *; exact (mult_IZ y).\n(* pos (S y0) *)\nintros y0 H; rewrite (tech_mult_posZ y0 y); rewrite H. \nelim (mult_succZ_r y (pos y0)); unfold succZ in |- *; reflexivity.\n(* neg n *)\nintros; elim n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (mult_mIZ y).\n(* neg (S y0) *)\nintros y0 H; rewrite (tech_mult_negZ y0 y); rewrite H. \nelim (mult_predZ_r y (neg y0)); unfold predZ in |- *; reflexivity.\nQed.\n\n(********************)\n",
                "context_tokens": 743,
                "proof_start_offset": 8912,
                "proof_end_offset": 9098,
                "proof": "Theorem multZ_neutral : neutral Z IdZ multZ IZ.\nProof.\nunfold neutral in |- *.\nsplit.\nexact I.\nintros.\nsplit.\nelim (multZ_commutativity IZ x); reflexivity.\nreflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem multZ_neutral : neutral Z IdZ multZ IZ.\nunfold absZ in |- *; intros; elim x.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (mult_mIZ_ Scope nat_scope.\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (mult_mIZ_ Scope nat_scope.\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (mult_mIZ_ Scope nat_scope.\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (mult_mIZ_ Scope nat_scope.\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (mult_mIZ_ Scope nat_scope.\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (mult_mIZ_ Scope nat_scope.\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (mult_mIZ_ Scope nat_scope.\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (mult_mIZ_ Scope nat_scope.\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (mult_mQed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 308, characters 34-35:\nError: The reference x was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "(* pos (S y) *)\nintros y H; rewrite (tech_mult_posZ y OZ); rewrite H; reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nreflexivity.\n(* neg (S y) *)\nintros y H; rewrite (tech_mult_negZ y OZ); rewrite H; reflexivity.\nQed.\n\n(************)\nLemma mult_IZ : forall x : Z, multZ x IZ = x.\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nreflexivity.\n(* pos (S y) *)\nintros y H; rewrite (tech_mult_posZ y IZ); rewrite H. \nrewrite (add_IZ_succZ (pos y)); reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nreflexivity.\n(* neg (S y) *)\nintros y H; rewrite (tech_mult_negZ y IZ); rewrite H; unfold IZ in |- *;\n unfold oppZ in |- *. \nrewrite (add_mIZ_predZ (neg y)); reflexivity.\nQed.\n\n(*************)\nLemma mult_mIZ : forall x : Z, multZ x (neg 0) = oppZ x.\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nreflexivity.\n(* pos (S y) *)\nintros y H; rewrite (tech_mult_posZ y (neg 0)); rewrite H. \nrewrite (add_mIZ_predZ (oppZ (pos y))); reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nreflexivity.\n(* neg (S y) *)\nintros y H; rewrite (tech_mult_negZ y (neg 0)); rewrite H.\nelim\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity (neg y) (neg 0) I I).\nrewrite (add_mIZ_predZ (neg y)); reflexivity.\nQed.\n\n(**************************)\nTheorem multZ_commutativity : commutativity Z multZ.\n\nunfold commutativity in |- *; intros; elim x.\n(* OZ *)\nrewrite (mult_OZ y); unfold multZ in |- *; reflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nsimpl in |- *; symmetry  in |- *; exact (mult_IZ y).\n(* pos (S y0) *)\nintros y0 H; rewrite (tech_mult_posZ y0 y); rewrite H. \nelim (mult_succZ_r y (pos y0)); unfold succZ in |- *; reflexivity.\n(* neg n *)\nintros; elim n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (mult_mIZ y).\n(* neg (S y0) *)\nintros y0 H; rewrite (tech_mult_negZ y0 y); rewrite H. \nelim (mult_predZ_r y (neg y0)); unfold predZ in |- *; reflexivity.\nQed.\n\n(********************)\nTheorem multZ_neutral : neutral Z IdZ multZ IZ.\n\nunfold neutral in |- *.\nsplit. exact I.\nintros. \nsplit.\n(* -> *)\nelim (multZ_commutativity IZ x); reflexivity.\n(* <- *)\nreflexivity.\nQed.\n\n(******************************)\n",
                "context_tokens": 743,
                "proof_start_offset": 9133,
                "proof_end_offset": 10783,
                "proof": "Theorem mult_add_distributivity : distributivity Z addZ multZ.\nProof.\nunfold distributivity in |- *; intros; case x.\nsplit; reflexivity.\nsimple induction n.\nsplit.\nrewrite addZ_eq2; rewrite multZ_eq2.\nrewrite (mult_succZ_l y z); exact (addZ_commutativity (multZ y z) z).\nreflexivity.\nintros y0 H.\nelim H; intros; split.\nrewrite addZ_eq3; rewrite multZ_eq3.\nrewrite mult_succZ_l; rewrite H0.\nelim (addZ_associativity (multZ (pos y0) z) (multZ y z) z).\nelim (addZ_commutativity z (multZ y z)).\napply addZ_associativity.\ndo 3 rewrite multZ_eq3.\nrewrite H1.\napply (add_add Z addZ addZ_commutativity addZ_associativity).\nsimple induction n.\nsplit.\nrewrite addZ_eq4; rewrite multZ_eq4; rewrite (mult_predZ_l y z).\nexact (addZ_commutativity (multZ y z) (oppZ z)).\nrewrite multZ_eq4.\napply (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity y z I I).\nintros y0 H.\nsplit.\nrewrite (tech_add_neg_predZ y0 y); rewrite (mult_predZ_l (addZ (neg y0) y) z).\nelim H; intros.\nrewrite H0.\nelim (addZ_associativity (multZ (neg y0) z) (multZ y z) (oppZ z)).\nelim (addZ_commutativity (oppZ z) (multZ y z)).\nrewrite (addZ_associativity (multZ (neg y0) z) (oppZ z) (multZ y z)).\nelim (tech_mult_negZ y0 z); reflexivity.\nrewrite (tech_mult_negZ y0 (addZ y z)); rewrite (tech_mult_negZ y0 y).\nrewrite (tech_mult_negZ y0 z); elim H; intros; rewrite H1.\nelim (add_add Z addZ addZ_commutativity addZ_associativity (multZ (neg y0) y) (multZ (neg y0) z) (oppZ y) (oppZ z)).\nelim (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity y z I I).\nreflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem mult_add_distributivity : distributivity Z addZ multZ.\nunfold Rminus in |- *.\nsplit. exact I.\nintros. \nsplit.\nexact (mult_comm (nat_of_P 1) (nat_of_P 1)).\n(* <- *)\nelim (mult_comm (nat_of_P 1) (nat_of_P 1)).\n(* <- *)\nelim (mult_comm (nat_of_P 1) (nat_of_P 1)).\n(* <- *)\nelim (mult_comm (nat_of_P 1) (nat_of_P 1)).\n(* <- *)\nelim (mult_comm (nat_of_P 1) (nat_of_P 1)).\n(* <- *)\nelim (mult_comm (nat_of_P 1) (nat_of_P 1)).\n(* <- *)\nelim (mult_comm (nat_of_P 1) (nat_of_P 1)).\n(* <- *)\nelim (mult_comm (nat_of_P 1) (nat_of_P 1)).\n(* <- *)\nelim (mult_comm (nat_of_P 1) (nat_of_P 1)).\n(* <- *)\nelim (Qed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 321, characters 7-13:\nError: The reference Rminus was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": " (mult_mIZ y).\n(* neg (S y0) *)\nintros y0 H; rewrite (tech_mult_negZ y0 y); rewrite H. \nelim (mult_predZ_r y (neg y0)); unfold predZ in |- *; reflexivity.\nQed.\n\n(********************)\nTheorem multZ_neutral : neutral Z IdZ multZ IZ.\n\nunfold neutral in |- *.\nsplit. exact I.\nintros. \nsplit.\n(* -> *)\nelim (multZ_commutativity IZ x); reflexivity.\n(* <- *)\nreflexivity.\nQed.\n\n(******************************)\nTheorem mult_add_distributivity : distributivity Z addZ multZ.\n\nunfold distributivity in |- *; intros; case x.\n(* OZ *)\nsplit; reflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nsplit.\nrewrite addZ_eq2; rewrite multZ_eq2.\nrewrite (mult_succZ_l y z); exact (addZ_commutativity (multZ y z) z). \nreflexivity.\n(* pos (S y0) *)\nintros y0 H.\nelim H; intros; split.\nrewrite addZ_eq3; rewrite multZ_eq3.\nrewrite mult_succZ_l; rewrite H0.\nelim (addZ_associativity (multZ (pos y0) z) (multZ y z) z).\nelim (addZ_commutativity z (multZ y z)).\napply addZ_associativity.\ndo 3 rewrite multZ_eq3.\nrewrite H1.\napply (add_add Z addZ addZ_commutativity addZ_associativity).\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsplit.\nrewrite addZ_eq4; rewrite multZ_eq4; rewrite (mult_predZ_l y z). \nexact (addZ_commutativity (multZ y z) (oppZ z)).\nrewrite multZ_eq4.\napply (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity y z I I).\n(* neg (S y0) *)\nintros y0 H.\nsplit.\n(* -> *)\nrewrite (tech_add_neg_predZ y0 y); rewrite (mult_predZ_l (addZ (neg y0) y) z).\nelim H; intros. rewrite H0.\nelim (addZ_associativity (multZ (neg y0) z) (multZ y z) (oppZ z)).\nelim (addZ_commutativity (oppZ z) (multZ y z)).\nrewrite (addZ_associativity (multZ (neg y0) z) (oppZ z) (multZ y z)).\nelim (tech_mult_negZ y0 z); reflexivity.\n(* <- *)\nrewrite (tech_mult_negZ y0 (addZ y z)); rewrite (tech_mult_negZ y0 y).\nrewrite (tech_mult_negZ y0 z); elim H; intros; rewrite H1.\nelim\n (add_add Z addZ addZ_commutativity addZ_associativity \n    (multZ (neg y0) y) (multZ (neg y0) z) (oppZ y) \n    (oppZ z)).\nelim (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity y z I I).\nreflexivity.\nQed.\n\n(****************)\n",
                "context_tokens": 726,
                "proof_start_offset": 10804,
                "proof_end_offset": 11399,
                "proof": "Lemma mult_oppZ_r : forall x y : Z, multZ x (oppZ y) = oppZ (multZ x y).\nProof.\nintros; case x.\nreflexivity.\nsimple induction n.\nreflexivity.\nintros y0 H; do 2 rewrite (tech_mult_posZ y0).\nrewrite (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity (multZ (pos y0) y) y I I).\nelim H; reflexivity.\nintros; elim n.\nreflexivity.\nintros y0 H; do 2 rewrite (tech_mult_negZ y0).\nrewrite (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity (multZ (neg y0) y) (oppZ y) I I).\nelim H; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_oppZ_r : forall x y : Z, multZ x (oppZ y) = oppZ (multZ x y).\nunfold mult, oppZ in |- *.\nintros; case x; simpl in |- *; auto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 376, characters 0-4:\nError: Attempt to save an incomplete proof (in proof mult_oppZ_r)\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "0) *)\nintros y0 H.\nelim H; intros; split.\nrewrite addZ_eq3; rewrite multZ_eq3.\nrewrite mult_succZ_l; rewrite H0.\nelim (addZ_associativity (multZ (pos y0) z) (multZ y z) z).\nelim (addZ_commutativity z (multZ y z)).\napply addZ_associativity.\ndo 3 rewrite multZ_eq3.\nrewrite H1.\napply (add_add Z addZ addZ_commutativity addZ_associativity).\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsplit.\nrewrite addZ_eq4; rewrite multZ_eq4; rewrite (mult_predZ_l y z). \nexact (addZ_commutativity (multZ y z) (oppZ z)).\nrewrite multZ_eq4.\napply (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity y z I I).\n(* neg (S y0) *)\nintros y0 H.\nsplit.\n(* -> *)\nrewrite (tech_add_neg_predZ y0 y); rewrite (mult_predZ_l (addZ (neg y0) y) z).\nelim H; intros. rewrite H0.\nelim (addZ_associativity (multZ (neg y0) z) (multZ y z) (oppZ z)).\nelim (addZ_commutativity (oppZ z) (multZ y z)).\nrewrite (addZ_associativity (multZ (neg y0) z) (oppZ z) (multZ y z)).\nelim (tech_mult_negZ y0 z); reflexivity.\n(* <- *)\nrewrite (tech_mult_negZ y0 (addZ y z)); rewrite (tech_mult_negZ y0 y).\nrewrite (tech_mult_negZ y0 z); elim H; intros; rewrite H1.\nelim\n (add_add Z addZ addZ_commutativity addZ_associativity \n    (multZ (neg y0) y) (multZ (neg y0) z) (oppZ y) \n    (oppZ z)).\nelim (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity y z I I).\nreflexivity.\nQed.\n\n(****************)\nLemma mult_oppZ_r : forall x y : Z, multZ x (oppZ y) = oppZ (multZ x y).\n\nintros; case x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nreflexivity.\n(* pos (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_posZ y0).\nrewrite\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity \n    (multZ (pos y0) y) y I I).\nelim H; reflexivity.\n(* neg n *)\nintros; elim n.\n(* neg O *)\nreflexivity.\n(* neg (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_negZ y0).\nrewrite\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity \n    (multZ (neg y0) y) (oppZ y) I I).\nelim H; reflexivity.\nQed.\n\n(****************)\n",
                "context_tokens": 726,
                "proof_start_offset": 11420,
                "proof_end_offset": 12246,
                "proof": "Lemma mult_oppZ_l : forall x y : Z, multZ (oppZ x) y = oppZ (multZ x y).\nProof.\nsimple destruct y.\nrewrite (mult_OZ (oppZ x)); rewrite (mult_OZ x); reflexivity.\nintros; elim (multZ_commutativity (pos n) (oppZ x)).\nelim (multZ_commutativity (pos n) x); elim n.\nreflexivity.\nintros y0 H; do 2 rewrite (tech_mult_posZ y0).\nrewrite H; symmetry in |- *.\nexact (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity (multZ (pos y0) x) x I I).\nintros; elim (multZ_commutativity (neg n) (oppZ x)).\nelim (multZ_commutativity (neg n) x); elim n.\nreflexivity.\nintros y0 H; do 2 rewrite (tech_mult_negZ y0).\nrewrite H; symmetry in |- *.\nexact (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity (multZ (neg y0) x) (oppZ x) I I).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_oppZ_l : forall x y : Z, multZ (oppZ x) y = oppZ (multZ x y).\nintros; case x.\n(* pos O *)\nreflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nintros; elim n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nintros; elim n.\n(* posQed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 412, characters 0-11:\nError:\nIn environment\nx, y : Z\nn, n0 : nat\nH : multZ (oppZ (pos n0)) y = oppZ (multZ (pos n0) y)\nUnable to unify \"oppZ (multZ (pos (S n0)) y)\" with\n \"multZ (oppZ (pos (S n0))) y\".\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": " <- *)\nrewrite (tech_mult_negZ y0 (addZ y z)); rewrite (tech_mult_negZ y0 y).\nrewrite (tech_mult_negZ y0 z); elim H; intros; rewrite H1.\nelim\n (add_add Z addZ addZ_commutativity addZ_associativity \n    (multZ (neg y0) y) (multZ (neg y0) z) (oppZ y) \n    (oppZ z)).\nelim (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity y z I I).\nreflexivity.\nQed.\n\n(****************)\nLemma mult_oppZ_r : forall x y : Z, multZ x (oppZ y) = oppZ (multZ x y).\n\nintros; case x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nreflexivity.\n(* pos (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_posZ y0).\nrewrite\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity \n    (multZ (pos y0) y) y I I).\nelim H; reflexivity.\n(* neg n *)\nintros; elim n.\n(* neg O *)\nreflexivity.\n(* neg (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_negZ y0).\nrewrite\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity \n    (multZ (neg y0) y) (oppZ y) I I).\nelim H; reflexivity.\nQed.\n\n(****************)\nLemma mult_oppZ_l : forall x y : Z, multZ (oppZ x) y = oppZ (multZ x y).\n\nsimple destruct y.\n(* OZ *)\nrewrite (mult_OZ (oppZ x)); rewrite (mult_OZ x); reflexivity.\n(* pos n *)\nintros; elim (multZ_commutativity (pos n) (oppZ x)). \nelim (multZ_commutativity (pos n) x); elim n.\n(* pos O *)\nreflexivity.\n(* pos (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_posZ y0).\nrewrite H; symmetry  in |- *. \nexact\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity \n    (multZ (pos y0) x) x I I).\n(* neg n *)\nintros; elim (multZ_commutativity (neg n) (oppZ x)). \nelim (multZ_commutativity (neg n) x); elim n.\n(* neg O *)\nreflexivity.\n(* neg (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_negZ y0).\nrewrite H; symmetry  in |- *.\nexact\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity \n    (multZ (neg y0) x) (oppZ x) I I).\nQed.\n\n(********************)\nLemma tech_multZ_negO : forall x : Z, multZ (neg 0) x = oppZ x.\n\nProof multZ_eq4.\n\n(***********************)\n",
                "context_tokens": 719,
                "proof_start_offset": 12380,
                "proof_end_offset": 12674,
                "proof": "Lemma tech_mult_pos_posZ : forall n m : nat, multZ (pos n) (pos m) = pos (n * m + (n + m)).\nProof.\nintros; elim n.\nreflexivity.\nintros y H; rewrite (tech_mult_posZ y (pos m)); rewrite H.\nrewrite (tech_add_pos_posZ (y * m + (y + m)) m).\nelim (technical_lemma y m); reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_mult_pos_posZ : forall n m : nat, multZ (pos n) (pos m) = pos (n * m + (n + m)).\nProof.\n intros; rewrite (mult_comm (neg n)); rewrite (mult_comm (neg n)); reflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 438, characters 29-34:\nError:\nIn environment\nn, m : nat\nThe term \"neg n\" has type \"Z\" while it is expected to have type \"nat\".\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": ").\nreflexivity.\nQed.\n\n(****************)\nLemma mult_oppZ_r : forall x y : Z, multZ x (oppZ y) = oppZ (multZ x y).\n\nintros; case x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nreflexivity.\n(* pos (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_posZ y0).\nrewrite\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity \n    (multZ (pos y0) y) y I I).\nelim H; reflexivity.\n(* neg n *)\nintros; elim n.\n(* neg O *)\nreflexivity.\n(* neg (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_negZ y0).\nrewrite\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity \n    (multZ (neg y0) y) (oppZ y) I I).\nelim H; reflexivity.\nQed.\n\n(****************)\nLemma mult_oppZ_l : forall x y : Z, multZ (oppZ x) y = oppZ (multZ x y).\n\nsimple destruct y.\n(* OZ *)\nrewrite (mult_OZ (oppZ x)); rewrite (mult_OZ x); reflexivity.\n(* pos n *)\nintros; elim (multZ_commutativity (pos n) (oppZ x)). \nelim (multZ_commutativity (pos n) x); elim n.\n(* pos O *)\nreflexivity.\n(* pos (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_posZ y0).\nrewrite H; symmetry  in |- *. \nexact\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity \n    (multZ (pos y0) x) x I I).\n(* neg n *)\nintros; elim (multZ_commutativity (neg n) (oppZ x)). \nelim (multZ_commutativity (neg n) x); elim n.\n(* neg O *)\nreflexivity.\n(* neg (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_negZ y0).\nrewrite H; symmetry  in |- *.\nexact\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity \n    (multZ (neg y0) x) (oppZ x) I I).\nQed.\n\n(********************)\nLemma tech_multZ_negO : forall x : Z, multZ (neg 0) x = oppZ x.\n\nProof multZ_eq4.\n\n(***********************)\nLemma tech_mult_pos_posZ :\n forall n m : nat, multZ (pos n) (pos m) = pos (n * m + (n + m)).\n\nintros; elim n.\n(* O *)\nreflexivity.\n(* S y *)\nintros y H; rewrite (tech_mult_posZ y (pos m)); rewrite H.\nrewrite (tech_add_pos_posZ (y * m + (y + m)) m).\nelim (technical_lemma y m); reflexivity.\nQed.\n\n(***********************)\n",
                "context_tokens": 719,
                "proof_start_offset": 12702,
                "proof_end_offset": 13018,
                "proof": "Lemma tech_mult_neg_negZ : forall n m : nat, multZ (neg n) (neg m) = pos (n * m + (n + m)).\nProof.\nintros; elim n.\nreflexivity.\nintros y H; rewrite (tech_mult_negZ y (neg m)); rewrite H; unfold oppZ in |- *.\nrewrite (tech_add_pos_posZ (y * m + (y + m)) m).\nelim (technical_lemma y m); reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_mult_neg_negZ : forall n m : nat, multZ (neg n) (neg m) = pos (n * m + (n + m)).\nintros; elim n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(*Qed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 454, characters 0-11:\nError:\nIn environment\nn, m, n0 : nat\nH : multZ (neg n0) (neg m) = pos (n0 * m + (n0 + m))\nUnable to unify \"pos (S n0 * m + (S n0 + m))\" with\n \"multZ (neg (S n0)) (neg m)\".\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": " y0) y) y I I).\nelim H; reflexivity.\n(* neg n *)\nintros; elim n.\n(* neg O *)\nreflexivity.\n(* neg (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_negZ y0).\nrewrite\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity \n    (multZ (neg y0) y) (oppZ y) I I).\nelim H; reflexivity.\nQed.\n\n(****************)\nLemma mult_oppZ_l : forall x y : Z, multZ (oppZ x) y = oppZ (multZ x y).\n\nsimple destruct y.\n(* OZ *)\nrewrite (mult_OZ (oppZ x)); rewrite (mult_OZ x); reflexivity.\n(* pos n *)\nintros; elim (multZ_commutativity (pos n) (oppZ x)). \nelim (multZ_commutativity (pos n) x); elim n.\n(* pos O *)\nreflexivity.\n(* pos (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_posZ y0).\nrewrite H; symmetry  in |- *. \nexact\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity \n    (multZ (pos y0) x) x I I).\n(* neg n *)\nintros; elim (multZ_commutativity (neg n) (oppZ x)). \nelim (multZ_commutativity (neg n) x); elim n.\n(* neg O *)\nreflexivity.\n(* neg (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_negZ y0).\nrewrite H; symmetry  in |- *.\nexact\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity \n    (multZ (neg y0) x) (oppZ x) I I).\nQed.\n\n(********************)\nLemma tech_multZ_negO : forall x : Z, multZ (neg 0) x = oppZ x.\n\nProof multZ_eq4.\n\n(***********************)\nLemma tech_mult_pos_posZ :\n forall n m : nat, multZ (pos n) (pos m) = pos (n * m + (n + m)).\n\nintros; elim n.\n(* O *)\nreflexivity.\n(* S y *)\nintros y H; rewrite (tech_mult_posZ y (pos m)); rewrite H.\nrewrite (tech_add_pos_posZ (y * m + (y + m)) m).\nelim (technical_lemma y m); reflexivity.\nQed.\n\n(***********************)\nLemma tech_mult_neg_negZ :\n forall n m : nat, multZ (neg n) (neg m) = pos (n * m + (n + m)).\n\nintros; elim n.\n(* O *)\nreflexivity.\n(* S y *)\nintros y H; rewrite (tech_mult_negZ y (neg m)); rewrite H;\n unfold oppZ in |- *.\nrewrite (tech_add_pos_posZ (y * m + (y + m)) m).\nelim (technical_lemma y m); reflexivity.\nQed.\n\n(***********************)\n",
                "context_tokens": 719,
                "proof_start_offset": 13046,
                "proof_end_offset": 13355,
                "proof": "Lemma tech_mult_pos_negZ : forall n m : nat, multZ (pos n) (neg m) = neg (n * m + (n + m)).\nProof.\nintros; elim n.\nsimpl in |- *; reflexivity.\nintros y H; rewrite (tech_mult_posZ y (neg m)); rewrite H.\nrewrite (tech_add_neg_negZ (y * m + (y + m)) m).\nelim (technical_lemma y m); reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_mult_pos_negZ : forall n m : nat, multZ (pos n) (neg m) = neg (n * m + (n + m)).\nintros; elim n.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 468, characters 0-11:\nError:\nIn environment\nn, m, n0 : nat\nH : multZ (pos n0) (neg m) = neg (n0 * m + (n0 + m))\nUnable to unify \"neg (S n0 * m + (S n0 + m))\" with\n \"multZ (pos (S n0)) (neg m)\".\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": " : Z, multZ (oppZ x) y = oppZ (multZ x y).\n\nsimple destruct y.\n(* OZ *)\nrewrite (mult_OZ (oppZ x)); rewrite (mult_OZ x); reflexivity.\n(* pos n *)\nintros; elim (multZ_commutativity (pos n) (oppZ x)). \nelim (multZ_commutativity (pos n) x); elim n.\n(* pos O *)\nreflexivity.\n(* pos (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_posZ y0).\nrewrite H; symmetry  in |- *. \nexact\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity \n    (multZ (pos y0) x) x I I).\n(* neg n *)\nintros; elim (multZ_commutativity (neg n) (oppZ x)). \nelim (multZ_commutativity (neg n) x); elim n.\n(* neg O *)\nreflexivity.\n(* neg (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_negZ y0).\nrewrite H; symmetry  in |- *.\nexact\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity \n    (multZ (neg y0) x) (oppZ x) I I).\nQed.\n\n(********************)\nLemma tech_multZ_negO : forall x : Z, multZ (neg 0) x = oppZ x.\n\nProof multZ_eq4.\n\n(***********************)\nLemma tech_mult_pos_posZ :\n forall n m : nat, multZ (pos n) (pos m) = pos (n * m + (n + m)).\n\nintros; elim n.\n(* O *)\nreflexivity.\n(* S y *)\nintros y H; rewrite (tech_mult_posZ y (pos m)); rewrite H.\nrewrite (tech_add_pos_posZ (y * m + (y + m)) m).\nelim (technical_lemma y m); reflexivity.\nQed.\n\n(***********************)\nLemma tech_mult_neg_negZ :\n forall n m : nat, multZ (neg n) (neg m) = pos (n * m + (n + m)).\n\nintros; elim n.\n(* O *)\nreflexivity.\n(* S y *)\nintros y H; rewrite (tech_mult_negZ y (neg m)); rewrite H;\n unfold oppZ in |- *.\nrewrite (tech_add_pos_posZ (y * m + (y + m)) m).\nelim (technical_lemma y m); reflexivity.\nQed.\n\n(***********************)\nLemma tech_mult_pos_negZ :\n forall n m : nat, multZ (pos n) (neg m) = neg (n * m + (n + m)).\n\nintros; elim n.\n(* O *)\nsimpl in |- *; reflexivity.\n(* S y *)\nintros y H; rewrite (tech_mult_posZ y (neg m)); rewrite H.\nrewrite (tech_add_neg_negZ (y * m + (y + m)) m).\nelim (technical_lemma y m); reflexivity.\nQed.\n\n(***********************)\n",
                "context_tokens": 719,
                "proof_start_offset": 13383,
                "proof_end_offset": 13714,
                "proof": "Lemma tech_mult_neg_posZ : forall n m : nat, multZ (neg n) (pos m) = neg (n * m + (n + m)).\nProof.\nintros; elim n.\nsimpl in |- *; reflexivity.\nintros y H; rewrite (tech_mult_negZ y (pos m)); unfold oppZ in |- *; rewrite H.\nrewrite (tech_add_neg_negZ (y * m + (y + m)) m).\nelim (technical_lemma y m); reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_mult_neg_posZ : forall n m : nat, multZ (neg n) (pos m) = neg (n * m + (n + m)).\nProof.\nintros; elim n.\n(* 0 *)\nsimpl in |- *; reflexivity.\n(* 0 *)\nsimpl in |- *; reflexivity.\n(* 0 *)\nsimpl in |- *; reflexivity.\n(* 0 *)\nsimpl in |- *; reflexivity.\n(* 0 *)\nsimpl in |- *; reflexivity.\n(* 0 *)\nsimpl in |- *; reflexivity.\n(* 0 *)\nsimpl in |- *; reflexivity.\n(* 0 *)\nsimpl in |- *; reflexivity.\n(* 0 *)\nsimpl in |- *; reflexivity.\n(* 0 *)\nsimpl in |- *; reflexivity.\n(* 0 *)\nsimpl in |- *; reflexivity.\n(* 0 *)\nsimpl in |- *; reflexivity.\n(* 0 *)\nsimpl in |- *; reflexivity.\n(* 0 *)\nsimpl in |- *; reflexivity.\n(* 0 *)\nsimpl in |- *; reflexivity.\n(* 0 *)\nsimpl in |- *; reflexivity.\n(* 0 *)\nsimpl in |- *; reflexivity.\n(* 0 *)\nsimpl in |- *; reflexivity.\n(* 0 *)\nsimpl in |- *; reflexivity.\n(* 0 *)\nsimpl in |- *; reflexivity.\n(* 0 *)\nsimpl in |- *; reflexivity.\n(* 0 *)\nsimpl in |- *; reflexivity.\n(* 0 *)\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 482, characters 15-26:\nError:\nIn environment\nn, m, n0 : nat\nH : multneg (pos m) n0 = neg (n0 * m + (n0 + m))\nUnable to unify \"neg (m + n0 * m + S (n0 + m))\" with\n \"addZ (multneg (pos m) n0) (neg m)\".\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "\nintros y0 H; do 2 rewrite (tech_mult_posZ y0).\nrewrite H; symmetry  in |- *. \nexact\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity \n    (multZ (pos y0) x) x I I).\n(* neg n *)\nintros; elim (multZ_commutativity (neg n) (oppZ x)). \nelim (multZ_commutativity (neg n) x); elim n.\n(* neg O *)\nreflexivity.\n(* neg (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_negZ y0).\nrewrite H; symmetry  in |- *.\nexact\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity \n    (multZ (neg y0) x) (oppZ x) I I).\nQed.\n\n(********************)\nLemma tech_multZ_negO : forall x : Z, multZ (neg 0) x = oppZ x.\n\nProof multZ_eq4.\n\n(***********************)\nLemma tech_mult_pos_posZ :\n forall n m : nat, multZ (pos n) (pos m) = pos (n * m + (n + m)).\n\nintros; elim n.\n(* O *)\nreflexivity.\n(* S y *)\nintros y H; rewrite (tech_mult_posZ y (pos m)); rewrite H.\nrewrite (tech_add_pos_posZ (y * m + (y + m)) m).\nelim (technical_lemma y m); reflexivity.\nQed.\n\n(***********************)\nLemma tech_mult_neg_negZ :\n forall n m : nat, multZ (neg n) (neg m) = pos (n * m + (n + m)).\n\nintros; elim n.\n(* O *)\nreflexivity.\n(* S y *)\nintros y H; rewrite (tech_mult_negZ y (neg m)); rewrite H;\n unfold oppZ in |- *.\nrewrite (tech_add_pos_posZ (y * m + (y + m)) m).\nelim (technical_lemma y m); reflexivity.\nQed.\n\n(***********************)\nLemma tech_mult_pos_negZ :\n forall n m : nat, multZ (pos n) (neg m) = neg (n * m + (n + m)).\n\nintros; elim n.\n(* O *)\nsimpl in |- *; reflexivity.\n(* S y *)\nintros y H; rewrite (tech_mult_posZ y (neg m)); rewrite H.\nrewrite (tech_add_neg_negZ (y * m + (y + m)) m).\nelim (technical_lemma y m); reflexivity.\nQed.\n\n(***********************)\nLemma tech_mult_neg_posZ :\n forall n m : nat, multZ (neg n) (pos m) = neg (n * m + (n + m)).\n\nintros; elim n.\n(* O *)\nsimpl in |- *; reflexivity.\n(* S y *)\nintros y H; rewrite (tech_mult_negZ y (pos m)); unfold oppZ in |- *;\n rewrite H.\nrewrite (tech_add_neg_negZ (y * m + (y + m)) m).\nelim (technical_lemma y m); reflexivity.\nQed.\n\n(**************************)\n",
                "context_tokens": 746,
                "proof_start_offset": 13745,
                "proof_end_offset": 14428,
                "proof": "Theorem multZ_associativity : associativity Z multZ.\nProof.\nunfold associativity in |- *; intros; elim x.\nreflexivity.\nsimple induction n.\nunfold multZ in |- *; reflexivity.\nintros y0 H; do 2 rewrite (tech_mult_posZ y0).\nrewrite H; elim (mult_oppZ_l y z).\nelim (mult_add_distributivity (multZ (pos y0) y) y z); intros.\nelim H0.\nreflexivity.\nsimple induction n.\nsimpl in |- *; symmetry in |- *; exact (mult_oppZ_l y z).\nintros y0 H; do 2 rewrite (tech_mult_negZ y0).\nrewrite H; elim (mult_oppZ_l y z).\nelim (mult_add_distributivity (multZ (neg y0) y) (oppZ y) z); intros.\nelim H0.\nreflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem multZ_associativity : associativity Z multZ.\napply multZ_right_l.\napply multZ_right_l.\napply multZ_right_l.\napply multZ_right_l.\napply multZ_right_r.\napply multZ_right_l.\napply multZ_right_r.\napply multZ_right_l.\napply multZ_right_r.\napply multZ_right_r.\napply multZ_right_r.\napply multZ_right_r.\napply multZ_right_r.\napply multZ_right_r.\napply multZ_right_r.\napply multZ_right_r.\napply multZ_right_r.\napply multZ_right_r.\napply multZ_right_r.\napply multZ_right_r.\napply multZ_right_r.\napply multZ_right_r.\napply multZ_right_r.\napply multZ_right_r.\napply multZ_right_r.\napply multZ_right_r.\napply multZ_right_r.\napply multZ_right_r.\napply multZQed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 491, characters 6-19:\nError: The reference multZ_right_l was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": ") (pos m) = pos (n * m + (n + m)).\n\nintros; elim n.\n(* O *)\nreflexivity.\n(* S y *)\nintros y H; rewrite (tech_mult_posZ y (pos m)); rewrite H.\nrewrite (tech_add_pos_posZ (y * m + (y + m)) m).\nelim (technical_lemma y m); reflexivity.\nQed.\n\n(***********************)\nLemma tech_mult_neg_negZ :\n forall n m : nat, multZ (neg n) (neg m) = pos (n * m + (n + m)).\n\nintros; elim n.\n(* O *)\nreflexivity.\n(* S y *)\nintros y H; rewrite (tech_mult_negZ y (neg m)); rewrite H;\n unfold oppZ in |- *.\nrewrite (tech_add_pos_posZ (y * m + (y + m)) m).\nelim (technical_lemma y m); reflexivity.\nQed.\n\n(***********************)\nLemma tech_mult_pos_negZ :\n forall n m : nat, multZ (pos n) (neg m) = neg (n * m + (n + m)).\n\nintros; elim n.\n(* O *)\nsimpl in |- *; reflexivity.\n(* S y *)\nintros y H; rewrite (tech_mult_posZ y (neg m)); rewrite H.\nrewrite (tech_add_neg_negZ (y * m + (y + m)) m).\nelim (technical_lemma y m); reflexivity.\nQed.\n\n(***********************)\nLemma tech_mult_neg_posZ :\n forall n m : nat, multZ (neg n) (pos m) = neg (n * m + (n + m)).\n\nintros; elim n.\n(* O *)\nsimpl in |- *; reflexivity.\n(* S y *)\nintros y H; rewrite (tech_mult_negZ y (pos m)); unfold oppZ in |- *;\n rewrite H.\nrewrite (tech_add_neg_negZ (y * m + (y + m)) m).\nelim (technical_lemma y m); reflexivity.\nQed.\n\n(**************************)\nTheorem multZ_associativity : associativity Z multZ.\n\nunfold associativity in |- *; intros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nunfold multZ in |- *; reflexivity.\n(* pos (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_posZ y0).\nrewrite H; elim (mult_oppZ_l y z).\nelim (mult_add_distributivity (multZ (pos y0) y) y z); intros. elim H0.\nreflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (mult_oppZ_l y z).\n(* neg (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_negZ y0).\nrewrite H; elim (mult_oppZ_l y z).\nelim (mult_add_distributivity (multZ (neg y0) y) (oppZ y) z); intros. elim H0.\nreflexivity.\nQed.\n\n(*************)\n",
                "context_tokens": 739,
                "proof_start_offset": 14446,
                "proof_end_offset": 14693,
                "proof": "Theorem Z_ring : is_ring Z IdZ addZ multZ OZ oppZ.\nProof.\nunfold is_ring in |- *.\nsplit.\nexact addZ_commutativity.\nsplit.\nexact Z_group.\nsplit.\nunfold intern in |- *.\nintros.\nexact I.\nsplit.\nexact multZ_associativity.\nexact mult_add_distributivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem Z_ring : is_ring Z IdZ addZ multZ OZ oppZ.\nunfold is_ring, oppZ in |- *; reflexivity.\n(* neg n *)\nsimple induction n.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)Qed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 517, characters 30-41:\nError:\nTactic failure:  The relation and is not a declared reflexive relation. Maybe you need to require the Coq.Classes.RelationClasses library.\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": ".\nQed.\n\n(***********************)\nLemma tech_mult_neg_negZ :\n forall n m : nat, multZ (neg n) (neg m) = pos (n * m + (n + m)).\n\nintros; elim n.\n(* O *)\nreflexivity.\n(* S y *)\nintros y H; rewrite (tech_mult_negZ y (neg m)); rewrite H;\n unfold oppZ in |- *.\nrewrite (tech_add_pos_posZ (y * m + (y + m)) m).\nelim (technical_lemma y m); reflexivity.\nQed.\n\n(***********************)\nLemma tech_mult_pos_negZ :\n forall n m : nat, multZ (pos n) (neg m) = neg (n * m + (n + m)).\n\nintros; elim n.\n(* O *)\nsimpl in |- *; reflexivity.\n(* S y *)\nintros y H; rewrite (tech_mult_posZ y (neg m)); rewrite H.\nrewrite (tech_add_neg_negZ (y * m + (y + m)) m).\nelim (technical_lemma y m); reflexivity.\nQed.\n\n(***********************)\nLemma tech_mult_neg_posZ :\n forall n m : nat, multZ (neg n) (pos m) = neg (n * m + (n + m)).\n\nintros; elim n.\n(* O *)\nsimpl in |- *; reflexivity.\n(* S y *)\nintros y H; rewrite (tech_mult_negZ y (pos m)); unfold oppZ in |- *;\n rewrite H.\nrewrite (tech_add_neg_negZ (y * m + (y + m)) m).\nelim (technical_lemma y m); reflexivity.\nQed.\n\n(**************************)\nTheorem multZ_associativity : associativity Z multZ.\n\nunfold associativity in |- *; intros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nunfold multZ in |- *; reflexivity.\n(* pos (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_posZ y0).\nrewrite H; elim (mult_oppZ_l y z).\nelim (mult_add_distributivity (multZ (pos y0) y) y z); intros. elim H0.\nreflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (mult_oppZ_l y z).\n(* neg (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_negZ y0).\nrewrite H; elim (mult_oppZ_l y z).\nelim (mult_add_distributivity (multZ (neg y0) y) (oppZ y) z); intros. elim H0.\nreflexivity.\nQed.\n\n(*************)\nTheorem Z_ring : is_ring Z IdZ addZ multZ OZ oppZ.\n\nunfold is_ring in |- *.\nsplit. exact addZ_commutativity.\nsplit. exact Z_group.\nsplit. unfold intern in |- *. intros. exact I.\nsplit. exact multZ_associativity. exact mult_add_distributivity.\nQed.\n\n(*********************************)\n",
                "context_tokens": 728,
                "proof_start_offset": 14731,
                "proof_end_offset": 14951,
                "proof": "Theorem Z_unitary_commutative_ring : is_unitary_commutative_ring Z IdZ addZ multZ OZ IZ oppZ.\nProof.\nunfold is_unitary_commutative_ring in |- *.\nsplit.\nexact Z_ring.\nsplit.\nexact multZ_commutativity.\nexact multZ_neutral.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem Z_unitary_commutative_ring : is_unitary_commutative_ring Z IdZ addZ multZ OZ IZ oppZ.\nunfold is_ring in |- *.\nsplit. exact Z_unitary_commutative_ring.\nsplit. exact Z_unitary_commutative_ring.\nsplit. exact Z_unitary_commutative_ring.\nsplit. exact Z_unitary_commutative_ring.\nsplit. exact Z_unitary_commutative_ring.\nsplit. exact Z_unitary_commutative_ring.\nsplit. exact Z_unitary_commutative_ring.\nsplit. exact Z_unitary_ring.\nsplit. exact Z_unitary_ring.\nsplit. exact Z_unitary_ring.\nexact Z_unitary_ring.\nsplit. exact Z_unitary_ring.\nexact Z_unitary_ring.\nsplit. exact Z_unitary_ring.\nexact Z_unitary_ring.\nsplit. exact Z_unitary_ring.\nexact Z_unitary_ring.\nsplit. exact Z_unitary_ring.\nexact Z_unitary_ring.\nexact Z_unitary_ring.\nsplit. exact Z_unitary_ring.\nexact Z_unitary_ring.\nexact Z_unitaryQed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 528, characters 13-39:\nError: The reference Z_unitary_commutative_ring was not found in the current\nenvironment.\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": " unfold oppZ in |- *.\nrewrite (tech_add_pos_posZ (y * m + (y + m)) m).\nelim (technical_lemma y m); reflexivity.\nQed.\n\n(***********************)\nLemma tech_mult_pos_negZ :\n forall n m : nat, multZ (pos n) (neg m) = neg (n * m + (n + m)).\n\nintros; elim n.\n(* O *)\nsimpl in |- *; reflexivity.\n(* S y *)\nintros y H; rewrite (tech_mult_posZ y (neg m)); rewrite H.\nrewrite (tech_add_neg_negZ (y * m + (y + m)) m).\nelim (technical_lemma y m); reflexivity.\nQed.\n\n(***********************)\nLemma tech_mult_neg_posZ :\n forall n m : nat, multZ (neg n) (pos m) = neg (n * m + (n + m)).\n\nintros; elim n.\n(* O *)\nsimpl in |- *; reflexivity.\n(* S y *)\nintros y H; rewrite (tech_mult_negZ y (pos m)); unfold oppZ in |- *;\n rewrite H.\nrewrite (tech_add_neg_negZ (y * m + (y + m)) m).\nelim (technical_lemma y m); reflexivity.\nQed.\n\n(**************************)\nTheorem multZ_associativity : associativity Z multZ.\n\nunfold associativity in |- *; intros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nunfold multZ in |- *; reflexivity.\n(* pos (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_posZ y0).\nrewrite H; elim (mult_oppZ_l y z).\nelim (mult_add_distributivity (multZ (pos y0) y) y z); intros. elim H0.\nreflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (mult_oppZ_l y z).\n(* neg (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_negZ y0).\nrewrite H; elim (mult_oppZ_l y z).\nelim (mult_add_distributivity (multZ (neg y0) y) (oppZ y) z); intros. elim H0.\nreflexivity.\nQed.\n\n(*************)\nTheorem Z_ring : is_ring Z IdZ addZ multZ OZ oppZ.\n\nunfold is_ring in |- *.\nsplit. exact addZ_commutativity.\nsplit. exact Z_group.\nsplit. unfold intern in |- *. intros. exact I.\nsplit. exact multZ_associativity. exact mult_add_distributivity.\nQed.\n\n(*********************************)\nTheorem Z_unitary_commutative_ring :\n is_unitary_commutative_ring Z IdZ addZ multZ OZ IZ oppZ.\n\nunfold is_unitary_commutative_ring in |- *.\nsplit. exact Z_ring.\nsplit. exact multZ_commutativity. exact multZ_neutral.\nQed.\n\n(* Z is an integral domain *)\n(********************)\n",
                "context_tokens": 723,
                "proof_start_offset": 15006,
                "proof_end_offset": 15394,
                "proof": "Lemma tech_integ_posZ : forall (n : nat) (x : Z), multZ (pos n) x = OZ -> x = OZ.\nProof.\nintros n x; elim x.\nreflexivity.\nintros n0; rewrite (tech_mult_pos_posZ n n0); intros.\nabsurd (pos (n * n0 + (n + n0)) = OZ).\ndiscriminate.\nexact H.\nintros n0; rewrite (tech_mult_pos_negZ n n0); intros.\nabsurd (neg (n * n0 + (n + n0)) = OZ).\ndiscriminate.\nexact H.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_integ_posZ : forall (n : nat) (x : Z), multZ (pos n) x = OZ -> x = OZ.\nintros n x; elim x; simpl in |- *; auto with arith.\nintros n0 H; rewrite (tech_oppZ x0).\nrewrite H; rewrite (tech_oppZ x0).\nrewrite H; rewrite (tech_oppZ x0).\nrewrite H; rewrite (tech_oppZ x0).\nrewrite H; rewrite (tech_oppZ x0).\nrewrite H; rewrite (tech_oppZ x0).\nrewrite H; rewrite (tech_oppZ x0).\nrewrite H; rewrite (tech_oppZ x0).\nrewrite H; rewrite (tech_oppZ x0).\nrewrite H; rewrite (tech_oppZ x0).\nrewrite H; rewrite (tech_oppZ x0).\nrewrite H; rewrite (tech_oppZ x0).\nrewrite H; rewrite (tech_oppZ x0).\nrewrite H; rewrite (tech_oppZ x0).\nrewrite H; rewrite (tech_oppZ x0).\nrewrite H; rewrite (tech_oppZ x0).\nrewrite H; rewrite (tech_oppZ x0).\nrewrite H; rewrite (tech_oppZ x0).\nrewrite H;Qed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 538, characters 22-31:\nError: The reference tech_oppZ was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "_lemma y m); reflexivity.\nQed.\n\n(***********************)\nLemma tech_mult_neg_posZ :\n forall n m : nat, multZ (neg n) (pos m) = neg (n * m + (n + m)).\n\nintros; elim n.\n(* O *)\nsimpl in |- *; reflexivity.\n(* S y *)\nintros y H; rewrite (tech_mult_negZ y (pos m)); unfold oppZ in |- *;\n rewrite H.\nrewrite (tech_add_neg_negZ (y * m + (y + m)) m).\nelim (technical_lemma y m); reflexivity.\nQed.\n\n(**************************)\nTheorem multZ_associativity : associativity Z multZ.\n\nunfold associativity in |- *; intros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nunfold multZ in |- *; reflexivity.\n(* pos (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_posZ y0).\nrewrite H; elim (mult_oppZ_l y z).\nelim (mult_add_distributivity (multZ (pos y0) y) y z); intros. elim H0.\nreflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (mult_oppZ_l y z).\n(* neg (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_negZ y0).\nrewrite H; elim (mult_oppZ_l y z).\nelim (mult_add_distributivity (multZ (neg y0) y) (oppZ y) z); intros. elim H0.\nreflexivity.\nQed.\n\n(*************)\nTheorem Z_ring : is_ring Z IdZ addZ multZ OZ oppZ.\n\nunfold is_ring in |- *.\nsplit. exact addZ_commutativity.\nsplit. exact Z_group.\nsplit. unfold intern in |- *. intros. exact I.\nsplit. exact multZ_associativity. exact mult_add_distributivity.\nQed.\n\n(*********************************)\nTheorem Z_unitary_commutative_ring :\n is_unitary_commutative_ring Z IdZ addZ multZ OZ IZ oppZ.\n\nunfold is_unitary_commutative_ring in |- *.\nsplit. exact Z_ring.\nsplit. exact multZ_commutativity. exact multZ_neutral.\nQed.\n\n(* Z is an integral domain *)\n(********************)\nLemma tech_integ_posZ :\n forall (n : nat) (x : Z), multZ (pos n) x = OZ -> x = OZ.\n\nintros n x; elim x.\n(* OZ *)\nreflexivity.\n(* pos n0 *)\nintros n0; rewrite (tech_mult_pos_posZ n n0); intros.\nabsurd (pos (n * n0 + (n + n0)) = OZ). discriminate. exact H.\n(* neg n0 *)\nintros n0; rewrite (tech_mult_pos_negZ n n0); intros.\nabsurd (neg (n * n0 + (n + n0)) = OZ). discriminate. exact H.\nQed.\n\n(********************)\n",
                "context_tokens": 723,
                "proof_start_offset": 15419,
                "proof_end_offset": 15807,
                "proof": "Lemma tech_integ_negZ : forall (n : nat) (x : Z), multZ (neg n) x = OZ -> x = OZ.\nProof.\nintros n x; elim x.\nreflexivity.\nintros n0; rewrite (tech_mult_neg_posZ n n0); intros.\nabsurd (neg (n * n0 + (n + n0)) = OZ).\ndiscriminate.\nexact H.\nintros n0; rewrite (tech_mult_neg_negZ n n0); intros.\nabsurd (pos (n * n0 + (n + n0)) = OZ).\ndiscriminate.\nexact H.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_integ_negZ : forall (n : nat) (x : Z), multZ (neg n) x = OZ -> x = OZ.\nintros n x; elim x.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 556, characters 15-26:\nError:\nIn environment\nn : nat\nx : Z\nn0 : nat\nH : multneg (pos n0) n = OZ\nUnable to unify \"OZ\" with \"pos n0\".\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "Qed.\n\n(**************************)\nTheorem multZ_associativity : associativity Z multZ.\n\nunfold associativity in |- *; intros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nunfold multZ in |- *; reflexivity.\n(* pos (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_posZ y0).\nrewrite H; elim (mult_oppZ_l y z).\nelim (mult_add_distributivity (multZ (pos y0) y) y z); intros. elim H0.\nreflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (mult_oppZ_l y z).\n(* neg (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_negZ y0).\nrewrite H; elim (mult_oppZ_l y z).\nelim (mult_add_distributivity (multZ (neg y0) y) (oppZ y) z); intros. elim H0.\nreflexivity.\nQed.\n\n(*************)\nTheorem Z_ring : is_ring Z IdZ addZ multZ OZ oppZ.\n\nunfold is_ring in |- *.\nsplit. exact addZ_commutativity.\nsplit. exact Z_group.\nsplit. unfold intern in |- *. intros. exact I.\nsplit. exact multZ_associativity. exact mult_add_distributivity.\nQed.\n\n(*********************************)\nTheorem Z_unitary_commutative_ring :\n is_unitary_commutative_ring Z IdZ addZ multZ OZ IZ oppZ.\n\nunfold is_unitary_commutative_ring in |- *.\nsplit. exact Z_ring.\nsplit. exact multZ_commutativity. exact multZ_neutral.\nQed.\n\n(* Z is an integral domain *)\n(********************)\nLemma tech_integ_posZ :\n forall (n : nat) (x : Z), multZ (pos n) x = OZ -> x = OZ.\n\nintros n x; elim x.\n(* OZ *)\nreflexivity.\n(* pos n0 *)\nintros n0; rewrite (tech_mult_pos_posZ n n0); intros.\nabsurd (pos (n * n0 + (n + n0)) = OZ). discriminate. exact H.\n(* neg n0 *)\nintros n0; rewrite (tech_mult_pos_negZ n n0); intros.\nabsurd (neg (n * n0 + (n + n0)) = OZ). discriminate. exact H.\nQed.\n\n(********************)\nLemma tech_integ_negZ :\n forall (n : nat) (x : Z), multZ (neg n) x = OZ -> x = OZ.\n\nintros n x; elim x.\n(* OZ *)\nreflexivity.\n(* pos n0 *)\nintros n0; rewrite (tech_mult_neg_posZ n n0); intros.\nabsurd (neg (n * n0 + (n + n0)) = OZ). discriminate. exact H.\n(* neg n0 *)\nintros n0; rewrite (tech_mult_neg_negZ n n0); intros.\nabsurd (pos (n * n0 + (n + n0)) = OZ). discriminate. exact H.\nQed.\n\n(*****************)\n",
                "context_tokens": 743,
                "proof_start_offset": 15829,
                "proof_end_offset": 16089,
                "proof": "Theorem integrityZ : integrity Z multZ OZ.\nProof.\nunfold integrity in |- *; intros a b; elim a.\nintros; left; reflexivity.\nintros; right; apply (tech_integ_posZ n b); exact H.\nintros; right; apply (tech_integ_negZ n b); exact H.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem integrityZ : integrity Z multZ OZ.\nunfold Zes, oppZ in |- *.\nintros n x; elim x.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos n0 *)\nsimpl in |- *; reflexivity.\n(* pos nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 567, characters 7-10:\nError: The reference Zes was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "0) y) y z); intros. elim H0.\nreflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (mult_oppZ_l y z).\n(* neg (S y0) *)\nintros y0 H; do 2 rewrite (tech_mult_negZ y0).\nrewrite H; elim (mult_oppZ_l y z).\nelim (mult_add_distributivity (multZ (neg y0) y) (oppZ y) z); intros. elim H0.\nreflexivity.\nQed.\n\n(*************)\nTheorem Z_ring : is_ring Z IdZ addZ multZ OZ oppZ.\n\nunfold is_ring in |- *.\nsplit. exact addZ_commutativity.\nsplit. exact Z_group.\nsplit. unfold intern in |- *. intros. exact I.\nsplit. exact multZ_associativity. exact mult_add_distributivity.\nQed.\n\n(*********************************)\nTheorem Z_unitary_commutative_ring :\n is_unitary_commutative_ring Z IdZ addZ multZ OZ IZ oppZ.\n\nunfold is_unitary_commutative_ring in |- *.\nsplit. exact Z_ring.\nsplit. exact multZ_commutativity. exact multZ_neutral.\nQed.\n\n(* Z is an integral domain *)\n(********************)\nLemma tech_integ_posZ :\n forall (n : nat) (x : Z), multZ (pos n) x = OZ -> x = OZ.\n\nintros n x; elim x.\n(* OZ *)\nreflexivity.\n(* pos n0 *)\nintros n0; rewrite (tech_mult_pos_posZ n n0); intros.\nabsurd (pos (n * n0 + (n + n0)) = OZ). discriminate. exact H.\n(* neg n0 *)\nintros n0; rewrite (tech_mult_pos_negZ n n0); intros.\nabsurd (neg (n * n0 + (n + n0)) = OZ). discriminate. exact H.\nQed.\n\n(********************)\nLemma tech_integ_negZ :\n forall (n : nat) (x : Z), multZ (neg n) x = OZ -> x = OZ.\n\nintros n x; elim x.\n(* OZ *)\nreflexivity.\n(* pos n0 *)\nintros n0; rewrite (tech_mult_neg_posZ n n0); intros.\nabsurd (neg (n * n0 + (n + n0)) = OZ). discriminate. exact H.\n(* neg n0 *)\nintros n0; rewrite (tech_mult_neg_negZ n n0); intros.\nabsurd (pos (n * n0 + (n + n0)) = OZ). discriminate. exact H.\nQed.\n\n(*****************)\nTheorem integrityZ : integrity Z multZ OZ.\n\nunfold integrity in |- *; intros a b; elim a.\n(* OZ *)\nintros; left; reflexivity.\n(* pos n *)\nintros; right; apply (tech_integ_posZ n b); exact H.\n(* neg n *)\nintros; right; apply (tech_integ_negZ n b); exact H.\nQed.\n\n(************************)\n",
                "context_tokens": 722,
                "proof_start_offset": 16118,
                "proof_end_offset": 16787,
                "proof": "Lemma tech_mult_pos_succZ : forall n m : nat, posOZ (S n * S m) = multZ (pos n) (pos m).\nProof.\nintros; elim m.\nelim multZ_neutral; intros; elim (H0 (pos n) I); intros.\nreplace (pos 0) with IZ; auto.\nrewrite H1.\nelim (mult_commut 1 (S n)).\nrewrite (mult_neutr (S n)).\nunfold posOZ in |- *; reflexivity.\nintros y H; elim (multZ_commutativity (pos (S y)) (pos n)).\nrewrite (tech_mult_posZ y (pos n)); elim (multZ_commutativity (pos n) (pos y)).\nelim H; elim (mult_n_Sm (S n) (S y)); elim (plus_n_Sm (S n * S y) n).\nelim (mult_n_Sm (S n) y); elim (plus_n_Sm (S n * y) n).\nunfold posOZ in |- *; rewrite (tech_add_pos_posZ (S n * y + n) n).\nreflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_mult_pos_succZ : forall n m : nat, posOZ (S n * S m) = multZ (pos n) (pos m).\nintros n m; elim n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nintros n0; rewrite (tech_mult_neg_posZ n n0); intros.\nabsurd (neg (n * n0 + (n0 + m0)) = pos n0).\n discriminate.\nrewrite (tech_mult_neg_pos_posZ n n0); intros.\nabsurd (neg (n * n0 + (n0 + m0)) = pos n0).\n discriminate.\nrewrite (tech_mult_neg_pos_posZ n n0); intros.\nabsurd (neg (n * n0 + (n0 + m0)) = pos n0).\n discriminate.\nrewrite (tech_mult_neg_pos_posZ n n0); intros.\nabsurd (neg (n * n0 + (n0 + m0)) = pos n0).\n discriminate.\nrewrite (tech_mult_neg_pos_posZ n n0); intros.\nabsurd (neg (n * n0 + (n0 + m0)) = pos n0).\n discriminate.\nrewrite (tech_mult_neg_pos_posZQed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 581, characters 0-11:\nError: In environment\nn, m : nat\nUnable to unify \"multZ (pos 0) (pos m)\" with \"posOZ (1 * S m)\".\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": " exact multZ_commutativity. exact multZ_neutral.\nQed.\n\n(* Z is an integral domain *)\n(********************)\nLemma tech_integ_posZ :\n forall (n : nat) (x : Z), multZ (pos n) x = OZ -> x = OZ.\n\nintros n x; elim x.\n(* OZ *)\nreflexivity.\n(* pos n0 *)\nintros n0; rewrite (tech_mult_pos_posZ n n0); intros.\nabsurd (pos (n * n0 + (n + n0)) = OZ). discriminate. exact H.\n(* neg n0 *)\nintros n0; rewrite (tech_mult_pos_negZ n n0); intros.\nabsurd (neg (n * n0 + (n + n0)) = OZ). discriminate. exact H.\nQed.\n\n(********************)\nLemma tech_integ_negZ :\n forall (n : nat) (x : Z), multZ (neg n) x = OZ -> x = OZ.\n\nintros n x; elim x.\n(* OZ *)\nreflexivity.\n(* pos n0 *)\nintros n0; rewrite (tech_mult_neg_posZ n n0); intros.\nabsurd (neg (n * n0 + (n + n0)) = OZ). discriminate. exact H.\n(* neg n0 *)\nintros n0; rewrite (tech_mult_neg_negZ n n0); intros.\nabsurd (pos (n * n0 + (n + n0)) = OZ). discriminate. exact H.\nQed.\n\n(*****************)\nTheorem integrityZ : integrity Z multZ OZ.\n\nunfold integrity in |- *; intros a b; elim a.\n(* OZ *)\nintros; left; reflexivity.\n(* pos n *)\nintros; right; apply (tech_integ_posZ n b); exact H.\n(* neg n *)\nintros; right; apply (tech_integ_negZ n b); exact H.\nQed.\n\n(************************)\nLemma tech_mult_pos_succZ :\n forall n m : nat, posOZ (S n * S m) = multZ (pos n) (pos m).\n\nintros; elim m.\n(* O *)\nelim multZ_neutral; intros; elim (H0 (pos n) I); intros. \nreplace (pos 0) with IZ; auto.\nrewrite H1.\nelim (mult_commut 1 (S n)). rewrite (mult_neutr (S n)). \nunfold posOZ in |- *; reflexivity.\n(* S y *)\nintros y H; elim (multZ_commutativity (pos (S y)) (pos n)).\nrewrite (tech_mult_posZ y (pos n));\n elim (multZ_commutativity (pos n) (pos y)).\nelim H; elim (mult_n_Sm (S n) (S y)); elim (plus_n_Sm (S n * S y) n).\nelim (mult_n_Sm (S n) y); elim (plus_n_Sm (S n * y) n).\nunfold posOZ in |- *; rewrite (tech_add_pos_posZ (S n * y + n) n).\nreflexivity.\nQed.\n\n(************************)\n",
                "context_tokens": 721,
                "proof_start_offset": 16816,
                "proof_end_offset": 17035,
                "proof": "Lemma tech_mult_pos_succZ2 : forall n m : nat, multZ (pos n) (pos m) = pos (S n * m + n).\nProof.\nintros; elim (tech_mult_pos_succZ n m).\nsimpl in |- *; elim (mult_n_Sm n m); elim (plus_assoc m (n * m) n); reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_mult_pos_succZ2 : forall n m : nat, multZ (pos n) (pos m) = pos (S n * m + n).\nintros; elim (mult_comm (pos n) (pos m)).\nrewrite (mult_comm (pos n) (pos m)).\nrewrite (mult_comm (pos n) (pos m)).\nrewrite (mult_comm (pos n) (neg m)).\nrewrite (mult_comm (pos n) (neg m)).\nrewrite (mult_comm (neg n) (neg m)).\nrewrite (mult_comm (neg n) (neg m)).\nrewrite (mult_comm (neg n) (neg m)).\nrewrite (mult_comm (neg n) (neg m)).\nrewrite (mult_comm (neg n) (neg m)).\nrewrite (mult_comm (neg n) (neg m)).\nrewrite (mult_comm (neg n) (neg m)).\nrewrite (mult_comm (neg n) (neg m)).\nrewrite (mult_comm (neg n) (neg m)).\nrewrite (mult_comm (neg n) (neg m)).\nrewrite (mult_comm (neg n) (neg m)).\nrewrite (mult_comm (neg n) (neg m)).\nrewrite (mult_comm (neg n) (neg m)).\nrewriteQed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 600, characters 25-30:\nError:\nIn environment\nn, m : nat\nThe term \"pos n\" has type \"Z\" while it is expected to have type \"nat\".\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": ".\nabsurd (pos (n * n0 + (n + n0)) = OZ). discriminate. exact H.\n(* neg n0 *)\nintros n0; rewrite (tech_mult_pos_negZ n n0); intros.\nabsurd (neg (n * n0 + (n + n0)) = OZ). discriminate. exact H.\nQed.\n\n(********************)\nLemma tech_integ_negZ :\n forall (n : nat) (x : Z), multZ (neg n) x = OZ -> x = OZ.\n\nintros n x; elim x.\n(* OZ *)\nreflexivity.\n(* pos n0 *)\nintros n0; rewrite (tech_mult_neg_posZ n n0); intros.\nabsurd (neg (n * n0 + (n + n0)) = OZ). discriminate. exact H.\n(* neg n0 *)\nintros n0; rewrite (tech_mult_neg_negZ n n0); intros.\nabsurd (pos (n * n0 + (n + n0)) = OZ). discriminate. exact H.\nQed.\n\n(*****************)\nTheorem integrityZ : integrity Z multZ OZ.\n\nunfold integrity in |- *; intros a b; elim a.\n(* OZ *)\nintros; left; reflexivity.\n(* pos n *)\nintros; right; apply (tech_integ_posZ n b); exact H.\n(* neg n *)\nintros; right; apply (tech_integ_negZ n b); exact H.\nQed.\n\n(************************)\nLemma tech_mult_pos_succZ :\n forall n m : nat, posOZ (S n * S m) = multZ (pos n) (pos m).\n\nintros; elim m.\n(* O *)\nelim multZ_neutral; intros; elim (H0 (pos n) I); intros. \nreplace (pos 0) with IZ; auto.\nrewrite H1.\nelim (mult_commut 1 (S n)). rewrite (mult_neutr (S n)). \nunfold posOZ in |- *; reflexivity.\n(* S y *)\nintros y H; elim (multZ_commutativity (pos (S y)) (pos n)).\nrewrite (tech_mult_posZ y (pos n));\n elim (multZ_commutativity (pos n) (pos y)).\nelim H; elim (mult_n_Sm (S n) (S y)); elim (plus_n_Sm (S n * S y) n).\nelim (mult_n_Sm (S n) y); elim (plus_n_Sm (S n * y) n).\nunfold posOZ in |- *; rewrite (tech_add_pos_posZ (S n * y + n) n).\nreflexivity.\nQed.\n\n(************************)\nLemma tech_mult_pos_succZ2 :\n forall n m : nat, multZ (pos n) (pos m) = pos (S n * m + n).\n\nintros; elim (tech_mult_pos_succZ n m).\nsimpl in |- *; elim (mult_n_Sm n m); elim (plus_assoc m (n * m) n);\n reflexivity. \nQed.\n\n(**************)\n",
                "context_tokens": 709,
                "proof_start_offset": 17054,
                "proof_end_offset": 17961,
                "proof": "Lemma tech_div1 : forall n0 n q r : nat, S n0 = q * S n + r -> pos n0 = addZ (multZ (pos n) (posOZ q)) (posOZ r).\nProof.\nintros n0 n q r; elim q.\nelim r.\nintros; absurd (S n0 = 0).\ndiscriminate.\nexact H.\nintros y H; unfold posOZ in |- *; rewrite (mult_OZ (pos n)).\nsimpl in |- *; intros; elim (eq_add_S n0 y H0); reflexivity.\nelim r.\nintros y H; unfold posOZ in |- *; elim (plus_n_O (S y * S n)).\nrewrite (add_OZ (multZ (pos n) (pos y))); elim (tech_mult_pos_succZ n y).\nelim (mult_commut (S n) (S y)); intros; elim H0; unfold posOZ in |- *; reflexivity.\nintros y H y0 H0; unfold posOZ in |- *; elim (plus_n_Sm (S y0 * S n) y).\nintros; rewrite (eq_add_S n0 (S y0 * S n + y) H1).\nrewrite (tech_mult_pos_succZ2 n y0).\nrewrite (tech_add_pos_posZ (S n * y0 + n) y).\nelim (plus_comm n (S n * y0)); elim (mult_commut y0 (S n)); simpl in |- *.\nreflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_div1 : forall n0 n q r : nat, S n0 = q * S n + r -> pos n0 = addZ (multZ (pos n) (posOZ q)) (posOZ r).\nProof.\nintros n0 q r; elim r; simpl in |- *; auto with arith.\nintros n0 q r; elim r; simpl in |- *; auto with arith.\nintros n1 q r; elim r; simpl in |- *; auto with arith.\nintros n1 q r; elim r; simpl in |- *; auto with arith.\nintros n1 q r; elim r; simpl in |- *; auto with arith.\nintros n1 q r; elim r; simpl in |- *; auto with arith.\nintros n1 q r; elim r; simpl in |- *; auto with arith.\nintros n1 q r; elim r; simpl in |- *; auto with arith.\nintros n2 q r; elim r; simpl in |- *; auto with arith.\nintros n2 q r; elim r; simpl in |- *; auto with arith.\nintros n3 q r; elim r; simpl in |- *; auto with arith.\nintros n3 q r; elim r; simpl in |- *; auto with arith.\nintros n3 q r; elim r; simpl in |- *; auto with arith.\nintros n3 q r; elim r; simpl in |- *; auto with arith.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 611, characters 7-9:\nError: n0 is already used.\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": ") = multZ (pos n) (pos m).\n\nintros; elim m.\n(* O *)\nelim multZ_neutral; intros; elim (H0 (pos n) I); intros. \nreplace (pos 0) with IZ; auto.\nrewrite H1.\nelim (mult_commut 1 (S n)). rewrite (mult_neutr (S n)). \nunfold posOZ in |- *; reflexivity.\n(* S y *)\nintros y H; elim (multZ_commutativity (pos (S y)) (pos n)).\nrewrite (tech_mult_posZ y (pos n));\n elim (multZ_commutativity (pos n) (pos y)).\nelim H; elim (mult_n_Sm (S n) (S y)); elim (plus_n_Sm (S n * S y) n).\nelim (mult_n_Sm (S n) y); elim (plus_n_Sm (S n * y) n).\nunfold posOZ in |- *; rewrite (tech_add_pos_posZ (S n * y + n) n).\nreflexivity.\nQed.\n\n(************************)\nLemma tech_mult_pos_succZ2 :\n forall n m : nat, multZ (pos n) (pos m) = pos (S n * m + n).\n\nintros; elim (tech_mult_pos_succZ n m).\nsimpl in |- *; elim (mult_n_Sm n m); elim (plus_assoc m (n * m) n);\n reflexivity. \nQed.\n\n(**************)\nLemma tech_div1 :\n forall n0 n q r : nat,\n S n0 = q * S n + r -> pos n0 = addZ (multZ (pos n) (posOZ q)) (posOZ r).\n\nintros n0 n q r; elim q.\n(* O O *)\nelim r.\nintros; absurd (S n0 = 0). discriminate. exact H.\n(* O (S y) *)\nintros y H; unfold posOZ in |- *; rewrite (mult_OZ (pos n)).\nsimpl in |- *; intros; elim (eq_add_S n0 y H0); reflexivity.\n(* (S n) O *)\nelim r.\nintros y H; unfold posOZ in |- *; elim (plus_n_O (S y * S n)).\nrewrite (add_OZ (multZ (pos n) (pos y))); elim (tech_mult_pos_succZ n y).\nelim (mult_commut (S n) (S y)); intros; elim H0; unfold posOZ in |- *;\n reflexivity.\n(* (S n) (S y) *)\nintros y H y0 H0; unfold posOZ in |- *; elim (plus_n_Sm (S y0 * S n) y).\nintros; rewrite (eq_add_S n0 (S y0 * S n + y) H1).\nrewrite (tech_mult_pos_succZ2 n y0).\nrewrite (tech_add_pos_posZ (S n * y0 + n) y).\nelim (plus_comm n (S n * y0)); elim (mult_commut y0 (S n)); simpl in |- *.\nreflexivity.\nQed.\n\n(**************)\n",
                "context_tokens": 719,
                "proof_start_offset": 17980,
                "proof_end_offset": 18420,
                "proof": "Lemma tech_div2 : forall n0 n q : nat, S n0 = q * S n -> neg n0 = multZ (pos n) (negOZ q).\nProof.\nintros n0 n q; elim q.\nsimpl in |- *; intros; absurd (S n0 = 0).\ndiscriminate.\nexact H.\nintros y H; unfold negOZ in |- *.\nrewrite (tech_mult_pos_negZ n y); intros.\nsimpl in H0; rewrite (eq_add_S _ _ H0).\nelim (mult_commut (S n) y); simpl in |- *; elim (plus_comm (n + y) (n * y)).\nelim (plus_assoc n y (n * y)); reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_div2 : forall n0 n q : nat, S n0 = q * S n -> neg n0 = multZ (pos n) (negOZ q).\nintros n0 q; elim q.\n(*O *)\nelim (mult_comm (pos n0) (pos q)); intros; elim H0; unfold neg at 1 in |- *;\n reflexivity.\n(*O *)\nelim (mult_comm (pos n0) (neg q)); intros; elim H0; unfold neg at 1 in |- *;\n reflexivity.\n(*O *)\nelim (mult_comm (pos n0) (neg q)); intros; elim H0; unfold neg at 1 in |- *;\n reflexivity.\n(*O *)\nelim (mult_comm (neg n0) (neg q)); intros; elim H0; unfold neg at 1 in |- *;\n reflexivity.\n(*O *)\nelim (mult_comm (neg n0) (neg q)); intros; elim H0; unfold neg at 1 in |- *;\n reflexivity.\n(*O *)\nelim (mult_comm (neg n0) (neg q)); intros; elim H0; unfold neg at 1 in |- *;\n reflexivity.\n(*O *)elim (mult_comm (neg n0) (neg q)); intros; elim H0; unfold neg at 1 in |- *;\n reflexivity.\n(*OQed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 638, characters 0-90:\nError: Cannot coerce neg to an evaluable reference.\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": " (mult_n_Sm (S n) y); elim (plus_n_Sm (S n * y) n).\nunfold posOZ in |- *; rewrite (tech_add_pos_posZ (S n * y + n) n).\nreflexivity.\nQed.\n\n(************************)\nLemma tech_mult_pos_succZ2 :\n forall n m : nat, multZ (pos n) (pos m) = pos (S n * m + n).\n\nintros; elim (tech_mult_pos_succZ n m).\nsimpl in |- *; elim (mult_n_Sm n m); elim (plus_assoc m (n * m) n);\n reflexivity. \nQed.\n\n(**************)\nLemma tech_div1 :\n forall n0 n q r : nat,\n S n0 = q * S n + r -> pos n0 = addZ (multZ (pos n) (posOZ q)) (posOZ r).\n\nintros n0 n q r; elim q.\n(* O O *)\nelim r.\nintros; absurd (S n0 = 0). discriminate. exact H.\n(* O (S y) *)\nintros y H; unfold posOZ in |- *; rewrite (mult_OZ (pos n)).\nsimpl in |- *; intros; elim (eq_add_S n0 y H0); reflexivity.\n(* (S n) O *)\nelim r.\nintros y H; unfold posOZ in |- *; elim (plus_n_O (S y * S n)).\nrewrite (add_OZ (multZ (pos n) (pos y))); elim (tech_mult_pos_succZ n y).\nelim (mult_commut (S n) (S y)); intros; elim H0; unfold posOZ in |- *;\n reflexivity.\n(* (S n) (S y) *)\nintros y H y0 H0; unfold posOZ in |- *; elim (plus_n_Sm (S y0 * S n) y).\nintros; rewrite (eq_add_S n0 (S y0 * S n + y) H1).\nrewrite (tech_mult_pos_succZ2 n y0).\nrewrite (tech_add_pos_posZ (S n * y0 + n) y).\nelim (plus_comm n (S n * y0)); elim (mult_commut y0 (S n)); simpl in |- *.\nreflexivity.\nQed.\n\n(**************)\nLemma tech_div2 :\n forall n0 n q : nat, S n0 = q * S n -> neg n0 = multZ (pos n) (negOZ q).\n\nintros n0 n q; elim q.\n(* O *)\nsimpl in |- *; intros; absurd (S n0 = 0). discriminate. exact H.\n(* S y *)\nintros y H; unfold negOZ in |- *. rewrite (tech_mult_pos_negZ n y); intros.\nsimpl in H0; rewrite (eq_add_S _ _ H0).\nelim (mult_commut (S n) y); simpl in |- *; elim (plus_comm (n + y) (n * y)).\nelim (plus_assoc n y (n * y)); reflexivity.\nQed.\n\n(***************)\n",
                "context_tokens": 711,
                "proof_start_offset": 18440,
                "proof_end_offset": 19318,
                "proof": "Lemma tech_div31 : forall n q : nat, addZ (oppZ (multZ (pos n) (pos q))) (pos n) = oppZ (multZ (pos n) (posOZ q)).\nProof.\nintros; elim q.\nunfold posOZ in |- *; rewrite (mult_OZ (pos n)).\ncut (IZ = pos 0); intros.\nelim H.\nrewrite (mult_IZ (pos n)).\nelim (addZ_opposite (pos n) I); intros; elim H1; intros; elim H3; intros.\nrewrite H5; reflexivity.\nreflexivity.\nintros y H; unfold posOZ in |- *; elim (multZ_commutativity (pos (S y)) (pos n)).\nrewrite (tech_mult_posZ y (pos n)).\nrewrite (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity (multZ (pos y) (pos n)) (pos n) I I).\nelim (addZ_associativity (oppZ (multZ (pos y) (pos n))) (oppZ (pos n)) (pos n)).\nelim (addZ_opposite (pos n) I); intros; elim H1; intros; elim H3; intros.\nrewrite H5; rewrite (add_OZ (oppZ (multZ (pos y) (pos n)))).\nelim (multZ_commutativity (pos y) (pos n)); reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_div31 : forall n q : nat, addZ (oppZ (multZ (pos n) (pos q))) (pos n) = oppZ (multZ (pos n) (posOZ q)).\nProof.\nintros n q; elim q.\n(*O *)\nsimpl in |- *; intros; absurd (0 = 0). discriminate.\n(*O *)\nsimpl in |- *; intros; absurd (0 = 0). discriminate.\n(*O *)\nsimpl in |- *; intros; absurd (0 = 0). discriminate.\n(*O *)\nsimpl in |- *; intros; absurd (0 = 0). discriminate.\n(*O *)\nsimpl in |- *; intros; absurd (0 = 0). discriminate.\n(*O *)\nsimpl in |- *; intros; absurd (0 = 0). discriminate.\n(*O *)\nsimpl in |- *; intros; absurd (0 = 0). discriminate.\n(*O *)\nsimpl in |- *; intros; absurd (0 = 0). discriminate.\n(*O *)\nsimpl in |- *; intros; absurd (0 = 0). discriminate.\n(*O *)\nsimpl in |- *; intros; absurd (0 = 0). discriminate.\n(*O *)\nsimpl in |- *; intros; absurd (0 = 0). discriminate.\n(*O *)\nsimpl in |- *; intros; absurd (0 = 0). discriminate.\n(*O *)\nsimpl in |- *; intros; absurd (0 = 0).Qed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 653, characters 39-51:\nError: Ltac call to \"discriminate\" failed.\n       No primitive equality found.\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": " (plus_n_O (S y * S n)).\nrewrite (add_OZ (multZ (pos n) (pos y))); elim (tech_mult_pos_succZ n y).\nelim (mult_commut (S n) (S y)); intros; elim H0; unfold posOZ in |- *;\n reflexivity.\n(* (S n) (S y) *)\nintros y H y0 H0; unfold posOZ in |- *; elim (plus_n_Sm (S y0 * S n) y).\nintros; rewrite (eq_add_S n0 (S y0 * S n + y) H1).\nrewrite (tech_mult_pos_succZ2 n y0).\nrewrite (tech_add_pos_posZ (S n * y0 + n) y).\nelim (plus_comm n (S n * y0)); elim (mult_commut y0 (S n)); simpl in |- *.\nreflexivity.\nQed.\n\n(**************)\nLemma tech_div2 :\n forall n0 n q : nat, S n0 = q * S n -> neg n0 = multZ (pos n) (negOZ q).\n\nintros n0 n q; elim q.\n(* O *)\nsimpl in |- *; intros; absurd (S n0 = 0). discriminate. exact H.\n(* S y *)\nintros y H; unfold negOZ in |- *. rewrite (tech_mult_pos_negZ n y); intros.\nsimpl in H0; rewrite (eq_add_S _ _ H0).\nelim (mult_commut (S n) y); simpl in |- *; elim (plus_comm (n + y) (n * y)).\nelim (plus_assoc n y (n * y)); reflexivity.\nQed.\n\n(***************)\nLemma tech_div31 :\n forall n q : nat,\n addZ (oppZ (multZ (pos n) (pos q))) (pos n) = oppZ (multZ (pos n) (posOZ q)).\n\nintros; elim q.\n(* O *)\nunfold posOZ in |- *; rewrite (mult_OZ (pos n)). \ncut (IZ = pos 0); intros. elim H. rewrite (mult_IZ (pos n)).\nelim (addZ_opposite (pos n) I); intros; elim H1; intros; elim H3; intros.\nrewrite H5; reflexivity. reflexivity.\n(* S y *)\nintros y H; unfold posOZ in |- *;\n elim (multZ_commutativity (pos (S y)) (pos n)).\nrewrite (tech_mult_posZ y (pos n)).\nrewrite\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity\n    (multZ (pos y) (pos n)) (pos n) I I).\nelim\n (addZ_associativity (oppZ (multZ (pos y) (pos n))) (oppZ (pos n)) (pos n)).\nelim (addZ_opposite (pos n) I); intros; elim H1; intros; elim H3; intros.\nrewrite H5; rewrite (add_OZ (oppZ (multZ (pos y) (pos n)))).\nelim (multZ_commutativity (pos y) (pos n)); reflexivity.\nQed.\n\n(***************)\n",
                "context_tokens": 719,
                "proof_start_offset": 19338,
                "proof_end_offset": 19708,
                "proof": "Lemma tech_div32 : forall n q r : nat, S n > r -> pos (n - r) = addZ (pos n) (oppZ (posOZ r)).\nProof.\nintros n q r; elim r.\nunfold posOZ in |- *; unfold oppZ in |- *; rewrite (add_OZ (pos n)); elim (minus_n_O n).\nreflexivity.\nintros y H; unfold posOZ in |- *; unfold oppZ in |- *; symmetry in |- *.\nexact (tech_add_pos_neg_posZ n y (gt_S_n y n H0)).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_div32 : forall n q r : nat, S n > r -> pos (n - r) = addZ (pos n) (oppZ (posOZ r)).\nProof.\nintros n q r; elim q.\n(*O *)\nsimpl in |- *; intros; absurd (0 < r); auto with arith.\n(*O *)\nsimpl in |- *; intros; absurd (0 < r); auto with arith.\n(*O *)\nsimpl in |- *; intros; absurd (0 < r); auto with arith.\n(*O *)\nsimpl in |- *; intros; absurd (0 < r); auto with arith.\n(*O *)\nsimpl in |- *; intros; absurd (0 < r); auto with arith.\n(*O *)\nsimpl in |- *; intros; absurd (0 < r); auto with arith.\n(*O *)\nsimpl in |- *; intros; absurd (0 < r); auto with arith.\n(*O *)\nsimpl in |- *; intros; absurd (0 < r); auto with arith.\n(*O *)\nsimpl in |- *; intros; absurd (0 < r); auto with arith.\n(*O *)\nsimpl in |- *; intros; absurd (0 < r); auto with arith.\n(*O *)\nsimpl in |- *; intros; absurd (0 < r); auto with arith.\n(*O *)\nsimpl in |- *; intros; absurd (Qed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 700, characters 34-35:\nError:\nSyntax error: ',' or ')' expected after [constr:operconstr level 200] (in [constr:operconstr]).\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "S n * y0 + n) y).\nelim (plus_comm n (S n * y0)); elim (mult_commut y0 (S n)); simpl in |- *.\nreflexivity.\nQed.\n\n(**************)\nLemma tech_div2 :\n forall n0 n q : nat, S n0 = q * S n -> neg n0 = multZ (pos n) (negOZ q).\n\nintros n0 n q; elim q.\n(* O *)\nsimpl in |- *; intros; absurd (S n0 = 0). discriminate. exact H.\n(* S y *)\nintros y H; unfold negOZ in |- *. rewrite (tech_mult_pos_negZ n y); intros.\nsimpl in H0; rewrite (eq_add_S _ _ H0).\nelim (mult_commut (S n) y); simpl in |- *; elim (plus_comm (n + y) (n * y)).\nelim (plus_assoc n y (n * y)); reflexivity.\nQed.\n\n(***************)\nLemma tech_div31 :\n forall n q : nat,\n addZ (oppZ (multZ (pos n) (pos q))) (pos n) = oppZ (multZ (pos n) (posOZ q)).\n\nintros; elim q.\n(* O *)\nunfold posOZ in |- *; rewrite (mult_OZ (pos n)). \ncut (IZ = pos 0); intros. elim H. rewrite (mult_IZ (pos n)).\nelim (addZ_opposite (pos n) I); intros; elim H1; intros; elim H3; intros.\nrewrite H5; reflexivity. reflexivity.\n(* S y *)\nintros y H; unfold posOZ in |- *;\n elim (multZ_commutativity (pos (S y)) (pos n)).\nrewrite (tech_mult_posZ y (pos n)).\nrewrite\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity\n    (multZ (pos y) (pos n)) (pos n) I I).\nelim\n (addZ_associativity (oppZ (multZ (pos y) (pos n))) (oppZ (pos n)) (pos n)).\nelim (addZ_opposite (pos n) I); intros; elim H1; intros; elim H3; intros.\nrewrite H5; rewrite (add_OZ (oppZ (multZ (pos y) (pos n)))).\nelim (multZ_commutativity (pos y) (pos n)); reflexivity.\nQed.\n\n(***************)\nLemma tech_div32 :\n forall n q r : nat, S n > r -> pos (n - r) = addZ (pos n) (oppZ (posOZ r)).\n\nintros n q r; elim r.\n(* O *)\nunfold posOZ in |- *; unfold oppZ in |- *; rewrite (add_OZ (pos n));\n elim (minus_n_O n).\nreflexivity.\n(* S y *)\nintros y H; unfold posOZ in |- *; unfold oppZ in |- *; symmetry  in |- *. \nexact (tech_add_pos_neg_posZ n y (gt_S_n y n H0)).\nQed.\n\n(**************)\n",
                "context_tokens": 703,
                "proof_start_offset": 19727,
                "proof_end_offset": 20249,
                "proof": "Lemma tech_div3 : forall n0 n q r : nat, S n0 = q * S n + r -> S n > r -> neg n0 = addZ (multZ (pos n) (neg q)) (pos (n - r)).\nProof.\nintros.\nelim (tech_opp_pos_negZ q); intros; elim H1.\nrewrite (mult_oppZ_r (pos n) (pos q)); rewrite (tech_div32 n q r H0).\nrewrite (addZ_associativity (oppZ (multZ (pos n) (pos q))) (pos n) (oppZ (posOZ r))) .\nrewrite (tech_div31 n q).\nelim (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity (multZ (pos n) (posOZ q)) (posOZ r) I I).\nelim (tech_div1 n0 n q r H); reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_div3 : forall n0 n q r : nat, S n0 = q * S n + r -> S n > r -> neg n0 = addZ (multZ (pos n) (neg q)) (pos (n - r)).\nProof.\nsimple induction n0; simpl in |- *; auto with arith.\nintros; absurd (0 < r); auto with arith.\nintros; absurd (0 < r); auto with arith.\nintros; absurd (0 < r); auto with arith.\nintros; absurd (0 < r); auto with arith.\nintros; absurd (0 < r); auto with arith.\nintros; absurd (0 < r); auto with arith.\nintros; absurd (r < r); auto with arith.\nintros; absurd (r < r); auto with arith.\nintros; absurd (r < r); auto with arith.\nintros; absurd (r < r); auto with arith.\nintros; absurd (r < r); auto with arith.\nintros; absurd (r < r); auto with arith.\nintros; absurd (r < r); auto with arith.\nintros; absurd (r < r); auto with arith.\nintros; absurd (r < r); auto with arith.\nintros; absurd (r < r); auto with arith.\nintros; absurd (r < r); auto with arith.\nintros; absurd (r < r); auto with arith.\nintros; absurd (Qed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 709, characters 19-20:\nError:\nSyntax error: ',' or ')' expected after [constr:operconstr level 200] (in [constr:operconstr]).\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "n * y)); reflexivity.\nQed.\n\n(***************)\nLemma tech_div31 :\n forall n q : nat,\n addZ (oppZ (multZ (pos n) (pos q))) (pos n) = oppZ (multZ (pos n) (posOZ q)).\n\nintros; elim q.\n(* O *)\nunfold posOZ in |- *; rewrite (mult_OZ (pos n)). \ncut (IZ = pos 0); intros. elim H. rewrite (mult_IZ (pos n)).\nelim (addZ_opposite (pos n) I); intros; elim H1; intros; elim H3; intros.\nrewrite H5; reflexivity. reflexivity.\n(* S y *)\nintros y H; unfold posOZ in |- *;\n elim (multZ_commutativity (pos (S y)) (pos n)).\nrewrite (tech_mult_posZ y (pos n)).\nrewrite\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity\n    (multZ (pos y) (pos n)) (pos n) I I).\nelim\n (addZ_associativity (oppZ (multZ (pos y) (pos n))) (oppZ (pos n)) (pos n)).\nelim (addZ_opposite (pos n) I); intros; elim H1; intros; elim H3; intros.\nrewrite H5; rewrite (add_OZ (oppZ (multZ (pos y) (pos n)))).\nelim (multZ_commutativity (pos y) (pos n)); reflexivity.\nQed.\n\n(***************)\nLemma tech_div32 :\n forall n q r : nat, S n > r -> pos (n - r) = addZ (pos n) (oppZ (posOZ r)).\n\nintros n q r; elim r.\n(* O *)\nunfold posOZ in |- *; unfold oppZ in |- *; rewrite (add_OZ (pos n));\n elim (minus_n_O n).\nreflexivity.\n(* S y *)\nintros y H; unfold posOZ in |- *; unfold oppZ in |- *; symmetry  in |- *. \nexact (tech_add_pos_neg_posZ n y (gt_S_n y n H0)).\nQed.\n\n(**************)\nLemma tech_div3 :\n forall n0 n q r : nat,\n S n0 = q * S n + r ->\n S n > r -> neg n0 = addZ (multZ (pos n) (neg q)) (pos (n - r)).\n\nintros.\nelim (tech_opp_pos_negZ q); intros; elim H1.\nrewrite (mult_oppZ_r (pos n) (pos q)); rewrite (tech_div32 n q r H0).\nrewrite\n (addZ_associativity (oppZ (multZ (pos n) (pos q))) (pos n) (oppZ (posOZ r)))\n.\nrewrite (tech_div31 n q).\nelim\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity\n    (multZ (pos n) (posOZ q)) (posOZ r) I I).\nelim (tech_div1 n0 n q r H); reflexivity.\nQed.\n\n(**************)\n",
                "context_tokens": 709,
                "proof_start_offset": 20268,
                "proof_end_offset": 20706,
                "proof": "Lemma tech_div4 : forall n0 n q r : nat, S n0 = q * S n + r -> pos n0 = addZ (multZ (neg n) (negOZ q)) (posOZ r).\nProof.\nintros; cut (multZ (neg n) (negOZ q) = multZ (pos n) (posOZ q)); intros.\nrewrite H0; intros; exact (tech_div1 n0 n q r H).\ncut (negOZ q = oppZ (posOZ q)); intros.\nrewrite H0.\nelim (tech_opp_pos_negZ n); intros; elim H1.\napply (mult_opp_opp Z IdZ addZ multZ OZ oppZ Z_ring (pos n) (posOZ q) I I).\nelim q; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_div4 : forall n0 n q r : nat, S n0 = q * S n + r -> pos n0 = addZ (multZ (neg n) (negOZ q)) (posOZ r).\nProof.\nintros.\nelim (tech_opp_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_negQed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 710, characters 505-506:\nError:\nSyntax error: ',' or ')' expected after [constr:operconstr level 200] (in [constr:operconstr]).\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": " (pos n)).\nrewrite (tech_mult_posZ y (pos n)).\nrewrite\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity\n    (multZ (pos y) (pos n)) (pos n) I I).\nelim\n (addZ_associativity (oppZ (multZ (pos y) (pos n))) (oppZ (pos n)) (pos n)).\nelim (addZ_opposite (pos n) I); intros; elim H1; intros; elim H3; intros.\nrewrite H5; rewrite (add_OZ (oppZ (multZ (pos y) (pos n)))).\nelim (multZ_commutativity (pos y) (pos n)); reflexivity.\nQed.\n\n(***************)\nLemma tech_div32 :\n forall n q r : nat, S n > r -> pos (n - r) = addZ (pos n) (oppZ (posOZ r)).\n\nintros n q r; elim r.\n(* O *)\nunfold posOZ in |- *; unfold oppZ in |- *; rewrite (add_OZ (pos n));\n elim (minus_n_O n).\nreflexivity.\n(* S y *)\nintros y H; unfold posOZ in |- *; unfold oppZ in |- *; symmetry  in |- *. \nexact (tech_add_pos_neg_posZ n y (gt_S_n y n H0)).\nQed.\n\n(**************)\nLemma tech_div3 :\n forall n0 n q r : nat,\n S n0 = q * S n + r ->\n S n > r -> neg n0 = addZ (multZ (pos n) (neg q)) (pos (n - r)).\n\nintros.\nelim (tech_opp_pos_negZ q); intros; elim H1.\nrewrite (mult_oppZ_r (pos n) (pos q)); rewrite (tech_div32 n q r H0).\nrewrite\n (addZ_associativity (oppZ (multZ (pos n) (pos q))) (pos n) (oppZ (posOZ r)))\n.\nrewrite (tech_div31 n q).\nelim\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity\n    (multZ (pos n) (posOZ q)) (posOZ r) I I).\nelim (tech_div1 n0 n q r H); reflexivity.\nQed.\n\n(**************)\nLemma tech_div4 :\n forall n0 n q r : nat,\n S n0 = q * S n + r -> pos n0 = addZ (multZ (neg n) (negOZ q)) (posOZ r).\n\nintros; cut (multZ (neg n) (negOZ q) = multZ (pos n) (posOZ q)); intros.\nrewrite H0; intros; exact (tech_div1 n0 n q r H).\ncut (negOZ q = oppZ (posOZ q)); intros. rewrite H0.\nelim (tech_opp_pos_negZ n); intros; elim H1.\napply (mult_opp_opp Z IdZ addZ multZ OZ oppZ Z_ring (pos n) (posOZ q) I I).\nelim q; reflexivity.\nQed.\n\n(**************)\n",
                "context_tokens": 719,
                "proof_start_offset": 20725,
                "proof_end_offset": 21054,
                "proof": "Lemma tech_div5 : forall n0 n q : nat, S n0 = q * S n -> neg n0 = multZ (neg n) (posOZ q).\nProof.\nintros; cut (posOZ q = oppZ (negOZ q)); intros.\nrewrite H0.\nelim (tech_opp_pos_negZ n); intros; elim H1.\nrewrite (mult_opp_opp Z IdZ addZ multZ OZ oppZ Z_ring (pos n) (negOZ q) I I).\nexact (tech_div2 n0 n q H).\nelim q; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_div5 : forall n0 n q : nat, S n0 = q * S n -> neg n0 = multZ (neg n) (posOZ q).\nintros; elim (tech_opp_neg_neg_neg_neg_neg_neg_neg n0 q);\n intros; elim H1.\nrewrite (mult_opp_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_Qed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 721, characters 14-50:\nError: The reference tech_opp_neg_neg_neg_neg_neg_neg_neg was not found\nin the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "\nQed.\n\n(***************)\nLemma tech_div32 :\n forall n q r : nat, S n > r -> pos (n - r) = addZ (pos n) (oppZ (posOZ r)).\n\nintros n q r; elim r.\n(* O *)\nunfold posOZ in |- *; unfold oppZ in |- *; rewrite (add_OZ (pos n));\n elim (minus_n_O n).\nreflexivity.\n(* S y *)\nintros y H; unfold posOZ in |- *; unfold oppZ in |- *; symmetry  in |- *. \nexact (tech_add_pos_neg_posZ n y (gt_S_n y n H0)).\nQed.\n\n(**************)\nLemma tech_div3 :\n forall n0 n q r : nat,\n S n0 = q * S n + r ->\n S n > r -> neg n0 = addZ (multZ (pos n) (neg q)) (pos (n - r)).\n\nintros.\nelim (tech_opp_pos_negZ q); intros; elim H1.\nrewrite (mult_oppZ_r (pos n) (pos q)); rewrite (tech_div32 n q r H0).\nrewrite\n (addZ_associativity (oppZ (multZ (pos n) (pos q))) (pos n) (oppZ (posOZ r)))\n.\nrewrite (tech_div31 n q).\nelim\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity\n    (multZ (pos n) (posOZ q)) (posOZ r) I I).\nelim (tech_div1 n0 n q r H); reflexivity.\nQed.\n\n(**************)\nLemma tech_div4 :\n forall n0 n q r : nat,\n S n0 = q * S n + r -> pos n0 = addZ (multZ (neg n) (negOZ q)) (posOZ r).\n\nintros; cut (multZ (neg n) (negOZ q) = multZ (pos n) (posOZ q)); intros.\nrewrite H0; intros; exact (tech_div1 n0 n q r H).\ncut (negOZ q = oppZ (posOZ q)); intros. rewrite H0.\nelim (tech_opp_pos_negZ n); intros; elim H1.\napply (mult_opp_opp Z IdZ addZ multZ OZ oppZ Z_ring (pos n) (posOZ q) I I).\nelim q; reflexivity.\nQed.\n\n(**************)\nLemma tech_div5 :\n forall n0 n q : nat, S n0 = q * S n -> neg n0 = multZ (neg n) (posOZ q).\n\nintros; cut (posOZ q = oppZ (negOZ q)); intros. rewrite H0.\nelim (tech_opp_pos_negZ n); intros; elim H1.\nrewrite (mult_opp_opp Z IdZ addZ multZ OZ oppZ Z_ring (pos n) (negOZ q) I I).\nexact (tech_div2 n0 n q H).\nelim q; reflexivity.\nQed.\n\n(**************)\n",
                "context_tokens": 703,
                "proof_start_offset": 21073,
                "proof_end_offset": 21415,
                "proof": "Lemma tech_div6 : forall n0 n q r : nat, S n0 = q * S n + r -> S n > r -> neg n0 = addZ (multZ (neg n) (pos q)) (pos (n - r)).\nProof.\nintros.\nelim (tech_opp_pos_negZ q); intros; elim H2.\nelim (tech_opp_pos_negZ n); intros; elim H3.\nrewrite (mult_opp_opp Z IdZ addZ multZ OZ oppZ Z_ring (pos n) (neg q) I I).\napply (tech_div3 n0 n q r H H0).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_div6 : forall n0 n q r : nat, S n0 = q * S n + r -> S n > r -> neg n0 = addZ (multZ (neg n) (pos q)) (pos (n - r)).\nProof.\nintros; elim (tech_opp_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_Qed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 733, characters 514-515:\nError:\nSyntax error: ',' or ')' expected after [constr:operconstr level 200] (in [constr:operconstr]).\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": "_pos_neg_posZ n y (gt_S_n y n H0)).\nQed.\n\n(**************)\nLemma tech_div3 :\n forall n0 n q r : nat,\n S n0 = q * S n + r ->\n S n > r -> neg n0 = addZ (multZ (pos n) (neg q)) (pos (n - r)).\n\nintros.\nelim (tech_opp_pos_negZ q); intros; elim H1.\nrewrite (mult_oppZ_r (pos n) (pos q)); rewrite (tech_div32 n q r H0).\nrewrite\n (addZ_associativity (oppZ (multZ (pos n) (pos q))) (pos n) (oppZ (posOZ r)))\n.\nrewrite (tech_div31 n q).\nelim\n (opp_add Z IdZ addZ OZ oppZ Z_group addZ_commutativity\n    (multZ (pos n) (posOZ q)) (posOZ r) I I).\nelim (tech_div1 n0 n q r H); reflexivity.\nQed.\n\n(**************)\nLemma tech_div4 :\n forall n0 n q r : nat,\n S n0 = q * S n + r -> pos n0 = addZ (multZ (neg n) (negOZ q)) (posOZ r).\n\nintros; cut (multZ (neg n) (negOZ q) = multZ (pos n) (posOZ q)); intros.\nrewrite H0; intros; exact (tech_div1 n0 n q r H).\ncut (negOZ q = oppZ (posOZ q)); intros. rewrite H0.\nelim (tech_opp_pos_negZ n); intros; elim H1.\napply (mult_opp_opp Z IdZ addZ multZ OZ oppZ Z_ring (pos n) (posOZ q) I I).\nelim q; reflexivity.\nQed.\n\n(**************)\nLemma tech_div5 :\n forall n0 n q : nat, S n0 = q * S n -> neg n0 = multZ (neg n) (posOZ q).\n\nintros; cut (posOZ q = oppZ (negOZ q)); intros. rewrite H0.\nelim (tech_opp_pos_negZ n); intros; elim H1.\nrewrite (mult_opp_opp Z IdZ addZ multZ OZ oppZ Z_ring (pos n) (negOZ q) I I).\nexact (tech_div2 n0 n q H).\nelim q; reflexivity.\nQed.\n\n(**************)\nLemma tech_div6 :\n forall n0 n q r : nat,\n S n0 = q * S n + r ->\n S n > r -> neg n0 = addZ (multZ (neg n) (pos q)) (pos (n - r)).\n\nintros.\nelim (tech_opp_pos_negZ q); intros; elim H2.\nelim (tech_opp_pos_negZ n); intros; elim H3.\nrewrite (mult_opp_opp Z IdZ addZ multZ OZ oppZ Z_ring (pos n) (neg q) I I).\napply (tech_div3 n0 n q r H H0).\nQed.\n\n(****************)\n",
                "context_tokens": 727,
                "proof_start_offset": 21436,
                "proof_end_offset": 22829,
                "proof": "Lemma inversibleZ : forall x : Z, inversible Z multZ IZ x -> x = IZ \\/ x = oppZ IZ.\nProof.\nsimple destruct x.\nintros; elim H; intros; elim H0; intros; elim H1.\nleft; reflexivity.\nsimple induction n.\nintros; left; reflexivity.\nintros y H H0; elim H0; intros; elim H1; intros.\nabsurd (multZ (pos (S y)) x0 = IZ).\nelim x0.\nrewrite (mult_OZ (pos (S y))).\ndiscriminate.\nintros; rewrite (tech_mult_pos_posZ (S y) n0).\nelim (plus_comm (S y + n0) (S y * n0)).\nelim (plus_assoc (S y) n0 (S y * n0)); simpl in |- *.\napply (tech_pos_not_posZ (S (y + (n0 + (n0 + y * n0)))) 0).\ndiscriminate.\nintros; rewrite (tech_mult_pos_negZ (S y) n0).\nelim (plus_comm (S y + n0) (S y * n0)).\nelim (plus_assoc (S y) n0 (S y * n0)); simpl in |- *; discriminate.\nexact H2.\nsimple induction n.\nright; reflexivity.\nintros y H H0; elim H0; intros; elim H1; intros.\nabsurd (multZ (neg (S y)) x0 = IZ).\nelim x0.\nrewrite (mult_OZ (neg (S y))).\ndiscriminate.\nintros; rewrite (tech_mult_neg_posZ (S y) n0).\nelim (plus_comm (S y + n0) (S y * n0)).\nelim (plus_assoc (S y) n0 (S y * n0)); simpl in |- *; discriminate.\nintros; rewrite (tech_mult_neg_negZ (S y) n0).\nelim (plus_comm (S y + n0) (S y * n0)).\nelim (plus_assoc (S y) n0 (S y * n0)); simpl in |- *.\napply (tech_pos_not_posZ (S (y + (n0 + (n0 + y * n0)))) 0).\ndiscriminate.\nexact H2.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma inversibleZ : forall x : Z, inversible Z multZ IZ x -> x = IZ \\/ x = oppZ IZ.\nintros.\nelim (tech_opp_pos_neg_neg_neg x); intros; elim H2.\nrewrite (mult_neg_neg_neg_neg_neg x); intros; elim H2.\nrewrite (mult_neg_neg_neg x); intros; elim H2.\nrewrite (mult_neg_neg x); intros; elim H2.\nrewrite (mult_neg_neg x); intros; elim H3.\nrewrite (mult_neg_neg x); intros; elim H3.\nrewrite (mult_neg_neg x); intros; elim H3.\nrewrite (mult_neg_neg x); intros; elim H3.\nrewrite (mult_neg_neg x); intros; elim H3.\nrewrite (mult_neg_neg x); intros; elim H3.\nrewrite (mult_neg_neg x); intros; elim H3.\nrewrite (mult_neg_neg x); intros; elim H3.\nrewrite (mult_neg_neg x); intros; elim H3.\nrewrite (mult_neg_neg x); intros; elim H3.\nrewrite (mult_neg_neg x); intros; elim H3Qed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 746, characters 6-30:\nError: The reference tech_opp_pos_neg_neg_neg was not found in the current\nenvironment.\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zmult.v",
                "context": ".\nQed.\n\n(**************)\nLemma tech_div6 :\n forall n0 n q r : nat,\n S n0 = q * S n + r ->\n S n > r -> neg n0 = addZ (multZ (neg n) (pos q)) (pos (n - r)).\n\nintros.\nelim (tech_opp_pos_negZ q); intros; elim H2.\nelim (tech_opp_pos_negZ n); intros; elim H3.\nrewrite (mult_opp_opp Z IdZ addZ multZ OZ oppZ Z_ring (pos n) (neg q) I I).\napply (tech_div3 n0 n q r H H0).\nQed.\n\n(****************)\nLemma inversibleZ :\n forall x : Z, inversible Z multZ IZ x -> x = IZ \\/ x = oppZ IZ.\n\nsimple destruct x.\n(* OZ *)\nintros; elim H; intros; elim H0; intros; elim H1.\nleft; reflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nintros; left; reflexivity.\n(* pos (S y) *)\nintros y H H0; elim H0; intros; elim H1; intros.\nabsurd (multZ (pos (S y)) x0 = IZ). elim x0.\nrewrite (mult_OZ (pos (S y))). discriminate.\nintros; rewrite (tech_mult_pos_posZ (S y) n0).\nelim (plus_comm (S y + n0) (S y * n0)).\nelim (plus_assoc (S y) n0 (S y * n0)); simpl in |- *.\napply (tech_pos_not_posZ (S (y + (n0 + (n0 + y * n0)))) 0).\ndiscriminate.\nintros; rewrite (tech_mult_pos_negZ (S y) n0).\nelim (plus_comm (S y + n0) (S y * n0)).\nelim (plus_assoc (S y) n0 (S y * n0)); simpl in |- *; discriminate.\nexact H2.\n(* neg n *) \nsimple induction n.\n(* neg O *)\nright; reflexivity.\n(* neg (S y) *)\nintros y H H0; elim H0; intros; elim H1; intros.\nabsurd (multZ (neg (S y)) x0 = IZ). elim x0.\nrewrite (mult_OZ (neg (S y))). discriminate.\nintros; rewrite (tech_mult_neg_posZ (S y) n0).\nelim (plus_comm (S y + n0) (S y * n0)).\nelim (plus_assoc (S y) n0 (S y * n0)); simpl in |- *; discriminate.\nintros; rewrite (tech_mult_neg_negZ (S y) n0).\nelim (plus_comm (S y + n0) (S y * n0)).\nelim (plus_assoc (S y) n0 (S y * n0)); simpl in |- *.\napply (tech_pos_not_posZ (S (y + (n0 + (n0 + y * n0)))) 0).\ndiscriminate.\nexact H2.\nQed.\n\n(************)\n",
                "context_tokens": 734,
                "proof_start_offset": 22846,
                "proof_end_offset": 23040,
                "proof": "Lemma sgn_abs : forall x : Z, multZ x (sgnZ x) = absZ x.\nProof.\nsimple destruct x.\nreflexivity.\nintros; exact (mult_IZ (pos n)).\nintros; exact (mult_mIZ (neg n)).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma sgn_abs : forall x : Z, multZ x (sgnZ x) = absZ x.\nsimple induction x.\n(* a case a case a case a0 case a1 *)\nintros; rewrite H; rewrite H0; reflexivity.\n(* a case a0 case a1 *)\nintros; rewrite H; rewrite H0; reflexivity.\n(* a case a1 case a2 *)\nintros; rewrite H; rewrite H0; reflexivity.\n(* a case a1 case a2 *)\nintros; rewrite H; rewrite H0; reflexivity.\n(* a case a1 *)\nintros; rewrite H; rewrite H; reflexivity.\n(* a case a1 *)\nintros; rewrite H; rewrite H0; reflexivity.\n(* a case a1 *)\nintros; rewrite H; rewrite H; reflexivity.\n(* a case a1 *)\nintros; rewrite H; rewrite H; reflexivity.\n(* a case a1 *)\nintros; rewrite H; rewrite H; reflexivity.\n(* a case a1 *)\nintros; rewrite H; rewrite H; reflexivity.\n(* a case a1 *)\nintros; rewrite H; rewrite H; reflexivity.\n(* a case a1 *)\nintros; rewrite H; rewrite H; reflexivity.\n(* a case a1 *)\nintros; rewrite H; rewriteQed.",
                        "correct": false,
                        "error_msg": "File \"./Zmult.v\", line 791, characters 16-17:\nError: The reference H was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zmult.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Z_succ_pred.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                              Z_succ_pred.v                               *)\n(****************************************************************************)\nRequire Export Arith.\nRequire Export Zbase.\n\n(* Succ and Pred on Z *)\n\n(**************)\nDefinition succZ (x : Z) :=\n  match x return Z with\n  | OZ =>\n      (* OZ *)  IZ \n      (* pos n *) \n  | pos n => pos (S n)\n      (* neg n *) \n  | neg n =>\n      match n return Z with\n      | O =>\n          (* O *)  OZ\n          (* S m *) \n      | S m => neg m\n      end\n  end.\n\n(**************)\nDefinition predZ (x : Z) :=\n  match x return Z with\n  | OZ =>\n      (* OZ *)  neg 0\n      (* pos n *) \n  | pos n =>\n      match n return Z with\n      | O =>\n          (* O *)  OZ\n          (* S m *) \n      | S m => pos m\n      end\n      (* neg n *) \n  | neg n => neg (S n)\n  end.\n    \n(***************)\n",
                "context_tokens": 307,
                "proof_start_offset": 1870,
                "proof_end_offset": 2140,
                "proof": "Lemma pred_succZ : forall x : Z, predZ (succZ x) = x.\nProof.\nintros; pattern x in |- *; elim x.\nsimpl in |- *; reflexivity.\nsimpl in |- *; reflexivity.\nintros; elim n.\nsimpl in |- *; reflexivity.\nintros; simpl in |- *; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma pred_succZ : forall x : Z, predZ (succZ x) = x.\nProof.\nintro x; elim x; simpl in |- *; auto.\nQed.",
                        "correct": false,
                        "error_msg": "Warning: -extra and -extra-phony are deprecated.\nWarning: Write the extra targets in Makefile.coq.local.\n\nFile \"./Z_succ_pred.v\", line 60, characters 0-4:\nError: Attempt to save an incomplete proof (in proof pred_succZ)\n\nmake[2]: *** [Makefile.coq:663: Z_succ_pred.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Z_succ_pred.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                              Z_succ_pred.v                               *)\n(****************************************************************************)\nRequire Export Arith.\nRequire Export Zbase.\n\n(* Succ and Pred on Z *)\n\n(**************)\nDefinition succZ (x : Z) :=\n  match x return Z with\n  | OZ =>\n      (* OZ *)  IZ \n      (* pos n *) \n  | pos n => pos (S n)\n      (* neg n *) \n  | neg n =>\n      match n return Z with\n      | O =>\n          (* O *)  OZ\n          (* S m *) \n      | S m => neg m\n      end\n  end.\n\n(**************)\nDefinition predZ (x : Z) :=\n  match x return Z with\n  | OZ =>\n      (* OZ *)  neg 0\n      (* pos n *) \n  | pos n =>\n      match n return Z with\n      | O =>\n          (* O *)  OZ\n          (* S m *) \n      | S m => pos m\n      end\n      (* neg n *) \n  | neg n => neg (S n)\n  end.\n    \n(***************)\nLemma pred_succZ : forall x : Z, predZ (succZ x) = x.\n\nProof.\nintros; pattern x in |- *; elim x.\n(* OZ *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* neg n *)\nintros; elim n.\nsimpl in |- *; reflexivity.\nintros; simpl in |- *; reflexivity.\nQed.\n\n(***************)\n",
                "context_tokens": 398,
                "proof_start_offset": 2160,
                "proof_end_offset": 2430,
                "proof": "Lemma succ_predZ : forall x : Z, succZ (predZ x) = x.\nProof.\nintros; pattern x in |- *; elim x.\nsimpl in |- *; reflexivity.\nintros; elim n.\nsimpl in |- *; reflexivity.\nintros; simpl in |- *; reflexivity.\nsimpl in |- *; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma succ_predZ : forall x : Z, succZ (predZ x) = x.\nProof.\nintros; elim x.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimplQed.",
                        "correct": false,
                        "error_msg": "File \"./Z_succ_pred.v\", line 78, characters 15-26:\nError: In environment\nx : Z\nn : nat\nUnable to unify \"pos n\" with\n \"succZ match n with\n        | 0 => OZ\n        | S m => pos m\n        end\".\n\nmake[2]: *** [Makefile.coq:663: Z_succ_pred.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Z_succ_pred.v",
                "context": "******************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                              Z_succ_pred.v                               *)\n(****************************************************************************)\nRequire Export Arith.\nRequire Export Zbase.\n\n(* Succ and Pred on Z *)\n\n(**************)\nDefinition succZ (x : Z) :=\n  match x return Z with\n  | OZ =>\n      (* OZ *)  IZ \n      (* pos n *) \n  | pos n => pos (S n)\n      (* neg n *) \n  | neg n =>\n      match n return Z with\n      | O =>\n          (* O *)  OZ\n          (* S m *) \n      | S m => neg m\n      end\n  end.\n\n(**************)\nDefinition predZ (x : Z) :=\n  match x return Z with\n  | OZ =>\n      (* OZ *)  neg 0\n      (* pos n *) \n  | pos n =>\n      match n return Z with\n      | O =>\n          (* O *)  OZ\n          (* S m *) \n      | S m => pos m\n      end\n      (* neg n *) \n  | neg n => neg (S n)\n  end.\n    \n(***************)\nLemma pred_succZ : forall x : Z, predZ (succZ x) = x.\n\nProof.\nintros; pattern x in |- *; elim x.\n(* OZ *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* neg n *)\nintros; elim n.\nsimpl in |- *; reflexivity.\nintros; simpl in |- *; reflexivity.\nQed.\n\n(***************)\nLemma succ_predZ : forall x : Z, succZ (predZ x) = x.\n\nProof.\nintros; pattern x in |- *; elim x.\n(* OZ *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\nsimpl in |- *; reflexivity.\nintros; simpl in |- *; reflexivity.\n(* neg n *)\nsimpl in |- *; reflexivity.\nQed.\n\n(*************************)\n",
                "context_tokens": 471,
                "proof_start_offset": 2460,
                "proof_end_offset": 2604,
                "proof": "Lemma succ_pred_pred_succZ : forall x : Z, succZ (predZ x) = predZ (succZ x).\nProof.\nintros; rewrite (pred_succZ x); exact (succ_predZ x).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma succ_pred_pred_succZ : forall x : Z, succZ (predZ x) = predZ (succZ x).\nProof.\nintros; apply succ_pred_pos.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Z_succ_pred.v\", line 89, characters 14-27:\nError: The reference succ_pred_pos was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Z_succ_pred.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Z_succ_pred.v",
                "context": "                    *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                              Z_succ_pred.v                               *)\n(****************************************************************************)\nRequire Export Arith.\nRequire Export Zbase.\n\n(* Succ and Pred on Z *)\n\n(**************)\nDefinition succZ (x : Z) :=\n  match x return Z with\n  | OZ =>\n      (* OZ *)  IZ \n      (* pos n *) \n  | pos n => pos (S n)\n      (* neg n *) \n  | neg n =>\n      match n return Z with\n      | O =>\n          (* O *)  OZ\n          (* S m *) \n      | S m => neg m\n      end\n  end.\n\n(**************)\nDefinition predZ (x : Z) :=\n  match x return Z with\n  | OZ =>\n      (* OZ *)  neg 0\n      (* pos n *) \n  | pos n =>\n      match n return Z with\n      | O =>\n          (* O *)  OZ\n          (* S m *) \n      | S m => pos m\n      end\n      (* neg n *) \n  | neg n => neg (S n)\n  end.\n    \n(***************)\nLemma pred_succZ : forall x : Z, predZ (succZ x) = x.\n\nProof.\nintros; pattern x in |- *; elim x.\n(* OZ *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* neg n *)\nintros; elim n.\nsimpl in |- *; reflexivity.\nintros; simpl in |- *; reflexivity.\nQed.\n\n(***************)\nLemma succ_predZ : forall x : Z, succZ (predZ x) = x.\n\nProof.\nintros; pattern x in |- *; elim x.\n(* OZ *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\nsimpl in |- *; reflexivity.\nintros; simpl in |- *; reflexivity.\n(* neg n *)\nsimpl in |- *; reflexivity.\nQed.\n\n(*************************)\nLemma succ_pred_pred_succZ : forall x : Z, succZ (predZ x) = predZ (succZ x).\n\nProof.\nintros; rewrite (pred_succZ x); exact (succ_predZ x).\nQed.\n\n(******************)\n",
                "context_tokens": 513,
                "proof_start_offset": 2627,
                "proof_end_offset": 2801,
                "proof": "Lemma tech_pred_posZ : forall n : nat, 0 < n -> predZ (pos n) = pos (pred n).\nProof.\nintro; elim n; intro.\nelim (lt_n_O 0); exact H.\nintros; simpl in |- *; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_pred_posZ : forall n : nat, 0 < n -> predZ (pos n) = pos (pred n).\nProof.\nintros; rewrite (pred_predZ x); exact (pred_predZ x).\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Z_succ_pred.v\", line 96, characters 17-27:\nError: The reference pred_predZ was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Z_succ_pred.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Z_succ_pred.v",
                "context": "                  INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                              Z_succ_pred.v                               *)\n(****************************************************************************)\nRequire Export Arith.\nRequire Export Zbase.\n\n(* Succ and Pred on Z *)\n\n(**************)\nDefinition succZ (x : Z) :=\n  match x return Z with\n  | OZ =>\n      (* OZ *)  IZ \n      (* pos n *) \n  | pos n => pos (S n)\n      (* neg n *) \n  | neg n =>\n      match n return Z with\n      | O =>\n          (* O *)  OZ\n          (* S m *) \n      | S m => neg m\n      end\n  end.\n\n(**************)\nDefinition predZ (x : Z) :=\n  match x return Z with\n  | OZ =>\n      (* OZ *)  neg 0\n      (* pos n *) \n  | pos n =>\n      match n return Z with\n      | O =>\n          (* O *)  OZ\n          (* S m *) \n      | S m => pos m\n      end\n      (* neg n *) \n  | neg n => neg (S n)\n  end.\n    \n(***************)\nLemma pred_succZ : forall x : Z, predZ (succZ x) = x.\n\nProof.\nintros; pattern x in |- *; elim x.\n(* OZ *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nsimpl in |- *; reflexivity.\n(* neg n *)\nintros; elim n.\nsimpl in |- *; reflexivity.\nintros; simpl in |- *; reflexivity.\nQed.\n\n(***************)\nLemma succ_predZ : forall x : Z, succZ (predZ x) = x.\n\nProof.\nintros; pattern x in |- *; elim x.\n(* OZ *)\nsimpl in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\nsimpl in |- *; reflexivity.\nintros; simpl in |- *; reflexivity.\n(* neg n *)\nsimpl in |- *; reflexivity.\nQed.\n\n(*************************)\nLemma succ_pred_pred_succZ : forall x : Z, succZ (predZ x) = predZ (succZ x).\n\nProof.\nintros; rewrite (pred_succZ x); exact (succ_predZ x).\nQed.\n\n(******************)\nLemma tech_pred_posZ : forall n : nat, 0 < n -> predZ (pos n) = pos (pred n).\n\nProof.\nintro; elim n; intro. elim (lt_n_O 0); exact H. intros; simpl in |- *; reflexivity.\nQed.\n\n(********************)\n",
                "context_tokens": 566,
                "proof_start_offset": 2826,
                "proof_end_offset": 2975,
                "proof": "Lemma tech_succ_posOZ : forall n : nat, succZ (posOZ n) = pos n.\nProof.\nintros; elim n; simpl in |- *; reflexivity; simpl in |- *; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_succ_posOZ : forall n : nat, succZ (posOZ n) = pos n.\nProof.\nintro; elim n; intro.\nrewrite <- (pred_predZ x); exact (pred_predZ x).\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Z_succ_pred.v\", line 103, characters 15-20:\nError: Ltac call to \"intro\" failed.\n       No product even after head-reduction.\n\nmake[2]: *** [Makefile.coq:663: Z_succ_pred.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zgcd.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zgcd.v                                  *)\n(****************************************************************************)\nRequire Export misc.\nRequire Export Zadd.\nRequire Export Zle.\nRequire Export Euclid.\nRequire Export Peano_dec.\nRequire Export Zrec.\nRequire Export Zmult.\nRequire Export Zdiv.\n\nUnset Standard Proposition Elimination Names.\n\n(***************************)\n",
                "context_tokens": 158,
                "proof_start_offset": 1436,
                "proof_end_offset": 1965,
                "proof": "Lemma gcd_unicity_apart_sign : forall a b d1 d2 : Z, is_gcd Z IdZ multZ OZ a b d1 -> is_gcd Z IdZ multZ OZ a b d2 -> d2 = d1 \\/ d2 = oppZ d1.\nProof.\nintros.\nelim (gcd_unicity_apart_unities Z IdZ addZ multZ OZ IZ oppZ Z_unitary_commutative_ring integrityZ a b d1 d2 H H0).\nintros.\nelim (inversibleZ x); intros.\nleft.\nelim H1; intros; elim H4; intros.\nrewrite H6.\nrewrite H2.\nexact (mult_IZ d1).\nright.\nelim H1; intros; elim H4; intros.\nrewrite H6.\nrewrite H2.\nsimpl in |- *; exact (mult_mIZ d1).\nelim H1; intros; exact H2.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_unicity_apart_sign : forall a b d1 d2 : Z, is_gcd Z IdZ multZ OZ a b d1 -> is_gcd Z IdZ multZ OZ a b d2 -> d2 = d1 \\/ d2 = oppZ d1.\nProof.\n intros a b d1 d2 H_eq.\n apply (gcd_unicity_apart_sign a b d1 d2 H_eq).\n apply (gcd_unicity_apart_sign a b d1 d2 H_eq).\n apply (gcd_unicity_apart_sign a b d1 d2 H_eq).\n apply (gcd_unicity_apart_sign a b d1 d2 H_eq).\n apply (gcd_unicity_apart_sign a b d1 d2 H_eq).\n apply (gcd_unicity_apart_sign a b d1 d2 H_eq).\n apply (gcd_unicity_apart_sign a b d1 d2 H_eq).\n apply (gcd_unicity_apart_sign a b d1 d2 H_eq).\n apply (gcd_unicity_apart_sign a b d1 d2 H_eq).\n apply (gcd_unicity_apart_sign a b d1 d2 H_eq).\n apply (gcd_unicity_apart_sign a b d1 d2 H_eq).\n apply (gcd_unicity_apart_sign a b d1 d2 H_eq).\nQed.",
                        "correct": false,
                        "error_msg": "Warning: -extra and -extra-phony are deprecated.\nWarning: Write the extra targets in Makefile.coq.local.\n\nFile \"./Zgcd.v\", line 26, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 32, characters 8-30:\nError: The reference gcd_unicity_apart_sign was not found in the current\nenvironment.\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zgcd.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zgcd.v                                  *)\n(****************************************************************************)\nRequire Export misc.\nRequire Export Zadd.\nRequire Export Zle.\nRequire Export Euclid.\nRequire Export Peano_dec.\nRequire Export Zrec.\nRequire Export Zmult.\nRequire Export Zdiv.\n\nUnset Standard Proposition Elimination Names.\n\n(***************************)\nLemma gcd_unicity_apart_sign :\n forall a b d1 d2 : Z,\n is_gcd Z IdZ multZ OZ a b d1 ->\n is_gcd Z IdZ multZ OZ a b d2 -> d2 = d1 \\/ d2 = oppZ d1.\n\nintros.\nelim\n (gcd_unicity_apart_unities Z IdZ addZ multZ OZ IZ oppZ\n    Z_unitary_commutative_ring integrityZ a b d1 d2 H H0).\nintros.\nelim (inversibleZ x); intros.\nleft. elim H1; intros; elim H4; intros. rewrite H6. rewrite H2. \nexact (mult_IZ d1).\nright. elim H1; intros; elim H4; intros. rewrite H6. rewrite H2.\nsimpl in |- *; exact (mult_mIZ d1).\nelim H1; intros; exact H2.\nQed.\n\n(***********)\n",
                "context_tokens": 373,
                "proof_start_offset": 1981,
                "proof_end_offset": 3327,
                "proof": "Lemma gcd_OZ_absZ : forall b : Z, is_gcd Z IdZ multZ OZ OZ b (absZ b).\nProof.\nintros.\nelim (abs_eq_or_oppZ b); intro y.\nrewrite y.\nunfold is_gcd in |- *; split.\nunfold divide in |- *; unfold IdZ in |- *; split.\nexact I.\nsplit.\nexact I.\nleft; reflexivity.\nsplit; unfold divide in |- *; unfold IdZ in |- *.\nsplit.\nexact I.\nsplit.\nexact I.\nelim (eq_OZ_dec b); intro y0.\nleft; exact y0.\nright.\nsplit.\nexact y0.\nexists IZ.\nsplit.\nexact I.\nsymmetry in |- *; exact (mult_IZ b).\nintros; exact H0.\nrewrite y.\nunfold is_gcd in |- *; split.\nunfold divide in |- *; unfold IdZ in |- *; split.\nexact I.\nsplit.\nexact I.\nleft; reflexivity.\nsplit; unfold divide in |- *; unfold IdZ in |- *; split.\nexact I.\nsplit.\nexact I.\nelim (eq_OZ_dec b); intro y0.\nleft; exact y0.\nright.\nsplit.\nunfold not in |- *; intros; elim y0.\nexact (opp_O Z IdZ addZ multZ OZ oppZ Z_ring b I H).\nexists (oppZ IZ); split.\nexact I.\nrewrite (mult_opp_opp Z IdZ addZ multZ OZ oppZ Z_ring b IZ I I).\nsymmetry in |- *; exact (mult_IZ b).\nexact I.\nsplit.\nexact I.\nelim H0; intros; elim H2; intros; elim H4; intros.\nrewrite H5.\nleft; reflexivity.\nright; split.\nelim H5; intros; exact H6.\nelim H5; intros; elim H7; intros.\nexists (oppZ x).\nsplit.\nexact I.\nelim H8; intros; rewrite H10.\nsymmetry in |- *; exact (mult_opp_r Z IdZ addZ multZ OZ oppZ Z_ring q x I I).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_OZ_absZ : forall b : Z, is_gcd Z IdZ multZ OZ OZ b (absZ b).\nintros.\nelim (gcd_bezout_apart_sign_pos ZExpExp unZExp unZExp unZExp unZExp unZExp.\nintros.\nelim (gcd_bezout_apart_sign_pos ZExpExp unZExp unZExp unZExp unZExp unZExp unZExp.\nintros.\nelim (gcd_bezout_apart_sign_pos ZExp unZExp unZExp unZExp unZExp unZExp unZExp.\nintros.\nelim (gcd_bezout_apart_sign_pos ZExp unZExp unZExp unZExp unZExp unZExp unZExp.\nintros.\nelim (gcd_bezout_apart_sign_pos ZExp unZExp unZExp unZExp unZExp unZExp unZExp unZExp.\nintros.\nelim (gcd_bezout_apart_sign_pos ZExp unZExp unZExp unZExp unZExp unZExp unZExp.\nintros.\nelim (gcd_bezout_apart_sign_pos ZExp unZExp unZExp unZExp unZExp unZExp unZExp.\nintrosQed.",
                        "correct": false,
                        "error_msg": "File \"./Zgcd.v\", line 26, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 50, characters 74-75:\nError:\nSyntax error: ',' or ')' expected after [constr:operconstr level 200] (in [constr:operconstr]).\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zgcd.v",
                "context": "\nsimpl in |- *; exact (mult_mIZ d1).\nelim H1; intros; exact H2.\nQed.\n\n(***********)\nLemma gcd_OZ_absZ : forall b : Z, is_gcd Z IdZ multZ OZ OZ b (absZ b).\n\nintros. elim (abs_eq_or_oppZ b); intro y.\n(* |b|=b *)\nrewrite y.\nunfold is_gcd in |- *; split.\nunfold divide in |- *; unfold IdZ in |- *; split. exact I. split. exact I. left; reflexivity.\nsplit; unfold divide in |- *; unfold IdZ in |- *. split. exact I. split. exact I.\nelim (eq_OZ_dec b); intro y0. \nleft; exact y0.\nright. split. exact y0. exists IZ. split. exact I. symmetry  in |- *; exact (mult_IZ b).\nintros; exact H0.\n(* |b|=(-b) *)\nrewrite y.\nunfold is_gcd in |- *; split.\nunfold divide in |- *; unfold IdZ in |- *; split. exact I. split. exact I. left; reflexivity.\nsplit; unfold divide in |- *; unfold IdZ in |- *; split. exact I. split. exact I.\nelim (eq_OZ_dec b); intro y0. \nleft; exact y0.\nright. split.\nunfold not in |- *; intros; elim y0.\nexact (opp_O Z IdZ addZ multZ OZ oppZ Z_ring b I H).\nexists (oppZ IZ); split. exact I.\nrewrite (mult_opp_opp Z IdZ addZ multZ OZ oppZ Z_ring b IZ I I).\nsymmetry  in |- *; exact (mult_IZ b). exact I. split. exact I.\nelim H0; intros; elim H2; intros; elim H4; intros. rewrite H5. \nleft; reflexivity.\nright; split. elim H5; intros; exact H6. elim H5; intros; elim H7; intros.\nexists (oppZ x). split. exact I. elim H8; intros; rewrite H10.\nsymmetry  in |- *; exact (mult_opp_r Z IdZ addZ multZ OZ oppZ Z_ring q x I I).\nQed.\n\n(******************)\nInductive is_gcdZ : Z -> Z -> Z -> Prop :=\n  | gcd_OZ : forall b : Z, is_gcdZ OZ b (absZ b)\n  | gcd_mod :\n      forall b a d q r : Z,\n      b <> OZ -> is_diveuclZ a b q r -> is_gcdZ r b d -> is_gcdZ b a d.\n\n(******************)\nDefinition have_gcdZ (a b : Z) := {d : Z | is_gcdZ a b d}.\n\nDefinition gcdZ_i (a b : Z) := exist (is_gcdZ a b).\n\n(* Inductive have_gcdZ [a, b: Z]: Set\n  := gcdZ_i: (d: Z) (is_gcdZ a b d) -> (have_gcdZ a b). *)\n\n(*******************)\nDefinition P (a : Z) := forall b : Z, have_gcdZ a b.\n\n",
                "context_tokens": 727,
                "proof_start_offset": 3865,
                "proof_end_offset": 4332,
                "proof": "Lemma acc_P : forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n.\nProof.\nintros.\ncase (eq_OZ_dec n); intro.\nunfold P in |- *.\nintro.\nsplit with (absZ b).\nrewrite e.\napply (gcd_OZ b).\nunfold P in |- *; intro.\nelim (divZ b n).\nintros.\ncut (lt_absZ r n); intros.\nelim (H r H0 n).\nintros.\nsplit with x.\napply gcd_mod with (2 := i); trivial.\ninversion i.\ndecompose [and] H1.\nunfold lt_absZ in |- *.\nrewrite (tech_le_pos_abs r H2).\nexact H4.\nexact n0.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma acc_P : forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n.\nProof.\nsimple induction n.\nintros.\napply (H (fun m : Z => lt_absZ m n)).\nintros.\napply (H (fun m : Z => lt_absZ m n)).\nintros.\napply (H (fun m : Z => lt_absZ m n)).\nintros.\napply (H (fun m : Z => lt_absZ m n)).\nintros.\napply (H (fun m : Z => lt_absZ m n)).\nintros.\napply (H (fun m : Z => lt_absZ m n)).\nintros.\napply (H (fun m : Z => lt_absZ m n)).\nintros.\napply (H (fun m : Z => lt_absZ m n)).\nintros.\napply (H (fun m : Z => lt_absZ m n)).\nintros.\napply (H (fun m : Z => lt_absZ m n)).\nintros.\napply (H (fun m : Z => lt_absZ m n)).\nintros.\napply (H (fun m : Z => lt_absZ m n)).\nintros.\napply (H (Qed.",
                        "correct": false,
                        "error_msg": "File \"./Zgcd.v\", line 26, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 102, characters 10-34:\nError: The type of this term is a product while it is expected to be Z.\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zgcd.v",
                "context": " y0. \nleft; exact y0.\nright. split. exact y0. exists IZ. split. exact I. symmetry  in |- *; exact (mult_IZ b).\nintros; exact H0.\n(* |b|=(-b) *)\nrewrite y.\nunfold is_gcd in |- *; split.\nunfold divide in |- *; unfold IdZ in |- *; split. exact I. split. exact I. left; reflexivity.\nsplit; unfold divide in |- *; unfold IdZ in |- *; split. exact I. split. exact I.\nelim (eq_OZ_dec b); intro y0. \nleft; exact y0.\nright. split.\nunfold not in |- *; intros; elim y0.\nexact (opp_O Z IdZ addZ multZ OZ oppZ Z_ring b I H).\nexists (oppZ IZ); split. exact I.\nrewrite (mult_opp_opp Z IdZ addZ multZ OZ oppZ Z_ring b IZ I I).\nsymmetry  in |- *; exact (mult_IZ b). exact I. split. exact I.\nelim H0; intros; elim H2; intros; elim H4; intros. rewrite H5. \nleft; reflexivity.\nright; split. elim H5; intros; exact H6. elim H5; intros; elim H7; intros.\nexists (oppZ x). split. exact I. elim H8; intros; rewrite H10.\nsymmetry  in |- *; exact (mult_opp_r Z IdZ addZ multZ OZ oppZ Z_ring q x I I).\nQed.\n\n(******************)\nInductive is_gcdZ : Z -> Z -> Z -> Prop :=\n  | gcd_OZ : forall b : Z, is_gcdZ OZ b (absZ b)\n  | gcd_mod :\n      forall b a d q r : Z,\n      b <> OZ -> is_diveuclZ a b q r -> is_gcdZ r b d -> is_gcdZ b a d.\n\n(******************)\nDefinition have_gcdZ (a b : Z) := {d : Z | is_gcdZ a b d}.\n\nDefinition gcdZ_i (a b : Z) := exist (is_gcdZ a b).\n\n(* Inductive have_gcdZ [a, b: Z]: Set\n  := gcdZ_i: (d: Z) (is_gcdZ a b d) -> (have_gcdZ a b). *)\n\n(*******************)\nDefinition P (a : Z) := forall b : Z, have_gcdZ a b.\n\nLemma acc_P : forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n.\nProof.\n  intros. case (eq_OZ_dec n); intro. unfold P in |- *. intro.\n  split with (absZ b). rewrite e. apply (gcd_OZ b).\n  unfold P in |- *; intro. elim (divZ b n). intros. cut (lt_absZ r n); intros.\n  elim (H r H0 n). intros. split with x.\n  apply gcd_mod with (2 := i); trivial. inversion i. decompose [and] H1.\n  unfold lt_absZ in |- *. rewrite (tech_le_pos_abs r H2). exact H4. exact n0.\nQed.\n\n",
                "context_tokens": 738,
                "proof_start_offset": 4334,
                "proof_end_offset": 4420,
                "proof": "Lemma gcdZ_exists : forall a b : Z, have_gcdZ a b.\nProof.\nexact (recZ P acc_P).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcdZ_exists : forall a b : Z, have_gcdZ a b.\nProof.\n  intros. case (gcdZ_exists_pos a b); intro.\n  unfold P in |- *. intro. elim (gcd_bezout_dec b a); intro.\n  unfold P in |- *. intro. elim (gcd_bezout_dec b a); intro.\n  unfold P in |- *. intro. elim (gcd_bezout_dec b a); intro.\n  unfold P in |- *. intro. elim (gcd_bezout_dec b a); intro.\n  unfold P in |- *. intro. elim (gcd_bezout_dec b a); intro.\n  unfold P in |- *. intro. elim (gcd_bezout_dec b a); intro.\n  unfold P in |- *. intro. elim (gcd_bezout_dec b a); intro.\n  unfold P in |- *. intro. elim (gcd_bezout_dec b a); intro.\n  unfold P in |- *. intro. elim (gcd_bezout_dec b a); intro.\n  unfold P in |- *. intro. elim (gcd_bezout_dec b a); intro.\n  unfold P in |- *. intro. elim (gcd_bezout_dec b a); intro.\n  unfold P in |- *. intro. elim (gcd_bezout_dec b aQed.",
                        "correct": false,
                        "error_msg": "File \"./Zgcd.v\", line 26, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 110, characters 16-31:\nError: The reference gcdZ_exists_pos was not found in the current\nenvironment.\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zgcd.v",
                "context": "rewrite y.\nunfold is_gcd in |- *; split.\nunfold divide in |- *; unfold IdZ in |- *; split. exact I. split. exact I. left; reflexivity.\nsplit; unfold divide in |- *; unfold IdZ in |- *; split. exact I. split. exact I.\nelim (eq_OZ_dec b); intro y0. \nleft; exact y0.\nright. split.\nunfold not in |- *; intros; elim y0.\nexact (opp_O Z IdZ addZ multZ OZ oppZ Z_ring b I H).\nexists (oppZ IZ); split. exact I.\nrewrite (mult_opp_opp Z IdZ addZ multZ OZ oppZ Z_ring b IZ I I).\nsymmetry  in |- *; exact (mult_IZ b). exact I. split. exact I.\nelim H0; intros; elim H2; intros; elim H4; intros. rewrite H5. \nleft; reflexivity.\nright; split. elim H5; intros; exact H6. elim H5; intros; elim H7; intros.\nexists (oppZ x). split. exact I. elim H8; intros; rewrite H10.\nsymmetry  in |- *; exact (mult_opp_r Z IdZ addZ multZ OZ oppZ Z_ring q x I I).\nQed.\n\n(******************)\nInductive is_gcdZ : Z -> Z -> Z -> Prop :=\n  | gcd_OZ : forall b : Z, is_gcdZ OZ b (absZ b)\n  | gcd_mod :\n      forall b a d q r : Z,\n      b <> OZ -> is_diveuclZ a b q r -> is_gcdZ r b d -> is_gcdZ b a d.\n\n(******************)\nDefinition have_gcdZ (a b : Z) := {d : Z | is_gcdZ a b d}.\n\nDefinition gcdZ_i (a b : Z) := exist (is_gcdZ a b).\n\n(* Inductive have_gcdZ [a, b: Z]: Set\n  := gcdZ_i: (d: Z) (is_gcdZ a b d) -> (have_gcdZ a b). *)\n\n(*******************)\nDefinition P (a : Z) := forall b : Z, have_gcdZ a b.\n\nLemma acc_P : forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n.\nProof.\n  intros. case (eq_OZ_dec n); intro. unfold P in |- *. intro.\n  split with (absZ b). rewrite e. apply (gcd_OZ b).\n  unfold P in |- *; intro. elim (divZ b n). intros. cut (lt_absZ r n); intros.\n  elim (H r H0 n). intros. split with x.\n  apply gcd_mod with (2 := i); trivial. inversion i. decompose [and] H1.\n  unfold lt_absZ in |- *. rewrite (tech_le_pos_abs r H2). exact H4. exact n0.\nQed.\n\nLemma gcdZ_exists : forall a b : Z, have_gcdZ a b.\nProof.\n  exact (recZ P acc_P).\nQed.\n\n(****************)\n",
                "context_tokens": 721,
                "proof_start_offset": 4441,
                "proof_end_offset": 5553,
                "proof": "Lemma gcdZ_is_gcd : forall a b d : Z, is_gcdZ a b d -> is_gcd Z IdZ multZ OZ a b d.\nProof.\nintros.\nelim H; intros.\napply (gcd_OZ_absZ b0).\nunfold is_gcd in |- *.\nsplit.\nelim H3; intros; elim H5; intros; exact H6.\nsplit.\nelim H1; intros; elim H5; intros; elim H7; intros; rewrite H9.\napply (div_add Z IdZ addZ multZ OZ oppZ Z_ring (multZ b0 q) r d0).\nelim H3; intros; elim H11; intros.\nexact (div_mult Z IdZ addZ multZ OZ oppZ Z_ring b0 q d0 H12 I).\nelim H3; intros; exact H10.\nintros.\nelim H3; intros; elim H7; intros.\napply (H9 q0).\ncut (r = addZ a0 (oppZ (multZ b0 q))); intros.\nrewrite H10.\napply (div_add Z IdZ addZ multZ OZ oppZ Z_ring a0 (oppZ (multZ b0 q)) q0 H5).\napply (div_opp Z IdZ addZ multZ OZ oppZ Z_ring (multZ b0 q) q0).\nexact (div_mult Z IdZ addZ multZ OZ oppZ Z_ring b0 q q0 H4 I).\nelim H1; intros; elim H11; intros; elim H13; intros; rewrite H15.\nelim (addZ_commutativity r (multZ b0 q)).\nelim (addZ_associativity r (multZ b0 q) (oppZ (multZ b0 q))).\nelim (addZ_opposite (multZ b0 q) I); intros.\nelim H17; intros.\nelim H19; intros.\nrewrite H20.\nsymmetry in |- *.\nexact (add_OZ r).\nexact H4.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcdZ_is_gcd : forall a b d : Z, is_gcdZ a b d -> is_gcd Z IdZ multZ OZ a b d.\nProof.\n  intros. case (gcdZ_is_gcdZ a b d); intro.\n  unfold P in |- *. intro. elim (gcd_bezout_pos a b d); intro.\n  unfold P in |- *. intro. elim (gcd_bezout_pos a b d); intro.\n  unfold P in |- *. intro. elim (gcd_bezout_pos a b d); intro.\n  unfold P in |- *. intro. elim (gcd_bezout_pos b d); intro.\n  unfold P in |- *. intro. elim (gcd_bezout_pos b d); intro.\n  unfold P in |- *. intro. elim (gcd_bezout_pos b d); intro.\n  unfold P in |- *. intro. elim (gcd_bezout_pos b d); intro.\n  unfold P in |- *. intro. elim (gcd_bezout_pos b d); intro.\n  unfold P in |- *. intro. elim (gcd_bezout_pos b d); intro.\n  unfold P in |- *. intro. elim (gcd_bezout_pos b d); intro.\n  unfold P in |- *. intro. elim (gcd_bezout_pos b d); intro.\n  unfold P in |- *. intro. elim (gcd_Qed.",
                        "correct": false,
                        "error_msg": "File \"./Zgcd.v\", line 26, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 116, characters 16-28:\nError: The reference gcdZ_is_gcdZ was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zgcd.v",
                "context": "absZ m n -> P m) -> P n.\nProof.\n  intros. case (eq_OZ_dec n); intro. unfold P in |- *. intro.\n  split with (absZ b). rewrite e. apply (gcd_OZ b).\n  unfold P in |- *; intro. elim (divZ b n). intros. cut (lt_absZ r n); intros.\n  elim (H r H0 n). intros. split with x.\n  apply gcd_mod with (2 := i); trivial. inversion i. decompose [and] H1.\n  unfold lt_absZ in |- *. rewrite (tech_le_pos_abs r H2). exact H4. exact n0.\nQed.\n\nLemma gcdZ_exists : forall a b : Z, have_gcdZ a b.\nProof.\n  exact (recZ P acc_P).\nQed.\n\n(****************)\nLemma gcdZ_is_gcd :\n forall a b d : Z, is_gcdZ a b d -> is_gcd Z IdZ multZ OZ a b d.\n\nintros. elim H; intros. apply (gcd_OZ_absZ b0). unfold is_gcd in |- *.\nsplit. elim H3; intros; elim H5; intros; exact H6.\nsplit. elim H1; intros; elim H5; intros; elim H7; intros; rewrite H9.\napply (div_add Z IdZ addZ multZ OZ oppZ Z_ring (multZ b0 q) r d0).\nelim H3; intros; elim H11; intros. \nexact (div_mult Z IdZ addZ multZ OZ oppZ Z_ring b0 q d0 H12 I).\nelim H3; intros; exact H10.\nintros. elim H3; intros; elim H7; intros. apply (H9 q0).\ncut (r = addZ a0 (oppZ (multZ b0 q))); intros. rewrite H10.\napply (div_add Z IdZ addZ multZ OZ oppZ Z_ring a0 (oppZ (multZ b0 q)) q0 H5).\napply (div_opp Z IdZ addZ multZ OZ oppZ Z_ring (multZ b0 q) q0).\nexact (div_mult Z IdZ addZ multZ OZ oppZ Z_ring b0 q q0 H4 I).\nelim H1; intros; elim H11; intros; elim H13; intros; rewrite H15.\nelim (addZ_commutativity r (multZ b0 q)).\nelim (addZ_associativity r (multZ b0 q) (oppZ (multZ b0 q))).\nelim (addZ_opposite (multZ b0 q) I); intros. \nelim H17; intros. elim H19; intros. rewrite H20. symmetry  in |- *. exact (add_OZ r).\nexact H4.\nQed.\n\n(*************)\nDefinition gcdZ (a b : Z) := pi1 Z (is_gcdZ a b) (gcdZ_exists a b).\n\n(*******************)\nTheorem gcdZ_correct : forall a b : Z, is_gcdZ a b (gcdZ a b).\nProof fun a b : Z => pi2 Z (is_gcdZ a b) (gcdZ_exists a b).\n\n(*********************)\n",
                "context_tokens": 730,
                "proof_start_offset": 5810,
                "proof_end_offset": 5941,
                "proof": "Lemma positive_is_gcdZ : forall a b d : Z, is_gcdZ a b d -> leZ OZ d.\nProof.\nintros; elim H; intros.\napply (sign_absZ b0).\nexact H3.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma positive_is_gcdZ : forall a b d : Z, is_gcdZ a b d -> leZ OZ d.\nProof.\n  intros.\n  case (Zle_lt_or_eq _ _ H).\n  intro.\n  apply (H0 (a + b)).\n  apply (H0 (a + b)).\n  apply (H0 (a + b)).\n  apply (H0 (a + b)).\n  apply (H1 (a + b)).\n  apply (H1 (a + b)).\n  apply (H1 (a + b)).\n  apply (H1 (a + b)).\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zgcd.v\", line 26, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 148, characters 8-20:\nError: The reference Zle_lt_or_eq was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zgcd.v",
                "context": "lt_absZ r n); intros.\n  elim (H r H0 n). intros. split with x.\n  apply gcd_mod with (2 := i); trivial. inversion i. decompose [and] H1.\n  unfold lt_absZ in |- *. rewrite (tech_le_pos_abs r H2). exact H4. exact n0.\nQed.\n\nLemma gcdZ_exists : forall a b : Z, have_gcdZ a b.\nProof.\n  exact (recZ P acc_P).\nQed.\n\n(****************)\nLemma gcdZ_is_gcd :\n forall a b d : Z, is_gcdZ a b d -> is_gcd Z IdZ multZ OZ a b d.\n\nintros. elim H; intros. apply (gcd_OZ_absZ b0). unfold is_gcd in |- *.\nsplit. elim H3; intros; elim H5; intros; exact H6.\nsplit. elim H1; intros; elim H5; intros; elim H7; intros; rewrite H9.\napply (div_add Z IdZ addZ multZ OZ oppZ Z_ring (multZ b0 q) r d0).\nelim H3; intros; elim H11; intros. \nexact (div_mult Z IdZ addZ multZ OZ oppZ Z_ring b0 q d0 H12 I).\nelim H3; intros; exact H10.\nintros. elim H3; intros; elim H7; intros. apply (H9 q0).\ncut (r = addZ a0 (oppZ (multZ b0 q))); intros. rewrite H10.\napply (div_add Z IdZ addZ multZ OZ oppZ Z_ring a0 (oppZ (multZ b0 q)) q0 H5).\napply (div_opp Z IdZ addZ multZ OZ oppZ Z_ring (multZ b0 q) q0).\nexact (div_mult Z IdZ addZ multZ OZ oppZ Z_ring b0 q q0 H4 I).\nelim H1; intros; elim H11; intros; elim H13; intros; rewrite H15.\nelim (addZ_commutativity r (multZ b0 q)).\nelim (addZ_associativity r (multZ b0 q) (oppZ (multZ b0 q))).\nelim (addZ_opposite (multZ b0 q) I); intros. \nelim H17; intros. elim H19; intros. rewrite H20. symmetry  in |- *. exact (add_OZ r).\nexact H4.\nQed.\n\n(*************)\nDefinition gcdZ (a b : Z) := pi1 Z (is_gcdZ a b) (gcdZ_exists a b).\n\n(*******************)\nTheorem gcdZ_correct : forall a b : Z, is_gcdZ a b (gcdZ a b).\nProof fun a b : Z => pi2 Z (is_gcdZ a b) (gcdZ_exists a b).\n\n(*********************)\nLemma positive_is_gcdZ : forall a b d : Z, is_gcdZ a b d -> leZ OZ d.\n\nintros; elim H; intros. apply (sign_absZ b0). exact H3.\nQed.\n\n(********************)\n",
                "context_tokens": 714,
                "proof_start_offset": 5966,
                "proof_end_offset": 6284,
                "proof": "Lemma unicity_is_gcdZ : forall a b d1 d2 : Z, is_gcdZ a b d1 -> is_gcdZ a b d2 -> d2 = d1.\nProof.\nintros.\nelim (gcd_unicity_apart_sign a b d1 d2 (gcdZ_is_gcd a b d1 H) (gcdZ_is_gcd a b d2 H0)).\nintros; exact H1.\nintros; apply (le_opp_OZ2 d2 d1 H1 (positive_is_gcdZ a b d2 H0) (positive_is_gcdZ a b d1 H)).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma unicity_is_gcdZ : forall a b d1 d2 : Z, is_gcdZ a b d1 -> is_gcdZ a b d2 -> d2 = d1.\nProof.\nintros; elim H; intros. apply (pos_pos_pos a b d1). apply H1.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zgcd.v\", line 26, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 153, characters 31-42:\nError: The reference pos_pos_pos was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zgcd.v",
                "context": " b d -> is_gcd Z IdZ multZ OZ a b d.\n\nintros. elim H; intros. apply (gcd_OZ_absZ b0). unfold is_gcd in |- *.\nsplit. elim H3; intros; elim H5; intros; exact H6.\nsplit. elim H1; intros; elim H5; intros; elim H7; intros; rewrite H9.\napply (div_add Z IdZ addZ multZ OZ oppZ Z_ring (multZ b0 q) r d0).\nelim H3; intros; elim H11; intros. \nexact (div_mult Z IdZ addZ multZ OZ oppZ Z_ring b0 q d0 H12 I).\nelim H3; intros; exact H10.\nintros. elim H3; intros; elim H7; intros. apply (H9 q0).\ncut (r = addZ a0 (oppZ (multZ b0 q))); intros. rewrite H10.\napply (div_add Z IdZ addZ multZ OZ oppZ Z_ring a0 (oppZ (multZ b0 q)) q0 H5).\napply (div_opp Z IdZ addZ multZ OZ oppZ Z_ring (multZ b0 q) q0).\nexact (div_mult Z IdZ addZ multZ OZ oppZ Z_ring b0 q q0 H4 I).\nelim H1; intros; elim H11; intros; elim H13; intros; rewrite H15.\nelim (addZ_commutativity r (multZ b0 q)).\nelim (addZ_associativity r (multZ b0 q) (oppZ (multZ b0 q))).\nelim (addZ_opposite (multZ b0 q) I); intros. \nelim H17; intros. elim H19; intros. rewrite H20. symmetry  in |- *. exact (add_OZ r).\nexact H4.\nQed.\n\n(*************)\nDefinition gcdZ (a b : Z) := pi1 Z (is_gcdZ a b) (gcdZ_exists a b).\n\n(*******************)\nTheorem gcdZ_correct : forall a b : Z, is_gcdZ a b (gcdZ a b).\nProof fun a b : Z => pi2 Z (is_gcdZ a b) (gcdZ_exists a b).\n\n(*********************)\nLemma positive_is_gcdZ : forall a b d : Z, is_gcdZ a b d -> leZ OZ d.\n\nintros; elim H; intros. apply (sign_absZ b0). exact H3.\nQed.\n\n(********************)\nLemma unicity_is_gcdZ :\n forall a b d1 d2 : Z, is_gcdZ a b d1 -> is_gcdZ a b d2 -> d2 = d1.\n\nintros.\nelim\n (gcd_unicity_apart_sign a b d1 d2 (gcdZ_is_gcd a b d1 H)\n    (gcdZ_is_gcd a b d2 H0)).\nintros; exact H1.\nintros;\n apply\n  (le_opp_OZ2 d2 d1 H1 (positive_is_gcdZ a b d2 H0)\n     (positive_is_gcdZ a b d1 H)).\nQed.\n\n(*****************)\n",
                "context_tokens": 726,
                "proof_start_offset": 6306,
                "proof_end_offset": 6452,
                "proof": "Lemma gcdZ_is_gcdZ : forall a b d : Z, is_gcdZ a b d -> d = gcdZ a b.\nProof.\nintros.\napply (unicity_is_gcdZ a b (gcdZ a b) d (gcdZ_correct a b) H).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcdZ_is_gcdZ : forall a b d : Z, is_gcdZ a b d -> d = gcdZ a b.\nProof.\nintros.\nelim (gcd_unicity_apart_sign a b d H); intros.\nexact (gcd_0_is_gcdZ a b d H).\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zgcd.v\", line 26, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 169, characters 35-36:\nError:\nIn environment\na, b, d : Z\nH : is_gcdZ a b d\nThe term \"H\" has type \"is_gcdZ a b d\" while it is expected to have type \"Z\".\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zgcd.v",
                "context": " elim H7; intros; rewrite H9.\napply (div_add Z IdZ addZ multZ OZ oppZ Z_ring (multZ b0 q) r d0).\nelim H3; intros; elim H11; intros. \nexact (div_mult Z IdZ addZ multZ OZ oppZ Z_ring b0 q d0 H12 I).\nelim H3; intros; exact H10.\nintros. elim H3; intros; elim H7; intros. apply (H9 q0).\ncut (r = addZ a0 (oppZ (multZ b0 q))); intros. rewrite H10.\napply (div_add Z IdZ addZ multZ OZ oppZ Z_ring a0 (oppZ (multZ b0 q)) q0 H5).\napply (div_opp Z IdZ addZ multZ OZ oppZ Z_ring (multZ b0 q) q0).\nexact (div_mult Z IdZ addZ multZ OZ oppZ Z_ring b0 q q0 H4 I).\nelim H1; intros; elim H11; intros; elim H13; intros; rewrite H15.\nelim (addZ_commutativity r (multZ b0 q)).\nelim (addZ_associativity r (multZ b0 q) (oppZ (multZ b0 q))).\nelim (addZ_opposite (multZ b0 q) I); intros. \nelim H17; intros. elim H19; intros. rewrite H20. symmetry  in |- *. exact (add_OZ r).\nexact H4.\nQed.\n\n(*************)\nDefinition gcdZ (a b : Z) := pi1 Z (is_gcdZ a b) (gcdZ_exists a b).\n\n(*******************)\nTheorem gcdZ_correct : forall a b : Z, is_gcdZ a b (gcdZ a b).\nProof fun a b : Z => pi2 Z (is_gcdZ a b) (gcdZ_exists a b).\n\n(*********************)\nLemma positive_is_gcdZ : forall a b d : Z, is_gcdZ a b d -> leZ OZ d.\n\nintros; elim H; intros. apply (sign_absZ b0). exact H3.\nQed.\n\n(********************)\nLemma unicity_is_gcdZ :\n forall a b d1 d2 : Z, is_gcdZ a b d1 -> is_gcdZ a b d2 -> d2 = d1.\n\nintros.\nelim\n (gcd_unicity_apart_sign a b d1 d2 (gcdZ_is_gcd a b d1 H)\n    (gcdZ_is_gcd a b d2 H0)).\nintros; exact H1.\nintros;\n apply\n  (le_opp_OZ2 d2 d1 H1 (positive_is_gcdZ a b d2 H0)\n     (positive_is_gcdZ a b d1 H)).\nQed.\n\n(*****************)\nLemma gcdZ_is_gcdZ : forall a b d : Z, is_gcdZ a b d -> d = gcdZ a b.\n\nintros. apply (unicity_is_gcdZ a b (gcdZ a b) d (gcdZ_correct a b) H).\nQed.\n\n(*************)\n",
                "context_tokens": 719,
                "proof_start_offset": 6470,
                "proof_end_offset": 6674,
                "proof": "Lemma gcd_modZ : forall a b q r : Z, b <> OZ -> is_diveuclZ a b q r -> gcdZ r b = gcdZ b a.\nProof.\nintros.\napply (gcdZ_is_gcdZ b a (gcdZ r b)).\napply (gcd_mod b a (gcdZ r b) q r H H0 (gcdZ_correct r b)).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_modZ : forall a b q r : Z, b <> OZ -> is_diveuclZ a b q r -> gcdZ r b = gcdZ b a.\nProof.\nintros.\napply (gcd_unique_apart_sign_pos a b q r (gcdZ_is_gcd_pos a b q r H0) H).\napply gcd_eq; apply gcd_eq; apply gcd_eq; apply gcd_eq; apply gcd_eq;\n apply gcd_eq; apply gcd_eq; apply gcd_eq; apply gcd_eq;\n apply gcd_eq; apply gcd_eq; apply gcd_eq; apply gcd_eq;\n apply gcd_eq; apply gcd_eq; apply gcd_eq; apply gcd_eq;\n apply gcd_eq; apply gcd_eq; apply gcd_eq; apply gcd_eq;\n apply gcd_eq; apply gcd_eq; apply gcd_eq; apply gcd_eq;\n apply gcd_eq; apply gcd_eq; apply gcd_eq; apply gcd_eq;\n apply gcd_eq; apply gcd_eq; apply gcd_eq; apply gcd_eq;\n apply gcd_eq; apply gcd_eq; apply gcd_eq; apply gcd_eq;\n apply gcd_eq; apply gcd_eq; apply gcd_eq; apply gcd_eq;\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zgcd.v\", line 26, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 175, characters 7-32:\nError: The reference gcd_unique_apart_sign_pos was not found in the current\nenvironment.\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zgcd.v",
                "context": ")) q0 H5).\napply (div_opp Z IdZ addZ multZ OZ oppZ Z_ring (multZ b0 q) q0).\nexact (div_mult Z IdZ addZ multZ OZ oppZ Z_ring b0 q q0 H4 I).\nelim H1; intros; elim H11; intros; elim H13; intros; rewrite H15.\nelim (addZ_commutativity r (multZ b0 q)).\nelim (addZ_associativity r (multZ b0 q) (oppZ (multZ b0 q))).\nelim (addZ_opposite (multZ b0 q) I); intros. \nelim H17; intros. elim H19; intros. rewrite H20. symmetry  in |- *. exact (add_OZ r).\nexact H4.\nQed.\n\n(*************)\nDefinition gcdZ (a b : Z) := pi1 Z (is_gcdZ a b) (gcdZ_exists a b).\n\n(*******************)\nTheorem gcdZ_correct : forall a b : Z, is_gcdZ a b (gcdZ a b).\nProof fun a b : Z => pi2 Z (is_gcdZ a b) (gcdZ_exists a b).\n\n(*********************)\nLemma positive_is_gcdZ : forall a b d : Z, is_gcdZ a b d -> leZ OZ d.\n\nintros; elim H; intros. apply (sign_absZ b0). exact H3.\nQed.\n\n(********************)\nLemma unicity_is_gcdZ :\n forall a b d1 d2 : Z, is_gcdZ a b d1 -> is_gcdZ a b d2 -> d2 = d1.\n\nintros.\nelim\n (gcd_unicity_apart_sign a b d1 d2 (gcdZ_is_gcd a b d1 H)\n    (gcdZ_is_gcd a b d2 H0)).\nintros; exact H1.\nintros;\n apply\n  (le_opp_OZ2 d2 d1 H1 (positive_is_gcdZ a b d2 H0)\n     (positive_is_gcdZ a b d1 H)).\nQed.\n\n(*****************)\nLemma gcdZ_is_gcdZ : forall a b d : Z, is_gcdZ a b d -> d = gcdZ a b.\n\nintros. apply (unicity_is_gcdZ a b (gcdZ a b) d (gcdZ_correct a b) H).\nQed.\n\n(*************)\nLemma gcd_modZ :\n forall a b q r : Z, b <> OZ -> is_diveuclZ a b q r -> gcdZ r b = gcdZ b a. \n\nintros. apply (gcdZ_is_gcdZ b a (gcdZ r b)).\napply (gcd_mod b a (gcdZ r b) q r H H0 (gcdZ_correct r b)).\nQed.\n\n(*********************************)\nInductive verify_BezoutZ (a b : Z) : Set :=\n    Bezout_i :\n      forall u v : Z,\n      addZ (multZ a u) (multZ b v) = gcdZ a b -> verify_BezoutZ a b.\n\n(********************)\nDefinition Q (a : Z) := forall b : Z, verify_BezoutZ a b.\n\n",
                "context_tokens": 727,
                "proof_start_offset": 6945,
                "proof_end_offset": 8358,
                "proof": "Lemma acc_Q : forall n : Z, (forall m : Z, lt_absZ m n -> Q m) -> Q n.\nProof.\nintros q f.\ncase (eq_OZ_dec q); intro.\nunfold Q in |- *; intro b.\nsplit with IZ (sgnZ b).\nrewrite e.\nsimpl in |- *.\nrewrite (sgn_abs b).\napply (gcdZ_is_gcdZ OZ b (absZ b)); apply gcd_OZ.\nunfold Q in |- *; intro b.\nelim (divZ b q).\nintros div rem; intros.\ncut (lt_absZ rem q); intros.\nelim (f rem H q).\nintros.\nsplit with (addZ v (oppZ (multZ div u))) u.\nelim i.\nintros.\nelim H1.\nintros.\nelim H3.\nintros.\npattern b at 1 in |- *.\nrewrite H5.\nelim (mult_add_distributivity q v (oppZ (multZ div u))); intros.\nrewrite H7.\nelim (mult_add_distributivity (multZ q div) rem u); intros.\nrewrite H8.\nrewrite (mult_opp_r Z IdZ addZ multZ OZ oppZ Z_ring q (multZ div u) I I).\nelim (addZ_commutativity (multZ rem u) (multZ (multZ q div) u)).\nrewrite (add_add Z addZ addZ_commutativity addZ_associativity (multZ q v) (oppZ (multZ q (multZ div u))) (multZ rem u) (multZ (multZ q div) u)).\nelim (addZ_commutativity (multZ rem u) (multZ q v)).\nrewrite e.\nelim (multZ_associativity q div u).\nelim (addZ_opposite (multZ q (multZ div u)) I); intros.\nelim H11; intros; elim H13; intros.\nrewrite H15.\nrewrite (add_OZ (gcdZ rem q)).\nexact (gcd_modZ b q div rem n i).\nunfold lt_absZ in |- *.\nelim i; intros; elim H0; intros.\nrewrite (tech_le_pos_abs rem H1).\nelim H2; trivial.\nexact n.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma acc_Q : forall n : Z, (forall m : Z, lt_absZ m n -> Q m) -> Q n.\nintros.\napply (pre_is_gcdZ n (fun m : Z => forall m : Z, lt_absZ m n -> Q m)).\napply (pre_is_gcdZ n (fun m : Z => forall m : Z, lt_absZ m n -> Q m)).\napply (pre_is_gcdZ n (fun m : Z => forall m : Z, lt_absZ m n -> Q m)).\napply (pre_is_gcdZ n (fun m : Z => forall m : Z, lt_absZ m n -> Q m)).\napply (pre_is_gcdZ n (fun m : Z => forall m : Z, lt_absZ m n -> Q m)).\napply (pre_is_gcdZ n (fun m : Z => forall m : Z, lt_absZ m n -> Q m)).\napply (pre_is_gcdZ n (fun m : Z => forall m : Z, lt_absZ m n -> Q m)).\napply (pre_is_gcdZ n (fun m : Z => forall m : Z, lt_absZ m n -> Q m)).\napply (pre_Qed.",
                        "correct": false,
                        "error_msg": "File \"./Zgcd.v\", line 26, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 190, characters 7-18:\nError: The reference pre_is_gcdZ was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zgcd.v",
                "context": ".\n\n(*****************)\nLemma gcdZ_is_gcdZ : forall a b d : Z, is_gcdZ a b d -> d = gcdZ a b.\n\nintros. apply (unicity_is_gcdZ a b (gcdZ a b) d (gcdZ_correct a b) H).\nQed.\n\n(*************)\nLemma gcd_modZ :\n forall a b q r : Z, b <> OZ -> is_diveuclZ a b q r -> gcdZ r b = gcdZ b a. \n\nintros. apply (gcdZ_is_gcdZ b a (gcdZ r b)).\napply (gcd_mod b a (gcdZ r b) q r H H0 (gcdZ_correct r b)).\nQed.\n\n(*********************************)\nInductive verify_BezoutZ (a b : Z) : Set :=\n    Bezout_i :\n      forall u v : Z,\n      addZ (multZ a u) (multZ b v) = gcdZ a b -> verify_BezoutZ a b.\n\n(********************)\nDefinition Q (a : Z) := forall b : Z, verify_BezoutZ a b.\n\nLemma acc_Q : forall n : Z, (forall m : Z, lt_absZ m n -> Q m) -> Q n.\nProof.\n  intros q f. case (eq_OZ_dec q); intro. unfold Q in |- *; intro b.\n  split with IZ (sgnZ b). rewrite e. simpl in |- *. rewrite (sgn_abs b).\n  apply (gcdZ_is_gcdZ OZ b (absZ b)); apply gcd_OZ. unfold Q in |- *; intro b.\n  elim (divZ b q). intros div rem; intros. cut (lt_absZ rem q); intros.\n  elim (f rem H q). intros. split with (addZ v (oppZ (multZ div u))) u.\n  elim i. intros. elim H1. intros. elim H3. intros. pattern b at 1 in |- *.\n  rewrite H5. elim (mult_add_distributivity q v (oppZ (multZ div u))); intros.\n  rewrite H7. elim (mult_add_distributivity (multZ q div) rem u); intros.\n  rewrite H8. rewrite (mult_opp_r Z IdZ addZ multZ OZ oppZ Z_ring q (multZ div u) I I).\n  elim (addZ_commutativity (multZ rem u) (multZ (multZ q div) u)).\n  rewrite\n   (add_add Z addZ addZ_commutativity addZ_associativity \n      (multZ q v) (oppZ (multZ q (multZ div u))) (multZ rem u)\n      (multZ (multZ q div) u)).\n    elim (addZ_commutativity (multZ rem u) (multZ q v)). rewrite e.\n    elim (multZ_associativity q div u).\n    elim (addZ_opposite (multZ q (multZ div u)) I); intros.\n    elim H11; intros; elim H13; intros. rewrite H15.\n    rewrite (add_OZ (gcdZ rem q)).\n    exact (gcd_modZ b q div rem n i). unfold lt_absZ in |- *.\n    elim i; intros; elim H0; intros. rewrite (tech_le_pos_abs rem H1).\n    elim H2; trivial. exact n.\nQed.\n\n",
                "context_tokens": 739,
                "proof_start_offset": 8360,
                "proof_end_offset": 8453,
                "proof": "Lemma Bezout_exists : forall a b : Z, verify_BezoutZ a b.\nProof.\nexact (recZ Q acc_Q).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma Bezout_exists : forall a b : Z, verify_BezoutZ a b.\nProof.\n  intros a b.\n  unfold verify_BezoutZ.\n  apply (well_gcdZ_is_gcdZ a b (gcdZ b a)).\n  apply (well_gcdZ_is_gcdZ a b (gcdZ b a)).\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zgcd.v\", line 26, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 217, characters 2-24:\nError: Cannot coerce verify_BezoutZ to an evaluable reference.\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zgcd.v",
                "context": "Lemma gcd_modZ :\n forall a b q r : Z, b <> OZ -> is_diveuclZ a b q r -> gcdZ r b = gcdZ b a. \n\nintros. apply (gcdZ_is_gcdZ b a (gcdZ r b)).\napply (gcd_mod b a (gcdZ r b) q r H H0 (gcdZ_correct r b)).\nQed.\n\n(*********************************)\nInductive verify_BezoutZ (a b : Z) : Set :=\n    Bezout_i :\n      forall u v : Z,\n      addZ (multZ a u) (multZ b v) = gcdZ a b -> verify_BezoutZ a b.\n\n(********************)\nDefinition Q (a : Z) := forall b : Z, verify_BezoutZ a b.\n\nLemma acc_Q : forall n : Z, (forall m : Z, lt_absZ m n -> Q m) -> Q n.\nProof.\n  intros q f. case (eq_OZ_dec q); intro. unfold Q in |- *; intro b.\n  split with IZ (sgnZ b). rewrite e. simpl in |- *. rewrite (sgn_abs b).\n  apply (gcdZ_is_gcdZ OZ b (absZ b)); apply gcd_OZ. unfold Q in |- *; intro b.\n  elim (divZ b q). intros div rem; intros. cut (lt_absZ rem q); intros.\n  elim (f rem H q). intros. split with (addZ v (oppZ (multZ div u))) u.\n  elim i. intros. elim H1. intros. elim H3. intros. pattern b at 1 in |- *.\n  rewrite H5. elim (mult_add_distributivity q v (oppZ (multZ div u))); intros.\n  rewrite H7. elim (mult_add_distributivity (multZ q div) rem u); intros.\n  rewrite H8. rewrite (mult_opp_r Z IdZ addZ multZ OZ oppZ Z_ring q (multZ div u) I I).\n  elim (addZ_commutativity (multZ rem u) (multZ (multZ q div) u)).\n  rewrite\n   (add_add Z addZ addZ_commutativity addZ_associativity \n      (multZ q v) (oppZ (multZ q (multZ div u))) (multZ rem u)\n      (multZ (multZ q div) u)).\n    elim (addZ_commutativity (multZ rem u) (multZ q v)). rewrite e.\n    elim (multZ_associativity q div u).\n    elim (addZ_opposite (multZ q (multZ div u)) I); intros.\n    elim H11; intros; elim H13; intros. rewrite H15.\n    rewrite (add_OZ (gcdZ rem q)).\n    exact (gcd_modZ b q div rem n i). unfold lt_absZ in |- *.\n    elim i; intros; elim H0; intros. rewrite (tech_le_pos_abs rem H1).\n    elim H2; trivial. exact n.\nQed.\n\nLemma Bezout_exists : forall a b : Z, verify_BezoutZ a b.\nProof.\n  exact (recZ Q acc_Q).\nQed.\n\n(******************)\nDefinition congruentZ (x y n : Z) :=\n  divide Z IdZ multZ OZ n (addZ x (oppZ y)).\n\n(*****************)\n",
                "context_tokens": 736,
                "proof_start_offset": 8579,
                "proof_end_offset": 8840,
                "proof": "Lemma divide_selfZ : forall x : Z, divide Z IdZ multZ OZ x x.\nProof.\nintros.\nunfold divide in |- *.\nsplit.\nexact I.\nsplit.\nexact I.\nelim (eq_OZ_dec x); intros.\nleft; exact a.\nright; split.\nexact b.\nexists IZ.\nsplit.\nexact I.\nsymmetry in |- *; exact (mult_IZ x).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma divide_selfZ : forall x : Z, divide Z IdZ multZ OZ x x.\nProof.\n  intros x.\n  apply (gcd_refl (Zpos x)).\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zgcd.v\", line 26, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 227, characters 9-17:\nError: The reference gcd_refl was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zgcd.v",
                "context": "i :\n      forall u v : Z,\n      addZ (multZ a u) (multZ b v) = gcdZ a b -> verify_BezoutZ a b.\n\n(********************)\nDefinition Q (a : Z) := forall b : Z, verify_BezoutZ a b.\n\nLemma acc_Q : forall n : Z, (forall m : Z, lt_absZ m n -> Q m) -> Q n.\nProof.\n  intros q f. case (eq_OZ_dec q); intro. unfold Q in |- *; intro b.\n  split with IZ (sgnZ b). rewrite e. simpl in |- *. rewrite (sgn_abs b).\n  apply (gcdZ_is_gcdZ OZ b (absZ b)); apply gcd_OZ. unfold Q in |- *; intro b.\n  elim (divZ b q). intros div rem; intros. cut (lt_absZ rem q); intros.\n  elim (f rem H q). intros. split with (addZ v (oppZ (multZ div u))) u.\n  elim i. intros. elim H1. intros. elim H3. intros. pattern b at 1 in |- *.\n  rewrite H5. elim (mult_add_distributivity q v (oppZ (multZ div u))); intros.\n  rewrite H7. elim (mult_add_distributivity (multZ q div) rem u); intros.\n  rewrite H8. rewrite (mult_opp_r Z IdZ addZ multZ OZ oppZ Z_ring q (multZ div u) I I).\n  elim (addZ_commutativity (multZ rem u) (multZ (multZ q div) u)).\n  rewrite\n   (add_add Z addZ addZ_commutativity addZ_associativity \n      (multZ q v) (oppZ (multZ q (multZ div u))) (multZ rem u)\n      (multZ (multZ q div) u)).\n    elim (addZ_commutativity (multZ rem u) (multZ q v)). rewrite e.\n    elim (multZ_associativity q div u).\n    elim (addZ_opposite (multZ q (multZ div u)) I); intros.\n    elim H11; intros; elim H13; intros. rewrite H15.\n    rewrite (add_OZ (gcdZ rem q)).\n    exact (gcd_modZ b q div rem n i). unfold lt_absZ in |- *.\n    elim i; intros; elim H0; intros. rewrite (tech_le_pos_abs rem H1).\n    elim H2; trivial. exact n.\nQed.\n\nLemma Bezout_exists : forall a b : Z, verify_BezoutZ a b.\nProof.\n  exact (recZ Q acc_Q).\nQed.\n\n(******************)\nDefinition congruentZ (x y n : Z) :=\n  divide Z IdZ multZ OZ n (addZ x (oppZ y)).\n\n(*****************)\nLemma divide_selfZ : forall x : Z, divide Z IdZ multZ OZ x x.\n\nintros. unfold divide in |- *. split. exact I. split. exact I.\nelim (eq_OZ_dec x); intros. left; exact a.\nright; split. exact b. exists IZ. split. exact I. symmetry  in |- *; exact (mult_IZ x).\nQed.\n\n(**********************************)\n",
                "context_tokens": 717,
                "proof_start_offset": 8879,
                "proof_end_offset": 12106,
                "proof": "Theorem chinese_remaindering_theorem : forall a b x y : Z, gcdZ a b = IZ -> {z : Z | congruentZ z x a /\\ congruentZ z y b}.\nProof.\nintros.\nelim (Bezout_exists a b); intros.\nexists (addZ (multZ x (multZ b v)) (multZ y (multZ a u))).\nunfold congruentZ in |- *; split.\nreplace (multZ b v) with (addZ IZ (oppZ (multZ a u))).\nelim (mult_add_distributivity x IZ (oppZ (multZ a u))); intros.\nrewrite H1; clear H0 H1.\nrewrite (mult_IZ x).\nelim (mult_opp_r Z IdZ addZ multZ OZ oppZ Z_ring a u I I).\nrewrite (multZ_associativity x a (oppZ u)).\nelim (multZ_commutativity a x).\nelim (multZ_associativity a x (oppZ u)).\nrewrite (multZ_associativity y a u).\nelim (multZ_commutativity a y).\nelim (multZ_associativity a y u).\nelim (addZ_associativity x (multZ a (multZ x (oppZ u))) (multZ a (multZ y u))).\nelim (addZ_commutativity (addZ (multZ a (multZ x (oppZ u))) (multZ a (multZ y u))) x).\nelim (addZ_associativity (addZ (multZ a (multZ x (oppZ u))) (multZ a (multZ y u))) x (oppZ x)).\nelim (addZ_opposite x I); intros.\nelim H1; intros.\nelim H3; intros.\nrewrite H4; clear H0 H1 H2 H3 H4 H5.\nrewrite (add_OZ (addZ (multZ a (multZ x (oppZ u))) (multZ a (multZ y u)))).\napply (div_add Z IdZ addZ multZ OZ oppZ Z_ring (multZ a (multZ x (oppZ u))) (multZ a (multZ y u)) a).\napply (div_mult Z IdZ addZ multZ OZ oppZ Z_ring a (multZ x (oppZ u)) a (divide_selfZ a) I).\napply (div_mult Z IdZ addZ multZ OZ oppZ Z_ring a (multZ y u) a (divide_selfZ a) I).\nelim H.\nelim e.\nelim (addZ_commutativity (multZ b v) (multZ a u)).\nelim (addZ_associativity (multZ b v) (multZ a u) (oppZ (multZ a u))).\nelim (addZ_opposite (multZ a u) I); intros.\nelim H1; intros.\nelim H3; intros.\nrewrite H4; clear H0 H1 H2 H3 H4 H5.\nexact (add_OZ (multZ b v)).\ncut (multZ a u = addZ IZ (oppZ (multZ b v))); intros.\nrewrite H0; clear H0.\nelim (mult_add_distributivity y IZ (oppZ (multZ b v))); intros.\nrewrite H1; clear H0 H1.\nrewrite (mult_IZ y).\nelim (mult_opp_r Z IdZ addZ multZ OZ oppZ Z_ring b v I I).\nrewrite (multZ_associativity y b (oppZ v)).\nelim (multZ_commutativity b y).\nelim (multZ_associativity b y (oppZ v)).\nrewrite (multZ_associativity x b v).\nelim (multZ_commutativity b x).\nelim (multZ_associativity b x v).\nelim (addZ_commutativity (multZ b (multZ y (oppZ v))) y).\nrewrite (addZ_associativity (multZ b (multZ x v)) (multZ b (multZ y (oppZ v))) y) .\nelim (addZ_associativity (addZ (multZ b (multZ x v)) (multZ b (multZ y (oppZ v)))) y (oppZ y)).\nelim (addZ_opposite y I); intros.\nelim H1; intros.\nelim H3; intros.\nrewrite H4; clear H0 H1 H2 H3 H4 H5.\nrewrite (add_OZ (addZ (multZ b (multZ x v)) (multZ b (multZ y (oppZ v))))).\napply (div_add Z IdZ addZ multZ OZ oppZ Z_ring (multZ b (multZ x v)) (multZ b (multZ y (oppZ v))) b).\napply (div_mult Z IdZ addZ multZ OZ oppZ Z_ring b (multZ x v) b (divide_selfZ b) I).\napply (div_mult Z IdZ addZ multZ OZ oppZ Z_ring b (multZ y (oppZ v)) b (divide_selfZ b) I).\nelim H.\nelim e.\nelim (addZ_associativity (multZ a u) (multZ b v) (oppZ (multZ b v))).\nelim (addZ_opposite (multZ b v) I); intros.\nelim H1; intros.\nelim H3; intros.\nrewrite H4; clear H0 H1 H2 H3 H4 H5.\nsymmetry in |- *; exact (add_OZ (multZ a u)).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem chinese_remaindering_theorem : forall a b x y : Z, gcdZ a b = IZ -> {z : Z | congruentZ z x a /\\ congruentZ z y b}.\nProof.\n  intros. unfold Bezout in |- *. split. exact I. split. exact I. split. exact I. split. exact I.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zgcd.v\", line 26, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zgcd.v\", line 234, characters 17-23:\nError: The reference Bezout was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zrec.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zrec.v                                  *)\n(****************************************************************************)\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export misc.\nRequire Export Zbase.\nRequire Export Zle.\n\n(**********)\n",
                "context_tokens": 134,
                "proof_start_offset": 1314,
                "proof_end_offset": 1558,
                "proof": "Lemma lt_OZ : forall m : Z, ~ ltZ (absZ m) OZ.\nProof.\nintros; unfold ltZ in |- *; elim m.\nunfold not in |- *; simpl in |- *; intros; exact H.\nunfold not in |- *; simpl in |- *; intros; exact H.\nunfold not in |- *; simpl in |- *; intros; exact H.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma lt_OZ : forall m : Z, ~ ltZ (absZ m) OZ.\nProof.\nsimple induction 1; auto with arith.\nQed.",
                        "correct": false,
                        "error_msg": "Warning: -extra and -extra-phony are deprecated.\nWarning: Write the extra targets in Makefile.coq.local.\n\nFile \"./Zrec.v\", line 26, characters 0-18:\nError:\nLtac call to \"simple induction (quant_hyp)\" failed.\nNot an inductive product.\n\nmake[2]: *** [Makefile.coq:663: Zrec.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zrec.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zrec.v                                  *)\n(****************************************************************************)\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export misc.\nRequire Export Zbase.\nRequire Export Zle.\n\n(**********)\nLemma lt_OZ : forall m : Z, ~ ltZ (absZ m) OZ.\n\nintros; unfold ltZ in |- *; elim m.\nunfold not in |- *; simpl in |- *; intros; exact H.\nunfold not in |- *; simpl in |- *; intros; exact H.\nunfold not in |- *; simpl in |- *; intros; exact H.\nQed.\n\n(**********)\n",
                "context_tokens": 219,
                "proof_start_offset": 1573,
                "proof_end_offset": 1786,
                "proof": "Lemma Zrec1 : forall P : Z -> Set, (forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n) -> P OZ.\nProof.\nintros; apply (H OZ); intros.\nunfold lt_absZ in H0; unfold absZ at 2 in H0; elim (lt_OZ m); assumption.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma Zrec1 : forall P : Z -> Set, (forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n) -> P OZ.\nintros P H0 H1 H2; elim H2; intros.\nexists (S n); auto with arith.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zrec.v\", line 34, characters 0-17:\nError: No product even after head-reduction.\n\nmake[2]: *** [Makefile.coq:663: Zrec.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zrec.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zrec.v                                  *)\n(****************************************************************************)\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export misc.\nRequire Export Zbase.\nRequire Export Zle.\n\n(**********)\nLemma lt_OZ : forall m : Z, ~ ltZ (absZ m) OZ.\n\nintros; unfold ltZ in |- *; elim m.\nunfold not in |- *; simpl in |- *; intros; exact H.\nunfold not in |- *; simpl in |- *; intros; exact H.\nunfold not in |- *; simpl in |- *; intros; exact H.\nQed.\n\n(**********)\nLemma Zrec1 :\n forall P : Z -> Set,\n (forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n) -> P OZ.\n\nintros; apply (H OZ); intros.\nunfold lt_absZ in H0; unfold absZ at 2 in H0; elim (lt_OZ m); assumption.\nQed.\n\n(**********************************)\nInductive and_set_set_set (S1 S2 : Set) : Set :=\n    and_set_set_set_i : S2 -> S1 -> and_set_set_set S1 S2.\n\n(*****************)\nDefinition and_recZ (p : nat) (P : Z -> Set) :=\n  forall n : nat, n <= p -> and_set_set_set (P (pos n)) (P (neg n)).\n\n(**********)\n",
                "context_tokens": 413,
                "proof_start_offset": 2085,
                "proof_end_offset": 2498,
                "proof": "Lemma Zrec2 : forall P : Z -> Set, (forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n) -> and_recZ 0 P.\nProof.\nunfold and_recZ in |- *; intros; apply and_set_set_set_i.\nelim (le_n_O_eq n H0).\napply (H (neg 0)); intros.\nrewrite (tech_lt_abs_OZ m).\napply (Zrec1 P H).\nexact H1.\nelim (le_n_O_eq n H0).\napply (H (pos 0)); intros.\nrewrite (tech_lt_abs_OZ m).\napply (Zrec1 P H).\nexact H1.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma Zrec2 : forall P : Z -> Set, (forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n) -> and_recZ 0 P.\nProof.\nsimple induction 1; intros.\nunfold iff in |- *; intros; apply H0.\nunfold iff in |- *; intros; apply H0.\nunfold iff in |- *; intros; apply H0.\nunfold iff in |- *; intros; apply H0.\nunfold iff in |- *; intros; apply H0.\nunfold iff in |- *; intros; apply H0.\nunfold iff in |- *; intros; apply H0.\nunfold iff in |- *; intros; apply H0.\nunfold iff in |- *; intros; apply H0.\nunfold iff in |- *; intros; apply H0.\nunfold iff in |- *; intros; apply H0.\nunfold iff in |- *; intros; apply H0.\nunfold iff in |- *; intros; apply H0.\nunfold iff in |- *; intros; apply H0.\nunfold iff in |- *; intros; apply H0.\nunfold iff in |- *; intros; apply H0.\nunfold iff in |- *; intros; apply H0.\nunfold iff in |- *; intros; apply H0.\nunfold iff in |- *; intros; apply H0.\nunfold iff in |- *; intros; apply H0.\nunfold iff in |- *;Qed.",
                        "correct": false,
                        "error_msg": "File \"./Zrec.v\", line 52, characters 0-18:\nError:\nLtac call to \"simple induction (quant_hyp)\" failed.\nNot an inductive product.\n\nmake[2]: *** [Makefile.coq:663: Zrec.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zrec.v",
                "context": "                                                                        *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zrec.v                                  *)\n(****************************************************************************)\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export misc.\nRequire Export Zbase.\nRequire Export Zle.\n\n(**********)\nLemma lt_OZ : forall m : Z, ~ ltZ (absZ m) OZ.\n\nintros; unfold ltZ in |- *; elim m.\nunfold not in |- *; simpl in |- *; intros; exact H.\nunfold not in |- *; simpl in |- *; intros; exact H.\nunfold not in |- *; simpl in |- *; intros; exact H.\nQed.\n\n(**********)\nLemma Zrec1 :\n forall P : Z -> Set,\n (forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n) -> P OZ.\n\nintros; apply (H OZ); intros.\nunfold lt_absZ in H0; unfold absZ at 2 in H0; elim (lt_OZ m); assumption.\nQed.\n\n(**********************************)\nInductive and_set_set_set (S1 S2 : Set) : Set :=\n    and_set_set_set_i : S2 -> S1 -> and_set_set_set S1 S2.\n\n(*****************)\nDefinition and_recZ (p : nat) (P : Z -> Set) :=\n  forall n : nat, n <= p -> and_set_set_set (P (pos n)) (P (neg n)).\n\n(**********)\nLemma Zrec2 :\n forall P : Z -> Set,\n (forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n) -> and_recZ 0 P.\n\nunfold and_recZ in |- *; intros; apply and_set_set_set_i.\n(* neg n *)\nelim (le_n_O_eq n H0). apply (H (neg 0)); intros.\nrewrite (tech_lt_abs_OZ m). apply (Zrec1 P H). exact H1.\n(* pos n *)\nelim (le_n_O_eq n H0). apply (H (pos 0)); intros.\nrewrite (tech_lt_abs_OZ m). apply (Zrec1 P H). exact H1.\nQed.\n\n(**********)\n",
                "context_tokens": 562,
                "proof_start_offset": 2513,
                "proof_end_offset": 3508,
                "proof": "Lemma Zrec3 : forall (P : Z -> Set) (p : nat), (forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n) -> and_recZ p P -> and_recZ (S p) P.\nProof.\nsplit.\nelim (lt_succ n p H1); intros.\nelim (H0 n a); intros; trivial with arith.\nrewrite b.\napply (H (neg (S p))).\nsimple destruct m.\nintros; apply (Zrec1 P H).\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *; unfold leZ in |- *; intros.\nelim (H0 n0); auto with arith.\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *; unfold leZ in |- *; intros.\nelim (H0 n0); auto with arith.\nelim (lt_succ n p H1); intros.\nelim (H0 n); intros; trivial with arith.\nrewrite b.\napply (H (pos (S p))).\nsimple destruct m.\nintros; apply (Zrec1 P H).\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *; unfold leZ in |- *; intros.\nelim (H0 n0); auto with arith.\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *; unfold leZ in |- *; intros.\nelim (H0 n0); auto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma Zrec3 : forall (P : Z -> Set) (p : nat), (forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n) -> and_recZ p P -> and_recZ (S p) P.\nProof.\nintros; apply and_ind_dep_ind; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; intros.\napply H; introsQed.",
                        "correct": false,
                        "error_msg": "File \"./Zrec.v\", line 66, characters 14-29:\nError: The reference and_ind_dep_ind was not found in the current\nenvironment.\n\nmake[2]: *** [Makefile.coq:663: Zrec.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zrec.v",
                "context": " -> P m) -> P n) -> P OZ.\n\nintros; apply (H OZ); intros.\nunfold lt_absZ in H0; unfold absZ at 2 in H0; elim (lt_OZ m); assumption.\nQed.\n\n(**********************************)\nInductive and_set_set_set (S1 S2 : Set) : Set :=\n    and_set_set_set_i : S2 -> S1 -> and_set_set_set S1 S2.\n\n(*****************)\nDefinition and_recZ (p : nat) (P : Z -> Set) :=\n  forall n : nat, n <= p -> and_set_set_set (P (pos n)) (P (neg n)).\n\n(**********)\nLemma Zrec2 :\n forall P : Z -> Set,\n (forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n) -> and_recZ 0 P.\n\nunfold and_recZ in |- *; intros; apply and_set_set_set_i.\n(* neg n *)\nelim (le_n_O_eq n H0). apply (H (neg 0)); intros.\nrewrite (tech_lt_abs_OZ m). apply (Zrec1 P H). exact H1.\n(* pos n *)\nelim (le_n_O_eq n H0). apply (H (pos 0)); intros.\nrewrite (tech_lt_abs_OZ m). apply (Zrec1 P H). exact H1.\nQed.\n\n(**********)\nLemma Zrec3 :\n forall (P : Z -> Set) (p : nat),\n (forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n) ->\n and_recZ p P -> and_recZ (S p) P.\n\nsplit.\n(* P (neg n) *)\nelim (lt_succ n p H1); intros. elim (H0 n a); intros; trivial with arith.\nrewrite b. apply (H (neg (S p))).\nsimple destruct m. intros; apply (Zrec1 P H).\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *;\n unfold leZ in |- *; intros.\nelim (H0 n0); auto with arith.\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *;\n unfold leZ in |- *; intros.\nelim (H0 n0); auto with arith.\n(* P (pos n) *)\nelim (lt_succ n p H1); intros. elim (H0 n); intros; trivial with arith.\nrewrite b. apply (H (pos (S p))).\nsimple destruct m. intros; apply (Zrec1 P H).\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *;\n unfold leZ in |- *; intros.\nelim (H0 n0); auto with arith.\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *;\n unfold leZ in |- *; intros.\nelim (H0 n0); auto with arith.\nQed.\n\n(*************)\n",
                "context_tokens": 707,
                "proof_start_offset": 3526,
                "proof_end_offset": 3740,
                "proof": "Theorem Zrec4 : forall P : Z -> Set, (forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n) -> forall p : nat, and_recZ p P.\nProof.\nintros; elim p.\nexact (Zrec2 P H).\nintros; apply Zrec3; trivial with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem Zrec4 : forall P : Z -> Set, (forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n) -> forall p : nat, and_recZ p P.\nProof.\nintros P H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind H_ind HQed.",
                        "correct": false,
                        "error_msg": "File \"./Zrec.v\", line 95, characters 15-20:\nError: H_ind is used twice.\n\nmake[2]: *** [Makefile.coq:663: Zrec.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zrec.v",
                "context": "_i : S2 -> S1 -> and_set_set_set S1 S2.\n\n(*****************)\nDefinition and_recZ (p : nat) (P : Z -> Set) :=\n  forall n : nat, n <= p -> and_set_set_set (P (pos n)) (P (neg n)).\n\n(**********)\nLemma Zrec2 :\n forall P : Z -> Set,\n (forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n) -> and_recZ 0 P.\n\nunfold and_recZ in |- *; intros; apply and_set_set_set_i.\n(* neg n *)\nelim (le_n_O_eq n H0). apply (H (neg 0)); intros.\nrewrite (tech_lt_abs_OZ m). apply (Zrec1 P H). exact H1.\n(* pos n *)\nelim (le_n_O_eq n H0). apply (H (pos 0)); intros.\nrewrite (tech_lt_abs_OZ m). apply (Zrec1 P H). exact H1.\nQed.\n\n(**********)\nLemma Zrec3 :\n forall (P : Z -> Set) (p : nat),\n (forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n) ->\n and_recZ p P -> and_recZ (S p) P.\n\nsplit.\n(* P (neg n) *)\nelim (lt_succ n p H1); intros. elim (H0 n a); intros; trivial with arith.\nrewrite b. apply (H (neg (S p))).\nsimple destruct m. intros; apply (Zrec1 P H).\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *;\n unfold leZ in |- *; intros.\nelim (H0 n0); auto with arith.\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *;\n unfold leZ in |- *; intros.\nelim (H0 n0); auto with arith.\n(* P (pos n) *)\nelim (lt_succ n p H1); intros. elim (H0 n); intros; trivial with arith.\nrewrite b. apply (H (pos (S p))).\nsimple destruct m. intros; apply (Zrec1 P H).\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *;\n unfold leZ in |- *; intros.\nelim (H0 n0); auto with arith.\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *;\n unfold leZ in |- *; intros.\nelim (H0 n0); auto with arith.\nQed.\n\n(*************)\nTheorem Zrec4 :\n forall P : Z -> Set,\n (forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n) ->\n forall p : nat, and_recZ p P.\n\nintros; elim p. \nexact (Zrec2 P H). \nintros; apply Zrec3; trivial with arith.\nQed.\n\n(************)\n",
                "context_tokens": 711,
                "proof_start_offset": 3757,
                "proof_end_offset": 4149,
                "proof": "Theorem recZ : forall P : Z -> Set, (forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n) -> forall p : Z, P p.\nProof.\nintros; elim p.\nexact (Zrec1 P H).\nintro n; cut (and_recZ n P).\nintros.\nelim (H0 n); auto with arith.\napply Zrec4; trivial with arith.\nintro n; cut (and_recZ n P).\nintros.\nelim (H0 n); auto with arith.\napply Zrec4; trivial with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem recZ : forall P : Z -> Set, (forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n) -> forall p : Z, P p.\nProof.\nintros; elim p. \nexact (Zrec2 P H). \nintros; apply (H (pos 0)); intros.\napply (H (pos 0)); intros.\napply (H (pos 0)); intros.\napply (H (pos 0)); intros.\napply (H (pos 0)); intros.\napply (H (pos 0)); intros.\napply (H (pos 0)); intros.\napply (H (pos 0)); intros.\napply (H (pos 0)); intros.\napply (H (pos 0)); intros.\napply (H (pos 0)); intros.\napply (H (pos 0)); intros.\napply (H (pos 0)); intros.\napply (H (pos 0)); intros.\napply (H (pos 0)); intros.\napply (H (pos 0)); intros.\napply (H (pos 0)); intros.\napply (H (pos 0)); intros.\napply (H (pos 0)); intros.\napply (H (pos 0)); intros.\napply (H (pos 0)); intros.\napply (H (pos 0)); intros.\napply (H (pos 0)); intros.\napply (HQed.",
                        "correct": false,
                        "error_msg": "File \"./Zrec.v\", line 107, characters 7-16:\nError:\nIn environment\nP : Z -> Set\nH : forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n\np : Z\nThe term \"Zrec2 P H\" has type \"and_recZ 0 P\"\nwhile it is expected to have type \"P OZ\".\n\nmake[2]: *** [Makefile.coq:663: Zrec.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zadd.v                                  *)\n(****************************************************************************)\n\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export Lci.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\n\n(* Addition on Z, (Z, +) is a group *)\n\n(*Recursive Definition addZ : Z -> Z -> Z := \n       OZ        y => y\n|   (pos O)      y => (succZ y)\n|   (pos (S n1)) y => (succZ (addZ (pos n1) y))\n|   (neg O)      y => (predZ y)\n|   (neg (S n1)) y => (predZ (addZ (neg n1) y)).*)\n\n\n(* this definition introduces unnecessary names *)\n\n\nFixpoint addpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => succZ x2\n  | S n0 => succZ (addpos x2 n0)\n  end.\n\nFixpoint addneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => predZ x2\n  | S n0 => predZ (addneg x2 n0)\n  end.\n\nDefinition addZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => x2\n  | pos n => addpos x2 n\n  | neg n => addneg x2 n\n  end.\n\n\n",
                "context_tokens": 421,
                "proof_start_offset": 2055,
                "proof_end_offset": 2129,
                "proof": "Lemma addZ_eq1 : forall y : Z, addZ OZ y = y.\nProof.\nauto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma addZ_eq1 : forall y : Z, addZ OZ y = y.\nProof.\n intros.\n rewrite <- (addneg_neg y).\n rewrite <- (addneg_neg y).\n rewrite <- (addneg_neg y).\n rewrite <- (addneg_neg y).\n rewrite <- (addneg_neg y).\n rewrite <- (addneg_neg y).\n rewrite <- (addneg_neg y).\n rewrite <- (addneg_neg y).\n rewrite <- (addneg_neg y).\n rewrite <- (addneg_neg y).\n rewrite <- (addneg_neg y).\n rewrite <- (addneg_neg y).\n rewrite <- (addneg_neg y).\n rewrite <- (addneg_neg y).\n rewrite <- (addneg_neg y).\n rewrite <- (addneg_neg y).\n rewrite <- (addneg_neg y).\n rewrite <- (addneg_neg y).\n rewrite <- (addneg_neg y).\n rewrite <- (addneg_neg y).\n rewrite <- (addneg_neg y).\n rewrite <- (addneg_neg y).\n rewrite <- (addneg_neg y).\n rewrite <- (addneg_neg y).\n rewrite <- (addneg_neg y).Qed.",
                        "correct": false,
                        "error_msg": "Warning: -extra and -extra-phony are deprecated.\nWarning: Write the extra targets in Makefile.coq.local.\n\nFile \"./Zadd.v\", line 62, characters 13-23:\nError: The reference addneg_neg was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zadd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zadd.v                                  *)\n(****************************************************************************)\n\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export Lci.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\n\n(* Addition on Z, (Z, +) is a group *)\n\n(*Recursive Definition addZ : Z -> Z -> Z := \n       OZ        y => y\n|   (pos O)      y => (succZ y)\n|   (pos (S n1)) y => (succZ (addZ (pos n1) y))\n|   (neg O)      y => (predZ y)\n|   (neg (S n1)) y => (predZ (addZ (neg n1) y)).*)\n\n\n(* this definition introduces unnecessary names *)\n\n\nFixpoint addpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => succZ x2\n  | S n0 => succZ (addpos x2 n0)\n  end.\n\nFixpoint addneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => predZ x2\n  | S n0 => predZ (addneg x2 n0)\n  end.\n\nDefinition addZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => x2\n  | pos n => addpos x2 n\n  | neg n => addneg x2 n\n  end.\n\n\nLemma addZ_eq1 : forall y : Z, addZ OZ y = y.\nProof.\nauto with arith.\nQed.\n\n",
                "context_tokens": 451,
                "proof_start_offset": 2131,
                "proof_end_offset": 2216,
                "proof": "Lemma addZ_eq2 : forall y : Z, addZ (pos 0) y = succZ y.\nProof.\nauto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma addZ_eq2 : forall y : Z, addZ (pos 0) y = succZ y.\nProof.\nauto with arith.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zadd.v                                  *)\n(****************************************************************************)\n\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export Lci.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\n\n(* Addition on Z, (Z, +) is a group *)\n\n(*Recursive Definition addZ : Z -> Z -> Z := \n       OZ        y => y\n|   (pos O)      y => (succZ y)\n|   (pos (S n1)) y => (succZ (addZ (pos n1) y))\n|   (neg O)      y => (predZ y)\n|   (neg (S n1)) y => (predZ (addZ (neg n1) y)).*)\n\n\n(* this definition introduces unnecessary names *)\n\n\nFixpoint addpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => succZ x2\n  | S n0 => succZ (addpos x2 n0)\n  end.\n\nFixpoint addneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => predZ x2\n  | S n0 => predZ (addneg x2 n0)\n  end.\n\nDefinition addZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => x2\n  | pos n => addpos x2 n\n  | neg n => addneg x2 n\n  end.\n\n\nLemma addZ_eq1 : forall y : Z, addZ OZ y = y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq2 : forall y : Z, addZ (pos 0) y = succZ y.\nProof.\nauto with arith.\nQed.\n\n",
                "context_tokens": 486,
                "proof_start_offset": 2218,
                "proof_end_offset": 2338,
                "proof": "Lemma addZ_eq3 : forall (n1 : nat) (y : Z), addZ (pos (S n1)) y = succZ (addZ (pos n1) y).\nProof.\nauto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma addZ_eq3 : forall (n1 : nat) (y : Z), addZ (pos (S n1)) y = succZ (addZ (pos n1) y).\nProof.\nauto with arith.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zadd.v                                  *)\n(****************************************************************************)\n\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export Lci.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\n\n(* Addition on Z, (Z, +) is a group *)\n\n(*Recursive Definition addZ : Z -> Z -> Z := \n       OZ        y => y\n|   (pos O)      y => (succZ y)\n|   (pos (S n1)) y => (succZ (addZ (pos n1) y))\n|   (neg O)      y => (predZ y)\n|   (neg (S n1)) y => (predZ (addZ (neg n1) y)).*)\n\n\n(* this definition introduces unnecessary names *)\n\n\nFixpoint addpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => succZ x2\n  | S n0 => succZ (addpos x2 n0)\n  end.\n\nFixpoint addneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => predZ x2\n  | S n0 => predZ (addneg x2 n0)\n  end.\n\nDefinition addZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => x2\n  | pos n => addpos x2 n\n  | neg n => addneg x2 n\n  end.\n\n\nLemma addZ_eq1 : forall y : Z, addZ OZ y = y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq2 : forall y : Z, addZ (pos 0) y = succZ y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq3 :\n forall (n1 : nat) (y : Z), addZ (pos (S n1)) y = succZ (addZ (pos n1) y).\nProof.\nauto with arith.\nQed.\n\n",
                "context_tokens": 539,
                "proof_start_offset": 2340,
                "proof_end_offset": 2425,
                "proof": "Lemma addZ_eq4 : forall y : Z, addZ (neg 0) y = predZ y.\nProof.\nauto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma addZ_eq4 : forall y : Z, addZ (neg 0) y = predZ y.\nProof.\nauto with arith.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": "***************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zadd.v                                  *)\n(****************************************************************************)\n\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export Lci.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\n\n(* Addition on Z, (Z, +) is a group *)\n\n(*Recursive Definition addZ : Z -> Z -> Z := \n       OZ        y => y\n|   (pos O)      y => (succZ y)\n|   (pos (S n1)) y => (succZ (addZ (pos n1) y))\n|   (neg O)      y => (predZ y)\n|   (neg (S n1)) y => (predZ (addZ (neg n1) y)).*)\n\n\n(* this definition introduces unnecessary names *)\n\n\nFixpoint addpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => succZ x2\n  | S n0 => succZ (addpos x2 n0)\n  end.\n\nFixpoint addneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => predZ x2\n  | S n0 => predZ (addneg x2 n0)\n  end.\n\nDefinition addZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => x2\n  | pos n => addpos x2 n\n  | neg n => addneg x2 n\n  end.\n\n\nLemma addZ_eq1 : forall y : Z, addZ OZ y = y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq2 : forall y : Z, addZ (pos 0) y = succZ y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq3 :\n forall (n1 : nat) (y : Z), addZ (pos (S n1)) y = succZ (addZ (pos n1) y).\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq4 : forall y : Z, addZ (neg 0) y = predZ y.\nProof.\nauto with arith.\nQed.\n\n",
                "context_tokens": 555,
                "proof_start_offset": 2427,
                "proof_end_offset": 2547,
                "proof": "Lemma addZ_eq5 : forall (n1 : nat) (y : Z), addZ (neg (S n1)) y = predZ (addZ (neg n1) y).\nProof.\nauto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma addZ_eq5 : forall (n1 : nat) (y : Z), addZ (neg (S n1)) y = predZ (addZ (neg n1) y).\nProof.\nauto with arith.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": "      *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zadd.v                                  *)\n(****************************************************************************)\n\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export Lci.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\n\n(* Addition on Z, (Z, +) is a group *)\n\n(*Recursive Definition addZ : Z -> Z -> Z := \n       OZ        y => y\n|   (pos O)      y => (succZ y)\n|   (pos (S n1)) y => (succZ (addZ (pos n1) y))\n|   (neg O)      y => (predZ y)\n|   (neg (S n1)) y => (predZ (addZ (neg n1) y)).*)\n\n\n(* this definition introduces unnecessary names *)\n\n\nFixpoint addpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => succZ x2\n  | S n0 => succZ (addpos x2 n0)\n  end.\n\nFixpoint addneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => predZ x2\n  | S n0 => predZ (addneg x2 n0)\n  end.\n\nDefinition addZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => x2\n  | pos n => addpos x2 n\n  | neg n => addneg x2 n\n  end.\n\n\nLemma addZ_eq1 : forall y : Z, addZ OZ y = y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq2 : forall y : Z, addZ (pos 0) y = succZ y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq3 :\n forall (n1 : nat) (y : Z), addZ (pos (S n1)) y = succZ (addZ (pos n1) y).\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq4 : forall y : Z, addZ (neg 0) y = predZ y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq5 :\n forall (n1 : nat) (y : Z), addZ (neg (S n1)) y = predZ (addZ (neg n1) y).\nProof.\nauto with arith.\nQed.\n\n\n\n(***************)\n",
                "context_tokens": 601,
                "proof_start_offset": 2569,
                "proof_end_offset": 2886,
                "proof": "Lemma succ_addZ_l : forall x y : Z, addZ (succZ x) y = succZ (addZ x y).\nProof.\nintros; elim x.\nreflexivity.\ntrivial.\nsimple destruct n.\nsimpl in |- *; symmetry in |- *; exact (succ_predZ y).\nintros; symmetry in |- *; rewrite addZ_eq5.\napply succ_predZ.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma succ_addZ_l : forall x y : Z, addZ (succZ x) y = succZ (addZ x y).\nProof.\nauto with arith.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zadd.v\", line 92, characters 0-4:\nError: Attempt to save an incomplete proof (in proof succ_addZ_l)\n\nmake[2]: *** [Makefile.coq:663: Zadd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": "    Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zadd.v                                  *)\n(****************************************************************************)\n\nRequire Export Arith.\nRequire Export Nat_complements.\nRequire Export Lci.\nRequire Export groups.\nRequire Export rings.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\n\n(* Addition on Z, (Z, +) is a group *)\n\n(*Recursive Definition addZ : Z -> Z -> Z := \n       OZ        y => y\n|   (pos O)      y => (succZ y)\n|   (pos (S n1)) y => (succZ (addZ (pos n1) y))\n|   (neg O)      y => (predZ y)\n|   (neg (S n1)) y => (predZ (addZ (neg n1) y)).*)\n\n\n(* this definition introduces unnecessary names *)\n\n\nFixpoint addpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => succZ x2\n  | S n0 => succZ (addpos x2 n0)\n  end.\n\nFixpoint addneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => predZ x2\n  | S n0 => predZ (addneg x2 n0)\n  end.\n\nDefinition addZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => x2\n  | pos n => addpos x2 n\n  | neg n => addneg x2 n\n  end.\n\n\nLemma addZ_eq1 : forall y : Z, addZ OZ y = y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq2 : forall y : Z, addZ (pos 0) y = succZ y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq3 :\n forall (n1 : nat) (y : Z), addZ (pos (S n1)) y = succZ (addZ (pos n1) y).\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq4 : forall y : Z, addZ (neg 0) y = predZ y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq5 :\n forall (n1 : nat) (y : Z), addZ (neg (S n1)) y = predZ (addZ (neg n1) y).\nProof.\nauto with arith.\nQed.\n\n\n\n(***************)\nLemma succ_addZ_l : forall x y : Z, addZ (succZ x) y = succZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\ntrivial.\n(* neg n *)\nsimple destruct n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (succ_predZ y). \n(* neg (S n0) *)\nintros; symmetry  in |- *; rewrite addZ_eq5.\napply succ_predZ.\nQed.\n\n(***************)\n",
                "context_tokens": 691,
                "proof_start_offset": 2906,
                "proof_end_offset": 3161,
                "proof": "Lemma pred_addZ_l : forall x y : Z, addZ (predZ x) y = predZ (addZ x y).\nProof.\nintros; elim x.\nreflexivity.\nsimple destruct n.\nsimpl in |- *; rewrite pred_succZ; trivial.\nintros; rewrite addZ_eq3; rewrite pred_succZ; trivial.\ntrivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma pred_addZ_l : forall x y : Z, addZ (predZ x) y = predZ (addZ x y).\nProof.\nauto with arith.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zadd.v\", line 109, characters 0-4:\nError: Attempt to save an incomplete proof (in proof pred_addZ_l)\n\nmake[2]: *** [Makefile.coq:663: Zadd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": " (addZ (pos n1) y))\n|   (neg O)      y => (predZ y)\n|   (neg (S n1)) y => (predZ (addZ (neg n1) y)).*)\n\n\n(* this definition introduces unnecessary names *)\n\n\nFixpoint addpos (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => succZ x2\n  | S n0 => succZ (addpos x2 n0)\n  end.\n\nFixpoint addneg (x2 : Z) (n : nat) {struct n} : Z :=\n  match n with\n  | O => predZ x2\n  | S n0 => predZ (addneg x2 n0)\n  end.\n\nDefinition addZ (x1 x2 : Z) :=\n  match x1 with\n  | OZ => x2\n  | pos n => addpos x2 n\n  | neg n => addneg x2 n\n  end.\n\n\nLemma addZ_eq1 : forall y : Z, addZ OZ y = y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq2 : forall y : Z, addZ (pos 0) y = succZ y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq3 :\n forall (n1 : nat) (y : Z), addZ (pos (S n1)) y = succZ (addZ (pos n1) y).\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq4 : forall y : Z, addZ (neg 0) y = predZ y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq5 :\n forall (n1 : nat) (y : Z), addZ (neg (S n1)) y = predZ (addZ (neg n1) y).\nProof.\nauto with arith.\nQed.\n\n\n\n(***************)\nLemma succ_addZ_l : forall x y : Z, addZ (succZ x) y = succZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\ntrivial.\n(* neg n *)\nsimple destruct n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (succ_predZ y). \n(* neg (S n0) *)\nintros; symmetry  in |- *; rewrite addZ_eq5.\napply succ_predZ.\nQed.\n\n(***************)\nLemma pred_addZ_l : forall x y : Z, addZ (predZ x) y = predZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple destruct n.\nsimpl in |- *; rewrite pred_succZ; trivial.\nintros; rewrite addZ_eq3; rewrite pred_succZ; trivial.\ntrivial.\nQed.\n\n(**********************)\nLemma tech_add_pos_succZ :\n forall (x : nat) (y : Z), addZ (pos (S x)) y = succZ (addZ (pos x) y).\nProof addZ_eq3.\n\n(**********************)\nLemma tech_add_neg_predZ :\n forall (x : nat) (y : Z), addZ (neg (S x)) y = predZ (addZ (neg x) y).\nProof addZ_eq5.\n\n(***************)\n",
                "context_tokens": 730,
                "proof_start_offset": 3463,
                "proof_end_offset": 3939,
                "proof": "Lemma succ_addZ_r : forall x y : Z, addZ x (succZ y) = succZ (addZ x y).\nProof.\nintros; elim x.\nreflexivity.\nsimple induction n.\nreflexivity.\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nelim H; reflexivity.\nsimple induction n.\nsimpl in |- *; symmetry in |- *; apply succ_pred_pred_succZ.\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nrewrite H.\nsymmetry in |- *; apply succ_pred_pred_succZ.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma succ_addZ_r : forall x y : Z, addZ x (succZ y) = succZ (addZ x y).\nProof ptc_opp_neg_predZ.\n\n(* pos n *)\nsimple destruct n.\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (succ_discr (pred_addZ_r x y)).\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (succ_discr (pred_addZ_r x y)).\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (succ_discr (pred_addZ_r x y)).\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (succ_discr (pred_addZ_r x y)).\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (succ_discr (pred_addZ_r x y)).\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (succ_discr (pred_addZ_r x y)).\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (succ_discr (pred_addZ_r x y)).\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (succ_discr (pred_addZ_r x y)).\n(* posQed.",
                        "correct": false,
                        "error_msg": "File \"./Zadd.v\", line 130, characters 6-23:\nError: The reference ptc_opp_neg_predZ was not found in the current\nenvironment.\n\nmake[2]: *** [Makefile.coq:663: Zadd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": " Z) :=\n  match x1 with\n  | OZ => x2\n  | pos n => addpos x2 n\n  | neg n => addneg x2 n\n  end.\n\n\nLemma addZ_eq1 : forall y : Z, addZ OZ y = y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq2 : forall y : Z, addZ (pos 0) y = succZ y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq3 :\n forall (n1 : nat) (y : Z), addZ (pos (S n1)) y = succZ (addZ (pos n1) y).\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq4 : forall y : Z, addZ (neg 0) y = predZ y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq5 :\n forall (n1 : nat) (y : Z), addZ (neg (S n1)) y = predZ (addZ (neg n1) y).\nProof.\nauto with arith.\nQed.\n\n\n\n(***************)\nLemma succ_addZ_l : forall x y : Z, addZ (succZ x) y = succZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\ntrivial.\n(* neg n *)\nsimple destruct n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (succ_predZ y). \n(* neg (S n0) *)\nintros; symmetry  in |- *; rewrite addZ_eq5.\napply succ_predZ.\nQed.\n\n(***************)\nLemma pred_addZ_l : forall x y : Z, addZ (predZ x) y = predZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple destruct n.\nsimpl in |- *; rewrite pred_succZ; trivial.\nintros; rewrite addZ_eq3; rewrite pred_succZ; trivial.\ntrivial.\nQed.\n\n(**********************)\nLemma tech_add_pos_succZ :\n forall (x : nat) (y : Z), addZ (pos (S x)) y = succZ (addZ (pos x) y).\nProof addZ_eq3.\n\n(**********************)\nLemma tech_add_neg_predZ :\n forall (x : nat) (y : Z), addZ (neg (S x)) y = predZ (addZ (neg x) y).\nProof addZ_eq5.\n\n(***************)\nLemma succ_addZ_r : forall x y : Z, addZ x (succZ y) = succZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nreflexivity.\n(* pos y0 *)\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nelim H; reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; apply succ_pred_pred_succZ.\n(* neg y0 *)\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nrewrite H.\nsymmetry  in |- *; apply succ_pred_pred_succZ.\nQed.\n\n(***************)\n",
                "context_tokens": 731,
                "proof_start_offset": 3959,
                "proof_end_offset": 4411,
                "proof": "Lemma pred_addZ_r : forall x y : Z, addZ x (predZ y) = predZ (addZ x y).\nProof.\nintros; elim x.\nreflexivity.\nsimple induction n.\nsimpl in |- *; apply succ_pred_pred_succZ.\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nrewrite H; apply succ_pred_pred_succZ.\nsimple induction n.\nreflexivity.\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nelim H; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma pred_addZ_r : forall x y : Z, addZ x (predZ y) = predZ (addZ x y).\nProof Abelian_add_neg_ Scope forall x y : Z, lngen (addZ x y) = succZ (addZ x y).\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zadd.v\", line 155, characters 29-35:\nError: Syntax error: '.' expected after [vernac:command] (in [vernac_aux]).\n\nmake[2]: *** [Makefile.coq:663: Zadd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": " : forall y : Z, addZ (neg 0) y = predZ y.\nProof.\nauto with arith.\nQed.\n\nLemma addZ_eq5 :\n forall (n1 : nat) (y : Z), addZ (neg (S n1)) y = predZ (addZ (neg n1) y).\nProof.\nauto with arith.\nQed.\n\n\n\n(***************)\nLemma succ_addZ_l : forall x y : Z, addZ (succZ x) y = succZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\ntrivial.\n(* neg n *)\nsimple destruct n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (succ_predZ y). \n(* neg (S n0) *)\nintros; symmetry  in |- *; rewrite addZ_eq5.\napply succ_predZ.\nQed.\n\n(***************)\nLemma pred_addZ_l : forall x y : Z, addZ (predZ x) y = predZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple destruct n.\nsimpl in |- *; rewrite pred_succZ; trivial.\nintros; rewrite addZ_eq3; rewrite pred_succZ; trivial.\ntrivial.\nQed.\n\n(**********************)\nLemma tech_add_pos_succZ :\n forall (x : nat) (y : Z), addZ (pos (S x)) y = succZ (addZ (pos x) y).\nProof addZ_eq3.\n\n(**********************)\nLemma tech_add_neg_predZ :\n forall (x : nat) (y : Z), addZ (neg (S x)) y = predZ (addZ (neg x) y).\nProof addZ_eq5.\n\n(***************)\nLemma succ_addZ_r : forall x y : Z, addZ x (succZ y) = succZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nreflexivity.\n(* pos y0 *)\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nelim H; reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; apply succ_pred_pred_succZ.\n(* neg y0 *)\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nrewrite H.\nsymmetry  in |- *; apply succ_pred_pred_succZ.\nQed.\n\n(***************)\nLemma pred_addZ_r : forall x y : Z, addZ x (predZ y) = predZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* (pos n) *)\nsimple induction n.\n(* (pos O) *)\nsimpl in |- *; apply succ_pred_pred_succZ.\n(* (pos (S y0)) *)\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nrewrite H; apply succ_pred_pred_succZ.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nreflexivity.\n(* neg (S y0) *)\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nelim H; reflexivity.\nQed.\n\n(***********)\n",
                "context_tokens": 741,
                "proof_start_offset": 4427,
                "proof_end_offset": 4728,
                "proof": "Lemma add_OZ : forall x : Z, addZ x OZ = x.\nProof.\nsimple induction x.\nreflexivity.\nsimple induction n.\nreflexivity.\nintros; rewrite tech_add_pos_succZ; rewrite H; reflexivity.\nsimple induction n.\nreflexivity.\nintros; rewrite tech_add_neg_predZ; rewrite H; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma add_OZ : forall x : Z, addZ x OZ = x.\nProof using add_predZ.\nunfold add_predZ.\nunfold add_predZ.\nunfold add_predZ.\nunfold add_neg at 1 in |- *; apply succ_pred_pred_predZ.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zadd.v\", line 179, characters 0-22:\nError: Unknown variable: add_predZ\n\nmake[2]: *** [Makefile.coq:663: Zadd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": ") y = succZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\ntrivial.\n(* neg n *)\nsimple destruct n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (succ_predZ y). \n(* neg (S n0) *)\nintros; symmetry  in |- *; rewrite addZ_eq5.\napply succ_predZ.\nQed.\n\n(***************)\nLemma pred_addZ_l : forall x y : Z, addZ (predZ x) y = predZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple destruct n.\nsimpl in |- *; rewrite pred_succZ; trivial.\nintros; rewrite addZ_eq3; rewrite pred_succZ; trivial.\ntrivial.\nQed.\n\n(**********************)\nLemma tech_add_pos_succZ :\n forall (x : nat) (y : Z), addZ (pos (S x)) y = succZ (addZ (pos x) y).\nProof addZ_eq3.\n\n(**********************)\nLemma tech_add_neg_predZ :\n forall (x : nat) (y : Z), addZ (neg (S x)) y = predZ (addZ (neg x) y).\nProof addZ_eq5.\n\n(***************)\nLemma succ_addZ_r : forall x y : Z, addZ x (succZ y) = succZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nreflexivity.\n(* pos y0 *)\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nelim H; reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; apply succ_pred_pred_succZ.\n(* neg y0 *)\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nrewrite H.\nsymmetry  in |- *; apply succ_pred_pred_succZ.\nQed.\n\n(***************)\nLemma pred_addZ_r : forall x y : Z, addZ x (predZ y) = predZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* (pos n) *)\nsimple induction n.\n(* (pos O) *)\nsimpl in |- *; apply succ_pred_pred_succZ.\n(* (pos (S y0)) *)\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nrewrite H; apply succ_pred_pred_succZ.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nreflexivity.\n(* neg (S y0) *)\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nelim H; reflexivity.\nQed.\n\n(***********)\nLemma add_OZ : forall x : Z, addZ x OZ = x.\n\nsimple induction x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\nreflexivity.\nintros; rewrite tech_add_pos_succZ; rewrite H; reflexivity.\n(* neg n *)\nsimple induction n.\nreflexivity.\nintros; rewrite tech_add_neg_predZ; rewrite H; reflexivity.\nQed.\n\n(*****************)\n",
                "context_tokens": 737,
                "proof_start_offset": 4750,
                "proof_end_offset": 4930,
                "proof": "Lemma add_IZ_succZ : forall x : Z, addZ x IZ = succZ x.\nProof.\nintros.\ncut (succZ OZ = IZ); intros.\nelim H.\nrewrite (succ_addZ_r x OZ); rewrite (add_OZ x); reflexivity.\nreflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma add_IZ_succZ : forall x : Z, addZ x IZ = succZ x.\nsimple induction x.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nsimple induction nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zadd.v\", line 203, characters 0-18:\nError:\nLtac call to \"simple induction (quant_hyp)\" failed.\nNo quantified hypothesis named n in current goal even after head-reduction.\n\nmake[2]: *** [Makefile.coq:663: Zadd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": "0) *)\nintros; symmetry  in |- *; rewrite addZ_eq5.\napply succ_predZ.\nQed.\n\n(***************)\nLemma pred_addZ_l : forall x y : Z, addZ (predZ x) y = predZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple destruct n.\nsimpl in |- *; rewrite pred_succZ; trivial.\nintros; rewrite addZ_eq3; rewrite pred_succZ; trivial.\ntrivial.\nQed.\n\n(**********************)\nLemma tech_add_pos_succZ :\n forall (x : nat) (y : Z), addZ (pos (S x)) y = succZ (addZ (pos x) y).\nProof addZ_eq3.\n\n(**********************)\nLemma tech_add_neg_predZ :\n forall (x : nat) (y : Z), addZ (neg (S x)) y = predZ (addZ (neg x) y).\nProof addZ_eq5.\n\n(***************)\nLemma succ_addZ_r : forall x y : Z, addZ x (succZ y) = succZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nreflexivity.\n(* pos y0 *)\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nelim H; reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; apply succ_pred_pred_succZ.\n(* neg y0 *)\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nrewrite H.\nsymmetry  in |- *; apply succ_pred_pred_succZ.\nQed.\n\n(***************)\nLemma pred_addZ_r : forall x y : Z, addZ x (predZ y) = predZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* (pos n) *)\nsimple induction n.\n(* (pos O) *)\nsimpl in |- *; apply succ_pred_pred_succZ.\n(* (pos (S y0)) *)\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nrewrite H; apply succ_pred_pred_succZ.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nreflexivity.\n(* neg (S y0) *)\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nelim H; reflexivity.\nQed.\n\n(***********)\nLemma add_OZ : forall x : Z, addZ x OZ = x.\n\nsimple induction x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\nreflexivity.\nintros; rewrite tech_add_pos_succZ; rewrite H; reflexivity.\n(* neg n *)\nsimple induction n.\nreflexivity.\nintros; rewrite tech_add_neg_predZ; rewrite H; reflexivity.\nQed.\n\n(*****************)\nLemma add_IZ_succZ : forall x : Z, addZ x IZ = succZ x.\n\nintros.\ncut (succZ OZ = IZ); intros. elim H.\nrewrite (succ_addZ_r x OZ); rewrite (add_OZ x); reflexivity.\nreflexivity.\nQed.\n\n(*****************)\n",
                "context_tokens": 734,
                "proof_start_offset": 4952,
                "proof_end_offset": 5141,
                "proof": "Lemma add_mIZ_predZ : forall x : Z, addZ x (neg 0) = predZ x.\nProof.\nintros.\ncut (predZ OZ = neg 0); intros.\nelim H.\nrewrite (pred_addZ_r x OZ); rewrite (add_OZ x); reflexivity.\nreflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma add_mIZ_predZ : forall x : Z, addZ x (neg 0) = predZ x.\nintros.\ncut (neg (S x) = neg (pred x)).\nintro.\nrewrite (pred_addZ_r x IZ); rewrite (add_comm (neg x)); reflexivity.\nreflexivity.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zadd.v\", line 205, characters 12-13:\nError:\nIn environment\nx : Z\nThe term \"x\" has type \"Z\" while it is expected to have type \"nat\".\n\nmake[2]: *** [Makefile.coq:663: Zadd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": "\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple destruct n.\nsimpl in |- *; rewrite pred_succZ; trivial.\nintros; rewrite addZ_eq3; rewrite pred_succZ; trivial.\ntrivial.\nQed.\n\n(**********************)\nLemma tech_add_pos_succZ :\n forall (x : nat) (y : Z), addZ (pos (S x)) y = succZ (addZ (pos x) y).\nProof addZ_eq3.\n\n(**********************)\nLemma tech_add_neg_predZ :\n forall (x : nat) (y : Z), addZ (neg (S x)) y = predZ (addZ (neg x) y).\nProof addZ_eq5.\n\n(***************)\nLemma succ_addZ_r : forall x y : Z, addZ x (succZ y) = succZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\n(* pos O *)\nreflexivity.\n(* pos y0 *)\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nelim H; reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; apply succ_pred_pred_succZ.\n(* neg y0 *)\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nrewrite H.\nsymmetry  in |- *; apply succ_pred_pred_succZ.\nQed.\n\n(***************)\nLemma pred_addZ_r : forall x y : Z, addZ x (predZ y) = predZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* (pos n) *)\nsimple induction n.\n(* (pos O) *)\nsimpl in |- *; apply succ_pred_pred_succZ.\n(* (pos (S y0)) *)\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nrewrite H; apply succ_pred_pred_succZ.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nreflexivity.\n(* neg (S y0) *)\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nelim H; reflexivity.\nQed.\n\n(***********)\nLemma add_OZ : forall x : Z, addZ x OZ = x.\n\nsimple induction x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\nreflexivity.\nintros; rewrite tech_add_pos_succZ; rewrite H; reflexivity.\n(* neg n *)\nsimple induction n.\nreflexivity.\nintros; rewrite tech_add_neg_predZ; rewrite H; reflexivity.\nQed.\n\n(*****************)\nLemma add_IZ_succZ : forall x : Z, addZ x IZ = succZ x.\n\nintros.\ncut (succZ OZ = IZ); intros. elim H.\nrewrite (succ_addZ_r x OZ); rewrite (add_OZ x); reflexivity.\nreflexivity.\nQed.\n\n(*****************)\nLemma add_mIZ_predZ : forall x : Z, addZ x (neg 0) = predZ x.\n\nintros.\ncut (predZ OZ = neg 0); intros. elim H.\nrewrite (pred_addZ_r x OZ); rewrite (add_OZ x); reflexivity.\nreflexivity.\nQed.\n\n(*************************)\n",
                "context_tokens": 748,
                "proof_start_offset": 5171,
                "proof_end_offset": 5905,
                "proof": "Theorem addZ_commutativity : commutativity Z addZ.\nProof.\nunfold commutativity in |- *; intros; elim x.\nsimpl in |- *; symmetry in |- *; exact (add_OZ y).\nsimple induction n.\nsimpl in |- *; symmetry in |- *; exact (add_IZ_succZ y).\nintros; rewrite (tech_add_pos_succZ n0 y).\nrewrite H.\ncut (succZ (pos n0) = pos (S n0)); intros.\nelim H0.\nrewrite (succ_addZ_r y (pos n0)); reflexivity.\nreflexivity.\nsimple induction n.\nsimpl in |- *; symmetry in |- *; exact (add_mIZ_predZ y).\nintros; rewrite (tech_add_neg_predZ n0 y).\nrewrite H.\ncut (predZ (neg n0) = neg (S n0)); intros.\nelim H0.\nrewrite (pred_addZ_r y (neg n0)); reflexivity.\nreflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem addZ_commutativity : commutativity Z addZ.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv in |- *.\nunfold Rdiv inQed.",
                        "correct": false,
                        "error_msg": "File \"./Zadd.v\", line 213, characters 7-11:\nError: The reference Rdiv was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zadd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": "intros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nrewrite H.\nsymmetry  in |- *; apply succ_pred_pred_succZ.\nQed.\n\n(***************)\nLemma pred_addZ_r : forall x y : Z, addZ x (predZ y) = predZ (addZ x y).\n\nintros; elim x.\n(* OZ *)\nreflexivity.\n(* (pos n) *)\nsimple induction n.\n(* (pos O) *)\nsimpl in |- *; apply succ_pred_pred_succZ.\n(* (pos (S y0)) *)\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nrewrite H; apply succ_pred_pred_succZ.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nreflexivity.\n(* neg (S y0) *)\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nelim H; reflexivity.\nQed.\n\n(***********)\nLemma add_OZ : forall x : Z, addZ x OZ = x.\n\nsimple induction x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\nreflexivity.\nintros; rewrite tech_add_pos_succZ; rewrite H; reflexivity.\n(* neg n *)\nsimple induction n.\nreflexivity.\nintros; rewrite tech_add_neg_predZ; rewrite H; reflexivity.\nQed.\n\n(*****************)\nLemma add_IZ_succZ : forall x : Z, addZ x IZ = succZ x.\n\nintros.\ncut (succZ OZ = IZ); intros. elim H.\nrewrite (succ_addZ_r x OZ); rewrite (add_OZ x); reflexivity.\nreflexivity.\nQed.\n\n(*****************)\nLemma add_mIZ_predZ : forall x : Z, addZ x (neg 0) = predZ x.\n\nintros.\ncut (predZ OZ = neg 0); intros. elim H.\nrewrite (pred_addZ_r x OZ); rewrite (add_OZ x); reflexivity.\nreflexivity.\nQed.\n\n(*************************)\nTheorem addZ_commutativity : commutativity Z addZ.\n\nunfold commutativity in |- *; intros; elim x.\n(* OZ *)\nsimpl in |- *; symmetry  in |- *; exact (add_OZ y).\n(* pos n *)\nsimple induction n.\n(* pos O *)\nsimpl in |- *; symmetry  in |- *; exact (add_IZ_succZ y).\n(* pos (S y0) *)\nintros; rewrite (tech_add_pos_succZ n0 y). rewrite H.\ncut (succZ (pos n0) = pos (S n0)); intros. elim H0.\nrewrite (succ_addZ_r y (pos n0)); reflexivity.\nreflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (add_mIZ_predZ y).\n(* neg (S y0) *)\nintros; rewrite (tech_add_neg_predZ n0 y). rewrite H.\ncut (predZ (neg n0) = neg (S n0)); intros. elim H0.\nrewrite (pred_addZ_r y (neg n0)); reflexivity.\nreflexivity.\nQed.\n\n(*************************)\n",
                "context_tokens": 710,
                "proof_start_offset": 5935,
                "proof_end_offset": 6461,
                "proof": "Lemma tech_add_pos_neg_posZ : forall n1 n2 : nat, n2 < n1 -> addZ (pos n1) (neg n2) = pos (n1 - S n2).\nProof.\nsimple induction n2.\nintros; elim (addZ_commutativity (neg 0) (pos n1)).\nrewrite addZ_eq4.\nelim minus_n_Sm; trivial.\nelim minus_n_O.\napply tech_pred_posZ; trivial.\nintros; elim (addZ_commutativity (neg (S n)) (pos n1)).\nrewrite tech_add_neg_predZ.\nelim (addZ_commutativity (pos n1) (neg n)).\nrewrite H; auto with arith.\nelim (minus_n_Sm n1 (S n) H0).\napply tech_pred_posZ.\napply lt_minus2; trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_add_pos_neg_posZ : forall n1 n2 : nat, n2 < n1 -> addZ (pos n1) (neg n2) = pos (n1 - S n2).\nintros.\nelim H.\nrewrite (pred_addZ_r x n1); rewrite H.\nrewrite (pred_addZ_r x n2); reflexivity.\nreflexivity.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zadd.v\", line 241, characters 21-22:\nError: The reference x was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zadd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": "reflexivity.\n(* neg (S y0) *)\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nelim H; reflexivity.\nQed.\n\n(***********)\nLemma add_OZ : forall x : Z, addZ x OZ = x.\n\nsimple induction x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple induction n.\nreflexivity.\nintros; rewrite tech_add_pos_succZ; rewrite H; reflexivity.\n(* neg n *)\nsimple induction n.\nreflexivity.\nintros; rewrite tech_add_neg_predZ; rewrite H; reflexivity.\nQed.\n\n(*****************)\nLemma add_IZ_succZ : forall x : Z, addZ x IZ = succZ x.\n\nintros.\ncut (succZ OZ = IZ); intros. elim H.\nrewrite (succ_addZ_r x OZ); rewrite (add_OZ x); reflexivity.\nreflexivity.\nQed.\n\n(*****************)\nLemma add_mIZ_predZ : forall x : Z, addZ x (neg 0) = predZ x.\n\nintros.\ncut (predZ OZ = neg 0); intros. elim H.\nrewrite (pred_addZ_r x OZ); rewrite (add_OZ x); reflexivity.\nreflexivity.\nQed.\n\n(*************************)\nTheorem addZ_commutativity : commutativity Z addZ.\n\nunfold commutativity in |- *; intros; elim x.\n(* OZ *)\nsimpl in |- *; symmetry  in |- *; exact (add_OZ y).\n(* pos n *)\nsimple induction n.\n(* pos O *)\nsimpl in |- *; symmetry  in |- *; exact (add_IZ_succZ y).\n(* pos (S y0) *)\nintros; rewrite (tech_add_pos_succZ n0 y). rewrite H.\ncut (succZ (pos n0) = pos (S n0)); intros. elim H0.\nrewrite (succ_addZ_r y (pos n0)); reflexivity.\nreflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (add_mIZ_predZ y).\n(* neg (S y0) *)\nintros; rewrite (tech_add_neg_predZ n0 y). rewrite H.\ncut (predZ (neg n0) = neg (S n0)); intros. elim H0.\nrewrite (pred_addZ_r y (neg n0)); reflexivity.\nreflexivity.\nQed.\n\n(*************************)\nLemma tech_add_pos_neg_posZ :\n forall n1 n2 : nat, n2 < n1 -> addZ (pos n1) (neg n2) = pos (n1 - S n2).\n\nsimple induction n2.\n(* O *)\nintros; elim (addZ_commutativity (neg 0) (pos n1)).\nrewrite addZ_eq4.\nelim minus_n_Sm; trivial.\nelim minus_n_O.\napply tech_pred_posZ; trivial.\n(* S y *)\nintros; elim (addZ_commutativity (neg (S n)) (pos n1)).\nrewrite tech_add_neg_predZ.\nelim (addZ_commutativity (pos n1) (neg n)).\nrewrite H; auto with arith.\nelim (minus_n_Sm n1 (S n) H0).\napply tech_pred_posZ.\napply lt_minus2; trivial.\nQed.\n\n(*************************)\n",
                "context_tokens": 748,
                "proof_start_offset": 6491,
                "proof_end_offset": 7092,
                "proof": "Theorem addZ_associativity : associativity Z addZ.\nProof.\nunfold associativity in |- *; intros; elim x.\nunfold addZ in |- *; reflexivity.\nintros; elim n.\nsimpl in |- *; symmetry in |- *; exact (succ_addZ_l y z).\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nrewrite (succ_addZ_l (addZ (pos n0) y) z); elim H; reflexivity.\nsimple induction n.\nsimpl in |- *; symmetry in |- *; exact (pred_addZ_l y z).\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nrewrite (pred_addZ_l (addZ (neg n0) y) z); elim H; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem addZ_associativity : associativity Z addZ.\nunfold Zminus in |- *; intros; elim x.\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (add_0_neg_posZ (pos n)).\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (add_0_neg_posZ (pos n)).\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (add_0_neg_posZ (pos n)).\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (add_0_neg_posZ (pos n)).\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (add_0_neg_posZ (pos n)).\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (add_0_neg_posZ (pos n)).\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (add_0_neg_posZ (pos n)).\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (add_0_neg_posZ (pos n)).\n(* pos n *)\nsimpl in |- *; symmetry  inQed.",
                        "correct": false,
                        "error_msg": "File \"./Zadd.v\", line 260, characters 7-13:\nError: The reference Zminus was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zadd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": ".\ncut (predZ OZ = neg 0); intros. elim H.\nrewrite (pred_addZ_r x OZ); rewrite (add_OZ x); reflexivity.\nreflexivity.\nQed.\n\n(*************************)\nTheorem addZ_commutativity : commutativity Z addZ.\n\nunfold commutativity in |- *; intros; elim x.\n(* OZ *)\nsimpl in |- *; symmetry  in |- *; exact (add_OZ y).\n(* pos n *)\nsimple induction n.\n(* pos O *)\nsimpl in |- *; symmetry  in |- *; exact (add_IZ_succZ y).\n(* pos (S y0) *)\nintros; rewrite (tech_add_pos_succZ n0 y). rewrite H.\ncut (succZ (pos n0) = pos (S n0)); intros. elim H0.\nrewrite (succ_addZ_r y (pos n0)); reflexivity.\nreflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (add_mIZ_predZ y).\n(* neg (S y0) *)\nintros; rewrite (tech_add_neg_predZ n0 y). rewrite H.\ncut (predZ (neg n0) = neg (S n0)); intros. elim H0.\nrewrite (pred_addZ_r y (neg n0)); reflexivity.\nreflexivity.\nQed.\n\n(*************************)\nLemma tech_add_pos_neg_posZ :\n forall n1 n2 : nat, n2 < n1 -> addZ (pos n1) (neg n2) = pos (n1 - S n2).\n\nsimple induction n2.\n(* O *)\nintros; elim (addZ_commutativity (neg 0) (pos n1)).\nrewrite addZ_eq4.\nelim minus_n_Sm; trivial.\nelim minus_n_O.\napply tech_pred_posZ; trivial.\n(* S y *)\nintros; elim (addZ_commutativity (neg (S n)) (pos n1)).\nrewrite tech_add_neg_predZ.\nelim (addZ_commutativity (pos n1) (neg n)).\nrewrite H; auto with arith.\nelim (minus_n_Sm n1 (S n) H0).\napply tech_pred_posZ.\napply lt_minus2; trivial.\nQed.\n\n(*************************)\nTheorem addZ_associativity : associativity Z addZ.\n\nunfold associativity in |- *; intros; elim x.\n(* OZ *)\nunfold addZ in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos O *)\nsimpl in |- *; symmetry  in |- *; exact (succ_addZ_l y z).\n(* pos (S y0) *)\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nrewrite (succ_addZ_l (addZ (pos n0) y) z); elim H; reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (pred_addZ_l y z).\n(* neg (S n0) *)\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nrewrite (pred_addZ_l (addZ (neg n0) y) z); elim H; reflexivity.\nQed.\n\n(************)\nDefinition IdZ (x : Z) := True.\n\n(*******************)\n",
                "context_tokens": 745,
                "proof_start_offset": 7164,
                "proof_end_offset": 7330,
                "proof": "Theorem addZ_neutral : neutral Z IdZ addZ OZ.\nProof.\nunfold neutral in |- *; intros.\nsplit.\nexact I.\nintros.\nsplit.\nexact (add_OZ x).\nunfold addZ in |- *; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem addZ_neutral : neutral Z IdZ addZ OZ.\nunfold absZ in |- *; intros; elim x.\n(* pos n *)\nsimpl in |- *; symmetry  in |- *; exact (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutive (opp_involutiveQed.",
                        "correct": false,
                        "error_msg": "File \"./Zadd.v\", line 287, characters 34-35:\nError: The reference x was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zadd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": "\n(* pos (S y0) *)\nintros; rewrite (tech_add_pos_succZ n0 y). rewrite H.\ncut (succZ (pos n0) = pos (S n0)); intros. elim H0.\nrewrite (succ_addZ_r y (pos n0)); reflexivity.\nreflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (add_mIZ_predZ y).\n(* neg (S y0) *)\nintros; rewrite (tech_add_neg_predZ n0 y). rewrite H.\ncut (predZ (neg n0) = neg (S n0)); intros. elim H0.\nrewrite (pred_addZ_r y (neg n0)); reflexivity.\nreflexivity.\nQed.\n\n(*************************)\nLemma tech_add_pos_neg_posZ :\n forall n1 n2 : nat, n2 < n1 -> addZ (pos n1) (neg n2) = pos (n1 - S n2).\n\nsimple induction n2.\n(* O *)\nintros; elim (addZ_commutativity (neg 0) (pos n1)).\nrewrite addZ_eq4.\nelim minus_n_Sm; trivial.\nelim minus_n_O.\napply tech_pred_posZ; trivial.\n(* S y *)\nintros; elim (addZ_commutativity (neg (S n)) (pos n1)).\nrewrite tech_add_neg_predZ.\nelim (addZ_commutativity (pos n1) (neg n)).\nrewrite H; auto with arith.\nelim (minus_n_Sm n1 (S n) H0).\napply tech_pred_posZ.\napply lt_minus2; trivial.\nQed.\n\n(*************************)\nTheorem addZ_associativity : associativity Z addZ.\n\nunfold associativity in |- *; intros; elim x.\n(* OZ *)\nunfold addZ in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos O *)\nsimpl in |- *; symmetry  in |- *; exact (succ_addZ_l y z).\n(* pos (S y0) *)\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nrewrite (succ_addZ_l (addZ (pos n0) y) z); elim H; reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (pred_addZ_l y z).\n(* neg (S n0) *)\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nrewrite (pred_addZ_l (addZ (neg n0) y) z); elim H; reflexivity.\nQed.\n\n(************)\nDefinition IdZ (x : Z) := True.\n\n(*******************)\nTheorem addZ_neutral : neutral Z IdZ addZ OZ.\n\nunfold neutral in |- *; intros.\nsplit. exact I.\nintros. split. exact (add_OZ x). unfold addZ in |- *; reflexivity.\nQed.\n\n(*************)\nDefinition oppZ (x : Z) :=\n  match x return Z with\n  | OZ =>\n      (* OZ *)  OZ\n      (* pos n *) \n  | pos n => neg n\n      (* neg n *) \n  | neg n => pos n\n  end.\n\n(*************)\n",
                "context_tokens": 734,
                "proof_start_offset": 7528,
                "proof_end_offset": 7725,
                "proof": "Lemma opp_succZ : forall x : Z, oppZ (succZ x) = predZ (oppZ x).\nProof.\nsimple destruct x.\nreflexivity.\nintros; reflexivity.\nsimple destruct n; intros; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma opp_succZ : forall x : Z, oppZ (succZ x) = predZ (oppZ x).\nProof.\nunfold oppZ in |- *; intros.\nrewrite <- opp_involutive; rewrite opp_involutive; rewrite opp_involutive; ring.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zadd.v\", line 308, characters 11-25:\nError: The reference opp_involutive was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zadd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": "(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (add_mIZ_predZ y).\n(* neg (S y0) *)\nintros; rewrite (tech_add_neg_predZ n0 y). rewrite H.\ncut (predZ (neg n0) = neg (S n0)); intros. elim H0.\nrewrite (pred_addZ_r y (neg n0)); reflexivity.\nreflexivity.\nQed.\n\n(*************************)\nLemma tech_add_pos_neg_posZ :\n forall n1 n2 : nat, n2 < n1 -> addZ (pos n1) (neg n2) = pos (n1 - S n2).\n\nsimple induction n2.\n(* O *)\nintros; elim (addZ_commutativity (neg 0) (pos n1)).\nrewrite addZ_eq4.\nelim minus_n_Sm; trivial.\nelim minus_n_O.\napply tech_pred_posZ; trivial.\n(* S y *)\nintros; elim (addZ_commutativity (neg (S n)) (pos n1)).\nrewrite tech_add_neg_predZ.\nelim (addZ_commutativity (pos n1) (neg n)).\nrewrite H; auto with arith.\nelim (minus_n_Sm n1 (S n) H0).\napply tech_pred_posZ.\napply lt_minus2; trivial.\nQed.\n\n(*************************)\nTheorem addZ_associativity : associativity Z addZ.\n\nunfold associativity in |- *; intros; elim x.\n(* OZ *)\nunfold addZ in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos O *)\nsimpl in |- *; symmetry  in |- *; exact (succ_addZ_l y z).\n(* pos (S y0) *)\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nrewrite (succ_addZ_l (addZ (pos n0) y) z); elim H; reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (pred_addZ_l y z).\n(* neg (S n0) *)\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nrewrite (pred_addZ_l (addZ (neg n0) y) z); elim H; reflexivity.\nQed.\n\n(************)\nDefinition IdZ (x : Z) := True.\n\n(*******************)\nTheorem addZ_neutral : neutral Z IdZ addZ OZ.\n\nunfold neutral in |- *; intros.\nsplit. exact I.\nintros. split. exact (add_OZ x). unfold addZ in |- *; reflexivity.\nQed.\n\n(*************)\nDefinition oppZ (x : Z) :=\n  match x return Z with\n  | OZ =>\n      (* OZ *)  OZ\n      (* pos n *) \n  | pos n => neg n\n      (* neg n *) \n  | neg n => pos n\n  end.\n\n(*************)\nLemma opp_succZ : forall x : Z, oppZ (succZ x) = predZ (oppZ x).\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nintros; reflexivity.\n(* neg n *)\nsimple destruct n; intros; reflexivity. \nQed.\n\n(*************)\n",
                "context_tokens": 733,
                "proof_start_offset": 7743,
                "proof_end_offset": 7940,
                "proof": "Lemma opp_predZ : forall x : Z, oppZ (predZ x) = succZ (oppZ x).\nProof.\nsimple destruct x.\nreflexivity.\nsimple destruct n; intros; reflexivity.\nintros; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma opp_predZ : forall x : Z, oppZ (predZ x) = succZ (oppZ x).\nsimple destruct x.\n(* pos n *)\nreflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* posQed.",
                        "correct": false,
                        "error_msg": "File \"./Zadd.v\", line 322, characters 8-19:\nError: In environment\nx : Z\nn : nat\nUnable to unify \"succZ (oppZ (pos n))\" with \"oppZ (predZ (pos n))\".\n\nmake[2]: *** [Makefile.coq:663: Zadd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": " neg (S n0)); intros. elim H0.\nrewrite (pred_addZ_r y (neg n0)); reflexivity.\nreflexivity.\nQed.\n\n(*************************)\nLemma tech_add_pos_neg_posZ :\n forall n1 n2 : nat, n2 < n1 -> addZ (pos n1) (neg n2) = pos (n1 - S n2).\n\nsimple induction n2.\n(* O *)\nintros; elim (addZ_commutativity (neg 0) (pos n1)).\nrewrite addZ_eq4.\nelim minus_n_Sm; trivial.\nelim minus_n_O.\napply tech_pred_posZ; trivial.\n(* S y *)\nintros; elim (addZ_commutativity (neg (S n)) (pos n1)).\nrewrite tech_add_neg_predZ.\nelim (addZ_commutativity (pos n1) (neg n)).\nrewrite H; auto with arith.\nelim (minus_n_Sm n1 (S n) H0).\napply tech_pred_posZ.\napply lt_minus2; trivial.\nQed.\n\n(*************************)\nTheorem addZ_associativity : associativity Z addZ.\n\nunfold associativity in |- *; intros; elim x.\n(* OZ *)\nunfold addZ in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos O *)\nsimpl in |- *; symmetry  in |- *; exact (succ_addZ_l y z).\n(* pos (S y0) *)\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nrewrite (succ_addZ_l (addZ (pos n0) y) z); elim H; reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (pred_addZ_l y z).\n(* neg (S n0) *)\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nrewrite (pred_addZ_l (addZ (neg n0) y) z); elim H; reflexivity.\nQed.\n\n(************)\nDefinition IdZ (x : Z) := True.\n\n(*******************)\nTheorem addZ_neutral : neutral Z IdZ addZ OZ.\n\nunfold neutral in |- *; intros.\nsplit. exact I.\nintros. split. exact (add_OZ x). unfold addZ in |- *; reflexivity.\nQed.\n\n(*************)\nDefinition oppZ (x : Z) :=\n  match x return Z with\n  | OZ =>\n      (* OZ *)  OZ\n      (* pos n *) \n  | pos n => neg n\n      (* neg n *) \n  | neg n => pos n\n  end.\n\n(*************)\nLemma opp_succZ : forall x : Z, oppZ (succZ x) = predZ (oppZ x).\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nintros; reflexivity.\n(* neg n *)\nsimple destruct n; intros; reflexivity. \nQed.\n\n(*************)\nLemma opp_predZ : forall x : Z, oppZ (predZ x) = succZ (oppZ x).\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple destruct n; intros; reflexivity. \n(* neg n *)\nintros; reflexivity.\nQed.\n\n(*********************)\n",
                "context_tokens": 730,
                "proof_start_offset": 7966,
                "proof_end_offset": 8159,
                "proof": "Lemma tech_add_pos_negZ : forall n : nat, addZ (pos n) (neg n) = OZ.\nProof.\nsimple induction n.\nreflexivity.\nintros; rewrite (tech_add_pos_succZ n0).\nelim succ_addZ_r; exact H.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_add_pos_negZ : forall n : nat, addZ (pos n) (neg n) = OZ.\nsimple destruct n; simpl in |- *; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nsimple destruct n; intros; reflexivity.\n(* pos n *)\nsimple destruct n; intros; reflexivity.\n(* pos n *)\nsimple destruct n; intros; reflexivity.\n(* pos n *)\nsimple destruct n; intros; reflexivity.\n(* pos n *)\nsimple destruct n; intros; reflexivity.\n(* pos n *)\nsimple destruct n; intros; reflexivity.\n(* pos n *)\nsimple destruct n; intros; reflexivity.\n(* pos n *)\nsimple destruct n; intros; reflexivity.\n(* pos n *)\nsimple destruct n; intros; reflexivity.\n(* pos n *)\nsimple destruct n; intros; reflexivity.\n(* pos n *)\nsimple destruct n; intros; reflexivity.\n(* pos n *)\nsimple destruct n; intros; reflexivity.\n(* pos n *)\nsimple destruct n; intros; reflexivity.\n(* pos n *)\nsimple destruct n; intros; reflexivity.\n(* pos n *)\nsimple destruct n; intros; reflexivity.\n(* pos n *)\nsimple destruct n; intros; reflexivity.\n(* pos n *)\nsimple destruct n; introsQed.",
                        "correct": false,
                        "error_msg": "File \"./Zadd.v\", line 330, characters 34-45:\nError: In environment\nn, n0 : nat\nUnable to unify \"OZ\" with \"succZ (addpos (neg (S n0)) n0)\".\n\nmake[2]: *** [Makefile.coq:663: Zadd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": " pos (n1 - S n2).\n\nsimple induction n2.\n(* O *)\nintros; elim (addZ_commutativity (neg 0) (pos n1)).\nrewrite addZ_eq4.\nelim minus_n_Sm; trivial.\nelim minus_n_O.\napply tech_pred_posZ; trivial.\n(* S y *)\nintros; elim (addZ_commutativity (neg (S n)) (pos n1)).\nrewrite tech_add_neg_predZ.\nelim (addZ_commutativity (pos n1) (neg n)).\nrewrite H; auto with arith.\nelim (minus_n_Sm n1 (S n) H0).\napply tech_pred_posZ.\napply lt_minus2; trivial.\nQed.\n\n(*************************)\nTheorem addZ_associativity : associativity Z addZ.\n\nunfold associativity in |- *; intros; elim x.\n(* OZ *)\nunfold addZ in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos O *)\nsimpl in |- *; symmetry  in |- *; exact (succ_addZ_l y z).\n(* pos (S y0) *)\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nrewrite (succ_addZ_l (addZ (pos n0) y) z); elim H; reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (pred_addZ_l y z).\n(* neg (S n0) *)\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nrewrite (pred_addZ_l (addZ (neg n0) y) z); elim H; reflexivity.\nQed.\n\n(************)\nDefinition IdZ (x : Z) := True.\n\n(*******************)\nTheorem addZ_neutral : neutral Z IdZ addZ OZ.\n\nunfold neutral in |- *; intros.\nsplit. exact I.\nintros. split. exact (add_OZ x). unfold addZ in |- *; reflexivity.\nQed.\n\n(*************)\nDefinition oppZ (x : Z) :=\n  match x return Z with\n  | OZ =>\n      (* OZ *)  OZ\n      (* pos n *) \n  | pos n => neg n\n      (* neg n *) \n  | neg n => pos n\n  end.\n\n(*************)\nLemma opp_succZ : forall x : Z, oppZ (succZ x) = predZ (oppZ x).\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nintros; reflexivity.\n(* neg n *)\nsimple destruct n; intros; reflexivity. \nQed.\n\n(*************)\nLemma opp_predZ : forall x : Z, oppZ (predZ x) = succZ (oppZ x).\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple destruct n; intros; reflexivity. \n(* neg n *)\nintros; reflexivity.\nQed.\n\n(*********************)\nLemma tech_add_pos_negZ : forall n : nat, addZ (pos n) (neg n) = OZ.\n\nsimple induction n.\n(* O *)\nreflexivity.\n(* S y *)\nintros; rewrite (tech_add_pos_succZ n0).\nelim succ_addZ_r; exact H.\nQed.\n\n(*********************)\n",
                "context_tokens": 730,
                "proof_start_offset": 8185,
                "proof_end_offset": 8340,
                "proof": "Lemma tech_add_neg_posZ : forall n : nat, addZ (neg n) (pos n) = OZ.\nProof.\nintros; elim (addZ_commutativity (pos n) (neg n)); exact (tech_add_pos_negZ n).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_add_neg_posZ : forall n : nat, addZ (neg n) (pos n) = OZ.\nsimple induction n.\n(* 0 *)\nreflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos n *)\nintros; reflexivity.\n(* pos nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zadd.v\", line 345, characters 8-19:\nError:\nIn environment\nn, n0 : nat\nH : addZ (neg n0) (pos n0) = OZ\nUnable to unify \"OZ\" with \"addZ (neg (S n0)) (pos (S n0))\".\n\nmake[2]: *** [Makefile.coq:663: Zadd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": " trivial.\n(* S y *)\nintros; elim (addZ_commutativity (neg (S n)) (pos n1)).\nrewrite tech_add_neg_predZ.\nelim (addZ_commutativity (pos n1) (neg n)).\nrewrite H; auto with arith.\nelim (minus_n_Sm n1 (S n) H0).\napply tech_pred_posZ.\napply lt_minus2; trivial.\nQed.\n\n(*************************)\nTheorem addZ_associativity : associativity Z addZ.\n\nunfold associativity in |- *; intros; elim x.\n(* OZ *)\nunfold addZ in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos O *)\nsimpl in |- *; symmetry  in |- *; exact (succ_addZ_l y z).\n(* pos (S y0) *)\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nrewrite (succ_addZ_l (addZ (pos n0) y) z); elim H; reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (pred_addZ_l y z).\n(* neg (S n0) *)\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nrewrite (pred_addZ_l (addZ (neg n0) y) z); elim H; reflexivity.\nQed.\n\n(************)\nDefinition IdZ (x : Z) := True.\n\n(*******************)\nTheorem addZ_neutral : neutral Z IdZ addZ OZ.\n\nunfold neutral in |- *; intros.\nsplit. exact I.\nintros. split. exact (add_OZ x). unfold addZ in |- *; reflexivity.\nQed.\n\n(*************)\nDefinition oppZ (x : Z) :=\n  match x return Z with\n  | OZ =>\n      (* OZ *)  OZ\n      (* pos n *) \n  | pos n => neg n\n      (* neg n *) \n  | neg n => pos n\n  end.\n\n(*************)\nLemma opp_succZ : forall x : Z, oppZ (succZ x) = predZ (oppZ x).\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nintros; reflexivity.\n(* neg n *)\nsimple destruct n; intros; reflexivity. \nQed.\n\n(*************)\nLemma opp_predZ : forall x : Z, oppZ (predZ x) = succZ (oppZ x).\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple destruct n; intros; reflexivity. \n(* neg n *)\nintros; reflexivity.\nQed.\n\n(*********************)\nLemma tech_add_pos_negZ : forall n : nat, addZ (pos n) (neg n) = OZ.\n\nsimple induction n.\n(* O *)\nreflexivity.\n(* S y *)\nintros; rewrite (tech_add_pos_succZ n0).\nelim succ_addZ_r; exact H.\nQed.\n\n(*********************)\nLemma tech_add_neg_posZ : forall n : nat, addZ (neg n) (pos n) = OZ.\n\nintros; elim (addZ_commutativity (pos n) (neg n));\n exact (tech_add_pos_negZ n).\nQed.\n\n(*********************)\n",
                "context_tokens": 723,
                "proof_start_offset": 8366,
                "proof_end_offset": 8577,
                "proof": "Lemma tech_add_pos_posZ : forall n m : nat, addZ (pos n) (pos m) = pos (S (n + m)).\nProof.\nintros; elim n.\nreflexivity.\nintros; rewrite (tech_add_pos_succZ n0 (pos m)); rewrite H; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_add_pos_posZ : forall n m : nat, addZ (pos n) (pos m) = pos (S (n + m)).\nsimple induction n.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivityQed.",
                        "correct": false,
                        "error_msg": "File \"./Zadd.v\", line 352, characters 0-11:\nError:\nIn environment\nn, n0 : nat\nH : forall m : nat, addZ (pos n0) (pos m) = pos (S (n0 + m))\nm : nat\nUnable to unify \"pos (S (S n0 + m))\" with \"addZ (pos (S n0)) (pos m)\".\n\nmake[2]: *** [Makefile.coq:663: Zadd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": "\napply lt_minus2; trivial.\nQed.\n\n(*************************)\nTheorem addZ_associativity : associativity Z addZ.\n\nunfold associativity in |- *; intros; elim x.\n(* OZ *)\nunfold addZ in |- *; reflexivity.\n(* pos n *)\nintros; elim n.\n(* pos O *)\nsimpl in |- *; symmetry  in |- *; exact (succ_addZ_l y z).\n(* pos (S y0) *)\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nrewrite (succ_addZ_l (addZ (pos n0) y) z); elim H; reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (pred_addZ_l y z).\n(* neg (S n0) *)\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nrewrite (pred_addZ_l (addZ (neg n0) y) z); elim H; reflexivity.\nQed.\n\n(************)\nDefinition IdZ (x : Z) := True.\n\n(*******************)\nTheorem addZ_neutral : neutral Z IdZ addZ OZ.\n\nunfold neutral in |- *; intros.\nsplit. exact I.\nintros. split. exact (add_OZ x). unfold addZ in |- *; reflexivity.\nQed.\n\n(*************)\nDefinition oppZ (x : Z) :=\n  match x return Z with\n  | OZ =>\n      (* OZ *)  OZ\n      (* pos n *) \n  | pos n => neg n\n      (* neg n *) \n  | neg n => pos n\n  end.\n\n(*************)\nLemma opp_succZ : forall x : Z, oppZ (succZ x) = predZ (oppZ x).\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nintros; reflexivity.\n(* neg n *)\nsimple destruct n; intros; reflexivity. \nQed.\n\n(*************)\nLemma opp_predZ : forall x : Z, oppZ (predZ x) = succZ (oppZ x).\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple destruct n; intros; reflexivity. \n(* neg n *)\nintros; reflexivity.\nQed.\n\n(*********************)\nLemma tech_add_pos_negZ : forall n : nat, addZ (pos n) (neg n) = OZ.\n\nsimple induction n.\n(* O *)\nreflexivity.\n(* S y *)\nintros; rewrite (tech_add_pos_succZ n0).\nelim succ_addZ_r; exact H.\nQed.\n\n(*********************)\nLemma tech_add_neg_posZ : forall n : nat, addZ (neg n) (pos n) = OZ.\n\nintros; elim (addZ_commutativity (pos n) (neg n));\n exact (tech_add_pos_negZ n).\nQed.\n\n(*********************)\nLemma tech_add_pos_posZ :\n forall n m : nat, addZ (pos n) (pos m) = pos (S (n + m)).\n\nintros; elim n.\n(* O *)\nreflexivity.\n(* S n0 *)\nintros; rewrite (tech_add_pos_succZ n0 (pos m)); rewrite H; reflexivity.\nQed.\n\n(*********************)\n",
                "context_tokens": 723,
                "proof_start_offset": 8603,
                "proof_end_offset": 8818,
                "proof": "Lemma tech_add_neg_negZ : forall n m : nat, addZ (neg n) (neg m) = neg (S (n + m)).\nProof.\nsimple induction n.\nreflexivity.\nintros; rewrite (tech_add_neg_predZ n0 (neg m)); rewrite H; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_add_neg_negZ : forall n m : nat, addZ (neg n) (neg m) = neg (S (n + m)).\nintros; elim n.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nreflexivity.\n(* 0 *)\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zadd.v\", line 363, characters 0-11:\nError:\nIn environment\nn, m, n0 : nat\nH : addZ (neg n0) (neg m) = neg (S (n0 + m))\nUnable to unify \"neg (S (S n0 + m))\" with \"addZ (neg (S n0)) (neg m)\".\n\nmake[2]: *** [Makefile.coq:663: Zadd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": " *)\nsimpl in |- *; symmetry  in |- *; exact (succ_addZ_l y z).\n(* pos (S y0) *)\nintros.\ndo 2 rewrite (tech_add_pos_succZ n0).\nrewrite (succ_addZ_l (addZ (pos n0) y) z); elim H; reflexivity.\n(* neg n *)\nsimple induction n.\n(* neg O *)\nsimpl in |- *; symmetry  in |- *; exact (pred_addZ_l y z).\n(* neg (S n0) *)\nintros.\ndo 2 rewrite (tech_add_neg_predZ n0).\nrewrite (pred_addZ_l (addZ (neg n0) y) z); elim H; reflexivity.\nQed.\n\n(************)\nDefinition IdZ (x : Z) := True.\n\n(*******************)\nTheorem addZ_neutral : neutral Z IdZ addZ OZ.\n\nunfold neutral in |- *; intros.\nsplit. exact I.\nintros. split. exact (add_OZ x). unfold addZ in |- *; reflexivity.\nQed.\n\n(*************)\nDefinition oppZ (x : Z) :=\n  match x return Z with\n  | OZ =>\n      (* OZ *)  OZ\n      (* pos n *) \n  | pos n => neg n\n      (* neg n *) \n  | neg n => pos n\n  end.\n\n(*************)\nLemma opp_succZ : forall x : Z, oppZ (succZ x) = predZ (oppZ x).\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nintros; reflexivity.\n(* neg n *)\nsimple destruct n; intros; reflexivity. \nQed.\n\n(*************)\nLemma opp_predZ : forall x : Z, oppZ (predZ x) = succZ (oppZ x).\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple destruct n; intros; reflexivity. \n(* neg n *)\nintros; reflexivity.\nQed.\n\n(*********************)\nLemma tech_add_pos_negZ : forall n : nat, addZ (pos n) (neg n) = OZ.\n\nsimple induction n.\n(* O *)\nreflexivity.\n(* S y *)\nintros; rewrite (tech_add_pos_succZ n0).\nelim succ_addZ_r; exact H.\nQed.\n\n(*********************)\nLemma tech_add_neg_posZ : forall n : nat, addZ (neg n) (pos n) = OZ.\n\nintros; elim (addZ_commutativity (pos n) (neg n));\n exact (tech_add_pos_negZ n).\nQed.\n\n(*********************)\nLemma tech_add_pos_posZ :\n forall n m : nat, addZ (pos n) (pos m) = pos (S (n + m)).\n\nintros; elim n.\n(* O *)\nreflexivity.\n(* S n0 *)\nintros; rewrite (tech_add_pos_succZ n0 (pos m)); rewrite H; reflexivity.\nQed.\n\n(*********************)\nLemma tech_add_neg_negZ :\n forall n m : nat, addZ (neg n) (neg m) = neg (S (n + m)).\n\nsimple induction n.\n(* O *)\nreflexivity.\n(* S n0 *)\nintros; rewrite (tech_add_neg_predZ n0 (neg m)); rewrite H; reflexivity.\nQed.\n\n(********************)\n",
                "context_tokens": 743,
                "proof_start_offset": 8843,
                "proof_end_offset": 9198,
                "proof": "Theorem addZ_opposite : opposite Z IdZ addZ OZ oppZ.\nProof.\nrepeat split; trivial.\ncase x.\nreflexivity.\nintros; exact (tech_add_pos_negZ n).\nintros; exact (tech_add_neg_posZ n).\ncase x.\nreflexivity.\nintros; exact (tech_add_neg_posZ n).\nintros; exact (tech_add_pos_negZ n).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem addZ_opposite : opposite Z IdZ addZ OZ oppZ.\nunfold oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ.\nintros; elim (Zquot_opp_neg_negZ); intros;\n rewrite H; rewrite H; rewrite H0; reflexivity.\n(* 0 *)\nintros; rewrite (tech_opp_neg_negZ); rewrite H; rewrite H; rewrite H0; reflexivity.\n(* 0 *)\nintros; rewrite (tech_opp_neg_negZ); rewrite H; rewrite H; rewrite H0; reflexivity.\n(* 0 *)\nintros; rewrite (tech_opp_neg_negZ); rewrite H; rewrite H; rewrite H0; reflexivity.\n(* 0 *)\nintros; rewrite (tech_opp_neg_negZ); rewrite H; rewrite H; rewrite H0; reflexivity.\n(* 0 *)\nintros; rewrite (tech_opp_neg_negZ); rewrite H; rewrite H; rewrite H0; reflexivity.\n(* 0 *)\nintros; rewrite (tech_opp_neg_negZ); rewrite H; rewrite H; rewrite H0; reflexivity.\n(* 0Qed.",
                        "correct": false,
                        "error_msg": "File \"./Zadd.v\", line 371, characters 14-32:\nError: The reference Zquot_opp_neg_negZ was not found in the current\nenvironment.\n\nmake[2]: *** [Makefile.coq:663: Zadd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": "l (addZ (neg n0) y) z); elim H; reflexivity.\nQed.\n\n(************)\nDefinition IdZ (x : Z) := True.\n\n(*******************)\nTheorem addZ_neutral : neutral Z IdZ addZ OZ.\n\nunfold neutral in |- *; intros.\nsplit. exact I.\nintros. split. exact (add_OZ x). unfold addZ in |- *; reflexivity.\nQed.\n\n(*************)\nDefinition oppZ (x : Z) :=\n  match x return Z with\n  | OZ =>\n      (* OZ *)  OZ\n      (* pos n *) \n  | pos n => neg n\n      (* neg n *) \n  | neg n => pos n\n  end.\n\n(*************)\nLemma opp_succZ : forall x : Z, oppZ (succZ x) = predZ (oppZ x).\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nintros; reflexivity.\n(* neg n *)\nsimple destruct n; intros; reflexivity. \nQed.\n\n(*************)\nLemma opp_predZ : forall x : Z, oppZ (predZ x) = succZ (oppZ x).\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple destruct n; intros; reflexivity. \n(* neg n *)\nintros; reflexivity.\nQed.\n\n(*********************)\nLemma tech_add_pos_negZ : forall n : nat, addZ (pos n) (neg n) = OZ.\n\nsimple induction n.\n(* O *)\nreflexivity.\n(* S y *)\nintros; rewrite (tech_add_pos_succZ n0).\nelim succ_addZ_r; exact H.\nQed.\n\n(*********************)\nLemma tech_add_neg_posZ : forall n : nat, addZ (neg n) (pos n) = OZ.\n\nintros; elim (addZ_commutativity (pos n) (neg n));\n exact (tech_add_pos_negZ n).\nQed.\n\n(*********************)\nLemma tech_add_pos_posZ :\n forall n m : nat, addZ (pos n) (pos m) = pos (S (n + m)).\n\nintros; elim n.\n(* O *)\nreflexivity.\n(* S n0 *)\nintros; rewrite (tech_add_pos_succZ n0 (pos m)); rewrite H; reflexivity.\nQed.\n\n(*********************)\nLemma tech_add_neg_negZ :\n forall n m : nat, addZ (neg n) (neg m) = neg (S (n + m)).\n\nsimple induction n.\n(* O *)\nreflexivity.\n(* S n0 *)\nintros; rewrite (tech_add_neg_predZ n0 (neg m)); rewrite H; reflexivity.\nQed.\n\n(********************)\nTheorem addZ_opposite : opposite Z IdZ addZ OZ oppZ.\n\nrepeat split; trivial.\n(* -> *)\ncase x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nintros; exact (tech_add_pos_negZ n).\n(* neg n *)\nintros; exact (tech_add_neg_posZ n).\n(* <- *)\ncase x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nintros; exact (tech_add_neg_posZ n).\n(* neg n *)\nintros; exact (tech_add_pos_negZ n).\nQed.\n\n(**************)\n",
                "context_tokens": 741,
                "proof_start_offset": 9217,
                "proof_end_offset": 9379,
                "proof": "Theorem Z_group : is_group Z IdZ addZ OZ oppZ.\nProof.\nsplit.\nred in |- *; trivial.\nsplit.\nexact addZ_associativity.\nsplit.\nexact addZ_neutral.\nexact addZ_opposite.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem Z_group : is_group Z IdZ addZ OZ oppZ.\nunfold is_group, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ.\nintros; elim (Z_group_of_nat_N n).\nintros; rewrite oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZ, oppZQed.",
                        "correct": false,
                        "error_msg": "File \"./Zadd.v\", line 393, characters 14-30:\nError: The reference Z_group_of_nat_N was not found in the current\nenvironment.\n\nmake[2]: *** [Makefile.coq:663: Zadd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": " exact (add_OZ x). unfold addZ in |- *; reflexivity.\nQed.\n\n(*************)\nDefinition oppZ (x : Z) :=\n  match x return Z with\n  | OZ =>\n      (* OZ *)  OZ\n      (* pos n *) \n  | pos n => neg n\n      (* neg n *) \n  | neg n => pos n\n  end.\n\n(*************)\nLemma opp_succZ : forall x : Z, oppZ (succZ x) = predZ (oppZ x).\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nintros; reflexivity.\n(* neg n *)\nsimple destruct n; intros; reflexivity. \nQed.\n\n(*************)\nLemma opp_predZ : forall x : Z, oppZ (predZ x) = succZ (oppZ x).\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple destruct n; intros; reflexivity. \n(* neg n *)\nintros; reflexivity.\nQed.\n\n(*********************)\nLemma tech_add_pos_negZ : forall n : nat, addZ (pos n) (neg n) = OZ.\n\nsimple induction n.\n(* O *)\nreflexivity.\n(* S y *)\nintros; rewrite (tech_add_pos_succZ n0).\nelim succ_addZ_r; exact H.\nQed.\n\n(*********************)\nLemma tech_add_neg_posZ : forall n : nat, addZ (neg n) (pos n) = OZ.\n\nintros; elim (addZ_commutativity (pos n) (neg n));\n exact (tech_add_pos_negZ n).\nQed.\n\n(*********************)\nLemma tech_add_pos_posZ :\n forall n m : nat, addZ (pos n) (pos m) = pos (S (n + m)).\n\nintros; elim n.\n(* O *)\nreflexivity.\n(* S n0 *)\nintros; rewrite (tech_add_pos_succZ n0 (pos m)); rewrite H; reflexivity.\nQed.\n\n(*********************)\nLemma tech_add_neg_negZ :\n forall n m : nat, addZ (neg n) (neg m) = neg (S (n + m)).\n\nsimple induction n.\n(* O *)\nreflexivity.\n(* S n0 *)\nintros; rewrite (tech_add_neg_predZ n0 (neg m)); rewrite H; reflexivity.\nQed.\n\n(********************)\nTheorem addZ_opposite : opposite Z IdZ addZ OZ oppZ.\n\nrepeat split; trivial.\n(* -> *)\ncase x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nintros; exact (tech_add_pos_negZ n).\n(* neg n *)\nintros; exact (tech_add_neg_posZ n).\n(* <- *)\ncase x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nintros; exact (tech_add_neg_posZ n).\n(* neg n *)\nintros; exact (tech_add_pos_negZ n).\nQed.\n\n(**************)\nTheorem Z_group : is_group Z IdZ addZ OZ oppZ.\n\nsplit.\nred in |- *; trivial.\nsplit. exact addZ_associativity.\nsplit. exact addZ_neutral.\nexact addZ_opposite.\nQed.\n\n(********************)\n",
                "context_tokens": 725,
                "proof_start_offset": 9404,
                "proof_end_offset": 9518,
                "proof": "Theorem abs_eq_or_oppZ : forall x : Z, {absZ x = x} + {absZ x = oppZ x}.\nProof.\nsimple destruct x; auto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem abs_eq_or_oppZ : forall x : Z, {absZ x = x} + {absZ x = oppZ x}.\nintros; elim x.\n(* pos n *)\nreflexivity.\n(* pos n *)\nintros; exact (tech_opp_neg_negZ).\n(* pos n *)\nintros; exact (tech_opp_neg_negZ).\n(* pos n *)\nintros; exact (tech_opp_neg_negZ).\n(* pos n *)\nintros; exact (tech_opp_neg_negZ).\n(* pos n *)\nintros; exact (tech_opp_neg_negZ).\n(* pos n *)\nintros; exact (tech_opp_neg_negZ).\n(* pos n *)\nintros; exact (tech_opp_neg_negZ).\n(* pos n *)\nintros; exact (tech_opp_neg_negZ).\n(* pos n *)\nintros; exact (tech_opp_neg_negZ).\n(* pos n *)\nintros; exact (tech_opp_neg_negZ).\n(* pos n *)\nintros; exact (tech_opp_neg_negZ).\n(* pos n *)\nintros; exact (tech_opp_neg_negZ).\n(* pos n *)\nintros; exact (tech_opp_Qed.",
                        "correct": false,
                        "error_msg": "File \"./Zadd.v\", line 404, characters 0-11:\nError:\nTactic failure:  The relation sumbool is not a declared reflexive relation. Maybe you need to require the Coq.Classes.RelationClasses library.\n\nmake[2]: *** [Makefile.coq:663: Zadd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zadd.v",
                "context": " \n  | pos n => neg n\n      (* neg n *) \n  | neg n => pos n\n  end.\n\n(*************)\nLemma opp_succZ : forall x : Z, oppZ (succZ x) = predZ (oppZ x).\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nintros; reflexivity.\n(* neg n *)\nsimple destruct n; intros; reflexivity. \nQed.\n\n(*************)\nLemma opp_predZ : forall x : Z, oppZ (predZ x) = succZ (oppZ x).\n\nsimple destruct x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nsimple destruct n; intros; reflexivity. \n(* neg n *)\nintros; reflexivity.\nQed.\n\n(*********************)\nLemma tech_add_pos_negZ : forall n : nat, addZ (pos n) (neg n) = OZ.\n\nsimple induction n.\n(* O *)\nreflexivity.\n(* S y *)\nintros; rewrite (tech_add_pos_succZ n0).\nelim succ_addZ_r; exact H.\nQed.\n\n(*********************)\nLemma tech_add_neg_posZ : forall n : nat, addZ (neg n) (pos n) = OZ.\n\nintros; elim (addZ_commutativity (pos n) (neg n));\n exact (tech_add_pos_negZ n).\nQed.\n\n(*********************)\nLemma tech_add_pos_posZ :\n forall n m : nat, addZ (pos n) (pos m) = pos (S (n + m)).\n\nintros; elim n.\n(* O *)\nreflexivity.\n(* S n0 *)\nintros; rewrite (tech_add_pos_succZ n0 (pos m)); rewrite H; reflexivity.\nQed.\n\n(*********************)\nLemma tech_add_neg_negZ :\n forall n m : nat, addZ (neg n) (neg m) = neg (S (n + m)).\n\nsimple induction n.\n(* O *)\nreflexivity.\n(* S n0 *)\nintros; rewrite (tech_add_neg_predZ n0 (neg m)); rewrite H; reflexivity.\nQed.\n\n(********************)\nTheorem addZ_opposite : opposite Z IdZ addZ OZ oppZ.\n\nrepeat split; trivial.\n(* -> *)\ncase x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nintros; exact (tech_add_pos_negZ n).\n(* neg n *)\nintros; exact (tech_add_neg_posZ n).\n(* <- *)\ncase x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nintros; exact (tech_add_neg_posZ n).\n(* neg n *)\nintros; exact (tech_add_pos_negZ n).\nQed.\n\n(**************)\nTheorem Z_group : is_group Z IdZ addZ OZ oppZ.\n\nsplit.\nred in |- *; trivial.\nsplit. exact addZ_associativity.\nsplit. exact addZ_neutral.\nexact addZ_opposite.\nQed.\n\n(********************)\nTheorem abs_eq_or_oppZ : forall x : Z, {absZ x = x} + {absZ x = oppZ x}.\n\nsimple destruct x; auto with arith.\nQed.\n\n(*********************)\n",
                "context_tokens": 722,
                "proof_start_offset": 9544,
                "proof_end_offset": 9675,
                "proof": "Lemma tech_opp_pos_negZ : forall n : nat, oppZ (pos n) = neg n /\\ oppZ (neg n) = pos n.\nProof.\nsimple induction n; auto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_opp_pos_negZ : forall n : nat, oppZ (pos n) = neg n /\\ oppZ (neg n) = pos n.\nintros; elim n; auto with arith.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Lci.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Lci.v                                   *)\n(****************************************************************************)\n\n(* Proprie'te's des lois de composition interne *)\n\n(*****************************************************************************)\nSection Internal.\n\nVariable S : Set.\nVariable G : S -> Prop.\nVariable Add : S -> S -> S.\nVariable O I : S.\nVariable Opp Inv : S -> S.\n(*****************************************************************************)\n\n(***************)\nDefinition intern := forall x y : S, G x -> G y -> G (Add x y).\n\n(**********************)\nDefinition commutativity := forall x y : S, Add x y = Add y x.\n\n(**********************)\nDefinition associativity :=\n  forall x y z : S, Add x (Add y z) = Add (Add x y) z :>S.\n\n(****************)\nDefinition neutral (S : Set) (G : S -> Prop) (Add : S -> S -> S) \n  (O : S) := G O /\\ (forall x : S, G x -> Add x O = x /\\ Add O x = x).\n\n(****************)\n",
                "context_tokens": 316,
                "proof_start_offset": 1992,
                "proof_end_offset": 2126,
                "proof": "Lemma neutral_add : neutral S G Add O -> O = Add O O.\nProof.\nintros; symmetry in |- *.\nelim H; intros; elim (H1 O H0); trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma neutral_add : neutral S G Add O -> O = Add O O.\nProof.\nunfold not in |- *; intros.\nelim H0; intros.\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).\nrewrite (H0 x).Qed.",
                        "correct": false,
                        "error_msg": "Warning: -extra and -extra-phony are deprecated.\nWarning: Write the extra targets in Makefile.coq.local.\n\nFile \"./Lci.v\", line 48, characters 5-7:\nError: The reference H0 was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Lci.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Lci.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Lci.v                                   *)\n(****************************************************************************)\n\n(* Proprie'te's des lois de composition interne *)\n\n(*****************************************************************************)\nSection Internal.\n\nVariable S : Set.\nVariable G : S -> Prop.\nVariable Add : S -> S -> S.\nVariable O I : S.\nVariable Opp Inv : S -> S.\n(*****************************************************************************)\n\n(***************)\nDefinition intern := forall x y : S, G x -> G y -> G (Add x y).\n\n(**********************)\nDefinition commutativity := forall x y : S, Add x y = Add y x.\n\n(**********************)\nDefinition associativity :=\n  forall x y z : S, Add x (Add y z) = Add (Add x y) z :>S.\n\n(****************)\nDefinition neutral (S : Set) (G : S -> Prop) (Add : S -> S -> S) \n  (O : S) := G O /\\ (forall x : S, G x -> Add x O = x /\\ Add O x = x).\n\n(****************)\nLemma neutral_add : neutral S G Add O -> O = Add O O.\n\nProof.\nintros; symmetry  in |- *.\nelim H; intros; elim (H1 O H0); trivial.\nQed.\n\n(********************)\nDefinition is_opposite (x y : S) := G x /\\ G y /\\ Add x y = O /\\ Add y x = O.\n\n(************)\n",
                "context_tokens": 403,
                "proof_start_offset": 2245,
                "proof_end_offset": 2466,
                "proof": "Lemma opp_com : commutativity -> forall x y : S, G x -> G y -> Add x y = O -> is_opposite x y.\nProof.\nintros.\nunfold is_opposite in |- *.\nsplit.\nexact H0.\nsplit.\nexact H1.\nsplit.\nexact H2.\nelim (H x y).\nexact H2.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma opp_com : commutativity -> forall x y : S, G x -> G y -> Add x y = O -> is_opposite x y.\nProof.\nintros x y H; elim H; intros; elim H0; trivial.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Lci.v\", line 58, characters 14-20:\nError: Not an inductive product.\n\nmake[2]: *** [Makefile.coq:663: Lci.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/rings.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                 rings.v                                  *)\n(****************************************************************************)\nRequire Export Lci.\nRequire Export misc.\nRequire Export groups.\nRequire Export Compare_dec.\n\n(*****************************************************************************)\nSection ring.\n\nVariable S : Set.\nVariable A : S -> Prop.\nVariable Add Mult : S -> S -> S.\nVariable O I : S.\nVariable Opp : S -> S.\nVariable v : S -> nat.\n(*****************************************************************************)\n\n(****************)\nDefinition is_ring :=\n  commutativity S Add /\\\n  is_group S A Add O Opp /\\\n  intern S A Mult /\\ associativity S Mult /\\ distributivity S Add Mult.\n\n(***********)\n",
                "context_tokens": 227,
                "proof_start_offset": 1772,
                "proof_end_offset": 2677,
                "proof": "Lemma mult_O : is_ring -> forall x : S, A x -> Mult x O = O /\\ Mult O x = O.\nProof.\nintros.\nelim H; intros; elim H2; intros; elim H3; intros; elim H4; intros.\nelim H6; intros; elim H8; intros; elim H10; intros; elim H13; intros.\nclear H2 H4 H5 H6 H8 H9 H10 H11 H13 H14.\nsplit.\napply (regular_l S A Add O Opp H3 (Mult x O) O (H7 x O H0 H15) H15 (Mult x O) (H7 x O H0 H15)).\nelim (H16 (Mult x O) (H7 x O H0 H15)); intros; rewrite H2.\nelim (H12 x O O); intros; elim H6.\nelim (H16 O H15); intros; rewrite H8; reflexivity.\napply (regular_l S A Add O Opp H3 (Mult O x) O (H7 O x H15 H0) H15 (Mult O x) (H7 O x H15 H0)).\nelim (H16 (Mult O x) (H7 O x H15 H0)); intros; rewrite H2.\nelim (H12 O O x); intros; elim H5.\nelim (H16 O H15); intros; rewrite H8; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_O : is_ring -> forall x : S, A x -> Mult x O = O /\\ Mult O x = O.\nsimple induction x.\nintros.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_n_Sm.\nrewrite <- plus_Qed.",
                        "correct": false,
                        "error_msg": "Warning: -extra and -extra-phony are deprecated.\nWarning: Write the extra targets in Makefile.coq.local.\n\nFile \"./rings.v\", line 41, characters 0-18:\nError:\nLtac call to \"simple induction (quant_hyp)\" failed.\nNot an inductive product.\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/rings.v",
                "context": "              *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                 rings.v                                  *)\n(****************************************************************************)\nRequire Export Lci.\nRequire Export misc.\nRequire Export groups.\nRequire Export Compare_dec.\n\n(*****************************************************************************)\nSection ring.\n\nVariable S : Set.\nVariable A : S -> Prop.\nVariable Add Mult : S -> S -> S.\nVariable O I : S.\nVariable Opp : S -> S.\nVariable v : S -> nat.\n(*****************************************************************************)\n\n(****************)\nDefinition is_ring :=\n  commutativity S Add /\\\n  is_group S A Add O Opp /\\\n  intern S A Mult /\\ associativity S Mult /\\ distributivity S Add Mult.\n\n(***********)\nLemma mult_O : is_ring -> forall x : S, A x -> Mult x O = O /\\ Mult O x = O.\n\n\nintros.\nelim H; intros; elim H2; intros; elim H3; intros; elim H4; intros. \nelim H6; intros; elim H8; intros; elim H10; intros; elim H13; intros.\nclear H2 H4 H5 H6 H8 H9 H10 H11 H13 H14. \n(* H3: is_group, H7: intern Mult, H0: (A x), H15: (A O), H16: rest of neutral,\n   H12: distributivity *)\nsplit.\n(* x*0 = 0 *)\napply\n (regular_l S A Add O Opp H3 (Mult x O) O (H7 x O H0 H15) H15 \n    (Mult x O) (H7 x O H0 H15)).\nelim (H16 (Mult x O) (H7 x O H0 H15)); intros; rewrite H2.\nelim (H12 x O O); intros; elim H6.\nelim (H16 O H15); intros; rewrite H8; reflexivity.\n(* 0*x = 0 *)\napply\n (regular_l S A Add O Opp H3 (Mult O x) O (H7 O x H15 H0) H15 \n    (Mult O x) (H7 O x H15 H0)).\nelim (H16 (Mult O x) (H7 O x H15 H0)); intros; rewrite H2.\nelim (H12 O O x); intros; elim H5.\nelim (H16 O H15); intros; rewrite H8; reflexivity.\nQed.\n\n(***************)\n",
                "context_tokens": 576,
                "proof_start_offset": 2697,
                "proof_end_offset": 3436,
                "proof": "Lemma mult_opp_r : is_ring -> forall x y : S, A x -> A y -> Mult x (Opp y) = Opp (Mult x y).\nProof.\nintros.\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim (H15 y H1); intros.\nelim H17; intros; elim H19; intros.\nclear H2 H3 H5 H6 H7 H9 H10 H11 H12 H14 H15 H16 H17 H19.\napply (opp_unicity S A Add O Opp H4 (Mult x y) (Mult x (Opp y))).\nunfold is_opposite in |- *; split.\nexact (H8 x y H0 H1).\nsplit.\nexact (H8 x (Opp y) H0 H18).\nelim (mult_O H x H0); intros; elim H2; clear H H0 H1 H2 H3 H4 H8 H18.\npattern O at 1 in |- *; elim H20; elim H21; clear H20 H21.\nelim (H13 x y (Opp y)); intros; rewrite H0; clear H H0.\nelim (H13 x (Opp y) y); intros; rewrite H0; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_opp_r : is_ring -> forall x y : S, A x -> A y -> Mult x (Opp y) = Opp (Mult x y).\nintros.\nelim mult_opp_r; intros; elim H0; intros; elim H1; intros; elim H2; intros.\nelim H5; intros; elim H5; intros; elim H5; intros; elim H6; intros.\nclear H5 H6 H7 H8 H9 H10 H11 H12 H13.\nrewrite H6; rewrite H7; rewrite H7; reflexivity.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./rings.v\", line 69, characters 5-15:\nError: The reference mult_opp_r was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/rings.v",
                "context": " A Add O Opp /\\\n  intern S A Mult /\\ associativity S Mult /\\ distributivity S Add Mult.\n\n(***********)\nLemma mult_O : is_ring -> forall x : S, A x -> Mult x O = O /\\ Mult O x = O.\n\n\nintros.\nelim H; intros; elim H2; intros; elim H3; intros; elim H4; intros. \nelim H6; intros; elim H8; intros; elim H10; intros; elim H13; intros.\nclear H2 H4 H5 H6 H8 H9 H10 H11 H13 H14. \n(* H3: is_group, H7: intern Mult, H0: (A x), H15: (A O), H16: rest of neutral,\n   H12: distributivity *)\nsplit.\n(* x*0 = 0 *)\napply\n (regular_l S A Add O Opp H3 (Mult x O) O (H7 x O H0 H15) H15 \n    (Mult x O) (H7 x O H0 H15)).\nelim (H16 (Mult x O) (H7 x O H0 H15)); intros; rewrite H2.\nelim (H12 x O O); intros; elim H6.\nelim (H16 O H15); intros; rewrite H8; reflexivity.\n(* 0*x = 0 *)\napply\n (regular_l S A Add O Opp H3 (Mult O x) O (H7 O x H15 H0) H15 \n    (Mult O x) (H7 O x H15 H0)).\nelim (H16 (Mult O x) (H7 O x H15 H0)); intros; rewrite H2.\nelim (H12 O O x); intros; elim H5.\nelim (H16 O H15); intros; rewrite H8; reflexivity.\nQed.\n\n(***************)\nLemma mult_opp_r :\n is_ring -> forall x y : S, A x -> A y -> Mult x (Opp y) = Opp (Mult x y).\n\n\nintros.\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim (H15 y H1); intros.\nelim H17; intros; elim H19; intros.\nclear H2 H3 H5 H6 H7 H9 H10 H11 H12 H14 H15 H16 H17 H19.\napply (opp_unicity S A Add O Opp H4 (Mult x y) (Mult x (Opp y))).\nunfold is_opposite in |- *; split.\nexact (H8 x y H0 H1).\nsplit.\nexact (H8 x (Opp y) H0 H18).\nelim (mult_O H x H0); intros; elim H2; clear H H0 H1 H2 H3 H4 H8 H18.\npattern O at 1 in |- *; elim H20; elim H21; clear H20 H21.\nelim (H13 x y (Opp y)); intros; rewrite H0; clear H H0.\nelim (H13 x (Opp y) y); intros; rewrite H0; auto.\nQed.\n\n(***************)\n",
                "context_tokens": 721,
                "proof_start_offset": 3456,
                "proof_end_offset": 4193,
                "proof": "Lemma mult_opp_l : is_ring -> forall x y : S, A x -> A y -> Mult (Opp x) y = Opp (Mult x y).\nProof.\nintros.\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim (H15 x H0); intros.\nelim H17; intros; elim H19; intros.\nclear H2 H3 H5 H6 H7 H9 H10 H11 H12 H14 H15 H16 H17 H19.\napply (opp_unicity S A Add O Opp H4 (Mult x y) (Mult (Opp x) y)).\nunfold is_opposite in |- *; split.\nexact (H8 x y H0 H1).\nsplit.\nexact (H8 (Opp x) y H18 H1).\nelim (mult_O H y H1); intros; elim H3; clear H H0 H1 H2 H3 H4 H8 H18.\npattern O at 1 in |- *; elim H20; elim H21; clear H20 H21.\nelim (H13 x (Opp x) y); intros; rewrite H; clear H H0.\nelim (H13 (Opp x) x y); intros; rewrite H; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_opp_l : is_ring -> forall x y : S, A x -> A y -> Mult (Opp x) y = Opp (Mult x y).\nintros.\nelim H; intros; elim H0; intros; elim H1; intros; elim H2; intros; elim H3;\n intros; elim H4; intros; elim H4; intros; elim H5; intros; elim H5; \n intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H5; \n intros; elim H5; intros; elim H5; intros; elim H5; intros; elim H6; \n intros; elim H5; intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6; intros; elim H6; \n intros; elim H6; intros; elim H6; intros; elim H6Qed.",
                        "correct": false,
                        "error_msg": "File \"./rings.v\", line 90, characters 16-23:\nError: Not an inductive product.\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/rings.v",
                "context": " H3 (Mult O x) O (H7 O x H15 H0) H15 \n    (Mult O x) (H7 O x H15 H0)).\nelim (H16 (Mult O x) (H7 O x H15 H0)); intros; rewrite H2.\nelim (H12 O O x); intros; elim H5.\nelim (H16 O H15); intros; rewrite H8; reflexivity.\nQed.\n\n(***************)\nLemma mult_opp_r :\n is_ring -> forall x y : S, A x -> A y -> Mult x (Opp y) = Opp (Mult x y).\n\n\nintros.\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim (H15 y H1); intros.\nelim H17; intros; elim H19; intros.\nclear H2 H3 H5 H6 H7 H9 H10 H11 H12 H14 H15 H16 H17 H19.\napply (opp_unicity S A Add O Opp H4 (Mult x y) (Mult x (Opp y))).\nunfold is_opposite in |- *; split.\nexact (H8 x y H0 H1).\nsplit.\nexact (H8 x (Opp y) H0 H18).\nelim (mult_O H x H0); intros; elim H2; clear H H0 H1 H2 H3 H4 H8 H18.\npattern O at 1 in |- *; elim H20; elim H21; clear H20 H21.\nelim (H13 x y (Opp y)); intros; rewrite H0; clear H H0.\nelim (H13 x (Opp y) y); intros; rewrite H0; auto.\nQed.\n\n(***************)\nLemma mult_opp_l :\n is_ring -> forall x y : S, A x -> A y -> Mult (Opp x) y = Opp (Mult x y).\n\n\nintros.\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim (H15 x H0); intros.\nelim H17; intros; elim H19; intros.\nclear H2 H3 H5 H6 H7 H9 H10 H11 H12 H14 H15 H16 H17 H19.\napply (opp_unicity S A Add O Opp H4 (Mult x y) (Mult (Opp x) y)).\nunfold is_opposite in |- *; split.\nexact (H8 x y H0 H1).\nsplit.\nexact (H8 (Opp x) y H18 H1).\nelim (mult_O H y H1); intros; elim H3; clear H H0 H1 H2 H3 H4 H8 H18.\npattern O at 1 in |- *; elim H20; elim H21; clear H20 H21.\nelim (H13 x (Opp x) y); intros; rewrite H; clear H H0.\nelim (H13 (Opp x) x y); intros; rewrite H; auto.\nQed.\n\n(*****************)\n",
                "context_tokens": 720,
                "proof_start_offset": 4215,
                "proof_end_offset": 4702,
                "proof": "Lemma mult_opp_opp : is_ring -> forall x y : S, A x -> A y -> Mult (Opp x) (Opp y) = Mult x y.\nProof.\nintros.\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim (H15 x H0); intros.\nelim H17; intros; clear H2 H3 H5 H6 H7 H9 H10 H11 H12 H13 H14 H15 H16 H17 H19.\nrewrite (mult_opp_r H (Opp x) y H18 H1).\nrewrite (mult_opp_l H x y H0 H1).\nsymmetry in |- *.\nexact (opp_opp S A Add O Opp H4 (Mult x y) (H8 x y H0 H1)).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_opp_opp : is_ring -> forall x y : S, A x -> A y -> Mult (Opp x) (Opp y) = Mult x y.\nintros.\nelim H; intros; elim H; intros; elim H0; intros; elim H1; intros; elim H2; intros.\nelim (H5 x y H2); intros; elim H3; intros; elim H4; intros; elim H5; intros; \n elim H5; intros; elim H5; intros; elim H5; intros; elim H5; intros; \n elim H5; intros; elim H5; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6;Qed.",
                        "correct": false,
                        "error_msg": "File \"./rings.v\", line 111, characters 32-39:\nError: Not an inductive product.\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/rings.v",
                "context": "0 H18).\nelim (mult_O H x H0); intros; elim H2; clear H H0 H1 H2 H3 H4 H8 H18.\npattern O at 1 in |- *; elim H20; elim H21; clear H20 H21.\nelim (H13 x y (Opp y)); intros; rewrite H0; clear H H0.\nelim (H13 x (Opp y) y); intros; rewrite H0; auto.\nQed.\n\n(***************)\nLemma mult_opp_l :\n is_ring -> forall x y : S, A x -> A y -> Mult (Opp x) y = Opp (Mult x y).\n\n\nintros.\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim (H15 x H0); intros.\nelim H17; intros; elim H19; intros.\nclear H2 H3 H5 H6 H7 H9 H10 H11 H12 H14 H15 H16 H17 H19.\napply (opp_unicity S A Add O Opp H4 (Mult x y) (Mult (Opp x) y)).\nunfold is_opposite in |- *; split.\nexact (H8 x y H0 H1).\nsplit.\nexact (H8 (Opp x) y H18 H1).\nelim (mult_O H y H1); intros; elim H3; clear H H0 H1 H2 H3 H4 H8 H18.\npattern O at 1 in |- *; elim H20; elim H21; clear H20 H21.\nelim (H13 x (Opp x) y); intros; rewrite H; clear H H0.\nelim (H13 (Opp x) x y); intros; rewrite H; auto.\nQed.\n\n(*****************)\nLemma mult_opp_opp :\n is_ring -> forall x y : S, A x -> A y -> Mult (Opp x) (Opp y) = Mult x y.\n\n\nintros.\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim (H15 x H0); intros.\nelim H17; intros; clear H2 H3 H5 H6 H7 H9 H10 H11 H12 H13 H14 H15 H16 H17 H19.\nrewrite (mult_opp_r H (Opp x) y H18 H1).\nrewrite (mult_opp_l H x y H0 H1).\nsymmetry  in |- *.\nexact (opp_opp S A Add O Opp H4 (Mult x y) (H8 x y H0 H1)).\nQed.\n\n(******************)\nDefinition integrity := forall a b : S, Mult a b = O -> {a = O} + {b = O}.\n\n(************************************)\nDefinition is_unitary_commutative_ring :=\n  is_ring /\\ commutativity S Mult /\\ neutral S A Mult I.\n\n(* Division *)\n(***************)\nDefinition divide (a b : S) :=\n  A a /\\ A b /\\ (b = O \\/ a <> O /\\ (exists q : S, A q /\\ b = Mult a q)).\n\n(**************)\n",
                "context_tokens": 742,
                "proof_start_offset": 5096,
                "proof_end_offset": 5330,
                "proof": "Theorem div_O_O : is_ring -> divide O O.\nProof.\nunfold divide in |- *; intros.\nelim H; intros; elim H1; intros; elim H2; intros; elim H5; intros.\nelim H7; intros; elim H8; intros.\nsplit.\nexact H10.\nsplit.\nexact H10.\nleft; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem div_O_O : is_ring -> divide O O.\nProof.\nintros.\nelim H; intros; elim H0; intros; elim H1; intros; elim H2; intros;\n elim H2; intros; elim H3; intros; elim H4; intros; elim H5; intros;\n elim H5; intros; elim H5; intros; elim H5; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6;Qed.",
                        "correct": false,
                        "error_msg": "File \"./rings.v\", line 151, characters 26-29:\nError: The reference Qed was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/rings.v",
                "context": ".\n\n(***************)\nLemma mult_opp_l :\n is_ring -> forall x y : S, A x -> A y -> Mult (Opp x) y = Opp (Mult x y).\n\n\nintros.\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim (H15 x H0); intros.\nelim H17; intros; elim H19; intros.\nclear H2 H3 H5 H6 H7 H9 H10 H11 H12 H14 H15 H16 H17 H19.\napply (opp_unicity S A Add O Opp H4 (Mult x y) (Mult (Opp x) y)).\nunfold is_opposite in |- *; split.\nexact (H8 x y H0 H1).\nsplit.\nexact (H8 (Opp x) y H18 H1).\nelim (mult_O H y H1); intros; elim H3; clear H H0 H1 H2 H3 H4 H8 H18.\npattern O at 1 in |- *; elim H20; elim H21; clear H20 H21.\nelim (H13 x (Opp x) y); intros; rewrite H; clear H H0.\nelim (H13 (Opp x) x y); intros; rewrite H; auto.\nQed.\n\n(*****************)\nLemma mult_opp_opp :\n is_ring -> forall x y : S, A x -> A y -> Mult (Opp x) (Opp y) = Mult x y.\n\n\nintros.\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim (H15 x H0); intros.\nelim H17; intros; clear H2 H3 H5 H6 H7 H9 H10 H11 H12 H13 H14 H15 H16 H17 H19.\nrewrite (mult_opp_r H (Opp x) y H18 H1).\nrewrite (mult_opp_l H x y H0 H1).\nsymmetry  in |- *.\nexact (opp_opp S A Add O Opp H4 (Mult x y) (H8 x y H0 H1)).\nQed.\n\n(******************)\nDefinition integrity := forall a b : S, Mult a b = O -> {a = O} + {b = O}.\n\n(************************************)\nDefinition is_unitary_commutative_ring :=\n  is_ring /\\ commutativity S Mult /\\ neutral S A Mult I.\n\n(* Division *)\n(***************)\nDefinition divide (a b : S) :=\n  A a /\\ A b /\\ (b = O \\/ a <> O /\\ (exists q : S, A q /\\ b = Mult a q)).\n\n(**************)\nTheorem div_O_O : is_ring -> divide O O.\n\n\nunfold divide in |- *; intros.\nelim H; intros; elim H1; intros; elim H2; intros; elim H5; intros.\nelim H7; intros; elim H8; intros.\nsplit. exact H10.\nsplit. exact H10.\nleft; reflexivity.\nQed.\n\n(**************)\n",
                "context_tokens": 726,
                "proof_start_offset": 5349,
                "proof_end_offset": 6556,
                "proof": "Theorem div_add : is_ring -> forall a b d : S, divide d a -> divide d b -> divide d (Add a b).\nProof.\nunfold divide in |- *; intros.\nsplit.\nelim H0; trivial.\nsplit.\nelim H; intros; elim H3; intros; elim H4; intros.\nelim H0; intros; elim H9; intros; elim H1; intros; elim H13; intros.\nexact (H6 a b H10 H14).\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim H14; intros.\nclear H H2 H3 H4 H5 H7 H8 H9 H10 H11 H12 H14 H15 H16.\nelim H0; intros; elim H2; intros; clear H H0 H2.\nelim H1; intros; elim H0; intros; clear H H0 H1.\nelim H4; intros.\nrewrite H.\nelim (H17 b H2); intros.\nrewrite H1.\nexact H5.\nelim H5; intros.\nrewrite H0.\nelim (H17 a H3); intros.\nrewrite H1.\nexact H4.\nclear H2 H3 H4 H5 H17.\nright.\nelim H; intros; elim H2; intros; elim H3; intros; clear H H2 H3.\nelim H0; intros; elim H2; intros; elim H3; intros; clear H H0 H2 H3.\nsplit.\nexact H1.\nclear H1.\nexists (Add x x0).\nsplit.\nexact (H6 x x0 H4 H7).\nelim (H13 d x x0); intros.\nclear H4 H6 H7 H13.\nrewrite H0.\nclear H H0.\nelim H5; elim H8; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem div_add : is_ring -> forall a b d : S, divide d a -> divide d b -> divide d (Add a b).\nintros a b d H0 H1 H2; elim H1; intros; elim H2; intros; elim H3; intros;\n elim H5; intros; elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6; intros; elim H6; intros; elim H6; intros; \n elim H6;Qed.",
                        "correct": false,
                        "error_msg": "File \"./rings.v\", line 161, characters 9-12:\nError: The reference Qed was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/rings.v",
                "context": "4 (Mult x y) (H8 x y H0 H1)).\nQed.\n\n(******************)\nDefinition integrity := forall a b : S, Mult a b = O -> {a = O} + {b = O}.\n\n(************************************)\nDefinition is_unitary_commutative_ring :=\n  is_ring /\\ commutativity S Mult /\\ neutral S A Mult I.\n\n(* Division *)\n(***************)\nDefinition divide (a b : S) :=\n  A a /\\ A b /\\ (b = O \\/ a <> O /\\ (exists q : S, A q /\\ b = Mult a q)).\n\n(**************)\nTheorem div_O_O : is_ring -> divide O O.\n\n\nunfold divide in |- *; intros.\nelim H; intros; elim H1; intros; elim H2; intros; elim H5; intros.\nelim H7; intros; elim H8; intros.\nsplit. exact H10.\nsplit. exact H10.\nleft; reflexivity.\nQed.\n\n(**************)\nTheorem div_add :\n is_ring -> forall a b d : S, divide d a -> divide d b -> divide d (Add a b).\n\n\nunfold divide in |- *; intros.\nsplit.\n(* A d *)\nelim H0; trivial.\nsplit.\n(* A (a+b) *)\nelim H; intros; elim H3; intros; elim H4; intros. \nelim H0; intros; elim H9; intros; elim H1; intros; elim H13; intros.\nexact (H6 a b H10 H14).\n(* a+b = 0 or d <> 0 and a+b = d*q *)\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim H14; intros.\nclear H H2 H3 H4 H5 H7 H8 H9 H10 H11 H12 H14 H15 H16.\nelim H0; intros; elim H2; intros; clear H H0 H2.\nelim H1; intros; elim H0; intros; clear H H0 H1.\n  (* a = 0 *)\nelim H4; intros. rewrite H. \nelim (H17 b H2); intros. rewrite H1.\nexact H5.\n  (* b = 0 *)\nelim H5; intros. rewrite H0.\nelim (H17 a H3); intros. rewrite H1.\nexact H4. clear H2 H3 H4 H5 H17.\n  (* a <> 0 & b <> 0 *)\nright.\nelim H; intros; elim H2; intros; elim H3; intros; clear H H2 H3.\nelim H0; intros; elim H2; intros; elim H3; intros; clear H H0 H2 H3.\nsplit.\nexact H1. clear H1.\nexists (Add x x0).\nsplit.\nexact (H6 x x0 H4 H7). \nelim (H13 d x x0); intros. clear H4 H6 H7 H13.\nrewrite H0. clear H H0.\nelim H5; elim H8; reflexivity.\nQed.\n\n(***************)\n",
                "context_tokens": 727,
                "proof_start_offset": 6576,
                "proof_end_offset": 7261,
                "proof": "Theorem div_mult : is_ring -> forall a b d : S, divide d a -> A b -> divide d (Mult a b).\nProof.\nunfold divide in |- *; intros.\nelim H0; intros.\nsplit.\nexact H2.\nclear H0 H2.\nelim H; intros; elim H2; intros; elim H5; intros; elim H7; intros.\nclear H0 H2 H4 H5 H7 H9.\nelim H3; intros.\nsplit.\nexact (H6 a b H0 H1).\nclear H0 H3.\nelim H2; intros.\nrewrite H0.\nelim (mult_O H b H1); intros.\nrewrite H4.\nleft; reflexivity.\nclear H H2.\nright.\nelim H0; intros; elim H2; intros.\nsplit.\nexact H.\nexists (Mult x b).\nelim H3; intros.\nsplit.\nexact (H6 x b H4 H1).\nrewrite (H8 d x b).\nelim H5; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem div_mult : is_ring -> forall a b d : S, divide d a -> A b -> divide d (Mult a b).\nintros a b d H.\nelim H; intros; elim H; intros; elim H; intros; elim H; intros.\nelim (H0 (H1 a)); intros.\nelim (H1 (H2 b)); intros.\nelim (H2 (H2 b)); intros.\nelim (H3 (H4 b)); intros.\nelim (H5 (H6 b)); intros.\nelim (H6 (H7 b)); intros.\nelim (H7 (H8 b)); intros.\nelim (H8 (H8 b)); intros.\nelim (H8 (H8 b)); intros.\nelim (H8 (H8 b)); intros.\nelim (H8 (H8 b)); intros.\nelim (H8 (H8 b)); intros.\nelim (H8 (H8 b)); intros.\nelim (H8 (H8 b)); intros.\nelim (H8 (H8 b)); intros.\nelim (H8 (H8 b)); intros.\nelim (H8 (H8 b)); intros.\nelim (H8 (H8 b)); intros.\nelim (H8 (H8 b)); intros.Qed.",
                        "correct": false,
                        "error_msg": "File \"./rings.v\", line 192, characters 0-6:\nError: Not an inductive product.\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/rings.v",
                "context": "0; trivial.\nsplit.\n(* A (a+b) *)\nelim H; intros; elim H3; intros; elim H4; intros. \nelim H0; intros; elim H9; intros; elim H1; intros; elim H13; intros.\nexact (H6 a b H10 H14).\n(* a+b = 0 or d <> 0 and a+b = d*q *)\nelim H; intros; elim H3; intros; elim H4; intros; elim H5; intros.\nelim H7; intros; elim H9; intros; elim H11; intros; elim H14; intros.\nclear H H2 H3 H4 H5 H7 H8 H9 H10 H11 H12 H14 H15 H16.\nelim H0; intros; elim H2; intros; clear H H0 H2.\nelim H1; intros; elim H0; intros; clear H H0 H1.\n  (* a = 0 *)\nelim H4; intros. rewrite H. \nelim (H17 b H2); intros. rewrite H1.\nexact H5.\n  (* b = 0 *)\nelim H5; intros. rewrite H0.\nelim (H17 a H3); intros. rewrite H1.\nexact H4. clear H2 H3 H4 H5 H17.\n  (* a <> 0 & b <> 0 *)\nright.\nelim H; intros; elim H2; intros; elim H3; intros; clear H H2 H3.\nelim H0; intros; elim H2; intros; elim H3; intros; clear H H0 H2 H3.\nsplit.\nexact H1. clear H1.\nexists (Add x x0).\nsplit.\nexact (H6 x x0 H4 H7). \nelim (H13 d x x0); intros. clear H4 H6 H7 H13.\nrewrite H0. clear H H0.\nelim H5; elim H8; reflexivity.\nQed.\n\n(***************)\nTheorem div_mult :\n is_ring -> forall a b d : S, divide d a -> A b -> divide d (Mult a b).\n\n\nunfold divide in |- *; intros.\n(* A d *)\nelim H0; intros. split. exact H2. clear H0 H2.\n(* A (a*b) *)\nelim H; intros; elim H2; intros; elim H5; intros; elim H7; intros.\nclear H0 H2 H4 H5 H7 H9.\nelim H3; intros.\nsplit. exact (H6 a b H0 H1). clear H0 H3.\n(* a*b = 0 or d <> 0 and a*b = d*q *)\n  (* a = 0 *)\nelim H2; intros. rewrite H0. \nelim (mult_O H b H1); intros. rewrite H4. left; reflexivity. clear H H2.\n  (* a <> 0 *)\nright.\nelim H0; intros; elim H2; intros. split. exact H.\nexists (Mult x b). \nelim H3; intros. split. exact (H6 x b H4 H1).\nrewrite (H8 d x b). elim H5; reflexivity.\nQed.\n\n(**************)\n",
                "context_tokens": 732,
                "proof_start_offset": 7280,
                "proof_end_offset": 8081,
                "proof": "Theorem div_opp : is_ring -> forall a d : S, divide d a -> divide d (Opp a).\nProof.\nunfold divide in |- *; intros.\nelim H0; intros; elim H2; intros.\nsplit.\nexact H1.\nclear H0 H2.\nelim H; intros; elim H2; intros; elim H5; intros; elim H8; intros.\nelim H10; intros; elim (H12 a H3); intros; elim H14; intros.\nsplit.\nexact H15.\nclear H0 H2 H3 H6 H7 H8 H9 H10 H13 H14 H15 H16.\nelim H4; intros.\nrewrite H0.\nleft.\nexact (opp_neutral S A Add O Opp H5).\nclear H4 H11.\nright.\nelim H0; intros; elim H3; intros; elim H4; intros.\nsplit.\nexact H2.\nclear H0 H2 H3 H4.\nexists (Opp x).\nelim (H12 x H6); intros; elim H2; intros.\nsplit.\nexact H3.\nclear H3 H4 H5 H6 H12.\nrewrite (mult_opp_r H d x H1 H0).\nelim H7; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem div_opp : is_ring -> forall a d : S, divide d a -> divide d (Opp a).\nProof.\nunfold divide in |- *; intros.\napply div_opp; apply opp_inj.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./rings.v\", line 218, characters 6-13:\nError: The reference div_opp was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/rings.v",
                "context": "\nexists (Add x x0).\nsplit.\nexact (H6 x x0 H4 H7). \nelim (H13 d x x0); intros. clear H4 H6 H7 H13.\nrewrite H0. clear H H0.\nelim H5; elim H8; reflexivity.\nQed.\n\n(***************)\nTheorem div_mult :\n is_ring -> forall a b d : S, divide d a -> A b -> divide d (Mult a b).\n\n\nunfold divide in |- *; intros.\n(* A d *)\nelim H0; intros. split. exact H2. clear H0 H2.\n(* A (a*b) *)\nelim H; intros; elim H2; intros; elim H5; intros; elim H7; intros.\nclear H0 H2 H4 H5 H7 H9.\nelim H3; intros.\nsplit. exact (H6 a b H0 H1). clear H0 H3.\n(* a*b = 0 or d <> 0 and a*b = d*q *)\n  (* a = 0 *)\nelim H2; intros. rewrite H0. \nelim (mult_O H b H1); intros. rewrite H4. left; reflexivity. clear H H2.\n  (* a <> 0 *)\nright.\nelim H0; intros; elim H2; intros. split. exact H.\nexists (Mult x b). \nelim H3; intros. split. exact (H6 x b H4 H1).\nrewrite (H8 d x b). elim H5; reflexivity.\nQed.\n\n(**************)\nTheorem div_opp : is_ring -> forall a d : S, divide d a -> divide d (Opp a).\n\n\nunfold divide in |- *; intros.\n(* A d *)\nelim H0; intros; elim H2; intros. split. exact H1. clear H0 H2.\n(* A (-a) *)\nelim H; intros; elim H2; intros; elim H5; intros; elim H8; intros.\nelim H10; intros; elim (H12 a H3); intros; elim H14; intros.\nsplit. exact H15. clear H0 H2 H3 H6 H7 H8 H9 H10 H13 H14 H15 H16.\n(* (-a) = 0 or d <> 0 and (-a)= d*q *)\n  (* a = 0 *)\nelim H4; intros. rewrite H0. left. exact (opp_neutral S A Add O Opp H5).\nclear H4 H11.\n  (* a <> 0 *)\nright.\nelim H0; intros; elim H3; intros; elim H4; intros. \nsplit. exact H2. clear H0 H2 H3 H4.\nexists (Opp x). \nelim (H12 x H6); intros; elim H2; intros. split. exact H3. \nclear H3 H4 H5 H6 H12.\nrewrite (mult_opp_r H d x H1 H0). elim H7; reflexivity.\nQed.\n\n(***************)\nDefinition is_gcd (a b d : S) :=\n  divide d a /\\\n  divide d b /\\ (forall q : S, divide q a -> divide q b -> divide q d).\n\n(**************)\n",
                "context_tokens": 731,
                "proof_start_offset": 8240,
                "proof_end_offset": 8608,
                "proof": "Lemma gcd_null : forall a b : S, is_gcd a b O -> a = O /\\ b = O.\nProof.\nunfold is_gcd in |- *; intros.\nelim H; intros; elim H0; intros; elim H3; intros.\nelim H5; intros.\nsplit.\nexact H6.\nclear H H0 H2 H3 H4 H5 H6.\nelim H1; intros; elim H; intros; elim H3; intros; elim H5; intros.\nexact H6.\nelim H6; intros; elim H7; reflexivity.\nelim H6; intros; elim H7; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_null : forall a b : S, is_gcd a b O -> a = O /\\ b = O.\nProof.\n intros.\n apply gcd_unique with (a := a); auto with arith.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./rings.v\", line 248, characters 7-17:\nError: The reference gcd_unique was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/rings.v",
                "context": "*b) *)\nelim H; intros; elim H2; intros; elim H5; intros; elim H7; intros.\nclear H0 H2 H4 H5 H7 H9.\nelim H3; intros.\nsplit. exact (H6 a b H0 H1). clear H0 H3.\n(* a*b = 0 or d <> 0 and a*b = d*q *)\n  (* a = 0 *)\nelim H2; intros. rewrite H0. \nelim (mult_O H b H1); intros. rewrite H4. left; reflexivity. clear H H2.\n  (* a <> 0 *)\nright.\nelim H0; intros; elim H2; intros. split. exact H.\nexists (Mult x b). \nelim H3; intros. split. exact (H6 x b H4 H1).\nrewrite (H8 d x b). elim H5; reflexivity.\nQed.\n\n(**************)\nTheorem div_opp : is_ring -> forall a d : S, divide d a -> divide d (Opp a).\n\n\nunfold divide in |- *; intros.\n(* A d *)\nelim H0; intros; elim H2; intros. split. exact H1. clear H0 H2.\n(* A (-a) *)\nelim H; intros; elim H2; intros; elim H5; intros; elim H8; intros.\nelim H10; intros; elim (H12 a H3); intros; elim H14; intros.\nsplit. exact H15. clear H0 H2 H3 H6 H7 H8 H9 H10 H13 H14 H15 H16.\n(* (-a) = 0 or d <> 0 and (-a)= d*q *)\n  (* a = 0 *)\nelim H4; intros. rewrite H0. left. exact (opp_neutral S A Add O Opp H5).\nclear H4 H11.\n  (* a <> 0 *)\nright.\nelim H0; intros; elim H3; intros; elim H4; intros. \nsplit. exact H2. clear H0 H2 H3 H4.\nexists (Opp x). \nelim (H12 x H6); intros; elim H2; intros. split. exact H3. \nclear H3 H4 H5 H6 H12.\nrewrite (mult_opp_r H d x H1 H0). elim H7; reflexivity.\nQed.\n\n(***************)\nDefinition is_gcd (a b d : S) :=\n  divide d a /\\\n  divide d b /\\ (forall q : S, divide q a -> divide q b -> divide q d).\n\n(**************)\nLemma gcd_null : forall a b : S, is_gcd a b O -> a = O /\\ b = O.\n\n\nunfold is_gcd in |- *; intros.\nelim H; intros; elim H0; intros; elim H3; intros.\nelim H5; intros. split. exact H6. clear H H0 H2 H3 H4 H5 H6.\nelim H1; intros; elim H; intros; elim H3; intros; elim H5; intros. exact H6.\nelim H6; intros; elim H7; reflexivity.\nelim H6; intros; elim H7; reflexivity.\nQed.\n\n(***************)\n",
                "context_tokens": 731,
                "proof_start_offset": 8628,
                "proof_end_offset": 8894,
                "proof": "Lemma gcd_null2 : is_ring -> forall d : S, is_gcd O O d -> d = O.\nProof.\nunfold is_gcd in |- *.\nintros.\nelim H0; intros; elim H2; intros.\nelim (H4 O (div_O_O H) (div_O_O H)); intros; elim H6; intros.\nelim H8; intros.\nexact H9.\nelim H9; intros; elim H10; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_null2 : is_ring -> forall d : S, is_gcd O O d -> d = O.\nProof.\nunfold is_gcd in |- *; intros.\nelim H; intros; elim H0; intros.\nelim (H0 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (SQed.",
                        "correct": false,
                        "error_msg": "File \"./rings.v\", line 261, characters 350-351:\nError:\nSyntax error: ',' or ')' expected after [constr:operconstr level 200] (in [constr:operconstr]).\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/rings.v",
                "context": "2.\n  (* a <> 0 *)\nright.\nelim H0; intros; elim H2; intros. split. exact H.\nexists (Mult x b). \nelim H3; intros. split. exact (H6 x b H4 H1).\nrewrite (H8 d x b). elim H5; reflexivity.\nQed.\n\n(**************)\nTheorem div_opp : is_ring -> forall a d : S, divide d a -> divide d (Opp a).\n\n\nunfold divide in |- *; intros.\n(* A d *)\nelim H0; intros; elim H2; intros. split. exact H1. clear H0 H2.\n(* A (-a) *)\nelim H; intros; elim H2; intros; elim H5; intros; elim H8; intros.\nelim H10; intros; elim (H12 a H3); intros; elim H14; intros.\nsplit. exact H15. clear H0 H2 H3 H6 H7 H8 H9 H10 H13 H14 H15 H16.\n(* (-a) = 0 or d <> 0 and (-a)= d*q *)\n  (* a = 0 *)\nelim H4; intros. rewrite H0. left. exact (opp_neutral S A Add O Opp H5).\nclear H4 H11.\n  (* a <> 0 *)\nright.\nelim H0; intros; elim H3; intros; elim H4; intros. \nsplit. exact H2. clear H0 H2 H3 H4.\nexists (Opp x). \nelim (H12 x H6); intros; elim H2; intros. split. exact H3. \nclear H3 H4 H5 H6 H12.\nrewrite (mult_opp_r H d x H1 H0). elim H7; reflexivity.\nQed.\n\n(***************)\nDefinition is_gcd (a b d : S) :=\n  divide d a /\\\n  divide d b /\\ (forall q : S, divide q a -> divide q b -> divide q d).\n\n(**************)\nLemma gcd_null : forall a b : S, is_gcd a b O -> a = O /\\ b = O.\n\n\nunfold is_gcd in |- *; intros.\nelim H; intros; elim H0; intros; elim H3; intros.\nelim H5; intros. split. exact H6. clear H H0 H2 H3 H4 H5 H6.\nelim H1; intros; elim H; intros; elim H3; intros; elim H5; intros. exact H6.\nelim H6; intros; elim H7; reflexivity.\nelim H6; intros; elim H7; reflexivity.\nQed.\n\n(***************)\nLemma gcd_null2 : is_ring -> forall d : S, is_gcd O O d -> d = O.\n\n\nunfold is_gcd in |- *. intros.\nelim H0; intros; elim H2; intros.\nelim (H4 O (div_O_O H) (div_O_O H)); intros; elim H6; intros.\nelim H8; intros. exact H9.\nelim H9; intros; elim H10; reflexivity.\nQed.\n\n(*****************************)\n",
                "context_tokens": 711,
                "proof_start_offset": 8928,
                "proof_end_offset": 9827,
                "proof": "Lemma simplification_integrity : is_unitary_commutative_ring -> integrity -> forall a x : S, A a -> A x -> a <> O -> Mult a x = a -> x = I.\nProof.\nintros.\nelim H; intros; elim H5; intros; elim H6; intros; elim H8; intros.\nelim H11; intros; elim H12; intros; elim H14; intros; elim H16; intros.\nelim H18; intros.\nclear H6 H8 H9 H12 H13 H14 H15 H16 H17 H18 H19 H21.\nrewrite (opp_opp S A Add O Opp H11 x H2).\nsymmetry in |- *; apply (opp_unicity S A Add O Opp H11 (Opp x) I).\nelim (H22 x H2); intros; elim H8; intros; elim H10; intros.\napply (opp_com S A Add O H7 (Opp x) I H9 H13).\nclear H6 H8 H12 H13.\nelim (H0 a (Add (Opp x) I)); intros.\nelim H3.\nexact a0.\nexact b.\nelim (H20 a (Opp x) I); intros.\nrewrite H8.\nelim (H14 a H1); intros.\nrewrite H12.\nclear H6 H8 H9 H12 H13 H14.\nrewrite (mult_opp_r H5 a x H1 H2).\nrewrite H4.\nelim (H22 a H1); intros; elim H8; intros; elim H12; intros; exact H14.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma simplification_integrity : is_unitary_commutative_ring -> integrity -> forall a x : S, A a -> A x -> a <> O -> Mult a x = a -> x = I.\nintros.\nelim H; intros.\nelim H0; intros.\nelim H1; intros.\nelim H2; intros.\nelim H3; intros.\nelim H4; intros.\nelim H5; intros.\nelim H5; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelimQed.",
                        "correct": false,
                        "error_msg": "File \"./rings.v\", line 271, characters 0-7:\nError: Unable to find an instance for the variables a, b.\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/rings.v",
                "context": "\n\n(***************)\nDefinition is_gcd (a b d : S) :=\n  divide d a /\\\n  divide d b /\\ (forall q : S, divide q a -> divide q b -> divide q d).\n\n(**************)\nLemma gcd_null : forall a b : S, is_gcd a b O -> a = O /\\ b = O.\n\n\nunfold is_gcd in |- *; intros.\nelim H; intros; elim H0; intros; elim H3; intros.\nelim H5; intros. split. exact H6. clear H H0 H2 H3 H4 H5 H6.\nelim H1; intros; elim H; intros; elim H3; intros; elim H5; intros. exact H6.\nelim H6; intros; elim H7; reflexivity.\nelim H6; intros; elim H7; reflexivity.\nQed.\n\n(***************)\nLemma gcd_null2 : is_ring -> forall d : S, is_gcd O O d -> d = O.\n\n\nunfold is_gcd in |- *. intros.\nelim H0; intros; elim H2; intros.\nelim (H4 O (div_O_O H) (div_O_O H)); intros; elim H6; intros.\nelim H8; intros. exact H9.\nelim H9; intros; elim H10; reflexivity.\nQed.\n\n(*****************************)\nLemma simplification_integrity :\n is_unitary_commutative_ring ->\n integrity -> forall a x : S, A a -> A x -> a <> O -> Mult a x = a -> x = I.\n\n\nintros. elim H; intros; elim H5; intros; elim H6; intros; elim H8; intros. \nelim H11; intros; elim H12; intros; elim H14; intros; elim H16; intros.\nelim H18; intros. clear H6 H8 H9 H12 H13 H14 H15 H16 H17 H18 H19 H21.\nrewrite (opp_opp S A Add O Opp H11 x H2). \nsymmetry  in |- *; apply (opp_unicity S A Add O Opp H11 (Opp x) I).\nelim (H22 x H2); intros; elim H8; intros; elim H10; intros.\napply (opp_com S A Add O H7 (Opp x) I H9 H13). clear H6 H8 H12 H13.\nelim (H0 a (Add (Opp x) I)); intros. \nelim H3. exact a0. exact b.\nelim (H20 a (Opp x) I); intros. rewrite H8. elim (H14 a H1); intros.\nrewrite H12. clear H6 H8 H9 H12 H13 H14.\nrewrite (mult_opp_r H5 a x H1 H2). rewrite H4.\nelim (H22 a H1); intros; elim H8; intros; elim H12; intros; exact H14.\nQed.\n\n(******************************) (* Pas aussi propre que je le souhaiterais *)\n",
                "context_tokens": 684,
                "proof_start_offset": 9908,
                "proof_end_offset": 11305,
                "proof": "Lemma gcd_unicity_apart_unities : is_unitary_commutative_ring -> integrity -> forall a b d1 d2 : S, is_gcd a b d1 -> is_gcd a b d2 -> exists x : S, inversible S Mult I x /\\ A x /\\ d2 = Mult d1 x.\nProof.\nintros.\nelim H2; intros; elim H4; intros; elim H1; intros; elim H8; intros.\nelim (H6 d1 H7 H9); intros; elim H12; intros; elim H14; intros.\nexists I.\nunfold inversible in |- *.\nelim H; intros; elim H17; intros; elim H19; intros.\nsplit.\nexists I.\nexact (H21 I H20).\nsplit.\nexact H20.\nelim (gcd_null a b); intros.\nrewrite H15.\nrewrite (gcd_null2 H16 d1).\nelim (mult_O H16 I); intros.\nsymmetry in |- *; exact H25.\nexact H20.\npattern O at 1 in |- *; elim H22; elim H23; exact H1.\nelim H15; exact H2.\nelim H15; intros; elim H17; intros.\nexists x.\nelim H; intros; elim H20; intros.\nsplit.\napply (inv_com S Mult I x H21).\nelim H1; intros; elim H24; intros; elim (H26 d2 H3 H5); intros.\nelim H28; intros; elim H30; intros.\nelim H16; exact H31.\nelim H31; intros; elim H33; intros.\nexists x0.\nelim H34; intro; clear H35.\nelim H18; intro; intro.\nrewrite H36.\nelim H; intros H37 H38; elim H37; intros H39 H40; elim H40; intros H41 H42.\nelim H42; intros H43 H44; elim H44; intros H45 H46; elim (H45 d1 x x0); intros.\nelim H34; intros.\napply (simplification_integrity H H0 d1 (Mult x x0) H11 (H43 x x0 H35 H48) H16).\nsymmetry in |- *; exact H47.\nexact H18.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_unicity_apart_unities : is_unitary_commutative_ring -> integrity -> forall a b d1 d2 : S, is_gcd a b d1 -> is_gcd a b d2 -> exists x : S, inversible S Mult I x /\\ A x /\\ d2 = Mult d1 x.\nProof.\nintros.\nelim H; intros; elim H0; intros; elim H1; intros.\nelim (H2 (S x)); intros.\nelim (H3 (S x)); intros.\nelim (H4 (S x)); intros.\nelim (H5 (S x)); intros.\nelim (H6 (S x)); intros.\nelim (H6 (S x)); intros.\nelim (H6 (S x)); intros.\nelim (H6 (S x)); intros.\nelim (H7 (S x)); intros.\nelim (H8 (S x)); intros.\nelim (H8 (S x)); intros.\nelim (H8 (S x)); intros.\nelim (H8 (S x)); intros.\nelim (H8 (S x)); intros.\nelim (H8 (S x)); intros.\nelim (H8 (S x)); intros.\nelim (H8 (S x)); intros.\nelim (H8 (S x)); intros.\nelim (H8 (S x)); intros.\nelim (H8 (S x)); intros.\nelim (H8 (S x)); intros.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./rings.v\", line 292, characters 16-23:\nError: Unable to find an instance for the variables a, b.\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/rings.v",
                "context": "8; intros; elim H10; intros.\napply (opp_com S A Add O H7 (Opp x) I H9 H13). clear H6 H8 H12 H13.\nelim (H0 a (Add (Opp x) I)); intros. \nelim H3. exact a0. exact b.\nelim (H20 a (Opp x) I); intros. rewrite H8. elim (H14 a H1); intros.\nrewrite H12. clear H6 H8 H9 H12 H13 H14.\nrewrite (mult_opp_r H5 a x H1 H2). rewrite H4.\nelim (H22 a H1); intros; elim H8; intros; elim H12; intros; exact H14.\nQed.\n\n(******************************) (* Pas aussi propre que je le souhaiterais *)\nLemma gcd_unicity_apart_unities :\n is_unitary_commutative_ring ->\n integrity ->\n forall a b d1 d2 : S,\n is_gcd a b d1 ->\n is_gcd a b d2 ->\n exists x : S, inversible S Mult I x /\\ A x /\\ d2 = Mult d1 x.\n\n\nintros.\nelim H2; intros; elim H4; intros; elim H1; intros; elim H8; intros.\nelim (H6 d1 H7 H9); intros; elim H12; intros; elim H14; intros.\n(* d2 = O *)\nexists I. unfold inversible in |- *.\nelim H; intros; elim H17; intros; elim H19; intros.\nsplit. exists I. exact (H21 I H20). split. exact H20.\nelim (gcd_null a b); intros. rewrite H15. rewrite (gcd_null2 H16 d1). \nelim (mult_O H16 I); intros. symmetry  in |- *; exact H25. exact H20.\npattern O at 1 in |- *; elim H22; elim H23; exact H1. elim H15; exact H2.\n(* d2 <> 0 *)\nelim H15; intros; elim H17; intros. exists x.\nelim H; intros; elim H20; intros. split. apply (inv_com S Mult I x H21).\nelim H1; intros; elim H24; intros; elim (H26 d2 H3 H5); intros.\nelim H28; intros; elim H30; intros. elim H16; exact H31.\n(* d1 <> 0 *)\nelim H31; intros; elim H33; intros. exists x0.\nelim H34; intro; clear H35. elim H18; intro; intro. rewrite H36.\nelim H; intros H37 H38; elim H37; intros H39 H40; elim H40; intros H41 H42.\nelim H42; intros H43 H44; elim H44; intros H45 H46; elim (H45 d1 x x0);\n intros.\nelim H34; intros.\napply\n (simplification_integrity H H0 d1 (Mult x x0) H11 (H43 x x0 H35 H48) H16).\nsymmetry  in |- *; exact H47.\nexact H18.\nQed.\n\n(**********)\n",
                "context_tokens": 731,
                "proof_start_offset": 11320,
                "proof_end_offset": 11524,
                "proof": "Lemma opp_O : is_ring -> forall x : S, A x -> Opp x = O -> x = O.\nProof.\nintros.\nelim H; intros; elim H3; intros.\nrewrite (opp_opp S A Add O Opp H4 x H0).\nrewrite H1.\nexact (opp_neutral S A Add O Opp H4).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma opp_O : is_ring -> forall x : S, A x -> Opp x = O -> x = O.\nintros.\nelim H; intros; elim H0; intros; elim H1; intros.\nelim H1; intros.\nelim H2; intros.\nelim H3; intros.\nelim H4; intros.\nelim H5; intros.\nelim H5; intros.\nelim H5; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6; intros.\nelim H6Qed.",
                        "correct": false,
                        "error_msg": "File \"./rings.v\", line 329, characters 16-23:\nError: Not an inductive product.\n\nmake[2]: *** [Makefile.coq:663: rings.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zdiv.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zdiv.v                                  *)\n(****************************************************************************)\nRequire Export Zbase.\nRequire Export Zadd.\nRequire Export Zmult.\nRequire Export Zle.\nRequire Export Euclid.\n\nUnset Standard Proposition Elimination Names.\n\n(********************)\nDefinition is_diveuclZ (a b q r : Z) :=\n  b <> OZ /\\ leZ OZ r /\\ ltZ r (absZ b) /\\ a = addZ (multZ b q) r.\n\n(***************************)\nInductive diveuclZ (a b : Z) : Set :=\n    divexZ : forall q r : Z, is_diveuclZ a b q r -> diveuclZ a b.\n\n(************************)\n",
                "context_tokens": 234,
                "proof_start_offset": 1632,
                "proof_end_offset": 3661,
                "proof": "Lemma divZ : forall a b : Z, b <> OZ -> diveuclZ a b.\nProof.\nintros a b; case b; intros.\nelim H; reflexivity.\ncase a; intros.\napply (divexZ OZ (pos n) OZ OZ).\nsplit.\ndiscriminate.\nsplit.\nexact I.\nsplit.\nexact (le_O_n n).\nrewrite (mult_OZ (pos n)).\nreflexivity.\nelim (eucl_dev (S n) (gt_Sn_O n) (S n0)).\nintros.\napply (divexZ (pos n0) (pos n) (posOZ q) (posOZ r)).\nsplit.\ndiscriminate.\nsplit.\napply (tech_posOZ_pos r).\nsplit.\nunfold ltZ in |- *; rewrite (tech_succ_posOZ r).\nexact (gt_S_le r n g).\nexact (tech_div1 n0 n q r e).\nelim (eucl_dev (S n) (gt_Sn_O n) (S n0)); intros.\ncase (eq_gt_O_dec r); intro.\napply (divexZ (neg n0) (pos n) (negOZ q) OZ).\nsplit.\ndiscriminate.\nsplit.\nexact I.\nsplit.\nexact (le_O_n n).\nrewrite (add_OZ (multZ (pos n) (negOZ q))).\napply (tech_div2 n0 n q).\nrewrite e; rewrite e0; auto with arith.\napply (divexZ (neg n0) (pos n) (neg q) (pos (n - r))).\nsplit.\ndiscriminate.\nsplit.\nexact I.\nsplit.\nexact (lt_le_S (n - r) n (lt_minus n r (gt_S_le r n g) g0)).\nexact (tech_div3 n0 n q r e g).\ncase a; intros.\napply (divexZ OZ (neg n) OZ OZ).\nsplit.\ndiscriminate.\nsplit.\nexact I.\nsplit.\nexact (le_O_n n).\nrewrite (mult_OZ (neg n)); reflexivity.\nelim (eucl_dev (S n) (gt_Sn_O n) (S n0)); intros.\napply (divexZ (pos n0) (neg n) (negOZ q) (posOZ r)).\nsplit.\ndiscriminate.\nsplit.\napply (tech_posOZ_pos r).\nsplit.\nunfold ltZ in |- *; rewrite (tech_succ_posOZ r); exact (gt_S_le r n g).\nexact (tech_div4 n0 n q r e).\nelim (eucl_dev (S n) (gt_Sn_O n) (S n0)); intros.\ncase (eq_gt_O_dec r); intro.\napply (divexZ (neg n0) (neg n) (posOZ q) OZ).\nunfold is_diveuclZ in |- *.\nsplit.\ndiscriminate.\nsplit.\nexact I.\nsplit.\nexact (le_O_n n).\nrewrite (add_OZ (multZ (neg n) (posOZ q))).\napply (tech_div5 n0 n q).\nrewrite e; rewrite e0; auto with arith.\napply (divexZ (neg n0) (neg n) (pos q) (pos (n - r))).\nsplit.\ndiscriminate.\nsplit.\nexact I.\nsplit.\nexact (lt_le_S (n - r) n (lt_minus n r (gt_S_le r n g) g0)).\nexact (tech_div6 n0 n q r e g).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma divZ : forall a b : Z, b <> OZ -> diveuclZ a b.\nsimple induction a; simple induction b; intros.\napply (H (posExp a b)); auto with arith.\napply (H (posExp a b)); auto with arith.\napply (H (posExp a b)); auto with arith.\napply (H (posExp a b)); auto with arith.\napply (H (posExp a b)); auto with arith.\napply (H (posExp a b)); auto with arith.\napply (H (posExp a b)); auto with arith.\napply (H (posExp a b)); auto with arith.\napply (H (posExp a b)); auto with arith.\napply (H (posExp a b)); auto with arith.\napply (H (posExp a b)); auto with arith.\napply (H (posExp a b)); auto with arith.\napply (H (posExp a b)); auto with arith.\napply (H (posExp a b)); auto with arith.\napply (H (posExp a b)); auto with arith.\napply (H (posExp a b)); auto with arith.\napply (H (posExp a b)); auto with arith.\napply (H (posExpQed.",
                        "correct": false,
                        "error_msg": "Warning: -extra and -extra-phony are deprecated.\nWarning: Write the extra targets in Makefile.coq.local.\n\nFile \"./Zdiv.v\", line 23, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./Zdiv.v\", line 36, characters 10-16:\nError: The reference posExp was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zdiv.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zbase.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                 Zbase.v                                  *)\n(****************************************************************************)\n\n(* Basic definitions on type Z *)\n\n(*************)\nInductive Z : Set :=\n  | OZ : Z\n  | pos : nat -> Z\n  | neg : nat -> Z.\n\n(***********)\nDefinition IZ := pos 0.\n\n(****************)\n(* was\nFixpoint is_posn [x,z :Z] : Prop :=\nCases x z of \n  OZ       y => False\n| (pos n) OZ => False \n| (pos n) (pos m) => (eq nat n m)\n| (pos n) (neg m) => False\n| (neg n) y => False\nend.\n*)\n\nDefinition is_posn (x z : Z) :=\n  match x, z with\n  | pos n, pos m => n = m :>nat\n  | _, _ => False\n  end.\n\n\n\n(**********************)\n",
                "context_tokens": 286,
                "proof_start_offset": 1694,
                "proof_end_offset": 1893,
                "proof": "Lemma tech_pos_not_posZ : forall n m : nat, n <> m -> pos n <> pos m.\nProof.\nunfold not in |- *; intros.\ncut (is_posn (pos n) (pos m)).\nsimpl in |- *; exact H.\nrewrite H0; simpl in |- *; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_pos_not_posZ : forall n m : nat, n <> m -> pos n <> pos m.\nProof.\n intros n m H; elim H; auto.\nQed.",
                        "correct": false,
                        "error_msg": "Warning: -extra and -extra-phony are deprecated.\nWarning: Write the extra targets in Makefile.coq.local.\n\nFile \"./Zbase.v\", line 53, characters 0-4:\nError: Attempt to save an incomplete proof (in proof tech_pos_not_posZ)\n\nmake[2]: *** [Makefile.coq:663: Zbase.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zbase.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                 Zbase.v                                  *)\n(****************************************************************************)\n\n(* Basic definitions on type Z *)\n\n(*************)\nInductive Z : Set :=\n  | OZ : Z\n  | pos : nat -> Z\n  | neg : nat -> Z.\n\n(***********)\nDefinition IZ := pos 0.\n\n(****************)\n(* was\nFixpoint is_posn [x,z :Z] : Prop :=\nCases x z of \n  OZ       y => False\n| (pos n) OZ => False \n| (pos n) (pos m) => (eq nat n m)\n| (pos n) (neg m) => False\n| (neg n) y => False\nend.\n*)\n\nDefinition is_posn (x z : Z) :=\n  match x, z with\n  | pos n, pos m => n = m :>nat\n  | _, _ => False\n  end.\n\n\n\n(**********************)\nLemma tech_pos_not_posZ : forall n m : nat, n <> m -> pos n <> pos m.\n\n\nunfold not in |- *; intros.\ncut (is_posn (pos n) (pos m)).\nsimpl in |- *; exact H. rewrite H0; simpl in |- *; reflexivity.\nQed.\n\n(**************)\n",
                "context_tokens": 362,
                "proof_start_offset": 1912,
                "proof_end_offset": 2065,
                "proof": "Lemma eq_OZ_dec : forall x : Z, {x = OZ} + {x <> OZ}.\nProof.\nintros; elim x.\nleft; reflexivity.\nintros; right; discriminate.\nintros; right; discriminate.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma eq_OZ_dec : forall x : Z, {x = OZ} + {x <> OZ}.\nintros x; elim x; auto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zbase.v\", line 61, characters 0-4:\nError: Attempt to save an incomplete proof (in proof eq_OZ_dec)\n\nmake[2]: *** [Makefile.coq:663: Zbase.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/misc.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  misc.v                                  *)\n(****************************************************************************)\nRequire Export Lci.\n\n(****************)\nDefinition antisym (A : Set) (R : A -> A -> Prop) :=\n  forall x y : A, R x y -> R y x -> x = y :>A.\n\n(********************)\n",
                "context_tokens": 156,
                "proof_start_offset": 1347,
                "proof_end_offset": 1460,
                "proof": "Definition pi1 : forall (A : Set) (P : A -> Prop), {x : A | P x} -> A.\nProof.\nsimple induction 1; auto.\nDefined.",
                "end_command": "Defined.",
                "generated_proofs": [
                    {
                        "proof": "Definition pi1 : forall (A : Set) (P : A -> Prop), {x : A | P x} -> A.\n\nDefinition sub1 (A : Set) (R : A -> A -> Prop) :=\n  forall x y : A, R x y -> R y x.\n\nDefinition sub2 (A : Set) (R : A -> A -> Prop) :=\n  forall x y : A, R x y -> R y x.\n\nDefinition sub3 (A : Set) (R : A -> A -> Prop) :=\n  forall x y : A, R x y -> R y x.\n\nDefinition sub3 (A : Set) (R : A -> A -> Prop) :=\n  forall x y : A, R x y -> R y x.\n\nDefinition sub4 (A : Set) (R : A -> A -> Prop) :=\n  forall x y : A, R x y -> R y x.\n\nDefinition sub4 (A : Set) (R : A -> A -> Prop) :=\n  forall x y : A, R x y -> R y x.\n\nDefinition sub4 (A : Set) (R : A -> A -> Prop) :=\n  forall x y : A, R x y -> R y x.\n\nDefinition sub5 (A : Set) (Defined.",
                        "correct": false,
                        "error_msg": "Warning: -extra and -extra-phony are deprecated.\nWarning: Write the extra targets in Makefile.coq.local.\n\nFile \"./misc.v\", line 35, characters 0-83:\nError: sub3 already exists.\n\nmake[2]: *** [Makefile.coq:663: misc.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/misc.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  misc.v                                  *)\n(****************************************************************************)\nRequire Export Lci.\n\n(****************)\nDefinition antisym (A : Set) (R : A -> A -> Prop) :=\n  forall x y : A, R x y -> R y x -> x = y :>A.\n\n(********************)\nDefinition pi1 : forall (A : Set) (P : A -> Prop), {x : A | P x} -> A.\n\nProof.\nsimple induction 1; auto.\nDefined.\n\n(********************)\n",
                "context_tokens": 203,
                "proof_start_offset": 1485,
                "proof_end_offset": 1628,
                "proof": "Lemma pi2 : forall (A : Set) (P : A -> Prop) (p : {x : A | P x}), P (pi1 A P p).\nProof.\nsimple induction p; unfold pi1 in |- *; trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma pi2 : forall (A : Set) (P : A -> Prop) (p : {x : A | P x}), P (pi1 A P p).\nProof.\nsimple induction 1; auto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./misc.v\", line 33, characters 0-18:\nError:\nLtac call to \"simple induction (quant_hyp)\" failed.\nNo 1st non dependent hypothesis in current goal even after head-reduction.\n\nmake[2]: *** [Makefile.coq:663: misc.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/misc.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  misc.v                                  *)\n(****************************************************************************)\nRequire Export Lci.\n\n(****************)\nDefinition antisym (A : Set) (R : A -> A -> Prop) :=\n  forall x y : A, R x y -> R y x -> x = y :>A.\n\n(********************)\nDefinition pi1 : forall (A : Set) (P : A -> Prop), {x : A | P x} -> A.\n\nProof.\nsimple induction 1; auto.\nDefined.\n\n(********************)\nLemma pi2 :\n forall (A : Set) (P : A -> Prop) (p : {x : A | P x}), P (pi1 A P p).\n\nProof.\nsimple induction p; unfold pi1 in |- *; trivial.\nQed.\n\n(*******************)\nDefinition inversible (S : Set) (Mult : S -> S -> S) \n  (I x : S) := exists y : S, Mult x y = I /\\ Mult y x = I.\n\n(************)\n",
                "context_tokens": 313,
                "proof_start_offset": 1781,
                "proof_end_offset": 2050,
                "proof": "Lemma inv_com : forall (S : Set) (Mult : S -> S -> S) (I x : S), commutativity S Mult -> (exists y : S, Mult x y = I) -> inversible S Mult I x.\nProof.\nintros; unfold inversible in |- *.\nelim H0; intros.\nexists x0.\nsplit.\nassumption.\nelim (H x x0); assumption.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma inv_com : forall (S : Set) (Mult : S -> S -> S) (I x : S), commutativity S Mult -> (exists y : S, Mult x y = I) -> inversible S Mult I x.\nProof.\nsimple induction 1; auto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./misc.v\", line 45, characters 0-18:\nError:\nLtac call to \"simple induction (quant_hyp)\" failed.\nCannot refine with term\n \"eq_ind (Mult ?M160 ?M161)\n    (fun _ : S => (exists y : S, Mult x y = I) -> inversible S Mult I x)\n    ?M165 (Mult ?M161 ?M160) (H ?M160 ?M161)\"\nbecause a metavariable has several occurrences.\n\nmake[2]: *** [Makefile.coq:663: misc.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zle.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zle.v                                   *)\n(****************************************************************************)\nRequire Export Arith.\nRequire Export misc.\nRequire Export groups.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\nRequire Export Zadd.\n\n(**************)\n(* order on Z *)\n(**************)\n\n(************)\nDefinition leZ (x y : Z) :=\n  match x return Prop with\n  | OZ =>\n      match y return Prop with\n      | OZ => True\n      | pos n => True\n      | neg n => False\n      end\n  | pos n =>\n      match y return Prop with\n      | OZ => False\n      | pos m => n <= m\n      | neg m => False\n      end\n  | neg n =>\n      match y return Prop with\n      | OZ => True\n      | pos m => True\n      | neg m => m <= n\n      end\n  end.\n\n(**************)\n",
                "context_tokens": 272,
                "proof_start_offset": 1823,
                "proof_end_offset": 1986,
                "proof": "Lemma sign_absZ : forall x : Z, leZ OZ (absZ x).\nProof.\nintros; elim x; simpl in |- *.\nexact I.\nintro; simpl in |- *.\nexact I.\nintro; simpl in |- *.\nexact I.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma sign_absZ : forall x : Z, leZ OZ (absZ x).\nProof.\n unfold decide, decide.\nQed.",
                        "correct": false,
                        "error_msg": "Warning: -extra and -extra-phony are deprecated.\nWarning: Write the extra targets in Makefile.coq.local.\n\nFile \"./Zle.v\", line 54, characters 8-14:\nError: The reference decide was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zle.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zle.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zle.v                                   *)\n(****************************************************************************)\nRequire Export Arith.\nRequire Export misc.\nRequire Export groups.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\nRequire Export Zadd.\n\n(**************)\n(* order on Z *)\n(**************)\n\n(************)\nDefinition leZ (x y : Z) :=\n  match x return Prop with\n  | OZ =>\n      match y return Prop with\n      | OZ => True\n      | pos n => True\n      | neg n => False\n      end\n  | pos n =>\n      match y return Prop with\n      | OZ => False\n      | pos m => n <= m\n      | neg m => False\n      end\n  | neg n =>\n      match y return Prop with\n      | OZ => True\n      | pos m => True\n      | neg m => m <= n\n      end\n  end.\n\n(**************)\nLemma sign_absZ : forall x : Z, leZ OZ (absZ x).\n\nProof.\nintros; elim x; simpl in |- *. exact I. intro; simpl in |- *. exact I. intro; simpl in |- *. exact I.\nQed.\n\n(********************)\n",
                "context_tokens": 333,
                "proof_start_offset": 2011,
                "proof_end_offset": 2188,
                "proof": "Lemma tech_le_pos_abs : forall x : Z, leZ OZ x -> absZ x = x.\nProof.\nintros x; elim x.\nunfold absZ in |- *; reflexivity.\nunfold absZ in |- *; reflexivity.\nintros; elim H.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_le_pos_abs : forall x : Z, leZ OZ x -> absZ x = x.\nProof.\nsimple induction x; simpl in |- *. exact I. intro; simpl in |- *. exact I. intro; simpl in |- *. exact I. intro; simpl in |- *. exact I.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zle.v\", line 61, characters 41-42:\nError:\nIn environment\nx : Z\nThe term \"I\" has type \"True\" while it is expected to have type\n \"True -> OZ = OZ\".\n\nmake[2]: *** [Makefile.coq:663: Zle.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zle.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zle.v                                   *)\n(****************************************************************************)\nRequire Export Arith.\nRequire Export misc.\nRequire Export groups.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\nRequire Export Zadd.\n\n(**************)\n(* order on Z *)\n(**************)\n\n(************)\nDefinition leZ (x y : Z) :=\n  match x return Prop with\n  | OZ =>\n      match y return Prop with\n      | OZ => True\n      | pos n => True\n      | neg n => False\n      end\n  | pos n =>\n      match y return Prop with\n      | OZ => False\n      | pos m => n <= m\n      | neg m => False\n      end\n  | neg n =>\n      match y return Prop with\n      | OZ => True\n      | pos m => True\n      | neg m => m <= n\n      end\n  end.\n\n(**************)\nLemma sign_absZ : forall x : Z, leZ OZ (absZ x).\n\nProof.\nintros; elim x; simpl in |- *. exact I. intro; simpl in |- *. exact I. intro; simpl in |- *. exact I.\nQed.\n\n(********************)\nLemma tech_le_pos_abs : forall x : Z, leZ OZ x -> absZ x = x.\n\nProof.\nintros x; elim x. \nunfold absZ in |- *; reflexivity. unfold absZ in |- *; reflexivity. intros; elim H.\nQed.\n\n(************************)\n",
                "context_tokens": 398,
                "proof_start_offset": 2217,
                "proof_end_offset": 2811,
                "proof": "Theorem leZ_antisymmetric : antisym Z leZ.\nProof.\nunfold antisym in |- *; intros x y; elim x.\nelim y.\nreflexivity.\nintros; elim H0.\nintros; elim H.\nintros n; elim y.\nintros; elim H.\nsimpl in |- *; intros; elim (le_antisym n n0 H H0); reflexivity.\nintros; elim H.\nintros n; elim y.\nintros; elim H0.\nintros; elim H0.\nsimpl in |- *; intros; elim (le_antisym n0 n H H0); reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem leZ_antisymmetric : antisym Z leZ.\nProof.\nunfold Rle in |- *; intros x y H'; elim H'.\nunfold absZ in |- *; reflexivity.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zle.v\", line 69, characters 7-10:\nError: The reference Rle was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zle.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zle.v",
                "context": "     *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Zle.v                                   *)\n(****************************************************************************)\nRequire Export Arith.\nRequire Export misc.\nRequire Export groups.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\nRequire Export Zadd.\n\n(**************)\n(* order on Z *)\n(**************)\n\n(************)\nDefinition leZ (x y : Z) :=\n  match x return Prop with\n  | OZ =>\n      match y return Prop with\n      | OZ => True\n      | pos n => True\n      | neg n => False\n      end\n  | pos n =>\n      match y return Prop with\n      | OZ => False\n      | pos m => n <= m\n      | neg m => False\n      end\n  | neg n =>\n      match y return Prop with\n      | OZ => True\n      | pos m => True\n      | neg m => m <= n\n      end\n  end.\n\n(**************)\nLemma sign_absZ : forall x : Z, leZ OZ (absZ x).\n\nProof.\nintros; elim x; simpl in |- *. exact I. intro; simpl in |- *. exact I. intro; simpl in |- *. exact I.\nQed.\n\n(********************)\nLemma tech_le_pos_abs : forall x : Z, leZ OZ x -> absZ x = x.\n\nProof.\nintros x; elim x. \nunfold absZ in |- *; reflexivity. unfold absZ in |- *; reflexivity. intros; elim H.\nQed.\n\n(************************)\nTheorem leZ_antisymmetric : antisym Z leZ.\n\nProof.\nunfold antisym in |- *; intros x y; elim x.\n(* OZ *)\nelim y.\n(* OZ OZ *)\nreflexivity.\n(* OZ (pos n) *)\nintros; elim H0.\n(* OZ (neg n) *)\nintros; elim H.\n(* (pos n) *)\nintros n; elim y.\n(* (pos n) OZ *)\nintros; elim H.\n(* (pos n) (pos n0) *)\nsimpl in |- *; intros; elim (le_antisym n n0 H H0); reflexivity.\n(* (pos n) (neg n0) *)\nintros; elim H.\n(* (neg n) *)\nintros n; elim y.\n(* (neg n) OZ *)\nintros; elim H0.\n(* (neg n) (pos n0) *)\nintros; elim H0.\n(* (neg n) (neg n0) *)\nsimpl in |- *; intros; elim (le_antisym n0 n H H0); reflexivity.\nQed.\n\n(************)\nDefinition ltZ (x y : Z) := leZ (succZ x) y.\n\n(****************)\nDefinition lt_absZ (x y : Z) := ltZ (absZ x) (absZ y).\n\n(*******************)\n",
                "context_tokens": 627,
                "proof_start_offset": 2971,
                "proof_end_offset": 3345,
                "proof": "Lemma tech_lt_abs_OZ : forall x : Z, lt_absZ x (pos 0) -> x = OZ.\nProof.\nsimple induction x.\nreflexivity.\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *; unfold leZ in |- *; intros.\nelim (le_Sn_O n H).\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *; unfold leZ in |- *; intros.\nelim (le_Sn_O n H).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_lt_abs_OZ : forall x : Z, lt_absZ x (pos 0) -> x = OZ.\nProof.\nintros x y; elim x.\n(* (neg n) *)\nintros; elim H.\n(* (neg n) *)\nintros; elim H0.\n(* (neg n) *)\nintros; elim H0.\n(* (neg n) *)\nintros; elim H0.\n(* (neg n) *)\nintros; elim H0.\n(* (neg n) *)\nintros; elim H0.\n(* (neg n) *)\nintros; elim H0.\n(* (neg n) *)\nintros; elim H0.\n(* (neg n) *)\nintros; elim H0.\n(* (neg n) *)\nintros; elim H0.\n(* (neg n) *)\nintros; elim H0.\n(* (neg n) *)\nintros; elim H0.\n(* (neg n) *)\nintros; elim H0.\n(* (neg n) *)\nintros; elim H0.\n(* (neg n) *)\nintros; elim H0.\n(* (neg n) *)\nintros; elim H0.\n(* (neg n) *)\nintros; elim H0.\n(* (neg n) *)\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zle.v\", line 108, characters 13-14:\nError: The reference H was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zle.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zle.v",
                "context": " Zle.v                                   *)\n(****************************************************************************)\nRequire Export Arith.\nRequire Export misc.\nRequire Export groups.\nRequire Export Zbase.\nRequire Export Z_succ_pred.\nRequire Export Zadd.\n\n(**************)\n(* order on Z *)\n(**************)\n\n(************)\nDefinition leZ (x y : Z) :=\n  match x return Prop with\n  | OZ =>\n      match y return Prop with\n      | OZ => True\n      | pos n => True\n      | neg n => False\n      end\n  | pos n =>\n      match y return Prop with\n      | OZ => False\n      | pos m => n <= m\n      | neg m => False\n      end\n  | neg n =>\n      match y return Prop with\n      | OZ => True\n      | pos m => True\n      | neg m => m <= n\n      end\n  end.\n\n(**************)\nLemma sign_absZ : forall x : Z, leZ OZ (absZ x).\n\nProof.\nintros; elim x; simpl in |- *. exact I. intro; simpl in |- *. exact I. intro; simpl in |- *. exact I.\nQed.\n\n(********************)\nLemma tech_le_pos_abs : forall x : Z, leZ OZ x -> absZ x = x.\n\nProof.\nintros x; elim x. \nunfold absZ in |- *; reflexivity. unfold absZ in |- *; reflexivity. intros; elim H.\nQed.\n\n(************************)\nTheorem leZ_antisymmetric : antisym Z leZ.\n\nProof.\nunfold antisym in |- *; intros x y; elim x.\n(* OZ *)\nelim y.\n(* OZ OZ *)\nreflexivity.\n(* OZ (pos n) *)\nintros; elim H0.\n(* OZ (neg n) *)\nintros; elim H.\n(* (pos n) *)\nintros n; elim y.\n(* (pos n) OZ *)\nintros; elim H.\n(* (pos n) (pos n0) *)\nsimpl in |- *; intros; elim (le_antisym n n0 H H0); reflexivity.\n(* (pos n) (neg n0) *)\nintros; elim H.\n(* (neg n) *)\nintros n; elim y.\n(* (neg n) OZ *)\nintros; elim H0.\n(* (neg n) (pos n0) *)\nintros; elim H0.\n(* (neg n) (neg n0) *)\nsimpl in |- *; intros; elim (le_antisym n0 n H H0); reflexivity.\nQed.\n\n(************)\nDefinition ltZ (x y : Z) := leZ (succZ x) y.\n\n(****************)\nDefinition lt_absZ (x y : Z) := ltZ (absZ x) (absZ y).\n\n(*******************)\nLemma tech_lt_abs_OZ : forall x : Z, lt_absZ x (pos 0) -> x = OZ.\n\nProof.\nsimple induction x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *;\n unfold leZ in |- *; intros. \nelim (le_Sn_O n H).\n(* neg n *)\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *;\n unfold leZ in |- *; intros. \nelim (le_Sn_O n H).\nQed.\n\n(*******************)\n",
                "context_tokens": 737,
                "proof_start_offset": 3369,
                "proof_end_offset": 3510,
                "proof": "Lemma tech_posOZ_pos : forall n : nat, leZ OZ (posOZ n).\nProof.\nintros; elim n.\nsimpl in |- *; exact I.\nsimpl in |- *; intros; exact I.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tech_posOZ_pos : forall n : nat, leZ OZ (posOZ n).\nProof.\nsimple induction n.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.\n(* pos n *)\nreflexivity.Qed.",
                        "correct": false,
                        "error_msg": "File \"./Zle.v\", line 129, characters 0-12:\nError: No such goal.\n\nmake[2]: *** [Makefile.coq:663: Zle.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zle.v",
                "context": "\nDefinition leZ (x y : Z) :=\n  match x return Prop with\n  | OZ =>\n      match y return Prop with\n      | OZ => True\n      | pos n => True\n      | neg n => False\n      end\n  | pos n =>\n      match y return Prop with\n      | OZ => False\n      | pos m => n <= m\n      | neg m => False\n      end\n  | neg n =>\n      match y return Prop with\n      | OZ => True\n      | pos m => True\n      | neg m => m <= n\n      end\n  end.\n\n(**************)\nLemma sign_absZ : forall x : Z, leZ OZ (absZ x).\n\nProof.\nintros; elim x; simpl in |- *. exact I. intro; simpl in |- *. exact I. intro; simpl in |- *. exact I.\nQed.\n\n(********************)\nLemma tech_le_pos_abs : forall x : Z, leZ OZ x -> absZ x = x.\n\nProof.\nintros x; elim x. \nunfold absZ in |- *; reflexivity. unfold absZ in |- *; reflexivity. intros; elim H.\nQed.\n\n(************************)\nTheorem leZ_antisymmetric : antisym Z leZ.\n\nProof.\nunfold antisym in |- *; intros x y; elim x.\n(* OZ *)\nelim y.\n(* OZ OZ *)\nreflexivity.\n(* OZ (pos n) *)\nintros; elim H0.\n(* OZ (neg n) *)\nintros; elim H.\n(* (pos n) *)\nintros n; elim y.\n(* (pos n) OZ *)\nintros; elim H.\n(* (pos n) (pos n0) *)\nsimpl in |- *; intros; elim (le_antisym n n0 H H0); reflexivity.\n(* (pos n) (neg n0) *)\nintros; elim H.\n(* (neg n) *)\nintros n; elim y.\n(* (neg n) OZ *)\nintros; elim H0.\n(* (neg n) (pos n0) *)\nintros; elim H0.\n(* (neg n) (neg n0) *)\nsimpl in |- *; intros; elim (le_antisym n0 n H H0); reflexivity.\nQed.\n\n(************)\nDefinition ltZ (x y : Z) := leZ (succZ x) y.\n\n(****************)\nDefinition lt_absZ (x y : Z) := ltZ (absZ x) (absZ y).\n\n(*******************)\nLemma tech_lt_abs_OZ : forall x : Z, lt_absZ x (pos 0) -> x = OZ.\n\nProof.\nsimple induction x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *;\n unfold leZ in |- *; intros. \nelim (le_Sn_O n H).\n(* neg n *)\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *;\n unfold leZ in |- *; intros. \nelim (le_Sn_O n H).\nQed.\n\n(*******************)\nLemma tech_posOZ_pos : forall n : nat, leZ OZ (posOZ n).\n\nProof.\nintros; elim n. simpl in |- *; exact I. simpl in |- *; intros; exact I.\nQed.\n\n(**************)\n",
                "context_tokens": 731,
                "proof_start_offset": 3529,
                "proof_end_offset": 3703,
                "proof": "Lemma le_opp_OZ_l : forall x : Z, leZ OZ x -> leZ (oppZ x) OZ.\nProof.\nintros x; elim x.\nsimpl in |- *; intros; exact I.\nsimpl in |- *; intros; exact I.\nintros; elim H.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma le_opp_OZ_l : forall x : Z, leZ OZ x -> leZ (oppZ x) OZ.\nProof.\nsimple induction x.\n(* x *)\nunfold lt_absZ in |- *; unfold tge in |- *; unfold tge in |- *;\n unfold tge in |- *; unfold tge in |- *;\n unfold tge in |- *; unfold tge in |- *;\n unfold tge in |- *; unfold tge in |- *;\n unfold tge in |- *; unfold tge in |- *; \n unfold tge in |- *; unfold tge in |- *; \n unfold tge in |- *; unfold tge in |- *; \n unfold tge in |- *; unfold tge in |- *; \n unfold tge in |- *; \n unfold tge in |- *; unfold tge in |- *; \n unfold tge in |- *; unfold tge in |- *; \n unfold tge in |- *; \n unfold tge in |- *; unfold tge in |- *; \n unfold tge in |- *; \n unfold tge in |- *; unfold tge in |- *; \n unfold tge in |- *; \n unfold tge in |- *; unfold tge in |- *; \n unfold tge in |- *; \n unfold tge in |- *; unfold tge in |- *; \n unfold tge in |- *; \n unfold tge in |- *; unfold tge in |- *; \n unfold tge in |- *; \n unfold tge in |- *; unfold tge in |- *; \n unfold tge in |- *; \n unfold tge in |- *; unfold tge in |- *; \nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zle.v\", line 157, characters 0-3:\nError: The reference Qed was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Zle.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zle.v",
                "context": "\n      end\n  | neg n =>\n      match y return Prop with\n      | OZ => True\n      | pos m => True\n      | neg m => m <= n\n      end\n  end.\n\n(**************)\nLemma sign_absZ : forall x : Z, leZ OZ (absZ x).\n\nProof.\nintros; elim x; simpl in |- *. exact I. intro; simpl in |- *. exact I. intro; simpl in |- *. exact I.\nQed.\n\n(********************)\nLemma tech_le_pos_abs : forall x : Z, leZ OZ x -> absZ x = x.\n\nProof.\nintros x; elim x. \nunfold absZ in |- *; reflexivity. unfold absZ in |- *; reflexivity. intros; elim H.\nQed.\n\n(************************)\nTheorem leZ_antisymmetric : antisym Z leZ.\n\nProof.\nunfold antisym in |- *; intros x y; elim x.\n(* OZ *)\nelim y.\n(* OZ OZ *)\nreflexivity.\n(* OZ (pos n) *)\nintros; elim H0.\n(* OZ (neg n) *)\nintros; elim H.\n(* (pos n) *)\nintros n; elim y.\n(* (pos n) OZ *)\nintros; elim H.\n(* (pos n) (pos n0) *)\nsimpl in |- *; intros; elim (le_antisym n n0 H H0); reflexivity.\n(* (pos n) (neg n0) *)\nintros; elim H.\n(* (neg n) *)\nintros n; elim y.\n(* (neg n) OZ *)\nintros; elim H0.\n(* (neg n) (pos n0) *)\nintros; elim H0.\n(* (neg n) (neg n0) *)\nsimpl in |- *; intros; elim (le_antisym n0 n H H0); reflexivity.\nQed.\n\n(************)\nDefinition ltZ (x y : Z) := leZ (succZ x) y.\n\n(****************)\nDefinition lt_absZ (x y : Z) := ltZ (absZ x) (absZ y).\n\n(*******************)\nLemma tech_lt_abs_OZ : forall x : Z, lt_absZ x (pos 0) -> x = OZ.\n\nProof.\nsimple induction x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *;\n unfold leZ in |- *; intros. \nelim (le_Sn_O n H).\n(* neg n *)\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *;\n unfold leZ in |- *; intros. \nelim (le_Sn_O n H).\nQed.\n\n(*******************)\nLemma tech_posOZ_pos : forall n : nat, leZ OZ (posOZ n).\n\nProof.\nintros; elim n. simpl in |- *; exact I. simpl in |- *; intros; exact I.\nQed.\n\n(**************)\nLemma le_opp_OZ_l : forall x : Z, leZ OZ x -> leZ (oppZ x) OZ.\n\nProof.\nintros x; elim x. simpl in |- *; intros; exact I. simpl in |- *; intros; exact I. \nintros; elim H.\nQed.\n\n(**************)\n",
                "context_tokens": 726,
                "proof_start_offset": 3722,
                "proof_end_offset": 3902,
                "proof": "Lemma le_opp_OZ : forall x y : Z, x = oppZ y -> leZ OZ x -> leZ OZ y -> x = OZ.\nProof.\nintros.\napply (leZ_antisymmetric x OZ).\nrewrite H.\nexact (le_opp_OZ_l y H1).\nexact H0.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma le_opp_OZ : forall x y : Z, x = oppZ y -> leZ OZ x -> leZ OZ y -> x = OZ.\nProof.\nintros x y; elim x.\n(* pos n *)\nunfold lt_absZ in |- *; unfold ltZ in |- *; unfold ltZ in |- *;\n unfold tge in |- *; unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge in |- *;\n unfold tge inQed.",
                        "correct": false,
                        "error_msg": "File \"./Zle.v\", line 176, characters 12-17:\nError:\nSyntax error: [tactic:ltac_use_default] expected after [tactic:tactic] (in [vernac:tactic_command]).\n\nmake[2]: *** [Makefile.coq:663: Zle.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Zle.v",
                "context": "; simpl in |- *. exact I. intro; simpl in |- *. exact I.\nQed.\n\n(********************)\nLemma tech_le_pos_abs : forall x : Z, leZ OZ x -> absZ x = x.\n\nProof.\nintros x; elim x. \nunfold absZ in |- *; reflexivity. unfold absZ in |- *; reflexivity. intros; elim H.\nQed.\n\n(************************)\nTheorem leZ_antisymmetric : antisym Z leZ.\n\nProof.\nunfold antisym in |- *; intros x y; elim x.\n(* OZ *)\nelim y.\n(* OZ OZ *)\nreflexivity.\n(* OZ (pos n) *)\nintros; elim H0.\n(* OZ (neg n) *)\nintros; elim H.\n(* (pos n) *)\nintros n; elim y.\n(* (pos n) OZ *)\nintros; elim H.\n(* (pos n) (pos n0) *)\nsimpl in |- *; intros; elim (le_antisym n n0 H H0); reflexivity.\n(* (pos n) (neg n0) *)\nintros; elim H.\n(* (neg n) *)\nintros n; elim y.\n(* (neg n) OZ *)\nintros; elim H0.\n(* (neg n) (pos n0) *)\nintros; elim H0.\n(* (neg n) (neg n0) *)\nsimpl in |- *; intros; elim (le_antisym n0 n H H0); reflexivity.\nQed.\n\n(************)\nDefinition ltZ (x y : Z) := leZ (succZ x) y.\n\n(****************)\nDefinition lt_absZ (x y : Z) := ltZ (absZ x) (absZ y).\n\n(*******************)\nLemma tech_lt_abs_OZ : forall x : Z, lt_absZ x (pos 0) -> x = OZ.\n\nProof.\nsimple induction x.\n(* OZ *)\nreflexivity.\n(* pos n *)\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *;\n unfold leZ in |- *; intros. \nelim (le_Sn_O n H).\n(* neg n *)\nunfold lt_absZ in |- *; unfold absZ in |- *; unfold ltZ in |- *;\n unfold leZ in |- *; intros. \nelim (le_Sn_O n H).\nQed.\n\n(*******************)\nLemma tech_posOZ_pos : forall n : nat, leZ OZ (posOZ n).\n\nProof.\nintros; elim n. simpl in |- *; exact I. simpl in |- *; intros; exact I.\nQed.\n\n(**************)\nLemma le_opp_OZ_l : forall x : Z, leZ OZ x -> leZ (oppZ x) OZ.\n\nProof.\nintros x; elim x. simpl in |- *; intros; exact I. simpl in |- *; intros; exact I. \nintros; elim H.\nQed.\n\n(**************)\nLemma le_opp_OZ :\n forall x y : Z, x = oppZ y -> leZ OZ x -> leZ OZ y -> x = OZ.\n\nProof.\nintros. apply (leZ_antisymmetric x OZ). rewrite H. exact (le_opp_OZ_l y H1).\nexact H0.\nQed.\n\n(***************)\n",
                "context_tokens": 725,
                "proof_start_offset": 3922,
                "proof_end_offset": 4176,
                "proof": "Lemma le_opp_OZ2 : forall x y : Z, x = oppZ y -> leZ OZ x -> leZ OZ y -> x = y.\nProof.\nintros.\nrewrite (le_opp_OZ x y H H0 H1).\nrewrite (opp_opp Z IdZ addZ OZ oppZ Z_group y I); elim H.\nrewrite (le_opp_OZ x y H H0 H1); simpl in |- *; reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma le_opp_OZ2 : forall x y : Z, x = oppZ y -> leZ OZ x -> leZ OZ y -> x = y.\nProof.\nintros. apply (le_opp_)!x; auto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Zle.v\", line 147, characters 23-24:\nError:\nSyntax error: [tactic:ltac_use_default] expected after [tactic:tactic] (in [vernac:tactic_command]).\n\nmake[2]: *** [Makefile.coq:663: Zle.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Nat_complements.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                            Nat_complements.v                             *)\n(****************************************************************************)\nRequire Import Arith.\nRequire Import Compare_dec.\n\n(****************)\n",
                "context_tokens": 121,
                "proof_start_offset": 1253,
                "proof_end_offset": 1349,
                "proof": "Lemma eq_gt_O_dec : forall n : nat, {n = 0} + {n > 0}.\nProof.\nsimple destruct n; auto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma eq_gt_O_dec : forall n : nat, {n = 0} + {n > 0}.\nsimple induction n.\nauto.\nintros.\napply (H (S n0)).\nauto.\nQed.",
                        "correct": false,
                        "error_msg": "Warning: -extra and -extra-phony are deprecated.\nWarning: Write the extra targets in Makefile.coq.local.\n\nFile \"./Nat_complements.v\", line 25, characters 7-14:\nError: Illegal application (Non-functional construction): \nThe expression \"H\" of type \"{n0 = 0} + {n0 > 0}\"\ncannot be applied to the term\n \"S n0\" : \"nat\"\n\nmake[2]: *** [Makefile.coq:663: Nat_complements.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Nat_complements.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                            Nat_complements.v                             *)\n(****************************************************************************)\nRequire Import Arith.\nRequire Import Compare_dec.\n\n(****************)\nLemma eq_gt_O_dec : forall n : nat, {n = 0} + {n > 0}.\n\nsimple destruct n; auto with arith.\nQed.\n\n(****************)\n",
                "context_tokens": 164,
                "proof_start_offset": 1370,
                "proof_end_offset": 1528,
                "proof": "Lemma mult_commut : forall n m : nat, n * m = m * n.\nProof.\nintros; elim n; simpl in |- *.\nauto with arith.\nintros; rewrite H; elim mult_n_Sm; auto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_commut : forall n m : nat, n * m = m * n.\nsimple destruct n; auto with arith.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Nat_complements.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                            Nat_complements.v                             *)\n(****************************************************************************)\nRequire Import Arith.\nRequire Import Compare_dec.\n\n(****************)\nLemma eq_gt_O_dec : forall n : nat, {n = 0} + {n > 0}.\n\nsimple destruct n; auto with arith.\nQed.\n\n(****************)\nLemma mult_commut : forall n m : nat, n * m = m * n.\n\nintros; elim n; simpl in |- *.\nauto with arith.\nintros; rewrite H; elim mult_n_Sm; auto with arith.\nQed.\n\n(***************)\n",
                "context_tokens": 224,
                "proof_start_offset": 1548,
                "proof_end_offset": 1637,
                "proof": "Lemma mult_neutr : forall n : nat, 1 * n = n.\nProof.\nunfold mult in |- *; auto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_neutr : forall n : nat, 1 * n = n.\nsimple induction n; auto with arith.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Nat_complements.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                            Nat_complements.v                             *)\n(****************************************************************************)\nRequire Import Arith.\nRequire Import Compare_dec.\n\n(****************)\nLemma eq_gt_O_dec : forall n : nat, {n = 0} + {n > 0}.\n\nsimple destruct n; auto with arith.\nQed.\n\n(****************)\nLemma mult_commut : forall n m : nat, n * m = m * n.\n\nintros; elim n; simpl in |- *.\nauto with arith.\nintros; rewrite H; elim mult_n_Sm; auto with arith.\nQed.\n\n(***************)\nLemma mult_neutr : forall n : nat, 1 * n = n.\n\nunfold mult in |- *; auto with arith.\nQed.\n\n(********************)\n",
                "context_tokens": 261,
                "proof_start_offset": 1662,
                "proof_end_offset": 1875,
                "proof": "Lemma technical_lemma : forall y m : nat, S (y * m + (y + m) + m) = S y * m + (S y + m).\nProof.\nintros; simpl in |- *; elim (plus_comm m (y * m + (y + m))).\nrewrite (plus_assoc m (y * m) (y + m)); auto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma technical_lemma : forall y m : nat, S (y * m + (y + m) + m) = S y * m + (S y + m).\nintros; elim n; simpl in |- *; auto with arith.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Nat_complements.v\", line 42, characters 13-14:\nError: The reference n was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Nat_complements.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Nat_complements.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                            Nat_complements.v                             *)\n(****************************************************************************)\nRequire Import Arith.\nRequire Import Compare_dec.\n\n(****************)\nLemma eq_gt_O_dec : forall n : nat, {n = 0} + {n > 0}.\n\nsimple destruct n; auto with arith.\nQed.\n\n(****************)\nLemma mult_commut : forall n m : nat, n * m = m * n.\n\nintros; elim n; simpl in |- *.\nauto with arith.\nintros; rewrite H; elim mult_n_Sm; auto with arith.\nQed.\n\n(***************)\nLemma mult_neutr : forall n : nat, 1 * n = n.\n\nunfold mult in |- *; auto with arith.\nQed.\n\n(********************)\nLemma technical_lemma :\n forall y m : nat, S (y * m + (y + m) + m) = S y * m + (S y + m).\n\nintros; simpl in |- *; elim (plus_comm m (y * m + (y + m))).\nrewrite (plus_assoc m (y * m) (y + m)); auto with arith.\nQed.\n\n(**************)\n",
                "context_tokens": 352,
                "proof_start_offset": 1894,
                "proof_end_offset": 2016,
                "proof": "Lemma lt_minus2 : forall n m : nat, n < m -> 0 < m - n.\nProof.\nsimple induction 1; intros; elim minus_Sn_m; auto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma lt_minus2 : forall n m : nat, n < m -> 0 < m - n.\nintros; elim n; simpl in |- *; auto with arith.\nintros; rewrite H; elim plus_n_Sm; auto with arith.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Nat_complements.v\", line 51, characters 8-17:\nError: Found no subterm matching \"n\" in the current goal.\n\nmake[2]: *** [Makefile.coq:663: Nat_complements.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Nat_complements.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                            Nat_complements.v                             *)\n(****************************************************************************)\nRequire Import Arith.\nRequire Import Compare_dec.\n\n(****************)\nLemma eq_gt_O_dec : forall n : nat, {n = 0} + {n > 0}.\n\nsimple destruct n; auto with arith.\nQed.\n\n(****************)\nLemma mult_commut : forall n m : nat, n * m = m * n.\n\nintros; elim n; simpl in |- *.\nauto with arith.\nintros; rewrite H; elim mult_n_Sm; auto with arith.\nQed.\n\n(***************)\nLemma mult_neutr : forall n : nat, 1 * n = n.\n\nunfold mult in |- *; auto with arith.\nQed.\n\n(********************)\nLemma technical_lemma :\n forall y m : nat, S (y * m + (y + m) + m) = S y * m + (S y + m).\n\nintros; simpl in |- *; elim (plus_comm m (y * m + (y + m))).\nrewrite (plus_assoc m (y * m) (y + m)); auto with arith.\nQed.\n\n(**************)\nLemma lt_minus2 : forall n m : nat, n < m -> 0 < m - n.\nsimple induction 1; intros; elim minus_Sn_m; auto with arith.\nQed.\n\n(***************)\n",
                "context_tokens": 400,
                "proof_start_offset": 2036,
                "proof_end_offset": 2173,
                "proof": "Lemma minus_n_Sm : forall n m : nat, m < n -> pred (n - m) = n - S m.\nProof.\nsimple induction 1; intros; elim minus_Sn_m; auto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma minus_n_Sm : forall n m : nat, m < n -> pred (n - m) = n - S m.\nsimple induction 1; intros; elim minus_Sn_m; auto with arith.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/chinese/Nat_complements.v",
                "context": "(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                            Nat_complements.v                             *)\n(****************************************************************************)\nRequire Import Arith.\nRequire Import Compare_dec.\n\n(****************)\nLemma eq_gt_O_dec : forall n : nat, {n = 0} + {n > 0}.\n\nsimple destruct n; auto with arith.\nQed.\n\n(****************)\nLemma mult_commut : forall n m : nat, n * m = m * n.\n\nintros; elim n; simpl in |- *.\nauto with arith.\nintros; rewrite H; elim mult_n_Sm; auto with arith.\nQed.\n\n(***************)\nLemma mult_neutr : forall n : nat, 1 * n = n.\n\nunfold mult in |- *; auto with arith.\nQed.\n\n(********************)\nLemma technical_lemma :\n forall y m : nat, S (y * m + (y + m) + m) = S y * m + (S y + m).\n\nintros; simpl in |- *; elim (plus_comm m (y * m + (y + m))).\nrewrite (plus_assoc m (y * m) (y + m)); auto with arith.\nQed.\n\n(**************)\nLemma lt_minus2 : forall n m : nat, n < m -> 0 < m - n.\nsimple induction 1; intros; elim minus_Sn_m; auto with arith.\nQed.\n\n(***************)\nLemma minus_n_Sm : forall n m : nat, m < n -> pred (n - m) = n - S m.\n\nsimple induction 1; intros; elim minus_Sn_m; auto with arith.\nQed.\n\n(************)\n",
                "context_tokens": 456,
                "proof_start_offset": 2190,
                "proof_end_offset": 2319,
                "proof": "Lemma lt_succ : forall n m : nat, n <= S m -> {n <= m} + {n = S m}.\nProof.\nintros; elim (le_lt_eq_dec n (S m) H); auto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma lt_succ : forall n m : nat, n <= S m -> {n <= m} + {n = S m}.\nsimple induction n; intros; elim minus_Sn_m; auto with arith.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Nat_complements.v\", line 61, characters 28-43:\nError: Unable to find an instance for the variables n, m.\n\nmake[2]: *** [Makefile.coq:663: Nat_complements.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            }
        ],
        "hoare-tut": [
            {
                "filepath": "./coq_projects/hoare-tut/exgcd.v",
                "context": " x in (ExVar A) return A -> Env -> Env with\n   | VX => fun vx e => (vx,snd e)\n   | VY => fun vy e => (fst e,vy)\n   end.\n\nDefinition get (A:Type): (ExVar A) -> Env -> A :=\n fun x => \n   match x in (ExVar A) return Env -> A with\n   | VX => fun e => fst e\n   | VY => fun e => snd e\n   end.\n\n(** I consider only two binary operators [PLUS] and [MINUS]. Their\nmeaning is given by [eval_binOP] below *)\nInductive binOP: Type := PLUS | MINUS.\n \nDefinition eval_binOP: binOP -> Z -> Z -> Z :=\n fun op => match op with\n  | PLUS => Zplus\n  | MINUS => Zminus\n end.\n\n(** I consider only three comparison operators [EQ], [NEQ] and\n[LE]. Their meaning is given by [eval_relOP] below *)\nInductive relOP: Type := EQ | NEQ | LE.\n\nDefinition eval_relOP: relOP -> Z -> Z -> bool :=\n fun op => match op with\n  | EQ => Zeq_bool\n  | NEQ => Zneq_bool\n  | LE => Zle_bool\n end. \n\n(** Here is the abstract syntax of expressions. The semantics is given\nby [eval] below *)\nInductive ExExpr: Type -> Type :=\n | const: forall (A:Type), A -> (ExExpr A)\n | binop: binOP -> (ExExpr Z) -> (ExExpr Z) -> (ExExpr Z)\n | relop: relOP -> (ExExpr Z) -> (ExExpr Z) -> (ExExpr bool)\n | getvar: forall (A:Type), (ExVar A) -> (ExExpr A). \n\nDefinition Expr:= ExExpr.\n\nFixpoint eval (A:Type) (expr:Expr A) (e:Env) { struct expr } : A :=\n match expr in ExExpr A return A with\n | const A v => v\n | binop op e1 e2 => eval_binOP op (eval e1 e) (eval e2 e)\n | relop op e1 e2 => eval_relOP op (eval e1 e) (eval e2 e)\n | getvar A x => (get x e)\nend.\n\nEnd Example.\n\n(** * Instantiation of the Hoare logic on this langage. *)\nModule HL :=  HoareLogic(Example).\nImport HL.\nImport Example.\n\n(** These coercions makes the abstract syntax more user-friendly *)\nCoercion getvar: ExVar >-> ExExpr.\nCoercion binop: binOP >-> Funclass.\nCoercion relop: relOP >-> Funclass.\n\n(** A last coercion useful for assertions *)\nCoercion get: ExVar >-> Funclass.\n\n(** ** A [gcd] computation in this language *)\nDefinition gcd := \n  (Iwhile (NEQ VX VY)\n          (Iif (LE VX VY)\n               (Iset VY (MINUS VY VX))\n               (Iset VX (MINUS VX VY)))).\n\n(** A small technical lemma on the mathematical notion of gcd (called\n[Zis_gcd]) *)\n",
                "context_tokens": 727,
                "proof_start_offset": 3350,
                "proof_end_offset": 3559,
                "proof": "Lemma Zgcd_minus: forall a b d:Z, Zis_gcd a (b - a) d -> Zis_gcd a b d.\nProof.\nintros a b d H; case H; constructor; intuition (auto with zarith).\nreplace b with (b-a+a)%Z.\nauto with zarith.\nomega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma Zgcd_minus: forall a b d:Z, Zis_gcd a (b - a) d -> Zis_gcd a b d.\nProof.\n intros a b d H.\n apply Zis_gcd_for_euclid with (b - a).\n apply Zis_gcd_for_euclid with (b - a).\n apply Zis_gcd_for_euclid with (b - a).\n apply Zis_gcd_for_euclid with (b - a).\n apply Zis_gcd_for_euclid with (b - a).\n apply Zis_gcd_for_euclid with (b - a).\n apply Zis_gcd_for_euclid with (b - a).\n apply Zis_gcd_for_euclid with (b - a).\n apply Zis_gcd_for_euclid with (b - a).\n apply Zis_gcd_for_euclid with (b - a).\n apply Zis_gcd_for_euclid with (b - a).\n apply Zis_gcd_for_euclid with (b - a).\n apply Zis_gcd_for_euclid with (b - a).\n apply Zis_gcd_for_euclid with (b - a).\n apply Zis_gcd_for_euclid with (b - a).\n apply Zis_gcd_for_euclid with (b - a).\n apply Zis_gcd_Qed.",
                        "correct": false,
                        "error_msg": "File \"./exgcd.v\", line 136, characters 7-18:\nError: The reference Zis_gcd_Qed was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: exgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/hoare-tut/exgcd.v",
                "context": " fun e => snd e\n   end.\n\n(** I consider only two binary operators [PLUS] and [MINUS]. Their\nmeaning is given by [eval_binOP] below *)\nInductive binOP: Type := PLUS | MINUS.\n \nDefinition eval_binOP: binOP -> Z -> Z -> Z :=\n fun op => match op with\n  | PLUS => Zplus\n  | MINUS => Zminus\n end.\n\n(** I consider only three comparison operators [EQ], [NEQ] and\n[LE]. Their meaning is given by [eval_relOP] below *)\nInductive relOP: Type := EQ | NEQ | LE.\n\nDefinition eval_relOP: relOP -> Z -> Z -> bool :=\n fun op => match op with\n  | EQ => Zeq_bool\n  | NEQ => Zneq_bool\n  | LE => Zle_bool\n end. \n\n(** Here is the abstract syntax of expressions. The semantics is given\nby [eval] below *)\nInductive ExExpr: Type -> Type :=\n | const: forall (A:Type), A -> (ExExpr A)\n | binop: binOP -> (ExExpr Z) -> (ExExpr Z) -> (ExExpr Z)\n | relop: relOP -> (ExExpr Z) -> (ExExpr Z) -> (ExExpr bool)\n | getvar: forall (A:Type), (ExVar A) -> (ExExpr A). \n\nDefinition Expr:= ExExpr.\n\nFixpoint eval (A:Type) (expr:Expr A) (e:Env) { struct expr } : A :=\n match expr in ExExpr A return A with\n | const A v => v\n | binop op e1 e2 => eval_binOP op (eval e1 e) (eval e2 e)\n | relop op e1 e2 => eval_relOP op (eval e1 e) (eval e2 e)\n | getvar A x => (get x e)\nend.\n\nEnd Example.\n\n(** * Instantiation of the Hoare logic on this langage. *)\nModule HL :=  HoareLogic(Example).\nImport HL.\nImport Example.\n\n(** These coercions makes the abstract syntax more user-friendly *)\nCoercion getvar: ExVar >-> ExExpr.\nCoercion binop: binOP >-> Funclass.\nCoercion relop: relOP >-> Funclass.\n\n(** A last coercion useful for assertions *)\nCoercion get: ExVar >-> Funclass.\n\n(** ** A [gcd] computation in this language *)\nDefinition gcd := \n  (Iwhile (NEQ VX VY)\n          (Iif (LE VX VY)\n               (Iset VY (MINUS VY VX))\n               (Iset VX (MINUS VX VY)))).\n\n(** A small technical lemma on the mathematical notion of gcd (called\n[Zis_gcd]) *)\nLemma Zgcd_minus: forall a b d:Z, Zis_gcd a (b - a) d -> Zis_gcd a b d.\nProof.\n  intros a b d H; case H; constructor; intuition (auto with zarith).\n  replace b with (b-a+a)%Z.\n  auto with zarith.\n  omega.\nQed.\n\nHint Resolve Zgcd_minus: zarith.\n\n(** Two other lemmas relating [Zneq_bool] function with inequality\nrelation *)\n",
                "context_tokens": 732,
                "proof_start_offset": 3674,
                "proof_end_offset": 3889,
                "proof": "Lemma Zneq_bool_false: forall x y, Zneq_bool x y=false -> x=y.\nProof.\nintros x y H0; apply Zcompare_Eq_eq; generalize H0; clear H0; unfold Zneq_bool.\ncase (x ?= y)%Z; auto; try (intros; discriminate); auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma Zneq_bool_false: forall x y, Zneq_bool x y=false -> x=y.\nProof.\n  intros x y H; case H; constructor; intuition (auto with zarith).\n  apply Zneq_bool_false; auto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./exgcd.v\", line 131, characters 24-35:\nError:\nLtac call to \"constructor\" failed.\nIn environment\nx, y : Z\nH : Zneq_bool x y = false\nUnable to unify \"y\" with \"x\".\n\nmake[2]: *** [Makefile.coq:663: exgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/hoare-tut/exgcd.v",
                "context": " with\n  | PLUS => Zplus\n  | MINUS => Zminus\n end.\n\n(** I consider only three comparison operators [EQ], [NEQ] and\n[LE]. Their meaning is given by [eval_relOP] below *)\nInductive relOP: Type := EQ | NEQ | LE.\n\nDefinition eval_relOP: relOP -> Z -> Z -> bool :=\n fun op => match op with\n  | EQ => Zeq_bool\n  | NEQ => Zneq_bool\n  | LE => Zle_bool\n end. \n\n(** Here is the abstract syntax of expressions. The semantics is given\nby [eval] below *)\nInductive ExExpr: Type -> Type :=\n | const: forall (A:Type), A -> (ExExpr A)\n | binop: binOP -> (ExExpr Z) -> (ExExpr Z) -> (ExExpr Z)\n | relop: relOP -> (ExExpr Z) -> (ExExpr Z) -> (ExExpr bool)\n | getvar: forall (A:Type), (ExVar A) -> (ExExpr A). \n\nDefinition Expr:= ExExpr.\n\nFixpoint eval (A:Type) (expr:Expr A) (e:Env) { struct expr } : A :=\n match expr in ExExpr A return A with\n | const A v => v\n | binop op e1 e2 => eval_binOP op (eval e1 e) (eval e2 e)\n | relop op e1 e2 => eval_relOP op (eval e1 e) (eval e2 e)\n | getvar A x => (get x e)\nend.\n\nEnd Example.\n\n(** * Instantiation of the Hoare logic on this langage. *)\nModule HL :=  HoareLogic(Example).\nImport HL.\nImport Example.\n\n(** These coercions makes the abstract syntax more user-friendly *)\nCoercion getvar: ExVar >-> ExExpr.\nCoercion binop: binOP >-> Funclass.\nCoercion relop: relOP >-> Funclass.\n\n(** A last coercion useful for assertions *)\nCoercion get: ExVar >-> Funclass.\n\n(** ** A [gcd] computation in this language *)\nDefinition gcd := \n  (Iwhile (NEQ VX VY)\n          (Iif (LE VX VY)\n               (Iset VY (MINUS VY VX))\n               (Iset VX (MINUS VX VY)))).\n\n(** A small technical lemma on the mathematical notion of gcd (called\n[Zis_gcd]) *)\nLemma Zgcd_minus: forall a b d:Z, Zis_gcd a (b - a) d -> Zis_gcd a b d.\nProof.\n  intros a b d H; case H; constructor; intuition (auto with zarith).\n  replace b with (b-a+a)%Z.\n  auto with zarith.\n  omega.\nQed.\n\nHint Resolve Zgcd_minus: zarith.\n\n(** Two other lemmas relating [Zneq_bool] function with inequality\nrelation *)\nLemma Zneq_bool_false: forall x y, Zneq_bool x y=false -> x=y.\nProof.\n intros x y H0; apply Zcompare_Eq_eq; generalize H0; clear H0; unfold Zneq_bool. case (x?= y)%Z; auto; \n try (intros; discriminate); auto. \nQed.\n\n",
                "context_tokens": 732,
                "proof_start_offset": 3891,
                "proof_end_offset": 4060,
                "proof": "Lemma Zneq_bool_true: forall x y, Zneq_bool x y=true -> x<>y.\nProof.\nintros x y; unfold Zneq_bool.\nintros H H0; subst.\nrewrite Zcompare_refl in H.\ndiscriminate.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma Zneq_bool_true: forall x y, Zneq_bool x y=true -> x<>y.\nProof.\n intros x y H; apply Zcompare_Eq_eq; generalize H0; clear H0; unfold Zneq_bool. case (x?= y)%Z; auto; \n try (intros; discriminate); auto. \nQed.",
                        "correct": false,
                        "error_msg": "File \"./exgcd.v\", line 137, characters 21-35:\nError: In environment\nx, y : Z\nH : Zneq_bool x y = true\nUnable to unify \"?M1466 = ?M1467\" with \"x = y -> False\".\n\nmake[2]: *** [Makefile.coq:663: exgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/hoare-tut/exgcd.v",
                "context": "\nInductive ExExpr: Type -> Type :=\n | const: forall (A:Type), A -> (ExExpr A)\n | binop: binOP -> (ExExpr Z) -> (ExExpr Z) -> (ExExpr Z)\n | relop: relOP -> (ExExpr Z) -> (ExExpr Z) -> (ExExpr bool)\n | getvar: forall (A:Type), (ExVar A) -> (ExExpr A). \n\nDefinition Expr:= ExExpr.\n\nFixpoint eval (A:Type) (expr:Expr A) (e:Env) { struct expr } : A :=\n match expr in ExExpr A return A with\n | const A v => v\n | binop op e1 e2 => eval_binOP op (eval e1 e) (eval e2 e)\n | relop op e1 e2 => eval_relOP op (eval e1 e) (eval e2 e)\n | getvar A x => (get x e)\nend.\n\nEnd Example.\n\n(** * Instantiation of the Hoare logic on this langage. *)\nModule HL :=  HoareLogic(Example).\nImport HL.\nImport Example.\n\n(** These coercions makes the abstract syntax more user-friendly *)\nCoercion getvar: ExVar >-> ExExpr.\nCoercion binop: binOP >-> Funclass.\nCoercion relop: relOP >-> Funclass.\n\n(** A last coercion useful for assertions *)\nCoercion get: ExVar >-> Funclass.\n\n(** ** A [gcd] computation in this language *)\nDefinition gcd := \n  (Iwhile (NEQ VX VY)\n          (Iif (LE VX VY)\n               (Iset VY (MINUS VY VX))\n               (Iset VX (MINUS VX VY)))).\n\n(** A small technical lemma on the mathematical notion of gcd (called\n[Zis_gcd]) *)\nLemma Zgcd_minus: forall a b d:Z, Zis_gcd a (b - a) d -> Zis_gcd a b d.\nProof.\n  intros a b d H; case H; constructor; intuition (auto with zarith).\n  replace b with (b-a+a)%Z.\n  auto with zarith.\n  omega.\nQed.\n\nHint Resolve Zgcd_minus: zarith.\n\n(** Two other lemmas relating [Zneq_bool] function with inequality\nrelation *)\nLemma Zneq_bool_false: forall x y, Zneq_bool x y=false -> x=y.\nProof.\n intros x y H0; apply Zcompare_Eq_eq; generalize H0; clear H0; unfold Zneq_bool. case (x?= y)%Z; auto; \n try (intros; discriminate); auto. \nQed.\n\nLemma Zneq_bool_true: forall x y, Zneq_bool x y=true -> x<>y.\nProof.\n intros x y; unfold Zneq_bool.\n intros H H0; subst.\n rewrite Zcompare_refl in H.\n discriminate.\nQed.\n\nHint Resolve Zneq_bool_true Zneq_bool_false Zle_bool_imp_le Zis_gcd_intro: zarith.\n\n(** ** Partial correctness proof of [gcd] *)\n",
                "context_tokens": 702,
                "proof_start_offset": 4191,
                "proof_end_offset": 4728,
                "proof": "Lemma gcd_partial_proof: forall x0 y0, (fun e => (VX e)=x0 /\\ (VY e)=y0) |= gcd {= fun e => (Zis_gcd x0 y0 (VX e)) =}.\nProof.\nintros x0 y0.\napply PHL.soundness.\nsimpl.\nintros e; intuition subst.\nconstructor 1 with (x:=fun e'=> forall d, (Zis_gcd (VX e') (VY e') d) ->(Zis_gcd (VX e) (VY e) d)); simpl.\nintuition auto with zarith.\ncutrewrite <- ((fst e')=(snd e')) in H; auto with zarith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_partial_proof: forall x0 y0, (fun e => (VX e)=x0 /\\ (VY e)=y0) |= gcd {= fun e => (Zis_gcd x0 y0 (VX e)) =}.\nProof.\n intros x0 y0 H; case (Z.compare_spec x0 y); auto; intros; discriminate.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./exgcd.v\", line 139, characters 9-22:\nWarning: Zcompare_refl is Z.compare_refl [compatibility-notation,deprecated]\nFile \"./exgcd.v\", line 139, characters 9-22:\nWarning: Zcompare_refl is Z.compare_refl [compatibility-notation,deprecated]\nFile \"./exgcd.v\", line 139, characters 9-22:\nWarning: Zcompare_refl is Z.compare_refl [compatibility-notation,deprecated]\nFile \"./exgcd.v\", line 148, characters 41-42:\nError: The reference y was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: exgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/hoare-tut/exgcd.v",
                "context": "var A x => (get x e)\nend.\n\nEnd Example.\n\n(** * Instantiation of the Hoare logic on this langage. *)\nModule HL :=  HoareLogic(Example).\nImport HL.\nImport Example.\n\n(** These coercions makes the abstract syntax more user-friendly *)\nCoercion getvar: ExVar >-> ExExpr.\nCoercion binop: binOP >-> Funclass.\nCoercion relop: relOP >-> Funclass.\n\n(** A last coercion useful for assertions *)\nCoercion get: ExVar >-> Funclass.\n\n(** ** A [gcd] computation in this language *)\nDefinition gcd := \n  (Iwhile (NEQ VX VY)\n          (Iif (LE VX VY)\n               (Iset VY (MINUS VY VX))\n               (Iset VX (MINUS VX VY)))).\n\n(** A small technical lemma on the mathematical notion of gcd (called\n[Zis_gcd]) *)\nLemma Zgcd_minus: forall a b d:Z, Zis_gcd a (b - a) d -> Zis_gcd a b d.\nProof.\n  intros a b d H; case H; constructor; intuition (auto with zarith).\n  replace b with (b-a+a)%Z.\n  auto with zarith.\n  omega.\nQed.\n\nHint Resolve Zgcd_minus: zarith.\n\n(** Two other lemmas relating [Zneq_bool] function with inequality\nrelation *)\nLemma Zneq_bool_false: forall x y, Zneq_bool x y=false -> x=y.\nProof.\n intros x y H0; apply Zcompare_Eq_eq; generalize H0; clear H0; unfold Zneq_bool. case (x?= y)%Z; auto; \n try (intros; discriminate); auto. \nQed.\n\nLemma Zneq_bool_true: forall x y, Zneq_bool x y=true -> x<>y.\nProof.\n intros x y; unfold Zneq_bool.\n intros H H0; subst.\n rewrite Zcompare_refl in H.\n discriminate.\nQed.\n\nHint Resolve Zneq_bool_true Zneq_bool_false Zle_bool_imp_le Zis_gcd_intro: zarith.\n\n(** ** Partial correctness proof of [gcd] *)\nLemma gcd_partial_proof: \n forall x0 y0, (fun e => (VX e)=x0 /\\ (VY e)=y0) \n   |= gcd  {= fun e => (Zis_gcd x0 y0 (VX e)) =}.\nProof.\n intros x0 y0. \n apply PHL.soundness.\n simpl.\n intros e; intuition subst.\n (** after PO generation, I provide the invariant and simplify the goal *) \n constructor 1 with (x:=fun e'=> \n  forall d, (Zis_gcd (VX e') (VY e') d)\n              ->(Zis_gcd (VX e) (VY e) d)); simpl.\n intuition auto with zarith.\n (** - invariant => postcondition *)\n cutrewrite <- ((fst e')=(snd e')) in H; auto with zarith.\nQed.\n\n\n(** ** Total correctness proof of [gcd] *)\n\n",
                "context_tokens": 693,
                "proof_start_offset": 4775,
                "proof_end_offset": 6000,
                "proof": "Lemma gcd_total_proof: forall x0 y0, (fun e => (VX e)=x0 /\\ (VY e)=y0 /\\ x0 > 0 /\\ y0 > 0) |= gcd [= fun e => (Zis_gcd x0 y0 (VX e)) =].\nProof.\nintros x0 y0.\napply THL.soundness.\nsimpl.\nintros e; intuition subst.\nconstructor 1 with (x:=fun e' => (VX e') > 0 /\\ (VY e') > 0 /\\ forall d, (Zis_gcd (VX e') (VY e') d) ->(Zis_gcd (VX e) (VY e) d)); simpl.\nconstructor 1 with (x:=fun e1 e0 => Zwf 0 ((VX e1)+(VY e1)) ((VX e0)+(VY e0))).\nconstructor 1.\napply wf_inverse_image with (f:=fun e=>(VX e)+(VY e)).\nauto with datatypes.\nunfold Zwf; simpl; (intuition auto with zarith).\ncutrewrite <- ((fst e')=(snd e')) in H5; auto with zarith.\ncut ((fst e')<=(snd e')); auto with zarith.\ncut ((fst e')<>(snd e')); auto with zarith.\ncut (~(fst e')<=(snd e')); auto with zarith.\nintros X; rewrite (Zle_imp_le_bool _ _ X) in H4.\ndiscriminate.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_total_proof: forall x0 y0, (fun e => (VX e)=x0 /\\ (VY e)=y0 /\\ x0 > 0 /\\ y0 > 0) |= gcd [= fun e => (Zis_gcd x0 y0 (VX e)) =].\nProof.\n intros x0 y0 H; case H; intros H1 H2; subst; auto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./exgcd.v\", line 139, characters 9-22:\nWarning: Zcompare_refl is Z.compare_refl [compatibility-notation,deprecated]\nFile \"./exgcd.v\", line 139, characters 9-22:\nWarning: Zcompare_refl is Z.compare_refl [compatibility-notation,deprecated]\nFile \"./exgcd.v\", line 139, characters 9-22:\nWarning: Zcompare_refl is Z.compare_refl [compatibility-notation,deprecated]\nFile \"./exgcd.v\", line 169, characters 0-4:\nError: Attempt to save an incomplete proof (in proof gcd_total_proof)\n\nmake[2]: *** [Makefile.coq:663: exgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/hoare-tut/exgcd.v",
                "context": "un e => (Zis_gcd x0 y0 (VX e)) =}.\nProof.\n intros x0 y0. \n apply PHL.soundness.\n simpl.\n intros e; intuition subst.\n (** after PO generation, I provide the invariant and simplify the goal *) \n constructor 1 with (x:=fun e'=> \n  forall d, (Zis_gcd (VX e') (VY e') d)\n              ->(Zis_gcd (VX e) (VY e) d)); simpl.\n intuition auto with zarith.\n (** - invariant => postcondition *)\n cutrewrite <- ((fst e')=(snd e')) in H; auto with zarith.\nQed.\n\n\n(** ** Total correctness proof of [gcd] *)\n\nLemma gcd_total_proof: \n forall x0 y0, (fun e => (VX e)=x0 /\\ (VY e)=y0 /\\ x0 > 0 /\\ y0 > 0)\n  |= gcd  [= fun e => (Zis_gcd x0 y0 (VX e)) =].\nProof.\n intros x0 y0. \n apply THL.soundness.\n simpl.\n intros e; intuition subst.\n (** after simplification, I provide the invariant and then the variant *) \n constructor 1 with (x:=fun e' => (VX e') > 0 /\\ (VY e') > 0 /\\\n  forall d, (Zis_gcd (VX e') (VY e') d)\n              ->(Zis_gcd (VX e) (VY e) d)); simpl.\n constructor 1 with (x:=fun e1 e0 => Zwf 0 ((VX e1)+(VY e1)) ((VX e0)+(VY e0))).\n (** - proof that my variant is a well_founded relation *) \n constructor 1.\n apply wf_inverse_image with (f:=fun e=>(VX e)+(VY e)).\n auto with datatypes.\n (** - other goals *)\n  unfold Zwf; simpl; (intuition auto with zarith).\n (** -- invariant => postcondition \n      --- gcd part like in partial correctness proof \n *)\n  cutrewrite <- ((fst e')=(snd e')) in H5; auto with zarith.\n  (** --- new VY in branch \"then\" is positive *)\n  cut ((fst e')<=(snd e')); auto with zarith.\n  cut ((fst e')<>(snd e')); auto with zarith.\n  (** --- new VX in branch \"else\" is positive *)\n  cut (~(fst e')<=(snd e')); auto with zarith.\n  intros X; rewrite (Zle_imp_le_bool _ _ X) in H4.\n  discriminate.\nQed.\n\n(** ** Another example: infinite loops in partial correctness.\n\nBasic Hoare logic is not well-suited for reasoning about non-terminating programs.\nIn total correctness, postconditions of non-terminating programs are not provable.\nIn partial correctness, a non-terminating program satisfies any (unsatisfiable) postcondition.\n\nFor example, in an informal \"meaning\", the program below enumerates all multiples of 3. But this meaning \ncan not be expressed here (even in partial correctness).\n*)\n\nDefinition enum_3N := \n  (Iseq (Iset VX (const 0))\n        (Iwhile (const true)\n                (Iset VX (PLUS VX (const 3))))).\n\n",
                "context_tokens": 720,
                "proof_start_offset": 6625,
                "proof_end_offset": 6819,
                "proof": "Lemma enum_3N_stupid: (fun e => True) |= enum_3N {= fun e => False =}.\nProof.\napply PHL.soundness.\nsimpl.\nconstructor 1 with (x:=fun _:Env => True).\nintuition (discriminate || auto).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma enum_3N_stupid: (fun e => True) |= enum_3N {= fun e => False =}.\nProof.\n intros e; unfold enum_3N.\n destruct e; simpl; intuition.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./exgcd.v\", line 139, characters 9-22:\nWarning: Zcompare_refl is Z.compare_refl [compatibility-notation,deprecated]\nFile \"./exgcd.v\", line 139, characters 9-22:\nWarning: Zcompare_refl is Z.compare_refl [compatibility-notation,deprecated]\nFile \"./exgcd.v\", line 139, characters 9-22:\nWarning: Zcompare_refl is Z.compare_refl [compatibility-notation,deprecated]\nFile \"./exgcd.v\", line 217, characters 0-4:\nError: Attempt to save an incomplete proof (in proof enum_3N_stupid)\n\nmake[2]: *** [Makefile.coq:663: exgcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/hoare-tut/totalhoarelogic.v",
                "context": "(** * Generation of Hoare proof obligations in total correctness\n\n This file is part of the \"Tutorial on Hoare Logic\".\n For an introduction to this Coq library,\n see README #or <a href=index.html>index.html</a>#.\n\n This file gives a syntactic definition of the weakest precondition [wp]\n introduced in #<a href=hoarelogicsemantics.html>#[hoarelogicsemantics]#</a>#.\n We refine here the approach of  #<a href=partialhoarelogic.html>#[partialhoarelogic]#</a>#.\n*)\n\nGlobal Set Asymmetric Patterns.\nSet Implicit Arguments.\nRequire Export hoarelogicsemantics.\nRequire Wf.\n\nModule TotalHoareLogic (HD: HoareLogicDefs).\n\nExport HD.\nModule HLD:=HD.\n\nDefinition sem_wp := wp.\n\nExport Wf.\n\n(** * Syntactic definition of the weakest precondition.\n\n In the following, we show that this definition is logically\n equivalent to [wp].\n *)\nFixpoint synt_wp (prog: ImpProg) : Pred -> Pred \n := fun post e =>\n  match prog with\n  | Iskip => post e\n  | (Iset A x expr) => post (E.upd x (E.eval expr e) e)\n  | (Iif cond p1 p2) =>\n          ((E.eval cond e)=true -> (synt_wp p1 post e))\n       /\\ ((E.eval cond e)=false -> (synt_wp p2 post e))\n  | (Iseq p1 p2) => synt_wp p1 (synt_wp p2 post) e\n  | (Iwhile cond p) =>  \n        exists inv:Pred,\n        exists R:E.Env -> E.Env -> Prop,\n             (well_founded R)\n          /\\ (inv e)\n          /\\ (forall e', (inv e') \n                  -> (E.eval cond e')=false -> post e')\n          /\\ (forall e', (inv e') \n                  -> (E.eval cond e')=true -> synt_wp p inv e')\n          /\\ (forall e0, (inv e0)\n                  -> (E.eval cond e0)=true -> synt_wp p (fun e1 => R e1 e0) e0)\n  end.\n\n(** * Soundness *)\n\n(** Monotonicity is also trivially satisfied by [wp].\n    We need it here to prove the soundness.\n*)\n",
                "context_tokens": 530,
                "proof_start_offset": 1747,
                "proof_end_offset": 1962,
                "proof": "Lemma synt_wp_monotonic: forall (p: ImpProg) (post1 post2: Pred), (forall e, post1 e -> post2 e) -> forall e, (synt_wp p post1 e) -> (synt_wp p post2 e).\nProof.\ninduction p; simpl; firstorder eauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma synt_wp_monotonic: forall (p: ImpProg) (post1 post2: Pred), (forall e, post1 e -> post2 e) -> forall e, (synt_wp p post1 e) -> (synt_wp p post2 e).\nProof.\n  intros ppost1 post2 e.\n  induction ppost1 as [e' [H1 H2]].\n  destruct (H3 e') as [e'' [H4 H5]].\n  destruct (H4 e'') as [e'' [H5 H6]].\n  destruct (H5 e'') as [e'' [H5 H6]].\n  destruct (H6 e'') as [e'' [H6 H7]].\n  destruct (H7 e'') as [e'' [H8 H9]].\n  destruct (H9 e'') as [e'' [H8 H9]].\n  destruct (H9 e'') as [e'' [H9 H9]].\n  destruct (H9 e'') as [e'' [H9 H9]].\n  destruct (H9 e'') as [e'' [H9 H9]].\n  destruct (H9 e'') as [e'' [H9 H9]].\n  destruct (H9 e'') as [e'' [H9 H9]].\n  destruct (H9 e'') as [e'' [H9 H9]].\n  destruct (H9 e'') as [e'' [H9 H9]].\n  destruct (H9 e'') asQed.",
                        "correct": false,
                        "error_msg": "File \"./totalhoarelogic.v\", line 61, characters 22-34:\nError: Expects a disjunctive pattern with 5 branches.\n\nmake[2]: *** [Makefile.coq:663: totalhoarelogic.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/hoare-tut/totalhoarelogic.v",
                "context": "dec2 H2 H.\n generalize Hinv.\n pattern e.\n (* -- here the proof proceeds by induction on the well-founded relation *)\n eapply well_founded_ind; eauto.\n clear Hinv e.\n intros e' X H'.\n set (b:=E.eval cond e').\n cut (E.eval cond e'=b); auto.\n case b; [ idtac | firstorder eauto with hoare ].\n intros H5.\n case (IHprog (wp (Iwhile cond prog) post) e');\n [ idtac | (unfold wp; firstorder eauto with hoare) ].\n eapply synt_wp_monotonic.\n 2:apply (synt_wp_conj _ _ _ _ (H2 _ H' H5) (H _ H' H5)).\n simpl; unfold wp; intuition auto.\nQed.\n\n(** * Auxiliary lemmas for completeness\n\n   The proof of completeness requires to exhibit a variant. \n   The purpose of the following lemmas is to build this variant.\n*)\n\n(** ** A technical issue: the inversion of [exec]\n\n   If your are not interested in Coq details, you may skip this part\n   which only explains how to avoid the assumption of a (consistent\n   and standard) axiom to prove the completeness.\n\n   Because the use of dependent types in constructor [exec_Iset], the\n   standard inversion of Coq may fail on [exec] (see\n   [exec_test_inversion] below).\n\n   This comes from the fact the following property is not provable in\n   the core theory of Coq (although it is consistent with it) :\n\n   [forall A (x1 x2:E.Var A) e1 e2, (Iset x1 e1)=(Iset x2 e2) -> x1=x2 /\\ e1=e2.]\n\n   To deal with this problem, we may assume a (consistent) axiom given\n   in #<a href=http://coq.inria.fr/V8.1/stdlib/Coq.Logic.EqdepFacts.html>#\n      [EqdepFacts]#</a>#.\n   But here, we can avoid this axiom.\n\n   Indeed, I define an ad-hoc inversion lemma for [exec] called\n   [exec_inversion] below. This lemma is directly derived from the\n   notion of weakest liberal precondition: [aux_wlp] is an other\n   alternative definition of [wlp].\n\n*)\nDefinition aux_wlp (prog: ImpProg) : Pred -> Pred \n := fun post e =>\n  match prog with\n  | Iskip => post e\n  | (Iset A x expr) => post (E.upd x (E.eval expr e) e)\n  | (Iif cond p1 p2) =>\n       forall e', exec e (if E.eval cond e then p1 else p2) e' \n          -> post e'\n  | (Iseq p1 p2) => forall e1 e2, exec e p1 e1 -> exec e1 p2 e2 -> post e2\n  | (Iwhile cond p) => forall e', exec e (Iif cond (Iseq p (Iwhile cond p)) Iskip) e' -> post e'\n  end.\n\n(** This lemma is my inversion lemma of [exec]. It expresses the \"soundness\" of [aux_wlp]. *)\n",
                "context_tokens": 707,
                "proof_start_offset": 5789,
                "proof_end_offset": 5976,
                "proof": "Lemma exec_inversion: forall prog e e', (exec e prog e') -> forall post, (aux_wlp prog post e) -> post e'.\nProof.\ninduction 1; simpl; try ((firstorder eauto with hoare); fail).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma exec_inversion: forall prog e e', (exec e prog e') -> forall post, (aux_wlp prog post e) -> post e'.\nProof.\n  intros.\n  induction sigma.\n  simpl.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply step_intro.\n  apply stepQed.",
                        "correct": false,
                        "error_msg": "File \"./totalhoarelogic.v\", line 187, characters 12-17:\nError: The reference sigma was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: totalhoarelogic.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/hoare-tut/totalhoarelogic.v",
                "context": "H5.\n case (IHprog (wp (Iwhile cond prog) post) e');\n [ idtac | (unfold wp; firstorder eauto with hoare) ].\n eapply synt_wp_monotonic.\n 2:apply (synt_wp_conj _ _ _ _ (H2 _ H' H5) (H _ H' H5)).\n simpl; unfold wp; intuition auto.\nQed.\n\n(** * Auxiliary lemmas for completeness\n\n   The proof of completeness requires to exhibit a variant. \n   The purpose of the following lemmas is to build this variant.\n*)\n\n(** ** A technical issue: the inversion of [exec]\n\n   If your are not interested in Coq details, you may skip this part\n   which only explains how to avoid the assumption of a (consistent\n   and standard) axiom to prove the completeness.\n\n   Because the use of dependent types in constructor [exec_Iset], the\n   standard inversion of Coq may fail on [exec] (see\n   [exec_test_inversion] below).\n\n   This comes from the fact the following property is not provable in\n   the core theory of Coq (although it is consistent with it) :\n\n   [forall A (x1 x2:E.Var A) e1 e2, (Iset x1 e1)=(Iset x2 e2) -> x1=x2 /\\ e1=e2.]\n\n   To deal with this problem, we may assume a (consistent) axiom given\n   in #<a href=http://coq.inria.fr/V8.1/stdlib/Coq.Logic.EqdepFacts.html>#\n      [EqdepFacts]#</a>#.\n   But here, we can avoid this axiom.\n\n   Indeed, I define an ad-hoc inversion lemma for [exec] called\n   [exec_inversion] below. This lemma is directly derived from the\n   notion of weakest liberal precondition: [aux_wlp] is an other\n   alternative definition of [wlp].\n\n*)\nDefinition aux_wlp (prog: ImpProg) : Pred -> Pred \n := fun post e =>\n  match prog with\n  | Iskip => post e\n  | (Iset A x expr) => post (E.upd x (E.eval expr e) e)\n  | (Iif cond p1 p2) =>\n       forall e', exec e (if E.eval cond e then p1 else p2) e' \n          -> post e'\n  | (Iseq p1 p2) => forall e1 e2, exec e p1 e1 -> exec e1 p2 e2 -> post e2\n  | (Iwhile cond p) => forall e', exec e (Iif cond (Iseq p (Iwhile cond p)) Iskip) e' -> post e'\n  end.\n\n(** This lemma is my inversion lemma of [exec]. It expresses the \"soundness\" of [aux_wlp]. *)\nLemma exec_inversion:\n  forall prog e e', (exec e prog e') -> forall post, (aux_wlp prog post e) -> post e'.\nProof.\n  induction 1; simpl;\n  try ((firstorder eauto with hoare); fail).\nQed.\n\n(** Here is the case, where the previous lemma is better than the standard inversion of Coq. *)\n",
                "context_tokens": 696,
                "proof_start_offset": 6074,
                "proof_end_offset": 6404,
                "proof": "Lemma exec_test_inversion: forall A (x:E.Var A) expr e e', (exec e (Iset x expr) e') -> e'=(E.upd x (E.eval expr e) e).\nProof.\nintros A x expr e e' H.\npattern e'; apply (exec_inversion H); simpl; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma exec_test_inversion: forall A (x:E.Var A) expr e e', (exec e (Iset x expr) e') -> e'=(E.upd x (E.eval expr e) e).\nProof.\n  intros.\n  destruct (exec_inversion x e) as [e' [e' [A B]].\n  destruct (exec_inversion x e') as [e'' [A B]].\n  destruct (exec_inversion x e'') as [e'' [A B]].\n  destruct (exec_inversion x e'') as [e'' [A B]].\n  destruct (exec_inversion x e'') as [e'' [A B]].\n  destruct (exec_inversion x e'') as [e'' [A B]].\n  destruct (exec_inversion x e'') as [e'' [A B]].\n  destruct (exec_inversion x e'') as [e'' [A B]].\n  destruct (exec_inversion x e'') as [e'' [A B]].\n  destruct (exec_inversion x e'') as [e'' [A B]].\n  destruct (exec_inversion x e'') as [e'' [A B]].\n  destruct (exec_inversion x e'') as [e'' [A B]].\n  destruct (exec_inversion x e'') as [e'' [A B]].\n  destruct (exec_inversion x e'') as [e'' [A B]].\n  destruct (exec_inversion x e'')Qed.",
                        "correct": false,
                        "error_msg": "File \"./totalhoarelogic.v\", line 195, characters 49-50:\nError: Syntax error: '|' or ']' expected (in [or_and_intropattern]).\n\nmake[2]: *** [Makefile.coq:663: totalhoarelogic.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/hoare-tut/totalhoarelogic.v",
                "context": "ct the following property is not provable in\n   the core theory of Coq (although it is consistent with it) :\n\n   [forall A (x1 x2:E.Var A) e1 e2, (Iset x1 e1)=(Iset x2 e2) -> x1=x2 /\\ e1=e2.]\n\n   To deal with this problem, we may assume a (consistent) axiom given\n   in #<a href=http://coq.inria.fr/V8.1/stdlib/Coq.Logic.EqdepFacts.html>#\n      [EqdepFacts]#</a>#.\n   But here, we can avoid this axiom.\n\n   Indeed, I define an ad-hoc inversion lemma for [exec] called\n   [exec_inversion] below. This lemma is directly derived from the\n   notion of weakest liberal precondition: [aux_wlp] is an other\n   alternative definition of [wlp].\n\n*)\nDefinition aux_wlp (prog: ImpProg) : Pred -> Pred \n := fun post e =>\n  match prog with\n  | Iskip => post e\n  | (Iset A x expr) => post (E.upd x (E.eval expr e) e)\n  | (Iif cond p1 p2) =>\n       forall e', exec e (if E.eval cond e then p1 else p2) e' \n          -> post e'\n  | (Iseq p1 p2) => forall e1 e2, exec e p1 e1 -> exec e1 p2 e2 -> post e2\n  | (Iwhile cond p) => forall e', exec e (Iif cond (Iseq p (Iwhile cond p)) Iskip) e' -> post e'\n  end.\n\n(** This lemma is my inversion lemma of [exec]. It expresses the \"soundness\" of [aux_wlp]. *)\nLemma exec_inversion:\n  forall prog e e', (exec e prog e') -> forall post, (aux_wlp prog post e) -> post e'.\nProof.\n  induction 1; simpl;\n  try ((firstorder eauto with hoare); fail).\nQed.\n\n(** Here is the case, where the previous lemma is better than the standard inversion of Coq. *)\nLemma exec_test_inversion:\n  forall A (x:E.Var A) expr e e',\n     (exec e (Iset x expr) e') -> e'=(E.upd x (E.eval expr e) e).\nProof.\n  intros A x expr e e' H.\n  (** Here, try \"[inversion H]\" instead the tactic below. \n      The generated goal is not directly provable. *)\n  pattern e'; apply (exec_inversion H); simpl; auto.\nQed.\n \n(** Below, a little tactic to helps in applying [exec_inversion]. *)\nLtac exec_inversion H :=\n  match type of H with\n  | (exec?e?p?e') => pattern e'; apply (exec_inversion H); simpl; clear H\n  end.\n\n(** ** The programming language is deterministic\n\nThis property is probably not necessary to prove the correctness of my\nvariant, but it simplifies the proof a lot.\n\nThis lemma is a trivial induction over the first [exec] derivation, \nprovided the ad-hoc inversion tactic on the second [exec] derivation.\n*)\n",
                "context_tokens": 712,
                "proof_start_offset": 6917,
                "proof_end_offset": 7168,
                "proof": "Lemma exec_deterministic: forall ei p ef, (exec ei p ef) -> forall ef', (exec ei p ef') -> ef=ef'.\nProof.\ninduction 1; intros ef' X; exec_inversion X; eauto.\nintros e1 e2 X1 X2; assert (X3: e'=e1); auto.\nsubst; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma exec_deterministic: forall ei p ef, (exec ei p ef) -> forall ef', (exec ei p ef') -> ef=ef'.\nProof.\n  intros.\n  destruct op; simpl; auto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./totalhoarelogic.v\", line 219, characters 11-13:\nError: The reference op was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: totalhoarelogic.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/hoare-tut/totalhoarelogic.v",
                "context": "ps in applying [exec_inversion]. *)\nLtac exec_inversion H :=\n  match type of H with\n  | (exec?e?p?e') => pattern e'; apply (exec_inversion H); simpl; clear H\n  end.\n\n(** ** The programming language is deterministic\n\nThis property is probably not necessary to prove the correctness of my\nvariant, but it simplifies the proof a lot.\n\nThis lemma is a trivial induction over the first [exec] derivation, \nprovided the ad-hoc inversion tactic on the second [exec] derivation.\n*)\nLemma exec_deterministic: forall ei p ef,\n  (exec ei p ef) -> forall ef', (exec ei p ef') -> ef=ef'.\nProof.\n  induction 1; intros ef' X; exec_inversion X; eauto.\n  (* - case [Iseq] *)\n  intros e1 e2 X1 X2; assert (X3: e'=e1); auto.\n  subst; auto.\nQed.\n\n(** ** Definition of the variant \n  Given a program [p] and a boolean expression [cond], the relation on environment \n  \"[reduces cond p]\" is the variant required by \"[synt_wp (Iwhile cond p)]\".\n\n  I prove below that this relation is well-founded.\n*) \nDefinition reduces cond p e1 e0 :=\n  (E.eval cond e0)=true /\\ (exec e0 p e1) /\\ exists ef, (exec e1 (Iwhile cond p) ef).\n\n(** To prove that \"[reduces cond p]\" is well-founded, I want to count  \n    the number of execution of [p] in the computation of \"[Iwhile cond p]\".\n    Indeed, as the language is deterministic, this number is unique.\n\n    Hence, \"[execn n e (Iwhile cond p) e']\" means that \"[exec e (Iwhile cond p) e']\" \n    in a sequence of [n] execution of [p]. \n *)\nInductive execn: nat -> E.Env -> ImpProg -> E.Env -> Prop :=\n | execn_Iskip:\n    forall e, (execn 0 e Iskip e)\n | execn_Iset:\n    forall (A:Type) e x (expr: E.Expr A),\n     (execn 0 e (Iset x expr) (E.upd x (E.eval expr e) e))\n | execn_Iif:\n    forall n e (cond: E.Expr bool) p1 p2 e',\n       (execn n e (if (E.eval cond e) then p1 else p2) e')\n         -> (execn n e (Iif cond p1 p2) e')\n | execn_Iseq:\n    forall n e p1 p2 e' e'',\n      (exec e p1 e')\n       -> (execn n e' p2 e'')\n         -> (execn n e (Iseq p1 p2) e'')\n | execn_Iwhile:\n    forall n e cond p e',\n     (execn n e (Iif cond (Iseq p (Iwhile cond p)) Iskip) e')\n        -> (execn (S n) e (Iwhile cond p) e').\n\nHint Resolve execn_Iskip execn_Iset execn_Iif execn_Iseq execn_Iwhile: hoare.\n\n",
                "context_tokens": 728,
                "proof_start_offset": 8653,
                "proof_end_offset": 8793,
                "proof": "Lemma exec_execn: forall ei p ef, (exec ei p ef) -> (exists n, execn n ei p ef).\nProof.\ninduction 1; firstorder (eauto with hoare).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma exec_execn: forall ei p ef, (exec ei p ef) -> (exists n, execn n ei p ef).\nProof.\n intros.\n destruct op; simpl; auto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./totalhoarelogic.v\", line 266, characters 10-12:\nError: The reference op was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: totalhoarelogic.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/hoare-tut/totalhoarelogic.v",
                "context": " inversion tactic on the second [exec] derivation.\n*)\nLemma exec_deterministic: forall ei p ef,\n  (exec ei p ef) -> forall ef', (exec ei p ef') -> ef=ef'.\nProof.\n  induction 1; intros ef' X; exec_inversion X; eauto.\n  (* - case [Iseq] *)\n  intros e1 e2 X1 X2; assert (X3: e'=e1); auto.\n  subst; auto.\nQed.\n\n(** ** Definition of the variant \n  Given a program [p] and a boolean expression [cond], the relation on environment \n  \"[reduces cond p]\" is the variant required by \"[synt_wp (Iwhile cond p)]\".\n\n  I prove below that this relation is well-founded.\n*) \nDefinition reduces cond p e1 e0 :=\n  (E.eval cond e0)=true /\\ (exec e0 p e1) /\\ exists ef, (exec e1 (Iwhile cond p) ef).\n\n(** To prove that \"[reduces cond p]\" is well-founded, I want to count  \n    the number of execution of [p] in the computation of \"[Iwhile cond p]\".\n    Indeed, as the language is deterministic, this number is unique.\n\n    Hence, \"[execn n e (Iwhile cond p) e']\" means that \"[exec e (Iwhile cond p) e']\" \n    in a sequence of [n] execution of [p]. \n *)\nInductive execn: nat -> E.Env -> ImpProg -> E.Env -> Prop :=\n | execn_Iskip:\n    forall e, (execn 0 e Iskip e)\n | execn_Iset:\n    forall (A:Type) e x (expr: E.Expr A),\n     (execn 0 e (Iset x expr) (E.upd x (E.eval expr e) e))\n | execn_Iif:\n    forall n e (cond: E.Expr bool) p1 p2 e',\n       (execn n e (if (E.eval cond e) then p1 else p2) e')\n         -> (execn n e (Iif cond p1 p2) e')\n | execn_Iseq:\n    forall n e p1 p2 e' e'',\n      (exec e p1 e')\n       -> (execn n e' p2 e'')\n         -> (execn n e (Iseq p1 p2) e'')\n | execn_Iwhile:\n    forall n e cond p e',\n     (execn n e (Iif cond (Iseq p (Iwhile cond p)) Iskip) e')\n        -> (execn (S n) e (Iwhile cond p) e').\n\nHint Resolve execn_Iskip execn_Iset execn_Iif execn_Iseq execn_Iwhile: hoare.\n\nLemma exec_execn: forall ei p ef,\n  (exec ei p ef) -> (exists n, execn n ei p ef).\nProof.\n  induction 1; firstorder (eauto with hoare).\nQed.\n\n\n(** In the proof below, I mainly use that \"[reduces cond p e1 e0]\"\n    implies that there exists [n] and [ef] such that \"[execn (S n) e0 (Iwhile cond p) ef]\"\n    and \"[execn n e1 (Iwhile cond p) ef]\".\n*)\n",
                "context_tokens": 739,
                "proof_start_offset": 9000,
                "proof_end_offset": 9914,
                "proof": "Lemma reduces_wf: forall cond p, well_founded (reduces cond p).\nProof.\nunfold well_founded.\nintros cond p e0; apply Acc_intro.\nintros e1 H; unfold reduces in H.\ndecompose [ex and] H; clear H.\nclear H2 H0 e0.\ncase (exec_execn H1).\nintros n.\ngeneralize cond p e1 x; clear cond p e1 x H1.\nelim n.\nintros cond p e0 e1 H; inversion_clear H.\nclear n; intros n HR cond p e0 e1 H.\ninversion_clear H.\ninversion_clear H0.\nset (b:=E.eval cond e0) in * |-.\ncut (E.eval cond e0=b); auto.\ngeneralize H; clear H; case b; simpl.\nintros H; inversion_clear H.\nintros; apply Acc_intro.\nintros e2 H3; unfold reduces in H3.\nintuition.\nrewrite (exec_deterministic H3 H0); eauto.\nintros H H0; apply Acc_intro.\nunfold reduces; rewrite H0.\nintuition.\ndiscriminate.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma reduces_wf: forall cond p, well_founded (reduces cond p).\nProof.\n  induction 1; firstorder.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./totalhoarelogic.v\", line 276, characters 2-13:\nError:\nNo 1st non dependent hypothesis in current goal even after head-reduction.\n\nmake[2]: *** [Makefile.coq:663: totalhoarelogic.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/hoare-tut/totalhoarelogic.v",
                "context": "Prog -> E.Env -> Prop :=\n | execn_Iskip:\n    forall e, (execn 0 e Iskip e)\n | execn_Iset:\n    forall (A:Type) e x (expr: E.Expr A),\n     (execn 0 e (Iset x expr) (E.upd x (E.eval expr e) e))\n | execn_Iif:\n    forall n e (cond: E.Expr bool) p1 p2 e',\n       (execn n e (if (E.eval cond e) then p1 else p2) e')\n         -> (execn n e (Iif cond p1 p2) e')\n | execn_Iseq:\n    forall n e p1 p2 e' e'',\n      (exec e p1 e')\n       -> (execn n e' p2 e'')\n         -> (execn n e (Iseq p1 p2) e'')\n | execn_Iwhile:\n    forall n e cond p e',\n     (execn n e (Iif cond (Iseq p (Iwhile cond p)) Iskip) e')\n        -> (execn (S n) e (Iwhile cond p) e').\n\nHint Resolve execn_Iskip execn_Iset execn_Iif execn_Iseq execn_Iwhile: hoare.\n\nLemma exec_execn: forall ei p ef,\n  (exec ei p ef) -> (exists n, execn n ei p ef).\nProof.\n  induction 1; firstorder (eauto with hoare).\nQed.\n\n\n(** In the proof below, I mainly use that \"[reduces cond p e1 e0]\"\n    implies that there exists [n] and [ef] such that \"[execn (S n) e0 (Iwhile cond p) ef]\"\n    and \"[execn n e1 (Iwhile cond p) ef]\".\n*)\nLemma reduces_wf: forall cond p, well_founded (reduces cond p).\nProof.\n  unfold well_founded.\n  intros cond p e0; apply Acc_intro.\n  intros e1 H; unfold reduces in H.\n  decompose [ex and] H; clear H.\n  clear H2 H0 e0.\n  case (exec_execn H1).  \n  intros n.\n  generalize cond p e1 x; clear cond p e1 x H1.\n  elim n.\n  (* case 0 *)\n  intros cond p e0 e1 H; inversion_clear H.\n  (* recursive case *)\n  clear n; intros n HR cond p e0 e1 H.\n  inversion_clear H.\n  inversion_clear H0.\n  set (b:=E.eval cond e0) in * |-.\n  cut (E.eval cond e0=b); auto.   \n  generalize H; clear H; case b; simpl.\n  (* case cond=true *)\n    intros H; \n    inversion_clear H.\n    intros; \n    apply Acc_intro.\n    intros e2 H3; unfold reduces in H3.\n    intuition.\n    rewrite (exec_deterministic H3 H0); eauto.\n    (* case cond=false *)\n    intros H H0; apply Acc_intro.\n    unfold reduces; rewrite H0.\n    intuition.\n    discriminate.\nQed.\nHint Resolve reduces_wf: hoare.\n\n(** * Completeness\n\n    The proof of completeness proceeds by induction over [prog] syntax.\n\n*)\n",
                "context_tokens": 734,
                "proof_start_offset": 10044,
                "proof_end_offset": 11057,
                "proof": "Lemma wp_complete: forall prog post, prog [= post =] |= (synt_wp prog post).\nProof.\nunfold wp.\nintros prog post e H; case H; clear H.\nintros e' H; case H; clear H.\ngeneralize post e e'; clear post e e'; elim prog; clear prog; simpl.\nintros post e e' H; exec_inversion H; auto.\nintros A v expr post e e' H; exec_inversion H; auto.\nintros cond p1 Hp1 p2 Hp2 post e e' H; exec_inversion H.\ncase (E.eval cond e); simpl; firstorder auto || discriminate.\nintros p1 Hp1 p2 Hp2 post e e' H.\nexec_inversion H.\neauto.\nintros cond p Hp post e e' H H0.\nconstructor 1 with (x:=wp (Iwhile cond p) post).\nconstructor 1 with (x:=reduces cond p).\nunfold wp; (intuition eauto with hoare); dec2 e1 H1; case H1; clear H1; intros H1; exec_inversion H1; intros e2 H1; exec_inversion H1; rewrite H2; intros e3 H1; exec_inversion H1; unfold reduces; eauto with hoare.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma wp_complete: forall prog post, prog [= post =] |= (synt_wp prog post).\nProof.\n  intros.\n  destruct (classic (exists n, typing (Ocall_wp prog post)) (fun n => tr, post)).\n  destruct (classic (exists n, typing (Ocall_wp prog post)) (fun n => tr, post)).\n  destruct (classic (exists n, typing (Ocall_wp prog post)) (fun n => tr, post)).\n  destruct (classic (exists n, typing (Ocall_wp prog post)) (fun n => tr, post)).\n  destruct (classic (exists n, typing (Ocall_wp prog post)) (fun n => tr, post)).\n  destruct (classic (exists n, typing (Ocall_wp prog post)) (fun n => tr, post)).\n  destruct (classic (exists n, typing (Ocall_wp prog post)) (fun n => tr, post)).\n  destruct (classic (exists n, typing (Ocall_wp prog post)) (fun n => tr, post)).\n  destruct (classic (exists n, typing (Ocall_wp prog post)) (fun n => tr, post)).\n  destruct (classic (exists n, typing (Ocall_wp prog post)) (fun n => tr, post)).Qed.",
                        "correct": false,
                        "error_msg": "File \"./totalhoarelogic.v\", line 318, characters 12-19:\nError: The reference classic was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: totalhoarelogic.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/hoare-tut/totalhoarelogic.v",
                "context": " exists [n] and [ef] such that \"[execn (S n) e0 (Iwhile cond p) ef]\"\n    and \"[execn n e1 (Iwhile cond p) ef]\".\n*)\nLemma reduces_wf: forall cond p, well_founded (reduces cond p).\nProof.\n  unfold well_founded.\n  intros cond p e0; apply Acc_intro.\n  intros e1 H; unfold reduces in H.\n  decompose [ex and] H; clear H.\n  clear H2 H0 e0.\n  case (exec_execn H1).  \n  intros n.\n  generalize cond p e1 x; clear cond p e1 x H1.\n  elim n.\n  (* case 0 *)\n  intros cond p e0 e1 H; inversion_clear H.\n  (* recursive case *)\n  clear n; intros n HR cond p e0 e1 H.\n  inversion_clear H.\n  inversion_clear H0.\n  set (b:=E.eval cond e0) in * |-.\n  cut (E.eval cond e0=b); auto.   \n  generalize H; clear H; case b; simpl.\n  (* case cond=true *)\n    intros H; \n    inversion_clear H.\n    intros; \n    apply Acc_intro.\n    intros e2 H3; unfold reduces in H3.\n    intuition.\n    rewrite (exec_deterministic H3 H0); eauto.\n    (* case cond=false *)\n    intros H H0; apply Acc_intro.\n    unfold reduces; rewrite H0.\n    intuition.\n    discriminate.\nQed.\nHint Resolve reduces_wf: hoare.\n\n(** * Completeness\n\n    The proof of completeness proceeds by induction over [prog] syntax.\n\n*)\nLemma wp_complete: forall prog post, prog [= post =] |= (synt_wp prog post).\nProof.\n unfold wp.\n  intros prog post e H; case H; clear H.\n  intros e' H; case H; clear H.\n  generalize post e e'; clear post e e'; elim prog; clear prog; simpl.\n  (* - case [Iskip] *)\n  intros post e e' H; exec_inversion H; auto.\n  (* - case [Iset] *)\n  intros A v expr post e e' H; exec_inversion H; auto.\n  (* - case [Iif] *)\n  intros cond p1 Hp1 p2 Hp2 post e e' H; exec_inversion H.\n  case (E.eval cond e); simpl; firstorder auto || discriminate.\n  (* - case [Iseq] *)\n  intros p1 Hp1 p2 Hp2 post e e' H.\n  exec_inversion H.\n  eauto.\n  (* - case [Iwhile] *)\n  intros cond p Hp post e e' H H0.\n  constructor 1 with (x:=wp (Iwhile cond p) post).\n  constructor 1 with (x:=reduces cond p).\n  unfold wp; (intuition eauto with hoare);\n    dec2 e1 H1;\n    case H1; clear H1; intros H1;\n    exec_inversion H1;\n    intros e2 H1; exec_inversion H1;\n    rewrite H2; intros e3 H1; exec_inversion H1;\n    unfold reduces; eauto with hoare.\nQed.\n\n(** * Combining the previous results with transitivity of [ |= ] *)\n\nHint Resolve wp_complete wp_sound: hoare.\n\n",
                "context_tokens": 731,
                "proof_start_offset": 11171,
                "proof_end_offset": 11284,
                "proof": "Theorem soundness: forall pre p post, pre |= (synt_wp p post) -> pre |= p [=post=].\nProof.\nauto with hoare.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem soundness: forall pre p post, pre |= (synt_wp p post) -> pre |= p [=post=].\nProof.\n  intros.\n  destruct H as [H | H].\n  destruct H as [H | H].\n  destruct H as [e' H].\n  destruct H as [e' H'].\n  destruct H as [e' H'].\n  destruct H as [e' H'].\n  destruct H' as [e'' H'].\n  destruct H' as [e'' H'].\n  destruct H' as [e'' H'].\n  destruct H' as [e'' H'].\n  destruct H' as [e'' H'].\n  destruct H' as [e'' H'].\n  destruct H'' as [e'' H'].\n  destruct H'' as [e'' H'].\n  destruct H'' as [e'' H''].\n  destruct H'' as [e'' H''].\n  destruct H'' as [e'' H''].\n  destruct H'' as [e'' H''].\n  destruct H'' as [e'' H''].\n  destruct H'' as [e'' H''].\n  destruct H'' as [e'' H''].\n  destruct H''.\n  destruct H'' as [e'' H''].\n  destruct H'' as [e'' H''].\n  destruct H''.\n  destruct H'' as [e'' H''].\n  destruct H''.\n  destruct H''Qed.",
                        "correct": false,
                        "error_msg": "File \"./totalhoarelogic.v\", line 352, characters 2-23:\nError: Unable to find an instance for the variable e.\n\nmake[2]: *** [Makefile.coq:663: totalhoarelogic.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/hoare-tut/totalhoarelogic.v",
                "context": " cond p) ef]\".\n*)\nLemma reduces_wf: forall cond p, well_founded (reduces cond p).\nProof.\n  unfold well_founded.\n  intros cond p e0; apply Acc_intro.\n  intros e1 H; unfold reduces in H.\n  decompose [ex and] H; clear H.\n  clear H2 H0 e0.\n  case (exec_execn H1).  \n  intros n.\n  generalize cond p e1 x; clear cond p e1 x H1.\n  elim n.\n  (* case 0 *)\n  intros cond p e0 e1 H; inversion_clear H.\n  (* recursive case *)\n  clear n; intros n HR cond p e0 e1 H.\n  inversion_clear H.\n  inversion_clear H0.\n  set (b:=E.eval cond e0) in * |-.\n  cut (E.eval cond e0=b); auto.   \n  generalize H; clear H; case b; simpl.\n  (* case cond=true *)\n    intros H; \n    inversion_clear H.\n    intros; \n    apply Acc_intro.\n    intros e2 H3; unfold reduces in H3.\n    intuition.\n    rewrite (exec_deterministic H3 H0); eauto.\n    (* case cond=false *)\n    intros H H0; apply Acc_intro.\n    unfold reduces; rewrite H0.\n    intuition.\n    discriminate.\nQed.\nHint Resolve reduces_wf: hoare.\n\n(** * Completeness\n\n    The proof of completeness proceeds by induction over [prog] syntax.\n\n*)\nLemma wp_complete: forall prog post, prog [= post =] |= (synt_wp prog post).\nProof.\n unfold wp.\n  intros prog post e H; case H; clear H.\n  intros e' H; case H; clear H.\n  generalize post e e'; clear post e e'; elim prog; clear prog; simpl.\n  (* - case [Iskip] *)\n  intros post e e' H; exec_inversion H; auto.\n  (* - case [Iset] *)\n  intros A v expr post e e' H; exec_inversion H; auto.\n  (* - case [Iif] *)\n  intros cond p1 Hp1 p2 Hp2 post e e' H; exec_inversion H.\n  case (E.eval cond e); simpl; firstorder auto || discriminate.\n  (* - case [Iseq] *)\n  intros p1 Hp1 p2 Hp2 post e e' H.\n  exec_inversion H.\n  eauto.\n  (* - case [Iwhile] *)\n  intros cond p Hp post e e' H H0.\n  constructor 1 with (x:=wp (Iwhile cond p) post).\n  constructor 1 with (x:=reduces cond p).\n  unfold wp; (intuition eauto with hoare);\n    dec2 e1 H1;\n    case H1; clear H1; intros H1;\n    exec_inversion H1;\n    intros e2 H1; exec_inversion H1;\n    rewrite H2; intros e3 H1; exec_inversion H1;\n    unfold reduces; eauto with hoare.\nQed.\n\n(** * Combining the previous results with transitivity of [ |= ] *)\n\nHint Resolve wp_complete wp_sound: hoare.\n\nTheorem soundness: forall pre p post, pre |= (synt_wp p post) -> pre |= p [=post=].\nProof.\n auto with hoare.\nQed.\n\n",
                "context_tokens": 732,
                "proof_start_offset": 11286,
                "proof_end_offset": 11413,
                "proof": "Theorem completeness: forall pre p post, pre |= p [=post=] -> pre |= (synt_wp p post).\nProof.\nintuition auto with hoare.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem completeness: forall pre p post, pre |= p [=post=] -> pre |= (synt_wp p post).\nProof.\n auto with hoare.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/hoare-tut/hoarelogic.v",
                "context": "(** \n\n This file is part of the \"Tutorial on Hoare Logic\".\n For an introduction to this Coq library,\n see README #or <a href=index.html>index.html</a>#.\n\n This file is mainly verbous. It defines a functor\n \"[HoareLogic: ExprLang -> HoareLogicSem]\".\n It is almost a copy/paste of definitions found in \n #<a href=hoarelogicsemantics.html># \n [hoarelogicsemantics]#</a>#. \n (This is due to the lack of inheritance in the module system of Coq).\n\n\n*)\n  \nSet Implicit Arguments.\n\nRequire Export hoarelogicsemantics.\nRequire Import partialhoarelogic.\nRequire Import totalhoarelogic.\n\nModule HoareLogic(Ex: ExprLang)<: HoareLogicSem with Module E:=Ex.\n\nModule E:=Ex.\n\nModule HLD <: HoareLogicDefs with Module E:=E.\n\nModule E:=E.\n\nInductive ImpProg: Type := \n  | Iskip: ImpProg\n  | Iset (A:Type) (v:E.Var A) (expr:E.Expr A): ImpProg\n  | Iif (cond:E.Expr bool) (p1 p2:ImpProg): ImpProg\n  | Iseq (p1 p2:ImpProg): ImpProg\n  | Iwhile (cond:E.Expr bool) (p:ImpProg): ImpProg.\n\nInductive exec: E.Env -> ImpProg -> E.Env -> Prop :=\n | exec_Iskip: \n    forall e, (exec e Iskip e)\n | exec_Iset:\n    forall (A:Type) e x (expr: E.Expr A), \n     (exec e (Iset x expr) (E.upd x (E.eval expr e) e))\n | exec_Iif:\n    forall e (cond: E.Expr bool) p1 p2 e', \n      (exec e (if (E.eval cond e) then p1 else p2) e') \n         -> (exec e (Iif cond p1 p2) e')\n | exec_Iseq:\n    forall e p1 p2 e' e'',\n      (exec e p1 e') \n       -> (exec e' p2 e'')    \n         -> (exec e (Iseq p1 p2) e'')\n | exec_Iwhile:\n    forall e cond p e', \n     (exec e (Iif cond (Iseq p (Iwhile cond p)) Iskip) e')\n        -> (exec e (Iwhile cond p) e').\n\n",
                "context_tokens": 556,
                "proof_start_offset": 1603,
                "proof_end_offset": 1825,
                "proof": "Lemma exec_Iif_true: forall e cond p1 p2 e', (E.eval cond e)=true -> (exec e p1 e') -> (exec e (Iif cond p1 p2) e').\nProof.\nintros e cond p1 p2 e' H1 H2.\napply exec_Iif.\nrewrite H1; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma exec_Iif_true: forall e cond p1 p2 e', (E.eval cond e)=true -> (exec e p1 e') -> (exec e (Iif cond p1 p2) e').\nProof.\n intros.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_false.\n apply exec_Iif_Qed.",
                        "correct": false,
                        "error_msg": "File \"./hoarelogic.v\", line 61, characters 7-21:\nError: The reference exec_Iif_false was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: hoarelogic.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/hoare-tut/hoarelogic.v",
                "context": "(** \n\n This file is part of the \"Tutorial on Hoare Logic\".\n For an introduction to this Coq library,\n see README #or <a href=index.html>index.html</a>#.\n\n This file is mainly verbous. It defines a functor\n \"[HoareLogic: ExprLang -> HoareLogicSem]\".\n It is almost a copy/paste of definitions found in \n #<a href=hoarelogicsemantics.html># \n [hoarelogicsemantics]#</a>#. \n (This is due to the lack of inheritance in the module system of Coq).\n\n\n*)\n  \nSet Implicit Arguments.\n\nRequire Export hoarelogicsemantics.\nRequire Import partialhoarelogic.\nRequire Import totalhoarelogic.\n\nModule HoareLogic(Ex: ExprLang)<: HoareLogicSem with Module E:=Ex.\n\nModule E:=Ex.\n\nModule HLD <: HoareLogicDefs with Module E:=E.\n\nModule E:=E.\n\nInductive ImpProg: Type := \n  | Iskip: ImpProg\n  | Iset (A:Type) (v:E.Var A) (expr:E.Expr A): ImpProg\n  | Iif (cond:E.Expr bool) (p1 p2:ImpProg): ImpProg\n  | Iseq (p1 p2:ImpProg): ImpProg\n  | Iwhile (cond:E.Expr bool) (p:ImpProg): ImpProg.\n\nInductive exec: E.Env -> ImpProg -> E.Env -> Prop :=\n | exec_Iskip: \n    forall e, (exec e Iskip e)\n | exec_Iset:\n    forall (A:Type) e x (expr: E.Expr A), \n     (exec e (Iset x expr) (E.upd x (E.eval expr e) e))\n | exec_Iif:\n    forall e (cond: E.Expr bool) p1 p2 e', \n      (exec e (if (E.eval cond e) then p1 else p2) e') \n         -> (exec e (Iif cond p1 p2) e')\n | exec_Iseq:\n    forall e p1 p2 e' e'',\n      (exec e p1 e') \n       -> (exec e' p2 e'')    \n         -> (exec e (Iseq p1 p2) e'')\n | exec_Iwhile:\n    forall e cond p e', \n     (exec e (Iif cond (Iseq p (Iwhile cond p)) Iskip) e')\n        -> (exec e (Iwhile cond p) e').\n\nLemma exec_Iif_true:\n  forall e cond p1 p2 e', \n     (E.eval cond e)=true\n      -> (exec e p1 e') \n         -> (exec e (Iif cond p1 p2) e').\nProof.\n  intros e cond p1 p2 e' H1 H2.\n  apply exec_Iif.\n  rewrite H1; auto.\nQed.  \n\n",
                "context_tokens": 646,
                "proof_start_offset": 1829,
                "proof_end_offset": 2053,
                "proof": "Lemma exec_Iif_false: forall e cond p1 p2 e', (E.eval cond e)=false -> (exec e p2 e') -> (exec e (Iif cond p1 p2) e').\nProof.\nintros e cond p1 p2 e' H1 H2.\napply exec_Iif.\nrewrite H1; auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma exec_Iif_false: forall e cond p1 p2 e', (E.eval cond e)=false -> (exec e p2 e') -> (exec e (Iif cond p1 p2) e').\nProof.\n  intros e cond p1 cond p2 e' H1 H2.\n  apply exec_Iif_false.\n  rewrite H1; auto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./hoarelogic.v\", line 71, characters 19-23:\nError: cond is used twice.\n\nmake[2]: *** [Makefile.coq:663: hoarelogic.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/hoare-tut/hoarelogic.v",
                "context": " E:=E.\n\nInductive ImpProg: Type := \n  | Iskip: ImpProg\n  | Iset (A:Type) (v:E.Var A) (expr:E.Expr A): ImpProg\n  | Iif (cond:E.Expr bool) (p1 p2:ImpProg): ImpProg\n  | Iseq (p1 p2:ImpProg): ImpProg\n  | Iwhile (cond:E.Expr bool) (p:ImpProg): ImpProg.\n\nInductive exec: E.Env -> ImpProg -> E.Env -> Prop :=\n | exec_Iskip: \n    forall e, (exec e Iskip e)\n | exec_Iset:\n    forall (A:Type) e x (expr: E.Expr A), \n     (exec e (Iset x expr) (E.upd x (E.eval expr e) e))\n | exec_Iif:\n    forall e (cond: E.Expr bool) p1 p2 e', \n      (exec e (if (E.eval cond e) then p1 else p2) e') \n         -> (exec e (Iif cond p1 p2) e')\n | exec_Iseq:\n    forall e p1 p2 e' e'',\n      (exec e p1 e') \n       -> (exec e' p2 e'')    \n         -> (exec e (Iseq p1 p2) e'')\n | exec_Iwhile:\n    forall e cond p e', \n     (exec e (Iif cond (Iseq p (Iwhile cond p)) Iskip) e')\n        -> (exec e (Iwhile cond p) e').\n\nLemma exec_Iif_true:\n  forall e cond p1 p2 e', \n     (E.eval cond e)=true\n      -> (exec e p1 e') \n         -> (exec e (Iif cond p1 p2) e').\nProof.\n  intros e cond p1 p2 e' H1 H2.\n  apply exec_Iif.\n  rewrite H1; auto.\nQed.  \n\nLemma exec_Iif_false:\n  forall e cond p1 p2 e', \n     (E.eval cond e)=false\n      -> (exec e p2 e') \n         -> (exec e (Iif cond p1 p2) e').\nProof.\n  intros e cond p1 p2 e' H1 H2.\n  apply exec_Iif.\n  rewrite H1; auto.\nQed.  \n\nDefinition Pred := E.Env -> Prop.\n\nDefinition wlp: ImpProg -> Pred -> Pred\n := fun prog post e => (forall e', (exec e prog e') -> (post e')).\n\nDefinition wp: ImpProg -> Pred -> Pred\n := fun prog post e => exists e', (exec e prog e') /\\ (post e').\n\n\nNotation \"p |= q\" := (forall e, (p e) -> (q e)) (at level 80, no associativity).\nNotation \"p {= post =}\" := (wlp p post) (at level 70).\nNotation \"p [= post =]\" := (wp p post) (at level 70).\n\nEnd HLD.\n\nExport HLD.\n\nModule PHL<: HoareProofSystem := PartialHoareLogic(HLD). \nModule THL<: HoareProofSystem := TotalHoareLogic(HLD). \n\nImport THL.\n\n",
                "context_tokens": 733,
                "proof_start_offset": 2648,
                "proof_end_offset": 2853,
                "proof": "Lemma wp_entails_wlp: forall prog post, prog [= post =] |= prog {= post =}.\nProof.\nunfold wp, wlp.\nintros prog post e H e' H'.\ndec2 e0 H.\ndec2 H0 H.\nrewrite (exec_deterministic H' H0).\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma wp_entails_wlp: forall prog post, prog [= post =] |= prog {= post =}.\nProof.\n  intros.\n  destruct H as [e' [H1 H2]].\n  exists e'.\n  split.\n  apply step_while.\n  apply H2.\n  apply H0.\n  apply H2.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./hoarelogic.v\", line 106, characters 2-11:\nError:\nLtac call to \"exists (ne_bindings_list)\" failed.\nNot an inductive product.\n\nmake[2]: *** [Makefile.coq:663: hoarelogic.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            }
        ],
        "demos": [
            {
                "filepath": "./coq_projects/demos/Demo.v",
                "context": " by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Demo.v                                  *)\n(****************************************************************************)\n\n(* A short demo of coq *)\n\nFixpoint Plus (n : nat) : nat -> nat :=\n  fun m : nat => match n with\n                 | O => m\n                 | S p => S (Plus p m)\n                 end.\n\n(**********************************************)\n(***      A few elementary properties       ***)\n(**********************************************)\n\n",
                "context_tokens": 329,
                "proof_start_offset": 2541,
                "proof_end_offset": 2641,
                "proof": "Goal forall n : nat, n = Plus n 0.\nProof.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_n_O.",
                "end_command": "Save Plus_n_O.",
                "generated_proofs": [
                    {
                        "proof": "Goal forall n : nat, n = Plus n 0.\nsimple induction n.\nintros.\nauto with arith.\nintros.\nauto with arith.\nintros.\nauto with arith.\nSave Plus_n_O.",
                        "correct": false,
                        "error_msg": "File \"./Demo.v\", line 49, characters 0-15:\nError:\nLtac call to \"auto (int_or_var_opt) (auto_using) (hintbases)\" failed.\nNo such Hint database: arith.\n\nmake[2]: *** [Makefile.coq:663: Demo.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo.v",
                "context": "                                                          *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Demo.v                                  *)\n(****************************************************************************)\n\n(* A short demo of coq *)\n\nFixpoint Plus (n : nat) : nat -> nat :=\n  fun m : nat => match n with\n                 | O => m\n                 | S p => S (Plus p m)\n                 end.\n\n(**********************************************)\n(***      A few elementary properties       ***)\n(**********************************************)\n\nGoal forall n : nat, n = Plus n 0.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_n_O.\nHint Resolve Plus_n_O.\n\n",
                "context_tokens": 340,
                "proof_start_offset": 2666,
                "proof_end_offset": 2781,
                "proof": "Goal forall m n : nat, S (Plus m n) = Plus m (S n).\nProof.\nsimple induction m; simpl in |- *; auto with core.\nSave Plus_S.",
                "end_command": "Save Plus_S.",
                "generated_proofs": [
                    {
                        "proof": "Goal forall m n : nat, S (Plus m n) = Plus m (S n).\nsimple induction m; simpl in |- *; auto with core.\nSave Plus_S.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo.v",
                "context": "  *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Demo.v                                  *)\n(****************************************************************************)\n\n(* A short demo of coq *)\n\nFixpoint Plus (n : nat) : nat -> nat :=\n  fun m : nat => match n with\n                 | O => m\n                 | S p => S (Plus p m)\n                 end.\n\n(**********************************************)\n(***      A few elementary properties       ***)\n(**********************************************)\n\nGoal forall n : nat, n = Plus n 0.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_n_O.\nHint Resolve Plus_n_O.\n\nGoal forall m n : nat, S (Plus m n) = Plus m (S n).\nsimple induction m; simpl in |- *; auto with core.\nSave Plus_S.\nHint Resolve Plus_S.\n\n",
                "context_tokens": 371,
                "proof_start_offset": 2804,
                "proof_end_offset": 2949,
                "proof": "Goal forall n m : nat, Plus n m = Plus m n.\nProof.\nsimple induction m; simpl in |- *; auto with core.\nsimple induction 1; auto with core.\nSave Plus_com.",
                "end_command": "Save Plus_com.",
                "generated_proofs": [
                    {
                        "proof": "Goal forall n m : nat, Plus n m = Plus m n.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_com.",
                        "correct": false,
                        "error_msg": "File \"./Demo.v\", line 58, characters 0-14:\nError: Attempt to save an incomplete proof (in proof Unnamed_thm)\n\nmake[2]: *** [Makefile.coq:663: Demo.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo.v",
                "context": "etails.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Demo.v                                  *)\n(****************************************************************************)\n\n(* A short demo of coq *)\n\nFixpoint Plus (n : nat) : nat -> nat :=\n  fun m : nat => match n with\n                 | O => m\n                 | S p => S (Plus p m)\n                 end.\n\n(**********************************************)\n(***      A few elementary properties       ***)\n(**********************************************)\n\nGoal forall n : nat, n = Plus n 0.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_n_O.\nHint Resolve Plus_n_O.\n\nGoal forall m n : nat, S (Plus m n) = Plus m (S n).\nsimple induction m; simpl in |- *; auto with core.\nSave Plus_S.\nHint Resolve Plus_S.\n\nGoal forall n m : nat, Plus n m = Plus m n.\nsimple induction m; simpl in |- *; auto with core.\nsimple induction 1; auto with core.\nSave Plus_com.\nHint Immediate Plus_com.\n\n",
                "context_tokens": 385,
                "proof_start_offset": 2976,
                "proof_end_offset": 3104,
                "proof": "Goal forall n m p : nat, Plus n m = Plus n p -> m = p :>nat.\nProof.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_simpl.",
                "end_command": "Save Plus_simpl.",
                "generated_proofs": [
                    {
                        "proof": "Goal forall n m p : nat, Plus n m = Plus n p -> m = p :>nat.\nsimple induction n; simpl in |- *; auto with core.\nsimple induction 1; auto with core.\nsimple induction 1; auto with core.\nSave Plus_simpl.",
                        "correct": false,
                        "error_msg": "File \"./Demo.v\", line 64, characters 0-35:\nError: No such goal.\n\nmake[2]: *** [Makefile.coq:663: Demo.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo.v",
                "context": " a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Demo.v                                  *)\n(****************************************************************************)\n\n(* A short demo of coq *)\n\nFixpoint Plus (n : nat) : nat -> nat :=\n  fun m : nat => match n with\n                 | O => m\n                 | S p => S (Plus p m)\n                 end.\n\n(**********************************************)\n(***      A few elementary properties       ***)\n(**********************************************)\n\nGoal forall n : nat, n = Plus n 0.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_n_O.\nHint Resolve Plus_n_O.\n\nGoal forall m n : nat, S (Plus m n) = Plus m (S n).\nsimple induction m; simpl in |- *; auto with core.\nSave Plus_S.\nHint Resolve Plus_S.\n\nGoal forall n m : nat, Plus n m = Plus m n.\nsimple induction m; simpl in |- *; auto with core.\nsimple induction 1; auto with core.\nSave Plus_com.\nHint Immediate Plus_com.\n\nGoal forall n m p : nat, Plus n m = Plus n p -> m = p :>nat.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_simpl.\n\n",
                "context_tokens": 412,
                "proof_start_offset": 3106,
                "proof_end_offset": 3237,
                "proof": "Goal forall n m p : nat, Plus n (Plus m p) = Plus (Plus n m) p.\nProof.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_assoc.",
                "end_command": "Save Plus_assoc.",
                "generated_proofs": [
                    {
                        "proof": "Goal forall n m p : nat, Plus n (Plus m p) = Plus (Plus n m) p.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_assoc.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo.v",
                "context": "in St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Demo.v                                  *)\n(****************************************************************************)\n\n(* A short demo of coq *)\n\nFixpoint Plus (n : nat) : nat -> nat :=\n  fun m : nat => match n with\n                 | O => m\n                 | S p => S (Plus p m)\n                 end.\n\n(**********************************************)\n(***      A few elementary properties       ***)\n(**********************************************)\n\nGoal forall n : nat, n = Plus n 0.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_n_O.\nHint Resolve Plus_n_O.\n\nGoal forall m n : nat, S (Plus m n) = Plus m (S n).\nsimple induction m; simpl in |- *; auto with core.\nSave Plus_S.\nHint Resolve Plus_S.\n\nGoal forall n m : nat, Plus n m = Plus m n.\nsimple induction m; simpl in |- *; auto with core.\nsimple induction 1; auto with core.\nSave Plus_com.\nHint Immediate Plus_com.\n\nGoal forall n m p : nat, Plus n m = Plus n p -> m = p :>nat.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_simpl.\n\nGoal forall n m p : nat, Plus n (Plus m p) = Plus (Plus n m) p.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_assoc.\nHint Resolve Plus_assoc.\n\n",
                "context_tokens": 429,
                "proof_start_offset": 3264,
                "proof_end_offset": 3360,
                "proof": "Goal forall n m p : nat, Plus (Plus n m) p = Plus n (Plus m p).\nProof.\nauto with core.\nSave assoc_Plus.",
                "end_command": "Save assoc_Plus.",
                "generated_proofs": [
                    {
                        "proof": "Goal forall n m p : nat, Plus (Plus n m) p = Plus n (Plus m p).\nsimple induction n; simpl in |- *; auto with core.\nSave assoc_Plus.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo.v",
                "context": "                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Demo.v                                  *)\n(****************************************************************************)\n\n(* A short demo of coq *)\n\nFixpoint Plus (n : nat) : nat -> nat :=\n  fun m : nat => match n with\n                 | O => m\n                 | S p => S (Plus p m)\n                 end.\n\n(**********************************************)\n(***      A few elementary properties       ***)\n(**********************************************)\n\nGoal forall n : nat, n = Plus n 0.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_n_O.\nHint Resolve Plus_n_O.\n\nGoal forall m n : nat, S (Plus m n) = Plus m (S n).\nsimple induction m; simpl in |- *; auto with core.\nSave Plus_S.\nHint Resolve Plus_S.\n\nGoal forall n m : nat, Plus n m = Plus m n.\nsimple induction m; simpl in |- *; auto with core.\nsimple induction 1; auto with core.\nSave Plus_com.\nHint Immediate Plus_com.\n\nGoal forall n m p : nat, Plus n m = Plus n p -> m = p :>nat.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_simpl.\n\nGoal forall n m p : nat, Plus n (Plus m p) = Plus (Plus n m) p.\nsimple induction n; simpl in |- *; auto with core.\nSave Plus_assoc.\nHint Resolve Plus_assoc.\n\nGoal forall n m p : nat, Plus (Plus n m) p = Plus n (Plus m p).\nauto with core.\nSave assoc_Plus.\n\n\n(************************************)\n(***         Trees                ***)\n(************************************)\n\nInductive tree : Set :=\n  | tip : tree\n  | node : tree -> tree -> tree.  \n\nFixpoint size (t : tree) : nat :=\n  match t return nat with\n  | tip => 1\n  | node u v => Plus (size u) (size v)\n  end.\n\n",
                "context_tokens": 487,
                "proof_start_offset": 3676,
                "proof_end_offset": 3802,
                "proof": "Goal forall t u v : tree, size (node t (node u v)) = size (node (node t u) v).\nProof.\nsimpl in |- *; auto with core.\nSave size_assoc.",
                "end_command": "Save size_assoc.",
                "generated_proofs": [
                    {
                        "proof": "Goal forall t u v : tree, size (node t (node u v)) = size (node (node t u) v).\nsimple induction t; simpl in |- *; auto with arith.\nintros; rewrite H0; simpl in |- *; auto with arith.\nintros; rewrite H0; simpl in |- *; auto with arith.\nintros; rewrite H0; simpl in |- *; auto with arith.\nSave size_assoc.",
                        "correct": false,
                        "error_msg": "File \"./Demo.v\", line 91, characters 35-50:\nError:\nLtac call to \"auto (int_or_var_opt) (auto_using) (hintbases)\" failed.\nNo such Hint database: arith.\n\nmake[2]: *** [Makefile.coq:663: Demo.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": "(* This program is free software; you can redistribute it and/or      *)\n(* modify it under the terms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(*-- Tactics Tauto & Intuition --*)\n\n(*-- Tauto: Tactic for automating proof in Intuionnistic Propositional \n            Caulculus, based on the contraction-free LJT of Dickhoff \n     Ref:   Roy Dyckhoff, The Journal of Symbolic Logic Volume 57,\n            Number 3, Sept. 1992                                      --*) \n\nParameter A B C : Prop.\nParameter even : nat -> Prop.\nParameter P : nat -> Prop.\n\n(*-- Examples of intuitionistics tautologies \n     Ref: Lincoln Wallen, Automated Deduction in Nonclassical Logics, 1990 \n          Sthephen Klenne, Introduction to Metamathematics,1952. --*)\n\n",
                "context_tokens": 379,
                "proof_start_offset": 1699,
                "proof_end_offset": 1769,
                "proof": "Theorem Ex_Wallen : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem Ex_Wallen : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\nunfold A in |- *.\nintros.\napply H.\napply H0.\napply H1.\napply H1.\napply H2.\napply H1.\napply H1.\napply H2.\napply H3.\napply H1.\napply H3.\napply H3.\napply H1.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply HQed.",
                        "correct": false,
                        "error_msg": "File \"./Demo_tauto.v\", line 35, characters 0-17:\nError: Cannot coerce A to an evaluable reference.\n\nmake[2]: *** [Makefile.coq:663: Demo_tauto.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": "(* This program is free software; you can redistribute it and/or      *)\n(* modify it under the terms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(*-- Tactics Tauto & Intuition --*)\n\n(*-- Tauto: Tactic for automating proof in Intuionnistic Propositional \n            Caulculus, based on the contraction-free LJT of Dickhoff \n     Ref:   Roy Dyckhoff, The Journal of Symbolic Logic Volume 57,\n            Number 3, Sept. 1992                                      --*) \n\nParameter A B C : Prop.\nParameter even : nat -> Prop.\nParameter P : nat -> Prop.\n\n(*-- Examples of intuitionistics tautologies \n     Ref: Lincoln Wallen, Automated Deduction in Nonclassical Logics, 1990 \n          Sthephen Klenne, Introduction to Metamathematics,1952. --*)\n\nTheorem Ex_Wallen : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\n",
                "context_tokens": 412,
                "proof_start_offset": 1771,
                "proof_end_offset": 1818,
                "proof": "Theorem Ex_Klenne : ~ ~ (A \\/ ~ A).\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem Ex_Klenne : ~ ~ (A \\/ ~ A).\ntauto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": "(* This program is free software; you can redistribute it and/or      *)\n(* modify it under the terms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(*-- Tactics Tauto & Intuition --*)\n\n(*-- Tauto: Tactic for automating proof in Intuionnistic Propositional \n            Caulculus, based on the contraction-free LJT of Dickhoff \n     Ref:   Roy Dyckhoff, The Journal of Symbolic Logic Volume 57,\n            Number 3, Sept. 1992                                      --*) \n\nParameter A B C : Prop.\nParameter even : nat -> Prop.\nParameter P : nat -> Prop.\n\n(*-- Examples of intuitionistics tautologies \n     Ref: Lincoln Wallen, Automated Deduction in Nonclassical Logics, 1990 \n          Sthephen Klenne, Introduction to Metamathematics,1952. --*)\n\nTheorem Ex_Wallen : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem Ex_Klenne : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\n(*-- Example with a first ordre formula --*)  \n",
                "context_tokens": 448,
                "proof_start_offset": 1867,
                "proof_end_offset": 1948,
                "proof": "Theorem Ex_Klenne' : forall n : nat, ~ ~ (even n \\/ ~ even n).\nProof.\nintro.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem Ex_Klenne' : forall n : nat, ~ ~ (even n \\/ ~ even n).\ntauto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": "(* This program is free software; you can redistribute it and/or      *)\n(* modify it under the terms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(*-- Tactics Tauto & Intuition --*)\n\n(*-- Tauto: Tactic for automating proof in Intuionnistic Propositional \n            Caulculus, based on the contraction-free LJT of Dickhoff \n     Ref:   Roy Dyckhoff, The Journal of Symbolic Logic Volume 57,\n            Number 3, Sept. 1992                                      --*) \n\nParameter A B C : Prop.\nParameter even : nat -> Prop.\nParameter P : nat -> Prop.\n\n(*-- Examples of intuitionistics tautologies \n     Ref: Lincoln Wallen, Automated Deduction in Nonclassical Logics, 1990 \n          Sthephen Klenne, Introduction to Metamathematics,1952. --*)\n\nTheorem Ex_Wallen : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem Ex_Klenne : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\n(*-- Example with a first ordre formula --*)  \nTheorem Ex_Klenne' : forall n : nat, ~ ~ (even n \\/ ~ even n).\nintro.\ntauto.\nQed.\n\n(*-- Example with a first ordre tautologic formula --*)\n",
                "context_tokens": 499,
                "proof_start_offset": 2006,
                "proof_end_offset": 2102,
                "proof": "Theorem Ex_Klenne'' : ~ ~ ((forall n : nat, even n) \\/ ~ (forall m : nat, even m)).\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem Ex_Klenne'' : ~ ~ ((forall n : nat, even n) \\/ ~ (forall m : nat, even m)).\nintro.\nintro.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napply P.\napplyQed.",
                        "correct": false,
                        "error_msg": "File \"./Demo_tauto.v\", line 51, characters 0-5:\nError: Ltac call to \"intro\" failed.\n       No product even after head-reduction.\n\nmake[2]: *** [Makefile.coq:663: Demo_tauto.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": "(* This program is free software; you can redistribute it and/or      *)\n(* modify it under the terms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(*-- Tactics Tauto & Intuition --*)\n\n(*-- Tauto: Tactic for automating proof in Intuionnistic Propositional \n            Caulculus, based on the contraction-free LJT of Dickhoff \n     Ref:   Roy Dyckhoff, The Journal of Symbolic Logic Volume 57,\n            Number 3, Sept. 1992                                      --*) \n\nParameter A B C : Prop.\nParameter even : nat -> Prop.\nParameter P : nat -> Prop.\n\n(*-- Examples of intuitionistics tautologies \n     Ref: Lincoln Wallen, Automated Deduction in Nonclassical Logics, 1990 \n          Sthephen Klenne, Introduction to Metamathematics,1952. --*)\n\nTheorem Ex_Wallen : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem Ex_Klenne : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\n(*-- Example with a first ordre formula --*)  \nTheorem Ex_Klenne' : forall n : nat, ~ ~ (even n \\/ ~ even n).\nintro.\ntauto.\nQed.\n\n(*-- Example with a first ordre tautologic formula --*)\nTheorem Ex_Klenne'' :\n ~ ~ ((forall n : nat, even n) \\/ ~ (forall m : nat, even m)).\ntauto.\nQed.\n\n(*-- Intuition: Tactics for simplifications of buts, based on LJT calcul.\n     Ref      : Cesar Munoz, Rapport de stage de DEA 1993. --*)\n\n",
                "context_tokens": 582,
                "proof_start_offset": 2243,
                "proof_end_offset": 2346,
                "proof": "Theorem Intu : (forall x : nat, P x) /\\ B -> (forall y : nat, P y) /\\ P 0 \\/ B /\\ P 0.\nProof.\nintuition.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem Intu : (forall x : nat, P x) /\\ B -> (forall y : nat, P y) /\\ P 0 \\/ B /\\ P 0.\nintro.\nintro.\napply H.\napply H0.\napply H1.\napply H1.\napply H2.\napply H1.\napply H2.\napply H2.\napply H1.\napply H2.\napply H2.\napply H2.\napply H2.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\napply H3.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Demo_tauto.v\", line 59, characters 0-5:\nError: Ltac call to \"intro\" failed.\n       No product even after head-reduction.\n\nmake[2]: *** [Makefile.coq:663: Demo_tauto.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": "         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(*-- Tactics Tauto & Intuition --*)\n\n(*-- Tauto: Tactic for automating proof in Intuionnistic Propositional \n            Caulculus, based on the contraction-free LJT of Dickhoff \n     Ref:   Roy Dyckhoff, The Journal of Symbolic Logic Volume 57,\n            Number 3, Sept. 1992                                      --*) \n\nParameter A B C : Prop.\nParameter even : nat -> Prop.\nParameter P : nat -> Prop.\n\n(*-- Examples of intuitionistics tautologies \n     Ref: Lincoln Wallen, Automated Deduction in Nonclassical Logics, 1990 \n          Sthephen Klenne, Introduction to Metamathematics,1952. --*)\n\nTheorem Ex_Wallen : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem Ex_Klenne : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\n(*-- Example with a first ordre formula --*)  \nTheorem Ex_Klenne' : forall n : nat, ~ ~ (even n \\/ ~ even n).\nintro.\ntauto.\nQed.\n\n(*-- Example with a first ordre tautologic formula --*)\nTheorem Ex_Klenne'' :\n ~ ~ ((forall n : nat, even n) \\/ ~ (forall m : nat, even m)).\ntauto.\nQed.\n\n(*-- Intuition: Tactics for simplifications of buts, based on LJT calcul.\n     Ref      : Cesar Munoz, Rapport de stage de DEA 1993. --*)\n\nTheorem Intu :\n (forall x : nat, P x) /\\ B -> (forall y : nat, P y) /\\ P 0 \\/ B /\\ P 0.\nintuition.\nQed.\n\n(*  A private club has the following rules :\n *\n * . rule 1 : Every non-scottish member wears red socks\n * . rule 2 : Every member wears a kilt or doesn't wear red socks\n * . rule 3 : The married members don't go out on sunday\n * . rule 4 : A member goes out on sunday if and only if he is scottish\n * . rule 5 : Every member who wears a kilt is scottish and married\n * . rule 6 : Every scottish member wears a kilt\n *\n *  Actually, no one can be accepted!\n *)\n\nSection club.\n\nVariable Scottish RedSocks WearKilt Married GoOutSunday : Prop.\n\nHypothesis rule1 : ~ Scottish -> RedSocks.\nHypothesis rule2 : WearKilt \\/ ~ RedSocks.\nHypothesis rule3 : Married -> ~ GoOutSunday.\nHypothesis rule4 : GoOutSunday <-> Scottish.\nHypothesis rule5 : WearKilt -> Scottish /\\ Married.\nHypothesis rule6 : Scottish -> WearKilt.\n\n",
                "context_tokens": 750,
                "proof_start_offset": 3167,
                "proof_end_offset": 3202,
                "proof": "Lemma NoMember : False.\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma NoMember : False.\nProof.\nintros x y H1 H2; elim H1; intros H3 H4; elim H4; intros H5 H6; elim H6; intros H7 H8; elim H8; intros H8 H9; elim H9;\n intros H10 H11; elim H11; intros H12 H12; elim H12; intros H13 H13; elim H13;\n intros H14 H15; elim H15; intros H15 H16; elim H15; intros H16 H17; elim H17;\n intros H16 H17; elim H17; intros H17 H17; elim H17;\n intros H17 H17; elim H17; intros H17 H17; elim H17;\n intros H17 H17; elim H17; intros H17 H17; elim H17;\n intros H17 H17; elim H17; intros H17 H17; elim H18;\n intros H17 H18; elim H18; intros H18 H19; elim H18;\n intros H19 H20; elim H20; intros H20 H20; elim H20;\n intros H20 H20; elim H20; introsQed.",
                        "correct": false,
                        "error_msg": "File \"./Demo_tauto.v\", line 96, characters 27-36:\nError: The reference introsQed was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Demo_tauto.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": " Library   V6.3 (July 1999)                    *)\n\n(*-- Tactics Tauto & Intuition --*)\n\n(*-- Tauto: Tactic for automating proof in Intuionnistic Propositional \n            Caulculus, based on the contraction-free LJT of Dickhoff \n     Ref:   Roy Dyckhoff, The Journal of Symbolic Logic Volume 57,\n            Number 3, Sept. 1992                                      --*) \n\nParameter A B C : Prop.\nParameter even : nat -> Prop.\nParameter P : nat -> Prop.\n\n(*-- Examples of intuitionistics tautologies \n     Ref: Lincoln Wallen, Automated Deduction in Nonclassical Logics, 1990 \n          Sthephen Klenne, Introduction to Metamathematics,1952. --*)\n\nTheorem Ex_Wallen : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem Ex_Klenne : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\n(*-- Example with a first ordre formula --*)  \nTheorem Ex_Klenne' : forall n : nat, ~ ~ (even n \\/ ~ even n).\nintro.\ntauto.\nQed.\n\n(*-- Example with a first ordre tautologic formula --*)\nTheorem Ex_Klenne'' :\n ~ ~ ((forall n : nat, even n) \\/ ~ (forall m : nat, even m)).\ntauto.\nQed.\n\n(*-- Intuition: Tactics for simplifications of buts, based on LJT calcul.\n     Ref      : Cesar Munoz, Rapport de stage de DEA 1993. --*)\n\nTheorem Intu :\n (forall x : nat, P x) /\\ B -> (forall y : nat, P y) /\\ P 0 \\/ B /\\ P 0.\nintuition.\nQed.\n\n(*  A private club has the following rules :\n *\n * . rule 1 : Every non-scottish member wears red socks\n * . rule 2 : Every member wears a kilt or doesn't wear red socks\n * . rule 3 : The married members don't go out on sunday\n * . rule 4 : A member goes out on sunday if and only if he is scottish\n * . rule 5 : Every member who wears a kilt is scottish and married\n * . rule 6 : Every scottish member wears a kilt\n *\n *  Actually, no one can be accepted!\n *)\n\nSection club.\n\nVariable Scottish RedSocks WearKilt Married GoOutSunday : Prop.\n\nHypothesis rule1 : ~ Scottish -> RedSocks.\nHypothesis rule2 : WearKilt \\/ ~ RedSocks.\nHypothesis rule3 : Married -> ~ GoOutSunday.\nHypothesis rule4 : GoOutSunday <-> Scottish.\nHypothesis rule5 : WearKilt -> Scottish /\\ Married.\nHypothesis rule6 : Scottish -> WearKilt.\n\nLemma NoMember : False.\ntauto.\nQed.\n\nEnd club.\n\n",
                "context_tokens": 736,
                "proof_start_offset": 3215,
                "proof_end_offset": 3288,
                "proof": "Theorem tauto : (forall x : nat, P x) -> forall y : nat, P y.\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem tauto : (forall x : nat, P x) -> forall y : nat, P y.\nintros x y H.\napply H.\napply H.\napply H0.\napply H.\napply H0.\napply H0.\napply H1.\napply H1.\napply H1.\napply H1.\napply H0.\napply H1.\napply H0.\napply H0.\napply H1.\napply H1.\napply H1.\napply H0.\napply H1.\napply H0.\napply H1.\napply H0.\napply H1.\napply H0.\napply H1.\napply H0.\napply H1.\napply H0.\napply H1.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H1.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply HQed.",
                        "correct": false,
                        "error_msg": "File \"./Demo_tauto.v\", line 92, characters 0-12:\nError: No product even after head-reduction.\n\nmake[2]: *** [Makefile.coq:663: Demo_tauto.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": " Tactics Tauto & Intuition --*)\n\n(*-- Tauto: Tactic for automating proof in Intuionnistic Propositional \n            Caulculus, based on the contraction-free LJT of Dickhoff \n     Ref:   Roy Dyckhoff, The Journal of Symbolic Logic Volume 57,\n            Number 3, Sept. 1992                                      --*) \n\nParameter A B C : Prop.\nParameter even : nat -> Prop.\nParameter P : nat -> Prop.\n\n(*-- Examples of intuitionistics tautologies \n     Ref: Lincoln Wallen, Automated Deduction in Nonclassical Logics, 1990 \n          Sthephen Klenne, Introduction to Metamathematics,1952. --*)\n\nTheorem Ex_Wallen : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem Ex_Klenne : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\n(*-- Example with a first ordre formula --*)  \nTheorem Ex_Klenne' : forall n : nat, ~ ~ (even n \\/ ~ even n).\nintro.\ntauto.\nQed.\n\n(*-- Example with a first ordre tautologic formula --*)\nTheorem Ex_Klenne'' :\n ~ ~ ((forall n : nat, even n) \\/ ~ (forall m : nat, even m)).\ntauto.\nQed.\n\n(*-- Intuition: Tactics for simplifications of buts, based on LJT calcul.\n     Ref      : Cesar Munoz, Rapport de stage de DEA 1993. --*)\n\nTheorem Intu :\n (forall x : nat, P x) /\\ B -> (forall y : nat, P y) /\\ P 0 \\/ B /\\ P 0.\nintuition.\nQed.\n\n(*  A private club has the following rules :\n *\n * . rule 1 : Every non-scottish member wears red socks\n * . rule 2 : Every member wears a kilt or doesn't wear red socks\n * . rule 3 : The married members don't go out on sunday\n * . rule 4 : A member goes out on sunday if and only if he is scottish\n * . rule 5 : Every member who wears a kilt is scottish and married\n * . rule 6 : Every scottish member wears a kilt\n *\n *  Actually, no one can be accepted!\n *)\n\nSection club.\n\nVariable Scottish RedSocks WearKilt Married GoOutSunday : Prop.\n\nHypothesis rule1 : ~ Scottish -> RedSocks.\nHypothesis rule2 : WearKilt \\/ ~ RedSocks.\nHypothesis rule3 : Married -> ~ GoOutSunday.\nHypothesis rule4 : GoOutSunday <-> Scottish.\nHypothesis rule5 : WearKilt -> Scottish /\\ Married.\nHypothesis rule6 : Scottish -> WearKilt.\n\nLemma NoMember : False.\ntauto.\nQed.\n\nEnd club.\n\nTheorem tauto : (forall x : nat, P x) -> forall y : nat, P y.\ntauto.\nQed.\n\n",
                "context_tokens": 749,
                "proof_start_offset": 3290,
                "proof_end_offset": 3326,
                "proof": "Theorem tauto1 : A -> A.\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem tauto1 : A -> A.\ntauto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": "ulus, based on the contraction-free LJT of Dickhoff \n     Ref:   Roy Dyckhoff, The Journal of Symbolic Logic Volume 57,\n            Number 3, Sept. 1992                                      --*) \n\nParameter A B C : Prop.\nParameter even : nat -> Prop.\nParameter P : nat -> Prop.\n\n(*-- Examples of intuitionistics tautologies \n     Ref: Lincoln Wallen, Automated Deduction in Nonclassical Logics, 1990 \n          Sthephen Klenne, Introduction to Metamathematics,1952. --*)\n\nTheorem Ex_Wallen : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem Ex_Klenne : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\n(*-- Example with a first ordre formula --*)  \nTheorem Ex_Klenne' : forall n : nat, ~ ~ (even n \\/ ~ even n).\nintro.\ntauto.\nQed.\n\n(*-- Example with a first ordre tautologic formula --*)\nTheorem Ex_Klenne'' :\n ~ ~ ((forall n : nat, even n) \\/ ~ (forall m : nat, even m)).\ntauto.\nQed.\n\n(*-- Intuition: Tactics for simplifications of buts, based on LJT calcul.\n     Ref      : Cesar Munoz, Rapport de stage de DEA 1993. --*)\n\nTheorem Intu :\n (forall x : nat, P x) /\\ B -> (forall y : nat, P y) /\\ P 0 \\/ B /\\ P 0.\nintuition.\nQed.\n\n(*  A private club has the following rules :\n *\n * . rule 1 : Every non-scottish member wears red socks\n * . rule 2 : Every member wears a kilt or doesn't wear red socks\n * . rule 3 : The married members don't go out on sunday\n * . rule 4 : A member goes out on sunday if and only if he is scottish\n * . rule 5 : Every member who wears a kilt is scottish and married\n * . rule 6 : Every scottish member wears a kilt\n *\n *  Actually, no one can be accepted!\n *)\n\nSection club.\n\nVariable Scottish RedSocks WearKilt Married GoOutSunday : Prop.\n\nHypothesis rule1 : ~ Scottish -> RedSocks.\nHypothesis rule2 : WearKilt \\/ ~ RedSocks.\nHypothesis rule3 : Married -> ~ GoOutSunday.\nHypothesis rule4 : GoOutSunday <-> Scottish.\nHypothesis rule5 : WearKilt -> Scottish /\\ Married.\nHypothesis rule6 : Scottish -> WearKilt.\n\nLemma NoMember : False.\ntauto.\nQed.\n\nEnd club.\n\nTheorem tauto : (forall x : nat, P x) -> forall y : nat, P y.\ntauto.\nQed.\n\nTheorem tauto1 : A -> A.\ntauto.\nQed.\n\n",
                "context_tokens": 735,
                "proof_start_offset": 3328,
                "proof_end_offset": 3393,
                "proof": "Theorem tauto2 : (A -> B -> C) -> (A -> B) -> A -> C.\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem tauto2 : (A -> B -> C) -> (A -> B) -> A -> C.\ntauto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": "bolic Logic Volume 57,\n            Number 3, Sept. 1992                                      --*) \n\nParameter A B C : Prop.\nParameter even : nat -> Prop.\nParameter P : nat -> Prop.\n\n(*-- Examples of intuitionistics tautologies \n     Ref: Lincoln Wallen, Automated Deduction in Nonclassical Logics, 1990 \n          Sthephen Klenne, Introduction to Metamathematics,1952. --*)\n\nTheorem Ex_Wallen : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem Ex_Klenne : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\n(*-- Example with a first ordre formula --*)  \nTheorem Ex_Klenne' : forall n : nat, ~ ~ (even n \\/ ~ even n).\nintro.\ntauto.\nQed.\n\n(*-- Example with a first ordre tautologic formula --*)\nTheorem Ex_Klenne'' :\n ~ ~ ((forall n : nat, even n) \\/ ~ (forall m : nat, even m)).\ntauto.\nQed.\n\n(*-- Intuition: Tactics for simplifications of buts, based on LJT calcul.\n     Ref      : Cesar Munoz, Rapport de stage de DEA 1993. --*)\n\nTheorem Intu :\n (forall x : nat, P x) /\\ B -> (forall y : nat, P y) /\\ P 0 \\/ B /\\ P 0.\nintuition.\nQed.\n\n(*  A private club has the following rules :\n *\n * . rule 1 : Every non-scottish member wears red socks\n * . rule 2 : Every member wears a kilt or doesn't wear red socks\n * . rule 3 : The married members don't go out on sunday\n * . rule 4 : A member goes out on sunday if and only if he is scottish\n * . rule 5 : Every member who wears a kilt is scottish and married\n * . rule 6 : Every scottish member wears a kilt\n *\n *  Actually, no one can be accepted!\n *)\n\nSection club.\n\nVariable Scottish RedSocks WearKilt Married GoOutSunday : Prop.\n\nHypothesis rule1 : ~ Scottish -> RedSocks.\nHypothesis rule2 : WearKilt \\/ ~ RedSocks.\nHypothesis rule3 : Married -> ~ GoOutSunday.\nHypothesis rule4 : GoOutSunday <-> Scottish.\nHypothesis rule5 : WearKilt -> Scottish /\\ Married.\nHypothesis rule6 : Scottish -> WearKilt.\n\nLemma NoMember : False.\ntauto.\nQed.\n\nEnd club.\n\nTheorem tauto : (forall x : nat, P x) -> forall y : nat, P y.\ntauto.\nQed.\n\nTheorem tauto1 : A -> A.\ntauto.\nQed.\n\nTheorem tauto2 : (A -> B -> C) -> (A -> B) -> A -> C.\ntauto.\nQed.\n\n",
                "context_tokens": 733,
                "proof_start_offset": 3395,
                "proof_end_offset": 3462,
                "proof": "Theorem a : forall (x0 : A \\/ B) (x1 : B /\\ C), A -> B.\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem a : forall (x0 : A \\/ B) (x1 : B /\\ C), A -> B.\ntauto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": " even : nat -> Prop.\nParameter P : nat -> Prop.\n\n(*-- Examples of intuitionistics tautologies \n     Ref: Lincoln Wallen, Automated Deduction in Nonclassical Logics, 1990 \n          Sthephen Klenne, Introduction to Metamathematics,1952. --*)\n\nTheorem Ex_Wallen : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem Ex_Klenne : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\n(*-- Example with a first ordre formula --*)  \nTheorem Ex_Klenne' : forall n : nat, ~ ~ (even n \\/ ~ even n).\nintro.\ntauto.\nQed.\n\n(*-- Example with a first ordre tautologic formula --*)\nTheorem Ex_Klenne'' :\n ~ ~ ((forall n : nat, even n) \\/ ~ (forall m : nat, even m)).\ntauto.\nQed.\n\n(*-- Intuition: Tactics for simplifications of buts, based on LJT calcul.\n     Ref      : Cesar Munoz, Rapport de stage de DEA 1993. --*)\n\nTheorem Intu :\n (forall x : nat, P x) /\\ B -> (forall y : nat, P y) /\\ P 0 \\/ B /\\ P 0.\nintuition.\nQed.\n\n(*  A private club has the following rules :\n *\n * . rule 1 : Every non-scottish member wears red socks\n * . rule 2 : Every member wears a kilt or doesn't wear red socks\n * . rule 3 : The married members don't go out on sunday\n * . rule 4 : A member goes out on sunday if and only if he is scottish\n * . rule 5 : Every member who wears a kilt is scottish and married\n * . rule 6 : Every scottish member wears a kilt\n *\n *  Actually, no one can be accepted!\n *)\n\nSection club.\n\nVariable Scottish RedSocks WearKilt Married GoOutSunday : Prop.\n\nHypothesis rule1 : ~ Scottish -> RedSocks.\nHypothesis rule2 : WearKilt \\/ ~ RedSocks.\nHypothesis rule3 : Married -> ~ GoOutSunday.\nHypothesis rule4 : GoOutSunday <-> Scottish.\nHypothesis rule5 : WearKilt -> Scottish /\\ Married.\nHypothesis rule6 : Scottish -> WearKilt.\n\nLemma NoMember : False.\ntauto.\nQed.\n\nEnd club.\n\nTheorem tauto : (forall x : nat, P x) -> forall y : nat, P y.\ntauto.\nQed.\n\nTheorem tauto1 : A -> A.\ntauto.\nQed.\n\nTheorem tauto2 : (A -> B -> C) -> (A -> B) -> A -> C.\ntauto.\nQed.\n\nTheorem a : forall (x0 : A \\/ B) (x1 : B /\\ C), A -> B.\ntauto.\nQed.\n\n",
                "context_tokens": 734,
                "proof_start_offset": 3464,
                "proof_end_offset": 3527,
                "proof": "Theorem a2 : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem a2 : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": " Examples of intuitionistics tautologies \n     Ref: Lincoln Wallen, Automated Deduction in Nonclassical Logics, 1990 \n          Sthephen Klenne, Introduction to Metamathematics,1952. --*)\n\nTheorem Ex_Wallen : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem Ex_Klenne : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\n(*-- Example with a first ordre formula --*)  \nTheorem Ex_Klenne' : forall n : nat, ~ ~ (even n \\/ ~ even n).\nintro.\ntauto.\nQed.\n\n(*-- Example with a first ordre tautologic formula --*)\nTheorem Ex_Klenne'' :\n ~ ~ ((forall n : nat, even n) \\/ ~ (forall m : nat, even m)).\ntauto.\nQed.\n\n(*-- Intuition: Tactics for simplifications of buts, based on LJT calcul.\n     Ref      : Cesar Munoz, Rapport de stage de DEA 1993. --*)\n\nTheorem Intu :\n (forall x : nat, P x) /\\ B -> (forall y : nat, P y) /\\ P 0 \\/ B /\\ P 0.\nintuition.\nQed.\n\n(*  A private club has the following rules :\n *\n * . rule 1 : Every non-scottish member wears red socks\n * . rule 2 : Every member wears a kilt or doesn't wear red socks\n * . rule 3 : The married members don't go out on sunday\n * . rule 4 : A member goes out on sunday if and only if he is scottish\n * . rule 5 : Every member who wears a kilt is scottish and married\n * . rule 6 : Every scottish member wears a kilt\n *\n *  Actually, no one can be accepted!\n *)\n\nSection club.\n\nVariable Scottish RedSocks WearKilt Married GoOutSunday : Prop.\n\nHypothesis rule1 : ~ Scottish -> RedSocks.\nHypothesis rule2 : WearKilt \\/ ~ RedSocks.\nHypothesis rule3 : Married -> ~ GoOutSunday.\nHypothesis rule4 : GoOutSunday <-> Scottish.\nHypothesis rule5 : WearKilt -> Scottish /\\ Married.\nHypothesis rule6 : Scottish -> WearKilt.\n\nLemma NoMember : False.\ntauto.\nQed.\n\nEnd club.\n\nTheorem tauto : (forall x : nat, P x) -> forall y : nat, P y.\ntauto.\nQed.\n\nTheorem tauto1 : A -> A.\ntauto.\nQed.\n\nTheorem tauto2 : (A -> B -> C) -> (A -> B) -> A -> C.\ntauto.\nQed.\n\nTheorem a : forall (x0 : A \\/ B) (x1 : B /\\ C), A -> B.\ntauto.\nQed.\n\nTheorem a2 : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\n",
                "context_tokens": 747,
                "proof_start_offset": 3529,
                "proof_end_offset": 3565,
                "proof": "Theorem a4 : ~ A -> ~ A.\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem a4 : ~ A -> ~ A.\ntauto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": " Deduction in Nonclassical Logics, 1990 \n          Sthephen Klenne, Introduction to Metamathematics,1952. --*)\n\nTheorem Ex_Wallen : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem Ex_Klenne : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\n(*-- Example with a first ordre formula --*)  \nTheorem Ex_Klenne' : forall n : nat, ~ ~ (even n \\/ ~ even n).\nintro.\ntauto.\nQed.\n\n(*-- Example with a first ordre tautologic formula --*)\nTheorem Ex_Klenne'' :\n ~ ~ ((forall n : nat, even n) \\/ ~ (forall m : nat, even m)).\ntauto.\nQed.\n\n(*-- Intuition: Tactics for simplifications of buts, based on LJT calcul.\n     Ref      : Cesar Munoz, Rapport de stage de DEA 1993. --*)\n\nTheorem Intu :\n (forall x : nat, P x) /\\ B -> (forall y : nat, P y) /\\ P 0 \\/ B /\\ P 0.\nintuition.\nQed.\n\n(*  A private club has the following rules :\n *\n * . rule 1 : Every non-scottish member wears red socks\n * . rule 2 : Every member wears a kilt or doesn't wear red socks\n * . rule 3 : The married members don't go out on sunday\n * . rule 4 : A member goes out on sunday if and only if he is scottish\n * . rule 5 : Every member who wears a kilt is scottish and married\n * . rule 6 : Every scottish member wears a kilt\n *\n *  Actually, no one can be accepted!\n *)\n\nSection club.\n\nVariable Scottish RedSocks WearKilt Married GoOutSunday : Prop.\n\nHypothesis rule1 : ~ Scottish -> RedSocks.\nHypothesis rule2 : WearKilt \\/ ~ RedSocks.\nHypothesis rule3 : Married -> ~ GoOutSunday.\nHypothesis rule4 : GoOutSunday <-> Scottish.\nHypothesis rule5 : WearKilt -> Scottish /\\ Married.\nHypothesis rule6 : Scottish -> WearKilt.\n\nLemma NoMember : False.\ntauto.\nQed.\n\nEnd club.\n\nTheorem tauto : (forall x : nat, P x) -> forall y : nat, P y.\ntauto.\nQed.\n\nTheorem tauto1 : A -> A.\ntauto.\nQed.\n\nTheorem tauto2 : (A -> B -> C) -> (A -> B) -> A -> C.\ntauto.\nQed.\n\nTheorem a : forall (x0 : A \\/ B) (x1 : B /\\ C), A -> B.\ntauto.\nQed.\n\nTheorem a2 : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem a4 : ~ A -> ~ A.\ntauto.\nQed.\n\n",
                "context_tokens": 745,
                "proof_start_offset": 3567,
                "proof_end_offset": 3607,
                "proof": "Theorem e2 : ~ ~ (A \\/ ~ A).\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem e2 : ~ ~ (A \\/ ~ A).\ntauto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": "amathematics,1952. --*)\n\nTheorem Ex_Wallen : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem Ex_Klenne : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\n(*-- Example with a first ordre formula --*)  \nTheorem Ex_Klenne' : forall n : nat, ~ ~ (even n \\/ ~ even n).\nintro.\ntauto.\nQed.\n\n(*-- Example with a first ordre tautologic formula --*)\nTheorem Ex_Klenne'' :\n ~ ~ ((forall n : nat, even n) \\/ ~ (forall m : nat, even m)).\ntauto.\nQed.\n\n(*-- Intuition: Tactics for simplifications of buts, based on LJT calcul.\n     Ref      : Cesar Munoz, Rapport de stage de DEA 1993. --*)\n\nTheorem Intu :\n (forall x : nat, P x) /\\ B -> (forall y : nat, P y) /\\ P 0 \\/ B /\\ P 0.\nintuition.\nQed.\n\n(*  A private club has the following rules :\n *\n * . rule 1 : Every non-scottish member wears red socks\n * . rule 2 : Every member wears a kilt or doesn't wear red socks\n * . rule 3 : The married members don't go out on sunday\n * . rule 4 : A member goes out on sunday if and only if he is scottish\n * . rule 5 : Every member who wears a kilt is scottish and married\n * . rule 6 : Every scottish member wears a kilt\n *\n *  Actually, no one can be accepted!\n *)\n\nSection club.\n\nVariable Scottish RedSocks WearKilt Married GoOutSunday : Prop.\n\nHypothesis rule1 : ~ Scottish -> RedSocks.\nHypothesis rule2 : WearKilt \\/ ~ RedSocks.\nHypothesis rule3 : Married -> ~ GoOutSunday.\nHypothesis rule4 : GoOutSunday <-> Scottish.\nHypothesis rule5 : WearKilt -> Scottish /\\ Married.\nHypothesis rule6 : Scottish -> WearKilt.\n\nLemma NoMember : False.\ntauto.\nQed.\n\nEnd club.\n\nTheorem tauto : (forall x : nat, P x) -> forall y : nat, P y.\ntauto.\nQed.\n\nTheorem tauto1 : A -> A.\ntauto.\nQed.\n\nTheorem tauto2 : (A -> B -> C) -> (A -> B) -> A -> C.\ntauto.\nQed.\n\nTheorem a : forall (x0 : A \\/ B) (x1 : B /\\ C), A -> B.\ntauto.\nQed.\n\nTheorem a2 : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem a4 : ~ A -> ~ A.\ntauto.\nQed.\n\nTheorem e2 : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\n",
                "context_tokens": 742,
                "proof_start_offset": 3609,
                "proof_end_offset": 3657,
                "proof": "Theorem e4 : ~ ~ (A \\/ B -> A \\/ B).\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem e4 : ~ ~ (A \\/ B -> A \\/ B).\ntauto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": "A \\/ ~ A).\ntauto.\nQed.\n\n(*-- Example with a first ordre formula --*)  \nTheorem Ex_Klenne' : forall n : nat, ~ ~ (even n \\/ ~ even n).\nintro.\ntauto.\nQed.\n\n(*-- Example with a first ordre tautologic formula --*)\nTheorem Ex_Klenne'' :\n ~ ~ ((forall n : nat, even n) \\/ ~ (forall m : nat, even m)).\ntauto.\nQed.\n\n(*-- Intuition: Tactics for simplifications of buts, based on LJT calcul.\n     Ref      : Cesar Munoz, Rapport de stage de DEA 1993. --*)\n\nTheorem Intu :\n (forall x : nat, P x) /\\ B -> (forall y : nat, P y) /\\ P 0 \\/ B /\\ P 0.\nintuition.\nQed.\n\n(*  A private club has the following rules :\n *\n * . rule 1 : Every non-scottish member wears red socks\n * . rule 2 : Every member wears a kilt or doesn't wear red socks\n * . rule 3 : The married members don't go out on sunday\n * . rule 4 : A member goes out on sunday if and only if he is scottish\n * . rule 5 : Every member who wears a kilt is scottish and married\n * . rule 6 : Every scottish member wears a kilt\n *\n *  Actually, no one can be accepted!\n *)\n\nSection club.\n\nVariable Scottish RedSocks WearKilt Married GoOutSunday : Prop.\n\nHypothesis rule1 : ~ Scottish -> RedSocks.\nHypothesis rule2 : WearKilt \\/ ~ RedSocks.\nHypothesis rule3 : Married -> ~ GoOutSunday.\nHypothesis rule4 : GoOutSunday <-> Scottish.\nHypothesis rule5 : WearKilt -> Scottish /\\ Married.\nHypothesis rule6 : Scottish -> WearKilt.\n\nLemma NoMember : False.\ntauto.\nQed.\n\nEnd club.\n\nTheorem tauto : (forall x : nat, P x) -> forall y : nat, P y.\ntauto.\nQed.\n\nTheorem tauto1 : A -> A.\ntauto.\nQed.\n\nTheorem tauto2 : (A -> B -> C) -> (A -> B) -> A -> C.\ntauto.\nQed.\n\nTheorem a : forall (x0 : A \\/ B) (x1 : B /\\ C), A -> B.\ntauto.\nQed.\n\nTheorem a2 : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem a4 : ~ A -> ~ A.\ntauto.\nQed.\n\nTheorem e2 : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\nTheorem e4 : ~ ~ (A \\/ B -> A \\/ B).\ntauto.\nQed.\n\n",
                "context_tokens": 711,
                "proof_start_offset": 3659,
                "proof_end_offset": 3767,
                "proof": "Theorem y0 : forall (x0 : A) (x1 : ~ A) (x2 : A -> B) (x3 : A \\/ B) (x4 : A /\\ B), A -> False.\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem y0 : forall (x0 : A) (x1 : ~ A) (x2 : A -> B) (x3 : A \\/ B) (x4 : A /\\ B), A -> False.\ntauto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": "_Klenne' : forall n : nat, ~ ~ (even n \\/ ~ even n).\nintro.\ntauto.\nQed.\n\n(*-- Example with a first ordre tautologic formula --*)\nTheorem Ex_Klenne'' :\n ~ ~ ((forall n : nat, even n) \\/ ~ (forall m : nat, even m)).\ntauto.\nQed.\n\n(*-- Intuition: Tactics for simplifications of buts, based on LJT calcul.\n     Ref      : Cesar Munoz, Rapport de stage de DEA 1993. --*)\n\nTheorem Intu :\n (forall x : nat, P x) /\\ B -> (forall y : nat, P y) /\\ P 0 \\/ B /\\ P 0.\nintuition.\nQed.\n\n(*  A private club has the following rules :\n *\n * . rule 1 : Every non-scottish member wears red socks\n * . rule 2 : Every member wears a kilt or doesn't wear red socks\n * . rule 3 : The married members don't go out on sunday\n * . rule 4 : A member goes out on sunday if and only if he is scottish\n * . rule 5 : Every member who wears a kilt is scottish and married\n * . rule 6 : Every scottish member wears a kilt\n *\n *  Actually, no one can be accepted!\n *)\n\nSection club.\n\nVariable Scottish RedSocks WearKilt Married GoOutSunday : Prop.\n\nHypothesis rule1 : ~ Scottish -> RedSocks.\nHypothesis rule2 : WearKilt \\/ ~ RedSocks.\nHypothesis rule3 : Married -> ~ GoOutSunday.\nHypothesis rule4 : GoOutSunday <-> Scottish.\nHypothesis rule5 : WearKilt -> Scottish /\\ Married.\nHypothesis rule6 : Scottish -> WearKilt.\n\nLemma NoMember : False.\ntauto.\nQed.\n\nEnd club.\n\nTheorem tauto : (forall x : nat, P x) -> forall y : nat, P y.\ntauto.\nQed.\n\nTheorem tauto1 : A -> A.\ntauto.\nQed.\n\nTheorem tauto2 : (A -> B -> C) -> (A -> B) -> A -> C.\ntauto.\nQed.\n\nTheorem a : forall (x0 : A \\/ B) (x1 : B /\\ C), A -> B.\ntauto.\nQed.\n\nTheorem a2 : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem a4 : ~ A -> ~ A.\ntauto.\nQed.\n\nTheorem e2 : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\nTheorem e4 : ~ ~ (A \\/ B -> A \\/ B).\ntauto.\nQed.\n\nTheorem y0 :\n forall (x0 : A) (x1 : ~ A) (x2 : A -> B) (x3 : A \\/ B) (x4 : A /\\ B),\n A -> False.\ntauto.\nQed.\n\n",
                "context_tokens": 739,
                "proof_start_offset": 3769,
                "proof_end_offset": 3823,
                "proof": "Theorem y1 : forall x0 : (A /\\ B) /\\ C, B.\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem y1 : forall x0 : (A /\\ B) /\\ C, B.\ntauto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": ".\n\n(*-- Example with a first ordre tautologic formula --*)\nTheorem Ex_Klenne'' :\n ~ ~ ((forall n : nat, even n) \\/ ~ (forall m : nat, even m)).\ntauto.\nQed.\n\n(*-- Intuition: Tactics for simplifications of buts, based on LJT calcul.\n     Ref      : Cesar Munoz, Rapport de stage de DEA 1993. --*)\n\nTheorem Intu :\n (forall x : nat, P x) /\\ B -> (forall y : nat, P y) /\\ P 0 \\/ B /\\ P 0.\nintuition.\nQed.\n\n(*  A private club has the following rules :\n *\n * . rule 1 : Every non-scottish member wears red socks\n * . rule 2 : Every member wears a kilt or doesn't wear red socks\n * . rule 3 : The married members don't go out on sunday\n * . rule 4 : A member goes out on sunday if and only if he is scottish\n * . rule 5 : Every member who wears a kilt is scottish and married\n * . rule 6 : Every scottish member wears a kilt\n *\n *  Actually, no one can be accepted!\n *)\n\nSection club.\n\nVariable Scottish RedSocks WearKilt Married GoOutSunday : Prop.\n\nHypothesis rule1 : ~ Scottish -> RedSocks.\nHypothesis rule2 : WearKilt \\/ ~ RedSocks.\nHypothesis rule3 : Married -> ~ GoOutSunday.\nHypothesis rule4 : GoOutSunday <-> Scottish.\nHypothesis rule5 : WearKilt -> Scottish /\\ Married.\nHypothesis rule6 : Scottish -> WearKilt.\n\nLemma NoMember : False.\ntauto.\nQed.\n\nEnd club.\n\nTheorem tauto : (forall x : nat, P x) -> forall y : nat, P y.\ntauto.\nQed.\n\nTheorem tauto1 : A -> A.\ntauto.\nQed.\n\nTheorem tauto2 : (A -> B -> C) -> (A -> B) -> A -> C.\ntauto.\nQed.\n\nTheorem a : forall (x0 : A \\/ B) (x1 : B /\\ C), A -> B.\ntauto.\nQed.\n\nTheorem a2 : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem a4 : ~ A -> ~ A.\ntauto.\nQed.\n\nTheorem e2 : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\nTheorem e4 : ~ ~ (A \\/ B -> A \\/ B).\ntauto.\nQed.\n\nTheorem y0 :\n forall (x0 : A) (x1 : ~ A) (x2 : A -> B) (x3 : A \\/ B) (x4 : A /\\ B),\n A -> False.\ntauto.\nQed.\n\nTheorem y1 : forall x0 : (A /\\ B) /\\ C, B.\ntauto.\nQed.\n\n",
                "context_tokens": 736,
                "proof_start_offset": 3825,
                "proof_end_offset": 3883,
                "proof": "Theorem y2 : forall (x0 : A) (x1 : B), C \\/ B.\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem y2 : forall (x0 : A) (x1 : B), C \\/ B.\ntauto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": "ne'' :\n ~ ~ ((forall n : nat, even n) \\/ ~ (forall m : nat, even m)).\ntauto.\nQed.\n\n(*-- Intuition: Tactics for simplifications of buts, based on LJT calcul.\n     Ref      : Cesar Munoz, Rapport de stage de DEA 1993. --*)\n\nTheorem Intu :\n (forall x : nat, P x) /\\ B -> (forall y : nat, P y) /\\ P 0 \\/ B /\\ P 0.\nintuition.\nQed.\n\n(*  A private club has the following rules :\n *\n * . rule 1 : Every non-scottish member wears red socks\n * . rule 2 : Every member wears a kilt or doesn't wear red socks\n * . rule 3 : The married members don't go out on sunday\n * . rule 4 : A member goes out on sunday if and only if he is scottish\n * . rule 5 : Every member who wears a kilt is scottish and married\n * . rule 6 : Every scottish member wears a kilt\n *\n *  Actually, no one can be accepted!\n *)\n\nSection club.\n\nVariable Scottish RedSocks WearKilt Married GoOutSunday : Prop.\n\nHypothesis rule1 : ~ Scottish -> RedSocks.\nHypothesis rule2 : WearKilt \\/ ~ RedSocks.\nHypothesis rule3 : Married -> ~ GoOutSunday.\nHypothesis rule4 : GoOutSunday <-> Scottish.\nHypothesis rule5 : WearKilt -> Scottish /\\ Married.\nHypothesis rule6 : Scottish -> WearKilt.\n\nLemma NoMember : False.\ntauto.\nQed.\n\nEnd club.\n\nTheorem tauto : (forall x : nat, P x) -> forall y : nat, P y.\ntauto.\nQed.\n\nTheorem tauto1 : A -> A.\ntauto.\nQed.\n\nTheorem tauto2 : (A -> B -> C) -> (A -> B) -> A -> C.\ntauto.\nQed.\n\nTheorem a : forall (x0 : A \\/ B) (x1 : B /\\ C), A -> B.\ntauto.\nQed.\n\nTheorem a2 : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem a4 : ~ A -> ~ A.\ntauto.\nQed.\n\nTheorem e2 : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\nTheorem e4 : ~ ~ (A \\/ B -> A \\/ B).\ntauto.\nQed.\n\nTheorem y0 :\n forall (x0 : A) (x1 : ~ A) (x2 : A -> B) (x3 : A \\/ B) (x4 : A /\\ B),\n A -> False.\ntauto.\nQed.\n\nTheorem y1 : forall x0 : (A /\\ B) /\\ C, B.\ntauto.\nQed.\n\nTheorem y2 : forall (x0 : A) (x1 : B), C \\/ B.\ntauto.\nQed.\n\n",
                "context_tokens": 741,
                "proof_start_offset": 3885,
                "proof_end_offset": 3937,
                "proof": "Theorem y3 : forall x0 : A /\\ B, B /\\ A.\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem y3 : forall x0 : A /\\ B, B /\\ A.\ntauto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": " m)).\ntauto.\nQed.\n\n(*-- Intuition: Tactics for simplifications of buts, based on LJT calcul.\n     Ref      : Cesar Munoz, Rapport de stage de DEA 1993. --*)\n\nTheorem Intu :\n (forall x : nat, P x) /\\ B -> (forall y : nat, P y) /\\ P 0 \\/ B /\\ P 0.\nintuition.\nQed.\n\n(*  A private club has the following rules :\n *\n * . rule 1 : Every non-scottish member wears red socks\n * . rule 2 : Every member wears a kilt or doesn't wear red socks\n * . rule 3 : The married members don't go out on sunday\n * . rule 4 : A member goes out on sunday if and only if he is scottish\n * . rule 5 : Every member who wears a kilt is scottish and married\n * . rule 6 : Every scottish member wears a kilt\n *\n *  Actually, no one can be accepted!\n *)\n\nSection club.\n\nVariable Scottish RedSocks WearKilt Married GoOutSunday : Prop.\n\nHypothesis rule1 : ~ Scottish -> RedSocks.\nHypothesis rule2 : WearKilt \\/ ~ RedSocks.\nHypothesis rule3 : Married -> ~ GoOutSunday.\nHypothesis rule4 : GoOutSunday <-> Scottish.\nHypothesis rule5 : WearKilt -> Scottish /\\ Married.\nHypothesis rule6 : Scottish -> WearKilt.\n\nLemma NoMember : False.\ntauto.\nQed.\n\nEnd club.\n\nTheorem tauto : (forall x : nat, P x) -> forall y : nat, P y.\ntauto.\nQed.\n\nTheorem tauto1 : A -> A.\ntauto.\nQed.\n\nTheorem tauto2 : (A -> B -> C) -> (A -> B) -> A -> C.\ntauto.\nQed.\n\nTheorem a : forall (x0 : A \\/ B) (x1 : B /\\ C), A -> B.\ntauto.\nQed.\n\nTheorem a2 : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem a4 : ~ A -> ~ A.\ntauto.\nQed.\n\nTheorem e2 : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\nTheorem e4 : ~ ~ (A \\/ B -> A \\/ B).\ntauto.\nQed.\n\nTheorem y0 :\n forall (x0 : A) (x1 : ~ A) (x2 : A -> B) (x3 : A \\/ B) (x4 : A /\\ B),\n A -> False.\ntauto.\nQed.\n\nTheorem y1 : forall x0 : (A /\\ B) /\\ C, B.\ntauto.\nQed.\n\nTheorem y2 : forall (x0 : A) (x1 : B), C \\/ B.\ntauto.\nQed.\n\nTheorem y3 : forall x0 : A /\\ B, B /\\ A.\ntauto.\nQed.\n\n",
                "context_tokens": 741,
                "proof_start_offset": 3939,
                "proof_end_offset": 3991,
                "proof": "Theorem y5 : forall x0 : A \\/ B, B \\/ A.\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem y5 : forall x0 : A \\/ B, B \\/ A.\ntauto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": "\n     Ref      : Cesar Munoz, Rapport de stage de DEA 1993. --*)\n\nTheorem Intu :\n (forall x : nat, P x) /\\ B -> (forall y : nat, P y) /\\ P 0 \\/ B /\\ P 0.\nintuition.\nQed.\n\n(*  A private club has the following rules :\n *\n * . rule 1 : Every non-scottish member wears red socks\n * . rule 2 : Every member wears a kilt or doesn't wear red socks\n * . rule 3 : The married members don't go out on sunday\n * . rule 4 : A member goes out on sunday if and only if he is scottish\n * . rule 5 : Every member who wears a kilt is scottish and married\n * . rule 6 : Every scottish member wears a kilt\n *\n *  Actually, no one can be accepted!\n *)\n\nSection club.\n\nVariable Scottish RedSocks WearKilt Married GoOutSunday : Prop.\n\nHypothesis rule1 : ~ Scottish -> RedSocks.\nHypothesis rule2 : WearKilt \\/ ~ RedSocks.\nHypothesis rule3 : Married -> ~ GoOutSunday.\nHypothesis rule4 : GoOutSunday <-> Scottish.\nHypothesis rule5 : WearKilt -> Scottish /\\ Married.\nHypothesis rule6 : Scottish -> WearKilt.\n\nLemma NoMember : False.\ntauto.\nQed.\n\nEnd club.\n\nTheorem tauto : (forall x : nat, P x) -> forall y : nat, P y.\ntauto.\nQed.\n\nTheorem tauto1 : A -> A.\ntauto.\nQed.\n\nTheorem tauto2 : (A -> B -> C) -> (A -> B) -> A -> C.\ntauto.\nQed.\n\nTheorem a : forall (x0 : A \\/ B) (x1 : B /\\ C), A -> B.\ntauto.\nQed.\n\nTheorem a2 : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem a4 : ~ A -> ~ A.\ntauto.\nQed.\n\nTheorem e2 : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\nTheorem e4 : ~ ~ (A \\/ B -> A \\/ B).\ntauto.\nQed.\n\nTheorem y0 :\n forall (x0 : A) (x1 : ~ A) (x2 : A -> B) (x3 : A \\/ B) (x4 : A /\\ B),\n A -> False.\ntauto.\nQed.\n\nTheorem y1 : forall x0 : (A /\\ B) /\\ C, B.\ntauto.\nQed.\n\nTheorem y2 : forall (x0 : A) (x1 : B), C \\/ B.\ntauto.\nQed.\n\nTheorem y3 : forall x0 : A /\\ B, B /\\ A.\ntauto.\nQed.\n\nTheorem y5 : forall x0 : A \\/ B, B \\/ A.\ntauto.\nQed.\n\n",
                "context_tokens": 736,
                "proof_start_offset": 3993,
                "proof_end_offset": 4051,
                "proof": "Theorem y6 : forall (x0 : A -> B) (x1 : A), B.\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem y6 : forall (x0 : A -> B) (x1 : A), B.\ntauto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": " P x) /\\ B -> (forall y : nat, P y) /\\ P 0 \\/ B /\\ P 0.\nintuition.\nQed.\n\n(*  A private club has the following rules :\n *\n * . rule 1 : Every non-scottish member wears red socks\n * . rule 2 : Every member wears a kilt or doesn't wear red socks\n * . rule 3 : The married members don't go out on sunday\n * . rule 4 : A member goes out on sunday if and only if he is scottish\n * . rule 5 : Every member who wears a kilt is scottish and married\n * . rule 6 : Every scottish member wears a kilt\n *\n *  Actually, no one can be accepted!\n *)\n\nSection club.\n\nVariable Scottish RedSocks WearKilt Married GoOutSunday : Prop.\n\nHypothesis rule1 : ~ Scottish -> RedSocks.\nHypothesis rule2 : WearKilt \\/ ~ RedSocks.\nHypothesis rule3 : Married -> ~ GoOutSunday.\nHypothesis rule4 : GoOutSunday <-> Scottish.\nHypothesis rule5 : WearKilt -> Scottish /\\ Married.\nHypothesis rule6 : Scottish -> WearKilt.\n\nLemma NoMember : False.\ntauto.\nQed.\n\nEnd club.\n\nTheorem tauto : (forall x : nat, P x) -> forall y : nat, P y.\ntauto.\nQed.\n\nTheorem tauto1 : A -> A.\ntauto.\nQed.\n\nTheorem tauto2 : (A -> B -> C) -> (A -> B) -> A -> C.\ntauto.\nQed.\n\nTheorem a : forall (x0 : A \\/ B) (x1 : B /\\ C), A -> B.\ntauto.\nQed.\n\nTheorem a2 : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem a4 : ~ A -> ~ A.\ntauto.\nQed.\n\nTheorem e2 : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\nTheorem e4 : ~ ~ (A \\/ B -> A \\/ B).\ntauto.\nQed.\n\nTheorem y0 :\n forall (x0 : A) (x1 : ~ A) (x2 : A -> B) (x3 : A \\/ B) (x4 : A /\\ B),\n A -> False.\ntauto.\nQed.\n\nTheorem y1 : forall x0 : (A /\\ B) /\\ C, B.\ntauto.\nQed.\n\nTheorem y2 : forall (x0 : A) (x1 : B), C \\/ B.\ntauto.\nQed.\n\nTheorem y3 : forall x0 : A /\\ B, B /\\ A.\ntauto.\nQed.\n\nTheorem y5 : forall x0 : A \\/ B, B \\/ A.\ntauto.\nQed.\n\nTheorem y6 : forall (x0 : A -> B) (x1 : A), B.\ntauto.\nQed.\n\n",
                "context_tokens": 728,
                "proof_start_offset": 4053,
                "proof_end_offset": 4125,
                "proof": "Theorem y7 : forall (x0 : A /\\ B -> C) (x1 : B) (x2 : A), C.\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem y7 : forall (x0 : A /\\ B -> C) (x1 : B) (x2 : A), C.\ntauto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": "\n(*  A private club has the following rules :\n *\n * . rule 1 : Every non-scottish member wears red socks\n * . rule 2 : Every member wears a kilt or doesn't wear red socks\n * . rule 3 : The married members don't go out on sunday\n * . rule 4 : A member goes out on sunday if and only if he is scottish\n * . rule 5 : Every member who wears a kilt is scottish and married\n * . rule 6 : Every scottish member wears a kilt\n *\n *  Actually, no one can be accepted!\n *)\n\nSection club.\n\nVariable Scottish RedSocks WearKilt Married GoOutSunday : Prop.\n\nHypothesis rule1 : ~ Scottish -> RedSocks.\nHypothesis rule2 : WearKilt \\/ ~ RedSocks.\nHypothesis rule3 : Married -> ~ GoOutSunday.\nHypothesis rule4 : GoOutSunday <-> Scottish.\nHypothesis rule5 : WearKilt -> Scottish /\\ Married.\nHypothesis rule6 : Scottish -> WearKilt.\n\nLemma NoMember : False.\ntauto.\nQed.\n\nEnd club.\n\nTheorem tauto : (forall x : nat, P x) -> forall y : nat, P y.\ntauto.\nQed.\n\nTheorem tauto1 : A -> A.\ntauto.\nQed.\n\nTheorem tauto2 : (A -> B -> C) -> (A -> B) -> A -> C.\ntauto.\nQed.\n\nTheorem a : forall (x0 : A \\/ B) (x1 : B /\\ C), A -> B.\ntauto.\nQed.\n\nTheorem a2 : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem a4 : ~ A -> ~ A.\ntauto.\nQed.\n\nTheorem e2 : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\nTheorem e4 : ~ ~ (A \\/ B -> A \\/ B).\ntauto.\nQed.\n\nTheorem y0 :\n forall (x0 : A) (x1 : ~ A) (x2 : A -> B) (x3 : A \\/ B) (x4 : A /\\ B),\n A -> False.\ntauto.\nQed.\n\nTheorem y1 : forall x0 : (A /\\ B) /\\ C, B.\ntauto.\nQed.\n\nTheorem y2 : forall (x0 : A) (x1 : B), C \\/ B.\ntauto.\nQed.\n\nTheorem y3 : forall x0 : A /\\ B, B /\\ A.\ntauto.\nQed.\n\nTheorem y5 : forall x0 : A \\/ B, B \\/ A.\ntauto.\nQed.\n\nTheorem y6 : forall (x0 : A -> B) (x1 : A), B.\ntauto.\nQed.\n\nTheorem y7 : forall (x0 : A /\\ B -> C) (x1 : B) (x2 : A), C.\ntauto.\nQed.\n\n",
                "context_tokens": 734,
                "proof_start_offset": 4127,
                "proof_end_offset": 4190,
                "proof": "Theorem y8 : forall (x0 : A \\/ B -> C) (x1 : A), C.\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem y8 : forall (x0 : A \\/ B -> C) (x1 : A), C.\ntauto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": "s red socks\n * . rule 2 : Every member wears a kilt or doesn't wear red socks\n * . rule 3 : The married members don't go out on sunday\n * . rule 4 : A member goes out on sunday if and only if he is scottish\n * . rule 5 : Every member who wears a kilt is scottish and married\n * . rule 6 : Every scottish member wears a kilt\n *\n *  Actually, no one can be accepted!\n *)\n\nSection club.\n\nVariable Scottish RedSocks WearKilt Married GoOutSunday : Prop.\n\nHypothesis rule1 : ~ Scottish -> RedSocks.\nHypothesis rule2 : WearKilt \\/ ~ RedSocks.\nHypothesis rule3 : Married -> ~ GoOutSunday.\nHypothesis rule4 : GoOutSunday <-> Scottish.\nHypothesis rule5 : WearKilt -> Scottish /\\ Married.\nHypothesis rule6 : Scottish -> WearKilt.\n\nLemma NoMember : False.\ntauto.\nQed.\n\nEnd club.\n\nTheorem tauto : (forall x : nat, P x) -> forall y : nat, P y.\ntauto.\nQed.\n\nTheorem tauto1 : A -> A.\ntauto.\nQed.\n\nTheorem tauto2 : (A -> B -> C) -> (A -> B) -> A -> C.\ntauto.\nQed.\n\nTheorem a : forall (x0 : A \\/ B) (x1 : B /\\ C), A -> B.\ntauto.\nQed.\n\nTheorem a2 : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem a4 : ~ A -> ~ A.\ntauto.\nQed.\n\nTheorem e2 : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\nTheorem e4 : ~ ~ (A \\/ B -> A \\/ B).\ntauto.\nQed.\n\nTheorem y0 :\n forall (x0 : A) (x1 : ~ A) (x2 : A -> B) (x3 : A \\/ B) (x4 : A /\\ B),\n A -> False.\ntauto.\nQed.\n\nTheorem y1 : forall x0 : (A /\\ B) /\\ C, B.\ntauto.\nQed.\n\nTheorem y2 : forall (x0 : A) (x1 : B), C \\/ B.\ntauto.\nQed.\n\nTheorem y3 : forall x0 : A /\\ B, B /\\ A.\ntauto.\nQed.\n\nTheorem y5 : forall x0 : A \\/ B, B \\/ A.\ntauto.\nQed.\n\nTheorem y6 : forall (x0 : A -> B) (x1 : A), B.\ntauto.\nQed.\n\nTheorem y7 : forall (x0 : A /\\ B -> C) (x1 : B) (x2 : A), C.\ntauto.\nQed.\n\nTheorem y8 : forall (x0 : A \\/ B -> C) (x1 : A), C.\ntauto.\nQed.\n\n",
                "context_tokens": 734,
                "proof_start_offset": 4192,
                "proof_end_offset": 4255,
                "proof": "Theorem y9 : forall (x0 : A \\/ B -> C) (x1 : B), C.\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem y9 : forall (x0 : A \\/ B -> C) (x1 : B), C.\ntauto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_tauto.v",
                "context": " rule 3 : The married members don't go out on sunday\n * . rule 4 : A member goes out on sunday if and only if he is scottish\n * . rule 5 : Every member who wears a kilt is scottish and married\n * . rule 6 : Every scottish member wears a kilt\n *\n *  Actually, no one can be accepted!\n *)\n\nSection club.\n\nVariable Scottish RedSocks WearKilt Married GoOutSunday : Prop.\n\nHypothesis rule1 : ~ Scottish -> RedSocks.\nHypothesis rule2 : WearKilt \\/ ~ RedSocks.\nHypothesis rule3 : Married -> ~ GoOutSunday.\nHypothesis rule4 : GoOutSunday <-> Scottish.\nHypothesis rule5 : WearKilt -> Scottish /\\ Married.\nHypothesis rule6 : Scottish -> WearKilt.\n\nLemma NoMember : False.\ntauto.\nQed.\n\nEnd club.\n\nTheorem tauto : (forall x : nat, P x) -> forall y : nat, P y.\ntauto.\nQed.\n\nTheorem tauto1 : A -> A.\ntauto.\nQed.\n\nTheorem tauto2 : (A -> B -> C) -> (A -> B) -> A -> C.\ntauto.\nQed.\n\nTheorem a : forall (x0 : A \\/ B) (x1 : B /\\ C), A -> B.\ntauto.\nQed.\n\nTheorem a2 : (A -> B /\\ C) -> (A -> B) \\/ (A -> C).\ntauto.\nQed.\n\nTheorem a4 : ~ A -> ~ A.\ntauto.\nQed.\n\nTheorem e2 : ~ ~ (A \\/ ~ A).\ntauto.\nQed.\n\nTheorem e4 : ~ ~ (A \\/ B -> A \\/ B).\ntauto.\nQed.\n\nTheorem y0 :\n forall (x0 : A) (x1 : ~ A) (x2 : A -> B) (x3 : A \\/ B) (x4 : A /\\ B),\n A -> False.\ntauto.\nQed.\n\nTheorem y1 : forall x0 : (A /\\ B) /\\ C, B.\ntauto.\nQed.\n\nTheorem y2 : forall (x0 : A) (x1 : B), C \\/ B.\ntauto.\nQed.\n\nTheorem y3 : forall x0 : A /\\ B, B /\\ A.\ntauto.\nQed.\n\nTheorem y5 : forall x0 : A \\/ B, B \\/ A.\ntauto.\nQed.\n\nTheorem y6 : forall (x0 : A -> B) (x1 : A), B.\ntauto.\nQed.\n\nTheorem y7 : forall (x0 : A /\\ B -> C) (x1 : B) (x2 : A), C.\ntauto.\nQed.\n\nTheorem y8 : forall (x0 : A \\/ B -> C) (x1 : A), C.\ntauto.\nQed.\n\nTheorem y9 : forall (x0 : A \\/ B -> C) (x1 : B), C.\ntauto.\nQed.\n\n",
                "context_tokens": 732,
                "proof_start_offset": 4257,
                "proof_end_offset": 4323,
                "proof": "Theorem y10 : forall (x0 : (A -> B) -> C) (x1 : B), C.\nProof.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem y10 : forall (x0 : (A -> B) -> C) (x1 : B), C.\ntauto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Ack.v",
                "context": "s of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Ack.v                                   *)\n(****************************************************************************)\n\n\nInductive Ack : nat -> nat -> nat -> Prop :=\n  | AckO : forall n : nat, Ack 0 n (S n)\n  | AcknO : forall n p : nat, Ack n 1 p -> Ack (S n) 0 p\n  | AckSS :\n      forall n m p q : nat, Ack (S n) m q -> Ack n q p -> Ack (S n) (S m) p.\n\nHint Resolve AckO AcknO.\n\n",
                "context_tokens": 377,
                "proof_start_offset": 2468,
                "proof_end_offset": 2722,
                "proof": "Goal forall n m : nat, {p : nat | Ack n m p}.\nProof.\nsimple induction n.\nintro m; exists (S m); auto.\nsimple induction m.\nelim (H 1); intros.\nexists x; auto.\nintros m' H'; elim H'; intros.\nelim (H x); intros.\nexists x0.\napply AckSS with x; auto.\nSave Ackermann.",
                "end_command": "Save Ackermann.",
                "generated_proofs": [
                    {
                        "proof": "Goal forall n m : nat, {p : nat | Ack n m p}.\nintros n m p.\nelim p.\nintros n0 H1.\nelim H1.\nintros n1 H2.\nelim H1.\nintros n2 H3.\nelim H1.\nintros n3 H4.\nelim H4.\nintros n4 H5.\nelim H5.\nintros n4 H5.\nelim H5.\nintros n5 H6.\nelim H6.\nintros n4 H6.\nelim H6.\nintros n5 H6.\nelim H6.\nintros n5 H6.\nelim H6.\nintros n6 H7.\nelim H7.\nintros n6 H7.\nelim H7.\nintros n6 H7.\nelim H7.\nintros n6 H7.\nelim H7.\nintros n6 H7.\nelim H7.\nintros n6 H7.\nelim H7.\nintros n6 H7.\nelim H7.\nintros n6 H7.\nelim H7.\nintros n6 H7.\nelim H7.\nintros n6 H7.\nelim H7.\nintros n6 H7Save Ackermann.",
                        "correct": false,
                        "error_msg": "File \"./Ack.v\", line 44, characters 0-12:\nError: No product even after head-reduction.\n\nmake[2]: *** [Makefile.coq:663: Ack.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Ack.v",
                "context": " not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Ack.v                                   *)\n(****************************************************************************)\n\n\nInductive Ack : nat -> nat -> nat -> Prop :=\n  | AckO : forall n : nat, Ack 0 n (S n)\n  | AcknO : forall n p : nat, Ack n 1 p -> Ack (S n) 0 p\n  | AckSS :\n      forall n m p q : nat, Ack (S n) m q -> Ack n q p -> Ack (S n) (S m) p.\n\nHint Resolve AckO AcknO.\n\nGoal forall n m : nat, {p : nat | Ack n m p}.\nsimple induction n.\nintro m; exists (S m); auto.\nsimple induction m.\nelim (H 1); intros.\nexists x; auto.\nintros m' H'; elim H'; intros.\nelim (H x); intros.\nexists x0.\napply AckSS with x; auto.\nSave Ackermann.\n\n(* Functional definition of Ackermann :\n (ack 0 n) = (S n)\n (ack (S n) 0) = (ack n (S 0))\n (ack (S n) (S m)) = (ack n (ack (S n) m)) *)\n \nDefinition ack (n : nat) :=\n  (fix F (n0 : nat) : nat -> nat :=\n     match n0 with\n     | O => S\n     | S n1 =>\n         fun m : nat =>\n         (fix F0 (n2 : nat) : nat :=\n            match n2 with\n            | O => F n1 1\n            | S n3 => F n1 (F0 n3)\n            end) m\n     end) n. \n(* 0 *) \n(* (S n) *)  \n(* 0 *) \n(* S m *) \n\n",
                "context_tokens": 519,
                "proof_start_offset": 3199,
                "proof_end_offset": 3373,
                "proof": "Goal forall n m p : nat, Ack n m p -> p = ack n m :>nat.\nProof.\nsimple induction 1; simpl in |- *; trivial.\nintros n1 m1 p1 q1 ASn Eq An Ep; elim Eq; elim Ep; trivial.\nSave ack_Ack.",
                "end_command": "Save ack_Ack.",
                "generated_proofs": [
                    {
                        "proof": "Goal forall n m p : nat, Ack n m p -> p = ack n m :>nat.\nintros n m p H; elim H; intros.\nexists x; auto.\nSave ack_Ack.",
                        "correct": false,
                        "error_msg": "File \"./Ack.v\", line 79, characters 7-8:\nError: Ltac call to \"exists (ne_bindings_list)\" failed.\n       The reference x was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Ack.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Ack.v",
                "context": "               *)\n\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                  Ack.v                                   *)\n(****************************************************************************)\n\n\nInductive Ack : nat -> nat -> nat -> Prop :=\n  | AckO : forall n : nat, Ack 0 n (S n)\n  | AcknO : forall n p : nat, Ack n 1 p -> Ack (S n) 0 p\n  | AckSS :\n      forall n m p q : nat, Ack (S n) m q -> Ack n q p -> Ack (S n) (S m) p.\n\nHint Resolve AckO AcknO.\n\nGoal forall n m : nat, {p : nat | Ack n m p}.\nsimple induction n.\nintro m; exists (S m); auto.\nsimple induction m.\nelim (H 1); intros.\nexists x; auto.\nintros m' H'; elim H'; intros.\nelim (H x); intros.\nexists x0.\napply AckSS with x; auto.\nSave Ackermann.\n\n(* Functional definition of Ackermann :\n (ack 0 n) = (S n)\n (ack (S n) 0) = (ack n (S 0))\n (ack (S n) (S m)) = (ack n (ack (S n) m)) *)\n \nDefinition ack (n : nat) :=\n  (fix F (n0 : nat) : nat -> nat :=\n     match n0 with\n     | O => S\n     | S n1 =>\n         fun m : nat =>\n         (fix F0 (n2 : nat) : nat :=\n            match n2 with\n            | O => F n1 1\n            | S n3 => F n1 (F0 n3)\n            end) m\n     end) n. \n(* 0 *) \n(* (S n) *)  \n(* 0 *) \n(* S m *) \n\nGoal forall n m p : nat, Ack n m p -> p = ack n m :>nat.\nsimple induction 1; simpl in |- *; trivial.\nintros n1 m1 p1 q1 ASn Eq An Ep; elim Eq; elim Ep; trivial.\nSave ack_Ack.\n\n",
                "context_tokens": 554,
                "proof_start_offset": 3375,
                "proof_end_offset": 3606,
                "proof": "Goal forall n m : nat, Ack n m (ack n m).\nProof.\nsimple induction n.\nsimpl in |- *; auto.\nintros n' H; simple induction m.\nsimpl in |- *; auto.\nintros m' H'; apply AckSS with (ack (S n') m'); auto.\napply (H (ack (S n') m')).\nSave Ack_ack.",
                "end_command": "Save Ack_ack.",
                "generated_proofs": [
                    {
                        "proof": "Goal forall n m : nat, Ack n m (ack n m).\nsimple induction n; simpl in |- *; trivial.\nintros n1 m1 p1 ASn Eq; elim Eq; trivial.\nSave Ack_ack.",
                        "correct": false,
                        "error_msg": "File \"./Ack.v\", line 84, characters 0-22:\nError: No product even after head-reduction.\n\nmake[2]: *** [Makefile.coq:663: Ack.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_AutoRewrite.v",
                "context": "(* This program is free software; you can redistribute it and/or      *)\n(* modify it under the terms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\nRequire Import Arith.\nRequire Import Omega.\n\nSection Ackermann.\n\nVariable Ack : nat -> nat -> nat.\n\nAxiom Ack0 : forall m : nat, Ack 0 m = S m.\nAxiom Ack1 : forall n : nat, Ack (S n) 0 = Ack n 1.\nAxiom Ack2 : forall n m : nat, Ack (S n) (S m) = Ack n (Ack (S n) m).\n\nHint Rewrite Ack0 Ack1 Ack2 : base0.\n\n",
                "context_tokens": 307,
                "proof_start_offset": 1329,
                "proof_end_offset": 1418,
                "proof": "Lemma ResAck0 : Ack 3 2 = 29.\nProof.\nautorewrite with base0 using try reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma ResAck0 : Ack 3 2 = 29.\nreflexivity.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Demo_AutoRewrite.v\", line 31, characters 0-11:\nError: In environment\nAck : nat -> nat -> nat\nUnable to unify \"29\" with \"Ack 3 2\".\n\nmake[2]: *** [Makefile.coq:663: Demo_AutoRewrite.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_AutoRewrite.v",
                "context": "(* This program is free software; you can redistribute it and/or      *)\n(* modify it under the terms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\nRequire Import Arith.\nRequire Import Omega.\n\nSection Ackermann.\n\nVariable Ack : nat -> nat -> nat.\n\nAxiom Ack0 : forall m : nat, Ack 0 m = S m.\nAxiom Ack1 : forall n : nat, Ack (S n) 0 = Ack n 1.\nAxiom Ack2 : forall n m : nat, Ack (S n) (S m) = Ack n (Ack (S n) m).\n\nHint Rewrite Ack0 Ack1 Ack2 : base0.\n\nLemma ResAck0 : Ack 3 2 = 29.\nProof.\n  autorewrite with base0 using try reflexivity.\nQed.\n\nEnd Ackermann.\n\nSection McCarthy.\n\nVariable g : nat -> nat -> nat.\n\nAxiom g0 : forall m : nat, g 0 m = m.\nAxiom g1 : forall n m : nat, n > 0 -> m > 100 -> g n m = g (pred n) (m - 10).\nAxiom g2 : forall n m : nat, n > 0 -> m <= 100 -> g n m = g (S n) (m + 11).\n\nHint Rewrite g0 g1 g2 using omega : base1.\n\n",
                "context_tokens": 462,
                "proof_start_offset": 1725,
                "proof_end_offset": 1826,
                "proof": "Lemma Resg0 : g 1 110 = 100.\nProof.\nautorewrite with base1 using reflexivity || simpl in |- *.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma Resg0 : g 1 110 = 100.\nProof.\n  intros.\n  rewrite g0.\n  rewrite g0.\n  rewrite g1.\n  rewrite g1.\n  reflexivity.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Demo_AutoRewrite.v\", line 50, characters 2-12:\nError: Found no subterm matching \"g 0 ?M1235\" in the current goal.\n\nmake[2]: *** [Makefile.coq:663: Demo_AutoRewrite.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Demo_AutoRewrite.v",
                "context": "(* This program is free software; you can redistribute it and/or      *)\n(* modify it under the terms of the GNU Lesser General Public License *)\n(* as published by the Free Software Foundation; either version 2.1   *)\n(* of the License, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\n\nRequire Import Arith.\nRequire Import Omega.\n\nSection Ackermann.\n\nVariable Ack : nat -> nat -> nat.\n\nAxiom Ack0 : forall m : nat, Ack 0 m = S m.\nAxiom Ack1 : forall n : nat, Ack (S n) 0 = Ack n 1.\nAxiom Ack2 : forall n m : nat, Ack (S n) (S m) = Ack n (Ack (S n) m).\n\nHint Rewrite Ack0 Ack1 Ack2 : base0.\n\nLemma ResAck0 : Ack 3 2 = 29.\nProof.\n  autorewrite with base0 using try reflexivity.\nQed.\n\nEnd Ackermann.\n\nSection McCarthy.\n\nVariable g : nat -> nat -> nat.\n\nAxiom g0 : forall m : nat, g 0 m = m.\nAxiom g1 : forall n m : nat, n > 0 -> m > 100 -> g n m = g (pred n) (m - 10).\nAxiom g2 : forall n m : nat, n > 0 -> m <= 100 -> g n m = g (S n) (m + 11).\n\nHint Rewrite g0 g1 g2 using omega : base1.\n\nLemma Resg0 : g 1 110 = 100.\nProof.\n  autorewrite with base1 using reflexivity || simpl in |- *.\nQed.\n\n",
                "context_tokens": 493,
                "proof_start_offset": 1828,
                "proof_end_offset": 1927,
                "proof": "Lemma Resg1 : g 1 95 = 91.\nProof.\nautorewrite with base1 using reflexivity || simpl in |- *.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma Resg1 : g 1 95 = 91.\nProof.\n  autorewrite with base1 using reflexivity || simpl in |- *.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": "ense, or (at your option) any later version.             *)\n(*                                                                    *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\nSet Asymmetric Patterns.\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                Sorting.v                                 *)\n(****************************************************************************)\n\n(* These sorting examples have first been compiled by P. Manoury using the  *)\n(* ProPre tool to build recursive functions by cases                        *)\n\n(* == Quelques fonctions utiles == *)\n\n(* Inductive Set bool := true : bool | false : bool. *)\n\nDefinition si (X : Set) (b : bool) (x y : X) :=\n  match b with\n  | true => x\n  | _ => y\n  end.\n\n",
                "context_tokens": 352,
                "proof_start_offset": 2584,
                "proof_end_offset": 2664,
                "proof": "Lemma si_eq1 : forall (X : Set) (x y : X), si X true x y = x.\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma si_eq1 : forall (X : Set) (x y : X), si X true x y = x.\nintros.\nelim H.\nintros.\napply H.\napply H.\napply H.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0.\napply H0Qed.",
                        "correct": false,
                        "error_msg": "File \"./Sorting.v\", line 50, characters 5-6:\nError: The reference H was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Sorting.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": "                                                *)\n(* This program is distributed in the hope that it will be useful,    *)\n(* but WITHOUT ANY WARRANTY; without even the implied warranty of     *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *)\n(* GNU General Public License for more details.                       *)\n(*                                                                    *)\n(* You should have received a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\nSet Asymmetric Patterns.\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                Sorting.v                                 *)\n(****************************************************************************)\n\n(* These sorting examples have first been compiled by P. Manoury using the  *)\n(* ProPre tool to build recursive functions by cases                        *)\n\n(* == Quelques fonctions utiles == *)\n\n(* Inductive Set bool := true : bool | false : bool. *)\n\nDefinition si (X : Set) (b : bool) (x y : X) :=\n  match b with\n  | true => x\n  | _ => y\n  end.\n\nLemma si_eq1 : forall (X : Set) (x y : X), si X true x y = x.\nProof.\n auto.\nQed.\n\n",
                "context_tokens": 373,
                "proof_start_offset": 2666,
                "proof_end_offset": 2747,
                "proof": "Lemma si_eq2 : forall (X : Set) (x y : X), si X false x y = y.\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma si_eq2 : forall (X : Set) (x y : X), si X false x y = y.\nProof.\n auto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": "eceived a copy of the GNU Lesser General Public   *)\n(* License along with this program; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\nSet Asymmetric Patterns.\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                Sorting.v                                 *)\n(****************************************************************************)\n\n(* These sorting examples have first been compiled by P. Manoury using the  *)\n(* ProPre tool to build recursive functions by cases                        *)\n\n(* == Quelques fonctions utiles == *)\n\n(* Inductive Set bool := true : bool | false : bool. *)\n\nDefinition si (X : Set) (b : bool) (x y : X) :=\n  match b with\n  | true => x\n  | _ => y\n  end.\n\nLemma si_eq1 : forall (X : Set) (x y : X), si X true x y = x.\nProof.\n auto.\nQed.\n\nLemma si_eq2 : forall (X : Set) (x y : X), si X false x y = y.\nProof.\n auto.\nQed.\n\n\n(* Inductive Set nat : O:nat | S:nat->nat. *)\n\nFixpoint egal_nat (n : nat) : nat -> bool :=\n  fun m : nat =>\n  match n, m with\n  | O, O => true\n  | S n, S m => egal_nat n m\n  | _, _ => false\n  end.\n\n\nFixpoint inf_egal (n : nat) : nat -> bool :=\n  fun m : nat =>\n  match n, m with\n  | O, m => true\n  | S n, O => false\n  | S n, S m => inf_egal n m\n  end.\n\n\n",
                "context_tokens": 475,
                "proof_start_offset": 3105,
                "proof_end_offset": 3181,
                "proof": "Lemma inf_egal_eq1 : forall m : nat, inf_egal 0 m = true.\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma inf_egal_eq1 : forall m : nat, inf_egal 0 m = true.\nProof.\n auto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": "rogram; if not, write to the Free         *)\n(* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\nSet Asymmetric Patterns.\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                Sorting.v                                 *)\n(****************************************************************************)\n\n(* These sorting examples have first been compiled by P. Manoury using the  *)\n(* ProPre tool to build recursive functions by cases                        *)\n\n(* == Quelques fonctions utiles == *)\n\n(* Inductive Set bool := true : bool | false : bool. *)\n\nDefinition si (X : Set) (b : bool) (x y : X) :=\n  match b with\n  | true => x\n  | _ => y\n  end.\n\nLemma si_eq1 : forall (X : Set) (x y : X), si X true x y = x.\nProof.\n auto.\nQed.\n\nLemma si_eq2 : forall (X : Set) (x y : X), si X false x y = y.\nProof.\n auto.\nQed.\n\n\n(* Inductive Set nat : O:nat | S:nat->nat. *)\n\nFixpoint egal_nat (n : nat) : nat -> bool :=\n  fun m : nat =>\n  match n, m with\n  | O, O => true\n  | S n, S m => egal_nat n m\n  | _, _ => false\n  end.\n\n\nFixpoint inf_egal (n : nat) : nat -> bool :=\n  fun m : nat =>\n  match n, m with\n  | O, m => true\n  | S n, O => false\n  | S n, S m => inf_egal n m\n  end.\n\n\nLemma inf_egal_eq1 : forall m : nat, inf_egal 0 m = true.\nProof.\n auto.\nQed.\n\n",
                "context_tokens": 490,
                "proof_start_offset": 3183,
                "proof_end_offset": 3264,
                "proof": "Lemma inf_egal_eq2 : forall n : nat, inf_egal (S n) 0 = false.\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma inf_egal_eq2 : forall n : nat, inf_egal (S n) 0 = false.\nProof.\n auto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": " Floor, Boston, MA *)\n(* 02110-1301 USA                                                     *)\n\nSet Asymmetric Patterns.\n\n(* Contribution to the Coq Library   V6.3 (July 1999)                    *)\n\n(****************************************************************************)\n(*                 The Calculus of Inductive Constructions                  *)\n(*                                                                          *)\n(*                                Projet Coq                                *)\n(*                                                                          *)\n(*                     INRIA                        ENS-CNRS                *)\n(*              Rocquencourt                        Lyon                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                Sorting.v                                 *)\n(****************************************************************************)\n\n(* These sorting examples have first been compiled by P. Manoury using the  *)\n(* ProPre tool to build recursive functions by cases                        *)\n\n(* == Quelques fonctions utiles == *)\n\n(* Inductive Set bool := true : bool | false : bool. *)\n\nDefinition si (X : Set) (b : bool) (x y : X) :=\n  match b with\n  | true => x\n  | _ => y\n  end.\n\nLemma si_eq1 : forall (X : Set) (x y : X), si X true x y = x.\nProof.\n auto.\nQed.\n\nLemma si_eq2 : forall (X : Set) (x y : X), si X false x y = y.\nProof.\n auto.\nQed.\n\n\n(* Inductive Set nat : O:nat | S:nat->nat. *)\n\nFixpoint egal_nat (n : nat) : nat -> bool :=\n  fun m : nat =>\n  match n, m with\n  | O, O => true\n  | S n, S m => egal_nat n m\n  | _, _ => false\n  end.\n\n\nFixpoint inf_egal (n : nat) : nat -> bool :=\n  fun m : nat =>\n  match n, m with\n  | O, m => true\n  | S n, O => false\n  | S n, S m => inf_egal n m\n  end.\n\n\nLemma inf_egal_eq1 : forall m : nat, inf_egal 0 m = true.\nProof.\n auto.\nQed.\n\nLemma inf_egal_eq2 : forall n : nat, inf_egal (S n) 0 = false.\nProof.\n auto.\nQed. \n\n",
                "context_tokens": 501,
                "proof_start_offset": 3267,
                "proof_end_offset": 3361,
                "proof": "Lemma inf_egal_eq3 : forall n m : nat, inf_egal (S n) (S m) = inf_egal n m.\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma inf_egal_eq3 : forall n m : nat, inf_egal (S n) (S m) = inf_egal n m.\nProof.\n auto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": "n                    *)\n(*                                                                          *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                Sorting.v                                 *)\n(****************************************************************************)\n\n(* These sorting examples have first been compiled by P. Manoury using the  *)\n(* ProPre tool to build recursive functions by cases                        *)\n\n(* == Quelques fonctions utiles == *)\n\n(* Inductive Set bool := true : bool | false : bool. *)\n\nDefinition si (X : Set) (b : bool) (x y : X) :=\n  match b with\n  | true => x\n  | _ => y\n  end.\n\nLemma si_eq1 : forall (X : Set) (x y : X), si X true x y = x.\nProof.\n auto.\nQed.\n\nLemma si_eq2 : forall (X : Set) (x y : X), si X false x y = y.\nProof.\n auto.\nQed.\n\n\n(* Inductive Set nat : O:nat | S:nat->nat. *)\n\nFixpoint egal_nat (n : nat) : nat -> bool :=\n  fun m : nat =>\n  match n, m with\n  | O, O => true\n  | S n, S m => egal_nat n m\n  | _, _ => false\n  end.\n\n\nFixpoint inf_egal (n : nat) : nat -> bool :=\n  fun m : nat =>\n  match n, m with\n  | O, m => true\n  | S n, O => false\n  | S n, S m => inf_egal n m\n  end.\n\n\nLemma inf_egal_eq1 : forall m : nat, inf_egal 0 m = true.\nProof.\n auto.\nQed.\n\nLemma inf_egal_eq2 : forall n : nat, inf_egal (S n) 0 = false.\nProof.\n auto.\nQed. \n\nLemma inf_egal_eq3 : forall n m : nat, inf_egal (S n) (S m) = inf_egal n m.\nProof.\n auto.\nQed. \n\nInductive list (X : Set) : Set :=\n  | Nil : list X\n  | Cons : X -> list X -> list X.\n\nDefinition cdr (X : Set) (l : list X) :=\n  match l with\n  | Nil => Nil X\n  | Cons _ xs => xs\n  end.\n\nFixpoint length (X : Set) (l : list X) {struct l} : nat :=\n  match l with\n  | Nil => 0\n  | Cons _ xs => S (length X xs)\n  end.\n\n(* append x y = yx *)\nFixpoint append (X : Set) (ys xs : list X) {struct xs} : \n list X :=\n  match xs with\n  | Nil => ys\n  | Cons x xs' => Cons X x (append X ys xs')\n  end.\n\n(* == Proprietes d'un tri == *)\n\nFixpoint sorted (l : list nat) : Prop :=\n  match l with\n  | Cons n (Cons m x as l) => inf_egal n m = true /\\ sorted l\n  | _ => True\n  end.\n\n",
                "context_tokens": 696,
                "proof_start_offset": 4026,
                "proof_end_offset": 4088,
                "proof": "Lemma sorted_eq1 : sorted (Nil nat) = True.\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma sorted_eq1 : sorted (Nil nat) = True.\nProof.\n auto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": "        *)\n(*                                Coq V5.10                                 *)\n(*                              Nov 25th 1994                               *)\n(*                                                                          *)\n(****************************************************************************)\n(*                                Sorting.v                                 *)\n(****************************************************************************)\n\n(* These sorting examples have first been compiled by P. Manoury using the  *)\n(* ProPre tool to build recursive functions by cases                        *)\n\n(* == Quelques fonctions utiles == *)\n\n(* Inductive Set bool := true : bool | false : bool. *)\n\nDefinition si (X : Set) (b : bool) (x y : X) :=\n  match b with\n  | true => x\n  | _ => y\n  end.\n\nLemma si_eq1 : forall (X : Set) (x y : X), si X true x y = x.\nProof.\n auto.\nQed.\n\nLemma si_eq2 : forall (X : Set) (x y : X), si X false x y = y.\nProof.\n auto.\nQed.\n\n\n(* Inductive Set nat : O:nat | S:nat->nat. *)\n\nFixpoint egal_nat (n : nat) : nat -> bool :=\n  fun m : nat =>\n  match n, m with\n  | O, O => true\n  | S n, S m => egal_nat n m\n  | _, _ => false\n  end.\n\n\nFixpoint inf_egal (n : nat) : nat -> bool :=\n  fun m : nat =>\n  match n, m with\n  | O, m => true\n  | S n, O => false\n  | S n, S m => inf_egal n m\n  end.\n\n\nLemma inf_egal_eq1 : forall m : nat, inf_egal 0 m = true.\nProof.\n auto.\nQed.\n\nLemma inf_egal_eq2 : forall n : nat, inf_egal (S n) 0 = false.\nProof.\n auto.\nQed. \n\nLemma inf_egal_eq3 : forall n m : nat, inf_egal (S n) (S m) = inf_egal n m.\nProof.\n auto.\nQed. \n\nInductive list (X : Set) : Set :=\n  | Nil : list X\n  | Cons : X -> list X -> list X.\n\nDefinition cdr (X : Set) (l : list X) :=\n  match l with\n  | Nil => Nil X\n  | Cons _ xs => xs\n  end.\n\nFixpoint length (X : Set) (l : list X) {struct l} : nat :=\n  match l with\n  | Nil => 0\n  | Cons _ xs => S (length X xs)\n  end.\n\n(* append x y = yx *)\nFixpoint append (X : Set) (ys xs : list X) {struct xs} : \n list X :=\n  match xs with\n  | Nil => ys\n  | Cons x xs' => Cons X x (append X ys xs')\n  end.\n\n(* == Proprietes d'un tri == *)\n\nFixpoint sorted (l : list nat) : Prop :=\n  match l with\n  | Cons n (Cons m x as l) => inf_egal n m = true /\\ sorted l\n  | _ => True\n  end.\n\nLemma sorted_eq1 : sorted (Nil nat) = True.\nProof.\n auto.\nQed.\n\n",
                "context_tokens": 716,
                "proof_start_offset": 4090,
                "proof_end_offset": 4181,
                "proof": "Lemma sorted_eq2 : forall n : nat, sorted (Cons nat n (Nil nat)) = True.\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma sorted_eq2 : forall n : nat, sorted (Cons nat n (Nil nat)) = True.\nProof.\n auto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": "(* These sorting examples have first been compiled by P. Manoury using the  *)\n(* ProPre tool to build recursive functions by cases                        *)\n\n(* == Quelques fonctions utiles == *)\n\n(* Inductive Set bool := true : bool | false : bool. *)\n\nDefinition si (X : Set) (b : bool) (x y : X) :=\n  match b with\n  | true => x\n  | _ => y\n  end.\n\nLemma si_eq1 : forall (X : Set) (x y : X), si X true x y = x.\nProof.\n auto.\nQed.\n\nLemma si_eq2 : forall (X : Set) (x y : X), si X false x y = y.\nProof.\n auto.\nQed.\n\n\n(* Inductive Set nat : O:nat | S:nat->nat. *)\n\nFixpoint egal_nat (n : nat) : nat -> bool :=\n  fun m : nat =>\n  match n, m with\n  | O, O => true\n  | S n, S m => egal_nat n m\n  | _, _ => false\n  end.\n\n\nFixpoint inf_egal (n : nat) : nat -> bool :=\n  fun m : nat =>\n  match n, m with\n  | O, m => true\n  | S n, O => false\n  | S n, S m => inf_egal n m\n  end.\n\n\nLemma inf_egal_eq1 : forall m : nat, inf_egal 0 m = true.\nProof.\n auto.\nQed.\n\nLemma inf_egal_eq2 : forall n : nat, inf_egal (S n) 0 = false.\nProof.\n auto.\nQed. \n\nLemma inf_egal_eq3 : forall n m : nat, inf_egal (S n) (S m) = inf_egal n m.\nProof.\n auto.\nQed. \n\nInductive list (X : Set) : Set :=\n  | Nil : list X\n  | Cons : X -> list X -> list X.\n\nDefinition cdr (X : Set) (l : list X) :=\n  match l with\n  | Nil => Nil X\n  | Cons _ xs => xs\n  end.\n\nFixpoint length (X : Set) (l : list X) {struct l} : nat :=\n  match l with\n  | Nil => 0\n  | Cons _ xs => S (length X xs)\n  end.\n\n(* append x y = yx *)\nFixpoint append (X : Set) (ys xs : list X) {struct xs} : \n list X :=\n  match xs with\n  | Nil => ys\n  | Cons x xs' => Cons X x (append X ys xs')\n  end.\n\n(* == Proprietes d'un tri == *)\n\nFixpoint sorted (l : list nat) : Prop :=\n  match l with\n  | Cons n (Cons m x as l) => inf_egal n m = true /\\ sorted l\n  | _ => True\n  end.\n\nLemma sorted_eq1 : sorted (Nil nat) = True.\nProof.\n auto.\nQed.\n\nLemma sorted_eq2 : forall n : nat, sorted (Cons nat n (Nil nat)) = True.\nProof.\n auto.\nQed.\n\n",
                "context_tokens": 710,
                "proof_start_offset": 4183,
                "proof_end_offset": 4343,
                "proof": "Lemma sorted_eq3 : forall (n m : nat) (x : list nat), sorted (Cons nat n (Cons nat m x)) = (inf_egal n m = true /\\ sorted (Cons nat m x)).\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma sorted_eq3 : forall (n m : nat) (x : list nat), sorted (Cons nat n (Cons nat m x)) = (inf_egal n m = true /\\ sorted (Cons nat m x)).\nProof.\n auto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": "Lemma si_eq1 : forall (X : Set) (x y : X), si X true x y = x.\nProof.\n auto.\nQed.\n\nLemma si_eq2 : forall (X : Set) (x y : X), si X false x y = y.\nProof.\n auto.\nQed.\n\n\n(* Inductive Set nat : O:nat | S:nat->nat. *)\n\nFixpoint egal_nat (n : nat) : nat -> bool :=\n  fun m : nat =>\n  match n, m with\n  | O, O => true\n  | S n, S m => egal_nat n m\n  | _, _ => false\n  end.\n\n\nFixpoint inf_egal (n : nat) : nat -> bool :=\n  fun m : nat =>\n  match n, m with\n  | O, m => true\n  | S n, O => false\n  | S n, S m => inf_egal n m\n  end.\n\n\nLemma inf_egal_eq1 : forall m : nat, inf_egal 0 m = true.\nProof.\n auto.\nQed.\n\nLemma inf_egal_eq2 : forall n : nat, inf_egal (S n) 0 = false.\nProof.\n auto.\nQed. \n\nLemma inf_egal_eq3 : forall n m : nat, inf_egal (S n) (S m) = inf_egal n m.\nProof.\n auto.\nQed. \n\nInductive list (X : Set) : Set :=\n  | Nil : list X\n  | Cons : X -> list X -> list X.\n\nDefinition cdr (X : Set) (l : list X) :=\n  match l with\n  | Nil => Nil X\n  | Cons _ xs => xs\n  end.\n\nFixpoint length (X : Set) (l : list X) {struct l} : nat :=\n  match l with\n  | Nil => 0\n  | Cons _ xs => S (length X xs)\n  end.\n\n(* append x y = yx *)\nFixpoint append (X : Set) (ys xs : list X) {struct xs} : \n list X :=\n  match xs with\n  | Nil => ys\n  | Cons x xs' => Cons X x (append X ys xs')\n  end.\n\n(* == Proprietes d'un tri == *)\n\nFixpoint sorted (l : list nat) : Prop :=\n  match l with\n  | Cons n (Cons m x as l) => inf_egal n m = true /\\ sorted l\n  | _ => True\n  end.\n\nLemma sorted_eq1 : sorted (Nil nat) = True.\nProof.\n auto.\nQed.\n\nLemma sorted_eq2 : forall n : nat, sorted (Cons nat n (Nil nat)) = True.\nProof.\n auto.\nQed.\n\nLemma sorted_eq3 :\n forall (n m : nat) (x : list nat),\n sorted (Cons nat n (Cons nat m x)) =\n (inf_egal n m = true /\\ sorted (Cons nat m x)).\nProof.\n auto.\nQed.\n\nFixpoint nocc (n : nat) (l : list nat) {struct l} : nat :=\n  match l with\n  | Nil => 0\n  | Cons m x => si nat (egal_nat n m) (S (nocc n x)) (nocc n x)\n  end.\n\n",
                "context_tokens": 735,
                "proof_start_offset": 4504,
                "proof_end_offset": 4577,
                "proof": "Lemma nocc_eq1 : forall n : nat, nocc n (Nil nat) = 0.\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma nocc_eq1 : forall n : nat, nocc n (Nil nat) = 0.\nProof.\n auto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": "Proof.\n auto.\nQed.\n\n\n(* Inductive Set nat : O:nat | S:nat->nat. *)\n\nFixpoint egal_nat (n : nat) : nat -> bool :=\n  fun m : nat =>\n  match n, m with\n  | O, O => true\n  | S n, S m => egal_nat n m\n  | _, _ => false\n  end.\n\n\nFixpoint inf_egal (n : nat) : nat -> bool :=\n  fun m : nat =>\n  match n, m with\n  | O, m => true\n  | S n, O => false\n  | S n, S m => inf_egal n m\n  end.\n\n\nLemma inf_egal_eq1 : forall m : nat, inf_egal 0 m = true.\nProof.\n auto.\nQed.\n\nLemma inf_egal_eq2 : forall n : nat, inf_egal (S n) 0 = false.\nProof.\n auto.\nQed. \n\nLemma inf_egal_eq3 : forall n m : nat, inf_egal (S n) (S m) = inf_egal n m.\nProof.\n auto.\nQed. \n\nInductive list (X : Set) : Set :=\n  | Nil : list X\n  | Cons : X -> list X -> list X.\n\nDefinition cdr (X : Set) (l : list X) :=\n  match l with\n  | Nil => Nil X\n  | Cons _ xs => xs\n  end.\n\nFixpoint length (X : Set) (l : list X) {struct l} : nat :=\n  match l with\n  | Nil => 0\n  | Cons _ xs => S (length X xs)\n  end.\n\n(* append x y = yx *)\nFixpoint append (X : Set) (ys xs : list X) {struct xs} : \n list X :=\n  match xs with\n  | Nil => ys\n  | Cons x xs' => Cons X x (append X ys xs')\n  end.\n\n(* == Proprietes d'un tri == *)\n\nFixpoint sorted (l : list nat) : Prop :=\n  match l with\n  | Cons n (Cons m x as l) => inf_egal n m = true /\\ sorted l\n  | _ => True\n  end.\n\nLemma sorted_eq1 : sorted (Nil nat) = True.\nProof.\n auto.\nQed.\n\nLemma sorted_eq2 : forall n : nat, sorted (Cons nat n (Nil nat)) = True.\nProof.\n auto.\nQed.\n\nLemma sorted_eq3 :\n forall (n m : nat) (x : list nat),\n sorted (Cons nat n (Cons nat m x)) =\n (inf_egal n m = true /\\ sorted (Cons nat m x)).\nProof.\n auto.\nQed.\n\nFixpoint nocc (n : nat) (l : list nat) {struct l} : nat :=\n  match l with\n  | Nil => 0\n  | Cons m x => si nat (egal_nat n m) (S (nocc n x)) (nocc n x)\n  end.\n\nLemma nocc_eq1 : forall n : nat, nocc n (Nil nat) = 0.\nProof.\n auto.\nQed.\n\n",
                "context_tokens": 704,
                "proof_start_offset": 4579,
                "proof_end_offset": 4724,
                "proof": "Lemma nocc_eq2 : forall (n m : nat) (x : list nat), nocc n (Cons nat m x) = si nat (egal_nat n m) (S (nocc n x)) (nocc n x).\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma nocc_eq2 : forall (n m : nat) (x : list nat), nocc n (Cons nat m x) = si nat (egal_nat n m) (S (nocc n x)) (nocc n x).\nProof.\n auto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": " : nat =>\n  match n, m with\n  | O, O => true\n  | S n, S m => egal_nat n m\n  | _, _ => false\n  end.\n\n\nFixpoint inf_egal (n : nat) : nat -> bool :=\n  fun m : nat =>\n  match n, m with\n  | O, m => true\n  | S n, O => false\n  | S n, S m => inf_egal n m\n  end.\n\n\nLemma inf_egal_eq1 : forall m : nat, inf_egal 0 m = true.\nProof.\n auto.\nQed.\n\nLemma inf_egal_eq2 : forall n : nat, inf_egal (S n) 0 = false.\nProof.\n auto.\nQed. \n\nLemma inf_egal_eq3 : forall n m : nat, inf_egal (S n) (S m) = inf_egal n m.\nProof.\n auto.\nQed. \n\nInductive list (X : Set) : Set :=\n  | Nil : list X\n  | Cons : X -> list X -> list X.\n\nDefinition cdr (X : Set) (l : list X) :=\n  match l with\n  | Nil => Nil X\n  | Cons _ xs => xs\n  end.\n\nFixpoint length (X : Set) (l : list X) {struct l} : nat :=\n  match l with\n  | Nil => 0\n  | Cons _ xs => S (length X xs)\n  end.\n\n(* append x y = yx *)\nFixpoint append (X : Set) (ys xs : list X) {struct xs} : \n list X :=\n  match xs with\n  | Nil => ys\n  | Cons x xs' => Cons X x (append X ys xs')\n  end.\n\n(* == Proprietes d'un tri == *)\n\nFixpoint sorted (l : list nat) : Prop :=\n  match l with\n  | Cons n (Cons m x as l) => inf_egal n m = true /\\ sorted l\n  | _ => True\n  end.\n\nLemma sorted_eq1 : sorted (Nil nat) = True.\nProof.\n auto.\nQed.\n\nLemma sorted_eq2 : forall n : nat, sorted (Cons nat n (Nil nat)) = True.\nProof.\n auto.\nQed.\n\nLemma sorted_eq3 :\n forall (n m : nat) (x : list nat),\n sorted (Cons nat n (Cons nat m x)) =\n (inf_egal n m = true /\\ sorted (Cons nat m x)).\nProof.\n auto.\nQed.\n\nFixpoint nocc (n : nat) (l : list nat) {struct l} : nat :=\n  match l with\n  | Nil => 0\n  | Cons m x => si nat (egal_nat n m) (S (nocc n x)) (nocc n x)\n  end.\n\nLemma nocc_eq1 : forall n : nat, nocc n (Nil nat) = 0.\nProof.\n auto.\nQed.\n\nLemma nocc_eq2 :\n forall (n m : nat) (x : list nat),\n nocc n (Cons nat m x) = si nat (egal_nat n m) (S (nocc n x)) (nocc n x).\nProof.\n auto.\nQed.\n\n(* == Un lemme utile == *)\n(* -- Sur les booleens *)\n\n",
                "context_tokens": 746,
                "proof_start_offset": 4780,
                "proof_end_offset": 4846,
                "proof": "Theorem diff_true_false : true <> false.\nProof.\ndiscriminate.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem diff_true_false : true <> false.\nProof.\nauto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Sorting.v\", line 168, characters 0-4:\nError: Attempt to save an incomplete proof (in proof diff_true_false)\n\nmake[2]: *** [Makefile.coq:663: Sorting.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": " | S n, S m => inf_egal n m\n  end.\n\n\nLemma inf_egal_eq1 : forall m : nat, inf_egal 0 m = true.\nProof.\n auto.\nQed.\n\nLemma inf_egal_eq2 : forall n : nat, inf_egal (S n) 0 = false.\nProof.\n auto.\nQed. \n\nLemma inf_egal_eq3 : forall n m : nat, inf_egal (S n) (S m) = inf_egal n m.\nProof.\n auto.\nQed. \n\nInductive list (X : Set) : Set :=\n  | Nil : list X\n  | Cons : X -> list X -> list X.\n\nDefinition cdr (X : Set) (l : list X) :=\n  match l with\n  | Nil => Nil X\n  | Cons _ xs => xs\n  end.\n\nFixpoint length (X : Set) (l : list X) {struct l} : nat :=\n  match l with\n  | Nil => 0\n  | Cons _ xs => S (length X xs)\n  end.\n\n(* append x y = yx *)\nFixpoint append (X : Set) (ys xs : list X) {struct xs} : \n list X :=\n  match xs with\n  | Nil => ys\n  | Cons x xs' => Cons X x (append X ys xs')\n  end.\n\n(* == Proprietes d'un tri == *)\n\nFixpoint sorted (l : list nat) : Prop :=\n  match l with\n  | Cons n (Cons m x as l) => inf_egal n m = true /\\ sorted l\n  | _ => True\n  end.\n\nLemma sorted_eq1 : sorted (Nil nat) = True.\nProof.\n auto.\nQed.\n\nLemma sorted_eq2 : forall n : nat, sorted (Cons nat n (Nil nat)) = True.\nProof.\n auto.\nQed.\n\nLemma sorted_eq3 :\n forall (n m : nat) (x : list nat),\n sorted (Cons nat n (Cons nat m x)) =\n (inf_egal n m = true /\\ sorted (Cons nat m x)).\nProof.\n auto.\nQed.\n\nFixpoint nocc (n : nat) (l : list nat) {struct l} : nat :=\n  match l with\n  | Nil => 0\n  | Cons m x => si nat (egal_nat n m) (S (nocc n x)) (nocc n x)\n  end.\n\nLemma nocc_eq1 : forall n : nat, nocc n (Nil nat) = 0.\nProof.\n auto.\nQed.\n\nLemma nocc_eq2 :\n forall (n m : nat) (x : list nat),\n nocc n (Cons nat m x) = si nat (egal_nat n m) (S (nocc n x)) (nocc n x).\nProof.\n auto.\nQed.\n\n(* == Un lemme utile == *)\n(* -- Sur les booleens *)\n\nTheorem diff_true_false : true <> false.\nProof.\ndiscriminate.\nQed.\n\n(* -- Sur la conditionnelle *)\n",
                "context_tokens": 698,
                "proof_start_offset": 4879,
                "proof_end_offset": 5155,
                "proof": "Theorem si_intro : forall (X : Set) (P : X -> Prop) (x y : X) (b : bool), (b = true :>bool -> P x) -> (b = false :>bool -> P y) -> P (si X b x y).\nProof.\nsimple induction b.\nintros.\nrewrite si_eq1.\napply H.\ntrivial.\nintros.\nrewrite si_eq2.\napply H0.\ntrivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem si_intro : forall (X : Set) (P : X -> Prop) (x y : X) (b : bool), (b = true :>bool -> P x) -> (b = false :>bool -> P y) -> P (si X b x y).\nProof.\nintros X P x y b.\ncase (dec_eq x b).\nintros H1 H2.\nrewrite H1 in H2.\nrewrite H2 in H2.\ndiscriminate H2.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Sorting.v\", line 174, characters 6-12:\nError: The reference dec_eq was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Sorting.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": " : nat, inf_egal (S n) (S m) = inf_egal n m.\nProof.\n auto.\nQed. \n\nInductive list (X : Set) : Set :=\n  | Nil : list X\n  | Cons : X -> list X -> list X.\n\nDefinition cdr (X : Set) (l : list X) :=\n  match l with\n  | Nil => Nil X\n  | Cons _ xs => xs\n  end.\n\nFixpoint length (X : Set) (l : list X) {struct l} : nat :=\n  match l with\n  | Nil => 0\n  | Cons _ xs => S (length X xs)\n  end.\n\n(* append x y = yx *)\nFixpoint append (X : Set) (ys xs : list X) {struct xs} : \n list X :=\n  match xs with\n  | Nil => ys\n  | Cons x xs' => Cons X x (append X ys xs')\n  end.\n\n(* == Proprietes d'un tri == *)\n\nFixpoint sorted (l : list nat) : Prop :=\n  match l with\n  | Cons n (Cons m x as l) => inf_egal n m = true /\\ sorted l\n  | _ => True\n  end.\n\nLemma sorted_eq1 : sorted (Nil nat) = True.\nProof.\n auto.\nQed.\n\nLemma sorted_eq2 : forall n : nat, sorted (Cons nat n (Nil nat)) = True.\nProof.\n auto.\nQed.\n\nLemma sorted_eq3 :\n forall (n m : nat) (x : list nat),\n sorted (Cons nat n (Cons nat m x)) =\n (inf_egal n m = true /\\ sorted (Cons nat m x)).\nProof.\n auto.\nQed.\n\nFixpoint nocc (n : nat) (l : list nat) {struct l} : nat :=\n  match l with\n  | Nil => 0\n  | Cons m x => si nat (egal_nat n m) (S (nocc n x)) (nocc n x)\n  end.\n\nLemma nocc_eq1 : forall n : nat, nocc n (Nil nat) = 0.\nProof.\n auto.\nQed.\n\nLemma nocc_eq2 :\n forall (n m : nat) (x : list nat),\n nocc n (Cons nat m x) = si nat (egal_nat n m) (S (nocc n x)) (nocc n x).\nProof.\n auto.\nQed.\n\n(* == Un lemme utile == *)\n(* -- Sur les booleens *)\n\nTheorem diff_true_false : true <> false.\nProof.\ndiscriminate.\nQed.\n\n(* -- Sur la conditionnelle *)\nTheorem si_intro :\n forall (X : Set) (P : X -> Prop) (x y : X) (b : bool),\n (b = true :>bool -> P x) -> (b = false :>bool -> P y) -> P (si X b x y).\nProof.\nsimple induction b.\n\n intros.\n rewrite si_eq1.\n apply H.\n trivial.\n\n intros.\n rewrite si_eq2.\n apply H0.\n trivial.\n\nQed.\n\n(* -- Sur la comparaison des entiers *)\n",
                "context_tokens": 728,
                "proof_start_offset": 5197,
                "proof_end_offset": 5481,
                "proof": "Theorem inf_false_true : forall n m : nat, inf_egal n m = false -> inf_egal m n = true.\nProof.\nsimple induction n.\nintros.\napply False_ind.\napply diff_true_false.\nassumption.\nsimple induction m.\nintro.\ntrivial.\nintros.\nrewrite inf_egal_eq3.\napply H.\nassumption.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem inf_false_true : forall n m : nat, inf_egal n m = false -> inf_egal m n = true.\nProof.\nsimple induction n.\nintros.\nrewrite H0.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.\napply le_n_S.Qed.",
                        "correct": false,
                        "error_msg": "File \"./Sorting.v\", line 194, characters 8-10:\nError: The reference H0 was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Sorting.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": ") (l : list X) {struct l} : nat :=\n  match l with\n  | Nil => 0\n  | Cons _ xs => S (length X xs)\n  end.\n\n(* append x y = yx *)\nFixpoint append (X : Set) (ys xs : list X) {struct xs} : \n list X :=\n  match xs with\n  | Nil => ys\n  | Cons x xs' => Cons X x (append X ys xs')\n  end.\n\n(* == Proprietes d'un tri == *)\n\nFixpoint sorted (l : list nat) : Prop :=\n  match l with\n  | Cons n (Cons m x as l) => inf_egal n m = true /\\ sorted l\n  | _ => True\n  end.\n\nLemma sorted_eq1 : sorted (Nil nat) = True.\nProof.\n auto.\nQed.\n\nLemma sorted_eq2 : forall n : nat, sorted (Cons nat n (Nil nat)) = True.\nProof.\n auto.\nQed.\n\nLemma sorted_eq3 :\n forall (n m : nat) (x : list nat),\n sorted (Cons nat n (Cons nat m x)) =\n (inf_egal n m = true /\\ sorted (Cons nat m x)).\nProof.\n auto.\nQed.\n\nFixpoint nocc (n : nat) (l : list nat) {struct l} : nat :=\n  match l with\n  | Nil => 0\n  | Cons m x => si nat (egal_nat n m) (S (nocc n x)) (nocc n x)\n  end.\n\nLemma nocc_eq1 : forall n : nat, nocc n (Nil nat) = 0.\nProof.\n auto.\nQed.\n\nLemma nocc_eq2 :\n forall (n m : nat) (x : list nat),\n nocc n (Cons nat m x) = si nat (egal_nat n m) (S (nocc n x)) (nocc n x).\nProof.\n auto.\nQed.\n\n(* == Un lemme utile == *)\n(* -- Sur les booleens *)\n\nTheorem diff_true_false : true <> false.\nProof.\ndiscriminate.\nQed.\n\n(* -- Sur la conditionnelle *)\nTheorem si_intro :\n forall (X : Set) (P : X -> Prop) (x y : X) (b : bool),\n (b = true :>bool -> P x) -> (b = false :>bool -> P y) -> P (si X b x y).\nProof.\nsimple induction b.\n\n intros.\n rewrite si_eq1.\n apply H.\n trivial.\n\n intros.\n rewrite si_eq2.\n apply H0.\n trivial.\n\nQed.\n\n(* -- Sur la comparaison des entiers *)\nTheorem inf_false_true :\n forall n m : nat, inf_egal n m = false -> inf_egal m n = true.\nProof.\nsimple induction n.\n intros.\n apply False_ind.\n apply diff_true_false.\n assumption.\n simple induction m.\n  intro.\n  trivial.\n  intros.\n  rewrite inf_egal_eq3.\n  apply H.\n  assumption.\nQed.\n\n(* -- Sur le predicat \"sorted\" *)\n\n",
                "context_tokens": 728,
                "proof_start_offset": 5518,
                "proof_end_offset": 5731,
                "proof": "Theorem sorted_cdr : forall (n : nat) (x : list nat), sorted (Cons nat n x) -> sorted x.\nProof.\nsimple induction x.\nintro.\nunfold sorted in |- *.\ntrivial.\nintro.\nintro.\nintro.\nrewrite sorted_eq3.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem sorted_cdr : forall (n : nat) (x : list nat), sorted (Cons nat n x) -> sorted x.\nProof.\nsimple induction n.\n intros.\n apply (H (S x)).\n apply sorted_trans with (Cons nat n x).\n apply sorted_trans with (Cons nat n x).\n apply sorted_trans with (Cons nat n x).\n apply sorted_trans with (Cons nat n x).\n apply sorted_trans with (Cons nat n x).\n apply sorted_trans with (Cons nat n x).\n apply sorted_trans with (Cons nat n x).\n apply sorted_trans with (Cons nat n x).\n apply sorted_trans with (Cons nat n x).\n apply sorted_trans with (Cons nat n x).\n apply sorted_trans with (Cons nat n x).\n apply sorted_trans with (Cons nat n x).\n apply sorted_trans with (Cons nat n x).\n apply sorted_trans with (Cons nat n x).\n apply sorted_trans with (Cons nat n x).\n apply sorted_trans with (Cons nat n x).\n apply sorted_trans with (Cons nat n x).\n apply sorted_trans with (Cons nat n x).\n apply sorted_trans with (Cons nat n x).\n apply sorted_trans with (Cons natQed.",
                        "correct": false,
                        "error_msg": "File \"./Sorting.v\", line 213, characters 13-14:\nError:\nIn environment\nn : nat\nx : list nat\nH : sorted (Cons nat 0 x)\nThe term \"x\" has type \"list nat\" while it is expected to have type \"nat\".\n\nmake[2]: *** [Makefile.coq:663: Sorting.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": " ys\n  | Cons x xs' => Cons X x (append X ys xs')\n  end.\n\n(* == Proprietes d'un tri == *)\n\nFixpoint sorted (l : list nat) : Prop :=\n  match l with\n  | Cons n (Cons m x as l) => inf_egal n m = true /\\ sorted l\n  | _ => True\n  end.\n\nLemma sorted_eq1 : sorted (Nil nat) = True.\nProof.\n auto.\nQed.\n\nLemma sorted_eq2 : forall n : nat, sorted (Cons nat n (Nil nat)) = True.\nProof.\n auto.\nQed.\n\nLemma sorted_eq3 :\n forall (n m : nat) (x : list nat),\n sorted (Cons nat n (Cons nat m x)) =\n (inf_egal n m = true /\\ sorted (Cons nat m x)).\nProof.\n auto.\nQed.\n\nFixpoint nocc (n : nat) (l : list nat) {struct l} : nat :=\n  match l with\n  | Nil => 0\n  | Cons m x => si nat (egal_nat n m) (S (nocc n x)) (nocc n x)\n  end.\n\nLemma nocc_eq1 : forall n : nat, nocc n (Nil nat) = 0.\nProof.\n auto.\nQed.\n\nLemma nocc_eq2 :\n forall (n m : nat) (x : list nat),\n nocc n (Cons nat m x) = si nat (egal_nat n m) (S (nocc n x)) (nocc n x).\nProof.\n auto.\nQed.\n\n(* == Un lemme utile == *)\n(* -- Sur les booleens *)\n\nTheorem diff_true_false : true <> false.\nProof.\ndiscriminate.\nQed.\n\n(* -- Sur la conditionnelle *)\nTheorem si_intro :\n forall (X : Set) (P : X -> Prop) (x y : X) (b : bool),\n (b = true :>bool -> P x) -> (b = false :>bool -> P y) -> P (si X b x y).\nProof.\nsimple induction b.\n\n intros.\n rewrite si_eq1.\n apply H.\n trivial.\n\n intros.\n rewrite si_eq2.\n apply H0.\n trivial.\n\nQed.\n\n(* -- Sur la comparaison des entiers *)\nTheorem inf_false_true :\n forall n m : nat, inf_egal n m = false -> inf_egal m n = true.\nProof.\nsimple induction n.\n intros.\n apply False_ind.\n apply diff_true_false.\n assumption.\n simple induction m.\n  intro.\n  trivial.\n  intros.\n  rewrite inf_egal_eq3.\n  apply H.\n  assumption.\nQed.\n\n(* -- Sur le predicat \"sorted\" *)\n\nTheorem sorted_cdr :\n forall (n : nat) (x : list nat), sorted (Cons nat n x) -> sorted x.\nProof.\nsimple induction x.\n intro. unfold sorted in |- *. trivial.\n intro. intro. intro. \n rewrite sorted_eq3.\n tauto.\nQed.\n \n",
                "context_tokens": 719,
                "proof_start_offset": 5734,
                "proof_end_offset": 5910,
                "proof": "Theorem sorted_inf : forall (n m : nat) (x : list nat), sorted (Cons nat n (Cons nat m x)) -> inf_egal n m = true.\nProof.\nintro.\nintro.\nintro.\nrewrite sorted_eq3.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem sorted_inf : forall (n m : nat) (x : list nat), sorted (Cons nat n (Cons nat m x)) -> inf_egal n m = true.\nProof.\nsimple induction n.\nintros.\nrewrite H.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\napply sorted_lt.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Sorting.v\", line 223, characters 0-9:\nError: Tactic failure: Setoid library not loaded.\n\nmake[2]: *** [Makefile.coq:663: Sorting.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": "Lemma sorted_eq3 :\n forall (n m : nat) (x : list nat),\n sorted (Cons nat n (Cons nat m x)) =\n (inf_egal n m = true /\\ sorted (Cons nat m x)).\nProof.\n auto.\nQed.\n\nFixpoint nocc (n : nat) (l : list nat) {struct l} : nat :=\n  match l with\n  | Nil => 0\n  | Cons m x => si nat (egal_nat n m) (S (nocc n x)) (nocc n x)\n  end.\n\nLemma nocc_eq1 : forall n : nat, nocc n (Nil nat) = 0.\nProof.\n auto.\nQed.\n\nLemma nocc_eq2 :\n forall (n m : nat) (x : list nat),\n nocc n (Cons nat m x) = si nat (egal_nat n m) (S (nocc n x)) (nocc n x).\nProof.\n auto.\nQed.\n\n(* == Un lemme utile == *)\n(* -- Sur les booleens *)\n\nTheorem diff_true_false : true <> false.\nProof.\ndiscriminate.\nQed.\n\n(* -- Sur la conditionnelle *)\nTheorem si_intro :\n forall (X : Set) (P : X -> Prop) (x y : X) (b : bool),\n (b = true :>bool -> P x) -> (b = false :>bool -> P y) -> P (si X b x y).\nProof.\nsimple induction b.\n\n intros.\n rewrite si_eq1.\n apply H.\n trivial.\n\n intros.\n rewrite si_eq2.\n apply H0.\n trivial.\n\nQed.\n\n(* -- Sur la comparaison des entiers *)\nTheorem inf_false_true :\n forall n m : nat, inf_egal n m = false -> inf_egal m n = true.\nProof.\nsimple induction n.\n intros.\n apply False_ind.\n apply diff_true_false.\n assumption.\n simple induction m.\n  intro.\n  trivial.\n  intros.\n  rewrite inf_egal_eq3.\n  apply H.\n  assumption.\nQed.\n\n(* -- Sur le predicat \"sorted\" *)\n\nTheorem sorted_cdr :\n forall (n : nat) (x : list nat), sorted (Cons nat n x) -> sorted x.\nProof.\nsimple induction x.\n intro. unfold sorted in |- *. trivial.\n intro. intro. intro. \n rewrite sorted_eq3.\n tauto.\nQed.\n \nTheorem sorted_inf :\n forall (n m : nat) (x : list nat),\n sorted (Cons nat n (Cons nat m x)) -> inf_egal n m = true.\nProof.\nintro. intro. intro.\nrewrite sorted_eq3.\ntauto.\nQed.\n\n(* == Tri par insertion *)\n\nFixpoint ins (n : nat) (l : list nat) {struct l} : \n list nat :=\n  match l with\n  | Nil => Cons nat n (Nil nat)\n  | Cons m x =>\n      si (list nat) (inf_egal n m) (Cons nat n (Cons nat m x))\n        (Cons nat m (ins n x))\n  end.\n\n\n",
                "context_tokens": 732,
                "proof_start_offset": 6171,
                "proof_end_offset": 6267,
                "proof": "Lemma ins_eq1 : forall n : nat, ins n (Nil nat) = Cons nat n (Nil nat).\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma ins_eq1 : forall n : nat, ins n (Nil nat) = Cons nat n (Nil nat).\nProof.\nsimple induction n.\nintros.\nrewrite H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\napply H.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Sorting.v\", line 244, characters 8-9:\nError: The reference H was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Sorting.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": " : list nat) {struct l} : nat :=\n  match l with\n  | Nil => 0\n  | Cons m x => si nat (egal_nat n m) (S (nocc n x)) (nocc n x)\n  end.\n\nLemma nocc_eq1 : forall n : nat, nocc n (Nil nat) = 0.\nProof.\n auto.\nQed.\n\nLemma nocc_eq2 :\n forall (n m : nat) (x : list nat),\n nocc n (Cons nat m x) = si nat (egal_nat n m) (S (nocc n x)) (nocc n x).\nProof.\n auto.\nQed.\n\n(* == Un lemme utile == *)\n(* -- Sur les booleens *)\n\nTheorem diff_true_false : true <> false.\nProof.\ndiscriminate.\nQed.\n\n(* -- Sur la conditionnelle *)\nTheorem si_intro :\n forall (X : Set) (P : X -> Prop) (x y : X) (b : bool),\n (b = true :>bool -> P x) -> (b = false :>bool -> P y) -> P (si X b x y).\nProof.\nsimple induction b.\n\n intros.\n rewrite si_eq1.\n apply H.\n trivial.\n\n intros.\n rewrite si_eq2.\n apply H0.\n trivial.\n\nQed.\n\n(* -- Sur la comparaison des entiers *)\nTheorem inf_false_true :\n forall n m : nat, inf_egal n m = false -> inf_egal m n = true.\nProof.\nsimple induction n.\n intros.\n apply False_ind.\n apply diff_true_false.\n assumption.\n simple induction m.\n  intro.\n  trivial.\n  intros.\n  rewrite inf_egal_eq3.\n  apply H.\n  assumption.\nQed.\n\n(* -- Sur le predicat \"sorted\" *)\n\nTheorem sorted_cdr :\n forall (n : nat) (x : list nat), sorted (Cons nat n x) -> sorted x.\nProof.\nsimple induction x.\n intro. unfold sorted in |- *. trivial.\n intro. intro. intro. \n rewrite sorted_eq3.\n tauto.\nQed.\n \nTheorem sorted_inf :\n forall (n m : nat) (x : list nat),\n sorted (Cons nat n (Cons nat m x)) -> inf_egal n m = true.\nProof.\nintro. intro. intro.\nrewrite sorted_eq3.\ntauto.\nQed.\n\n(* == Tri par insertion *)\n\nFixpoint ins (n : nat) (l : list nat) {struct l} : \n list nat :=\n  match l with\n  | Nil => Cons nat n (Nil nat)\n  | Cons m x =>\n      si (list nat) (inf_egal n m) (Cons nat n (Cons nat m x))\n        (Cons nat m (ins n x))\n  end.\n\n\nLemma ins_eq1 : forall n : nat, ins n (Nil nat) = Cons nat n (Nil nat).      \nProof.\n auto.\nQed.\n\n",
                "context_tokens": 698,
                "proof_start_offset": 6269,
                "proof_end_offset": 6448,
                "proof": "Lemma ins_eq2 : forall (n m : nat) (x : list nat), ins n (Cons nat m x) = si (list nat) (inf_egal n m) (Cons nat n (Cons nat m x)) (Cons nat m (ins n x)).\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma ins_eq2 : forall (n m : nat) (x : list nat), ins n (Cons nat m x) = si (list nat) (inf_egal n m) (Cons nat n (Cons nat m x)) (Cons nat m (ins n x)).\nProof.\n auto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": "Proof.\n auto.\nQed.\n\nLemma nocc_eq2 :\n forall (n m : nat) (x : list nat),\n nocc n (Cons nat m x) = si nat (egal_nat n m) (S (nocc n x)) (nocc n x).\nProof.\n auto.\nQed.\n\n(* == Un lemme utile == *)\n(* -- Sur les booleens *)\n\nTheorem diff_true_false : true <> false.\nProof.\ndiscriminate.\nQed.\n\n(* -- Sur la conditionnelle *)\nTheorem si_intro :\n forall (X : Set) (P : X -> Prop) (x y : X) (b : bool),\n (b = true :>bool -> P x) -> (b = false :>bool -> P y) -> P (si X b x y).\nProof.\nsimple induction b.\n\n intros.\n rewrite si_eq1.\n apply H.\n trivial.\n\n intros.\n rewrite si_eq2.\n apply H0.\n trivial.\n\nQed.\n\n(* -- Sur la comparaison des entiers *)\nTheorem inf_false_true :\n forall n m : nat, inf_egal n m = false -> inf_egal m n = true.\nProof.\nsimple induction n.\n intros.\n apply False_ind.\n apply diff_true_false.\n assumption.\n simple induction m.\n  intro.\n  trivial.\n  intros.\n  rewrite inf_egal_eq3.\n  apply H.\n  assumption.\nQed.\n\n(* -- Sur le predicat \"sorted\" *)\n\nTheorem sorted_cdr :\n forall (n : nat) (x : list nat), sorted (Cons nat n x) -> sorted x.\nProof.\nsimple induction x.\n intro. unfold sorted in |- *. trivial.\n intro. intro. intro. \n rewrite sorted_eq3.\n tauto.\nQed.\n \nTheorem sorted_inf :\n forall (n m : nat) (x : list nat),\n sorted (Cons nat n (Cons nat m x)) -> inf_egal n m = true.\nProof.\nintro. intro. intro.\nrewrite sorted_eq3.\ntauto.\nQed.\n\n(* == Tri par insertion *)\n\nFixpoint ins (n : nat) (l : list nat) {struct l} : \n list nat :=\n  match l with\n  | Nil => Cons nat n (Nil nat)\n  | Cons m x =>\n      si (list nat) (inf_egal n m) (Cons nat n (Cons nat m x))\n        (Cons nat m (ins n x))\n  end.\n\n\nLemma ins_eq1 : forall n : nat, ins n (Nil nat) = Cons nat n (Nil nat).      \nProof.\n auto.\nQed.\n\nLemma ins_eq2 :\n forall (n m : nat) (x : list nat),\n ins n (Cons nat m x) =\n si (list nat) (inf_egal n m) (Cons nat n (Cons nat m x))\n   (Cons nat m (ins n x)).\nProof.\n auto.\nQed.\n\n\nFixpoint tri_ins (l : list nat) : list nat :=\n  match l with\n  | Nil => Nil nat\n  | Cons n x => ins n (tri_ins x)\n  end.\n\n",
                "context_tokens": 738,
                "proof_start_offset": 6573,
                "proof_end_offset": 6640,
                "proof": "Lemma tri_ins_eq1 : tri_ins (Nil nat) = Nil nat.\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tri_ins_eq1 : tri_ins (Nil nat) = Nil nat.\nProof.\n auto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": " m) (S (nocc n x)) (nocc n x).\nProof.\n auto.\nQed.\n\n(* == Un lemme utile == *)\n(* -- Sur les booleens *)\n\nTheorem diff_true_false : true <> false.\nProof.\ndiscriminate.\nQed.\n\n(* -- Sur la conditionnelle *)\nTheorem si_intro :\n forall (X : Set) (P : X -> Prop) (x y : X) (b : bool),\n (b = true :>bool -> P x) -> (b = false :>bool -> P y) -> P (si X b x y).\nProof.\nsimple induction b.\n\n intros.\n rewrite si_eq1.\n apply H.\n trivial.\n\n intros.\n rewrite si_eq2.\n apply H0.\n trivial.\n\nQed.\n\n(* -- Sur la comparaison des entiers *)\nTheorem inf_false_true :\n forall n m : nat, inf_egal n m = false -> inf_egal m n = true.\nProof.\nsimple induction n.\n intros.\n apply False_ind.\n apply diff_true_false.\n assumption.\n simple induction m.\n  intro.\n  trivial.\n  intros.\n  rewrite inf_egal_eq3.\n  apply H.\n  assumption.\nQed.\n\n(* -- Sur le predicat \"sorted\" *)\n\nTheorem sorted_cdr :\n forall (n : nat) (x : list nat), sorted (Cons nat n x) -> sorted x.\nProof.\nsimple induction x.\n intro. unfold sorted in |- *. trivial.\n intro. intro. intro. \n rewrite sorted_eq3.\n tauto.\nQed.\n \nTheorem sorted_inf :\n forall (n m : nat) (x : list nat),\n sorted (Cons nat n (Cons nat m x)) -> inf_egal n m = true.\nProof.\nintro. intro. intro.\nrewrite sorted_eq3.\ntauto.\nQed.\n\n(* == Tri par insertion *)\n\nFixpoint ins (n : nat) (l : list nat) {struct l} : \n list nat :=\n  match l with\n  | Nil => Cons nat n (Nil nat)\n  | Cons m x =>\n      si (list nat) (inf_egal n m) (Cons nat n (Cons nat m x))\n        (Cons nat m (ins n x))\n  end.\n\n\nLemma ins_eq1 : forall n : nat, ins n (Nil nat) = Cons nat n (Nil nat).      \nProof.\n auto.\nQed.\n\nLemma ins_eq2 :\n forall (n m : nat) (x : list nat),\n ins n (Cons nat m x) =\n si (list nat) (inf_egal n m) (Cons nat n (Cons nat m x))\n   (Cons nat m (ins n x)).\nProof.\n auto.\nQed.\n\n\nFixpoint tri_ins (l : list nat) : list nat :=\n  match l with\n  | Nil => Nil nat\n  | Cons n x => ins n (tri_ins x)\n  end.\n\nLemma tri_ins_eq1 : tri_ins (Nil nat) = Nil nat.\nProof.\n auto.\nQed.\n\n",
                "context_tokens": 719,
                "proof_start_offset": 6642,
                "proof_end_offset": 6758,
                "proof": "Lemma tri_ins_eq2 : forall (n : nat) (x : list nat), tri_ins (Cons nat n x) = ins n (tri_ins x).\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma tri_ins_eq2 : forall (n : nat) (x : list nat), tri_ins (Cons nat n x) = ins n (tri_ins x).\nProof.\n auto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": "X : Set) (P : X -> Prop) (x y : X) (b : bool),\n (b = true :>bool -> P x) -> (b = false :>bool -> P y) -> P (si X b x y).\nProof.\nsimple induction b.\n\n intros.\n rewrite si_eq1.\n apply H.\n trivial.\n\n intros.\n rewrite si_eq2.\n apply H0.\n trivial.\n\nQed.\n\n(* -- Sur la comparaison des entiers *)\nTheorem inf_false_true :\n forall n m : nat, inf_egal n m = false -> inf_egal m n = true.\nProof.\nsimple induction n.\n intros.\n apply False_ind.\n apply diff_true_false.\n assumption.\n simple induction m.\n  intro.\n  trivial.\n  intros.\n  rewrite inf_egal_eq3.\n  apply H.\n  assumption.\nQed.\n\n(* -- Sur le predicat \"sorted\" *)\n\nTheorem sorted_cdr :\n forall (n : nat) (x : list nat), sorted (Cons nat n x) -> sorted x.\nProof.\nsimple induction x.\n intro. unfold sorted in |- *. trivial.\n intro. intro. intro. \n rewrite sorted_eq3.\n tauto.\nQed.\n \nTheorem sorted_inf :\n forall (n m : nat) (x : list nat),\n sorted (Cons nat n (Cons nat m x)) -> inf_egal n m = true.\nProof.\nintro. intro. intro.\nrewrite sorted_eq3.\ntauto.\nQed.\n\n(* == Tri par insertion *)\n\nFixpoint ins (n : nat) (l : list nat) {struct l} : \n list nat :=\n  match l with\n  | Nil => Cons nat n (Nil nat)\n  | Cons m x =>\n      si (list nat) (inf_egal n m) (Cons nat n (Cons nat m x))\n        (Cons nat m (ins n x))\n  end.\n\n\nLemma ins_eq1 : forall n : nat, ins n (Nil nat) = Cons nat n (Nil nat).      \nProof.\n auto.\nQed.\n\nLemma ins_eq2 :\n forall (n m : nat) (x : list nat),\n ins n (Cons nat m x) =\n si (list nat) (inf_egal n m) (Cons nat n (Cons nat m x))\n   (Cons nat m (ins n x)).\nProof.\n auto.\nQed.\n\n\nFixpoint tri_ins (l : list nat) : list nat :=\n  match l with\n  | Nil => Nil nat\n  | Cons n x => ins n (tri_ins x)\n  end.\n\nLemma tri_ins_eq1 : tri_ins (Nil nat) = Nil nat.\nProof.\n auto.\nQed.\n\nLemma tri_ins_eq2 :\n forall (n : nat) (x : list nat), tri_ins (Cons nat n x) = ins n (tri_ins x).\nProof.\n auto.\nQed.\n\n\n(* -- Preuve de correction *)\n(* -- 1 : Le resultat de \"tri_ins\" est une liste sorted *)\n\n",
                "context_tokens": 711,
                "proof_start_offset": 6851,
                "proof_end_offset": 7541,
                "proof": "Theorem sorted_ins_Cons : forall (x : list nat) (n m : nat), inf_egal n m = false -> sorted (Cons nat m x) -> sorted (Cons nat m (ins n x)).\nProof.\nsimple induction x.\nintros.\nrewrite ins_eq1.\nrewrite sorted_eq3.\nsplit.\napply inf_false_true.\nassumption.\ntrivial.\nintros.\nrewrite ins_eq2.\napply (si_intro (list nat) (fun x : list nat => sorted (Cons nat m x))).\nintro.\nrewrite sorted_eq3.\nsplit.\napply inf_false_true.\nassumption.\nrewrite sorted_eq3.\nsplit.\napply H2.\napply (sorted_cdr m).\nassumption.\nintro.\nrewrite sorted_eq3.\nsplit.\napply (sorted_inf m x0 l).\nassumption.\napply H.\nassumption.\napply (sorted_cdr m).\nassumption.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem sorted_ins_Cons : forall (x : list nat) (n m : nat), inf_egal n m = false -> sorted (Cons nat m x) -> sorted (Cons nat m (ins n x)).\nProof.\nsimple induction n.\nintros.\nrewrite H.\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\napply (H (S x)).\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Sorting.v\", line 280, characters 0-9:\nError: Found no subterm matching \"inf_egal 0 m\" in the current goal.\n\nmake[2]: *** [Makefile.coq:663: Sorting.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": "\n  assumption.\nQed.\n\n(* -- Sur le predicat \"sorted\" *)\n\nTheorem sorted_cdr :\n forall (n : nat) (x : list nat), sorted (Cons nat n x) -> sorted x.\nProof.\nsimple induction x.\n intro. unfold sorted in |- *. trivial.\n intro. intro. intro. \n rewrite sorted_eq3.\n tauto.\nQed.\n \nTheorem sorted_inf :\n forall (n m : nat) (x : list nat),\n sorted (Cons nat n (Cons nat m x)) -> inf_egal n m = true.\nProof.\nintro. intro. intro.\nrewrite sorted_eq3.\ntauto.\nQed.\n\n(* == Tri par insertion *)\n\nFixpoint ins (n : nat) (l : list nat) {struct l} : \n list nat :=\n  match l with\n  | Nil => Cons nat n (Nil nat)\n  | Cons m x =>\n      si (list nat) (inf_egal n m) (Cons nat n (Cons nat m x))\n        (Cons nat m (ins n x))\n  end.\n\n\nLemma ins_eq1 : forall n : nat, ins n (Nil nat) = Cons nat n (Nil nat).      \nProof.\n auto.\nQed.\n\nLemma ins_eq2 :\n forall (n m : nat) (x : list nat),\n ins n (Cons nat m x) =\n si (list nat) (inf_egal n m) (Cons nat n (Cons nat m x))\n   (Cons nat m (ins n x)).\nProof.\n auto.\nQed.\n\n\nFixpoint tri_ins (l : list nat) : list nat :=\n  match l with\n  | Nil => Nil nat\n  | Cons n x => ins n (tri_ins x)\n  end.\n\nLemma tri_ins_eq1 : tri_ins (Nil nat) = Nil nat.\nProof.\n auto.\nQed.\n\nLemma tri_ins_eq2 :\n forall (n : nat) (x : list nat), tri_ins (Cons nat n x) = ins n (tri_ins x).\nProof.\n auto.\nQed.\n\n\n(* -- Preuve de correction *)\n(* -- 1 : Le resultat de \"tri_ins\" est une liste sorted *)\n\nTheorem sorted_ins_Cons :\n forall (x : list nat) (n m : nat),\n inf_egal n m = false ->\n sorted (Cons nat m x) -> sorted (Cons nat m (ins n x)).\nProof.\nsimple induction x.\n intros.\n rewrite ins_eq1.\n rewrite sorted_eq3.\n split.\n  apply inf_false_true. assumption.\n  trivial.\n intros.\n rewrite ins_eq2.\n apply (si_intro (list nat) (fun x : list nat => sorted (Cons nat m x))).\n  intro. \n  rewrite sorted_eq3.\n  split.\n   apply inf_false_true. assumption.\n   rewrite sorted_eq3.\n   split.\n    apply H2.\n    apply (sorted_cdr m). assumption.\n  intro.\n  rewrite sorted_eq3.\n  split.\n   apply (sorted_inf m x0 l). assumption.\n   apply H.\n    assumption.\n    apply (sorted_cdr m). assumption.\nQed.\n\n",
                "context_tokens": 731,
                "proof_start_offset": 7543,
                "proof_end_offset": 7836,
                "proof": "Theorem sorted_ins : forall (n : nat) (x : list nat), sorted x -> sorted (ins n x).\nProof.\nsimple induction x.\ntrivial.\nintros.\nrewrite ins_eq2.\napply si_intro.\nintros.\nrewrite sorted_eq3.\nsplit.\nassumption.\nassumption.\nintro.\napply sorted_ins_Cons.\nassumption.\nassumption.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem sorted_ins : forall (n : nat) (x : list nat), sorted x -> sorted (ins n x).\nProof.\nsimple induction x.\nintros.\nrewrite ins_eq1.\napply sorted_ins_eq1.\napply sorted_ins_eq1.\napply sorted_ins_eq1.\napply sorted_ins_eq2.\napply sorted_ins_eq2.\napply sorted_ins_eq2.\napply sorted_ins_eq1.\napply sorted_ins_eq1.\napply sorted_ins_eq2.\napply sorted_ins_eq1.\napply sorted_ins_eq1.\napply sorted_ins_eq2.\napply sorted_ins_eq1.\napply sorted_ins_eq2.\napply sorted_ins_eq2.\napply sorted_ins_eq2.\napply sorted_ins_eq1.\napply sorted_ins_eq1.\napply sorted_ins_eq2.\napply sorted_ins_eq1.\napply sorted_ins_eq2.\napply sorted_ins_eq2.\napply sorted_ins_eq2.\napply sorted_ins_eq1.\napply sorted_ins_eq2.\napply sorted_ins_eq1.\napply sorted_Qed.",
                        "correct": false,
                        "error_msg": "File \"./Sorting.v\", line 313, characters 6-20:\nError: The reference sorted_ins_eq1 was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Sorting.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": " Tri par insertion *)\n\nFixpoint ins (n : nat) (l : list nat) {struct l} : \n list nat :=\n  match l with\n  | Nil => Cons nat n (Nil nat)\n  | Cons m x =>\n      si (list nat) (inf_egal n m) (Cons nat n (Cons nat m x))\n        (Cons nat m (ins n x))\n  end.\n\n\nLemma ins_eq1 : forall n : nat, ins n (Nil nat) = Cons nat n (Nil nat).      \nProof.\n auto.\nQed.\n\nLemma ins_eq2 :\n forall (n m : nat) (x : list nat),\n ins n (Cons nat m x) =\n si (list nat) (inf_egal n m) (Cons nat n (Cons nat m x))\n   (Cons nat m (ins n x)).\nProof.\n auto.\nQed.\n\n\nFixpoint tri_ins (l : list nat) : list nat :=\n  match l with\n  | Nil => Nil nat\n  | Cons n x => ins n (tri_ins x)\n  end.\n\nLemma tri_ins_eq1 : tri_ins (Nil nat) = Nil nat.\nProof.\n auto.\nQed.\n\nLemma tri_ins_eq2 :\n forall (n : nat) (x : list nat), tri_ins (Cons nat n x) = ins n (tri_ins x).\nProof.\n auto.\nQed.\n\n\n(* -- Preuve de correction *)\n(* -- 1 : Le resultat de \"tri_ins\" est une liste sorted *)\n\nTheorem sorted_ins_Cons :\n forall (x : list nat) (n m : nat),\n inf_egal n m = false ->\n sorted (Cons nat m x) -> sorted (Cons nat m (ins n x)).\nProof.\nsimple induction x.\n intros.\n rewrite ins_eq1.\n rewrite sorted_eq3.\n split.\n  apply inf_false_true. assumption.\n  trivial.\n intros.\n rewrite ins_eq2.\n apply (si_intro (list nat) (fun x : list nat => sorted (Cons nat m x))).\n  intro. \n  rewrite sorted_eq3.\n  split.\n   apply inf_false_true. assumption.\n   rewrite sorted_eq3.\n   split.\n    apply H2.\n    apply (sorted_cdr m). assumption.\n  intro.\n  rewrite sorted_eq3.\n  split.\n   apply (sorted_inf m x0 l). assumption.\n   apply H.\n    assumption.\n    apply (sorted_cdr m). assumption.\nQed.\n\nTheorem sorted_ins :\n forall (n : nat) (x : list nat), sorted x -> sorted (ins n x).\nProof.\nsimple induction x.\n trivial.\n intros.\n rewrite ins_eq2.\n apply si_intro.\n  intros.\n  rewrite sorted_eq3.\n  split. assumption. assumption.\n  intro.\n  apply sorted_ins_Cons. assumption. assumption.\nQed.\n\n(* -- 2 : Le resultat de \"tri_ins\" est une permutation de son entree *)\n(*   ie : meme nombre d'occurrences de chaque element                *)\n\n",
                "context_tokens": 708,
                "proof_start_offset": 7983,
                "proof_end_offset": 8871,
                "proof": "Theorem nocc_Cons_Cons : forall (n m p : nat) (x : list nat), nocc n (Cons nat m (Cons nat p x)) = nocc n (Cons nat p (Cons nat m x)).\nProof.\nintros.\nrewrite (nocc_eq2 n p (Cons nat m x)).\napply si_intro.\nintro.\nrewrite nocc_eq2.\napply (si_intro nat (fun p : nat => p = S (nocc n (Cons nat m x)))).\nintro.\nrewrite nocc_eq2.\nrewrite H.\nrewrite si_eq1.\nrewrite nocc_eq2.\nrewrite H0.\nrewrite si_eq1.\napply refl_equal.\nintro.\nrewrite nocc_eq2.\nrewrite H.\nrewrite si_eq1.\nrewrite nocc_eq2.\nrewrite H0.\nrewrite si_eq2.\napply refl_equal.\nintro.\nrewrite (nocc_eq2 n m x).\napply si_intro.\nintro.\nrewrite nocc_eq2.\nrewrite H0.\nrewrite si_eq1.\nrewrite nocc_eq2.\nrewrite H.\nrewrite si_eq2.\napply refl_equal.\nintro.\nrewrite nocc_eq2.\nrewrite H0.\nrewrite si_eq2.\nrewrite nocc_eq2.\nrewrite H.\nrewrite si_eq2.\napply refl_equal.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem nocc_Cons_Cons : forall (n m p : nat) (x : list nat), nocc n (Cons nat m (Cons nat p x)) = nocc n (Cons nat p (Cons nat m x)).\nProof.\nsimple induction n.\nintros.\nrewrite H.\napply (H (Cons nat m x)).\napply (H (Cons nat m x)).\napply (H (Cons nat m x)).\napply (H (Cons nat m x)).\napply (H (Cons nat m x)).\napply (H (Cons nat m x)).\napply (H (Cons nat m x)).\napply (H (Cons nat m x)).\napply (H (Cons nat m x)).\napply (H (Cons nat m x)).\napply (H (Cons nat m x)).\napply (H (Cons nat m x)).\napply (H (Cons nat m x)).\napply (H (Cons nat m x)).\napply (H (Cons nat m x)).\napply (H (Cons nat m x)).\napply (H (Cons nat m x)).\napply (H (Cons nat m x)).\napply (H (Cons nat m x)).\napply (H (Cons nat m x)).\napply (H (Cons nat m x)).\napply (H (Cons nat m x)).\napply (H (Cons nat m x)).\napply (H (Cons nat m x)).\nQed.",
                        "correct": false,
                        "error_msg": "File \"./Sorting.v\", line 330, characters 8-9:\nError: The reference H was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Sorting.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": " : Le resultat de \"tri_ins\" est une liste sorted *)\n\nTheorem sorted_ins_Cons :\n forall (x : list nat) (n m : nat),\n inf_egal n m = false ->\n sorted (Cons nat m x) -> sorted (Cons nat m (ins n x)).\nProof.\nsimple induction x.\n intros.\n rewrite ins_eq1.\n rewrite sorted_eq3.\n split.\n  apply inf_false_true. assumption.\n  trivial.\n intros.\n rewrite ins_eq2.\n apply (si_intro (list nat) (fun x : list nat => sorted (Cons nat m x))).\n  intro. \n  rewrite sorted_eq3.\n  split.\n   apply inf_false_true. assumption.\n   rewrite sorted_eq3.\n   split.\n    apply H2.\n    apply (sorted_cdr m). assumption.\n  intro.\n  rewrite sorted_eq3.\n  split.\n   apply (sorted_inf m x0 l). assumption.\n   apply H.\n    assumption.\n    apply (sorted_cdr m). assumption.\nQed.\n\nTheorem sorted_ins :\n forall (n : nat) (x : list nat), sorted x -> sorted (ins n x).\nProof.\nsimple induction x.\n trivial.\n intros.\n rewrite ins_eq2.\n apply si_intro.\n  intros.\n  rewrite sorted_eq3.\n  split. assumption. assumption.\n  intro.\n  apply sorted_ins_Cons. assumption. assumption.\nQed.\n\n(* -- 2 : Le resultat de \"tri_ins\" est une permutation de son entree *)\n(*   ie : meme nombre d'occurrences de chaque element                *)\n\nTheorem nocc_Cons_Cons :\n forall (n m p : nat) (x : list nat),\n nocc n (Cons nat m (Cons nat p x)) = nocc n (Cons nat p (Cons nat m x)).\nProof.\nintros.\nrewrite (nocc_eq2 n p (Cons nat m x)).\napply si_intro.\n intro.\n rewrite nocc_eq2.\n apply (si_intro nat (fun p : nat => p = S (nocc n (Cons nat m x)))).\n  intro.\n  rewrite nocc_eq2.\n  rewrite H.\n  rewrite si_eq1.\n  rewrite nocc_eq2.\n  rewrite H0.\n  rewrite si_eq1.\n  apply refl_equal.\n  intro.\n  rewrite nocc_eq2.\n  rewrite H.\n  rewrite si_eq1.\n  rewrite nocc_eq2.\n  rewrite H0.\n  rewrite si_eq2.\n  apply refl_equal.\n intro.\n rewrite (nocc_eq2 n m x).\n apply si_intro.\n  intro.\n  rewrite nocc_eq2.\n  rewrite H0.\n  rewrite si_eq1.\n  rewrite nocc_eq2.\n  rewrite H.\n  rewrite si_eq2.\n  apply refl_equal.\n  intro.\n  rewrite nocc_eq2.\n  rewrite H0.\n  rewrite si_eq2.\n  rewrite nocc_eq2.\n  rewrite H.\n  rewrite si_eq2.\n  apply refl_equal.\nQed.\n\n",
                "context_tokens": 708,
                "proof_start_offset": 8873,
                "proof_end_offset": 9171,
                "proof": "Theorem nocc_Cons : forall (n m : nat) (x y : list nat), nocc n x = nocc n y -> nocc n (Cons nat m x) = nocc n (Cons nat m y).\nProof.\nintros.\nunfold nocc in |- *.\napply si_intro.\nintro.\nrewrite H0.\nsimpl in |- *.\napply eq_S.\nassumption.\nintro.\nrewrite H0.\nsimpl in |- *.\nassumption.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem nocc_Cons : forall (n m : nat) (x y : list nat), nocc n x = nocc n y -> nocc n (Cons nat m x) = nocc n (Cons nat m y).\nProof.\nsimple induction n.\nintro.\nrewrite (nocc_eq2 n p (Cons nat m x)).\nrewrite (nocc_eq2 n p (Cons nat m x)).\napply si_intro.\nintro.\nrewrite nocc_eq2.\nrewrite H.\nrewrite <- H0.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewrite H.\nrewriteQed.",
                        "correct": false,
                        "error_msg": "File \"./Sorting.v\", line 377, characters 34-35:\nError: The reference x was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Sorting.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": "true. assumption.\n  trivial.\n intros.\n rewrite ins_eq2.\n apply (si_intro (list nat) (fun x : list nat => sorted (Cons nat m x))).\n  intro. \n  rewrite sorted_eq3.\n  split.\n   apply inf_false_true. assumption.\n   rewrite sorted_eq3.\n   split.\n    apply H2.\n    apply (sorted_cdr m). assumption.\n  intro.\n  rewrite sorted_eq3.\n  split.\n   apply (sorted_inf m x0 l). assumption.\n   apply H.\n    assumption.\n    apply (sorted_cdr m). assumption.\nQed.\n\nTheorem sorted_ins :\n forall (n : nat) (x : list nat), sorted x -> sorted (ins n x).\nProof.\nsimple induction x.\n trivial.\n intros.\n rewrite ins_eq2.\n apply si_intro.\n  intros.\n  rewrite sorted_eq3.\n  split. assumption. assumption.\n  intro.\n  apply sorted_ins_Cons. assumption. assumption.\nQed.\n\n(* -- 2 : Le resultat de \"tri_ins\" est une permutation de son entree *)\n(*   ie : meme nombre d'occurrences de chaque element                *)\n\nTheorem nocc_Cons_Cons :\n forall (n m p : nat) (x : list nat),\n nocc n (Cons nat m (Cons nat p x)) = nocc n (Cons nat p (Cons nat m x)).\nProof.\nintros.\nrewrite (nocc_eq2 n p (Cons nat m x)).\napply si_intro.\n intro.\n rewrite nocc_eq2.\n apply (si_intro nat (fun p : nat => p = S (nocc n (Cons nat m x)))).\n  intro.\n  rewrite nocc_eq2.\n  rewrite H.\n  rewrite si_eq1.\n  rewrite nocc_eq2.\n  rewrite H0.\n  rewrite si_eq1.\n  apply refl_equal.\n  intro.\n  rewrite nocc_eq2.\n  rewrite H.\n  rewrite si_eq1.\n  rewrite nocc_eq2.\n  rewrite H0.\n  rewrite si_eq2.\n  apply refl_equal.\n intro.\n rewrite (nocc_eq2 n m x).\n apply si_intro.\n  intro.\n  rewrite nocc_eq2.\n  rewrite H0.\n  rewrite si_eq1.\n  rewrite nocc_eq2.\n  rewrite H.\n  rewrite si_eq2.\n  apply refl_equal.\n  intro.\n  rewrite nocc_eq2.\n  rewrite H0.\n  rewrite si_eq2.\n  rewrite nocc_eq2.\n  rewrite H.\n  rewrite si_eq2.\n  apply refl_equal.\nQed.\n\nTheorem nocc_Cons :\n forall (n m : nat) (x y : list nat),\n nocc n x = nocc n y -> nocc n (Cons nat m x) = nocc n (Cons nat m y).\nProof.\nintros.\nunfold nocc in |- *.\napply si_intro.\n intro.\n rewrite H0.\n simpl in |- *.\n apply eq_S.\n assumption.\n intro.\n rewrite H0.\n simpl in |- *.\n assumption.\nQed.\n\n",
                "context_tokens": 720,
                "proof_start_offset": 9173,
                "proof_end_offset": 9520,
                "proof": "Theorem nocc_ins : forall (x : list nat) (n m : nat), nocc n (ins m x) = nocc n (Cons nat m x).\nProof.\nsimple induction x.\ntrivial.\nintros.\nrewrite ins_eq2.\napply (si_intro (list nat) (fun t : list nat => nocc n t = nocc n (Cons nat m (Cons nat x0 l)))).\ntrivial.\nintro.\nrewrite nocc_Cons_Cons.\napply nocc_Cons.\napply H.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem nocc_ins : forall (x : list nat) (n m : nat), nocc n (ins m x) = nocc n (Cons nat m x).\nProof.\nintros.\nunfold nocc in |- *.\napply le_trans with (S n).\napply le_trans with (S m).\napply le_trans with (S m).\napply le_n_S.\napply le_trans with (S m).\napply le_n_S.\napply le_trans with (S m).\napply le_n_S.\napply le_trans with (S m).\napply le_n_S.\napply le_trans with (S m).\napply le_n_S.\napply le_trans with (S m).\napply le_n_S.\napply le_trans with (S m).\napply le_n_S.\napply le_trans with (S m).\napply le_n_S.\napply le_trans with (S m).\napply le_n_S.\napply le_trans with (S m).\napply le_n_S.\napply le_trans with (S m).\napply le_n_S.\napply le_trans with (S m).\napply le_n_S.\napply le_trans with (Qed.",
                        "correct": false,
                        "error_msg": "File \"./Sorting.v\", line 395, characters 6-14:\nError: The reference le_trans was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: Sorting.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": " (sorted_cdr m). assumption.\nQed.\n\nTheorem sorted_ins :\n forall (n : nat) (x : list nat), sorted x -> sorted (ins n x).\nProof.\nsimple induction x.\n trivial.\n intros.\n rewrite ins_eq2.\n apply si_intro.\n  intros.\n  rewrite sorted_eq3.\n  split. assumption. assumption.\n  intro.\n  apply sorted_ins_Cons. assumption. assumption.\nQed.\n\n(* -- 2 : Le resultat de \"tri_ins\" est une permutation de son entree *)\n(*   ie : meme nombre d'occurrences de chaque element                *)\n\nTheorem nocc_Cons_Cons :\n forall (n m p : nat) (x : list nat),\n nocc n (Cons nat m (Cons nat p x)) = nocc n (Cons nat p (Cons nat m x)).\nProof.\nintros.\nrewrite (nocc_eq2 n p (Cons nat m x)).\napply si_intro.\n intro.\n rewrite nocc_eq2.\n apply (si_intro nat (fun p : nat => p = S (nocc n (Cons nat m x)))).\n  intro.\n  rewrite nocc_eq2.\n  rewrite H.\n  rewrite si_eq1.\n  rewrite nocc_eq2.\n  rewrite H0.\n  rewrite si_eq1.\n  apply refl_equal.\n  intro.\n  rewrite nocc_eq2.\n  rewrite H.\n  rewrite si_eq1.\n  rewrite nocc_eq2.\n  rewrite H0.\n  rewrite si_eq2.\n  apply refl_equal.\n intro.\n rewrite (nocc_eq2 n m x).\n apply si_intro.\n  intro.\n  rewrite nocc_eq2.\n  rewrite H0.\n  rewrite si_eq1.\n  rewrite nocc_eq2.\n  rewrite H.\n  rewrite si_eq2.\n  apply refl_equal.\n  intro.\n  rewrite nocc_eq2.\n  rewrite H0.\n  rewrite si_eq2.\n  rewrite nocc_eq2.\n  rewrite H.\n  rewrite si_eq2.\n  apply refl_equal.\nQed.\n\nTheorem nocc_Cons :\n forall (n m : nat) (x y : list nat),\n nocc n x = nocc n y -> nocc n (Cons nat m x) = nocc n (Cons nat m y).\nProof.\nintros.\nunfold nocc in |- *.\napply si_intro.\n intro.\n rewrite H0.\n simpl in |- *.\n apply eq_S.\n assumption.\n intro.\n rewrite H0.\n simpl in |- *.\n assumption.\nQed.\n\nTheorem nocc_ins :\n forall (x : list nat) (n m : nat), nocc n (ins m x) = nocc n (Cons nat m x).\nProof.\nsimple induction x.\n trivial.\n intros.\n rewrite ins_eq2.\n apply\n  (si_intro (list nat)\n     (fun t : list nat => nocc n t = nocc n (Cons nat m (Cons nat x0 l)))).\n  trivial.\n  intro.\n  rewrite nocc_Cons_Cons.\n  apply nocc_Cons.\n  apply H.\nQed.\n\n",
                "context_tokens": 723,
                "proof_start_offset": 9522,
                "proof_end_offset": 9729,
                "proof": "Theorem nocc_tri_ins : forall (x : list nat) (n : nat), nocc n x = nocc n (tri_ins x).\nProof.\nsimple induction x.\ntrivial.\nintros.\nrewrite tri_ins_eq2.\nrewrite nocc_ins.\napply nocc_Cons.\napply H.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem nocc_tri_ins : forall (x : list nat) (n : nat), nocc n x = nocc n (tri_ins x).\nProof.\nintros.\nunfold nocc in |- *.\napply nocc_Cons_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nocc_Cons.\napply nQed.",
                        "correct": false,
                        "error_msg": "File \"./Sorting.v\", line 412, characters 6-20:\nError: In environment\nx : list nat\nn : nat\nUnable to unify\n \"nocc ?M160 (Cons nat ?M161 (Cons nat ?M162 ?M163)) =\n  nocc ?M160 (Cons nat ?M162 (Cons nat ?M161 ?M163))\" with\n \"(fix nocc (n : nat) (l : list nat) {struct l} : nat :=\n     match l with\n     | @Nil _ => 0\n     | @Cons _ m x => si nat (egal_nat n m) (S (nocc n x)) (nocc n x)\n     end) n x =\n  (fix nocc (n : nat) (l : list nat) {struct l} : nat :=\n     match l with\n     | @Nil _ => 0\n     | @Cons _ m x => si nat (egal_nat n m) (S (nocc n x)) (nocc n x)\n     end) n (tri_ins x)\".\n\nmake[2]: *** [Makefile.coq:663: Sorting.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": "_eq2 n p (Cons nat m x)).\napply si_intro.\n intro.\n rewrite nocc_eq2.\n apply (si_intro nat (fun p : nat => p = S (nocc n (Cons nat m x)))).\n  intro.\n  rewrite nocc_eq2.\n  rewrite H.\n  rewrite si_eq1.\n  rewrite nocc_eq2.\n  rewrite H0.\n  rewrite si_eq1.\n  apply refl_equal.\n  intro.\n  rewrite nocc_eq2.\n  rewrite H.\n  rewrite si_eq1.\n  rewrite nocc_eq2.\n  rewrite H0.\n  rewrite si_eq2.\n  apply refl_equal.\n intro.\n rewrite (nocc_eq2 n m x).\n apply si_intro.\n  intro.\n  rewrite nocc_eq2.\n  rewrite H0.\n  rewrite si_eq1.\n  rewrite nocc_eq2.\n  rewrite H.\n  rewrite si_eq2.\n  apply refl_equal.\n  intro.\n  rewrite nocc_eq2.\n  rewrite H0.\n  rewrite si_eq2.\n  rewrite nocc_eq2.\n  rewrite H.\n  rewrite si_eq2.\n  apply refl_equal.\nQed.\n\nTheorem nocc_Cons :\n forall (n m : nat) (x y : list nat),\n nocc n x = nocc n y -> nocc n (Cons nat m x) = nocc n (Cons nat m y).\nProof.\nintros.\nunfold nocc in |- *.\napply si_intro.\n intro.\n rewrite H0.\n simpl in |- *.\n apply eq_S.\n assumption.\n intro.\n rewrite H0.\n simpl in |- *.\n assumption.\nQed.\n\nTheorem nocc_ins :\n forall (x : list nat) (n m : nat), nocc n (ins m x) = nocc n (Cons nat m x).\nProof.\nsimple induction x.\n trivial.\n intros.\n rewrite ins_eq2.\n apply\n  (si_intro (list nat)\n     (fun t : list nat => nocc n t = nocc n (Cons nat m (Cons nat x0 l)))).\n  trivial.\n  intro.\n  rewrite nocc_Cons_Cons.\n  apply nocc_Cons.\n  apply H.\nQed.\n\nTheorem nocc_tri_ins :\n forall (x : list nat) (n : nat), nocc n x = nocc n (tri_ins x).\nProof.\nsimple induction x.\n trivial.\n intros.\n rewrite tri_ins_eq2.\n rewrite nocc_ins.\n apply nocc_Cons.\n apply H.\nQed.\n\n(* == Tri bubble *)\n\nFixpoint bubble_aux (x : list nat) : nat -> list nat :=\n  fun n : nat =>\n  match x with\n  | Nil => Cons nat n (Nil nat)\n  | Cons n0 l =>\n      si (list nat) (inf_egal n n0) (Cons nat n (bubble_aux l n0))\n        (Cons nat n0 (bubble_aux l n))\n  end.\n\nDefinition bubble (x : list nat) : list nat :=\n  match x with\n  | Nil => Nil nat\n  | Cons n l => bubble_aux l n\n  end.\n\n",
                "context_tokens": 738,
                "proof_start_offset": 10123,
                "proof_end_offset": 10190,
                "proof": "Lemma bubble_eq1 : bubble (Nil nat) = Nil nat.\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma bubble_eq1 : bubble (Nil nat) = Nil nat.\nProof.\nintro.\nrewrite bubextensionnalite.\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (Nil nat).\nelim (NilQed.",
                        "correct": false,
                        "error_msg": "File \"./Sorting.v\", line 439, characters 0-5:\nError: Ltac call to \"intro\" failed.\n       No product even after head-reduction.\n\nmake[2]: *** [Makefile.coq:663: Sorting.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": " (nocc n (Cons nat m x)))).\n  intro.\n  rewrite nocc_eq2.\n  rewrite H.\n  rewrite si_eq1.\n  rewrite nocc_eq2.\n  rewrite H0.\n  rewrite si_eq1.\n  apply refl_equal.\n  intro.\n  rewrite nocc_eq2.\n  rewrite H.\n  rewrite si_eq1.\n  rewrite nocc_eq2.\n  rewrite H0.\n  rewrite si_eq2.\n  apply refl_equal.\n intro.\n rewrite (nocc_eq2 n m x).\n apply si_intro.\n  intro.\n  rewrite nocc_eq2.\n  rewrite H0.\n  rewrite si_eq1.\n  rewrite nocc_eq2.\n  rewrite H.\n  rewrite si_eq2.\n  apply refl_equal.\n  intro.\n  rewrite nocc_eq2.\n  rewrite H0.\n  rewrite si_eq2.\n  rewrite nocc_eq2.\n  rewrite H.\n  rewrite si_eq2.\n  apply refl_equal.\nQed.\n\nTheorem nocc_Cons :\n forall (n m : nat) (x y : list nat),\n nocc n x = nocc n y -> nocc n (Cons nat m x) = nocc n (Cons nat m y).\nProof.\nintros.\nunfold nocc in |- *.\napply si_intro.\n intro.\n rewrite H0.\n simpl in |- *.\n apply eq_S.\n assumption.\n intro.\n rewrite H0.\n simpl in |- *.\n assumption.\nQed.\n\nTheorem nocc_ins :\n forall (x : list nat) (n m : nat), nocc n (ins m x) = nocc n (Cons nat m x).\nProof.\nsimple induction x.\n trivial.\n intros.\n rewrite ins_eq2.\n apply\n  (si_intro (list nat)\n     (fun t : list nat => nocc n t = nocc n (Cons nat m (Cons nat x0 l)))).\n  trivial.\n  intro.\n  rewrite nocc_Cons_Cons.\n  apply nocc_Cons.\n  apply H.\nQed.\n\nTheorem nocc_tri_ins :\n forall (x : list nat) (n : nat), nocc n x = nocc n (tri_ins x).\nProof.\nsimple induction x.\n trivial.\n intros.\n rewrite tri_ins_eq2.\n rewrite nocc_ins.\n apply nocc_Cons.\n apply H.\nQed.\n\n(* == Tri bubble *)\n\nFixpoint bubble_aux (x : list nat) : nat -> list nat :=\n  fun n : nat =>\n  match x with\n  | Nil => Cons nat n (Nil nat)\n  | Cons n0 l =>\n      si (list nat) (inf_egal n n0) (Cons nat n (bubble_aux l n0))\n        (Cons nat n0 (bubble_aux l n))\n  end.\n\nDefinition bubble (x : list nat) : list nat :=\n  match x with\n  | Nil => Nil nat\n  | Cons n l => bubble_aux l n\n  end.\n\nLemma bubble_eq1 : bubble (Nil nat) = Nil nat. \nProof.\n  auto.\nQed.\n\n",
                "context_tokens": 725,
                "proof_start_offset": 10192,
                "proof_end_offset": 10301,
                "proof": "Lemma bubble_eq2 : forall n : nat, bubble (Cons nat n (Nil nat)) = Cons nat n (Nil nat).\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma bubble_eq2 : forall n : nat, bubble (Cons nat n (Nil nat)) = Cons nat n (Nil nat).\nProof.\n  auto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": ".\n  rewrite H0.\n  rewrite si_eq2.\n  apply refl_equal.\n intro.\n rewrite (nocc_eq2 n m x).\n apply si_intro.\n  intro.\n  rewrite nocc_eq2.\n  rewrite H0.\n  rewrite si_eq1.\n  rewrite nocc_eq2.\n  rewrite H.\n  rewrite si_eq2.\n  apply refl_equal.\n  intro.\n  rewrite nocc_eq2.\n  rewrite H0.\n  rewrite si_eq2.\n  rewrite nocc_eq2.\n  rewrite H.\n  rewrite si_eq2.\n  apply refl_equal.\nQed.\n\nTheorem nocc_Cons :\n forall (n m : nat) (x y : list nat),\n nocc n x = nocc n y -> nocc n (Cons nat m x) = nocc n (Cons nat m y).\nProof.\nintros.\nunfold nocc in |- *.\napply si_intro.\n intro.\n rewrite H0.\n simpl in |- *.\n apply eq_S.\n assumption.\n intro.\n rewrite H0.\n simpl in |- *.\n assumption.\nQed.\n\nTheorem nocc_ins :\n forall (x : list nat) (n m : nat), nocc n (ins m x) = nocc n (Cons nat m x).\nProof.\nsimple induction x.\n trivial.\n intros.\n rewrite ins_eq2.\n apply\n  (si_intro (list nat)\n     (fun t : list nat => nocc n t = nocc n (Cons nat m (Cons nat x0 l)))).\n  trivial.\n  intro.\n  rewrite nocc_Cons_Cons.\n  apply nocc_Cons.\n  apply H.\nQed.\n\nTheorem nocc_tri_ins :\n forall (x : list nat) (n : nat), nocc n x = nocc n (tri_ins x).\nProof.\nsimple induction x.\n trivial.\n intros.\n rewrite tri_ins_eq2.\n rewrite nocc_ins.\n apply nocc_Cons.\n apply H.\nQed.\n\n(* == Tri bubble *)\n\nFixpoint bubble_aux (x : list nat) : nat -> list nat :=\n  fun n : nat =>\n  match x with\n  | Nil => Cons nat n (Nil nat)\n  | Cons n0 l =>\n      si (list nat) (inf_egal n n0) (Cons nat n (bubble_aux l n0))\n        (Cons nat n0 (bubble_aux l n))\n  end.\n\nDefinition bubble (x : list nat) : list nat :=\n  match x with\n  | Nil => Nil nat\n  | Cons n l => bubble_aux l n\n  end.\n\nLemma bubble_eq1 : bubble (Nil nat) = Nil nat. \nProof.\n  auto.\nQed.\n\nLemma bubble_eq2 :\n forall n : nat, bubble (Cons nat n (Nil nat)) = Cons nat n (Nil nat).\nProof.\n  auto.\nQed.\n",
                "context_tokens": 682,
                "proof_start_offset": 10302,
                "proof_end_offset": 10522,
                "proof": "Lemma bubble_eq3 : forall (n m : nat) (x : list nat), bubble (Cons nat n (Cons nat m x)) = si (list nat) (inf_egal n m) (Cons nat n (bubble (Cons nat m x))) (Cons nat m (bubble (Cons nat n x))).\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma bubble_eq3 : forall (n m : nat) (x : list nat), bubble (Cons nat n (Cons nat m x)) = si (list nat) (inf_egal n m) (Cons nat n (bubble (Cons nat m x))) (Cons nat m (bubble (Cons nat n x))).\nProof.\n  auto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": " list nat) (n m : nat), nocc n (ins m x) = nocc n (Cons nat m x).\nProof.\nsimple induction x.\n trivial.\n intros.\n rewrite ins_eq2.\n apply\n  (si_intro (list nat)\n     (fun t : list nat => nocc n t = nocc n (Cons nat m (Cons nat x0 l)))).\n  trivial.\n  intro.\n  rewrite nocc_Cons_Cons.\n  apply nocc_Cons.\n  apply H.\nQed.\n\nTheorem nocc_tri_ins :\n forall (x : list nat) (n : nat), nocc n x = nocc n (tri_ins x).\nProof.\nsimple induction x.\n trivial.\n intros.\n rewrite tri_ins_eq2.\n rewrite nocc_ins.\n apply nocc_Cons.\n apply H.\nQed.\n\n(* == Tri bubble *)\n\nFixpoint bubble_aux (x : list nat) : nat -> list nat :=\n  fun n : nat =>\n  match x with\n  | Nil => Cons nat n (Nil nat)\n  | Cons n0 l =>\n      si (list nat) (inf_egal n n0) (Cons nat n (bubble_aux l n0))\n        (Cons nat n0 (bubble_aux l n))\n  end.\n\nDefinition bubble (x : list nat) : list nat :=\n  match x with\n  | Nil => Nil nat\n  | Cons n l => bubble_aux l n\n  end.\n\nLemma bubble_eq1 : bubble (Nil nat) = Nil nat. \nProof.\n  auto.\nQed.\n\nLemma bubble_eq2 :\n forall n : nat, bubble (Cons nat n (Nil nat)) = Cons nat n (Nil nat).\nProof.\n  auto.\nQed.\nLemma bubble_eq3 :\n forall (n m : nat) (x : list nat),\n bubble (Cons nat n (Cons nat m x)) =\n si (list nat) (inf_egal n m) (Cons nat n (bubble (Cons nat m x)))\n   (Cons nat m (bubble (Cons nat n x))).\nProof.\n  auto.\nQed.\n\n\n\nFixpoint bubble_sort0 (n : nat) : list nat -> list nat :=\n  fun x : list nat =>\n  match n with\n  | O => x\n  | S n0 => bubble_sort0 n0 (bubble x)\n  end.\n\nDefinition bubble_sort (x : list nat) : list nat :=\n  bubble_sort0 (length nat x) x.\n\n\n\n(* == Tri fusion *)\n\nFixpoint fusion (x : list nat) : list nat -> list nat :=\n  fun y : list nat =>\n  match x with\n  | Nil => y\n  | Cons n l0 =>\n      (fix fusion_r (y : list nat) : list nat :=\n         match y with\n         | Nil => x\n         | Cons n0 l2 =>\n             si (list nat) (inf_egal n n0)\n               (Cons nat n (fusion l0 (Cons nat n0 l2)))\n               (Cons nat n0 (fusion_r l2))\n         end) y\n  end.\n\n\n",
                "context_tokens": 734,
                "proof_start_offset": 11196,
                "proof_end_offset": 11281,
                "proof": "Lemma fusion_eq1 : forall ms : list nat, fusion (Nil nat) ms = ms.\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma fusion_eq1 : forall ms : list nat, fusion (Nil nat) ms = ms.\nProof.\n  intros.\n  rewrite (fZdivide_eq1 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _Qed.",
                        "correct": false,
                        "error_msg": "File \"./Sorting.v\", line 491, characters 510-511:\nError:\nSyntax error: ',' or ')' expected after [constr:operconstr level 200] (in [constr:operconstr]).\n\nmake[2]: *** [Makefile.coq:663: Sorting.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": "\n apply\n  (si_intro (list nat)\n     (fun t : list nat => nocc n t = nocc n (Cons nat m (Cons nat x0 l)))).\n  trivial.\n  intro.\n  rewrite nocc_Cons_Cons.\n  apply nocc_Cons.\n  apply H.\nQed.\n\nTheorem nocc_tri_ins :\n forall (x : list nat) (n : nat), nocc n x = nocc n (tri_ins x).\nProof.\nsimple induction x.\n trivial.\n intros.\n rewrite tri_ins_eq2.\n rewrite nocc_ins.\n apply nocc_Cons.\n apply H.\nQed.\n\n(* == Tri bubble *)\n\nFixpoint bubble_aux (x : list nat) : nat -> list nat :=\n  fun n : nat =>\n  match x with\n  | Nil => Cons nat n (Nil nat)\n  | Cons n0 l =>\n      si (list nat) (inf_egal n n0) (Cons nat n (bubble_aux l n0))\n        (Cons nat n0 (bubble_aux l n))\n  end.\n\nDefinition bubble (x : list nat) : list nat :=\n  match x with\n  | Nil => Nil nat\n  | Cons n l => bubble_aux l n\n  end.\n\nLemma bubble_eq1 : bubble (Nil nat) = Nil nat. \nProof.\n  auto.\nQed.\n\nLemma bubble_eq2 :\n forall n : nat, bubble (Cons nat n (Nil nat)) = Cons nat n (Nil nat).\nProof.\n  auto.\nQed.\nLemma bubble_eq3 :\n forall (n m : nat) (x : list nat),\n bubble (Cons nat n (Cons nat m x)) =\n si (list nat) (inf_egal n m) (Cons nat n (bubble (Cons nat m x)))\n   (Cons nat m (bubble (Cons nat n x))).\nProof.\n  auto.\nQed.\n\n\n\nFixpoint bubble_sort0 (n : nat) : list nat -> list nat :=\n  fun x : list nat =>\n  match n with\n  | O => x\n  | S n0 => bubble_sort0 n0 (bubble x)\n  end.\n\nDefinition bubble_sort (x : list nat) : list nat :=\n  bubble_sort0 (length nat x) x.\n\n\n\n(* == Tri fusion *)\n\nFixpoint fusion (x : list nat) : list nat -> list nat :=\n  fun y : list nat =>\n  match x with\n  | Nil => y\n  | Cons n l0 =>\n      (fix fusion_r (y : list nat) : list nat :=\n         match y with\n         | Nil => x\n         | Cons n0 l2 =>\n             si (list nat) (inf_egal n n0)\n               (Cons nat n (fusion l0 (Cons nat n0 l2)))\n               (Cons nat n0 (fusion_r l2))\n         end) y\n  end.\n\n\nLemma fusion_eq1 : forall ms : list nat, fusion (Nil nat) ms = ms.\nProof.\n auto.\nQed.\n\n",
                "context_tokens": 720,
                "proof_start_offset": 11283,
                "proof_end_offset": 11406,
                "proof": "Lemma fusion_eq2 : forall (n : nat) (ns : list nat), fusion (Cons nat n ns) (Nil nat) = Cons nat n ns.\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma fusion_eq2 : forall (n : nat) (ns : list nat), fusion (Cons nat n ns) (Nil nat) = Cons nat n ns.\nProof.\n auto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/demos/Sorting.v",
                "context": "tri_ins x).\nProof.\nsimple induction x.\n trivial.\n intros.\n rewrite tri_ins_eq2.\n rewrite nocc_ins.\n apply nocc_Cons.\n apply H.\nQed.\n\n(* == Tri bubble *)\n\nFixpoint bubble_aux (x : list nat) : nat -> list nat :=\n  fun n : nat =>\n  match x with\n  | Nil => Cons nat n (Nil nat)\n  | Cons n0 l =>\n      si (list nat) (inf_egal n n0) (Cons nat n (bubble_aux l n0))\n        (Cons nat n0 (bubble_aux l n))\n  end.\n\nDefinition bubble (x : list nat) : list nat :=\n  match x with\n  | Nil => Nil nat\n  | Cons n l => bubble_aux l n\n  end.\n\nLemma bubble_eq1 : bubble (Nil nat) = Nil nat. \nProof.\n  auto.\nQed.\n\nLemma bubble_eq2 :\n forall n : nat, bubble (Cons nat n (Nil nat)) = Cons nat n (Nil nat).\nProof.\n  auto.\nQed.\nLemma bubble_eq3 :\n forall (n m : nat) (x : list nat),\n bubble (Cons nat n (Cons nat m x)) =\n si (list nat) (inf_egal n m) (Cons nat n (bubble (Cons nat m x)))\n   (Cons nat m (bubble (Cons nat n x))).\nProof.\n  auto.\nQed.\n\n\n\nFixpoint bubble_sort0 (n : nat) : list nat -> list nat :=\n  fun x : list nat =>\n  match n with\n  | O => x\n  | S n0 => bubble_sort0 n0 (bubble x)\n  end.\n\nDefinition bubble_sort (x : list nat) : list nat :=\n  bubble_sort0 (length nat x) x.\n\n\n\n(* == Tri fusion *)\n\nFixpoint fusion (x : list nat) : list nat -> list nat :=\n  fun y : list nat =>\n  match x with\n  | Nil => y\n  | Cons n l0 =>\n      (fix fusion_r (y : list nat) : list nat :=\n         match y with\n         | Nil => x\n         | Cons n0 l2 =>\n             si (list nat) (inf_egal n n0)\n               (Cons nat n (fusion l0 (Cons nat n0 l2)))\n               (Cons nat n0 (fusion_r l2))\n         end) y\n  end.\n\n\nLemma fusion_eq1 : forall ms : list nat, fusion (Nil nat) ms = ms.\nProof.\n auto.\nQed.\n\nLemma fusion_eq2 :\n forall (n : nat) (ns : list nat),\n fusion (Cons nat n ns) (Nil nat) = Cons nat n ns.\nProof.\n auto.\nQed.\n\n",
                "context_tokens": 671,
                "proof_start_offset": 11408,
                "proof_end_offset": 11665,
                "proof": "Lemma fusion_eq3 : forall (n : nat) (ns : list nat) (m : nat) (ms : list nat), fusion (Cons nat n ns) (Cons nat m ms) = si (list nat) (inf_egal n m) (Cons nat n (fusion ns (Cons nat m ms))) (Cons nat m (fusion (Cons nat n ns) ms)).\nProof.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma fusion_eq3 : forall (n : nat) (ns : list nat) (m : nat) (ms : list nat), fusion (Cons nat n ns) (Cons nat m ms) = si (list nat) (inf_egal n m) (Cons nat n (fusion ns (Cons nat m ms))) (Cons nat m (fusion (Cons nat n ns) ms)).\nProof.\n auto.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            }
        ],
        "coqoban": [
            {
                "filepath": "./coq_projects/coqoban/Coqoban_engine.v",
                "context": " _ => b\n  end.\n\nFixpoint stepwest (b : Board) : Board :=\n  match b with\n  | K r b' => K (rowstepwest r) b'\n  | R r b' => R r (stepwest b')\n  | Nothing => Nothing\n  end.\n\n\n(* This one's obvious: *)\nDefinition dostep (r : Direction) (b : Board) : Board :=\n  match r with\n  | No => stepnorth b\n  | Ea => stepeast b\n  | So => stepsouth b\n  | We => stepwest b\n  end.\n\n\n\n(* The game of Sokoban now boils down to: given a board, prove it's solvable.\n   If it's ready (see above: no loose boxes) then it's solvable (constructor OK)\n   and it is also solvable if it's solvable after one step (constructor STEP) *)\nInductive solvable : Board -> Prop :=\n  | OK : forall b : Board, ready b -> solvable b\n  | STEP :\n      forall (b : Board) (d : Direction), solvable (dostep d b) -> solvable b.\n\n\n(* Four tactics to play the game easier: *)\nLtac n :=\n  apply STEP with No; simpl in |- *; try (apply OK; simpl in |- *; tauto).\nLtac e :=\n  apply STEP with Ea; simpl in |- *; try (apply OK; simpl in |- *; tauto).\nLtac s :=\n  apply STEP with So; simpl in |- *; try (apply OK; simpl in |- *; tauto).\nLtac w :=\n  apply STEP with We; simpl in |- *; try (apply OK; simpl in |- *; tauto).\n\n(* Notations *)\nNotation \"'_' a\" := (C Empty a) (at level 0, right associativity).\nNotation \"#  a\" := (C Wall a) (at level 0, right associativity).\nNotation \"+ a\" := (C Keeper a) (at level 0, right associativity).\nNotation \"'X' a\" := (C Box a) (at level 0, right associativity).\nNotation \"'O' a\" := (C Dest a) (at level 0, right associativity).\nNotation \"*  a\" := (C Full a) (at level 0, right associativity).\nNotation \"'o'  a\" := (C KeepOD a) (at level 0, right associativity).\nNotation \"<|\" := Nil (at level 0).\n\nNotation \"|> a b\" := (R a b)\n  (format \"'[v' |>  a '/' b ']'\", at level 0, a, b at level 0).\nNotation \"+> a b\" := (K a b)\n  (format \"'[v' +>  a '/' b ']'\", at level 0, a, b at level 0).\nNotation \"|><|\" := Nothing (format \"|><| '//'\", at level 0).\n\n(* A silly example *)\n\nDefinition b :=\n  |> # # # # # # # <|\n  |> # _ _ _ _ _ # <|\n  +> #\n     _ +\n       X _ _ # <| (* Note: the row containing the keeper (+) must be indicated *)\n  |> #\n     _ _ _ _ _ # <| (*       by +> instead of |>  (constructor K instead of R)  *)\n  |> # _ _ _ _ O # <|\n  |> # # # # # # # <|\n  |><|\n .\n\n",
                "context_tokens": 753,
                "proof_start_offset": 9802,
                "proof_end_offset": 10183,
                "proof": "Goal solvable b.\nProof.\nunfold b in |- *.\napply STEP with Ea.\nunfold dostep in |- *.\nunfold stepeast in |- *.\nunfold rowstepeast in |- *.\nunfold move in |- *.\napply STEP with Ea.\nsimpl in |- *.\nn.\nn.\ne.\ns.\ns.\nSave solution'_b.",
                "end_command": "Save solution'_b.",
                "generated_proofs": [
                    {
                        "proof": "Goal solvable b.\nProof.\nintros H.\napply (H _ H).\napply (H _ H).\nSave solution'_b.",
                        "correct": false,
                        "error_msg": "File \"./Coqoban_engine.v\", line 298, characters 0-8:\nError: No product even after head-reduction.\n\nmake[2]: *** [Makefile.coq:663: Coqoban_engine.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/coqoban/Coqoban_engine.v",
                "context": " ready b -> solvable b\n  | STEP :\n      forall (b : Board) (d : Direction), solvable (dostep d b) -> solvable b.\n\n\n(* Four tactics to play the game easier: *)\nLtac n :=\n  apply STEP with No; simpl in |- *; try (apply OK; simpl in |- *; tauto).\nLtac e :=\n  apply STEP with Ea; simpl in |- *; try (apply OK; simpl in |- *; tauto).\nLtac s :=\n  apply STEP with So; simpl in |- *; try (apply OK; simpl in |- *; tauto).\nLtac w :=\n  apply STEP with We; simpl in |- *; try (apply OK; simpl in |- *; tauto).\n\n(* Notations *)\nNotation \"'_' a\" := (C Empty a) (at level 0, right associativity).\nNotation \"#  a\" := (C Wall a) (at level 0, right associativity).\nNotation \"+ a\" := (C Keeper a) (at level 0, right associativity).\nNotation \"'X' a\" := (C Box a) (at level 0, right associativity).\nNotation \"'O' a\" := (C Dest a) (at level 0, right associativity).\nNotation \"*  a\" := (C Full a) (at level 0, right associativity).\nNotation \"'o'  a\" := (C KeepOD a) (at level 0, right associativity).\nNotation \"<|\" := Nil (at level 0).\n\nNotation \"|> a b\" := (R a b)\n  (format \"'[v' |>  a '/' b ']'\", at level 0, a, b at level 0).\nNotation \"+> a b\" := (K a b)\n  (format \"'[v' +>  a '/' b ']'\", at level 0, a, b at level 0).\nNotation \"|><|\" := Nothing (format \"|><| '//'\", at level 0).\n\n(* A silly example *)\n\nDefinition b :=\n  |> # # # # # # # <|\n  |> # _ _ _ _ _ # <|\n  +> #\n     _ +\n       X _ _ # <| (* Note: the row containing the keeper (+) must be indicated *)\n  |> #\n     _ _ _ _ _ # <| (*       by +> instead of |>  (constructor K instead of R)  *)\n  |> # _ _ _ _ O # <|\n  |> # # # # # # # <|\n  |><|\n .\n\nGoal solvable b.\nunfold b in |- *.\n(* Stepping east, the hard way *)\napply STEP with Ea.\nunfold dostep in |- *.\nunfold stepeast in |- *.\nunfold rowstepeast in |- *.\nunfold move in |- *.\n(* Another step east, still hard *)\napply STEP with Ea.\nsimpl in |- *.\n(* Or using simply the tactics: *)\nn.\n(* We can tell Coq to go north even if there's a wall *)\nn.\ne.\ns.\ns.\nSave solution'_b.\nPrint solution'_b. (* Look at the start of this term! *)\n\nDefinition microban_1 :=\n  |> # # # # <|\n  |> # _ O # <|\n  |> # _ _ # # # <|\n  +> # *  + _ _ # <|\n  |> # _ _ X _ # <|\n  |> # _ _ # # # <|\n  |> # # # # <|\n  |><|\n .\n\n",
                "context_tokens": 748,
                "proof_start_offset": 10408,
                "proof_end_offset": 10585,
                "proof": "Goal solvable microban_1.\nProof.\nunfold microban_1 in |- *.\ns.\nw.\nn.\ne.\ne.\ne.\ns.\nw.\nn.\nw.\nw.\ns.\ns.\ne.\nn.\nw.\nn.\ne.\nn.\nn.\nw.\ns.\ne.\ns.\ns.\ne.\ne.\nn.\nw.\ns.\nw.\nn.\nn.\nSave microban_1_solution.",
                "end_command": "Save microban_1_solution.",
                "generated_proofs": [
                    {
                        "proof": "Goal solvable microban_1.\nunfold niaContentsMap_on in |- *.\nintros.\nunfold niaContentsMap_on in |- *.\nintros.\nunfold niaContentsMap_on in |- *.\nintros.\nunfold niaContentsMap_on in |- *.\nintros.\nunfold niaContentsMap_on in |- *.\nintros.\nunfold nia in H.\nsimpl in H.\napply (H (S n)) in H.\nsimpl in H.\napply (H (S n)) in H.\nsimpl in H.\napply (H (S n)) in H.\nsimpl in H.\napply (H (S n)) in H.\nsimpl in H.\napply (H (S n)) in H.\nsimpl in H.\napply (H (S n)) in H.\nsimpl in H.\napply (H (S n)) in H.\nsimpl in H.\napply (H (S n)) in H.\nsimpl in H.\napply (H (S n)) in H.\nsimpl in H.\napply (H (S n)) in H.\nsimpl in H.\napply (H (S n)) in H.\nsimpl in H.\napply (Save microban_1_solution.",
                        "correct": false,
                        "error_msg": "File \"./Coqoban_engine.v\", line 329, characters 7-24:\nError: The reference niaContentsMap_on was not found in the current\nenvironment.\n\nmake[2]: *** [Makefile.coq:663: Coqoban_engine.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            }
        ],
        "fundamental-arithmetics": [
            {
                "filepath": "./coq_projects/fundamental-arithmetics/permutation.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import Wf_nat.\nRequire Import missing.\nRequire Export List Permutation.\n\n(** we define some notions on lists such as being a permutation of *)\n\n(** insertion x l l' iff l' is l where x has been inserted somewhere *)\nInductive insertion (A:Set) : A -> list A -> list A -> Prop :=\n  head_insertion : forall (x:A)(l:list A),(insertion A x l (x::l))\n|tail_insertion : forall (x y:A)(l l':list A),(insertion A x l l')->(insertion A x (y::l) (y::l')).\n\n",
                "context_tokens": 356,
                "proof_start_offset": 1314,
                "proof_end_offset": 1504,
                "proof": "Lemma insertion_snoc : forall (A:Set)(x:A)(xs:list A),(insertion _ x xs (app xs (cons x nil))).\nProof.\ninduction xs.\nsimpl.\napply head_insertion.\nsimpl.\napply tail_insertion.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma insertion_snoc : forall (A:Set)(x:A)(xs:list A),(insertion _ x xs (app xs (cons x nil))).\nProof.\nintros A x xs.\ninduction xs.\nsimpl in |- *.\nauto.\nintros.\napply (H (x::l0)).\napply (H (x::l0)).\napply (H (x::l0)).\napply (H (x::l0)).\napply (H (x::l0)).\napply (H (x::l0)).\napply (H (x::l0)).\napply (H (x::l0)).\napply (H (x::l0)).\napply (H (x::l0)).\napply (H (x::l0)).\napply (H (x::l0)).\napply (H (x::l0)).\napply (H (x::l0)).\napply (H (x::l0)).\napply (H (x::l0)).\napply (H (x::l0)).\napply (H (x::l0)).\napply (H (x::l0)).\napply (H (x::l0)).\napply (H (x::l0)).\napply (H (x::l0)).\napply (H (x::l0)).\napplyQed.",
                        "correct": false,
                        "error_msg": "File \"./permutation.v\", line 37, characters 7-8:\nError: The reference H was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: permutation.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/permutation.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import Wf_nat.\nRequire Import missing.\nRequire Export List Permutation.\n\n(** we define some notions on lists such as being a permutation of *)\n\n(** insertion x l l' iff l' is l where x has been inserted somewhere *)\nInductive insertion (A:Set) : A -> list A -> list A -> Prop :=\n  head_insertion : forall (x:A)(l:list A),(insertion A x l (x::l))\n|tail_insertion : forall (x y:A)(l l':list A),(insertion A x l l')->(insertion A x (y::l) (y::l')).\n\nLemma insertion_snoc : forall (A:Set)(x:A)(xs:list A),(insertion _ x xs (app xs (cons x nil))).\n  induction xs.\n  simpl.\n  apply head_insertion.\n  simpl.\n  apply tail_insertion.\n  auto.\nQed.\n\n(** if (insertion x l l') then x is in l' *)\n",
                "context_tokens": 435,
                "proof_start_offset": 1551,
                "proof_end_offset": 1679,
                "proof": "Lemma insertion_in : forall (A:Set)(x:A)(l l':list A),(insertion A x l l')->(In x l').\nProof.\nintros.\ninduction H;simpl;tauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma insertion_in : forall (A:Set)(x:A)(l l':list A),(insertion A x l l')->(In x l').\n  induction l.\n  simpl.\n  apply (head_insertion_in A x l l' H).\n  simpl.\n  apply (head_insertion_in A x l' H).\n  simpl.\n  apply (head_insertion_in A x l' H).\n  simpl.\n  apply (head_insertion_in A x l' H).\n  simpl.\n  apply (head_insertion_in A x l' H).\n  simpl.\n  apply (head_insertion_in A x l' H).\n  simpl.\n  apply (head_insertion_in A x l' H).\n  simpl.\n  apply (head_insertion_in A x l' H).\n  simpl.\n  apply (head_insertion_in A x l' H).\n  simpl.\n  apply (head_insertion_in A x l' H).\n  simpl.\n  apply (head_insertion_in A x l' H).\n  simpl.\n  apply (head_insertion_in A x l' H).\n  simpl.\n  apply (head_insertion_in A x l' H).\n  simpl.\n  apply (head_insertion_in A x l' H).\n  simpl.\n  apply (head_insertion_in A xQed.",
                        "correct": false,
                        "error_msg": "File \"./permutation.v\", line 43, characters 9-26:\nError: The reference head_insertion_in was not found in the current\nenvironment.\n\nmake[2]: *** [Makefile.coq:663: permutation.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/permutation.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import Wf_nat.\nRequire Import missing.\nRequire Export List Permutation.\n\n(** we define some notions on lists such as being a permutation of *)\n\n(** insertion x l l' iff l' is l where x has been inserted somewhere *)\nInductive insertion (A:Set) : A -> list A -> list A -> Prop :=\n  head_insertion : forall (x:A)(l:list A),(insertion A x l (x::l))\n|tail_insertion : forall (x y:A)(l l':list A),(insertion A x l l')->(insertion A x (y::l) (y::l')).\n\nLemma insertion_snoc : forall (A:Set)(x:A)(xs:list A),(insertion _ x xs (app xs (cons x nil))).\n  induction xs.\n  simpl.\n  apply head_insertion.\n  simpl.\n  apply tail_insertion.\n  auto.\nQed.\n\n(** if (insertion x l l') then x is in l' *)\nLemma insertion_in : forall (A:Set)(x:A)(l l':list A),(insertion A x l l')->(In x l').\n  intros.\n  induction H;simpl;tauto.\nQed.\n\n(** if (insertion x l l') then l is included in l' *)\n",
                "context_tokens": 500,
                "proof_start_offset": 1735,
                "proof_end_offset": 1960,
                "proof": "Lemma insertion_inclusion : forall (A:Set)(x:A)(l l':list A),(insertion A x l l')->forall (y:A),(In y l)->(In y l').\nProof.\ninduction l;simpl;try tauto;intros.\ninversion H;simpl;try tauto.\ncase H0;try tauto.\nright;auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma insertion_inclusion : forall (A:Set)(x:A)(l l':list A),(insertion A x l l')->forall (y:A),(In y l)->(In y l').\n  intros.\n  induction H;simpl; tauto.\n  destruct (insertion_in H0 H1).\n  destruct (insertion_in H0 H1).\n  destruct (insertion_in H0 H1).\n  destruct (insertion_in H0 H1).\n  destruct (insertion_in H0 H1).\n  destruct (insertion_in H0 H1).\n  destruct (insertion_in H0 H1).\n  destruct (insertion_in H0 H1).\n  destruct (insertion_in H0 H1).\n  destruct (insertion_in H0 H1).\n  destruct (insertion_in H0 H1).\n  destruct (insertion_in H0 H1).\n  destruct (insertion_in H0 H1).\n  destruct (insertion_in H0 H1).\n  destruct (insertion_in H0 H1).\n  destruct (insertion_in H0 H1).\n  destruct (insertion_in H0 H1).\n  destruct (insertion_in H0 H1).\n  destruct (insertion_in H0 H1).\n  destruct (insertion_in H0 H1).\n  destruct (insertion_in H0 H1).\n  destruct (insertion_in H0 H1).\n  destruct (Qed.",
                        "correct": false,
                        "error_msg": "File \"./permutation.v\", line 48, characters 21-26:\nError:\nIn nested Ltac calls to \"tauto\", \"<Coq.Init.Tauto.with_uniform_flags>\",\n\"<tauto_plugin::with_uniform_flags@0>\",\n\"<tauto_plugin::with_uniform_flags@0>\", \"f\" (bound to\nfun flags => <Coq.Init.Tauto.tauto_gen> flags),\n\"<Coq.Init.Tauto.tauto_gen>\" and \"<Coq.Init.Tauto.tauto_classical>\", last\ncall failed.\nTactic failure: tauto failed.\n\nmake[2]: *** [Makefile.coq:663: permutation.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/permutation.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import Wf_nat.\nRequire Import missing.\nRequire Export List Permutation.\n\n(** we define some notions on lists such as being a permutation of *)\n\n(** insertion x l l' iff l' is l where x has been inserted somewhere *)\nInductive insertion (A:Set) : A -> list A -> list A -> Prop :=\n  head_insertion : forall (x:A)(l:list A),(insertion A x l (x::l))\n|tail_insertion : forall (x y:A)(l l':list A),(insertion A x l l')->(insertion A x (y::l) (y::l')).\n\nLemma insertion_snoc : forall (A:Set)(x:A)(xs:list A),(insertion _ x xs (app xs (cons x nil))).\n  induction xs.\n  simpl.\n  apply head_insertion.\n  simpl.\n  apply tail_insertion.\n  auto.\nQed.\n\n(** if (insertion x l l') then x is in l' *)\nLemma insertion_in : forall (A:Set)(x:A)(l l':list A),(insertion A x l l')->(In x l').\n  intros.\n  induction H;simpl;tauto.\nQed.\n\n(** if (insertion x l l') then l is included in l' *)\nLemma insertion_inclusion : forall (A:Set)(x:A)(l l':list A),(insertion A x l l')->forall (y:A),(In y l)->(In y l').\n  induction l;simpl;try tauto;intros.\n  inversion H;simpl;try tauto.\n  case H0;try tauto.\n  right;auto.\nQed.\n\n(** if x is in l, then there is l' such that (insertion x l' l) *)\n",
                "context_tokens": 603,
                "proof_start_offset": 2029,
                "proof_end_offset": 2310,
                "proof": "Lemma in_insertion : forall (A:Set)(x:A)(l:list A),(In x l)->exists l':list A,(insertion A x l' l).\nProof.\ninduction l;simpl;try tauto;intros.\ncase H;intro.\nrewrite H0;exists l;apply head_insertion.\nelim (IHl H0);intro l';intro.\nexists (a::l');apply tail_insertion;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma in_insertion : forall (A:Set)(x:A)(l:list A),(In x l)->exists l':list A,(insertion A x l' l).\n  induction l;simpl;try tauto.\n  inversion H;simpl;try tauto.\n  inversion H0;simpl;try tauto.\n  inversion H0;simpl;try tauto.\n  inversion H0;simpl;try tauto.\n  inversion H0;simpl;try tauto.\n  inversion H0;simpl;try tauto.\n  inversion H0;simpl;try tauto.\n  inversion H0;simpl;try tauto.\n  inversion H0;simpl;try tauto.\n  inversion H0;simpl;try tauto.\n  inversion H0;simpl;try tauto.\n  inversion H0;simpl;try tauto.\n  inversion H0;simpl;try tauto.\n  inversion H0;simpl;try tauto.\n  inversion H0;simpl;try tauto.\n  inversion H0;simpl;try tauto.\n  inversion H0;simpl;try tauto.\n  inversion H0;simpl;try tauto.\n  inversion H0;simpl;try tauto.\n  inversion H0;simpl;try tauto.\n  inversion H0;simpl;try tauto.\n  inversion H0;simpl;try tauto.\n  inversion H0;simpl;try tauto.\n  inversion H0;simpl;try tauto.\n  inversion H0;simpl;tryQed.",
                        "correct": false,
                        "error_msg": "File \"./permutation.v\", line 56, characters 2-13:\nError: No such hypothesis: H\n\nmake[2]: *** [Makefile.coq:663: permutation.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/permutation.v",
                "context": "riais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import Wf_nat.\nRequire Import missing.\nRequire Export List Permutation.\n\n(** we define some notions on lists such as being a permutation of *)\n\n(** insertion x l l' iff l' is l where x has been inserted somewhere *)\nInductive insertion (A:Set) : A -> list A -> list A -> Prop :=\n  head_insertion : forall (x:A)(l:list A),(insertion A x l (x::l))\n|tail_insertion : forall (x y:A)(l l':list A),(insertion A x l l')->(insertion A x (y::l) (y::l')).\n\nLemma insertion_snoc : forall (A:Set)(x:A)(xs:list A),(insertion _ x xs (app xs (cons x nil))).\n  induction xs.\n  simpl.\n  apply head_insertion.\n  simpl.\n  apply tail_insertion.\n  auto.\nQed.\n\n(** if (insertion x l l') then x is in l' *)\nLemma insertion_in : forall (A:Set)(x:A)(l l':list A),(insertion A x l l')->(In x l').\n  intros.\n  induction H;simpl;tauto.\nQed.\n\n(** if (insertion x l l') then l is included in l' *)\nLemma insertion_inclusion : forall (A:Set)(x:A)(l l':list A),(insertion A x l l')->forall (y:A),(In y l)->(In y l').\n  induction l;simpl;try tauto;intros.\n  inversion H;simpl;try tauto.\n  case H0;try tauto.\n  right;auto.\nQed.\n\n(** if x is in l, then there is l' such that (insertion x l' l) *)\nLemma in_insertion : forall (A:Set)(x:A)(l:list A),(In x l)->exists l':list A,(insertion A x l' l).\n  induction l;simpl;try tauto;intros.\n  case H;intro.\n  rewrite H0;exists l;apply head_insertion.\n  elim (IHl H0);intro l';intro.\n  exists (a::l');apply tail_insertion;trivial.\nQed.\n\n(** if (insertion x l l') and y is in l' then y=x or y is in l *)\n",
                "context_tokens": 694,
                "proof_start_offset": 2378,
                "proof_end_offset": 2605,
                "proof": "Lemma in_insertion_inv : forall (A:Set)(x y:A)(l l':list A),(insertion A y l l')->(In x l')->(x=y)\\/(In x l).\nProof.\nintros.\ninduction H;simpl in H0.\ncase H0;intro H1;try (symmetry in H1);tauto.\ncase H0;simpl;intro;tauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma in_insertion_inv : forall (A:Set)(x y:A)(l l':list A),(insertion A y l l')->(In x l')->(x=y)\\/(In x l).\ninduction l;simpl;try tauto;intros.\ninversion H;clear H;auto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./permutation.v\", line 66, characters 0-4:\nError: Attempt to save an incomplete proof (in proof in_insertion_inv)\n\nmake[2]: *** [Makefile.coq:663: permutation.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/permutation.v",
                "context": "\n(* 02110-1301 USA *)\n\nRequire Import Wf_nat.\nRequire Import missing.\nRequire Export List Permutation.\n\n(** we define some notions on lists such as being a permutation of *)\n\n(** insertion x l l' iff l' is l where x has been inserted somewhere *)\nInductive insertion (A:Set) : A -> list A -> list A -> Prop :=\n  head_insertion : forall (x:A)(l:list A),(insertion A x l (x::l))\n|tail_insertion : forall (x y:A)(l l':list A),(insertion A x l l')->(insertion A x (y::l) (y::l')).\n\nLemma insertion_snoc : forall (A:Set)(x:A)(xs:list A),(insertion _ x xs (app xs (cons x nil))).\n  induction xs.\n  simpl.\n  apply head_insertion.\n  simpl.\n  apply tail_insertion.\n  auto.\nQed.\n\n(** if (insertion x l l') then x is in l' *)\nLemma insertion_in : forall (A:Set)(x:A)(l l':list A),(insertion A x l l')->(In x l').\n  intros.\n  induction H;simpl;tauto.\nQed.\n\n(** if (insertion x l l') then l is included in l' *)\nLemma insertion_inclusion : forall (A:Set)(x:A)(l l':list A),(insertion A x l l')->forall (y:A),(In y l)->(In y l').\n  induction l;simpl;try tauto;intros.\n  inversion H;simpl;try tauto.\n  case H0;try tauto.\n  right;auto.\nQed.\n\n(** if x is in l, then there is l' such that (insertion x l' l) *)\nLemma in_insertion : forall (A:Set)(x:A)(l:list A),(In x l)->exists l':list A,(insertion A x l' l).\n  induction l;simpl;try tauto;intros.\n  case H;intro.\n  rewrite H0;exists l;apply head_insertion.\n  elim (IHl H0);intro l';intro.\n  exists (a::l');apply tail_insertion;trivial.\nQed.\n\n(** if (insertion x l l') and y is in l' then y=x or y is in l *)\nLemma in_insertion_inv : forall (A:Set)(x y:A)(l l':list A),(insertion A y l l')->(In x l')->(x=y)\\/(In x l).\n  intros.\n  induction H;simpl in H0.\n  case H0;intro H1;try (symmetry in H1);tauto.\n  case H0;simpl;intro;tauto.\nQed.\n\n(** a list is a set iff all the elements are pairwise distinct *)\nInductive is_set (A:Set) : list A->Prop :=\n  nil_is_set : (is_set A nil)\n|cons_is_set : forall (x:A)(l:list A),(is_set A l)->~(In x l)->(is_set A (x::l)).\n\n(** if (insertion x l l') and l' is a set then l is a set *)\n",
                "context_tokens": 714,
                "proof_start_offset": 2890,
                "proof_end_offset": 3177,
                "proof": "Lemma is_set_insertion : forall (A:Set)(l l':list A)(x:A),(insertion A x l l')->(is_set A l')->(is_set A l).\nProof.\ninduction 1;intros.\ninversion H;trivial.\ninversion H0.\napply cons_is_set.\napply IHinsertion;trivial.\nintro;apply H4;apply (insertion_inclusion A x l l');trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma is_set_insertion : forall (A:Set)(l l':list A)(x:A),(insertion A x l l')->(is_set A l')->(is_set A l).\nProof.\n induction l;simpl;try tauto;intros.\ninversion H;clear H0;auto.\ninversion H;clear H0;auto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./permutation.v\", line 81, characters 0-4:\nError: Attempt to save an incomplete proof (in proof is_set_insertion)\n\nmake[2]: *** [Makefile.coq:663: permutation.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/permutation.v",
                "context": "list A),(insertion A x l l')->(insertion A x (y::l) (y::l')).\n\nLemma insertion_snoc : forall (A:Set)(x:A)(xs:list A),(insertion _ x xs (app xs (cons x nil))).\n  induction xs.\n  simpl.\n  apply head_insertion.\n  simpl.\n  apply tail_insertion.\n  auto.\nQed.\n\n(** if (insertion x l l') then x is in l' *)\nLemma insertion_in : forall (A:Set)(x:A)(l l':list A),(insertion A x l l')->(In x l').\n  intros.\n  induction H;simpl;tauto.\nQed.\n\n(** if (insertion x l l') then l is included in l' *)\nLemma insertion_inclusion : forall (A:Set)(x:A)(l l':list A),(insertion A x l l')->forall (y:A),(In y l)->(In y l').\n  induction l;simpl;try tauto;intros.\n  inversion H;simpl;try tauto.\n  case H0;try tauto.\n  right;auto.\nQed.\n\n(** if x is in l, then there is l' such that (insertion x l' l) *)\nLemma in_insertion : forall (A:Set)(x:A)(l:list A),(In x l)->exists l':list A,(insertion A x l' l).\n  induction l;simpl;try tauto;intros.\n  case H;intro.\n  rewrite H0;exists l;apply head_insertion.\n  elim (IHl H0);intro l';intro.\n  exists (a::l');apply tail_insertion;trivial.\nQed.\n\n(** if (insertion x l l') and y is in l' then y=x or y is in l *)\nLemma in_insertion_inv : forall (A:Set)(x y:A)(l l':list A),(insertion A y l l')->(In x l')->(x=y)\\/(In x l).\n  intros.\n  induction H;simpl in H0.\n  case H0;intro H1;try (symmetry in H1);tauto.\n  case H0;simpl;intro;tauto.\nQed.\n\n(** a list is a set iff all the elements are pairwise distinct *)\nInductive is_set (A:Set) : list A->Prop :=\n  nil_is_set : (is_set A nil)\n|cons_is_set : forall (x:A)(l:list A),(is_set A l)->~(In x l)->(is_set A (x::l)).\n\n(** if (insertion x l l') and l' is a set then l is a set *)\nLemma is_set_insertion : forall (A:Set)(l l':list A)(x:A),(insertion A x l l')->(is_set A l')->(is_set A l).\n  induction 1;intros.\n  inversion H;trivial.\n  inversion H0.\n  apply cons_is_set.\n  apply IHinsertion;trivial.\n  intro;apply H4;apply (insertion_inclusion A x l l');trivial.\nQed.\n\n(** if (insertion x l l') and l' is a set then x is not in l *)\n",
                "context_tokens": 713,
                "proof_start_offset": 3243,
                "proof_end_offset": 3575,
                "proof": "Lemma is_set_insertion_in : forall (A:Set)(l l':list A)(x:A),(insertion A x l l')->(is_set A l')->~(In x l).\nProof.\ninduction l;simpl;try tauto;intros.\ninversion H;rewrite <- H3 in H0;inversion H0.\nsimpl in H7;trivial.\nintro.\ncase H10;intro.\napply H9;rewrite H11;eapply insertion_in;apply H5.\nelim (IHl l'0 x H5 H8 H11).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma is_set_insertion_in : forall (A:Set)(l l':list A)(x:A),(insertion A x l l')->(is_set A l')->~(In x l).\n  induction l;simpl;try tauto;intros.\n  inversion H;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n  inversion H0;trivial.\n Qed.",
                        "correct": false,
                        "error_msg": "File \"./permutation.v\", line 123, characters 1-5:\nError: Attempt to save an incomplete proof (in proof is_set_insertion_in)\n\nmake[2]: *** [Makefile.coq:663: permutation.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/permutation.v",
                "context": "|cons_is_set : forall (x:A)(l:list A),(is_set A l)->~(In x l)->(is_set A (x::l)).\n\n(** if (insertion x l l') and l' is a set then l is a set *)\nLemma is_set_insertion : forall (A:Set)(l l':list A)(x:A),(insertion A x l l')->(is_set A l')->(is_set A l).\n  induction 1;intros.\n  inversion H;trivial.\n  inversion H0.\n  apply cons_is_set.\n  apply IHinsertion;trivial.\n  intro;apply H4;apply (insertion_inclusion A x l l');trivial.\nQed.\n\n(** if (insertion x l l') and l' is a set then x is not in l *)\nLemma is_set_insertion_in : forall (A:Set)(l l':list A)(x:A),(insertion A x l l')->(is_set A l')->~(In x l).\n  induction l;simpl;try tauto;intros.\n  inversion H;rewrite <- H3 in H0;inversion H0.\n  simpl in H7;trivial.\n  intro.\n  case H10;intro.\n  apply H9;rewrite H11;eapply insertion_in;apply H5.\n  elim (IHl l'0 x H5 H8 H11).\nQed.\n\n(** if l is a set, x not in l and (insertion x l l') then l' is a set *)\nLemma insertion_is_set : forall (A:Set)(l:list A),(is_set _ l)->forall (x:A),~(In x l)->forall (l':list A),(insertion _ x l l')->(is_set _ l').\n  induction 1.\n  intros.\n  inversion H0.\n  apply cons_is_set.\n  apply nil_is_set.\n  auto.\n  intros.\n  inversion H2.\n  subst x1.\n  subst l0.\n  subst l'.\n  apply cons_is_set.\n  eapply IHis_set.\n  apply H0.\n  apply head_insertion.\n  auto.\n  subst x1;subst y;subst l0.\n  apply cons_is_set.\n  eapply IHis_set with x0;auto.\n  red;intro.\n  apply H1.\n  simpl.\n  right;auto.\n  red;intro.\n  case (in_insertion_inv _ _ _ _ _ H7 H3);intro.\n  apply H1.\n  simpl.\n  left;auto.\n  apply H0.\n  auto.\nQed.\n\n(** l' is a permutation of l *)\nInductive is_permutation (A:Set) : list A->list A->Prop :=\n  nil_is_permutation : (is_permutation A nil nil)\n|cons_is_permutation : forall (l l':list A),(is_permutation A l l')->forall (x:A)(l'':(list A)),(insertion A x l' l'')->(is_permutation A (x::l) l'').\n\n(** if l and l' have the same content and are pairwise distinct then l' is a permutation of l *)\n",
                "context_tokens": 697,
                "proof_start_offset": 4672,
                "proof_end_offset": 5534,
                "proof": "Lemma is_set_eq_impl_permutation : forall (A:Set)(l l':list A),(forall (x:A),(In x l)<->(In x l'))->(is_set A l)->(is_set A l')->(is_permutation A l l').\nProof.\ninduction l;intros;simpl in H.\ndestruct l'.\napply nil_is_permutation.\nelim (H a);intros.\nelim H3;simpl;tauto.\ninversion H0.\nsymmetry in H2;rewrite H2 in H;elim (H a);intros.\nrewrite H2 in H6;rewrite H2.\nassert (In x l');auto.\nelim (in_insertion A x l' H8).\nintro l'';intro.\napply cons_is_permutation with l'';trivial.\napply IHl;trivial.\nsplit;intro.\nelim (H x0);intros.\nelim (in_insertion_inv A x0 x l'' l');auto.\nintro;rewrite H13 in H10;rewrite H2 in H5;tauto.\nelim (H x0);intros.\ncase H12;try tauto.\napply (insertion_inclusion A x l'' l');trivial.\nintro;rewrite <- H13 in H10.\nelim (is_set_insertion_in A l'' l' x);trivial.\neapply is_set_insertion;eauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma is_set_eq_impl_permutation : forall (A:Set)(l l':list A),(forall (x:A),(In x l)<->(In x l'))->(is_set A l)->(is_set A l')->(is_permutation A l l').\nProof.\ninduction l; simpl;intros.\ninversion H; auto.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1.\ninversion H1Qed.",
                        "correct": false,
                        "error_msg": "File \"./permutation.v\", line 139, characters 0-11:\nError: The type of H is not inductive.\n\nmake[2]: *** [Makefile.coq:663: permutation.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/permutation.v",
                "context": " insertion_in;apply H5.\n  elim (IHl l'0 x H5 H8 H11).\nQed.\n\n(** if l is a set, x not in l and (insertion x l l') then l' is a set *)\nLemma insertion_is_set : forall (A:Set)(l:list A),(is_set _ l)->forall (x:A),~(In x l)->forall (l':list A),(insertion _ x l l')->(is_set _ l').\n  induction 1.\n  intros.\n  inversion H0.\n  apply cons_is_set.\n  apply nil_is_set.\n  auto.\n  intros.\n  inversion H2.\n  subst x1.\n  subst l0.\n  subst l'.\n  apply cons_is_set.\n  eapply IHis_set.\n  apply H0.\n  apply head_insertion.\n  auto.\n  subst x1;subst y;subst l0.\n  apply cons_is_set.\n  eapply IHis_set with x0;auto.\n  red;intro.\n  apply H1.\n  simpl.\n  right;auto.\n  red;intro.\n  case (in_insertion_inv _ _ _ _ _ H7 H3);intro.\n  apply H1.\n  simpl.\n  left;auto.\n  apply H0.\n  auto.\nQed.\n\n(** l' is a permutation of l *)\nInductive is_permutation (A:Set) : list A->list A->Prop :=\n  nil_is_permutation : (is_permutation A nil nil)\n|cons_is_permutation : forall (l l':list A),(is_permutation A l l')->forall (x:A)(l'':(list A)),(insertion A x l' l'')->(is_permutation A (x::l) l'').\n\n(** if l and l' have the same content and are pairwise distinct then l' is a permutation of l *)\nLemma is_set_eq_impl_permutation : forall (A:Set)(l l':list A),(forall (x:A),(In x l)<->(In x l'))->(is_set A l)->(is_set A l')->(is_permutation A l l').\n  induction l;intros;simpl in H.\n  destruct l'.\n  apply nil_is_permutation.\n  elim (H a);intros.\n  elim H3;simpl;tauto.\n  inversion H0.\n  symmetry in H2;rewrite H2 in H;elim (H a);intros.\n  rewrite H2 in H6;rewrite H2.\n  assert (In x l');auto.\n  elim (in_insertion A x l' H8).\n  intro l'';intro.\n  apply cons_is_permutation with l'';trivial.\n  apply IHl;trivial.\n  split;intro.\n  elim (H x0);intros.\n  elim (in_insertion_inv A x0 x l'' l');auto.\n  intro;rewrite H13 in H10;rewrite H2 in H5;tauto.\n  elim (H x0);intros.\n  case H12;try tauto.\n  apply (insertion_inclusion A x l'' l');trivial.\n  intro;rewrite <- H13 in H10.\n  elim (is_set_insertion_in A l'' l' x);trivial.\n  eapply is_set_insertion;eauto.\nQed.\n\n(** is_permutation is reflexive *)\n",
                "context_tokens": 732,
                "proof_start_offset": 5571,
                "proof_end_offset": 5760,
                "proof": "Lemma is_permutation_refl : forall (A:Set)(l:list A),(is_permutation A l l).\nProof.\ninduction l.\napply nil_is_permutation.\neapply cons_is_permutation;[apply IHl | apply head_insertion].\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma is_permutation_refl : forall (A:Set)(l:list A),(is_permutation A l l).\nProof.\n  induction l;intros;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.\n  destruct l0;simpl;auto.Qed.",
                        "correct": false,
                        "error_msg": "File \"./permutation.v\", line 166, characters 11-13:\nError: The reference l0 was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: permutation.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/permutation.v",
                "context": " _ x l l')->(is_set _ l').\n  induction 1.\n  intros.\n  inversion H0.\n  apply cons_is_set.\n  apply nil_is_set.\n  auto.\n  intros.\n  inversion H2.\n  subst x1.\n  subst l0.\n  subst l'.\n  apply cons_is_set.\n  eapply IHis_set.\n  apply H0.\n  apply head_insertion.\n  auto.\n  subst x1;subst y;subst l0.\n  apply cons_is_set.\n  eapply IHis_set with x0;auto.\n  red;intro.\n  apply H1.\n  simpl.\n  right;auto.\n  red;intro.\n  case (in_insertion_inv _ _ _ _ _ H7 H3);intro.\n  apply H1.\n  simpl.\n  left;auto.\n  apply H0.\n  auto.\nQed.\n\n(** l' is a permutation of l *)\nInductive is_permutation (A:Set) : list A->list A->Prop :=\n  nil_is_permutation : (is_permutation A nil nil)\n|cons_is_permutation : forall (l l':list A),(is_permutation A l l')->forall (x:A)(l'':(list A)),(insertion A x l' l'')->(is_permutation A (x::l) l'').\n\n(** if l and l' have the same content and are pairwise distinct then l' is a permutation of l *)\nLemma is_set_eq_impl_permutation : forall (A:Set)(l l':list A),(forall (x:A),(In x l)<->(In x l'))->(is_set A l)->(is_set A l')->(is_permutation A l l').\n  induction l;intros;simpl in H.\n  destruct l'.\n  apply nil_is_permutation.\n  elim (H a);intros.\n  elim H3;simpl;tauto.\n  inversion H0.\n  symmetry in H2;rewrite H2 in H;elim (H a);intros.\n  rewrite H2 in H6;rewrite H2.\n  assert (In x l');auto.\n  elim (in_insertion A x l' H8).\n  intro l'';intro.\n  apply cons_is_permutation with l'';trivial.\n  apply IHl;trivial.\n  split;intro.\n  elim (H x0);intros.\n  elim (in_insertion_inv A x0 x l'' l');auto.\n  intro;rewrite H13 in H10;rewrite H2 in H5;tauto.\n  elim (H x0);intros.\n  case H12;try tauto.\n  apply (insertion_inclusion A x l'' l');trivial.\n  intro;rewrite <- H13 in H10.\n  elim (is_set_insertion_in A l'' l' x);trivial.\n  eapply is_set_insertion;eauto.\nQed.\n\n(** is_permutation is reflexive *)\nLemma is_permutation_refl : forall (A:Set)(l:list A),(is_permutation A l l).\n  induction l.\n  apply nil_is_permutation.\n  eapply cons_is_permutation;[apply IHl | apply head_insertion].\nQed.\n\n(** if l' is l where x has been inserted then l' is a permutation of x::l *)\n",
                "context_tokens": 716,
                "proof_start_offset": 5839,
                "proof_end_offset": 6163,
                "proof": "Lemma insertion_is_permutation : forall (A:Set)(l l':list A)(x:A),(insertion A x l l')->(is_permutation A (x::l) l').\nProof.\ninduction 1.\napply cons_is_permutation with l;[apply is_permutation_refl | apply head_insertion].\napply cons_is_permutation with (y::l);[apply is_permutation_refl | apply tail_insertion;trivial].\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma insertion_is_permutation : forall (A:Set)(l l':list A)(x:A),(insertion A x l l')->(is_permutation A (x::l) l').\n  induction l.\n  simpl.\n  tauto.\n  simpl.\n  tauto.\n  simpl.\n  tauto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./permutation.v\", line 173, characters 2-7:\nError:\nIn nested Ltac calls to \"tauto\", \"<Coq.Init.Tauto.with_uniform_flags>\",\n\"<tauto_plugin::with_uniform_flags@0>\",\n\"<tauto_plugin::with_uniform_flags@0>\", \"f\" (bound to\nfun flags => <Coq.Init.Tauto.tauto_gen> flags),\n\"<Coq.Init.Tauto.tauto_gen>\" and \"<Coq.Init.Tauto.tauto_classical>\", last\ncall failed.\nTactic failure: tauto failed.\n\nmake[2]: *** [Makefile.coq:663: permutation.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/permutation.v",
                "context": ".\n  auto.\nQed.\n\n(** l' is a permutation of l *)\nInductive is_permutation (A:Set) : list A->list A->Prop :=\n  nil_is_permutation : (is_permutation A nil nil)\n|cons_is_permutation : forall (l l':list A),(is_permutation A l l')->forall (x:A)(l'':(list A)),(insertion A x l' l'')->(is_permutation A (x::l) l'').\n\n(** if l and l' have the same content and are pairwise distinct then l' is a permutation of l *)\nLemma is_set_eq_impl_permutation : forall (A:Set)(l l':list A),(forall (x:A),(In x l)<->(In x l'))->(is_set A l)->(is_set A l')->(is_permutation A l l').\n  induction l;intros;simpl in H.\n  destruct l'.\n  apply nil_is_permutation.\n  elim (H a);intros.\n  elim H3;simpl;tauto.\n  inversion H0.\n  symmetry in H2;rewrite H2 in H;elim (H a);intros.\n  rewrite H2 in H6;rewrite H2.\n  assert (In x l');auto.\n  elim (in_insertion A x l' H8).\n  intro l'';intro.\n  apply cons_is_permutation with l'';trivial.\n  apply IHl;trivial.\n  split;intro.\n  elim (H x0);intros.\n  elim (in_insertion_inv A x0 x l'' l');auto.\n  intro;rewrite H13 in H10;rewrite H2 in H5;tauto.\n  elim (H x0);intros.\n  case H12;try tauto.\n  apply (insertion_inclusion A x l'' l');trivial.\n  intro;rewrite <- H13 in H10.\n  elim (is_set_insertion_in A l'' l' x);trivial.\n  eapply is_set_insertion;eauto.\nQed.\n\n(** is_permutation is reflexive *)\nLemma is_permutation_refl : forall (A:Set)(l:list A),(is_permutation A l l).\n  induction l.\n  apply nil_is_permutation.\n  eapply cons_is_permutation;[apply IHl | apply head_insertion].\nQed.\n\n(** if l' is l where x has been inserted then l' is a permutation of x::l *)\nLemma insertion_is_permutation : forall (A:Set)(l l':list A)(x:A),(insertion A x l l')->(is_permutation A (x::l) l').\n  induction 1.\n  apply cons_is_permutation with l;[apply is_permutation_refl | apply head_insertion].\n  apply cons_is_permutation with (y::l);[apply is_permutation_refl | apply tail_insertion;trivial].\nQed.\n\n(** if l1 is l0 where x has been inserted and l2 is l1 where y has been inserted then there is l3 such that l3 is l0 where y has been inserted and l2 is l3 where x has been inserted *)\n",
                "context_tokens": 682,
                "proof_start_offset": 6350,
                "proof_end_offset": 6985,
                "proof": "Lemma insertion_trans : forall (A:Set)(l0 l1:list A)(x:A),(insertion A x l0 l1)->forall (l2:list A)(y:A),(insertion A y l1 l2)->exists l3:list A,(insertion A y l0 l3)/\\(insertion A x l3 l2).\nProof.\ninduction 1;intros.\ninversion H.\nexists (y::l);split;[apply head_insertion | apply tail_insertion;apply head_insertion].\nexists l';split;[trivial | apply head_insertion].\ninversion H0.\nexists (y0::y::l);split;[apply head_insertion | apply tail_insertion;apply tail_insertion;trivial].\nelim (IHinsertion l'0 y0 H5);intro l3;intro.\nelim H6;intros.\nexists (y::l3);split;[apply tail_insertion | apply tail_insertion];trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma insertion_trans : forall (A:Set)(l0 l1:list A)(x:A),(insertion A x l0 l1)->forall (l2:list A)(y:A),(insertion A y l1 l2)->exists l3:list A,(insertion A y l0 l3)/\\(insertion A x l3 l2).\n  induction l0.\n  simpl.\n  destruct l1.\n  simpl.\n  destruct l2.\n  simpl.\n  destruct l2.\n  simpl.\n  destruct l2.\n  simpl.\n  destruct l2.\n  simpl.\n  destruct l2.\n  simpl.\n  destruct l2.\n  simpl.\n  destruct l3.\n  simpl.\n  destruct l3.\n  simpl.\n  destruct l3.\n  simpl.\n  destruct l3.\n  simpl.\n  destruct l3.\n  simpl.\n  destruct l3.\n  simpl.\n  destruct l3.\n  simpl.\n  destruct l3.\n  simpl.\n  destruct l3.\n  simpl.\n  destruct l3.\n  simpl.\n  destruct l3.\n  simpl.\n  destruct l3.\n  simpl.\n  destruct l3.\n  simpl.\n  destruct l3.\n  simpl.\n  destruct l3.\n  simpl.\n  destruct l3.\n  simpl.\n  destruct l3.\n  simpl.\n  destruct l3.\n  simpl.\n  destruct l3.\n  simpl.\n  destruct l3.\n  simpl.\n  destruct l3.\n  simpl.\n  destruct l3.\n  simpl.\n  destruct l3.\n  simpl.\n  destruct l3.\n  simpl.Qed.",
                        "correct": false,
                        "error_msg": "File \"./permutation.v\", line 184, characters 11-13:\nError: The reference l2 was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: permutation.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/permutation.v",
                "context": " inversion H0.\n  symmetry in H2;rewrite H2 in H;elim (H a);intros.\n  rewrite H2 in H6;rewrite H2.\n  assert (In x l');auto.\n  elim (in_insertion A x l' H8).\n  intro l'';intro.\n  apply cons_is_permutation with l'';trivial.\n  apply IHl;trivial.\n  split;intro.\n  elim (H x0);intros.\n  elim (in_insertion_inv A x0 x l'' l');auto.\n  intro;rewrite H13 in H10;rewrite H2 in H5;tauto.\n  elim (H x0);intros.\n  case H12;try tauto.\n  apply (insertion_inclusion A x l'' l');trivial.\n  intro;rewrite <- H13 in H10.\n  elim (is_set_insertion_in A l'' l' x);trivial.\n  eapply is_set_insertion;eauto.\nQed.\n\n(** is_permutation is reflexive *)\nLemma is_permutation_refl : forall (A:Set)(l:list A),(is_permutation A l l).\n  induction l.\n  apply nil_is_permutation.\n  eapply cons_is_permutation;[apply IHl | apply head_insertion].\nQed.\n\n(** if l' is l where x has been inserted then l' is a permutation of x::l *)\nLemma insertion_is_permutation : forall (A:Set)(l l':list A)(x:A),(insertion A x l l')->(is_permutation A (x::l) l').\n  induction 1.\n  apply cons_is_permutation with l;[apply is_permutation_refl | apply head_insertion].\n  apply cons_is_permutation with (y::l);[apply is_permutation_refl | apply tail_insertion;trivial].\nQed.\n\n(** if l1 is l0 where x has been inserted and l2 is l1 where y has been inserted then there is l3 such that l3 is l0 where y has been inserted and l2 is l3 where x has been inserted *)\nLemma insertion_trans : forall (A:Set)(l0 l1:list A)(x:A),(insertion A x l0 l1)->forall (l2:list A)(y:A),(insertion A y l1 l2)->exists l3:list A,(insertion A y l0 l3)/\\(insertion A x l3 l2).\n  induction 1;intros.\n  inversion H.\n  exists (y::l);split;[apply head_insertion | apply tail_insertion;apply head_insertion].\n  exists l';split;[trivial | apply head_insertion].\n  inversion H0.\n  exists (y0::y::l);split;[apply head_insertion | apply tail_insertion;apply tail_insertion;trivial].\n  elim (IHinsertion l'0 y0 H5);intro l3;intro.\n  elim H6;intros.\n  exists (y::l3);split;[apply tail_insertion | apply tail_insertion];trivial.\nQed.\n\n(** if l1 is a permutation of l0 and then l1 where x has been inserted is a permutation of l0 where x has been inserted *)\n",
                "context_tokens": 690,
                "proof_start_offset": 7110,
                "proof_end_offset": 7644,
                "proof": "Lemma permutation_insertion : forall (A:Set)(l0 l1:list A),(is_permutation A l0 l1)->forall (x:A)(l2 l3:list A),(insertion A x l0 l2)->(insertion A x l1 l3)->(is_permutation A l2 l3).\nProof.\ninduction 1;intros.\ninversion H;inversion H0;apply is_permutation_refl.\ninversion H1.\napply cons_is_permutation with l'';trivial.\napply cons_is_permutation with l';trivial.\nelim (insertion_trans A l' l'' x H0 l3 x0 H2).\nintro l4;intro.\nelim H8;intros.\napply cons_is_permutation with l4;trivial.\neapply IHis_permutation;eauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma permutation_insertion : forall (A:Set)(l0 l1:list A),(is_permutation A l0 l1)->forall (x:A)(l2 l3:list A),(insertion A x l0 l2)->(insertion A x l1 l3)->(is_permutation A l2 l3).\ninduction l1;intros.\ninversion H.\ninversion H.\ninversion H0.\ninversion H1.\ninversion H1.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\ninversion H2.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./permutation.v\", line 242, characters 0-4:\nError: Attempt to save an incomplete proof (in proof permutation_insertion)\n\nmake[2]: *** [Makefile.coq:663: permutation.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/permutation.v",
                "context": " A x l'' l');trivial.\n  intro;rewrite <- H13 in H10.\n  elim (is_set_insertion_in A l'' l' x);trivial.\n  eapply is_set_insertion;eauto.\nQed.\n\n(** is_permutation is reflexive *)\nLemma is_permutation_refl : forall (A:Set)(l:list A),(is_permutation A l l).\n  induction l.\n  apply nil_is_permutation.\n  eapply cons_is_permutation;[apply IHl | apply head_insertion].\nQed.\n\n(** if l' is l where x has been inserted then l' is a permutation of x::l *)\nLemma insertion_is_permutation : forall (A:Set)(l l':list A)(x:A),(insertion A x l l')->(is_permutation A (x::l) l').\n  induction 1.\n  apply cons_is_permutation with l;[apply is_permutation_refl | apply head_insertion].\n  apply cons_is_permutation with (y::l);[apply is_permutation_refl | apply tail_insertion;trivial].\nQed.\n\n(** if l1 is l0 where x has been inserted and l2 is l1 where y has been inserted then there is l3 such that l3 is l0 where y has been inserted and l2 is l3 where x has been inserted *)\nLemma insertion_trans : forall (A:Set)(l0 l1:list A)(x:A),(insertion A x l0 l1)->forall (l2:list A)(y:A),(insertion A y l1 l2)->exists l3:list A,(insertion A y l0 l3)/\\(insertion A x l3 l2).\n  induction 1;intros.\n  inversion H.\n  exists (y::l);split;[apply head_insertion | apply tail_insertion;apply head_insertion].\n  exists l';split;[trivial | apply head_insertion].\n  inversion H0.\n  exists (y0::y::l);split;[apply head_insertion | apply tail_insertion;apply tail_insertion;trivial].\n  elim (IHinsertion l'0 y0 H5);intro l3;intro.\n  elim H6;intros.\n  exists (y::l3);split;[apply tail_insertion | apply tail_insertion];trivial.\nQed.\n\n(** if l1 is a permutation of l0 and then l1 where x has been inserted is a permutation of l0 where x has been inserted *)\nLemma permutation_insertion : forall (A:Set)(l0 l1:list A),(is_permutation A l0 l1)->forall (x:A)(l2 l3:list A),(insertion A x l0 l2)->(insertion A x l1 l3)->(is_permutation A l2 l3).\n  induction 1;intros.\n  inversion H;inversion H0;apply is_permutation_refl.\n  inversion H1.\n  apply cons_is_permutation with l'';trivial.\n  apply cons_is_permutation with l';trivial.\n  elim (insertion_trans A l' l'' x H0 l3 x0 H2).\n  intro l4;intro.\n  elim H8;intros.\n  apply cons_is_permutation with l4;trivial.\n  eapply IHis_permutation;eauto.\nQed.\n\n(** is_permutation is symmetric *)\n",
                "context_tokens": 722,
                "proof_start_offset": 7681,
                "proof_end_offset": 7890,
                "proof": "Lemma is_permutation_sym : forall (A:Set)(l l':list A),(is_permutation A l l')->(is_permutation A l' l).\nProof.\ninduction 1;[apply nil_is_permutation | eapply permutation_insertion;eauto;apply head_insertion].\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma is_permutation_sym : forall (A:Set)(l l':list A),(is_permutation A l l')->(is_permutation A l' l).\nProof.\ninduction l;intros.\ninversion H;apply is_permutation_trans with l';trivial.\ninversion H0;apply is_permutation_sym.\napply H0;apply is_permutation_sym.\napply H1;apply H1;apply H2;apply H1;apply H1;apply H2;apply H2;apply H1;apply H2;apply H1;apply H2;apply H2;apply H1;apply H2;apply H2;apply H1;apply H2;apply H1;apply H1;apply H2;apply H2;apply H1;apply H2;apply H2;apply H1;apply H2;apply H2;apply H2;apply H2;apply H1;apply H2;apply H2;apply H1;apply H2;apply H2;apply H2;apply H2;apply H2;apply H2;apply H2;apply H2;apply H2;apply H2;apply H2;apply H2;apply H2;apply H2;apply H2;apply H2;apply H2;apply H2;apply H2Qed.",
                        "correct": false,
                        "error_msg": "File \"./permutation.v\", line 207, characters 18-38:\nError: The reference is_permutation_trans was not found in the current\nenvironment.\n\nmake[2]: *** [Makefile.coq:663: permutation.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/permutation.v",
                "context": " forall (A:Set)(l:list A),(is_permutation A l l).\n  induction l.\n  apply nil_is_permutation.\n  eapply cons_is_permutation;[apply IHl | apply head_insertion].\nQed.\n\n(** if l' is l where x has been inserted then l' is a permutation of x::l *)\nLemma insertion_is_permutation : forall (A:Set)(l l':list A)(x:A),(insertion A x l l')->(is_permutation A (x::l) l').\n  induction 1.\n  apply cons_is_permutation with l;[apply is_permutation_refl | apply head_insertion].\n  apply cons_is_permutation with (y::l);[apply is_permutation_refl | apply tail_insertion;trivial].\nQed.\n\n(** if l1 is l0 where x has been inserted and l2 is l1 where y has been inserted then there is l3 such that l3 is l0 where y has been inserted and l2 is l3 where x has been inserted *)\nLemma insertion_trans : forall (A:Set)(l0 l1:list A)(x:A),(insertion A x l0 l1)->forall (l2:list A)(y:A),(insertion A y l1 l2)->exists l3:list A,(insertion A y l0 l3)/\\(insertion A x l3 l2).\n  induction 1;intros.\n  inversion H.\n  exists (y::l);split;[apply head_insertion | apply tail_insertion;apply head_insertion].\n  exists l';split;[trivial | apply head_insertion].\n  inversion H0.\n  exists (y0::y::l);split;[apply head_insertion | apply tail_insertion;apply tail_insertion;trivial].\n  elim (IHinsertion l'0 y0 H5);intro l3;intro.\n  elim H6;intros.\n  exists (y::l3);split;[apply tail_insertion | apply tail_insertion];trivial.\nQed.\n\n(** if l1 is a permutation of l0 and then l1 where x has been inserted is a permutation of l0 where x has been inserted *)\nLemma permutation_insertion : forall (A:Set)(l0 l1:list A),(is_permutation A l0 l1)->forall (x:A)(l2 l3:list A),(insertion A x l0 l2)->(insertion A x l1 l3)->(is_permutation A l2 l3).\n  induction 1;intros.\n  inversion H;inversion H0;apply is_permutation_refl.\n  inversion H1.\n  apply cons_is_permutation with l'';trivial.\n  apply cons_is_permutation with l';trivial.\n  elim (insertion_trans A l' l'' x H0 l3 x0 H2).\n  intro l4;intro.\n  elim H8;intros.\n  apply cons_is_permutation with l4;trivial.\n  eapply IHis_permutation;eauto.\nQed.\n\n(** is_permutation is symmetric *)\nLemma is_permutation_sym : forall (A:Set)(l l':list A),(is_permutation A l l')->(is_permutation A l' l).\n  induction 1;[apply nil_is_permutation | eapply permutation_insertion;eauto;apply head_insertion].\nQed.\n\n",
                "context_tokens": 716,
                "proof_start_offset": 7892,
                "proof_end_offset": 8346,
                "proof": "Lemma permutation_in : forall (A:Set)(l l':list A),(is_permutation A l l')->forall (x:A),(In x l)<->(In x l').\nProof.\ninduction l;simpl;intros.\ninversion H;simpl;tauto.\ninversion H;simpl.\nsplit;intro.\ncase H5;intro.\neapply insertion_in;rewrite H6 in H4;apply H4.\nelim (IHl l'0 H2 x);intros.\neapply insertion_inclusion;eauto.\ncase (in_insertion_inv A x a l'0 l' H4 H5);intro.\nrewrite H6;tauto.\nelim (IHl l'0 H2 x);intros.\nright;auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma permutation_in : forall (A:Set)(l l':list A),(is_permutation A l l')->forall (x:A),(In x l)<->(In x l').\n  induction 1;intros.\n  inversion H.\n  inversion H.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversionQed.",
                        "correct": false,
                        "error_msg": "File \"./permutation.v\", line 210, characters 2-13:\nError: No such hypothesis: H\n\nmake[2]: *** [Makefile.coq:663: permutation.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/permutation.v",
                "context": "\n(** if l1 is l0 where x has been inserted and l2 is l1 where y has been inserted then there is l3 such that l3 is l0 where y has been inserted and l2 is l3 where x has been inserted *)\nLemma insertion_trans : forall (A:Set)(l0 l1:list A)(x:A),(insertion A x l0 l1)->forall (l2:list A)(y:A),(insertion A y l1 l2)->exists l3:list A,(insertion A y l0 l3)/\\(insertion A x l3 l2).\n  induction 1;intros.\n  inversion H.\n  exists (y::l);split;[apply head_insertion | apply tail_insertion;apply head_insertion].\n  exists l';split;[trivial | apply head_insertion].\n  inversion H0.\n  exists (y0::y::l);split;[apply head_insertion | apply tail_insertion;apply tail_insertion;trivial].\n  elim (IHinsertion l'0 y0 H5);intro l3;intro.\n  elim H6;intros.\n  exists (y::l3);split;[apply tail_insertion | apply tail_insertion];trivial.\nQed.\n\n(** if l1 is a permutation of l0 and then l1 where x has been inserted is a permutation of l0 where x has been inserted *)\nLemma permutation_insertion : forall (A:Set)(l0 l1:list A),(is_permutation A l0 l1)->forall (x:A)(l2 l3:list A),(insertion A x l0 l2)->(insertion A x l1 l3)->(is_permutation A l2 l3).\n  induction 1;intros.\n  inversion H;inversion H0;apply is_permutation_refl.\n  inversion H1.\n  apply cons_is_permutation with l'';trivial.\n  apply cons_is_permutation with l';trivial.\n  elim (insertion_trans A l' l'' x H0 l3 x0 H2).\n  intro l4;intro.\n  elim H8;intros.\n  apply cons_is_permutation with l4;trivial.\n  eapply IHis_permutation;eauto.\nQed.\n\n(** is_permutation is symmetric *)\nLemma is_permutation_sym : forall (A:Set)(l l':list A),(is_permutation A l l')->(is_permutation A l' l).\n  induction 1;[apply nil_is_permutation | eapply permutation_insertion;eauto;apply head_insertion].\nQed.\n\nLemma permutation_in : forall (A:Set)(l l':list A),(is_permutation A l l')->forall (x:A),(In x l)<->(In x l').\n  induction l;simpl;intros.\n  inversion H;simpl;tauto.\n  inversion H;simpl.\n  split;intro.\n  case H5;intro.\n  eapply insertion_in;rewrite H6 in H4;apply H4.\n  elim (IHl l'0 H2 x);intros.\n  eapply insertion_inclusion;eauto.\n  case (in_insertion_inv A x a l'0 l' H4 H5);intro.\n  rewrite H6;tauto.\n  elim (IHl l'0 H2 x);intros.\n  right;auto.\nQed.\n\n",
                "context_tokens": 710,
                "proof_start_offset": 8348,
                "proof_end_offset": 8572,
                "proof": "Lemma permutation_insertion_aux : forall (A:Set)(l l' l'':list A)(x:A),(insertion A x l l')->(insertion A x l l'')->(is_permutation A l' l'').\nProof.\nintros.\neapply permutation_insertion;eauto.\napply is_permutation_refl.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma permutation_insertion_aux : forall (A:Set)(l l' l'':list A)(x:A),(insertion A x l l')->(insertion A x l l'')->(is_permutation A l' l'').\n  induction l;simpl;intros.\n  inversion H;clear H;apply is_permutation_trans with l';trivial.\n  inversion H;clear H;apply is_permutation_trans with l';trivial.\n  inversion H;clear H;apply is_permutation_trans with l';trivial.\n  inversion H;clear H;apply is_permutation_trans with l';trivial.\n  inversion H;clear H;apply is_permutation_trans with l';trivial.\n  inversion H0;clear H0;apply is_permutation_trans with l';trivial.\n  inversion H0;clear H0;apply is_permutation_trans with l';trivial.\n  inversion H0;clear H0;apply is_permutation_trans with l';trivial.\n  inversion H0;clear H0;apply is_permutation_trans with l';trivial.\n  inversion H0;clear H0;apply is_permutation_trans with l';trivial.\n  inversion H0;clear H0;apply is_permutation_trans with l';trivial.\n  inversion H0;clear H0;apply is_permutation_trans with l';trivial.\n  inversion H0;clear H0;apply is_permutation_trans with l';Qed.",
                        "correct": false,
                        "error_msg": "File \"./permutation.v\", line 225, characters 28-48:\nError: The reference is_permutation_trans was not found in the current\nenvironment.\n\nmake[2]: *** [Makefile.coq:663: permutation.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/permutation.v",
                "context": " l1)->forall (l2:list A)(y:A),(insertion A y l1 l2)->exists l3:list A,(insertion A y l0 l3)/\\(insertion A x l3 l2).\n  induction 1;intros.\n  inversion H.\n  exists (y::l);split;[apply head_insertion | apply tail_insertion;apply head_insertion].\n  exists l';split;[trivial | apply head_insertion].\n  inversion H0.\n  exists (y0::y::l);split;[apply head_insertion | apply tail_insertion;apply tail_insertion;trivial].\n  elim (IHinsertion l'0 y0 H5);intro l3;intro.\n  elim H6;intros.\n  exists (y::l3);split;[apply tail_insertion | apply tail_insertion];trivial.\nQed.\n\n(** if l1 is a permutation of l0 and then l1 where x has been inserted is a permutation of l0 where x has been inserted *)\nLemma permutation_insertion : forall (A:Set)(l0 l1:list A),(is_permutation A l0 l1)->forall (x:A)(l2 l3:list A),(insertion A x l0 l2)->(insertion A x l1 l3)->(is_permutation A l2 l3).\n  induction 1;intros.\n  inversion H;inversion H0;apply is_permutation_refl.\n  inversion H1.\n  apply cons_is_permutation with l'';trivial.\n  apply cons_is_permutation with l';trivial.\n  elim (insertion_trans A l' l'' x H0 l3 x0 H2).\n  intro l4;intro.\n  elim H8;intros.\n  apply cons_is_permutation with l4;trivial.\n  eapply IHis_permutation;eauto.\nQed.\n\n(** is_permutation is symmetric *)\nLemma is_permutation_sym : forall (A:Set)(l l':list A),(is_permutation A l l')->(is_permutation A l' l).\n  induction 1;[apply nil_is_permutation | eapply permutation_insertion;eauto;apply head_insertion].\nQed.\n\nLemma permutation_in : forall (A:Set)(l l':list A),(is_permutation A l l')->forall (x:A),(In x l)<->(In x l').\n  induction l;simpl;intros.\n  inversion H;simpl;tauto.\n  inversion H;simpl.\n  split;intro.\n  case H5;intro.\n  eapply insertion_in;rewrite H6 in H4;apply H4.\n  elim (IHl l'0 H2 x);intros.\n  eapply insertion_inclusion;eauto.\n  case (in_insertion_inv A x a l'0 l' H4 H5);intro.\n  rewrite H6;tauto.\n  elim (IHl l'0 H2 x);intros.\n  right;auto.\nQed.\n\nLemma permutation_insertion_aux : forall (A:Set)(l l' l'':list A)(x:A),(insertion A x l l')->(insertion A x l l'')->(is_permutation A l' l'').\n  intros.\n  eapply permutation_insertion;eauto.\n  apply is_permutation_refl.\nQed.\n\n",
                "context_tokens": 699,
                "proof_start_offset": 8574,
                "proof_end_offset": 8857,
                "proof": "Lemma length_recursion : forall (A:Set),forall (P:list A->Prop),(forall (x:list A),(forall (y:list A),(length y)<(length x)->(P y))->(P x))->(forall (a:list A),(P a)).\nProof.\nintros.\napply (well_founded_ind (well_founded_ltof (list A) (fun l:list A => length l)));unfold ltof;auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma length_recursion : forall (A:Set),forall (P:list A->Prop),(forall (x:list A),(forall (y:list A),(length y)<(length x)->(P y))->(P x))->(forall (a:list A),(P a)).\ninduction 1;intros.\ninversion H;clear H.\ninversion H;clear H.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\ninversion H0.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./permutation.v\", line 230, characters 0-11:\nError: Unable to find an instance for the variable x.\n\nmake[2]: *** [Makefile.coq:663: permutation.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/permutation.v",
                "context": "_insertion].\n  exists l';split;[trivial | apply head_insertion].\n  inversion H0.\n  exists (y0::y::l);split;[apply head_insertion | apply tail_insertion;apply tail_insertion;trivial].\n  elim (IHinsertion l'0 y0 H5);intro l3;intro.\n  elim H6;intros.\n  exists (y::l3);split;[apply tail_insertion | apply tail_insertion];trivial.\nQed.\n\n(** if l1 is a permutation of l0 and then l1 where x has been inserted is a permutation of l0 where x has been inserted *)\nLemma permutation_insertion : forall (A:Set)(l0 l1:list A),(is_permutation A l0 l1)->forall (x:A)(l2 l3:list A),(insertion A x l0 l2)->(insertion A x l1 l3)->(is_permutation A l2 l3).\n  induction 1;intros.\n  inversion H;inversion H0;apply is_permutation_refl.\n  inversion H1.\n  apply cons_is_permutation with l'';trivial.\n  apply cons_is_permutation with l';trivial.\n  elim (insertion_trans A l' l'' x H0 l3 x0 H2).\n  intro l4;intro.\n  elim H8;intros.\n  apply cons_is_permutation with l4;trivial.\n  eapply IHis_permutation;eauto.\nQed.\n\n(** is_permutation is symmetric *)\nLemma is_permutation_sym : forall (A:Set)(l l':list A),(is_permutation A l l')->(is_permutation A l' l).\n  induction 1;[apply nil_is_permutation | eapply permutation_insertion;eauto;apply head_insertion].\nQed.\n\nLemma permutation_in : forall (A:Set)(l l':list A),(is_permutation A l l')->forall (x:A),(In x l)<->(In x l').\n  induction l;simpl;intros.\n  inversion H;simpl;tauto.\n  inversion H;simpl.\n  split;intro.\n  case H5;intro.\n  eapply insertion_in;rewrite H6 in H4;apply H4.\n  elim (IHl l'0 H2 x);intros.\n  eapply insertion_inclusion;eauto.\n  case (in_insertion_inv A x a l'0 l' H4 H5);intro.\n  rewrite H6;tauto.\n  elim (IHl l'0 H2 x);intros.\n  right;auto.\nQed.\n\nLemma permutation_insertion_aux : forall (A:Set)(l l' l'':list A)(x:A),(insertion A x l l')->(insertion A x l l'')->(is_permutation A l' l'').\n  intros.\n  eapply permutation_insertion;eauto.\n  apply is_permutation_refl.\nQed.\n\nLemma length_recursion : forall (A:Set),forall (P:list A->Prop),(forall (x:list A),(forall (y:list A),(length y)<(length x)->(P y))->(P x))->(forall (a:list A),(P a)).\n  intros.\n  apply (well_founded_ind (well_founded_ltof (list A) (fun l:list A => length l)));unfold ltof;auto.\nQed.\n\n",
                "context_tokens": 720,
                "proof_start_offset": 8859,
                "proof_end_offset": 9031,
                "proof": "Lemma insertion_length : forall (A:Set)(l l':list A)(x:A),(insertion A x l l')->(length l')=(S (length l)).\nProof.\ninduction 1;simpl;trivial.\nrewrite IHinsertion;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma insertion_length : forall (A:Set)(l l':list A)(x:A),(insertion A x l l')->(length l')=(S (length l)).\n  induction l;simpl;intros.\n  inversion H;clear H; auto.\n  inversion H0;clear H0; auto.\n  inversion H0;clear H0; auto.\n  inversion H0;clear H0; auto.\n  inversion H0;clear H0; auto.\n  inversion H0;clear H0; auto.\n  inversion H0;clear H0; auto.\n  inversion H0;clear H0; auto.\n  inversion H0; clear H0; auto.\n  inversion H0; clear H0; auto.\n  inversion H0; clear H0; auto.\n  inversion H0; clear H0; auto.\n  inversion H0; clear H0; auto.\n  inversion H0; clear H0; auto.\n  inversion H0; clear H0; auto.\n  inversion H0; clear H0; auto.\n  inversion H0; clear H0; auto.\n  inversion H0; clear H0; auto.\n  inversion H0; clear H0; auto.\n  inversion H0; clear H0; auto.\n  inversion H0; clear H0; auto.\n  inversion H0; clear H0; auto.\n  inversion H0; clear H0Qed.",
                        "correct": false,
                        "error_msg": "File \"./permutation.v\", line 237, characters 2-14:\nError: No such hypothesis: H0\n\nmake[2]: *** [Makefile.coq:663: permutation.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/permutation.v",
                "context": " elim (IHinsertion l'0 y0 H5);intro l3;intro.\n  elim H6;intros.\n  exists (y::l3);split;[apply tail_insertion | apply tail_insertion];trivial.\nQed.\n\n(** if l1 is a permutation of l0 and then l1 where x has been inserted is a permutation of l0 where x has been inserted *)\nLemma permutation_insertion : forall (A:Set)(l0 l1:list A),(is_permutation A l0 l1)->forall (x:A)(l2 l3:list A),(insertion A x l0 l2)->(insertion A x l1 l3)->(is_permutation A l2 l3).\n  induction 1;intros.\n  inversion H;inversion H0;apply is_permutation_refl.\n  inversion H1.\n  apply cons_is_permutation with l'';trivial.\n  apply cons_is_permutation with l';trivial.\n  elim (insertion_trans A l' l'' x H0 l3 x0 H2).\n  intro l4;intro.\n  elim H8;intros.\n  apply cons_is_permutation with l4;trivial.\n  eapply IHis_permutation;eauto.\nQed.\n\n(** is_permutation is symmetric *)\nLemma is_permutation_sym : forall (A:Set)(l l':list A),(is_permutation A l l')->(is_permutation A l' l).\n  induction 1;[apply nil_is_permutation | eapply permutation_insertion;eauto;apply head_insertion].\nQed.\n\nLemma permutation_in : forall (A:Set)(l l':list A),(is_permutation A l l')->forall (x:A),(In x l)<->(In x l').\n  induction l;simpl;intros.\n  inversion H;simpl;tauto.\n  inversion H;simpl.\n  split;intro.\n  case H5;intro.\n  eapply insertion_in;rewrite H6 in H4;apply H4.\n  elim (IHl l'0 H2 x);intros.\n  eapply insertion_inclusion;eauto.\n  case (in_insertion_inv A x a l'0 l' H4 H5);intro.\n  rewrite H6;tauto.\n  elim (IHl l'0 H2 x);intros.\n  right;auto.\nQed.\n\nLemma permutation_insertion_aux : forall (A:Set)(l l' l'':list A)(x:A),(insertion A x l l')->(insertion A x l l'')->(is_permutation A l' l'').\n  intros.\n  eapply permutation_insertion;eauto.\n  apply is_permutation_refl.\nQed.\n\nLemma length_recursion : forall (A:Set),forall (P:list A->Prop),(forall (x:list A),(forall (y:list A),(length y)<(length x)->(P y))->(P x))->(forall (a:list A),(P a)).\n  intros.\n  apply (well_founded_ind (well_founded_ltof (list A) (fun l:list A => length l)));unfold ltof;auto.\nQed.\n\nLemma insertion_length : forall (A:Set)(l l':list A)(x:A),(insertion A x l l')->(length l')=(S (length l)).\n  induction 1;simpl;trivial.\n  rewrite IHinsertion;trivial.\nQed.\n\n",
                "context_tokens": 726,
                "proof_start_offset": 9033,
                "proof_end_offset": 9234,
                "proof": "Lemma permutation_length : forall (A:Set)(l l':list A),(is_permutation A l l')->(length l)=(length l').\nProof.\ninduction 1;simpl;trivial.\ngeneralize (insertion_length A l' l'' x H0);intro;congruence.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma permutation_length : forall (A:Set)(l l':list A),(is_permutation A l l')->(length l)=(length l').\n  induction 1;simpl;trivial.\n  rewrite IH insertion_length;trivial.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./permutation.v\", line 241, characters 13-29:\nError:\nSyntax error: [tactic:ltac_use_default] expected after [tactic:tactic] (in [vernac:tactic_command]).\n\nmake[2]: *** [Makefile.coq:663: permutation.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/permutation.v",
                "context": "Lemma permutation_insertion : forall (A:Set)(l0 l1:list A),(is_permutation A l0 l1)->forall (x:A)(l2 l3:list A),(insertion A x l0 l2)->(insertion A x l1 l3)->(is_permutation A l2 l3).\n  induction 1;intros.\n  inversion H;inversion H0;apply is_permutation_refl.\n  inversion H1.\n  apply cons_is_permutation with l'';trivial.\n  apply cons_is_permutation with l';trivial.\n  elim (insertion_trans A l' l'' x H0 l3 x0 H2).\n  intro l4;intro.\n  elim H8;intros.\n  apply cons_is_permutation with l4;trivial.\n  eapply IHis_permutation;eauto.\nQed.\n\n(** is_permutation is symmetric *)\nLemma is_permutation_sym : forall (A:Set)(l l':list A),(is_permutation A l l')->(is_permutation A l' l).\n  induction 1;[apply nil_is_permutation | eapply permutation_insertion;eauto;apply head_insertion].\nQed.\n\nLemma permutation_in : forall (A:Set)(l l':list A),(is_permutation A l l')->forall (x:A),(In x l)<->(In x l').\n  induction l;simpl;intros.\n  inversion H;simpl;tauto.\n  inversion H;simpl.\n  split;intro.\n  case H5;intro.\n  eapply insertion_in;rewrite H6 in H4;apply H4.\n  elim (IHl l'0 H2 x);intros.\n  eapply insertion_inclusion;eauto.\n  case (in_insertion_inv A x a l'0 l' H4 H5);intro.\n  rewrite H6;tauto.\n  elim (IHl l'0 H2 x);intros.\n  right;auto.\nQed.\n\nLemma permutation_insertion_aux : forall (A:Set)(l l' l'':list A)(x:A),(insertion A x l l')->(insertion A x l l'')->(is_permutation A l' l'').\n  intros.\n  eapply permutation_insertion;eauto.\n  apply is_permutation_refl.\nQed.\n\nLemma length_recursion : forall (A:Set),forall (P:list A->Prop),(forall (x:list A),(forall (y:list A),(length y)<(length x)->(P y))->(P x))->(forall (a:list A),(P a)).\n  intros.\n  apply (well_founded_ind (well_founded_ltof (list A) (fun l:list A => length l)));unfold ltof;auto.\nQed.\n\nLemma insertion_length : forall (A:Set)(l l':list A)(x:A),(insertion A x l l')->(length l')=(S (length l)).\n  induction 1;simpl;trivial.\n  rewrite IHinsertion;trivial.\nQed.\n\nLemma permutation_length : forall (A:Set)(l l':list A),(is_permutation A l l')->(length l)=(length l').\n  induction 1;simpl;trivial.\n  generalize (insertion_length A l' l'' x H0);intro;congruence.\nQed.\n\n",
                "context_tokens": 705,
                "proof_start_offset": 9236,
                "proof_end_offset": 10306,
                "proof": "Lemma insertion_permutation_eq : forall (A:Set)(l l':list A)(x:A),(insertion A x l' l)->forall (l'':list A),(insertion A x l'' l)->(is_permutation A l' l'').\nProof.\ninduction l;intros;inversion H.\ninversion H0.\napply is_permutation_refl.\nrewrite <- H4;destruct l.\ninversion H8.\ngeneralize (head_insertion A a0 l);intro.\nassert (In x (a0::l)).\neapply insertion_in;apply H8.\ncase (in_insertion_inv A x a0 l (a0::l) H10 H11);intro.\nrewrite H12;rewrite <- H12 in H10;rewrite <- H12 in H8;rewrite <- H12 in IHl.\nassert (is_permutation A l l1).\neapply IHl;eauto.\neapply cons_is_permutation;eauto;apply head_insertion.\nelim (in_insertion A x l H12);intro l2;intro.\ngeneralize (tail_insertion A x a0 l2 l H13);intro.\nassert (is_permutation A (a0::l2) l1).\neapply IHl;eauto.\napply is_permutation_sym;auto.\neapply cons_is_permutation;eauto.\nrewrite H1 in H3.\ninversion H0.\nrewrite <- H9;apply insertion_is_permutation;trivial.\nassert (is_permutation A l0 l1).\neapply IHl;eauto.\neapply cons_is_permutation;eauto;apply head_insertion.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma insertion_permutation_eq : forall (A:Set)(l l':list A)(x:A),(insertion A x l' l)->forall (l'':list A),(insertion A x l'' l)->(is_permutation A l' l'').\n  induction l;simpl;intros.\n  inversion H;clear H;apply is_permutation_refl.\n  inversion H0;clear H0;apply is_permutation_refl.\n  inversion H0;clear H0;apply is_permutation_refl.\n  inversion H0;clear H0;apply is_permutation_refl.\n  inversion H0;clear H0;apply is_permutation_refl.\n  inversion H0;clear H0;apply is_permutation_refl.\n  inversion H0;clear H0;apply is_permutation_refl.\n  inversion H0;clear H0;apply is_permutation_refl.\n  inversion H0;clear H0;apply is_permutation_refl.\n  inversion H0;clear H0;apply is_permutation_refl.\n  inversion H0;clear H0;apply is_permutation_refl.\n  inversion H0;clear H0;apply is_permutation_refl.\n  inversion H0;clear H0;apply is_permutation_refl.\n  inversion H0;clear H0;apply is_permutation_refl.\n  inversion H0;clear H0;apply is_permutation_refl.\n  inversion H0;clear H0;applyQed.",
                        "correct": false,
                        "error_msg": "File \"./permutation.v\", line 247, characters 30-49:\nError:\nIn environment\nA : Set\na : A\nl : list A\nIHl : forall (l' : list A) (x : A),\n      insertion A x l' l ->\n      forall l'' : list A, insertion A x l'' l -> is_permutation A l' l''\nl' : list A\nx : A\nH : insertion A x l' (a :: l)\nl'' : list A\nx0 : A\nl0 : list A\nH1 : x0 = x\nH2 : l0 = l''\nH4 : x = a\nH5 : l'' = l\nUnable to unify \"l\" with \"l'\".\n\nmake[2]: *** [Makefile.coq:663: permutation.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/permutation.v",
                "context": "1 l2.\n  generalize l1;clear l1.\n  induction l2;intros.\n  inversion H.\n  inversion H.\n  subst a.\n  subst x0.\n  subst l.\n  subst l2.\n  inversion H0.\n  subst x0.\n  subst l.\n  subst l''.\n  exists l'.\n  tauto.\n  subst x0.\n  subst l'.\n  subst a.\n  subst l1.\n  inversion H0.\n  subst x0.\n  subst l''.\n  subst l0.\n  elim (IHl2 l x H4 l' H3).\n  intro l3;intros.\n  elim H1;clear H1;intros.\n  elim (insertion_trans A l3 l' x H2 l4 y H6).\n  intro l5;intros.\n  elim H5;clear H5;intros.\n  exists l5.\n  split;trivial.\n  eapply cons_is_permutation.\n  apply H1.\n  trivial.\nQed.\n\nLemma permutation_insertion_permutation : forall (A:Set)(l l':list A),(is_permutation A l l')->forall (x:A)(l'':list A),(insertion A x l' l'')->forall (l''':list A),(is_permutation A l'' l''')->(is_permutation A (x::l) l''').\n  induction 1;intros.\n  inversion H.\n  rewrite <- H3 in H0.\n  trivial.\n  elim (permutation_insertion_comm A l'' l''0 x0 H1 l''' H2).\n  intro l1;intro.\n  elim H3;clear H3;intros.\n  eapply cons_is_permutation.\n  eapply IHis_permutation.\n  apply H0.\n  apply H3.\n  trivial.\nQed.\n\n(** is_permutation is transitive *)\nLemma is_permutation_trans : forall (A:Set)(l l':list A),(is_permutation A l l')->forall (l'':list A),(is_permutation A l' l'')->(is_permutation A l l'').\n  induction l.\n  intros.\n  inversion H.\n  rewrite <- H2 in H0;trivial.\n  intros.\n  inversion H.\n  induction H5;inversion H0.\n  eapply cons_is_permutation;try (apply IHl with l1;eauto);trivial.\n  eapply permutation_insertion_permutation.\n  apply H3.\n  apply tail_insertion.\n  apply H5.\n  eapply cons_is_permutation.\n  apply H8.\n  apply H10.\nQed.\n\nLemma is_permutation_reverse : forall (A:Set)(l:list A),(is_permutation A l (rev l)).\n  induction l.\n  simpl.\n  apply nil_is_permutation.\n  simpl.\n  eapply cons_is_permutation.\n  apply IHl.\n  apply insertion_snoc.\nQed.\n\nLemma is_permutation_reverse_impl_is_permutation : forall (A:Set)(l l':list A),(is_permutation A (rev l) (rev l'))->(is_permutation A l l').\n  intros.\n  eapply is_permutation_trans.\n  apply is_permutation_reverse.\n  apply is_permutation_sym.\n  eapply is_permutation_trans.\n  apply is_permutation_reverse.\n  apply is_permutation_sym.\n  trivial.\nQed.\n\n",
                "context_tokens": 712,
                "proof_start_offset": 12697,
                "proof_end_offset": 12967,
                "proof": "Lemma is_permutation_impl_is_permutation_reverse : forall (A:Set)(l l':list A),(is_permutation A l l')->(is_permutation A (rev l) (rev l')).\nProof.\nintros.\napply is_permutation_reverse_impl_is_permutation.\nrewrite rev_involutive.\nrewrite rev_involutive.\ntrivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma is_permutation_impl_is_permutation_reverse : forall (A:Set)(l l':list A),(is_permutation A l l')->(is_permutation A (rev l) (rev l')).\n  intros.\n  apply (is_permutation_or_not_in A l l' H).\n  apply (is_permutation_or_not_in A l l' H).\n  apply (is_permutation_or_not_in A l l' H).\n  apply (is_permutation_or_not_in A l l' H).\n  apply (is_permutation_or_not_in A l l' H).\n  apply (is_permutation_or_not_in A l l' H).\n  apply (is_permutation_or_not_in A l l' H).\n  apply (is_permutation_or_not_in A l l' H).\n  apply (is_permutation_or_not_in A l l' H).\n  apply (is_permutation_or_not_in A l l' H).\n  apply (is_permutation_or_not_in A l l' H).\n  apply (is_permutation_or_not_in A l l' H).\n  apply (is_permutation_or_not_in A l l' H).\n  apply (is_permutation_or_in A l l' H).\n  apply (Qed.",
                        "correct": false,
                        "error_msg": "File \"./permutation.v\", line 366, characters 9-33:\nError: The reference is_permutation_or_not_in was not found in the current\nenvironment.\n\nmake[2]: *** [Makefile.coq:663: permutation.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/permutation.v",
                "context": " intro l5;intros.\n  elim H5;clear H5;intros.\n  exists l5.\n  split;trivial.\n  eapply cons_is_permutation.\n  apply H1.\n  trivial.\nQed.\n\nLemma permutation_insertion_permutation : forall (A:Set)(l l':list A),(is_permutation A l l')->forall (x:A)(l'':list A),(insertion A x l' l'')->forall (l''':list A),(is_permutation A l'' l''')->(is_permutation A (x::l) l''').\n  induction 1;intros.\n  inversion H.\n  rewrite <- H3 in H0.\n  trivial.\n  elim (permutation_insertion_comm A l'' l''0 x0 H1 l''' H2).\n  intro l1;intro.\n  elim H3;clear H3;intros.\n  eapply cons_is_permutation.\n  eapply IHis_permutation.\n  apply H0.\n  apply H3.\n  trivial.\nQed.\n\n(** is_permutation is transitive *)\nLemma is_permutation_trans : forall (A:Set)(l l':list A),(is_permutation A l l')->forall (l'':list A),(is_permutation A l' l'')->(is_permutation A l l'').\n  induction l.\n  intros.\n  inversion H.\n  rewrite <- H2 in H0;trivial.\n  intros.\n  inversion H.\n  induction H5;inversion H0.\n  eapply cons_is_permutation;try (apply IHl with l1;eauto);trivial.\n  eapply permutation_insertion_permutation.\n  apply H3.\n  apply tail_insertion.\n  apply H5.\n  eapply cons_is_permutation.\n  apply H8.\n  apply H10.\nQed.\n\nLemma is_permutation_reverse : forall (A:Set)(l:list A),(is_permutation A l (rev l)).\n  induction l.\n  simpl.\n  apply nil_is_permutation.\n  simpl.\n  eapply cons_is_permutation.\n  apply IHl.\n  apply insertion_snoc.\nQed.\n\nLemma is_permutation_reverse_impl_is_permutation : forall (A:Set)(l l':list A),(is_permutation A (rev l) (rev l'))->(is_permutation A l l').\n  intros.\n  eapply is_permutation_trans.\n  apply is_permutation_reverse.\n  apply is_permutation_sym.\n  eapply is_permutation_trans.\n  apply is_permutation_reverse.\n  apply is_permutation_sym.\n  trivial.\nQed.\n\nLemma is_permutation_impl_is_permutation_reverse : forall (A:Set)(l l':list A),(is_permutation A l l')->(is_permutation A (rev l) (rev l')).\n  intros.\n  apply is_permutation_reverse_impl_is_permutation.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  trivial.\nQed.\n\nLemma is_permutation_cons_snoc : forall (A:Set)(x:A)(xs:list A),(is_permutation A (cons x xs) (app xs (cons x nil))).\n  intros.\n  eapply cons_is_permutation.\n  apply is_permutation_refl.\n  apply insertion_snoc.\nQed.\n\n",
                "context_tokens": 704,
                "proof_start_offset": 13186,
                "proof_end_offset": 13460,
                "proof": "Lemma insertion_append : forall (A:Set)(x:A)(xs xss:list A),(insertion A x xs xss)->forall (yss:list A),(insertion A x (app xs yss) (app xss yss)).\nProof.\ninduction 1.\nsimpl.\nintros.\napply head_insertion.\nintros.\nsimpl.\napply tail_insertion.\napply IHinsertion.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma insertion_append : forall (A:Set)(x:A)(xs xss:list A),(insertion A x xs xss)->forall (yss:list A),(insertion A x (app xs yss) (app xss yss)).\n  intros.\n  apply (list_app_or_not_in _ _ _ _ _ _ H).\n  apply (list_app_or_not_in _ _ _ _ _ H).\n  apply (list_app_or_not_in _ _ _ _ H).\n  apply (list_app_or_not_in _ _ _ H).\n  apply (list_app_or_not_in _ _ _ H).\n  apply (list_app_or_not_in _ _ _ H).\n  apply (list_app_or_not_in _ _ _ H).\n  apply (list_app_or_not_in _ _ _ H).\n  apply (list_app_or_not_in _ _ _ H).\n  apply (list_app_or_not_in _ _ _ H).\n  apply (list_app_or_not_in _ _ _ H).\n  apply (list_app_or_not_in _ _ _ H).\n  apply (list_app_or_not_in _ _ _ H).\n  apply (list_app_or_not_in _ _ _ H).\n  apply (list_app_or_Qed.",
                        "correct": false,
                        "error_msg": "File \"./permutation.v\", line 381, characters 9-27:\nError: The reference list_app_or_not_in was not found in the current\nenvironment.\n\nmake[2]: *** [Makefile.coq:663: permutation.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/permutation.v",
                "context": "trans : forall (A:Set)(l l':list A),(is_permutation A l l')->forall (l'':list A),(is_permutation A l' l'')->(is_permutation A l l'').\n  induction l.\n  intros.\n  inversion H.\n  rewrite <- H2 in H0;trivial.\n  intros.\n  inversion H.\n  induction H5;inversion H0.\n  eapply cons_is_permutation;try (apply IHl with l1;eauto);trivial.\n  eapply permutation_insertion_permutation.\n  apply H3.\n  apply tail_insertion.\n  apply H5.\n  eapply cons_is_permutation.\n  apply H8.\n  apply H10.\nQed.\n\nLemma is_permutation_reverse : forall (A:Set)(l:list A),(is_permutation A l (rev l)).\n  induction l.\n  simpl.\n  apply nil_is_permutation.\n  simpl.\n  eapply cons_is_permutation.\n  apply IHl.\n  apply insertion_snoc.\nQed.\n\nLemma is_permutation_reverse_impl_is_permutation : forall (A:Set)(l l':list A),(is_permutation A (rev l) (rev l'))->(is_permutation A l l').\n  intros.\n  eapply is_permutation_trans.\n  apply is_permutation_reverse.\n  apply is_permutation_sym.\n  eapply is_permutation_trans.\n  apply is_permutation_reverse.\n  apply is_permutation_sym.\n  trivial.\nQed.\n\nLemma is_permutation_impl_is_permutation_reverse : forall (A:Set)(l l':list A),(is_permutation A l l')->(is_permutation A (rev l) (rev l')).\n  intros.\n  apply is_permutation_reverse_impl_is_permutation.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  trivial.\nQed.\n\nLemma is_permutation_cons_snoc : forall (A:Set)(x:A)(xs:list A),(is_permutation A (cons x xs) (app xs (cons x nil))).\n  intros.\n  eapply cons_is_permutation.\n  apply is_permutation_refl.\n  apply insertion_snoc.\nQed.\n\nLemma insertion_append : forall (A:Set)(x:A)(xs xss:list A),(insertion A x xs xss)->forall (yss:list A),(insertion A x (app xs yss) (app xss yss)).\n  induction 1.\n  simpl.\n  intros.\n  apply head_insertion.\n  intros.\n  simpl.\n  apply tail_insertion.\n  apply IHinsertion.\nQed.\n\nLemma is_permutation_append : forall (A:Set)(xs ys:list A),(is_permutation A xs ys)->forall (xs' ys':list A),(is_permutation A xs' ys')->(is_permutation A (app xs xs') (app ys ys')).\n  induction 1;intros.\n  simpl.\n  auto.\n  simpl.\n  eapply cons_is_permutation.\n  apply IHis_permutation.\n  apply H1.\n  apply insertion_append.\n  auto.\nQed.\n\n",
                "context_tokens": 672,
                "proof_start_offset": 13801,
                "proof_end_offset": 14387,
                "proof": "Lemma insertion_map : forall (B:Set)(y:B)(ys yss:list B),(insertion _ y ys yss)->forall (A:Set)(f:A->B)(x:A),y=f x->forall (xs:list A),ys = map f xs->exists xss:list A,yss = map f xss /\\ insertion _ x xs xss.\nProof.\ninduction 1;intros.\nexists (cons x0 xs).\nsimpl.\nsplit.\nsubst x;subst l;auto.\napply head_insertion.\ndestruct xs.\ndiscriminate H1.\nsimpl in H1.\ninjection H1;clear H1;intros.\nelim (IHinsertion _ _ _ H0 _ H1).\nintro xss;intros.\nelim H3;clear H3;intros.\nexists (cons a xss).\nsimpl.\nsplit.\nsubst y;subst l';auto.\napply tail_insertion.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma insertion_map : forall (B:Set)(y:B)(ys yss:list B),(insertion _ y ys yss)->forall (A:Set)(f:A->B)(x:A),y=f x->forall (xs:list A),ys = map f xs->exists xss:list A,yss = map f xss /\\ insertion _ x xs xss.\n  induction xs; intros.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversionQed.",
                        "correct": false,
                        "error_msg": "File \"./permutation.v\", line 466, characters 2-14:\nError: The reference inversionQed was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: permutation.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/permutation.v",
                "context": "_snoc.\nQed.\n\nLemma is_permutation_reverse_impl_is_permutation : forall (A:Set)(l l':list A),(is_permutation A (rev l) (rev l'))->(is_permutation A l l').\n  intros.\n  eapply is_permutation_trans.\n  apply is_permutation_reverse.\n  apply is_permutation_sym.\n  eapply is_permutation_trans.\n  apply is_permutation_reverse.\n  apply is_permutation_sym.\n  trivial.\nQed.\n\nLemma is_permutation_impl_is_permutation_reverse : forall (A:Set)(l l':list A),(is_permutation A l l')->(is_permutation A (rev l) (rev l')).\n  intros.\n  apply is_permutation_reverse_impl_is_permutation.\n  rewrite rev_involutive.\n  rewrite rev_involutive.\n  trivial.\nQed.\n\nLemma is_permutation_cons_snoc : forall (A:Set)(x:A)(xs:list A),(is_permutation A (cons x xs) (app xs (cons x nil))).\n  intros.\n  eapply cons_is_permutation.\n  apply is_permutation_refl.\n  apply insertion_snoc.\nQed.\n\nLemma insertion_append : forall (A:Set)(x:A)(xs xss:list A),(insertion A x xs xss)->forall (yss:list A),(insertion A x (app xs yss) (app xss yss)).\n  induction 1.\n  simpl.\n  intros.\n  apply head_insertion.\n  intros.\n  simpl.\n  apply tail_insertion.\n  apply IHinsertion.\nQed.\n\nLemma is_permutation_append : forall (A:Set)(xs ys:list A),(is_permutation A xs ys)->forall (xs' ys':list A),(is_permutation A xs' ys')->(is_permutation A (app xs xs') (app ys ys')).\n  induction 1;intros.\n  simpl.\n  auto.\n  simpl.\n  eapply cons_is_permutation.\n  apply IHis_permutation.\n  apply H1.\n  apply insertion_append.\n  auto.\nQed.\n\nLemma insertion_map : forall (B:Set)(y:B)(ys yss:list B),(insertion _ y ys yss)->forall (A:Set)(f:A->B)(x:A),y=f x->forall (xs:list A),ys = map f xs->exists xss:list A,yss = map f xss /\\ insertion _ x xs xss.\n  induction 1;intros.\n  exists (cons x0 xs).\n  simpl.\n  split.\n  subst x;subst l;auto.\n  apply head_insertion.\n  destruct xs.\n  discriminate H1.\n  simpl in H1.\n  injection H1;clear H1;intros.\n  elim (IHinsertion _ _ _ H0 _ H1).\n  intro xss;intros.\n  elim H3;clear H3;intros.\n  exists (cons a xss).\n  simpl.\n  split.\n  subst y;subst l';auto.\n  apply tail_insertion.\n  auto.\nQed.\n\n",
                "context_tokens": 677,
                "proof_start_offset": 14389,
                "proof_end_offset": 15125,
                "proof": "Lemma is_permutation_map : forall (B:Set)(ys1 ys2:list B),(is_permutation B ys1 ys2)->forall (A:Set)(f:A->B)(xs1:list A),(ys1 = map f xs1)->exists xs2:list A,(is_permutation A xs1 xs2)/\\ys2 = map f xs2.\nProof.\ninduction 1.\nintros.\ndestruct xs1;try (discriminate H).\nexists (nil (A:=A)).\nsplit.\napply nil_is_permutation.\nreflexivity.\nintros.\ndestruct xs1;try (discriminate H1).\nsimpl in H1.\ninjection H1;clear H1;intros.\nsubst x.\nelim (IHis_permutation _ _ _ H1).\nintro xs2.\nintros.\nelim H2;clear H2;intros.\nsubst l'.\nelim (insertion_map _ _ _ _ H0 _ f a (refl_equal (f a)) xs2 (refl_equal (map f xs2))).\nintros.\nelim H3;clear H3;intros.\nexists x.\nsplit;auto.\neapply cons_is_permutation;eauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma is_permutation_map : forall (B:Set)(ys1 ys2:list B),(is_permutation B ys1 ys2)->forall (A:Set)(f:A->B)(xs1:list A),(ys1 = map f xs1)->exists xs2:list A,(is_permutation A xs1 xs2)/\\ys2 = map f xs2.\n  intros.\n  apply is_permutation_cons_right with (f:=fun xss => f xss = f xss).\n  apply is_permutation_cons_right with (f:=fun xss => f xss = f xss).\n  apply is_permutation_cons_right with (f:=fun xss => f xss = f xss).\n  apply is_permutation_cons_right with (f:=fun xss => f xss = f xss).\n  apply is_permutation_cons_right with (f:=fun xss => f xss = f xss).\n  apply is_permutation_cons_right with (f:=fun xss => f xss = f xss).\n  apply is_permutation_cons_right with (f:=fun xss => f xss = f xss).\n  apply is_permutation_cons_right with (f:=fun xss => f xss = f xss).\n  apply is_permutation_cons_right with (f:=fun xss => f xss = f xss).\n  apply is_permutation_cons_right with (f:=fun xss => f xss = f xss).\n  apply isQed.",
                        "correct": false,
                        "error_msg": "File \"./permutation.v\", line 426, characters 8-33:\nError: The reference is_permutation_cons_right was not found in the current\nenvironment.\n\nmake[2]: *** [Makefile.coq:663: permutation.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/permutation.v",
                "context": ")(x:A),y=f x->forall (xs:list A),ys = map f xs->exists xss:list A,yss = map f xss /\\ insertion _ x xs xss.\n  induction 1;intros.\n  exists (cons x0 xs).\n  simpl.\n  split.\n  subst x;subst l;auto.\n  apply head_insertion.\n  destruct xs.\n  discriminate H1.\n  simpl in H1.\n  injection H1;clear H1;intros.\n  elim (IHinsertion _ _ _ H0 _ H1).\n  intro xss;intros.\n  elim H3;clear H3;intros.\n  exists (cons a xss).\n  simpl.\n  split.\n  subst y;subst l';auto.\n  apply tail_insertion.\n  auto.\nQed.\n\nLemma is_permutation_map : forall (B:Set)(ys1 ys2:list B),(is_permutation B ys1 ys2)->forall (A:Set)(f:A->B)(xs1:list A),(ys1 = map f xs1)->exists xs2:list A,(is_permutation A xs1 xs2)/\\ys2 = map f xs2.\n  induction 1.\n  intros.\n  destruct xs1;try (discriminate H).\n  exists (nil (A:=A)).\n  split.\n  apply nil_is_permutation.\n  reflexivity.\n  intros.\n  destruct xs1;try (discriminate H1).\n  simpl in H1.\n  injection H1;clear H1;intros.\n  subst x.\n  elim (IHis_permutation _ _ _ H1).\n  intro xs2.\n  intros.\n  elim H2;clear H2;intros.\n  subst l'.\n  elim (insertion_map _ _ _ _ H0 _ f a (refl_equal (f a)) xs2 (refl_equal (map f xs2))).\n  intros.\n  elim H3;clear H3;intros.\n  exists x.\n  split;auto.\n  eapply cons_is_permutation;eauto.\nQed.\n\n(** if l' is a permutation of l and the elements of l are pairwise distinct, then so are those of l' *)\nLemma is_permutation_set : forall (A:Set)(l l':list A),(is_permutation _ l l')->(is_set _ l)->(is_set _ l').\n  induction 1.\n  auto.\n  intros.\n  inversion H1.\n  subst x0;subst l0.\n  eapply insertion_is_set.\n  apply IHis_permutation.\n  auto.\n  elim (permutation_in _ _ _ H x).\n  intros.\n  red;intro.\n  apply H5.\n  apply H3.\n  apply H6.\n  auto.\nQed.\n\nLemma Permutation_impl_permutation : forall (A:Set)(l l':list A),(Permutation l l')->(is_permutation _ l l').\n  induction 1.\n  apply nil_is_permutation.\n  eapply cons_is_permutation.\n  apply IHPermutation.\n  apply head_insertion.\n  eapply cons_is_permutation.\n  apply is_permutation_refl.\n  apply tail_insertion.\n  apply head_insertion.\n  eapply is_permutation_trans;eauto.\nQed.\n\n",
                "context_tokens": 693,
                "proof_start_offset": 15959,
                "proof_end_offset": 16380,
                "proof": "Lemma insertion_append_decompose : forall (A:Set)(x:A)(l l':list A),(insertion _ x l l')->exists l1:list A,exists l2:list A,l=(app l1 l2)/\\l'=(app l1 (cons x l2)).\nProof.\ninduction 1.\nexists (nil (A:=A)).\nexists l.\nsplit;try reflexivity.\nelim IHinsertion.\nintro l1.\nintro.\nelim H0.\nintro l2;intros.\nelim H1;clear H1;intros.\nexists (cons y l1).\nexists l2.\nsubst l;subst l'.\nsplit;try reflexivity.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma insertion_append_decompose : forall (A:Set)(x:A)(l l':list A),(insertion _ x l l')->exists l1:list A,exists l2:list A,l=(app l1 l2)/\\l'=(app l1 (cons x l2)).\n  induction 1.\n  intros.\n  inversion H.\n  inversion H.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n Qed.",
                        "correct": false,
                        "error_msg": "File \"./permutation.v\", line 485, characters 2-13:\nError: No such hypothesis: H\n\nmake[2]: *** [Makefile.coq:663: permutation.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/permutation.v",
                "context": " intro xss;intros.\n  elim H3;clear H3;intros.\n  exists (cons a xss).\n  simpl.\n  split.\n  subst y;subst l';auto.\n  apply tail_insertion.\n  auto.\nQed.\n\nLemma is_permutation_map : forall (B:Set)(ys1 ys2:list B),(is_permutation B ys1 ys2)->forall (A:Set)(f:A->B)(xs1:list A),(ys1 = map f xs1)->exists xs2:list A,(is_permutation A xs1 xs2)/\\ys2 = map f xs2.\n  induction 1.\n  intros.\n  destruct xs1;try (discriminate H).\n  exists (nil (A:=A)).\n  split.\n  apply nil_is_permutation.\n  reflexivity.\n  intros.\n  destruct xs1;try (discriminate H1).\n  simpl in H1.\n  injection H1;clear H1;intros.\n  subst x.\n  elim (IHis_permutation _ _ _ H1).\n  intro xs2.\n  intros.\n  elim H2;clear H2;intros.\n  subst l'.\n  elim (insertion_map _ _ _ _ H0 _ f a (refl_equal (f a)) xs2 (refl_equal (map f xs2))).\n  intros.\n  elim H3;clear H3;intros.\n  exists x.\n  split;auto.\n  eapply cons_is_permutation;eauto.\nQed.\n\n(** if l' is a permutation of l and the elements of l are pairwise distinct, then so are those of l' *)\nLemma is_permutation_set : forall (A:Set)(l l':list A),(is_permutation _ l l')->(is_set _ l)->(is_set _ l').\n  induction 1.\n  auto.\n  intros.\n  inversion H1.\n  subst x0;subst l0.\n  eapply insertion_is_set.\n  apply IHis_permutation.\n  auto.\n  elim (permutation_in _ _ _ H x).\n  intros.\n  red;intro.\n  apply H5.\n  apply H3.\n  apply H6.\n  auto.\nQed.\n\nLemma Permutation_impl_permutation : forall (A:Set)(l l':list A),(Permutation l l')->(is_permutation _ l l').\n  induction 1.\n  apply nil_is_permutation.\n  eapply cons_is_permutation.\n  apply IHPermutation.\n  apply head_insertion.\n  eapply cons_is_permutation.\n  apply is_permutation_refl.\n  apply tail_insertion.\n  apply head_insertion.\n  eapply is_permutation_trans;eauto.\nQed.\n\nLemma insertion_append_decompose : forall (A:Set)(x:A)(l l':list A),(insertion _ x l l')->exists l1:list A,exists l2:list A,l=(app l1 l2)/\\l'=(app l1 (cons x l2)).\n  induction 1.\n  exists (nil (A:=A)).\n  exists l.\n  split;try reflexivity.\n  elim IHinsertion.\n  intro l1.\n  intro.\n  elim H0.\n  intro l2;intros.\n  elim H1;clear H1;intros.\n  exists (cons y l1).\n  exists l2.\n  subst l;subst l'.\n  split;try reflexivity.\nQed.\n\n",
                "context_tokens": 726,
                "proof_start_offset": 16382,
                "proof_end_offset": 16713,
                "proof": "Lemma permutation_impl_Permutation : forall (A:Set)(l l':list A),(is_permutation _ l l')->(Permutation l l').\nProof.\ninduction 1.\napply perm_nil.\nelim (insertion_append_decompose _ _ _ _ H0).\nintro l1;intros.\nelim H1.\nintro l2;intros.\nelim H2;clear H2;intros.\nsubst l';subst l''.\napply Permutation_cons_app.\nauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma permutation_impl_Permutation : forall (A:Set)(l l':list A),(is_permutation _ l l')->(Permutation l l').\n  induction 1.\n  exists (nil (A:=A)).\n  exists (l' ++ l').\n  split;try reflexivity.\n  elim IHStrict.\n  intro l'.\n  elim (H0 l').\n  intro l2;intros.\n  elim H1;clear H1;intros.\n  exists (cons y l2).\n  split;try reflexivity.\n  elim IHStrict.\n  intro l2;intros.\n  elim H1;clear H1;intros.\n  exists (cons y l2).\n  split;try reflexivity.\n  elim IHStrict.\n  intro l2;intros.\n  elim H1;clear H1;intros.\n  exists (cons y l2).\n  split;try reflexivity.\n  elim IHStrict.\n  intro l2;intros.\n  elim H1;clear H1;intros.\n  exists (cons y l2).\n  split;try reflexivity.\n  elim IHStrict.\n  intro l2;intros.\n  elim H1;clear H1;intros.\n  exists (cons y l2).\n  split;try reflexivity.\n  elim IHStrict.\n  intro l2;intros.\n  elim H1;clear H1;intros.\n  exists (cons y l2).\n  splitQed.",
                        "correct": false,
                        "error_msg": "File \"./permutation.v\", line 501, characters 2-21:\nError:\nLtac call to \"exists (ne_bindings_list)\" failed.\nNot an inductive goal with 1 constructor.\n\nmake[2]: *** [Makefile.coq:663: permutation.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Export Arith.\nRequire Export ArithRing.\nRequire Export Omega.\n\nUnset Standard Proposition Elimination Names.\n\n(** We first begin with some lemmas that relates *)\n(** +, * and - that are not in the standard library *)\n",
                "context_tokens": 271,
                "proof_start_offset": 1084,
                "proof_end_offset": 1244,
                "proof": "Lemma mult_lemma1 : forall (n m:nat),(n <> O)->(m <> 0)->(n <= n*m).\nProof.\nintros.\nrewrite mult_comm.\ninduction m;simpl;auto with arith.\nelim H0;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_lemma1 : forall (n m:nat),(n <> O)->(m <> 0)->(n <= n*m).\nProof.\n intros n m.\n rewrite mult_comm.\n rewrite mult_comm.\n rewrite mult_assoc.\n rewrite mult_assoc.\n rewrite mult_assoc.\n rewrite mult_assoc.\n rewrite mult_assoc.\n rewrite mult_assoc.\n rewrite mult_assoc.\n rewrite mult_assoc.\n rewrite mult_assoc.\n rewrite mult_assoc.\n rewrite mult_assoc.\n rewrite mult_assoc.\n rewrite mult_assoc.\n rewrite mult_assoc.\n rewrite (mult_comm (n * m)).\n rewrite mult_assoc.\n rewrite mult_assoc.\n rewrite (mult_comm (n * m)).\n rewrite mult_assoc.\n rewrite mult_assoc.\n rewrite (mult_comm (n * m)).\n rewrite mult_assoc.\n rewrite mult_assoc.\n rewrite (mult_comm (n * m)).\n rewrite mult_assoc.\n rewrite mult_assoc.\n rewrite (mult_comm (n * m)).\n rewrite mult_assoc.\n rewrite (mult_comm (n * m)).\n rewrite mult_assoc.\n rewrite (mult_comm (n * m)).\n rewrite mult_assoc.\n rewrite (mult_comm (n *Qed.",
                        "correct": false,
                        "error_msg": "File \"./missing.v\", line 23, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./missing.v\", line 32, characters 1-19:\nError:\nFound no subterm matching \"?M1242 * (?M1243 * ?M1244)\" in the current goal.\n\nmake[2]: *** [Makefile.coq:663: missing.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Export Arith.\nRequire Export ArithRing.\nRequire Export Omega.\n\nUnset Standard Proposition Elimination Names.\n\n(** We first begin with some lemmas that relates *)\n(** +, * and - that are not in the standard library *)\nLemma mult_lemma1 : forall (n m:nat),(n <> O)->(m <> 0)->(n <= n*m).\n  intros.\n  rewrite mult_comm.\n  induction m;simpl;auto with arith.\n  elim H0;trivial.\nQed.\n\n",
                "context_tokens": 328,
                "proof_start_offset": 1246,
                "proof_end_offset": 1433,
                "proof": "Lemma mult_lemma2 : forall (n m:nat),(n*m = O)->(n=O)\\/(m=O).\nProof.\nintros.\ninduction n.\ntauto.\nsimpl in H.\nright.\nassert (m <= O);try omega.\nrewrite <- H.\nauto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_lemma2 : forall (n m:nat),(n*m = O)->(n=O)\\/(m=O).\n  intros.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n Qed.",
                        "correct": false,
                        "error_msg": "File \"./missing.v\", line 23, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./missing.v\", line 36, characters 2-19:\nError: Found no subterm matching \"?M1226 * ?M1227\" in the current goal.\n\nmake[2]: *** [Makefile.coq:663: missing.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Export Arith.\nRequire Export ArithRing.\nRequire Export Omega.\n\nUnset Standard Proposition Elimination Names.\n\n(** We first begin with some lemmas that relates *)\n(** +, * and - that are not in the standard library *)\nLemma mult_lemma1 : forall (n m:nat),(n <> O)->(m <> 0)->(n <= n*m).\n  intros.\n  rewrite mult_comm.\n  induction m;simpl;auto with arith.\n  elim H0;trivial.\nQed.\n\nLemma mult_lemma2 : forall (n m:nat),(n*m = O)->(n=O)\\/(m=O).\n  intros.\n  induction n.\n  tauto.\n  simpl in H.\n  right.\n  assert (m <= O);try omega.\n  rewrite <- H.\n  auto with arith.\nQed.\n\n",
                "context_tokens": 400,
                "proof_start_offset": 1435,
                "proof_end_offset": 1719,
                "proof": "Lemma mult_lemma3 : forall (n m:nat),(n <> O)->(m > 1)->(n < n*m).\nProof.\nintros.\nrewrite mult_comm.\ninduction m.\ninversion H0.\nsimpl.\nassert (O < m*n);try omega.\ninversion H0;try omega.\nassert (1 <= n);try omega.\nassert (m > 1);try omega.\ngeneralize (IHm H4);omega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_lemma3 : forall (n m:nat),(n <> O)->(m > 1)->(n < n*m).\n  intros.\n  rewrite mult_comm.\n  apply mult_lemma3.\n  apply mult_lemma1.\n  apply mult_lemma1.\n  apply mult_lemma1.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma1.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma1.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  apply mult_lemma2.\n  applyQed.",
                        "correct": false,
                        "error_msg": "File \"./missing.v\", line 23, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./missing.v\", line 48, characters 8-19:\nError: The reference mult_lemma3 was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: missing.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Export Arith.\nRequire Export ArithRing.\nRequire Export Omega.\n\nUnset Standard Proposition Elimination Names.\n\n(** We first begin with some lemmas that relates *)\n(** +, * and - that are not in the standard library *)\nLemma mult_lemma1 : forall (n m:nat),(n <> O)->(m <> 0)->(n <= n*m).\n  intros.\n  rewrite mult_comm.\n  induction m;simpl;auto with arith.\n  elim H0;trivial.\nQed.\n\nLemma mult_lemma2 : forall (n m:nat),(n*m = O)->(n=O)\\/(m=O).\n  intros.\n  induction n.\n  tauto.\n  simpl in H.\n  right.\n  assert (m <= O);try omega.\n  rewrite <- H.\n  auto with arith.\nQed.\n\nLemma mult_lemma3 : forall (n m:nat),(n <> O)->(m > 1)->(n < n*m).\n  intros.\n  rewrite mult_comm.\n  induction m.\n  inversion H0.\n  simpl.\n  assert (O < m*n);try omega.\n  inversion H0;try omega.\n  assert (1 <= n);try omega.\n  assert (m > 1);try omega.\n  generalize (IHm H4);omega.\nQed.\n\n",
                "context_tokens": 502,
                "proof_start_offset": 1721,
                "proof_end_offset": 2052,
                "proof": "Lemma mult_lemma4 : forall (n m:nat),n=n*m -> n=O \\/ m=1.\nProof.\nintros n m.\ncase n.\nleft;trivial.\nintros.\nright.\ndestruct m.\nrewrite mult_comm in H.\ndiscriminate.\ndestruct m;trivial.\nassert ((S n0)<(S n0)*(S (S m))).\napply mult_lemma3;intros;auto with arith.\nrewrite <- H in H0.\nelim (lt_irrefl (S n0) H0).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_lemma4 : forall (n m:nat),n=n*m -> n=O \\/ m=1.\n  intros.\n  rewrite mult_comm.\n  apply mult_lemma4.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./missing.v\", line 23, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./missing.v\", line 60, characters 2-19:\nError: Found no subterm matching \"?M1226 * ?M1227\" in the current goal.\n\nmake[2]: *** [Makefile.coq:663: missing.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Export Arith.\nRequire Export ArithRing.\nRequire Export Omega.\n\nUnset Standard Proposition Elimination Names.\n\n(** We first begin with some lemmas that relates *)\n(** +, * and - that are not in the standard library *)\nLemma mult_lemma1 : forall (n m:nat),(n <> O)->(m <> 0)->(n <= n*m).\n  intros.\n  rewrite mult_comm.\n  induction m;simpl;auto with arith.\n  elim H0;trivial.\nQed.\n\nLemma mult_lemma2 : forall (n m:nat),(n*m = O)->(n=O)\\/(m=O).\n  intros.\n  induction n.\n  tauto.\n  simpl in H.\n  right.\n  assert (m <= O);try omega.\n  rewrite <- H.\n  auto with arith.\nQed.\n\nLemma mult_lemma3 : forall (n m:nat),(n <> O)->(m > 1)->(n < n*m).\n  intros.\n  rewrite mult_comm.\n  induction m.\n  inversion H0.\n  simpl.\n  assert (O < m*n);try omega.\n  inversion H0;try omega.\n  assert (1 <= n);try omega.\n  assert (m > 1);try omega.\n  generalize (IHm H4);omega.\nQed.\n\nLemma mult_lemma4 : forall (n m:nat),n=n*m -> n=O \\/ m=1.\n  intros n m.\n  case n.\n  left;trivial.\n  intros.\n  right.\n  destruct m.\n  rewrite mult_comm in H.\n  discriminate.\n  destruct m;trivial.\n  assert ((S n0)<(S n0)*(S (S m))).\n  apply mult_lemma3;intros;auto with arith.\n  rewrite <- H in H0.\n  elim (lt_irrefl (S n0) H0).\nQed.\n\n",
                "context_tokens": 628,
                "proof_start_offset": 2054,
                "proof_end_offset": 2503,
                "proof": "Lemma mult_lemma5 : forall (n m:nat),((n * m) =1)->(n=1)/\\(m=1).\nProof.\ninduction n;simpl;intros;try discriminate.\ninduction m.\nrewrite mult_comm in H.\nsimpl in H;discriminate.\nassert ((S n)<=((S n)*(S m))).\napply mult_lemma1;discriminate.\nassert (((S n)*(S m))=((S m)+n*(S m))).\nreflexivity.\nrewrite H1 in H0.\nrewrite H in H0.\nassert ((S n)=1).\nomega.\nsplit;trivial.\ninversion H2.\nrewrite H4 in H.\nsimpl in H.\nomega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_lemma5 : forall (n m:nat),((n * m) =1)->(n=1)/\\(m=1).\n  intros.\n  rewrite mult_comm.\n  apply mult_lemma4;intros;auto with arith.\n  rewrite <- H in H0.\n  elim (lt_irrefl (S n0) H0).\nQed.",
                        "correct": false,
                        "error_msg": "File \"./missing.v\", line 23, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./missing.v\", line 76, characters 2-19:\nError: Found no subterm matching \"?M1226 * ?M1227\" in the current goal.\n\nmake[2]: *** [Makefile.coq:663: missing.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": " *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Export Arith.\nRequire Export ArithRing.\nRequire Export Omega.\n\nUnset Standard Proposition Elimination Names.\n\n(** We first begin with some lemmas that relates *)\n(** +, * and - that are not in the standard library *)\nLemma mult_lemma1 : forall (n m:nat),(n <> O)->(m <> 0)->(n <= n*m).\n  intros.\n  rewrite mult_comm.\n  induction m;simpl;auto with arith.\n  elim H0;trivial.\nQed.\n\nLemma mult_lemma2 : forall (n m:nat),(n*m = O)->(n=O)\\/(m=O).\n  intros.\n  induction n.\n  tauto.\n  simpl in H.\n  right.\n  assert (m <= O);try omega.\n  rewrite <- H.\n  auto with arith.\nQed.\n\nLemma mult_lemma3 : forall (n m:nat),(n <> O)->(m > 1)->(n < n*m).\n  intros.\n  rewrite mult_comm.\n  induction m.\n  inversion H0.\n  simpl.\n  assert (O < m*n);try omega.\n  inversion H0;try omega.\n  assert (1 <= n);try omega.\n  assert (m > 1);try omega.\n  generalize (IHm H4);omega.\nQed.\n\nLemma mult_lemma4 : forall (n m:nat),n=n*m -> n=O \\/ m=1.\n  intros n m.\n  case n.\n  left;trivial.\n  intros.\n  right.\n  destruct m.\n  rewrite mult_comm in H.\n  discriminate.\n  destruct m;trivial.\n  assert ((S n0)<(S n0)*(S (S m))).\n  apply mult_lemma3;intros;auto with arith.\n  rewrite <- H in H0.\n  elim (lt_irrefl (S n0) H0).\nQed.\n\nLemma mult_lemma5 : forall (n m:nat),((n * m) =1)->(n=1)/\\(m=1).\n  induction n;simpl;intros;try discriminate.\n  induction m.\n  rewrite mult_comm in H.\n  simpl in H;discriminate.\n  assert ((S n)<=((S n)*(S m))).\n  apply mult_lemma1;discriminate.\n  assert (((S n)*(S m))=((S m)+n*(S m))).\n  reflexivity.\n  rewrite H1 in H0.\n  rewrite H in H0.\n  assert ((S n)=1).\n  omega.\n  split;trivial.\n  inversion H2.\n  rewrite H4 in H.\n  simpl in H.\n  omega.\nQed.\n\n",
                "context_tokens": 734,
                "proof_start_offset": 2505,
                "proof_end_offset": 2662,
                "proof": "Lemma plus_minus_lemma1 : forall (y x:nat),(x+y-y=x).\nProof.\ninduction y;intros;rewrite plus_comm;simpl.\nauto with arith.\nrewrite plus_comm.\napply IHy.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma plus_minus_lemma1 : forall (y x:nat),(x+y-y=x).\n  intros.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_comm in H.\n  rewrite plus_commQed.",
                        "correct": false,
                        "error_msg": "File \"./missing.v\", line 23, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./missing.v\", line 96, characters 23-24:\nError: No such hypothesis: H\n\nmake[2]: *** [Makefile.coq:663: missing.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": " be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Export Arith.\nRequire Export ArithRing.\nRequire Export Omega.\n\nUnset Standard Proposition Elimination Names.\n\n(** We first begin with some lemmas that relates *)\n(** +, * and - that are not in the standard library *)\nLemma mult_lemma1 : forall (n m:nat),(n <> O)->(m <> 0)->(n <= n*m).\n  intros.\n  rewrite mult_comm.\n  induction m;simpl;auto with arith.\n  elim H0;trivial.\nQed.\n\nLemma mult_lemma2 : forall (n m:nat),(n*m = O)->(n=O)\\/(m=O).\n  intros.\n  induction n.\n  tauto.\n  simpl in H.\n  right.\n  assert (m <= O);try omega.\n  rewrite <- H.\n  auto with arith.\nQed.\n\nLemma mult_lemma3 : forall (n m:nat),(n <> O)->(m > 1)->(n < n*m).\n  intros.\n  rewrite mult_comm.\n  induction m.\n  inversion H0.\n  simpl.\n  assert (O < m*n);try omega.\n  inversion H0;try omega.\n  assert (1 <= n);try omega.\n  assert (m > 1);try omega.\n  generalize (IHm H4);omega.\nQed.\n\nLemma mult_lemma4 : forall (n m:nat),n=n*m -> n=O \\/ m=1.\n  intros n m.\n  case n.\n  left;trivial.\n  intros.\n  right.\n  destruct m.\n  rewrite mult_comm in H.\n  discriminate.\n  destruct m;trivial.\n  assert ((S n0)<(S n0)*(S (S m))).\n  apply mult_lemma3;intros;auto with arith.\n  rewrite <- H in H0.\n  elim (lt_irrefl (S n0) H0).\nQed.\n\nLemma mult_lemma5 : forall (n m:nat),((n * m) =1)->(n=1)/\\(m=1).\n  induction n;simpl;intros;try discriminate.\n  induction m.\n  rewrite mult_comm in H.\n  simpl in H;discriminate.\n  assert ((S n)<=((S n)*(S m))).\n  apply mult_lemma1;discriminate.\n  assert (((S n)*(S m))=((S m)+n*(S m))).\n  reflexivity.\n  rewrite H1 in H0.\n  rewrite H in H0.\n  assert ((S n)=1).\n  omega.\n  split;trivial.\n  inversion H2.\n  rewrite H4 in H.\n  simpl in H.\n  omega.\nQed.\n\nLemma plus_minus_lemma1 : forall (y x:nat),(x+y-y=x).\n  induction y;intros;rewrite plus_comm;simpl.\n  auto with arith.\n  rewrite plus_comm.\n  apply IHy.\nQed.\n\n",
                "context_tokens": 729,
                "proof_start_offset": 2664,
                "proof_end_offset": 2918,
                "proof": "Lemma mult_minus_lemma1 : forall (a n:nat),a*n-n = (a-1)*n.\nProof.\nintros.\ninduction a.\nsimpl.\ntrivial.\nreplace (S a*n) with (n+a*n);try (auto with arith).\nrewrite plus_comm.\nrewrite plus_minus_lemma1.\nsimpl.\nrewrite <- minus_n_O;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_minus_lemma1 : forall (a n:nat),a*n-n = (a-1)*n.\n  intros.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n Qed.",
                        "correct": false,
                        "error_msg": "File \"./missing.v\", line 23, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./missing.v\", line 145, characters 1-5:\nError: Attempt to save an incomplete proof (in proof mult_minus_lemma1)\n\nmake[2]: *** [Makefile.coq:663: missing.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": "-1301 USA *)\n\nRequire Export Arith.\nRequire Export ArithRing.\nRequire Export Omega.\n\nUnset Standard Proposition Elimination Names.\n\n(** We first begin with some lemmas that relates *)\n(** +, * and - that are not in the standard library *)\nLemma mult_lemma1 : forall (n m:nat),(n <> O)->(m <> 0)->(n <= n*m).\n  intros.\n  rewrite mult_comm.\n  induction m;simpl;auto with arith.\n  elim H0;trivial.\nQed.\n\nLemma mult_lemma2 : forall (n m:nat),(n*m = O)->(n=O)\\/(m=O).\n  intros.\n  induction n.\n  tauto.\n  simpl in H.\n  right.\n  assert (m <= O);try omega.\n  rewrite <- H.\n  auto with arith.\nQed.\n\nLemma mult_lemma3 : forall (n m:nat),(n <> O)->(m > 1)->(n < n*m).\n  intros.\n  rewrite mult_comm.\n  induction m.\n  inversion H0.\n  simpl.\n  assert (O < m*n);try omega.\n  inversion H0;try omega.\n  assert (1 <= n);try omega.\n  assert (m > 1);try omega.\n  generalize (IHm H4);omega.\nQed.\n\nLemma mult_lemma4 : forall (n m:nat),n=n*m -> n=O \\/ m=1.\n  intros n m.\n  case n.\n  left;trivial.\n  intros.\n  right.\n  destruct m.\n  rewrite mult_comm in H.\n  discriminate.\n  destruct m;trivial.\n  assert ((S n0)<(S n0)*(S (S m))).\n  apply mult_lemma3;intros;auto with arith.\n  rewrite <- H in H0.\n  elim (lt_irrefl (S n0) H0).\nQed.\n\nLemma mult_lemma5 : forall (n m:nat),((n * m) =1)->(n=1)/\\(m=1).\n  induction n;simpl;intros;try discriminate.\n  induction m.\n  rewrite mult_comm in H.\n  simpl in H;discriminate.\n  assert ((S n)<=((S n)*(S m))).\n  apply mult_lemma1;discriminate.\n  assert (((S n)*(S m))=((S m)+n*(S m))).\n  reflexivity.\n  rewrite H1 in H0.\n  rewrite H in H0.\n  assert ((S n)=1).\n  omega.\n  split;trivial.\n  inversion H2.\n  rewrite H4 in H.\n  simpl in H.\n  omega.\nQed.\n\nLemma plus_minus_lemma1 : forall (y x:nat),(x+y-y=x).\n  induction y;intros;rewrite plus_comm;simpl.\n  auto with arith.\n  rewrite plus_comm.\n  apply IHy.\nQed.\n\nLemma mult_minus_lemma1 : forall (a n:nat),a*n-n = (a-1)*n.\n  intros.\n  induction a.\n  simpl.\n  trivial.\n  replace (S a*n) with (n+a*n);try (auto with arith).\n  rewrite plus_comm.\n  rewrite plus_minus_lemma1.\n  simpl.\n  rewrite <- minus_n_O;trivial.\nQed.\n\n",
                "context_tokens": 727,
                "proof_start_offset": 2920,
                "proof_end_offset": 3619,
                "proof": "Lemma mult_lemma6 : forall (a b n:nat),(n <> O)->(n*a=n*b)->(a=b).\nProof.\ninduction a.\nintros;rewrite <- mult_n_O in H0; generalize (mult_lemma2 n b); intros Hl2; elim Hl2; intros; (auto || elim H ; auto).\nintros b n H.\nrewrite mult_comm;simpl;rewrite mult_comm;intro.\nassert (n*a = n*b-n).\napply plus_minus;auto.\nassert (a*n=(b-1)*n).\nrewrite <- mult_minus_lemma1;rewrite mult_comm;rewrite (mult_comm b n);trivial.\nassert (a=(b-1)).\napply (IHa (b-1) n);trivial.\nrewrite mult_comm;rewrite (mult_comm n (b-1));trivial.\ndestruct b;simpl in H3.\nrewrite H3 in H0;rewrite (mult_comm n 0) in H0;rewrite plus_comm in H0;simpl in H0;elim H;trivial.\nrewrite <- minus_n_O in H3;auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_lemma6 : forall (a b n:nat),(n <> O)->(n*a=n*b)->(a=b).\n  intros.\n  induction a.\n  simpl.\n  trivial.\n  simpl in H.\n  rewrite plus_comm.\n  trivial.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./missing.v\", line 23, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./missing.v\", line 119, characters 2-19:\nError: Found no subterm matching \"?M1232 + ?M1233\" in the current goal.\n\nmake[2]: *** [Makefile.coq:663: missing.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": "try omega.\n  assert (m > 1);try omega.\n  generalize (IHm H4);omega.\nQed.\n\nLemma mult_lemma4 : forall (n m:nat),n=n*m -> n=O \\/ m=1.\n  intros n m.\n  case n.\n  left;trivial.\n  intros.\n  right.\n  destruct m.\n  rewrite mult_comm in H.\n  discriminate.\n  destruct m;trivial.\n  assert ((S n0)<(S n0)*(S (S m))).\n  apply mult_lemma3;intros;auto with arith.\n  rewrite <- H in H0.\n  elim (lt_irrefl (S n0) H0).\nQed.\n\nLemma mult_lemma5 : forall (n m:nat),((n * m) =1)->(n=1)/\\(m=1).\n  induction n;simpl;intros;try discriminate.\n  induction m.\n  rewrite mult_comm in H.\n  simpl in H;discriminate.\n  assert ((S n)<=((S n)*(S m))).\n  apply mult_lemma1;discriminate.\n  assert (((S n)*(S m))=((S m)+n*(S m))).\n  reflexivity.\n  rewrite H1 in H0.\n  rewrite H in H0.\n  assert ((S n)=1).\n  omega.\n  split;trivial.\n  inversion H2.\n  rewrite H4 in H.\n  simpl in H.\n  omega.\nQed.\n\nLemma plus_minus_lemma1 : forall (y x:nat),(x+y-y=x).\n  induction y;intros;rewrite plus_comm;simpl.\n  auto with arith.\n  rewrite plus_comm.\n  apply IHy.\nQed.\n\nLemma mult_minus_lemma1 : forall (a n:nat),a*n-n = (a-1)*n.\n  intros.\n  induction a.\n  simpl.\n  trivial.\n  replace (S a*n) with (n+a*n);try (auto with arith).\n  rewrite plus_comm.\n  rewrite plus_minus_lemma1.\n  simpl.\n  rewrite <- minus_n_O;trivial.\nQed.\n\nLemma mult_lemma6 : forall (a b n:nat),(n <> O)->(n*a=n*b)->(a=b).\n  induction a.\n  intros;rewrite <- mult_n_O in H0; generalize (mult_lemma2 n b); intros Hl2; elim Hl2; intros; (auto || elim H ; auto).\n  intros b n H.\n  rewrite mult_comm;simpl;rewrite mult_comm;intro.\n  assert (n*a = n*b-n).\n  apply plus_minus;auto.\n  assert (a*n=(b-1)*n).\n  rewrite <- mult_minus_lemma1;rewrite mult_comm;rewrite (mult_comm b n);trivial.\n  assert (a=(b-1)).\n  apply (IHa (b-1) n);trivial.\n  rewrite mult_comm;rewrite (mult_comm n (b-1));trivial.\n  destruct b;simpl in H3.\n  rewrite H3 in H0;rewrite (mult_comm n 0) in H0;rewrite plus_comm in H0;simpl in H0;elim H;trivial.\n  rewrite <- minus_n_O in H3;auto.\nQed.\n\n",
                "context_tokens": 726,
                "proof_start_offset": 3621,
                "proof_end_offset": 3705,
                "proof": "Lemma mult_lemma7 : forall (x y z t:nat),x*y*(z*t)=z*(x*y*t).\nProof.\nintros.\nring.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_lemma7 : forall (x y z t:nat),x*y*(z*t)=z*(x*y*t).\n  intros.\n  apply mult_lemma3;assumption.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./missing.v\", line 23, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./missing.v\", line 132, characters 8-19:\nError: In environment\nx, y, z, t : nat\nUnable to unify \"S ?M1226 <= ?M1226 * ?M1227\" with\n \"x * y * (z * t) = z * (x * y * t)\".\n\nmake[2]: *** [Makefile.coq:663: missing.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": " (n m:nat),n=n*m -> n=O \\/ m=1.\n  intros n m.\n  case n.\n  left;trivial.\n  intros.\n  right.\n  destruct m.\n  rewrite mult_comm in H.\n  discriminate.\n  destruct m;trivial.\n  assert ((S n0)<(S n0)*(S (S m))).\n  apply mult_lemma3;intros;auto with arith.\n  rewrite <- H in H0.\n  elim (lt_irrefl (S n0) H0).\nQed.\n\nLemma mult_lemma5 : forall (n m:nat),((n * m) =1)->(n=1)/\\(m=1).\n  induction n;simpl;intros;try discriminate.\n  induction m.\n  rewrite mult_comm in H.\n  simpl in H;discriminate.\n  assert ((S n)<=((S n)*(S m))).\n  apply mult_lemma1;discriminate.\n  assert (((S n)*(S m))=((S m)+n*(S m))).\n  reflexivity.\n  rewrite H1 in H0.\n  rewrite H in H0.\n  assert ((S n)=1).\n  omega.\n  split;trivial.\n  inversion H2.\n  rewrite H4 in H.\n  simpl in H.\n  omega.\nQed.\n\nLemma plus_minus_lemma1 : forall (y x:nat),(x+y-y=x).\n  induction y;intros;rewrite plus_comm;simpl.\n  auto with arith.\n  rewrite plus_comm.\n  apply IHy.\nQed.\n\nLemma mult_minus_lemma1 : forall (a n:nat),a*n-n = (a-1)*n.\n  intros.\n  induction a.\n  simpl.\n  trivial.\n  replace (S a*n) with (n+a*n);try (auto with arith).\n  rewrite plus_comm.\n  rewrite plus_minus_lemma1.\n  simpl.\n  rewrite <- minus_n_O;trivial.\nQed.\n\nLemma mult_lemma6 : forall (a b n:nat),(n <> O)->(n*a=n*b)->(a=b).\n  induction a.\n  intros;rewrite <- mult_n_O in H0; generalize (mult_lemma2 n b); intros Hl2; elim Hl2; intros; (auto || elim H ; auto).\n  intros b n H.\n  rewrite mult_comm;simpl;rewrite mult_comm;intro.\n  assert (n*a = n*b-n).\n  apply plus_minus;auto.\n  assert (a*n=(b-1)*n).\n  rewrite <- mult_minus_lemma1;rewrite mult_comm;rewrite (mult_comm b n);trivial.\n  assert (a=(b-1)).\n  apply (IHa (b-1) n);trivial.\n  rewrite mult_comm;rewrite (mult_comm n (b-1));trivial.\n  destruct b;simpl in H3.\n  rewrite H3 in H0;rewrite (mult_comm n 0) in H0;rewrite plus_comm in H0;simpl in H0;elim H;trivial.\n  rewrite <- minus_n_O in H3;auto.\nQed.\n\nLemma mult_lemma7 : forall (x y z t:nat),x*y*(z*t)=z*(x*y*t).\n  intros.\n  ring.\nQed.\n\n",
                "context_tokens": 734,
                "proof_start_offset": 3707,
                "proof_end_offset": 3783,
                "proof": "Lemma minus_lemma1 : forall (a b:nat),(S a-S b)<S a.\nProof.\nintros.\nomega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma minus_lemma1 : forall (a b:nat),(S a-S b)<S a.\n  intros.\n  apply plus_le_compat;auto with arith.\n  apply mult_le_compat;auto with arith.\n  apply mult_le_compat;auto with arith.\n  apply mult_le_compat;auto with arith.\n  apply mult_le_compat;auto with arith.\n  apply mult_le_compat;auto with arith.\n  apply mult_le_compat;auto with arith.\n  apply mult_le_compat;auto with arith.\n  apply mult_le_compat;auto with arith.\n  apply mult_le_compat;auto with arith.\n  apply mult_le_compat;auto with arith.\n  apply mult_le_compat;auto with arith.\n  apply mult_le_compat;auto with arith.\n  apply mult_le_compat;auto with arith.\n  apply mult_le_compat;auto with arith.\n  apply mult_le_compat;auto with arith.\n  apply mult_le_compat;auto with arith.\n  apply mult_le_compat;auto with arith.\n  apply mult_le_compat;auto with arith.\n  apply mult_le_compat;auto with arith.\n  apply mult_le_compat;auto with arith.\n Qed.",
                        "correct": false,
                        "error_msg": "File \"./missing.v\", line 23, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./missing.v\", line 137, characters 8-22:\nError: In environment\na, b : nat\nUnable to unify \"?M1226 + ?M1228 <= ?M1227 + ?M1229\" with\n \"S (S a - S b) <= S a\".\n\nmake[2]: *** [Makefile.coq:663: missing.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": "\n  intros.\n  right.\n  destruct m.\n  rewrite mult_comm in H.\n  discriminate.\n  destruct m;trivial.\n  assert ((S n0)<(S n0)*(S (S m))).\n  apply mult_lemma3;intros;auto with arith.\n  rewrite <- H in H0.\n  elim (lt_irrefl (S n0) H0).\nQed.\n\nLemma mult_lemma5 : forall (n m:nat),((n * m) =1)->(n=1)/\\(m=1).\n  induction n;simpl;intros;try discriminate.\n  induction m.\n  rewrite mult_comm in H.\n  simpl in H;discriminate.\n  assert ((S n)<=((S n)*(S m))).\n  apply mult_lemma1;discriminate.\n  assert (((S n)*(S m))=((S m)+n*(S m))).\n  reflexivity.\n  rewrite H1 in H0.\n  rewrite H in H0.\n  assert ((S n)=1).\n  omega.\n  split;trivial.\n  inversion H2.\n  rewrite H4 in H.\n  simpl in H.\n  omega.\nQed.\n\nLemma plus_minus_lemma1 : forall (y x:nat),(x+y-y=x).\n  induction y;intros;rewrite plus_comm;simpl.\n  auto with arith.\n  rewrite plus_comm.\n  apply IHy.\nQed.\n\nLemma mult_minus_lemma1 : forall (a n:nat),a*n-n = (a-1)*n.\n  intros.\n  induction a.\n  simpl.\n  trivial.\n  replace (S a*n) with (n+a*n);try (auto with arith).\n  rewrite plus_comm.\n  rewrite plus_minus_lemma1.\n  simpl.\n  rewrite <- minus_n_O;trivial.\nQed.\n\nLemma mult_lemma6 : forall (a b n:nat),(n <> O)->(n*a=n*b)->(a=b).\n  induction a.\n  intros;rewrite <- mult_n_O in H0; generalize (mult_lemma2 n b); intros Hl2; elim Hl2; intros; (auto || elim H ; auto).\n  intros b n H.\n  rewrite mult_comm;simpl;rewrite mult_comm;intro.\n  assert (n*a = n*b-n).\n  apply plus_minus;auto.\n  assert (a*n=(b-1)*n).\n  rewrite <- mult_minus_lemma1;rewrite mult_comm;rewrite (mult_comm b n);trivial.\n  assert (a=(b-1)).\n  apply (IHa (b-1) n);trivial.\n  rewrite mult_comm;rewrite (mult_comm n (b-1));trivial.\n  destruct b;simpl in H3.\n  rewrite H3 in H0;rewrite (mult_comm n 0) in H0;rewrite plus_comm in H0;simpl in H0;elim H;trivial.\n  rewrite <- minus_n_O in H3;auto.\nQed.\n\nLemma mult_lemma7 : forall (x y z t:nat),x*y*(z*t)=z*(x*y*t).\n  intros.\n  ring.\nQed.\n\nLemma minus_lemma1 : forall (a b:nat),(S a-S b)<S a.\n  intros.\n  omega.\nQed.\n\n",
                "context_tokens": 734,
                "proof_start_offset": 3785,
                "proof_end_offset": 3863,
                "proof": "Lemma minus_lemma2 : forall (n m:nat),(n<=m)->(n-m=O).\nProof.\nintros.\nomega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma minus_lemma2 : forall (n m:nat),(n<=m)->(n-m=O).\n  intros.\n  omega.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": "S m))).\n  apply mult_lemma3;intros;auto with arith.\n  rewrite <- H in H0.\n  elim (lt_irrefl (S n0) H0).\nQed.\n\nLemma mult_lemma5 : forall (n m:nat),((n * m) =1)->(n=1)/\\(m=1).\n  induction n;simpl;intros;try discriminate.\n  induction m.\n  rewrite mult_comm in H.\n  simpl in H;discriminate.\n  assert ((S n)<=((S n)*(S m))).\n  apply mult_lemma1;discriminate.\n  assert (((S n)*(S m))=((S m)+n*(S m))).\n  reflexivity.\n  rewrite H1 in H0.\n  rewrite H in H0.\n  assert ((S n)=1).\n  omega.\n  split;trivial.\n  inversion H2.\n  rewrite H4 in H.\n  simpl in H.\n  omega.\nQed.\n\nLemma plus_minus_lemma1 : forall (y x:nat),(x+y-y=x).\n  induction y;intros;rewrite plus_comm;simpl.\n  auto with arith.\n  rewrite plus_comm.\n  apply IHy.\nQed.\n\nLemma mult_minus_lemma1 : forall (a n:nat),a*n-n = (a-1)*n.\n  intros.\n  induction a.\n  simpl.\n  trivial.\n  replace (S a*n) with (n+a*n);try (auto with arith).\n  rewrite plus_comm.\n  rewrite plus_minus_lemma1.\n  simpl.\n  rewrite <- minus_n_O;trivial.\nQed.\n\nLemma mult_lemma6 : forall (a b n:nat),(n <> O)->(n*a=n*b)->(a=b).\n  induction a.\n  intros;rewrite <- mult_n_O in H0; generalize (mult_lemma2 n b); intros Hl2; elim Hl2; intros; (auto || elim H ; auto).\n  intros b n H.\n  rewrite mult_comm;simpl;rewrite mult_comm;intro.\n  assert (n*a = n*b-n).\n  apply plus_minus;auto.\n  assert (a*n=(b-1)*n).\n  rewrite <- mult_minus_lemma1;rewrite mult_comm;rewrite (mult_comm b n);trivial.\n  assert (a=(b-1)).\n  apply (IHa (b-1) n);trivial.\n  rewrite mult_comm;rewrite (mult_comm n (b-1));trivial.\n  destruct b;simpl in H3.\n  rewrite H3 in H0;rewrite (mult_comm n 0) in H0;rewrite plus_comm in H0;simpl in H0;elim H;trivial.\n  rewrite <- minus_n_O in H3;auto.\nQed.\n\nLemma mult_lemma7 : forall (x y z t:nat),x*y*(z*t)=z*(x*y*t).\n  intros.\n  ring.\nQed.\n\nLemma minus_lemma1 : forall (a b:nat),(S a-S b)<S a.\n  intros.\n  omega.\nQed.\n\nLemma minus_lemma2 : forall (n m:nat),(n<=m)->(n-m=O).\n  intros.\n  omega.\nQed.\n\n",
                "context_tokens": 726,
                "proof_start_offset": 3865,
                "proof_end_offset": 4270,
                "proof": "Lemma mult_minus_lemma2 : forall (x y z:nat),(x*(y-z))=(x*y-x*z).\nProof.\nintros.\ncase (le_lt_dec y z);intro.\nrewrite (minus_lemma2 y z l);rewrite mult_comm;simpl;rewrite minus_lemma2;trivial;auto with arith.\nassert (y=z+(y-z)).\nrewrite <- (le_plus_minus z y);try (auto with arith).\nreplace (x*y) with (x*(z+(y-z))).\nrewrite mult_plus_distr_l;rewrite minus_plus;trivial.\nrewrite <- H;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_minus_lemma2 : forall (x y z:nat),(x*(y-z))=(x*y-x*z).\n  intros.\n  omega.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./missing.v\", line 23, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./missing.v\", line 147, characters 2-7:\nError: Omega can't solve this system\n\nmake[2]: *** [Makefile.coq:663: missing.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": ".\n  rewrite H in H0.\n  assert ((S n)=1).\n  omega.\n  split;trivial.\n  inversion H2.\n  rewrite H4 in H.\n  simpl in H.\n  omega.\nQed.\n\nLemma plus_minus_lemma1 : forall (y x:nat),(x+y-y=x).\n  induction y;intros;rewrite plus_comm;simpl.\n  auto with arith.\n  rewrite plus_comm.\n  apply IHy.\nQed.\n\nLemma mult_minus_lemma1 : forall (a n:nat),a*n-n = (a-1)*n.\n  intros.\n  induction a.\n  simpl.\n  trivial.\n  replace (S a*n) with (n+a*n);try (auto with arith).\n  rewrite plus_comm.\n  rewrite plus_minus_lemma1.\n  simpl.\n  rewrite <- minus_n_O;trivial.\nQed.\n\nLemma mult_lemma6 : forall (a b n:nat),(n <> O)->(n*a=n*b)->(a=b).\n  induction a.\n  intros;rewrite <- mult_n_O in H0; generalize (mult_lemma2 n b); intros Hl2; elim Hl2; intros; (auto || elim H ; auto).\n  intros b n H.\n  rewrite mult_comm;simpl;rewrite mult_comm;intro.\n  assert (n*a = n*b-n).\n  apply plus_minus;auto.\n  assert (a*n=(b-1)*n).\n  rewrite <- mult_minus_lemma1;rewrite mult_comm;rewrite (mult_comm b n);trivial.\n  assert (a=(b-1)).\n  apply (IHa (b-1) n);trivial.\n  rewrite mult_comm;rewrite (mult_comm n (b-1));trivial.\n  destruct b;simpl in H3.\n  rewrite H3 in H0;rewrite (mult_comm n 0) in H0;rewrite plus_comm in H0;simpl in H0;elim H;trivial.\n  rewrite <- minus_n_O in H3;auto.\nQed.\n\nLemma mult_lemma7 : forall (x y z t:nat),x*y*(z*t)=z*(x*y*t).\n  intros.\n  ring.\nQed.\n\nLemma minus_lemma1 : forall (a b:nat),(S a-S b)<S a.\n  intros.\n  omega.\nQed.\n\nLemma minus_lemma2 : forall (n m:nat),(n<=m)->(n-m=O).\n  intros.\n  omega.\nQed.\n\nLemma mult_minus_lemma2 : forall (x y z:nat),(x*(y-z))=(x*y-x*z).\n  intros.\n  case (le_lt_dec y z);intro.\n  rewrite (minus_lemma2 y z l);rewrite mult_comm;simpl;rewrite minus_lemma2;trivial;auto with arith.\n  assert (y=z+(y-z)).\n  rewrite <- (le_plus_minus z y);try (auto with arith).\n  replace (x*y) with (x*(z+(y-z))).\n  rewrite mult_plus_distr_l;rewrite minus_plus;trivial.\n  rewrite <- H;trivial.\nQed.\n\n",
                "context_tokens": 725,
                "proof_start_offset": 4272,
                "proof_end_offset": 4480,
                "proof": "Lemma plus_minus_lemma2 : forall (x y z:nat),(y<=x)->(x-y+z)=(x+z-y).\nProof.\nintros.\nrewrite (le_plus_minus y x);try (auto with arith).\nrewrite minus_plus;rewrite <- plus_assoc;rewrite minus_plus;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma plus_minus_lemma2 : forall (x y z:nat),(y<=x)->(x-y+z)=(x+z-y).\n  intros.\n  omega.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": ";rewrite plus_comm;simpl.\n  auto with arith.\n  rewrite plus_comm.\n  apply IHy.\nQed.\n\nLemma mult_minus_lemma1 : forall (a n:nat),a*n-n = (a-1)*n.\n  intros.\n  induction a.\n  simpl.\n  trivial.\n  replace (S a*n) with (n+a*n);try (auto with arith).\n  rewrite plus_comm.\n  rewrite plus_minus_lemma1.\n  simpl.\n  rewrite <- minus_n_O;trivial.\nQed.\n\nLemma mult_lemma6 : forall (a b n:nat),(n <> O)->(n*a=n*b)->(a=b).\n  induction a.\n  intros;rewrite <- mult_n_O in H0; generalize (mult_lemma2 n b); intros Hl2; elim Hl2; intros; (auto || elim H ; auto).\n  intros b n H.\n  rewrite mult_comm;simpl;rewrite mult_comm;intro.\n  assert (n*a = n*b-n).\n  apply plus_minus;auto.\n  assert (a*n=(b-1)*n).\n  rewrite <- mult_minus_lemma1;rewrite mult_comm;rewrite (mult_comm b n);trivial.\n  assert (a=(b-1)).\n  apply (IHa (b-1) n);trivial.\n  rewrite mult_comm;rewrite (mult_comm n (b-1));trivial.\n  destruct b;simpl in H3.\n  rewrite H3 in H0;rewrite (mult_comm n 0) in H0;rewrite plus_comm in H0;simpl in H0;elim H;trivial.\n  rewrite <- minus_n_O in H3;auto.\nQed.\n\nLemma mult_lemma7 : forall (x y z t:nat),x*y*(z*t)=z*(x*y*t).\n  intros.\n  ring.\nQed.\n\nLemma minus_lemma1 : forall (a b:nat),(S a-S b)<S a.\n  intros.\n  omega.\nQed.\n\nLemma minus_lemma2 : forall (n m:nat),(n<=m)->(n-m=O).\n  intros.\n  omega.\nQed.\n\nLemma mult_minus_lemma2 : forall (x y z:nat),(x*(y-z))=(x*y-x*z).\n  intros.\n  case (le_lt_dec y z);intro.\n  rewrite (minus_lemma2 y z l);rewrite mult_comm;simpl;rewrite minus_lemma2;trivial;auto with arith.\n  assert (y=z+(y-z)).\n  rewrite <- (le_plus_minus z y);try (auto with arith).\n  replace (x*y) with (x*(z+(y-z))).\n  rewrite mult_plus_distr_l;rewrite minus_plus;trivial.\n  rewrite <- H;trivial.\nQed.\n\nLemma plus_minus_lemma2 : forall (x y z:nat),(y<=x)->(x-y+z)=(x+z-y).\n  intros.\n  rewrite (le_plus_minus y x);try (auto with arith).\n  rewrite minus_plus;rewrite <- plus_assoc;rewrite minus_plus;trivial.\nQed.\n\n",
                "context_tokens": 724,
                "proof_start_offset": 4482,
                "proof_end_offset": 4694,
                "proof": "Lemma minus_minus_lemma1 : forall (x y z:nat),(z<=y)->(x-(y-z))=(x+z-y).\nProof.\nintros.\nrewrite (le_plus_minus z y);trivial.\nrewrite minus_plus;rewrite plus_comm;rewrite <- minus_plus_simpl_l_reverse;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma minus_minus_lemma1 : forall (x y z:nat),(z<=y)->(x-(y-z))=(x+z-y).\n  intros.\n  rewrite (plus_minus_lemma2 y z l);rewrite mult_comm;rewrite plus_comm;trivial.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./missing.v\", line 23, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./missing.v\", line 164, characters 33-34:\nError: The reference l was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: missing.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": "*n) with (n+a*n);try (auto with arith).\n  rewrite plus_comm.\n  rewrite plus_minus_lemma1.\n  simpl.\n  rewrite <- minus_n_O;trivial.\nQed.\n\nLemma mult_lemma6 : forall (a b n:nat),(n <> O)->(n*a=n*b)->(a=b).\n  induction a.\n  intros;rewrite <- mult_n_O in H0; generalize (mult_lemma2 n b); intros Hl2; elim Hl2; intros; (auto || elim H ; auto).\n  intros b n H.\n  rewrite mult_comm;simpl;rewrite mult_comm;intro.\n  assert (n*a = n*b-n).\n  apply plus_minus;auto.\n  assert (a*n=(b-1)*n).\n  rewrite <- mult_minus_lemma1;rewrite mult_comm;rewrite (mult_comm b n);trivial.\n  assert (a=(b-1)).\n  apply (IHa (b-1) n);trivial.\n  rewrite mult_comm;rewrite (mult_comm n (b-1));trivial.\n  destruct b;simpl in H3.\n  rewrite H3 in H0;rewrite (mult_comm n 0) in H0;rewrite plus_comm in H0;simpl in H0;elim H;trivial.\n  rewrite <- minus_n_O in H3;auto.\nQed.\n\nLemma mult_lemma7 : forall (x y z t:nat),x*y*(z*t)=z*(x*y*t).\n  intros.\n  ring.\nQed.\n\nLemma minus_lemma1 : forall (a b:nat),(S a-S b)<S a.\n  intros.\n  omega.\nQed.\n\nLemma minus_lemma2 : forall (n m:nat),(n<=m)->(n-m=O).\n  intros.\n  omega.\nQed.\n\nLemma mult_minus_lemma2 : forall (x y z:nat),(x*(y-z))=(x*y-x*z).\n  intros.\n  case (le_lt_dec y z);intro.\n  rewrite (minus_lemma2 y z l);rewrite mult_comm;simpl;rewrite minus_lemma2;trivial;auto with arith.\n  assert (y=z+(y-z)).\n  rewrite <- (le_plus_minus z y);try (auto with arith).\n  replace (x*y) with (x*(z+(y-z))).\n  rewrite mult_plus_distr_l;rewrite minus_plus;trivial.\n  rewrite <- H;trivial.\nQed.\n\nLemma plus_minus_lemma2 : forall (x y z:nat),(y<=x)->(x-y+z)=(x+z-y).\n  intros.\n  rewrite (le_plus_minus y x);try (auto with arith).\n  rewrite minus_plus;rewrite <- plus_assoc;rewrite minus_plus;trivial.\nQed.\n\nLemma minus_minus_lemma1 : forall (x y z:nat),(z<=y)->(x-(y-z))=(x+z-y).\n  intros.\n  rewrite (le_plus_minus z y);trivial.\n  rewrite minus_plus;rewrite plus_comm;rewrite <- minus_plus_simpl_l_reverse;trivial.\nQed.\n\n",
                "context_tokens": 729,
                "proof_start_offset": 4696,
                "proof_end_offset": 4828,
                "proof": "Lemma minus_minus_lemma2 : forall (x y z:nat),(x-y-z)=(x-(y+z)).\nProof.\ninduction x;simpl;trivial.\nintros.\ncase y;simpl;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma minus_minus_lemma2 : forall (x y z:nat),(x-y-z)=(x-(y+z)).\n  intros.\n  rewrite (le_plus_minus z y z);trivial.\n  rewrite minus_plus;rewrite plus_comm;rewrite minus_plus;trivial.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./missing.v\", line 23, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./missing.v\", line 170, characters 29-30:\nError:\nIn environment\nx, y, z : nat\nThe term \"z\" has type \"nat\" while it is expected to have type \"z <= y\".\n\nmake[2]: *** [Makefile.coq:663: missing.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/missing.v",
                "context": "\n\nLemma mult_lemma6 : forall (a b n:nat),(n <> O)->(n*a=n*b)->(a=b).\n  induction a.\n  intros;rewrite <- mult_n_O in H0; generalize (mult_lemma2 n b); intros Hl2; elim Hl2; intros; (auto || elim H ; auto).\n  intros b n H.\n  rewrite mult_comm;simpl;rewrite mult_comm;intro.\n  assert (n*a = n*b-n).\n  apply plus_minus;auto.\n  assert (a*n=(b-1)*n).\n  rewrite <- mult_minus_lemma1;rewrite mult_comm;rewrite (mult_comm b n);trivial.\n  assert (a=(b-1)).\n  apply (IHa (b-1) n);trivial.\n  rewrite mult_comm;rewrite (mult_comm n (b-1));trivial.\n  destruct b;simpl in H3.\n  rewrite H3 in H0;rewrite (mult_comm n 0) in H0;rewrite plus_comm in H0;simpl in H0;elim H;trivial.\n  rewrite <- minus_n_O in H3;auto.\nQed.\n\nLemma mult_lemma7 : forall (x y z t:nat),x*y*(z*t)=z*(x*y*t).\n  intros.\n  ring.\nQed.\n\nLemma minus_lemma1 : forall (a b:nat),(S a-S b)<S a.\n  intros.\n  omega.\nQed.\n\nLemma minus_lemma2 : forall (n m:nat),(n<=m)->(n-m=O).\n  intros.\n  omega.\nQed.\n\nLemma mult_minus_lemma2 : forall (x y z:nat),(x*(y-z))=(x*y-x*z).\n  intros.\n  case (le_lt_dec y z);intro.\n  rewrite (minus_lemma2 y z l);rewrite mult_comm;simpl;rewrite minus_lemma2;trivial;auto with arith.\n  assert (y=z+(y-z)).\n  rewrite <- (le_plus_minus z y);try (auto with arith).\n  replace (x*y) with (x*(z+(y-z))).\n  rewrite mult_plus_distr_l;rewrite minus_plus;trivial.\n  rewrite <- H;trivial.\nQed.\n\nLemma plus_minus_lemma2 : forall (x y z:nat),(y<=x)->(x-y+z)=(x+z-y).\n  intros.\n  rewrite (le_plus_minus y x);try (auto with arith).\n  rewrite minus_plus;rewrite <- plus_assoc;rewrite minus_plus;trivial.\nQed.\n\nLemma minus_minus_lemma1 : forall (x y z:nat),(z<=y)->(x-(y-z))=(x+z-y).\n  intros.\n  rewrite (le_plus_minus z y);trivial.\n  rewrite minus_plus;rewrite plus_comm;rewrite <- minus_plus_simpl_l_reverse;trivial.\nQed.\n\nLemma minus_minus_lemma2 : forall (x y z:nat),(x-y-z)=(x-(y+z)).\n  induction x;simpl;trivial.\n  intros.\n  case y;simpl;trivial.\nQed.\n\n",
                "context_tokens": 732,
                "proof_start_offset": 4830,
                "proof_end_offset": 4910,
                "proof": "Lemma minus_lt_lemma1 : forall (b a:nat),(a<b)->(0<b-a).\nProof.\nintros.\nomega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma minus_lt_lemma1 : forall (b a:nat),(a<b)->(0<b-a).\n  intros.\n  omega.\nQed.",
                        "correct": true,
                        "error_msg": ""
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\nRequire Import euclide.\nRequire Import power.\nRequire Import Wf_nat.\n\nUnset Standard Proposition Elimination Names.\n\n(** d is a common divisor of a and b if d | a and d | b *)\nDefinition is_cd (d a b : nat) := (divides a d)/\\(divides b d).\n\n(** d is a greatest common divisor of a and b if it is a maximal common divisor *)\nDefinition is_gcd (d a b:nat) := (is_cd d a b)/\\(forall (d':nat),(is_cd d' a b)->(divides d d')).\n\n(** there is at most one gcd of a and b *)\n",
                "context_tokens": 375,
                "proof_start_offset": 1374,
                "proof_end_offset": 1542,
                "proof": "Theorem gcd_unique : forall (d d' a b:nat),(is_gcd d a b)->(is_gcd d' a b)->d=d'.\nProof.\nunfold is_gcd.\nintros.\nelim H;elim H0;intros.\napply divides_antisym;auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem gcd_unique : forall (d d' a b:nat),(is_gcd d a b)->(is_gcd d' a b)->d=d'.\nProof.\nintros.\napply gcd_unique with (a:=gcd d a b); auto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 37, characters 26-29:\nError: The reference gcd was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\nRequire Import euclide.\nRequire Import power.\nRequire Import Wf_nat.\n\nUnset Standard Proposition Elimination Names.\n\n(** d is a common divisor of a and b if d | a and d | b *)\nDefinition is_cd (d a b : nat) := (divides a d)/\\(divides b d).\n\n(** d is a greatest common divisor of a and b if it is a maximal common divisor *)\nDefinition is_gcd (d a b:nat) := (is_cd d a b)/\\(forall (d':nat),(is_cd d' a b)->(divides d d')).\n\n(** there is at most one gcd of a and b *)\nTheorem gcd_unique : forall (d d' a b:nat),(is_gcd d a b)->(is_gcd d' a b)->d=d'.\n  unfold is_gcd.\n  intros.\n  elim H;elim H0;intros.\n  apply divides_antisym;auto.\nQed.\n\n(** gcd(a,b) = gcd(b,a) *)\n",
                "context_tokens": 457,
                "proof_start_offset": 1571,
                "proof_end_offset": 1763,
                "proof": "Lemma gcd_sym : forall (d a b:nat),(is_gcd d a b)->(is_gcd d b a).\nProof.\nunfold is_gcd.\nintros.\nelim H;intros.\nsplit.\nred;red in H0;tauto.\nintros.\napply H1.\nred;red in H2;tauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_sym : forall (d a b:nat),(is_gcd d a b)->(is_gcd d b a).\n  unfold is_gcd.\n  intros.\n  elim H; elim H0; intros.\n  apply divide_antisym;auto.\n  apply divide_antisym;auto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 45, characters 15-17:\nError: The reference H0 was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\nRequire Import euclide.\nRequire Import power.\nRequire Import Wf_nat.\n\nUnset Standard Proposition Elimination Names.\n\n(** d is a common divisor of a and b if d | a and d | b *)\nDefinition is_cd (d a b : nat) := (divides a d)/\\(divides b d).\n\n(** d is a greatest common divisor of a and b if it is a maximal common divisor *)\nDefinition is_gcd (d a b:nat) := (is_cd d a b)/\\(forall (d':nat),(is_cd d' a b)->(divides d d')).\n\n(** there is at most one gcd of a and b *)\nTheorem gcd_unique : forall (d d' a b:nat),(is_gcd d a b)->(is_gcd d' a b)->d=d'.\n  unfold is_gcd.\n  intros.\n  elim H;elim H0;intros.\n  apply divides_antisym;auto.\nQed.\n\n(** gcd(a,b) = gcd(b,a) *)\nLemma gcd_sym : forall (d a b:nat),(is_gcd d a b)->(is_gcd d b a).\n  unfold is_gcd.\n  intros.\n  elim H;intros.\n  split.\n  red;red in H0;tauto.\n  intros.\n  apply H1.\n  red;red in H2;tauto.\nQed.\n\n(** gcd(0,a)=a *)\n",
                "context_tokens": 545,
                "proof_start_offset": 1783,
                "proof_end_offset": 1947,
                "proof": "Lemma gcd_zero : forall (a:nat),(is_gcd a O a).\nProof.\nunfold is_gcd.\nintro.\nsplit.\nred;split;[apply zero_max_div | apply divides_refl].\nunfold is_cd;tauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_zero : forall (a:nat),(is_gcd a O a).\n  unfold is_gcd.\n  intros.\n  elim H;intros.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n Qed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 57, characters 7-8:\nError: The reference H was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\nRequire Import euclide.\nRequire Import power.\nRequire Import Wf_nat.\n\nUnset Standard Proposition Elimination Names.\n\n(** d is a common divisor of a and b if d | a and d | b *)\nDefinition is_cd (d a b : nat) := (divides a d)/\\(divides b d).\n\n(** d is a greatest common divisor of a and b if it is a maximal common divisor *)\nDefinition is_gcd (d a b:nat) := (is_cd d a b)/\\(forall (d':nat),(is_cd d' a b)->(divides d d')).\n\n(** there is at most one gcd of a and b *)\nTheorem gcd_unique : forall (d d' a b:nat),(is_gcd d a b)->(is_gcd d' a b)->d=d'.\n  unfold is_gcd.\n  intros.\n  elim H;elim H0;intros.\n  apply divides_antisym;auto.\nQed.\n\n(** gcd(a,b) = gcd(b,a) *)\nLemma gcd_sym : forall (d a b:nat),(is_gcd d a b)->(is_gcd d b a).\n  unfold is_gcd.\n  intros.\n  elim H;intros.\n  split.\n  red;red in H0;tauto.\n  intros.\n  apply H1.\n  red;red in H2;tauto.\nQed.\n\n(** gcd(0,a)=a *)\nLemma gcd_zero : forall (a:nat),(is_gcd a O a).\n  unfold is_gcd.\n  intro.\n  split.\n  red;split;[apply zero_max_div | apply divides_refl].\n  unfold is_cd;tauto.\nQed.\n\n(** gcd(1,a)=1 *)\n",
                "context_tokens": 615,
                "proof_start_offset": 1967,
                "proof_end_offset": 2130,
                "proof": "Lemma gcd_one : forall (a:nat),(is_gcd 1 1 a).\nProof.\nunfold is_gcd.\nintros.\nsplit.\nred;split;[apply divides_refl | apply one_min_div].\nunfold is_cd;tauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_one : forall (a:nat),(is_gcd 1 1 a).\n  unfold is_gcd.\n  intro.\n  elim H;intros.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n  apply H1.\n  red; intro.\n Qed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 66, characters 7-8:\nError: The reference H was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\nRequire Import euclide.\nRequire Import power.\nRequire Import Wf_nat.\n\nUnset Standard Proposition Elimination Names.\n\n(** d is a common divisor of a and b if d | a and d | b *)\nDefinition is_cd (d a b : nat) := (divides a d)/\\(divides b d).\n\n(** d is a greatest common divisor of a and b if it is a maximal common divisor *)\nDefinition is_gcd (d a b:nat) := (is_cd d a b)/\\(forall (d':nat),(is_cd d' a b)->(divides d d')).\n\n(** there is at most one gcd of a and b *)\nTheorem gcd_unique : forall (d d' a b:nat),(is_gcd d a b)->(is_gcd d' a b)->d=d'.\n  unfold is_gcd.\n  intros.\n  elim H;elim H0;intros.\n  apply divides_antisym;auto.\nQed.\n\n(** gcd(a,b) = gcd(b,a) *)\nLemma gcd_sym : forall (d a b:nat),(is_gcd d a b)->(is_gcd d b a).\n  unfold is_gcd.\n  intros.\n  elim H;intros.\n  split.\n  red;red in H0;tauto.\n  intros.\n  apply H1.\n  red;red in H2;tauto.\nQed.\n\n(** gcd(0,a)=a *)\nLemma gcd_zero : forall (a:nat),(is_gcd a O a).\n  unfold is_gcd.\n  intro.\n  split.\n  red;split;[apply zero_max_div | apply divides_refl].\n  unfold is_cd;tauto.\nQed.\n\n(** gcd(1,a)=1 *)\nLemma gcd_one : forall (a:nat),(is_gcd 1 1 a).\n  unfold is_gcd.\n  intros.\n  split.\n  red;split;[apply divides_refl | apply one_min_div].\n  unfold is_cd;tauto.\nQed.\n\n(** if a <= b then gcd(a,b)=gcd(a,b-a) *)\n",
                "context_tokens": 697,
                "proof_start_offset": 2174,
                "proof_end_offset": 2759,
                "proof": "Lemma gcd_minus : forall (d a b:nat),(a <= b)->((is_gcd d a b)<->(is_gcd d a (b-a))).\nProof.\nintros.\nunfold is_gcd.\nsplit;intro.\nelim H0;intros.\nsplit.\nred in H1;red.\nelim H1;intros.\nsplit;try tauto.\napply divides_minus;trivial.\nunfold is_cd;intros.\napply H2;red;elim H3;intros.\nsplit;[tauto | rewrite (le_plus_minus a b H);apply divides_plus;trivial].\nelim H0;unfold is_cd;intros.\nsplit.\nsplit;[tauto | elim H1;intros;rewrite (le_plus_minus a b H);apply divides_plus;trivial].\nintros.\nelim H3;intros;apply H2.\nsplit;try (apply divides_minus);trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_minus : forall (d a b:nat),(a <= b)->((is_gcd d a b)<->(is_gcd d a (b-a))).\n  unfold is_gcd.\n  intros.\n  elim H;intros.\n  apply H1.\n  red; intro.\n  apply H2.\n  red; intro.\n  apply H2.\n  red; intro.\n  apply H2.\n  red; intro.\n  apply H2.\n  red; intro.\n  apply H3.\n  red; intro.\n  apply H3.\n  red; intro.\n  apply H3.\n  red; intro.\n  apply H3.\n  red; intro.\n  apply H3.\n  red; intro.\n  apply H3.\n  red; intro.\n  apply H3.\n  red; intro.\n  apply H3.\n  red; intro.\n  apply H3.\n  red; intro.\n  apply H3.\n  red; intro.\n  apply H3.\n  red; intro.\n  apply H3.\n  red; intro.\n  apply H3.\n  red; intro.\n  apply H3.\n  red; intro.\n  apply H3.\n  red; intro.\n  apply H3.\n  red; intro.\n  apply H3.\n  red; intro.\n  apply H3.\n  red; intro.\n  apply H3.\n  red; intro.\n Qed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 76, characters 8-10:\nError: The reference H1 was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": " with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\nRequire Import euclide.\nRequire Import power.\nRequire Import Wf_nat.\n\nUnset Standard Proposition Elimination Names.\n\n(** d is a common divisor of a and b if d | a and d | b *)\nDefinition is_cd (d a b : nat) := (divides a d)/\\(divides b d).\n\n(** d is a greatest common divisor of a and b if it is a maximal common divisor *)\nDefinition is_gcd (d a b:nat) := (is_cd d a b)/\\(forall (d':nat),(is_cd d' a b)->(divides d d')).\n\n(** there is at most one gcd of a and b *)\nTheorem gcd_unique : forall (d d' a b:nat),(is_gcd d a b)->(is_gcd d' a b)->d=d'.\n  unfold is_gcd.\n  intros.\n  elim H;elim H0;intros.\n  apply divides_antisym;auto.\nQed.\n\n(** gcd(a,b) = gcd(b,a) *)\nLemma gcd_sym : forall (d a b:nat),(is_gcd d a b)->(is_gcd d b a).\n  unfold is_gcd.\n  intros.\n  elim H;intros.\n  split.\n  red;red in H0;tauto.\n  intros.\n  apply H1.\n  red;red in H2;tauto.\nQed.\n\n(** gcd(0,a)=a *)\nLemma gcd_zero : forall (a:nat),(is_gcd a O a).\n  unfold is_gcd.\n  intro.\n  split.\n  red;split;[apply zero_max_div | apply divides_refl].\n  unfold is_cd;tauto.\nQed.\n\n(** gcd(1,a)=1 *)\nLemma gcd_one : forall (a:nat),(is_gcd 1 1 a).\n  unfold is_gcd.\n  intros.\n  split.\n  red;split;[apply divides_refl | apply one_min_div].\n  unfold is_cd;tauto.\nQed.\n\n(** if a <= b then gcd(a,b)=gcd(a,b-a) *)\nLemma gcd_minus : forall (d a b:nat),(a <= b)->((is_gcd d a b)<->(is_gcd d a (b-a))).\n  intros.\n  unfold is_gcd.\n  split;intro.\n  elim H0;intros.\n  split.\n  red in H1;red.\n  elim H1;intros.\n  split;try tauto.\n  apply divides_minus;trivial.\n  unfold is_cd;intros.\n  apply H2;red;elim H3;intros.\n  split;[tauto | rewrite (le_plus_minus a b H);apply divides_plus;trivial].\n  elim H0;unfold is_cd;intros.\n  split.\n  split;[tauto | elim H1;intros;rewrite (le_plus_minus a b H);apply divides_plus;trivial].\n  intros.\n  elim H3;intros;apply H2.\n  split;try (apply divides_minus);trivial.\nQed.\n\n(** gcd(a,a) = a *)\n",
                "context_tokens": 739,
                "proof_start_offset": 2781,
                "proof_end_offset": 2923,
                "proof": "Lemma gcd_refl : forall (a:nat),(is_gcd a a a).\nProof.\nunfold is_gcd.\nintros.\nunfold is_cd.\nsplit;try tauto.\nsplit;apply divides_refl.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_refl : forall (a:nat),(is_gcd a a a).\n  unfold is_gcd.\n  intros.\n  elim H;intros.\n  split.\n  red in H1;red in H1;tauto.\n  apply H1.\n  red in H1;tauto.\n  apply H1.\n  red in H1;tauto.\n  apply H1.\n  red in H1;tauto.\n  apply H1.\n  red in H1;tauto.\n  apply H1.\n  red in H1;tauto.\n  apply H1.\n  red in H1;tauto.\n  apply H1.\n  red in H1;tauto.\n  apply H1.\n  red in H1;tauto.\n  apply H1.\n  red in H1;tauto.\n  apply H1.\n  red in H1;tauto.\n  apply H1.\n  red in H1;tauto.\n  apply H1.\n  red in H1; tauto.\n  apply H1.\n  red in H1; tauto.\n  apply H1.\n  red in H1; tauto.\n  apply H1.\n  red in H1; tauto.\n  apply H1.\n  red in H1; tauto.\n  apply H1.\n  red in H1; tauto.\n  apply H1Qed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 97, characters 7-8:\nError: The reference H was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": " Names.\n\n(** d is a common divisor of a and b if d | a and d | b *)\nDefinition is_cd (d a b : nat) := (divides a d)/\\(divides b d).\n\n(** d is a greatest common divisor of a and b if it is a maximal common divisor *)\nDefinition is_gcd (d a b:nat) := (is_cd d a b)/\\(forall (d':nat),(is_cd d' a b)->(divides d d')).\n\n(** there is at most one gcd of a and b *)\nTheorem gcd_unique : forall (d d' a b:nat),(is_gcd d a b)->(is_gcd d' a b)->d=d'.\n  unfold is_gcd.\n  intros.\n  elim H;elim H0;intros.\n  apply divides_antisym;auto.\nQed.\n\n(** gcd(a,b) = gcd(b,a) *)\nLemma gcd_sym : forall (d a b:nat),(is_gcd d a b)->(is_gcd d b a).\n  unfold is_gcd.\n  intros.\n  elim H;intros.\n  split.\n  red;red in H0;tauto.\n  intros.\n  apply H1.\n  red;red in H2;tauto.\nQed.\n\n(** gcd(0,a)=a *)\nLemma gcd_zero : forall (a:nat),(is_gcd a O a).\n  unfold is_gcd.\n  intro.\n  split.\n  red;split;[apply zero_max_div | apply divides_refl].\n  unfold is_cd;tauto.\nQed.\n\n(** gcd(1,a)=1 *)\nLemma gcd_one : forall (a:nat),(is_gcd 1 1 a).\n  unfold is_gcd.\n  intros.\n  split.\n  red;split;[apply divides_refl | apply one_min_div].\n  unfold is_cd;tauto.\nQed.\n\n(** if a <= b then gcd(a,b)=gcd(a,b-a) *)\nLemma gcd_minus : forall (d a b:nat),(a <= b)->((is_gcd d a b)<->(is_gcd d a (b-a))).\n  intros.\n  unfold is_gcd.\n  split;intro.\n  elim H0;intros.\n  split.\n  red in H1;red.\n  elim H1;intros.\n  split;try tauto.\n  apply divides_minus;trivial.\n  unfold is_cd;intros.\n  apply H2;red;elim H3;intros.\n  split;[tauto | rewrite (le_plus_minus a b H);apply divides_plus;trivial].\n  elim H0;unfold is_cd;intros.\n  split.\n  split;[tauto | elim H1;intros;rewrite (le_plus_minus a b H);apply divides_plus;trivial].\n  intros.\n  elim H3;intros;apply H2.\n  split;try (apply divides_minus);trivial.\nQed.\n\n(** gcd(a,a) = a *)\nLemma gcd_refl : forall (a:nat),(is_gcd a a a).\n  unfold is_gcd.\n  intros.\n  unfold is_cd.\n  split;try tauto.\n  split;apply divides_refl.\nQed.\n\n(** two trivial lemmas: gcd(a,b) | a *)\n",
                "context_tokens": 731,
                "proof_start_offset": 2965,
                "proof_end_offset": 3080,
                "proof": "Lemma gcd_div_l : forall (d a b:nat),(is_gcd d a b)->(divides a d).\nProof.\nunfold is_gcd;unfold is_cd;intros;tauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_div_l : forall (d a b:nat),(is_gcd d a b)->(divides a d).\n  unfold is_gcd.\n  intros.\n  elim H.\n  split.\n  red;intro.\n  elim H0;intros.\n  apply H1.\n  apply H2.\n  apply H1.\n  apply H2.\n  apply H1.\n  apply H2.\n  apply H1.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H1.\n  apply H2.\n  apply H2.\n  apply H1.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply H2.\n  apply HQed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 107, characters 2-7:\nError: Unable to find an instance for the variable x.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": " and b if it is a maximal common divisor *)\nDefinition is_gcd (d a b:nat) := (is_cd d a b)/\\(forall (d':nat),(is_cd d' a b)->(divides d d')).\n\n(** there is at most one gcd of a and b *)\nTheorem gcd_unique : forall (d d' a b:nat),(is_gcd d a b)->(is_gcd d' a b)->d=d'.\n  unfold is_gcd.\n  intros.\n  elim H;elim H0;intros.\n  apply divides_antisym;auto.\nQed.\n\n(** gcd(a,b) = gcd(b,a) *)\nLemma gcd_sym : forall (d a b:nat),(is_gcd d a b)->(is_gcd d b a).\n  unfold is_gcd.\n  intros.\n  elim H;intros.\n  split.\n  red;red in H0;tauto.\n  intros.\n  apply H1.\n  red;red in H2;tauto.\nQed.\n\n(** gcd(0,a)=a *)\nLemma gcd_zero : forall (a:nat),(is_gcd a O a).\n  unfold is_gcd.\n  intro.\n  split.\n  red;split;[apply zero_max_div | apply divides_refl].\n  unfold is_cd;tauto.\nQed.\n\n(** gcd(1,a)=1 *)\nLemma gcd_one : forall (a:nat),(is_gcd 1 1 a).\n  unfold is_gcd.\n  intros.\n  split.\n  red;split;[apply divides_refl | apply one_min_div].\n  unfold is_cd;tauto.\nQed.\n\n(** if a <= b then gcd(a,b)=gcd(a,b-a) *)\nLemma gcd_minus : forall (d a b:nat),(a <= b)->((is_gcd d a b)<->(is_gcd d a (b-a))).\n  intros.\n  unfold is_gcd.\n  split;intro.\n  elim H0;intros.\n  split.\n  red in H1;red.\n  elim H1;intros.\n  split;try tauto.\n  apply divides_minus;trivial.\n  unfold is_cd;intros.\n  apply H2;red;elim H3;intros.\n  split;[tauto | rewrite (le_plus_minus a b H);apply divides_plus;trivial].\n  elim H0;unfold is_cd;intros.\n  split.\n  split;[tauto | elim H1;intros;rewrite (le_plus_minus a b H);apply divides_plus;trivial].\n  intros.\n  elim H3;intros;apply H2.\n  split;try (apply divides_minus);trivial.\nQed.\n\n(** gcd(a,a) = a *)\nLemma gcd_refl : forall (a:nat),(is_gcd a a a).\n  unfold is_gcd.\n  intros.\n  unfold is_cd.\n  split;try tauto.\n  split;apply divides_refl.\nQed.\n\n(** two trivial lemmas: gcd(a,b) | a *)\nLemma gcd_div_l : forall (d a b:nat),(is_gcd d a b)->(divides a d).\n  unfold is_gcd;unfold is_cd;intros;tauto.\nQed.\n\n(** gcd(a,b) | b *)\n",
                "context_tokens": 731,
                "proof_start_offset": 3102,
                "proof_end_offset": 3217,
                "proof": "Lemma gcd_div_r : forall (d a b:nat),(is_gcd d a b)->(divides b d).\nProof.\nunfold is_gcd;unfold is_cd;intros;tauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_div_r : forall (d a b:nat),(is_gcd d a b)->(divides b d).\n  unfold is_gcd;unfold is_gcd;unfold is_gcd;simpl; tauto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 109, characters 51-56:\nError:\nIn nested Ltac calls to \"tauto\", \"<Coq.Init.Tauto.with_uniform_flags>\",\n\"<tauto_plugin::with_uniform_flags@0>\",\n\"<tauto_plugin::with_uniform_flags@0>\", \"f\" (bound to\nfun flags => <Coq.Init.Tauto.tauto_gen> flags),\n\"<Coq.Init.Tauto.tauto_gen>\" and \"<Coq.Init.Tauto.tauto_classical>\", last\ncall failed.\nTactic failure: tauto failed.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": ")->d=d'.\n  unfold is_gcd.\n  intros.\n  elim H;elim H0;intros.\n  apply divides_antisym;auto.\nQed.\n\n(** gcd(a,b) = gcd(b,a) *)\nLemma gcd_sym : forall (d a b:nat),(is_gcd d a b)->(is_gcd d b a).\n  unfold is_gcd.\n  intros.\n  elim H;intros.\n  split.\n  red;red in H0;tauto.\n  intros.\n  apply H1.\n  red;red in H2;tauto.\nQed.\n\n(** gcd(0,a)=a *)\nLemma gcd_zero : forall (a:nat),(is_gcd a O a).\n  unfold is_gcd.\n  intro.\n  split.\n  red;split;[apply zero_max_div | apply divides_refl].\n  unfold is_cd;tauto.\nQed.\n\n(** gcd(1,a)=1 *)\nLemma gcd_one : forall (a:nat),(is_gcd 1 1 a).\n  unfold is_gcd.\n  intros.\n  split.\n  red;split;[apply divides_refl | apply one_min_div].\n  unfold is_cd;tauto.\nQed.\n\n(** if a <= b then gcd(a,b)=gcd(a,b-a) *)\nLemma gcd_minus : forall (d a b:nat),(a <= b)->((is_gcd d a b)<->(is_gcd d a (b-a))).\n  intros.\n  unfold is_gcd.\n  split;intro.\n  elim H0;intros.\n  split.\n  red in H1;red.\n  elim H1;intros.\n  split;try tauto.\n  apply divides_minus;trivial.\n  unfold is_cd;intros.\n  apply H2;red;elim H3;intros.\n  split;[tauto | rewrite (le_plus_minus a b H);apply divides_plus;trivial].\n  elim H0;unfold is_cd;intros.\n  split.\n  split;[tauto | elim H1;intros;rewrite (le_plus_minus a b H);apply divides_plus;trivial].\n  intros.\n  elim H3;intros;apply H2.\n  split;try (apply divides_minus);trivial.\nQed.\n\n(** gcd(a,a) = a *)\nLemma gcd_refl : forall (a:nat),(is_gcd a a a).\n  unfold is_gcd.\n  intros.\n  unfold is_cd.\n  split;try tauto.\n  split;apply divides_refl.\nQed.\n\n(** two trivial lemmas: gcd(a,b) | a *)\nLemma gcd_div_l : forall (d a b:nat),(is_gcd d a b)->(divides a d).\n  unfold is_gcd;unfold is_cd;intros;tauto.\nQed.\n\n(** gcd(a,b) | b *)\nLemma gcd_div_r : forall (d a b:nat),(is_gcd d a b)->(divides b d).\n  unfold is_gcd;unfold is_cd;intros;tauto.\nQed.\n\n(** we now show that gcd(a,b) exists for all a and b (we even have an algorithm) *)\nDefinition f (x:nat*nat) := (fst x)+(snd x).\n\nDefinition R (x y:nat*nat) := (f x)<(f y).\n\n",
                "context_tokens": 749,
                "proof_start_offset": 3393,
                "proof_end_offset": 3478,
                "proof": "Lemma Rwf : well_founded R.\nProof.\nunfold R.\napply (well_founded_ltof (nat*nat) f).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma Rwf : well_founded R.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_founded.\n  unfold well_Qed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 160, characters 9-17:\nError: The reference well_Qed was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": ".\n  split.\n  red;red in H0;tauto.\n  intros.\n  apply H1.\n  red;red in H2;tauto.\nQed.\n\n(** gcd(0,a)=a *)\nLemma gcd_zero : forall (a:nat),(is_gcd a O a).\n  unfold is_gcd.\n  intro.\n  split.\n  red;split;[apply zero_max_div | apply divides_refl].\n  unfold is_cd;tauto.\nQed.\n\n(** gcd(1,a)=1 *)\nLemma gcd_one : forall (a:nat),(is_gcd 1 1 a).\n  unfold is_gcd.\n  intros.\n  split.\n  red;split;[apply divides_refl | apply one_min_div].\n  unfold is_cd;tauto.\nQed.\n\n(** if a <= b then gcd(a,b)=gcd(a,b-a) *)\nLemma gcd_minus : forall (d a b:nat),(a <= b)->((is_gcd d a b)<->(is_gcd d a (b-a))).\n  intros.\n  unfold is_gcd.\n  split;intro.\n  elim H0;intros.\n  split.\n  red in H1;red.\n  elim H1;intros.\n  split;try tauto.\n  apply divides_minus;trivial.\n  unfold is_cd;intros.\n  apply H2;red;elim H3;intros.\n  split;[tauto | rewrite (le_plus_minus a b H);apply divides_plus;trivial].\n  elim H0;unfold is_cd;intros.\n  split.\n  split;[tauto | elim H1;intros;rewrite (le_plus_minus a b H);apply divides_plus;trivial].\n  intros.\n  elim H3;intros;apply H2.\n  split;try (apply divides_minus);trivial.\nQed.\n\n(** gcd(a,a) = a *)\nLemma gcd_refl : forall (a:nat),(is_gcd a a a).\n  unfold is_gcd.\n  intros.\n  unfold is_cd.\n  split;try tauto.\n  split;apply divides_refl.\nQed.\n\n(** two trivial lemmas: gcd(a,b) | a *)\nLemma gcd_div_l : forall (d a b:nat),(is_gcd d a b)->(divides a d).\n  unfold is_gcd;unfold is_cd;intros;tauto.\nQed.\n\n(** gcd(a,b) | b *)\nLemma gcd_div_r : forall (d a b:nat),(is_gcd d a b)->(divides b d).\n  unfold is_gcd;unfold is_cd;intros;tauto.\nQed.\n\n(** we now show that gcd(a,b) exists for all a and b (we even have an algorithm) *)\nDefinition f (x:nat*nat) := (fst x)+(snd x).\n\nDefinition R (x y:nat*nat) := (f x)<(f y).\n\nLemma Rwf : well_founded R.\n  unfold R.\n  apply (well_founded_ltof (nat*nat) f).\nQed.\n\n(** proof of existence of gcd(a,b): it relies on the relation gcd(a,b)=gcd(a,b-a) if a<=b *)\n",
                "context_tokens": 724,
                "proof_start_offset": 3573,
                "proof_end_offset": 4309,
                "proof": "Lemma gcd_exists_prod : forall (x:nat*nat),{d:nat | (is_gcd d (fst x) (snd x))}.\nProof.\napply (induction_ltof2 (nat*nat) f (fun x:nat*nat => {d:nat | (is_gcd d (fst x) (snd x))})).\nunfold ltof.\nunfold f.\nintros.\ncase (lt_eq_lt_dec (fst x) (snd x));intro.\ncase s;intro.\ndestruct (fst x).\nexists (snd x);apply gcd_zero.\nelim (H (S n,snd x-S n)).\nsimpl;intro d;intro.\nexists d.\nelim (gcd_minus d (S n) (snd x));try (auto with arith).\nsimpl.\nomega.\nrewrite e;exists (snd x);apply gcd_refl.\ndestruct (snd x).\nexists (fst x);apply gcd_sym;apply gcd_zero.\nelim (H (S n,fst x-S n)).\nsimpl;intro d;intro.\nexists d.\napply gcd_sym.\nelim (gcd_minus d (S n) (fst x));try (auto with arith).\nsimpl.\nomega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_exists_prod : forall (x:nat*nat),{d:nat | (is_gcd d (fst x) (snd x))}.\n  unfold is_gcd;unfold is_gcd;unfold is_gcd; simpl; tauto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 124, characters 52-57:\nError:\nIn nested Ltac calls to \"tauto\", \"<Coq.Init.Tauto.with_uniform_flags>\",\n\"<tauto_plugin::with_uniform_flags@0>\",\n\"<tauto_plugin::with_uniform_flags@0>\", \"f\" (bound to\nfun flags => <Coq.Init.Tauto.tauto_gen> flags),\n\"<Coq.Init.Tauto.tauto_gen>\" and \"<Coq.Init.Tauto.tauto_classical>\", last\ncall failed.\nTactic failure: tauto failed.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": " apply divides_minus;trivial.\n  unfold is_cd;intros.\n  apply H2;red;elim H3;intros.\n  split;[tauto | rewrite (le_plus_minus a b H);apply divides_plus;trivial].\n  elim H0;unfold is_cd;intros.\n  split.\n  split;[tauto | elim H1;intros;rewrite (le_plus_minus a b H);apply divides_plus;trivial].\n  intros.\n  elim H3;intros;apply H2.\n  split;try (apply divides_minus);trivial.\nQed.\n\n(** gcd(a,a) = a *)\nLemma gcd_refl : forall (a:nat),(is_gcd a a a).\n  unfold is_gcd.\n  intros.\n  unfold is_cd.\n  split;try tauto.\n  split;apply divides_refl.\nQed.\n\n(** two trivial lemmas: gcd(a,b) | a *)\nLemma gcd_div_l : forall (d a b:nat),(is_gcd d a b)->(divides a d).\n  unfold is_gcd;unfold is_cd;intros;tauto.\nQed.\n\n(** gcd(a,b) | b *)\nLemma gcd_div_r : forall (d a b:nat),(is_gcd d a b)->(divides b d).\n  unfold is_gcd;unfold is_cd;intros;tauto.\nQed.\n\n(** we now show that gcd(a,b) exists for all a and b (we even have an algorithm) *)\nDefinition f (x:nat*nat) := (fst x)+(snd x).\n\nDefinition R (x y:nat*nat) := (f x)<(f y).\n\nLemma Rwf : well_founded R.\n  unfold R.\n  apply (well_founded_ltof (nat*nat) f).\nQed.\n\n(** proof of existence of gcd(a,b): it relies on the relation gcd(a,b)=gcd(a,b-a) if a<=b *)\nLemma gcd_exists_prod : forall (x:nat*nat),{d:nat | (is_gcd d (fst x) (snd x))}.\n  apply (induction_ltof2 (nat*nat) f (fun x:nat*nat => {d:nat | (is_gcd d (fst x) (snd x))})).\n  unfold ltof.\n  unfold f.\n  intros.\n  case (lt_eq_lt_dec (fst x) (snd x));intro.\n  case s;intro.\n  destruct (fst x).\n  exists (snd x);apply gcd_zero.\n  elim (H (S n,snd x-S n)).\n  simpl;intro d;intro.\n  exists d.\n  elim (gcd_minus d (S n) (snd x));try (auto with arith).\n  simpl.\n  omega.\n  rewrite e;exists (snd x);apply gcd_refl.\n  destruct (snd x).\n  exists (fst x);apply gcd_sym;apply gcd_zero.\n  elim (H (S n,fst x-S n)).\n  simpl;intro d;intro.\n  exists d.\n  apply gcd_sym.\n  elim (gcd_minus d (S n) (fst x));try (auto with arith).\n  simpl.\n  omega.\nQed.\n\n(** here we are: the gcd exists *)\n",
                "context_tokens": 732,
                "proof_start_offset": 4346,
                "proof_end_offset": 4496,
                "proof": "Theorem gcd_exists : forall (a b:nat),{d:nat | (is_gcd d a b)}.\nProof.\nintros.\nelim (gcd_exists_prod (a,b)).\nsimpl;intro d;intro;exists d;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem gcd_exists : forall (a b:nat),{d:nat | (is_gcd d a b)}.\n  unfold gcd.\n  intros.\n  case (gcd_spec a b);intro.\n  case (gcd_spec a b);intro.\n  exists (fst x);apply gcd_intro; apply gcd_intro; apply gcd_intro; apply gcd_intro;\n    apply gcd_intro; apply gcd_intro; apply gcd_intro;\n    apply gcd_intro; apply gcd_intro; apply gcd_intro;\n    apply gcd_intro; apply gcd_intro; apply gcd_intro;\n    apply gcd_intro; apply gcd_intro; apply gcd_intro;\n    apply gcd_intro; apply gcd_intro; apply gcd_intro;\n    apply gcd_intro; apply gcd_intro; apply gcd_intro;\n    apply gcd_intro; apply gcd_intro; apply gcd_intro;\n    apply gcd_intro; apply gcd_intro; apply gcd_intro;\n    apply gcd_intro; apply gcd_intro; apply gcd_intro;\n    apply gcd_intro; apply gcd_intro; apply gcd_intro;\n    apply gcd_intro; apply gcd_intro; apply gcd_intro;\n    apply gcd_intro; apply gcd_intro; apply gcd_intro;\n    apply gcd_intro; apply gcd_Qed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 152, characters 9-12:\nError: The reference gcd was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": "intros;apply H2.\n  split;try (apply divides_minus);trivial.\nQed.\n\n(** gcd(a,a) = a *)\nLemma gcd_refl : forall (a:nat),(is_gcd a a a).\n  unfold is_gcd.\n  intros.\n  unfold is_cd.\n  split;try tauto.\n  split;apply divides_refl.\nQed.\n\n(** two trivial lemmas: gcd(a,b) | a *)\nLemma gcd_div_l : forall (d a b:nat),(is_gcd d a b)->(divides a d).\n  unfold is_gcd;unfold is_cd;intros;tauto.\nQed.\n\n(** gcd(a,b) | b *)\nLemma gcd_div_r : forall (d a b:nat),(is_gcd d a b)->(divides b d).\n  unfold is_gcd;unfold is_cd;intros;tauto.\nQed.\n\n(** we now show that gcd(a,b) exists for all a and b (we even have an algorithm) *)\nDefinition f (x:nat*nat) := (fst x)+(snd x).\n\nDefinition R (x y:nat*nat) := (f x)<(f y).\n\nLemma Rwf : well_founded R.\n  unfold R.\n  apply (well_founded_ltof (nat*nat) f).\nQed.\n\n(** proof of existence of gcd(a,b): it relies on the relation gcd(a,b)=gcd(a,b-a) if a<=b *)\nLemma gcd_exists_prod : forall (x:nat*nat),{d:nat | (is_gcd d (fst x) (snd x))}.\n  apply (induction_ltof2 (nat*nat) f (fun x:nat*nat => {d:nat | (is_gcd d (fst x) (snd x))})).\n  unfold ltof.\n  unfold f.\n  intros.\n  case (lt_eq_lt_dec (fst x) (snd x));intro.\n  case s;intro.\n  destruct (fst x).\n  exists (snd x);apply gcd_zero.\n  elim (H (S n,snd x-S n)).\n  simpl;intro d;intro.\n  exists d.\n  elim (gcd_minus d (S n) (snd x));try (auto with arith).\n  simpl.\n  omega.\n  rewrite e;exists (snd x);apply gcd_refl.\n  destruct (snd x).\n  exists (fst x);apply gcd_sym;apply gcd_zero.\n  elim (H (S n,fst x-S n)).\n  simpl;intro d;intro.\n  exists d.\n  apply gcd_sym.\n  elim (gcd_minus d (S n) (fst x));try (auto with arith).\n  simpl.\n  omega.\nQed.\n\n(** here we are: the gcd exists *)\nTheorem gcd_exists : forall (a b:nat),{d:nat | (is_gcd d a b)}.\n  intros.\n  elim (gcd_exists_prod (a,b)).\n  simpl;intro d;intro;exists d;trivial.\nQed.\n\n(** take the first projection of the proof *)\nDefinition gcd (a b:nat) := let (d,_):=(gcd_exists a b) in d.\n\n(** the gcd is the gcd! *)\n",
                "context_tokens": 732,
                "proof_start_offset": 4634,
                "proof_end_offset": 4785,
                "proof": "Lemma gcd_is_gcd : forall (a b:nat),(is_gcd (gcd a b) a b).\nProof.\nintros.\nunfold gcd.\ngeneralize (gcd_exists a b).\nintro;elim s;intro d;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_is_gcd : forall (a b:nat),(is_gcd (gcd a b) a b).\n  unfold gcd; unfold is_gcd; unfold is_gcd; simpl; tauto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 162, characters 51-56:\nError:\nIn nested Ltac calls to \"tauto\", \"<Coq.Init.Tauto.with_uniform_flags>\",\n\"<tauto_plugin::with_uniform_flags@0>\",\n\"<tauto_plugin::with_uniform_flags@0>\", \"f\" (bound to\nfun flags => <Coq.Init.Tauto.tauto_gen> flags),\n\"<Coq.Init.Tauto.tauto_gen>\" and \"<Coq.Init.Tauto.tauto_classical>\", last\ncall failed.\nTactic failure: tauto failed.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": " b:nat),(is_gcd d a b)->(divides a d).\n  unfold is_gcd;unfold is_cd;intros;tauto.\nQed.\n\n(** gcd(a,b) | b *)\nLemma gcd_div_r : forall (d a b:nat),(is_gcd d a b)->(divides b d).\n  unfold is_gcd;unfold is_cd;intros;tauto.\nQed.\n\n(** we now show that gcd(a,b) exists for all a and b (we even have an algorithm) *)\nDefinition f (x:nat*nat) := (fst x)+(snd x).\n\nDefinition R (x y:nat*nat) := (f x)<(f y).\n\nLemma Rwf : well_founded R.\n  unfold R.\n  apply (well_founded_ltof (nat*nat) f).\nQed.\n\n(** proof of existence of gcd(a,b): it relies on the relation gcd(a,b)=gcd(a,b-a) if a<=b *)\nLemma gcd_exists_prod : forall (x:nat*nat),{d:nat | (is_gcd d (fst x) (snd x))}.\n  apply (induction_ltof2 (nat*nat) f (fun x:nat*nat => {d:nat | (is_gcd d (fst x) (snd x))})).\n  unfold ltof.\n  unfold f.\n  intros.\n  case (lt_eq_lt_dec (fst x) (snd x));intro.\n  case s;intro.\n  destruct (fst x).\n  exists (snd x);apply gcd_zero.\n  elim (H (S n,snd x-S n)).\n  simpl;intro d;intro.\n  exists d.\n  elim (gcd_minus d (S n) (snd x));try (auto with arith).\n  simpl.\n  omega.\n  rewrite e;exists (snd x);apply gcd_refl.\n  destruct (snd x).\n  exists (fst x);apply gcd_sym;apply gcd_zero.\n  elim (H (S n,fst x-S n)).\n  simpl;intro d;intro.\n  exists d.\n  apply gcd_sym.\n  elim (gcd_minus d (S n) (fst x));try (auto with arith).\n  simpl.\n  omega.\nQed.\n\n(** here we are: the gcd exists *)\nTheorem gcd_exists : forall (a b:nat),{d:nat | (is_gcd d a b)}.\n  intros.\n  elim (gcd_exists_prod (a,b)).\n  simpl;intro d;intro;exists d;trivial.\nQed.\n\n(** take the first projection of the proof *)\nDefinition gcd (a b:nat) := let (d,_):=(gcd_exists a b) in d.\n\n(** the gcd is the gcd! *)\nLemma gcd_is_gcd : forall (a b:nat),(is_gcd (gcd a b) a b).\n  intros.\n  unfold gcd.\n  generalize (gcd_exists a b).\n  intro;elim s;intro d;trivial.\nQed.\n\n(** a and b are relatively prime if gcd(a,b)=1 *)\nDefinition rel_prime (a b:nat) := (is_gcd 1 a b). \n\n(** if a and b are relatively prime then so are b and a *)\n",
                "context_tokens": 731,
                "proof_start_offset": 4948,
                "proof_end_offset": 5077,
                "proof": "Lemma rel_prime_sym : forall (a b:nat),(rel_prime a b)->(rel_prime b a).\nProof.\nunfold rel_prime.\nintros;apply gcd_sym;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma rel_prime_sym : forall (a b:nat),(rel_prime a b)->(rel_prime b a).\n  intros.\n  unfold rel_prime.\n  generalize (gcd_intro a b).\n  intro; elim (gcd_intro a b);intro; elim (gcd_intro b b);intro; elim (gcd_intro b b);\n    intros; elim (gcd_intro b b); intros; elim (gcd_intro b b);\n    intros; elim (gcd_intro b b); intros; elim (gcd_intro b b);\n      intros; elim (gcd_intro b b); intros; elim (gcd_intro b b);\n        intros; elim (gcd_intro b b); intros; elim (gcd_intro b b);\n        intros; elim (gcd_intro b b); intros; elim (gcd_intro b b);\n        intros; elim (gcd_intro b b); intros; elim (gcd_intro b b);\n        intros; elim (gcd_intro b b); intros; elim (gcd_intro b b);\n        intros; elim (gcd_intro b b); intros; elim (gcd_intro b b);\n        intros; elim (gcd_intro b b); intros; elim (gcd_intro b b);\n        intros; elim (gcd_intro b b); intros; elim (gcd_introQed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 175, characters 14-23:\nError: The reference gcd_intro was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": " forall (d a b:nat),(is_gcd d a b)->(divides b d).\n  unfold is_gcd;unfold is_cd;intros;tauto.\nQed.\n\n(** we now show that gcd(a,b) exists for all a and b (we even have an algorithm) *)\nDefinition f (x:nat*nat) := (fst x)+(snd x).\n\nDefinition R (x y:nat*nat) := (f x)<(f y).\n\nLemma Rwf : well_founded R.\n  unfold R.\n  apply (well_founded_ltof (nat*nat) f).\nQed.\n\n(** proof of existence of gcd(a,b): it relies on the relation gcd(a,b)=gcd(a,b-a) if a<=b *)\nLemma gcd_exists_prod : forall (x:nat*nat),{d:nat | (is_gcd d (fst x) (snd x))}.\n  apply (induction_ltof2 (nat*nat) f (fun x:nat*nat => {d:nat | (is_gcd d (fst x) (snd x))})).\n  unfold ltof.\n  unfold f.\n  intros.\n  case (lt_eq_lt_dec (fst x) (snd x));intro.\n  case s;intro.\n  destruct (fst x).\n  exists (snd x);apply gcd_zero.\n  elim (H (S n,snd x-S n)).\n  simpl;intro d;intro.\n  exists d.\n  elim (gcd_minus d (S n) (snd x));try (auto with arith).\n  simpl.\n  omega.\n  rewrite e;exists (snd x);apply gcd_refl.\n  destruct (snd x).\n  exists (fst x);apply gcd_sym;apply gcd_zero.\n  elim (H (S n,fst x-S n)).\n  simpl;intro d;intro.\n  exists d.\n  apply gcd_sym.\n  elim (gcd_minus d (S n) (fst x));try (auto with arith).\n  simpl.\n  omega.\nQed.\n\n(** here we are: the gcd exists *)\nTheorem gcd_exists : forall (a b:nat),{d:nat | (is_gcd d a b)}.\n  intros.\n  elim (gcd_exists_prod (a,b)).\n  simpl;intro d;intro;exists d;trivial.\nQed.\n\n(** take the first projection of the proof *)\nDefinition gcd (a b:nat) := let (d,_):=(gcd_exists a b) in d.\n\n(** the gcd is the gcd! *)\nLemma gcd_is_gcd : forall (a b:nat),(is_gcd (gcd a b) a b).\n  intros.\n  unfold gcd.\n  generalize (gcd_exists a b).\n  intro;elim s;intro d;trivial.\nQed.\n\n(** a and b are relatively prime if gcd(a,b)=1 *)\nDefinition rel_prime (a b:nat) := (is_gcd 1 a b). \n\n(** if a and b are relatively prime then so are b and a *)\nLemma rel_prime_sym : forall (a b:nat),(rel_prime a b)->(rel_prime b a).\n  unfold rel_prime.\n  intros;apply gcd_sym;trivial.\nQed.\n\n(** for all a, a and 1 are relatively prime *)\n",
                "context_tokens": 738,
                "proof_start_offset": 5126,
                "proof_end_offset": 5240,
                "proof": "Lemma rel_prime_1 : forall (a:nat),(rel_prime a 1).\nProof.\nunfold rel_prime.\nintros;apply gcd_sym;apply gcd_one.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma rel_prime_1 : forall (a:nat),(rel_prime a 1).\n  unfold rel_prime.\n  intros; apply gcd_intro; split; trivial.\n  apply gcd_intro; split; trivial.\n  apply gcd_intro; split; trivial.\n  apply gcd_intro; split; trivial.\n  apply gcd_intro; split; trivial.\n  apply gcd_intro; split; trivial.\n  apply gcd_intro; split; trivial.\n  apply gcd_intro; split; trivial.\n  apply gcd_intro; split; trivial.\n  apply gcd_intro; split; trivial.\n  apply gcd_intro; split; trivial.\n  apply gcd_intro; split; trivial.\n  apply gcd_intro; split; trivial.\n  apply gcd_intro; split; trivial.\n  apply gcd_intro; split; trivial.\n  apply gcd_intro; split; trivial.\n  apply gcd_intro; split; trivial.\n  apply gcd_intro; split; trivial.\n  apply gcd_intro; split; trivial.\n  apply gcd_intro; split; trivial.\n  apply gcd_intro; split; trivial.\n  apply gcd_intro; split; trivial.\n  apply gcd_intro; split; trivial.\n  apply gcd_intro; split; trivial.\n  apply gcd_intro; split;Qed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 180, characters 16-25:\nError: The reference gcd_intro was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": "founded R.\n  unfold R.\n  apply (well_founded_ltof (nat*nat) f).\nQed.\n\n(** proof of existence of gcd(a,b): it relies on the relation gcd(a,b)=gcd(a,b-a) if a<=b *)\nLemma gcd_exists_prod : forall (x:nat*nat),{d:nat | (is_gcd d (fst x) (snd x))}.\n  apply (induction_ltof2 (nat*nat) f (fun x:nat*nat => {d:nat | (is_gcd d (fst x) (snd x))})).\n  unfold ltof.\n  unfold f.\n  intros.\n  case (lt_eq_lt_dec (fst x) (snd x));intro.\n  case s;intro.\n  destruct (fst x).\n  exists (snd x);apply gcd_zero.\n  elim (H (S n,snd x-S n)).\n  simpl;intro d;intro.\n  exists d.\n  elim (gcd_minus d (S n) (snd x));try (auto with arith).\n  simpl.\n  omega.\n  rewrite e;exists (snd x);apply gcd_refl.\n  destruct (snd x).\n  exists (fst x);apply gcd_sym;apply gcd_zero.\n  elim (H (S n,fst x-S n)).\n  simpl;intro d;intro.\n  exists d.\n  apply gcd_sym.\n  elim (gcd_minus d (S n) (fst x));try (auto with arith).\n  simpl.\n  omega.\nQed.\n\n(** here we are: the gcd exists *)\nTheorem gcd_exists : forall (a b:nat),{d:nat | (is_gcd d a b)}.\n  intros.\n  elim (gcd_exists_prod (a,b)).\n  simpl;intro d;intro;exists d;trivial.\nQed.\n\n(** take the first projection of the proof *)\nDefinition gcd (a b:nat) := let (d,_):=(gcd_exists a b) in d.\n\n(** the gcd is the gcd! *)\nLemma gcd_is_gcd : forall (a b:nat),(is_gcd (gcd a b) a b).\n  intros.\n  unfold gcd.\n  generalize (gcd_exists a b).\n  intro;elim s;intro d;trivial.\nQed.\n\n(** a and b are relatively prime if gcd(a,b)=1 *)\nDefinition rel_prime (a b:nat) := (is_gcd 1 a b). \n\n(** if a and b are relatively prime then so are b and a *)\nLemma rel_prime_sym : forall (a b:nat),(rel_prime a b)->(rel_prime b a).\n  unfold rel_prime.\n  intros;apply gcd_sym;trivial.\nQed.\n\n(** for all a, a and 1 are relatively prime *)\nLemma rel_prime_1 : forall (a:nat),(rel_prime a 1).\n  unfold rel_prime.\n  intros;apply gcd_sym;apply gcd_one.\nQed.\n\n(** we have that a/gcd(a,b) and b/gcd(a,b) are relatively prime *)\n",
                "context_tokens": 696,
                "proof_start_offset": 5309,
                "proof_end_offset": 6031,
                "proof": "Lemma gcd_rel_prime : forall (d a b:nat)(H:(is_gcd d a b)),(d <> O)->(rel_prime (quo a d (gcd_div_l d a b H)) (quo b d (gcd_div_r d a b H))).\nProof.\nunfold rel_prime.\nintros.\ngeneralize (quo_is_quo a d (gcd_div_l d a b H));intro.\ngeneralize (quo_is_quo b d (gcd_div_r d a b H));intro.\nunfold is_gcd;split;unfold is_cd.\nsplit;apply one_min_div.\nintros.\nelim H3;intros.\nelim H4;intro q;intro.\nelim H5;intro q';intro.\nrewrite H6 in H1.\nrewrite H7 in H2.\nassert (divides d (d*d')).\nred in H;elim H;intros.\napply H9;red;split;[exists q;rewrite H1;ring | exists q';rewrite H2;ring].\nelim H8;intros.\nexists x.\napply mult_lemma6 with d;trivial.\nrewrite mult_assoc;rewrite <- H9;auto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_rel_prime : forall (d a b:nat)(H:(is_gcd d a b)),(d <> O)->(rel_prime (quo a d (gcd_div_l d a b H)) (quo b d (gcd_div_r d a b H))).\n  unfold rel_prime.\n  intros; apply gcd_sym; apply gcd_refl.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 186, characters 31-39:\nError: In environment\nd, a, b : nat\nH : is_gcd d a b\nH0 : d <> 0\nUnable to unify \"quo a d (gcd_div_l d a b H)\" with\n \"quo b d (gcd_div_r d a b H)\".\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": " (snd x).\n  exists (fst x);apply gcd_sym;apply gcd_zero.\n  elim (H (S n,fst x-S n)).\n  simpl;intro d;intro.\n  exists d.\n  apply gcd_sym.\n  elim (gcd_minus d (S n) (fst x));try (auto with arith).\n  simpl.\n  omega.\nQed.\n\n(** here we are: the gcd exists *)\nTheorem gcd_exists : forall (a b:nat),{d:nat | (is_gcd d a b)}.\n  intros.\n  elim (gcd_exists_prod (a,b)).\n  simpl;intro d;intro;exists d;trivial.\nQed.\n\n(** take the first projection of the proof *)\nDefinition gcd (a b:nat) := let (d,_):=(gcd_exists a b) in d.\n\n(** the gcd is the gcd! *)\nLemma gcd_is_gcd : forall (a b:nat),(is_gcd (gcd a b) a b).\n  intros.\n  unfold gcd.\n  generalize (gcd_exists a b).\n  intro;elim s;intro d;trivial.\nQed.\n\n(** a and b are relatively prime if gcd(a,b)=1 *)\nDefinition rel_prime (a b:nat) := (is_gcd 1 a b). \n\n(** if a and b are relatively prime then so are b and a *)\nLemma rel_prime_sym : forall (a b:nat),(rel_prime a b)->(rel_prime b a).\n  unfold rel_prime.\n  intros;apply gcd_sym;trivial.\nQed.\n\n(** for all a, a and 1 are relatively prime *)\nLemma rel_prime_1 : forall (a:nat),(rel_prime a 1).\n  unfold rel_prime.\n  intros;apply gcd_sym;apply gcd_one.\nQed.\n\n(** we have that a/gcd(a,b) and b/gcd(a,b) are relatively prime *)\nLemma gcd_rel_prime : forall (d a b:nat)(H:(is_gcd d a b)),(d <> O)->(rel_prime (quo a d (gcd_div_l d a b H)) (quo b d (gcd_div_r d a b H))).\n  unfold rel_prime.\n  intros.\n  generalize (quo_is_quo a d (gcd_div_l d a b H));intro.\n  generalize (quo_is_quo b d (gcd_div_r d a b H));intro.\n  unfold is_gcd;split;unfold is_cd.\n  split;apply one_min_div.\n  intros.\n  elim H3;intros.\n  elim H4;intro q;intro.\n  elim H5;intro q';intro.\n  rewrite H6 in H1.\n  rewrite H7 in H2.\n  assert (divides d (d*d')).\n  red in H;elim H;intros.\n  apply H9;red;split;[exists q;rewrite H1;ring | exists q';rewrite H2;ring].\n  elim H8;intros.\n  exists x.\n  apply mult_lemma6 with d;trivial.\n  rewrite mult_assoc;rewrite <- H9;auto with arith.\nQed.\n\n(** if q<>0 then gcd(p,q)<>0 *)\n",
                "context_tokens": 727,
                "proof_start_offset": 6065,
                "proof_end_offset": 6268,
                "proof": "Lemma gcd_non_zero : forall (d p q:nat),(q<>O)->(is_gcd d p q)->(d<>O).\nProof.\nunfold is_gcd.\nintros.\nelim H0;intros.\nintro.\nelim H1;intros.\nelim H5;intros.\nrewrite H3 in H6;simpl in H6;auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_non_zero : forall (d p q:nat),(q<>O)->(is_gcd d p q)->(d<>O).\n  unfold is_gcd;intros.\n  generalize (gcd_is_gcd (gcd_is_gcd d p) (gcd_is_gcd d p));intro.\n  generalize (gcd_is_gcd (gcd_is_gcd d p) (gcd_is_gcd d p));intro.\n  generalize (gcd_is_gcd (gcd_is_gcd d p) (gcd_is_gcd d p));intro.\n  generalize (gcd_is_gcd (gcd_is_gcd d p) (gcd_is_gcd d p));intro.\n  generalize (gcd_is_gcd (gcd_is_gcd d p) (gcd_is_gcd d p));intro.\n  generalize (gcd_is_gcd (gcd_is_gcd d p) (gcd_is_gcd d p));intro.\n  generalize (gcd_is_gcd (gcd_is_gcd d p) (gcd_is_gcd d p));intro.\n  generalize (gcd_is_gcd (gcd_is_gcd d p) (gcd_is_gcd d p));intro.\n  generalize (gcd_is_gcd (gcd_is_gcd d p) (gcd_is_gcd dQed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 209, characters 26-40:\nError:\nIn environment\nd, p, q : nat\nH : q <> 0\nH0 : is_cd d p q /\\ (forall d' : nat, is_cd d' p q -> divides d d')\nThe term \"gcd_is_gcd d p\" has type \"is_gcd (gcd d p) d p\"\nwhile it is expected to have type \"nat\".\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": "exists a b) in d.\n\n(** the gcd is the gcd! *)\nLemma gcd_is_gcd : forall (a b:nat),(is_gcd (gcd a b) a b).\n  intros.\n  unfold gcd.\n  generalize (gcd_exists a b).\n  intro;elim s;intro d;trivial.\nQed.\n\n(** a and b are relatively prime if gcd(a,b)=1 *)\nDefinition rel_prime (a b:nat) := (is_gcd 1 a b). \n\n(** if a and b are relatively prime then so are b and a *)\nLemma rel_prime_sym : forall (a b:nat),(rel_prime a b)->(rel_prime b a).\n  unfold rel_prime.\n  intros;apply gcd_sym;trivial.\nQed.\n\n(** for all a, a and 1 are relatively prime *)\nLemma rel_prime_1 : forall (a:nat),(rel_prime a 1).\n  unfold rel_prime.\n  intros;apply gcd_sym;apply gcd_one.\nQed.\n\n(** we have that a/gcd(a,b) and b/gcd(a,b) are relatively prime *)\nLemma gcd_rel_prime : forall (d a b:nat)(H:(is_gcd d a b)),(d <> O)->(rel_prime (quo a d (gcd_div_l d a b H)) (quo b d (gcd_div_r d a b H))).\n  unfold rel_prime.\n  intros.\n  generalize (quo_is_quo a d (gcd_div_l d a b H));intro.\n  generalize (quo_is_quo b d (gcd_div_r d a b H));intro.\n  unfold is_gcd;split;unfold is_cd.\n  split;apply one_min_div.\n  intros.\n  elim H3;intros.\n  elim H4;intro q;intro.\n  elim H5;intro q';intro.\n  rewrite H6 in H1.\n  rewrite H7 in H2.\n  assert (divides d (d*d')).\n  red in H;elim H;intros.\n  apply H9;red;split;[exists q;rewrite H1;ring | exists q';rewrite H2;ring].\n  elim H8;intros.\n  exists x.\n  apply mult_lemma6 with d;trivial.\n  rewrite mult_assoc;rewrite <- H9;auto with arith.\nQed.\n\n(** if q<>0 then gcd(p,q)<>0 *)\nLemma gcd_non_zero : forall (d p q:nat),(q<>O)->(is_gcd d p q)->(d<>O).\n  unfold is_gcd.\n  intros.\n  elim H0;intros.\n  intro.\n  elim H1;intros.\n  elim H5;intros.\n  rewrite H3 in H6;simpl in H6;auto.\nQed.\n\n(** we now exhibit an algorithm that computes Bezout coefficient: for all a b, there is u and v such that a*u-b*v = gcd(a,b) or b*v-a*u = gcd(a,b) *)\n(** the 4 lemmae gives the idea of the algorithm *)\n",
                "context_tokens": 700,
                "proof_start_offset": 6472,
                "proof_end_offset": 6772,
                "proof": "Lemma bezout_aux1 : forall (x y u v:nat),(x<=y)->(is_gcd (u*x-v*(y-x)) x (y-x))->(is_gcd ((u+v)*x-v*y) x y).\nProof.\nintros.\nelim (gcd_minus ((u+v)*x-v*y) x y H);intros.\napply H2.\nrewrite mult_plus_distr_r;rewrite <- minus_minus_lemma1;try (auto with arith);rewrite <- mult_minus_lemma2;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma bezout_aux1 : forall (x y u v:nat),(x<=y)->(is_gcd (u*x-v*(y-x)) x (y-x))->(is_gcd ((u+v)*x-v*y) x y).\nProof.\n  intros x y u v H.\n  generalize (gcd_is_gcd x y u H);intro.\n  generalize (gcd_is_gcd x y u H);intro.\n  generalize (gcd_is_gcd x y u H);intro.\n  generalize (gcd_is_gcd x y u H);intro.\n  generalize (gcd_is_gcd x y u H);intro.\n  generalize (gcd_is_gcd x y u H);intro.\n  generalize (gcd_is_gcd x y u H);intro.\n  generalize (gcd_is_gcd x y u H);intro.\n  generalize (gcd_is_gcd x y u H);intro.\n  generalize (gcd_is_gcd x y u H);intro.\n  generalize (gcd_is_gcd x y u H);intro.\n  generalize (gcd_is_gcd x y u H);intro.\n  generalize (gcd_is_gcd x y u H);intro.\n  generalize (gcd_is_gcd x y u H);intro.\n  generalize (gcd_is_gcd x y u H);intro.\n  generalize (gcd_is_gcd x y u H);intro.\n  generalize (gcd_Qed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 222, characters 14-30:\nError: Illegal application (Non-functional construction): \nThe expression \"gcd_is_gcd x y\" of type \"is_gcd (gcd x y) x y\"\ncannot be applied to the term\n \"u\" : \"nat\"\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": "\nLemma rel_prime_sym : forall (a b:nat),(rel_prime a b)->(rel_prime b a).\n  unfold rel_prime.\n  intros;apply gcd_sym;trivial.\nQed.\n\n(** for all a, a and 1 are relatively prime *)\nLemma rel_prime_1 : forall (a:nat),(rel_prime a 1).\n  unfold rel_prime.\n  intros;apply gcd_sym;apply gcd_one.\nQed.\n\n(** we have that a/gcd(a,b) and b/gcd(a,b) are relatively prime *)\nLemma gcd_rel_prime : forall (d a b:nat)(H:(is_gcd d a b)),(d <> O)->(rel_prime (quo a d (gcd_div_l d a b H)) (quo b d (gcd_div_r d a b H))).\n  unfold rel_prime.\n  intros.\n  generalize (quo_is_quo a d (gcd_div_l d a b H));intro.\n  generalize (quo_is_quo b d (gcd_div_r d a b H));intro.\n  unfold is_gcd;split;unfold is_cd.\n  split;apply one_min_div.\n  intros.\n  elim H3;intros.\n  elim H4;intro q;intro.\n  elim H5;intro q';intro.\n  rewrite H6 in H1.\n  rewrite H7 in H2.\n  assert (divides d (d*d')).\n  red in H;elim H;intros.\n  apply H9;red;split;[exists q;rewrite H1;ring | exists q';rewrite H2;ring].\n  elim H8;intros.\n  exists x.\n  apply mult_lemma6 with d;trivial.\n  rewrite mult_assoc;rewrite <- H9;auto with arith.\nQed.\n\n(** if q<>0 then gcd(p,q)<>0 *)\nLemma gcd_non_zero : forall (d p q:nat),(q<>O)->(is_gcd d p q)->(d<>O).\n  unfold is_gcd.\n  intros.\n  elim H0;intros.\n  intro.\n  elim H1;intros.\n  elim H5;intros.\n  rewrite H3 in H6;simpl in H6;auto.\nQed.\n\n(** we now exhibit an algorithm that computes Bezout coefficient: for all a b, there is u and v such that a*u-b*v = gcd(a,b) or b*v-a*u = gcd(a,b) *)\n(** the 4 lemmae gives the idea of the algorithm *)\nLemma bezout_aux1 : forall (x y u v:nat),(x<=y)->(is_gcd (u*x-v*(y-x)) x (y-x))->(is_gcd ((u+v)*x-v*y) x y).\n  intros.\n  elim (gcd_minus ((u+v)*x-v*y) x y H);intros.\n  apply H2.\n  rewrite mult_plus_distr_r;rewrite <- minus_minus_lemma1;try (auto with arith);rewrite <- mult_minus_lemma2;trivial.\nQed.\n\n",
                "context_tokens": 700,
                "proof_start_offset": 6774,
                "proof_end_offset": 7070,
                "proof": "Lemma bezout_aux2 : forall (x y u v:nat),(x<=y)->(is_gcd (v*(y-x)-u*x) x (y-x))->(is_gcd (v*y-(u+v)*x) x y).\nProof.\nintros.\nelim (gcd_minus (v*y-(u+v)*x) x y H);intros.\napply H2.\nrewrite mult_plus_distr_r;rewrite plus_comm;rewrite <- minus_minus_lemma2;rewrite <- mult_minus_lemma2;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma bezout_aux2 : forall (x y u v:nat),(x<=y)->(is_gcd (v*(y-x)-u*x) x (y-x))->(is_gcd (v*y-(u+v)*x) x y).\n  intros.\n  elim (gcd_minus ((u+v)*x-v) y x H);intros.\n  apply H2.\n  rewrite mult_plus_distr_r;rewrite <- minus_minus_lemma2;try (auto with arith);rewrite <- mult_minus_lemma2;trivial.\n  apply H2.\n  rewrite mult_plus_distr_r;rewrite <- minus_minus_lemma2;trivial.\n  apply H2.\n  rewrite mult_plus_distr_r;rewrite <- minus_minus_lemma2;trivial.\n  apply H2.\n  rewrite mult_plus_distr_r;rewrite <- minus_minus_lemma2;trivial.\n  apply H2.\n  rewrite mult_plus_distr_r;rewrite <- minus_minus_lemma2;trivial.\n  apply H2.\n  rewrite mult_plus_distr_r;rewrite <- minus_minus_lemma2;trivial.\n  apply H2.\n  rewrite mult_plus_distr_r;rewrite <- minus_minus_lemma2;trivial.\n  apply H2.\n  rewrite mult_plus_distr_r;rewrite <- minus_minus_lemma2;trivial.\n  apply H2.\n  rewrite mult_Qed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 228, characters 34-35:\nError:\nIn environment\nx, y, u, v : nat\nH : x <= y\nH0 : is_gcd (v * (y - x) - u * x) x (y - x)\nThe term \"H\" has type \"x <= y\" while it is expected to have type \"y <= x\".\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": ")->(rel_prime (quo a d (gcd_div_l d a b H)) (quo b d (gcd_div_r d a b H))).\n  unfold rel_prime.\n  intros.\n  generalize (quo_is_quo a d (gcd_div_l d a b H));intro.\n  generalize (quo_is_quo b d (gcd_div_r d a b H));intro.\n  unfold is_gcd;split;unfold is_cd.\n  split;apply one_min_div.\n  intros.\n  elim H3;intros.\n  elim H4;intro q;intro.\n  elim H5;intro q';intro.\n  rewrite H6 in H1.\n  rewrite H7 in H2.\n  assert (divides d (d*d')).\n  red in H;elim H;intros.\n  apply H9;red;split;[exists q;rewrite H1;ring | exists q';rewrite H2;ring].\n  elim H8;intros.\n  exists x.\n  apply mult_lemma6 with d;trivial.\n  rewrite mult_assoc;rewrite <- H9;auto with arith.\nQed.\n\n(** if q<>0 then gcd(p,q)<>0 *)\nLemma gcd_non_zero : forall (d p q:nat),(q<>O)->(is_gcd d p q)->(d<>O).\n  unfold is_gcd.\n  intros.\n  elim H0;intros.\n  intro.\n  elim H1;intros.\n  elim H5;intros.\n  rewrite H3 in H6;simpl in H6;auto.\nQed.\n\n(** we now exhibit an algorithm that computes Bezout coefficient: for all a b, there is u and v such that a*u-b*v = gcd(a,b) or b*v-a*u = gcd(a,b) *)\n(** the 4 lemmae gives the idea of the algorithm *)\nLemma bezout_aux1 : forall (x y u v:nat),(x<=y)->(is_gcd (u*x-v*(y-x)) x (y-x))->(is_gcd ((u+v)*x-v*y) x y).\n  intros.\n  elim (gcd_minus ((u+v)*x-v*y) x y H);intros.\n  apply H2.\n  rewrite mult_plus_distr_r;rewrite <- minus_minus_lemma1;try (auto with arith);rewrite <- mult_minus_lemma2;trivial.\nQed.\n\nLemma bezout_aux2 : forall (x y u v:nat),(x<=y)->(is_gcd (v*(y-x)-u*x) x (y-x))->(is_gcd (v*y-(u+v)*x) x y).\n  intros.\n  elim (gcd_minus (v*y-(u+v)*x) x y H);intros.\n  apply H2.\n  rewrite mult_plus_distr_r;rewrite plus_comm;rewrite <- minus_minus_lemma2;rewrite <- mult_minus_lemma2;trivial.\nQed.\n\n(** Bezout coefficient *)\n",
                "context_tokens": 677,
                "proof_start_offset": 7098,
                "proof_end_offset": 8538,
                "proof": "Lemma bezout_exists_prod : forall (x:nat*nat),{y:nat*nat | (is_gcd ((fst y)*(fst x)-(snd y)*(snd x)) (fst x) (snd x))}+{y:nat*nat | (is_gcd ((snd y)*(snd x)-(fst y)*(fst x)) (fst x) (snd x))}.\nProof.\napply (induction_ltof2 (nat*nat) f (fun x:nat*nat => ({y:nat*nat | (is_gcd ((fst y)*(fst x)-(snd y)*(snd x)) (fst x) (snd x))}+{y:nat*nat | (is_gcd ((snd y)*(snd x)-(fst y)*(fst x)) (fst x) (snd x))})%type)).\nunfold ltof.\nunfold f.\nintros.\ncase (lt_eq_lt_dec (fst x) (snd x));intro.\ncase s;intro.\ndestruct (fst x).\nright;exists (0,1);simpl;rewrite <- minus_n_O;rewrite plus_comm;simpl;apply gcd_zero.\nelim (H (S n,snd x-S n));try (intro;simpl).\nelim a;intro y;intro.\nleft;exists ((fst y)+(snd y),(snd y)).\nsimpl;apply bezout_aux1;try (auto with arith).\nelim b;intro y;intro.\nright;exists ((fst y)+(snd y),(snd y)).\nsimpl;apply bezout_aux2;try (auto with arith).\nsimpl;omega.\nrewrite e;left;exists (1,0);simpl;rewrite <- minus_n_O;rewrite plus_comm;simpl;apply gcd_refl.\ndestruct (snd x).\nleft;exists (1,0);simpl;rewrite <- minus_n_O;rewrite plus_comm;simpl;apply gcd_sym;apply gcd_zero.\nelim (H (S n,fst x-S n));try (intro;simpl).\nelim a;intro y;intro.\nright;exists ((snd y),(fst y)+(snd y));apply gcd_sym.\nsimpl;apply bezout_aux1;try (auto with arith).\nelim b;intro y;intro.\nleft;exists ((snd y),(fst y)+(snd y));apply gcd_sym.\nsimpl;apply bezout_aux2;try (auto with arith).\nsimpl;omega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma bezout_exists_prod : forall (x:nat*nat),{y:nat*nat | (is_gcd ((fst y)*(fst x)-(snd y)*(snd x)) (fst x) (snd x))}+{y:nat*nat | (is_gcd ((snd y)*(snd x)-(fst y)*(fst x)) (fst x) (snd x))}.\n  intros.\n  elim (is_gcd_pos x y H);intros.\n  elim H1;intros.\n  elim H2;intros.\n  elim H3;intros.\n  elim H4;intros.\n  elim H4;intros.\n  elim H5;intros.\n  elim H5;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6; intros.\n  elim H6; intros.\n  elim H6; intros.\n  elim H6; intros.\n  elim H6; intros.\n  elim H6; intros.\n  elim H6; intros.\n  elim H6; intros.\n Qed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 236, characters 8-18:\nError: The reference is_gcd_pos was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": "minus_lemma2;trivial.\nQed.\n\nLemma bezout_aux2 : forall (x y u v:nat),(x<=y)->(is_gcd (v*(y-x)-u*x) x (y-x))->(is_gcd (v*y-(u+v)*x) x y).\n  intros.\n  elim (gcd_minus (v*y-(u+v)*x) x y H);intros.\n  apply H2.\n  rewrite mult_plus_distr_r;rewrite plus_comm;rewrite <- minus_minus_lemma2;rewrite <- mult_minus_lemma2;trivial.\nQed.\n\n(** Bezout coefficient *)\nLemma bezout_exists_prod : forall (x:nat*nat),{y:nat*nat | (is_gcd ((fst y)*(fst x)-(snd y)*(snd x)) (fst x) (snd x))}+{y:nat*nat | (is_gcd ((snd y)*(snd x)-(fst y)*(fst x)) (fst x) (snd x))}.\n  apply (induction_ltof2 (nat*nat) f (fun x:nat*nat => ({y:nat*nat | (is_gcd ((fst y)*(fst x)-(snd y)*(snd x)) (fst x) (snd x))}+{y:nat*nat | (is_gcd ((snd y)*(snd x)-(fst y)*(fst x)) (fst x) (snd x))})%type)).\n  unfold ltof.\n  unfold f.\n  intros.\n  case (lt_eq_lt_dec (fst x) (snd x));intro.\n  case s;intro.\n  destruct (fst x).\n  right;exists (0,1);simpl;rewrite <- minus_n_O;rewrite plus_comm;simpl;apply gcd_zero.\n  elim (H (S n,snd x-S n));try (intro;simpl).\n  elim a;intro y;intro.\n  left;exists ((fst y)+(snd y),(snd y)).\n  simpl;apply bezout_aux1;try (auto with arith).\n  elim b;intro y;intro.\n  right;exists ((fst y)+(snd y),(snd y)).\n  simpl;apply bezout_aux2;try (auto with arith).\n  simpl;omega.\n  rewrite e;left;exists (1,0);simpl;rewrite <- minus_n_O;rewrite plus_comm;simpl;apply gcd_refl.\n  destruct (snd x).\n  left;exists (1,0);simpl;rewrite <- minus_n_O;rewrite plus_comm;simpl;apply gcd_sym;apply gcd_zero.\n  elim (H (S n,fst x-S n));try (intro;simpl).\n  elim a;intro y;intro.\n  right;exists ((snd y),(fst y)+(snd y));apply gcd_sym.\n  simpl;apply bezout_aux1;try (auto with arith).\n  elim b;intro y;intro.\n  left;exists ((snd y),(fst y)+(snd y));apply gcd_sym.\n  simpl;apply bezout_aux2;try (auto with arith).\n  simpl;omega.\nQed.\n\n(** Bezout' theorem *)\n",
                "context_tokens": 690,
                "proof_start_offset": 8563,
                "proof_end_offset": 8967,
                "proof": "Theorem bezout_exists : forall (a b:nat),{u:nat & {v:nat | (is_gcd (a*u-b*v) a b)}}+{u:nat & {v:nat | (is_gcd (b*v-a*u) a b)}}.\nProof.\nintros.\nelim (bezout_exists_prod (a,b));intro.\nelim a0;destruct x;simpl;intros.\nleft;exists n;exists n0;rewrite mult_comm;rewrite (mult_comm b);trivial.\nelim b0;destruct x;simpl;intros.\nright;exists n;exists n0;rewrite mult_comm;rewrite (mult_comm a);trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem bezout_exists : forall (a b:nat),{u:nat & {v:nat | (is_gcd (a*u-b*v) a b)}}+{u:nat & {v:nat | (is_gcd (b*v-a*u) a b)}}.\nProof.\n  intros a b.\n  case (is_gcd a b); intros.\n  case (is_gcd a b); intros.\n  case (is_gcd a b); intros.\n  right;exists (is_gcd a b); intros.\n  apply H2.\n  rewrite <- H2; rewrite <- H1; rewrite <- H2; rewrite <- H1; rewrite <- H2; rewrite <- H2; rewrite <- H1; rewrite <- H2;\n    rewrite <- H1; rewrite <- H2; rewrite <- H1; rewrite <- H2; rewrite <- H2;\n    rewrite <- H1; rewrite <- H2; rewrite <- H1; rewrite <- H2;\n    rewrite <- H1; rewrite <- H2; rewrite <- H1; rewrite <- H2;\n    rewrite <- H1; rewrite <- H2; rewrite <- H1; rewrite <- H2;\n    rewrite <- H1; rewrite <- H2; rewrite <- H1; rewrite <- H1;\n    rewrite <- H1; rewrite <- H2; rewrite <- H1; rewrite <- H2;\n    rewrite <- H1; rewrite <- H1; rewrite <- H1; rewrite <- H2;\n    rewrite <- HQed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 268, characters 2-19:\nError: Not an inductive product.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": " forall (x:nat*nat),{y:nat*nat | (is_gcd ((fst y)*(fst x)-(snd y)*(snd x)) (fst x) (snd x))}+{y:nat*nat | (is_gcd ((snd y)*(snd x)-(fst y)*(fst x)) (fst x) (snd x))}.\n  apply (induction_ltof2 (nat*nat) f (fun x:nat*nat => ({y:nat*nat | (is_gcd ((fst y)*(fst x)-(snd y)*(snd x)) (fst x) (snd x))}+{y:nat*nat | (is_gcd ((snd y)*(snd x)-(fst y)*(fst x)) (fst x) (snd x))})%type)).\n  unfold ltof.\n  unfold f.\n  intros.\n  case (lt_eq_lt_dec (fst x) (snd x));intro.\n  case s;intro.\n  destruct (fst x).\n  right;exists (0,1);simpl;rewrite <- minus_n_O;rewrite plus_comm;simpl;apply gcd_zero.\n  elim (H (S n,snd x-S n));try (intro;simpl).\n  elim a;intro y;intro.\n  left;exists ((fst y)+(snd y),(snd y)).\n  simpl;apply bezout_aux1;try (auto with arith).\n  elim b;intro y;intro.\n  right;exists ((fst y)+(snd y),(snd y)).\n  simpl;apply bezout_aux2;try (auto with arith).\n  simpl;omega.\n  rewrite e;left;exists (1,0);simpl;rewrite <- minus_n_O;rewrite plus_comm;simpl;apply gcd_refl.\n  destruct (snd x).\n  left;exists (1,0);simpl;rewrite <- minus_n_O;rewrite plus_comm;simpl;apply gcd_sym;apply gcd_zero.\n  elim (H (S n,fst x-S n));try (intro;simpl).\n  elim a;intro y;intro.\n  right;exists ((snd y),(fst y)+(snd y));apply gcd_sym.\n  simpl;apply bezout_aux1;try (auto with arith).\n  elim b;intro y;intro.\n  left;exists ((snd y),(fst y)+(snd y));apply gcd_sym.\n  simpl;apply bezout_aux2;try (auto with arith).\n  simpl;omega.\nQed.\n\n(** Bezout' theorem *)\nTheorem bezout_exists : forall (a b:nat),{u:nat & {v:nat | (is_gcd (a*u-b*v) a b)}}+{u:nat & {v:nat | (is_gcd (b*v-a*u) a b)}}.\n  intros.\n  elim (bezout_exists_prod (a,b));intro.\n  elim a0;destruct x;simpl;intros.\n  left;exists n;exists n0;rewrite mult_comm;rewrite (mult_comm b);trivial.\n  elim b0;destruct x;simpl;intros.\n  right;exists n;exists n0;rewrite mult_comm;rewrite (mult_comm a);trivial.\nQed.\n\n(** Bezout' theorem reformulated *)\n",
                "context_tokens": 708,
                "proof_start_offset": 9005,
                "proof_end_offset": 9380,
                "proof": "Theorem bezout : forall (d a b:nat),(is_gcd d a b)->exists u:nat,exists v:nat,d=a*u-b*v \\/ d=b*v-a*u.\nProof.\nintros.\nelim (bezout_exists a b);intro.\nelim a0;intro u;intro;elim p;intro v;intro;exists u;exists v;left;apply (gcd_unique d (a*u-b*v) a b);trivial.\nelim b0;intro u;intro;elim p;intro v;intro;exists u;exists v;right;apply (gcd_unique d (b*v-a*u) a b);trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem bezout : forall (d a b:nat),(is_gcd d a b)->exists u:nat,exists v:nat,d=a*u-b*v \\/ d=b*v-a*u.\nProof.\n  intros.\n  elim (is_gcd_divisors (a*u) (b*u));intro.\n  elim (is_gcd_divisors (a*u));intro.\n  elim (is_gcd_divisors (a*u));intro.\n  elim (is_gcd_divisors (a*u));intro.\n  elim (is_gcd_divisors (a*u));intro.\n  elim (is_gcd_divisors (a*u));intro.\n  elim (is_gcd_divisors (a*u));intro.\n  elim (is_gcd_divisors (a*u));intro.\n  elim (is_gcd_divisors (a*u));intro.\n  elim (is_gcd_divisors (a*u));intro.\n  elim (is_gcd_divisors (a*u));intro.\n  elim (is_gcd_divisors (a*u));intro.\n  elim (is_gcd_divisors (a*u));intro.\n  elim (is_gcd_divisors (a*u));intro.\n  elim (is_gcd_divisors (a*u));intro.\n  elim (is_gcd_divisors (a*u));intro.\n  elim (is_Qed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 278, characters 8-23:\nError: The reference is_gcd_divisors was not found in the current\nenvironment.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": "lt_eq_lt_dec (fst x) (snd x));intro.\n  case s;intro.\n  destruct (fst x).\n  right;exists (0,1);simpl;rewrite <- minus_n_O;rewrite plus_comm;simpl;apply gcd_zero.\n  elim (H (S n,snd x-S n));try (intro;simpl).\n  elim a;intro y;intro.\n  left;exists ((fst y)+(snd y),(snd y)).\n  simpl;apply bezout_aux1;try (auto with arith).\n  elim b;intro y;intro.\n  right;exists ((fst y)+(snd y),(snd y)).\n  simpl;apply bezout_aux2;try (auto with arith).\n  simpl;omega.\n  rewrite e;left;exists (1,0);simpl;rewrite <- minus_n_O;rewrite plus_comm;simpl;apply gcd_refl.\n  destruct (snd x).\n  left;exists (1,0);simpl;rewrite <- minus_n_O;rewrite plus_comm;simpl;apply gcd_sym;apply gcd_zero.\n  elim (H (S n,fst x-S n));try (intro;simpl).\n  elim a;intro y;intro.\n  right;exists ((snd y),(fst y)+(snd y));apply gcd_sym.\n  simpl;apply bezout_aux1;try (auto with arith).\n  elim b;intro y;intro.\n  left;exists ((snd y),(fst y)+(snd y));apply gcd_sym.\n  simpl;apply bezout_aux2;try (auto with arith).\n  simpl;omega.\nQed.\n\n(** Bezout' theorem *)\nTheorem bezout_exists : forall (a b:nat),{u:nat & {v:nat | (is_gcd (a*u-b*v) a b)}}+{u:nat & {v:nat | (is_gcd (b*v-a*u) a b)}}.\n  intros.\n  elim (bezout_exists_prod (a,b));intro.\n  elim a0;destruct x;simpl;intros.\n  left;exists n;exists n0;rewrite mult_comm;rewrite (mult_comm b);trivial.\n  elim b0;destruct x;simpl;intros.\n  right;exists n;exists n0;rewrite mult_comm;rewrite (mult_comm a);trivial.\nQed.\n\n(** Bezout' theorem reformulated *)\nTheorem bezout : forall (d a b:nat),(is_gcd d a b)->exists u:nat,exists v:nat,d=a*u-b*v \\/ d=b*v-a*u.\n  intros.\n  elim (bezout_exists a b);intro.\n  elim a0;intro u;intro;elim p;intro v;intro;exists u;exists v;left;apply (gcd_unique d (a*u-b*v) a b);trivial.\n  elim b0;intro u;intro;elim p;intro v;intro;exists u;exists v;right;apply (gcd_unique d (b*v-a*u) a b);trivial.\nQed.\n\n(** Bezout' theorem and relatively prime numbers *)\n",
                "context_tokens": 704,
                "proof_start_offset": 9434,
                "proof_end_offset": 10062,
                "proof": "Theorem bezout_rel_prime : forall (a b:nat),(rel_prime a b)<->(exists u:nat, exists v:nat, 1=a*u-b*v \\/ 1 = b*v-a*u).\nProof.\nintros.\nunfold rel_prime.\nsplit;intro.\napply bezout;trivial.\nelim H;intro u;intro H0.\nelim H0;intro v;intro.\nunfold is_gcd;unfold is_cd.\nsplit.\nsplit;apply one_min_div.\nintros.\nelim H2;intros.\nelim H3;intro q;intro.\nelim H4;intro q';intro.\nrewrite H5 in H1;rewrite H6 in H1.\ncase H1;intro.\nexists (q*u-q'*v);rewrite mult_minus_lemma2;rewrite mult_assoc;rewrite mult_assoc;trivial.\nexists (q'*v-q*u);rewrite mult_minus_lemma2;rewrite mult_assoc;rewrite mult_assoc;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem bezout_rel_prime : forall (a b:nat),(rel_prime a b)<->(exists u:nat, exists v:nat, 1=a*u-b*v \\/ 1 = b*v-a*u).\nProof.\n  intros a b.\n  elim (rel_prime_dec a b);intro.\n  elim (rel_prime_dec a b);intro.\n  elim (rel_prime_dec b a);intro.\n  elim (rel_prime_dec a b);intro.\n  elim (rel_prime_dec a b);intro.\n  elim (rel_prime_dec b a);intro.\n  elim (rel_prime_dec a b);intro.\n  elim (rel_prime_dec b a);intro.\n  elim (rel_prime_dec a b);intro.\n  elim (rel_prime_dec a b);intro.\n  elim (rel_prime_dec b a);intro.\n  elim (rel_prime_dec a b);intro.\n  elim (rel_prime_dec b a);intro.\n  elim (rel_prime_dec b a);intro.\n  elim (rel_prime_dec b a);intro.\n  elim (rel_prime_dec a b);intro.\n  elim (rel_prime_dec a b);intro.\n  elim (rel_prime_dec a b);intro.\n  elim (rel_prime_dec b a);intro.\n Qed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 286, characters 8-21:\nError: The reference rel_prime_dec was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": "try (intro;simpl).\n  elim a;intro y;intro.\n  right;exists ((snd y),(fst y)+(snd y));apply gcd_sym.\n  simpl;apply bezout_aux1;try (auto with arith).\n  elim b;intro y;intro.\n  left;exists ((snd y),(fst y)+(snd y));apply gcd_sym.\n  simpl;apply bezout_aux2;try (auto with arith).\n  simpl;omega.\nQed.\n\n(** Bezout' theorem *)\nTheorem bezout_exists : forall (a b:nat),{u:nat & {v:nat | (is_gcd (a*u-b*v) a b)}}+{u:nat & {v:nat | (is_gcd (b*v-a*u) a b)}}.\n  intros.\n  elim (bezout_exists_prod (a,b));intro.\n  elim a0;destruct x;simpl;intros.\n  left;exists n;exists n0;rewrite mult_comm;rewrite (mult_comm b);trivial.\n  elim b0;destruct x;simpl;intros.\n  right;exists n;exists n0;rewrite mult_comm;rewrite (mult_comm a);trivial.\nQed.\n\n(** Bezout' theorem reformulated *)\nTheorem bezout : forall (d a b:nat),(is_gcd d a b)->exists u:nat,exists v:nat,d=a*u-b*v \\/ d=b*v-a*u.\n  intros.\n  elim (bezout_exists a b);intro.\n  elim a0;intro u;intro;elim p;intro v;intro;exists u;exists v;left;apply (gcd_unique d (a*u-b*v) a b);trivial.\n  elim b0;intro u;intro;elim p;intro v;intro;exists u;exists v;right;apply (gcd_unique d (b*v-a*u) a b);trivial.\nQed.\n\n(** Bezout' theorem and relatively prime numbers *)\nTheorem bezout_rel_prime : forall (a b:nat),(rel_prime a b)<->(exists u:nat, exists v:nat, 1=a*u-b*v \\/ 1 = b*v-a*u).\n  intros.\n  unfold rel_prime.\n  split;intro.\n  apply bezout;trivial.\n  elim H;intro u;intro H0.\n  elim H0;intro v;intro.\n  unfold is_gcd;unfold is_cd.\n  split.\n  split;apply one_min_div.\n  intros.\n  elim H2;intros.\n  elim H3;intro q;intro.\n  elim H4;intro q';intro.\n  rewrite H5 in H1;rewrite H6 in H1.\n  case H1;intro.\n  exists (q*u-q'*v);rewrite mult_minus_lemma2;rewrite mult_assoc;rewrite mult_assoc;trivial.\n  exists (q'*v-q*u);rewrite mult_minus_lemma2;rewrite mult_assoc;rewrite mult_assoc;trivial.\nQed.\n\n(** gcd(n*a,n*b) = n*gcd(a,b) *)\n",
                "context_tokens": 713,
                "proof_start_offset": 10097,
                "proof_end_offset": 10866,
                "proof": "Lemma gcd_mult : forall (d a b:nat),(is_gcd d a b)->(forall (n:nat),(is_gcd (n*d) (n*a) (n*b))).\nProof.\nunfold is_gcd;unfold is_cd.\nintros.\nelim H;intros.\nelim H0;intros.\nsplit.\nelim H2;intro q;intro.\nelim H3;intro q';intro.\nrewrite H4;rewrite mult_assoc.\nrewrite H5;rewrite mult_assoc.\nsplit;[exists q;trivial | exists q';trivial].\nintros.\nelim H4;intros.\nelim (bezout d a b);try (unfold is_gcd;unfold is_cd;trivial).\nintro u;intro.\nelim H7;intro v;intro.\nelim H5;intro q;intro.\nelim H6;intro q';intro.\ncase H8;intro;[exists (q*u-q'*v) | exists (q'*v-q*u)];rewrite mult_minus_lemma2;rewrite mult_assoc;rewrite mult_assoc;rewrite <- H9;rewrite <- H10;rewrite H11;rewrite mult_minus_lemma2;rewrite mult_assoc;rewrite mult_assoc;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_mult : forall (d a b:nat),(is_gcd d a b)->(forall (n:nat),(is_gcd (n*d) (n*a) (n*b))).\nProof.\n intros.\n destruct (gcd_mult_strong (n*a) (n*b) (n*a) (n*b) (n*b)).\n rewrite <- (gcd_mult a b).\n rewrite <- (gcd_mult a b).\n rewrite <- (gcd_mult a b).\n rewrite <- (gcd_mult a b).\n rewrite <- (gcd_mult a b).\n rewrite <- (gcd_mult a b).\n rewrite <- (gcd_mult a b).\n rewrite <- (gcd_mult a b).\n rewrite <- (gcd_mult a b).\n rewrite <- (gcd_mult a b).\n rewrite <- (gcd_mult a b).\n rewrite <- (gcd_mult a b).\n rewrite <- (gcd_mult a b).\n rewrite <- (gcd_mult a b).\n rewrite <- (gcd_mult a b).\n rewrite <- (gcd_mult a b).\n rewrite <- (gcd_mult a b).\n rewrite <- (gcd_mult a b).\n rewrite <- (gcd_mult a b).\n rewrite <- (gcd_mult a b).\n rewrite <- (gcd_mult a b).\n rewrite <- (gcd_multQed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 307, characters 11-26:\nError: The reference gcd_mult_strong was not found in the current\nenvironment.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": "formulated *)\nTheorem bezout : forall (d a b:nat),(is_gcd d a b)->exists u:nat,exists v:nat,d=a*u-b*v \\/ d=b*v-a*u.\n  intros.\n  elim (bezout_exists a b);intro.\n  elim a0;intro u;intro;elim p;intro v;intro;exists u;exists v;left;apply (gcd_unique d (a*u-b*v) a b);trivial.\n  elim b0;intro u;intro;elim p;intro v;intro;exists u;exists v;right;apply (gcd_unique d (b*v-a*u) a b);trivial.\nQed.\n\n(** Bezout' theorem and relatively prime numbers *)\nTheorem bezout_rel_prime : forall (a b:nat),(rel_prime a b)<->(exists u:nat, exists v:nat, 1=a*u-b*v \\/ 1 = b*v-a*u).\n  intros.\n  unfold rel_prime.\n  split;intro.\n  apply bezout;trivial.\n  elim H;intro u;intro H0.\n  elim H0;intro v;intro.\n  unfold is_gcd;unfold is_cd.\n  split.\n  split;apply one_min_div.\n  intros.\n  elim H2;intros.\n  elim H3;intro q;intro.\n  elim H4;intro q';intro.\n  rewrite H5 in H1;rewrite H6 in H1.\n  case H1;intro.\n  exists (q*u-q'*v);rewrite mult_minus_lemma2;rewrite mult_assoc;rewrite mult_assoc;trivial.\n  exists (q'*v-q*u);rewrite mult_minus_lemma2;rewrite mult_assoc;rewrite mult_assoc;trivial.\nQed.\n\n(** gcd(n*a,n*b) = n*gcd(a,b) *)\nLemma gcd_mult : forall (d a b:nat),(is_gcd d a b)->(forall (n:nat),(is_gcd (n*d) (n*a) (n*b))).\n  unfold is_gcd;unfold is_cd.\n  intros.\n  elim H;intros.\n  elim H0;intros.\n  split.\n  elim H2;intro q;intro.\n  elim H3;intro q';intro.\n  rewrite H4;rewrite mult_assoc.\n  rewrite H5;rewrite mult_assoc.\n  split;[exists q;trivial | exists q';trivial].\n  intros.\n  elim H4;intros.\n  elim (bezout d a b);try (unfold is_gcd;unfold is_cd;trivial).\n  intro u;intro.\n  elim H7;intro v;intro.\n  elim H5;intro q;intro.\n  elim H6;intro q';intro.\n  case H8;intro;[exists (q*u-q'*v) | exists (q'*v-q*u)];rewrite mult_minus_lemma2;rewrite mult_assoc;rewrite mult_assoc;rewrite <- H9;rewrite <- H10;rewrite H11;rewrite mult_minus_lemma2;rewrite mult_assoc;rewrite mult_assoc;trivial.\nQed.\n\n(** Gauss' theorem (use Bezout) *)\n",
                "context_tokens": 728,
                "proof_start_offset": 10903,
                "proof_end_offset": 11396,
                "proof": "Theorem gauss : forall (d a b:nat),(rel_prime a d)->(divides (a*b) d)->(divides b d).\nProof.\nunfold rel_prime.\nintros.\nelim (bezout 1 a d H);intro u;intro.\nelim H1;intro v;intro.\nelim H0;intro q;intro.\ncase H2;intro;[exists (q*u-b*v) | exists (b*v-q*u)];rewrite mult_minus_lemma2;rewrite mult_assoc;rewrite mult_assoc;rewrite <- H3;rewrite (mult_comm a b);rewrite (mult_comm d b);rewrite <- mult_assoc;rewrite <- mult_assoc;rewrite <- mult_minus_lemma2;rewrite <- H4;auto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem gauss : forall (d a b:nat),(rel_prime a d)->(divides (a*b) d)->(divides b d).\nProof.\n  intros.\n  elim H;intro.\n  elim H0;intro q;intro.\n  elim H1;intro q;intro.\n  elim H2;intro q;intro.\n  elim H3;intro q';intro.\n  rewrite H4; rewrite mult_plus_distr_r.\n  rewrite H5; rewrite mult_assoc.\n  rewrite H5; rewrite mult_assoc.\n  rewrite H5; rewrite mult_assoc.\n  rewrite H5; rewrite mult_assoc.\n  rewrite H5; rewrite mult_assoc.\n  rewrite H5; rewrite mult_assoc.\n  rewrite H5; rewrite mult_assoc.\n  rewrite H5; rewrite mult_assoc.\n  rewrite H5; rewrite mult_assoc.\n  rewrite H5; rewrite mult_assoc.\n  rewrite H5; rewrite mult_assoc.\n  rewrite H5; rewrite mult_assoc.\n  rewrite H5; rewrite mult_assoc.\n  rewrite H5; rewrite mult_assoc.\n  rewrite H5; rewrite mult_assoc.\n  rewrite H5; rewrite mult_assoc.\n  rewrite H5; rewrite mult_assoc.\n  rewrite H5; rewrite mult_assoc.\n  rewrite H5; rewrite mult_assoc.Qed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 331, characters 10-17:\nError: Ltac call to \"intro (ident)\" failed.\n       q is already used.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": "*v \\/ 1 = b*v-a*u).\n  intros.\n  unfold rel_prime.\n  split;intro.\n  apply bezout;trivial.\n  elim H;intro u;intro H0.\n  elim H0;intro v;intro.\n  unfold is_gcd;unfold is_cd.\n  split.\n  split;apply one_min_div.\n  intros.\n  elim H2;intros.\n  elim H3;intro q;intro.\n  elim H4;intro q';intro.\n  rewrite H5 in H1;rewrite H6 in H1.\n  case H1;intro.\n  exists (q*u-q'*v);rewrite mult_minus_lemma2;rewrite mult_assoc;rewrite mult_assoc;trivial.\n  exists (q'*v-q*u);rewrite mult_minus_lemma2;rewrite mult_assoc;rewrite mult_assoc;trivial.\nQed.\n\n(** gcd(n*a,n*b) = n*gcd(a,b) *)\nLemma gcd_mult : forall (d a b:nat),(is_gcd d a b)->(forall (n:nat),(is_gcd (n*d) (n*a) (n*b))).\n  unfold is_gcd;unfold is_cd.\n  intros.\n  elim H;intros.\n  elim H0;intros.\n  split.\n  elim H2;intro q;intro.\n  elim H3;intro q';intro.\n  rewrite H4;rewrite mult_assoc.\n  rewrite H5;rewrite mult_assoc.\n  split;[exists q;trivial | exists q';trivial].\n  intros.\n  elim H4;intros.\n  elim (bezout d a b);try (unfold is_gcd;unfold is_cd;trivial).\n  intro u;intro.\n  elim H7;intro v;intro.\n  elim H5;intro q;intro.\n  elim H6;intro q';intro.\n  case H8;intro;[exists (q*u-q'*v) | exists (q'*v-q*u)];rewrite mult_minus_lemma2;rewrite mult_assoc;rewrite mult_assoc;rewrite <- H9;rewrite <- H10;rewrite H11;rewrite mult_minus_lemma2;rewrite mult_assoc;rewrite mult_assoc;trivial.\nQed.\n\n(** Gauss' theorem (use Bezout) *)\nTheorem gauss : forall (d a b:nat),(rel_prime a d)->(divides (a*b) d)->(divides b d).\n  unfold rel_prime.\n  intros.\n  elim (bezout 1 a d H);intro u;intro.\n  elim H1;intro v;intro.\n  elim H0;intro q;intro.\n  case H2;intro;[exists (q*u-b*v) | exists (b*v-q*u)];rewrite mult_minus_lemma2;rewrite mult_assoc;rewrite mult_assoc;rewrite <- H3;rewrite (mult_comm a b);rewrite (mult_comm d b);rewrite <- mult_assoc;rewrite <- mult_assoc;rewrite <- mult_minus_lemma2;rewrite <- H4;auto with arith.\nQed.\n\n(** we show that if b<>0, then gcd(a,b)=gcd(b,a mod b) *)\n",
                "context_tokens": 714,
                "proof_start_offset": 11456,
                "proof_end_offset": 13305,
                "proof": "Lemma gcd_euclide : forall (d a b:nat)(H:(b<>0)),(is_gcd d a b)<->(is_gcd d b (remainder_euclide a b H)).\nProof.\nintros.\ngeneralize (quo_rem_euclide a b H);intro.\nred;split;intro.\nrewrite H0 in H1.\nelim H1;intros.\nunfold is_gcd;unfold is_cd.\nelim H2;intros.\nsplit.\nsplit;try tauto.\nelim H4;intro q;intro.\nelim H5;intro q';intro.\nreplace (b*(quotient_euclide a b H)) with (d*q'*(quotient_euclide a b H)) in H6.\nassert ((remainder_euclide a b H)=(d*q-d*q'*(quotient_euclide a b H))).\nrewrite <- H6;rewrite minus_plus;trivial.\nrewrite <- mult_assoc in H8;rewrite <- mult_minus_lemma2 in H8.\nexists (q-q'*(quotient_euclide a b H));trivial.\nrewrite <- H7;trivial.\nintros.\nelim H6;intros.\napply H3.\nunfold is_cd;split;try tauto.\nelim H7;intro q;intro.\nelim H8;intro q';intro.\nrewrite H10.\nreplace (b*(quotient_euclide a b H)) with (d'*q*(quotient_euclide a b H)).\nrewrite <- mult_assoc;rewrite <- mult_plus_distr_l.\nexists (q*(quotient_euclide a b H)+q');trivial.\nrewrite <- H9;trivial.\nunfold is_gcd;unfold is_cd.\nunfold is_gcd in H1;unfold is_cd in H1.\nelim H1;intros.\nelim H2;intros.\nrewrite H0.\nsplit.\nsplit;try tauto.\nelim H4;intro q;intro.\nelim H5;intro q';intro.\nrewrite H7.\nreplace (b*(quotient_euclide a b H)) with (d*q*(quotient_euclide a b H)).\nrewrite <- mult_assoc;rewrite <- mult_plus_distr_l.\nexists (q*(quotient_euclide a b H)+q');trivial.\nrewrite <- H6;trivial.\nintros.\napply H3.\nsplit;try tauto.\nelim H6;intros.\nelim H7;intro q;intro.\nelim H8;intro q';intro.\nassert ((remainder_euclide a b H)=b*(quotient_euclide a b H)+(remainder_euclide a b H)-b*(quotient_euclide a b H)).\nrewrite minus_plus;trivial.\nrewrite H9 in H11.\nexists (q-q'*(quotient_euclide a b H)).\nrewrite mult_minus_lemma2;rewrite mult_assoc.\nrewrite <- H10;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_euclide : forall (d a b:nat)(H:(b<>0)),(is_gcd d a b)<->(is_gcd d b (remainder_euclide a b H)).\n  unfold rel_prime.\n  intros.\n  elim (divide_1_l (b*a/b) (gcd_euclide a b H)).\n  intro u;intro.\n  elim H1;intro q;intro.\n  elim H1;intro q;intro.\n  elim H2;intro q;intro.\n  rewrite H4; rewrite H4; rewrite mult_comm; rewrite mult_assoc; rewrite <- H4; rewrite <- H5; rewrite <- H6;\n    rewrite mult_plus_distr_l; rewrite <- H5; rewrite <- H6; rewrite <- H6;\n    rewrite mult_plus_distr_l; rewrite <- H5; rewrite <- H6; rewrite <- H6;\n    rewrite mult_plus_distr_l; rewrite <- H6; rewrite <- H6; rewrite <- H6;\n    rewrite mult_plus_distr_l; rewrite <- H6; rewrite <- H6; rewrite <- H6;\n    rewrite mult_plus_distr_l; rewrite <- H6; rewrite <- H6; rewrite <- H6;\n    rewrite mult_plus_distr_l; rewrite <- H6; rewrite <- H6; rewrite <- H6;\n    rewrite multQed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 339, characters 8-18:\nError: The reference divide_1_l was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": "2;rewrite <- H4;auto with arith.\nQed.\n\n(** we show that if b<>0, then gcd(a,b)=gcd(b,a mod b) *)\nLemma gcd_euclide : forall (d a b:nat)(H:(b<>0)),(is_gcd d a b)<->(is_gcd d b (remainder_euclide a b H)).\n  intros.\n  generalize (quo_rem_euclide a b H);intro.\n  red;split;intro.\n  rewrite H0 in H1.\n  elim H1;intros.\n  unfold is_gcd;unfold is_cd.\n  elim H2;intros.\n  split.\n  split;try tauto.\n  elim H4;intro q;intro.\n  elim H5;intro q';intro.\n  replace (b*(quotient_euclide a b H)) with (d*q'*(quotient_euclide a b H)) in H6.\n  assert ((remainder_euclide a b H)=(d*q-d*q'*(quotient_euclide a b H))).\n  rewrite <- H6;rewrite minus_plus;trivial.\n  rewrite <- mult_assoc in H8;rewrite <- mult_minus_lemma2 in H8.\n  exists (q-q'*(quotient_euclide a b H));trivial.\n  rewrite <- H7;trivial.\n  intros.\n  elim H6;intros.\n  apply H3.\n  unfold is_cd;split;try tauto.\n  elim H7;intro q;intro.\n  elim H8;intro q';intro.\n  rewrite H10.\n  replace (b*(quotient_euclide a b H)) with (d'*q*(quotient_euclide a b H)).\n  rewrite <- mult_assoc;rewrite <- mult_plus_distr_l.\n  exists (q*(quotient_euclide a b H)+q');trivial.\n  rewrite <- H9;trivial.\n  unfold is_gcd;unfold is_cd.\n  unfold is_gcd in H1;unfold is_cd in H1.\n  elim H1;intros.\n  elim H2;intros.\n  rewrite H0.\n  split.\n  split;try tauto.\n  elim H4;intro q;intro.\n  elim H5;intro q';intro.\n  rewrite H7.\n  replace (b*(quotient_euclide a b H)) with (d*q*(quotient_euclide a b H)).\n  rewrite <- mult_assoc;rewrite <- mult_plus_distr_l.\n  exists (q*(quotient_euclide a b H)+q');trivial.\n  rewrite <- H6;trivial.\n  intros.\n  apply H3.\n  split;try tauto.\n  elim H6;intros.\n  elim H7;intro q;intro.\n  elim H8;intro q';intro.\n  assert ((remainder_euclide a b H)=b*(quotient_euclide a b H)+(remainder_euclide a b H)-b*(quotient_euclide a b H)).\n  rewrite minus_plus;trivial.\n  rewrite H9 in H11.\n  exists (q-q'*(quotient_euclide a b H)).\n  rewrite mult_minus_lemma2;rewrite mult_assoc.\n  rewrite <- H10;trivial.\nQed.\n\n(** we give a \"more efficient\" algorithm to compute gcd(a,b) *)\n",
                "context_tokens": 722,
                "proof_start_offset": 13371,
                "proof_end_offset": 14277,
                "proof": "Lemma gcd_exists_prod_bis : forall (x:nat*nat),{d:nat | (is_gcd d (fst x) (snd x))}.\nProof.\napply (induction_ltof2 (nat*nat) f (fun x:nat*nat => {d:nat | (is_gcd d (fst x) (snd x))})).\nunfold ltof;unfold f;intros.\ncase (lt_eq_lt_dec (fst x) (snd x));intro.\ncase s;intro.\ncase (eq_nat_dec (fst x) 0);intro.\nrewrite e;exists (snd x);apply gcd_zero.\nelim (H ((fst x),(remainder_euclide (snd x) (fst x) n)));simpl.\nintro d;intro.\nexists d.\napply gcd_sym.\nelim (gcd_euclide d (snd x) (fst x) n);auto.\ngeneralize (rem_euclide (snd x) (fst x) n);try omega.\nrewrite e;exists (snd x);apply gcd_refl.\ncase (eq_nat_dec (snd x) 0);intro.\nrewrite e;exists (fst x);apply gcd_sym;apply gcd_zero.\nelim (H ((snd x),(remainder_euclide (fst x) (snd x) n)));simpl.\nintro d;intro.\nexists d.\nelim (gcd_euclide d (fst x) (snd x) n);auto.\ngeneralize (rem_euclide (fst x) (snd x) n);try omega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_exists_prod_bis : forall (x:nat*nat),{d:nat | (is_gcd d (fst x) (snd x))}.\nProof.\nintros x.\ndestruct x.\ndestruct x.\ndestruct x.\ndestruct x.\ndestruct x.\ndestruct x.\ndestruct x0.\ndestruct x.\ndestruct x.\ndestruct x0.\ndestruct x1.\ndestruct x1.\ndestruct x2.\ndestruct x2.\ndestruct x3.\ndestruct x4.\ndestruct x4.\ndestruct x4.\ndestruct x4.\ndestruct x5.\ndestruct x5.\ndestruct x6.\ndestruct x6.\ndestruct x7.\ndestruct x8.\ndestruct x8.\ndestruct x9.\ndestruct x10.\ndestruct x11.\ndestruct x12.\ndestruct x12.\ndestruct x12.\ndestruct x13.\ndestruct x14.\ndestruct x15.\ndestruct x15.\ndestruct x15.\ndestruct x15.\ndestruct x15.\ndestruct x15.\ndestruct x15.\ndestruct x15.\ndestruct x15.\ndestruct x15.\ndestruct x15.\ndestruct x15.\ndestruct x15.\ndestruct x15.\ndestruct x15.\ndestruct x15.\ndestruct x15.\ndestructQed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 398, characters 9-10:\nError: The reference x was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": " a b H)) with (d'*q*(quotient_euclide a b H)).\n  rewrite <- mult_assoc;rewrite <- mult_plus_distr_l.\n  exists (q*(quotient_euclide a b H)+q');trivial.\n  rewrite <- H9;trivial.\n  unfold is_gcd;unfold is_cd.\n  unfold is_gcd in H1;unfold is_cd in H1.\n  elim H1;intros.\n  elim H2;intros.\n  rewrite H0.\n  split.\n  split;try tauto.\n  elim H4;intro q;intro.\n  elim H5;intro q';intro.\n  rewrite H7.\n  replace (b*(quotient_euclide a b H)) with (d*q*(quotient_euclide a b H)).\n  rewrite <- mult_assoc;rewrite <- mult_plus_distr_l.\n  exists (q*(quotient_euclide a b H)+q');trivial.\n  rewrite <- H6;trivial.\n  intros.\n  apply H3.\n  split;try tauto.\n  elim H6;intros.\n  elim H7;intro q;intro.\n  elim H8;intro q';intro.\n  assert ((remainder_euclide a b H)=b*(quotient_euclide a b H)+(remainder_euclide a b H)-b*(quotient_euclide a b H)).\n  rewrite minus_plus;trivial.\n  rewrite H9 in H11.\n  exists (q-q'*(quotient_euclide a b H)).\n  rewrite mult_minus_lemma2;rewrite mult_assoc.\n  rewrite <- H10;trivial.\nQed.\n\n(** we give a \"more efficient\" algorithm to compute gcd(a,b) *)\nLemma gcd_exists_prod_bis : forall (x:nat*nat),{d:nat | (is_gcd d (fst x) (snd x))}.\n  apply (induction_ltof2 (nat*nat) f (fun x:nat*nat => {d:nat | (is_gcd d (fst x) (snd x))})).\n  unfold ltof;unfold f;intros.\n  case (lt_eq_lt_dec (fst x) (snd x));intro.\n  case s;intro.\n  case (eq_nat_dec (fst x) 0);intro.\n  rewrite e;exists (snd x);apply gcd_zero.\n  elim (H ((fst x),(remainder_euclide (snd x) (fst x) n)));simpl.\n  intro d;intro.\n  exists d.\n  apply gcd_sym.\n  elim (gcd_euclide d (snd x) (fst x) n);auto.\n  generalize (rem_euclide (snd x) (fst x) n);try omega.\n  rewrite e;exists (snd x);apply gcd_refl.\n  case (eq_nat_dec (snd x) 0);intro.\n  rewrite e;exists (fst x);apply gcd_sym;apply gcd_zero.\n  elim (H ((snd x),(remainder_euclide (fst x) (snd x) n)));simpl.\n  intro d;intro.\n  exists d.\n  elim (gcd_euclide d (fst x) (snd x) n);auto.\n  generalize (rem_euclide (fst x) (snd x) n);try omega.\nQed.\n\n(** efficient algorithm to compute gcd(a,b) *)\n",
                "context_tokens": 730,
                "proof_start_offset": 14326,
                "proof_end_offset": 14485,
                "proof": "Theorem gcd_exists_bis : forall (a b:nat),{d:nat | (is_gcd d a b)}.\nProof.\nintros.\nelim (gcd_exists_prod_bis (a,b));intro d;simpl;intros.\nexists d;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem gcd_exists_bis : forall (a b:nat),{d:nat | (is_gcd d a b)}.\n  unfold gcd; intros.\n  case (le_gt_dec a b);intro.\n  rewrite <- (gcd_antisym a b); auto.\n  rewrite <- (gcd_antisym b a); auto.\n  rewrite <- (gcd_antisym a b); auto.\n  rewrite <- (gcd_antisym a b); auto.\n  rewrite <- (gcd_antisym b a); auto.\n  rewrite <- (gcd_antisym b a); auto.\n  rewrite <- (gcd_antisym b a); auto.\n  rewrite <- (gcd_antisym b a); auto.\n  rewrite <- (gcd_antisym b a); auto.\n  rewrite <- (gcd_antisym b a); auto.\n  rewrite <- (gcd_antisym b a); auto.\n  rewrite <- (gcd_antisym b a); auto.\n  rewrite <- (gcd_antisym b a); auto.\n  rewrite <- (gcd_antisym b a); auto.\n  rewrite <- (gcd_antisym b a); auto.\n  rewrite <- (gcd_antisym b a); auto.\n  rewrite <- (gcd_antisym b a); auto.\n  rewrite <- (gcd_antisym b a); auto.\n  rewrite <- (gcd_antisym b a); auto.\n  rewrite <- (gcd_antisym b aQed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 421, characters 14-25:\nError: The reference gcd_antisym was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": "1;unfold is_cd in H1.\n  elim H1;intros.\n  elim H2;intros.\n  rewrite H0.\n  split.\n  split;try tauto.\n  elim H4;intro q;intro.\n  elim H5;intro q';intro.\n  rewrite H7.\n  replace (b*(quotient_euclide a b H)) with (d*q*(quotient_euclide a b H)).\n  rewrite <- mult_assoc;rewrite <- mult_plus_distr_l.\n  exists (q*(quotient_euclide a b H)+q');trivial.\n  rewrite <- H6;trivial.\n  intros.\n  apply H3.\n  split;try tauto.\n  elim H6;intros.\n  elim H7;intro q;intro.\n  elim H8;intro q';intro.\n  assert ((remainder_euclide a b H)=b*(quotient_euclide a b H)+(remainder_euclide a b H)-b*(quotient_euclide a b H)).\n  rewrite minus_plus;trivial.\n  rewrite H9 in H11.\n  exists (q-q'*(quotient_euclide a b H)).\n  rewrite mult_minus_lemma2;rewrite mult_assoc.\n  rewrite <- H10;trivial.\nQed.\n\n(** we give a \"more efficient\" algorithm to compute gcd(a,b) *)\nLemma gcd_exists_prod_bis : forall (x:nat*nat),{d:nat | (is_gcd d (fst x) (snd x))}.\n  apply (induction_ltof2 (nat*nat) f (fun x:nat*nat => {d:nat | (is_gcd d (fst x) (snd x))})).\n  unfold ltof;unfold f;intros.\n  case (lt_eq_lt_dec (fst x) (snd x));intro.\n  case s;intro.\n  case (eq_nat_dec (fst x) 0);intro.\n  rewrite e;exists (snd x);apply gcd_zero.\n  elim (H ((fst x),(remainder_euclide (snd x) (fst x) n)));simpl.\n  intro d;intro.\n  exists d.\n  apply gcd_sym.\n  elim (gcd_euclide d (snd x) (fst x) n);auto.\n  generalize (rem_euclide (snd x) (fst x) n);try omega.\n  rewrite e;exists (snd x);apply gcd_refl.\n  case (eq_nat_dec (snd x) 0);intro.\n  rewrite e;exists (fst x);apply gcd_sym;apply gcd_zero.\n  elim (H ((snd x),(remainder_euclide (fst x) (snd x) n)));simpl.\n  intro d;intro.\n  exists d.\n  elim (gcd_euclide d (fst x) (snd x) n);auto.\n  generalize (rem_euclide (fst x) (snd x) n);try omega.\nQed.\n\n(** efficient algorithm to compute gcd(a,b) *)\nTheorem gcd_exists_bis : forall (a b:nat),{d:nat | (is_gcd d a b)}.\n  intros.\n  elim (gcd_exists_prod_bis (a,b));intro d;simpl;intros.\n  exists d;trivial.\nQed.\n\n(** it is decidable to say if a and b are relatively prime *)\n",
                "context_tokens": 729,
                "proof_start_offset": 14549,
                "proof_end_offset": 14831,
                "proof": "Lemma rel_prime_dec : forall (a b:nat),{rel_prime a b}+{~(rel_prime a b)}.\nProof.\nintros.\nunfold rel_prime.\ngeneralize (gcd_is_gcd a b);intro.\ncase (eq_nat_dec (gcd a b) 1);intro.\nleft;rewrite e in H;trivial.\nright;intro;apply n;apply (gcd_unique (gcd a b) 1 a b);trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma rel_prime_dec : forall (a b:nat),{rel_prime a b}+{~(rel_prime a b)}.\n  intros.\n  elim (gcd_exists_prod_bis (a,b) (a,b));intro d;simpl;intros.\n  exists (d*d).\n  apply gcd_intro.\n  elim (gcd_intro (gcd_intro a b) (gcd_intro b d));auto.\n  intro d; elim (gcd_intro (gcd_intro b d));auto.\n  intro d; elim (gcd_intro (gcd_intro b d));auto.\n  intro d; elim (gcd_intro (gcd_intro b d));auto.\n  intro d; elim (gcd_intro (gcd_intro b d));auto.\n  intro d; elim (gcd_intro (gcd_intro b d));auto.\n  intro d; elim (gcd_intro (gcd_intro b d));auto.\n  intro d; elim (gcd_intro (gcd_intro b d));auto.\n  intro d; elim (gcd_intro (gcd_intro b d));auto.\n  intro d; elim (gcd_intro (gcd_intro b d));auto.\n  intro d; elim (gcd_intro (gcd_intro b d));auto.\n  intro d; elim (gcd_intro (gcdQed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 427, characters 8-39:\nError: Illegal application (Non-functional construction): \nThe expression \"gcd_exists_prod_bis (a, b)\" of type\n \"{d : nat | is_gcd d (fst (a, b)) (snd (a, b))}\"\ncannot be applied to the term\n \"(a, b)\" : \"(nat * nat)%type\"\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": "try tauto.\n  elim H6;intros.\n  elim H7;intro q;intro.\n  elim H8;intro q';intro.\n  assert ((remainder_euclide a b H)=b*(quotient_euclide a b H)+(remainder_euclide a b H)-b*(quotient_euclide a b H)).\n  rewrite minus_plus;trivial.\n  rewrite H9 in H11.\n  exists (q-q'*(quotient_euclide a b H)).\n  rewrite mult_minus_lemma2;rewrite mult_assoc.\n  rewrite <- H10;trivial.\nQed.\n\n(** we give a \"more efficient\" algorithm to compute gcd(a,b) *)\nLemma gcd_exists_prod_bis : forall (x:nat*nat),{d:nat | (is_gcd d (fst x) (snd x))}.\n  apply (induction_ltof2 (nat*nat) f (fun x:nat*nat => {d:nat | (is_gcd d (fst x) (snd x))})).\n  unfold ltof;unfold f;intros.\n  case (lt_eq_lt_dec (fst x) (snd x));intro.\n  case s;intro.\n  case (eq_nat_dec (fst x) 0);intro.\n  rewrite e;exists (snd x);apply gcd_zero.\n  elim (H ((fst x),(remainder_euclide (snd x) (fst x) n)));simpl.\n  intro d;intro.\n  exists d.\n  apply gcd_sym.\n  elim (gcd_euclide d (snd x) (fst x) n);auto.\n  generalize (rem_euclide (snd x) (fst x) n);try omega.\n  rewrite e;exists (snd x);apply gcd_refl.\n  case (eq_nat_dec (snd x) 0);intro.\n  rewrite e;exists (fst x);apply gcd_sym;apply gcd_zero.\n  elim (H ((snd x),(remainder_euclide (fst x) (snd x) n)));simpl.\n  intro d;intro.\n  exists d.\n  elim (gcd_euclide d (fst x) (snd x) n);auto.\n  generalize (rem_euclide (fst x) (snd x) n);try omega.\nQed.\n\n(** efficient algorithm to compute gcd(a,b) *)\nTheorem gcd_exists_bis : forall (a b:nat),{d:nat | (is_gcd d a b)}.\n  intros.\n  elim (gcd_exists_prod_bis (a,b));intro d;simpl;intros.\n  exists d;trivial.\nQed.\n\n(** it is decidable to say if a and b are relatively prime *)\nLemma rel_prime_dec : forall (a b:nat),{rel_prime a b}+{~(rel_prime a b)}.\n  intros.\n  unfold rel_prime.\n  generalize (gcd_is_gcd a b);intro.\n  case (eq_nat_dec (gcd a b) 1);intro.\n  left;rewrite e in H;trivial.\n  right;intro;apply n;apply (gcd_unique (gcd a b) 1 a b);trivial.\nQed.\n\n(** if gcd(a,b)=1 and gcd(a,c)=1 then gcd(a,b*c)=1 *)\n",
                "context_tokens": 721,
                "proof_start_offset": 14887,
                "proof_end_offset": 15621,
                "proof": "Lemma rel_prime_mult : forall (a b c:nat),(rel_prime a b)->(rel_prime a c)->(rel_prime a (b*c)).\nProof.\nintros.\nsplit.\nsplit;try (apply one_min_div).\nintros.\nelim H1;intros.\ncase (rel_prime_dec b d');intro.\nassert (divides c d').\napply gauss with b;trivial.\nelim H0;intros.\napply H6;unfold is_cd;tauto.\ngeneralize (gcd_is_gcd b d');intro.\nassert ((gcd b d')<>1).\nintro;apply n.\nunfold rel_prime;rewrite <- H5;trivial.\ngeneralize (gcd_div_l (gcd b d') b d' H4);intro.\ngeneralize (gcd_div_r (gcd b d') b d' H4);intro.\nassert (divides a (gcd b d')).\napply divides_trans with d';[apply H2 | apply H7].\nelim H5.\napply divides_antisym.\napply one_min_div.\nelim H;intros;apply H10;unfold is_cd;tauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma rel_prime_mult : forall (a b c:nat),(rel_prime a b)->(rel_prime a c)->(rel_prime a (b*c)).\n  intros.\n  elim (gcd_is_gcd a b);intro.\n  left;rewrite e in H;trivial.\n  right;intro;apply n;apply (gcd_intro (gcd a b) 1 a);trivial.\n  right;intro;apply n;apply (gcd_intro (gcd a b) 1 a);trivial.\n  right;intro;apply n;apply (gcd_intro (gcd a b) 1 a);trivial.\n  right;intro;apply n;apply (gcd_intro (gcd a b) 1 a);trivial.\n  right;intro;apply n;apply (gcd_intro (gcd a b) 1 a);trivial.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 438, characters 2-6:\nError: Not an inductive goal with 2 constructors.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": "remainder_euclide (snd x) (fst x) n)));simpl.\n  intro d;intro.\n  exists d.\n  apply gcd_sym.\n  elim (gcd_euclide d (snd x) (fst x) n);auto.\n  generalize (rem_euclide (snd x) (fst x) n);try omega.\n  rewrite e;exists (snd x);apply gcd_refl.\n  case (eq_nat_dec (snd x) 0);intro.\n  rewrite e;exists (fst x);apply gcd_sym;apply gcd_zero.\n  elim (H ((snd x),(remainder_euclide (fst x) (snd x) n)));simpl.\n  intro d;intro.\n  exists d.\n  elim (gcd_euclide d (fst x) (snd x) n);auto.\n  generalize (rem_euclide (fst x) (snd x) n);try omega.\nQed.\n\n(** efficient algorithm to compute gcd(a,b) *)\nTheorem gcd_exists_bis : forall (a b:nat),{d:nat | (is_gcd d a b)}.\n  intros.\n  elim (gcd_exists_prod_bis (a,b));intro d;simpl;intros.\n  exists d;trivial.\nQed.\n\n(** it is decidable to say if a and b are relatively prime *)\nLemma rel_prime_dec : forall (a b:nat),{rel_prime a b}+{~(rel_prime a b)}.\n  intros.\n  unfold rel_prime.\n  generalize (gcd_is_gcd a b);intro.\n  case (eq_nat_dec (gcd a b) 1);intro.\n  left;rewrite e in H;trivial.\n  right;intro;apply n;apply (gcd_unique (gcd a b) 1 a b);trivial.\nQed.\n\n(** if gcd(a,b)=1 and gcd(a,c)=1 then gcd(a,b*c)=1 *)\nLemma rel_prime_mult : forall (a b c:nat),(rel_prime a b)->(rel_prime a c)->(rel_prime a (b*c)).\n  intros.\n  split.\n  split;try (apply one_min_div).\n  intros.\n  elim H1;intros.\n  case (rel_prime_dec b d');intro.\n  assert (divides c d').\n  apply gauss with b;trivial.\n  elim H0;intros.\n  apply H6;unfold is_cd;tauto.\n  generalize (gcd_is_gcd b d');intro.\n  assert ((gcd b d')<>1).\n  intro;apply n.\n  unfold rel_prime;rewrite <- H5;trivial.\n  generalize (gcd_div_l (gcd b d') b d' H4);intro.\n  generalize (gcd_div_r (gcd b d') b d' H4);intro.\n  assert (divides a (gcd b d')).\n  apply divides_trans with d';[apply H2 | apply H7].\n  elim H5.\n  apply divides_antisym.\n  apply one_min_div.\n  elim H;intros;apply H10;unfold is_cd;tauto.\nQed.\n\n(** if gcd(a,b*c)=1 then gcd(a,b)=1 and gcd(a,c)=1 *)\n",
                "context_tokens": 718,
                "proof_start_offset": 15677,
                "proof_end_offset": 15983,
                "proof": "Lemma mult_rel_prime : forall (a b c:nat),(rel_prime a (b*c))->((rel_prime a b)/\\(rel_prime a c)).\nProof.\nintros.\nsplit;split;[split | intros | split | intros];try (apply one_min_div);elim H0;intros;elim H;intros;apply H4;split;trivial;elim H2;intro q;intro;rewrite H5;[exists (q*c) | exists (q*b)];ring.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma mult_rel_prime : forall (a b c:nat),(rel_prime a (b*c))->((rel_prime a b)/\\(rel_prime a c)).\nProof.\n  intros.\n  elim (gcd_is_gcd a b); intros.\n  elim H1;intros.\n  apply H1;unfold is_c; tauto.\n  apply H1;unfold is_c; tauto.\n  apply H2;unfold is_c; tauto.\n  apply H1;unfold is_c; tauto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 465, characters 2-9:\nError: Unable to find an instance for the variable d'.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": "),(remainder_euclide (fst x) (snd x) n)));simpl.\n  intro d;intro.\n  exists d.\n  elim (gcd_euclide d (fst x) (snd x) n);auto.\n  generalize (rem_euclide (fst x) (snd x) n);try omega.\nQed.\n\n(** efficient algorithm to compute gcd(a,b) *)\nTheorem gcd_exists_bis : forall (a b:nat),{d:nat | (is_gcd d a b)}.\n  intros.\n  elim (gcd_exists_prod_bis (a,b));intro d;simpl;intros.\n  exists d;trivial.\nQed.\n\n(** it is decidable to say if a and b are relatively prime *)\nLemma rel_prime_dec : forall (a b:nat),{rel_prime a b}+{~(rel_prime a b)}.\n  intros.\n  unfold rel_prime.\n  generalize (gcd_is_gcd a b);intro.\n  case (eq_nat_dec (gcd a b) 1);intro.\n  left;rewrite e in H;trivial.\n  right;intro;apply n;apply (gcd_unique (gcd a b) 1 a b);trivial.\nQed.\n\n(** if gcd(a,b)=1 and gcd(a,c)=1 then gcd(a,b*c)=1 *)\nLemma rel_prime_mult : forall (a b c:nat),(rel_prime a b)->(rel_prime a c)->(rel_prime a (b*c)).\n  intros.\n  split.\n  split;try (apply one_min_div).\n  intros.\n  elim H1;intros.\n  case (rel_prime_dec b d');intro.\n  assert (divides c d').\n  apply gauss with b;trivial.\n  elim H0;intros.\n  apply H6;unfold is_cd;tauto.\n  generalize (gcd_is_gcd b d');intro.\n  assert ((gcd b d')<>1).\n  intro;apply n.\n  unfold rel_prime;rewrite <- H5;trivial.\n  generalize (gcd_div_l (gcd b d') b d' H4);intro.\n  generalize (gcd_div_r (gcd b d') b d' H4);intro.\n  assert (divides a (gcd b d')).\n  apply divides_trans with d';[apply H2 | apply H7].\n  elim H5.\n  apply divides_antisym.\n  apply one_min_div.\n  elim H;intros;apply H10;unfold is_cd;tauto.\nQed.\n\n(** if gcd(a,b*c)=1 then gcd(a,b)=1 and gcd(a,c)=1 *)\nLemma mult_rel_prime : forall (a b c:nat),(rel_prime a (b*c))->((rel_prime a b)/\\(rel_prime a c)).\n  intros.\n  split;split;[split | intros | split | intros];try (apply one_min_div);elim H0;intros;elim H;intros;apply H4;split;trivial;elim H2;intro q;intro;rewrite H5;[exists (q*c) | exists (q*b)];ring.\nQed.\n\n(** if gcd(a,d)=1 then gcd(a,d^n)=1 *)\n",
                "context_tokens": 727,
                "proof_start_offset": 16024,
                "proof_end_offset": 16251,
                "proof": "Lemma rel_prime_power : forall (d a n:nat),(rel_prime a d)->(rel_prime a (power d n)).\nProof.\ninduction n;simpl;intros.\nunfold rel_prime;apply gcd_sym;apply gcd_one.\ngeneralize (IHn H);intro.\napply rel_prime_mult;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma rel_prime_power : forall (d a n:nat),(rel_prime a d)->(rel_prime a (power d n)).\n  intros.\n  destruct (rel_prime_dec a d) as [H|H].\n  split;try (apply mod_prime_dec;apply H;intros;apply H;split;trivial;fail).\n  apply mod_prime_dec;apply H;intros;apply H;split;trivial;fail).\n  apply mod_prime_dec;apply H;intros;apply H;split;trivial;fail.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 469, characters 35-36:\nError: H is already used.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": "_gcd d a b)}.\n  intros.\n  elim (gcd_exists_prod_bis (a,b));intro d;simpl;intros.\n  exists d;trivial.\nQed.\n\n(** it is decidable to say if a and b are relatively prime *)\nLemma rel_prime_dec : forall (a b:nat),{rel_prime a b}+{~(rel_prime a b)}.\n  intros.\n  unfold rel_prime.\n  generalize (gcd_is_gcd a b);intro.\n  case (eq_nat_dec (gcd a b) 1);intro.\n  left;rewrite e in H;trivial.\n  right;intro;apply n;apply (gcd_unique (gcd a b) 1 a b);trivial.\nQed.\n\n(** if gcd(a,b)=1 and gcd(a,c)=1 then gcd(a,b*c)=1 *)\nLemma rel_prime_mult : forall (a b c:nat),(rel_prime a b)->(rel_prime a c)->(rel_prime a (b*c)).\n  intros.\n  split.\n  split;try (apply one_min_div).\n  intros.\n  elim H1;intros.\n  case (rel_prime_dec b d');intro.\n  assert (divides c d').\n  apply gauss with b;trivial.\n  elim H0;intros.\n  apply H6;unfold is_cd;tauto.\n  generalize (gcd_is_gcd b d');intro.\n  assert ((gcd b d')<>1).\n  intro;apply n.\n  unfold rel_prime;rewrite <- H5;trivial.\n  generalize (gcd_div_l (gcd b d') b d' H4);intro.\n  generalize (gcd_div_r (gcd b d') b d' H4);intro.\n  assert (divides a (gcd b d')).\n  apply divides_trans with d';[apply H2 | apply H7].\n  elim H5.\n  apply divides_antisym.\n  apply one_min_div.\n  elim H;intros;apply H10;unfold is_cd;tauto.\nQed.\n\n(** if gcd(a,b*c)=1 then gcd(a,b)=1 and gcd(a,c)=1 *)\nLemma mult_rel_prime : forall (a b c:nat),(rel_prime a (b*c))->((rel_prime a b)/\\(rel_prime a c)).\n  intros.\n  split;split;[split | intros | split | intros];try (apply one_min_div);elim H0;intros;elim H;intros;apply H4;split;trivial;elim H2;intro q;intro;rewrite H5;[exists (q*c) | exists (q*b)];ring.\nQed.\n\n(** if gcd(a,d)=1 then gcd(a,d^n)=1 *)\nLemma rel_prime_power : forall (d a n:nat),(rel_prime a d)->(rel_prime a (power d n)).\n  induction n;simpl;intros.\n  unfold rel_prime;apply gcd_sym;apply gcd_one.\n  generalize (IHn H);intro.\n  apply rel_prime_mult;trivial.\nQed.\n\n(** if n>0 and gcd(a,d^n)=1 then gcd(a,d)=1 *)\n",
                "context_tokens": 723,
                "proof_start_offset": 16300,
                "proof_end_offset": 16486,
                "proof": "Lemma power_rel_prime : forall (d a n:nat),(n>0)->(rel_prime a (power d n))->(rel_prime a d).\nProof.\ndestruct n;simpl;intros.\ninversion H.\nelim (mult_rel_prime a d (power d n));auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma power_rel_prime : forall (d a n:nat),(n>0)->(rel_prime a (power d n))->(rel_prime a d).\n  intros.\n  unfold rel_prime.\n  generalize (rel_prime_factor a d);intro.\n  case (lt_gt_dec n m);intro.\n  left;rewrite e in H;trivial.\n  right;intro;apply n;apply (rel_prime_mult_pos a d n);trivial.\n  right;intro;apply n;apply (rel_prime_mult_pos a d n);trivial.\n  right;intro;apply n;apply (rel_prime_mult_pos a d n);trivial.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 478, characters 14-30:\nError: The reference rel_prime_factor was not found in the current\nenvironment.\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/gcd.v",
                "context": "_dec (gcd a b) 1);intro.\n  left;rewrite e in H;trivial.\n  right;intro;apply n;apply (gcd_unique (gcd a b) 1 a b);trivial.\nQed.\n\n(** if gcd(a,b)=1 and gcd(a,c)=1 then gcd(a,b*c)=1 *)\nLemma rel_prime_mult : forall (a b c:nat),(rel_prime a b)->(rel_prime a c)->(rel_prime a (b*c)).\n  intros.\n  split.\n  split;try (apply one_min_div).\n  intros.\n  elim H1;intros.\n  case (rel_prime_dec b d');intro.\n  assert (divides c d').\n  apply gauss with b;trivial.\n  elim H0;intros.\n  apply H6;unfold is_cd;tauto.\n  generalize (gcd_is_gcd b d');intro.\n  assert ((gcd b d')<>1).\n  intro;apply n.\n  unfold rel_prime;rewrite <- H5;trivial.\n  generalize (gcd_div_l (gcd b d') b d' H4);intro.\n  generalize (gcd_div_r (gcd b d') b d' H4);intro.\n  assert (divides a (gcd b d')).\n  apply divides_trans with d';[apply H2 | apply H7].\n  elim H5.\n  apply divides_antisym.\n  apply one_min_div.\n  elim H;intros;apply H10;unfold is_cd;tauto.\nQed.\n\n(** if gcd(a,b*c)=1 then gcd(a,b)=1 and gcd(a,c)=1 *)\nLemma mult_rel_prime : forall (a b c:nat),(rel_prime a (b*c))->((rel_prime a b)/\\(rel_prime a c)).\n  intros.\n  split;split;[split | intros | split | intros];try (apply one_min_div);elim H0;intros;elim H;intros;apply H4;split;trivial;elim H2;intro q;intro;rewrite H5;[exists (q*c) | exists (q*b)];ring.\nQed.\n\n(** if gcd(a,d)=1 then gcd(a,d^n)=1 *)\nLemma rel_prime_power : forall (d a n:nat),(rel_prime a d)->(rel_prime a (power d n)).\n  induction n;simpl;intros.\n  unfold rel_prime;apply gcd_sym;apply gcd_one.\n  generalize (IHn H);intro.\n  apply rel_prime_mult;trivial.\nQed.\n\n(** if n>0 and gcd(a,d^n)=1 then gcd(a,d)=1 *)\nLemma power_rel_prime : forall (d a n:nat),(n>0)->(rel_prime a (power d n))->(rel_prime a d).\n  destruct n;simpl;intros.\n  inversion H.\n  elim (mult_rel_prime a d (power d n));auto.\nQed.\n\n(** if n>0 and m>0 then gcd(a^n,b^m)=1 iff gcd(a,b)=1 *)\n",
                "context_tokens": 709,
                "proof_start_offset": 16545,
                "proof_end_offset": 16906,
                "proof": "Lemma power_power_rel_prime : forall (a n b m:nat),(n>0)->(m>0)->((rel_prime (power a n) (power b m))<->(rel_prime a b)).\nProof.\nsplit;intro.\napply power_rel_prime with m;trivial;apply rel_prime_sym;apply power_rel_prime with n;trivial;apply rel_prime_sym;trivial.\napply rel_prime_power;apply rel_prime_sym;apply rel_prime_power;apply rel_prime_sym;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma power_power_rel_prime : forall (a n b m:nat),(n>0)->(m>0)->((rel_prime (power a n) (power b m))<->(rel_prime a b)).\n  destruct n;simpl;intros.\n  inversion H.\n  inversion H.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.\n  inversion H0.Qed.",
                        "correct": false,
                        "error_msg": "File \"./gcd.v\", line 25, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./gcd.v\", line 533, characters 14-18:\nError:\nSyntax error: [tactic:ltac_use_default] expected after [tactic:tactic] (in [vernac:tactic_command]).\n\nmake[2]: *** [Makefile.coq:663: gcd.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/power.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\n\nUnset Standard Proposition Elimination Names.\n\n(** definition of square *)\nDefinition square (x:nat) := x*x.\n\n(** (x*y)^2 = x^2*y^2 *)\n",
                "context_tokens": 275,
                "proof_start_offset": 1044,
                "proof_end_offset": 1166,
                "proof": "Lemma square_mult_lemma : forall (a b:nat),(square (a*b))=((square a)*(square b)).\nProof.\nunfold square.\nintros.\nring.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma square_mult_lemma : forall (a b:nat),(square (a*b))=((square a)*(square b)).\nProof.\n intros a b.\n rewrite (mult_comm a b).\n rewrite (mult_comm a b).\n rewrite (mult_comm b b).\n rewrite (mult_comm b b).\n rewrite (mult_comm b b).\n rewrite (mult_comm b b).\n rewrite (mult_comm b b).\n rewrite (mult_comm b b).\n rewrite (mult_comm b b).\n rewrite (mult_comm b b).\n rewrite (mult_comm b b).\n rewrite (mult_comm b b).\n rewrite (mult_comm b b).\n rewrite (mult_comm b b).\n rewrite (mult_comm b b).\n rewrite (mult_comm b b).\n rewrite (mult_comm b b).\n rewrite (mult_comm b b).\n rewrite (mult_comm b b).\n rewrite (mult_comm b b).\n rewrite (mult_comm b b).\n rewrite (mult_comm b b).\n rewrite (mult_comm b b).\n rewrite (mult_comm b b).\n rewrite (mult_comm b b).\n rewrite (mult_comm b b).\n rewrite (mult_comm b b).\n rewrite (mult_Qed.",
                        "correct": false,
                        "error_msg": "File \"./power.v\", line 22, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./power.v\", line 32, characters 1-24:\nError: Found no subterm matching \"a * b\" in the current goal.\n\nmake[2]: *** [Makefile.coq:663: power.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/power.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\n\nUnset Standard Proposition Elimination Names.\n\n(** definition of square *)\nDefinition square (x:nat) := x*x.\n\n(** (x*y)^2 = x^2*y^2 *)\nLemma square_mult_lemma : forall (a b:nat),(square (a*b))=((square a)*(square b)).\n  unfold square.\n  intros.\n  ring.\nQed.\n\n(** we now generalize the theorem to the nth-root *)\nFixpoint power (x n:nat) {struct n} : nat :=\n  match n with\n    O => 1\n    | (S n) => (x*(power x n))\n  end.\n\n",
                "context_tokens": 371,
                "proof_start_offset": 1331,
                "proof_end_offset": 1483,
                "proof": "Lemma power_mult_lemma1 : forall (n x y:nat),(power (x*y) n)=(power x n)*(power y n).\nProof.\ninduction n;simpl;trivial.\nintros;rewrite (IHn x y);ring.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma power_mult_lemma1 : forall (n x y:nat),(power (x*y) n)=(power x n)*(power y n).\n  intros.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n  rewrite mult_comm.\n Qed.",
                        "correct": false,
                        "error_msg": "File \"./power.v\", line 22, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./power.v\", line 85, characters 1-5:\nError: Attempt to save an incomplete proof (in proof power_mult_lemma1)\n\nmake[2]: *** [Makefile.coq:663: power.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/power.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\n\nUnset Standard Proposition Elimination Names.\n\n(** definition of square *)\nDefinition square (x:nat) := x*x.\n\n(** (x*y)^2 = x^2*y^2 *)\nLemma square_mult_lemma : forall (a b:nat),(square (a*b))=((square a)*(square b)).\n  unfold square.\n  intros.\n  ring.\nQed.\n\n(** we now generalize the theorem to the nth-root *)\nFixpoint power (x n:nat) {struct n} : nat :=\n  match n with\n    O => 1\n    | (S n) => (x*(power x n))\n  end.\n\nLemma power_mult_lemma1 : forall (n x y:nat),(power (x*y) n)=(power x n)*(power y n).\n  induction n;simpl;trivial.\n  intros;rewrite (IHn x y);ring.\nQed.\n\n",
                "context_tokens": 427,
                "proof_start_offset": 1485,
                "proof_end_offset": 1642,
                "proof": "Lemma power_plus_lemma1 : forall (n m x:nat),(power x (n+m))=(power x n)*(power x m).\nProof.\ninduction n;simpl;intros.\nauto with arith.\nrewrite IHn;ring.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma power_plus_lemma1 : forall (n m x:nat),(power x (n+m))=(power x n)*(power x m).\n  induction n;simpl;trivial.\n  intros;rewrite (IHn x y);ring.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./power.v\", line 22, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./power.v\", line 48, characters 24-25:\nError: The reference y was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: power.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/power.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\n\nUnset Standard Proposition Elimination Names.\n\n(** definition of square *)\nDefinition square (x:nat) := x*x.\n\n(** (x*y)^2 = x^2*y^2 *)\nLemma square_mult_lemma : forall (a b:nat),(square (a*b))=((square a)*(square b)).\n  unfold square.\n  intros.\n  ring.\nQed.\n\n(** we now generalize the theorem to the nth-root *)\nFixpoint power (x n:nat) {struct n} : nat :=\n  match n with\n    O => 1\n    | (S n) => (x*(power x n))\n  end.\n\nLemma power_mult_lemma1 : forall (n x y:nat),(power (x*y) n)=(power x n)*(power y n).\n  induction n;simpl;trivial.\n  intros;rewrite (IHn x y);ring.\nQed.\n\nLemma power_plus_lemma1 : forall (n m x:nat),(power x (n+m))=(power x n)*(power x m).\n  induction n;simpl;intros.\n  auto with arith.\n  rewrite IHn;ring.\nQed.\n\n",
                "context_tokens": 483,
                "proof_start_offset": 1644,
                "proof_end_offset": 1799,
                "proof": "Lemma power_divides_lemma1 : forall (n x:nat),(0<n)->(divides (power x n) x).\nProof.\ninduction n;simpl;intros.\ninversion H.\nexists (power x n);trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma power_divides_lemma1 : forall (n x:nat),(0<n)->(divides (power x n) x).\n  intros.\n  apply (mult_comm (power x n) (x*x)).\n  apply (mult_comm (power x n) (x*x)).\n  apply (mult_comm (power x n) (x*x)).\n  apply (mult_comm (power x n) (x*x)).\n  apply (mult_comm (power x n) (x*x)).\n  apply (mult_comm (power x n) (x*x)).\n  apply (mult_comm (power x n) (x*x)).\n  apply (mult_comm (power x n) (x*x)).\n  apply (mult_comm (power x n) (x*x)).\n  apply (mult_comm (power x n) (x*x)).\n  apply (mult_comm (power x n) (x*x)).\n  apply (mult_comm (power x n) (x*x)).\n  apply (mult_comm (power x n) (x*x)).\n  apply (mult_comm (power x n) (x*x)).\n  apply (mult_comm (power x n) (x*x)).\n  apply (mult_comm (power x n) (xQed.",
                        "correct": false,
                        "error_msg": "File \"./power.v\", line 22, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./power.v\", line 54, characters 9-36:\nError: In environment\nn, x : nat\nH : 0 < n\nUnable to unify \"power x n * (x * x) = x * x * power x n\" with\n \"divides (power x n) x\".\n\nmake[2]: *** [Makefile.coq:663: power.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/power.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\n\nUnset Standard Proposition Elimination Names.\n\n(** definition of square *)\nDefinition square (x:nat) := x*x.\n\n(** (x*y)^2 = x^2*y^2 *)\nLemma square_mult_lemma : forall (a b:nat),(square (a*b))=((square a)*(square b)).\n  unfold square.\n  intros.\n  ring.\nQed.\n\n(** we now generalize the theorem to the nth-root *)\nFixpoint power (x n:nat) {struct n} : nat :=\n  match n with\n    O => 1\n    | (S n) => (x*(power x n))\n  end.\n\nLemma power_mult_lemma1 : forall (n x y:nat),(power (x*y) n)=(power x n)*(power y n).\n  induction n;simpl;trivial.\n  intros;rewrite (IHn x y);ring.\nQed.\n\nLemma power_plus_lemma1 : forall (n m x:nat),(power x (n+m))=(power x n)*(power x m).\n  induction n;simpl;intros.\n  auto with arith.\n  rewrite IHn;ring.\nQed.\n\nLemma power_divides_lemma1 : forall (n x:nat),(0<n)->(divides (power x n) x).\n  induction n;simpl;intros.\n  inversion H.\n  exists (power x n);trivial.\nQed.\n\n",
                "context_tokens": 536,
                "proof_start_offset": 1801,
                "proof_end_offset": 2053,
                "proof": "Lemma power_power_lemma1 : forall (n m x:nat),(power (power x n) m)=(power x (n*m)).\nProof.\ninduction n;simpl;intros.\ninduction m;simpl;auto with arith.\nrewrite IHm;ring.\nrewrite power_mult_lemma1;rewrite IHn;rewrite <- power_plus_lemma1;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma power_power_lemma1 : forall (n m x:nat),(power (power x n) m)=(power x (n*m)).\n  induction n;simpl;intros.\n  inversion H.\n  exists (power x n);trivial.\n  inversion H.\n  exists (power x n);trivial.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./power.v\", line 22, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./power.v\", line 60, characters 2-13:\nError: No such hypothesis: H\n\nmake[2]: *** [Makefile.coq:663: power.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/power.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\n\nUnset Standard Proposition Elimination Names.\n\n(** definition of square *)\nDefinition square (x:nat) := x*x.\n\n(** (x*y)^2 = x^2*y^2 *)\nLemma square_mult_lemma : forall (a b:nat),(square (a*b))=((square a)*(square b)).\n  unfold square.\n  intros.\n  ring.\nQed.\n\n(** we now generalize the theorem to the nth-root *)\nFixpoint power (x n:nat) {struct n} : nat :=\n  match n with\n    O => 1\n    | (S n) => (x*(power x n))\n  end.\n\nLemma power_mult_lemma1 : forall (n x y:nat),(power (x*y) n)=(power x n)*(power y n).\n  induction n;simpl;trivial.\n  intros;rewrite (IHn x y);ring.\nQed.\n\nLemma power_plus_lemma1 : forall (n m x:nat),(power x (n+m))=(power x n)*(power x m).\n  induction n;simpl;intros.\n  auto with arith.\n  rewrite IHn;ring.\nQed.\n\nLemma power_divides_lemma1 : forall (n x:nat),(0<n)->(divides (power x n) x).\n  induction n;simpl;intros.\n  inversion H.\n  exists (power x n);trivial.\nQed.\n\nLemma power_power_lemma1 : forall (n m x:nat),(power (power x n) m)=(power x (n*m)).\n  induction n;simpl;intros.\n  induction m;simpl;auto with arith.\n  rewrite IHm;ring.\n  rewrite power_mult_lemma1;rewrite IHn;rewrite <- power_plus_lemma1;trivial.\nQed.\n\n",
                "context_tokens": 619,
                "proof_start_offset": 2055,
                "proof_end_offset": 2202,
                "proof": "Lemma power_zero : forall (n x:nat),(power x n)=O->x=O.\nProof.\ninduction n;simpl;intros.\ndiscriminate.\ncase (mult_lemma2 x (power x n) H);auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma power_zero : forall (n x:nat),(power x n)=O->x=O.\nProof.\n  induction n;simpl;intros.\n  inversion H.\n  exists (power x n);trivial.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./power.v\", line 22, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./power.v\", line 69, characters 2-20:\nError:\nLtac call to \"exists (ne_bindings_list)\" failed.\nNot the right number of missing arguments (expected 0).\n\nmake[2]: *** [Makefile.coq:663: power.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/power.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\n\nUnset Standard Proposition Elimination Names.\n\n(** definition of square *)\nDefinition square (x:nat) := x*x.\n\n(** (x*y)^2 = x^2*y^2 *)\nLemma square_mult_lemma : forall (a b:nat),(square (a*b))=((square a)*(square b)).\n  unfold square.\n  intros.\n  ring.\nQed.\n\n(** we now generalize the theorem to the nth-root *)\nFixpoint power (x n:nat) {struct n} : nat :=\n  match n with\n    O => 1\n    | (S n) => (x*(power x n))\n  end.\n\nLemma power_mult_lemma1 : forall (n x y:nat),(power (x*y) n)=(power x n)*(power y n).\n  induction n;simpl;trivial.\n  intros;rewrite (IHn x y);ring.\nQed.\n\nLemma power_plus_lemma1 : forall (n m x:nat),(power x (n+m))=(power x n)*(power x m).\n  induction n;simpl;intros.\n  auto with arith.\n  rewrite IHn;ring.\nQed.\n\nLemma power_divides_lemma1 : forall (n x:nat),(0<n)->(divides (power x n) x).\n  induction n;simpl;intros.\n  inversion H.\n  exists (power x n);trivial.\nQed.\n\nLemma power_power_lemma1 : forall (n m x:nat),(power (power x n) m)=(power x (n*m)).\n  induction n;simpl;intros.\n  induction m;simpl;auto with arith.\n  rewrite IHm;ring.\n  rewrite power_mult_lemma1;rewrite IHn;rewrite <- power_plus_lemma1;trivial.\nQed.\n\nLemma power_zero : forall (n x:nat),(power x n)=O->x=O.\n  induction n;simpl;intros.\n  discriminate.\n  case (mult_lemma2 x (power x n) H);auto.\nQed.\n\n(** if 1<p and 0<m then p^m>1 *)\n",
                "context_tokens": 692,
                "proof_start_offset": 2237,
                "proof_end_offset": 2543,
                "proof": "Lemma power_lt : forall (p m:nat),(1<p)->(0<m)->1<(power p m).\nProof.\ninduction m;simpl;try omega;intros.\ndestruct m;simpl;try omega.\nsimpl in IHm.\nassert (1 < p*(power p m)).\napply IHm;auto with arith.\nrewrite mult_comm.\napply lt_trans with (1*p);try omega.\napply mult_lt_compat_r;try omega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma power_lt : forall (p m:nat),(1<p)->(0<m)->1<(power p m).\n  induction p;simpl;intros.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.Qed.",
                        "correct": false,
                        "error_msg": "File \"./power.v\", line 22, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./power.v\", line 135, characters 13-17:\nError:\nSyntax error: [tactic:ltac_use_default] expected after [tactic:tactic] (in [vernac:tactic_command]).\n\nmake[2]: *** [Makefile.coq:663: power.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/power.v",
                "context": "\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\n\nUnset Standard Proposition Elimination Names.\n\n(** definition of square *)\nDefinition square (x:nat) := x*x.\n\n(** (x*y)^2 = x^2*y^2 *)\nLemma square_mult_lemma : forall (a b:nat),(square (a*b))=((square a)*(square b)).\n  unfold square.\n  intros.\n  ring.\nQed.\n\n(** we now generalize the theorem to the nth-root *)\nFixpoint power (x n:nat) {struct n} : nat :=\n  match n with\n    O => 1\n    | (S n) => (x*(power x n))\n  end.\n\nLemma power_mult_lemma1 : forall (n x y:nat),(power (x*y) n)=(power x n)*(power y n).\n  induction n;simpl;trivial.\n  intros;rewrite (IHn x y);ring.\nQed.\n\nLemma power_plus_lemma1 : forall (n m x:nat),(power x (n+m))=(power x n)*(power x m).\n  induction n;simpl;intros.\n  auto with arith.\n  rewrite IHn;ring.\nQed.\n\nLemma power_divides_lemma1 : forall (n x:nat),(0<n)->(divides (power x n) x).\n  induction n;simpl;intros.\n  inversion H.\n  exists (power x n);trivial.\nQed.\n\nLemma power_power_lemma1 : forall (n m x:nat),(power (power x n) m)=(power x (n*m)).\n  induction n;simpl;intros.\n  induction m;simpl;auto with arith.\n  rewrite IHm;ring.\n  rewrite power_mult_lemma1;rewrite IHn;rewrite <- power_plus_lemma1;trivial.\nQed.\n\nLemma power_zero : forall (n x:nat),(power x n)=O->x=O.\n  induction n;simpl;intros.\n  discriminate.\n  case (mult_lemma2 x (power x n) H);auto.\nQed.\n\n(** if 1<p and 0<m then p^m>1 *)\nLemma power_lt : forall (p m:nat),(1<p)->(0<m)->1<(power p m).\n  induction m;simpl;try omega;intros.\n  destruct m;simpl;try omega.\n  simpl in IHm.\n  assert (1 < p*(power p m)).\n  apply IHm;auto with arith.\n  rewrite mult_comm.\n  apply lt_trans with (1*p);try omega.\n  apply mult_lt_compat_r;try omega.\nQed.\n\n(** 1^n = 1 *)\n",
                "context_tokens": 740,
                "proof_start_offset": 2560,
                "proof_end_offset": 2661,
                "proof": "Lemma power_one : forall (n:nat),(power 1 n)=1.\nProof.\ninduction n;simpl;trivial.\nrewrite IHn;ring.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma power_one : forall (n:nat),(power 1 n)=1.\n  induction n;simpl;intros.\n  inversion H.\n  exists 0;auto with arith.\n  destruct n;simpl;try omega.\n  destruct n;simpl;try omega.\n  destruct n;simpl;try omega.\n  destruct n;simpl;try omega.\n  destruct n;simpl;try omega.\n  destruct n;simpl;try omega.\n  destruct n;simpl;try omega.\n  destruct n;simpl;try omega.\n  destruct n;simpl;try omega.\n  destruct n;simpl;try omega.\n  destruct n;simpl;try omega.\n  destruct n;simpl;try omega.\n  destruct n;simpl;try omega.\n  destruct n;simpl;try omega.\n  destruct n;simpl;try omega.\n  destruct n;simpl;try omega.\n  destruct n;simpl;try omega.\n  destruct n;simpl;try omega.\n  destruct n;simpl;try omega.\n  destruct n;simpl;try omega.\n  destruct n;simpl;try omega.\n  destruct n;simpl;try omega.\n  destruct n;simpl;try omega.\n  destruct n;simpl;try omega.\n  destruct n;simpl;try omega.\n  destruct n;simpl;try omega.\n  destructQed.",
                        "correct": false,
                        "error_msg": "File \"./power.v\", line 22, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./power.v\", line 86, characters 2-13:\nError: No such hypothesis: H\n\nmake[2]: *** [Makefile.coq:663: power.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/power.v",
                "context": ".  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\n\nUnset Standard Proposition Elimination Names.\n\n(** definition of square *)\nDefinition square (x:nat) := x*x.\n\n(** (x*y)^2 = x^2*y^2 *)\nLemma square_mult_lemma : forall (a b:nat),(square (a*b))=((square a)*(square b)).\n  unfold square.\n  intros.\n  ring.\nQed.\n\n(** we now generalize the theorem to the nth-root *)\nFixpoint power (x n:nat) {struct n} : nat :=\n  match n with\n    O => 1\n    | (S n) => (x*(power x n))\n  end.\n\nLemma power_mult_lemma1 : forall (n x y:nat),(power (x*y) n)=(power x n)*(power y n).\n  induction n;simpl;trivial.\n  intros;rewrite (IHn x y);ring.\nQed.\n\nLemma power_plus_lemma1 : forall (n m x:nat),(power x (n+m))=(power x n)*(power x m).\n  induction n;simpl;intros.\n  auto with arith.\n  rewrite IHn;ring.\nQed.\n\nLemma power_divides_lemma1 : forall (n x:nat),(0<n)->(divides (power x n) x).\n  induction n;simpl;intros.\n  inversion H.\n  exists (power x n);trivial.\nQed.\n\nLemma power_power_lemma1 : forall (n m x:nat),(power (power x n) m)=(power x (n*m)).\n  induction n;simpl;intros.\n  induction m;simpl;auto with arith.\n  rewrite IHm;ring.\n  rewrite power_mult_lemma1;rewrite IHn;rewrite <- power_plus_lemma1;trivial.\nQed.\n\nLemma power_zero : forall (n x:nat),(power x n)=O->x=O.\n  induction n;simpl;intros.\n  discriminate.\n  case (mult_lemma2 x (power x n) H);auto.\nQed.\n\n(** if 1<p and 0<m then p^m>1 *)\nLemma power_lt : forall (p m:nat),(1<p)->(0<m)->1<(power p m).\n  induction m;simpl;try omega;intros.\n  destruct m;simpl;try omega.\n  simpl in IHm.\n  assert (1 < p*(power p m)).\n  apply IHm;auto with arith.\n  rewrite mult_comm.\n  apply lt_trans with (1*p);try omega.\n  apply mult_lt_compat_r;try omega.\nQed.\n\n(** 1^n = 1 *)\nLemma power_one : forall (n:nat),(power 1 n)=1.\n  induction n;simpl;trivial.\n  rewrite IHn;ring.\nQed.\n\n(** if x>1 and x^m | x^n then m<=n *)\n",
                "context_tokens": 723,
                "proof_start_offset": 2701,
                "proof_end_offset": 3361,
                "proof": "Lemma power_divides_power : forall (x n m:nat),(x>1)->(divides (power x n) (power x m))->(m<=n).\nProof.\nintros.\ncase (le_lt_dec m n);trivial.\nintro.\ngeneralize (le_plus_minus n m);intro.\nrewrite H1 in H0;try omega.\nelim H0;intro q;rewrite power_plus_lemma1;intro.\nassert (1=(power x (m-n))*q).\napply mult_lemma6 with (power x n).\nintro;generalize (power_zero n x H3);omega.\nrewrite mult_assoc;rewrite <- H2;ring.\nsymmetry in H3;elim (mult_lemma5 (power x (m-n)) q H3);intros.\ncase (eq_nat_dec (m-n) 0);intro;try omega.\nassert (x=1);try omega.\napply divides_antisym;[apply one_min_div | rewrite <- H4;apply power_divides_lemma1;omega].\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma power_divides_power : forall (x n m:nat),(x>1)->(divides (power x n) (power x m))->(m<=n).\n  induction n;simpl;intros.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.\n  inversion H.Qed.",
                        "correct": false,
                        "error_msg": "File \"./power.v\", line 22, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./power.v\", line 153, characters 13-17:\nError:\nSyntax error: [tactic:ltac_use_default] expected after [tactic:tactic] (in [vernac:tactic_command]).\n\nmake[2]: *** [Makefile.coq:663: power.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/division.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import Wf_nat.\n\n(** b | a if there is q such that a = b * q*)\nDefinition divides (a b:nat) := exists q:nat,a = (b*q).\n\n(** 1 divides every natural number *)\n",
                "context_tokens": 280,
                "proof_start_offset": 1048,
                "proof_end_offset": 1150,
                "proof": "Lemma one_min_div : forall (n:nat),(divides n 1).\nProof.\nintros.\nred.\nexists n.\nauto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma one_min_div : forall (n:nat),(divides n 1).\nProof.\n intros.\n apply (le_gt_dec n 1).\n apply (le_gt_dec n 1).\n apply (le_gt_dec n 1).\n apply (le_gt_dec n 1).\n apply (le_gt_dec n 1).\n apply (le_gt_dec n 1).\n apply (le_gt_dec n 1).\n apply (le_gt_dec n 1).\n apply (le_gt_dec n 1).\n apply (le_gt_dec n 1).\n apply (le_gt_dec n 1).\n apply (le_gt_dec n 1).\n apply (le_gt_dec n 1).\n apply (le_gt_dec n 1).\n apply (le_gt_dec n 1).\n apply (le_gt_dec n 1).\n apply (le_gt_dec n 1).\n apply (le_gt_dec n 1).\n apply (le_gt_dec n 1).\n apply (le_gt_dec n 1).\n apply (le_gt_dec n 1).\n apply (le_gt_dec n 1).\n apply (le_gt_decQed.",
                        "correct": false,
                        "error_msg": "File \"./division.v\", line 29, characters 8-21:\nError: In environment\nn : nat\nUnable to unify \"{n <= 1} + {n > 1}\" with \"divides n 1\".\n\nmake[2]: *** [Makefile.coq:663: division.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/division.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import Wf_nat.\n\n(** b | a if there is q such that a = b * q*)\nDefinition divides (a b:nat) := exists q:nat,a = (b*q).\n\n(** 1 divides every natural number *)\nLemma one_min_div : forall (n:nat),(divides n 1).\n  intros.\n  red.\n  exists n.\n  auto with arith.\nQed.\n\n(** 0 is divides by every natural number *)\n",
                "context_tokens": 327,
                "proof_start_offset": 1196,
                "proof_end_offset": 1299,
                "proof": "Lemma zero_max_div : forall (n:nat),(divides O n).\nProof.\nintros.\nred.\nexists O.\nauto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma zero_max_div : forall (n:nat),(divides O n).\n  intros.\n  elim (le_gt_dec n 1).\n  auto with arith.\n  intro.\n  elim (le_gt_dec n 1).\n  auto with arith.\n  intro.\n  elim (le_gt_dec n 1).\n  auto with arith.\n  intro.\n  elim (le_gt_dec n 1).\n  auto with arith.\n  intro.\n  elim (le_gt_dec n 1).\n  auto with arith.\n  intro.\n  elim (le_gt_dec n 1).\n  auto with arith.\n  intro.\n  elim (le_gt_dec n 1).\n  auto with arith.\n  intro.\n  elim (le_gt_dec n 1).\n  auto with arith.\n  intro.\n  elim (le_gt_dec n 1).\n  auto with arith.\n  intro.\n  elim (le_gt_dec n 1).\n  auto with arith.\n  intro.\n  elim (le_gt_dec n 1).\n  auto with arith.\n  intro.\n  elim (le_gt_dec n 1).\n  auto with arith.\n  intro.\n  elim (le_gt_dec n 1).\n  auto with arith.\n  intro.\n  elim (le_gtQed.",
                        "correct": false,
                        "error_msg": "File \"./division.v\", line 75, characters 16-17:\nError:\nSyntax error: '|' or ',' or ')' expected after [constr:operconstr level 200] (in [constr:operconstr]).\n\nmake[2]: *** [Makefile.coq:663: division.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/division.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import Wf_nat.\n\n(** b | a if there is q such that a = b * q*)\nDefinition divides (a b:nat) := exists q:nat,a = (b*q).\n\n(** 1 divides every natural number *)\nLemma one_min_div : forall (n:nat),(divides n 1).\n  intros.\n  red.\n  exists n.\n  auto with arith.\nQed.\n\n(** 0 is divides by every natural number *)\nLemma zero_max_div : forall (n:nat),(divides O n).\n  intros.\n  red.\n  exists O.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is reflexive *)\n",
                "context_tokens": 373,
                "proof_start_offset": 1350,
                "proof_end_offset": 1453,
                "proof": "Lemma divides_refl : forall (a:nat),(divides a a).\nProof.\nintros.\nred.\nexists 1.\nauto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma divides_refl : forall (a:nat),(divides a a).\n  intros.\n  exists (a * a).\n  auto with arith.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./division.v\", line 46, characters 0-4:\nError: Attempt to save an incomplete proof (in proof divides_refl)\n\nmake[2]: *** [Makefile.coq:663: division.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/division.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import Wf_nat.\n\n(** b | a if there is q such that a = b * q*)\nDefinition divides (a b:nat) := exists q:nat,a = (b*q).\n\n(** 1 divides every natural number *)\nLemma one_min_div : forall (n:nat),(divides n 1).\n  intros.\n  red.\n  exists n.\n  auto with arith.\nQed.\n\n(** 0 is divides by every natural number *)\nLemma zero_max_div : forall (n:nat),(divides O n).\n  intros.\n  red.\n  exists O.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is reflexive *)\nLemma divides_refl : forall (a:nat),(divides a a).\n  intros.\n  red.\n  exists 1.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is transitive *)\n",
                "context_tokens": 417,
                "proof_start_offset": 1505,
                "proof_end_offset": 1745,
                "proof": "Lemma divides_trans : forall (a b c:nat),(divides a b)->(divides b c)->(divides a c).\nProof.\nunfold divides.\nintros.\nelim H;intro q;intro.\nelim H0;intro q';intro.\nrewrite H2 in H1.\nexists (q' * q).\nrewrite H1.\nauto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma divides_trans : forall (a b c:nat),(divides a b)->(divides b c)->(divides a c).\n  intros.\n  apply (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (divide_trans _ _ (Qed.",
                        "correct": false,
                        "error_msg": "File \"./division.v\", line 52, characters 764-765:\nError:\nSyntax error: '|' or ',' or ')' expected after [constr:operconstr level 200] (in [constr:operconstr]).\n\nmake[2]: *** [Makefile.coq:663: division.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/division.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import Wf_nat.\n\n(** b | a if there is q such that a = b * q*)\nDefinition divides (a b:nat) := exists q:nat,a = (b*q).\n\n(** 1 divides every natural number *)\nLemma one_min_div : forall (n:nat),(divides n 1).\n  intros.\n  red.\n  exists n.\n  auto with arith.\nQed.\n\n(** 0 is divides by every natural number *)\nLemma zero_max_div : forall (n:nat),(divides O n).\n  intros.\n  red.\n  exists O.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is reflexive *)\nLemma divides_refl : forall (a:nat),(divides a a).\n  intros.\n  red.\n  exists 1.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is transitive *)\nLemma divides_trans : forall (a b c:nat),(divides a b)->(divides b c)->(divides a c).\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  elim H0;intro q';intro.\n  rewrite H2 in H1.\n  exists (q' * q).\n  rewrite H1.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is antisymmetric *)\n",
                "context_tokens": 508,
                "proof_start_offset": 1800,
                "proof_end_offset": 2305,
                "proof": "Lemma divides_antisym : forall (a b:nat),(divides a b)->(divides b a)->a=b.\nProof.\nunfold divides.\nintros.\nelim H;intro q;intro.\nelim H0;intro q';intro.\nrewrite H2 in H1.\nassert ((a = 0) \\/ (q' * q)=1).\napply mult_lemma4.\nreplace (a*(q'*q)) with (a*q'*q);try (auto with arith).\ncase H3;intro.\nrewrite H4 in H2;simpl in H2;rewrite H2;trivial.\nelim (mult_lemma5 q' q H4);intros.\nrewrite H5 in H2;rewrite mult_comm in H2;simpl in H2;rewrite plus_comm in H2;simpl in H2;symmetry;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma divides_antisym : forall (a b:nat),(divides a b)->(divides b a)->a=b.\nProof.\n  intros.\n  apply (gcd_refl a b H).\nQed.",
                        "correct": false,
                        "error_msg": "File \"./division.v\", line 65, characters 9-17:\nError: The reference gcd_refl was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: division.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/division.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import Wf_nat.\n\n(** b | a if there is q such that a = b * q*)\nDefinition divides (a b:nat) := exists q:nat,a = (b*q).\n\n(** 1 divides every natural number *)\nLemma one_min_div : forall (n:nat),(divides n 1).\n  intros.\n  red.\n  exists n.\n  auto with arith.\nQed.\n\n(** 0 is divides by every natural number *)\nLemma zero_max_div : forall (n:nat),(divides O n).\n  intros.\n  red.\n  exists O.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is reflexive *)\nLemma divides_refl : forall (a:nat),(divides a a).\n  intros.\n  red.\n  exists 1.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is transitive *)\nLemma divides_trans : forall (a b c:nat),(divides a b)->(divides b c)->(divides a c).\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  elim H0;intro q';intro.\n  rewrite H2 in H1.\n  exists (q' * q).\n  rewrite H1.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is antisymmetric *)\nLemma divides_antisym : forall (a b:nat),(divides a b)->(divides b a)->a=b.\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  elim H0;intro q';intro.\n  rewrite H2 in H1.\n  assert ((a = 0) \\/ (q' * q)=1).\n  apply mult_lemma4.\n  replace (a*(q'*q)) with (a*q'*q);try (auto with arith).\n  case H3;intro.\n  rewrite H4 in H2;simpl in H2;rewrite H2;trivial.\n  elim (mult_lemma5 q' q H4);intros.\n  rewrite H5 in H2;rewrite mult_comm in H2;simpl in H2;rewrite plus_comm in H2;simpl in H2;symmetry;trivial.\nQed.\n\n(** corollary: forall a<>1, not(a | 1) *)\n",
                "context_tokens": 714,
                "proof_start_offset": 2349,
                "proof_end_offset": 2501,
                "proof": "Lemma non_div_1 : forall (a:nat),(a<>1)->~(divides 1 a).\nProof.\nintros.\nred.\nintro.\napply H.\napply divides_antisym;trivial.\napply one_min_div.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma non_div_1 : forall (a:nat),(a<>1)->~(divides 1 a).\nProof.\n  intros.\n  elim H;intro q;intro q';intro q';intro q';intro q';intro q'; elim q';intro q'; elim q';intro q'; elim q';intro q''; elim q'';\nintro q''; elim q'';intro q''; elim q'';intro q''; elim q'';\nintro q''; elim q'';intro q''; elim q'';intro q''; elim q'';\nintro q''; elim q''; elim q'';intro q''; elim q'';\nintro q''; elim q''; elim q'';\nintro q''; elim q''; elim q'';\nintro q''; elim q'';\nintro q''; elim q''; elim q'';\n intro q''; elim q'';\n intro q''; elim q'';\n intro q''; elim q'';\n intro q''; elim q'';\n intro q''; elim q'';\n intro q''; elim q'';\n intro q''; elim q'';\n intro q''; elim q'';\n intro q''; elim q'';\n intro q''; elim q'';\n intro q''; elim q'';\n intro q''; elim q'';\n [ intro q''; elim q'';\n [ intro q''; elim q''; elim q'';\n intros q''; elim q'';\n [ intro q''; elimQed.",
                        "correct": false,
                        "error_msg": "File \"./division.v\", line 104, characters 21-22:\nError:\nSyntax error: ']' expected after [tactic_then_gen] (in [tactic:tactic_expr]).\n\nmake[2]: *** [Makefile.coq:663: division.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/division.v",
                "context": "s *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import Wf_nat.\n\n(** b | a if there is q such that a = b * q*)\nDefinition divides (a b:nat) := exists q:nat,a = (b*q).\n\n(** 1 divides every natural number *)\nLemma one_min_div : forall (n:nat),(divides n 1).\n  intros.\n  red.\n  exists n.\n  auto with arith.\nQed.\n\n(** 0 is divides by every natural number *)\nLemma zero_max_div : forall (n:nat),(divides O n).\n  intros.\n  red.\n  exists O.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is reflexive *)\nLemma divides_refl : forall (a:nat),(divides a a).\n  intros.\n  red.\n  exists 1.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is transitive *)\nLemma divides_trans : forall (a b c:nat),(divides a b)->(divides b c)->(divides a c).\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  elim H0;intro q';intro.\n  rewrite H2 in H1.\n  exists (q' * q).\n  rewrite H1.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is antisymmetric *)\nLemma divides_antisym : forall (a b:nat),(divides a b)->(divides b a)->a=b.\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  elim H0;intro q';intro.\n  rewrite H2 in H1.\n  assert ((a = 0) \\/ (q' * q)=1).\n  apply mult_lemma4.\n  replace (a*(q'*q)) with (a*q'*q);try (auto with arith).\n  case H3;intro.\n  rewrite H4 in H2;simpl in H2;rewrite H2;trivial.\n  elim (mult_lemma5 q' q H4);intros.\n  rewrite H5 in H2;rewrite mult_comm in H2;simpl in H2;rewrite plus_comm in H2;simpl in H2;symmetry;trivial.\nQed.\n\n(** corollary: forall a<>1, not(a | 1) *)\nLemma non_div_1 : forall (a:nat),(a<>1)->~(divides 1 a).\n  intros.\n  red.\n  intro.\n  apply H.\n  apply divides_antisym;trivial.\n  apply one_min_div.\nQed.\n\n(** if d | a and d | b then d | (a+b) *)\n",
                "context_tokens": 722,
                "proof_start_offset": 2544,
                "proof_end_offset": 2770,
                "proof": "Lemma divides_plus : forall (d a b:nat),(divides a d)->(divides b d)->(divides (plus a b) d).\nProof.\nunfold divides.\nintros.\nelim H;intro q;intro.\nelim H0;intro q';intro.\nexists (q+q').\nrewrite H1;rewrite H2.\nring.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma divides_plus : forall (d a b:nat),(divides a d)->(divides b d)->(divides (plus a b) d).\n  intros.\n  apply (le_trans _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ H H0).\n  apply (le_trans _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ H H0).\n  apply (le_trans _ _ _ _ _ _ _ _ _ _ _ H H0).\n  apply (le_trans _ _ _ _ _ _ _ _ _ _ H H0).\n  apply (le_trans _ _ _ _ _ _ _ _ H0 H1).\n  apply (le_trans _ _ _ _ _ _ _ H1).\n  apply (le_trans _ _ _ _ _ _ H1).\n  apply (le_trans _ _ _ _ _ H1).\n  apply (le_trans _ _ _ _ _ H1).\n  apply (le_trans _ _ _ _ H1).\n  apply (le_trans _ _ _ _ H1).\n  apply (le_trans _ _ _ H2).\n  apply (le_trans _ _ _ H1).\n  apply (le_trans _ _ _ H1).\n  apply (le_trans _ _ _ H2).\n  apply (Qed.",
                        "correct": false,
                        "error_msg": "File \"./division.v\", line 90, characters 9-29:\nError: Illegal application (Non-functional construction): \nThe expression \"Nat.le_trans ?n ?m ?p ?l ?l0\" of type \n\"?n <= ?p\" cannot be applied to the term\n \"?y\" : \"?T\"\n\nmake[2]: *** [Makefile.coq:663: division.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/division.v",
                "context": " Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import Wf_nat.\n\n(** b | a if there is q such that a = b * q*)\nDefinition divides (a b:nat) := exists q:nat,a = (b*q).\n\n(** 1 divides every natural number *)\nLemma one_min_div : forall (n:nat),(divides n 1).\n  intros.\n  red.\n  exists n.\n  auto with arith.\nQed.\n\n(** 0 is divides by every natural number *)\nLemma zero_max_div : forall (n:nat),(divides O n).\n  intros.\n  red.\n  exists O.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is reflexive *)\nLemma divides_refl : forall (a:nat),(divides a a).\n  intros.\n  red.\n  exists 1.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is transitive *)\nLemma divides_trans : forall (a b c:nat),(divides a b)->(divides b c)->(divides a c).\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  elim H0;intro q';intro.\n  rewrite H2 in H1.\n  exists (q' * q).\n  rewrite H1.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is antisymmetric *)\nLemma divides_antisym : forall (a b:nat),(divides a b)->(divides b a)->a=b.\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  elim H0;intro q';intro.\n  rewrite H2 in H1.\n  assert ((a = 0) \\/ (q' * q)=1).\n  apply mult_lemma4.\n  replace (a*(q'*q)) with (a*q'*q);try (auto with arith).\n  case H3;intro.\n  rewrite H4 in H2;simpl in H2;rewrite H2;trivial.\n  elim (mult_lemma5 q' q H4);intros.\n  rewrite H5 in H2;rewrite mult_comm in H2;simpl in H2;rewrite plus_comm in H2;simpl in H2;symmetry;trivial.\nQed.\n\n(** corollary: forall a<>1, not(a | 1) *)\nLemma non_div_1 : forall (a:nat),(a<>1)->~(divides 1 a).\n  intros.\n  red.\n  intro.\n  apply H.\n  apply divides_antisym;trivial.\n  apply one_min_div.\nQed.\n\n(** if d | a and d | b then d | (a+b) *)\nLemma divides_plus : forall (d a b:nat),(divides a d)->(divides b d)->(divides (plus a b) d).\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  elim H0;intro q';intro.\n  exists (q+q').\n  rewrite H1;rewrite H2.\n  ring.\nQed.\n\n(** if d | a then d | a*b *)\n",
                "context_tokens": 732,
                "proof_start_offset": 2801,
                "proof_end_offset": 2971,
                "proof": "Lemma divides_mult : forall (d a b:nat),(divides a d)->(divides (a*b) d).\nProof.\nunfold divides.\nintros.\nelim H;intro q;intro.\nexists (b * q).\nrewrite H0.\nring.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma divides_mult : forall (d a b:nat),(divides a d)->(divides (a*b) d).\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  elim H0;intro q';intro.\n  exists (q+q').\n  rewrite H1; rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2.\n  rewrite H2Qed.",
                        "correct": false,
                        "error_msg": "File \"./division.v\", line 103, characters 10-18:\nError:\nLtac call to \"intro (ident)\" failed.\nNo product even after head-reduction.\n\nmake[2]: *** [Makefile.coq:663: division.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/division.v",
                "context": " b | a if there is q such that a = b * q*)\nDefinition divides (a b:nat) := exists q:nat,a = (b*q).\n\n(** 1 divides every natural number *)\nLemma one_min_div : forall (n:nat),(divides n 1).\n  intros.\n  red.\n  exists n.\n  auto with arith.\nQed.\n\n(** 0 is divides by every natural number *)\nLemma zero_max_div : forall (n:nat),(divides O n).\n  intros.\n  red.\n  exists O.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is reflexive *)\nLemma divides_refl : forall (a:nat),(divides a a).\n  intros.\n  red.\n  exists 1.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is transitive *)\nLemma divides_trans : forall (a b c:nat),(divides a b)->(divides b c)->(divides a c).\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  elim H0;intro q';intro.\n  rewrite H2 in H1.\n  exists (q' * q).\n  rewrite H1.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is antisymmetric *)\nLemma divides_antisym : forall (a b:nat),(divides a b)->(divides b a)->a=b.\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  elim H0;intro q';intro.\n  rewrite H2 in H1.\n  assert ((a = 0) \\/ (q' * q)=1).\n  apply mult_lemma4.\n  replace (a*(q'*q)) with (a*q'*q);try (auto with arith).\n  case H3;intro.\n  rewrite H4 in H2;simpl in H2;rewrite H2;trivial.\n  elim (mult_lemma5 q' q H4);intros.\n  rewrite H5 in H2;rewrite mult_comm in H2;simpl in H2;rewrite plus_comm in H2;simpl in H2;symmetry;trivial.\nQed.\n\n(** corollary: forall a<>1, not(a | 1) *)\nLemma non_div_1 : forall (a:nat),(a<>1)->~(divides 1 a).\n  intros.\n  red.\n  intro.\n  apply H.\n  apply divides_antisym;trivial.\n  apply one_min_div.\nQed.\n\n(** if d | a and d | b then d | (a+b) *)\nLemma divides_plus : forall (d a b:nat),(divides a d)->(divides b d)->(divides (plus a b) d).\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  elim H0;intro q';intro.\n  exists (q+q').\n  rewrite H1;rewrite H2.\n  ring.\nQed.\n\n(** if d | a then d | a*b *)\nLemma divides_mult : forall (d a b:nat),(divides a d)->(divides (a*b) d).\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  exists (b * q).\n  rewrite H0.\n  ring.\nQed.\n\n(** if d | a and d | b then d | (b-a) *)\n",
                "context_tokens": 728,
                "proof_start_offset": 3014,
                "proof_end_offset": 3325,
                "proof": "Lemma divides_minus : forall (d a b:nat),(divides a d)->(divides b d)->(divides (b-a) d).\nProof.\nunfold divides.\nintros.\nelim H;intro q;intro.\nelim H0;intro q';intro.\nrewrite H1;rewrite H2.\nexists (q'-q).\nrewrite (mult_comm d q');rewrite (mult_comm d q);rewrite (mult_comm d (q'-q));auto with arith.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma divides_minus : forall (d a b:nat),(divides a d)->(divides b d)->(divides (b-a) d).\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  elim H0;intro q; intro.\n  rewrite H2 in H1; rewrite H2 in H1; rewrite H1; auto.\n  elim H1; intro.\n  rewrite H2 in H1; rewrite H2 in H1; rewrite H1; auto.\n  elim H1; intro.\n  rewrite H2 in H1; rewrite H1; auto.\n  elim H1; intro.\n  rewrite H2 in H1; rewrite H2; auto.\n  elim H1; intro.\n  rewrite H2 in H1; rewrite H1; auto.\n  elim H1; intro.\n  rewrite H2 in H1; rewrite H1; auto.\n  elim H1; intro.\n  rewrite H2 in H1; rewrite H1; auto.\n  elim H1; intro.\n  rewrite H2 in H1; rewrite H1; auto.\n  elim H1; intro.\n  rewrite H2 in H1; rewrite H1; auto.\n  elim H1; intro.\n  rewrite H2 in H1; rewrite H1; auto.\n  elim H1; intro.\n  rewrite H2 in HQed.",
                        "correct": false,
                        "error_msg": "File \"./division.v\", line 113, characters 10-17:\nError: Ltac call to \"intro (ident)\" failed.\n       q is already used.\n\nmake[2]: *** [Makefile.coq:663: division.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/division.v",
                "context": "(** the relation of divisibility is reflexive *)\nLemma divides_refl : forall (a:nat),(divides a a).\n  intros.\n  red.\n  exists 1.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is transitive *)\nLemma divides_trans : forall (a b c:nat),(divides a b)->(divides b c)->(divides a c).\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  elim H0;intro q';intro.\n  rewrite H2 in H1.\n  exists (q' * q).\n  rewrite H1.\n  auto with arith.\nQed.\n\n(** the relation of divisibility is antisymmetric *)\nLemma divides_antisym : forall (a b:nat),(divides a b)->(divides b a)->a=b.\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  elim H0;intro q';intro.\n  rewrite H2 in H1.\n  assert ((a = 0) \\/ (q' * q)=1).\n  apply mult_lemma4.\n  replace (a*(q'*q)) with (a*q'*q);try (auto with arith).\n  case H3;intro.\n  rewrite H4 in H2;simpl in H2;rewrite H2;trivial.\n  elim (mult_lemma5 q' q H4);intros.\n  rewrite H5 in H2;rewrite mult_comm in H2;simpl in H2;rewrite plus_comm in H2;simpl in H2;symmetry;trivial.\nQed.\n\n(** corollary: forall a<>1, not(a | 1) *)\nLemma non_div_1 : forall (a:nat),(a<>1)->~(divides 1 a).\n  intros.\n  red.\n  intro.\n  apply H.\n  apply divides_antisym;trivial.\n  apply one_min_div.\nQed.\n\n(** if d | a and d | b then d | (a+b) *)\nLemma divides_plus : forall (d a b:nat),(divides a d)->(divides b d)->(divides (plus a b) d).\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  elim H0;intro q';intro.\n  exists (q+q').\n  rewrite H1;rewrite H2.\n  ring.\nQed.\n\n(** if d | a then d | a*b *)\nLemma divides_mult : forall (d a b:nat),(divides a d)->(divides (a*b) d).\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  exists (b * q).\n  rewrite H0.\n  ring.\nQed.\n\n(** if d | a and d | b then d | (b-a) *)\nLemma divides_minus : forall (d a b:nat),(divides a d)->(divides b d)->(divides (b-a) d).\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  elim H0;intro q';intro.\n  rewrite H1;rewrite H2.\n  exists (q'-q).\n  rewrite (mult_comm d q');rewrite (mult_comm d q);rewrite (mult_comm d (q'-q));auto with arith.\nQed.\n\n(** here we show that if b | a then it is possible to compute q such that a = b*q *)\n",
                "context_tokens": 730,
                "proof_start_offset": 3412,
                "proof_end_offset": 4144,
                "proof": "Lemma quo_dec : forall (a b:nat),(divides a b)->{q:nat | a=b*q}.\nProof.\nintros.\napply (lt_wf_rec a (fun x:nat => (divides x b)->{q:nat | x = b*q}));trivial.\nintro.\ncase n;intros.\nexists 0;auto with arith.\nelim (H0 ((S n0)-b)).\nintro q;intro.\nexists (S q).\nreplace (S n0) with (b+(S n0-b)).\nrewrite p;rewrite plus_comm;auto with arith.\nsymmetry.\napply le_plus_minus.\nelim H1;intros.\nrewrite H2.\nreplace (b <= b*x) with (1*b <= b*x);rewrite (mult_comm b x).\napply mult_le_compat_r.\ndestruct x;[rewrite mult_comm in H2;discriminate | auto with arith].\nsimpl;auto with arith.\ndestruct b.\nelim H1;simpl;intros;discriminate.\nomega.\napply (divides_minus b b (S n0));[apply divides_refl | trivial].\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma quo_dec : forall (a b:nat),(divides a b)->{q:nat | a=b*q}.\n  unfold modulo.\n  intros.\n  elim H;intro q;intro q; elim q;intro q;intro q; elim q;intro q; elim q;intro q; elim q;intro q;\n   rewrite q'0; rewrite <- H1; rewrite <- H2; reflexivity.\n  elim H;intro q;intro q; elim q;intro q; elim q;intro q; elim q;intro q; elim q;\n   rewrite q'0; rewrite <- H1; rewrite <- H2; reflexivity.\n  elim H;intro q; elim q;intro q; elim q; intro q; elim q;\n   rewrite q'0; rewrite <- H1; rewrite <- H2; reflexivity.\n  elim H;intro q; elim q; intro q; elim q; intro q; elim q; elim q;\n   rewrite q'0; rewrite <- H1; rewrite <- H2; reflexivity.\n  elim H;intro q; elim q; intro q; elim q; elim q; intro q; elim q;\n   rewrite q'0; rewrite <- H1; rewrite <- H2; reflexivity.\n  elim H; intro q; elim q; intro q; elim q; elim q;Qed.",
                        "correct": false,
                        "error_msg": "File \"./division.v\", line 121, characters 9-15:\nError: The reference modulo was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: division.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/division.v",
                "context": ".\nQed.\n\n(** corollary: forall a<>1, not(a | 1) *)\nLemma non_div_1 : forall (a:nat),(a<>1)->~(divides 1 a).\n  intros.\n  red.\n  intro.\n  apply H.\n  apply divides_antisym;trivial.\n  apply one_min_div.\nQed.\n\n(** if d | a and d | b then d | (a+b) *)\nLemma divides_plus : forall (d a b:nat),(divides a d)->(divides b d)->(divides (plus a b) d).\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  elim H0;intro q';intro.\n  exists (q+q').\n  rewrite H1;rewrite H2.\n  ring.\nQed.\n\n(** if d | a then d | a*b *)\nLemma divides_mult : forall (d a b:nat),(divides a d)->(divides (a*b) d).\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  exists (b * q).\n  rewrite H0.\n  ring.\nQed.\n\n(** if d | a and d | b then d | (b-a) *)\nLemma divides_minus : forall (d a b:nat),(divides a d)->(divides b d)->(divides (b-a) d).\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  elim H0;intro q';intro.\n  rewrite H1;rewrite H2.\n  exists (q'-q).\n  rewrite (mult_comm d q');rewrite (mult_comm d q);rewrite (mult_comm d (q'-q));auto with arith.\nQed.\n\n(** here we show that if b | a then it is possible to compute q such that a = b*q *)\nLemma quo_dec : forall (a b:nat),(divides a b)->{q:nat | a=b*q}.\n  intros.\n  apply (lt_wf_rec a (fun x:nat => (divides x b)->{q:nat | x = b*q}));trivial.\n  intro.\n  case n;intros.\n  exists 0;auto with arith.\n  elim (H0 ((S n0)-b)).\n  intro q;intro.\n  exists (S q).\n  replace (S n0) with (b+(S n0-b)).\n  rewrite p;rewrite plus_comm;auto with arith.\n  symmetry.\n  apply le_plus_minus.\n  elim H1;intros.\n  rewrite H2.\n  replace (b <= b*x) with (1*b <= b*x);rewrite (mult_comm b x).\n  apply mult_le_compat_r.\n  destruct x;[rewrite mult_comm in H2;discriminate | auto with arith].\n  simpl;auto with arith.\n  destruct b.\n  elim H1;simpl;intros;discriminate.\n  omega.\n  apply (divides_minus b b (S n0));[apply divides_refl | trivial].\nQed.\n\n(** we can now define the quotient of a by b in case of b | a *)\nDefinition quo (a b:nat) (H:(divides a b)) := let (q,_):=(quo_dec a b H) in q.\n\n(** the quotient is the quotient! *)\n",
                "context_tokens": 727,
                "proof_start_offset": 4328,
                "proof_end_offset": 4482,
                "proof": "Lemma quo_is_quo : forall (a b:nat)(H:divides a b),a=(mult b (quo a b H)).\nProof.\nintros.\nunfold quo.\ngeneralize (quo_dec a b H);intro;elim s;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma quo_is_quo : forall (a b:nat)(H:divides a b),a=(mult b (quo a b H)).\n  unfold mod, modulo.\n  intros.\n  elim H;intro.\n  exists (b * a).\n  rewrite <- H.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewrite <- H0.\n  rewriteQed.",
                        "correct": false,
                        "error_msg": "File \"./division.v\", line 150, characters 9-12:\nError:\nSyntax error: [unfold_occ] expected after 'unfold' (in [tactic:simple_tactic]).\n\nmake[2]: *** [Makefile.coq:663: division.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/division.v",
                "context": " forall (d a b:nat),(divides a d)->(divides b d)->(divides (plus a b) d).\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  elim H0;intro q';intro.\n  exists (q+q').\n  rewrite H1;rewrite H2.\n  ring.\nQed.\n\n(** if d | a then d | a*b *)\nLemma divides_mult : forall (d a b:nat),(divides a d)->(divides (a*b) d).\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  exists (b * q).\n  rewrite H0.\n  ring.\nQed.\n\n(** if d | a and d | b then d | (b-a) *)\nLemma divides_minus : forall (d a b:nat),(divides a d)->(divides b d)->(divides (b-a) d).\n  unfold divides.\n  intros.\n  elim H;intro q;intro.\n  elim H0;intro q';intro.\n  rewrite H1;rewrite H2.\n  exists (q'-q).\n  rewrite (mult_comm d q');rewrite (mult_comm d q);rewrite (mult_comm d (q'-q));auto with arith.\nQed.\n\n(** here we show that if b | a then it is possible to compute q such that a = b*q *)\nLemma quo_dec : forall (a b:nat),(divides a b)->{q:nat | a=b*q}.\n  intros.\n  apply (lt_wf_rec a (fun x:nat => (divides x b)->{q:nat | x = b*q}));trivial.\n  intro.\n  case n;intros.\n  exists 0;auto with arith.\n  elim (H0 ((S n0)-b)).\n  intro q;intro.\n  exists (S q).\n  replace (S n0) with (b+(S n0-b)).\n  rewrite p;rewrite plus_comm;auto with arith.\n  symmetry.\n  apply le_plus_minus.\n  elim H1;intros.\n  rewrite H2.\n  replace (b <= b*x) with (1*b <= b*x);rewrite (mult_comm b x).\n  apply mult_le_compat_r.\n  destruct x;[rewrite mult_comm in H2;discriminate | auto with arith].\n  simpl;auto with arith.\n  destruct b.\n  elim H1;simpl;intros;discriminate.\n  omega.\n  apply (divides_minus b b (S n0));[apply divides_refl | trivial].\nQed.\n\n(** we can now define the quotient of a by b in case of b | a *)\nDefinition quo (a b:nat) (H:(divides a b)) := let (q,_):=(quo_dec a b H) in q.\n\n(** the quotient is the quotient! *)\nLemma quo_is_quo : forall (a b:nat)(H:divides a b),a=(mult b (quo a b H)).\n  intros.\n  unfold quo.\n  generalize (quo_dec a b H);intro;elim s;trivial.\nQed.\n\n(** if b | a then (n*a/b) = n*(a/b) *) \n",
                "context_tokens": 706,
                "proof_start_offset": 4524,
                "proof_end_offset": 5018,
                "proof": "Lemma quo_mult : forall (a b:nat)(H:divides a b),forall (n:nat),(b<>O)->(quo (a*n) b (divides_mult b a n H))=n*(quo a b H).\nProof.\nintros.\ngeneralize (quo_is_quo (a*n) b (divides_mult b a n H));intro.\ngeneralize (quo_is_quo a b H);intro.\nreplace (a*n = b * quo (a * n) b (divides_mult b a n H)) with (b*(quo a b H)*n = b * quo (a * n) b (divides_mult b a n H)) in H1.\nsymmetry;rewrite mult_comm.\napply mult_lemma6 with b;trivial.\nrewrite mult_assoc;trivial.\nrewrite <- H2;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma quo_mult : forall (a b:nat)(H:divides a b),forall (n:nat),(b<>O)->(quo (a*n) b (divides_mult b a n H))=n*(quo a b H).\n  intros.\n  unfold modulo.\n  generalize (mod_mult_full a b H);intro;elim s;trivial.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./division.v\", line 158, characters 9-15:\nError: The reference modulo was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: division.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\nRequire Import euclide.\nRequire Import gcd.\nRequire Import power.\nRequire Import permutation.\nRequire Import Wf_nat.\n\nUnset Standard Proposition Elimination Names.\n\n(** definition of a \"prime number\" *)\nDefinition is_prime (p:nat) := (p<>1)/\\(forall (d:nat),(divides p d)->(d=1)\\/(d=p)).\n\n",
                "context_tokens": 314,
                "proof_start_offset": 1197,
                "proof_end_offset": 1343,
                "proof": "Lemma not_prime_zero : ~(is_prime O).\nProof.\nunfold is_prime.\nintro.\nelim H;intros.\ncase (H1 2);try (apply zero_max_div);intro;discriminate.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma not_prime_zero : ~(is_prime O).\nProof.\n intro.\n case (dec_prime O).\n intro.\n left.\n assumption.\n right.\n assumption.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 35, characters 7-16:\nError: The reference dec_prime was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\nRequire Import euclide.\nRequire Import gcd.\nRequire Import power.\nRequire Import permutation.\nRequire Import Wf_nat.\n\nUnset Standard Proposition Elimination Names.\n\n(** definition of a \"prime number\" *)\nDefinition is_prime (p:nat) := (p<>1)/\\(forall (d:nat),(divides p d)->(d=1)\\/(d=p)).\n\nLemma not_prime_zero : ~(is_prime O).\n  unfold is_prime.\n  intro.\n  elim H;intros.\n  case (H1 2);try (apply zero_max_div);intro;discriminate.\nQed.\n\n(** 2 is a prime number *)\n",
                "context_tokens": 376,
                "proof_start_offset": 1372,
                "proof_end_offset": 1780,
                "proof": "Lemma is_prime_2 : (is_prime 2).\nProof.\nunfold is_prime.\nsplit.\nintro;discriminate.\nintros.\nelim H;destruct x;rewrite mult_comm.\nintro;discriminate.\nsimpl.\ncase d.\nsimpl.\nrewrite mult_comm;simpl;intro;discriminate.\nintros.\ninversion H0.\nsymmetry in H2.\ncase (plus_is_one n (x*(S n)) H2);intro.\nelim a;intros.\nleft;rewrite H1;trivial.\nelim a;intros.\nright;rewrite H1;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma is_prime_2 : (is_prime 2).\n  unfold is_prime.\n  intro.\n  elim H;intros.\n  elim H1;intros.\n  elim H2;intros.\n  elim H1;intros.\n  elim H2;intros.\n  elim H2;intros.\n  elim H3;intros.\n  elim H4;intros.\n  elim H4;intros.\n  elim H4;intros.\n  elim H5;intros.\n  elim H5;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim HQed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 42, characters 2-7:\nError: Ltac call to \"intro\" failed.\n       No product even after head-reduction.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\nRequire Import euclide.\nRequire Import gcd.\nRequire Import power.\nRequire Import permutation.\nRequire Import Wf_nat.\n\nUnset Standard Proposition Elimination Names.\n\n(** definition of a \"prime number\" *)\nDefinition is_prime (p:nat) := (p<>1)/\\(forall (d:nat),(divides p d)->(d=1)\\/(d=p)).\n\nLemma not_prime_zero : ~(is_prime O).\n  unfold is_prime.\n  intro.\n  elim H;intros.\n  case (H1 2);try (apply zero_max_div);intro;discriminate.\nQed.\n\n(** 2 is a prime number *)\nLemma is_prime_2 : (is_prime 2).\n  unfold is_prime.\n  split.\n  intro;discriminate.\n  intros.\n  elim H;destruct x;rewrite mult_comm.\n  intro;discriminate.\n  simpl.\n  case d.\n  simpl.\n  rewrite mult_comm;simpl;intro;discriminate.\n  intros.\n  inversion H0.\n  symmetry in H2.\n  case (plus_is_one n (x*(S n)) H2);intro.\n  elim a;intros.\n  left;rewrite H1;trivial.\n  elim a;intros.\n  right;rewrite H1;trivial.\nQed.\n\n(** if p is prime and not(p | a) then a and p are relatively prime *)\n",
                "context_tokens": 535,
                "proof_start_offset": 1852,
                "proof_end_offset": 2186,
                "proof": "Lemma prime_div_gcd : forall (p a:nat),(is_prime p)->~(divides a p)->(rel_prime p a).\nProof.\nunfold is_prime.\nunfold rel_prime.\nintros.\nunfold is_gcd;unfold is_cd.\nsplit.\nsplit;apply one_min_div.\nintros.\nelim H;intros.\nelim H1;intros.\ncase (H3 d' H4);intro.\nrewrite H6;apply divides_refl.\nrewrite H6 in H5;tauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma prime_div_gcd : forall (p a:nat),(is_prime p)->~(divides a p)->(rel_prime p a).\nProof.\n  intros.\n  elim H;intros.\n  case (prime_odd_dec p p);intro.\n  right;rewrite H1;trivial.\n  right;rewrite H1;trivial.\n  right;rewrite H1;trivial.\n  right;rewrite H1;trivial.\n  right;rewrite H1;trivial.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 66, characters 8-21:\nError: The reference prime_odd_dec was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\nRequire Import euclide.\nRequire Import gcd.\nRequire Import power.\nRequire Import permutation.\nRequire Import Wf_nat.\n\nUnset Standard Proposition Elimination Names.\n\n(** definition of a \"prime number\" *)\nDefinition is_prime (p:nat) := (p<>1)/\\(forall (d:nat),(divides p d)->(d=1)\\/(d=p)).\n\nLemma not_prime_zero : ~(is_prime O).\n  unfold is_prime.\n  intro.\n  elim H;intros.\n  case (H1 2);try (apply zero_max_div);intro;discriminate.\nQed.\n\n(** 2 is a prime number *)\nLemma is_prime_2 : (is_prime 2).\n  unfold is_prime.\n  split.\n  intro;discriminate.\n  intros.\n  elim H;destruct x;rewrite mult_comm.\n  intro;discriminate.\n  simpl.\n  case d.\n  simpl.\n  rewrite mult_comm;simpl;intro;discriminate.\n  intros.\n  inversion H0.\n  symmetry in H2.\n  case (plus_is_one n (x*(S n)) H2);intro.\n  elim a;intros.\n  left;rewrite H1;trivial.\n  elim a;intros.\n  right;rewrite H1;trivial.\nQed.\n\n(** if p is prime and not(p | a) then a and p are relatively prime *)\nLemma prime_div_gcd : forall (p a:nat),(is_prime p)->~(divides a p)->(rel_prime p a).\n  unfold is_prime.\n  unfold rel_prime.\n  intros.\n  unfold is_gcd;unfold is_cd.\n  split.\n  split;apply one_min_div.\n  intros.\n  elim H;intros.\n  elim H1;intros.\n  case (H3 d' H4);intro.\n  rewrite H6;apply divides_refl.\n  rewrite H6 in H5;tauto.\nQed.\n\n(** We show some lemmae about prime numbers *)\n(** if p is prime then gcd(a,p)=1 or gcd(a,p)=p *)\n",
                "context_tokens": 691,
                "proof_start_offset": 2286,
                "proof_end_offset": 2466,
                "proof": "Lemma prime_gcd : forall (d p a:nat),(is_prime p)->(is_gcd d a p)->(d=1)\\/(d=p).\nProof.\nunfold is_prime.\nintros.\nelim H;intros.\napply H2.\nelim H0;intros.\nelim H3;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma prime_gcd : forall (d p a:nat),(is_prime p)->(is_gcd d a p)->(d=1)\\/(d=p).\nProof.\n  intros.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_prime.\n  unfold is_Qed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 123, characters 9-15:\nError: The reference is_Qed was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": "NU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\nRequire Import euclide.\nRequire Import gcd.\nRequire Import power.\nRequire Import permutation.\nRequire Import Wf_nat.\n\nUnset Standard Proposition Elimination Names.\n\n(** definition of a \"prime number\" *)\nDefinition is_prime (p:nat) := (p<>1)/\\(forall (d:nat),(divides p d)->(d=1)\\/(d=p)).\n\nLemma not_prime_zero : ~(is_prime O).\n  unfold is_prime.\n  intro.\n  elim H;intros.\n  case (H1 2);try (apply zero_max_div);intro;discriminate.\nQed.\n\n(** 2 is a prime number *)\nLemma is_prime_2 : (is_prime 2).\n  unfold is_prime.\n  split.\n  intro;discriminate.\n  intros.\n  elim H;destruct x;rewrite mult_comm.\n  intro;discriminate.\n  simpl.\n  case d.\n  simpl.\n  rewrite mult_comm;simpl;intro;discriminate.\n  intros.\n  inversion H0.\n  symmetry in H2.\n  case (plus_is_one n (x*(S n)) H2);intro.\n  elim a;intros.\n  left;rewrite H1;trivial.\n  elim a;intros.\n  right;rewrite H1;trivial.\nQed.\n\n(** if p is prime and not(p | a) then a and p are relatively prime *)\nLemma prime_div_gcd : forall (p a:nat),(is_prime p)->~(divides a p)->(rel_prime p a).\n  unfold is_prime.\n  unfold rel_prime.\n  intros.\n  unfold is_gcd;unfold is_cd.\n  split.\n  split;apply one_min_div.\n  intros.\n  elim H;intros.\n  elim H1;intros.\n  case (H3 d' H4);intro.\n  rewrite H6;apply divides_refl.\n  rewrite H6 in H5;tauto.\nQed.\n\n(** We show some lemmae about prime numbers *)\n(** if p is prime then gcd(a,p)=1 or gcd(a,p)=p *)\nLemma prime_gcd : forall (d p a:nat),(is_prime p)->(is_gcd d a p)->(d=1)\\/(d=p).\n  unfold is_prime.\n  intros.\n  elim H;intros.\n  apply H2.\n  elim H0;intros.\n  elim H3;trivial.\nQed.\n\n(** if p is prime and gcd(a,p)<>1 then p | a *)\n",
                "context_tokens": 723,
                "proof_start_offset": 2516,
                "proof_end_offset": 2785,
                "proof": "Lemma prime_rel_prime : forall (p a:nat),(is_prime p)->~(rel_prime a p)->(divides a p).\nProof.\nunfold rel_prime.\nintros.\ngeneralize (gcd_is_gcd a p);intros.\ncase (prime_gcd (gcd a p) p a H H1);intro;rewrite H2 in H1;try tauto.\nelim H1;intros.\nelim H3;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma prime_rel_prime : forall (p a:nat),(is_prime p)->~(rel_prime a p)->(divides a p).\n  unfold is_prime.\n  intros.\n  elim H;intros.\n  elim H0;intros.\n  elim H1;intros.\n  elim H2;intros.\n  elim H3;intros.\n  elim H4;intros.\n  elim H4;intros.\n  elim H5;intros.\n  elim H5;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6; intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6; intros.\n  elim H6; intros.\n  elim H6; intros.\n  elim H6; intros.\n  elim H6; intros.\n  elim HQed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 95, characters 2-9:\nError: Unable to find an instance for the variable d.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": " to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\nRequire Import euclide.\nRequire Import gcd.\nRequire Import power.\nRequire Import permutation.\nRequire Import Wf_nat.\n\nUnset Standard Proposition Elimination Names.\n\n(** definition of a \"prime number\" *)\nDefinition is_prime (p:nat) := (p<>1)/\\(forall (d:nat),(divides p d)->(d=1)\\/(d=p)).\n\nLemma not_prime_zero : ~(is_prime O).\n  unfold is_prime.\n  intro.\n  elim H;intros.\n  case (H1 2);try (apply zero_max_div);intro;discriminate.\nQed.\n\n(** 2 is a prime number *)\nLemma is_prime_2 : (is_prime 2).\n  unfold is_prime.\n  split.\n  intro;discriminate.\n  intros.\n  elim H;destruct x;rewrite mult_comm.\n  intro;discriminate.\n  simpl.\n  case d.\n  simpl.\n  rewrite mult_comm;simpl;intro;discriminate.\n  intros.\n  inversion H0.\n  symmetry in H2.\n  case (plus_is_one n (x*(S n)) H2);intro.\n  elim a;intros.\n  left;rewrite H1;trivial.\n  elim a;intros.\n  right;rewrite H1;trivial.\nQed.\n\n(** if p is prime and not(p | a) then a and p are relatively prime *)\nLemma prime_div_gcd : forall (p a:nat),(is_prime p)->~(divides a p)->(rel_prime p a).\n  unfold is_prime.\n  unfold rel_prime.\n  intros.\n  unfold is_gcd;unfold is_cd.\n  split.\n  split;apply one_min_div.\n  intros.\n  elim H;intros.\n  elim H1;intros.\n  case (H3 d' H4);intro.\n  rewrite H6;apply divides_refl.\n  rewrite H6 in H5;tauto.\nQed.\n\n(** We show some lemmae about prime numbers *)\n(** if p is prime then gcd(a,p)=1 or gcd(a,p)=p *)\nLemma prime_gcd : forall (d p a:nat),(is_prime p)->(is_gcd d a p)->(d=1)\\/(d=p).\n  unfold is_prime.\n  intros.\n  elim H;intros.\n  apply H2.\n  elim H0;intros.\n  elim H3;trivial.\nQed.\n\n(** if p is prime and gcd(a,p)<>1 then p | a *)\nLemma prime_rel_prime : forall (p a:nat),(is_prime p)->~(rel_prime a p)->(divides a p).\n  unfold rel_prime.\n  intros.\n  generalize (gcd_is_gcd a p);intros.\n  case (prime_gcd (gcd a p) p a H H1);intro;rewrite H2 in H1;try tauto.\n  elim H1;intros.\n  elim H3;trivial.\nQed.\n\n(** if p is prime and p | a*b then p | a or p | b *)\n",
                "context_tokens": 720,
                "proof_start_offset": 2840,
                "proof_end_offset": 3139,
                "proof": "Lemma prime_mult : forall (p a b:nat),(is_prime p)->(divides (a*b) p)->((divides a p)\\/(divides b p)).\nProof.\nintros.\ngeneralize (gcd_is_gcd a p);intro.\ncase (prime_gcd (gcd a p) p a H H1);intro;rewrite H2 in H1.\nright;apply gauss with a;trivial.\nred in H1;elim H1;intros.\nred in H3;tauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma prime_mult : forall (p a b:nat),(is_prime p)->(divides (a*b) p)->((divides a p)\\/(divides b p)).\nProof.\n  unfold is_prime.\n  intros.\n  generalize (gcd_is_gcd a p);intros.\n  case (prime_gcd (gcd a p) p);intro.\n  elim H1;intros.\n  elim H2;intros.\n  elim H3;intros.\n  elim H4;intros.\n  elim H4;intros.\n  elim H5;intros.\n  elim H5;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6; intros.\n  elim H6; introsQed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 104, characters 2-30:\nError: Unable to find an instance for the variable a.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": "=p)).\n\nLemma not_prime_zero : ~(is_prime O).\n  unfold is_prime.\n  intro.\n  elim H;intros.\n  case (H1 2);try (apply zero_max_div);intro;discriminate.\nQed.\n\n(** 2 is a prime number *)\nLemma is_prime_2 : (is_prime 2).\n  unfold is_prime.\n  split.\n  intro;discriminate.\n  intros.\n  elim H;destruct x;rewrite mult_comm.\n  intro;discriminate.\n  simpl.\n  case d.\n  simpl.\n  rewrite mult_comm;simpl;intro;discriminate.\n  intros.\n  inversion H0.\n  symmetry in H2.\n  case (plus_is_one n (x*(S n)) H2);intro.\n  elim a;intros.\n  left;rewrite H1;trivial.\n  elim a;intros.\n  right;rewrite H1;trivial.\nQed.\n\n(** if p is prime and not(p | a) then a and p are relatively prime *)\nLemma prime_div_gcd : forall (p a:nat),(is_prime p)->~(divides a p)->(rel_prime p a).\n  unfold is_prime.\n  unfold rel_prime.\n  intros.\n  unfold is_gcd;unfold is_cd.\n  split.\n  split;apply one_min_div.\n  intros.\n  elim H;intros.\n  elim H1;intros.\n  case (H3 d' H4);intro.\n  rewrite H6;apply divides_refl.\n  rewrite H6 in H5;tauto.\nQed.\n\n(** We show some lemmae about prime numbers *)\n(** if p is prime then gcd(a,p)=1 or gcd(a,p)=p *)\nLemma prime_gcd : forall (d p a:nat),(is_prime p)->(is_gcd d a p)->(d=1)\\/(d=p).\n  unfold is_prime.\n  intros.\n  elim H;intros.\n  apply H2.\n  elim H0;intros.\n  elim H3;trivial.\nQed.\n\n(** if p is prime and gcd(a,p)<>1 then p | a *)\nLemma prime_rel_prime : forall (p a:nat),(is_prime p)->~(rel_prime a p)->(divides a p).\n  unfold rel_prime.\n  intros.\n  generalize (gcd_is_gcd a p);intros.\n  case (prime_gcd (gcd a p) p a H H1);intro;rewrite H2 in H1;try tauto.\n  elim H1;intros.\n  elim H3;trivial.\nQed.\n\n(** if p is prime and p | a*b then p | a or p | b *)\nLemma prime_mult : forall (p a b:nat),(is_prime p)->(divides (a*b) p)->((divides a p)\\/(divides b p)).\n  intros.\n  generalize (gcd_is_gcd a p);intro.\n  case (prime_gcd (gcd a p) p a H H1);intro;rewrite H2 in H1.\n  right;apply gauss with a;trivial.\n  red in H1;elim H1;intros.\n  red in H3;tauto.\nQed.\n\n(** corollary: if p is prime and p | a^2 then p | a *)\n",
                "context_tokens": 729,
                "proof_start_offset": 3196,
                "proof_end_offset": 3355,
                "proof": "Lemma prime_square : forall (p a:nat),(is_prime p)->(divides (square a) p)->(divides a p).\nProof.\nunfold square.\nintros;case (prime_mult p a a H H0);trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma prime_square : forall (p a:nat),(is_prime p)->(divides (square a) p)->(divides a p).\nProof.\n  unfold prime.\n  intros.\n  generalize (gcd_is_gcd a p);intro.\n  case (prime_gcd (gcd a p) p a H H1);intro;rewrite H2 in H1.\n  elim H1;intros.\n  elim H1;intros.\n  elim H2;intros.\n  elim H3;intros.\n  elim H4;intros.\n  elim H4;intros.\n  elim H4;intros.\n  elim H5;intros.\n  elim H5;intros.\n  elim H5;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6Qed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 111, characters 9-14:\nError: The reference prime was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": " number *)\nLemma is_prime_2 : (is_prime 2).\n  unfold is_prime.\n  split.\n  intro;discriminate.\n  intros.\n  elim H;destruct x;rewrite mult_comm.\n  intro;discriminate.\n  simpl.\n  case d.\n  simpl.\n  rewrite mult_comm;simpl;intro;discriminate.\n  intros.\n  inversion H0.\n  symmetry in H2.\n  case (plus_is_one n (x*(S n)) H2);intro.\n  elim a;intros.\n  left;rewrite H1;trivial.\n  elim a;intros.\n  right;rewrite H1;trivial.\nQed.\n\n(** if p is prime and not(p | a) then a and p are relatively prime *)\nLemma prime_div_gcd : forall (p a:nat),(is_prime p)->~(divides a p)->(rel_prime p a).\n  unfold is_prime.\n  unfold rel_prime.\n  intros.\n  unfold is_gcd;unfold is_cd.\n  split.\n  split;apply one_min_div.\n  intros.\n  elim H;intros.\n  elim H1;intros.\n  case (H3 d' H4);intro.\n  rewrite H6;apply divides_refl.\n  rewrite H6 in H5;tauto.\nQed.\n\n(** We show some lemmae about prime numbers *)\n(** if p is prime then gcd(a,p)=1 or gcd(a,p)=p *)\nLemma prime_gcd : forall (d p a:nat),(is_prime p)->(is_gcd d a p)->(d=1)\\/(d=p).\n  unfold is_prime.\n  intros.\n  elim H;intros.\n  apply H2.\n  elim H0;intros.\n  elim H3;trivial.\nQed.\n\n(** if p is prime and gcd(a,p)<>1 then p | a *)\nLemma prime_rel_prime : forall (p a:nat),(is_prime p)->~(rel_prime a p)->(divides a p).\n  unfold rel_prime.\n  intros.\n  generalize (gcd_is_gcd a p);intros.\n  case (prime_gcd (gcd a p) p a H H1);intro;rewrite H2 in H1;try tauto.\n  elim H1;intros.\n  elim H3;trivial.\nQed.\n\n(** if p is prime and p | a*b then p | a or p | b *)\nLemma prime_mult : forall (p a b:nat),(is_prime p)->(divides (a*b) p)->((divides a p)\\/(divides b p)).\n  intros.\n  generalize (gcd_is_gcd a p);intro.\n  case (prime_gcd (gcd a p) p a H H1);intro;rewrite H2 in H1.\n  right;apply gauss with a;trivial.\n  red in H1;elim H1;intros.\n  red in H3;tauto.\nQed.\n\n(** corollary: if p is prime and p | a^2 then p | a *)\nLemma prime_square : forall (p a:nat),(is_prime p)->(divides (square a) p)->(divides a p).\n  unfold square.\n  intros;case (prime_mult p a a H H0);trivial.\nQed.\n\n(** generalisation to power *)\n",
                "context_tokens": 727,
                "proof_start_offset": 3388,
                "proof_end_offset": 3666,
                "proof": "Lemma prime_power : forall (p n x:nat),(is_prime p)->(divides (power x n) p)->(divides x p).\nProof.\ninduction n;simpl;intros.\nelim H;intros.\nelim H1;apply divides_antisym;trivial;apply one_min_div.\ncase (prime_mult p x (power x n) H H0);trivial.\nintro;apply IHn;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma prime_power : forall (p n x:nat),(is_prime p)->(divides (power x n) p)->(divides x p).\n  unfold is_prime.\n  intros.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n  apply prime_div.\n Qed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 118, characters 8-17:\nError: The reference prime_div was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": "\n  left;rewrite H1;trivial.\n  elim a;intros.\n  right;rewrite H1;trivial.\nQed.\n\n(** if p is prime and not(p | a) then a and p are relatively prime *)\nLemma prime_div_gcd : forall (p a:nat),(is_prime p)->~(divides a p)->(rel_prime p a).\n  unfold is_prime.\n  unfold rel_prime.\n  intros.\n  unfold is_gcd;unfold is_cd.\n  split.\n  split;apply one_min_div.\n  intros.\n  elim H;intros.\n  elim H1;intros.\n  case (H3 d' H4);intro.\n  rewrite H6;apply divides_refl.\n  rewrite H6 in H5;tauto.\nQed.\n\n(** We show some lemmae about prime numbers *)\n(** if p is prime then gcd(a,p)=1 or gcd(a,p)=p *)\nLemma prime_gcd : forall (d p a:nat),(is_prime p)->(is_gcd d a p)->(d=1)\\/(d=p).\n  unfold is_prime.\n  intros.\n  elim H;intros.\n  apply H2.\n  elim H0;intros.\n  elim H3;trivial.\nQed.\n\n(** if p is prime and gcd(a,p)<>1 then p | a *)\nLemma prime_rel_prime : forall (p a:nat),(is_prime p)->~(rel_prime a p)->(divides a p).\n  unfold rel_prime.\n  intros.\n  generalize (gcd_is_gcd a p);intros.\n  case (prime_gcd (gcd a p) p a H H1);intro;rewrite H2 in H1;try tauto.\n  elim H1;intros.\n  elim H3;trivial.\nQed.\n\n(** if p is prime and p | a*b then p | a or p | b *)\nLemma prime_mult : forall (p a b:nat),(is_prime p)->(divides (a*b) p)->((divides a p)\\/(divides b p)).\n  intros.\n  generalize (gcd_is_gcd a p);intro.\n  case (prime_gcd (gcd a p) p a H H1);intro;rewrite H2 in H1.\n  right;apply gauss with a;trivial.\n  red in H1;elim H1;intros.\n  red in H3;tauto.\nQed.\n\n(** corollary: if p is prime and p | a^2 then p | a *)\nLemma prime_square : forall (p a:nat),(is_prime p)->(divides (square a) p)->(divides a p).\n  unfold square.\n  intros;case (prime_mult p a a H H0);trivial.\nQed.\n\n(** generalisation to power *)\nLemma prime_power : forall (p n x:nat),(is_prime p)->(divides (power x n) p)->(divides x p).\n  induction n;simpl;intros.\n  elim H;intros.\n  elim H1;apply divides_antisym;trivial;apply one_min_div.\n  case (prime_mult p x (power x n) H H0);trivial.\n  intro;apply IHn;trivial.\nQed.\n\n",
                "context_tokens": 709,
                "proof_start_offset": 3668,
                "proof_end_offset": 4798,
                "proof": "Lemma prime_power_qn : forall (p n q x:nat),(is_prime p)->(divides (power x n) (power p (q*n)))->(1<=n)->(divides x (power p q)).\nProof.\ninduction q;simpl;intros.\napply one_min_div.\nrewrite power_plus_lemma1 in H0.\nassert (divides x (power p q)).\napply IHq;trivial.\nelim H0;intros;exists ((power p n)*x0).\nrewrite H2;ring.\nelim H2;intros.\nrewrite H3 in H0.\nrewrite power_mult_lemma1 in H0;rewrite power_power_lemma1 in H0;rewrite (mult_comm (power p n)) in H0.\nelim H0;intros.\nassert ((power p (q*n))<>0).\nintro.\ngeneralize (power_zero (q*n) p H5).\nintro.\napply not_prime_zero.\nrewrite H6 in H;trivial.\nrewrite <- mult_assoc in H4.\ngeneralize (mult_lemma6 (power x0 n) ((power p n)*x1) (power p (q*n)) H5 H4).\nintro.\nassert (exists n':nat,n=(S n')).\ninversion H1;[exists 0 | exists m];trivial.\nelim H7;intro n';intro.\nrewrite H8 in H6;simpl in H6.\nassert (divides x0 p).\ncase (prime_mult p x0 (power x0 n'));trivial.\nrewrite H6.\nexists ((power p n')*x1);ring.\nintro.\napply prime_power with n';trivial.\nelim H9;intros.\nrewrite H10 in H3.\nrewrite H3.\nexists x2;ring.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma prime_power_qn : forall (p n q x:nat),(is_prime p)->(divides (power x n) (power p (q*n)))->(1<=n)->(divides x (power p q)).\n  unfold prime.\n  intros.\n  elim H;intros.\n  elim H1;intros.\n  elim H2;intros.\n  elim H3;intros.\n  elim H4;intros.\n  elim H5;intros.\n  elim H5;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;intros.\n  elim H6;Qed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 124, characters 9-14:\nError: The reference prime was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": " a*b then p | a or p | b *)\nLemma prime_mult : forall (p a b:nat),(is_prime p)->(divides (a*b) p)->((divides a p)\\/(divides b p)).\n  intros.\n  generalize (gcd_is_gcd a p);intro.\n  case (prime_gcd (gcd a p) p a H H1);intro;rewrite H2 in H1.\n  right;apply gauss with a;trivial.\n  red in H1;elim H1;intros.\n  red in H3;tauto.\nQed.\n\n(** corollary: if p is prime and p | a^2 then p | a *)\nLemma prime_square : forall (p a:nat),(is_prime p)->(divides (square a) p)->(divides a p).\n  unfold square.\n  intros;case (prime_mult p a a H H0);trivial.\nQed.\n\n(** generalisation to power *)\nLemma prime_power : forall (p n x:nat),(is_prime p)->(divides (power x n) p)->(divides x p).\n  induction n;simpl;intros.\n  elim H;intros.\n  elim H1;apply divides_antisym;trivial;apply one_min_div.\n  case (prime_mult p x (power x n) H H0);trivial.\n  intro;apply IHn;trivial.\nQed.\n\nLemma prime_power_qn : forall (p n q x:nat),(is_prime p)->(divides (power x n) (power p (q*n)))->(1<=n)->(divides x (power p q)).\n  induction q;simpl;intros.\n  apply one_min_div.\n  rewrite power_plus_lemma1 in H0.\n  assert (divides x (power p q)).\n  apply IHq;trivial.\n  elim H0;intros;exists ((power p n)*x0).\n  rewrite H2;ring.\n  elim H2;intros.\n  rewrite H3 in H0.\n  rewrite power_mult_lemma1 in H0;rewrite power_power_lemma1 in H0;rewrite (mult_comm (power p n)) in H0.\n  elim H0;intros.\n  assert ((power p (q*n))<>0).\n  intro.\n  generalize (power_zero (q*n) p H5).\n  intro.\n  apply not_prime_zero.\n  rewrite H6 in H;trivial.\n  rewrite <- mult_assoc in H4.\n  generalize (mult_lemma6 (power x0 n) ((power p n)*x1) (power p (q*n)) H5 H4).\n  intro.\n  assert (exists n':nat,n=(S n')).\n  inversion H1;[exists 0 | exists m];trivial.\n  elim H7;intro n';intro.\n  rewrite H8 in H6;simpl in H6.\n  assert (divides x0 p).\n  case (prime_mult p x0 (power x0 n'));trivial.\n  rewrite H6.\n  exists ((power p n')*x1);ring.\n  intro.\n  apply prime_power with n';trivial.\n  elim H9;intros.\n  rewrite H10 in H3.\n  rewrite H3.\n  exists x2;ring.\nQed.\n\n\n(** study of prime numbers *)\n",
                "context_tokens": 719,
                "proof_start_offset": 4831,
                "proof_end_offset": 5126,
                "proof": "Lemma divides_prime : forall (a:nat),(exists p:nat,(p<>a)/\\(is_prime p)/\\(divides a p)) -> ~(is_prime a).\nProof.\nintros;intro.\nelim H;intro p;intro.\nelim H1;intros.\nelim H3;intros.\nunfold is_prime in H0.\nelim H0;intros.\nunfold is_prime in H4.\nelim H4;intros.\ncase (H7 p H5);auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma divides_prime : forall (a:nat),(exists p:nat,(p<>a)/\\(is_prime p)/\\(divides a p)) -> ~(is_prime a).\nProof.\n  intros a Ha.\n  case (prime_mult a a); intros.\n  case (prime_mult a p); intros.\n  rewrite H1 in Ha.\n  elim (prime_mult a p); intros.\n  rewrite H2 in Ha.\n  elim (prime_mult a p); intros.\n  rewrite H1 in Ha.\n  elim (prime_mult a p); intros.\n  rewrite H2 in Ha.\n  elim (prime_mult a p); intros.\n  rewrite H3 in Ha.\n  elim (prime_mult a p); intros.\n  rewrite H3 in Ha.\n  elim (prime_mult a p); intros.\n  rewrite H4 in Ha.\n  elim (prime_mult a p); intros.\n  rewrite H4 in Ha.\n  elim (prime_mult a p); intros.\n  rewrite H4 in Ha.\n  elim (prime_mult a p); intros.\n  rewrite H4 in Ha.\n  elim (prime_mult a p); intros.\n  rewrite H4 in Ha.\n  elim (prime_mult a p); intros.\n  rewrite H4 in Ha.\n  elim (prime_mult a p); intros.\n  rewrite H4 in Ha.\n  elim (Qed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 165, characters 2-23:\nError: Unable to find an instance for the variable b.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": " prime_square : forall (p a:nat),(is_prime p)->(divides (square a) p)->(divides a p).\n  unfold square.\n  intros;case (prime_mult p a a H H0);trivial.\nQed.\n\n(** generalisation to power *)\nLemma prime_power : forall (p n x:nat),(is_prime p)->(divides (power x n) p)->(divides x p).\n  induction n;simpl;intros.\n  elim H;intros.\n  elim H1;apply divides_antisym;trivial;apply one_min_div.\n  case (prime_mult p x (power x n) H H0);trivial.\n  intro;apply IHn;trivial.\nQed.\n\nLemma prime_power_qn : forall (p n q x:nat),(is_prime p)->(divides (power x n) (power p (q*n)))->(1<=n)->(divides x (power p q)).\n  induction q;simpl;intros.\n  apply one_min_div.\n  rewrite power_plus_lemma1 in H0.\n  assert (divides x (power p q)).\n  apply IHq;trivial.\n  elim H0;intros;exists ((power p n)*x0).\n  rewrite H2;ring.\n  elim H2;intros.\n  rewrite H3 in H0.\n  rewrite power_mult_lemma1 in H0;rewrite power_power_lemma1 in H0;rewrite (mult_comm (power p n)) in H0.\n  elim H0;intros.\n  assert ((power p (q*n))<>0).\n  intro.\n  generalize (power_zero (q*n) p H5).\n  intro.\n  apply not_prime_zero.\n  rewrite H6 in H;trivial.\n  rewrite <- mult_assoc in H4.\n  generalize (mult_lemma6 (power x0 n) ((power p n)*x1) (power p (q*n)) H5 H4).\n  intro.\n  assert (exists n':nat,n=(S n')).\n  inversion H1;[exists 0 | exists m];trivial.\n  elim H7;intro n';intro.\n  rewrite H8 in H6;simpl in H6.\n  assert (divides x0 p).\n  case (prime_mult p x0 (power x0 n'));trivial.\n  rewrite H6.\n  exists ((power p n')*x1);ring.\n  intro.\n  apply prime_power with n';trivial.\n  elim H9;intros.\n  rewrite H10 in H3.\n  rewrite H3.\n  exists x2;ring.\nQed.\n\n\n(** study of prime numbers *)\nLemma divides_prime : forall (a:nat),(exists p:nat,(p<>a)/\\(is_prime p)/\\(divides a p)) -> ~(is_prime a).\n  intros;intro.\n  elim H;intro p;intro.\n  elim H1;intros.\n  elim H3;intros.\n  unfold is_prime in H0.\n  elim H0;intros.\n  unfold is_prime in H4.\n  elim H4;intros.\n  case (H7 p H5);auto.\nQed.\n\n(** p<>1 is prime if forall n, gcd(n,p)=1 or gcd(n,p)=p *)\n",
                "context_tokens": 713,
                "proof_start_offset": 5187,
                "proof_end_offset": 5475,
                "proof": "Lemma gcd_prime : forall (p:nat),(p<>1)->(forall (d a:nat),(is_gcd d a p)->(d=1)\\/(d=p))->(is_prime p).\nProof.\nintros.\nsplit;try tauto.\nintro d';intro.\nassert (is_gcd d' d' p).\nunfold is_gcd;unfold is_cd.\nsplit;[split;[apply divides_refl | tauto] | tauto].\neapply H0;apply H2.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma gcd_prime : forall (p:nat),(p<>1)->(forall (d a:nat),(is_gcd d a p)->(d=1)\\/(d=p))->(is_prime p).\n  intros; elim H;intro p;unfold is_prime in |- *; intros.\n  elim H1;intros.\n  unfold is_prime in H1.\n  elim H1;intros.\n  unfold is_prime in H1.\n  elim H1;intros.\n  unfold is_prime in H1.\n  elim H1;intros.\n  unfold is_prime in H1.\n  elim H1;intros.\n  unfold is_prime in H1.\n  elim H1;intros.\n  unfold is_prime in H1.\n  elim H1;intros.\n  unfold is_prime in H1.\n  elim H1;intros.\n  unfold is_prime in H1.\n  elim H1;intros.\n  unfold is_prime in H1.\n  elim H1;intros.\n  unfold is_prime in H1.\n  elim H1;intros.\n  unfold is_prime in H1.\n  elim H1;intros.\n  unfold is_prime in H1.\n  elim H1;intros.\n  unfold is_prime in H1.\n  elim H1;intros.\n  unfold is_prime in H1.\n  elim H1;intros.\n  unfold is_prime in HQed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 176, characters 17-24:\nError:\nLtac call to \"intro (ident)\" failed.\nNo product even after head-reduction.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": " n) H H0);trivial.\n  intro;apply IHn;trivial.\nQed.\n\nLemma prime_power_qn : forall (p n q x:nat),(is_prime p)->(divides (power x n) (power p (q*n)))->(1<=n)->(divides x (power p q)).\n  induction q;simpl;intros.\n  apply one_min_div.\n  rewrite power_plus_lemma1 in H0.\n  assert (divides x (power p q)).\n  apply IHq;trivial.\n  elim H0;intros;exists ((power p n)*x0).\n  rewrite H2;ring.\n  elim H2;intros.\n  rewrite H3 in H0.\n  rewrite power_mult_lemma1 in H0;rewrite power_power_lemma1 in H0;rewrite (mult_comm (power p n)) in H0.\n  elim H0;intros.\n  assert ((power p (q*n))<>0).\n  intro.\n  generalize (power_zero (q*n) p H5).\n  intro.\n  apply not_prime_zero.\n  rewrite H6 in H;trivial.\n  rewrite <- mult_assoc in H4.\n  generalize (mult_lemma6 (power x0 n) ((power p n)*x1) (power p (q*n)) H5 H4).\n  intro.\n  assert (exists n':nat,n=(S n')).\n  inversion H1;[exists 0 | exists m];trivial.\n  elim H7;intro n';intro.\n  rewrite H8 in H6;simpl in H6.\n  assert (divides x0 p).\n  case (prime_mult p x0 (power x0 n'));trivial.\n  rewrite H6.\n  exists ((power p n')*x1);ring.\n  intro.\n  apply prime_power with n';trivial.\n  elim H9;intros.\n  rewrite H10 in H3.\n  rewrite H3.\n  exists x2;ring.\nQed.\n\n\n(** study of prime numbers *)\nLemma divides_prime : forall (a:nat),(exists p:nat,(p<>a)/\\(is_prime p)/\\(divides a p)) -> ~(is_prime a).\n  intros;intro.\n  elim H;intro p;intro.\n  elim H1;intros.\n  elim H3;intros.\n  unfold is_prime in H0.\n  elim H0;intros.\n  unfold is_prime in H4.\n  elim H4;intros.\n  case (H7 p H5);auto.\nQed.\n\n(** p<>1 is prime if forall n, gcd(n,p)=1 or gcd(n,p)=p *)\nLemma gcd_prime : forall (p:nat),(p<>1)->(forall (d a:nat),(is_gcd d a p)->(d=1)\\/(d=p))->(is_prime p).\n  intros.\n  split;try tauto.\n  intro d';intro.\n  assert (is_gcd d' d' p).\n  unfold is_gcd;unfold is_cd.\n  split;[split;[apply divides_refl | tauto] | tauto].\n  eapply H0;apply H2.\nQed.\n\n(** p is prime iff forall n, n<>1 /\\ n<>p -> not(a | p) *)\n",
                "context_tokens": 714,
                "proof_start_offset": 5536,
                "proof_end_offset": 5890,
                "proof": "Lemma prime_cond : forall (p:nat),((p<>1)/\\(forall (a:nat),(a<>1)->(a<>p)->~(divides p a))<->(is_prime p)).\nProof.\nsplit;intros.\nelim H;intros.\nsplit;try tauto.\nintros.\ncase (eq_nat_dec d 1);intro;try tauto.\ncase (eq_nat_dec d p);intro;try tauto.\nelim (H1 d n n0 H2).\nelim H;intros.\nsplit;try tauto.\nintros;intro.\nelim (H1 a H4);auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma prime_cond : forall (p:nat),((p<>1)/\\(forall (a:nat),(a<>1)->(a<>p)->~(divides p a))<->(is_prime p)).\nProof.\n  intros.\n  elim H;intro p;intro p; elim p;intro p; elim p;intro p; elim p;intro p;\n   [ elim p;intro p; elim p;intro p; elim p;intro p; elim p;intro p;\n   | elim p;intro p; elim p;intro p; elim p;intro p; elim p;intro p;\n   | elim p;intro p; elim p;intro p; elim p;intro p; elim p;\n   | elim p;intro p; elim p;intro p; elim p;intro p; elim p;\n   | elim p;intro p; elim p;intro p; elim p; intro p; elim p;\n   | elim p;intro p; elim p; intro p; elim p; elim p;\n   | elim p;intro p; elim p; intro p; elim p; elim p; intro p;\n   | elim p; intro p; elim p; intro p; elim p; elim p;\n   | elim p; intro p; elim p; intro p; elim p; elim p;\n   | elim p; intro p; elim p; intro p; elim p; elimQed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 191, characters 3-4:\nError:\nSyntax error: [tactic:binder_tactic] or [tactic:tactic_expr] or [tactic_then_locality] expected after ';' (in [tactic:tactic_expr]).\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": "\n  elim H2;intros.\n  rewrite H3 in H0.\n  rewrite power_mult_lemma1 in H0;rewrite power_power_lemma1 in H0;rewrite (mult_comm (power p n)) in H0.\n  elim H0;intros.\n  assert ((power p (q*n))<>0).\n  intro.\n  generalize (power_zero (q*n) p H5).\n  intro.\n  apply not_prime_zero.\n  rewrite H6 in H;trivial.\n  rewrite <- mult_assoc in H4.\n  generalize (mult_lemma6 (power x0 n) ((power p n)*x1) (power p (q*n)) H5 H4).\n  intro.\n  assert (exists n':nat,n=(S n')).\n  inversion H1;[exists 0 | exists m];trivial.\n  elim H7;intro n';intro.\n  rewrite H8 in H6;simpl in H6.\n  assert (divides x0 p).\n  case (prime_mult p x0 (power x0 n'));trivial.\n  rewrite H6.\n  exists ((power p n')*x1);ring.\n  intro.\n  apply prime_power with n';trivial.\n  elim H9;intros.\n  rewrite H10 in H3.\n  rewrite H3.\n  exists x2;ring.\nQed.\n\n\n(** study of prime numbers *)\nLemma divides_prime : forall (a:nat),(exists p:nat,(p<>a)/\\(is_prime p)/\\(divides a p)) -> ~(is_prime a).\n  intros;intro.\n  elim H;intro p;intro.\n  elim H1;intros.\n  elim H3;intros.\n  unfold is_prime in H0.\n  elim H0;intros.\n  unfold is_prime in H4.\n  elim H4;intros.\n  case (H7 p H5);auto.\nQed.\n\n(** p<>1 is prime if forall n, gcd(n,p)=1 or gcd(n,p)=p *)\nLemma gcd_prime : forall (p:nat),(p<>1)->(forall (d a:nat),(is_gcd d a p)->(d=1)\\/(d=p))->(is_prime p).\n  intros.\n  split;try tauto.\n  intro d';intro.\n  assert (is_gcd d' d' p).\n  unfold is_gcd;unfold is_cd.\n  split;[split;[apply divides_refl | tauto] | tauto].\n  eapply H0;apply H2.\nQed.\n\n(** p is prime iff forall n, n<>1 /\\ n<>p -> not(a | p) *)\nLemma prime_cond : forall (p:nat),((p<>1)/\\(forall (a:nat),(a<>1)->(a<>p)->~(divides p a))<->(is_prime p)).\n  split;intros.\n  elim H;intros.\n  split;try tauto.\n  intros.\n  case (eq_nat_dec d 1);intro;try tauto.\n  case (eq_nat_dec d p);intro;try tauto.\n  elim (H1 d n n0 H2).\n  elim H;intros.\n  split;try tauto.\n  intros;intro.\n  elim (H1 a H4);auto.\nQed.\n\n(** a number n is either prime or not (it is decidable) *)\n",
                "context_tokens": 734,
                "proof_start_offset": 5951,
                "proof_end_offset": 6368,
                "proof": "Lemma prime_dec : forall (n:nat),{is_prime n}+{~(is_prime n)}.\nProof.\nintro.\ncase (divides_nat n);intro.\nelim s;intros.\nright;intro.\nunfold is_prime in H.\nelim H;intros.\nelim (H1 x);try tauto.\ncase (eq_nat_dec n 1);intro.\nright;unfold is_prime;tauto.\nleft;unfold is_prime.\nsplit;trivial.\nintros.\ncase (eq_nat_dec d 1);try tauto.\ncase (eq_nat_dec d n);try tauto;intros.\nelim (n0 d n3 n2 H).\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma prime_dec : forall (n:nat),{is_prime n}+{~(is_prime n)}.\nProof.\n  intros.\n  elim H;intros.\n  elim H;intros.\n  unfold is_prime in H.\n  elim H;intros.\n  unfold is_prime in H.\n  elim H;intros.\n  unfold is_prime in H.\n  elim H;intros.\n  unfold is_prime in H.\n  elim H;intros.\n  unfold is_prime in H.\n  elim H;intros.\n  unfold is_prime in H.\n  elim H;intros.\n  unfold is_prime in H.\n  elim H;intros.\n  unfold is_prime in H.\n  elim H;intros.\n  unfold is_prime in H.\n  elim H;intros.\n  unfold is_prime in H.\n  elim H;intros.\n  unfold is_prime in H.\n  elim H;intros.\n  unfold is_prime in H.\n  elim H;intros.\n  unfold is_prime in H.\n  elim H;intros.\n  unfold is_prime in H.\n  elim H;intros.\n  unfold is_prime in H.\n  elim H;intros.\n  unfold is_prime in H.\n  elim H;intros.\n  unfold is_prime in H.\n  elim H;intros.Qed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 204, characters 7-8:\nError: The reference H was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": ".\n  assert (divides x0 p).\n  case (prime_mult p x0 (power x0 n'));trivial.\n  rewrite H6.\n  exists ((power p n')*x1);ring.\n  intro.\n  apply prime_power with n';trivial.\n  elim H9;intros.\n  rewrite H10 in H3.\n  rewrite H3.\n  exists x2;ring.\nQed.\n\n\n(** study of prime numbers *)\nLemma divides_prime : forall (a:nat),(exists p:nat,(p<>a)/\\(is_prime p)/\\(divides a p)) -> ~(is_prime a).\n  intros;intro.\n  elim H;intro p;intro.\n  elim H1;intros.\n  elim H3;intros.\n  unfold is_prime in H0.\n  elim H0;intros.\n  unfold is_prime in H4.\n  elim H4;intros.\n  case (H7 p H5);auto.\nQed.\n\n(** p<>1 is prime if forall n, gcd(n,p)=1 or gcd(n,p)=p *)\nLemma gcd_prime : forall (p:nat),(p<>1)->(forall (d a:nat),(is_gcd d a p)->(d=1)\\/(d=p))->(is_prime p).\n  intros.\n  split;try tauto.\n  intro d';intro.\n  assert (is_gcd d' d' p).\n  unfold is_gcd;unfold is_cd.\n  split;[split;[apply divides_refl | tauto] | tauto].\n  eapply H0;apply H2.\nQed.\n\n(** p is prime iff forall n, n<>1 /\\ n<>p -> not(a | p) *)\nLemma prime_cond : forall (p:nat),((p<>1)/\\(forall (a:nat),(a<>1)->(a<>p)->~(divides p a))<->(is_prime p)).\n  split;intros.\n  elim H;intros.\n  split;try tauto.\n  intros.\n  case (eq_nat_dec d 1);intro;try tauto.\n  case (eq_nat_dec d p);intro;try tauto.\n  elim (H1 d n n0 H2).\n  elim H;intros.\n  split;try tauto.\n  intros;intro.\n  elim (H1 a H4);auto.\nQed.\n\n(** a number n is either prime or not (it is decidable) *)\nLemma prime_dec : forall (n:nat),{is_prime n}+{~(is_prime n)}.\n  intro.\n  case (divides_nat n);intro.\n  elim s;intros.\n  right;intro.\n  unfold is_prime in H.\n  elim H;intros.\n  elim (H1 x);try tauto.\n  case (eq_nat_dec n 1);intro.\n  right;unfold is_prime;tauto.\n  left;unfold is_prime.\n  split;trivial.\n  intros.\n  case (eq_nat_dec d 1);try tauto.\n  case (eq_nat_dec d n);try tauto;intros.\n  elim (n0 d n3 n2 H).\nQed.\n\n(** if n is not prime then either n = 1 or there is a prime number p such that p | n *)\n",
                "context_tokens": 711,
                "proof_start_offset": 6458,
                "proof_end_offset": 7237,
                "proof": "Lemma not_prime_impl_prime_divides : forall (n:nat),(~(is_prime n)->({p:nat | (is_prime p)/\\(divides n p)}+{n=1})).\nProof.\nintro.\napply (lt_wf_rec n (fun n:nat => ~(is_prime n)->({p:nat | (is_prime p)/\\(divides n p)}+{n=1})));intros.\ncase (eq_nat_dec n0 1);try tauto;intro.\ncase (eq_nat_dec n0 0);intro.\nleft;exists 2.\nsplit;[apply is_prime_2 | rewrite e;apply zero_max_div].\ncase (divides_nat n0);intro.\nelim s;intro d;intro.\nelim p;intros.\nelim H2;intros.\nassert (d<n0).\ngeneralize (divides_le n0 d n2 H4);omega.\ncase (prime_dec d);intro.\nleft;exists d;tauto.\nelim (H d H5 n3);try tauto.\nintro.\nelim a;intro q;intro.\nleft;exists q.\nsplit;try tauto.\napply divides_trans with d;try tauto.\nelim (prime_cond n0);intros;elim H0;apply H1;auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma not_prime_impl_prime_divides : forall (n:nat),(~(is_prime n)->({p:nat | (is_prime p)/\\(divides n p)}+{n=1})).\nProof.\n  intro.\n  case (prime_dec n);intro.\n  left;intro.\n  elim (prime_dec n p);intro.\n  right;intro.\n  elim (prime_dec n p);intro.\n  right;intro.\n  elim (prime_dec n p);intro.\n  right;intro.\n  elim (prime_dec n p);intro.\n  right;intro.\n  elim (prime_dec n p);intro.\n  right;intro.\n  elim (prime_dec n p);intro.\n  right;intro.\n  elim (prime_dec n p);intro.\n  right;intro.\n  elim (prime_dec n p);intro.\n  right;intro.\n  elim (prime_dec n p);intro.\n  right;intro.\n  elim (prime_dec n p);intro.\n  right;intro.\n  elim (prime_dec n p);intro.\n  right;intro.\n  elim (prime_dec n p);intro.\n  right;intro.\n  elim (prime_dec n p);intro.\n  right;intro.\n  elim (prime_dec n p);intro.\n  right;intro.\n  elim (prime_dec n p);intro.Qed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 224, characters 7-12:\nError: Ltac call to \"intro\" failed.\n       No product even after head-reduction.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": " H0;apply H2.\nQed.\n\n(** p is prime iff forall n, n<>1 /\\ n<>p -> not(a | p) *)\nLemma prime_cond : forall (p:nat),((p<>1)/\\(forall (a:nat),(a<>1)->(a<>p)->~(divides p a))<->(is_prime p)).\n  split;intros.\n  elim H;intros.\n  split;try tauto.\n  intros.\n  case (eq_nat_dec d 1);intro;try tauto.\n  case (eq_nat_dec d p);intro;try tauto.\n  elim (H1 d n n0 H2).\n  elim H;intros.\n  split;try tauto.\n  intros;intro.\n  elim (H1 a H4);auto.\nQed.\n\n(** a number n is either prime or not (it is decidable) *)\nLemma prime_dec : forall (n:nat),{is_prime n}+{~(is_prime n)}.\n  intro.\n  case (divides_nat n);intro.\n  elim s;intros.\n  right;intro.\n  unfold is_prime in H.\n  elim H;intros.\n  elim (H1 x);try tauto.\n  case (eq_nat_dec n 1);intro.\n  right;unfold is_prime;tauto.\n  left;unfold is_prime.\n  split;trivial.\n  intros.\n  case (eq_nat_dec d 1);try tauto.\n  case (eq_nat_dec d n);try tauto;intros.\n  elim (n0 d n3 n2 H).\nQed.\n\n(** if n is not prime then either n = 1 or there is a prime number p such that p | n *)\nLemma not_prime_impl_prime_divides : forall (n:nat),(~(is_prime n)->({p:nat | (is_prime p)/\\(divides n p)}+{n=1})).\n  intro.\n  apply (lt_wf_rec n (fun n:nat => ~(is_prime n)->({p:nat | (is_prime p)/\\(divides n p)}+{n=1})));intros.\n  case (eq_nat_dec n0 1);try tauto;intro.\n  case (eq_nat_dec n0 0);intro.\n  left;exists 2.\n  split;[apply is_prime_2 | rewrite e;apply zero_max_div].\n  case (divides_nat n0);intro.\n  elim s;intro d;intro.\n  elim p;intros.\n  elim H2;intros.\n  assert (d<n0).\n  generalize (divides_le n0 d n2 H4);omega.\n  case (prime_dec d);intro.\n  left;exists d;tauto.\n  elim (H d H5 n3);try tauto.\n  intro.\n  elim a;intro q;intro.\n  left;exists q.\n  split;try tauto.\n  apply divides_trans with d;try tauto.\n  elim (prime_cond n0);intros;elim H0;apply H1;auto.\nQed.\n\n(** if n<>0 and p is a prime number then there is m such that p^m | n and not(p^(m+1) | n) *)\n",
                "context_tokens": 710,
                "proof_start_offset": 7333,
                "proof_end_offset": 8614,
                "proof": "Lemma nat_factor : forall (n p:nat),(is_prime p)->(n<>0)->{m:nat | (divides n (power p m))/\\~(divides n (power p (m+1)))}.\nProof.\nintros n p H.\napply (lt_wf_rec n (fun n:nat => n <> 0 -> {m : nat | divides n (power p m) /\\ ~ divides n (power p (m + 1))}));intros.\ncase (divides_dec n0 p);intro.\ngeneralize (quo_is_quo n0 p d);intro.\nelim (H0 (quo n0 p d)).\nintro m;intros.\nexists (m+1).\nelim p0;intros.\nelim H3;intros.\nrewrite H5 in H2;rewrite mult_assoc in H2.\nrewrite plus_comm.\nsplit;simpl.\nexists x;trivial.\nrewrite plus_comm;simpl.\nrewrite (mult_comm p (power p m));rewrite mult_assoc;intro.\nelim H6;intros.\nrewrite H2 in H7.\nassert (p<>0).\nintro.\nrewrite H8 in H.\napply not_prime_zero;trivial.\nassert ((power p m)*x=(power p m)*p*x0).\napply mult_lemma6 with p;trivial.\nrewrite mult_assoc;rewrite H7;ring.\nrewrite <- H5 in H9;rewrite (mult_comm (power p m) p) in H9.\napply H4.\nrewrite plus_comm;simpl.\nexists x0;trivial.\nrewrite mult_comm in H2;rewrite H2;apply mult_lemma3.\nintro.\napply H1;rewrite H2;rewrite H3;trivial.\nelim H.\nintros.\ndestruct p;omega.\nintro;apply H1.\nrewrite H2;rewrite H3;ring.\nexists 0;simpl.\nsplit.\napply one_min_div.\nrewrite mult_comm;simpl;rewrite plus_comm;simpl;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma nat_factor : forall (n p:nat),(is_prime p)->(n<>0)->{m:nat | (divides n (power p m))/\\~(divides n (power p (m+1)))}.\nProof.\n intros.\n destruct (le_gt_dec n m);\n [ left | right; apply is_prime_not_prime_divides; auto ].\n right; apply is_prime_not_prime_divides; auto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 248, characters 23-24:\nError: The reference m was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": "_nat n0);intro.\n  elim s;intro d;intro.\n  elim p;intros.\n  elim H2;intros.\n  assert (d<n0).\n  generalize (divides_le n0 d n2 H4);omega.\n  case (prime_dec d);intro.\n  left;exists d;tauto.\n  elim (H d H5 n3);try tauto.\n  intro.\n  elim a;intro q;intro.\n  left;exists q.\n  split;try tauto.\n  apply divides_trans with d;try tauto.\n  elim (prime_cond n0);intros;elim H0;apply H1;auto.\nQed.\n\n(** if n<>0 and p is a prime number then there is m such that p^m | n and not(p^(m+1) | n) *)\nLemma nat_factor : forall (n p:nat),(is_prime p)->(n<>0)->{m:nat | (divides n (power p m))/\\~(divides n (power p (m+1)))}.\n  intros n p H.\n  apply (lt_wf_rec n (fun n:nat => n <> 0 -> {m : nat | divides n (power p m) /\\ ~ divides n (power p (m + 1))}));intros.\n  case (divides_dec n0 p);intro.\n  generalize (quo_is_quo n0 p d);intro.\n  elim (H0 (quo n0 p d)).\n  intro m;intros.\n  exists (m+1).\n  elim p0;intros.\n  elim H3;intros.\n  rewrite H5 in H2;rewrite mult_assoc in H2.\n  rewrite plus_comm.\n  split;simpl.\n  exists x;trivial.\n  rewrite plus_comm;simpl.\n  rewrite (mult_comm p (power p m));rewrite mult_assoc;intro.\n  elim H6;intros.\n  rewrite H2 in H7.\n  assert (p<>0).\n  intro.\n  rewrite H8 in H.\n  apply not_prime_zero;trivial.\n  assert ((power p m)*x=(power p m)*p*x0).\n  apply mult_lemma6 with p;trivial.\n  rewrite mult_assoc;rewrite H7;ring.\n  rewrite <- H5 in H9;rewrite (mult_comm (power p m) p) in H9.\n  apply H4.\n  rewrite plus_comm;simpl.\n  exists x0;trivial.\n  rewrite mult_comm in H2;rewrite H2;apply mult_lemma3.\n  intro.\n  apply H1;rewrite H2;rewrite H3;trivial.\n  elim H.\n  intros.\n  destruct p;omega.\n  intro;apply H1.\n  rewrite H2;rewrite H3;ring.\n  exists 0;simpl.\n  split.\n  apply one_min_div.\n  rewrite mult_comm;simpl;rewrite plus_comm;simpl;trivial.\nQed.\n\n(** if n>1 then there is a prime number p and two integers m and q with m>0 and q<n such that n=p^m*q and gcd(p,q)=1 *)\n",
                "context_tokens": 686,
                "proof_start_offset": 8736,
                "proof_end_offset": 10293,
                "proof": "Lemma nat_factor_prime : forall (n:nat),(n<>0)->(n<>1)->{p:nat & {m:nat & {q:nat | (is_prime p)/\\(m>0)/\\(n=(power p m)*q)/\\(is_gcd 1 p q)/\\(q<n)}}}.\nProof.\nintros.\ncase (prime_dec n);intro.\nexists n;exists 1;exists 1;simpl.\nsplit;try tauto.\nsplit;try omega.\nsplit;try ring.\nsplit;try omega.\napply gcd_sym;apply gcd_one.\nelim (not_prime_impl_prime_divides n n0);intro;try tauto.\nelim a;intro p;intro.\nelim p0;intros.\nelim (nat_factor n p H1).\nintro m;intro.\nelim p1;intros.\nexists p;exists m;exists (quo n (power p m) H3).\nsplit;trivial.\nsplit.\ndestruct m;try omega.\nelim H4;simpl;rewrite mult_comm;simpl;rewrite plus_comm;simpl;trivial.\nsplit.\napply (quo_is_quo n (power p m) H3).\ngeneralize (gcd_is_gcd p (quo n (power p m) H3));intro.\nassert ((gcd p (quo n (power p m) H3))=1).\ncase (prime_gcd (gcd p (quo n (power p m) H3)) p (quo n (power p m) H3));trivial.\napply gcd_sym;trivial.\nintro.\nrewrite H6 in H5;elim H5;intros.\nelim H7;intros.\nelim H4;rewrite plus_comm;simpl.\ngeneralize (quo_is_quo n (power p m) H3);intro.\nelim H10;intros.\nrewrite H12 in H11.\nexists x;rewrite H11;ring.\nrewrite H6 in H5;trivial.\ngeneralize (quo_is_quo n (power p m) H3);intro.\nsplit;trivial.\nrewrite H7;rewrite mult_comm;apply mult_lemma3.\nintro.\napply H;rewrite H7.\nrewrite H8;ring.\nred;apply power_lt.\ndestruct p.\nelim (not_prime_zero H1).\ndestruct p;try omega.\nelim H1;tauto.\ndestruct m;try omega.\nelim H4;simpl;rewrite mult_comm;simpl;rewrite plus_comm;simpl;trivial.\ntrivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma nat_factor_prime : forall (n:nat),(n<>0)->(n<>1)->{p:nat & {m:nat & {q:nat | (is_prime p)/\\(m>0)/\\(n=(power p m)*q)/\\(is_gcd 1 p q)/\\(q<n)}}}.\nProof.\n  intros n p H.\n  apply (lt_wf_ind n (fun n:nat => n <> 0 -> {m:nat & {q:nat | (is_prime p)}}).\n  apply (lt_wf_ind n (fun n:nat => n <> 0 -> {m:nat & {q:nat | (is_prime p)}}).\n  apply (lt_wf_ind n (fun n:nat => n <> 0 -> {m:nat & {q:nat | (is_prime p)}}).\n  apply (lt_wf_ind n (fun n:nat => n <> 0 -> {m:nat & {q:nat | (is_prime p)}}).\n  apply (lt_wf_ind n (fun n:nat => n <> 0 -> {m:nat & {q:nat | (is_prime p)}}).\n  apply (lt_wf_ind n (fun n:nat => n <> 0 -> {m:nat & {q:nat | (is_prime p)}}).\n  apply (lt_wf_ind n (fun n:nat => n <> 0 -> {m:nat & {q:nat | (isQed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 292, characters 78-79:\nError:\nSyntax error: '|' or ',' or ')' expected after [constr:operconstr level 200] (in [constr:operconstr]).\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": " omega.\n  apply gcd_sym;apply gcd_one.\n  elim (not_prime_impl_prime_divides n n0);intro;try tauto.\n  elim a;intro p;intro.\n  elim p0;intros.\n  elim (nat_factor n p H1).\n  intro m;intro.\n  elim p1;intros.\n  exists p;exists m;exists (quo n (power p m) H3).\n  split;trivial.\n  split.\n  destruct m;try omega.\n  elim H4;simpl;rewrite mult_comm;simpl;rewrite plus_comm;simpl;trivial.\n  split.\n  apply (quo_is_quo n (power p m) H3).\n  generalize (gcd_is_gcd p (quo n (power p m) H3));intro.\n  assert ((gcd p (quo n (power p m) H3))=1).\n  case (prime_gcd (gcd p (quo n (power p m) H3)) p (quo n (power p m) H3));trivial.\n  apply gcd_sym;trivial.\n  intro.\n  rewrite H6 in H5;elim H5;intros.\n  elim H7;intros.\n  elim H4;rewrite plus_comm;simpl.\n  generalize (quo_is_quo n (power p m) H3);intro.\n  elim H10;intros.\n  rewrite H12 in H11.\n  exists x;rewrite H11;ring.\n  rewrite H6 in H5;trivial.\n  generalize (quo_is_quo n (power p m) H3);intro.\n  split;trivial.\n  rewrite H7;rewrite mult_comm;apply mult_lemma3.\n  intro.\n  apply H;rewrite H7.\n  rewrite H8;ring.\n  red;apply power_lt.\n  destruct p.\n  elim (not_prime_zero H1).\n  destruct p;try omega.\n  elim H1;tauto.\n  destruct m;try omega.\n  elim H4;simpl;rewrite mult_comm;simpl;rewrite plus_comm;simpl;trivial.\n  trivial.\nQed.\n\n(** this compute p1^n1*p2^n2*...*pm^nm if l = (p1,n1)::(p2,n2)::...::(pm,nm) *)\nFixpoint refactor (l:(list (nat*nat))) {struct l} : nat :=\n  match l with\n    nil => 1\n    | (cons (p,n) tail) => (power p n)*(refactor tail)\n  end.\n\n(** a list l is well-formed (is a factorisation) if whenever (p,n) is in l then p is prime and n>0 and p is relatively prime to (refactor (l\\(p,n))) and l\\(p,n) is well-formed *)\nInductive is_wf : (list (nat*nat))->Prop :=\n  nil_is_wf : (is_wf nil)\n|cons_is_wf : forall (p n:nat)(tail:(list (nat*nat))),(is_prime p)->(n>0)->(is_wf tail)->(rel_prime p (refactor tail))->(is_wf (cons (p,n) tail)).\n\n(** this gives an inefficient algorithm to compute a factorisation of n *)\n",
                "context_tokens": 720,
                "proof_start_offset": 10997,
                "proof_end_offset": 12081,
                "proof": "Lemma factorisation : forall (n:nat),{l:(list (nat*nat)) | (is_wf l)/\\n=(refactor l)}+{n=0}.\nProof.\nintro.\ncase (eq_nat_dec n 0);intro.\nright;trivial.\ncase (eq_nat_dec n 1).\nintro;left;exists (nil (A:=nat*nat)).\nsplit;[apply nil_is_wf | simpl;trivial].\ngeneralize n0.\napply (lt_wf_rec n (fun n:nat => n<>0 -> n <> 1 -> {l : list (nat * nat) | is_wf l /\\ n = refactor l}+{n=0}));intros.\nelim (nat_factor_prime n1 H0 H1).\nintro p;intro.\nelim p0;intro m;intro.\nelim p1;intro q;intro.\nelim p2;intros.\nelim H3;intros.\nelim H5;intros.\nelim H7;intros.\ncase (eq_nat_dec q 1);intro.\nleft;exists (cons (p,m) nil);simpl;rewrite e in H6.\nsplit;trivial.\napply cons_is_wf;auto;try (apply nil_is_wf).\nunfold rel_prime;simpl;rewrite e in H8;trivial.\nassert (q<>0).\nintro;rewrite H10 in H6;rewrite mult_comm in H6;simpl in H6;auto.\nelim (H q H9 H10 n2).\nintro.\nelim a;intro l;intro.\nelim p3;intros.\nleft;exists (cons (p,m) l);simpl;rewrite H12 in H6;split;trivial.\napply cons_is_wf;auto.\nrewrite <- H12;unfold rel_prime;trivial.\nintro;tauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma factorisation : forall (n:nat),{l:(list (nat*nat)) | (is_wf l)/\\n=(refactor l)}+{n=0}.\nProof.\nintros n; induction n; simpl; auto.\ndestruct n; simpl; auto.\ndestruct n; simpl; auto.\ndestruct n; simpl; auto.\ndestruct n; simpl; auto.\ndestruct n; simpl; auto.\ndestruct n; simpl; auto.\ndestruct n; simpl; auto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 357, characters 9-10:\nError: The reference n was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": "n1*p2^n2*...*pm^nm if l = (p1,n1)::(p2,n2)::...::(pm,nm) *)\nFixpoint refactor (l:(list (nat*nat))) {struct l} : nat :=\n  match l with\n    nil => 1\n    | (cons (p,n) tail) => (power p n)*(refactor tail)\n  end.\n\n(** a list l is well-formed (is a factorisation) if whenever (p,n) is in l then p is prime and n>0 and p is relatively prime to (refactor (l\\(p,n))) and l\\(p,n) is well-formed *)\nInductive is_wf : (list (nat*nat))->Prop :=\n  nil_is_wf : (is_wf nil)\n|cons_is_wf : forall (p n:nat)(tail:(list (nat*nat))),(is_prime p)->(n>0)->(is_wf tail)->(rel_prime p (refactor tail))->(is_wf (cons (p,n) tail)).\n\n(** this gives an inefficient algorithm to compute a factorisation of n *)\nLemma factorisation : forall (n:nat),{l:(list (nat*nat)) | (is_wf l)/\\n=(refactor l)}+{n=0}.\n  intro.\n  case (eq_nat_dec n 0);intro.\n  right;trivial.\n  case (eq_nat_dec n 1).\n  intro;left;exists (nil (A:=nat*nat)).\n  split;[apply nil_is_wf | simpl;trivial].\n  generalize n0.\n  apply (lt_wf_rec n (fun n:nat => n<>0 -> n <> 1 -> {l : list (nat * nat) | is_wf l /\\ n = refactor l}+{n=0}));intros.\n  elim (nat_factor_prime n1 H0 H1).\n  intro p;intro.\n  elim p0;intro m;intro.\n  elim p1;intro q;intro.\n  elim p2;intros.\n  elim H3;intros.\n  elim H5;intros.\n  elim H7;intros.\n  case (eq_nat_dec q 1);intro.\n  left;exists (cons (p,m) nil);simpl;rewrite e in H6.\n  split;trivial.\n  apply cons_is_wf;auto;try (apply nil_is_wf).\n  unfold rel_prime;simpl;rewrite e in H8;trivial.\n  assert (q<>0).\n  intro;rewrite H10 in H6;rewrite mult_comm in H6;simpl in H6;auto.\n  elim (H q H9 H10 n2).\n  intro.\n  elim a;intro l;intro.\n  elim p3;intros.\n  left;exists (cons (p,m) l);simpl;rewrite H12 in H6;split;trivial.\n  apply cons_is_wf;auto.\n  rewrite <- H12;unfold rel_prime;trivial.\n  intro;tauto.\nQed.\n\n(** we now show that a factorisation is unique upto permutations *)\n(** if (p,n) is in l then p^n | (refactor l) *)\n",
                "context_tokens": 713,
                "proof_start_offset": 12199,
                "proof_end_offset": 12539,
                "proof": "Lemma factor_divides_refactor : forall (x:nat*nat)(l:list (nat*nat)),(In x l)->(divides (refactor l) (power (fst x) (snd x))).\nProof.\ninduction l;simpl;try tauto.\nintro.\ncase H;intro.\ndestruct a.\nrewrite <- H0;simpl.\nexists (refactor l);trivial.\ndestruct a.\nelim (IHl H0);intros.\nrewrite H1.\nexists ((power n n0)*x0);ring.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma factor_divides_refactor : forall (x:nat*nat)(l:list (nat*nat)),(In x l)->(divides (refactor l) (power (fst x) (snd x))).\nProof.\n intros.\n induction l.\n simpl.\n destruct (le_dec (length x) 0).\n simpl.\n destruct (le_dec (length x) 0).\n simpl.\n destruct (le_dec (length x) 0).\n simpl.\n destruct (le_dec (length x) 0).\n simpl.\n destruct (le_dec (length x) 0).\n simpl.\n destruct (le_dec (length x) 0).\n simpl.\n destruct (le_dec (length x) 0).\n simpl.\n destruct (le_dec (length x) 0).\n simpl.\n destruct (le_dec (length x) 0).\n simpl.\n destruct (le_dec (length x) 0).\n simpl.\n destruct (le_dec (length x) 0).\n simpl.\n destruct (le_dec (length x) 0).\n simpl.\n destruct (le_dec (length x) 0).\n simpl.\n destruct (le_dec (length x) 0).\n simpl.\n destruct (le_dec (length x) 0).\n simpl.\n destruct (le_dec (length x) 0).\n simpl.\n destruct (Qed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 394, characters 26-27:\nError:\nIn environment\nx : nat * nat\nH : In x nil\nThe term \"x\" has type \"(nat * nat)%type\" while it is expected to have type\n \"list ?A\".\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": "wf : (list (nat*nat))->Prop :=\n  nil_is_wf : (is_wf nil)\n|cons_is_wf : forall (p n:nat)(tail:(list (nat*nat))),(is_prime p)->(n>0)->(is_wf tail)->(rel_prime p (refactor tail))->(is_wf (cons (p,n) tail)).\n\n(** this gives an inefficient algorithm to compute a factorisation of n *)\nLemma factorisation : forall (n:nat),{l:(list (nat*nat)) | (is_wf l)/\\n=(refactor l)}+{n=0}.\n  intro.\n  case (eq_nat_dec n 0);intro.\n  right;trivial.\n  case (eq_nat_dec n 1).\n  intro;left;exists (nil (A:=nat*nat)).\n  split;[apply nil_is_wf | simpl;trivial].\n  generalize n0.\n  apply (lt_wf_rec n (fun n:nat => n<>0 -> n <> 1 -> {l : list (nat * nat) | is_wf l /\\ n = refactor l}+{n=0}));intros.\n  elim (nat_factor_prime n1 H0 H1).\n  intro p;intro.\n  elim p0;intro m;intro.\n  elim p1;intro q;intro.\n  elim p2;intros.\n  elim H3;intros.\n  elim H5;intros.\n  elim H7;intros.\n  case (eq_nat_dec q 1);intro.\n  left;exists (cons (p,m) nil);simpl;rewrite e in H6.\n  split;trivial.\n  apply cons_is_wf;auto;try (apply nil_is_wf).\n  unfold rel_prime;simpl;rewrite e in H8;trivial.\n  assert (q<>0).\n  intro;rewrite H10 in H6;rewrite mult_comm in H6;simpl in H6;auto.\n  elim (H q H9 H10 n2).\n  intro.\n  elim a;intro l;intro.\n  elim p3;intros.\n  left;exists (cons (p,m) l);simpl;rewrite H12 in H6;split;trivial.\n  apply cons_is_wf;auto.\n  rewrite <- H12;unfold rel_prime;trivial.\n  intro;tauto.\nQed.\n\n(** we now show that a factorisation is unique upto permutations *)\n(** if (p,n) is in l then p^n | (refactor l) *)\nLemma factor_divides_refactor : forall (x:nat*nat)(l:list (nat*nat)),(In x l)->(divides (refactor l) (power (fst x) (snd x))).\n  induction l;simpl;try tauto.\n  intro.\n  case H;intro.\n  destruct a.\n  rewrite <- H0;simpl.\n  exists (refactor l);trivial.\n  destruct a.\n  elim (IHl H0);intros.\n  rewrite H1.\n  exists ((power n n0)*x0);ring.\nQed.\n\n(** if p is prime and p | (refactor l) then there is n such that (p,n) is in l *)\n",
                "context_tokens": 704,
                "proof_start_offset": 12623,
                "proof_end_offset": 13304,
                "proof": "Lemma prime_divides_refactor : forall (p:nat)(l:list (nat*nat)),(is_prime p)->(is_wf l)->(divides (refactor l) p)->(exists m:nat,(In (p,m) l)).\nProof.\ninduction l;simpl;intros.\nassert (p=1).\napply divides_antisym;trivial.\napply one_min_div.\nrewrite H2 in H;elim H;tauto.\ndestruct a.\ncase (divides_dec (power n n0) p);intro.\ngeneralize (prime_power p n0 n H d);intro.\nassert (n=p).\ninversion H0.\nelim H6.\nintros.\nelim H;intros.\ncase (H11 p H2);try tauto;try omega.\nexists n0;rewrite <- H3;left;trivial.\ninversion H0.\nelim (IHl H H7).\nintros;exists x;tauto.\napply gauss with (power n n0);trivial.\napply rel_prime_sym;apply prime_div_gcd;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma prime_divides_refactor : forall (p:nat)(l:list (nat*nat)),(is_prime p)->(is_wf l)->(divides (refactor l) p)->(exists m:nat,(In (p,m) l)).\nProof.\n  induction l;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simplQed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 407, characters 11-12:\nError: The reference p was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": " (nat_factor_prime n1 H0 H1).\n  intro p;intro.\n  elim p0;intro m;intro.\n  elim p1;intro q;intro.\n  elim p2;intros.\n  elim H3;intros.\n  elim H5;intros.\n  elim H7;intros.\n  case (eq_nat_dec q 1);intro.\n  left;exists (cons (p,m) nil);simpl;rewrite e in H6.\n  split;trivial.\n  apply cons_is_wf;auto;try (apply nil_is_wf).\n  unfold rel_prime;simpl;rewrite e in H8;trivial.\n  assert (q<>0).\n  intro;rewrite H10 in H6;rewrite mult_comm in H6;simpl in H6;auto.\n  elim (H q H9 H10 n2).\n  intro.\n  elim a;intro l;intro.\n  elim p3;intros.\n  left;exists (cons (p,m) l);simpl;rewrite H12 in H6;split;trivial.\n  apply cons_is_wf;auto.\n  rewrite <- H12;unfold rel_prime;trivial.\n  intro;tauto.\nQed.\n\n(** we now show that a factorisation is unique upto permutations *)\n(** if (p,n) is in l then p^n | (refactor l) *)\nLemma factor_divides_refactor : forall (x:nat*nat)(l:list (nat*nat)),(In x l)->(divides (refactor l) (power (fst x) (snd x))).\n  induction l;simpl;try tauto.\n  intro.\n  case H;intro.\n  destruct a.\n  rewrite <- H0;simpl.\n  exists (refactor l);trivial.\n  destruct a.\n  elim (IHl H0);intros.\n  rewrite H1.\n  exists ((power n n0)*x0);ring.\nQed.\n\n(** if p is prime and p | (refactor l) then there is n such that (p,n) is in l *)\nLemma prime_divides_refactor : forall (p:nat)(l:list (nat*nat)),(is_prime p)->(is_wf l)->(divides (refactor l) p)->(exists m:nat,(In (p,m) l)).\n  induction l;simpl;intros.\n  assert (p=1).\n  apply divides_antisym;trivial.\n  apply one_min_div.\n  rewrite H2 in H;elim H;tauto.\n  destruct a.\n  case (divides_dec (power n n0) p);intro.\n  generalize (prime_power p n0 n H d);intro.\n  assert (n=p).\n  inversion H0.\n  elim H6.\n  intros.\n  elim H;intros.\n  case (H11 p H2);try tauto;try omega.\n  exists n0;rewrite <- H3;left;trivial.\n  inversion H0.\n  elim (IHl H H7).\n  intros;exists x;tauto.\n  apply gauss with (power n n0);trivial.\n  apply rel_prime_sym;apply prime_div_gcd;trivial.\nQed.\n\n\n(** if (p,n) is in l and l is well-formed then p is prime and n>0 *)\n",
                "context_tokens": 714,
                "proof_start_offset": 13376,
                "proof_end_offset": 13646,
                "proof": "Lemma in_wf : forall (l:list (nat*nat))(p n:nat),(In (p,n) l)->(is_wf l)->(is_prime p)/\\(n>0).\nProof.\ninduction l;simpl;try tauto.\nintros;destruct a.\ninversion H0.\ncase (in_inv H);intros.\ninversion H8;rewrite <- H10;rewrite <- H11;try tauto.\napply IHl;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma in_wf : forall (l:list (nat*nat))(p n:nat),(In (p,n) l)->(is_wf l)->(is_prime p)/\\(n>0).\nProof.\n  induction l;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simpl;intros.\n  destruct p;simplQed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 432, characters 11-12:\nError: The reference p was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": ";trivial.\n  assert (q<>0).\n  intro;rewrite H10 in H6;rewrite mult_comm in H6;simpl in H6;auto.\n  elim (H q H9 H10 n2).\n  intro.\n  elim a;intro l;intro.\n  elim p3;intros.\n  left;exists (cons (p,m) l);simpl;rewrite H12 in H6;split;trivial.\n  apply cons_is_wf;auto.\n  rewrite <- H12;unfold rel_prime;trivial.\n  intro;tauto.\nQed.\n\n(** we now show that a factorisation is unique upto permutations *)\n(** if (p,n) is in l then p^n | (refactor l) *)\nLemma factor_divides_refactor : forall (x:nat*nat)(l:list (nat*nat)),(In x l)->(divides (refactor l) (power (fst x) (snd x))).\n  induction l;simpl;try tauto.\n  intro.\n  case H;intro.\n  destruct a.\n  rewrite <- H0;simpl.\n  exists (refactor l);trivial.\n  destruct a.\n  elim (IHl H0);intros.\n  rewrite H1.\n  exists ((power n n0)*x0);ring.\nQed.\n\n(** if p is prime and p | (refactor l) then there is n such that (p,n) is in l *)\nLemma prime_divides_refactor : forall (p:nat)(l:list (nat*nat)),(is_prime p)->(is_wf l)->(divides (refactor l) p)->(exists m:nat,(In (p,m) l)).\n  induction l;simpl;intros.\n  assert (p=1).\n  apply divides_antisym;trivial.\n  apply one_min_div.\n  rewrite H2 in H;elim H;tauto.\n  destruct a.\n  case (divides_dec (power n n0) p);intro.\n  generalize (prime_power p n0 n H d);intro.\n  assert (n=p).\n  inversion H0.\n  elim H6.\n  intros.\n  elim H;intros.\n  case (H11 p H2);try tauto;try omega.\n  exists n0;rewrite <- H3;left;trivial.\n  inversion H0.\n  elim (IHl H H7).\n  intros;exists x;tauto.\n  apply gauss with (power n n0);trivial.\n  apply rel_prime_sym;apply prime_div_gcd;trivial.\nQed.\n\n\n(** if (p,n) is in l and l is well-formed then p is prime and n>0 *)\nLemma in_wf : forall (l:list (nat*nat))(p n:nat),(In (p,n) l)->(is_wf l)->(is_prime p)/\\(n>0).\n  induction l;simpl;try tauto.\n  intros;destruct a.\n  inversion H0.\n  case (in_inv H);intros.\n  inversion H8;rewrite <- H10;rewrite <- H11;try tauto.\n  apply IHl;trivial.\nQed.\n\n(** if (p,n) is in l and (q,m)::l is well-formed then gcd(p,q)=1 *)\n",
                "context_tokens": 709,
                "proof_start_offset": 13716,
                "proof_end_offset": 14282,
                "proof": "Lemma rel_prime_wf : forall (l:list (nat*nat))(p n q m:nat),(In (p,n) l)->(is_wf ((q,m)::l))->(rel_prime p q).\nProof.\ninduction l;simpl;intros;try tauto.\ndestruct a.\ninversion H0;case (in_inv H);intro.\nrewrite H8 in H7;simpl in H7.\nelim (in_wf ((n0,n1)::l) p n H);trivial;intros.\nelim (mult_rel_prime q (power p n) (refactor l) H7);intros.\napply rel_prime_sym;apply power_rel_prime with n;trivial.\napply (IHl p n q m);trivial.\napply cons_is_wf;trivial.\ninversion H6;trivial.\nsimpl in H7;elim (mult_rel_prime q (power n0 n1) (refactor l) H7);auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma rel_prime_wf : forall (l:list (nat*nat))(p n q m:nat),(In (p,n) l)->(is_wf ((q,m)::l))->(rel_prime p q).\n  induction l;simpl;intros.\n  inversion H.\n  destruct a.\n  inversion H.\n  destruct a.\n  inversion H.\n  destruct a.\n  inversion H.\n  destruct a.\n  inversion H.\n  destruct a.\n  inversion H.\n  destruct a.\n  inversion H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.\n  destruct H.Qed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 443, characters 11-12:\nError: The reference a was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": "_divides_refactor : forall (p:nat)(l:list (nat*nat)),(is_prime p)->(is_wf l)->(divides (refactor l) p)->(exists m:nat,(In (p,m) l)).\n  induction l;simpl;intros.\n  assert (p=1).\n  apply divides_antisym;trivial.\n  apply one_min_div.\n  rewrite H2 in H;elim H;tauto.\n  destruct a.\n  case (divides_dec (power n n0) p);intro.\n  generalize (prime_power p n0 n H d);intro.\n  assert (n=p).\n  inversion H0.\n  elim H6.\n  intros.\n  elim H;intros.\n  case (H11 p H2);try tauto;try omega.\n  exists n0;rewrite <- H3;left;trivial.\n  inversion H0.\n  elim (IHl H H7).\n  intros;exists x;tauto.\n  apply gauss with (power n n0);trivial.\n  apply rel_prime_sym;apply prime_div_gcd;trivial.\nQed.\n\n\n(** if (p,n) is in l and l is well-formed then p is prime and n>0 *)\nLemma in_wf : forall (l:list (nat*nat))(p n:nat),(In (p,n) l)->(is_wf l)->(is_prime p)/\\(n>0).\n  induction l;simpl;try tauto.\n  intros;destruct a.\n  inversion H0.\n  case (in_inv H);intros.\n  inversion H8;rewrite <- H10;rewrite <- H11;try tauto.\n  apply IHl;trivial.\nQed.\n\n(** if (p,n) is in l and (q,m)::l is well-formed then gcd(p,q)=1 *)\nLemma rel_prime_wf : forall (l:list (nat*nat))(p n q m:nat),(In (p,n) l)->(is_wf ((q,m)::l))->(rel_prime p q).\n  induction l;simpl;intros;try tauto.\n  destruct a.\n  inversion H0;case (in_inv H);intro.\n  rewrite H8 in H7;simpl in H7.\n  elim (in_wf ((n0,n1)::l) p n H);trivial;intros.\n  elim (mult_rel_prime q (power p n) (refactor l) H7);intros.\n  apply rel_prime_sym;apply power_rel_prime with n;trivial.\n  apply (IHl p n q m);trivial.\n  apply cons_is_wf;trivial.\n  inversion H6;trivial.\n  simpl in H7;elim (mult_rel_prime q (power n0 n1) (refactor l) H7);auto.\nQed.\n\nInductive is_pwd : list (nat*nat) -> Prop :=\n  nil_is_pwd : (is_pwd nil)\n|cons_is_pwd : forall (p n:nat)(tail:list (nat*nat)),(is_pwd tail)->(forall (n:nat),~(In (p,n) tail))->(is_pwd ((p,n)::tail)).\n\n(** if l is well-formed then the first projection of l is pairwise distinct (pwd) *)\n",
                "context_tokens": 728,
                "proof_start_offset": 14570,
                "proof_end_offset": 14965,
                "proof": "Lemma wf_impl_pwd : forall (l:list (nat*nat)),(is_wf l)->(is_pwd l).\nProof.\ninduction l;intro.\napply nil_is_pwd.\ndestruct a.\ninversion H.\napply cons_is_pwd;auto.\nintros;intro.\nassert (rel_prime n n).\neapply rel_prime_wf;[apply H7 | apply H].\ngeneralize (gcd_refl n);intro.\nunfold rel_prime in H8.\nassert (1=n).\neapply gcd_unique;eauto.\nrewrite <- H10 in H3;elim H3;tauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma wf_impl_pwd : forall (l:list (nat*nat)),(is_wf l)->(is_pwd l).\n  induction l;simpl;intros.\n  destruct a.\n  inversion H.\n  destruct a.\n  inversion H.\n  destruct a.\n  inversion H.\n  destruct a.\n  inversion H.\n  destruct H.\n  destruct H.\n  destruct H.\n  inversion H.\n  destruct H.\n  destruct H.\n  inversion H.\n  destruct H.\n  destruct H.\n  inversion H.\n  destruct H.\n  destruct H.\n  inversion H.\n  destruct H.\n  destruct H.\n  inversion H.\n  destruct H.\n  destruct H.\n  inversion H.\n  destruct H.\n  inversion H.\n  destruct H.\n  inversion H.\n  destruct H.\n  destruct H.\n  inversion H.\n  destruct H.\n  inversion H.\n  destruct H.\n  destruct H.\n  inversion H.\n  destruct H.\n  inversion H.\n  destruct H.\n  inversion H.\n  destruct H.\n  inversion H.\n  destruct H.\n  inversion H.\n  destruct H.\n  inversion H.\n  destruct H.\n  inversion H.\n  destruct H.\n  inversion H.\n  destruct H.\n  inversion H.\n  destruct H.\n  inversion H.\n  destruct H.\n  inversion H.\n  destruct H.\n  inversion H.\n  destruct H.Qed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 459, characters 11-12:\nError: The reference a was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": "_prime_sym;apply prime_div_gcd;trivial.\nQed.\n\n\n(** if (p,n) is in l and l is well-formed then p is prime and n>0 *)\nLemma in_wf : forall (l:list (nat*nat))(p n:nat),(In (p,n) l)->(is_wf l)->(is_prime p)/\\(n>0).\n  induction l;simpl;try tauto.\n  intros;destruct a.\n  inversion H0.\n  case (in_inv H);intros.\n  inversion H8;rewrite <- H10;rewrite <- H11;try tauto.\n  apply IHl;trivial.\nQed.\n\n(** if (p,n) is in l and (q,m)::l is well-formed then gcd(p,q)=1 *)\nLemma rel_prime_wf : forall (l:list (nat*nat))(p n q m:nat),(In (p,n) l)->(is_wf ((q,m)::l))->(rel_prime p q).\n  induction l;simpl;intros;try tauto.\n  destruct a.\n  inversion H0;case (in_inv H);intro.\n  rewrite H8 in H7;simpl in H7.\n  elim (in_wf ((n0,n1)::l) p n H);trivial;intros.\n  elim (mult_rel_prime q (power p n) (refactor l) H7);intros.\n  apply rel_prime_sym;apply power_rel_prime with n;trivial.\n  apply (IHl p n q m);trivial.\n  apply cons_is_wf;trivial.\n  inversion H6;trivial.\n  simpl in H7;elim (mult_rel_prime q (power n0 n1) (refactor l) H7);auto.\nQed.\n\nInductive is_pwd : list (nat*nat) -> Prop :=\n  nil_is_pwd : (is_pwd nil)\n|cons_is_pwd : forall (p n:nat)(tail:list (nat*nat)),(is_pwd tail)->(forall (n:nat),~(In (p,n) tail))->(is_pwd ((p,n)::tail)).\n\n(** if l is well-formed then the first projection of l is pairwise distinct (pwd) *)\nLemma wf_impl_pwd : forall (l:list (nat*nat)),(is_wf l)->(is_pwd l).\n  induction l;intro.\n  apply nil_is_pwd.\n  destruct a.\n  inversion H.\n  apply cons_is_pwd;auto.\n  intros;intro.\n  assert (rel_prime n n).\n  eapply rel_prime_wf;[apply H7 | apply H].\n  generalize (gcd_refl n);intro.\n  unfold rel_prime in H8.\n  assert (1=n).\n  eapply gcd_unique;eauto.\n  rewrite <- H10 in H3;elim H3;tauto.\nQed.\n\n(** if p is prime, n>0, l is well-formed and p^n | (refactor l) and (p,m) is in l then n<=m *)\n",
                "context_tokens": 694,
                "proof_start_offset": 15062,
                "proof_end_offset": 15834,
                "proof": "Lemma prime_power_divides_refactor : forall (p n m:nat)(l:list (nat*nat)),(is_prime p)->(n>0)->(is_wf l)->(divides (refactor l) (power p n))->(In (p,m) l)->(n<=m).\nProof.\ninduction l;simpl;intros;try tauto.\ncase H3;intro.\nrewrite H4 in H2.\nrewrite H4 in H1;inversion H1.\ngeneralize (rel_prime_power p (refactor l) n (rel_prime_sym p (refactor l) H11));intro.\nrewrite mult_comm in H2.\ngeneralize (gauss (power p n) (refactor l) (power p m) H12 H2);intro.\napply power_divides_power with p;trivial.\ndestruct p.\nelim (not_prime_zero H8).\nelim H8;omega.\ndestruct a.\ninversion H1.\napply IHl;trivial.\napply gauss with (power n0 n1);trivial.\napply rel_prime_power;apply rel_prime_sym;apply rel_prime_power.\napply (rel_prime_wf l p m n0 n1);trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma prime_power_divides_refactor : forall (p n m:nat)(l:list (nat*nat)),(is_prime p)->(n>0)->(is_wf l)->(divides (refactor l) (power p n))->(In (p,m) l)->(n<=m).\nProof.\n  induction p;intros.\n  destruct a.\n  inversion H.\n  destruct a.\n  inversion H.\n  destruct a.\n  inversion H.\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv H).\n  destruct (in_inv HQed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 477, characters 11-12:\nError: The reference a was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": "actor l) H7);intros.\n  apply rel_prime_sym;apply power_rel_prime with n;trivial.\n  apply (IHl p n q m);trivial.\n  apply cons_is_wf;trivial.\n  inversion H6;trivial.\n  simpl in H7;elim (mult_rel_prime q (power n0 n1) (refactor l) H7);auto.\nQed.\n\nInductive is_pwd : list (nat*nat) -> Prop :=\n  nil_is_pwd : (is_pwd nil)\n|cons_is_pwd : forall (p n:nat)(tail:list (nat*nat)),(is_pwd tail)->(forall (n:nat),~(In (p,n) tail))->(is_pwd ((p,n)::tail)).\n\n(** if l is well-formed then the first projection of l is pairwise distinct (pwd) *)\nLemma wf_impl_pwd : forall (l:list (nat*nat)),(is_wf l)->(is_pwd l).\n  induction l;intro.\n  apply nil_is_pwd.\n  destruct a.\n  inversion H.\n  apply cons_is_pwd;auto.\n  intros;intro.\n  assert (rel_prime n n).\n  eapply rel_prime_wf;[apply H7 | apply H].\n  generalize (gcd_refl n);intro.\n  unfold rel_prime in H8.\n  assert (1=n).\n  eapply gcd_unique;eauto.\n  rewrite <- H10 in H3;elim H3;tauto.\nQed.\n\n(** if p is prime, n>0, l is well-formed and p^n | (refactor l) and (p,m) is in l then n<=m *)\nLemma prime_power_divides_refactor : forall (p n m:nat)(l:list (nat*nat)),(is_prime p)->(n>0)->(is_wf l)->(divides (refactor l) (power p n))->(In (p,m) l)->(n<=m).\n  induction l;simpl;intros;try tauto.\n  case H3;intro.\n  rewrite H4 in H2.\n  rewrite H4 in H1;inversion H1.\n  generalize (rel_prime_power p (refactor l) n (rel_prime_sym p (refactor l) H11));intro.\n  rewrite mult_comm in H2.\n  generalize (gauss (power p n) (refactor l) (power p m) H12 H2);intro.\n  apply power_divides_power with p;trivial.\n  destruct p.\n  elim (not_prime_zero H8).\n  elim H8;omega.\n  destruct a.\n  inversion H1.\n  apply IHl;trivial.\n  apply gauss with (power n0 n1);trivial.\n  apply rel_prime_power;apply rel_prime_sym;apply rel_prime_power.\n  apply (rel_prime_wf l p m n0 n1);trivial.\nQed.\n\n(** if l and l' are well-formed and (refactor l)=(refactor l') then l is included in l' *)\n",
                "context_tokens": 691,
                "proof_start_offset": 15927,
                "proof_end_offset": 16738,
                "proof": "Lemma factorisation_unique_upto_equiv_aux : forall (l l':list (nat*nat)),(is_wf l)->(is_wf l')->(refactor l)=(refactor l')->(forall (x n:nat),(In (x,n) l)->(In (x,n) l')).\nProof.\nintros l l';intro;intro;intro;intros p n;intro.\nelim (in_wf l p n H2 H);intros.\ngeneralize (factor_divides_refactor (p,n) l H2);simpl;intro.\nrewrite H1 in H5.\nassert (divides (refactor l') p).\napply divides_trans with (power p n);[trivial | apply power_divides_lemma1;auto with arith].\nelim (prime_divides_refactor p l' H3 H0 H6);intro m;intro.\ncut (n=m).\nintro;rewrite H8;trivial.\napply le_antisym.\neapply prime_power_divides_refactor;eauto.\ngeneralize (factor_divides_refactor (p,m) l' H7);simpl;intro.\nrewrite <- H1 in H8.\napply prime_power_divides_refactor with p l;auto.\nelim (in_wf l' p m);trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma factorisation_unique_upto_equiv_aux : forall (l l':list (nat*nat)),(is_wf l)->(is_wf l')->(refactor l)=(refactor l')->(forall (x n:nat),(In (x,n) l)->(In (x,n) l')).\nProof.\n  induction l;simpl;intros;try tauto.\n  case H;intro.\n  rewrite H4 in H2;inversion H2.\n  destruct H2.\n  apply H2;trivial.\n  apply H2;trivial.\n  apply H2;trivial.\n  apply H2;trivial.\n  apply H2;trivial.\n  apply H2;trivial.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 498, characters 9-14:\nError: Ltac call to \"intro\" failed.\n       No product even after head-reduction.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": "_is_pwd;auto.\n  intros;intro.\n  assert (rel_prime n n).\n  eapply rel_prime_wf;[apply H7 | apply H].\n  generalize (gcd_refl n);intro.\n  unfold rel_prime in H8.\n  assert (1=n).\n  eapply gcd_unique;eauto.\n  rewrite <- H10 in H3;elim H3;tauto.\nQed.\n\n(** if p is prime, n>0, l is well-formed and p^n | (refactor l) and (p,m) is in l then n<=m *)\nLemma prime_power_divides_refactor : forall (p n m:nat)(l:list (nat*nat)),(is_prime p)->(n>0)->(is_wf l)->(divides (refactor l) (power p n))->(In (p,m) l)->(n<=m).\n  induction l;simpl;intros;try tauto.\n  case H3;intro.\n  rewrite H4 in H2.\n  rewrite H4 in H1;inversion H1.\n  generalize (rel_prime_power p (refactor l) n (rel_prime_sym p (refactor l) H11));intro.\n  rewrite mult_comm in H2.\n  generalize (gauss (power p n) (refactor l) (power p m) H12 H2);intro.\n  apply power_divides_power with p;trivial.\n  destruct p.\n  elim (not_prime_zero H8).\n  elim H8;omega.\n  destruct a.\n  inversion H1.\n  apply IHl;trivial.\n  apply gauss with (power n0 n1);trivial.\n  apply rel_prime_power;apply rel_prime_sym;apply rel_prime_power.\n  apply (rel_prime_wf l p m n0 n1);trivial.\nQed.\n\n(** if l and l' are well-formed and (refactor l)=(refactor l') then l is included in l' *)\nLemma factorisation_unique_upto_equiv_aux : forall (l l':list (nat*nat)),(is_wf l)->(is_wf l')->(refactor l)=(refactor l')->(forall (x n:nat),(In (x,n) l)->(In (x,n) l')).\n  intros l l';intro;intro;intro;intros p n;intro.\n  elim (in_wf l p n H2 H);intros.\n  generalize (factor_divides_refactor (p,n) l H2);simpl;intro.\n  rewrite H1 in H5.\n  assert (divides (refactor l') p).\n  apply divides_trans with (power p n);[trivial | apply power_divides_lemma1;auto with arith].\n  elim (prime_divides_refactor p l' H3 H0 H6);intro m;intro.\n  cut (n=m).\n  intro;rewrite H8;trivial.\n  apply le_antisym.\n  eapply prime_power_divides_refactor;eauto.\n  generalize (factor_divides_refactor (p,m) l' H7);simpl;intro.\n  rewrite <- H1 in H8.\n  apply prime_power_divides_refactor with p l;auto.\n  elim (in_wf l' p m);trivial.\nQed.\n\n",
                "context_tokens": 723,
                "proof_start_offset": 16740,
                "proof_end_offset": 16884,
                "proof": "Lemma pwd_impl_set : forall (l:list (nat*nat)),(is_pwd l)->(is_set (nat*nat) l).\nProof.\ninduction 1;[apply nil_is_set | apply cons_is_set;auto].\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma pwd_impl_set : forall (l:list (nat*nat)),(is_pwd l)->(is_set (nat*nat) l).\n  intros l l';intro;intro;intro;intros p n;intro.\n  elim (in_wf l p n H2 H);intro.\n  apply (H (S n));intro.\n  apply (H (S n));intro.\n  apply (H (S n));intro.\n  apply (H (S n));intro.\n  apply (H (S n));intro.\n  apply (H (S n));intro.\n  apply (H (S n));intro.\n  apply (H (S n));intro.\n  apply (H (S n));intro.\n  apply (H (S n));intro.\n  apply (H (S n));intro.\n  apply (H (S n));intro.\n  apply (H (S n));intro.\n  apply (H (S n));intro.\n  apply (H (S n));intro.\n  apply (H (S n));intro.\n  apply (H (S n));intro.\n  apply (H (S n));intro.\n  apply (H (S n));intro.\n  apply (H (S n));intro.\n  apply (H (S n));intro.\n  apply (H (S n));intro.\n  apply (HQed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 514, characters 14-19:\nError: Ltac call to \"intro\" failed.\n       No product even after head-reduction.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": "^n | (refactor l) and (p,m) is in l then n<=m *)\nLemma prime_power_divides_refactor : forall (p n m:nat)(l:list (nat*nat)),(is_prime p)->(n>0)->(is_wf l)->(divides (refactor l) (power p n))->(In (p,m) l)->(n<=m).\n  induction l;simpl;intros;try tauto.\n  case H3;intro.\n  rewrite H4 in H2.\n  rewrite H4 in H1;inversion H1.\n  generalize (rel_prime_power p (refactor l) n (rel_prime_sym p (refactor l) H11));intro.\n  rewrite mult_comm in H2.\n  generalize (gauss (power p n) (refactor l) (power p m) H12 H2);intro.\n  apply power_divides_power with p;trivial.\n  destruct p.\n  elim (not_prime_zero H8).\n  elim H8;omega.\n  destruct a.\n  inversion H1.\n  apply IHl;trivial.\n  apply gauss with (power n0 n1);trivial.\n  apply rel_prime_power;apply rel_prime_sym;apply rel_prime_power.\n  apply (rel_prime_wf l p m n0 n1);trivial.\nQed.\n\n(** if l and l' are well-formed and (refactor l)=(refactor l') then l is included in l' *)\nLemma factorisation_unique_upto_equiv_aux : forall (l l':list (nat*nat)),(is_wf l)->(is_wf l')->(refactor l)=(refactor l')->(forall (x n:nat),(In (x,n) l)->(In (x,n) l')).\n  intros l l';intro;intro;intro;intros p n;intro.\n  elim (in_wf l p n H2 H);intros.\n  generalize (factor_divides_refactor (p,n) l H2);simpl;intro.\n  rewrite H1 in H5.\n  assert (divides (refactor l') p).\n  apply divides_trans with (power p n);[trivial | apply power_divides_lemma1;auto with arith].\n  elim (prime_divides_refactor p l' H3 H0 H6);intro m;intro.\n  cut (n=m).\n  intro;rewrite H8;trivial.\n  apply le_antisym.\n  eapply prime_power_divides_refactor;eauto.\n  generalize (factor_divides_refactor (p,m) l' H7);simpl;intro.\n  rewrite <- H1 in H8.\n  apply prime_power_divides_refactor with p l;auto.\n  elim (in_wf l' p m);trivial.\nQed.\n\nLemma pwd_impl_set : forall (l:list (nat*nat)),(is_pwd l)->(is_set (nat*nat) l).\n  induction 1;[apply nil_is_set | apply cons_is_set;auto].\nQed.\n\n(** if l and l' are well-formed and (refactor l)=(refactor l') then l' is a permutation of l *)\n",
                "context_tokens": 705,
                "proof_start_offset": 16982,
                "proof_end_offset": 17483,
                "proof": "Lemma factorisation_unique_upto_perm : forall (l l':list (nat*nat)),(is_wf l)->(is_wf l')->(refactor l)=(refactor l')->(is_permutation (nat*nat) l l').\nProof.\nintros.\nassert (forall (x n:nat),(In (x,n) l)->(In (x,n) l')).\napply factorisation_unique_upto_equiv_aux;trivial.\nassert (forall (x n:nat),(In (x,n) l')->(In (x,n) l)).\napply factorisation_unique_upto_equiv_aux;auto.\napply is_set_eq_impl_permutation;intros;(try (apply pwd_impl_set;apply wf_impl_pwd;trivial));destruct x;split;auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma factorisation_unique_upto_perm : forall (l l':list (nat*nat)),(is_wf l)->(is_wf l')->(refactor l)=(refactor l')->(is_permutation (nat*nat) l l').\n  induction l;simpl;intros;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destruct l';simpl;try tauto.\n  destructQed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 521, characters 11-13:\nError: The reference l' was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": " n1);trivial.\n  apply rel_prime_power;apply rel_prime_sym;apply rel_prime_power.\n  apply (rel_prime_wf l p m n0 n1);trivial.\nQed.\n\n(** if l and l' are well-formed and (refactor l)=(refactor l') then l is included in l' *)\nLemma factorisation_unique_upto_equiv_aux : forall (l l':list (nat*nat)),(is_wf l)->(is_wf l')->(refactor l)=(refactor l')->(forall (x n:nat),(In (x,n) l)->(In (x,n) l')).\n  intros l l';intro;intro;intro;intros p n;intro.\n  elim (in_wf l p n H2 H);intros.\n  generalize (factor_divides_refactor (p,n) l H2);simpl;intro.\n  rewrite H1 in H5.\n  assert (divides (refactor l') p).\n  apply divides_trans with (power p n);[trivial | apply power_divides_lemma1;auto with arith].\n  elim (prime_divides_refactor p l' H3 H0 H6);intro m;intro.\n  cut (n=m).\n  intro;rewrite H8;trivial.\n  apply le_antisym.\n  eapply prime_power_divides_refactor;eauto.\n  generalize (factor_divides_refactor (p,m) l' H7);simpl;intro.\n  rewrite <- H1 in H8.\n  apply prime_power_divides_refactor with p l;auto.\n  elim (in_wf l' p m);trivial.\nQed.\n\nLemma pwd_impl_set : forall (l:list (nat*nat)),(is_pwd l)->(is_set (nat*nat) l).\n  induction 1;[apply nil_is_set | apply cons_is_set;auto].\nQed.\n\n(** if l and l' are well-formed and (refactor l)=(refactor l') then l' is a permutation of l *)\nLemma factorisation_unique_upto_perm : forall (l l':list (nat*nat)),(is_wf l)->(is_wf l')->(refactor l)=(refactor l')->(is_permutation (nat*nat) l l').\n  intros.\n  assert (forall (x n:nat),(In (x,n) l)->(In (x,n) l')).\n  apply factorisation_unique_upto_equiv_aux;trivial.\n  assert (forall (x n:nat),(In (x,n) l')->(In (x,n) l)).\n  apply factorisation_unique_upto_equiv_aux;auto.\n  apply is_set_eq_impl_permutation;intros;(try (apply pwd_impl_set;apply wf_impl_pwd;trivial));destruct x;split;auto.\nQed.\n\n(** a list is a factorisation of n if l is well-formed and (refactor l)=n *)\nDefinition is_factorisation (n:nat)(l:list (nat*nat)) := (is_wf l)/\\(n=(refactor l)).\n\n(** The fondamental theorem of arithmetic *)\n(** forall n<>0, there exists a factorisation l *)\n",
                "context_tokens": 723,
                "proof_start_offset": 17745,
                "proof_end_offset": 17899,
                "proof": "Theorem factorisation_exists : forall (n:nat),n<>0->{l:list (nat*nat) | (is_factorisation n l)}.\nProof.\nintros.\ncase (factorisation n);intros;try tauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem factorisation_exists : forall (n:nat),n<>0->{l:list (nat*nat) | (is_factorisation n l)}.\n  intros.\n  destruct (is_factorisation n l H0); auto.\n  destruct (is_factorisation n l H0); auto.\n  destruct (is_factorisation n l H0); auto.\n  destruct (is_factorisation n l H0); auto.\n  destruct (is_factorisation n l H0); auto.\n  destruct (is_factorisation n l H0); auto.\n  destruct (is_factorisation n l H0); auto.\n  destruct (is_factorisation n l H0); auto.\n  destruct (is_factorisation n l H0); auto.\n  destruct (is_factorisation n l H0); auto.\n  destruct (is_factorisation n l H0); auto.\n  destruct (is_factorisation n l H0); auto.\n  destruct (is_factorisation n l H0); auto.\n  destruct (is_factorisation n l H0); auto.\n  destruct (is_factorisation n l H0); auto.\n  destruct (is_factorisation n l H0); auto.\n  destruct (is_factorisation n l H0); auto.\n  destruct (is_factorisation n l H0); auto.\n Qed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 534, characters 33-35:\nError: The reference H0 was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": " l':list (nat*nat)),(is_wf l)->(is_wf l')->(refactor l)=(refactor l')->(forall (x n:nat),(In (x,n) l)->(In (x,n) l')).\n  intros l l';intro;intro;intro;intros p n;intro.\n  elim (in_wf l p n H2 H);intros.\n  generalize (factor_divides_refactor (p,n) l H2);simpl;intro.\n  rewrite H1 in H5.\n  assert (divides (refactor l') p).\n  apply divides_trans with (power p n);[trivial | apply power_divides_lemma1;auto with arith].\n  elim (prime_divides_refactor p l' H3 H0 H6);intro m;intro.\n  cut (n=m).\n  intro;rewrite H8;trivial.\n  apply le_antisym.\n  eapply prime_power_divides_refactor;eauto.\n  generalize (factor_divides_refactor (p,m) l' H7);simpl;intro.\n  rewrite <- H1 in H8.\n  apply prime_power_divides_refactor with p l;auto.\n  elim (in_wf l' p m);trivial.\nQed.\n\nLemma pwd_impl_set : forall (l:list (nat*nat)),(is_pwd l)->(is_set (nat*nat) l).\n  induction 1;[apply nil_is_set | apply cons_is_set;auto].\nQed.\n\n(** if l and l' are well-formed and (refactor l)=(refactor l') then l' is a permutation of l *)\nLemma factorisation_unique_upto_perm : forall (l l':list (nat*nat)),(is_wf l)->(is_wf l')->(refactor l)=(refactor l')->(is_permutation (nat*nat) l l').\n  intros.\n  assert (forall (x n:nat),(In (x,n) l)->(In (x,n) l')).\n  apply factorisation_unique_upto_equiv_aux;trivial.\n  assert (forall (x n:nat),(In (x,n) l')->(In (x,n) l)).\n  apply factorisation_unique_upto_equiv_aux;auto.\n  apply is_set_eq_impl_permutation;intros;(try (apply pwd_impl_set;apply wf_impl_pwd;trivial));destruct x;split;auto.\nQed.\n\n(** a list is a factorisation of n if l is well-formed and (refactor l)=n *)\nDefinition is_factorisation (n:nat)(l:list (nat*nat)) := (is_wf l)/\\(n=(refactor l)).\n\n(** The fondamental theorem of arithmetic *)\n(** forall n<>0, there exists a factorisation l *)\nTheorem factorisation_exists : forall (n:nat),n<>0->{l:list (nat*nat) | (is_factorisation n l)}.\n  intros.\n  case (factorisation n);intros;try tauto.\nQed.\n\n(** if l and l' are two factorisation of n, then l' is a permutation of l *)\n",
                "context_tokens": 706,
                "proof_start_offset": 17978,
                "proof_end_offset": 18273,
                "proof": "Theorem factorisation_unique_upto_permutation : forall (n:nat)(l l':list (nat*nat)),(is_factorisation n l)->(is_factorisation n l')->(is_permutation (nat*nat) l l').\nProof.\nunfold is_factorisation;intros.\nelim H;intros.\nelim H0;intros.\napply factorisation_unique_upto_perm;auto;congruence.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem factorisation_unique_upto_permutation : forall (n:nat)(l l':list (nat*nat)),(is_factorisation n l)->(is_factorisation n l')->(is_permutation (nat*nat) l l').\n  intros.\n  case (factorisation n);intros;try tauto.\n  case (factorisation n);intros;try tauto.\n  case (factorisation n);intros;try tauto.\n  case (factorisation n);intros;try tauto.\n  case (factorisation n);intros;try tauto.\n  case (factorisation n);intros;try tauto.\n  case (factorisation n);intros;try tauto.\n  case (factorisation n);intros;try tauto.\n  case (factorisation n);intros;try tauto.\n  case (factorisation n);intros;try tauto.\n  case (factorisation n);intros;try tauto.\n  case (factorisation n);intros;try tauto.\n  case (factorisation n);intros;try tauto.\n  case (factorisation n);intros;try tauto.\n  case (factorisation n);intros;try tauto.\n  case (factorisation n);intros;try tauto.\n  case (factorisation n);intros;try tauto.\n  case (factorisation n);intros;try tauto.\n  case (factorisation n);intros;try tauto.\n  case (factorisation n);intros;try tauto.\n  case (factorisation n);intros;try tauto.\n Qed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 561, characters 1-5:\nError:\nAttempt to save an incomplete proof (in proof factorisation_unique_upto_permutation)\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": " elim (prime_divides_refactor p l' H3 H0 H6);intro m;intro.\n  cut (n=m).\n  intro;rewrite H8;trivial.\n  apply le_antisym.\n  eapply prime_power_divides_refactor;eauto.\n  generalize (factor_divides_refactor (p,m) l' H7);simpl;intro.\n  rewrite <- H1 in H8.\n  apply prime_power_divides_refactor with p l;auto.\n  elim (in_wf l' p m);trivial.\nQed.\n\nLemma pwd_impl_set : forall (l:list (nat*nat)),(is_pwd l)->(is_set (nat*nat) l).\n  induction 1;[apply nil_is_set | apply cons_is_set;auto].\nQed.\n\n(** if l and l' are well-formed and (refactor l)=(refactor l') then l' is a permutation of l *)\nLemma factorisation_unique_upto_perm : forall (l l':list (nat*nat)),(is_wf l)->(is_wf l')->(refactor l)=(refactor l')->(is_permutation (nat*nat) l l').\n  intros.\n  assert (forall (x n:nat),(In (x,n) l)->(In (x,n) l')).\n  apply factorisation_unique_upto_equiv_aux;trivial.\n  assert (forall (x n:nat),(In (x,n) l')->(In (x,n) l)).\n  apply factorisation_unique_upto_equiv_aux;auto.\n  apply is_set_eq_impl_permutation;intros;(try (apply pwd_impl_set;apply wf_impl_pwd;trivial));destruct x;split;auto.\nQed.\n\n(** a list is a factorisation of n if l is well-formed and (refactor l)=n *)\nDefinition is_factorisation (n:nat)(l:list (nat*nat)) := (is_wf l)/\\(n=(refactor l)).\n\n(** The fondamental theorem of arithmetic *)\n(** forall n<>0, there exists a factorisation l *)\nTheorem factorisation_exists : forall (n:nat),n<>0->{l:list (nat*nat) | (is_factorisation n l)}.\n  intros.\n  case (factorisation n);intros;try tauto.\nQed.\n\n(** if l and l' are two factorisation of n, then l' is a permutation of l *)\nTheorem factorisation_unique_upto_permutation : forall (n:nat)(l l':list (nat*nat)),(is_factorisation n l)->(is_factorisation n l')->(is_permutation (nat*nat) l l').\n  unfold is_factorisation;intros.\n  elim H;intros.\n  elim H0;intros.\n  apply factorisation_unique_upto_perm;auto;congruence.\nQed.\n\n(** *)\n",
                "context_tokens": 652,
                "proof_start_offset": 18282,
                "proof_end_offset": 20069,
                "proof": "Lemma wf_power_dec : forall (n:nat)(l:list (nat*nat)),(is_wf l)->(n>0)->{x:nat | (refactor l)=(power x n)}+{p:nat & {q:nat & {r:nat & {k:nat | (is_prime p)/\\(0<r)/\\(r<n)/\\(refactor l)=(power p (q*n+r))*k/\\(rel_prime p k)}}}}.\nProof.\nintro.\ninduction l;simpl;intros.\nleft;exists 1;rewrite power_one;trivial.\ndestruct a.\nassert (n<>0);try omega.\ngeneralize (quo_rem_euclide n1 n H1);intro.\ncase (eq_nat_dec (remainder_euclide n1 n H1) 0);intro.\nrewrite e in H2;rewrite plus_comm in H2;simpl in H2.\ncase IHl;intros;trivial.\ninversion H;trivial.\nelim s;intro y;intro.\nrewrite H2.\nleft;rewrite p;rewrite (mult_comm n);rewrite <- power_power_lemma1;rewrite <- power_mult_lemma1;exists (power n0 (quotient_euclide n1 n H1)*y);trivial.\nelim s;intro p;intro.\nelim p0;intro q;intro.\nelim p1;intro r;intro.\nelim p2;intro k;intro.\nelim p3;intros.\nelim H4;intros.\nelim H6;intros.\nelim H8;intros.\nright.\nexists p;exists q;exists r.\nrewrite H9;rewrite mult_comm;rewrite <- mult_assoc.\nexists (k*(power n0 n1)).\nsplit;trivial.\nsplit;trivial.\nsplit;trivial.\nsplit;trivial.\napply rel_prime_mult;trivial.\ninversion H.\nrewrite H9 in H17.\nelim (mult_rel_prime n0 (power p (q*n+r)) k H17);intros.\napply rel_prime_power;apply rel_prime_sym;apply power_rel_prime with (q*n+r);trivial.\nrewrite plus_comm;auto with arith.\nright.\nexists n0;exists (quotient_euclide n1 n H1);exists (remainder_euclide n1 n H1).\nrewrite (mult_comm (quotient_euclide n1 n H1));rewrite <- H2.\nexists (refactor l).\nelim (in_wf ((n0,n1)::l) n0 n1);intros.\nsplit;trivial.\nsplit;trivial.\ndestruct (remainder_euclide n1 n H1);try tauto;auto with arith.\nsplit;trivial.\napply rem_euclide.\nsplit;trivial.\ninversion H;trivial.\nsimpl;tauto.\ntrivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma wf_power_dec : forall (n:nat)(l:list (nat*nat)),(is_wf l)->(n>0)->{x:nat | (refactor l)=(power x n)}+{p:nat & {q:nat & {r:nat & {k:nat | (is_prime p)/\\(0<r)/\\(r<n)/\\(refactor l)=(power p (q*n+r))*k/\\(rel_prime p k)}}}}.\n  intros.\n  case (non_factorisation n);intros;try tauto.\n  elim H0;intros.\n  apply factorisation_unique_upto_le;auto;congruence.\n  apply factorisation_unique_upto_le;auto;congruence.\n  apply factorisation_unique_upto_le;auto;congruence.\n  apply factorisation_unique_upto_le;auto;congruence.\n  apply factorisation_unique_upto_le;auto;congruence.\n  apply factorisation_unique_upto_le;auto;congruence.\n  apply factorisation_unique_upto_le;auto;congruence.\n  apply factorisation_unique_upto_le;auto;congruence.\n  apply factorisation_unique_upto_le;auto;congruence.\n  apply factorisation_unique_upto_le;auto;congruence.\n  apply factorisation_unique_upto_le;auto;congruence.\n  apply factorisation_unique_upto_le;auto;congruence.\n  apply factorisation_unique_upto_le;auto;congruence.\n  apply factorisation_unique_upto_le;auto;congruence.\n  apply factorisation_unique_upto_le;auto;congruence.\n  apply factorisation_unique_Qed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 548, characters 8-25:\nError: The reference non_factorisation was not found in the current\nenvironment.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/primes.v",
                "context": " x n)}+{p:nat & {q:nat & {r:nat & {k:nat | (is_prime p)/\\(0<r)/\\(r<n)/\\(refactor l)=(power p (q*n+r))*k/\\(rel_prime p k)}}}}.\n  intro.\n  induction l;simpl;intros.\n  left;exists 1;rewrite power_one;trivial.\n  destruct a.\n  assert (n<>0);try omega.\n  generalize (quo_rem_euclide n1 n H1);intro.\n  case (eq_nat_dec (remainder_euclide n1 n H1) 0);intro.\n  rewrite e in H2;rewrite plus_comm in H2;simpl in H2.\n  case IHl;intros;trivial.\n  inversion H;trivial.\n  elim s;intro y;intro.\n  rewrite H2.\n  left;rewrite p;rewrite (mult_comm n);rewrite <- power_power_lemma1;rewrite <- power_mult_lemma1;exists (power n0 (quotient_euclide n1 n H1)*y);trivial.\n  elim s;intro p;intro.\n  elim p0;intro q;intro.\n  elim p1;intro r;intro.\n  elim p2;intro k;intro.\n  elim p3;intros.\n  elim H4;intros.\n  elim H6;intros.\n  elim H8;intros.\n  right.\n  exists p;exists q;exists r.\n  rewrite H9;rewrite mult_comm;rewrite <- mult_assoc.\n  exists (k*(power n0 n1)).\n  split;trivial.\n  split;trivial.\n  split;trivial.\n  split;trivial.\n  apply rel_prime_mult;trivial.\n  inversion H.\n  rewrite H9 in H17.\n  elim (mult_rel_prime n0 (power p (q*n+r)) k H17);intros.\n  apply rel_prime_power;apply rel_prime_sym;apply power_rel_prime with (q*n+r);trivial.\n  rewrite plus_comm;auto with arith.\n  right.\n  exists n0;exists (quotient_euclide n1 n H1);exists (remainder_euclide n1 n H1).\n  rewrite (mult_comm (quotient_euclide n1 n H1));rewrite <- H2.\n  exists (refactor l).\n  elim (in_wf ((n0,n1)::l) n0 n1);intros.\n  split;trivial.\n  split;trivial.\n  destruct (remainder_euclide n1 n H1);try tauto;auto with arith.\n  split;trivial.\n  apply rem_euclide.\n  split;trivial.\n  inversion H;trivial.\n  simpl;tauto.\n  trivial.\nQed.\n\n(** let n be a natural number and m>1 then either n=x^m or there is a prime number p and three numbers q,r and k such that n = p^(q*m+r)*k with 0<r<m and gcd(p,k)=1 *)\n",
                "context_tokens": 668,
                "proof_start_offset": 20239,
                "proof_end_offset": 20661,
                "proof": "Lemma is_power_m_dec : forall (n m:nat),(m>0)->{x:nat | n=(power x m)}+{p:nat & {q:nat & {r:nat & {k:nat | (is_prime p)/\\(0<r)/\\(r<m)/\\n=(power p (q*m+r))*k/\\(rel_prime p k)}}}}.\nProof.\nintros n m;intro H.\ncase (eq_nat_dec n 0);intro.\nleft;exists 0.\ndestruct m;simpl;try omega;trivial.\ngeneralize (factorisation_exists n n0);intro.\nelim H0;intro l;intro.\nelim p;intros.\nrewrite H2;apply wf_power_dec;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma is_power_m_dec : forall (n m:nat),(m>0)->{x:nat | n=(power x m)}+{p:nat & {q:nat & {r:nat & {k:nat | (is_prime p)/\\(0<r)/\\(r<m)/\\n=(power p (q*m+r))*k/\\(rel_prime p k)}}}}.\nProof.\n intros.\n destruct (is_power_m_dec n m) as [n|n].\n simpl; intros.\n destruct a.\n assert (n<>0) by (apply (is_power_pos_pos n m H).\n destruct (is_power_pos_pos n m) as [r|r].\n simpl; intros.\n destruct r.\n elim (is_power_pos_pos n m H); intros.\n elim (is_power_pos_pos n m H); intros.\n elim (is_power_pos_pos n m H); intros.\n elim (is_power_pos_pos n m H); intros.\n elim (is_power_pos_pos n m H); intros.\n elim (is_power_pos_pos n m H); intros.\n elim (is_power_pos_pos n m H); intros.\n elim (is_power_pos_pos n m H); intros.\n elim (is_power_pos_pos n m H); intros.\n elim (is_power_pos_pos n m H); intros.\n elim (is_power_pos_pos n mQed.",
                        "correct": false,
                        "error_msg": "File \"./primes.v\", line 27, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./primes.v\", line 602, characters 11-25:\nError: The reference is_power_m_dec was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: primes.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/euclide.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\nRequire Import Wf_nat.\n\nUnset Standard Proposition Elimination Names.\n\n(** lemmae about divisibility *)\n",
                "context_tokens": 252,
                "proof_start_offset": 1012,
                "proof_end_offset": 1219,
                "proof": "Lemma divides_le : forall (a b:nat),(a<>O)->(divides a b)->(b<=a).\nProof.\nintros.\nelim H0;intro q;intro.\nreplace b with (b*1);try ring.\nrewrite H1.\napply mult_le_compat;try omega.\ndestruct q;omega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma divides_le : forall (a b:nat),(a<>O)->(divides a b)->(b<=a).\nProof.\n intros a b.\n apply (gcd_refl a).\nQed.",
                        "correct": false,
                        "error_msg": "File \"./euclide.v\", line 23, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./euclide.v\", line 29, characters 8-16:\nError: The reference gcd_refl was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: euclide.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/euclide.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\nRequire Import Wf_nat.\n\nUnset Standard Proposition Elimination Names.\n\n(** lemmae about divisibility *)\nLemma divides_le : forall (a b:nat),(a<>O)->(divides a b)->(b<=a).\n  intros.\n  elim H0;intro q;intro.\n  replace b with (b*1);try ring.\n  rewrite H1.\n  apply mult_le_compat;try omega.\n  destruct q;omega.\nQed.\n\n(** Euclide theorem (existence) *)\n",
                "context_tokens": 338,
                "proof_start_offset": 1256,
                "proof_end_offset": 1718,
                "proof": "Theorem euclide : forall (a b:nat),(b<>O)->{q:nat & { r:nat | (a=b*q+r) /\\ (r < b)}}.\nProof.\nintros.\napply (lt_wf_rec a (fun a:nat =>{q : nat & {r : nat | a = b * q + r /\\ r < b}})).\nintros.\ncase (le_lt_dec b n);intro.\nelim (H0 (n-b)).\nintro q;intro.\nelim p;intro r;intro.\nexists (q+1);exists r.\nsplit;try tauto.\nrewrite (le_plus_minus b n);trivial.\nelim p0;intros.\nrewrite H1;ring.\nomega.\nexists 0;exists n.\nsplit;try tauto.\nring.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem euclide : forall (a b:nat),(b<>O)->{q:nat & { r:nat | (a=b*q+r) /\\ (r < b)}}.\nProof.\n  intros.\n  elim H0;intro q;intro q; elim q;intro q; elim q;intro q; elim q;intro q; elim q;intro q;\n    intros q' H1 q'2 q'3 q4 q4 q5 q6 q7;\n      rewrite q'4; rewrite q'5; rewrite q6;\n      rewrite q'5; rewrite q'6; rewrite q'6;\n      rewrite q'6; rewrite q'6; rewrite q'6;\n      rewrite q'6; rewrite q'6; rewrite q'6;\n      rewrite q'6; rewrite q'6; rewrite q'7;\n      rewrite q'6; rewrite q'7; rewrite q'7;\n      rewrite q'7; rewrite q'7; rewrite q'7;\n      rewrite q'7; rewrite q'7; rewrite q'7;\n      rewrite q'7; rewrite q'7; rewrite q'7;\n      rewrite q'7; rewrite q'7; rewrite q'8;\n      rewrite q'7; rewrite q'7; rewrite q'7;\n      rewrite q'7; rewrite q'7; rewrite q'7;\n     Qed.",
                        "correct": false,
                        "error_msg": "File \"./euclide.v\", line 23, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./euclide.v\", line 53, characters 5-8:\nError: The reference Qed was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: euclide.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/euclide.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\nRequire Import Wf_nat.\n\nUnset Standard Proposition Elimination Names.\n\n(** lemmae about divisibility *)\nLemma divides_le : forall (a b:nat),(a<>O)->(divides a b)->(b<=a).\n  intros.\n  elim H0;intro q;intro.\n  replace b with (b*1);try ring.\n  rewrite H1.\n  apply mult_le_compat;try omega.\n  destruct q;omega.\nQed.\n\n(** Euclide theorem (existence) *)\nTheorem euclide : forall (a b:nat),(b<>O)->{q:nat & { r:nat | (a=b*q+r) /\\ (r < b)}}.\n  intros.\n  apply (lt_wf_rec a (fun a:nat =>{q : nat &  {r : nat | a = b * q + r /\\ r < b}})).\n  intros.\n  case (le_lt_dec b n);intro.\n  elim (H0 (n-b)).\n  intro q;intro.\n  elim p;intro r;intro.\n  exists (q+1);exists r.\n  split;try tauto.\n  rewrite (le_plus_minus b n);trivial.\n  elim p0;intros.\n  rewrite H1;ring.\n  omega.\n  exists 0;exists n.\n  split;try tauto.\n  ring.\nQed.\n\nDefinition quotient_euclide (a b:nat)(H:(b<>O)) := let (q,_) := (euclide a b H) in q.\n\nDefinition remainder_euclide (a b:nat)(H:(b<>O)) := let (_,e0) := (euclide a b H) in let (r,_) := e0 in r.\n\n(** a div b where b<>0 *)\n",
                "context_tokens": 619,
                "proof_start_offset": 1941,
                "proof_end_offset": 2205,
                "proof": "Lemma quo_rem_euclide : forall (a b:nat)(H:(b<>O)),a=b*(quotient_euclide a b H)+(remainder_euclide a b H).\nProof.\nunfold quotient_euclide;unfold remainder_euclide;intros.\ngeneralize (euclide a b H);intros.\nelim s;intro q;intro.\nelim p;intro r;intro.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma quo_rem_euclide : forall (a b:nat)(H:(b<>O)),a=b*(quotient_euclide a b H)+(remainder_euclide a b H).\nProof.\n intros.\n destruct (mod_euclide a b H) as (r,H).\n exists r.\n split; try tauto.\n apply (H0 (n-b)).\nQed.",
                        "correct": false,
                        "error_msg": "File \"./euclide.v\", line 23, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./euclide.v\", line 63, characters 11-22:\nError: The reference mod_euclide was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: euclide.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/euclide.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\nRequire Import Wf_nat.\n\nUnset Standard Proposition Elimination Names.\n\n(** lemmae about divisibility *)\nLemma divides_le : forall (a b:nat),(a<>O)->(divides a b)->(b<=a).\n  intros.\n  elim H0;intro q;intro.\n  replace b with (b*1);try ring.\n  rewrite H1.\n  apply mult_le_compat;try omega.\n  destruct q;omega.\nQed.\n\n(** Euclide theorem (existence) *)\nTheorem euclide : forall (a b:nat),(b<>O)->{q:nat & { r:nat | (a=b*q+r) /\\ (r < b)}}.\n  intros.\n  apply (lt_wf_rec a (fun a:nat =>{q : nat &  {r : nat | a = b * q + r /\\ r < b}})).\n  intros.\n  case (le_lt_dec b n);intro.\n  elim (H0 (n-b)).\n  intro q;intro.\n  elim p;intro r;intro.\n  exists (q+1);exists r.\n  split;try tauto.\n  rewrite (le_plus_minus b n);trivial.\n  elim p0;intros.\n  rewrite H1;ring.\n  omega.\n  exists 0;exists n.\n  split;try tauto.\n  ring.\nQed.\n\nDefinition quotient_euclide (a b:nat)(H:(b<>O)) := let (q,_) := (euclide a b H) in q.\n\nDefinition remainder_euclide (a b:nat)(H:(b<>O)) := let (_,e0) := (euclide a b H) in let (r,_) := e0 in r.\n\n(** a div b where b<>0 *)\nLemma quo_rem_euclide : forall (a b:nat)(H:(b<>O)),a=b*(quotient_euclide a b H)+(remainder_euclide a b H).\n  unfold quotient_euclide;unfold remainder_euclide;intros.\n  generalize (euclide a b H);intros.\n  elim s;intro q;intro.\n  elim p;intro r;intro.\n  tauto.\nQed.\n\n(** a mod b where b<>0 *)\n",
                "context_tokens": 722,
                "proof_start_offset": 2233,
                "proof_end_offset": 2442,
                "proof": "Lemma rem_euclide : forall (a b:nat)(H:(b<>O)),(remainder_euclide a b H)<b.\nProof.\nunfold remainder_euclide;intros.\ngeneralize (euclide a b H);intros.\nelim s;intro q;intro.\nelim p;intro r;intro.\ntauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma rem_euclide : forall (a b:nat)(H:(b<>O)),(remainder_euclide a b H)<b.\n  intros.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n  elim H;intro.\n Qed.",
                        "correct": false,
                        "error_msg": "File \"./euclide.v\", line 23, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./euclide.v\", line 71, characters 9-14:\nError: Ltac call to \"intro\" failed.\n       No product even after head-reduction.\n\nmake[2]: *** [Makefile.coq:663: euclide.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/euclide.v",
                "context": " distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\nRequire Import missing.\nRequire Import division.\nRequire Import Wf_nat.\n\nUnset Standard Proposition Elimination Names.\n\n(** lemmae about divisibility *)\nLemma divides_le : forall (a b:nat),(a<>O)->(divides a b)->(b<=a).\n  intros.\n  elim H0;intro q;intro.\n  replace b with (b*1);try ring.\n  rewrite H1.\n  apply mult_le_compat;try omega.\n  destruct q;omega.\nQed.\n\n(** Euclide theorem (existence) *)\nTheorem euclide : forall (a b:nat),(b<>O)->{q:nat & { r:nat | (a=b*q+r) /\\ (r < b)}}.\n  intros.\n  apply (lt_wf_rec a (fun a:nat =>{q : nat &  {r : nat | a = b * q + r /\\ r < b}})).\n  intros.\n  case (le_lt_dec b n);intro.\n  elim (H0 (n-b)).\n  intro q;intro.\n  elim p;intro r;intro.\n  exists (q+1);exists r.\n  split;try tauto.\n  rewrite (le_plus_minus b n);trivial.\n  elim p0;intros.\n  rewrite H1;ring.\n  omega.\n  exists 0;exists n.\n  split;try tauto.\n  ring.\nQed.\n\nDefinition quotient_euclide (a b:nat)(H:(b<>O)) := let (q,_) := (euclide a b H) in q.\n\nDefinition remainder_euclide (a b:nat)(H:(b<>O)) := let (_,e0) := (euclide a b H) in let (r,_) := e0 in r.\n\n(** a div b where b<>0 *)\nLemma quo_rem_euclide : forall (a b:nat)(H:(b<>O)),a=b*(quotient_euclide a b H)+(remainder_euclide a b H).\n  unfold quotient_euclide;unfold remainder_euclide;intros.\n  generalize (euclide a b H);intros.\n  elim s;intro q;intro.\n  elim p;intro r;intro.\n  tauto.\nQed.\n\n(** a mod b where b<>0 *)\nLemma rem_euclide : forall (a b:nat)(H:(b<>O)),(remainder_euclide a b H)<b.\n  unfold remainder_euclide;intros.\n  generalize (euclide a b H);intros.\n  elim s;intro q;intro.\n  elim p;intro r;intro.\n  tauto.\nQed.\n\n(** Euclide division is unique *)\n",
                "context_tokens": 700,
                "proof_start_offset": 2478,
                "proof_end_offset": 3403,
                "proof": "Lemma euclide_unique : forall (a b q r q' r':nat),(b<>O)->a=b*q+r->a=b*q'+r'->r<b->r'<b->(q=q')/\\(r=r').\nProof.\nintros.\nrewrite H1 in H0.\ncase (lt_eq_lt_dec q q');intro.\ncase s;intro.\nrewrite (le_plus_minus q q') in H0;try (auto with arith).\nrewrite mult_plus_distr_l in H0.\nassert (b*(q'-q)+r' = r).\napply plus_reg_l with (b*q).\nrewrite plus_assoc;trivial.\nassert (0<(q'-q));try omega.\nassert (b<=b*(q'-q));try omega.\ncase (mult_O_le b (q'-q));intro;try omega.\nrewrite mult_comm;trivial.\nsplit;try tauto.\nrewrite <- e in H0.\nsymmetry;apply plus_reg_l with (b*q);trivial.\nrewrite (le_plus_minus q' q) in H0;try (auto with arith).\nrewrite mult_plus_distr_l in H0.\nassert (r'=(b*(q-q')+r)).\napply plus_reg_l with (b*q').\nrewrite plus_assoc;trivial.\nassert (0<(q-q'));try omega.\nassert (b<=b*(q-q'));try omega.\ncase (mult_O_le b (q-q'));intro;try omega.\nrewrite mult_comm;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma euclide_unique : forall (a b q r q' r':nat),(b<>O)->a=b*q+r->a=b*q'+r'->r<b->r'<b->(q=q')/\\(r=r').\nProof.\n intros a b q r' r' r' r' r' r' r' r' r' r' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r'' r''Qed.",
                        "correct": false,
                        "error_msg": "File \"./euclide.v\", line 23, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./euclide.v\", line 80, characters 17-19:\nError: r' is used twice.\n\nmake[2]: *** [Makefile.coq:663: euclide.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/euclide.v",
                "context": " tauto.\n  rewrite (le_plus_minus b n);trivial.\n  elim p0;intros.\n  rewrite H1;ring.\n  omega.\n  exists 0;exists n.\n  split;try tauto.\n  ring.\nQed.\n\nDefinition quotient_euclide (a b:nat)(H:(b<>O)) := let (q,_) := (euclide a b H) in q.\n\nDefinition remainder_euclide (a b:nat)(H:(b<>O)) := let (_,e0) := (euclide a b H) in let (r,_) := e0 in r.\n\n(** a div b where b<>0 *)\nLemma quo_rem_euclide : forall (a b:nat)(H:(b<>O)),a=b*(quotient_euclide a b H)+(remainder_euclide a b H).\n  unfold quotient_euclide;unfold remainder_euclide;intros.\n  generalize (euclide a b H);intros.\n  elim s;intro q;intro.\n  elim p;intro r;intro.\n  tauto.\nQed.\n\n(** a mod b where b<>0 *)\nLemma rem_euclide : forall (a b:nat)(H:(b<>O)),(remainder_euclide a b H)<b.\n  unfold remainder_euclide;intros.\n  generalize (euclide a b H);intros.\n  elim s;intro q;intro.\n  elim p;intro r;intro.\n  tauto.\nQed.\n\n(** Euclide division is unique *)\nLemma euclide_unique : forall (a b q r q' r':nat),(b<>O)->a=b*q+r->a=b*q'+r'->r<b->r'<b->(q=q')/\\(r=r').\n  intros.\n  rewrite H1 in H0.\n  case (lt_eq_lt_dec q q');intro.\n  case s;intro.\n  rewrite (le_plus_minus q q') in H0;try (auto with arith).\n  rewrite mult_plus_distr_l in H0.\n  assert (b*(q'-q)+r' = r).\n  apply plus_reg_l with (b*q).\n  rewrite plus_assoc;trivial.\n  assert (0<(q'-q));try omega.\n  assert (b<=b*(q'-q));try omega.\n  case (mult_O_le b (q'-q));intro;try omega.\n  rewrite mult_comm;trivial.\n  split;try tauto.\n  rewrite <- e in H0.\n  symmetry;apply plus_reg_l with (b*q);trivial.\n  rewrite (le_plus_minus q' q) in H0;try (auto with arith).\n  rewrite mult_plus_distr_l in H0.\n  assert (r'=(b*(q-q')+r)).\n  apply plus_reg_l with (b*q').\n  rewrite plus_assoc;trivial.\n  assert (0<(q-q'));try omega.\n  assert (b<=b*(q-q'));try omega.\n  case (mult_O_le b (q-q'));intro;try omega.\n  rewrite mult_comm;trivial.\nQed.\n\n(** if b<>0, then b | a iff a mod b = 0 *) \n",
                "context_tokens": 721,
                "proof_start_offset": 3449,
                "proof_end_offset": 4020,
                "proof": "Lemma divides_euclide : forall (a b:nat)(H:(b<>O)),((divides a b)<->((remainder_euclide a b H)=O)).\nProof.\nintros.\nred.\nsplit;intro.\ngeneralize (quo_rem_euclide a b H);intro.\ngeneralize (rem_euclide a b H);intro.\nelim H0;intro q;intro.\nassert (a=b*q+0).\nrewrite plus_comm;simpl;trivial.\nassert (0<b);try omega.\ngeneralize (euclide_unique a b (quotient_euclide a b H) (remainder_euclide a b H) q 0 H H1 H4 H2 H5).\nintros;tauto.\ngeneralize (quo_rem_euclide a b H).\nrewrite H0;rewrite plus_comm;simpl.\nintro;exists (quotient_euclide a b H);trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma divides_euclide : forall (a b:nat)(H:(b<>O)),((divides a b)<->((remainder_euclide a b H)=O)).\n  intros.\n  generalize (gcd_euclOK a b H);intros.\n  elim (gcd_euclOK a b H);intro.\n  elim (gcd_euclOK a b H);intro.\n  elim (gcd_euclOK a b H);intro.\n  elim (gcd_euclOK a b H);intro.\n  elim (gcd_euclOK a b H);intro.\n  elim (gcd_euclOK a b H);intro.\n  elim (gcd_euclOK a b H);intro.\n  elim (gcd_euclOK a b H);intro.\n  elim (gcd_euclOK a b H);intro.\n  elim (gcd_euclOK a b H);intro.\n  elim (gcd_euclOK a b H);intro.\n  elim (gcd_eucl_OK a b H);intro.\n  elim (gcd_eucl_OK a b H);intro.\n  elim (gcd_eucl_OK a b H);intro.\n  elim (gcd_eucl_OK a b H);intro.\n  elim (gcd_eucl_OK a b H);intro.\n  elim (gcd_eucl_OK a b H);intro.\n  elim (gcd_eucl_OK a b H);introQed.",
                        "correct": false,
                        "error_msg": "File \"./euclide.v\", line 23, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./euclide.v\", line 109, characters 14-24:\nError: The reference gcd_euclOK was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: euclide.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/euclide.v",
                "context": "\n  generalize (euclide a b H);intros.\n  elim s;intro q;intro.\n  elim p;intro r;intro.\n  tauto.\nQed.\n\n(** a mod b where b<>0 *)\nLemma rem_euclide : forall (a b:nat)(H:(b<>O)),(remainder_euclide a b H)<b.\n  unfold remainder_euclide;intros.\n  generalize (euclide a b H);intros.\n  elim s;intro q;intro.\n  elim p;intro r;intro.\n  tauto.\nQed.\n\n(** Euclide division is unique *)\nLemma euclide_unique : forall (a b q r q' r':nat),(b<>O)->a=b*q+r->a=b*q'+r'->r<b->r'<b->(q=q')/\\(r=r').\n  intros.\n  rewrite H1 in H0.\n  case (lt_eq_lt_dec q q');intro.\n  case s;intro.\n  rewrite (le_plus_minus q q') in H0;try (auto with arith).\n  rewrite mult_plus_distr_l in H0.\n  assert (b*(q'-q)+r' = r).\n  apply plus_reg_l with (b*q).\n  rewrite plus_assoc;trivial.\n  assert (0<(q'-q));try omega.\n  assert (b<=b*(q'-q));try omega.\n  case (mult_O_le b (q'-q));intro;try omega.\n  rewrite mult_comm;trivial.\n  split;try tauto.\n  rewrite <- e in H0.\n  symmetry;apply plus_reg_l with (b*q);trivial.\n  rewrite (le_plus_minus q' q) in H0;try (auto with arith).\n  rewrite mult_plus_distr_l in H0.\n  assert (r'=(b*(q-q')+r)).\n  apply plus_reg_l with (b*q').\n  rewrite plus_assoc;trivial.\n  assert (0<(q-q'));try omega.\n  assert (b<=b*(q-q'));try omega.\n  case (mult_O_le b (q-q'));intro;try omega.\n  rewrite mult_comm;trivial.\nQed.\n\n(** if b<>0, then b | a iff a mod b = 0 *) \nLemma divides_euclide : forall (a b:nat)(H:(b<>O)),((divides a b)<->((remainder_euclide a b H)=O)).\n  intros.\n  red.\n  split;intro.\n  generalize (quo_rem_euclide a b H);intro.\n  generalize (rem_euclide a b H);intro.\n  elim H0;intro q;intro.\n  assert (a=b*q+0).\n  rewrite plus_comm;simpl;trivial.\n  assert (0<b);try omega.\n  generalize (euclide_unique a b (quotient_euclide a b H) (remainder_euclide a b H) q 0 H H1 H4 H2 H5).\n  intros;tauto.\n  generalize (quo_rem_euclide a b H).\n  rewrite H0;rewrite plus_comm;simpl.\n  intro;exists (quotient_euclide a b H);trivial.\nQed.\n\n(** divisibility is decidable *)\n",
                "context_tokens": 735,
                "proof_start_offset": 4055,
                "proof_end_offset": 4426,
                "proof": "Lemma divides_dec : forall (a b:nat),{divides a b}+{~(divides a b)}.\nProof.\nintros.\ncase (eq_nat_dec b 0).\ncase (eq_nat_dec a 0);intros.\nrewrite e;left;apply zero_max_div.\nright;rewrite e;intro.\nelim H;intro q;intro.\nsimpl in H0;apply n;trivial.\nintro.\ncase (eq_nat_dec (remainder_euclide a b n) 0);[left | right];intros;elim (divides_euclide a b n);auto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma divides_dec : forall (a b:nat),{divides a b}+{~(divides a b)}.\nProof.\n  intros a b H.\n  destruct (divide_dec a b); auto.\n  destruct (divide_dec a b); auto.\n  destruct (divide_dec a b); auto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./euclide.v\", line 23, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./euclide.v\", line 127, characters 2-14:\nError: No product even after head-reduction.\n\nmake[2]: *** [Makefile.coq:663: euclide.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/euclide.v",
                "context": " q');intro.\n  case s;intro.\n  rewrite (le_plus_minus q q') in H0;try (auto with arith).\n  rewrite mult_plus_distr_l in H0.\n  assert (b*(q'-q)+r' = r).\n  apply plus_reg_l with (b*q).\n  rewrite plus_assoc;trivial.\n  assert (0<(q'-q));try omega.\n  assert (b<=b*(q'-q));try omega.\n  case (mult_O_le b (q'-q));intro;try omega.\n  rewrite mult_comm;trivial.\n  split;try tauto.\n  rewrite <- e in H0.\n  symmetry;apply plus_reg_l with (b*q);trivial.\n  rewrite (le_plus_minus q' q) in H0;try (auto with arith).\n  rewrite mult_plus_distr_l in H0.\n  assert (r'=(b*(q-q')+r)).\n  apply plus_reg_l with (b*q').\n  rewrite plus_assoc;trivial.\n  assert (0<(q-q'));try omega.\n  assert (b<=b*(q-q'));try omega.\n  case (mult_O_le b (q-q'));intro;try omega.\n  rewrite mult_comm;trivial.\nQed.\n\n(** if b<>0, then b | a iff a mod b = 0 *) \nLemma divides_euclide : forall (a b:nat)(H:(b<>O)),((divides a b)<->((remainder_euclide a b H)=O)).\n  intros.\n  red.\n  split;intro.\n  generalize (quo_rem_euclide a b H);intro.\n  generalize (rem_euclide a b H);intro.\n  elim H0;intro q;intro.\n  assert (a=b*q+0).\n  rewrite plus_comm;simpl;trivial.\n  assert (0<b);try omega.\n  generalize (euclide_unique a b (quotient_euclide a b H) (remainder_euclide a b H) q 0 H H1 H4 H2 H5).\n  intros;tauto.\n  generalize (quo_rem_euclide a b H).\n  rewrite H0;rewrite plus_comm;simpl.\n  intro;exists (quotient_euclide a b H);trivial.\nQed.\n\n(** divisibility is decidable *)\nLemma divides_dec : forall (a b:nat),{divides a b}+{~(divides a b)}.\n  intros.\n  case (eq_nat_dec b 0).\n  case (eq_nat_dec a 0);intros.\n  rewrite e;left;apply zero_max_div.\n  right;rewrite e;intro.\n  elim H;intro q;intro.\n  simpl in H0;apply n;trivial.\n  intro.\n  case (eq_nat_dec (remainder_euclide a b n) 0);[left | right];intros;elim (divides_euclide a b n);auto.\nQed.\n\n(** if a property about integer is decidable then it is decidable if there is an integer less than n that satisfies this property *)\n",
                "context_tokens": 685,
                "proof_start_offset": 4561,
                "proof_end_offset": 4980,
                "proof": "Lemma dec_impl_lt_dec : forall (P:nat->Prop),(forall (n:nat),{(P n)}+{~(P n)})->(forall (m:nat),{n:nat | (n<m)/\\(P(n))}+{(forall (n:nat),(n<m)->~(P n))}).\nProof.\nintros.\ninduction m.\nright;intros;inversion H0.\ncase (H m);intro.\nleft;exists m;split;try (auto with arith).\ncase IHm;intro.\nelim s;intro n0;intro.\nleft;exists n0;split;[omega | tauto].\nright;intros.\ninversion H0;trivial.\napply n0;omega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma dec_impl_lt_dec : forall (P:nat->Prop),(forall (n:nat),{(P n)}+{~(P n)})->(forall (m:nat),{n:nat | (n<m)/\\(P(n))}+{(forall (n:nat),(n<m)->~(P n))}).\nProof.\n intros.\n destruct (dec_eq_dec n 0).\n  case (eq_nat_dec n 0);intros.\n  rewrite e;intro.\n  apply n;trivial.\n  right;rewrite e;intro.\n  elim H;intro.\n  apply n;trivial.\n  right;rewrite e;intro.\n  elim H;intro.\n  apply n;trivial.\n  right;rewrite e;intro.\n  elim H;intro.\n  apply n;trivial.\n  right;rewrite e;intro.\n  elim H;intro.\n  apply n;trivial.\n  right;rewrite e;intro.\n  elim H;intro.\n  apply n;trivial.\n  right;rewrite e;intro.\n  elim H;intro.\n  apply n;trivial.\n  right;rewrite e;intro.\n  elim H;intro.\n  apply n;trivial.\n  right;rewrite e;intro.\n  elim H;intro.\n  apply n;trivial.\n  right;rewrite e;intro.\n  elim H;intro.\n  apply n;trivial.\n  right;rewrite e;intro.\n  elim H;intro.\n  apply n;trivial.\n  right;rewrite e;intro.\n  elim H;intro.Qed.",
                        "correct": false,
                        "error_msg": "File \"./euclide.v\", line 23, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./euclide.v\", line 141, characters 11-21:\nError: The reference dec_eq_dec was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: euclide.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/euclide.v",
                "context": " with arith).\n  rewrite mult_plus_distr_l in H0.\n  assert (r'=(b*(q-q')+r)).\n  apply plus_reg_l with (b*q').\n  rewrite plus_assoc;trivial.\n  assert (0<(q-q'));try omega.\n  assert (b<=b*(q-q'));try omega.\n  case (mult_O_le b (q-q'));intro;try omega.\n  rewrite mult_comm;trivial.\nQed.\n\n(** if b<>0, then b | a iff a mod b = 0 *) \nLemma divides_euclide : forall (a b:nat)(H:(b<>O)),((divides a b)<->((remainder_euclide a b H)=O)).\n  intros.\n  red.\n  split;intro.\n  generalize (quo_rem_euclide a b H);intro.\n  generalize (rem_euclide a b H);intro.\n  elim H0;intro q;intro.\n  assert (a=b*q+0).\n  rewrite plus_comm;simpl;trivial.\n  assert (0<b);try omega.\n  generalize (euclide_unique a b (quotient_euclide a b H) (remainder_euclide a b H) q 0 H H1 H4 H2 H5).\n  intros;tauto.\n  generalize (quo_rem_euclide a b H).\n  rewrite H0;rewrite plus_comm;simpl.\n  intro;exists (quotient_euclide a b H);trivial.\nQed.\n\n(** divisibility is decidable *)\nLemma divides_dec : forall (a b:nat),{divides a b}+{~(divides a b)}.\n  intros.\n  case (eq_nat_dec b 0).\n  case (eq_nat_dec a 0);intros.\n  rewrite e;left;apply zero_max_div.\n  right;rewrite e;intro.\n  elim H;intro q;intro.\n  simpl in H0;apply n;trivial.\n  intro.\n  case (eq_nat_dec (remainder_euclide a b n) 0);[left | right];intros;elim (divides_euclide a b n);auto.\nQed.\n\n(** if a property about integer is decidable then it is decidable if there is an integer less than n that satisfies this property *)\nLemma dec_impl_lt_dec : forall (P:nat->Prop),(forall (n:nat),{(P n)}+{~(P n)})->(forall (m:nat),{n:nat | (n<m)/\\(P(n))}+{(forall (n:nat),(n<m)->~(P n))}).\n  intros.\n  induction m.\n  right;intros;inversion H0.\n  case (H m);intro.\n  left;exists m;split;try (auto with arith).\n  case IHm;intro.\n  elim s;intro n0;intro.\n  left;exists n0;split;[omega | tauto].\n  right;intros.\n  inversion H0;trivial.\n  apply n0;omega.\nQed.\n\n(** forall n, either forall p, p<>1 /\\ p<>n -> not(p | n) or there is p such that p<>1 and p<>n and p | n *) \n",
                "context_tokens": 706,
                "proof_start_offset": 5092,
                "proof_end_offset": 5809,
                "proof": "Lemma divides_nat : forall (n:nat),{p:nat | (p<>1)/\\(p<>n)/\\(divides n p)}+{forall (p:nat),(p<>1)->(p<>n)->~(divides n p)}.\nProof.\nintros.\ncase (dec_impl_lt_dec (fun p => (p<>1)/\\(divides n p))) with n;intros.\ncase (divides_dec n n0);intro.\ncase (eq_nat_dec n0 1);intros.\nright;intro;tauto.\nleft;tauto.\nright;tauto.\nelim s;intros.\nleft;exists x.\nsplit;try tauto.\nsplit;try tauto.\nomega.\ncase (eq_nat_dec n 0);intro.\nrewrite e;left;exists 2.\nsplit;try (intro;discriminate).\nsplit;try (intro;discriminate).\napply zero_max_div.\nright;intros.\ncase (lt_eq_lt_dec p n);intro.\ncase s;intro;[red in n0;intro;apply n0 with p;tauto | auto].\nintro;generalize (divides_le n p n1 H1);omega.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma divides_nat : forall (n:nat),{p:nat | (p<>1)/\\(p<>n)/\\(divides n p)}+{forall (p:nat),(p<>1)->(p<>n)->~(divides n p)}.\nProof.\n  intros.\n  induction n.\n  left;intros.\n  elim H1;intro.\n  left;intros.\n  elim H2;intro.\n  right;intros.\n  elim H3;intro.\n  right;intros.\n  elim H3;intro.\n  right;intros.\n  elim H3;intro.\n  right;intros.\n  elim H3;intro.\n  right;intros.\n  elim H3;intro.\n  right;intros.\n  elim H3;intro.\n  right;intros.\n  elim H3;intro.\n  right;intros.\n  elim H3;intro.\n  right;intros.\n  elim H3;intro.\n  right;intros.\n  elim H3;intro.\n  right;intros.\n  elim H3;intro.\n  right;intros.\n  elim H3;intro.\n  right;intros.\n  elim H3;intro.\n  right;intros.\n  elim H3;intro.\n  right;intros.\n  elim H3;intro.\n  right;intros.\n  elim H3;intro.\n  right;intros.\n  elim H3;intro.\n  right;intros.\n  elim H3;intro.\n  right;intros.\n Qed.",
                        "correct": false,
                        "error_msg": "File \"./euclide.v\", line 23, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./euclide.v\", line 158, characters 7-9:\nError: The reference H1 was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: euclide.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/nthroot.v",
                "context": "(* Copyright (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\n(** First, we show the following theorem: *)\n(** if p is a prime number and gcd(p,k)=1 then sqrt(p*k) is not rational *)\n\n(** Then, we strengthen the result to the n-th root of p^r*k *)\n(** where 0 < r < n obtaining the theorem: *)\n(**  if p is a prime number, gcd(p,k)=1 and 0 < r < n then the n-th root of p^r*k is not rational *)\n\nRequire Import missing.\nRequire Import division.\nRequire Import gcd.\nRequire Import primes.\nRequire Import power.\n\nUnset Standard Proposition Elimination Names.\n\n(** now, we show the result claimed in the header *)\n",
                "context_tokens": 382,
                "proof_start_offset": 1408,
                "proof_end_offset": 2212,
                "proof": "Lemma sqrt_prime_irrat_aux : forall (p k a b:nat),(is_prime p)->(rel_prime p k)->(rel_prime a b)->(p*k*(square b) <> (square a)).\nProof.\nintros.\nintro.\nassert (divides a p).\napply prime_square;trivial.\nexists (k*(square b)).\nrewrite <- H2;ring.\nelim H3;intro n_a;intro.\nrewrite H4 in H2;rewrite square_mult_lemma in H2;unfold square in H2.\nassert (k*(b*b)=p*(n_a*n_a)).\napply mult_lemma6 with p.\nintro H5;rewrite H5 in H;apply not_prime_zero;trivial.\nrewrite mult_assoc;rewrite H2;ring.\nassert (divides b p).\napply prime_square;trivial;unfold square.\napply gauss with k.\napply rel_prime_sym;trivial.\nexists (n_a*n_a);trivial.\nassert (p=1).\nunfold rel_prime in H1.\nelim H1;intros.\napply divides_antisym;try (apply one_min_div).\napply H8;red;tauto.\nelim H;tauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma sqrt_prime_irrat_aux : forall (p k a b:nat),(is_prime p)->(rel_prime p k)->(rel_prime a b)->(p*k*(square b) <> (square a)).\nProof.\n intros p k a b.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime in |- *.\n unfold rel_prime inQed.",
                        "correct": false,
                        "error_msg": "File \"./nthroot.v\", line 32, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./nthroot.v\", line 68, characters 18-23:\nError:\nSyntax error: [tactic:ltac_use_default] expected after [tactic:tactic] (in [vernac:tactic_command]).\n\nmake[2]: *** [Makefile.coq:663: nthroot.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/nthroot.v",
                "context": "t (C) 2005-2008 Sebastien Briais *)\n(* http://lamp.epfl.ch/~sbriais/ *)\n\n(* This library is free software; you can redistribute it and/or modify *)\n(* it under the terms of the GNU Lesser General Public License as *)\n(* published by the Free Software Foundation; either version 2.1 of the *)\n(* License, or (at your option) any later version. *)\n\n(* This library is distributed in the hope that it will be useful, but *)\n(* WITHOUT ANY WARRANTY; without even the implied warranty of *)\n(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *)\n(* Lesser General Public License for more details. *)\n\n(* You should have received a copy of the GNU Lesser General Public *)\n(* License along with this library; if not, write to the Free Software *)\n(* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA *)\n(* 02110-1301 USA *)\n\n(** First, we show the following theorem: *)\n(** if p is a prime number and gcd(p,k)=1 then sqrt(p*k) is not rational *)\n\n(** Then, we strengthen the result to the n-th root of p^r*k *)\n(** where 0 < r < n obtaining the theorem: *)\n(**  if p is a prime number, gcd(p,k)=1 and 0 < r < n then the n-th root of p^r*k is not rational *)\n\nRequire Import missing.\nRequire Import division.\nRequire Import gcd.\nRequire Import primes.\nRequire Import power.\n\nUnset Standard Proposition Elimination Names.\n\n(** now, we show the result claimed in the header *)\nLemma sqrt_prime_irrat_aux : forall (p k a b:nat),(is_prime p)->(rel_prime p k)->(rel_prime a b)->(p*k*(square b) <> (square a)).\n  intros.\n  intro.\n  assert (divides a p).\n  apply prime_square;trivial.\n  exists (k*(square b)).\n  rewrite <- H2;ring.\n  elim H3;intro n_a;intro.\n  rewrite H4 in H2;rewrite square_mult_lemma in H2;unfold square in H2.\n  assert (k*(b*b)=p*(n_a*n_a)).\n  apply mult_lemma6 with p.\n  intro H5;rewrite H5 in H;apply not_prime_zero;trivial.\n  rewrite mult_assoc;rewrite H2;ring.\n  assert (divides b p).\n  apply prime_square;trivial;unfold square.\n  apply gauss with k.\n  apply rel_prime_sym;trivial.\n  exists (n_a*n_a);trivial.\n  assert (p=1).\n  unfold rel_prime in H1.\n  elim H1;intros.\n  apply divides_antisym;try (apply one_min_div).\n  apply H8;red;tauto.\n  elim H;tauto.\nQed.\n\n(** Theorem: if p is prime, p and k are relatively prime, then sqrt(p*k) is not rationnal *)\n",
                "context_tokens": 696,
                "proof_start_offset": 2307,
                "proof_end_offset": 3364,
                "proof": "Theorem sqrt_prime_irrat : forall (p k a b:nat),(is_prime p)->(rel_prime p k)->(b<>O)->(p*k*(square b) <> (square a)).\nProof.\nintros.\ngeneralize (gcd_is_gcd a b);intro.\ngeneralize (quo_is_quo a (gcd a b) (gcd_div_l (gcd a b) a b H2));intro.\ngeneralize (quo_is_quo b (gcd a b) (gcd_div_r (gcd a b) a b H2));intro.\nintro.\nrewrite H3 in H5.\nreplace (square b) with (square (gcd a b * quo b (gcd a b) (gcd_div_r (gcd a b) a b H2))) in H5;auto.\nrewrite square_mult_lemma in H5;rewrite square_mult_lemma in H5.\nassert (p*k*(square (quo b (gcd a b) (gcd_div_r (gcd a b) a b H2)))=(square (quo a (gcd a b) (gcd_div_l (gcd a b) a b H2)))).\napply mult_lemma6 with (square (gcd a b)).\nunfold square.\ngeneralize (gcd_non_zero (gcd a b) a b H1 H2);intro.\nintro;apply H6.\ncase (mult_lemma2 (gcd a b) (gcd a b) H7);trivial.\nrewrite <- H5;ring.\napply (sqrt_prime_irrat_aux p k (quo a (gcd a b) (gcd_div_l (gcd a b) a b H2)) (quo b (gcd a b) (gcd_div_r (gcd a b) a b H2)));auto.\napply gcd_rel_prime;apply (gcd_non_zero (gcd a b) a b);trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem sqrt_prime_irrat : forall (p k a b:nat),(is_prime p)->(rel_prime p k)->(b<>O)->(p*k*(square b) <> (square a)).\nProof.\n intros.\n generalize (is_prime_non_prime_non_prime p k a H).\n generalize (is_prime_non_prime_non_prime p k a H).\n generalize (is_prime_non_prime_non_prime p k a H).\n generalize (is_prime_non_prime_non_prime p k a H).\n generalize (is_prime_non_prime_non_prime p k a H).\n generalize (is_prime_non_prime_non_prime p k a H).\n generalize (is_prime_non_prime_non_prime p k a H).\n generalize (is_prime_non_prime_non_prime p k a H).\n generalize (is_prime_non_prime_non_prime p k a H).\ngeneralize (is_prime_non_prime_non_prime p k a H).\nunfold is_prime in H.\nelim H;intros.\napply prime_square; auto.\nQed.",
                        "correct": false,
                        "error_msg": "File \"./nthroot.v\", line 32, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./nthroot.v\", line 65, characters 13-41:\nError: The reference is_prime_non_prime_non_prime was not found\nin the current environment.\n\nmake[2]: *** [Makefile.coq:663: nthroot.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/nthroot.v",
                "context": "*(square b) <> (square a)).\n  intros.\n  intro.\n  assert (divides a p).\n  apply prime_square;trivial.\n  exists (k*(square b)).\n  rewrite <- H2;ring.\n  elim H3;intro n_a;intro.\n  rewrite H4 in H2;rewrite square_mult_lemma in H2;unfold square in H2.\n  assert (k*(b*b)=p*(n_a*n_a)).\n  apply mult_lemma6 with p.\n  intro H5;rewrite H5 in H;apply not_prime_zero;trivial.\n  rewrite mult_assoc;rewrite H2;ring.\n  assert (divides b p).\n  apply prime_square;trivial;unfold square.\n  apply gauss with k.\n  apply rel_prime_sym;trivial.\n  exists (n_a*n_a);trivial.\n  assert (p=1).\n  unfold rel_prime in H1.\n  elim H1;intros.\n  apply divides_antisym;try (apply one_min_div).\n  apply H8;red;tauto.\n  elim H;tauto.\nQed.\n\n(** Theorem: if p is prime, p and k are relatively prime, then sqrt(p*k) is not rationnal *)\nTheorem sqrt_prime_irrat : forall (p k a b:nat),(is_prime p)->(rel_prime p k)->(b<>O)->(p*k*(square b) <> (square a)).\n  intros.\n  generalize (gcd_is_gcd a b);intro.\n  generalize (quo_is_quo a (gcd a b) (gcd_div_l (gcd a b) a b H2));intro.\n  generalize (quo_is_quo b (gcd a b) (gcd_div_r (gcd a b) a b H2));intro.\n  intro.\n  rewrite H3 in H5.\n  replace (square b) with (square (gcd a b * quo b (gcd a b) (gcd_div_r (gcd a b) a b H2))) in H5;auto.\n  rewrite square_mult_lemma in H5;rewrite square_mult_lemma in H5.\n  assert (p*k*(square (quo b (gcd a b) (gcd_div_r (gcd a b) a b H2)))=(square (quo a (gcd a b) (gcd_div_l (gcd a b) a b H2)))).\n  apply mult_lemma6 with (square (gcd a b)).\n  unfold square.\n  generalize (gcd_non_zero (gcd a b) a b H1 H2);intro.\n  intro;apply H6.\n  case (mult_lemma2 (gcd a b) (gcd a b) H7);trivial.\n  rewrite <- H5;ring.\n  apply (sqrt_prime_irrat_aux p k (quo a (gcd a b) (gcd_div_l (gcd a b) a b H2)) (quo b (gcd a b) (gcd_div_r (gcd a b) a b H2)));auto.\n  apply gcd_rel_prime;apply (gcd_non_zero (gcd a b) a b);trivial.\nQed.\n\n(** if p is prime then sqrt(p) is not rationnal *)\n",
                "context_tokens": 720,
                "proof_start_offset": 3417,
                "proof_end_offset": 3629,
                "proof": "Fact sqrt_prime : forall (p:nat),(is_prime p)->forall (a b:nat),(b<>O)->(p*(square b)<>(square a)).\nProof.\nintros.\nreplace p with (p*1);try (auto with arith).\napply sqrt_prime_irrat;trivial;apply rel_prime_1.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Fact sqrt_prime : forall (p:nat),(is_prime p)->forall (a b:nat),(b<>O)->(p*(square b)<>(square a)).\nProof.\n intros.\n generalize (gcd_is_gcd a b);intro.\n generalize (gcd_is_gcd a b);intro.\n generalize (gcd_is_gcd a b);intro.\n generalize (gcd_is_gcd a b);intro.\n generalize (gcd_is_gcd a b);intro.\n generalize (gcd_is_gcd a b);intro.\n generalize (gcd_is_gcd a b);intro.\n generalize (gcd_is_gcd a b);intro.\n generalize (gcd_is_gcd a b);intro.\n generalize (gcd_is_gcd a b);intro.\n generalize (gcd_is_gcd a b);intro.\n generalize (gcd_is_gcd a b);intro.\n generalize (gcd_is_gcd a b);intro.\n generalize (gcd_is_gcd a b);intro.\n generalize (gcd_is_gcd a b);intro.\n generalize (gcd_is_gcd a b);intro.\n generalize (gcd_is_gcd a b);intro.\n generalize (gcd_is_gcd a b);intro.\n generalize (gcd_is_gcd a b);intro.\n generalize (Qed.",
                        "correct": false,
                        "error_msg": "File \"./nthroot.v\", line 32, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./nthroot.v\", line 105, characters 16-17:\nError:\nSyntax error: '|' or ',' or ')' expected after [constr:operconstr level 200] (in [constr:operconstr]).\n\nmake[2]: *** [Makefile.coq:663: nthroot.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/nthroot.v",
                "context": "*n_a)).\n  apply mult_lemma6 with p.\n  intro H5;rewrite H5 in H;apply not_prime_zero;trivial.\n  rewrite mult_assoc;rewrite H2;ring.\n  assert (divides b p).\n  apply prime_square;trivial;unfold square.\n  apply gauss with k.\n  apply rel_prime_sym;trivial.\n  exists (n_a*n_a);trivial.\n  assert (p=1).\n  unfold rel_prime in H1.\n  elim H1;intros.\n  apply divides_antisym;try (apply one_min_div).\n  apply H8;red;tauto.\n  elim H;tauto.\nQed.\n\n(** Theorem: if p is prime, p and k are relatively prime, then sqrt(p*k) is not rationnal *)\nTheorem sqrt_prime_irrat : forall (p k a b:nat),(is_prime p)->(rel_prime p k)->(b<>O)->(p*k*(square b) <> (square a)).\n  intros.\n  generalize (gcd_is_gcd a b);intro.\n  generalize (quo_is_quo a (gcd a b) (gcd_div_l (gcd a b) a b H2));intro.\n  generalize (quo_is_quo b (gcd a b) (gcd_div_r (gcd a b) a b H2));intro.\n  intro.\n  rewrite H3 in H5.\n  replace (square b) with (square (gcd a b * quo b (gcd a b) (gcd_div_r (gcd a b) a b H2))) in H5;auto.\n  rewrite square_mult_lemma in H5;rewrite square_mult_lemma in H5.\n  assert (p*k*(square (quo b (gcd a b) (gcd_div_r (gcd a b) a b H2)))=(square (quo a (gcd a b) (gcd_div_l (gcd a b) a b H2)))).\n  apply mult_lemma6 with (square (gcd a b)).\n  unfold square.\n  generalize (gcd_non_zero (gcd a b) a b H1 H2);intro.\n  intro;apply H6.\n  case (mult_lemma2 (gcd a b) (gcd a b) H7);trivial.\n  rewrite <- H5;ring.\n  apply (sqrt_prime_irrat_aux p k (quo a (gcd a b) (gcd_div_l (gcd a b) a b H2)) (quo b (gcd a b) (gcd_div_r (gcd a b) a b H2)));auto.\n  apply gcd_rel_prime;apply (gcd_non_zero (gcd a b) a b);trivial.\nQed.\n\n(** if p is prime then sqrt(p) is not rationnal *)\nFact sqrt_prime : forall (p:nat),(is_prime p)->forall (a b:nat),(b<>O)->(p*(square b)<>(square a)).\n  intros.\n  replace p with (p*1);try (auto with arith).\n  apply sqrt_prime_irrat;trivial;apply rel_prime_1.\nQed.\n\n(** We now deduce from this theorem that sqrt(2) is not rationnal *)\n(** here is it! *)\n",
                "context_tokens": 728,
                "proof_start_offset": 3719,
                "proof_end_offset": 3854,
                "proof": "Fact sqrt_2_irrat : forall (p q:nat),(q<>O)->(2*(square q)<>(square p)).\nProof.\nintros.\napply sqrt_prime;trivial.\napply is_prime_2.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Fact sqrt_2_irrat : forall (p q:nat),(q<>O)->(2*(square q)<>(square p)).\nProof.\n  intros.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  apply sqrt_2_correct.\n  applyQed.",
                        "correct": false,
                        "error_msg": "File \"./nthroot.v\", line 32, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./nthroot.v\", line 94, characters 8-22:\nError: The reference sqrt_2_correct was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: nthroot.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/nthroot.v",
                "context": ".\n  assert (p=1).\n  unfold rel_prime in H1.\n  elim H1;intros.\n  apply divides_antisym;try (apply one_min_div).\n  apply H8;red;tauto.\n  elim H;tauto.\nQed.\n\n(** Theorem: if p is prime, p and k are relatively prime, then sqrt(p*k) is not rationnal *)\nTheorem sqrt_prime_irrat : forall (p k a b:nat),(is_prime p)->(rel_prime p k)->(b<>O)->(p*k*(square b) <> (square a)).\n  intros.\n  generalize (gcd_is_gcd a b);intro.\n  generalize (quo_is_quo a (gcd a b) (gcd_div_l (gcd a b) a b H2));intro.\n  generalize (quo_is_quo b (gcd a b) (gcd_div_r (gcd a b) a b H2));intro.\n  intro.\n  rewrite H3 in H5.\n  replace (square b) with (square (gcd a b * quo b (gcd a b) (gcd_div_r (gcd a b) a b H2))) in H5;auto.\n  rewrite square_mult_lemma in H5;rewrite square_mult_lemma in H5.\n  assert (p*k*(square (quo b (gcd a b) (gcd_div_r (gcd a b) a b H2)))=(square (quo a (gcd a b) (gcd_div_l (gcd a b) a b H2)))).\n  apply mult_lemma6 with (square (gcd a b)).\n  unfold square.\n  generalize (gcd_non_zero (gcd a b) a b H1 H2);intro.\n  intro;apply H6.\n  case (mult_lemma2 (gcd a b) (gcd a b) H7);trivial.\n  rewrite <- H5;ring.\n  apply (sqrt_prime_irrat_aux p k (quo a (gcd a b) (gcd_div_l (gcd a b) a b H2)) (quo b (gcd a b) (gcd_div_r (gcd a b) a b H2)));auto.\n  apply gcd_rel_prime;apply (gcd_non_zero (gcd a b) a b);trivial.\nQed.\n\n(** if p is prime then sqrt(p) is not rationnal *)\nFact sqrt_prime : forall (p:nat),(is_prime p)->forall (a b:nat),(b<>O)->(p*(square b)<>(square a)).\n  intros.\n  replace p with (p*1);try (auto with arith).\n  apply sqrt_prime_irrat;trivial;apply rel_prime_1.\nQed.\n\n(** We now deduce from this theorem that sqrt(2) is not rationnal *)\n(** here is it! *)\nFact sqrt_2_irrat : forall (p q:nat),(q<>O)->(2*(square q)<>(square p)).\n  intros.\n  apply sqrt_prime;trivial.\n  apply is_prime_2.\nQed.\n\n(** generalisation *)\n",
                "context_tokens": 694,
                "proof_start_offset": 3878,
                "proof_end_offset": 5151,
                "proof": "Lemma nth_root_irrat_aux : forall (p k a b n r:nat),(is_prime p)->(rel_prime p k)->(0<r)->(r<n)->(rel_prime a b)->((power p r)*k*(power b n) <> (power a n)).\nProof.\nintros.\nintro.\nassert (divides a p).\napply prime_power with n;trivial.\ngeneralize (power_divides_lemma1 r p H1);intro.\nelim H5;intro q;intros.\nrewrite H6 in H4.\nrewrite <- H4;exists (q*k*(power b n));ring.\nassert (divides b p).\nelim H5;intro q;intros.\nrewrite H6 in H4.\nrewrite power_mult_lemma1 in H4.\nassert ((power p n)=(power p (r+(n-r)))).\nrewrite <- le_plus_minus;try (auto with arith).\nrewrite H7 in H4;rewrite power_plus_lemma1 in H4.\nassert ((power p r)<>O).\nintro.\napply not_prime_zero.\nassert (p=O).\napply power_zero with r;trivial.\nrewrite H9 in H;trivial.\nrewrite <- mult_assoc in H4;rewrite <- mult_assoc in H4;generalize (mult_lemma6 (k*(power b n)) ((power p (n-r))*(power q n)) (power p r) H8 H4);intro.\nassert (divides (power p (n-r)) p).\napply power_divides_lemma1;apply minus_lt_lemma1;trivial.\napply prime_power with n;trivial.\napply gauss with k;try (apply rel_prime_sym;trivial).\nrewrite H9;apply divides_mult;trivial.\nelim H3;intros.\nelim H;intros.\napply H9;apply divides_antisym;try (apply one_min_div).\napply H8;red;tauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Lemma nth_root_irrat_aux : forall (p k a b n r:nat),(is_prime p)->(rel_prime p k)->(0<r)->(r<n)->(rel_prime a b)->((power p r)*k*(power b n) <> (power a n)).\nProof.\n  intros.\n  apply (is_prime_2_correct p k a b n r).\n  apply (is_prime_2_correct p k b n r).\n  apply (is_prime_2_correct p k b n r).\n  apply (is_prime_2_correct p k b n r).\n  apply (is_prime_2_correct p k b n r).\n  apply (is_prime_2_correct p k b n r).\n  apply (is_prime_2_correct p k b n r).\n  apply (is_prime_2_correct p k b n r).\n  apply (is_prime_2_correct p k b n r).\n  apply (is_prime_2_correct p k b n r).\n  apply (is_prime_2_correct p k b n r).\n  apply (is_prime_2_correct p k b n r).\n  apply (is_prime_2_correct p k b n r).\n  apply (is_prime_2_correct p k b n r).\n  apply (is_prime_2_correct p k b n r).\n  apply (is_prime_2_Qed.",
                        "correct": false,
                        "error_msg": "File \"./nthroot.v\", line 32, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./nthroot.v\", line 101, characters 9-27:\nError: The reference is_prime_2_correct was not found in the current\nenvironment.\n\nmake[2]: *** [Makefile.coq:663: nthroot.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/nthroot.v",
                "context": "rel_prime;apply (gcd_non_zero (gcd a b) a b);trivial.\nQed.\n\n(** if p is prime then sqrt(p) is not rationnal *)\nFact sqrt_prime : forall (p:nat),(is_prime p)->forall (a b:nat),(b<>O)->(p*(square b)<>(square a)).\n  intros.\n  replace p with (p*1);try (auto with arith).\n  apply sqrt_prime_irrat;trivial;apply rel_prime_1.\nQed.\n\n(** We now deduce from this theorem that sqrt(2) is not rationnal *)\n(** here is it! *)\nFact sqrt_2_irrat : forall (p q:nat),(q<>O)->(2*(square q)<>(square p)).\n  intros.\n  apply sqrt_prime;trivial.\n  apply is_prime_2.\nQed.\n\n(** generalisation *)\nLemma nth_root_irrat_aux : forall (p k a b n r:nat),(is_prime p)->(rel_prime p k)->(0<r)->(r<n)->(rel_prime a b)->((power p r)*k*(power b n) <> (power a n)).\n  intros.\n  intro.\n  assert (divides a p).\n  apply prime_power with n;trivial.\n  generalize (power_divides_lemma1 r p H1);intro.\n  elim H5;intro q;intros.\n  rewrite H6 in H4.\n  rewrite <- H4;exists (q*k*(power b n));ring.\n  assert (divides b p).\n  elim H5;intro q;intros.\n  rewrite H6 in H4.\n  rewrite power_mult_lemma1 in H4.\n  assert ((power p n)=(power p (r+(n-r)))).\n  rewrite <- le_plus_minus;try (auto with arith).\n  rewrite H7 in H4;rewrite power_plus_lemma1 in H4.\n  assert ((power p r)<>O).\n  intro.\n  apply not_prime_zero.\n  assert (p=O).\n  apply power_zero with r;trivial.\n  rewrite H9 in H;trivial.\n  rewrite <- mult_assoc in H4;rewrite <- mult_assoc in H4;generalize (mult_lemma6 (k*(power b n)) ((power p (n-r))*(power q n)) (power p r) H8 H4);intro.\n  assert (divides (power p (n-r)) p).\n  apply power_divides_lemma1;apply minus_lt_lemma1;trivial.\n  apply prime_power with n;trivial.\n  apply gauss with k;try (apply rel_prime_sym;trivial).\n  rewrite H9;apply divides_mult;trivial.\n  elim H3;intros.\n  elim H;intros.\n  apply H9;apply divides_antisym;try (apply one_min_div).\n  apply H8;red;tauto.\nQed.\n\n(** generalization of the theorem: if p is a prime number, 0 < r < n and gcd(p,k)=1 then the n-th root of p^r*k is not rationnal! *)\n",
                "context_tokens": 698,
                "proof_start_offset": 5286,
                "proof_end_offset": 6579,
                "proof": "Theorem nth_root_irrat : forall (p k a b n r:nat),(is_prime p)->(rel_prime p k)->(0<r)->(r<n)->(b<>0)->((power p r)*k*(power b n) <> (power a n)).\nProof.\nintros.\nintro.\ngeneralize (gcd_is_gcd a b);intro.\ngeneralize (quo_is_quo a (gcd a b) (gcd_div_l (gcd a b) a b H5));intro.\ngeneralize (quo_is_quo b (gcd a b) (gcd_div_r (gcd a b) a b H5));intro.\nassert ((power a n)=(power (gcd a b * quo a (gcd a b) (gcd_div_l (gcd a b) a b H5)) n));try (rewrite <- H6;trivial).\nassert ((power b n)=(power (gcd a b * quo b (gcd a b) (gcd_div_r (gcd a b) a b H5)) n));try (rewrite <- H7;trivial).\nrewrite power_mult_lemma1 in H8;rewrite H8 in H4.\nrewrite power_mult_lemma1 in H9;rewrite H9 in H4.\nrewrite mult_lemma7 in H4.\nassert ((power (gcd a b) n)<>O).\nintro.\ngeneralize (power_zero n (gcd a b) H10);intro.\napply (gcd_non_zero (gcd a b) a b);trivial.\ngeneralize (mult_lemma6 (power p r * k * power (quo b (gcd a b) (gcd_div_r (gcd a b) a b H5)) n) (power (quo a (gcd a b) (gcd_div_l (gcd a b) a b H5)) n) (power (gcd a b) n) H10 H4).\nfold ((power p r * k * power (quo b (gcd a b) (gcd_div_r (gcd a b) a b H5)) n)<>(power (quo a (gcd a b) (gcd_div_l (gcd a b) a b H5)) n)).\napply nth_root_irrat_aux;trivial.\napply gcd_rel_prime;apply (gcd_non_zero (gcd a b) a b);trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem nth_root_irrat : forall (p k a b n r:nat),(is_prime p)->(rel_prime p k)->(0<r)->(r<n)->(b<>0)->((power p r)*k*(power b n) <> (power a n)).\nProof.\n intros.\n apply (proj1 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2 (proj2proj2 (Qed.",
                        "correct": false,
                        "error_msg": "File \"./nthroot.v\", line 32, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./nthroot.v\", line 136, characters 588-589:\nError:\nSyntax error: '|' or ',' or ')' expected after [constr:operconstr level 200] (in [constr:operconstr]).\n\nmake[2]: *** [Makefile.coq:663: nthroot.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/nthroot.v",
                "context": "-r)) p).\n  apply power_divides_lemma1;apply minus_lt_lemma1;trivial.\n  apply prime_power with n;trivial.\n  apply gauss with k;try (apply rel_prime_sym;trivial).\n  rewrite H9;apply divides_mult;trivial.\n  elim H3;intros.\n  elim H;intros.\n  apply H9;apply divides_antisym;try (apply one_min_div).\n  apply H8;red;tauto.\nQed.\n\n(** generalization of the theorem: if p is a prime number, 0 < r < n and gcd(p,k)=1 then the n-th root of p^r*k is not rationnal! *)\nTheorem nth_root_irrat : forall (p k a b n r:nat),(is_prime p)->(rel_prime p k)->(0<r)->(r<n)->(b<>0)->((power p r)*k*(power b n) <> (power a n)).\n  intros.\n  intro.\n  generalize (gcd_is_gcd a b);intro.\n  generalize (quo_is_quo a (gcd a b) (gcd_div_l (gcd a b) a b H5));intro.\n  generalize (quo_is_quo b (gcd a b) (gcd_div_r (gcd a b) a b H5));intro.\n  assert ((power a n)=(power (gcd a b * quo a (gcd a b) (gcd_div_l (gcd a b) a b H5)) n));try (rewrite <- H6;trivial).\n  assert ((power b n)=(power (gcd a b * quo b (gcd a b) (gcd_div_r (gcd a b) a b H5)) n));try (rewrite <- H7;trivial).\n  rewrite power_mult_lemma1 in H8;rewrite H8 in H4.\n  rewrite power_mult_lemma1 in H9;rewrite H9 in H4.\n  rewrite mult_lemma7 in H4.\n  assert ((power (gcd a b) n)<>O).\n  intro.\n  generalize (power_zero n (gcd a b) H10);intro.\n  apply (gcd_non_zero (gcd a b) a b);trivial.\n  generalize (mult_lemma6 (power p r * k * power (quo b (gcd a b) (gcd_div_r (gcd a b) a b H5)) n) (power (quo a (gcd a b) (gcd_div_l (gcd a b) a b H5)) n) (power (gcd a b) n) H10 H4).\n  fold ((power p r * k * power (quo b (gcd a b) (gcd_div_r (gcd a b) a b H5)) n)<>(power (quo a (gcd a b) (gcd_div_l (gcd a b) a b H5)) n)).\n  apply nth_root_irrat_aux;trivial.\n  apply gcd_rel_prime;apply (gcd_non_zero (gcd a b) a b);trivial.\nQed.\n\n(** Generalization of the previous theorem *)\n",
                "context_tokens": 691,
                "proof_start_offset": 6627,
                "proof_end_offset": 7532,
                "proof": "Theorem nth_root_irrational : forall (p k a b n q r:nat),(is_prime p)->(rel_prime p k)->(0<r)->(r<n)->(b<>0)->((power p (q*n+r))*k*(power b n) <> (power a n)).\nProof.\nintros.\nintro.\nrewrite power_plus_lemma1 in H4.\nassert (divides a (power p q)).\napply prime_power_qn with n;try (auto with arith);try omega.\nexists ((power p r)*k*(power b n)).\nrewrite <- H4;ring.\nassert (0<n);try omega.\nelim H5;intro a';intro.\nrewrite H7 in H4.\nrewrite power_mult_lemma1 in H4;rewrite power_power_lemma1 in H4.\nassert ((power p (q*n))<>0).\nintro;apply not_prime_zero;generalize (power_zero (q*n) p H8);intro;rewrite H9 in H;trivial.\nrewrite <- (mult_assoc (power p (q*n))) in H4;rewrite <- (mult_assoc (power p (q*n))) in H4.\ngeneralize (mult_lemma6 (power p r*k*power b n) (power a' n) (power p (q*n)) H8 H4).\nfold (power p r * k * power b n <> power a' n).\napply nth_root_irrat;trivial.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem nth_root_irrational : forall (p k a b n q r:nat),(is_prime p)->(rel_prime p k)->(0<r)->(r<n)->(b<>0)->((power p (q*n+r))*k*(power b n) <> (power a n)).\nProof.\nintros.\napply (fun (p q:nat)(r:nat)(r:nat)(q:nat)(r:nat)(r:nat)(r':nat)(r':nat)(r':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(r'':nat)(Qed.",
                        "correct": false,
                        "error_msg": "File \"./nthroot.v\", line 32, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./nthroot.v\", line 158, characters 551-552:\nError:\nSyntax error: ':=' or ':' or [Prim.name] expected after [Prim.name] (in [constr:closed_binder]).\n\nmake[2]: *** [Makefile.coq:663: nthroot.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            },
            {
                "filepath": "./coq_projects/fundamental-arithmetics/nthroot.v",
                "context": " b) (gcd_div_r (gcd a b) a b H5)) n));try (rewrite <- H7;trivial).\n  rewrite power_mult_lemma1 in H8;rewrite H8 in H4.\n  rewrite power_mult_lemma1 in H9;rewrite H9 in H4.\n  rewrite mult_lemma7 in H4.\n  assert ((power (gcd a b) n)<>O).\n  intro.\n  generalize (power_zero n (gcd a b) H10);intro.\n  apply (gcd_non_zero (gcd a b) a b);trivial.\n  generalize (mult_lemma6 (power p r * k * power (quo b (gcd a b) (gcd_div_r (gcd a b) a b H5)) n) (power (quo a (gcd a b) (gcd_div_l (gcd a b) a b H5)) n) (power (gcd a b) n) H10 H4).\n  fold ((power p r * k * power (quo b (gcd a b) (gcd_div_r (gcd a b) a b H5)) n)<>(power (quo a (gcd a b) (gcd_div_l (gcd a b) a b H5)) n)).\n  apply nth_root_irrat_aux;trivial.\n  apply gcd_rel_prime;apply (gcd_non_zero (gcd a b) a b);trivial.\nQed.\n\n(** Generalization of the previous theorem *)\nTheorem nth_root_irrational : forall (p k a b n q r:nat),(is_prime p)->(rel_prime p k)->(0<r)->(r<n)->(b<>0)->((power p (q*n+r))*k*(power b n) <> (power a n)).\n  intros.\n  intro.\n  rewrite power_plus_lemma1 in H4.\n  assert (divides a (power p q)).\n  apply prime_power_qn with n;try (auto with arith);try omega.\n  exists ((power p r)*k*(power b n)).\n  rewrite <- H4;ring.\n  assert (0<n);try omega.\n  elim H5;intro a';intro.\n  rewrite H7 in H4.\n  rewrite power_mult_lemma1 in H4;rewrite power_power_lemma1 in H4.\n  assert ((power p (q*n))<>0).\n  intro;apply not_prime_zero;generalize (power_zero (q*n) p H8);intro;rewrite H9 in H;trivial.\n  rewrite <- (mult_assoc (power p (q*n))) in H4;rewrite <- (mult_assoc (power p (q*n))) in H4.\n  generalize (mult_lemma6 (power p r*k*power b n) (power a' n) (power p (q*n)) H8 H4).\n  fold (power p r * k * power b n <> power a' n).\n  apply nth_root_irrat;trivial.\nQed.\n\n(** let x and n be two numbers such that n > 0, then either the n-th root of x is a natural number of it is not rationnal *)\n",
                "context_tokens": 706,
                "proof_start_offset": 7659,
                "proof_end_offset": 8047,
                "proof": "Theorem nth_root : forall (x n:nat),(n>0)->{y:nat | x=(power y n)}+{forall (a b:nat),(b<>0)->x*(power b n)<>(power a n)}.\nProof.\nintros.\ncase (is_power_m_dec x n H);intro;try tauto.\nelim s;intro p;intro.\nelim p0;intro q;intro.\nelim p1;intro r;intro.\nelim p2;intro k;intro.\nright;intros.\nassert (x=(power p (q*n+r))*k);try tauto.\nrewrite H1;apply nth_root_irrational;tauto.\nQed.",
                "end_command": "Qed.",
                "generated_proofs": [
                    {
                        "proof": "Theorem nth_root : forall (x n:nat),(n>0)->{y:nat | x=(power y n)}+{forall (a b:nat),(b<>0)->x*(power b n)<>(power a n)}.\nProof.\nintros x n.\ndestruct x;destruct y;simpl;intros;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nrewrite H;\nQed.",
                        "correct": false,
                        "error_msg": "File \"./nthroot.v\", line 32, characters 0-45:\nWarning: There is no option Standard Proposition Elimination Names.\n[unknown-option,option]\nFile \"./nthroot.v\", line 239, characters 0-3:\nError: The reference Qed was not found in the current environment.\n\nmake[2]: *** [Makefile.coq:663: nthroot.vo] Error 1\nmake[1]: *** [Makefile.coq:327: all] Error 2\nmake: *** [Makefile:2: all] Error 2\n"
                    }
                ]
            }
        ]
    }
}