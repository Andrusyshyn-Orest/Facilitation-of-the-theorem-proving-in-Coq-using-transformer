{
    "filename": "Classical_Wf.v",
    "coq_project": "zorns-lemma",
    "vernac_cmds": [
        [
            "Require Import Classical.",
            "VernacRequire",
            "4cc53198e8d48bbb9dcca109b0e59a015dd7a5bb"
        ],
        [
            "Require Export Ensembles.",
            "VernacRequire",
            "28e420a8cd6ad0b629b3aed17ea481c322132121"
        ],
        [
            "Require Import EnsemblesImplicit.",
            "VernacRequire",
            "b2ea379c198258c382cfda7770f343a23840bbb0"
        ],
        [
            "Require Export Relation_Definitions.",
            "VernacRequire",
            "7609fde823572a97bac3f20d213dd37544e5ef7e"
        ],
        [
            "Require Import Relation_Definitions_Implicit.",
            "VernacRequire",
            "ea99a3658ef1cac6866bb2b8c469ec4708877b77"
        ],
        [
            "Require Import EnsemblesSpec.",
            "VernacRequire",
            "8bb92536bd9519ba28cced13d7fb038569336295"
        ],
        [
            "Section MinimalElements.",
            "VernacBeginSection",
            "7b35eb4a8dcabe6b49f8c7539a37581753b33525"
        ],
        [
            "Variable T:Type.",
            "VernacAssumption",
            "a15b17e37c4241158d544882375356c273dc93f2"
        ],
        [
            "Variable R:relation T.",
            "VernacAssumption",
            "7dc53c8ea3aff6986c5b6582b9e3297cbb82296a"
        ],
        [
            "Definition minimal_element_property : Prop := forall S:Ensemble T, Inhabited S -> exists x:T, In S x /\\ forall y:T, In S y -> ~ R y x.",
            "VernacDefinition",
            "a860281b01e97343e6c6a152f27878ac18a274a1"
        ],
        [
            "Lemma WF_implies_MEP: well_founded R -> minimal_element_property.",
            "VernacStartTheoremProof",
            "de5c73cfa7858ea06ea3900307233122e7604b2b"
        ],
        [
            "unfold well_founded.",
            "VernacExtend",
            "e54483b8d4c15affa5848e44e1a0e79bf38074ce"
        ],
        [
            "unfold minimal_element_property.",
            "VernacExtend",
            "2301359be7f74721fa978063212febfd780785a0"
        ],
        [
            "intros WF S Hinh.",
            "VernacExtend",
            "bdf4ff16a0f0d63ba12cbb7aa3cfb9d47481952b"
        ],
        [
            "destruct Hinh.",
            "VernacExtend",
            "ce72be4cf648acda52d192fd7aa80be3b7315213"
        ],
        [
            "revert x H.",
            "VernacExtend",
            "b357d894b6b6b9c4e169d77b01f0701f73b14f2a"
        ],
        [
            "apply (@well_founded_ind T R WF (fun x:T => In S x -> exists y:T, In S y /\\ (forall z:T, In S z -> ~ R z y))).",
            "VernacExtend",
            "8604b85fe10f5c0f3d1328fe840a0f44c06ed642"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "case (classic (forall y:T, In S y -> ~ R y x)).",
            "VernacExtend",
            "f9d57914f435d5bc3ea35dc715d5f0dc054081cb"
        ],
        [
            "exists x.",
            "VernacExtend",
            "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "apply not_all_ex_not in H1.",
            "VernacExtend",
            "e53bb58673d6623d346fe06b908a4a95d96d9180"
        ],
        [
            "destruct H1.",
            "VernacExtend",
            "e752c2122f55c888e09082f784a6da990b01fbe7"
        ],
        [
            "apply imply_to_and in H1.",
            "VernacExtend",
            "6ea3d1b5ef0d47cb8b915f7e750aca5e8977a1e2"
        ],
        [
            "destruct H1.",
            "VernacExtend",
            "e752c2122f55c888e09082f784a6da990b01fbe7"
        ],
        [
            "apply H with x0.",
            "VernacExtend",
            "0ac192199ac3c444714964c19eba5d4e358d08ab"
        ],
        [
            "apply NNPP.",
            "VernacExtend",
            "c972af1947412f7363e48b809906d3283d0fb638"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma MEP_implies_WF: minimal_element_property -> well_founded R.",
            "VernacStartTheoremProof",
            "6e606aeda2eb165db02e7a4ecef994298af98ebe"
        ],
        [
            "unfold well_founded.",
            "VernacExtend",
            "e54483b8d4c15affa5848e44e1a0e79bf38074ce"
        ],
        [
            "unfold minimal_element_property.",
            "VernacExtend",
            "2301359be7f74721fa978063212febfd780785a0"
        ],
        [
            "intro MEP.",
            "VernacExtend",
            "9660bf40569053b0704f9a03cf3c796823f3dd7d"
        ],
        [
            "apply NNPP.",
            "VernacExtend",
            "c972af1947412f7363e48b809906d3283d0fb638"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "apply not_all_ex_not in H.",
            "VernacExtend",
            "5e4ab0a34d7c97f5fb87218f6284db221ca0e1d8"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "assert (Inhabited [x:T | ~ Acc R x]).",
            "VernacExtend",
            "48fb1e7e3c8e457dac56f79bf26b0aacb47a4474"
        ],
        [
            "exists x.",
            "VernacExtend",
            "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
        ],
        [
            "constructor; assumption.",
            "VernacExtend",
            "a36f2a931681c9f1611aa56f1a810ad0f6afb946"
        ],
        [
            "apply MEP in H0.",
            "VernacExtend",
            "faec16418d25731c30142b5c53d80833bff79a1f"
        ],
        [
            "destruct H0.",
            "VernacExtend",
            "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
        ],
        [
            "destruct H0.",
            "VernacExtend",
            "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
        ],
        [
            "destruct H0.",
            "VernacExtend",
            "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
        ],
        [
            "contradict H0.",
            "VernacExtend",
            "e9276d92c17ea182f1ef13aa74464b33eea923d9"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply NNPP.",
            "VernacExtend",
            "c972af1947412f7363e48b809906d3283d0fb638"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "apply H1 with y.",
            "VernacExtend",
            "9ecf4a45408920620d8d04838afed027c8729c7f"
        ],
        [
            "constructor; assumption.",
            "VernacExtend",
            "a36f2a931681c9f1611aa56f1a810ad0f6afb946"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MinimalElements.",
            "VernacEndSegment",
            "4e4e813d589304047ef950d5e6d7ed8502020e9c"
        ],
        [
            "Section DecreasingSequences.",
            "VernacBeginSection",
            "f181a1602118ae73002b8ea8c5a538e339283c39"
        ],
        [
            "Variable T:Type.",
            "VernacAssumption",
            "a15b17e37c4241158d544882375356c273dc93f2"
        ],
        [
            "Variable R:relation T.",
            "VernacAssumption",
            "7dc53c8ea3aff6986c5b6582b9e3297cbb82296a"
        ],
        [
            "Definition decreasing_sequence_property := forall a:nat->T, exists n:nat, ~ R (a (S n)) (a n).",
            "VernacDefinition",
            "cbf61633c115646b5cb3db385e57ea02aa0cf87d"
        ],
        [
            "Lemma WF_implies_DSP: well_founded R -> decreasing_sequence_property.",
            "VernacStartTheoremProof",
            "2b966736a6a3b90eb75d49030a4c1ac94fff0414"
        ],
        [
            "unfold decreasing_sequence_property.",
            "VernacExtend",
            "d4417e101d558f8521b20bdc79265fb781edb3be"
        ],
        [
            "intros WF a.",
            "VernacExtend",
            "206d6df034287760447461ead465bfde78d29e69"
        ],
        [
            "remember (a 0) as a0.",
            "VernacExtend",
            "53166604bb52447b98f1bbcc72b661c224a1b2b2"
        ],
        [
            "revert a0 a Heqa0.",
            "VernacExtend",
            "53e4ae65ebd7f1a3fd87e7f781355f8cdd1da7b8"
        ],
        [
            "apply (well_founded_ind WF (fun x:T => forall a:nat->T, x = a 0 -> exists n:nat, ~ R (a (S n)) (a n))).",
            "VernacExtend",
            "c36459fa2b44674737d03ccdb0218654db4d49b3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "case (classic (R (a 1) (a 0))).",
            "VernacExtend",
            "4c629a1eb4fbc8edaad9bb762e5af7fe84c7969e"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "pose (b := fun n:nat => a (S n)).",
            "VernacExtend",
            "885a6ed4d6760cfe78ff14b015cd02efd4c52e4e"
        ],
        [
            "assert (exists n:nat, ~ R (b (S n)) (b n)).",
            "VernacExtend",
            "dafade4883f390a3767cfa9b1628978b73143893"
        ],
        [
            "apply H with (a 1).",
            "VernacExtend",
            "f45e369fdbe2f5447acfa080fa201d619345c955"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "destruct H2.",
            "VernacExtend",
            "7d33163a064bad536ec0f601f214b86de6ac5ab6"
        ],
        [
            "exists (S x0).",
            "VernacExtend",
            "f30c6b19e807c410cbc3f66ad08987e5ecb489b6"
        ],
        [
            "unfold b in H2.",
            "VernacExtend",
            "86a76095278ef602758a842bed7144fe0d204ed0"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "exists 0.",
            "VernacExtend",
            "b12b8acd7a1526ef0683513a127984e4864502d9"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Require Import ClassicalChoice.",
            "VernacRequire",
            "8d4a90b60ff47eca0263a7bdf9f09ca03b20033b"
        ],
        [
            "Lemma DSP_implies_WF: decreasing_sequence_property -> well_founded R.",
            "VernacStartTheoremProof",
            "83a40bcd87b194624bbcc16703a2cd5038f57ae3"
        ],
        [
            "unfold decreasing_sequence_property.",
            "VernacExtend",
            "d4417e101d558f8521b20bdc79265fb781edb3be"
        ],
        [
            "intro DSP.",
            "VernacExtend",
            "f6770498719b1774ed178aeb857596d06e753387"
        ],
        [
            "apply MEP_implies_WF.",
            "VernacExtend",
            "cb0a15bf4746a2605e4e6f6ad758ddb148e05b00"
        ],
        [
            "unfold minimal_element_property.",
            "VernacExtend",
            "2301359be7f74721fa978063212febfd780785a0"
        ],
        [
            "intro S0.",
            "VernacExtend",
            "dbdf47234fc33273db07bd164886eeef30959ba9"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply NNPP.",
            "VernacExtend",
            "c972af1947412f7363e48b809906d3283d0fb638"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "assert (forall x:T, In S0 x -> exists y:T, In S0 y /\\ R y x).",
            "VernacExtend",
            "6bd8674290ee1cf0cc28bd2b449bc4c418dee7bf"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply NNPP.",
            "VernacExtend",
            "c972af1947412f7363e48b809906d3283d0fb638"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "assert (forall y:T, ~(In S0 y /\\ R y x)).",
            "VernacExtend",
            "2b9e3a4334ad5edc447e5778aaa47646556903f5"
        ],
        [
            "apply not_ex_all_not.",
            "VernacExtend",
            "97769e7dff4c336932645162e543686d7caaa86e"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "exists x.",
            "VernacExtend",
            "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply H3 with y.",
            "VernacExtend",
            "184850961b008f655762092f6f04282c3b28013d"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "pose (S_type := {x:T | In S0 x}).",
            "VernacExtend",
            "4f05db1a16c87d682210c9db3333b7605c944549"
        ],
        [
            "assert (exists f:S_type -> S_type, forall x:S_type, R (proj1_sig (f x)) (proj1_sig x)).",
            "VernacExtend",
            "9acb8275ffa305607b90c38109fe08142211afa7"
        ],
        [
            "apply choice with (R:=fun x y:S_type => R (proj1_sig y) (proj1_sig x)).",
            "VernacExtend",
            "efa4de1ae736d6e773b94ee252353f77e7d7a6d1"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "destruct x.",
            "VernacExtend",
            "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "pose proof (H1 x i).",
            "VernacExtend",
            "7aba6c16bb7fdc8cfc2a22184a3309945f6d1022"
        ],
        [
            "destruct H2.",
            "VernacExtend",
            "7d33163a064bad536ec0f601f214b86de6ac5ab6"
        ],
        [
            "destruct H2.",
            "VernacExtend",
            "7d33163a064bad536ec0f601f214b86de6ac5ab6"
        ],
        [
            "exists (exist (fun x:T => In S0 x) x0 H2).",
            "VernacExtend",
            "97d36561f0f650fc987ceb1d6d8eb4595b0af6b9"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "destruct H2 as [f Hf].",
            "VernacExtend",
            "c453d5437aa743cd7abd98a9b331048181743fef"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "pose (b := nat_rect (fun n:nat => S_type) (exist (fun x:T => In S0 x) x H) (fun (n:nat) (x:S_type) => f x)).",
            "VernacExtend",
            "900012e7be7cecc9b65c1a2684fd400a293b6e4a"
        ],
        [
            "simpl in b.",
            "VernacExtend",
            "2303927e7a530d3db5e447cbe206c232a3ef82d7"
        ],
        [
            "pose (a := fun n:nat => (proj1_sig (b n))).",
            "VernacExtend",
            "1c81d6c4667c33d82caf79082cc6267c79e2fcd7"
        ],
        [
            "assert (forall n:nat, R (a (S n)) (a n)).",
            "VernacExtend",
            "c69f510489da22a4eab465756075c4d2be94052d"
        ],
        [
            "unfold a.",
            "VernacExtend",
            "f9fc4c5ba1856b3c3eb4ef0d415251d185ccb8c7"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply Hf.",
            "VernacExtend",
            "44e8b4102d20ba355038f72fc52240fc6cb8650c"
        ],
        [
            "contradict DSP.",
            "VernacExtend",
            "dc6e0b6af1985f9aa6d511d08a652dbff91e7821"
        ],
        [
            "apply ex_not_not_all.",
            "VernacExtend",
            "383f2308508f0c7b42898894ca2e412437e92706"
        ],
        [
            "exists a.",
            "VernacExtend",
            "59cc5697e7369be65591d2d5e6ad6fd701682809"
        ],
        [
            "apply all_not_not_ex.",
            "VernacExtend",
            "4bdfb5e01a1b6c33d52d230da8ee83588cfd356c"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End DecreasingSequences.",
            "VernacEndSegment",
            "aaffe4259cdc8fb0ffd353dc23199119d73a4c3f"
        ]
    ],
    "proofs": [
        {
            "name": "WF_implies_MEP",
            "line_nb": 10,
            "steps": [
                {
                    "command": [
                        "unfold well_founded.",
                        "VernacExtend",
                        "e54483b8d4c15affa5848e44e1a0e79bf38074ce"
                    ]
                },
                {
                    "command": [
                        "unfold minimal_element_property.",
                        "VernacExtend",
                        "2301359be7f74721fa978063212febfd780785a0"
                    ]
                },
                {
                    "command": [
                        "intros WF S Hinh.",
                        "VernacExtend",
                        "bdf4ff16a0f0d63ba12cbb7aa3cfb9d47481952b"
                    ]
                },
                {
                    "command": [
                        "destruct Hinh.",
                        "VernacExtend",
                        "ce72be4cf648acda52d192fd7aa80be3b7315213"
                    ]
                },
                {
                    "command": [
                        "revert x H.",
                        "VernacExtend",
                        "b357d894b6b6b9c4e169d77b01f0701f73b14f2a"
                    ]
                },
                {
                    "command": [
                        "apply (@well_founded_ind T R WF (fun x:T => In S x -> exists y:T, In S y /\\ (forall z:T, In S z -> ~ R z y))).",
                        "VernacExtend",
                        "8604b85fe10f5c0f3d1328fe840a0f44c06ed642"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "case (classic (forall y:T, In S y -> ~ R y x)).",
                        "VernacExtend",
                        "f9d57914f435d5bc3ea35dc715d5f0dc054081cb"
                    ]
                },
                {
                    "command": [
                        "exists x.",
                        "VernacExtend",
                        "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "apply not_all_ex_not in H1.",
                        "VernacExtend",
                        "e53bb58673d6623d346fe06b908a4a95d96d9180"
                    ]
                },
                {
                    "command": [
                        "destruct H1.",
                        "VernacExtend",
                        "e752c2122f55c888e09082f784a6da990b01fbe7"
                    ]
                },
                {
                    "command": [
                        "apply imply_to_and in H1.",
                        "VernacExtend",
                        "6ea3d1b5ef0d47cb8b915f7e750aca5e8977a1e2"
                    ]
                },
                {
                    "command": [
                        "destruct H1.",
                        "VernacExtend",
                        "e752c2122f55c888e09082f784a6da990b01fbe7"
                    ]
                },
                {
                    "command": [
                        "apply H with x0.",
                        "VernacExtend",
                        "0ac192199ac3c444714964c19eba5d4e358d08ab"
                    ]
                },
                {
                    "command": [
                        "apply NNPP.",
                        "VernacExtend",
                        "c972af1947412f7363e48b809906d3283d0fb638"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MEP_implies_WF",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "unfold well_founded.",
                        "VernacExtend",
                        "e54483b8d4c15affa5848e44e1a0e79bf38074ce"
                    ]
                },
                {
                    "command": [
                        "unfold minimal_element_property.",
                        "VernacExtend",
                        "2301359be7f74721fa978063212febfd780785a0"
                    ]
                },
                {
                    "command": [
                        "intro MEP.",
                        "VernacExtend",
                        "9660bf40569053b0704f9a03cf3c796823f3dd7d"
                    ]
                },
                {
                    "command": [
                        "apply NNPP.",
                        "VernacExtend",
                        "c972af1947412f7363e48b809906d3283d0fb638"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "apply not_all_ex_not in H.",
                        "VernacExtend",
                        "5e4ab0a34d7c97f5fb87218f6284db221ca0e1d8"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "assert (Inhabited [x:T | ~ Acc R x]).",
                        "VernacExtend",
                        "48fb1e7e3c8e457dac56f79bf26b0aacb47a4474"
                    ]
                },
                {
                    "command": [
                        "exists x.",
                        "VernacExtend",
                        "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
                    ]
                },
                {
                    "command": [
                        "constructor; assumption.",
                        "VernacExtend",
                        "a36f2a931681c9f1611aa56f1a810ad0f6afb946"
                    ]
                },
                {
                    "command": [
                        "apply MEP in H0.",
                        "VernacExtend",
                        "faec16418d25731c30142b5c53d80833bff79a1f"
                    ]
                },
                {
                    "command": [
                        "destruct H0.",
                        "VernacExtend",
                        "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
                    ]
                },
                {
                    "command": [
                        "destruct H0.",
                        "VernacExtend",
                        "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
                    ]
                },
                {
                    "command": [
                        "destruct H0.",
                        "VernacExtend",
                        "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
                    ]
                },
                {
                    "command": [
                        "contradict H0.",
                        "VernacExtend",
                        "e9276d92c17ea182f1ef13aa74464b33eea923d9"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply NNPP.",
                        "VernacExtend",
                        "c972af1947412f7363e48b809906d3283d0fb638"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "apply H1 with y.",
                        "VernacExtend",
                        "9ecf4a45408920620d8d04838afed027c8729c7f"
                    ]
                },
                {
                    "command": [
                        "constructor; assumption.",
                        "VernacExtend",
                        "a36f2a931681c9f1611aa56f1a810ad0f6afb946"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "WF_implies_DSP",
            "line_nb": 62,
            "steps": [
                {
                    "command": [
                        "unfold decreasing_sequence_property.",
                        "VernacExtend",
                        "d4417e101d558f8521b20bdc79265fb781edb3be"
                    ]
                },
                {
                    "command": [
                        "intros WF a.",
                        "VernacExtend",
                        "206d6df034287760447461ead465bfde78d29e69"
                    ]
                },
                {
                    "command": [
                        "remember (a 0) as a0.",
                        "VernacExtend",
                        "53166604bb52447b98f1bbcc72b661c224a1b2b2"
                    ]
                },
                {
                    "command": [
                        "revert a0 a Heqa0.",
                        "VernacExtend",
                        "53e4ae65ebd7f1a3fd87e7f781355f8cdd1da7b8"
                    ]
                },
                {
                    "command": [
                        "apply (well_founded_ind WF (fun x:T => forall a:nat->T, x = a 0 -> exists n:nat, ~ R (a (S n)) (a n))).",
                        "VernacExtend",
                        "c36459fa2b44674737d03ccdb0218654db4d49b3"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "case (classic (R (a 1) (a 0))).",
                        "VernacExtend",
                        "4c629a1eb4fbc8edaad9bb762e5af7fe84c7969e"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "pose (b := fun n:nat => a (S n)).",
                        "VernacExtend",
                        "885a6ed4d6760cfe78ff14b015cd02efd4c52e4e"
                    ]
                },
                {
                    "command": [
                        "assert (exists n:nat, ~ R (b (S n)) (b n)).",
                        "VernacExtend",
                        "dafade4883f390a3767cfa9b1628978b73143893"
                    ]
                },
                {
                    "command": [
                        "apply H with (a 1).",
                        "VernacExtend",
                        "f45e369fdbe2f5447acfa080fa201d619345c955"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "destruct H2.",
                        "VernacExtend",
                        "7d33163a064bad536ec0f601f214b86de6ac5ab6"
                    ]
                },
                {
                    "command": [
                        "exists (S x0).",
                        "VernacExtend",
                        "f30c6b19e807c410cbc3f66ad08987e5ecb489b6"
                    ]
                },
                {
                    "command": [
                        "unfold b in H2.",
                        "VernacExtend",
                        "86a76095278ef602758a842bed7144fe0d204ed0"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "exists 0.",
                        "VernacExtend",
                        "b12b8acd7a1526ef0683513a127984e4864502d9"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "DSP_implies_WF",
            "line_nb": 85,
            "steps": [
                {
                    "command": [
                        "unfold decreasing_sequence_property.",
                        "VernacExtend",
                        "d4417e101d558f8521b20bdc79265fb781edb3be"
                    ]
                },
                {
                    "command": [
                        "intro DSP.",
                        "VernacExtend",
                        "f6770498719b1774ed178aeb857596d06e753387"
                    ]
                },
                {
                    "command": [
                        "apply MEP_implies_WF.",
                        "VernacExtend",
                        "cb0a15bf4746a2605e4e6f6ad758ddb148e05b00"
                    ]
                },
                {
                    "command": [
                        "unfold minimal_element_property.",
                        "VernacExtend",
                        "2301359be7f74721fa978063212febfd780785a0"
                    ]
                },
                {
                    "command": [
                        "intro S0.",
                        "VernacExtend",
                        "dbdf47234fc33273db07bd164886eeef30959ba9"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply NNPP.",
                        "VernacExtend",
                        "c972af1947412f7363e48b809906d3283d0fb638"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "assert (forall x:T, In S0 x -> exists y:T, In S0 y /\\ R y x).",
                        "VernacExtend",
                        "6bd8674290ee1cf0cc28bd2b449bc4c418dee7bf"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply NNPP.",
                        "VernacExtend",
                        "c972af1947412f7363e48b809906d3283d0fb638"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "assert (forall y:T, ~(In S0 y /\\ R y x)).",
                        "VernacExtend",
                        "2b9e3a4334ad5edc447e5778aaa47646556903f5"
                    ]
                },
                {
                    "command": [
                        "apply not_ex_all_not.",
                        "VernacExtend",
                        "97769e7dff4c336932645162e543686d7caaa86e"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "exists x.",
                        "VernacExtend",
                        "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply H3 with y.",
                        "VernacExtend",
                        "184850961b008f655762092f6f04282c3b28013d"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "pose (S_type := {x:T | In S0 x}).",
                        "VernacExtend",
                        "4f05db1a16c87d682210c9db3333b7605c944549"
                    ]
                },
                {
                    "command": [
                        "assert (exists f:S_type -> S_type, forall x:S_type, R (proj1_sig (f x)) (proj1_sig x)).",
                        "VernacExtend",
                        "9acb8275ffa305607b90c38109fe08142211afa7"
                    ]
                },
                {
                    "command": [
                        "apply choice with (R:=fun x y:S_type => R (proj1_sig y) (proj1_sig x)).",
                        "VernacExtend",
                        "efa4de1ae736d6e773b94ee252353f77e7d7a6d1"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "destruct x.",
                        "VernacExtend",
                        "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "pose proof (H1 x i).",
                        "VernacExtend",
                        "7aba6c16bb7fdc8cfc2a22184a3309945f6d1022"
                    ]
                },
                {
                    "command": [
                        "destruct H2.",
                        "VernacExtend",
                        "7d33163a064bad536ec0f601f214b86de6ac5ab6"
                    ]
                },
                {
                    "command": [
                        "destruct H2.",
                        "VernacExtend",
                        "7d33163a064bad536ec0f601f214b86de6ac5ab6"
                    ]
                },
                {
                    "command": [
                        "exists (exist (fun x:T => In S0 x) x0 H2).",
                        "VernacExtend",
                        "97d36561f0f650fc987ceb1d6d8eb4595b0af6b9"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "destruct H2 as [f Hf].",
                        "VernacExtend",
                        "c453d5437aa743cd7abd98a9b331048181743fef"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "pose (b := nat_rect (fun n:nat => S_type) (exist (fun x:T => In S0 x) x H) (fun (n:nat) (x:S_type) => f x)).",
                        "VernacExtend",
                        "900012e7be7cecc9b65c1a2684fd400a293b6e4a"
                    ]
                },
                {
                    "command": [
                        "simpl in b.",
                        "VernacExtend",
                        "2303927e7a530d3db5e447cbe206c232a3ef82d7"
                    ]
                },
                {
                    "command": [
                        "pose (a := fun n:nat => (proj1_sig (b n))).",
                        "VernacExtend",
                        "1c81d6c4667c33d82caf79082cc6267c79e2fcd7"
                    ]
                },
                {
                    "command": [
                        "assert (forall n:nat, R (a (S n)) (a n)).",
                        "VernacExtend",
                        "c69f510489da22a4eab465756075c4d2be94052d"
                    ]
                },
                {
                    "command": [
                        "unfold a.",
                        "VernacExtend",
                        "f9fc4c5ba1856b3c3eb4ef0d415251d185ccb8c7"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply Hf.",
                        "VernacExtend",
                        "44e8b4102d20ba355038f72fc52240fc6cb8650c"
                    ]
                },
                {
                    "command": [
                        "contradict DSP.",
                        "VernacExtend",
                        "dc6e0b6af1985f9aa6d511d08a652dbff91e7821"
                    ]
                },
                {
                    "command": [
                        "apply ex_not_not_all.",
                        "VernacExtend",
                        "383f2308508f0c7b42898894ca2e412437e92706"
                    ]
                },
                {
                    "command": [
                        "exists a.",
                        "VernacExtend",
                        "59cc5697e7369be65591d2d5e6ad6fd701682809"
                    ]
                },
                {
                    "command": [
                        "apply all_not_not_ex.",
                        "VernacExtend",
                        "4bdfb5e01a1b6c33d52d230da8ee83588cfd356c"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}