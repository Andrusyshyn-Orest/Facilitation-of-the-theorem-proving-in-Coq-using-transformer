{
    "filename": "Pythagorean.v",
    "coq_project": "fermat4",
    "vernac_cmds": [
        [
            "Require Export Tactics.",
            "VernacRequire",
            "9d8c76a0ed2963a1217d8edd616b482d00ba6a9b"
        ],
        [
            "Definition nnl_triple (a b c : Z) := ~(a = 0) /\\ ~(b = 0) /\\ ~(c = 0).",
            "VernacDefinition",
            "23e1f528ddbf47457ebd790fa4d278fcdab8f764"
        ],
        [
            "Definition pos_triple (a b c : Z) := (a >= 0) /\\ (b >= 0) /\\ (c >= 0).",
            "VernacDefinition",
            "90b710e223611a45cc81b8840de4a05a4816fe07"
        ],
        [
            "Definition is_pytha (a b c : Z) := (pos_triple a b c) /\\ a * a + b * b = c * c.",
            "VernacDefinition",
            "259d6bc50967612db63b2642a8c7c5430429844f"
        ],
        [
            "Definition in_ucirc (x y : R) := (x * x + y * y = 1)%R.",
            "VernacDefinition",
            "239267c4c7f446110524bce3504fea2540d9bf5e"
        ],
        [
            "Definition D_r (r x y : R) := (y = r * (x + 1))%R.",
            "VernacDefinition",
            "2a048d1ea0d2d96bcfeb1e0ab315753bec0cf53a"
        ],
        [
            "Lemma pytha_ucirc1 : forall a b c : Z, (c > 0) -> (is_pytha a b c) -> (in_ucirc (frac a c) (frac b c)).",
            "VernacStartTheoremProof",
            "36977d9740ac0115ce439a2e1b647ac3a1a53a1b"
        ],
        [
            "intros; unfold in_ucirc; unfold frac; field_simplify_eq.",
            "VernacExtend",
            "37aeba0a435ba03f1d8a70f85698bb50ba25203f"
        ],
        [
            "unfold is_pytha in H0; elim H0; intros.",
            "VernacExtend",
            "8cfb46536596551fa4bfaadd3248254c8c8b220c"
        ],
        [
            "repeat rewrite pow_IZR.",
            "VernacExtend",
            "e6e6da5ebb48613d05dc378f9abece6c7cebcae1"
        ],
        [
            "rewrite <- plus_IZR.",
            "VernacExtend",
            "9f14eeedd69cca2013448d9a590282a5386676bd"
        ],
        [
            "simpl Z_of_nat.",
            "VernacExtend",
            "3d1515194219011765a5a529260e5859a8922504"
        ],
        [
            "ring_simplify [(sym_eq H2)] (c^2);trivial.",
            "VernacExtend",
            "72148e3eab93898780b687a3e792c824094454e6"
        ],
        [
            "discrR; auto with zarith.",
            "VernacExtend",
            "b5ab97754eea9315e1e92d9bfc979a62a2e04006"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pytha_ucirc2 : forall a b c : Z, (a >= 0) /\\ (b >= 0) /\\ (c > 0) -> (in_ucirc (frac a c) (frac b c)) -> (is_pytha a b c).",
            "VernacStartTheoremProof",
            "30bc7889916b2982c316c188f6d18272e571e632"
        ],
        [
            "unfold in_ucirc; unfold frac; unfold is_pytha; intros; split.",
            "VernacExtend",
            "acb110ae55a90e2e5a6a12be28b198ff25e2c3c4"
        ],
        [
            "unfold pos_triple; auto with zarith.",
            "VernacExtend",
            "04e957342888eeb3d5f2dbff983387bf5faebdf5"
        ],
        [
            "apply eq_IZR; apply (Rmult_eq_reg_l (/ (IZR c * IZR c))).",
            "VernacExtend",
            "b8238dcc1d17e53ba603271abc22c1c2bf0b9751"
        ],
        [
            "pattern (IZR c * IZR c)%R at 2; rewrite <- mult_IZR;rewrite Rinv_l.",
            "VernacExtend",
            "f59f8d53f2cebb5fb3e79a7e4ea6921979c8aa8e"
        ],
        [
            "rewrite Rinv_mult_distr.",
            "VernacExtend",
            "55666fd2776d160fb1bfd9d38a2833e66927f366"
        ],
        [
            "rewrite <- H0; rewrite plus_IZR; repeat rewrite mult_IZR; field.",
            "VernacExtend",
            "27f5a78749c11c467468515e7df9c02cea87460c"
        ],
        [
            "discrR; auto with zarith.",
            "VernacExtend",
            "b5ab97754eea9315e1e92d9bfc979a62a2e04006"
        ],
        [
            "discrR; auto with zarith.",
            "VernacExtend",
            "b5ab97754eea9315e1e92d9bfc979a62a2e04006"
        ],
        [
            "discrR; auto with zarith.",
            "VernacExtend",
            "b5ab97754eea9315e1e92d9bfc979a62a2e04006"
        ],
        [
            "rewrite mult_IZR; split_Rmult; discrR; auto with zarith.",
            "VernacExtend",
            "4fbc7a8e5820132635d6f705bb90395d7cf1d798"
        ],
        [
            "apply Rinv_neq_0_compat; split_Rmult; discrR; auto with zarith.",
            "VernacExtend",
            "0d6638baa9eb326de8c2642c973bbdd07c653920"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition interCDr (r x y : R) := (in_ucirc x y) /\\ (D_r r x y).",
            "VernacDefinition",
            "18ec85204fbfbd884d066e84bf5877ae57fcbbdf"
        ],
        [
            "Definition p1 := (-1,0)%R.",
            "VernacDefinition",
            "53a42434ce1039244c38217b3a737ee521c3b68a"
        ],
        [
            "Definition p2 (r : R) := let den := (1 + r * r)%R in ((1 - r * r) / den, 2 * r / den)%R.",
            "VernacDefinition",
            "850792a6185ab54f1051aa1ab22b6aad9ac0f03f"
        ],
        [
            "Definition eqp (p1 p2 : R * R) := (fst p1) = (fst p2) /\\ (snd p1)= (snd p2).",
            "VernacDefinition",
            "0d9cc95d0cced10c3fd6be069f44a1d980b92430"
        ],
        [
            "Lemma ordp : forall p1 p2 : R * R, (eqp p1 p2) \\/ ~(eqp p1 p2).",
            "VernacStartTheoremProof",
            "cf98b4b6b180e2b373728985c1af475d641cf0df"
        ],
        [
            "intros p3 p4.",
            "VernacExtend",
            "39c4c330b4559da9cfc2a241e183f12ee9f13a54"
        ],
        [
            "unfold eqp; elim p3; elim p4; intros; simpl.",
            "VernacExtend",
            "7c696da00a68edd7610c3776df5a4488f4a3b70e"
        ],
        [
            "elim (Req_dec a a0); elim (Req_dec b b0); intuition.",
            "VernacExtend",
            "50bc82367db83a7f9d279df28289eb25ff42083d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma interCDr_sol : forall r x y : R, (interCDr r x y) -> (eqp (x,y) p1) \\/ (eqp (x,y) (p2 r)).",
            "VernacStartTheoremProof",
            "b071e52760f54bc1c3d26d7a6b4ceab188febe1e"
        ],
        [
            "unfold interCDr;unfold in_ucirc;unfold D_r;unfold eqp, p1, p2;simpl.",
            "VernacExtend",
            "6d97e0c3bf1efc13447112b048f4e2420dbc66c1"
        ],
        [
            "intros;elim H;intros;rewrite H1 in H0.",
            "VernacExtend",
            "501b0cadf4bd09f52dc7d5ecdfe600601e781d59"
        ],
        [
            "cut (((1 + r * r) * Rsqr x + 2 * r * r * x + (r * r - 1)) = 0)%R.",
            "VernacExtend",
            "c24c9c69abb0c77059d94f80018fd90184d2d1b3"
        ],
        [
            "intro;cut ((1 + r * r) <> 0)%R.",
            "VernacExtend",
            "51f3edab4d15eef72683b3e7d535fcd9ccfaedc2"
        ],
        [
            "intro;cut (Delta_is_pos (mknonzeroreal (1 + r * r) H3) (2 * r * r) (r * r - 1))%R.",
            "VernacExtend",
            "3e2ed6a662f8feadb8b934115bff3813ac177093"
        ],
        [
            "intro;generalize (Rsqr_sol_eq_0_0 (mknonzeroreal (1 + r * r) H3) (2 * r * r) (r * r - 1) x H4 H2)%R.",
            "VernacExtend",
            "923b300e7d5f7ba470cc5c0d3bbc114922cff8c8"
        ],
        [
            "unfold sol_x1, sol_x2;unfold Delta;unfold Rsqr;simpl.",
            "VernacExtend",
            "967973ee2d0ab1b3da05670309d214b5baec8f7e"
        ],
        [
            "cut ((2 * r * r * (2 * r * r) - 4 * (1 + r * r) * (r * r - 1))%R = 4%R).",
            "VernacExtend",
            "6758c63a984268eb8080affc928de02e2864bc44"
        ],
        [
            "intro;rewrite H5.",
            "VernacExtend",
            "cadbe6427e5b657f011d9fd8b2d4802922f8d578"
        ],
        [
            "replace (4)%R with (2*2)%R by auto.",
            "VernacExtend",
            "c8e09a35c9b751d88c58a6aa729cd722547260da"
        ],
        [
            "rewrite sqrt_square.",
            "VernacExtend",
            "f0fc7c2f12c476d3553b9abad5439ba274e335b3"
        ],
        [
            "induction 1;[right|left].",
            "VernacExtend",
            "0758781b0f930addc84cc31e4b8491f611018c27"
        ],
        [
            "split;[rewrite H6;field;assumption |rewrite H1;rewrite H6;field;assumption].",
            "VernacExtend",
            "feab41cb4b1ddac4d311a82ddcfdc68a98a0a0fb"
        ],
        [
            "split;[rewrite H6;field;assumption |rewrite H1;rewrite H6;field;assumption].",
            "VernacExtend",
            "feab41cb4b1ddac4d311a82ddcfdc68a98a0a0fb"
        ],
        [
            "unfold Rle;left;prove_sup.",
            "VernacExtend",
            "ca97d89afaf44c5fde92cbf919e43c47d2d6d344"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "unfold Delta_is_pos;unfold Delta;unfold Rsqr;simpl; ring_simplify (2 * r * r * (2 * r * r) - 4 * (1 + r * r) * (r * r - 1))%R; unfold Rle;left;prove_sup.",
            "VernacExtend",
            "d55d45abe421faff22c7408355eab21458f2de7f"
        ],
        [
            "apply Rgt_not_eq;unfold Rgt;rewrite Rplus_comm;apply Rle_lt_0_plus_1; fold (Rsqr r);elim (Req_dec r 0);intro; [rewrite H3;rewrite Rsqr_0;unfold Rle;right;auto |unfold Rle;left;apply Rsqr_pos_lt;assumption].",
            "VernacExtend",
            "113236d106f30e7486e1628824b4fb76f36eec3d"
        ],
        [
            "pattern 1%R at 2;rewrite <- H0;unfold Rsqr;ring.",
            "VernacExtend",
            "7a747c6d6418ff8734da5c6452ebcedf5ff1f822"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rat_coo1 : forall x y : R, (in_ucirc x y) /\\ (exists r : R, (is_rat r) /\\ (interCDr r x y)) -> (is_ratp (x,y)).",
            "VernacStartTheoremProof",
            "0d71169303da4d43b3dba0814b7661299b0edb06"
        ],
        [
            "unfold in_ucirc, is_ratp, is_rat.",
            "VernacExtend",
            "0cab8972bcebedac61b0931a24a2efc9389cd635"
        ],
        [
            "unfold frac; intros; elim H; intros; elim H1; intros; elim H2; intros; elim H3; intro; elim x1;intros; elim H5; intros; elim (interCDr_sol x0 x y H4); unfold eqp, p1, p2; simpl; intro; elim H8; intros; rewrite H9; rewrite H10.",
            "VernacExtend",
            "bfc58556fa920084a802ac73097da93239ce6a88"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "exists (-1,1); split; [ auto with zarith | simpl; field; discrR ].",
            "VernacExtend",
            "c985459540dd8220ef64268ece3aefa8ed692bc0"
        ],
        [
            "exists (0,1); split; [ auto with zarith | simpl; field; discrR ].",
            "VernacExtend",
            "6bd2023096199150ec9b7c8324b145ee8f9d8034"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "exists (b * b - a * a, a * a + b * b); split.",
            "VernacExtend",
            "e9e2877830faafd85fcceeace05d08607fe33f15"
        ],
        [
            "auto with zarith.",
            "VernacExtend",
            "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
        ],
        [
            "rewrite H7; rewrite <- Z_R_minus; rewrite plus_IZR; repeat rewrite mult_IZR; field; split;discrR; auto with zarith reals.",
            "VernacExtend",
            "bc46c72f348dec3788048215dc7ab07743f89d4b"
        ],
        [
            "exists (2 * a * b * b, (a * a + b * b) * b); split.",
            "VernacExtend",
            "f02bccc6c129d5e8321293d8d538d74d15ba8171"
        ],
        [
            "apply not_IZR_0; rewrite mult_IZR; split_Rmult; discrR; auto with zarith.",
            "VernacExtend",
            "5a0a1d1f8c7d27db0a97e0c71f613f4198473043"
        ],
        [
            "rewrite H7; repeat rewrite mult_IZR; rewrite plus_IZR; repeat rewrite mult_IZR; simpl; field; split; discrR; auto with zarith reals.",
            "VernacExtend",
            "4e4da764f93ad88ae4776639c04914a1363b3a44"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rat_coo2 : forall x y : R, (in_ucirc x y) /\\ (is_ratp (x,y)) -> exists r : R, (is_rat r) /\\ (interCDr r x y).",
            "VernacStartTheoremProof",
            "22df88d69a6d1c92c93548a53db77697abbd5aeb"
        ],
        [
            "unfold in_ucirc, is_ratp, is_rat, interCDr.",
            "VernacExtend",
            "071cfb4abaeb1ec3e5fa6f0e93844e42e0eda952"
        ],
        [
            "unfold frac, in_ucirc, D_r; intros.",
            "VernacExtend",
            "a8f66ca29adfd20559ae4c4d3dbf2deaebe05f3c"
        ],
        [
            "elim (Req_dec x (-1)%R); intro.",
            "VernacExtend",
            "b49ef250b72c0971f5bcf023d7b1b8cb9f350947"
        ],
        [
            "exists 1%R; split.",
            "VernacExtend",
            "7e46021e0ed1c3dbdf532eddfeb90d595ae12d0b"
        ],
        [
            "exists (1,1); split; [ auto with zarith | field; discrR ].",
            "VernacExtend",
            "5e7fd2a46c5767717c624155b142ad72088791c9"
        ],
        [
            "elim H; intros; split.",
            "VernacExtend",
            "915e14b1fdcac9db79d4977de3c9c24e0b713c05"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite H0; rewrite H0 in H1; ring_simplify (1 * (-1 + 1))%R; cut ((1 + y * y) = 1)%R; [ intro; apply Rsqr_0_uniq; unfold Rsqr; apply (Rplus_0_r_uniq 1 (y * y) H3)%R | pattern 1%R at 2; rewrite <- H1; ring ].",
            "VernacExtend",
            "3475574f72f24089b0e8cd858677c9122e1823c2"
        ],
        [
            "exists (y / (x + 1))%R; cut ((x + 1) <> 0)%R; [ intro; split | rewrite <- (Ropp_involutive 1); fold (x - -1)%R; apply Rminus_eq_contra; assumption ].",
            "VernacExtend",
            "8a37d167680f16a2d6ef29b8784adc7ef3e99ef0"
        ],
        [
            "elim H; intros; elim H3; intros; elim H4; intro; elim x0; intros; elim H6; intros; elim H5; intro; elim x1; intros; elim H9; intros; rewrite H8; rewrite H11.",
            "VernacExtend",
            "e45f02c0e144c6296029dc94588d51a2d159d82e"
        ],
        [
            "cut (a + b <> 0); [ intro | apply not_IZR_0; cut (((IZR a / IZR b + 1) * IZR b)%R = (IZR a + IZR b)%R); [ intro; rewrite plus_IZR; rewrite <- H12; split_Rmult; [ rewrite <- H8; assumption | discrR; assumption ] | field; discrR; assumption ] ].",
            "VernacExtend",
            "39047162bc3f9f4975337f4bba6d9b863de0e5e7"
        ],
        [
            "exists (a0 * b, b0 * (a + b)); split.",
            "VernacExtend",
            "ff9f3cea631600f62dbd779e698574230648ed68"
        ],
        [
            "apply not_IZR_0; rewrite mult_IZR; rewrite plus_IZR; split_Rmult; discrR; assumption.",
            "VernacExtend",
            "54c8598e5984abda1bba065cc473bfbbd41095f1"
        ],
        [
            "repeat rewrite mult_IZR; rewrite plus_IZR; field; discrR; try assumption.",
            "VernacExtend",
            "5f7956e53ff0c7c51dac0cdfe30973ceeec83af8"
        ],
        [
            "repeat split; discrR; try assumption; fold (IZR a / IZR b)%R; rewrite <- H8; assumption.",
            "VernacExtend",
            "fedfa52a273f7a6398aa580c94f3727de4f44d09"
        ],
        [
            "split; [ elim H; intros; assumption | field; assumption ].",
            "VernacExtend",
            "c9d16ad99b04cdbff9dc997cd24866f7a2abff0d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition is_posp (c : R * R) := (fst c >= 0)%R /\\ (snd c >= 0)%R.",
            "VernacDefinition",
            "e3b32c4f472bb6f9790c732efdc5e9c1f9be737e"
        ],
        [
            "Definition is_ucp (c : R * R) := (in_ucirc (fst c) (snd c)) /\\ (is_ratp c) /\\ (is_posp c).",
            "VernacDefinition",
            "9a97431f8a6771aba09e813a88a47011df64ef34"
        ],
        [
            "Definition ucp (p q : Z) := let pr := (IZR p) in let qr := (IZR q) in let den := (pr * pr + qr * qr)%R in ((qr * qr - pr * pr) / den, (2 * pr * qr) / den)%R.",
            "VernacDefinition",
            "e34919bc0d68cff5d8929f8b9aafb406204506e2"
        ],
        [
            "Definition cond_pqb (p q : Z) := p >= 0 /\\ q > 0 /\\ p <= q /\\ (rel_prime p q).",
            "VernacDefinition",
            "0f68c1b2b63b5fe6acc493f70c150a5fbf3d323b"
        ],
        [
            "Definition in_ucp_setb (x y : R) := exists p : Z, exists q : Z, x = (fst (ucp p q)) /\\ y = (snd (ucp p q)) /\\ (cond_pqb p q).",
            "VernacDefinition",
            "adabfd98daa61423315acfb5d32ef46133a32d13"
        ],
        [
            "Lemma rat_pos_coo1 : forall x y : R, (is_ucp (x,y)) -> exists r : R, (is_rat r) /\\ (r >= 0)%R /\\ (r <= 1)%R /\\ x = (fst (p2 r)) /\\ y = (snd (p2 r)).",
            "VernacStartTheoremProof",
            "b604a8420cf28dc49c496c33e5f1c19bc574fa1b"
        ],
        [
            "intros; unfold is_ucp in H; elim H; intros; elim H1; intros; elim (rat_coo2 x y (conj H0 H2)); intros; elim H4; intros.",
            "VernacExtend",
            "ce603f9629227d8ff79665cab99ead7e26e959c6"
        ],
        [
            "elim (interCDr_sol x0 x y).",
            "VernacExtend",
            "fe56ac017e4e2f713be2af3356d04c4415e9cedf"
        ],
        [
            "unfold eqp; simpl; intro; elim H7; intros; elim H3; simpl; intros; rewrite H8 in H10; elimtype False; generalize (Rge_le (-1) 0 H10)%R; fold (~ (0 <= -1)%R); apply Rlt_not_le; prove_sup.",
            "VernacExtend",
            "57889fa6946713588327ee7bb9d1d667362a3300"
        ],
        [
            "cut (0 < / (1 + x0 * x0))%R; [ intro | apply Rinv_0_lt_compat; rewrite <- (Rplus_0_r 0)%R; apply Rplus_lt_le_compat; [ prove_sup | fold (Rsqr x0); elim (Req_dec x0 0); intro; [ rewrite H7; rewrite Rsqr_0; unfold Rle; right; auto | unfold Rle; left; apply Rsqr_pos_lt; assumption ] ] ].",
            "VernacExtend",
            "eb9d0c470727933b47a0a5235383b8b86673ac5c"
        ],
        [
            "unfold eqp; simpl; intro; elim H8; intros; elim H3; simpl; rewrite H9; rewrite H10; intros; exists x0; split.",
            "VernacExtend",
            "25ff077228d81d45ef39c7fa5645f112e499891f"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "generalize (Rge_le (2 * x0 / (1 + x0 * x0)) 0 H12); intro; rewrite Rmult_comm in H13; rewrite <- (Rmult_0_l (2 / (1 + x0 * x0))) in H13; cut (0 < 2 / (1 + x0 * x0))%R; [ intro; rewrite Rmult_comm in H13; unfold Rdiv in H13; rewrite (Rmult_assoc x0 2) in H13; rewrite (Rmult_comm x0 (2 * / (1 + x0 * x0)))%R in H13; generalize (Rmult_le_reg_l (2 / (1 + x0 * x0)) 0 x0 H14 H13); intro; apply Rle_ge; assumption | unfold Rdiv; prove_sup; assumption ].",
            "VernacExtend",
            "e8ab26a515560bb18c3b4ef5f9f216d4eee22e32"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "generalize (Rge_le ((1 - x0 * x0) / (1 + x0 * x0)) 0 H11); intro; unfold Rdiv in H13; rewrite Rmult_comm in H13; rewrite <- (Rmult_0_r (/ (1 + x0 * x0)))%R in H13; generalize (Rmult_le_reg_l (/ (1 + x0 * x0)) 0 (1 - x0 * x0) H7 H13)%R; intro; generalize (Rplus_le_compat_r (x0 * x0) 0 (1 - x0 * x0) H14)%R; intro; rewrite Rplus_0_l in H15; unfold Rminus in H15; rewrite Rplus_assoc in H15; rewrite Rplus_opp_l in H15; rewrite Rplus_0_r in H15; rewrite <- (Rmult_1_r 1) in H15; fold (Rsqr x0) in H15; fold (Rsqr 1) in H15; apply (Rsqr_incr_0_var x0 1 H15); unfold Rle; left; prove_sup.",
            "VernacExtend",
            "f220dd33eaa8f3a6d53489cdd714fa11127fe950"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rat_pos_coo2 : forall x y : R, (is_ucp (x,y)) -> (in_ucp_setb x y).",
            "VernacStartTheoremProof",
            "ad143181adde637f016f3524c8836be47c977e01"
        ],
        [
            "intros; elim (rat_pos_coo1 x y H); simpl; intros; elim H0; intros; elim H2; intros; elim H4; intros; elim H6; intros; elim (relp_rat x0 H1 H3 H5); intro; elim x1; unfold frac; intros; elim H9; intros; elim H11; intros; elim H13; intros; elim H15; intros; unfold in_ucp_setb; simpl; unfold cond_pqb; exists a; exists b; rewrite H7; rewrite H8; rewrite H17.",
            "VernacExtend",
            "68250d9e28d8d7807564f73236afdf61620c9634"
        ],
        [
            "cut (b <> 0); auto with zarith; intro.",
            "VernacExtend",
            "2d116a28d23dd271947d4f4629d4416c4965f5f7"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "field; split; discrR; auto with zarith reals.",
            "VernacExtend",
            "61bf1c7a6a973979e6994293cbd19886ea07aa9b"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "field; split; discrR; auto with zarith reals.",
            "VernacExtend",
            "61bf1c7a6a973979e6994293cbd19886ea07aa9b"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cond_pq (p q : Z) := cond_pqb p q /\\ (distinct_parity p q).",
            "VernacDefinition",
            "f84a79a790d251c0bb49961dfe5f60005cdeab70"
        ],
        [
            "Definition in_ucp_set (x y : R) := exists p : Z, exists q : Z, (x = (fst (ucp p q)) /\\ y = (snd (ucp p q)) \\/ x = (snd (ucp p q)) /\\ y = (fst (ucp p q))) /\\ (cond_pq p q).",
            "VernacDefinition",
            "f912ea7518f310d3e571800a6f9cd0e4723b6ba1"
        ],
        [
            "Lemma nrat_pos_coo1 : forall x y : R, (in_ucp_set x y) -> (in_ucp_setb x y).",
            "VernacStartTheoremProof",
            "4e9190d01f17ff8b9aab06328a187e834a080afa"
        ],
        [
            "unfold in_ucp_set, in_ucp_setb, cond_pq, cond_pqb; simpl; intros; elim_hyps.",
            "VernacExtend",
            "d693b84dc0c8842b7050dca748a39b2cb6eed94d"
        ],
        [
            "exists x0; exists x1; intuition.",
            "VernacExtend",
            "d5d8e55a8adbc3396b6d1d1f07df810c55ab1b42"
        ],
        [
            "exists (x1 - x0); exists (x0 + x1); rewrite plus_IZR; rewrite <- Z_R_minus; rewrite H; rewrite H5.",
            "VernacExtend",
            "c976b833860ccf2fecfb6f3cdf86519319ca1248"
        ],
        [
            "replace ((IZR x1 - IZR x0) * (IZR x1 - IZR x0) + (IZR x0 + IZR x1) * (IZR x0 + IZR x1))%R with (2 * (IZR x0 * IZR x0 + IZR x1 * IZR x1))%R by ring.",
            "VernacExtend",
            "276f16eed7ce4d8f3496972178c7c5963139e3e0"
        ],
        [
            "split;[idtac|split]; try (field; neq_0;apply sqr_sum; auto with zarith).",
            "VernacExtend",
            "de9249567df1219548f966c3e3bfeb5e4d1fc1e6"
        ],
        [
            "do 3 try split; auto with zarith.",
            "VernacExtend",
            "ba8f6cd5442525ec042d0f04f37bb28fe0875acc"
        ],
        [
            "generalize (prop1 _ _ H4 H1); auto with zarith.",
            "VernacExtend",
            "1e9aa0923698c74dfb978803b52af2618d88c362"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nrat_pos_coo2 : forall x y : R, (in_ucp_setb x y) -> (in_ucp_set x y).",
            "VernacStartTheoremProof",
            "26b5ce0b42aa2118cee4f773bbe61c1b4128263d"
        ],
        [
            "unfold in_ucp_setb, in_ucp_set, cond_pq, cond_pqb, distinct_parity; simpl; intros; elim_hyps.",
            "VernacExtend",
            "1a92e360aba4c50522e197383738182ea434687d"
        ],
        [
            "elim (relp_parity x0 x1 H4); intro.",
            "VernacExtend",
            "b32c12078b2f6f58271983f4545ca9a88de53e27"
        ],
        [
            "exists x0; exists x1; intuition.",
            "VernacExtend",
            "d5d8e55a8adbc3396b6d1d1f07df810c55ab1b42"
        ],
        [
            "unfold both_odd in H5; elim_hyps; generalize (Zodd_def1 _ H5); clear H5; intro; generalize (Zodd_def1 _ H6); clear H6; intro; elim_hyps.",
            "VernacExtend",
            "be7924e4c44ab8bcac7ef3e05fd64d97772a31e7"
        ],
        [
            "exists (x2 - x3); exists (x2 + x3 + 1); split; [ right; rewrite H; rewrite H0; rewrite H5; rewrite H6; atomic_IZR; simpl; split; field; split; neq_0; apply sqr_sum; auto with zarith | rewrite H5 in H1; rewrite H6 in H2; rewrite H5 in H3; rewrite H6 in H3; do 4 try split; auto with zarith ].",
            "VernacExtend",
            "0b878bc008a25c32eaf14c89e0e34c29d51a85f4"
        ],
        [
            "apply rel_prime_sym; apply relp_sum; ring_simplify (x2 + x3 + 1 + (x2 - x3)); ring_simplify (x2 + x3 + 1 - (x2 - x3)); generalize H5; clear H5; ring_simplify (2 * x3 + 1); intro; generalize H6; clear H6; ring_simplify (2 * x2 + 1); intro; rewrite <- H5; rewrite <- H6; auto with zarith.",
            "VernacExtend",
            "de0494a00acd8415b005b9e88a378a0e73d6c9a8"
        ],
        [
            "elim (Zeven_odd_dec x2); intro; elim (Zeven_odd_dec x3); intro; Zparity_hyps; rewrite H7; rewrite H8; [ left; split; [ apply Zeven_def2; exists (x4 - x5) | apply Zodd_def2; exists (x4 + x5) ] | right; split; [ apply Zodd_def2; exists (x5 - x4 - 1) | apply Zeven_def2; exists (x5 + x4 + 1) ] | right; split; [ apply Zodd_def2; exists (x4 - x5) | apply Zeven_def2; exists (x4 + x5 + 1) ] | left; split; [ apply Zeven_def2; exists (x4 - x5) | apply Zodd_def2; exists (x4 + x5 + 1) ] ]; ring.",
            "VernacExtend",
            "7f7e95dcaa8eef2c93b8cc7b2db84984e029ad3d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition pytha_set (a b c : Z) := exists p : Z, exists q : Z, exists m : Z, (a = m * (q * q - p * p) /\\ b = 2 * m * (p * q) \\/ a = 2 * m * (p * q) /\\ b = m * (q * q - p * p)) /\\ c = m * (p * p + q * q) /\\ m >= 0 /\\ (cond_pq p q).",
            "VernacDefinition",
            "1263273460a6cb008c5699cdc9ac381e42ec03da"
        ],
        [
            "Lemma relp_frac : forall a b c d : Z, (b <> 0) -> (d <> 0) -> (frac a b) = (frac c d) -> (rel_prime c d) -> exists m : Z, m <> 0 /\\ b = m * d.",
            "VernacStartTheoremProof",
            "808ee5a9f6d5117ea659b7e6f8bf0a4c51411261"
        ],
        [
            "unfold frac; intros.",
            "VernacExtend",
            "3f6c738bf99240ff9b325e980194b9a885d1531c"
        ],
        [
            "cut (c * b = a * d).",
            "VernacExtend",
            "96b9950921c99a7ed7f45e1f984a5807606acfb3"
        ],
        [
            "intro; cut (d | c * b); [ intro; cut (rel_prime d c); try (intro; generalize (Gauss d c b H4 H5); intro; destruct H6 as (q,H6); exists q; intuition; rewrite H7 in H6); auto with zarith | apply (Zdivide_intro _ _ a H3) ].",
            "VernacExtend",
            "41c42fc7b3b5605d51b6398cad7b0a06d1b81f55"
        ],
        [
            "generalize (Rmult_eq_compat_l (IZR b * IZR d) _ _ H1); clear H1; intro; replace (IZR b * IZR d * (IZR a / IZR b))%R with ((IZR a) * (IZR d))%R in H1; [ replace (IZR b * IZR d * (IZR c / IZR d))%R with ((IZR c) * (IZR b))%R in H1; [ repeat rewrite <- mult_IZR in H1; generalize (eq_IZR _ _ H1); auto | field; discrR; assumption ] | field; discrR; assumption ].",
            "VernacExtend",
            "2822b5765ef661b562e826c6b7e402c670562444"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pytha_thm1 : forall a b c : Z, (is_pytha a b c) -> (pytha_set a b c).",
            "VernacStartTheoremProof",
            "3dc929ef06cf3c3bc20e0a4de2fb9cb07b43323f"
        ],
        [
            "do 3 intro; elim (Z_gt_dec c 0); [ idtac | unfold is_pytha, pytha_set, pos_triple, cond_pq, cond_pqb ]; intros.",
            "VernacExtend",
            "e4853ee3fec5ad74e82933356fa66bddb0137cb2"
        ],
        [
            "generalize (pytha_ucirc1 _ _ _ a0 H); intro; cut (is_ucp (frac a c, frac b c)); [ clear H0; intro; generalize (rat_pos_coo2 _ _ H0); clear H0; intro; generalize (nrat_pos_coo2 _ _ H0); clear H0; intro; unfold in_ucp_set, cond_pq, cond_pqb in H0; unfold pytha_set, cond_pq, cond_pqb; simpl in H0; elim_hyps; generalize (relp_pq1 _ _ H1 H4 H5 H2); intro; generalize (Zgt_lt _ _ a0); intro; generalize (Zlt_not_eq _ _ H8); clear H8; intro; generalize (sym_not_eq H8); clear H8; intro; generalize (Zgt_lt _ _ H3); intro; generalize (Zlt_not_eq _ _ H9); clear H9; intro; generalize (sym_not_eq H9); clear H9; intro; (cut (x * x + x0 * x0 <> 0); [ intro | auto with zarith ]; (cut ((IZR x0 * IZR x0 - IZR x * IZR x) / (IZR x * IZR x + IZR x0 * IZR x0) = frac (x0 * x0 - x * x) (x * x + x0 * x0))%R; [ intro | head_IZR; auto ]; (cut (2 * IZR x * IZR x0 / (IZR x * IZR x + IZR x0 * IZR x0) = frac (2 * x * x0) (x * x + x0 * x0))%R; [ intro | head_IZR; auto ]))) | idtac ].",
            "VernacExtend",
            "c89bc248641d3b9fdf1c71d03897c705b298a5f5"
        ],
        [
            "rewrite H11 in H0; clear H11; rewrite H12 in H6; clear H12; generalize (relp_frac _ _ _ _ H8 H10 H0 H7); intro; elim_hyps; rewrite H12 in H0; rewrite H12 in H6; exists x; exists x0; exists x1; generalize (frac_eq _ _ _ _ H11 H10 H0); clear H0; intro; generalize (frac_eq _ _ _ _ H11 H10 H6); clear H6; intro; rewrite H0; rewrite H6; rewrite H12; intuition; (left; split; ring) || (cut (x1 * (x * x + x0 * x0) > 0); [ intro; rewrite Zmult_comm in H13; cut (x * x + x0 * x0 > 0); try (intro; generalize (Zmult_gt_0_reg_l _ _ H14 H13)); auto with zarith | rewrite <- H12; assumption ]).",
            "VernacExtend",
            "97a2e497b41a68848e3137f2160721bda79362d4"
        ],
        [
            "rewrite H11 in H6; clear H11; rewrite H12 in H0; clear H12; generalize (relp_frac _ _ _ _ H8 H10 H6 H7); intro; elim_hyps; rewrite H12 in H0; rewrite H12 in H6; exists x; exists x0; exists x1; generalize (frac_eq _ _ _ _ H11 H10 H0); clear H0; intro; generalize (frac_eq _ _ _ _ H11 H10 H6); clear H6; intro; rewrite H0; rewrite H6; rewrite H12; intuition; (right; split; ring) || (cut (x1 * (x * x + x0 * x0) > 0); [ intro; rewrite Zmult_comm in H13; cut (x * x + x0 * x0 > 0); try (intro; generalize (Zmult_gt_0_reg_l _ _ H14 H13)); auto with zarith | rewrite <- H12; assumption ]).",
            "VernacExtend",
            "f5a307820780ff4081de6e2fad4b3d4c35110d22"
        ],
        [
            "unfold is_ucp, is_ratp, is_posp; simpl; intuition; unfold is_rat; unfold is_pytha, pos_triple in H; elim_hyps; generalize (Zgt_lt _ _ a0); intro; generalize (IZR_lt _ _ H4); intro; simpl in H5; fold (IZR c > 0)%R in H5; [ exists (a, c); intuition | exists (b, c); intuition | unfold frac; generalize (IZR_ge _ _ H); clear H; intro; simpl in H | unfold frac; generalize (IZR_ge _ _ H2); clear H2; intro; simpl in H2 ]; auto with reals.",
            "VernacExtend",
            "43820167c312de54207c09cfc590f60d55453e38"
        ],
        [
            "elim_hyps; cut (c = 0); [ intro; exists 0; exists 1; exists 0; rewrite H3; simpl; intuition; (left; rewrite H3 in H0; simpl in H0; progress auto with zarith) || (compute; auto with zarith) | auto with zarith ].",
            "VernacExtend",
            "81ceb0b278ffb130b539739fe35b7e1c4ef9ff79"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pytha_thm2 : forall a b c : Z, (pytha_set a b c) -> (is_pytha a b c).",
            "VernacStartTheoremProof",
            "4b90a36d3382b78714c30ebbdefb44642037ef00"
        ],
        [
            "unfold pytha_set, is_pytha, cond_pq, cond_pqb, pos_triple; intros; elim_hyps; rewrite H; rewrite H7; rewrite H0; split; ring || (intuition; apply Zle_ge; generalize (Zge_le _ _ H2); clear H2; intro; generalize (Zgt_lt _ _ H4); clear H4; intro; generalize (Zlt_le_weak _ _ H4); intro; repeat apply Zmult_le_0_compat; auto with zarith).",
            "VernacExtend",
            "627be738acc52d75b8573dd796f4bd1e7811bdaf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition pytha_set_even (a b c : Z) := exists p : Z, exists q : Z, exists m : Z, a = m * (q * q - p * p) /\\ b = 2 * m * (p * q) /\\ c = m * (p * p + q * q) /\\ m >= 0 /\\ (cond_pq p q).",
            "VernacDefinition",
            "482ca69d0fda9baa7d0c6e5e3fae2c49b4aacb4f"
        ],
        [
            "Lemma pytha_thm3 : forall a b c : Z, is_pytha a b c -> Zodd a -> pytha_set_even a b c.",
            "VernacStartTheoremProof",
            "f7fc937aaf570e117146a1f2b0b1225e0ef124a8"
        ],
        [
            "intros; elim (pytha_thm1 _ _ _ H); clear H; intros; unfold cond_pq, cond_pqb in H; elim_hyps; unfold pytha_set_even, cond_pq, cond_pqb; exists x; exists x0; exists x1; try solve [ intuition ].",
            "VernacExtend",
            "b8741ac12c283d896397dc97347297a4f7d91320"
        ],
        [
            "elimtype False; rewrite <- Zmult_assoc in H; generalize (Zeven_def2 _ (ex_intro (fun x => a = 2 * x) (x1 * (x * x0)) H)); intro; generalize (Zeven_not_Zodd _ H9); auto.",
            "VernacExtend",
            "933fc1a89ae1c91119263fc78c9f3302143939b6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "pytha_ucirc1",
            "line_nb": 6,
            "steps": [
                {
                    "command": [
                        "intros; unfold in_ucirc; unfold frac; field_simplify_eq.",
                        "VernacExtend",
                        "37aeba0a435ba03f1d8a70f85698bb50ba25203f"
                    ]
                },
                {
                    "command": [
                        "unfold is_pytha in H0; elim H0; intros.",
                        "VernacExtend",
                        "8cfb46536596551fa4bfaadd3248254c8c8b220c"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite pow_IZR.",
                        "VernacExtend",
                        "e6e6da5ebb48613d05dc378f9abece6c7cebcae1"
                    ]
                },
                {
                    "command": [
                        "rewrite <- plus_IZR.",
                        "VernacExtend",
                        "9f14eeedd69cca2013448d9a590282a5386676bd"
                    ]
                },
                {
                    "command": [
                        "simpl Z_of_nat.",
                        "VernacExtend",
                        "3d1515194219011765a5a529260e5859a8922504"
                    ]
                },
                {
                    "command": [
                        "ring_simplify [(sym_eq H2)] (c^2);trivial.",
                        "VernacExtend",
                        "72148e3eab93898780b687a3e792c824094454e6"
                    ]
                },
                {
                    "command": [
                        "discrR; auto with zarith.",
                        "VernacExtend",
                        "b5ab97754eea9315e1e92d9bfc979a62a2e04006"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pytha_ucirc2",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "unfold in_ucirc; unfold frac; unfold is_pytha; intros; split.",
                        "VernacExtend",
                        "acb110ae55a90e2e5a6a12be28b198ff25e2c3c4"
                    ]
                },
                {
                    "command": [
                        "unfold pos_triple; auto with zarith.",
                        "VernacExtend",
                        "04e957342888eeb3d5f2dbff983387bf5faebdf5"
                    ]
                },
                {
                    "command": [
                        "apply eq_IZR; apply (Rmult_eq_reg_l (/ (IZR c * IZR c))).",
                        "VernacExtend",
                        "b8238dcc1d17e53ba603271abc22c1c2bf0b9751"
                    ]
                },
                {
                    "command": [
                        "pattern (IZR c * IZR c)%R at 2; rewrite <- mult_IZR;rewrite Rinv_l.",
                        "VernacExtend",
                        "f59f8d53f2cebb5fb3e79a7e4ea6921979c8aa8e"
                    ]
                },
                {
                    "command": [
                        "rewrite Rinv_mult_distr.",
                        "VernacExtend",
                        "55666fd2776d160fb1bfd9d38a2833e66927f366"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0; rewrite plus_IZR; repeat rewrite mult_IZR; field.",
                        "VernacExtend",
                        "27f5a78749c11c467468515e7df9c02cea87460c"
                    ]
                },
                {
                    "command": [
                        "discrR; auto with zarith.",
                        "VernacExtend",
                        "b5ab97754eea9315e1e92d9bfc979a62a2e04006"
                    ]
                },
                {
                    "command": [
                        "discrR; auto with zarith.",
                        "VernacExtend",
                        "b5ab97754eea9315e1e92d9bfc979a62a2e04006"
                    ]
                },
                {
                    "command": [
                        "discrR; auto with zarith.",
                        "VernacExtend",
                        "b5ab97754eea9315e1e92d9bfc979a62a2e04006"
                    ]
                },
                {
                    "command": [
                        "rewrite mult_IZR; split_Rmult; discrR; auto with zarith.",
                        "VernacExtend",
                        "4fbc7a8e5820132635d6f705bb90395d7cf1d798"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_neq_0_compat; split_Rmult; discrR; auto with zarith.",
                        "VernacExtend",
                        "0d6638baa9eb326de8c2642c973bbdd07c653920"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ordp",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "intros p3 p4.",
                        "VernacExtend",
                        "39c4c330b4559da9cfc2a241e183f12ee9f13a54"
                    ]
                },
                {
                    "command": [
                        "unfold eqp; elim p3; elim p4; intros; simpl.",
                        "VernacExtend",
                        "7c696da00a68edd7610c3776df5a4488f4a3b70e"
                    ]
                },
                {
                    "command": [
                        "elim (Req_dec a a0); elim (Req_dec b b0); intuition.",
                        "VernacExtend",
                        "50bc82367db83a7f9d279df28289eb25ff42083d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "interCDr_sol",
            "line_nb": 37,
            "steps": [
                {
                    "command": [
                        "unfold interCDr;unfold in_ucirc;unfold D_r;unfold eqp, p1, p2;simpl.",
                        "VernacExtend",
                        "6d97e0c3bf1efc13447112b048f4e2420dbc66c1"
                    ]
                },
                {
                    "command": [
                        "intros;elim H;intros;rewrite H1 in H0.",
                        "VernacExtend",
                        "501b0cadf4bd09f52dc7d5ecdfe600601e781d59"
                    ]
                },
                {
                    "command": [
                        "cut (((1 + r * r) * Rsqr x + 2 * r * r * x + (r * r - 1)) = 0)%R.",
                        "VernacExtend",
                        "c24c9c69abb0c77059d94f80018fd90184d2d1b3"
                    ]
                },
                {
                    "command": [
                        "intro;cut ((1 + r * r) <> 0)%R.",
                        "VernacExtend",
                        "51f3edab4d15eef72683b3e7d535fcd9ccfaedc2"
                    ]
                },
                {
                    "command": [
                        "intro;cut (Delta_is_pos (mknonzeroreal (1 + r * r) H3) (2 * r * r) (r * r - 1))%R.",
                        "VernacExtend",
                        "3e2ed6a662f8feadb8b934115bff3813ac177093"
                    ]
                },
                {
                    "command": [
                        "intro;generalize (Rsqr_sol_eq_0_0 (mknonzeroreal (1 + r * r) H3) (2 * r * r) (r * r - 1) x H4 H2)%R.",
                        "VernacExtend",
                        "923b300e7d5f7ba470cc5c0d3bbc114922cff8c8"
                    ]
                },
                {
                    "command": [
                        "unfold sol_x1, sol_x2;unfold Delta;unfold Rsqr;simpl.",
                        "VernacExtend",
                        "967973ee2d0ab1b3da05670309d214b5baec8f7e"
                    ]
                },
                {
                    "command": [
                        "cut ((2 * r * r * (2 * r * r) - 4 * (1 + r * r) * (r * r - 1))%R = 4%R).",
                        "VernacExtend",
                        "6758c63a984268eb8080affc928de02e2864bc44"
                    ]
                },
                {
                    "command": [
                        "intro;rewrite H5.",
                        "VernacExtend",
                        "cadbe6427e5b657f011d9fd8b2d4802922f8d578"
                    ]
                },
                {
                    "command": [
                        "replace (4)%R with (2*2)%R by auto.",
                        "VernacExtend",
                        "c8e09a35c9b751d88c58a6aa729cd722547260da"
                    ]
                },
                {
                    "command": [
                        "rewrite sqrt_square.",
                        "VernacExtend",
                        "f0fc7c2f12c476d3553b9abad5439ba274e335b3"
                    ]
                },
                {
                    "command": [
                        "induction 1;[right|left].",
                        "VernacExtend",
                        "0758781b0f930addc84cc31e4b8491f611018c27"
                    ]
                },
                {
                    "command": [
                        "split;[rewrite H6;field;assumption |rewrite H1;rewrite H6;field;assumption].",
                        "VernacExtend",
                        "feab41cb4b1ddac4d311a82ddcfdc68a98a0a0fb"
                    ]
                },
                {
                    "command": [
                        "split;[rewrite H6;field;assumption |rewrite H1;rewrite H6;field;assumption].",
                        "VernacExtend",
                        "feab41cb4b1ddac4d311a82ddcfdc68a98a0a0fb"
                    ]
                },
                {
                    "command": [
                        "unfold Rle;left;prove_sup.",
                        "VernacExtend",
                        "ca97d89afaf44c5fde92cbf919e43c47d2d6d344"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "unfold Delta_is_pos;unfold Delta;unfold Rsqr;simpl; ring_simplify (2 * r * r * (2 * r * r) - 4 * (1 + r * r) * (r * r - 1))%R; unfold Rle;left;prove_sup.",
                        "VernacExtend",
                        "d55d45abe421faff22c7408355eab21458f2de7f"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_not_eq;unfold Rgt;rewrite Rplus_comm;apply Rle_lt_0_plus_1; fold (Rsqr r);elim (Req_dec r 0);intro; [rewrite H3;rewrite Rsqr_0;unfold Rle;right;auto |unfold Rle;left;apply Rsqr_pos_lt;assumption].",
                        "VernacExtend",
                        "113236d106f30e7486e1628824b4fb76f36eec3d"
                    ]
                },
                {
                    "command": [
                        "pattern 1%R at 2;rewrite <- H0;unfold Rsqr;ring.",
                        "VernacExtend",
                        "7a747c6d6418ff8734da5c6452ebcedf5ff1f822"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rat_coo1",
            "line_nb": 58,
            "steps": [
                {
                    "command": [
                        "unfold in_ucirc, is_ratp, is_rat.",
                        "VernacExtend",
                        "0cab8972bcebedac61b0931a24a2efc9389cd635"
                    ]
                },
                {
                    "command": [
                        "unfold frac; intros; elim H; intros; elim H1; intros; elim H2; intros; elim H3; intro; elim x1;intros; elim H5; intros; elim (interCDr_sol x0 x y H4); unfold eqp, p1, p2; simpl; intro; elim H8; intros; rewrite H9; rewrite H10.",
                        "VernacExtend",
                        "bfc58556fa920084a802ac73097da93239ce6a88"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "exists (-1,1); split; [ auto with zarith | simpl; field; discrR ].",
                        "VernacExtend",
                        "c985459540dd8220ef64268ece3aefa8ed692bc0"
                    ]
                },
                {
                    "command": [
                        "exists (0,1); split; [ auto with zarith | simpl; field; discrR ].",
                        "VernacExtend",
                        "6bd2023096199150ec9b7c8324b145ee8f9d8034"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "exists (b * b - a * a, a * a + b * b); split.",
                        "VernacExtend",
                        "e9e2877830faafd85fcceeace05d08607fe33f15"
                    ]
                },
                {
                    "command": [
                        "auto with zarith.",
                        "VernacExtend",
                        "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
                    ]
                },
                {
                    "command": [
                        "rewrite H7; rewrite <- Z_R_minus; rewrite plus_IZR; repeat rewrite mult_IZR; field; split;discrR; auto with zarith reals.",
                        "VernacExtend",
                        "bc46c72f348dec3788048215dc7ab07743f89d4b"
                    ]
                },
                {
                    "command": [
                        "exists (2 * a * b * b, (a * a + b * b) * b); split.",
                        "VernacExtend",
                        "f02bccc6c129d5e8321293d8d538d74d15ba8171"
                    ]
                },
                {
                    "command": [
                        "apply not_IZR_0; rewrite mult_IZR; split_Rmult; discrR; auto with zarith.",
                        "VernacExtend",
                        "5a0a1d1f8c7d27db0a97e0c71f613f4198473043"
                    ]
                },
                {
                    "command": [
                        "rewrite H7; repeat rewrite mult_IZR; rewrite plus_IZR; repeat rewrite mult_IZR; simpl; field; split; discrR; auto with zarith reals.",
                        "VernacExtend",
                        "4e4da764f93ad88ae4776639c04914a1363b3a44"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rat_coo2",
            "line_nb": 72,
            "steps": [
                {
                    "command": [
                        "unfold in_ucirc, is_ratp, is_rat, interCDr.",
                        "VernacExtend",
                        "071cfb4abaeb1ec3e5fa6f0e93844e42e0eda952"
                    ]
                },
                {
                    "command": [
                        "unfold frac, in_ucirc, D_r; intros.",
                        "VernacExtend",
                        "a8f66ca29adfd20559ae4c4d3dbf2deaebe05f3c"
                    ]
                },
                {
                    "command": [
                        "elim (Req_dec x (-1)%R); intro.",
                        "VernacExtend",
                        "b49ef250b72c0971f5bcf023d7b1b8cb9f350947"
                    ]
                },
                {
                    "command": [
                        "exists 1%R; split.",
                        "VernacExtend",
                        "7e46021e0ed1c3dbdf532eddfeb90d595ae12d0b"
                    ]
                },
                {
                    "command": [
                        "exists (1,1); split; [ auto with zarith | field; discrR ].",
                        "VernacExtend",
                        "5e7fd2a46c5767717c624155b142ad72088791c9"
                    ]
                },
                {
                    "command": [
                        "elim H; intros; split.",
                        "VernacExtend",
                        "915e14b1fdcac9db79d4977de3c9c24e0b713c05"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; rewrite H0 in H1; ring_simplify (1 * (-1 + 1))%R; cut ((1 + y * y) = 1)%R; [ intro; apply Rsqr_0_uniq; unfold Rsqr; apply (Rplus_0_r_uniq 1 (y * y) H3)%R | pattern 1%R at 2; rewrite <- H1; ring ].",
                        "VernacExtend",
                        "3475574f72f24089b0e8cd858677c9122e1823c2"
                    ]
                },
                {
                    "command": [
                        "exists (y / (x + 1))%R; cut ((x + 1) <> 0)%R; [ intro; split | rewrite <- (Ropp_involutive 1); fold (x - -1)%R; apply Rminus_eq_contra; assumption ].",
                        "VernacExtend",
                        "8a37d167680f16a2d6ef29b8784adc7ef3e99ef0"
                    ]
                },
                {
                    "command": [
                        "elim H; intros; elim H3; intros; elim H4; intro; elim x0; intros; elim H6; intros; elim H5; intro; elim x1; intros; elim H9; intros; rewrite H8; rewrite H11.",
                        "VernacExtend",
                        "e45f02c0e144c6296029dc94588d51a2d159d82e"
                    ]
                },
                {
                    "command": [
                        "cut (a + b <> 0); [ intro | apply not_IZR_0; cut (((IZR a / IZR b + 1) * IZR b)%R = (IZR a + IZR b)%R); [ intro; rewrite plus_IZR; rewrite <- H12; split_Rmult; [ rewrite <- H8; assumption | discrR; assumption ] | field; discrR; assumption ] ].",
                        "VernacExtend",
                        "39047162bc3f9f4975337f4bba6d9b863de0e5e7"
                    ]
                },
                {
                    "command": [
                        "exists (a0 * b, b0 * (a + b)); split.",
                        "VernacExtend",
                        "ff9f3cea631600f62dbd779e698574230648ed68"
                    ]
                },
                {
                    "command": [
                        "apply not_IZR_0; rewrite mult_IZR; rewrite plus_IZR; split_Rmult; discrR; assumption.",
                        "VernacExtend",
                        "54c8598e5984abda1bba065cc473bfbbd41095f1"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite mult_IZR; rewrite plus_IZR; field; discrR; try assumption.",
                        "VernacExtend",
                        "5f7956e53ff0c7c51dac0cdfe30973ceeec83af8"
                    ]
                },
                {
                    "command": [
                        "repeat split; discrR; try assumption; fold (IZR a / IZR b)%R; rewrite <- H8; assumption.",
                        "VernacExtend",
                        "fedfa52a273f7a6398aa580c94f3727de4f44d09"
                    ]
                },
                {
                    "command": [
                        "split; [ elim H; intros; assumption | field; assumption ].",
                        "VernacExtend",
                        "c9d16ad99b04cdbff9dc997cd24866f7a2abff0d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rat_pos_coo1",
            "line_nb": 95,
            "steps": [
                {
                    "command": [
                        "intros; unfold is_ucp in H; elim H; intros; elim H1; intros; elim (rat_coo2 x y (conj H0 H2)); intros; elim H4; intros.",
                        "VernacExtend",
                        "ce603f9629227d8ff79665cab99ead7e26e959c6"
                    ]
                },
                {
                    "command": [
                        "elim (interCDr_sol x0 x y).",
                        "VernacExtend",
                        "fe56ac017e4e2f713be2af3356d04c4415e9cedf"
                    ]
                },
                {
                    "command": [
                        "unfold eqp; simpl; intro; elim H7; intros; elim H3; simpl; intros; rewrite H8 in H10; elimtype False; generalize (Rge_le (-1) 0 H10)%R; fold (~ (0 <= -1)%R); apply Rlt_not_le; prove_sup.",
                        "VernacExtend",
                        "57889fa6946713588327ee7bb9d1d667362a3300"
                    ]
                },
                {
                    "command": [
                        "cut (0 < / (1 + x0 * x0))%R; [ intro | apply Rinv_0_lt_compat; rewrite <- (Rplus_0_r 0)%R; apply Rplus_lt_le_compat; [ prove_sup | fold (Rsqr x0); elim (Req_dec x0 0); intro; [ rewrite H7; rewrite Rsqr_0; unfold Rle; right; auto | unfold Rle; left; apply Rsqr_pos_lt; assumption ] ] ].",
                        "VernacExtend",
                        "eb9d0c470727933b47a0a5235383b8b86673ac5c"
                    ]
                },
                {
                    "command": [
                        "unfold eqp; simpl; intro; elim H8; intros; elim H3; simpl; rewrite H9; rewrite H10; intros; exists x0; split.",
                        "VernacExtend",
                        "25ff077228d81d45ef39c7fa5645f112e499891f"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "generalize (Rge_le (2 * x0 / (1 + x0 * x0)) 0 H12); intro; rewrite Rmult_comm in H13; rewrite <- (Rmult_0_l (2 / (1 + x0 * x0))) in H13; cut (0 < 2 / (1 + x0 * x0))%R; [ intro; rewrite Rmult_comm in H13; unfold Rdiv in H13; rewrite (Rmult_assoc x0 2) in H13; rewrite (Rmult_comm x0 (2 * / (1 + x0 * x0)))%R in H13; generalize (Rmult_le_reg_l (2 / (1 + x0 * x0)) 0 x0 H14 H13); intro; apply Rle_ge; assumption | unfold Rdiv; prove_sup; assumption ].",
                        "VernacExtend",
                        "e8ab26a515560bb18c3b4ef5f9f216d4eee22e32"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "generalize (Rge_le ((1 - x0 * x0) / (1 + x0 * x0)) 0 H11); intro; unfold Rdiv in H13; rewrite Rmult_comm in H13; rewrite <- (Rmult_0_r (/ (1 + x0 * x0)))%R in H13; generalize (Rmult_le_reg_l (/ (1 + x0 * x0)) 0 (1 - x0 * x0) H7 H13)%R; intro; generalize (Rplus_le_compat_r (x0 * x0) 0 (1 - x0 * x0) H14)%R; intro; rewrite Rplus_0_l in H15; unfold Rminus in H15; rewrite Rplus_assoc in H15; rewrite Rplus_opp_l in H15; rewrite Rplus_0_r in H15; rewrite <- (Rmult_1_r 1) in H15; fold (Rsqr x0) in H15; fold (Rsqr 1) in H15; apply (Rsqr_incr_0_var x0 1 H15); unfold Rle; left; prove_sup.",
                        "VernacExtend",
                        "f220dd33eaa8f3a6d53489cdd714fa11127fe950"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rat_pos_coo2",
            "line_nb": 109,
            "steps": [
                {
                    "command": [
                        "intros; elim (rat_pos_coo1 x y H); simpl; intros; elim H0; intros; elim H2; intros; elim H4; intros; elim H6; intros; elim (relp_rat x0 H1 H3 H5); intro; elim x1; unfold frac; intros; elim H9; intros; elim H11; intros; elim H13; intros; elim H15; intros; unfold in_ucp_setb; simpl; unfold cond_pqb; exists a; exists b; rewrite H7; rewrite H8; rewrite H17.",
                        "VernacExtend",
                        "68250d9e28d8d7807564f73236afdf61620c9634"
                    ]
                },
                {
                    "command": [
                        "cut (b <> 0); auto with zarith; intro.",
                        "VernacExtend",
                        "2d116a28d23dd271947d4f4629d4416c4965f5f7"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "field; split; discrR; auto with zarith reals.",
                        "VernacExtend",
                        "61bf1c7a6a973979e6994293cbd19886ea07aa9b"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "field; split; discrR; auto with zarith reals.",
                        "VernacExtend",
                        "61bf1c7a6a973979e6994293cbd19886ea07aa9b"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nrat_pos_coo1",
            "line_nb": 120,
            "steps": [
                {
                    "command": [
                        "unfold in_ucp_set, in_ucp_setb, cond_pq, cond_pqb; simpl; intros; elim_hyps.",
                        "VernacExtend",
                        "d693b84dc0c8842b7050dca748a39b2cb6eed94d"
                    ]
                },
                {
                    "command": [
                        "exists x0; exists x1; intuition.",
                        "VernacExtend",
                        "d5d8e55a8adbc3396b6d1d1f07df810c55ab1b42"
                    ]
                },
                {
                    "command": [
                        "exists (x1 - x0); exists (x0 + x1); rewrite plus_IZR; rewrite <- Z_R_minus; rewrite H; rewrite H5.",
                        "VernacExtend",
                        "c976b833860ccf2fecfb6f3cdf86519319ca1248"
                    ]
                },
                {
                    "command": [
                        "replace ((IZR x1 - IZR x0) * (IZR x1 - IZR x0) + (IZR x0 + IZR x1) * (IZR x0 + IZR x1))%R with (2 * (IZR x0 * IZR x0 + IZR x1 * IZR x1))%R by ring.",
                        "VernacExtend",
                        "276f16eed7ce4d8f3496972178c7c5963139e3e0"
                    ]
                },
                {
                    "command": [
                        "split;[idtac|split]; try (field; neq_0;apply sqr_sum; auto with zarith).",
                        "VernacExtend",
                        "de9249567df1219548f966c3e3bfeb5e4d1fc1e6"
                    ]
                },
                {
                    "command": [
                        "do 3 try split; auto with zarith.",
                        "VernacExtend",
                        "ba8f6cd5442525ec042d0f04f37bb28fe0875acc"
                    ]
                },
                {
                    "command": [
                        "generalize (prop1 _ _ H4 H1); auto with zarith.",
                        "VernacExtend",
                        "1e9aa0923698c74dfb978803b52af2618d88c362"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nrat_pos_coo2",
            "line_nb": 129,
            "steps": [
                {
                    "command": [
                        "unfold in_ucp_setb, in_ucp_set, cond_pq, cond_pqb, distinct_parity; simpl; intros; elim_hyps.",
                        "VernacExtend",
                        "1a92e360aba4c50522e197383738182ea434687d"
                    ]
                },
                {
                    "command": [
                        "elim (relp_parity x0 x1 H4); intro.",
                        "VernacExtend",
                        "b32c12078b2f6f58271983f4545ca9a88de53e27"
                    ]
                },
                {
                    "command": [
                        "exists x0; exists x1; intuition.",
                        "VernacExtend",
                        "d5d8e55a8adbc3396b6d1d1f07df810c55ab1b42"
                    ]
                },
                {
                    "command": [
                        "unfold both_odd in H5; elim_hyps; generalize (Zodd_def1 _ H5); clear H5; intro; generalize (Zodd_def1 _ H6); clear H6; intro; elim_hyps.",
                        "VernacExtend",
                        "be7924e4c44ab8bcac7ef3e05fd64d97772a31e7"
                    ]
                },
                {
                    "command": [
                        "exists (x2 - x3); exists (x2 + x3 + 1); split; [ right; rewrite H; rewrite H0; rewrite H5; rewrite H6; atomic_IZR; simpl; split; field; split; neq_0; apply sqr_sum; auto with zarith | rewrite H5 in H1; rewrite H6 in H2; rewrite H5 in H3; rewrite H6 in H3; do 4 try split; auto with zarith ].",
                        "VernacExtend",
                        "0b878bc008a25c32eaf14c89e0e34c29d51a85f4"
                    ]
                },
                {
                    "command": [
                        "apply rel_prime_sym; apply relp_sum; ring_simplify (x2 + x3 + 1 + (x2 - x3)); ring_simplify (x2 + x3 + 1 - (x2 - x3)); generalize H5; clear H5; ring_simplify (2 * x3 + 1); intro; generalize H6; clear H6; ring_simplify (2 * x2 + 1); intro; rewrite <- H5; rewrite <- H6; auto with zarith.",
                        "VernacExtend",
                        "de0494a00acd8415b005b9e88a378a0e73d6c9a8"
                    ]
                },
                {
                    "command": [
                        "elim (Zeven_odd_dec x2); intro; elim (Zeven_odd_dec x3); intro; Zparity_hyps; rewrite H7; rewrite H8; [ left; split; [ apply Zeven_def2; exists (x4 - x5) | apply Zodd_def2; exists (x4 + x5) ] | right; split; [ apply Zodd_def2; exists (x5 - x4 - 1) | apply Zeven_def2; exists (x5 + x4 + 1) ] | right; split; [ apply Zodd_def2; exists (x4 - x5) | apply Zeven_def2; exists (x4 + x5 + 1) ] | left; split; [ apply Zeven_def2; exists (x4 - x5) | apply Zodd_def2; exists (x4 + x5 + 1) ] ]; ring.",
                        "VernacExtend",
                        "7f7e95dcaa8eef2c93b8cc7b2db84984e029ad3d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relp_frac",
            "line_nb": 139,
            "steps": [
                {
                    "command": [
                        "unfold frac; intros.",
                        "VernacExtend",
                        "3f6c738bf99240ff9b325e980194b9a885d1531c"
                    ]
                },
                {
                    "command": [
                        "cut (c * b = a * d).",
                        "VernacExtend",
                        "96b9950921c99a7ed7f45e1f984a5807606acfb3"
                    ]
                },
                {
                    "command": [
                        "intro; cut (d | c * b); [ intro; cut (rel_prime d c); try (intro; generalize (Gauss d c b H4 H5); intro; destruct H6 as (q,H6); exists q; intuition; rewrite H7 in H6); auto with zarith | apply (Zdivide_intro _ _ a H3) ].",
                        "VernacExtend",
                        "41c42fc7b3b5605d51b6398cad7b0a06d1b81f55"
                    ]
                },
                {
                    "command": [
                        "generalize (Rmult_eq_compat_l (IZR b * IZR d) _ _ H1); clear H1; intro; replace (IZR b * IZR d * (IZR a / IZR b))%R with ((IZR a) * (IZR d))%R in H1; [ replace (IZR b * IZR d * (IZR c / IZR d))%R with ((IZR c) * (IZR b))%R in H1; [ repeat rewrite <- mult_IZR in H1; generalize (eq_IZR _ _ H1); auto | field; discrR; assumption ] | field; discrR; assumption ].",
                        "VernacExtend",
                        "2822b5765ef661b562e826c6b7e402c670562444"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pytha_thm1",
            "line_nb": 145,
            "steps": [
                {
                    "command": [
                        "do 3 intro; elim (Z_gt_dec c 0); [ idtac | unfold is_pytha, pytha_set, pos_triple, cond_pq, cond_pqb ]; intros.",
                        "VernacExtend",
                        "e4853ee3fec5ad74e82933356fa66bddb0137cb2"
                    ]
                },
                {
                    "command": [
                        "generalize (pytha_ucirc1 _ _ _ a0 H); intro; cut (is_ucp (frac a c, frac b c)); [ clear H0; intro; generalize (rat_pos_coo2 _ _ H0); clear H0; intro; generalize (nrat_pos_coo2 _ _ H0); clear H0; intro; unfold in_ucp_set, cond_pq, cond_pqb in H0; unfold pytha_set, cond_pq, cond_pqb; simpl in H0; elim_hyps; generalize (relp_pq1 _ _ H1 H4 H5 H2); intro; generalize (Zgt_lt _ _ a0); intro; generalize (Zlt_not_eq _ _ H8); clear H8; intro; generalize (sym_not_eq H8); clear H8; intro; generalize (Zgt_lt _ _ H3); intro; generalize (Zlt_not_eq _ _ H9); clear H9; intro; generalize (sym_not_eq H9); clear H9; intro; (cut (x * x + x0 * x0 <> 0); [ intro | auto with zarith ]; (cut ((IZR x0 * IZR x0 - IZR x * IZR x) / (IZR x * IZR x + IZR x0 * IZR x0) = frac (x0 * x0 - x * x) (x * x + x0 * x0))%R; [ intro | head_IZR; auto ]; (cut (2 * IZR x * IZR x0 / (IZR x * IZR x + IZR x0 * IZR x0) = frac (2 * x * x0) (x * x + x0 * x0))%R; [ intro | head_IZR; auto ]))) | idtac ].",
                        "VernacExtend",
                        "c89bc248641d3b9fdf1c71d03897c705b298a5f5"
                    ]
                },
                {
                    "command": [
                        "rewrite H11 in H0; clear H11; rewrite H12 in H6; clear H12; generalize (relp_frac _ _ _ _ H8 H10 H0 H7); intro; elim_hyps; rewrite H12 in H0; rewrite H12 in H6; exists x; exists x0; exists x1; generalize (frac_eq _ _ _ _ H11 H10 H0); clear H0; intro; generalize (frac_eq _ _ _ _ H11 H10 H6); clear H6; intro; rewrite H0; rewrite H6; rewrite H12; intuition; (left; split; ring) || (cut (x1 * (x * x + x0 * x0) > 0); [ intro; rewrite Zmult_comm in H13; cut (x * x + x0 * x0 > 0); try (intro; generalize (Zmult_gt_0_reg_l _ _ H14 H13)); auto with zarith | rewrite <- H12; assumption ]).",
                        "VernacExtend",
                        "97a2e497b41a68848e3137f2160721bda79362d4"
                    ]
                },
                {
                    "command": [
                        "rewrite H11 in H6; clear H11; rewrite H12 in H0; clear H12; generalize (relp_frac _ _ _ _ H8 H10 H6 H7); intro; elim_hyps; rewrite H12 in H0; rewrite H12 in H6; exists x; exists x0; exists x1; generalize (frac_eq _ _ _ _ H11 H10 H0); clear H0; intro; generalize (frac_eq _ _ _ _ H11 H10 H6); clear H6; intro; rewrite H0; rewrite H6; rewrite H12; intuition; (right; split; ring) || (cut (x1 * (x * x + x0 * x0) > 0); [ intro; rewrite Zmult_comm in H13; cut (x * x + x0 * x0 > 0); try (intro; generalize (Zmult_gt_0_reg_l _ _ H14 H13)); auto with zarith | rewrite <- H12; assumption ]).",
                        "VernacExtend",
                        "f5a307820780ff4081de6e2fad4b3d4c35110d22"
                    ]
                },
                {
                    "command": [
                        "unfold is_ucp, is_ratp, is_posp; simpl; intuition; unfold is_rat; unfold is_pytha, pos_triple in H; elim_hyps; generalize (Zgt_lt _ _ a0); intro; generalize (IZR_lt _ _ H4); intro; simpl in H5; fold (IZR c > 0)%R in H5; [ exists (a, c); intuition | exists (b, c); intuition | unfold frac; generalize (IZR_ge _ _ H); clear H; intro; simpl in H | unfold frac; generalize (IZR_ge _ _ H2); clear H2; intro; simpl in H2 ]; auto with reals.",
                        "VernacExtend",
                        "43820167c312de54207c09cfc590f60d55453e38"
                    ]
                },
                {
                    "command": [
                        "elim_hyps; cut (c = 0); [ intro; exists 0; exists 1; exists 0; rewrite H3; simpl; intuition; (left; rewrite H3 in H0; simpl in H0; progress auto with zarith) || (compute; auto with zarith) | auto with zarith ].",
                        "VernacExtend",
                        "81ceb0b278ffb130b539739fe35b7e1c4ef9ff79"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pytha_thm2",
            "line_nb": 153,
            "steps": [
                {
                    "command": [
                        "unfold pytha_set, is_pytha, cond_pq, cond_pqb, pos_triple; intros; elim_hyps; rewrite H; rewrite H7; rewrite H0; split; ring || (intuition; apply Zle_ge; generalize (Zge_le _ _ H2); clear H2; intro; generalize (Zgt_lt _ _ H4); clear H4; intro; generalize (Zlt_le_weak _ _ H4); intro; repeat apply Zmult_le_0_compat; auto with zarith).",
                        "VernacExtend",
                        "627be738acc52d75b8573dd796f4bd1e7811bdaf"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pytha_thm3",
            "line_nb": 157,
            "steps": [
                {
                    "command": [
                        "intros; elim (pytha_thm1 _ _ _ H); clear H; intros; unfold cond_pq, cond_pqb in H; elim_hyps; unfold pytha_set_even, cond_pq, cond_pqb; exists x; exists x0; exists x1; try solve [ intuition ].",
                        "VernacExtend",
                        "b8741ac12c283d896397dc97347297a4f7d91320"
                    ]
                },
                {
                    "command": [
                        "elimtype False; rewrite <- Zmult_assoc in H; generalize (Zeven_def2 _ (ex_intro (fun x => a = 2 * x) (x1 * (x * x0)) H)); intro; generalize (Zeven_not_Zodd _ H9); auto.",
                        "VernacExtend",
                        "933fc1a89ae1c91119263fc78c9f3302143939b6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}