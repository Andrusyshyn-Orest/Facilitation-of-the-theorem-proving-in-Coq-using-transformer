{
    "filename": "Diophantus20.v",
    "coq_project": "fermat4",
    "vernac_cmds": [
        [
            "Require Export Descent.",
            "VernacRequire",
            "445b613dc451d79f756f73629d8a483764764cf6"
        ],
        [
            "Require Export Pythagorean.",
            "VernacRequire",
            "320534de229c587526764c6b83399463bb8cdfd9"
        ],
        [
            "Lemma multiple4_2: forall u v : Z, Zodd v -> Zodd u -> v <= u -> rel_prime u v -> 1 < u -> 1 < v -> exists two : Z * Z, let (s, w) := two in (u - v = 4 * s /\\ u + v = 2 * w \\/ u - v = 2 * w /\\ u + v = 4 * s) /\\ 0 < s /\\ 0 < w /\\ rel_prime s w.",
            "VernacStartTheoremProof",
            "4b395d9db6a891ad9336a3b7ea3f0b9f0f8c35fb"
        ],
        [
            "intros; elim (Zodd_mult u v H0 H); intros; elim H5; clear H5; intros; elim_hyps; split with (x,x0); intuition; cut (u <> 1); auto with zarith; intro; cut (u <> -1); auto with zarith; intro.",
            "VernacExtend",
            "9ad64e546f69cdb09453bece748ba03a8b69a0de"
        ],
        [
            "apply (Zmult_lt_0_reg_r 4 x); auto with zarith; rewrite Zmult_comm; rewrite <- H5; generalize (relp_neq _ _ H7 H8 H2); auto with zarith.",
            "VernacExtend",
            "feeb367981ab8cd888dc1aecf36561ffc9ab790e"
        ],
        [
            "apply (gcd2_rel_prime (u - v) (u + v) x x0); auto; apply gcd2_relp_odd; auto.",
            "VernacExtend",
            "6d6a7af5d41ebb99ee59de1df21559ac97855acf"
        ],
        [
            "apply (Zmult_lt_0_reg_r 2 x0); auto with zarith; rewrite Zmult_comm; rewrite <- H5; generalize (relp_neq _ _ H7 H8 H2); auto with zarith.",
            "VernacExtend",
            "bb9dbff44589a3d949e5d99301b8fc85f42cd5cf"
        ],
        [
            "apply (gcd2_rel_prime (u + v) (u - v) x x0); auto; apply Zis_gcd_sym; apply gcd2_relp_odd; auto.",
            "VernacExtend",
            "3569590a95d4eede0ce0bc61603dc85427fd6be7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma for_exists_ab : forall u v m n : Z, v <= u -> u * u = m * m + n * n -> v * v = n * n - m * m -> 1 < u -> 1 < v -> Zodd v -> Zodd u -> rel_prime u v -> exists two : Z * Z, let (a, b) := two in (u - v = 4 * (a * a) /\\ u + v = 2 * (b * b) \\/ u - v = 2 * (b * b) /\\ u + v = 4 * (a * a)) /\\ 0 < a /\\ 0 < b.",
            "VernacStartTheoremProof",
            "7b2189bb674d27a48e735ca3f6068652a7af5d47"
        ],
        [
            "intros u v m n Huv H H0 H1 H2 H3 H4 H5; elim (multiple4_2 u v H3 H4 Huv H5 H1 H2); intro; elim x; intros; elim_hyps; (cut (is_sqr (a * b)); [ intro Hab; elim (prop4 a b (Zlt_le_weak 0 a H7) (Zlt_le_weak 0 b H8) H9 Hab); intros; elim H11; intros Ha H11'; elim H11'; clear H11'; intros a0 H11'; elim H11'; clear H11'; intros H11' Ha0; elim H12; intros Hb H12'; elim H12'; clear H12'; intros b0 H12'; elim H12'; clear H12'; intros H12' Hb0; split with (a0,b0); intuition; [ rewrite <- H11' in H7; generalize (sqr_poss a0 H7); intro; auto with zarith | rewrite <- H12' in H8; generalize (sqr_poss b0 H8); intro; auto with zarith ] | apply (is_sqr_compat 2); try discriminate; replace (2 * 2 * (a * b)) with (m * m); [ apply is_sqr_sqr | apply (Zmult_eq_reg_l 2); try discriminate; replace (2 * (m * m)) with ((u * u) - (v * v)); [ replace (u * u - v * v) with ((u - v) * (u + v)); [ rewrite H6; rewrite H10; ring | ring ] | replace (2 * (m * m)) with ((m * m + n * n) - (n * n - m * m)); [ rewrite H; rewrite H0; ring | ring ] ] ] ]).",
            "VernacExtend",
            "e5e4d64012e4d2d3584ee379e76f5d6f60ee081b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma for_mba_pytha1: forall m n u v a b : Z, u * u = m * m + n * n -> v * v = n * n - m * m -> u - v = 4 * (a * a) -> u + v = 2 * (b * b) -> b * b * (b * b) + 2 * (a * a) * (2 * (a * a)) = n * n.",
            "VernacStartTheoremProof",
            "618b83757d23d2f0fad8d182d1ac8d18d4ad8a6e"
        ],
        [
            "intros; cut (2 * n * n = u * u + v * v).",
            "VernacExtend",
            "137cdd5fac82a914c8a7a549d17a9ab893b0d789"
        ],
        [
            "intro; cut (u = 2 * a * a + b * b).",
            "VernacExtend",
            "34109d22ed7f15dafe8c908eb35bdd439ff551b0"
        ],
        [
            "intro; cut (v = b * b - 2 * a * a).",
            "VernacExtend",
            "7f45ecb91dc48959587b06b00f795a9f987ddb9b"
        ],
        [
            "intro; rewrite H4 in H3; rewrite H5 in H3; symmetry; apply (Zmult_eq_reg_l 2).",
            "VernacExtend",
            "ab691a2cce27e27c4db3e2919185b5cdd9caa119"
        ],
        [
            "replace (2 * (n * n)) with (2 * n * n); [ rewrite H3; ring | ring ].",
            "VernacExtend",
            "0d76f73927bc4c67a95f55b1ffb260493735d170"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "apply (Zmult_eq_reg_l 2).",
            "VernacExtend",
            "4dcd0be739147f37966fa7ecd37c48f4f133902d"
        ],
        [
            "replace (2 * v) with (u + v - (u - v)); [ rewrite H2; rewrite H1; ring | ring ].",
            "VernacExtend",
            "5ed8cf27a32f40cee7214814c17f4823f60a8095"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "apply (Zmult_eq_reg_l 2).",
            "VernacExtend",
            "4dcd0be739147f37966fa7ecd37c48f4f133902d"
        ],
        [
            "replace (2 * u) with (u + v + (u - v)); [ rewrite H2; rewrite H1; ring | ring ].",
            "VernacExtend",
            "bdc4dc690d30da933cf54bc028baa0563a762524"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "replace (2 * n * n) with (m * m + n * n + (n * n - m * m)); [ rewrite H; rewrite H0; ring | ring ].",
            "VernacExtend",
            "d860e833fad8074e302c29b74f911ec11e2e2ded"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma for_mba_pytha2: forall m n u v a b : Z, u * u = m * m + n * n -> v * v = n * n - m * m -> u - v = 2 * (b * b) -> u + v = 4 * (a * a) -> b * b * (b * b) + 2 * (a * a) * (2 * (a * a)) = n * n.",
            "VernacStartTheoremProof",
            "3e438fa8d4c0d41de8c50b74cb102ec889d5b80e"
        ],
        [
            "intros; cut (2 * n * n = u * u + v * v).",
            "VernacExtend",
            "137cdd5fac82a914c8a7a549d17a9ab893b0d789"
        ],
        [
            "intro; cut (u = 2 * a * a + b * b).",
            "VernacExtend",
            "34109d22ed7f15dafe8c908eb35bdd439ff551b0"
        ],
        [
            "intro; cut (v = 2 * a * a - b * b).",
            "VernacExtend",
            "a85fc03cfa3a49b24342d70a76e5dfc96b6bb041"
        ],
        [
            "intro; rewrite H4 in H3; rewrite H5 in H3; symmetry; apply (Zmult_eq_reg_l 2).",
            "VernacExtend",
            "ab691a2cce27e27c4db3e2919185b5cdd9caa119"
        ],
        [
            "replace (2 * (n * n)) with (2 * n * n); [ rewrite H3; ring | ring ].",
            "VernacExtend",
            "0d76f73927bc4c67a95f55b1ffb260493735d170"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "apply (Zmult_eq_reg_l 2).",
            "VernacExtend",
            "4dcd0be739147f37966fa7ecd37c48f4f133902d"
        ],
        [
            "replace (2 * v) with (u + v - (u - v)); [ rewrite H2; rewrite H1; ring | ring ].",
            "VernacExtend",
            "5ed8cf27a32f40cee7214814c17f4823f60a8095"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "apply (Zmult_eq_reg_l 2).",
            "VernacExtend",
            "4dcd0be739147f37966fa7ecd37c48f4f133902d"
        ],
        [
            "replace (2 * u) with (u + v + (u - v)); [ rewrite H2; rewrite H1; ring | ring ].",
            "VernacExtend",
            "bdc4dc690d30da933cf54bc028baa0563a762524"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "replace (2 * n * n) with (m * m + n * n + (n * n - m * m)); [ rewrite H; rewrite H0; ring | ring ].",
            "VernacExtend",
            "d860e833fad8074e302c29b74f911ec11e2e2ded"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma diophantus20_equiv: forall y z : Z, y > 0 -> z > 0 -> y <= z -> rel_prime y z -> distinct_parity y z -> ~ is_sqr ((z * z + y * y) * (z * z - y * y)).",
            "VernacStartTheoremProof",
            "3a6f1458ad33960cb5a011c0296aa3f0a6df45a7"
        ],
        [
            "intros y z Hy Hz H' H0' H1' H2'; generalize (infinite_descent (fun p q : Z => 0 < p /\\ 0 < q /\\ p <= q /\\ rel_prime p q /\\ distinct_parity p q /\\ is_sqr (p * (q * (q * q - p * p))))).",
            "VernacExtend",
            "43f8a4d54a8ab5461c005c6ba372ef62def06b93"
        ],
        [
            "intro H3; cut (forall x1 x2 : Z, 0 <= x1 -> 0 <= x2 -> 0 < x1 /\\ 0 < x2 /\\ x1 <= x2 /\\ rel_prime x1 x2 /\\ distinct_parity x1 x2 /\\ is_sqr (x1 * (x2 * (x2 * x2 - x1 * x1))) -> exists y1 : Z, exists y2 : Z, 0 <= y1 /\\ 0 <= y2 /\\ y1 + y2 < x1 + x2 /\\ 0 < y1 /\\ 0 < y2 /\\ y1 <= y2 /\\ rel_prime y1 y2 /\\ distinct_parity y1 y2 /\\ is_sqr (y1 * (y2 * (y2 * y2 - y1 * y1)))).",
            "VernacExtend",
            "c07bb13311ce3b897c533d8175c4511300999f4d"
        ],
        [
            "intro H4; apply (H3 H4) with (y * y) (z * z); try (apply Zge_le; apply sqr_pos).",
            "VernacExtend",
            "860f11591a504af4ffea172ade7510e159fe8980"
        ],
        [
            "intuition; try (apply Zgt_lt; apply sqr_spos; auto with zarith).",
            "VernacExtend",
            "d138d2b0947a8a9d0c66903200177928ef86d4d1"
        ],
        [
            "cut (y >= 0); auto with zarith.",
            "VernacExtend",
            "38036092989bb72b5a450fc3b57cee041708e717"
        ],
        [
            "apply (prop2 y z H0').",
            "VernacExtend",
            "9accd2f1a64e95f180188e9d20c457aaf7a3258c"
        ],
        [
            "apply (distp_sqr1 _ _ H1').",
            "VernacExtend",
            "8735aef38bcf25c9a2b3e59785435bde0a113672"
        ],
        [
            "apply is_sqr_mult.",
            "VernacExtend",
            "3f841090cb7260b9ce8daad34da9dde5f3f3d43c"
        ],
        [
            "apply is_sqr_sqr.",
            "VernacExtend",
            "b3d878d3ed4ce8b4bb3c074f2a799d0d1b0d24a2"
        ],
        [
            "apply is_sqr_mult.",
            "VernacExtend",
            "3f841090cb7260b9ce8daad34da9dde5f3f3d43c"
        ],
        [
            "apply is_sqr_sqr.",
            "VernacExtend",
            "b3d878d3ed4ce8b4bb3c074f2a799d0d1b0d24a2"
        ],
        [
            "replace (z * z * (z * z) - y * y * (y * y)) with ((z * z + y * y) * (z * z - y * y)); [assumption | ring ].",
            "VernacExtend",
            "0da1213b2efd89132b637f28386b34d51f7781a2"
        ],
        [
            "clear H3; intros p q Hp Hq H; elim H; clear H; intros H0p H; elim H; clear H; intros H0q H; elim H; clear H; intros H H0; elim H0; clear H0; intros H0 H1; elim H1; clear H1; intros H1 H2.",
            "VernacExtend",
            "826491724aeff36dc846e0ec890b90d5c5000a68"
        ],
        [
            "elim (prop4b _ _ Hp Hq H H0 H2); intros H3 H4; elim H4; clear H4; intros H4 H5; elim H3; intros Hpp H3p; elim H3p; intros m H3'; elim H4; intros Hqq H4q; elim H4q; intros n H4'; elim H5; intros Hpq2 H5pq; elim H5pq; intros r H5'; elim H3'; clear H3'; intros H3' Hm; elim H4'; clear H4'; intros H4' Hn; elim H5'; clear H5'; intros H5' Hr; generalize H5'; rewrite <- H3'; rewrite <- H4'; replace (n * n * (n * n) - m * m * (m * m)) with ((m * m + n * n) * (n * n - m * m)).",
            "VernacExtend",
            "113a68a6c013b1a6e37c4288092fded1da012f2c"
        ],
        [
            "intro; elim (distp_odd _ _ H1); rewrite <- H3'; rewrite <- H4'; intros; symmetry in H3'; symmetry in H4'; cut (rel_prime (m * m) (n * n)); try (rewrite <- H3'; rewrite <- H4'; assumption); intro; generalize (prop3 _ _ H8); clear H8; intro; generalize (prop1 _ _ H0 H1); rewrite H3'; rewrite H4'.",
            "VernacExtend",
            "6861772ffdb6be42447cca650dd8ff821e255292"
        ],
        [
            "intro; rewrite <- H5' in H5; rewrite H5'0 in H5; cut (0 <= m * m + n * n).",
            "VernacExtend",
            "37e73e998d3d8c47805c7737458b8efd21718141"
        ],
        [
            "cut (0 <= n * n - m * m).",
            "VernacExtend",
            "68d0780f37ba9a6b8559d76a4e11b2f6fc7ae1f8"
        ],
        [
            "intros Hmn2 Hmn2'; elim (prop4 (m * m + n * n) (n * n - m * m) Hmn2' Hmn2 H9 H5); intros; elim H10; intros Hmn21 Hmn22; clear Hmn21; elim Hmn22; intros u H12; elim H11; intros Hmn21' Hmn22'; clear Hmn21'; elim Hmn22'; intros v H13; elim H12; clear H12; intros H12 Hu; elim H13; clear H13; intros H13 Hv; generalize H6 H7 H9; rewrite <- H12; rewrite <- H13; intros H6' H7' H9'; intros; generalize (Zodd_sqr2 _ H6'); generalize (Zodd_sqr2 _ H7'); intros; generalize (prop3 u v H9'); intro; cut (exists two : Z * Z, let (a, b) := two in (u - v = 4 * (a * a) /\\ u + v = 2 * (b * b) \\/ u - v = 2 * (b * b) /\\ u + v = 4 * (a * a)) /\\ 0 < a /\\ 0 < b).",
            "VernacExtend",
            "ac2bf229b98972620cdb5deefeb838f750811ec6"
        ],
        [
            "intro; elim H17; clear H17; intro x; elim x; clear x; intros a b H17; elim H17; clear H17; intros; elim H18; clear H18; intros Ha Hb; cut (is_pytha (b * b) (2 * (a * a)) n); [ intro H19; cut (Zodd (b * b)); [ intro Hodd; generalize (pytha_thm3 _ _ _ H19 Hodd); clear Hodd H19; intro H19; elim H19; clear H19; unfold cond_pq, cond_pqb; intro p'; intro H19; elim H19; clear H19; intro q'; intro H19; elim H19; clear H19; intro k'; intro H19; elim H19; clear H19; intro H21; intro H19; elim H19; clear H19; intro H22; intro H19; elim H19; clear H19; intro H23; intro H19; elim H19; clear H19; intro H20; intro H19; elim H19; clear H19; intro H19; intro H25; elim H19; clear H19; intro Hp'; intro H19; elim H19; clear H19; intro Hq'; intro H19; elim H19; clear H19; intros Hpq' H24 | elim H17; clear H17; intro H17; elim H17; clear H17; intros H17 H18; cut (u = b * b + 2 * (a * a)); auto with zarith; intro; rewrite H20 in H15; apply Zodd_sum3 with (b := a * a); assumption ] | unfold is_pytha, pos_triple; intuition; (apply Zle_ge; apply sqr_2) || (apply (for_mba_pytha1 m n u v a b); assumption) || (apply (for_mba_pytha2 m n u v a b); assumption) ].",
            "VernacExtend",
            "4bb1b67a0f5d1fea9c47c7b44282a22400d43c82"
        ],
        [
            "cut (k' = 1).",
            "VernacExtend",
            "ae207960b99869e537157064fd2c3fefeb5060ab"
        ],
        [
            "intro Hk'; generalize H21 H22 H23; clear H21 H22 H23; rewrite Hk'; ring_simplify q' p' (1 * (p' * p' + q' * q')) (1 * (p' * q')); intros; cut (0 <= p'); auto with zarith; cut (0 <= q'); auto with zarith; intros Hq'4 Hp'4; elim (prop4 p' q' Hp'4 Hq'4 H24).",
            "VernacExtend",
            "835382880ecc89510bb82ccbebb5568d433e6e51"
        ],
        [
            "intros; generalize (prop1 _ _ H24 H25); intro; elim (prop4 (p' + q') (q' - p')); auto with zarith.",
            "VernacExtend",
            "1f7c83e0555fe3a8f4a97de3723b3305553ca481"
        ],
        [
            "intros; elim H18; rename H18 into H18'; intros Hpp' H18; clear Hpp'; elim H18; clear H18; intros n' H18; elim H18; clear H18; intros H18 Hn'; elim H19; rename H19 into H19'; intros Hpp' H19; elim H19; clear H19; intros m' H19; elim H19; clear H19; intros H19 Hm'; cut (m' * m' + n' * n' < m * m + n * n).",
            "VernacExtend",
            "75bb9b4c2c250f64e0e22b01d59740808660bf27"
        ],
        [
            "intro; split with (n' * n'); split with (m' * m'); repeat (match goal with | |- _ /\\ _ => split end); auto with zarith; try (rewrite H18; replace (2 * 1 * (p' * q')) with (2 * (p' * q')) in H22; try ring; cut (2 <> 0); try discriminate; intro h2; generalize (Zmult_eq_reg_l 2 (a * a) (p' * q') H22 h2); intro; apply (Zmult_lt_0_reg_r q'); auto with zarith; rewrite <- H30; apply Zmult_lt_O_compat; assumption); rewrite H18; rewrite H19; assumption || (repeat apply is_sqr_mult; try assumption; replace (q' * q' - p' * p') with ((p' + q') * (q' - p')); try ring; apply is_sqr_mult; assumption).",
            "VernacExtend",
            "a5805c753bce00f1138199100c455a65f1b037e4"
        ],
        [
            "rewrite H19; rewrite H18; rewrite H23.",
            "VernacExtend",
            "06dd137e82add3a46a266262c4ab783334989b1c"
        ],
        [
            "apply (Zlt_le_trans (q' + p') (q' ^2 + p' ^2) (m * m + (q' ^2 + p' ^2) * (q' ^2 + p' ^2))).",
            "VernacExtend",
            "446d425887954c71042804e9ab7f87f0aeb9ceb0"
        ],
        [
            "generalize (Zlt_not_eq _ a Ha); intro Han0.",
            "VernacExtend",
            "95eccf9ae6421baa81d200a606b28828daa2c52b"
        ],
        [
            "generalize (Zgt_lt q' _ Hq'); intro Hq'g.",
            "VernacExtend",
            "5bf45c4ca1524903c525e17f36749e8f241b4935"
        ],
        [
            "generalize (Zlt_not_eq _ q' Hq'g); intro Hqn0.",
            "VernacExtend",
            "d82268ec21a687a9a8e0b0c215d2c6c42a536e4f"
        ],
        [
            "replace (q' + p') with (p' + q'); try ring; replace (q' ^2 + p' ^2) with (p' * p' + q' * q'); try ring.",
            "VernacExtend",
            "d1725852f16058d5f0ef51c8b746c11d2e27512b"
        ],
        [
            "cut (p' <> 0); try (intro; cut (q' <> 0); progress auto with zarith).",
            "VernacExtend",
            "a741e2d4002cd777125c07bba4af47b80fb8f8a8"
        ],
        [
            "intro; rewrite H29 in H22; replace (2 * 1 * (0 * q')) with 0 in H22.",
            "VernacExtend",
            "8f1f7045d91e2a3b05c3335fd42b304aac110de1"
        ],
        [
            "apply Han0; symmetry; apply sqr_0; auto with zarith.",
            "VernacExtend",
            "ad2b9d4cbcb01cb75bebdbdf552276a7b07c95ff"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "apply (Zle_trans (q' ^2 + p' ^2) ((q' ^2 + p' ^2) * (q' ^2 + p' ^2)) (m * m + (q' ^2 + p' ^2) * (q' ^2 + p' ^2))); auto with zarith.",
            "VernacExtend",
            "2fb9d839ce6299d906a98d2319daa7673448947e"
        ],
        [
            "apply sqr_le.",
            "VernacExtend",
            "597f9524e62f73cdbfd54ec3f4c997c7617c4bf8"
        ],
        [
            "replace ((p' + q') * (q' - p')) with (q' * q' - p' * p'); try ring; generalize H21; replace (1 * (q' * q' - p' * p')) with (q' * q' - p' * p'); try ring; clear H21; intro H21; rewrite <- H21; generalize sqr_pos; intro.",
            "VernacExtend",
            "4a894173b7136eb6869ac0e4f9ad12720b30ed49"
        ],
        [
            "apply is_sqr_sqr.",
            "VernacExtend",
            "b3d878d3ed4ce8b4bb3c074f2a799d0d1b0d24a2"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Zmult_le_0_compat; assumption.",
            "VernacExtend",
            "511f333da0c97e40ae9212c6f96d5b255859ce23"
        ],
        [
            "split with a; split; auto with zarith.",
            "VernacExtend",
            "63cfb6b8575d6abc060851f7b63c245a2e8fc3b3"
        ],
        [
            "apply (relp_mult1 (b * b) (2 * (a * a)) (q' * q' - p' * p') (2 * (p' * q')) k'); auto with zarith.",
            "VernacExtend",
            "08255a865811a59ca91275d28a380c8732169e5d"
        ],
        [
            "generalize (distp_neq _ _ H25); intro Hneq; generalize (Zge_le _ _ Hp'); clear Hp'; intro Hp'; cut (p' < q'); auto with zarith.",
            "VernacExtend",
            "b636fa914a558bdb0ea751bf7f9ea801fa831af1"
        ],
        [
            "rewrite H22; ring.",
            "VernacExtend",
            "d4990c585fdccbfd3d0f93cb1287cc7dbc9ecc9d"
        ],
        [
            "apply (relp_sum (b * b) (2 * (a * a))).",
            "VernacExtend",
            "ccbf2235f21e955a15c40c24c5c8d707be4e410b"
        ],
        [
            "elim H17; clear H17; intro H17; elim H17; clear H17; intros H18 H19.",
            "VernacExtend",
            "a10a54279696e0b97e41bb56c4c4cd5790ec3507"
        ],
        [
            "cut (v = b * b - 2 * (a * a)).",
            "VernacExtend",
            "e6d71eca31e9f2bdb776c7114b4a1bdde7000c73"
        ],
        [
            "intro; cut (u = b * b + 2 * (a * a)).",
            "VernacExtend",
            "6ac0918e50d54b937b78c4f40ef2373367f5b458"
        ],
        [
            "intro; rewrite <- H17; rewrite <- H26; auto.",
            "VernacExtend",
            "35b83918c672b707869f19590242e5fc4e61a30a"
        ],
        [
            "apply (Zmult_eq_reg_l 2 u (b * b + 2 * (a * a))).",
            "VernacExtend",
            "41d295860d7f9ecaa1f2b57d77ae016371866677"
        ],
        [
            "replace (2 * u) with ((u + v) + (u - v)); [ rewrite H18; rewrite H19; ring | ring ].",
            "VernacExtend",
            "f79a99427e7fdf54aacb13d0de22a55efc962e04"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "apply (Zmult_eq_reg_l 2 v (b * b - 2 * (a * a))).",
            "VernacExtend",
            "edf7214564495b60d71e8c3c92ac8f004708b708"
        ],
        [
            "replace (2 * v) with ((u + v) - (u - v)); [ rewrite H18; rewrite H19; ring | ring ].",
            "VernacExtend",
            "898d6e6789707990b3b124f4ba4ade3b28ef3536"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "cut ((-v) = b * b - 2 * (a * a)).",
            "VernacExtend",
            "9fd66b1468c989e17dd7e61fe6a34a16762931d2"
        ],
        [
            "intro; cut (u = b * b + 2 * (a * a)).",
            "VernacExtend",
            "6ac0918e50d54b937b78c4f40ef2373367f5b458"
        ],
        [
            "intro; rewrite <- H17; rewrite <- H26.",
            "VernacExtend",
            "7965d97b8e00ac51ede3d37f02497d590c147d62"
        ],
        [
            "apply rel_prime_oppr; auto.",
            "VernacExtend",
            "6e8aaf257af2d27c904145742cf9ea421f118dcd"
        ],
        [
            "apply (Zmult_eq_reg_l 2 u (b * b + 2 * (a * a))).",
            "VernacExtend",
            "41d295860d7f9ecaa1f2b57d77ae016371866677"
        ],
        [
            "replace (2 * u) with ((u + v) + (u - v)); [ rewrite H18; rewrite H19; ring | ring ].",
            "VernacExtend",
            "f79a99427e7fdf54aacb13d0de22a55efc962e04"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "apply (Zmult_eq_reg_l 2 (-v) (b * b - 2 * (a * a))).",
            "VernacExtend",
            "0435e1c86a3b550d0998aa8823326321c7c43a3f"
        ],
        [
            "replace (2 * (-v)) with ((u - v) - (u + v)); [ rewrite H18; rewrite H19; ring | ring ].",
            "VernacExtend",
            "9efa6e32b00a0c144fa96dfa9d327f6610369754"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "apply (for_exists_ab u v m n); try assumption; rewrite H3' in H0p; rewrite H4' in H0q; generalize (sqr_poss n H0q); generalize (sqr_poss m H0p); intros Hneqn Hneqm; elim (neq_1 u v m n Hneqn Hneqm H12 H13); intros Hu1 Hv1; generalize (Zodd_0 _ H15); intro; generalize (Zodd_0 _ H14); intro; cut (1 < u); auto with zarith; intro; cut (1 < v); auto with zarith; intro; auto with zarith; intros; apply Zle_square_simpl; auto with zarith.",
            "VernacExtend",
            "b6602bae8b352ffecef2943435672e808f627775"
        ],
        [
            "auto with zarith.",
            "VernacExtend",
            "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
        ],
        [
            "auto with zarith.",
            "VernacExtend",
            "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma diophantus20_refined : forall p q : Z, p > 0 -> q > 0 -> p <= q -> rel_prime p q -> distinct_parity p q -> ~ is_sqr (p * (q * (q * q - p * p))).",
            "VernacStartTheoremProof",
            "d8d41e3ad87a24053c724d1e94d08ac0f810fb46"
        ],
        [
            "intros p0 q0 Hp0 Hq0 H' H0' H1' H2'.",
            "VernacExtend",
            "666bf4ba13d8f6e41cf51d3a96e6dacb9fd8df39"
        ],
        [
            "cut (0 <= p0).",
            "VernacExtend",
            "e6b1960a453e5e45c71afee11d8be05a03a15bae"
        ],
        [
            "intro; cut (0 <= q0).",
            "VernacExtend",
            "cb4232f523631a362c8a01d163b93be724301252"
        ],
        [
            "intro; elim (prop4b _ _ H H0 H' H0' H2').",
            "VernacExtend",
            "5a7d7ffc3db0db143bdd338f05f872061ac86b83"
        ],
        [
            "intros; elim H2; clear H2; intros; unfold is_sqr in H3; elim H3; clear H3; intros; do 2 (elim H4; clear H4; intros); unfold is_sqr in H1; unfold is_sqr in H2; elim H1; clear H1; intros; elim H2; clear H2; intros; elim H6; clear H6; intros; elim H7; clear H7; intros; elim H6; clear H6; intros; elim H7; clear H7; intros; apply (diophantus20_equiv x0 x1).",
            "VernacExtend",
            "d31956b853b32215602cb16e033e1cb2dd2cbe5f"
        ],
        [
            "cut (p0 <> 0); auto with zarith; intro; rewrite <- H6 in H10; elim (Zmult_neq_0 _ _ H10); auto with zarith.",
            "VernacExtend",
            "d5d40b3f14a8f64a5ab8a8dada1cc547039e688e"
        ],
        [
            "cut (q0 <> 0); auto with zarith; intro; rewrite <- H7 in H10; elim (Zmult_neq_0 _ _ H10); auto with zarith.",
            "VernacExtend",
            "b84cb71d50a17335025c5d510d957a38e8b8aa51"
        ],
        [
            "rewrite <- H6 in H'; rewrite <- H7 in H'; apply Zle_square_simpl; auto.",
            "VernacExtend",
            "9e5e13448955471754774cfa8b8473b27a225624"
        ],
        [
            "apply prop3; rewrite H6; rewrite H7; assumption.",
            "VernacExtend",
            "61e0505a6ffb0e9d31e12af80fbd47ce6ca01fae"
        ],
        [
            "apply distp_sqr2; rewrite H6; rewrite H7; assumption.",
            "VernacExtend",
            "1071652bdcc0e27679269f59de9a61776d582802"
        ],
        [
            "unfold is_sqr; split.",
            "VernacExtend",
            "163c4ca7123121494af0f9ee22bb2fdccc300d7d"
        ],
        [
            "rewrite H6; rewrite H7; replace ((q0 + p0) * (q0 - p0)) with (q0 * q0 - p0 * p0).",
            "VernacExtend",
            "2a5a114f580268cf44d7f73340ecc850b80137db"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "split with x; rewrite H6; rewrite H7; split.",
            "VernacExtend",
            "2e3c56d5260969eed215f6d6a69d8bfc1ff54875"
        ],
        [
            "rewrite H4; ring.",
            "VernacExtend",
            "62c5413e214abfd28507e4d6aaf43be37784f21f"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "auto with zarith.",
            "VernacExtend",
            "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
        ],
        [
            "auto with zarith.",
            "VernacExtend",
            "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma diophantus20 : ~ (exists x : Z, exists y : Z, exists z : Z, exists t : Z, 0 < x /\\ 0 < y /\\ 0 < z /\\ 0 < t /\\ x * x + y * y = z * z /\\ x * y = 2 * (t * t)).",
            "VernacStartTheoremProof",
            "0542d68a55c430f46fc2dc64e0fe06d3296451dd"
        ],
        [
            "intro; elim_hyps; cut (is_pytha x x0 x1); try (unfold is_pytha, pos_triple; solve [ intuition ]).",
            "VernacExtend",
            "27ae31a25a1eb0eadda0c60afc9caf6d339d74c5"
        ],
        [
            "intro; elim (pytha_thm1 _ _ _ H5); clear H5; unfold cond_pq, cond_pqb; intros; elim_hyps; (cut (x3 > 0); [ intro; apply (diophantus20_refined x3 x4); try assumption; generalize (Zge_le _ _ H8); intro; (cut (x5 > 0); [ intro; apply (is_sqr_compat x5); auto with zarith; repeat progress (apply Zmult_le_0_compat; auto with zarith); split; [ repeat progress (apply Zmult_le_0_compat; auto with zarith) | exists x2; intuition; rewrite H5 in H4; rewrite H13 in H4; match goal with | id : ?x = 2 * _ |- _ => replace x with (2 * (x5 * x5 * (x3 * (x4 * (x4 * x4 - x3 * x3))))) in id end; [ auto with zarith | ring ] ] | apply Zlt_gt; apply (Zmult_lt_0_reg_r (x3 * x3 + x4 * x4)); try (apply Zgt_lt; progress auto with zarith); rewrite <- H6; auto ]) | match goal with | id : ?x = 2 * _ * (_ * _) |- _ => cut (x <> 0); auto with zarith; intro; match goal with | id' : _ |- _ => rewrite id in id' end end; repeat match goal with | id : _ |- _ => elim (Zmult_neq_0 _ _ id); auto with zarith; intros end ]).",
            "VernacExtend",
            "2e29a61feea7685a4cb67121bcb87a8ede877ec8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "multiple4_2",
            "line_nb": 2,
            "steps": [
                {
                    "command": [
                        "intros; elim (Zodd_mult u v H0 H); intros; elim H5; clear H5; intros; elim_hyps; split with (x,x0); intuition; cut (u <> 1); auto with zarith; intro; cut (u <> -1); auto with zarith; intro.",
                        "VernacExtend",
                        "9ad64e546f69cdb09453bece748ba03a8b69a0de"
                    ]
                },
                {
                    "command": [
                        "apply (Zmult_lt_0_reg_r 4 x); auto with zarith; rewrite Zmult_comm; rewrite <- H5; generalize (relp_neq _ _ H7 H8 H2); auto with zarith.",
                        "VernacExtend",
                        "feeb367981ab8cd888dc1aecf36561ffc9ab790e"
                    ]
                },
                {
                    "command": [
                        "apply (gcd2_rel_prime (u - v) (u + v) x x0); auto; apply gcd2_relp_odd; auto.",
                        "VernacExtend",
                        "6d6a7af5d41ebb99ee59de1df21559ac97855acf"
                    ]
                },
                {
                    "command": [
                        "apply (Zmult_lt_0_reg_r 2 x0); auto with zarith; rewrite Zmult_comm; rewrite <- H5; generalize (relp_neq _ _ H7 H8 H2); auto with zarith.",
                        "VernacExtend",
                        "bb9dbff44589a3d949e5d99301b8fc85f42cd5cf"
                    ]
                },
                {
                    "command": [
                        "apply (gcd2_rel_prime (u + v) (u - v) x x0); auto; apply Zis_gcd_sym; apply gcd2_relp_odd; auto.",
                        "VernacExtend",
                        "3569590a95d4eede0ce0bc61603dc85427fd6be7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "for_exists_ab",
            "line_nb": 9,
            "steps": [
                {
                    "command": [
                        "intros u v m n Huv H H0 H1 H2 H3 H4 H5; elim (multiple4_2 u v H3 H4 Huv H5 H1 H2); intro; elim x; intros; elim_hyps; (cut (is_sqr (a * b)); [ intro Hab; elim (prop4 a b (Zlt_le_weak 0 a H7) (Zlt_le_weak 0 b H8) H9 Hab); intros; elim H11; intros Ha H11'; elim H11'; clear H11'; intros a0 H11'; elim H11'; clear H11'; intros H11' Ha0; elim H12; intros Hb H12'; elim H12'; clear H12'; intros b0 H12'; elim H12'; clear H12'; intros H12' Hb0; split with (a0,b0); intuition; [ rewrite <- H11' in H7; generalize (sqr_poss a0 H7); intro; auto with zarith | rewrite <- H12' in H8; generalize (sqr_poss b0 H8); intro; auto with zarith ] | apply (is_sqr_compat 2); try discriminate; replace (2 * 2 * (a * b)) with (m * m); [ apply is_sqr_sqr | apply (Zmult_eq_reg_l 2); try discriminate; replace (2 * (m * m)) with ((u * u) - (v * v)); [ replace (u * u - v * v) with ((u - v) * (u + v)); [ rewrite H6; rewrite H10; ring | ring ] | replace (2 * (m * m)) with ((m * m + n * n) - (n * n - m * m)); [ rewrite H; rewrite H0; ring | ring ] ] ] ]).",
                        "VernacExtend",
                        "e5e4d64012e4d2d3584ee379e76f5d6f60ee081b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "for_mba_pytha1",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "intros; cut (2 * n * n = u * u + v * v).",
                        "VernacExtend",
                        "137cdd5fac82a914c8a7a549d17a9ab893b0d789"
                    ]
                },
                {
                    "command": [
                        "intro; cut (u = 2 * a * a + b * b).",
                        "VernacExtend",
                        "34109d22ed7f15dafe8c908eb35bdd439ff551b0"
                    ]
                },
                {
                    "command": [
                        "intro; cut (v = b * b - 2 * a * a).",
                        "VernacExtend",
                        "7f45ecb91dc48959587b06b00f795a9f987ddb9b"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite H4 in H3; rewrite H5 in H3; symmetry; apply (Zmult_eq_reg_l 2).",
                        "VernacExtend",
                        "ab691a2cce27e27c4db3e2919185b5cdd9caa119"
                    ]
                },
                {
                    "command": [
                        "replace (2 * (n * n)) with (2 * n * n); [ rewrite H3; ring | ring ].",
                        "VernacExtend",
                        "0d76f73927bc4c67a95f55b1ffb260493735d170"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "apply (Zmult_eq_reg_l 2).",
                        "VernacExtend",
                        "4dcd0be739147f37966fa7ecd37c48f4f133902d"
                    ]
                },
                {
                    "command": [
                        "replace (2 * v) with (u + v - (u - v)); [ rewrite H2; rewrite H1; ring | ring ].",
                        "VernacExtend",
                        "5ed8cf27a32f40cee7214814c17f4823f60a8095"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "apply (Zmult_eq_reg_l 2).",
                        "VernacExtend",
                        "4dcd0be739147f37966fa7ecd37c48f4f133902d"
                    ]
                },
                {
                    "command": [
                        "replace (2 * u) with (u + v + (u - v)); [ rewrite H2; rewrite H1; ring | ring ].",
                        "VernacExtend",
                        "bdc4dc690d30da933cf54bc028baa0563a762524"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "replace (2 * n * n) with (m * m + n * n + (n * n - m * m)); [ rewrite H; rewrite H0; ring | ring ].",
                        "VernacExtend",
                        "d860e833fad8074e302c29b74f911ec11e2e2ded"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "for_mba_pytha2",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "intros; cut (2 * n * n = u * u + v * v).",
                        "VernacExtend",
                        "137cdd5fac82a914c8a7a549d17a9ab893b0d789"
                    ]
                },
                {
                    "command": [
                        "intro; cut (u = 2 * a * a + b * b).",
                        "VernacExtend",
                        "34109d22ed7f15dafe8c908eb35bdd439ff551b0"
                    ]
                },
                {
                    "command": [
                        "intro; cut (v = 2 * a * a - b * b).",
                        "VernacExtend",
                        "a85fc03cfa3a49b24342d70a76e5dfc96b6bb041"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite H4 in H3; rewrite H5 in H3; symmetry; apply (Zmult_eq_reg_l 2).",
                        "VernacExtend",
                        "ab691a2cce27e27c4db3e2919185b5cdd9caa119"
                    ]
                },
                {
                    "command": [
                        "replace (2 * (n * n)) with (2 * n * n); [ rewrite H3; ring | ring ].",
                        "VernacExtend",
                        "0d76f73927bc4c67a95f55b1ffb260493735d170"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "apply (Zmult_eq_reg_l 2).",
                        "VernacExtend",
                        "4dcd0be739147f37966fa7ecd37c48f4f133902d"
                    ]
                },
                {
                    "command": [
                        "replace (2 * v) with (u + v - (u - v)); [ rewrite H2; rewrite H1; ring | ring ].",
                        "VernacExtend",
                        "5ed8cf27a32f40cee7214814c17f4823f60a8095"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "apply (Zmult_eq_reg_l 2).",
                        "VernacExtend",
                        "4dcd0be739147f37966fa7ecd37c48f4f133902d"
                    ]
                },
                {
                    "command": [
                        "replace (2 * u) with (u + v + (u - v)); [ rewrite H2; rewrite H1; ring | ring ].",
                        "VernacExtend",
                        "bdc4dc690d30da933cf54bc028baa0563a762524"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "replace (2 * n * n) with (m * m + n * n + (n * n - m * m)); [ rewrite H; rewrite H0; ring | ring ].",
                        "VernacExtend",
                        "d860e833fad8074e302c29b74f911ec11e2e2ded"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "diophantus20_equiv",
            "line_nb": 42,
            "steps": [
                {
                    "command": [
                        "intros y z Hy Hz H' H0' H1' H2'; generalize (infinite_descent (fun p q : Z => 0 < p /\\ 0 < q /\\ p <= q /\\ rel_prime p q /\\ distinct_parity p q /\\ is_sqr (p * (q * (q * q - p * p))))).",
                        "VernacExtend",
                        "43f8a4d54a8ab5461c005c6ba372ef62def06b93"
                    ]
                },
                {
                    "command": [
                        "intro H3; cut (forall x1 x2 : Z, 0 <= x1 -> 0 <= x2 -> 0 < x1 /\\ 0 < x2 /\\ x1 <= x2 /\\ rel_prime x1 x2 /\\ distinct_parity x1 x2 /\\ is_sqr (x1 * (x2 * (x2 * x2 - x1 * x1))) -> exists y1 : Z, exists y2 : Z, 0 <= y1 /\\ 0 <= y2 /\\ y1 + y2 < x1 + x2 /\\ 0 < y1 /\\ 0 < y2 /\\ y1 <= y2 /\\ rel_prime y1 y2 /\\ distinct_parity y1 y2 /\\ is_sqr (y1 * (y2 * (y2 * y2 - y1 * y1)))).",
                        "VernacExtend",
                        "c07bb13311ce3b897c533d8175c4511300999f4d"
                    ]
                },
                {
                    "command": [
                        "intro H4; apply (H3 H4) with (y * y) (z * z); try (apply Zge_le; apply sqr_pos).",
                        "VernacExtend",
                        "860f11591a504af4ffea172ade7510e159fe8980"
                    ]
                },
                {
                    "command": [
                        "intuition; try (apply Zgt_lt; apply sqr_spos; auto with zarith).",
                        "VernacExtend",
                        "d138d2b0947a8a9d0c66903200177928ef86d4d1"
                    ]
                },
                {
                    "command": [
                        "cut (y >= 0); auto with zarith.",
                        "VernacExtend",
                        "38036092989bb72b5a450fc3b57cee041708e717"
                    ]
                },
                {
                    "command": [
                        "apply (prop2 y z H0').",
                        "VernacExtend",
                        "9accd2f1a64e95f180188e9d20c457aaf7a3258c"
                    ]
                },
                {
                    "command": [
                        "apply (distp_sqr1 _ _ H1').",
                        "VernacExtend",
                        "8735aef38bcf25c9a2b3e59785435bde0a113672"
                    ]
                },
                {
                    "command": [
                        "apply is_sqr_mult.",
                        "VernacExtend",
                        "3f841090cb7260b9ce8daad34da9dde5f3f3d43c"
                    ]
                },
                {
                    "command": [
                        "apply is_sqr_sqr.",
                        "VernacExtend",
                        "b3d878d3ed4ce8b4bb3c074f2a799d0d1b0d24a2"
                    ]
                },
                {
                    "command": [
                        "apply is_sqr_mult.",
                        "VernacExtend",
                        "3f841090cb7260b9ce8daad34da9dde5f3f3d43c"
                    ]
                },
                {
                    "command": [
                        "apply is_sqr_sqr.",
                        "VernacExtend",
                        "b3d878d3ed4ce8b4bb3c074f2a799d0d1b0d24a2"
                    ]
                },
                {
                    "command": [
                        "replace (z * z * (z * z) - y * y * (y * y)) with ((z * z + y * y) * (z * z - y * y)); [assumption | ring ].",
                        "VernacExtend",
                        "0da1213b2efd89132b637f28386b34d51f7781a2"
                    ]
                },
                {
                    "command": [
                        "clear H3; intros p q Hp Hq H; elim H; clear H; intros H0p H; elim H; clear H; intros H0q H; elim H; clear H; intros H H0; elim H0; clear H0; intros H0 H1; elim H1; clear H1; intros H1 H2.",
                        "VernacExtend",
                        "826491724aeff36dc846e0ec890b90d5c5000a68"
                    ]
                },
                {
                    "command": [
                        "elim (prop4b _ _ Hp Hq H H0 H2); intros H3 H4; elim H4; clear H4; intros H4 H5; elim H3; intros Hpp H3p; elim H3p; intros m H3'; elim H4; intros Hqq H4q; elim H4q; intros n H4'; elim H5; intros Hpq2 H5pq; elim H5pq; intros r H5'; elim H3'; clear H3'; intros H3' Hm; elim H4'; clear H4'; intros H4' Hn; elim H5'; clear H5'; intros H5' Hr; generalize H5'; rewrite <- H3'; rewrite <- H4'; replace (n * n * (n * n) - m * m * (m * m)) with ((m * m + n * n) * (n * n - m * m)).",
                        "VernacExtend",
                        "113a68a6c013b1a6e37c4288092fded1da012f2c"
                    ]
                },
                {
                    "command": [
                        "intro; elim (distp_odd _ _ H1); rewrite <- H3'; rewrite <- H4'; intros; symmetry in H3'; symmetry in H4'; cut (rel_prime (m * m) (n * n)); try (rewrite <- H3'; rewrite <- H4'; assumption); intro; generalize (prop3 _ _ H8); clear H8; intro; generalize (prop1 _ _ H0 H1); rewrite H3'; rewrite H4'.",
                        "VernacExtend",
                        "6861772ffdb6be42447cca650dd8ff821e255292"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite <- H5' in H5; rewrite H5'0 in H5; cut (0 <= m * m + n * n).",
                        "VernacExtend",
                        "37e73e998d3d8c47805c7737458b8efd21718141"
                    ]
                },
                {
                    "command": [
                        "cut (0 <= n * n - m * m).",
                        "VernacExtend",
                        "68d0780f37ba9a6b8559d76a4e11b2f6fc7ae1f8"
                    ]
                },
                {
                    "command": [
                        "intros Hmn2 Hmn2'; elim (prop4 (m * m + n * n) (n * n - m * m) Hmn2' Hmn2 H9 H5); intros; elim H10; intros Hmn21 Hmn22; clear Hmn21; elim Hmn22; intros u H12; elim H11; intros Hmn21' Hmn22'; clear Hmn21'; elim Hmn22'; intros v H13; elim H12; clear H12; intros H12 Hu; elim H13; clear H13; intros H13 Hv; generalize H6 H7 H9; rewrite <- H12; rewrite <- H13; intros H6' H7' H9'; intros; generalize (Zodd_sqr2 _ H6'); generalize (Zodd_sqr2 _ H7'); intros; generalize (prop3 u v H9'); intro; cut (exists two : Z * Z, let (a, b) := two in (u - v = 4 * (a * a) /\\ u + v = 2 * (b * b) \\/ u - v = 2 * (b * b) /\\ u + v = 4 * (a * a)) /\\ 0 < a /\\ 0 < b).",
                        "VernacExtend",
                        "ac2bf229b98972620cdb5deefeb838f750811ec6"
                    ]
                },
                {
                    "command": [
                        "intro; elim H17; clear H17; intro x; elim x; clear x; intros a b H17; elim H17; clear H17; intros; elim H18; clear H18; intros Ha Hb; cut (is_pytha (b * b) (2 * (a * a)) n); [ intro H19; cut (Zodd (b * b)); [ intro Hodd; generalize (pytha_thm3 _ _ _ H19 Hodd); clear Hodd H19; intro H19; elim H19; clear H19; unfold cond_pq, cond_pqb; intro p'; intro H19; elim H19; clear H19; intro q'; intro H19; elim H19; clear H19; intro k'; intro H19; elim H19; clear H19; intro H21; intro H19; elim H19; clear H19; intro H22; intro H19; elim H19; clear H19; intro H23; intro H19; elim H19; clear H19; intro H20; intro H19; elim H19; clear H19; intro H19; intro H25; elim H19; clear H19; intro Hp'; intro H19; elim H19; clear H19; intro Hq'; intro H19; elim H19; clear H19; intros Hpq' H24 | elim H17; clear H17; intro H17; elim H17; clear H17; intros H17 H18; cut (u = b * b + 2 * (a * a)); auto with zarith; intro; rewrite H20 in H15; apply Zodd_sum3 with (b := a * a); assumption ] | unfold is_pytha, pos_triple; intuition; (apply Zle_ge; apply sqr_2) || (apply (for_mba_pytha1 m n u v a b); assumption) || (apply (for_mba_pytha2 m n u v a b); assumption) ].",
                        "VernacExtend",
                        "4bb1b67a0f5d1fea9c47c7b44282a22400d43c82"
                    ]
                },
                {
                    "command": [
                        "cut (k' = 1).",
                        "VernacExtend",
                        "ae207960b99869e537157064fd2c3fefeb5060ab"
                    ]
                },
                {
                    "command": [
                        "intro Hk'; generalize H21 H22 H23; clear H21 H22 H23; rewrite Hk'; ring_simplify q' p' (1 * (p' * p' + q' * q')) (1 * (p' * q')); intros; cut (0 <= p'); auto with zarith; cut (0 <= q'); auto with zarith; intros Hq'4 Hp'4; elim (prop4 p' q' Hp'4 Hq'4 H24).",
                        "VernacExtend",
                        "835382880ecc89510bb82ccbebb5568d433e6e51"
                    ]
                },
                {
                    "command": [
                        "intros; generalize (prop1 _ _ H24 H25); intro; elim (prop4 (p' + q') (q' - p')); auto with zarith.",
                        "VernacExtend",
                        "1f7c83e0555fe3a8f4a97de3723b3305553ca481"
                    ]
                },
                {
                    "command": [
                        "intros; elim H18; rename H18 into H18'; intros Hpp' H18; clear Hpp'; elim H18; clear H18; intros n' H18; elim H18; clear H18; intros H18 Hn'; elim H19; rename H19 into H19'; intros Hpp' H19; elim H19; clear H19; intros m' H19; elim H19; clear H19; intros H19 Hm'; cut (m' * m' + n' * n' < m * m + n * n).",
                        "VernacExtend",
                        "75bb9b4c2c250f64e0e22b01d59740808660bf27"
                    ]
                },
                {
                    "command": [
                        "intro; split with (n' * n'); split with (m' * m'); repeat (match goal with | |- _ /\\ _ => split end); auto with zarith; try (rewrite H18; replace (2 * 1 * (p' * q')) with (2 * (p' * q')) in H22; try ring; cut (2 <> 0); try discriminate; intro h2; generalize (Zmult_eq_reg_l 2 (a * a) (p' * q') H22 h2); intro; apply (Zmult_lt_0_reg_r q'); auto with zarith; rewrite <- H30; apply Zmult_lt_O_compat; assumption); rewrite H18; rewrite H19; assumption || (repeat apply is_sqr_mult; try assumption; replace (q' * q' - p' * p') with ((p' + q') * (q' - p')); try ring; apply is_sqr_mult; assumption).",
                        "VernacExtend",
                        "a5805c753bce00f1138199100c455a65f1b037e4"
                    ]
                },
                {
                    "command": [
                        "rewrite H19; rewrite H18; rewrite H23.",
                        "VernacExtend",
                        "06dd137e82add3a46a266262c4ab783334989b1c"
                    ]
                },
                {
                    "command": [
                        "apply (Zlt_le_trans (q' + p') (q' ^2 + p' ^2) (m * m + (q' ^2 + p' ^2) * (q' ^2 + p' ^2))).",
                        "VernacExtend",
                        "446d425887954c71042804e9ab7f87f0aeb9ceb0"
                    ]
                },
                {
                    "command": [
                        "generalize (Zlt_not_eq _ a Ha); intro Han0.",
                        "VernacExtend",
                        "95eccf9ae6421baa81d200a606b28828daa2c52b"
                    ]
                },
                {
                    "command": [
                        "generalize (Zgt_lt q' _ Hq'); intro Hq'g.",
                        "VernacExtend",
                        "5bf45c4ca1524903c525e17f36749e8f241b4935"
                    ]
                },
                {
                    "command": [
                        "generalize (Zlt_not_eq _ q' Hq'g); intro Hqn0.",
                        "VernacExtend",
                        "d82268ec21a687a9a8e0b0c215d2c6c42a536e4f"
                    ]
                },
                {
                    "command": [
                        "replace (q' + p') with (p' + q'); try ring; replace (q' ^2 + p' ^2) with (p' * p' + q' * q'); try ring.",
                        "VernacExtend",
                        "d1725852f16058d5f0ef51c8b746c11d2e27512b"
                    ]
                },
                {
                    "command": [
                        "cut (p' <> 0); try (intro; cut (q' <> 0); progress auto with zarith).",
                        "VernacExtend",
                        "a741e2d4002cd777125c07bba4af47b80fb8f8a8"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite H29 in H22; replace (2 * 1 * (0 * q')) with 0 in H22.",
                        "VernacExtend",
                        "8f1f7045d91e2a3b05c3335fd42b304aac110de1"
                    ]
                },
                {
                    "command": [
                        "apply Han0; symmetry; apply sqr_0; auto with zarith.",
                        "VernacExtend",
                        "ad2b9d4cbcb01cb75bebdbdf552276a7b07c95ff"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "apply (Zle_trans (q' ^2 + p' ^2) ((q' ^2 + p' ^2) * (q' ^2 + p' ^2)) (m * m + (q' ^2 + p' ^2) * (q' ^2 + p' ^2))); auto with zarith.",
                        "VernacExtend",
                        "2fb9d839ce6299d906a98d2319daa7673448947e"
                    ]
                },
                {
                    "command": [
                        "apply sqr_le.",
                        "VernacExtend",
                        "597f9524e62f73cdbfd54ec3f4c997c7617c4bf8"
                    ]
                },
                {
                    "command": [
                        "replace ((p' + q') * (q' - p')) with (q' * q' - p' * p'); try ring; generalize H21; replace (1 * (q' * q' - p' * p')) with (q' * q' - p' * p'); try ring; clear H21; intro H21; rewrite <- H21; generalize sqr_pos; intro.",
                        "VernacExtend",
                        "4a894173b7136eb6869ac0e4f9ad12720b30ed49"
                    ]
                },
                {
                    "command": [
                        "apply is_sqr_sqr.",
                        "VernacExtend",
                        "b3d878d3ed4ce8b4bb3c074f2a799d0d1b0d24a2"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Zmult_le_0_compat; assumption.",
                        "VernacExtend",
                        "511f333da0c97e40ae9212c6f96d5b255859ce23"
                    ]
                },
                {
                    "command": [
                        "split with a; split; auto with zarith.",
                        "VernacExtend",
                        "63cfb6b8575d6abc060851f7b63c245a2e8fc3b3"
                    ]
                },
                {
                    "command": [
                        "apply (relp_mult1 (b * b) (2 * (a * a)) (q' * q' - p' * p') (2 * (p' * q')) k'); auto with zarith.",
                        "VernacExtend",
                        "08255a865811a59ca91275d28a380c8732169e5d"
                    ]
                },
                {
                    "command": [
                        "generalize (distp_neq _ _ H25); intro Hneq; generalize (Zge_le _ _ Hp'); clear Hp'; intro Hp'; cut (p' < q'); auto with zarith.",
                        "VernacExtend",
                        "b636fa914a558bdb0ea751bf7f9ea801fa831af1"
                    ]
                },
                {
                    "command": [
                        "rewrite H22; ring.",
                        "VernacExtend",
                        "d4990c585fdccbfd3d0f93cb1287cc7dbc9ecc9d"
                    ]
                },
                {
                    "command": [
                        "apply (relp_sum (b * b) (2 * (a * a))).",
                        "VernacExtend",
                        "ccbf2235f21e955a15c40c24c5c8d707be4e410b"
                    ]
                },
                {
                    "command": [
                        "elim H17; clear H17; intro H17; elim H17; clear H17; intros H18 H19.",
                        "VernacExtend",
                        "a10a54279696e0b97e41bb56c4c4cd5790ec3507"
                    ]
                },
                {
                    "command": [
                        "cut (v = b * b - 2 * (a * a)).",
                        "VernacExtend",
                        "e6d71eca31e9f2bdb776c7114b4a1bdde7000c73"
                    ]
                },
                {
                    "command": [
                        "intro; cut (u = b * b + 2 * (a * a)).",
                        "VernacExtend",
                        "6ac0918e50d54b937b78c4f40ef2373367f5b458"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite <- H17; rewrite <- H26; auto.",
                        "VernacExtend",
                        "35b83918c672b707869f19590242e5fc4e61a30a"
                    ]
                },
                {
                    "command": [
                        "apply (Zmult_eq_reg_l 2 u (b * b + 2 * (a * a))).",
                        "VernacExtend",
                        "41d295860d7f9ecaa1f2b57d77ae016371866677"
                    ]
                },
                {
                    "command": [
                        "replace (2 * u) with ((u + v) + (u - v)); [ rewrite H18; rewrite H19; ring | ring ].",
                        "VernacExtend",
                        "f79a99427e7fdf54aacb13d0de22a55efc962e04"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "apply (Zmult_eq_reg_l 2 v (b * b - 2 * (a * a))).",
                        "VernacExtend",
                        "edf7214564495b60d71e8c3c92ac8f004708b708"
                    ]
                },
                {
                    "command": [
                        "replace (2 * v) with ((u + v) - (u - v)); [ rewrite H18; rewrite H19; ring | ring ].",
                        "VernacExtend",
                        "898d6e6789707990b3b124f4ba4ade3b28ef3536"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "cut ((-v) = b * b - 2 * (a * a)).",
                        "VernacExtend",
                        "9fd66b1468c989e17dd7e61fe6a34a16762931d2"
                    ]
                },
                {
                    "command": [
                        "intro; cut (u = b * b + 2 * (a * a)).",
                        "VernacExtend",
                        "6ac0918e50d54b937b78c4f40ef2373367f5b458"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite <- H17; rewrite <- H26.",
                        "VernacExtend",
                        "7965d97b8e00ac51ede3d37f02497d590c147d62"
                    ]
                },
                {
                    "command": [
                        "apply rel_prime_oppr; auto.",
                        "VernacExtend",
                        "6e8aaf257af2d27c904145742cf9ea421f118dcd"
                    ]
                },
                {
                    "command": [
                        "apply (Zmult_eq_reg_l 2 u (b * b + 2 * (a * a))).",
                        "VernacExtend",
                        "41d295860d7f9ecaa1f2b57d77ae016371866677"
                    ]
                },
                {
                    "command": [
                        "replace (2 * u) with ((u + v) + (u - v)); [ rewrite H18; rewrite H19; ring | ring ].",
                        "VernacExtend",
                        "f79a99427e7fdf54aacb13d0de22a55efc962e04"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "apply (Zmult_eq_reg_l 2 (-v) (b * b - 2 * (a * a))).",
                        "VernacExtend",
                        "0435e1c86a3b550d0998aa8823326321c7c43a3f"
                    ]
                },
                {
                    "command": [
                        "replace (2 * (-v)) with ((u - v) - (u + v)); [ rewrite H18; rewrite H19; ring | ring ].",
                        "VernacExtend",
                        "9efa6e32b00a0c144fa96dfa9d327f6610369754"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "apply (for_exists_ab u v m n); try assumption; rewrite H3' in H0p; rewrite H4' in H0q; generalize (sqr_poss n H0q); generalize (sqr_poss m H0p); intros Hneqn Hneqm; elim (neq_1 u v m n Hneqn Hneqm H12 H13); intros Hu1 Hv1; generalize (Zodd_0 _ H15); intro; generalize (Zodd_0 _ H14); intro; cut (1 < u); auto with zarith; intro; cut (1 < v); auto with zarith; intro; auto with zarith; intros; apply Zle_square_simpl; auto with zarith.",
                        "VernacExtend",
                        "b6602bae8b352ffecef2943435672e808f627775"
                    ]
                },
                {
                    "command": [
                        "auto with zarith.",
                        "VernacExtend",
                        "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
                    ]
                },
                {
                    "command": [
                        "auto with zarith.",
                        "VernacExtend",
                        "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "diophantus20_refined",
            "line_nb": 113,
            "steps": [
                {
                    "command": [
                        "intros p0 q0 Hp0 Hq0 H' H0' H1' H2'.",
                        "VernacExtend",
                        "666bf4ba13d8f6e41cf51d3a96e6dacb9fd8df39"
                    ]
                },
                {
                    "command": [
                        "cut (0 <= p0).",
                        "VernacExtend",
                        "e6b1960a453e5e45c71afee11d8be05a03a15bae"
                    ]
                },
                {
                    "command": [
                        "intro; cut (0 <= q0).",
                        "VernacExtend",
                        "cb4232f523631a362c8a01d163b93be724301252"
                    ]
                },
                {
                    "command": [
                        "intro; elim (prop4b _ _ H H0 H' H0' H2').",
                        "VernacExtend",
                        "5a7d7ffc3db0db143bdd338f05f872061ac86b83"
                    ]
                },
                {
                    "command": [
                        "intros; elim H2; clear H2; intros; unfold is_sqr in H3; elim H3; clear H3; intros; do 2 (elim H4; clear H4; intros); unfold is_sqr in H1; unfold is_sqr in H2; elim H1; clear H1; intros; elim H2; clear H2; intros; elim H6; clear H6; intros; elim H7; clear H7; intros; elim H6; clear H6; intros; elim H7; clear H7; intros; apply (diophantus20_equiv x0 x1).",
                        "VernacExtend",
                        "d31956b853b32215602cb16e033e1cb2dd2cbe5f"
                    ]
                },
                {
                    "command": [
                        "cut (p0 <> 0); auto with zarith; intro; rewrite <- H6 in H10; elim (Zmult_neq_0 _ _ H10); auto with zarith.",
                        "VernacExtend",
                        "d5d40b3f14a8f64a5ab8a8dada1cc547039e688e"
                    ]
                },
                {
                    "command": [
                        "cut (q0 <> 0); auto with zarith; intro; rewrite <- H7 in H10; elim (Zmult_neq_0 _ _ H10); auto with zarith.",
                        "VernacExtend",
                        "b84cb71d50a17335025c5d510d957a38e8b8aa51"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H6 in H'; rewrite <- H7 in H'; apply Zle_square_simpl; auto.",
                        "VernacExtend",
                        "9e5e13448955471754774cfa8b8473b27a225624"
                    ]
                },
                {
                    "command": [
                        "apply prop3; rewrite H6; rewrite H7; assumption.",
                        "VernacExtend",
                        "61e0505a6ffb0e9d31e12af80fbd47ce6ca01fae"
                    ]
                },
                {
                    "command": [
                        "apply distp_sqr2; rewrite H6; rewrite H7; assumption.",
                        "VernacExtend",
                        "1071652bdcc0e27679269f59de9a61776d582802"
                    ]
                },
                {
                    "command": [
                        "unfold is_sqr; split.",
                        "VernacExtend",
                        "163c4ca7123121494af0f9ee22bb2fdccc300d7d"
                    ]
                },
                {
                    "command": [
                        "rewrite H6; rewrite H7; replace ((q0 + p0) * (q0 - p0)) with (q0 * q0 - p0 * p0).",
                        "VernacExtend",
                        "2a5a114f580268cf44d7f73340ecc850b80137db"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "split with x; rewrite H6; rewrite H7; split.",
                        "VernacExtend",
                        "2e3c56d5260969eed215f6d6a69d8bfc1ff54875"
                    ]
                },
                {
                    "command": [
                        "rewrite H4; ring.",
                        "VernacExtend",
                        "62c5413e214abfd28507e4d6aaf43be37784f21f"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "auto with zarith.",
                        "VernacExtend",
                        "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
                    ]
                },
                {
                    "command": [
                        "auto with zarith.",
                        "VernacExtend",
                        "23f42fd3236dcece4a40b3a666dce57fea69a9c0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "diophantus20",
            "line_nb": 134,
            "steps": [
                {
                    "command": [
                        "intro; elim_hyps; cut (is_pytha x x0 x1); try (unfold is_pytha, pos_triple; solve [ intuition ]).",
                        "VernacExtend",
                        "27ae31a25a1eb0eadda0c60afc9caf6d339d74c5"
                    ]
                },
                {
                    "command": [
                        "intro; elim (pytha_thm1 _ _ _ H5); clear H5; unfold cond_pq, cond_pqb; intros; elim_hyps; (cut (x3 > 0); [ intro; apply (diophantus20_refined x3 x4); try assumption; generalize (Zge_le _ _ H8); intro; (cut (x5 > 0); [ intro; apply (is_sqr_compat x5); auto with zarith; repeat progress (apply Zmult_le_0_compat; auto with zarith); split; [ repeat progress (apply Zmult_le_0_compat; auto with zarith) | exists x2; intuition; rewrite H5 in H4; rewrite H13 in H4; match goal with | id : ?x = 2 * _ |- _ => replace x with (2 * (x5 * x5 * (x3 * (x4 * (x4 * x4 - x3 * x3))))) in id end; [ auto with zarith | ring ] ] | apply Zlt_gt; apply (Zmult_lt_0_reg_r (x3 * x3 + x4 * x4)); try (apply Zgt_lt; progress auto with zarith); rewrite <- H6; auto ]) | match goal with | id : ?x = 2 * _ * (_ * _) |- _ => cut (x <> 0); auto with zarith; intro; match goal with | id' : _ |- _ => rewrite id in id' end end; repeat match goal with | id : _ |- _ => elim (Zmult_neq_0 _ _ id); auto with zarith; intros end ]).",
                        "VernacExtend",
                        "2e29a61feea7685a4cb67121bcb87a8ede877ec8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}