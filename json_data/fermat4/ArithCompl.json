{
    "filename": "ArithCompl.v",
    "coq_project": "fermat4",
    "vernac_cmds": [
        [
            "Require Export Wf_nat.",
            "VernacRequire",
            "287253697823c346b4d8375b73e4c5bcf429af23"
        ],
        [
            "Require Export ZArith.",
            "VernacRequire",
            "e55f3132f44691206e5b3b8ec9a74fbc1c203a27"
        ],
        [
            "Require Export Znumtheory.",
            "VernacRequire",
            "73fd8c95ef140e2d10ddabb39a75037231d62c10"
        ],
        [
            "Require Export Reals.",
            "VernacRequire",
            "c308256845bb25cabcadd813416fe220c5f7bc46"
        ],
        [
            "Open Scope Z_scope.",
            "VernacOpenCloseScope",
            "5d5d2991d98cf1203a824951a099efb9d105702f"
        ],
        [
            "Unset Standard Proposition Elimination Names.",
            "VernacUnsetOption",
            "911574cdf91989455d0d3d11c7a9b0ca10fd1ae6"
        ],
        [
            "Definition is_sqr (n : Z) : Prop := 0 <= n /\\ exists i : Z, i * i = n /\\ 0 <= i.",
            "VernacDefinition",
            "1f041aba70e83c0123d30f580e8f8328776965ce"
        ],
        [
            "Lemma is_sqr_sqr : forall n: Z, is_sqr (n * n).",
            "VernacStartTheoremProof",
            "60161d6487437e5078ee1cc46225378caf87887b"
        ],
        [
            "intro; unfold is_sqr; split; try (apply Zge_le; apply sqr_pos); elim (Z_le_dec 0 n); intro; [ exists n; auto | exists (- n); intuition; ring ].",
            "VernacExtend",
            "f6a251e7694b36a1741d2bb3be58923b159f12df"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_sqr_mult : forall p q : Z, is_sqr p -> is_sqr q -> is_sqr (p * q).",
            "VernacStartTheoremProof",
            "e156a44095e974fe5fe482bc0f76c7d3db356bac"
        ],
        [
            "unfold is_sqr; intros; elim H; clear H; intros; elim H0; clear H0; intros; elim H1; clear H1; intros; elim H1; clear H1; intros; elim H2; clear H2; intros; elim H2; clear H2; intros.",
            "VernacExtend",
            "476e63749a9d122e1d86f4794d65dc182a61d53b"
        ],
        [
            "split; [ auto with zarith | exists (x * x0); rewrite <- H1; rewrite <- H2; intuition; ring ].",
            "VernacExtend",
            "807876c7aaeed980eefacb923ccf479ec58d4297"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqr_0 : forall z : Z, z * z = 0 -> z = 0.",
            "VernacStartTheoremProof",
            "f5fb75a1d9054b2f28cc4a6d1a77f96469c6da93"
        ],
        [
            "intros; elim (Zmult_integral _ _ H); auto.",
            "VernacExtend",
            "7bf0f1ce85a0a7a0ae11f24a36436854cf8f0c7c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqr_compat : forall a b : Z, a * a = b * b -> a = b \\/ a = -b.",
            "VernacStartTheoremProof",
            "8f8a748268d7b72b37bb00603a5d896ed7b3875a"
        ],
        [
            "intros; cut (a * a - b * b = 0); auto with zarith; clear H; intro; replace (a * a - b * b) with ((a + b) * (a - b)) in H; try ring; elim (Zmult_integral _ _ H); auto with zarith.",
            "VernacExtend",
            "69581c930276b8e1b2f0d1b6e53cee7945575c8d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqr_le : forall a : Z, a <= a * a.",
            "VernacStartTheoremProof",
            "7d04c09b49897957a950983e201896c803be50cf"
        ],
        [
            "intro; elim (Z_le_dec 0 a); intro; [ elim (Z_eq_dec a 0); intro; try (rewrite a1; auto with zarith); pattern a at 1; replace a with (a * 1); try ring; apply (Zmult_le_compat a 1 a a) | generalize (sqr_pos a) ]; auto with zarith.",
            "VernacExtend",
            "e9d3b6af4fc1a3009e0bea881986d4f8ea8ae049"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqr_spos : forall z : Z, z <> 0 -> z * z > 0.",
            "VernacStartTheoremProof",
            "3e676b7622470618befa897227572769f25280e5"
        ],
        [
            "intros; elim (not_Zeq _ _ H); clear H; intro.",
            "VernacExtend",
            "5b35715b1487e55ae9f43b3a5610adafde5ae290"
        ],
        [
            "unfold Zlt in H; rewrite Zcompare_opp in H; fold (- (0) < - z) in H; simpl in H; cut (z * z = - z * - z); [ intro; rewrite H0; apply Zmult_gt_0_compat; auto with zarith | ring ].",
            "VernacExtend",
            "f076e5bce5b8097e7845af0445dfc5a46450d832"
        ],
        [
            "apply Zmult_gt_0_compat; auto with zarith.",
            "VernacExtend",
            "8c80fc2a2cd89db95ccb15ce73daf6573198204d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqr_poss : forall z : Z, 0 < z * z -> z <> 0.",
            "VernacStartTheoremProof",
            "58d23b39e12ff8b99128790c158531b5c98622cd"
        ],
        [
            "intros;intro;rewrite H0 in H;auto with zarith.",
            "VernacExtend",
            "02c1ce8936126ca25eacabc0d86207ccdaefb4bf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqr_lt : forall a : Z, a <> 0 -> a <> 1 -> a < a * a.",
            "VernacStartTheoremProof",
            "69ab93460078452e3c1a57f0a2d3e94e89cbdccd"
        ],
        [
            "intros; case (Z_le_dec 0 a); intro; [ pattern a at 1; rewrite <- Zmult_1_r; apply Zmult_lt_compat_l; auto with zarith | generalize (sqr_spos _ H); intro; auto with zarith ].",
            "VernacExtend",
            "b34caf8445d3ec1b981a9b9cf47207643f0fee53"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqr_sum : forall a b : Z, b <> 0 -> a * a + b * b <> 0.",
            "VernacStartTheoremProof",
            "4f1357464939652039bd61f5f2b40fd6178ce906"
        ],
        [
            "intros; elim (Z_eq_dec a 0).",
            "VernacExtend",
            "6c20c197e9a126842451326d36677edce93a8dee"
        ],
        [
            "intro; rewrite a0; simpl; generalize (sqr_spos b H); intro; auto with zarith.",
            "VernacExtend",
            "51cbd665880b56c19014e05ee97ee8d6a2ffb31a"
        ],
        [
            "intro; generalize (sqr_spos a b0); intro; generalize (sqr_spos b H); intro; auto with zarith.",
            "VernacExtend",
            "44944de5eaffc25c0c9ae0d777ae8f2d56e28f0d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqr_sum2 : forall a b : Z, 0 <= a * a + b * b.",
            "VernacStartTheoremProof",
            "0428f5201dc6ba2219e51611aff67d736d95616b"
        ],
        [
            "intros; generalize (Zplus_le_compat 0 (a * a) 0 (b * b)); simpl; intro; apply H; apply Zge_le; apply sqr_pos.",
            "VernacExtend",
            "d6194e460e51de025678b7fdaa911b0f23248c70"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqr_sum3 : forall a b : Z, b > 0 -> a * a + b * b > 0.",
            "VernacStartTheoremProof",
            "21beb2037c9040e274aa003cdbccd54765385145"
        ],
        [
            "intros; apply Zlt_gt; fold (0 + 0); apply Zplus_le_lt_compat; [ apply Zge_le; apply sqr_pos | apply Zgt_lt; auto with zarith ].",
            "VernacExtend",
            "519d6fe7b487646e9cc53e30109e2668ee3ecfd7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqr_sum4: forall a b : Z, a * a + b * b = 0 -> a = 0 /\\ b = 0.",
            "VernacStartTheoremProof",
            "a45f7ab3e1a14cf9fdb72462973e2e9da041a583"
        ],
        [
            "intros; elim (Z_eq_dec a 0); intro; [ elim (Z_eq_dec b 0); intro; [ auto | generalize (sqr_sum a _ b0); tauto ] | generalize (sqr_sum b _ b0); rewrite Zplus_comm in H; tauto].",
            "VernacExtend",
            "8ff411e9d717cff9adf50137bf1d1e88515b8a8b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqr_sub1 : forall a b : Z, 0 <= b -> b <= a -> 0 <= a * a - b * b.",
            "VernacStartTheoremProof",
            "bcfdffc6e217cb858c71d54169417286da940b63"
        ],
        [
            "intros; replace (a * a - b * b) with ((a + b) * (a - b)); try ring; apply Zmult_le_0_compat; auto with zarith.",
            "VernacExtend",
            "40c095a8c7427b15e96fc1e36f033a6a15488606"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqr_sub2 : forall a b : Z, 0 <= b -> b < a -> 0 < a * a - b * b.",
            "VernacStartTheoremProof",
            "7cd25b4e36819de51a118b7d134b56c7e4e69e9b"
        ],
        [
            "intros; replace (a * a - b * b) with ((a + b) * (a - b)); try ring; apply Zmult_lt_0_compat; auto with zarith.",
            "VernacExtend",
            "bafa92f3d2307aabd10ea122a4965fc5268dbf17"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqr_sub3 : forall a b : Z, 0 < a -> 0 < b -> 0 < a * a - b * b -> b < a.",
            "VernacStartTheoremProof",
            "4d4881636f7278c08080367511bf6d8ca0fbcd0f"
        ],
        [
            "intros; replace (a * a - b * b) with ((a + b) * (a - b)) in H1; try ring; cut (0 < a + b); auto with zarith; intro; rewrite Zmult_comm in H1; generalize (Zmult_lt_0_reg_r _ _ H2 H1); clear H1 H2; intro; auto with zarith.",
            "VernacExtend",
            "d99e12b5c5b7af5e4c03df3db1de20d782de6e19"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqr_2 : forall a : Z, 0 <= 2 * (a * a).",
            "VernacStartTheoremProof",
            "64d6b91a291785b031300355a32e2a1db62911d6"
        ],
        [
            "intro; generalize (sqr_pos a); auto with zarith.",
            "VernacExtend",
            "530ab1c80eead326d175b9818409a023120e6418"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqr_gt : forall a b : Z, a >= 0 -> a < b -> a * a < b * b.",
            "VernacStartTheoremProof",
            "cf95223cde5b7df70c1218ce5ebde437fcb46cfb"
        ],
        [
            "intros; generalize (Zge_le _ _ H); clear H; intro; elim (Zle_lt_or_eq _ _ H); clear H; intro.",
            "VernacExtend",
            "a8af411f8deb43f4625cbc469cf20b3fe85bdb9e"
        ],
        [
            "generalize (Zmult_lt_compat_l _ _ _ H H0); intro; assert (0 < b); auto with zarith; generalize (Zmult_lt_compat_r _ _ _ H2 H0); auto with zarith.",
            "VernacExtend",
            "bed05987e9ca05e239845eb143adc6863a65af8d"
        ],
        [
            "rewrite <- H; rewrite <- H in H0; apply Zgt_lt; auto with zarith.",
            "VernacExtend",
            "89831eabb097938cbbd74d75d872b6f299d094c7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqr_ge : forall a b : Z, a >= 0 -> a <= b -> a * a <= b * b.",
            "VernacStartTheoremProof",
            "573592ab5e75340ca7a0a6e4a46e9abc73d1aecd"
        ],
        [
            "intros; apply Zmult_le_compat; auto with zarith.",
            "VernacExtend",
            "ece2dbf0d27dd2cd5f8770f88dddaca6fffb4f39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Zle_square_simpl : forall n m:Z, 0 <= n -> 0 <= m -> m * m <= n * n -> m <= n.",
            "VernacStartTheoremProof",
            "22c92b7ab1c55e59cfdb2393c728355000c2a138"
        ],
        [
            "intros; elim (Zle_lt_or_eq _ _ H1); intro; [ generalize (Zlt_square_simpl _ m H H2) | generalize (Zeq_minus _ _ H2); clear H2; intro; replace (m * m - n * n) with ((m + n) * (m - n)) in H2; try ring; elim (Zmult_integral _ _ H2); clear H2; intro ]; auto with zarith.",
            "VernacExtend",
            "8d4c6cf8ec3f9745f0799337d4ef733b6a37aae8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma neq_1 : forall u v m n : Z, m <> 0 -> n <> 0 -> u * u = m * m + n * n -> v * v = n * n - m * m -> u <> 1 /\\ v <> 1.",
            "VernacStartTheoremProof",
            "98c60168ad0eb858a656dda46259eae57f193c46"
        ],
        [
            "intros; case (Z_eq_dec u 1); intro; case (Z_eq_dec v 1); intro; try tauto; elimtype False; [ rewrite e in H1; simpl in H1; rewrite e0 in H2; simpl in H2; rewrite H2 in H1; cut (2 * (m * m) = 0); auto with zarith; intro; elim (Zmult_integral _ _ H3); auto with zarith; intro; generalize (sqr_0 _ H4); auto | rewrite e in H1; simpl in H1; generalize (sqr_pos m); intro; generalize (sqr_pos n); intro; cut (m * m = 0 \\/ n * n = 0); try omega; intro; elim H5; clear H5; intros; generalize (sqr_0 _ H5); auto | rewrite e in H2; simpl in H2; replace (n * n - m * m) with ((n + m) * (n - m)) in H2; try ring; symmetry in H2; elim (Zmult_1_inversion_l _ _ H2); intro; rewrite Zmult_comm in H2; elim (Zmult_1_inversion_l _ _ H2); auto with zarith ].",
            "VernacExtend",
            "26f3b3154be9c59bd9aacf93b9c567be78b2ba4e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Zmult_eq_reg_l : forall z z1 z2, z * z1 = z * z2 -> z <> 0 -> z1 = z2.",
            "VernacStartTheoremProof",
            "b9cd7e2e2a86326cf341cdb5be34c739b9b9944a"
        ],
        [
            "intros; apply eq_IZR; generalize (IZR_eq _ _ H); intro; repeat rewrite mult_IZR in H1; generalize (not_O_IZR _ H0); intro; apply (Rmult_eq_reg_l (IZR z)); assumption.",
            "VernacExtend",
            "9ea64908a0abf166b367c83a8124391202342f25"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Zmult_neq_0 : forall a b : Z, a * b <> 0 -> a <> 0 /\\ b <> 0.",
            "VernacStartTheoremProof",
            "937115ff86678333f6df2918a4507f4268233694"
        ],
        [
            "intros; elim (Z_eq_dec a 0); intro; [ rewrite a0 in H; simpl in H; auto | elim (Z_eq_dec b 0); intro; try (rewrite a0 in H; rewrite Zmult_comm in H; simpl in H); auto ].",
            "VernacExtend",
            "0bcd4f6dd659aa5b76e5b6617674f25519bcaee8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition both_odd (x y : Z) := Zodd x /\\ Zodd y.",
            "VernacDefinition",
            "0c96e3ea2f26cd65e85646e2e7df85b387e728bf"
        ],
        [
            "Definition distinct_parity (a b : Z) := (Zeven a) /\\ (Zodd b) \\/ (Zodd a) /\\ (Zeven b).",
            "VernacDefinition",
            "8537d34b916f3a9e22f43ec3030342e18ab4a242"
        ],
        [
            "Lemma ndistp_eq : forall a : Z, ~ distinct_parity a a.",
            "VernacStartTheoremProof",
            "b0336582e416747baeee820d2fd255c14c189638"
        ],
        [
            "red; intros; do 2 (elim H; clear H; intros); match goal with | id : Zeven _ |- _ => generalize (Zeven_not_Zodd _ id) end; auto.",
            "VernacExtend",
            "a5d2dede8548728410bbb1453ce27c35532cfc9b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqr_sum5 : forall a b: Z, a <> 0 -> b <> 0 -> distinct_parity a b -> a + b < a * a + b * b.",
            "VernacStartTheoremProof",
            "b16e59b75f2e67f94aa06050a8f9a60dbf8590f8"
        ],
        [
            "intros; case (Z_eq_dec a 1); intro; [ rewrite e; replace (1 * 1 + b * b) with (1+b*b);[idtac|ring]; apply Zplus_lt_compat_l; case (Z_eq_dec b 1); intro; [ elimtype False; rewrite e in H1; rewrite e0 in H1; generalize (ndistp_eq 1); auto | apply sqr_lt; assumption ] | case (Z_eq_dec b 1); intro; [ rewrite e; replace (a * a + 1 * 1) with (a * a + 1); try ring; apply Zplus_lt_compat_r; apply sqr_lt; assumption | apply Zplus_lt_compat; apply sqr_lt; assumption ] ].",
            "VernacExtend",
            "0b360031e10baf4a24da0ad5f62b5480e683b9a0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Zeven_def1 : forall z : Z, (Zeven z) -> exists k : Z, z = 2 * k.",
            "VernacStartTheoremProof",
            "2420e8b8816118e39eb884f2907608b2c8220d9c"
        ],
        [
            "intros; generalize (Zeven_div2 _ H); intro; exists (Zdiv2 z); assumption.",
            "VernacExtend",
            "7115bd03750f39017695efbc74c1a492fc1d24c7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Zeven_def2 : forall z : Z, (exists k : Z, z = 2 * k) -> (Zeven z).",
            "VernacStartTheoremProof",
            "b2bb418ccd1c6fa372e786b432d1c926b3bbb312"
        ],
        [
            "intros; elim H; intros; rewrite H0; elim x; intros; simpl; auto.",
            "VernacExtend",
            "586b452072e363586689f33069f6f212947aeb1e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Zodd_def1 : forall z : Z, (Zodd z) -> exists k : Z, z = 2 * k + 1.",
            "VernacStartTheoremProof",
            "593a90f158a563cd1550fda47624ce8ef5b75a4e"
        ],
        [
            "apply Zodd_ex.",
            "VernacExtend",
            "80e306d1163d2e0125d4ed3809fb4a563284b352"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Zodd_def2 : forall z : Z, (exists k : Z, z = 2 * k + 1) -> (Zodd z).",
            "VernacStartTheoremProof",
            "c2ad76f76c3ea1c35cb3fbd65f9adcbc5d65d28d"
        ],
        [
            "intros; elim H; intros; rewrite H0; elim x; intros; simpl; auto.",
            "VernacExtend",
            "586b452072e363586689f33069f6f212947aeb1e"
        ],
        [
            "elim p; simpl; auto.",
            "VernacExtend",
            "ede515f6921cc0040fa2657abbb907301cc7554d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Zodd_0: forall n : Z, Zodd n -> n <> 0.",
            "VernacStartTheoremProof",
            "4f7e3327dc2cb97d9da0f34c7266b3214dcb0ac1"
        ],
        [
            "intros; intro; rewrite H0 in H; auto.",
            "VernacExtend",
            "8b5b29bc5c84bbbfd1647d45f8325cd101d8044b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Zodd_opp1 : forall a : Z, Zodd (-a) -> Zodd a.",
            "VernacStartTheoremProof",
            "278b116fff1a3dffb7c86b73fcccbd20e9cc619e"
        ],
        [
            "intros; elim (Zodd_def1 _ H); clear H; intros; apply Zodd_def2; exists (-x - 1); rewrite <- (Zopp_involutive a); rewrite H; ring.",
            "VernacExtend",
            "f3a377164e683169be0ede0c7527044f557a1900"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Zodd_opp2 : forall a : Z, Zodd a -> Zodd (-a).",
            "VernacStartTheoremProof",
            "428b67795ee0effbf759e1d199790cbf46e2a3ee"
        ],
        [
            "intros; elim (Zodd_def1 _ H); clear H; intros; apply Zodd_def2; rewrite H; exists (-x - 1); ring.",
            "VernacExtend",
            "410a99c76d55d39871d0e424058e09f344b6b358"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Zodd_sum1 : forall a b : Z, Zodd a -> Zodd b -> Zeven (a + b).",
            "VernacStartTheoremProof",
            "dc697e430a2f3d9c1d736eda779a7a64b2cdaf31"
        ],
        [
            "intros; elim (Zodd_def1 _ H); clear H; intros; elim (Zodd_def1 _ H0); clear H0; intros; apply Zeven_def2; rewrite H; rewrite H0; exists (x + x0 + 1); ring.",
            "VernacExtend",
            "11ae242abf2892fe22e8562ba648b5f0bc87d0df"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Zodd_sum2 : forall a b : Z, Zodd a -> Zodd b -> Zeven (a - b).",
            "VernacStartTheoremProof",
            "42bab06b781643c8b2cc1e066d3b554fbd615483"
        ],
        [
            "intros; generalize (Zodd_opp2 _ H0); clear H0; intro; unfold Zminus; apply Zodd_sum1; assumption.",
            "VernacExtend",
            "d9a081a83c16c83a1dc80694813454944b6f8297"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Zodd_sum3 : forall a b : Z, Zodd (a + 2 * b) -> Zodd a.",
            "VernacStartTheoremProof",
            "381836f788816f20a2a38e0be31a3a079d39a488"
        ],
        [
            "intros; elim (Zodd_def1 _ H); clear H; intros; cut (a = 2 * x + 1 - 2 * b); auto with zarith; clear H; intro; rewrite H; apply Zodd_def2; exists (x - b); ring.",
            "VernacExtend",
            "dc2c86c5d6f1b417a7808c1a4c1fe4bf6ee06e6f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Zodd_mult : forall u v : Z, Zodd u -> Zodd v -> (exists s : Z, (exists w : Z, (u - v = 4 * s /\\ u + v = 2 * w) \\/ (u - v = 2 * w /\\ u + v = 4 * s))).",
            "VernacStartTheoremProof",
            "37f263a448717eb1fbed2d478352690f5fbda167"
        ],
        [
            "intros; elim (Zodd_def1 u H); elim (Zodd_def1 v H0); intros k Hk k' Hk'; elim (Zeven_odd_dec k); elim (Zeven_odd_dec k'); intros.",
            "VernacExtend",
            "5bc4bbaa82c2eb0b5d5b251e74d61bde37186c26"
        ],
        [
            "elim (Zeven_def1 k a0); elim (Zeven_def1 k' a); intros t Ht t' Ht'; split with (t - t'); split with (2 * t + 2 * t' + 1); left; auto with zarith.",
            "VernacExtend",
            "4b50c475d2178d22230c7946c6e01c4d8f684136"
        ],
        [
            "elim (Zeven_def1 k a); elim (Zodd_def1 k' b); intros t Ht t' Ht'; split with (t + t' + 1); split with (2 * t - 2 * t' + 1); right; auto with zarith.",
            "VernacExtend",
            "4ba0d42b220ecdc7343c4ff96d2ad38e953ceec3"
        ],
        [
            "elim (Zeven_def1 k' a); elim (Zodd_def1 k b); intros t Ht t' Ht'; split with (t + t' +1); split with (2 * t' - 2 * t - 1); right; auto with zarith.",
            "VernacExtend",
            "b140fca9907690ada12fc33db22442ac4573e3f6"
        ],
        [
            "elim (Zodd_def1 k b0); elim (Zodd_def1 k' b); intros t Ht t' Ht'; split with (t - t'); split with (k' + k + 1); left; auto with zarith.",
            "VernacExtend",
            "47470da9e8bf5059d200d809b8968b53ad6d75ec"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Zeven_sqr1 : forall z : Z, Zeven z -> Zeven (z * z).",
            "VernacStartTheoremProof",
            "1bb51702a2b07c326bc77cf1fa8f22153c404e4a"
        ],
        [
            "intros; generalize (Zeven_def1 _ H); clear H; intro; elim H; clear H; intros; rewrite H; apply Zeven_def2; exists (2 * x * x); ring.",
            "VernacExtend",
            "254e2fd06e49989665c7a56aa221272f8e17b03b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Zeven_sqr2 : forall n, Zeven (n * n) -> Zeven n.",
            "VernacStartTheoremProof",
            "29b5fa8bb0b673de1436a8218553ec022b2a638e"
        ],
        [
            "induction n; auto; induction p; auto.",
            "VernacExtend",
            "99222895879f80f21c493cbd4eb329e642a2d172"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Zodd_sqr1 : forall z : Z, Zodd z -> Zodd (z * z).",
            "VernacStartTheoremProof",
            "4ed60e4c663406c705e67dd03a9e6f5073d788ab"
        ],
        [
            "intros; generalize (Zodd_def1 _ H); clear H; intro; elim H; clear H; intros; rewrite H; apply Zodd_def2; exists (2 * x * x + 2 * x); ring.",
            "VernacExtend",
            "8aea9de6917eb5ed26fb9d5cf4f52467180bccb7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Zodd_sqr2 : forall n, Zodd (n * n) -> Zodd n.",
            "VernacStartTheoremProof",
            "9e4e67082087d648972fc4827abc81aa92cf70bd"
        ],
        [
            "induction n; auto; induction p; auto.",
            "VernacExtend",
            "99222895879f80f21c493cbd4eb329e642a2d172"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma distp_neq : forall p q : Z, distinct_parity p q -> p <> q.",
            "VernacStartTheoremProof",
            "bbbf84bef1e2b2f296d62a77dd47bae4564ba88a"
        ],
        [
            "intros; elim H; clear H; intro; elim H; clear H; intros; [ elim (Zeven_def1 _ H); clear H; intros; elim (Zodd_def1 _ H0); clear H0; intros; rewrite H; rewrite H0 | elim (Zodd_def1 _ H); clear H; intros; elim (Zeven_def1 _ H0); clear H0; intros; rewrite H; rewrite H0 ]; auto with zarith.",
            "VernacExtend",
            "ec6648184042cb56d96a9553c52bdd3cc7776c5d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma distp_sqr1 : forall p q : Z, (distinct_parity p q) -> (distinct_parity (p * p) (q * q)).",
            "VernacStartTheoremProof",
            "c55673978cadd9b9df14a2e29b18a353c51ad696"
        ],
        [
            "intros; unfold distinct_parity; do 2 (elim H; clear H; intros); [ generalize (Zeven_sqr1 _ H); clear H; intro; generalize (Zodd_sqr1 _ H0) | generalize (Zodd_sqr1 _ H); clear H; intro; generalize (Zeven_sqr1 _ H0) ]; tauto.",
            "VernacExtend",
            "66dc0611e72e463bca695f47a8593fbd4658d1c0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma distp_sqr2 : forall p q : Z, (distinct_parity (p * p) (q * q)) -> (distinct_parity p q).",
            "VernacStartTheoremProof",
            "221969aee68c76b7b45d4a0fce4b9602ab38630e"
        ],
        [
            "intros; unfold distinct_parity; elim H; clear H; intros; elim H; clear H; intros; [ left | right ]; repeat (match goal with | id : Zeven _ |- _ => generalize (Zeven_sqr2 _ id); clear id | id : Zodd _ |- _ => generalize (Zodd_sqr2 _ id); clear id end); tauto.",
            "VernacExtend",
            "9219756e99d1cf6bbbd6536c1b2c7aa3cebbbd14"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma distp_odd : forall p q : Z, (distinct_parity p q) -> both_odd (p + q) (q - p).",
            "VernacStartTheoremProof",
            "36bb36164afd45337c2660486cc35826714f639e"
        ],
        [
            "unfold distinct_parity, both_odd; intros; elim H; clear H; intro; elim H; clear H; intros; [ elim (Zeven_def1 _ H); clear H; intros; elim (Zodd_def1 _ H0); clear H0; intros | elim (Zodd_def1 _ H); clear H; intros; elim (Zeven_def1 _ H0); clear H0; intros ]; split; apply Zodd_def2; (exists (x + x0); rewrite H; rewrite H0; solve [ ring ]) || (exists (x0 - x); rewrite H; rewrite H0; solve [ ring ] ) || (exists (x0 - x - 1); rewrite H; rewrite H0; ring).",
            "VernacExtend",
            "4b0985277d2e743950f2b1f82a70df08ad606803"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma not_divide1 : forall a b : Z, a <> 1 -> a <> -1 -> b <> 0 -> ~(a * b | b).",
            "VernacStartTheoremProof",
            "38943e981d83b560b2a14e8c6e17982d4b69af41"
        ],
        [
            "intros; red; intro; elim H2; clear H2; intros; rewrite Zmult_assoc in H2; pattern b at 1 in H2; rewrite -> (Zred_factor0 b) in H2; rewrite (Zmult_comm b 1) in H2; generalize (Zmult_reg_r _ _ _ H1 H2); clear H2; intro; generalize (sym_eq H2); clear H2; intro; rewrite Zmult_comm in H2; generalize (Zmult_1_inversion_l _ _ H2); tauto.",
            "VernacExtend",
            "2ea524f82f7141b46d0fa545681f68e682eb5dfe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma not_divide2 : forall a b : Z, 0 < a -> 0 < b -> b < a -> ~(a | b).",
            "VernacStartTheoremProof",
            "7769aea4f2e54bce03298b7be86218c6eb1f2700"
        ],
        [
            "intros; red; intro; elim H2; clear H2; intros; replace a with (1 * a) in H1; try ring; replace 0 with (0 * a) in H0; try ring; rewrite H2 in H1; rewrite H2 in H0; generalize (Zmult_lt_reg_r _ _ _ H H1); clear H1; intro; generalize (Zmult_lt_reg_r _ _ _ H H0); auto with zarith.",
            "VernacExtend",
            "54353a746775581700ca27af21c0507e7c542cf3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_prime_1: forall a : Z, rel_prime 1 a.",
            "VernacStartTheoremProof",
            "e3eca506a751b345cce6784f5714c30ae2be7913"
        ],
        [
            "intro; unfold rel_prime; apply Zis_gcd_intro; auto with zarith.",
            "VernacExtend",
            "e37fe72524a4e274c24d22acd01ad4b663074529"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prime_2 : prime 2.",
            "VernacStartTheoremProof",
            "7027f94f3f35fd17da5a138dfbd3cf01a73e2a05"
        ],
        [
            "apply prime_intro; auto with zarith; intros; case (Z_eq_dec n 1); intro; try (elimtype False; progress auto with zarith); rewrite e; apply rel_prime_1.",
            "VernacExtend",
            "134ad5f0fb804a2614574181b4840bf07341fad9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_prime_sym : forall x y : Z, rel_prime x y -> rel_prime y x.",
            "VernacStartTheoremProof",
            "b9ea3bdd9198ceb7c28db7e14b042c313255a298"
        ],
        [
            "unfold rel_prime; intros; apply Zis_gcd_sym; assumption.",
            "VernacExtend",
            "48a7cad3e49313b4c0603ef98b762c4838b69e98"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_prime_dec : forall x y : Z, {rel_prime x y} + {~ rel_prime x y}.",
            "VernacStartTheoremProof",
            "07331aa6288d49285d04199e59e8f181a8c3d6d7"
        ],
        [
            "intros; unfold rel_prime; elim (Zgcd_spec x y); intros; elim p; clear p; intros; elim (Z_eq_dec x0 1); intro; [ rewrite a in H; left; assumption | right; red; intro; elim H; clear H; intros; elim H1; clear H1; intros; generalize (H5 _ H H2); clear H H2 H3 H1 H4 H5; intro; elim (Zdivide_1 _ H); clear H; intro; auto with zarith ].",
            "VernacExtend",
            "531039f52fb86ef1fedffa94bb409da23bc7375f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma not_rel_prime1 : forall x y : Z, ~ rel_prime x y -> exists d : Z, Zis_gcd x y d /\\ d <> 1 /\\ d <> -1.",
            "VernacStartTheoremProof",
            "05c78d500227942133b9b1cc48152c0ec9783195"
        ],
        [
            "unfold rel_prime; intros; elim (Zgcd_spec x y); intros; elim p; clear p; intros; exists x0; split; [ assumption | split; [ elim (Z_eq_dec x0 1); intro; [ rewrite a in H0; auto | assumption ] | elim (Z_eq_dec x0 (-1)); intro; [ rewrite a in H0; generalize (Zis_gcd_opp _ _ _ H0); simpl; clear H0; intro; generalize (Zis_gcd_sym _ _ _ H0); auto | assumption ] ] ].",
            "VernacExtend",
            "128ed772a8b246543a369f2765f45cde697ab49c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma not_rel_prime2 : forall x y d : Z, (d | x) -> (d | y) -> d <> 1 -> d <> -1 -> ~ rel_prime x y.",
            "VernacStartTheoremProof",
            "a966e357858121b13ee8adf815c3f39f6d5b2702"
        ],
        [
            "intros; elim (rel_prime_dec x y); auto; unfold rel_prime; intro; elimtype False; elim a; clear a; intros; generalize (H5 _ H H0); clear H H0 H3 H4 H5; intro; elim (Zdivide_1 _ H); auto.",
            "VernacExtend",
            "26bf3d93df257fa220f6a2922bd01c8283a02a56"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gcd_rel_prime : forall x y d : Z, Zis_gcd x y d -> exists a : Z, exists b : Z, x = d * a /\\ y = d * b /\\ rel_prime a b.",
            "VernacStartTheoremProof",
            "a6bc208f785318023547938b0353358f8c93745d"
        ],
        [
            "intros; elim (Z_eq_dec d 0); intro; [ rewrite a in H; elim H; clear H; intros; destruct H as (q,H), H0 as (q0,H0); revert H H0; ring_simplify (q * 0); ring_simplify (q0 * 0); intros; exists 1; exists 1; rewrite a; intuition; apply rel_prime_1 | elim H; clear H; intros; destruct H as (q,H), H0 as (q0,H0); exists q; exists q0; rewrite (Zmult_comm d q); rewrite (Zmult_comm d q0); intuition; elim (rel_prime_dec q q0); intro; [ auto | elimtype False; elim (not_rel_prime1 _ _ b0); clear b0; intros; elim H2; clear H2; intros; elim H2; clear H2; intros; generalize (Zdivide_mult_l _ _ d H2); intro; generalize (Zdivide_mult_l _ _ d H4); intro; rewrite <- H in H6; rewrite <- H0 in H7; generalize (H1 _ H6 H7); clear H5 H6 H7; intro; elim H2; clear H2; intros; elim H4; clear H4; intros; rewrite H2 in H; clear H2; rewrite H4 in H0; clear H4; rewrite <- Zmult_assoc in H; rewrite <- Zmult_assoc in H0; generalize (Zdivide_intro (x0 * d) x _ H); clear H; intro; generalize (Zdivide_intro (x0 * d) y _ H0); clear H0; intro; generalize (H1 _ H H0); elim H3; clear H H0 H3; do 2 intro; apply not_divide1; auto ] ].",
            "VernacExtend",
            "1831158cbf3046191c933a7a2274af49269970ac"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relp_mult2 : forall a b : Z, rel_prime (a * b) a -> a = 1 \\/ a = -1.",
            "VernacStartTheoremProof",
            "3c3adb82cb690bdef1df142c08a9dd318f3ce851"
        ],
        [
            "intros; elim (Z_eq_dec a 1); intro; try tauto; elim (Z_eq_dec a (-1)); intro; try tauto; elimtype False; generalize (Zdivide_refl a); intro; generalize (Zdivide_factor_r a b); intro; generalize (not_rel_prime2 _ _ _ H1 H0 b0 b1); auto.",
            "VernacExtend",
            "a4929c55e1cff962c5f0d40ac1b593926845f37a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relp_mult3 : forall a b c : Z, rel_prime (a * b) c -> rel_prime a c.",
            "VernacStartTheoremProof",
            "a78e169c5c77ee4ade2ff7516a4a77a9860b4e43"
        ],
        [
            "intros; elim (rel_prime_dec a c); intro; try assumption; elimtype False; elim (not_rel_prime1 _ _ b0); clear b0; intros; do 2 (elim H0; clear H0; intros); elim H1; clear H1; intros; generalize (Zdivide_mult_l _ _ b H0); clear H0; intro; generalize (not_rel_prime2 _ _ _ H0 H2 H1 H4); auto.",
            "VernacExtend",
            "cecdf6cd52e70730f762d284efcbf6787c8e00cf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gcd2_rel_prime : forall a b s w : Z, (Zis_gcd a b 2) -> a = 4 * s -> b = 2 * w -> rel_prime s w.",
            "VernacStartTheoremProof",
            "cb1c877d6dac191acc34dc38efc4b7c2db990b2a"
        ],
        [
            "intros; elim (gcd_rel_prime _ _ _ H); clear H; intros; rewrite H0 in H; rewrite H1 in H; do 2 (elim H; clear H; intros); elim H2; clear H2; intros; replace (4 * s) with (2 * (2 * s)) in H; try ring; cut (2 <> 0); auto with zarith; intro; generalize (Zmult_eq_reg_l _ _ _ H H4); intro; generalize (Zmult_eq_reg_l _ _ _ H2 H4); intro; rewrite <- H5 in H3; rewrite <- H6 in H3; rewrite Zmult_comm in H3; apply relp_mult3 with (b := 2); assumption.",
            "VernacExtend",
            "43ec818b8a16b0db3911f22f05630c932e5dbeae"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relp_neq : forall m n : Z, m <> 1 -> m <> -1 -> rel_prime m n -> m <> n.",
            "VernacStartTheoremProof",
            "6ec915744971865424a456aee19b725b3b2c2425"
        ],
        [
            "intros; case (Z_eq_dec m n); auto; intro; elimtype False; generalize (Zdivide_refl m); intro; generalize (Zdivide_refl n); pattern n at 1; rewrite <- e; intro; generalize (not_rel_prime2 _ _ _ H2 H3 H H0); auto.",
            "VernacExtend",
            "dff85fc2a97293b83a6dff813cbebab01c0054cc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prop2 : forall m n : Z, rel_prime m n -> rel_prime (m * m) (n * n).",
            "VernacStartTheoremProof",
            "dd59078ffa0d9a19afd544e9d04ff8eb3937224c"
        ],
        [
            "intros; apply rel_prime_mult; apply rel_prime_sym; apply rel_prime_mult; apply rel_prime_sym; assumption.",
            "VernacExtend",
            "f6624ad78e2ebf59e5a0606295ecf0e1557bd29f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_sqr_compat : forall k a : Z, k <> 0 -> is_sqr ((k * k) * a) -> is_sqr a.",
            "VernacStartTheoremProof",
            "aac85995d9ebeeede43e4497d7df1821cfb3311d"
        ],
        [
            "intros; elim H0; clear H0; intros; do 2 (elim H1; clear H1; intros); elim (rel_prime_dec x k); intro; [ generalize (prop2 _ _ a0); clear a0; intro; rewrite H1 in H3; elim (relp_mult2 _ _ H3); intro; [ rewrite H4 in H1; rewrite Zmult_1_l in H1; rewrite <- H1; unfold is_sqr; intuition; exists x; intuition | elimtype False; generalize (sqr_pos k); intro; rewrite H4 in H5; auto with zarith ] | elim (not_rel_prime1 _ _ b); clear b; intros; elim H3; clear H3; intros; elim H4; clear H4; intros; elim (gcd_rel_prime _ _ _ H3); clear H3; intros; do 2 (elim H3; clear H3; intros); elim H6; clear H6; intros; rewrite H3 in H1; rewrite H6 in H1; elim (Z_eq_dec x0 0); intro; try (elimtype False; rewrite a0 in H6; simpl in H6; auto); replace (x0 * x1 * (x0 * x1)) with (x0 * x0 * (x1 * x1)) in H1; try ring; replace (x0 * x2 * (x0 * x2) * a) with (x0 * x0 * (x2 * x2 * a)) in H1; try ring; generalize (sqr_spos _ b); clear b; intro; cut ((x1 * x1) = x2 * x2 * a); try (apply Zcompare_Eq_eq; rewrite (Zmult_compare_compat_l (x1 * x1) (x2 * x2 * a) (x0 * x0) H8); elim (Zcompare_Eq_iff_eq (x0 * x0 * (x1 * x1)) (x0 * x0 * (x2 * x2 * a))); auto); clear H1; intro; generalize (prop2 _ _ H7); clear H7; intro; rewrite H1 in H7; elim (relp_mult2 _ _ H7); intro; [ rewrite H9 in H1; rewrite Zmult_1_l in H1; rewrite <- H1; elim (Z_le_dec 0 x1); intro; [ unfold is_sqr; intuition; exists x1; intuition | split; [ apply Zge_le; apply sqr_pos | exists (-x1); intuition; ring ] ] | elimtype False; generalize (sqr_pos x2); intro; rewrite H9 in H10; auto with zarith ] ].",
            "VernacExtend",
            "73e618733b07d4e8ca07641190bf2f15a869eec9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma divide_trans : forall a b c : Z, (a | b) -> (b | c) -> (a | c).",
            "VernacStartTheoremProof",
            "829f86e12bd6ab113d840315541d417ed4013ae4"
        ],
        [
            "intros a b c (q,H) (q0,H0); rewrite H in H0; clear H; rewrite Zmult_assoc in H0; apply (Zdivide_intro a c (q0 * q)); assumption.",
            "VernacExtend",
            "7c6d1fedfbbf7f6ec9c1df70a5fad2cc4f6a88e8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma divide_sum : forall a b c : Z, (a | b) -> (a | b + c) -> (a | c).",
            "VernacStartTheoremProof",
            "2f7837a0cbda536c31e8ef9e1c6eac6bf67713d8"
        ],
        [
            "intros a b c (q,H) (q0,H0); cut (c = q0 * a - b); auto with zarith; clear H0; intro; rewrite H in H0; exists (q0 - q); rewrite H0; ring.",
            "VernacExtend",
            "bc79eb1e3bf40c48fa9ca43d20ff6e0aeea57bea"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma divide_mult_l : forall a b c : Z, c <> 0 -> (c * a | c * b) -> (a | b).",
            "VernacStartTheoremProof",
            "e4dd8f8383f63ea728cb6c029fcd4750e1cffa29"
        ],
        [
            "intros a b c H (q,H0); replace (q * (c * a)) with (c * (q * a)) in H0; try ring; generalize (Zmult_eq_reg_l _ _ _ H0 H); clear H0; intro; apply Zdivide_intro with (q := q); assumption.",
            "VernacExtend",
            "3dba4199c6b595e517130f775002961feed15d3c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma divide_0 : forall z : Z, (0 | z) -> z = 0.",
            "VernacStartTheoremProof",
            "3021748d1e75242def364e69f55e7ac64d34aaa7"
        ],
        [
            "intros; elim H; clear H; intros; auto with zarith.",
            "VernacExtend",
            "5cb62b0a6d82aaa9946191754e2b7ed6b3d59843"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma divide_2 : forall z : Z, 0 <= z -> z <> 0 -> z <> 1 -> (z | 2) -> z = 2.",
            "VernacStartTheoremProof",
            "20efd30840bc3d9d7c7811a857d0cdd9318a2920"
        ],
        [
            "intros; cut (2 <> 0); auto with zarith; intro; generalize (Zdivide_bounds _ _ H2 H3); clear H2; simpl; generalize H; generalize H0; generalize H1; elim z; simpl; intros; progress (auto with zarith) || (elimtype False; auto with zarith).",
            "VernacExtend",
            "938e2e76ccdb20828de3aa0f75af1fc1f93e655f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma divide_2b : forall z : Z, z <> 1 -> z <> -1 -> (z | 2) -> z = 2 \\/ z = -2.",
            "VernacStartTheoremProof",
            "46bd18ae9df7af33c1e868275cdbee2b68e8e582"
        ],
        [
            "intros; elim (Z_eq_dec z 0); intro; [ elim H1; clear H1; intros; rewrite a in H1; auto with zarith | cut (2 <> 0); auto with zarith; intro; generalize (Zdivide_bounds _ _ H1 H2); clear H1; simpl; generalize H; generalize H0; generalize b; elim z; simpl; intros; progress (auto with zarith) || (generalize (Zle_0_pos p); intro; progress (auto with zarith)) || (rewrite <- Zopp_neg in H4; generalize (Zlt_neg_0 p); auto with zarith) ].",
            "VernacExtend",
            "824f4d347d5514b3c0f66352472acf9f281adb1c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma divide_4 : forall a b : Z, (a * a * a * a | b * b * b * b) -> (a | b).",
            "VernacStartTheoremProof",
            "eb6f31a747f861d413c0a782b993256797d6bbd4"
        ],
        [
            "intros a b (q,H); cut (is_sqr ((a * a * (a * a)) * q)); [ intro; elim (Z_eq_dec a 0); intro; try (rewrite a0 in H; rewrite (Zmult_comm q) in H; simpl in H; rewrite <- Zmult_assoc in H; do 2 (generalize (sqr_0 _ H); clear H; intro); rewrite H; apply Zdivide_0); cut (a * a <> 0); try (generalize (sqr_spos _ b0); solve [ auto with zarith ]); intro; generalize (is_sqr_compat _ _ H1 H0); clear H0; intro; elim H0; clear H0; intros; do 2 (elim H2; clear H2; intros); rewrite <- H2 in H; replace (x * x * (a * a * a * a)) with (a * a * x * (a * a * x)) in H; try ring; cut (0 <= a * a * x); try (apply Zmult_le_0_compat; try assumption; apply Zge_le; apply sqr_pos); intro; rewrite <- Zmult_assoc in H; elim (sqr_compat _ _ H); intro; try (elim (Z_eq_dec b 0); intro; [ rewrite a0; exists 0 | elimtype False; generalize (sqr_spos _ b1); intro ]; solve [ auto with zarith ]); cut (is_sqr (a * a * x)); try (unfold is_sqr; intuition; elim (Z_le_dec b 0); intro; [ exists (-b) | exists b ]; intuition; rewrite <- H5; ring); intro; generalize (is_sqr_compat _ _ b0 H6); clear H6; intro; elim H6; clear H6; intros; do 2 (elim H7; clear H7; intros); rewrite <- H7 in H5; replace (a * a * (x0 * x0)) with (a * x0 * (a * x0)) in H5; try ring; elim (sqr_compat _ _ H5); intro; [ exists x0 | exists (-x0) ]; rewrite H9; ring | split; [ replace (a * a * (a * a) * q) with (q * (a * a * a * a)); try ring; rewrite <- H; rewrite <- (Zmult_assoc (b * b)); apply Zge_le; apply sqr_pos | exists (b * b); split; [ rewrite Zmult_assoc; rewrite H; ring | apply Zge_le; apply sqr_pos ] ] ].",
            "VernacExtend",
            "3ac4cd9ef890efd4fe70b8e05d5ff111911f7c19"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma divide_sqr : forall a b : Z, (a | b) -> (a * a | b * b).",
            "VernacStartTheoremProof",
            "21fe81d3398cdfef76dd82cd14db88bd94559546"
        ],
        [
            "intros a b (q,H); rewrite H; replace (q * a * (q * a)) with ((q * q) * (a * a)); try ring; apply Zdivide_factor_l.",
            "VernacExtend",
            "70009accdbf4ee29460a021cd6b1e300c74330ee"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gcd2_relp_odd : forall u v : Z, Zodd u -> Zodd v -> rel_prime u v -> (Zis_gcd (u - v) (u + v) 2).",
            "VernacStartTheoremProof",
            "2047612e6b8bafae73bea98b77dc4a6192cb983a"
        ],
        [
            "intros; elim (Zgcd_spec (u - v) (u + v)); intros; elim p; clear p; intros; elim H2; intros; generalize (Zdivide_plus_r _ _ _ H4 H5); ring_simplify (u - v + (u + v)); intro; generalize (Zdivide_opp_r _ _ H4); intro; generalize (Zdivide_plus_r _ _ _ H5 H8); ring_simplify (u + v + - (u - v)); clear H8; intro; generalize (Zodd_sum2 _ _ H H0); intro; elim (Zeven_def1 _ H9); clear H9; intros; rewrite Zmult_comm in H9; generalize (Zdivide_intro _ _ _ H9); clear x0 H9; intro; generalize (Zodd_sum1 _ _ H H0); intro; elim (Zeven_def1 _ H10); clear H10; intros; rewrite Zmult_comm in H10; generalize (Zdivide_intro _ _ _ H10); clear x0 H10; intro; generalize (H6 _ H9 H10); clear H9 H10; intro; elim H9; clear H9; intros; rewrite Zmult_comm in H9; rewrite H9 in H7; rewrite H9 in H8; cut (2 <> 0); auto with zarith; intro; generalize (divide_mult_l _ _ _ H10 H7); clear H7; intro; generalize (divide_mult_l _ _ _ H10 H8); clear H8 H10; intro; elim H1; intros; generalize (H12 _ H7 H8); intro; elim (Zdivide_1 _ H13); intro; try (elimtype False; rewrite H14 in H9; progress auto with zarith); rewrite H14 in H9; simpl in H9; rewrite H9 in H2; assumption.",
            "VernacExtend",
            "ac07f0d303982b35c80da3277eee04f256a36bdd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_prime_opp : forall x y : Z, rel_prime x y -> rel_prime (-x) (-y).",
            "VernacStartTheoremProof",
            "2c6bd347fa3d529666d7ccb70031f27172899a7e"
        ],
        [
            "unfold rel_prime; intros; do 2 (apply Zis_gcd_minus; rewrite Zopp_involutive); assumption.",
            "VernacExtend",
            "b7bf121627874bfa1351973f86f2fd9e76a0ea40"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_prime_oppr : forall x y : Z, rel_prime x y -> rel_prime x (-y).",
            "VernacStartTheoremProof",
            "e80158234c42116595c3fc6b67e79fbd1fd912a1"
        ],
        [
            "intros; unfold rel_prime; apply Zis_gcd_minus; apply Zis_gcd_sym; apply rel_prime_opp; assumption.",
            "VernacExtend",
            "f4d6fc104b85bd6f6a9f4bf20f351027d091284f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rel_prime_2 : forall z : Z, Zodd z -> rel_prime 2 z.",
            "VernacStartTheoremProof",
            "104431816ac97e249d3da922fced3d1383975286"
        ],
        [
            "intros; elim (rel_prime_dec 2 z); auto; intro; elimtype False; elim (Zodd_def1 _ H); clear H; intros; elim (not_rel_prime1 _ _ b); clear b; intros; do 2 (elim H0; clear H0; intros); elim H1; clear H1; intros; elim (divide_2b _ H1 H4 H0); clear H0 H3 H1 H4; intro; rewrite H0 in H2; clear H0; elim H2; clear H2; intros; rewrite H0 in H; clear H0; auto with zarith.",
            "VernacExtend",
            "492b504be41aa3b8001f2354a90f88a28d1cc110"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relp_mult1 : forall a b c d k: Z, 0 <= a -> 0 <= b -> 0 < c -> 0 <= d -> a = k * c -> b = k * d -> rel_prime a b -> k = 1.",
            "VernacStartTheoremProof",
            "318e4cfdc81cab1644f863c8f4a4859d7255c24e"
        ],
        [
            "intros; rewrite H3 in H5; rewrite H4 in H5; rewrite H3 in H; clear H3 H4; elim H5; clear H5; intros; elim (Zdivide_1 k); auto with zarith; intro; rewrite H6 in H; clear H6; auto with zarith.",
            "VernacExtend",
            "5d05aaab66d8b1df8f55f82d2ec13df4f4d300ba"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relp_parity : forall x y : Z, (rel_prime x y) -> (distinct_parity x y) \\/ (both_odd x y).",
            "VernacStartTheoremProof",
            "5ae542550d2d226cd009bb7e387f473f8e920eb8"
        ],
        [
            "intros; unfold distinct_parity, both_odd; elim (Zeven_odd_dec x); intro; elim (Zeven_odd_dec y); intro; intuition.",
            "VernacExtend",
            "90911d992101dc8b60022bac7cc3ebba0e24e9d5"
        ],
        [
            "elimtype False; unfold rel_prime in H; elim (Zeven_def1 _ a); clear a; intros; elim (Zeven_def1 _ a0); clear a0; intros; rewrite Zmult_comm in H1; rewrite Zmult_comm in H0; generalize (Zdivide_intro _ _ x0 H0); clear H0; intro; generalize (Zdivide_intro _ _ x1 H1); clear H1; intro; elim H; clear H; intros; generalize (H3 _ H0 H1); clear H3; intro; elim H3; clear H3; intros; auto with zarith.",
            "VernacExtend",
            "f19171ccd61a9c13afc05798be52e358a7b0e853"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relp_sum : forall m n : Z, (rel_prime (m + n) (m - n)) -> (rel_prime m n).",
            "VernacStartTheoremProof",
            "65ffb61b6038f035df9f107793648b06d4f9be8d"
        ],
        [
            "intros; elim (rel_prime_dec m n); intro; try assumption.",
            "VernacExtend",
            "5c513ce1c201ff4ed091c826b0a8707fe65ac0ce"
        ],
        [
            "elimtype False; elim (not_rel_prime1 _ _ b); clear b; intros; elim H0; clear H0; intros; elim H1; clear H1; intros; elim H0; clear H0; intros; elim H; clear H; intros; generalize (Zdivide_plus_r _ _ _ H0 H3); intro; generalize (Zdivide_minus_l _ _ _ H0 H3); clear H H0 H3 H4 H5; intro; generalize (H6 _ H7 H); clear H H6 H7; intro; elim (Zdivide_1 _ H); auto.",
            "VernacExtend",
            "1522630a8b061990a00b767245fa30a8b9805bb5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prop1 : forall m n : Z, rel_prime m n -> distinct_parity m n -> rel_prime (m + n) (n - m).",
            "VernacStartTheoremProof",
            "678c90a85a5b9edef24930329ac557adfffcb74a"
        ],
        [
            "unfold rel_prime; intros; elim (distp_odd _ _ H0); clear H0; intros; elim (Zgcd_spec (m + n) (n - m)); intros; elim p; clear p; intros; elim (Z_eq_dec x 1); intro; [ rewrite a in H2; assumption | elimtype False; elim H2; clear H2; intros; generalize (Zdivide_plus_r _ _ _ H2 H4); ring_simplify (m + n + (n - m)); intro; generalize (Zdivide_minus_l _ _ _ H2 H4); ring_simplify (m + n - (n - m)); intro; elim (Zdivide_dec x 2); intro; [ elim (Z_eq_dec x 0); intro; [ rewrite a0 in a; clear a0; elim a; clear a; intros; auto with zarith | generalize (divide_2 _ H3 b0 b a); clear a; intro; rewrite H8 in H2; rewrite H8 in H4; clear x H3 b H5 H6 H7 b0 H8; destruct H2 as (q,H2), H4 as (q0,H3); rewrite Zmult_comm in H2; rewrite Zmult_comm in H3; generalize (Zeven_def2 _ (ex_intro (fun x => m + n = 2 * x) q H2)); clear q H2; intro; generalize (Zeven_not_Zodd _ H2); auto ] | elim (Zdivide_dec 2 x); intro; [ generalize (divide_trans _ _ _ a H2); clear H H1 x H3 b H2 H4 H5 H6 H7 b0 a; intro; destruct H as (q,H); rewrite Zmult_comm in H; generalize (Zeven_def2 _ (ex_intro (fun x => m + n = 2 * x) q H)); clear H; intro; generalize (Zeven_not_Zodd _ H); auto | generalize (prime_rel_prime _ prime_2 _ b1); intro; generalize (rel_prime_sym _ _ H8); clear H8; intro; generalize (Gauss _ _ _ H6 H8); clear H6; intro; generalize (Gauss _ _ _ H7 H8); clear H7; intro; cut (x <> -1); auto with zarith; intro; generalize (not_rel_prime2 _ _ _ H7 H6 b H9); auto ] ] ].",
            "VernacExtend",
            "c4dffd5be331163340766988dc0da72ac6c9caf0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prop2b : forall m n : Z, rel_prime m n -> rel_prime m (m * m + n * n).",
            "VernacStartTheoremProof",
            "acf8100f3cd0b87801c90148f5f33a3223fb404c"
        ],
        [
            "intros; elim (rel_prime_dec m (m * m + n * n)); intros; auto; elimtype False; elim (not_rel_prime1 _ _ b); clear b; intros; do 2 (elim H0; clear H0; intros); elim H1; clear H1; intros; generalize (Zdivide_mult_l _ _ m H0); intro; generalize (divide_sum _ _ (n * n) H5 H2); intro; generalize (prop2 _ _ H); clear H; intro; apply (not_rel_prime2 _ _ _ H5 H6 H1 H4); assumption.",
            "VernacExtend",
            "0697770c7c574949f64f0abf4eeb2508bd5fe9f1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prop2c : forall m n : Z, rel_prime m n -> rel_prime m (m * m - n * n).",
            "VernacStartTheoremProof",
            "789143b9ed6b6344bf601d024c216ff4bd502d1c"
        ],
        [
            "intros; elim (rel_prime_dec m (m * m - n * n)); intros; auto; elimtype False; elim (not_rel_prime1 _ _ b); clear b; intros; do 2 (elim H0; clear H0; intros); elim H1; clear H1; intros; generalize (Zdivide_mult_l _ _ m H0); intro; generalize (divide_sum _ _ (- (n * n)) H5 H2); intro; generalize (Zdivide_opp_r_rev _ _ H6); clear H6; intro; generalize (prop2 _ _ H); clear H; intro; apply (not_rel_prime2 _ _ _ H5 H6 H1 H4); assumption.",
            "VernacExtend",
            "4c8ff481232a1a6a91e7ad6c09e16492ca58f651"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prop3 : forall m n : Z, rel_prime (m * m) (n * n) -> rel_prime m n.",
            "VernacStartTheoremProof",
            "f2061d7930dfc7e6c61091d3a23bad48bfdbd564"
        ],
        [
            "intros; elim H; intros; unfold rel_prime; apply Zis_gcd_intro; auto with zarith.",
            "VernacExtend",
            "0e389630c3720b5fe5b9f457883fb335d4592b05"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition R_prime (x y : Z) := 1 < x /\\ 1 < y /\\ x < y.",
            "VernacDefinition",
            "67daf9e68ae8c5b3b70e5ba91d962ccce3f4c629"
        ],
        [
            "Definition f_Z (x : Z) := Zabs_nat x.",
            "VernacDefinition",
            "4a1058395c271f2d8d4a5ccf90af0f849fb78534"
        ],
        [
            "Lemma R_prime_wf : well_founded R_prime.",
            "VernacStartTheoremProof",
            "909dc7094da40bc5143e32534b7b32ac853ba978"
        ],
        [
            "apply (well_founded_lt_compat _ f_Z R_prime); unfold R_prime, f_Z; intros; apply Zabs_nat_lt; intuition.",
            "VernacExtend",
            "d680276dd442fcd7fb9bb2d17d9c8621d3edec03"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ind_prime : forall P : Z -> Prop, (forall x : Z, (forall y : Z, (R_prime y x -> P y)) -> P x) -> forall x : Z, P x.",
            "VernacStartTheoremProof",
            "82b59afc59ec26cc24e86b23dadf73ef84c17d23"
        ],
        [
            "intros; generalize (well_founded_ind R_prime_wf P); auto.",
            "VernacExtend",
            "d92429bcd3f805a30b6db2f02f9cc801aa5d2af0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prime_dec_gen : forall a b : Z, 1 < b -> b < a -> (forall c : Z, b < c < a -> rel_prime c a) -> prime a \\/ ~ prime a.",
            "VernacStartTheoremProof",
            "e7899184a976fec2d122ca0d35c442dc7aea676f"
        ],
        [
            "intros a b; pattern b; match goal with | |- (?p _) => simpl; case (Z_lt_dec 1 a); intro; try (right; red; intro; elim H2; clear H2; intros; progress auto); apply (ind_prime p); intros; case (rel_prime_dec x a); intro; [ case (Z_eq_dec x 2); intro; [ left; rewrite e in H2; rewrite e in r; generalize (rel_prime_1 a); intro; apply prime_intro; try assumption; intros; case (Z_eq_dec n 1); intro; try (rewrite e0; assumption); case (Z_eq_dec n 2); intro; try (rewrite e0; assumption); apply H2; auto with zarith | apply (H (x - 1)); try unfold R_prime; auto with zarith; intros; case (Z_eq_dec c x); intro; try (rewrite e; assumption); apply H2; auto with zarith ] | right; red; intro; elim H3; clear H3; intros; cut (1 <= x < a); auto with zarith; intro; generalize (H4 _ H5); auto ] end.",
            "VernacExtend",
            "daf4fa8b3a1a6c4e1d4a6932fc9fb04f4454212b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prime_dec : forall a : Z, prime a \\/ ~ prime a.",
            "VernacStartTheoremProof",
            "37fa3f184267473dfd741cedb4ea4bbd099bc025"
        ],
        [
            "intros; case (Z_eq_dec a 2); intro; [ left; rewrite e; apply prime_2 | case (Z_lt_dec 1 a); intro; try (right; red; intro; elim H; clear H; intros; progress auto); apply (prime_dec_gen a (a - 1)); auto with zarith; intros; elimtype False; auto with zarith ].",
            "VernacExtend",
            "1566294f9ebe5a31418188d46579e9f9393f1145"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma not_prime_gen : forall a b : Z, 1 < a -> 1 < b -> b < a -> ~ prime a -> (forall c : Z, b < c < a -> rel_prime c a) -> exists q : Z, exists b : Z, a = q * b /\\ 1 < q /\\ 1 < b.",
            "VernacStartTheoremProof",
            "8aeab5e5187857fe738e7e3047c6f44b62007cae"
        ],
        [
            "induction b using ind_prime; intros.",
            "VernacExtend",
            "1d6cd96fa3c518a40e4940cf009c2e2ff6c24d65"
        ],
        [
            "destruct (Zdivide_dec b a) as [(q,H5)|n].",
            "VernacExtend",
            "5dc54cda6ae805ef23c1e973b3d8ca2215b25c46"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "exists q; exists b; intuition; apply (Zmult_gt_0_lt_reg_r 1 q b); auto with zarith.",
            "VernacExtend",
            "858cfb1ff4c5a0b575aa059196b5bdd287d6ac04"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "case (rel_prime_dec b a); intro.",
            "VernacExtend",
            "c6324187caf4945101490b514911a790f3af7344"
        ],
        [
            "*",
            "VernacBullet",
            "8a329d054468e0c41ce333043e0978e30eed7b98"
        ],
        [
            "case (Z_eq_dec b 2); intro.",
            "VernacExtend",
            "f20cf828ec673b99159af64d9dad90d4d3c7b72c"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "absurd (prime a); try assumption.",
            "VernacExtend",
            "e6af31aba7adc6406e07b547c1876c4b545d3430"
        ],
        [
            "apply prime_intro; auto; rewrite e in H4; rewrite e in r; generalize (rel_prime_1 a); intros; case (Z_eq_dec n0 1); intro; try (rewrite e0; assumption); case (Z_eq_dec n0 2); intro; try (rewrite e0; assumption); apply H4; auto with zarith.",
            "VernacExtend",
            "ef9e42e2e5ef70e8e2e88b2d31e54fe63b963105"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "assert (R_prime (b - 1) b) by (unfold R_prime; intuition).",
            "VernacExtend",
            "8beb792f9f8f730d9537514b5619ec7d50cfac9f"
        ],
        [
            "assert (1 < b - 1) by auto with zarith.",
            "VernacExtend",
            "d38f5a7bfcbf403fb3f9f4649e38bf4e4d95655a"
        ],
        [
            "assert (b - 1 < a) by auto with zarith.",
            "VernacExtend",
            "df8ba8a7657623789b995db8dcb460afe581b26c"
        ],
        [
            "assert (forall c : Z, (b - 1) < c < a -> rel_prime c a) by (intros; case (Z_eq_dec c b); intro; try (rewrite e; assumption); apply H4; auto with zarith).",
            "VernacExtend",
            "d8c31a42d4873bffd663fd2df2902724725fc080"
        ],
        [
            "elim (H _ H5 H0 H6 H7 H3 H8); intros; elim H9; clear H9; intros; exists x; exists x0; intuition.",
            "VernacExtend",
            "2c92a6e722a3dc8c2c3c1ef506a5f8b121cd2f40"
        ],
        [
            "*",
            "VernacBullet",
            "8a329d054468e0c41ce333043e0978e30eed7b98"
        ],
        [
            "elim (not_rel_prime1 _ _ n0); clear n0; intros; do 2 (elim H5; clear H5; intros); elim H6; clear H6; intros; destruct H7 as (q,H7).",
            "VernacExtend",
            "174fa8ed9eb4de73748ea9cbedb07e949fd4cf33"
        ],
        [
            "assert (x <> 0) by (assert (a <> 0) by auto with zarith; rewrite H7 in H10; elim (Zmult_neq_0 _ _ H10); auto).",
            "VernacExtend",
            "c1317338faabaa7f63f2a8968465f1f3692b87e8"
        ],
        [
            "case (Z_le_dec 0 x); intro.",
            "VernacExtend",
            "fc018397aec29c320251d0499e12c13565b93860"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "exists q; exists x; intuition; rewrite H7 in H0.",
            "VernacExtend",
            "76ebb1c99afe89f7d1b344013bcd1b211a150f0f"
        ],
        [
            "assert (0 < q * x) by auto with zarith.",
            "VernacExtend",
            "0a82fa93ade9cb9272f566e4cd9c1df1d82d3cab"
        ],
        [
            "assert (0 < x) by auto with zarith.",
            "VernacExtend",
            "e274622e43f6bf1912465e23b154b3c0b81c687b"
        ],
        [
            "generalize (Zmult_lt_0_reg_r _ _ H12 H11); intro; case (Z_eq_dec q 1); auto with zarith; intro; elimtype False; rewrite e in H7; rewrite Zmult_1_l in H7; destruct H5 as (q0,H5); rewrite H5 in H1; cut (0 < q0 * x); auto with zarith; intro; generalize (Zmult_lt_0_reg_r _ _ H12 H14); intro; rewrite H7 in H2; rewrite <- (Zmult_1_l x) in H2; rewrite H5 in H2; generalize (Zmult_lt_reg_r _ _ _ H12 H2); auto with zarith.",
            "VernacExtend",
            "0d07dc7389d17db07c32f5b6d4d9716e2ef9ffbf"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "exists (-q); exists (-x); intuition; try (rewrite H7; ring); rewrite H7 in H0; replace (q * x) with (-q * -x) in H0 by ring.",
            "VernacExtend",
            "bf4b00f410293a86adaa48d6c56a706b800bd409"
        ],
        [
            "assert (0 < -q * -x) by auto with zarith.",
            "VernacExtend",
            "2ab1976df1b690f1fe7752444eba335ef576b8b7"
        ],
        [
            "assert (0 < -x) by auto with zarith.",
            "VernacExtend",
            "a050e9532bbeec4124c3f06f6e7b3688b5ba63f8"
        ],
        [
            "generalize (Zmult_lt_0_reg_r _ _ H12 H11); intro; case (Z_eq_dec q (-1)); auto with zarith; intro; elimtype False; rewrite e in H7; rewrite Zmult_comm in H7; rewrite <- Zopp_eq_mult_neg_1 in H7; destruct H5 as (q0,H5); replace (q0 * x) with (-q0 * -x) in H5 by ring; rewrite H5 in H1; assert (0 < -q0 * -x) by auto with zarith; generalize (Zmult_lt_0_reg_r _ _ H12 H14); intro; rewrite <- (Zmult_1_l a) in H2; rewrite H7 in H2; rewrite H5 in H2; generalize (Zmult_lt_reg_r _ _ _ H12 H2); auto with zarith.",
            "VernacExtend",
            "a3c31fa7e03fed326dbc5effac107144ce8e926b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma not_prime : forall a : Z, 1 < a -> ~ prime a -> exists q : Z, exists b : Z, a = q * b /\\ 1 < q /\\ 1 < b.",
            "VernacStartTheoremProof",
            "37165b9da8f83666a18b526e79f995db033bf18e"
        ],
        [
            "intros; case (Z_eq_dec a 2); intro; [ elimtype False; rewrite e in H0; generalize (prime_2); auto | apply (not_prime_gen a (a - 1)); auto with zarith; intros; elimtype False; auto with zarith ].",
            "VernacExtend",
            "53df8a8515d01973d33a44662c507dbccb24e29e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition R_fact (x y : Z) := 1 < x /\\ 1 < y /\\ exists q : Z, y = q * x /\\ 1 < q.",
            "VernacDefinition",
            "de80ae42a356ab1e7df660c268e890844236c29d"
        ],
        [
            "Lemma R_fact_wf : well_founded R_fact.",
            "VernacStartTheoremProof",
            "3381da5041e70f695db7c06dc01e151c8a5981d3"
        ],
        [
            "apply (well_founded_lt_compat _ f_Z R_fact); unfold R_fact, f_Z; intros; apply Zabs_nat_lt; intuition; elim H2; clear H2; intros; elim H1; clear H1; intros; replace x with (1 * x); try ring; rewrite H1; apply Zmult_lt_compat_r; auto with zarith.",
            "VernacExtend",
            "7698dacf8b6ea327aa2e626db5ca296ede4f9ccf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ind_fact : forall P : Z -> Prop, (forall x : Z, (forall y : Z, (R_fact y x -> P y)) -> P x) -> forall x : Z, P x.",
            "VernacStartTheoremProof",
            "acd3b59bebb2b2a5082c92fbebedc452f822be29"
        ],
        [
            "intros; generalize (well_founded_ind R_fact_wf P); auto.",
            "VernacExtend",
            "7e7549fa192c9102c752cbd2f386c7b2b69494b1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Zfact : forall a : Z, 1 < a -> exists b : Z, (b | a) /\\ prime b.",
            "VernacStartTheoremProof",
            "e13626c161a6cedf4695157aeb3fa3337f2c3aa5"
        ],
        [
            "intro a; pattern a; match goal with | |- (?p _) => simpl; apply (ind_fact p); intros; case (prime_dec x); intro; [ exists x; intuition | elim (not_prime _ H0 H1); intros; do 2 (elim H2; clear H2; intros); elim H3; clear H3; intros; cut (exists b : Z, (b | x1) /\\ prime b); try (apply H; try assumption; unfold R_fact; intuition; exists x0; intuition); intro; do 2 (elim H5; clear H5; intros); exists x2; intuition; elim H5; clear H5; intros; rewrite H5 in H2; rewrite Zmult_assoc in H2; apply (Zdivide_intro _ _ _ H2) ] end.",
            "VernacExtend",
            "7a68ab56cd003002286c87924267e3a470f779bb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition R_p4 (x y : Z) := 0 <= x /\\ 1 < y /\\ exists d : Z, y = d * d * x /\\ 1 < d.",
            "VernacDefinition",
            "a4f71895831a488b9ab685f319505d37094957d5"
        ],
        [
            "Lemma R_p4_wf : well_founded R_p4.",
            "VernacStartTheoremProof",
            "3b03615d26dd42a2216d3d59f1a7006061592167"
        ],
        [
            "apply (well_founded_lt_compat _ f_Z R_p4); unfold R_p4, f_Z; intros; apply Zabs_nat_lt; intuition; elim H2; clear H2; intros; elim H1; clear H1; intros; cut (1 < x0 * x0); try (cut (1 >= 0); auto with zarith; intro; generalize (sqr_gt _ _ H3 H2); simpl; progress auto); intro; cut (y <> 0); auto with zarith; intro; rewrite H1 in H4; elim (Zmult_neq_0 _ _ H4); intros; rewrite H1; pattern x at 1; replace x with (1 * x); try ring; apply Zmult_lt_compat_r; auto with zarith.",
            "VernacExtend",
            "b20a069ef773a3d0065a2ade6db0ff06812b1940"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ind_p4 : forall P : Z -> Prop, (forall x : Z, (forall y : Z, (R_p4 y x -> P y)) -> P x) -> forall x : Z, P x.",
            "VernacStartTheoremProof",
            "b5549b981e16c8b2acdd4d69a214d9ce91280e4a"
        ],
        [
            "intros; generalize (well_founded_ind R_p4_wf P); auto.",
            "VernacExtend",
            "5419b6824f7b29d923861b494082de7f9e11f150"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqr_prime1 : forall a : Z, is_sqr a -> forall b : Z, (b | a) -> prime b -> (b * b | a).",
            "VernacStartTheoremProof",
            "9719aa7cfc5970e673926d2d39842c14861529c7"
        ],
        [
            "intros; elim H; clear H; intros; elim H2; clear H2; intros; elim H2; clear H2; intros; rewrite <- H2 in H0; elim (prime_mult _ H1 _ _ H0); intro; generalize (divide_sqr _ _ H4); clear H4; intro; rewrite H2 in H4; assumption.",
            "VernacExtend",
            "b399c362e4820933018caea5a955e5955f8dcb19"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqr_prime2 : forall a b c : Z, (a | b) -> (a * a | b * c) -> prime a -> (a * a | b) \\/ (a | c).",
            "VernacStartTheoremProof",
            "a7539e9b56a88454fd897704829095dade47103a"
        ],
        [
            "intros; elim H; intros q H2; elim H0; intros q0 H3; rewrite H2 in H3; elim H1; intros; replace (q * a * c) with (a * (q * c)) in H3; try ring; replace (q0 * (a * a)) with (a * (q0 * a)) in H3; try ring; cut (a <> 0); auto with zarith; intro; generalize (Zmult_eq_reg_l _ _ _ H3 H6); clear H3; intro; generalize (Zdivide_intro _ _ _ H3); clear H3; intro; elim (prime_mult _ H1 _ _ H3); try tauto; intro; elim H7; intros; rewrite H8 in H2; rewrite <- Zmult_assoc in H2; generalize (Zdivide_intro _ _ _ H2); tauto.",
            "VernacExtend",
            "9a805a3fea4a5ad8cfa3606c592bda9f8e5a9837"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prop4 : forall p q : Z, 0 <= p -> 0 <= q -> rel_prime p q -> is_sqr (p * q) -> is_sqr p /\\ is_sqr q.",
            "VernacStartTheoremProof",
            "8aff602c84510388823dff1e9c3332daf303290f"
        ],
        [
            "split; generalize H2; generalize H1; generalize H0; generalize H; [ pattern p | pattern q ]; match goal with | |- (?p _) => simpl; apply (ind_p4 p); intros end; match goal with | |- is_sqr ?x => elim (Z_lt_dec 1 x); intro; [ idtac | elim (Z_eq_dec x 0); intro; [ rewrite a; unfold is_sqr; intuition; exists 0; intuition | elim (Z_eq_dec x 1); intro; [ rewrite a; unfold is_sqr; intuition; exists 1; intuition | elimtype False; auto with zarith ] ] ] end; generalize (sqr_prime1 _ H7); intro; elim (Zfact _ a); intros; elim H9; clear H9; intros; (generalize (Zdivide_mult_l _ _ q H9); intro; generalize (H8 _ H11 H10)) || (generalize (Zdivide_mult_r _ p _ H9); intro; generalize (H8 _ H11 H10)); intro; elim (sqr_prime2 _ _ _ H9 H12 H10) || (rewrite (Zmult_comm p) in H12; elim (sqr_prime2 _ _ _ H9 H12 H10)); intros; try (elimtype False; elim H10; intros; cut (x0 <> 1); auto with zarith; intro; cut (x0 <> -1); auto with zarith; intro; generalize (not_rel_prime2 _ _ _ H9 H13 H16 H17); progress auto || (generalize (rel_prime_sym _ _ H6); auto)); elim H13; intros q0 ?; cut (is_sqr q0); try (intro; elim H15; clear H15; intros; do 2 (elim H16; clear H16; intros); rewrite <- H16 in H14; unfold is_sqr; intuition; rewrite H14; exists (x0 * x1); split; try ring; elim H10; intros; apply Zmult_le_0_compat; auto with zarith); elim H10; intros; cut (0 <= q0); try (cut (x0 <> 0); auto with zarith; intro; generalize (sqr_spos _ H17); clear H17; intro; cut (0 < x); auto with zarith; intro; rewrite H14 in H18; generalize (Zmult_gt_0_lt_0_reg_r _ _ H17 H18); progress auto with zarith); intro; (apply H3; try assumption; [ unfold R_p4; intuition; exists x0; intuition; rewrite H14; ring | rewrite H14 in H6; (apply (relp_mult3 q0 (x0 * x0)) || (apply rel_prime_sym; apply (relp_mult3 q0 (x0 * x0)); apply rel_prime_sym)); assumption | rewrite H14 in H7; (replace (q0 * (x0 * x0) * q) with (x0 * x0 * (q0 * q)) in H7; try ring; apply (is_sqr_compat x0); progress auto with zarith) || (replace (p * (q0 * (x0 * x0))) with (x0 * x0 * (p * q0)) in H7; try ring; apply (is_sqr_compat x0); auto with zarith) ]).",
            "VernacExtend",
            "58867f38c9cf0f7e7fb3786889ff5e538a709183"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prop4b : forall p q : Z, 0 <= p -> 0 <= q -> p <= q -> rel_prime p q -> is_sqr (p * (q * (q * q - p * p))) -> is_sqr p /\\ is_sqr q /\\ is_sqr (q * q - p * p).",
            "VernacStartTheoremProof",
            "6034cdce7e5367acb132092648c86ec2af933293"
        ],
        [
            "intros; generalize (prop2c _ _ H2); intro; generalize (rel_prime_oppr _ _ H4); clear H4; intro; replace (- (p * p - q * q)) with (q * q - p * p) in H4; try ring; generalize (rel_prime_sym _ _ H2); intro; generalize (prop2c _ _ H5); clear H5; intro; generalize (rel_prime_sym _ _ H4); clear H4; intro; generalize (rel_prime_sym _ _ H5); clear H5; intro; generalize (rel_prime_mult _ _ _ H4 H5); clear H4 H5; intro; generalize (rel_prime_sym _ _ H4); clear H4; intro; rewrite Zmult_assoc in H3; cut (0 <= p * q); auto with zarith; intro; cut (0 <= q * q - p * p); try (apply sqr_sub1; assumption); intro; generalize (prop4 _ _ H5 H6 H4 H3); clear H3 H4 H5 H6; intro; elim H3; clear H3; intros; generalize (prop4 _ _ H H0 H2 H3); tauto.",
            "VernacExtend",
            "7c188de1792a4422a1a104f3d954e4b72c2dda1d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relp_pq1 : forall p q : Z, p >= 0 -> p <= q -> (rel_prime p q) -> (distinct_parity p q) -> (rel_prime (q * q - p * p) (p * p + q * q)).",
            "VernacStartTheoremProof",
            "9976be7297bcaf9b89552e975d4e3fa27fd5c311"
        ],
        [
            "intros; cut (rel_prime (p * p) (q * q)); [ clear H1; intro; cut (distinct_parity (p * p) (q * q)); [ clear H2; intro; apply rel_prime_sym; apply prop1; try apply sqr_ge; assumption | apply (distp_sqr1 _ _ H2) ] | generalize (rel_prime_mult _ _ _ H1 H1); clear H1; intro; generalize (rel_prime_sym _ _ H1); clear H1; intro; generalize (rel_prime_mult _ _ _ H1 H1); clear H1; intro; apply rel_prime_sym; assumption ].",
            "VernacExtend",
            "848058c96f74824d4eb4c50a72b71f684b56a62f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relp_pq2 : forall p q : Z, (rel_prime p q) -> (distinct_parity p q) -> (rel_prime (2 * p * q) (p * p + q * q)).",
            "VernacStartTheoremProof",
            "ad979df47f7ba31a72ff1dbadd16d9ea392ce94c"
        ],
        [
            "intros; generalize (prop2b _ _ H); intro; generalize (rel_prime_sym _ _ H); intro; generalize (prop2b _ _ H2); clear H2; intro; rewrite Zplus_comm in H2; generalize (rel_prime_sym _ _ H1); clear H1; intro; generalize (rel_prime_sym _ _ H2); clear H2; intro; generalize (rel_prime_mult _ _ _ H1 H2); clear H1 H2; intro; cut (Zodd (p * p + q * q)); [ intro; generalize (rel_prime_2 _ H2); clear H2; intro; generalize (rel_prime_sym _ _ H2); clear H2; intro; generalize (rel_prime_mult _ _ _ H2 H1); clear H1 H2; intro; apply rel_prime_sym; rewrite <- Zmult_assoc; assumption | generalize (distp_sqr1 _ _ H0); clear H0; intro; elim (distp_odd _ _ H0); auto ].",
            "VernacExtend",
            "f8855120655419dba5f004509476c7892496d447"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma not_IZR_0 : forall a : Z, (IZR a <> 0)%R -> a <> 0.",
            "VernacStartTheoremProof",
            "3bbdd82d40f8bcace669f242b65f3122108df969"
        ],
        [
            "intros; red; intro; rewrite H0 in H; simpl in H; auto.",
            "VernacExtend",
            "b20fe2776ce9dc84ac50c5baba3cd7c7913e035e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqr_inv : forall a b : Z, b <> 0 -> (1 + IZR a * / IZR b * (IZR a * / IZR b) <> 0)%R.",
            "VernacStartTheoremProof",
            "e8092e9dd564ad025d9a07442f5d8b5d38694e78"
        ],
        [
            "intros; cut (1 + IZR a * / IZR b * (IZR a * / IZR b) = ((IZR a * IZR a + IZR b * IZR b) / (IZR b * IZR b)))%R.",
            "VernacExtend",
            "dfd1dc107824b2b115aeda33433ae82094385125"
        ],
        [
            "intro; rewrite H0; unfold Rdiv; split_Rmult; [ discrR; apply sqr_sum; assumption | apply Rinv_neq_0_compat; split_Rmult; discrR; assumption ].",
            "VernacExtend",
            "ceff291bd4ee00e26e793975f81193a979009b29"
        ],
        [
            "field; discrR; assumption.",
            "VernacExtend",
            "d348da48922ae5685b5f91734a17bd79609bc13c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rdiv_ge_0 : forall a b : R, (a >= 0 -> b > 0 -> a / b >= 0)%R.",
            "VernacStartTheoremProof",
            "b9dc1eb8c65e06078eed231aa4dbad3dffb980f4"
        ],
        [
            "intros; unfold Rge; elim H; clear H; intro; [ left; unfold Rdiv, Rgt; unfold Rgt in H0; unfold Rgt in H; generalize (Rinv_0_lt_compat _ H0); clear H0; intro; replace 0%R with (0 * / b)%R; [ apply Rmult_lt_compat_r; auto | ring ] | right; rewrite H; field; auto with real ].",
            "VernacExtend",
            "2b5106f80d4a107931422361950a06e363aea0cb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rcross_prod : forall a b c d : R, (b <> 0 -> d <> 0 -> a / b = c / d -> a * d = b * c)%R.",
            "VernacStartTheoremProof",
            "5c91a8e2b98217d284ecdc6f515c54df885d4545"
        ],
        [
            "intros; generalize (Rmult_eq_compat_l (b * d) _ _ H1); clear H1; intro; replace (b * d * (a / b))%R with (a * d)%R in H1; [ replace (b * d * (c / d))%R with (b * c)%R in H1; [ assumption | field; assumption ] | field; assumption ].",
            "VernacExtend",
            "dc4cbb9f6e27f41bcface22932b6088bf6574091"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition frac (a b : Z) := ((IZR a) / (IZR b))%R.",
            "VernacDefinition",
            "32d5ee99019eff6cd99a9640d1cd773cd036562f"
        ],
        [
            "Definition is_rat (r : R) := exists pq : Z * Z, let (p,q) := pq in ~(q = 0) /\\ r = (frac p q).",
            "VernacDefinition",
            "7c43040334ec6171a4d23fe4781f307f8fdb9229"
        ],
        [
            "Definition is_ratp (c : R * R) := let (x,y) := c in (is_rat x) /\\ (is_rat y).",
            "VernacDefinition",
            "c0b4e96bd1e7cc18ae724316532cd3bf1921a7ab"
        ],
        [
            "Lemma frac_eq : forall a b c d : Z, b <> 0 -> c <> 0 -> (frac a (b * c)) = (frac d c) -> a = b * d.",
            "VernacStartTheoremProof",
            "5e50552a0da800539c192f2541974113786a18b1"
        ],
        [
            "unfold frac; intros; cut (IZR (b * c) <> 0%R); [ intro; cut (IZR c <> 0%R); [ intro; generalize (Rcross_prod _ _ _ _ H2 H3 H1); clear H1; intro; rewrite mult_IZR in H1; cut (IZR c * IZR a = IZR c * (IZR b * IZR d))%R; [ clear H1; intro; generalize (Rmult_eq_reg_l _ _ _ H1 H3); clear H1; intro; rewrite <- mult_IZR in H1; apply eq_IZR; assumption | rewrite (Rmult_comm (IZR c) (IZR a)); rewrite H1; ring ] | apply not_O_IZR; assumption ] | rewrite mult_IZR; split_Rmult; apply not_O_IZR; assumption ].",
            "VernacExtend",
            "ec32fd8baa0e8dd916f299e1960e5bf0ce5a8bda"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma frac_rat : forall a b : Z, b <> 0 -> (frac a b >= 0)%R -> (frac a b <= 1)%R -> a >= 0 /\\ b > 0 /\\ a <= b \\/ a <= 0 /\\ b < 0 /\\ b <= a.",
            "VernacStartTheoremProof",
            "f6c4d9ab4e2a5cafd7780301271952c26dbaaee6"
        ],
        [
            "unfold frac, Rdiv; intros; generalize (Rge_le _ _ H0); clear H0; intro; elim (Z_dec b 0); intros; try (elim a0; clear a0; intros); [ right; cut (0 < -b); auto with zarith; intro; generalize (IZR_lt _ _ H2); clear H2; intro; simpl in H2; replace 0%R with (/ IZR (- b) * 0)%R in H0; try ring; rewrite (Rmult_comm (IZR a)) in H0; cut (/ IZR b * IZR a = / IZR (- b) * IZR (- a))%R; try (repeat rewrite Ropp_Ropp_IZR; field; try rewrite <- Ropp_Ropp_IZR; apply not_O_IZR; auto with zarith); intro; rewrite H3 in H0; generalize (Rinv_0_lt_compat _ H2); clear H2; intro; generalize (Rmult_le_reg_l _ _ _ H2 H0); intro; generalize (le_O_IZR _ H4); clear H4; intro; rewrite Rmult_comm in H1; rewrite H3 in H1; replace 1%R with (/ IZR (- b) * IZR (- b))%R in H1; try (field; apply not_O_IZR; auto with zarith); generalize (Rmult_le_reg_l _ _ _ H2 H1); intro; generalize (le_IZR _ _ H5); clear H5; intro; intuition | left; generalize (Zgt_lt _ _ b0); intro; generalize (IZR_lt _ _ H2); clear H2; intro; simpl in H2; replace 0%R with (/ IZR b * 0)%R in H0; try ring; rewrite (Rmult_comm (IZR a)) in H0; generalize (Rinv_0_lt_compat _ H2); clear H2; intro; generalize (Rmult_le_reg_l _ _ _ H2 H0); intro; generalize (le_O_IZR _ H3); clear H3; intro; rewrite Rmult_comm in H1; replace 1%R with (/ IZR b * IZR b)%R in H1; try (field; apply not_O_IZR; auto with zarith); generalize (Rmult_le_reg_l _ _ _ H2 H1); intro; generalize (le_IZR _ _ H4); clear H4; intro; intuition | contradiction ].",
            "VernacExtend",
            "0628fb504eb0c1606fa1ee7cf9cd5a8cdc39745f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma frac_simp : forall a b c : Z, b <> 0 -> c <> 0 -> frac (c * a) (c * b) = frac a b.",
            "VernacStartTheoremProof",
            "54041ad03556edff5b45351aef2e2ce1d8c7ef01"
        ],
        [
            "intros; unfold frac; repeat rewrite mult_IZR; field; split; apply not_O_IZR; assumption.",
            "VernacExtend",
            "8ad392a43f2360af971e3517a127938c3d74d838"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma frac_opp : forall a b : Z, b <> 0 -> frac (-a) (-b) = frac a b.",
            "VernacStartTheoremProof",
            "87f66b2112f3ebbf7422cb42d3970b8d1ae21a43"
        ],
        [
            "intros; replace (-a) with (-1 * a); try replace (-b) with (-1 * b); try rewrite frac_simp; auto with zarith.",
            "VernacExtend",
            "588f3fffffd5a4eef8a42e0b30707220485839d7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relp_rat : forall r : R, (is_rat r) -> (r >= 0)%R -> (r <= 1)%R -> exists pq : Z * Z, let (p,q) := pq in (p >= 0) /\\ (q > 0) /\\ (p <= q) /\\ (rel_prime p q) /\\ r = (frac p q).",
            "VernacStartTheoremProof",
            "fa214842aac2a495873c5703655eb25a5c573d38"
        ],
        [
            "intros; elim H; clear H; induction x; intro; elim H; clear H; intros; elim (rel_prime_dec a b); intro; [ rewrite H2 in H0; rewrite H2 in H1; elim (frac_rat _ _ H H0 H1); intro; [ exists (a, b); tauto | exists (-a, -b); intuition; [ apply rel_prime_opp | rewrite (frac_opp a b H) ]; assumption ] | elim (not_rel_prime1 _ _ b0); clear b0; intros; elim H3; clear H3; intros; elim (gcd_rel_prime _ _ _ H3); clear H3; intros; elim H3; clear H3; intros; elim H3; clear H3; intros; elim H5; clear H5; intros; rewrite H5 in H; elim (Zmult_neq_0 _ _ H); clear H; intros; rewrite H3 in H2; rewrite H5 in H2; rewrite (frac_simp x0 _ _ H7 H) in H2; rewrite H2 in H0; rewrite H2 in H1; elim (frac_rat _ _ H7 H0 H1); intro; [ exists (x0, x1); intuition | exists (-x0, -x1); intuition; [ apply rel_prime_opp | rewrite (frac_opp x0 x1 H7) ]; assumption ] ].",
            "VernacExtend",
            "48b8a8cc1b39871db608caf9386ed50de1dacd3f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve rel_prime_sym : zarith.",
            "VernacHints",
            "bdac4391adf62432a8fc3a3949ac68f6a8e7d79b"
        ],
        [
            "Hint Immediate sqr_0 sqr_pos sqr_spos sqr_sum sqr_sum2 sqr_sum3 sqr_sum4 sqr_sum5 sqr_sub1 sqr_sub2 sqr_sub3 sqr_ge : zarith.",
            "VernacHints",
            "4af19d95f6d81be322d370518a7501238cd7c985"
        ],
        [
            "Hint Immediate sqr_inv Rdiv_ge_0 : reals.",
            "VernacHints",
            "3db4671e95b5f0953a08c431a3019e2fcc76cae2"
        ]
    ],
    "proofs": [
        {
            "name": "is_sqr_sqr",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "intro; unfold is_sqr; split; try (apply Zge_le; apply sqr_pos); elim (Z_le_dec 0 n); intro; [ exists n; auto | exists (- n); intuition; ring ].",
                        "VernacExtend",
                        "f6a251e7694b36a1741d2bb3be58923b159f12df"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_sqr_mult",
            "line_nb": 10,
            "steps": [
                {
                    "command": [
                        "unfold is_sqr; intros; elim H; clear H; intros; elim H0; clear H0; intros; elim H1; clear H1; intros; elim H1; clear H1; intros; elim H2; clear H2; intros; elim H2; clear H2; intros.",
                        "VernacExtend",
                        "476e63749a9d122e1d86f4794d65dc182a61d53b"
                    ]
                },
                {
                    "command": [
                        "split; [ auto with zarith | exists (x * x0); rewrite <- H1; rewrite <- H2; intuition; ring ].",
                        "VernacExtend",
                        "807876c7aaeed980eefacb923ccf479ec58d4297"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqr_0",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "intros; elim (Zmult_integral _ _ H); auto.",
                        "VernacExtend",
                        "7bf0f1ce85a0a7a0ae11f24a36436854cf8f0c7c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqr_compat",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "intros; cut (a * a - b * b = 0); auto with zarith; clear H; intro; replace (a * a - b * b) with ((a + b) * (a - b)) in H; try ring; elim (Zmult_integral _ _ H); auto with zarith.",
                        "VernacExtend",
                        "69581c930276b8e1b2f0d1b6e53cee7945575c8d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqr_le",
            "line_nb": 20,
            "steps": [
                {
                    "command": [
                        "intro; elim (Z_le_dec 0 a); intro; [ elim (Z_eq_dec a 0); intro; try (rewrite a1; auto with zarith); pattern a at 1; replace a with (a * 1); try ring; apply (Zmult_le_compat a 1 a a) | generalize (sqr_pos a) ]; auto with zarith.",
                        "VernacExtend",
                        "e9d3b6af4fc1a3009e0bea881986d4f8ea8ae049"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqr_spos",
            "line_nb": 23,
            "steps": [
                {
                    "command": [
                        "intros; elim (not_Zeq _ _ H); clear H; intro.",
                        "VernacExtend",
                        "5b35715b1487e55ae9f43b3a5610adafde5ae290"
                    ]
                },
                {
                    "command": [
                        "unfold Zlt in H; rewrite Zcompare_opp in H; fold (- (0) < - z) in H; simpl in H; cut (z * z = - z * - z); [ intro; rewrite H0; apply Zmult_gt_0_compat; auto with zarith | ring ].",
                        "VernacExtend",
                        "f076e5bce5b8097e7845af0445dfc5a46450d832"
                    ]
                },
                {
                    "command": [
                        "apply Zmult_gt_0_compat; auto with zarith.",
                        "VernacExtend",
                        "8c80fc2a2cd89db95ccb15ce73daf6573198204d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqr_poss",
            "line_nb": 28,
            "steps": [
                {
                    "command": [
                        "intros;intro;rewrite H0 in H;auto with zarith.",
                        "VernacExtend",
                        "02c1ce8936126ca25eacabc0d86207ccdaefb4bf"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqr_lt",
            "line_nb": 31,
            "steps": [
                {
                    "command": [
                        "intros; case (Z_le_dec 0 a); intro; [ pattern a at 1; rewrite <- Zmult_1_r; apply Zmult_lt_compat_l; auto with zarith | generalize (sqr_spos _ H); intro; auto with zarith ].",
                        "VernacExtend",
                        "b34caf8445d3ec1b981a9b9cf47207643f0fee53"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqr_sum",
            "line_nb": 34,
            "steps": [
                {
                    "command": [
                        "intros; elim (Z_eq_dec a 0).",
                        "VernacExtend",
                        "6c20c197e9a126842451326d36677edce93a8dee"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite a0; simpl; generalize (sqr_spos b H); intro; auto with zarith.",
                        "VernacExtend",
                        "51cbd665880b56c19014e05ee97ee8d6a2ffb31a"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (sqr_spos a b0); intro; generalize (sqr_spos b H); intro; auto with zarith.",
                        "VernacExtend",
                        "44944de5eaffc25c0c9ae0d777ae8f2d56e28f0d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqr_sum2",
            "line_nb": 39,
            "steps": [
                {
                    "command": [
                        "intros; generalize (Zplus_le_compat 0 (a * a) 0 (b * b)); simpl; intro; apply H; apply Zge_le; apply sqr_pos.",
                        "VernacExtend",
                        "d6194e460e51de025678b7fdaa911b0f23248c70"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqr_sum3",
            "line_nb": 42,
            "steps": [
                {
                    "command": [
                        "intros; apply Zlt_gt; fold (0 + 0); apply Zplus_le_lt_compat; [ apply Zge_le; apply sqr_pos | apply Zgt_lt; auto with zarith ].",
                        "VernacExtend",
                        "519d6fe7b487646e9cc53e30109e2668ee3ecfd7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqr_sum4",
            "line_nb": 45,
            "steps": [
                {
                    "command": [
                        "intros; elim (Z_eq_dec a 0); intro; [ elim (Z_eq_dec b 0); intro; [ auto | generalize (sqr_sum a _ b0); tauto ] | generalize (sqr_sum b _ b0); rewrite Zplus_comm in H; tauto].",
                        "VernacExtend",
                        "8ff411e9d717cff9adf50137bf1d1e88515b8a8b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqr_sub1",
            "line_nb": 48,
            "steps": [
                {
                    "command": [
                        "intros; replace (a * a - b * b) with ((a + b) * (a - b)); try ring; apply Zmult_le_0_compat; auto with zarith.",
                        "VernacExtend",
                        "40c095a8c7427b15e96fc1e36f033a6a15488606"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqr_sub2",
            "line_nb": 51,
            "steps": [
                {
                    "command": [
                        "intros; replace (a * a - b * b) with ((a + b) * (a - b)); try ring; apply Zmult_lt_0_compat; auto with zarith.",
                        "VernacExtend",
                        "bafa92f3d2307aabd10ea122a4965fc5268dbf17"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqr_sub3",
            "line_nb": 54,
            "steps": [
                {
                    "command": [
                        "intros; replace (a * a - b * b) with ((a + b) * (a - b)) in H1; try ring; cut (0 < a + b); auto with zarith; intro; rewrite Zmult_comm in H1; generalize (Zmult_lt_0_reg_r _ _ H2 H1); clear H1 H2; intro; auto with zarith.",
                        "VernacExtend",
                        "d99e12b5c5b7af5e4c03df3db1de20d782de6e19"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqr_2",
            "line_nb": 57,
            "steps": [
                {
                    "command": [
                        "intro; generalize (sqr_pos a); auto with zarith.",
                        "VernacExtend",
                        "530ab1c80eead326d175b9818409a023120e6418"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqr_gt",
            "line_nb": 60,
            "steps": [
                {
                    "command": [
                        "intros; generalize (Zge_le _ _ H); clear H; intro; elim (Zle_lt_or_eq _ _ H); clear H; intro.",
                        "VernacExtend",
                        "a8af411f8deb43f4625cbc469cf20b3fe85bdb9e"
                    ]
                },
                {
                    "command": [
                        "generalize (Zmult_lt_compat_l _ _ _ H H0); intro; assert (0 < b); auto with zarith; generalize (Zmult_lt_compat_r _ _ _ H2 H0); auto with zarith.",
                        "VernacExtend",
                        "bed05987e9ca05e239845eb143adc6863a65af8d"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H; rewrite <- H in H0; apply Zgt_lt; auto with zarith.",
                        "VernacExtend",
                        "89831eabb097938cbbd74d75d872b6f299d094c7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqr_ge",
            "line_nb": 65,
            "steps": [
                {
                    "command": [
                        "intros; apply Zmult_le_compat; auto with zarith.",
                        "VernacExtend",
                        "ece2dbf0d27dd2cd5f8770f88dddaca6fffb4f39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zle_square_simpl",
            "line_nb": 68,
            "steps": [
                {
                    "command": [
                        "intros; elim (Zle_lt_or_eq _ _ H1); intro; [ generalize (Zlt_square_simpl _ m H H2) | generalize (Zeq_minus _ _ H2); clear H2; intro; replace (m * m - n * n) with ((m + n) * (m - n)) in H2; try ring; elim (Zmult_integral _ _ H2); clear H2; intro ]; auto with zarith.",
                        "VernacExtend",
                        "8d4c6cf8ec3f9745f0799337d4ef733b6a37aae8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "neq_1",
            "line_nb": 71,
            "steps": [
                {
                    "command": [
                        "intros; case (Z_eq_dec u 1); intro; case (Z_eq_dec v 1); intro; try tauto; elimtype False; [ rewrite e in H1; simpl in H1; rewrite e0 in H2; simpl in H2; rewrite H2 in H1; cut (2 * (m * m) = 0); auto with zarith; intro; elim (Zmult_integral _ _ H3); auto with zarith; intro; generalize (sqr_0 _ H4); auto | rewrite e in H1; simpl in H1; generalize (sqr_pos m); intro; generalize (sqr_pos n); intro; cut (m * m = 0 \\/ n * n = 0); try omega; intro; elim H5; clear H5; intros; generalize (sqr_0 _ H5); auto | rewrite e in H2; simpl in H2; replace (n * n - m * m) with ((n + m) * (n - m)) in H2; try ring; symmetry in H2; elim (Zmult_1_inversion_l _ _ H2); intro; rewrite Zmult_comm in H2; elim (Zmult_1_inversion_l _ _ H2); auto with zarith ].",
                        "VernacExtend",
                        "26f3b3154be9c59bd9aacf93b9c567be78b2ba4e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zmult_eq_reg_l",
            "line_nb": 74,
            "steps": [
                {
                    "command": [
                        "intros; apply eq_IZR; generalize (IZR_eq _ _ H); intro; repeat rewrite mult_IZR in H1; generalize (not_O_IZR _ H0); intro; apply (Rmult_eq_reg_l (IZR z)); assumption.",
                        "VernacExtend",
                        "9ea64908a0abf166b367c83a8124391202342f25"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zmult_neq_0",
            "line_nb": 77,
            "steps": [
                {
                    "command": [
                        "intros; elim (Z_eq_dec a 0); intro; [ rewrite a0 in H; simpl in H; auto | elim (Z_eq_dec b 0); intro; try (rewrite a0 in H; rewrite Zmult_comm in H; simpl in H); auto ].",
                        "VernacExtend",
                        "0bcd4f6dd659aa5b76e5b6617674f25519bcaee8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ndistp_eq",
            "line_nb": 82,
            "steps": [
                {
                    "command": [
                        "red; intros; do 2 (elim H; clear H; intros); match goal with | id : Zeven _ |- _ => generalize (Zeven_not_Zodd _ id) end; auto.",
                        "VernacExtend",
                        "a5d2dede8548728410bbb1453ce27c35532cfc9b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqr_sum5",
            "line_nb": 85,
            "steps": [
                {
                    "command": [
                        "intros; case (Z_eq_dec a 1); intro; [ rewrite e; replace (1 * 1 + b * b) with (1+b*b);[idtac|ring]; apply Zplus_lt_compat_l; case (Z_eq_dec b 1); intro; [ elimtype False; rewrite e in H1; rewrite e0 in H1; generalize (ndistp_eq 1); auto | apply sqr_lt; assumption ] | case (Z_eq_dec b 1); intro; [ rewrite e; replace (a * a + 1 * 1) with (a * a + 1); try ring; apply Zplus_lt_compat_r; apply sqr_lt; assumption | apply Zplus_lt_compat; apply sqr_lt; assumption ] ].",
                        "VernacExtend",
                        "0b360031e10baf4a24da0ad5f62b5480e683b9a0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zeven_def1",
            "line_nb": 88,
            "steps": [
                {
                    "command": [
                        "intros; generalize (Zeven_div2 _ H); intro; exists (Zdiv2 z); assumption.",
                        "VernacExtend",
                        "7115bd03750f39017695efbc74c1a492fc1d24c7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zeven_def2",
            "line_nb": 91,
            "steps": [
                {
                    "command": [
                        "intros; elim H; intros; rewrite H0; elim x; intros; simpl; auto.",
                        "VernacExtend",
                        "586b452072e363586689f33069f6f212947aeb1e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zodd_def1",
            "line_nb": 94,
            "steps": [
                {
                    "command": [
                        "apply Zodd_ex.",
                        "VernacExtend",
                        "80e306d1163d2e0125d4ed3809fb4a563284b352"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zodd_def2",
            "line_nb": 97,
            "steps": [
                {
                    "command": [
                        "intros; elim H; intros; rewrite H0; elim x; intros; simpl; auto.",
                        "VernacExtend",
                        "586b452072e363586689f33069f6f212947aeb1e"
                    ]
                },
                {
                    "command": [
                        "elim p; simpl; auto.",
                        "VernacExtend",
                        "ede515f6921cc0040fa2657abbb907301cc7554d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zodd_0",
            "line_nb": 101,
            "steps": [
                {
                    "command": [
                        "intros; intro; rewrite H0 in H; auto.",
                        "VernacExtend",
                        "8b5b29bc5c84bbbfd1647d45f8325cd101d8044b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zodd_opp1",
            "line_nb": 104,
            "steps": [
                {
                    "command": [
                        "intros; elim (Zodd_def1 _ H); clear H; intros; apply Zodd_def2; exists (-x - 1); rewrite <- (Zopp_involutive a); rewrite H; ring.",
                        "VernacExtend",
                        "f3a377164e683169be0ede0c7527044f557a1900"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zodd_opp2",
            "line_nb": 107,
            "steps": [
                {
                    "command": [
                        "intros; elim (Zodd_def1 _ H); clear H; intros; apply Zodd_def2; rewrite H; exists (-x - 1); ring.",
                        "VernacExtend",
                        "410a99c76d55d39871d0e424058e09f344b6b358"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zodd_sum1",
            "line_nb": 110,
            "steps": [
                {
                    "command": [
                        "intros; elim (Zodd_def1 _ H); clear H; intros; elim (Zodd_def1 _ H0); clear H0; intros; apply Zeven_def2; rewrite H; rewrite H0; exists (x + x0 + 1); ring.",
                        "VernacExtend",
                        "11ae242abf2892fe22e8562ba648b5f0bc87d0df"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zodd_sum2",
            "line_nb": 113,
            "steps": [
                {
                    "command": [
                        "intros; generalize (Zodd_opp2 _ H0); clear H0; intro; unfold Zminus; apply Zodd_sum1; assumption.",
                        "VernacExtend",
                        "d9a081a83c16c83a1dc80694813454944b6f8297"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zodd_sum3",
            "line_nb": 116,
            "steps": [
                {
                    "command": [
                        "intros; elim (Zodd_def1 _ H); clear H; intros; cut (a = 2 * x + 1 - 2 * b); auto with zarith; clear H; intro; rewrite H; apply Zodd_def2; exists (x - b); ring.",
                        "VernacExtend",
                        "dc2c86c5d6f1b417a7808c1a4c1fe4bf6ee06e6f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zodd_mult",
            "line_nb": 119,
            "steps": [
                {
                    "command": [
                        "intros; elim (Zodd_def1 u H); elim (Zodd_def1 v H0); intros k Hk k' Hk'; elim (Zeven_odd_dec k); elim (Zeven_odd_dec k'); intros.",
                        "VernacExtend",
                        "5bc4bbaa82c2eb0b5d5b251e74d61bde37186c26"
                    ]
                },
                {
                    "command": [
                        "elim (Zeven_def1 k a0); elim (Zeven_def1 k' a); intros t Ht t' Ht'; split with (t - t'); split with (2 * t + 2 * t' + 1); left; auto with zarith.",
                        "VernacExtend",
                        "4b50c475d2178d22230c7946c6e01c4d8f684136"
                    ]
                },
                {
                    "command": [
                        "elim (Zeven_def1 k a); elim (Zodd_def1 k' b); intros t Ht t' Ht'; split with (t + t' + 1); split with (2 * t - 2 * t' + 1); right; auto with zarith.",
                        "VernacExtend",
                        "4ba0d42b220ecdc7343c4ff96d2ad38e953ceec3"
                    ]
                },
                {
                    "command": [
                        "elim (Zeven_def1 k' a); elim (Zodd_def1 k b); intros t Ht t' Ht'; split with (t + t' +1); split with (2 * t' - 2 * t - 1); right; auto with zarith.",
                        "VernacExtend",
                        "b140fca9907690ada12fc33db22442ac4573e3f6"
                    ]
                },
                {
                    "command": [
                        "elim (Zodd_def1 k b0); elim (Zodd_def1 k' b); intros t Ht t' Ht'; split with (t - t'); split with (k' + k + 1); left; auto with zarith.",
                        "VernacExtend",
                        "47470da9e8bf5059d200d809b8968b53ad6d75ec"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zeven_sqr1",
            "line_nb": 126,
            "steps": [
                {
                    "command": [
                        "intros; generalize (Zeven_def1 _ H); clear H; intro; elim H; clear H; intros; rewrite H; apply Zeven_def2; exists (2 * x * x); ring.",
                        "VernacExtend",
                        "254e2fd06e49989665c7a56aa221272f8e17b03b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zeven_sqr2",
            "line_nb": 129,
            "steps": [
                {
                    "command": [
                        "induction n; auto; induction p; auto.",
                        "VernacExtend",
                        "99222895879f80f21c493cbd4eb329e642a2d172"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zodd_sqr1",
            "line_nb": 132,
            "steps": [
                {
                    "command": [
                        "intros; generalize (Zodd_def1 _ H); clear H; intro; elim H; clear H; intros; rewrite H; apply Zodd_def2; exists (2 * x * x + 2 * x); ring.",
                        "VernacExtend",
                        "8aea9de6917eb5ed26fb9d5cf4f52467180bccb7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zodd_sqr2",
            "line_nb": 135,
            "steps": [
                {
                    "command": [
                        "induction n; auto; induction p; auto.",
                        "VernacExtend",
                        "99222895879f80f21c493cbd4eb329e642a2d172"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "distp_neq",
            "line_nb": 138,
            "steps": [
                {
                    "command": [
                        "intros; elim H; clear H; intro; elim H; clear H; intros; [ elim (Zeven_def1 _ H); clear H; intros; elim (Zodd_def1 _ H0); clear H0; intros; rewrite H; rewrite H0 | elim (Zodd_def1 _ H); clear H; intros; elim (Zeven_def1 _ H0); clear H0; intros; rewrite H; rewrite H0 ]; auto with zarith.",
                        "VernacExtend",
                        "ec6648184042cb56d96a9553c52bdd3cc7776c5d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "distp_sqr1",
            "line_nb": 141,
            "steps": [
                {
                    "command": [
                        "intros; unfold distinct_parity; do 2 (elim H; clear H; intros); [ generalize (Zeven_sqr1 _ H); clear H; intro; generalize (Zodd_sqr1 _ H0) | generalize (Zodd_sqr1 _ H); clear H; intro; generalize (Zeven_sqr1 _ H0) ]; tauto.",
                        "VernacExtend",
                        "66dc0611e72e463bca695f47a8593fbd4658d1c0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "distp_sqr2",
            "line_nb": 144,
            "steps": [
                {
                    "command": [
                        "intros; unfold distinct_parity; elim H; clear H; intros; elim H; clear H; intros; [ left | right ]; repeat (match goal with | id : Zeven _ |- _ => generalize (Zeven_sqr2 _ id); clear id | id : Zodd _ |- _ => generalize (Zodd_sqr2 _ id); clear id end); tauto.",
                        "VernacExtend",
                        "9219756e99d1cf6bbbd6536c1b2c7aa3cebbbd14"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "distp_odd",
            "line_nb": 147,
            "steps": [
                {
                    "command": [
                        "unfold distinct_parity, both_odd; intros; elim H; clear H; intro; elim H; clear H; intros; [ elim (Zeven_def1 _ H); clear H; intros; elim (Zodd_def1 _ H0); clear H0; intros | elim (Zodd_def1 _ H); clear H; intros; elim (Zeven_def1 _ H0); clear H0; intros ]; split; apply Zodd_def2; (exists (x + x0); rewrite H; rewrite H0; solve [ ring ]) || (exists (x0 - x); rewrite H; rewrite H0; solve [ ring ] ) || (exists (x0 - x - 1); rewrite H; rewrite H0; ring).",
                        "VernacExtend",
                        "4b0985277d2e743950f2b1f82a70df08ad606803"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_divide1",
            "line_nb": 150,
            "steps": [
                {
                    "command": [
                        "intros; red; intro; elim H2; clear H2; intros; rewrite Zmult_assoc in H2; pattern b at 1 in H2; rewrite -> (Zred_factor0 b) in H2; rewrite (Zmult_comm b 1) in H2; generalize (Zmult_reg_r _ _ _ H1 H2); clear H2; intro; generalize (sym_eq H2); clear H2; intro; rewrite Zmult_comm in H2; generalize (Zmult_1_inversion_l _ _ H2); tauto.",
                        "VernacExtend",
                        "2ea524f82f7141b46d0fa545681f68e682eb5dfe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_divide2",
            "line_nb": 153,
            "steps": [
                {
                    "command": [
                        "intros; red; intro; elim H2; clear H2; intros; replace a with (1 * a) in H1; try ring; replace 0 with (0 * a) in H0; try ring; rewrite H2 in H1; rewrite H2 in H0; generalize (Zmult_lt_reg_r _ _ _ H H1); clear H1; intro; generalize (Zmult_lt_reg_r _ _ _ H H0); auto with zarith.",
                        "VernacExtend",
                        "54353a746775581700ca27af21c0507e7c542cf3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_prime_1",
            "line_nb": 156,
            "steps": [
                {
                    "command": [
                        "intro; unfold rel_prime; apply Zis_gcd_intro; auto with zarith.",
                        "VernacExtend",
                        "e37fe72524a4e274c24d22acd01ad4b663074529"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prime_2",
            "line_nb": 159,
            "steps": [
                {
                    "command": [
                        "apply prime_intro; auto with zarith; intros; case (Z_eq_dec n 1); intro; try (elimtype False; progress auto with zarith); rewrite e; apply rel_prime_1.",
                        "VernacExtend",
                        "134ad5f0fb804a2614574181b4840bf07341fad9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_prime_sym",
            "line_nb": 162,
            "steps": [
                {
                    "command": [
                        "unfold rel_prime; intros; apply Zis_gcd_sym; assumption.",
                        "VernacExtend",
                        "48a7cad3e49313b4c0603ef98b762c4838b69e98"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_prime_dec",
            "line_nb": 165,
            "steps": [
                {
                    "command": [
                        "intros; unfold rel_prime; elim (Zgcd_spec x y); intros; elim p; clear p; intros; elim (Z_eq_dec x0 1); intro; [ rewrite a in H; left; assumption | right; red; intro; elim H; clear H; intros; elim H1; clear H1; intros; generalize (H5 _ H H2); clear H H2 H3 H1 H4 H5; intro; elim (Zdivide_1 _ H); clear H; intro; auto with zarith ].",
                        "VernacExtend",
                        "531039f52fb86ef1fedffa94bb409da23bc7375f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_rel_prime1",
            "line_nb": 168,
            "steps": [
                {
                    "command": [
                        "unfold rel_prime; intros; elim (Zgcd_spec x y); intros; elim p; clear p; intros; exists x0; split; [ assumption | split; [ elim (Z_eq_dec x0 1); intro; [ rewrite a in H0; auto | assumption ] | elim (Z_eq_dec x0 (-1)); intro; [ rewrite a in H0; generalize (Zis_gcd_opp _ _ _ H0); simpl; clear H0; intro; generalize (Zis_gcd_sym _ _ _ H0); auto | assumption ] ] ].",
                        "VernacExtend",
                        "128ed772a8b246543a369f2765f45cde697ab49c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_rel_prime2",
            "line_nb": 171,
            "steps": [
                {
                    "command": [
                        "intros; elim (rel_prime_dec x y); auto; unfold rel_prime; intro; elimtype False; elim a; clear a; intros; generalize (H5 _ H H0); clear H H0 H3 H4 H5; intro; elim (Zdivide_1 _ H); auto.",
                        "VernacExtend",
                        "26bf3d93df257fa220f6a2922bd01c8283a02a56"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gcd_rel_prime",
            "line_nb": 174,
            "steps": [
                {
                    "command": [
                        "intros; elim (Z_eq_dec d 0); intro; [ rewrite a in H; elim H; clear H; intros; destruct H as (q,H), H0 as (q0,H0); revert H H0; ring_simplify (q * 0); ring_simplify (q0 * 0); intros; exists 1; exists 1; rewrite a; intuition; apply rel_prime_1 | elim H; clear H; intros; destruct H as (q,H), H0 as (q0,H0); exists q; exists q0; rewrite (Zmult_comm d q); rewrite (Zmult_comm d q0); intuition; elim (rel_prime_dec q q0); intro; [ auto | elimtype False; elim (not_rel_prime1 _ _ b0); clear b0; intros; elim H2; clear H2; intros; elim H2; clear H2; intros; generalize (Zdivide_mult_l _ _ d H2); intro; generalize (Zdivide_mult_l _ _ d H4); intro; rewrite <- H in H6; rewrite <- H0 in H7; generalize (H1 _ H6 H7); clear H5 H6 H7; intro; elim H2; clear H2; intros; elim H4; clear H4; intros; rewrite H2 in H; clear H2; rewrite H4 in H0; clear H4; rewrite <- Zmult_assoc in H; rewrite <- Zmult_assoc in H0; generalize (Zdivide_intro (x0 * d) x _ H); clear H; intro; generalize (Zdivide_intro (x0 * d) y _ H0); clear H0; intro; generalize (H1 _ H H0); elim H3; clear H H0 H3; do 2 intro; apply not_divide1; auto ] ].",
                        "VernacExtend",
                        "1831158cbf3046191c933a7a2274af49269970ac"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relp_mult2",
            "line_nb": 177,
            "steps": [
                {
                    "command": [
                        "intros; elim (Z_eq_dec a 1); intro; try tauto; elim (Z_eq_dec a (-1)); intro; try tauto; elimtype False; generalize (Zdivide_refl a); intro; generalize (Zdivide_factor_r a b); intro; generalize (not_rel_prime2 _ _ _ H1 H0 b0 b1); auto.",
                        "VernacExtend",
                        "a4929c55e1cff962c5f0d40ac1b593926845f37a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relp_mult3",
            "line_nb": 180,
            "steps": [
                {
                    "command": [
                        "intros; elim (rel_prime_dec a c); intro; try assumption; elimtype False; elim (not_rel_prime1 _ _ b0); clear b0; intros; do 2 (elim H0; clear H0; intros); elim H1; clear H1; intros; generalize (Zdivide_mult_l _ _ b H0); clear H0; intro; generalize (not_rel_prime2 _ _ _ H0 H2 H1 H4); auto.",
                        "VernacExtend",
                        "cecdf6cd52e70730f762d284efcbf6787c8e00cf"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gcd2_rel_prime",
            "line_nb": 183,
            "steps": [
                {
                    "command": [
                        "intros; elim (gcd_rel_prime _ _ _ H); clear H; intros; rewrite H0 in H; rewrite H1 in H; do 2 (elim H; clear H; intros); elim H2; clear H2; intros; replace (4 * s) with (2 * (2 * s)) in H; try ring; cut (2 <> 0); auto with zarith; intro; generalize (Zmult_eq_reg_l _ _ _ H H4); intro; generalize (Zmult_eq_reg_l _ _ _ H2 H4); intro; rewrite <- H5 in H3; rewrite <- H6 in H3; rewrite Zmult_comm in H3; apply relp_mult3 with (b := 2); assumption.",
                        "VernacExtend",
                        "43ec818b8a16b0db3911f22f05630c932e5dbeae"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relp_neq",
            "line_nb": 186,
            "steps": [
                {
                    "command": [
                        "intros; case (Z_eq_dec m n); auto; intro; elimtype False; generalize (Zdivide_refl m); intro; generalize (Zdivide_refl n); pattern n at 1; rewrite <- e; intro; generalize (not_rel_prime2 _ _ _ H2 H3 H H0); auto.",
                        "VernacExtend",
                        "dff85fc2a97293b83a6dff813cbebab01c0054cc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop2",
            "line_nb": 189,
            "steps": [
                {
                    "command": [
                        "intros; apply rel_prime_mult; apply rel_prime_sym; apply rel_prime_mult; apply rel_prime_sym; assumption.",
                        "VernacExtend",
                        "f6624ad78e2ebf59e5a0606295ecf0e1557bd29f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_sqr_compat",
            "line_nb": 192,
            "steps": [
                {
                    "command": [
                        "intros; elim H0; clear H0; intros; do 2 (elim H1; clear H1; intros); elim (rel_prime_dec x k); intro; [ generalize (prop2 _ _ a0); clear a0; intro; rewrite H1 in H3; elim (relp_mult2 _ _ H3); intro; [ rewrite H4 in H1; rewrite Zmult_1_l in H1; rewrite <- H1; unfold is_sqr; intuition; exists x; intuition | elimtype False; generalize (sqr_pos k); intro; rewrite H4 in H5; auto with zarith ] | elim (not_rel_prime1 _ _ b); clear b; intros; elim H3; clear H3; intros; elim H4; clear H4; intros; elim (gcd_rel_prime _ _ _ H3); clear H3; intros; do 2 (elim H3; clear H3; intros); elim H6; clear H6; intros; rewrite H3 in H1; rewrite H6 in H1; elim (Z_eq_dec x0 0); intro; try (elimtype False; rewrite a0 in H6; simpl in H6; auto); replace (x0 * x1 * (x0 * x1)) with (x0 * x0 * (x1 * x1)) in H1; try ring; replace (x0 * x2 * (x0 * x2) * a) with (x0 * x0 * (x2 * x2 * a)) in H1; try ring; generalize (sqr_spos _ b); clear b; intro; cut ((x1 * x1) = x2 * x2 * a); try (apply Zcompare_Eq_eq; rewrite (Zmult_compare_compat_l (x1 * x1) (x2 * x2 * a) (x0 * x0) H8); elim (Zcompare_Eq_iff_eq (x0 * x0 * (x1 * x1)) (x0 * x0 * (x2 * x2 * a))); auto); clear H1; intro; generalize (prop2 _ _ H7); clear H7; intro; rewrite H1 in H7; elim (relp_mult2 _ _ H7); intro; [ rewrite H9 in H1; rewrite Zmult_1_l in H1; rewrite <- H1; elim (Z_le_dec 0 x1); intro; [ unfold is_sqr; intuition; exists x1; intuition | split; [ apply Zge_le; apply sqr_pos | exists (-x1); intuition; ring ] ] | elimtype False; generalize (sqr_pos x2); intro; rewrite H9 in H10; auto with zarith ] ].",
                        "VernacExtend",
                        "73e618733b07d4e8ca07641190bf2f15a869eec9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divide_trans",
            "line_nb": 195,
            "steps": [
                {
                    "command": [
                        "intros a b c (q,H) (q0,H0); rewrite H in H0; clear H; rewrite Zmult_assoc in H0; apply (Zdivide_intro a c (q0 * q)); assumption.",
                        "VernacExtend",
                        "7c6d1fedfbbf7f6ec9c1df70a5fad2cc4f6a88e8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divide_sum",
            "line_nb": 198,
            "steps": [
                {
                    "command": [
                        "intros a b c (q,H) (q0,H0); cut (c = q0 * a - b); auto with zarith; clear H0; intro; rewrite H in H0; exists (q0 - q); rewrite H0; ring.",
                        "VernacExtend",
                        "bc79eb1e3bf40c48fa9ca43d20ff6e0aeea57bea"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divide_mult_l",
            "line_nb": 201,
            "steps": [
                {
                    "command": [
                        "intros a b c H (q,H0); replace (q * (c * a)) with (c * (q * a)) in H0; try ring; generalize (Zmult_eq_reg_l _ _ _ H0 H); clear H0; intro; apply Zdivide_intro with (q := q); assumption.",
                        "VernacExtend",
                        "3dba4199c6b595e517130f775002961feed15d3c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divide_0",
            "line_nb": 204,
            "steps": [
                {
                    "command": [
                        "intros; elim H; clear H; intros; auto with zarith.",
                        "VernacExtend",
                        "5cb62b0a6d82aaa9946191754e2b7ed6b3d59843"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divide_2",
            "line_nb": 207,
            "steps": [
                {
                    "command": [
                        "intros; cut (2 <> 0); auto with zarith; intro; generalize (Zdivide_bounds _ _ H2 H3); clear H2; simpl; generalize H; generalize H0; generalize H1; elim z; simpl; intros; progress (auto with zarith) || (elimtype False; auto with zarith).",
                        "VernacExtend",
                        "938e2e76ccdb20828de3aa0f75af1fc1f93e655f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divide_2b",
            "line_nb": 210,
            "steps": [
                {
                    "command": [
                        "intros; elim (Z_eq_dec z 0); intro; [ elim H1; clear H1; intros; rewrite a in H1; auto with zarith | cut (2 <> 0); auto with zarith; intro; generalize (Zdivide_bounds _ _ H1 H2); clear H1; simpl; generalize H; generalize H0; generalize b; elim z; simpl; intros; progress (auto with zarith) || (generalize (Zle_0_pos p); intro; progress (auto with zarith)) || (rewrite <- Zopp_neg in H4; generalize (Zlt_neg_0 p); auto with zarith) ].",
                        "VernacExtend",
                        "824f4d347d5514b3c0f66352472acf9f281adb1c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divide_4",
            "line_nb": 213,
            "steps": [
                {
                    "command": [
                        "intros a b (q,H); cut (is_sqr ((a * a * (a * a)) * q)); [ intro; elim (Z_eq_dec a 0); intro; try (rewrite a0 in H; rewrite (Zmult_comm q) in H; simpl in H; rewrite <- Zmult_assoc in H; do 2 (generalize (sqr_0 _ H); clear H; intro); rewrite H; apply Zdivide_0); cut (a * a <> 0); try (generalize (sqr_spos _ b0); solve [ auto with zarith ]); intro; generalize (is_sqr_compat _ _ H1 H0); clear H0; intro; elim H0; clear H0; intros; do 2 (elim H2; clear H2; intros); rewrite <- H2 in H; replace (x * x * (a * a * a * a)) with (a * a * x * (a * a * x)) in H; try ring; cut (0 <= a * a * x); try (apply Zmult_le_0_compat; try assumption; apply Zge_le; apply sqr_pos); intro; rewrite <- Zmult_assoc in H; elim (sqr_compat _ _ H); intro; try (elim (Z_eq_dec b 0); intro; [ rewrite a0; exists 0 | elimtype False; generalize (sqr_spos _ b1); intro ]; solve [ auto with zarith ]); cut (is_sqr (a * a * x)); try (unfold is_sqr; intuition; elim (Z_le_dec b 0); intro; [ exists (-b) | exists b ]; intuition; rewrite <- H5; ring); intro; generalize (is_sqr_compat _ _ b0 H6); clear H6; intro; elim H6; clear H6; intros; do 2 (elim H7; clear H7; intros); rewrite <- H7 in H5; replace (a * a * (x0 * x0)) with (a * x0 * (a * x0)) in H5; try ring; elim (sqr_compat _ _ H5); intro; [ exists x0 | exists (-x0) ]; rewrite H9; ring | split; [ replace (a * a * (a * a) * q) with (q * (a * a * a * a)); try ring; rewrite <- H; rewrite <- (Zmult_assoc (b * b)); apply Zge_le; apply sqr_pos | exists (b * b); split; [ rewrite Zmult_assoc; rewrite H; ring | apply Zge_le; apply sqr_pos ] ] ].",
                        "VernacExtend",
                        "3ac4cd9ef890efd4fe70b8e05d5ff111911f7c19"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "divide_sqr",
            "line_nb": 216,
            "steps": [
                {
                    "command": [
                        "intros a b (q,H); rewrite H; replace (q * a * (q * a)) with ((q * q) * (a * a)); try ring; apply Zdivide_factor_l.",
                        "VernacExtend",
                        "70009accdbf4ee29460a021cd6b1e300c74330ee"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gcd2_relp_odd",
            "line_nb": 219,
            "steps": [
                {
                    "command": [
                        "intros; elim (Zgcd_spec (u - v) (u + v)); intros; elim p; clear p; intros; elim H2; intros; generalize (Zdivide_plus_r _ _ _ H4 H5); ring_simplify (u - v + (u + v)); intro; generalize (Zdivide_opp_r _ _ H4); intro; generalize (Zdivide_plus_r _ _ _ H5 H8); ring_simplify (u + v + - (u - v)); clear H8; intro; generalize (Zodd_sum2 _ _ H H0); intro; elim (Zeven_def1 _ H9); clear H9; intros; rewrite Zmult_comm in H9; generalize (Zdivide_intro _ _ _ H9); clear x0 H9; intro; generalize (Zodd_sum1 _ _ H H0); intro; elim (Zeven_def1 _ H10); clear H10; intros; rewrite Zmult_comm in H10; generalize (Zdivide_intro _ _ _ H10); clear x0 H10; intro; generalize (H6 _ H9 H10); clear H9 H10; intro; elim H9; clear H9; intros; rewrite Zmult_comm in H9; rewrite H9 in H7; rewrite H9 in H8; cut (2 <> 0); auto with zarith; intro; generalize (divide_mult_l _ _ _ H10 H7); clear H7; intro; generalize (divide_mult_l _ _ _ H10 H8); clear H8 H10; intro; elim H1; intros; generalize (H12 _ H7 H8); intro; elim (Zdivide_1 _ H13); intro; try (elimtype False; rewrite H14 in H9; progress auto with zarith); rewrite H14 in H9; simpl in H9; rewrite H9 in H2; assumption.",
                        "VernacExtend",
                        "ac07f0d303982b35c80da3277eee04f256a36bdd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_prime_opp",
            "line_nb": 222,
            "steps": [
                {
                    "command": [
                        "unfold rel_prime; intros; do 2 (apply Zis_gcd_minus; rewrite Zopp_involutive); assumption.",
                        "VernacExtend",
                        "b7bf121627874bfa1351973f86f2fd9e76a0ea40"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_prime_oppr",
            "line_nb": 225,
            "steps": [
                {
                    "command": [
                        "intros; unfold rel_prime; apply Zis_gcd_minus; apply Zis_gcd_sym; apply rel_prime_opp; assumption.",
                        "VernacExtend",
                        "f4d6fc104b85bd6f6a9f4bf20f351027d091284f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rel_prime_2",
            "line_nb": 228,
            "steps": [
                {
                    "command": [
                        "intros; elim (rel_prime_dec 2 z); auto; intro; elimtype False; elim (Zodd_def1 _ H); clear H; intros; elim (not_rel_prime1 _ _ b); clear b; intros; do 2 (elim H0; clear H0; intros); elim H1; clear H1; intros; elim (divide_2b _ H1 H4 H0); clear H0 H3 H1 H4; intro; rewrite H0 in H2; clear H0; elim H2; clear H2; intros; rewrite H0 in H; clear H0; auto with zarith.",
                        "VernacExtend",
                        "492b504be41aa3b8001f2354a90f88a28d1cc110"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relp_mult1",
            "line_nb": 231,
            "steps": [
                {
                    "command": [
                        "intros; rewrite H3 in H5; rewrite H4 in H5; rewrite H3 in H; clear H3 H4; elim H5; clear H5; intros; elim (Zdivide_1 k); auto with zarith; intro; rewrite H6 in H; clear H6; auto with zarith.",
                        "VernacExtend",
                        "5d05aaab66d8b1df8f55f82d2ec13df4f4d300ba"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relp_parity",
            "line_nb": 234,
            "steps": [
                {
                    "command": [
                        "intros; unfold distinct_parity, both_odd; elim (Zeven_odd_dec x); intro; elim (Zeven_odd_dec y); intro; intuition.",
                        "VernacExtend",
                        "90911d992101dc8b60022bac7cc3ebba0e24e9d5"
                    ]
                },
                {
                    "command": [
                        "elimtype False; unfold rel_prime in H; elim (Zeven_def1 _ a); clear a; intros; elim (Zeven_def1 _ a0); clear a0; intros; rewrite Zmult_comm in H1; rewrite Zmult_comm in H0; generalize (Zdivide_intro _ _ x0 H0); clear H0; intro; generalize (Zdivide_intro _ _ x1 H1); clear H1; intro; elim H; clear H; intros; generalize (H3 _ H0 H1); clear H3; intro; elim H3; clear H3; intros; auto with zarith.",
                        "VernacExtend",
                        "f19171ccd61a9c13afc05798be52e358a7b0e853"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relp_sum",
            "line_nb": 238,
            "steps": [
                {
                    "command": [
                        "intros; elim (rel_prime_dec m n); intro; try assumption.",
                        "VernacExtend",
                        "5c513ce1c201ff4ed091c826b0a8707fe65ac0ce"
                    ]
                },
                {
                    "command": [
                        "elimtype False; elim (not_rel_prime1 _ _ b); clear b; intros; elim H0; clear H0; intros; elim H1; clear H1; intros; elim H0; clear H0; intros; elim H; clear H; intros; generalize (Zdivide_plus_r _ _ _ H0 H3); intro; generalize (Zdivide_minus_l _ _ _ H0 H3); clear H H0 H3 H4 H5; intro; generalize (H6 _ H7 H); clear H H6 H7; intro; elim (Zdivide_1 _ H); auto.",
                        "VernacExtend",
                        "1522630a8b061990a00b767245fa30a8b9805bb5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop1",
            "line_nb": 242,
            "steps": [
                {
                    "command": [
                        "unfold rel_prime; intros; elim (distp_odd _ _ H0); clear H0; intros; elim (Zgcd_spec (m + n) (n - m)); intros; elim p; clear p; intros; elim (Z_eq_dec x 1); intro; [ rewrite a in H2; assumption | elimtype False; elim H2; clear H2; intros; generalize (Zdivide_plus_r _ _ _ H2 H4); ring_simplify (m + n + (n - m)); intro; generalize (Zdivide_minus_l _ _ _ H2 H4); ring_simplify (m + n - (n - m)); intro; elim (Zdivide_dec x 2); intro; [ elim (Z_eq_dec x 0); intro; [ rewrite a0 in a; clear a0; elim a; clear a; intros; auto with zarith | generalize (divide_2 _ H3 b0 b a); clear a; intro; rewrite H8 in H2; rewrite H8 in H4; clear x H3 b H5 H6 H7 b0 H8; destruct H2 as (q,H2), H4 as (q0,H3); rewrite Zmult_comm in H2; rewrite Zmult_comm in H3; generalize (Zeven_def2 _ (ex_intro (fun x => m + n = 2 * x) q H2)); clear q H2; intro; generalize (Zeven_not_Zodd _ H2); auto ] | elim (Zdivide_dec 2 x); intro; [ generalize (divide_trans _ _ _ a H2); clear H H1 x H3 b H2 H4 H5 H6 H7 b0 a; intro; destruct H as (q,H); rewrite Zmult_comm in H; generalize (Zeven_def2 _ (ex_intro (fun x => m + n = 2 * x) q H)); clear H; intro; generalize (Zeven_not_Zodd _ H); auto | generalize (prime_rel_prime _ prime_2 _ b1); intro; generalize (rel_prime_sym _ _ H8); clear H8; intro; generalize (Gauss _ _ _ H6 H8); clear H6; intro; generalize (Gauss _ _ _ H7 H8); clear H7; intro; cut (x <> -1); auto with zarith; intro; generalize (not_rel_prime2 _ _ _ H7 H6 b H9); auto ] ] ].",
                        "VernacExtend",
                        "c4dffd5be331163340766988dc0da72ac6c9caf0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop2b",
            "line_nb": 245,
            "steps": [
                {
                    "command": [
                        "intros; elim (rel_prime_dec m (m * m + n * n)); intros; auto; elimtype False; elim (not_rel_prime1 _ _ b); clear b; intros; do 2 (elim H0; clear H0; intros); elim H1; clear H1; intros; generalize (Zdivide_mult_l _ _ m H0); intro; generalize (divide_sum _ _ (n * n) H5 H2); intro; generalize (prop2 _ _ H); clear H; intro; apply (not_rel_prime2 _ _ _ H5 H6 H1 H4); assumption.",
                        "VernacExtend",
                        "0697770c7c574949f64f0abf4eeb2508bd5fe9f1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop2c",
            "line_nb": 248,
            "steps": [
                {
                    "command": [
                        "intros; elim (rel_prime_dec m (m * m - n * n)); intros; auto; elimtype False; elim (not_rel_prime1 _ _ b); clear b; intros; do 2 (elim H0; clear H0; intros); elim H1; clear H1; intros; generalize (Zdivide_mult_l _ _ m H0); intro; generalize (divide_sum _ _ (- (n * n)) H5 H2); intro; generalize (Zdivide_opp_r_rev _ _ H6); clear H6; intro; generalize (prop2 _ _ H); clear H; intro; apply (not_rel_prime2 _ _ _ H5 H6 H1 H4); assumption.",
                        "VernacExtend",
                        "4c8ff481232a1a6a91e7ad6c09e16492ca58f651"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop3",
            "line_nb": 251,
            "steps": [
                {
                    "command": [
                        "intros; elim H; intros; unfold rel_prime; apply Zis_gcd_intro; auto with zarith.",
                        "VernacExtend",
                        "0e389630c3720b5fe5b9f457883fb335d4592b05"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "R_prime_wf",
            "line_nb": 256,
            "steps": [
                {
                    "command": [
                        "apply (well_founded_lt_compat _ f_Z R_prime); unfold R_prime, f_Z; intros; apply Zabs_nat_lt; intuition.",
                        "VernacExtend",
                        "d680276dd442fcd7fb9bb2d17d9c8621d3edec03"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ind_prime",
            "line_nb": 259,
            "steps": [
                {
                    "command": [
                        "intros; generalize (well_founded_ind R_prime_wf P); auto.",
                        "VernacExtend",
                        "d92429bcd3f805a30b6db2f02f9cc801aa5d2af0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prime_dec_gen",
            "line_nb": 262,
            "steps": [
                {
                    "command": [
                        "intros a b; pattern b; match goal with | |- (?p _) => simpl; case (Z_lt_dec 1 a); intro; try (right; red; intro; elim H2; clear H2; intros; progress auto); apply (ind_prime p); intros; case (rel_prime_dec x a); intro; [ case (Z_eq_dec x 2); intro; [ left; rewrite e in H2; rewrite e in r; generalize (rel_prime_1 a); intro; apply prime_intro; try assumption; intros; case (Z_eq_dec n 1); intro; try (rewrite e0; assumption); case (Z_eq_dec n 2); intro; try (rewrite e0; assumption); apply H2; auto with zarith | apply (H (x - 1)); try unfold R_prime; auto with zarith; intros; case (Z_eq_dec c x); intro; try (rewrite e; assumption); apply H2; auto with zarith ] | right; red; intro; elim H3; clear H3; intros; cut (1 <= x < a); auto with zarith; intro; generalize (H4 _ H5); auto ] end.",
                        "VernacExtend",
                        "daf4fa8b3a1a6c4e1d4a6932fc9fb04f4454212b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prime_dec",
            "line_nb": 265,
            "steps": [
                {
                    "command": [
                        "intros; case (Z_eq_dec a 2); intro; [ left; rewrite e; apply prime_2 | case (Z_lt_dec 1 a); intro; try (right; red; intro; elim H; clear H; intros; progress auto); apply (prime_dec_gen a (a - 1)); auto with zarith; intros; elimtype False; auto with zarith ].",
                        "VernacExtend",
                        "1566294f9ebe5a31418188d46579e9f9393f1145"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_prime_gen",
            "line_nb": 268,
            "steps": [
                {
                    "command": [
                        "induction b using ind_prime; intros.",
                        "VernacExtend",
                        "1d6cd96fa3c518a40e4940cf009c2e2ff6c24d65"
                    ]
                },
                {
                    "command": [
                        "destruct (Zdivide_dec b a) as [(q,H5)|n].",
                        "VernacExtend",
                        "5dc54cda6ae805ef23c1e973b3d8ca2215b25c46"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "exists q; exists b; intuition; apply (Zmult_gt_0_lt_reg_r 1 q b); auto with zarith.",
                        "VernacExtend",
                        "858cfb1ff4c5a0b575aa059196b5bdd287d6ac04"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "case (rel_prime_dec b a); intro.",
                        "VernacExtend",
                        "c6324187caf4945101490b514911a790f3af7344"
                    ]
                },
                {
                    "command": [
                        "*",
                        "VernacBullet",
                        "8a329d054468e0c41ce333043e0978e30eed7b98"
                    ]
                },
                {
                    "command": [
                        "case (Z_eq_dec b 2); intro.",
                        "VernacExtend",
                        "f20cf828ec673b99159af64d9dad90d4d3c7b72c"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "absurd (prime a); try assumption.",
                        "VernacExtend",
                        "e6af31aba7adc6406e07b547c1876c4b545d3430"
                    ]
                },
                {
                    "command": [
                        "apply prime_intro; auto; rewrite e in H4; rewrite e in r; generalize (rel_prime_1 a); intros; case (Z_eq_dec n0 1); intro; try (rewrite e0; assumption); case (Z_eq_dec n0 2); intro; try (rewrite e0; assumption); apply H4; auto with zarith.",
                        "VernacExtend",
                        "ef9e42e2e5ef70e8e2e88b2d31e54fe63b963105"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "assert (R_prime (b - 1) b) by (unfold R_prime; intuition).",
                        "VernacExtend",
                        "8beb792f9f8f730d9537514b5619ec7d50cfac9f"
                    ]
                },
                {
                    "command": [
                        "assert (1 < b - 1) by auto with zarith.",
                        "VernacExtend",
                        "d38f5a7bfcbf403fb3f9f4649e38bf4e4d95655a"
                    ]
                },
                {
                    "command": [
                        "assert (b - 1 < a) by auto with zarith.",
                        "VernacExtend",
                        "df8ba8a7657623789b995db8dcb460afe581b26c"
                    ]
                },
                {
                    "command": [
                        "assert (forall c : Z, (b - 1) < c < a -> rel_prime c a) by (intros; case (Z_eq_dec c b); intro; try (rewrite e; assumption); apply H4; auto with zarith).",
                        "VernacExtend",
                        "d8c31a42d4873bffd663fd2df2902724725fc080"
                    ]
                },
                {
                    "command": [
                        "elim (H _ H5 H0 H6 H7 H3 H8); intros; elim H9; clear H9; intros; exists x; exists x0; intuition.",
                        "VernacExtend",
                        "2c92a6e722a3dc8c2c3c1ef506a5f8b121cd2f40"
                    ]
                },
                {
                    "command": [
                        "*",
                        "VernacBullet",
                        "8a329d054468e0c41ce333043e0978e30eed7b98"
                    ]
                },
                {
                    "command": [
                        "elim (not_rel_prime1 _ _ n0); clear n0; intros; do 2 (elim H5; clear H5; intros); elim H6; clear H6; intros; destruct H7 as (q,H7).",
                        "VernacExtend",
                        "174fa8ed9eb4de73748ea9cbedb07e949fd4cf33"
                    ]
                },
                {
                    "command": [
                        "assert (x <> 0) by (assert (a <> 0) by auto with zarith; rewrite H7 in H10; elim (Zmult_neq_0 _ _ H10); auto).",
                        "VernacExtend",
                        "c1317338faabaa7f63f2a8968465f1f3692b87e8"
                    ]
                },
                {
                    "command": [
                        "case (Z_le_dec 0 x); intro.",
                        "VernacExtend",
                        "fc018397aec29c320251d0499e12c13565b93860"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "exists q; exists x; intuition; rewrite H7 in H0.",
                        "VernacExtend",
                        "76ebb1c99afe89f7d1b344013bcd1b211a150f0f"
                    ]
                },
                {
                    "command": [
                        "assert (0 < q * x) by auto with zarith.",
                        "VernacExtend",
                        "0a82fa93ade9cb9272f566e4cd9c1df1d82d3cab"
                    ]
                },
                {
                    "command": [
                        "assert (0 < x) by auto with zarith.",
                        "VernacExtend",
                        "e274622e43f6bf1912465e23b154b3c0b81c687b"
                    ]
                },
                {
                    "command": [
                        "generalize (Zmult_lt_0_reg_r _ _ H12 H11); intro; case (Z_eq_dec q 1); auto with zarith; intro; elimtype False; rewrite e in H7; rewrite Zmult_1_l in H7; destruct H5 as (q0,H5); rewrite H5 in H1; cut (0 < q0 * x); auto with zarith; intro; generalize (Zmult_lt_0_reg_r _ _ H12 H14); intro; rewrite H7 in H2; rewrite <- (Zmult_1_l x) in H2; rewrite H5 in H2; generalize (Zmult_lt_reg_r _ _ _ H12 H2); auto with zarith.",
                        "VernacExtend",
                        "0d07dc7389d17db07c32f5b6d4d9716e2ef9ffbf"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "exists (-q); exists (-x); intuition; try (rewrite H7; ring); rewrite H7 in H0; replace (q * x) with (-q * -x) in H0 by ring.",
                        "VernacExtend",
                        "bf4b00f410293a86adaa48d6c56a706b800bd409"
                    ]
                },
                {
                    "command": [
                        "assert (0 < -q * -x) by auto with zarith.",
                        "VernacExtend",
                        "2ab1976df1b690f1fe7752444eba335ef576b8b7"
                    ]
                },
                {
                    "command": [
                        "assert (0 < -x) by auto with zarith.",
                        "VernacExtend",
                        "a050e9532bbeec4124c3f06f6e7b3688b5ba63f8"
                    ]
                },
                {
                    "command": [
                        "generalize (Zmult_lt_0_reg_r _ _ H12 H11); intro; case (Z_eq_dec q (-1)); auto with zarith; intro; elimtype False; rewrite e in H7; rewrite Zmult_comm in H7; rewrite <- Zopp_eq_mult_neg_1 in H7; destruct H5 as (q0,H5); replace (q0 * x) with (-q0 * -x) in H5 by ring; rewrite H5 in H1; assert (0 < -q0 * -x) by auto with zarith; generalize (Zmult_lt_0_reg_r _ _ H12 H14); intro; rewrite <- (Zmult_1_l a) in H2; rewrite H7 in H2; rewrite H5 in H2; generalize (Zmult_lt_reg_r _ _ _ H12 H2); auto with zarith.",
                        "VernacExtend",
                        "a3c31fa7e03fed326dbc5effac107144ce8e926b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_prime",
            "line_nb": 301,
            "steps": [
                {
                    "command": [
                        "intros; case (Z_eq_dec a 2); intro; [ elimtype False; rewrite e in H0; generalize (prime_2); auto | apply (not_prime_gen a (a - 1)); auto with zarith; intros; elimtype False; auto with zarith ].",
                        "VernacExtend",
                        "53df8a8515d01973d33a44662c507dbccb24e29e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "R_fact_wf",
            "line_nb": 305,
            "steps": [
                {
                    "command": [
                        "apply (well_founded_lt_compat _ f_Z R_fact); unfold R_fact, f_Z; intros; apply Zabs_nat_lt; intuition; elim H2; clear H2; intros; elim H1; clear H1; intros; replace x with (1 * x); try ring; rewrite H1; apply Zmult_lt_compat_r; auto with zarith.",
                        "VernacExtend",
                        "7698dacf8b6ea327aa2e626db5ca296ede4f9ccf"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ind_fact",
            "line_nb": 308,
            "steps": [
                {
                    "command": [
                        "intros; generalize (well_founded_ind R_fact_wf P); auto.",
                        "VernacExtend",
                        "7e7549fa192c9102c752cbd2f386c7b2b69494b1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zfact",
            "line_nb": 311,
            "steps": [
                {
                    "command": [
                        "intro a; pattern a; match goal with | |- (?p _) => simpl; apply (ind_fact p); intros; case (prime_dec x); intro; [ exists x; intuition | elim (not_prime _ H0 H1); intros; do 2 (elim H2; clear H2; intros); elim H3; clear H3; intros; cut (exists b : Z, (b | x1) /\\ prime b); try (apply H; try assumption; unfold R_fact; intuition; exists x0; intuition); intro; do 2 (elim H5; clear H5; intros); exists x2; intuition; elim H5; clear H5; intros; rewrite H5 in H2; rewrite Zmult_assoc in H2; apply (Zdivide_intro _ _ _ H2) ] end.",
                        "VernacExtend",
                        "7a68ab56cd003002286c87924267e3a470f779bb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "R_p4_wf",
            "line_nb": 315,
            "steps": [
                {
                    "command": [
                        "apply (well_founded_lt_compat _ f_Z R_p4); unfold R_p4, f_Z; intros; apply Zabs_nat_lt; intuition; elim H2; clear H2; intros; elim H1; clear H1; intros; cut (1 < x0 * x0); try (cut (1 >= 0); auto with zarith; intro; generalize (sqr_gt _ _ H3 H2); simpl; progress auto); intro; cut (y <> 0); auto with zarith; intro; rewrite H1 in H4; elim (Zmult_neq_0 _ _ H4); intros; rewrite H1; pattern x at 1; replace x with (1 * x); try ring; apply Zmult_lt_compat_r; auto with zarith.",
                        "VernacExtend",
                        "b20a069ef773a3d0065a2ade6db0ff06812b1940"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ind_p4",
            "line_nb": 318,
            "steps": [
                {
                    "command": [
                        "intros; generalize (well_founded_ind R_p4_wf P); auto.",
                        "VernacExtend",
                        "5419b6824f7b29d923861b494082de7f9e11f150"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqr_prime1",
            "line_nb": 321,
            "steps": [
                {
                    "command": [
                        "intros; elim H; clear H; intros; elim H2; clear H2; intros; elim H2; clear H2; intros; rewrite <- H2 in H0; elim (prime_mult _ H1 _ _ H0); intro; generalize (divide_sqr _ _ H4); clear H4; intro; rewrite H2 in H4; assumption.",
                        "VernacExtend",
                        "b399c362e4820933018caea5a955e5955f8dcb19"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqr_prime2",
            "line_nb": 324,
            "steps": [
                {
                    "command": [
                        "intros; elim H; intros q H2; elim H0; intros q0 H3; rewrite H2 in H3; elim H1; intros; replace (q * a * c) with (a * (q * c)) in H3; try ring; replace (q0 * (a * a)) with (a * (q0 * a)) in H3; try ring; cut (a <> 0); auto with zarith; intro; generalize (Zmult_eq_reg_l _ _ _ H3 H6); clear H3; intro; generalize (Zdivide_intro _ _ _ H3); clear H3; intro; elim (prime_mult _ H1 _ _ H3); try tauto; intro; elim H7; intros; rewrite H8 in H2; rewrite <- Zmult_assoc in H2; generalize (Zdivide_intro _ _ _ H2); tauto.",
                        "VernacExtend",
                        "9a805a3fea4a5ad8cfa3606c592bda9f8e5a9837"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop4",
            "line_nb": 327,
            "steps": [
                {
                    "command": [
                        "split; generalize H2; generalize H1; generalize H0; generalize H; [ pattern p | pattern q ]; match goal with | |- (?p _) => simpl; apply (ind_p4 p); intros end; match goal with | |- is_sqr ?x => elim (Z_lt_dec 1 x); intro; [ idtac | elim (Z_eq_dec x 0); intro; [ rewrite a; unfold is_sqr; intuition; exists 0; intuition | elim (Z_eq_dec x 1); intro; [ rewrite a; unfold is_sqr; intuition; exists 1; intuition | elimtype False; auto with zarith ] ] ] end; generalize (sqr_prime1 _ H7); intro; elim (Zfact _ a); intros; elim H9; clear H9; intros; (generalize (Zdivide_mult_l _ _ q H9); intro; generalize (H8 _ H11 H10)) || (generalize (Zdivide_mult_r _ p _ H9); intro; generalize (H8 _ H11 H10)); intro; elim (sqr_prime2 _ _ _ H9 H12 H10) || (rewrite (Zmult_comm p) in H12; elim (sqr_prime2 _ _ _ H9 H12 H10)); intros; try (elimtype False; elim H10; intros; cut (x0 <> 1); auto with zarith; intro; cut (x0 <> -1); auto with zarith; intro; generalize (not_rel_prime2 _ _ _ H9 H13 H16 H17); progress auto || (generalize (rel_prime_sym _ _ H6); auto)); elim H13; intros q0 ?; cut (is_sqr q0); try (intro; elim H15; clear H15; intros; do 2 (elim H16; clear H16; intros); rewrite <- H16 in H14; unfold is_sqr; intuition; rewrite H14; exists (x0 * x1); split; try ring; elim H10; intros; apply Zmult_le_0_compat; auto with zarith); elim H10; intros; cut (0 <= q0); try (cut (x0 <> 0); auto with zarith; intro; generalize (sqr_spos _ H17); clear H17; intro; cut (0 < x); auto with zarith; intro; rewrite H14 in H18; generalize (Zmult_gt_0_lt_0_reg_r _ _ H17 H18); progress auto with zarith); intro; (apply H3; try assumption; [ unfold R_p4; intuition; exists x0; intuition; rewrite H14; ring | rewrite H14 in H6; (apply (relp_mult3 q0 (x0 * x0)) || (apply rel_prime_sym; apply (relp_mult3 q0 (x0 * x0)); apply rel_prime_sym)); assumption | rewrite H14 in H7; (replace (q0 * (x0 * x0) * q) with (x0 * x0 * (q0 * q)) in H7; try ring; apply (is_sqr_compat x0); progress auto with zarith) || (replace (p * (q0 * (x0 * x0))) with (x0 * x0 * (p * q0)) in H7; try ring; apply (is_sqr_compat x0); auto with zarith) ]).",
                        "VernacExtend",
                        "58867f38c9cf0f7e7fb3786889ff5e538a709183"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop4b",
            "line_nb": 330,
            "steps": [
                {
                    "command": [
                        "intros; generalize (prop2c _ _ H2); intro; generalize (rel_prime_oppr _ _ H4); clear H4; intro; replace (- (p * p - q * q)) with (q * q - p * p) in H4; try ring; generalize (rel_prime_sym _ _ H2); intro; generalize (prop2c _ _ H5); clear H5; intro; generalize (rel_prime_sym _ _ H4); clear H4; intro; generalize (rel_prime_sym _ _ H5); clear H5; intro; generalize (rel_prime_mult _ _ _ H4 H5); clear H4 H5; intro; generalize (rel_prime_sym _ _ H4); clear H4; intro; rewrite Zmult_assoc in H3; cut (0 <= p * q); auto with zarith; intro; cut (0 <= q * q - p * p); try (apply sqr_sub1; assumption); intro; generalize (prop4 _ _ H5 H6 H4 H3); clear H3 H4 H5 H6; intro; elim H3; clear H3; intros; generalize (prop4 _ _ H H0 H2 H3); tauto.",
                        "VernacExtend",
                        "7c188de1792a4422a1a104f3d954e4b72c2dda1d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relp_pq1",
            "line_nb": 333,
            "steps": [
                {
                    "command": [
                        "intros; cut (rel_prime (p * p) (q * q)); [ clear H1; intro; cut (distinct_parity (p * p) (q * q)); [ clear H2; intro; apply rel_prime_sym; apply prop1; try apply sqr_ge; assumption | apply (distp_sqr1 _ _ H2) ] | generalize (rel_prime_mult _ _ _ H1 H1); clear H1; intro; generalize (rel_prime_sym _ _ H1); clear H1; intro; generalize (rel_prime_mult _ _ _ H1 H1); clear H1; intro; apply rel_prime_sym; assumption ].",
                        "VernacExtend",
                        "848058c96f74824d4eb4c50a72b71f684b56a62f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relp_pq2",
            "line_nb": 336,
            "steps": [
                {
                    "command": [
                        "intros; generalize (prop2b _ _ H); intro; generalize (rel_prime_sym _ _ H); intro; generalize (prop2b _ _ H2); clear H2; intro; rewrite Zplus_comm in H2; generalize (rel_prime_sym _ _ H1); clear H1; intro; generalize (rel_prime_sym _ _ H2); clear H2; intro; generalize (rel_prime_mult _ _ _ H1 H2); clear H1 H2; intro; cut (Zodd (p * p + q * q)); [ intro; generalize (rel_prime_2 _ H2); clear H2; intro; generalize (rel_prime_sym _ _ H2); clear H2; intro; generalize (rel_prime_mult _ _ _ H2 H1); clear H1 H2; intro; apply rel_prime_sym; rewrite <- Zmult_assoc; assumption | generalize (distp_sqr1 _ _ H0); clear H0; intro; elim (distp_odd _ _ H0); auto ].",
                        "VernacExtend",
                        "f8855120655419dba5f004509476c7892496d447"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_IZR_0",
            "line_nb": 339,
            "steps": [
                {
                    "command": [
                        "intros; red; intro; rewrite H0 in H; simpl in H; auto.",
                        "VernacExtend",
                        "b20fe2776ce9dc84ac50c5baba3cd7c7913e035e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqr_inv",
            "line_nb": 342,
            "steps": [
                {
                    "command": [
                        "intros; cut (1 + IZR a * / IZR b * (IZR a * / IZR b) = ((IZR a * IZR a + IZR b * IZR b) / (IZR b * IZR b)))%R.",
                        "VernacExtend",
                        "dfd1dc107824b2b115aeda33433ae82094385125"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite H0; unfold Rdiv; split_Rmult; [ discrR; apply sqr_sum; assumption | apply Rinv_neq_0_compat; split_Rmult; discrR; assumption ].",
                        "VernacExtend",
                        "ceff291bd4ee00e26e793975f81193a979009b29"
                    ]
                },
                {
                    "command": [
                        "field; discrR; assumption.",
                        "VernacExtend",
                        "d348da48922ae5685b5f91734a17bd79609bc13c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rdiv_ge_0",
            "line_nb": 347,
            "steps": [
                {
                    "command": [
                        "intros; unfold Rge; elim H; clear H; intro; [ left; unfold Rdiv, Rgt; unfold Rgt in H0; unfold Rgt in H; generalize (Rinv_0_lt_compat _ H0); clear H0; intro; replace 0%R with (0 * / b)%R; [ apply Rmult_lt_compat_r; auto | ring ] | right; rewrite H; field; auto with real ].",
                        "VernacExtend",
                        "2b5106f80d4a107931422361950a06e363aea0cb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rcross_prod",
            "line_nb": 350,
            "steps": [
                {
                    "command": [
                        "intros; generalize (Rmult_eq_compat_l (b * d) _ _ H1); clear H1; intro; replace (b * d * (a / b))%R with (a * d)%R in H1; [ replace (b * d * (c / d))%R with (b * c)%R in H1; [ assumption | field; assumption ] | field; assumption ].",
                        "VernacExtend",
                        "dc4cbb9f6e27f41bcface22932b6088bf6574091"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "frac_eq",
            "line_nb": 356,
            "steps": [
                {
                    "command": [
                        "unfold frac; intros; cut (IZR (b * c) <> 0%R); [ intro; cut (IZR c <> 0%R); [ intro; generalize (Rcross_prod _ _ _ _ H2 H3 H1); clear H1; intro; rewrite mult_IZR in H1; cut (IZR c * IZR a = IZR c * (IZR b * IZR d))%R; [ clear H1; intro; generalize (Rmult_eq_reg_l _ _ _ H1 H3); clear H1; intro; rewrite <- mult_IZR in H1; apply eq_IZR; assumption | rewrite (Rmult_comm (IZR c) (IZR a)); rewrite H1; ring ] | apply not_O_IZR; assumption ] | rewrite mult_IZR; split_Rmult; apply not_O_IZR; assumption ].",
                        "VernacExtend",
                        "ec32fd8baa0e8dd916f299e1960e5bf0ce5a8bda"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "frac_rat",
            "line_nb": 359,
            "steps": [
                {
                    "command": [
                        "unfold frac, Rdiv; intros; generalize (Rge_le _ _ H0); clear H0; intro; elim (Z_dec b 0); intros; try (elim a0; clear a0; intros); [ right; cut (0 < -b); auto with zarith; intro; generalize (IZR_lt _ _ H2); clear H2; intro; simpl in H2; replace 0%R with (/ IZR (- b) * 0)%R in H0; try ring; rewrite (Rmult_comm (IZR a)) in H0; cut (/ IZR b * IZR a = / IZR (- b) * IZR (- a))%R; try (repeat rewrite Ropp_Ropp_IZR; field; try rewrite <- Ropp_Ropp_IZR; apply not_O_IZR; auto with zarith); intro; rewrite H3 in H0; generalize (Rinv_0_lt_compat _ H2); clear H2; intro; generalize (Rmult_le_reg_l _ _ _ H2 H0); intro; generalize (le_O_IZR _ H4); clear H4; intro; rewrite Rmult_comm in H1; rewrite H3 in H1; replace 1%R with (/ IZR (- b) * IZR (- b))%R in H1; try (field; apply not_O_IZR; auto with zarith); generalize (Rmult_le_reg_l _ _ _ H2 H1); intro; generalize (le_IZR _ _ H5); clear H5; intro; intuition | left; generalize (Zgt_lt _ _ b0); intro; generalize (IZR_lt _ _ H2); clear H2; intro; simpl in H2; replace 0%R with (/ IZR b * 0)%R in H0; try ring; rewrite (Rmult_comm (IZR a)) in H0; generalize (Rinv_0_lt_compat _ H2); clear H2; intro; generalize (Rmult_le_reg_l _ _ _ H2 H0); intro; generalize (le_O_IZR _ H3); clear H3; intro; rewrite Rmult_comm in H1; replace 1%R with (/ IZR b * IZR b)%R in H1; try (field; apply not_O_IZR; auto with zarith); generalize (Rmult_le_reg_l _ _ _ H2 H1); intro; generalize (le_IZR _ _ H4); clear H4; intro; intuition | contradiction ].",
                        "VernacExtend",
                        "0628fb504eb0c1606fa1ee7cf9cd5a8cdc39745f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "frac_simp",
            "line_nb": 362,
            "steps": [
                {
                    "command": [
                        "intros; unfold frac; repeat rewrite mult_IZR; field; split; apply not_O_IZR; assumption.",
                        "VernacExtend",
                        "8ad392a43f2360af971e3517a127938c3d74d838"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "frac_opp",
            "line_nb": 365,
            "steps": [
                {
                    "command": [
                        "intros; replace (-a) with (-1 * a); try replace (-b) with (-1 * b); try rewrite frac_simp; auto with zarith.",
                        "VernacExtend",
                        "588f3fffffd5a4eef8a42e0b30707220485839d7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relp_rat",
            "line_nb": 368,
            "steps": [
                {
                    "command": [
                        "intros; elim H; clear H; induction x; intro; elim H; clear H; intros; elim (rel_prime_dec a b); intro; [ rewrite H2 in H0; rewrite H2 in H1; elim (frac_rat _ _ H H0 H1); intro; [ exists (a, b); tauto | exists (-a, -b); intuition; [ apply rel_prime_opp | rewrite (frac_opp a b H) ]; assumption ] | elim (not_rel_prime1 _ _ b0); clear b0; intros; elim H3; clear H3; intros; elim (gcd_rel_prime _ _ _ H3); clear H3; intros; elim H3; clear H3; intros; elim H3; clear H3; intros; elim H5; clear H5; intros; rewrite H5 in H; elim (Zmult_neq_0 _ _ H); clear H; intros; rewrite H3 in H2; rewrite H5 in H2; rewrite (frac_simp x0 _ _ H7 H) in H2; rewrite H2 in H0; rewrite H2 in H1; elim (frac_rat _ _ H7 H0 H1); intro; [ exists (x0, x1); intuition | exists (-x0, -x1); intuition; [ apply rel_prime_opp | rewrite (frac_opp x0 x1 H7) ]; assumption ] ].",
                        "VernacExtend",
                        "48b8a8cc1b39871db608caf9386ed50de1dacd3f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}