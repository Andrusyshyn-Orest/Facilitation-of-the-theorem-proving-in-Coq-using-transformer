{
    "filename": "RelClasses.v",
    "coq_project": "coqrel",
    "vernac_cmds": [
        [
            "Require Export Coq.Classes.RelationClasses.",
            "VernacRequire",
            "30afc99c2d28a0c74215b2bae3a14def0b5834d0"
        ],
        [
            "Require Export RelDefinitions.",
            "VernacRequire",
            "036c68d68a856450b36b1b4547347d362f79906e"
        ],
        [
            "Class Coreflexive {A} (R: relation A) := coreflexivity: forall x y, R x y -> x = y.",
            "VernacInductive",
            "5a8371720a106f31c08733fb11b0f21ccad1563c"
        ],
        [
            "Global Instance eq_corefl {A}: Coreflexive (@eq A).",
            "VernacInstance",
            "4787e2251e499139dcd73590d67aed35ce19f805"
        ],
        [
            "firstorder.",
            "VernacExtend",
            "ceb9f57e98a5f5a73ee421cf30fd2f4f09432d14"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Global Instance subrel_eq {A} (R: relation A): Coreflexive R -> Related R eq subrel.",
            "VernacInstance",
            "5aec78fccd781224a50d74001b51a1816a1ddc26"
        ],
        [
            "firstorder.",
            "VernacExtend",
            "ceb9f57e98a5f5a73ee421cf30fd2f4f09432d14"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Class RCompose {A B C} (RAB : rel A B) (RBC : rel B C) (RAC : rel A C) := rcompose : forall x y z, RAB x y -> RBC y z -> RAC x z.",
            "VernacInductive",
            "7bbb03cf1b36c86d6628a4d4ab962f6b37d32832"
        ],
        [
            "Ltac rcompose b := lazymatch goal with | |- ?R ?a ?c => apply (rcompose a b c) end.",
            "VernacExtend",
            "a77415b9cbbb6ae487d97d7e3999a0f7fcb39b8a"
        ],
        [
            "Ltac ercompose := eapply rcompose.",
            "VernacExtend",
            "6dce1e57de715c26132914aca3a0ddb9caf2f126"
        ],
        [
            "Global Instance rcompose_transitive {A} (R : relation A) : RCompose R R R -> Transitive R.",
            "VernacInstance",
            "2786e2395ec0c0258cd3a9358f5d6c48cb94dd22"
        ],
        [
            "firstorder.",
            "VernacExtend",
            "ceb9f57e98a5f5a73ee421cf30fd2f4f09432d14"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma transitive_rcompose `(Transitive) : RCompose R R R.",
            "VernacStartTheoremProof",
            "2941fcee9e0bd5a9b43f47840f2b75e7041f3f64"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Immediate transitive_rcompose : typeclass_instances.",
            "VernacHints",
            "b7d2e115d7d797b0736205584d8f25e27016108e"
        ],
        [
            "Class RDecompose {A B C} (RAB : rel A B) (RBC : rel B C) (RAC : rel A C) := rdecompose : forall x z, RAC x z -> exists y, RAB x y /\\ RBC y z.",
            "VernacInductive",
            "d9c7ba0c974ab36512cc5807d6caf7aba74dbd4c"
        ],
        [
            "Tactic Notation \"rdecompose\" constr(H) \"as\" simple_intropattern(p) := lazymatch type of H with | ?R ?a ?b => destruct (rdecompose a b H) as p | _ => fail \"Not an applied relation\" end.",
            "VernacExtend",
            "24d0024be193cd2676a6a3451ff4b43ef07e6626"
        ],
        [
            "Tactic Notation \"rdecompose\" hyp(H) \"as\" simple_intropattern(p) := lazymatch type of H with | ?R ?a ?b => apply rdecompose in H; destruct H as p | _ => fail \"Not an applied relation\" end.",
            "VernacExtend",
            "7a7224eccda759501bb17c34a525fa7844813bde"
        ],
        [
            "Tactic Notation \"rdecompose\" constr(H) := rdecompose H as (? & ? & ?).",
            "VernacExtend",
            "7d5884bf48ab3474ce8494618312c377ff68d3aa"
        ],
        [
            "Tactic Notation \"rdecompose\" hyp(H) := rdecompose H as (? & ? & ?).",
            "VernacExtend",
            "2d32c390877bab53f0c059d83c14b43364228004"
        ],
        [
            "Global Instance arrow_refl {A B} (RA : relation A) (RB : relation B) : Coreflexive RA -> Reflexive RB -> Reflexive (RA ++> RB).",
            "VernacInstance",
            "534c2ae6a4764a60bc3b6f60febf6c66f3e41b8e"
        ],
        [
            "intros HA HB f a b Hab.",
            "VernacExtend",
            "92064c33dbb5f83bf75f5acaa12ec3d74eee1c62"
        ],
        [
            "apply coreflexivity in Hab.",
            "VernacExtend",
            "c8da6928b5580b0c858432bcceba4ee1ebd6449a"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Global Instance arrow_corefl {A B} (RA : relation A) (RB : relation B) : Reflexive RA -> Coreflexive RB -> Coreflexive (RA ++> RB).",
            "VernacInstance",
            "04ef9b44907d5a77b9819bc0f20c0152ce093944"
        ],
        [
            "Abort.",
            "VernacAbort",
            "c7c176802253f03c8ef9f27e1c3c9d26e4650d85"
        ],
        [
            "Section ARROW_REL_COMPOSE.",
            "VernacBeginSection",
            "dc6cd766709da1b324e63d615bdd198b5da26707"
        ],
        [
            "Context {A1 A2 A3} (RA12 : rel A1 A2) (RA23 : rel A2 A3) (RA13 : rel A1 A3).",
            "VernacContext",
            "7f293013a5966f744ed7af0c21a714b789ce702b"
        ],
        [
            "Context {B1 B2 B3} (RB12 : rel B1 B2) (RB23 : rel B2 B3) (RB13 : rel B1 B3).",
            "VernacContext",
            "8e18045cf5df96b0426a0837f3a13e99224ab0f5"
        ],
        [
            "Global Instance arrow_rcompose : RDecompose RA12 RA23 RA13 -> RCompose RB12 RB23 RB13 -> RCompose (RA12 ++> RB12) (RA23 ++> RB23) (RA13 ++> RB13).",
            "VernacInstance",
            "87e27291b9f6d44dda6fcf046d984b3bacecb619"
        ],
        [
            "intros HA HB f g h Hfg Hgh a1 a3 Ha.",
            "VernacExtend",
            "3a47b43131c7cfebae9a717c60c0ab2625f6196f"
        ],
        [
            "rdecompose Ha as (a2 & Ha12 & Ha23).",
            "VernacExtend",
            "18de2d607cd94432933ba838e478c4071682f700"
        ],
        [
            "firstorder.",
            "VernacExtend",
            "ceb9f57e98a5f5a73ee421cf30fd2f4f09432d14"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Global Instance arrow_rdecompose : RCompose RA12 RA23 RA13 -> RDecompose RB12 RB23 RB13 -> RDecompose (RA12 ++> RB12) (RA23 ++> RB23) (RA13 ++> RB13).",
            "VernacInstance",
            "4806556b73739d65d36f0779da6d62041c3de4b5"
        ],
        [
            "Abort.",
            "VernacAbort",
            "c7c176802253f03c8ef9f27e1c3c9d26e4650d85"
        ],
        [
            "End ARROW_REL_COMPOSE.",
            "VernacEndSegment",
            "ffba5f9a3fddae2e8db62a7ed7f550d88b480e27"
        ]
    ],
    "proofs": [
        {
            "name": "eq_corefl",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "firstorder.",
                        "VernacExtend",
                        "ceb9f57e98a5f5a73ee421cf30fd2f4f09432d14"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subrel_eq",
            "line_nb": 6,
            "steps": [
                {
                    "command": [
                        "firstorder.",
                        "VernacExtend",
                        "ceb9f57e98a5f5a73ee421cf30fd2f4f09432d14"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rcompose_transitive",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "firstorder.",
                        "VernacExtend",
                        "ceb9f57e98a5f5a73ee421cf30fd2f4f09432d14"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "transitive_rcompose",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "arrow_refl",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "intros HA HB f a b Hab.",
                        "VernacExtend",
                        "92064c33dbb5f83bf75f5acaa12ec3d74eee1c62"
                    ]
                },
                {
                    "command": [
                        "apply coreflexivity in Hab.",
                        "VernacExtend",
                        "c8da6928b5580b0c858432bcceba4ee1ebd6449a"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "arrow_rcompose",
            "line_nb": 35,
            "steps": [
                {
                    "command": [
                        "intros HA HB f g h Hfg Hgh a1 a3 Ha.",
                        "VernacExtend",
                        "3a47b43131c7cfebae9a717c60c0ab2625f6196f"
                    ]
                },
                {
                    "command": [
                        "rdecompose Ha as (a2 & Ha12 & Ha23).",
                        "VernacExtend",
                        "18de2d607cd94432933ba838e478c4071682f700"
                    ]
                },
                {
                    "command": [
                        "firstorder.",
                        "VernacExtend",
                        "ceb9f57e98a5f5a73ee421cf30fd2f4f09432d14"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}