{
    "filename": "finmap.v",
    "coq_project": "finmap",
    "vernac_cmds": [
        [
            "From mathcomp Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.",
            "VernacRequire",
            "0e1e33a573bcf12fc2bd7da6fda77aa847cc29b7"
        ],
        [
            "From mathcomp Require Import choice path finset finfun fintype bigop.",
            "VernacRequire",
            "0aba4b35ec900794ae1db74ad226accd892fc402"
        ],
        [
            "From mathcomp Require Import bigenough.",
            "VernacRequire",
            "f8e979dc9227be19b9fbed0de135e13e21762ef2"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Import Prenex Implicits.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Reserved Notation \"{fset K }\" (at level 0, format \"{fset K }\").",
            "VernacSyntaxExtension",
            "ef6d0179318ed3b7c2c01a7e4190578c7c1a8f5f"
        ],
        [
            "Reserved Notation \"A `&` B\" (at level 48, left associativity).",
            "VernacSyntaxExtension",
            "a31a82f2e578697612e74c6cf171eeef116db223"
        ],
        [
            "Reserved Notation \"A `*` B\" (at level 46, left associativity).",
            "VernacSyntaxExtension",
            "2b1f1281de08d5f3de96a0ed42e0749f735bf7d4"
        ],
        [
            "Reserved Notation \"A `+` B\" (at level 54, left associativity).",
            "VernacSyntaxExtension",
            "6886e9f297c5ca62c27bba2f8cfab053b985e37a"
        ],
        [
            "Reserved Notation \"A +` B\" (at level 54, left associativity).",
            "VernacSyntaxExtension",
            "ed964efc9458e0c97a11a8055c6dae58e1b53a9a"
        ],
        [
            "Reserved Notation \"A `|` B\" (at level 52, left associativity).",
            "VernacSyntaxExtension",
            "b2ff02a0e36c1c6196b866917a874fea47865f71"
        ],
        [
            "Reserved Notation \"a |` A\" (at level 52, left associativity).",
            "VernacSyntaxExtension",
            "8a08b1aac9094a398dc7848f00809d3a1074202c"
        ],
        [
            "Reserved Notation \"A `\\` B\" (at level 50, left associativity).",
            "VernacSyntaxExtension",
            "bd666c8859df25c777a2bff2c1ccecdf4d631bc7"
        ],
        [
            "Reserved Notation \"A `\\ b\" (at level 50, left associativity).",
            "VernacSyntaxExtension",
            "45224096b2c2ceff20b0654399b3c87e559c4bd9"
        ],
        [
            "Reserved Notation \"{fmap T }\" (at level 0, format \"{fmap T }\").",
            "VernacSyntaxExtension",
            "fffd89e26ba546f63050ded0548b9207c9e3e4fb"
        ],
        [
            "Reserved Notation \"x .[ k <- v ]\" (at level 2, k at level 200, v at level 200, format \"x .[ k <- v ]\").",
            "VernacSyntaxExtension",
            "bc813e0dfb679c47cd6e3b013fa6a429b1dc91f3"
        ],
        [
            "Reserved Notation \"x .[~ k ]\" (at level 2, k at level 200, format \"x .[~ k ]\").",
            "VernacSyntaxExtension",
            "60613582c8384af340d7ffcff20d472d08d6b78f"
        ],
        [
            "Reserved Notation \"x .[& k ]\" (at level 2, k at level 200, format \"x .[& k ]\").",
            "VernacSyntaxExtension",
            "cacdb09fb034aaa9794c2c368bfb8fdd98adca02"
        ],
        [
            "Reserved Notation \"x .[\\ k ]\" (at level 2, k at level 200, format \"x .[\\ k ]\").",
            "VernacSyntaxExtension",
            "f4a4706da3c9710374ade2fbd5f2ce915c0c1a82"
        ],
        [
            "Reserved Notation \"x .[? k ]\" (at level 2, k at level 200, format \"x .[? k ]\").",
            "VernacSyntaxExtension",
            "54e7dc242e791d92409868af2867d7c3db12506a"
        ],
        [
            "Reserved Infix \"`~`\" (at level 52).",
            "VernacSyntaxExtension",
            "9e78753fb8883db6190f999f45fb1c602fa2ac2a"
        ],
        [
            "Reserved Notation \"[ 'fset' k ]\" (at level 0, k at level 99, format \"[ 'fset' k ]\").",
            "VernacSyntaxExtension",
            "2096c078483fdd1effa7bd3deb52314354d5d19c"
        ],
        [
            "Local Notation predOfType T := (sort_of_simpl_pred (@pred_of_argType T)).",
            "VernacSyntacticDefinition",
            "db004a9d4dae1bedb1eb76024eceb6402751ecfa"
        ],
        [
            "Section extra.",
            "VernacBeginSection",
            "157f8b1dc912417550afb837e81b03d3d47d6f4a"
        ],
        [
            "Lemma mem_remF (T : eqType) (s : seq T) x : uniq s -> x \\in rem x s = false.",
            "VernacStartTheoremProof",
            "5fca13918e72596d2bd0744d3204006802faace8"
        ],
        [
            "by move=> us; rewrite mem_rem_uniq // inE eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ffun0 (T : finType) (X : Type) : #|T| = 0 -> {ffun T -> X}.",
            "VernacDefinition",
            "22167faf247143f4d76c1a5802459310291225c6"
        ],
        [
            "by move=> T0; split; rewrite T0; exists nil.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition oextract (T : Type) (o : option T) : o -> T := if o is Some t return o -> T then fun=> t else False_rect T \\o notF.",
            "VernacDefinition",
            "cc138997ca068bb2243de16348ad4cdc1fbe4dd0"
        ],
        [
            "Lemma oextractE (T : Type) (x : T) (xP : Some x) : oextract xP = x.",
            "VernacStartTheoremProof",
            "722ae65113e932d24910bf99fcc496d47847b60f"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Some_oextract T (x : option T) (x_ex : x) : Some (oextract x_ex) = x.",
            "VernacStartTheoremProof",
            "6a5346125307ec40b0f01a1941a19de15e6de0bc"
        ],
        [
            "by case: x x_ex.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ojoin T (x : option (option T)) := if x is Some y then y else None.",
            "VernacDefinition",
            "6b123231157b29ef119e6f417f96fd40e03dc76c"
        ],
        [
            "Lemma Some_ojoin T (x : option (option T)) : x -> Some (ojoin x) = x.",
            "VernacStartTheoremProof",
            "8e7a129a9a2a651f38c8864d68d7efccc34c2660"
        ],
        [
            "by case : x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ojoinT T (x : option (option T)) : ojoin x -> x.",
            "VernacStartTheoremProof",
            "9fbce1679be2c4e049736ecfbe5d41773b33416d"
        ],
        [
            "by case: x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section AllSigs.",
            "VernacBeginSection",
            "545befd106c55d9ab09a4170a2a3f4a6111ecf3b"
        ],
        [
            "Variables (S : Type) (T : S -> Type) (R : Type) (f : forall x, T x -> R).",
            "VernacAssumption",
            "b12fd34a9f8938e9a5fa6d47dcfe4769fc0b725e"
        ],
        [
            "Implicit Types (s : seq S) (t : forall x, seq (T x)).",
            "VernacReserve",
            "635fa39a6e619d7143c85e16d6373091e9118f48"
        ],
        [
            "Definition allsigs s t := foldr (fun x => cat (map (@f x) (t x))) [::] s.",
            "VernacDefinition",
            "edea3308588142b3b81da98b1102a62c4f14535d"
        ],
        [
            "Lemma size_allsigs s t : size (allsigs s t) = sumn [seq size (t x) | x <- s].",
            "VernacStartTheoremProof",
            "17b4fa07f70c538789aad9390988412ccd19902e"
        ],
        [
            "by elim: s => //= x s IHs; rewrite size_cat size_map IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma allsigs_cat s1 s2 t : allsigs (s1 ++ s2) t = allsigs s1 t ++ allsigs s2 t.",
            "VernacStartTheoremProof",
            "c47ce3d78f397edc1e182822ab4887e8290b59eb"
        ],
        [
            "by elim: s1 => //= x s1 ->; rewrite catA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End AllSigs.",
            "VernacEndSegment",
            "121f67076e44b7b5c169221fe0492deefc142b5d"
        ],
        [
            "Lemma allsigs_comp S (T : S -> Type) R R' (f : forall x, T x -> R) (g : R -> R') s t : allsigs (fun x y => g (f x y)) s t = map g (allsigs f s t).",
            "VernacStartTheoremProof",
            "b0e72a4f2008cdd0e036b042116db8f4ed032903"
        ],
        [
            "by elim: s => //= x s ->; rewrite map_cat map_comp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Prenex Implicits allsigs.",
            "VernacExtend",
            "c042638f6fb6d778fb3f47ee44bf1a6f57ff90f2"
        ],
        [
            "Notation \"[ 'seq' E | i <- s & j <- t ]\" := (allsigs (fun i j => E) s (fun i => t)) (at level 0, E at level 99, i ident, j ident, format \"[ '[hv' 'seq' E '/ ' | i <- s & '/ ' j <- t ] ']'\") : seq_scope.",
            "VernacNotation",
            "5ca713abcc30fda573c6c24677dd1200e21263ce"
        ],
        [
            "Notation \"[ 'seq' E | i : T <- s & j : U <- t ]\" := (allsigs (fun (i : T) (j : U) => E) s (fun i : T => t)) (at level 0, E at level 99, i ident, j ident, only parsing) : seq_scope.",
            "VernacNotation",
            "375a37e1632455b2ba84e188f326465e0f43b4db"
        ],
        [
            "Section EqAllSigs.",
            "VernacBeginSection",
            "eede6980300d88cdfc98599c97824f2348461ec6"
        ],
        [
            "Variables (S : eqType) (T : S -> eqType).",
            "VernacAssumption",
            "ca74d783c80271a87b73103f949bdbf73b4e3642"
        ],
        [
            "Implicit Types (R : eqType) (s : seq S) (t : forall x, seq (T x)).",
            "VernacReserve",
            "882fca3f2d6d8a328a5e941c42eda3cfdec0f06a"
        ],
        [
            "Lemma allsigsP R (f : forall x, T x -> R) s t z : reflect (exists p : sigT T, [/\\ tag p \\in s, tagged p \\in t (tag p) & z = f (tag p) (tagged p)]) (z \\in allsigs f s t).",
            "VernacStartTheoremProof",
            "c86c8abb2592042dfcae74269b97ac22da5a4d21"
        ],
        [
            "elim: s => [|x s IHs /=]; first by right=> [[p []]].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite mem_cat; have [fxt_z | not_fxt_z] := altP mapP.",
            "VernacExtend",
            "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
        ],
        [
            "by left; have [y t_y ->] := fxt_z; exists (Tagged T y); rewrite mem_head.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: (iffP IHs) => [] [[x' y] /= [s_x' t_y def_z]]; exists (Tagged T y) => /=.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "by rewrite !inE predU1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [def_x' | //] := predU1P s_x'.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by do [case: _ / def_x'; rewrite def_z map_f] in s_x' not_fxt_z *.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_allsigs R (f : forall x, T x -> R) s1 t1 s2 t2 : s1 =i s2 -> (forall x, x \\in s1 -> t1 x =i t2 x) -> allsigs f s1 t1 =i allsigs f s2 t2.",
            "VernacStartTheoremProof",
            "3b8ab3233d0db78d0845ad206ca3b3dc83579e96"
        ],
        [
            "move=> eq_s eq_t z; apply/allsigsP/allsigsP=> [] [p fpz]; exists p => []; by move: fpz (fpz) => [???]; rewrite eq_s eq_t //= 1?eq_s.",
            "VernacExtend",
            "a9ea97ee9dd41a8b77349f5e0bd7080c0ea65a41"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma allsigs_catr R (f : forall x, T x -> R) s t1 t2 : allsigs f s (fun x => t1 x ++ t2 x) =i allsigs f s t1 ++ allsigs f s t2.",
            "VernacStartTheoremProof",
            "e86fb546d6c5d54e05d88023ac4e7c9c5ae9de4c"
        ],
        [
            "move=> z; rewrite mem_cat.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "apply/allsigsP/orP=> [[p [sP1]]|].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite mem_cat; case/orP; [left | right]; apply/allsigsP; exists p.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case=> /allsigsP[p [sp1 sp2 ->]]; exists p; rewrite mem_cat sp2 ?orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma allsigs_uniq R (f : forall x, T x -> R) s t : uniq s -> (forall x, x \\in s -> uniq (t x)) -> {in [seq Tagged T y | x <- s & y <- t x] &, injective (fun p : sigT T => f (tag p) (tagged p))} -> uniq (allsigs f s t).",
            "VernacStartTheoremProof",
            "5a3a60f252c45b6cac549639f2e352bfca4a2292"
        ],
        [
            "move=> Us Ut inj_f; have: all (mem s) s by apply/allP.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "elim: {-2}s Us => //= x s1 IHs /andP[s1'x Us1] /andP[sx1 ss1].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "rewrite cat_uniq {}IHs // andbT map_inj_in_uniq ?Ut // => [|y1 y2 *].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply/hasPn=> _ /allsigsP[z [s1z tz ->]]; apply/mapP=> [[y ty Dy]].",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "suffices [Dz1 _]: Tagged T (tagged z) = Tagged T y.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by rewrite -Dz1 s1z in s1'x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: inj_f => //; apply/allsigsP; last by exists (Tagged T y).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by have:= allP ss1 _ s1z; exists z.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices /eqP: Tagged T y1 = Tagged T y2 by rewrite eq_Tagged => /eqP.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "apply: inj_f => //; apply/allsigsP; by [exists (Tagged T y1) | exists (Tagged T y2)].",
            "VernacExtend",
            "32b15fc96f4fd456981d0dd2c828d21282fb462e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EqAllSigs.",
            "VernacEndSegment",
            "3b83326046a2d64affa95c0a4835aa4aa808ac3f"
        ],
        [
            "Lemma big_allsigs (R : Type) (idx : R) (op : Monoid.law idx) (I1 : Type) (I2 : I1 -> Type) (r1 : seq I1) (r2 : forall i1, seq (I2 i1)) (F : sigT I2 -> R) : \\big[op/idx]_(i <- [seq Tagged I2 i2 | i1 <- r1 & i2 <- r2 i1]) F i = \\big[op/idx]_(i1 <- r1) \\big[op/idx]_(i2 <- r2 i1) F (Tagged I2 i2).",
            "VernacStartTheoremProof",
            "3c60c02b40822f1b025f0c20643dbcff1bf1ed7c"
        ],
        [
            "elim: r1 => [|i1 r1 IHr1]; rewrite !(big_nil, big_cons)//= big_cat {}IHr1.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by case: (r2 i1) => [|i2 r21]; rewrite /= !(big_nil, big_cons)//= big_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section NatHomomorphism.",
            "VernacBeginSection",
            "24a9374060197c1a88ad0dd1ce37810ebffc5b2b"
        ],
        [
            "Variable T : Type.",
            "VernacAssumption",
            "a15b17e37c4241158d544882375356c273dc93f2"
        ],
        [
            "Lemma homo_ltn_in (D : pred nat) (f : nat -> T) (r : T -> T -> Prop) : (forall y x z, r x y -> r y z -> r x z) -> {in D &, forall i j k, i < k < j -> k \\in D} -> {in D, forall i, i.+1 \\in D -> r (f i) (f i.+1)} -> {in D &, {homo f : i j / i < j >-> r i j}}.",
            "VernacStartTheoremProof",
            "f0214e58524b29083c355ff834f393fc51a93b82"
        ],
        [
            "move=> r_trans Dcx r_incr i j iD jD lt_ij; move: (lt_ij) (jD) => /subnKC<-.",
            "VernacExtend",
            "8b784377bdc4d565ff66d4cf36a6041e9354c156"
        ],
        [
            "elim: (_ - _) => [|k ihk]; first by rewrite addn0 => Dsi; apply: r_incr.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move=> DSiSk [: DSik]; apply: (r_trans _ _ _ (ihk _)); rewrite ?addnS.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by abstract: DSik; apply: (Dcx _ _ iD DSiSk); rewrite ltn_addr ?addnS /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: r_incr; rewrite -?addnS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma homo_ltn (f : nat -> T) (r : T -> T -> Prop) : (forall y x z, r x y -> r y z -> r x z) -> (forall i, r (f i) (f i.+1)) -> {homo f : i j / i < j >-> r i j}.",
            "VernacStartTheoremProof",
            "04072095d6baab529292767d365b78f7f0cd9a56"
        ],
        [
            "by move=> /(@homo_ltn_in predT f) fr fS i j; apply: fr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma homo_leq_in (D : pred nat) (f : nat -> T) (r : T -> T -> Prop) : (forall x, r x x) -> (forall y x z, r x y -> r y z -> r x z) -> {in D &, forall i j k, i < k < j -> k \\in D} -> {in D, forall i, i.+1 \\in D -> r (f i) (f i.+1)} -> {in D &, {homo f : i j / i <= j >-> r i j}}.",
            "VernacStartTheoremProof",
            "e5f9f87bce996b379468a46a6e41ada495a55685"
        ],
        [
            "move=> r_refl r_trans Dcx /(homo_ltn_in r_trans Dcx) lt_r i j iD jD.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by rewrite leq_eqVlt => /predU1P[->//|/lt_r]; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma homo_leq (f : nat -> T) (r : T -> T -> Prop) : (forall x, r x x) -> (forall y x z, r x y -> r y z -> r x z) -> (forall i, r (f i) (f i.+1)) -> {homo f : i j / i <= j >-> r i j}.",
            "VernacStartTheoremProof",
            "3c0e896d631d77e845c12d0c1cb2f81c64474086"
        ],
        [
            "by move=> rrefl /(@homo_leq_in predT f r) fr fS i j; apply: fr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End NatHomomorphism.",
            "VernacEndSegment",
            "23ba7889268738ec0fdfbedd04b4648f9b856f74"
        ],
        [
            "End extra.",
            "VernacEndSegment",
            "813e1e48e709a81391496fda35fcfceb1e8e8b46"
        ],
        [
            "Module Type SortKeysSig.",
            "VernacDeclareModuleType",
            "755f4c3e54ffd99bb0366c9e6081f40a347353c3"
        ],
        [
            "Section SortKeys.",
            "VernacBeginSection",
            "b7dfbd2bb965cc683ef75331c559b302e6660458"
        ],
        [
            "Variable (K : choiceType).",
            "VernacAssumption",
            "f12791760ea7a097b3e48c57d86546a92346fc64"
        ],
        [
            "Implicit Types (k : K) (ks : seq K).",
            "VernacReserve",
            "5e27340fa8d91bf3833afd52da9b45b618dd251e"
        ],
        [
            "Axiom f : seq K -> seq K.",
            "VernacAssumption",
            "5c632817cd95c72fa05158359efffc2d74ee6ecc"
        ],
        [
            "Axiom perm : forall s, perm_eq (f s) (undup s).",
            "VernacAssumption",
            "35cfacab5bdc3812c969f51ae4bd801ab553ce97"
        ],
        [
            "Axiom uniq : forall s, uniq (f s).",
            "VernacAssumption",
            "24d8f6839f4e0d2018a5b73e4b3dddba02a6bcdd"
        ],
        [
            "Axiom E : forall (s : seq K), f s =i s.",
            "VernacAssumption",
            "f15b5311c5ccfd2806767b91fa508aa5d36e8de2"
        ],
        [
            "Axiom eq : forall (s s' : seq K), s =i s' <-> f s = f s'.",
            "VernacAssumption",
            "d59485de135b0ca00d079d82180d6f73751581e1"
        ],
        [
            "End SortKeys.",
            "VernacEndSegment",
            "6131eafd048e11f9143c998930f56acfd18a7d9c"
        ],
        [
            "End SortKeysSig.",
            "VernacEndSegment",
            "946264edf05e9a4cf0469e1d64aec3ead302dab1"
        ],
        [
            "Module SortKeys : SortKeysSig.",
            "VernacDefineModule",
            "e016c3de7386fe84a89b85eec07c6f6311b499ae"
        ],
        [
            "Section SortKeys.",
            "VernacBeginSection",
            "b7dfbd2bb965cc683ef75331c559b302e6660458"
        ],
        [
            "Variable (K : choiceType).",
            "VernacAssumption",
            "f12791760ea7a097b3e48c57d86546a92346fc64"
        ],
        [
            "Implicit Types (k : K) (ks : seq K).",
            "VernacReserve",
            "5e27340fa8d91bf3833afd52da9b45b618dd251e"
        ],
        [
            "Definition f (s : seq K) := choose (perm_eq (undup s)) (undup s).",
            "VernacDefinition",
            "ef692911a7cadb26a84cbde2bd03c59600966a43"
        ],
        [
            "Fact perm s : perm_eq (f s) (undup s).",
            "VernacStartTheoremProof",
            "87e50b710b670b3da65412ee5bd255e1062fdcba"
        ],
        [
            "by rewrite perm_eq_sym chooseP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact uniq s : uniq (f s).",
            "VernacStartTheoremProof",
            "7e03a83b7ede1ccbf1bb82183c683c4666484627"
        ],
        [
            "by rewrite (perm_eq_uniq (perm _)) undup_uniq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact E (s : seq K) : f s =i s.",
            "VernacStartTheoremProof",
            "8061e74a64755b84f17613c5030b0dbac5f450e2"
        ],
        [
            "by move=> x; rewrite (perm_eq_mem (perm _)) mem_undup.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq (s s' : seq K) : s =i s' <-> f s = f s'.",
            "VernacStartTheoremProof",
            "1136fb7ea8cf55c6e1224d8f31d5d3e4012c4f53"
        ],
        [
            "split=> [eq_ss'|eq_ss' k]; last by rewrite -E eq_ss' E.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite /f; have peq_ss' : perm_eq (undup s) (undup s').",
            "VernacExtend",
            "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
        ],
        [
            "by apply: uniq_perm_eq; rewrite ?undup_uniq // => x; rewrite !mem_undup.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (@choose_id _ _ _ (undup s')) //=; apply: eq_choose => x /=.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by apply: sym_left_transitive; [exact: perm_eq_sym|exact: perm_eq_trans|].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SortKeys.",
            "VernacEndSegment",
            "6131eafd048e11f9143c998930f56acfd18a7d9c"
        ],
        [
            "End SortKeys.",
            "VernacEndSegment",
            "6131eafd048e11f9143c998930f56acfd18a7d9c"
        ],
        [
            "Hint Resolve SortKeys.perm.",
            "VernacHints",
            "d14fad414bcc1628710163af8919f0a6b563923f"
        ],
        [
            "Hint Resolve SortKeys.uniq.",
            "VernacHints",
            "072b11f5fd3502089ba03f6b2ce0e2bbe1ae82d7"
        ],
        [
            "Hint Resolve SortKeys.E.",
            "VernacHints",
            "3927fb3d8ce743107bbfb2d3563d4376dc8af22e"
        ],
        [
            "Notation sort_keys := SortKeys.f.",
            "VernacSyntacticDefinition",
            "972a6cbf4f623e1000bc060beeec9397aeb78838"
        ],
        [
            "Notation sort_keys_perm := SortKeys.perm.",
            "VernacSyntacticDefinition",
            "42cf364cc71b3d195d80eb453232f57d1aa9d1ec"
        ],
        [
            "Notation sort_keys_uniq := SortKeys.uniq.",
            "VernacSyntacticDefinition",
            "dcee950cd550720d50bc3135a3e4162fca42b77a"
        ],
        [
            "Notation sort_keysE := SortKeys.E.",
            "VernacSyntacticDefinition",
            "6c4d165072646507cd7ea44c4c98cdd58eaee6d9"
        ],
        [
            "Notation eq_sort_keys := SortKeys.eq.",
            "VernacSyntacticDefinition",
            "54ca280c6f89cfd585872dad9abd772e0d7c6fed"
        ],
        [
            "Section ChoiceKeys.",
            "VernacBeginSection",
            "0487a9fa369dd8b63875c0286c6b366e744ddf2f"
        ],
        [
            "Variable (K : choiceType).",
            "VernacAssumption",
            "f12791760ea7a097b3e48c57d86546a92346fc64"
        ],
        [
            "Implicit Types (k : K) (ks : seq K).",
            "VernacReserve",
            "5e27340fa8d91bf3833afd52da9b45b618dd251e"
        ],
        [
            "Lemma mem_sort_keys ks k : k \\in ks -> k \\in sort_keys ks.",
            "VernacStartTheoremProof",
            "eb8bbcf5fa5c66c77b32040f1f382375f55cccb5"
        ],
        [
            "by rewrite sort_keysE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_sort_keys_intro ks k : k \\in sort_keys ks -> k \\in ks.",
            "VernacStartTheoremProof",
            "98b5882831fd1b0da5bff894431f9ed1f1d3d019"
        ],
        [
            "by rewrite sort_keysE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sort_keys_nil : sort_keys [::] = [::] :> seq K.",
            "VernacStartTheoremProof",
            "c4d9be34d5b1ddc0b3f78a730f8257272bbf695d"
        ],
        [
            "have := sort_keysE ([::] : seq K).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by case: sort_keys => //= a l /(_ a); rewrite mem_head.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sort_keys_id ks : sort_keys (sort_keys ks) = sort_keys ks.",
            "VernacStartTheoremProof",
            "ac6a4a8e85778aeb3dc7c13d3009356f9d258556"
        ],
        [
            "by have /eq_sort_keys := sort_keysE ks.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition canonical_keys ks := sort_keys ks == ks.",
            "VernacDefinition",
            "c6b86b6b3ac5ab571927078a55c0f772c7a33cf7"
        ],
        [
            "Lemma canonical_uniq ks : canonical_keys ks -> uniq ks.",
            "VernacStartTheoremProof",
            "172bef90f268759c36d0e927f50376464376d36d"
        ],
        [
            "by move=> /eqP <-; exact: sort_keys_uniq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma canonical_sort_keys ks : canonical_keys (sort_keys ks).",
            "VernacStartTheoremProof",
            "9da6bb4c66aa4fe604b9cc2ab86eb3f6171397c2"
        ],
        [
            "by rewrite /canonical_keys sort_keys_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma canonical_eq_keys ks ks' : canonical_keys ks -> canonical_keys ks' -> ks =i ks' -> ks = ks'.",
            "VernacStartTheoremProof",
            "4d463a8611ed088e95ecb922bd263f764b9d31dd"
        ],
        [
            "move=> /eqP; case: _ /; move=> /eqP; case: _ / => eq_ks_ks'.",
            "VernacExtend",
            "fc1ec258bee181648c9cf0d67335f117ee57ee3e"
        ],
        [
            "by apply/eq_sort_keys => x; rewrite -sort_keysE eq_ks_ks' sort_keysE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_sort_keys ks : size (sort_keys ks) = size (undup ks).",
            "VernacStartTheoremProof",
            "3694e771c2cfd59d1836841764e7601749806a29"
        ],
        [
            "exact: perm_eq_size.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ChoiceKeys.",
            "VernacEndSegment",
            "39cff4a31bf22cb329358550549035ba88b9c610"
        ],
        [
            "Arguments eq_sort_keys {K s s'}.",
            "VernacArguments",
            "23fc1f04507bd5686ccf8504a2da78030c04aa91"
        ],
        [
            "Section Def.",
            "VernacBeginSection",
            "891f679f68bab7ae72311468953cd39d353d2080"
        ],
        [
            "Variables (K : choiceType).",
            "VernacAssumption",
            "f12791760ea7a097b3e48c57d86546a92346fc64"
        ],
        [
            "Structure finSet : Type := mkFinSet { enum_fset :> seq K; _ : canonical_keys enum_fset }.",
            "VernacInductive",
            "505c681bd8efd35d7d44396932ce1515e6e291da"
        ],
        [
            "Definition finset_of (_ : phant K) := finSet.",
            "VernacDefinition",
            "f0b498ec9f67ca99f7529bec657f35843b6102a9"
        ],
        [
            "End Def.",
            "VernacEndSegment",
            "616ad5692568c74f61a9df3a82ac03d2b7ebac01"
        ],
        [
            "Identity Coercion type_of_finset : finset_of >-> finSet.",
            "VernacIdentityCoercion",
            "400b40c8220c881c7966d40d4ea847b8ca1684e3"
        ],
        [
            "Notation \"{fset T }\" := (@finset_of _ (Phant T)) : type_scope.",
            "VernacNotation",
            "e57645a3074f5cff44c0828f3b0b4f603a54976b"
        ],
        [
            "Definition pred_of_finset (K : choiceType) (f : finSet K) : pred K := fun k => k \\in (enum_fset f).",
            "VernacDefinition",
            "6573c49e119790b7d84007e195f9b82c53d24d1a"
        ],
        [
            "Canonical finSetPredType (K : choiceType) := Eval hnf in mkPredType (@pred_of_finset K).",
            "VernacDefinition",
            "f502fff1706ee598d99f25c5a42eba877fd444b8"
        ],
        [
            "Section FinSetCanonicals.",
            "VernacBeginSection",
            "1407dba2560e75d93a3151f09d2cd07bc1b57585"
        ],
        [
            "Variable (K : choiceType).",
            "VernacAssumption",
            "f12791760ea7a097b3e48c57d86546a92346fc64"
        ],
        [
            "Canonical fsetType := Eval hnf in [subType for (@enum_fset K)].",
            "VernacDefinition",
            "d87c89ce0ea0a67ff648bde647f562297f33fddc"
        ],
        [
            "Definition fset_eqMixin := Eval hnf in [eqMixin of {fset K} by <:].",
            "VernacDefinition",
            "c841d6366c1e3057e2ceff27d687a37d5fb74089"
        ],
        [
            "Canonical fset_eqType := Eval hnf in EqType {fset K} fset_eqMixin.",
            "VernacDefinition",
            "deae58f16a0de65a205f5f78dbfa68b3832fa7a0"
        ],
        [
            "Definition fset_choiceMixin := Eval hnf in [choiceMixin of {fset K} by <:].",
            "VernacDefinition",
            "fbe75d1d0cfe3147270d1b18c7a98ec7eca74849"
        ],
        [
            "Canonical fset_choiceType := Eval hnf in ChoiceType {fset K} fset_choiceMixin.",
            "VernacDefinition",
            "403749f7d11b25e333d0126e6b17861191bd87b8"
        ],
        [
            "End FinSetCanonicals.",
            "VernacEndSegment",
            "b10362766722b96a6e52f7843e820829a06afb66"
        ],
        [
            "Section FinTypeSet.",
            "VernacBeginSection",
            "9a15f3c9dde827ccf992afadeaa0adf95fcbd1cb"
        ],
        [
            "Variables (K : choiceType) (A : finSet K).",
            "VernacAssumption",
            "40314293bb2576804972e380be026fcd7a3e7911"
        ],
        [
            "Lemma keys_canonical : canonical_keys (enum_fset A).",
            "VernacStartTheoremProof",
            "eb7791f002bbaff4056f30a05f36eda3c64c3720"
        ],
        [
            "by case: A.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fset_uniq : uniq (enum_fset A).",
            "VernacStartTheoremProof",
            "cd6086219cbb22377822129f001e10fc98e078a2"
        ],
        [
            "by rewrite canonical_uniq // keys_canonical.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Record fset_sub_type : predArgType := FSetSub {fsval : K; fsvalP : in_mem fsval (@mem K _ A)}.",
            "VernacInductive",
            "85ed532578e495e3e4d03f4c856e647c11d9f875"
        ],
        [
            "Canonical fset_sub_subType := Eval hnf in [subType for fsval].",
            "VernacDefinition",
            "c01f0ebc7844601707f297b06732bb3290004e1c"
        ],
        [
            "Definition fset_sub_eqMixin := Eval hnf in [eqMixin of fset_sub_type by <:].",
            "VernacDefinition",
            "a0cd2fe21922c8185710d3e8050cce089bc1c422"
        ],
        [
            "Canonical fset_sub_eqType := Eval hnf in EqType fset_sub_type fset_sub_eqMixin.",
            "VernacDefinition",
            "5aceab0262a8bf38fa30c80fba1fc36a91d528d0"
        ],
        [
            "Definition fset_sub_choiceMixin := Eval hnf in [choiceMixin of fset_sub_type by <:].",
            "VernacDefinition",
            "9c01ccad592aef0f8df09e599526916975ace4e5"
        ],
        [
            "Canonical fset_sub_choiceType := Eval hnf in ChoiceType fset_sub_type fset_sub_choiceMixin.",
            "VernacDefinition",
            "3534c7b89eac8c6bf05be400eff41695637df636"
        ],
        [
            "Definition fset_sub_enum : seq fset_sub_type := undup (pmap insub (enum_fset A)).",
            "VernacDefinition",
            "deabddadc95d1248f56c83001eb10f61547008c2"
        ],
        [
            "Lemma mem_fset_sub_enum x : x \\in fset_sub_enum.",
            "VernacStartTheoremProof",
            "55bab9a1cf16929e02b54e83c35169f20ad8246b"
        ],
        [
            "by rewrite mem_undup mem_pmap -valK map_f // fsvalP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma val_fset_sub_enum : map val fset_sub_enum = enum_fset A.",
            "VernacStartTheoremProof",
            "536bde71d10dc6cce0b98cad00c1e7bddd39ea8e"
        ],
        [
            "rewrite /fset_sub_enum undup_id ?pmap_sub_uniq ?fset_uniq//.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (pmap_filter (@insubK _ _ _)); apply/all_filterP.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by apply/allP => x; rewrite isSome_insub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition fset_sub_pickle x := index x fset_sub_enum.",
            "VernacDefinition",
            "3bce13b9384b5ca42219d42f79ab6267a26c3d65"
        ],
        [
            "Definition fset_sub_unpickle n := nth None (map some fset_sub_enum) n.",
            "VernacDefinition",
            "fe1e55aaef1d1ad34ce9da75b9326b5795a6cdf1"
        ],
        [
            "Lemma fset_sub_pickleK : pcancel fset_sub_pickle fset_sub_unpickle.",
            "VernacStartTheoremProof",
            "5936f4a3a770cf555ce244ede90511f6a048a320"
        ],
        [
            "rewrite /fset_sub_unpickle => x.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite (nth_map x) ?nth_index ?index_mem ?mem_fset_sub_enum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition fset_sub_countMixin := CountMixin fset_sub_pickleK.",
            "VernacDefinition",
            "723c9d45f3f87b9628b891e7a46d0917629ed0a1"
        ],
        [
            "Canonical fset_sub_countType := Eval hnf in CountType fset_sub_type fset_sub_countMixin.",
            "VernacDefinition",
            "63aa975d43dc250e8be350af0f371f92452efde3"
        ],
        [
            "Definition fset_sub_finMixin := Eval hnf in UniqFinMixin (undup_uniq _) mem_fset_sub_enum.",
            "VernacDefinition",
            "9a71a33cc2466801f875d9571fcf224f7a2c2c7b"
        ],
        [
            "Canonical fset_sub_finType := Eval hnf in FinType fset_sub_type fset_sub_finMixin.",
            "VernacDefinition",
            "009dbc081f7c52ef392affc40ecb23cedc12fdf9"
        ],
        [
            "Canonical fset_sub_subfinType := [subFinType of fset_sub_type].",
            "VernacDefinition",
            "73653efa0f175a898ac2eefc34104becbe0e4b8a"
        ],
        [
            "Lemma enum_fsetE : enum_fset A = [seq val i | i <- enum fset_sub_type].",
            "VernacStartTheoremProof",
            "0d0d0de2b53179ef557df6bf896526aa25a1ba76"
        ],
        [
            "by rewrite enumT unlock val_fset_sub_enum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardfE : size (enum_fset A) = #|fset_sub_type|.",
            "VernacStartTheoremProof",
            "5a9586b330a03a1bb73b0ae69ccb74f5605fe934"
        ],
        [
            "by rewrite cardE enum_fsetE size_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FinTypeSet.",
            "VernacEndSegment",
            "7af1cb9a5c2db52dd6b171a27c8668da85d1ef10"
        ],
        [
            "Identity Coercion finSet_sub_type : finset_of >-> finSet.",
            "VernacIdentityCoercion",
            "5ab5cb170a0875fbdb5b2907ec55ab4f9aa37f15"
        ],
        [
            "Coercion fset_sub_type : finSet >-> predArgType.",
            "VernacCoercion",
            "4ce7259213ec37deebf89307bc8ee25c9eed8b97"
        ],
        [
            "Hint Resolve fsvalP fset_uniq mem_fset_sub_enum.",
            "VernacHints",
            "0b892fee02ae5ec6993d327aaff74a17c369ab1e"
        ],
        [
            "Delimit Scope fset_scope with fset.",
            "VernacDelimiters",
            "cd18ba9b0af7515a5e84143271bd6259db502a60"
        ],
        [
            "Local Open Scope fset_scope.",
            "VernacOpenCloseScope",
            "6bfb269b0288749b21ee3f415c31e0547d83a630"
        ],
        [
            "Notation \"[` kf ]\" := (FSetSub kf) (format \"[` kf ]\") : fset_scope.",
            "VernacNotation",
            "51bda22010f508932e20c1e76249efc02fcf0014"
        ],
        [
            "Lemma fsetsubE (T : choiceType) (A : {fset T}) (x : A) (xA : val x \\in A) : [` xA] = x.",
            "VernacStartTheoremProof",
            "2bc46508690632047ff79c04de3f6823e2c24ab0"
        ],
        [
            "by apply/val_inj => /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Notation \"#|` A |\" := (size (enum_fset A)) (at level 0, A at level 99, format \"#|` A |\") : nat_scope.",
            "VernacNotation",
            "0680d15391dabfd2c4098bfb1c7033f3f03dce44"
        ],
        [
            "Definition fset_predT {T : choiceType} {A : {fset T}} : simpl_pred A := @predT A.",
            "VernacDefinition",
            "d98bf59a5db3f1fffa3947f2629792e160e2647b"
        ],
        [
            "Coercion set_of_fset (K : choiceType) (A : {fset K}) : {set A} := [set x in {: A}].",
            "VernacDefinition",
            "91d66aa4e06bc693a86467ca58ddca328a555582"
        ],
        [
            "Arguments pred_of_finset : simpl never.",
            "VernacArguments",
            "3fe085b9a87405c48c8c2856347171838382d703"
        ],
        [
            "Section SeqFset.",
            "VernacBeginSection",
            "42f1a0c5fc38a7ec2e140aad43929b1698f5083f"
        ],
        [
            "Variable finset_key : unit.",
            "VernacAssumption",
            "5d78f33c3660679d34a701fc630683cb46bd1046"
        ],
        [
            "Definition seq_fset : forall K : choiceType, seq K -> {fset K} := locked_with finset_key (fun K s => mkFinSet (@canonical_sort_keys K s)).",
            "VernacDefinition",
            "a210b70c1ff8a27f6ca0e7afcb2140b8ed88b022"
        ],
        [
            "Variable (K : choiceType) (s : seq K).",
            "VernacAssumption",
            "6fda18722adf33796b79a5509b14a9a9bc9f895e"
        ],
        [
            "Lemma seq_fsetE : seq_fset s =i s.",
            "VernacStartTheoremProof",
            "9a616757a4c7f8e7b803552a2f82ad4e80fac93c"
        ],
        [
            "by move=> a; rewrite [seq_fset]unlock sort_keysE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_seq_fset : size (seq_fset s) = size (undup s).",
            "VernacStartTheoremProof",
            "186ad1612b04d61563b0f6abc9261ddb47381819"
        ],
        [
            "by rewrite [seq_fset]unlock /= size_sort_keys.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma seq_fset_uniq : uniq (seq_fset s).",
            "VernacStartTheoremProof",
            "19616769acd369fb2cb77103c87690d4cac63329"
        ],
        [
            "by rewrite [seq_fset]unlock /= sort_keys_uniq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma seq_fset_perm : perm_eq (seq_fset s) (undup s).",
            "VernacStartTheoremProof",
            "b074abda1cef9ae36390f4a50b8412aa987e221f"
        ],
        [
            "by rewrite [seq_fset]unlock //= sort_keys_perm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SeqFset.",
            "VernacEndSegment",
            "409ed2c8ad580ea2d526f9d2097bc9c91cf185c8"
        ],
        [
            "Hint Resolve keys_canonical.",
            "VernacHints",
            "b76919c93c26cfe8e123b819af36e2cccd3d8354"
        ],
        [
            "Hint Resolve sort_keys_uniq.",
            "VernacHints",
            "1c20b2cddb9d1087bf38960ad6ef0f70da000edb"
        ],
        [
            "Canonical finSetSubType K := [subType for (@enum_fset K)].",
            "VernacDefinition",
            "3e99b4111b495a609d43d83d58c030a96cad14ed"
        ],
        [
            "Definition finSetEqMixin (K : choiceType) := [eqMixin of {fset K} by <:].",
            "VernacDefinition",
            "c59018cecb014f7a20dc853ee022e5e24d225318"
        ],
        [
            "Canonical finSetEqType (K : choiceType) := EqType {fset K} (finSetEqMixin K).",
            "VernacDefinition",
            "b5712ae3be9664ad8eaf13a291023ae8b4bb164a"
        ],
        [
            "Definition finSetChoiceMixin (K : choiceType) := [choiceMixin of {fset K} by <:].",
            "VernacDefinition",
            "5ab96a3b4ac7a1a6ef5abd9017c9c1eb0b827bcb"
        ],
        [
            "Canonical finSetChoiceType (K : choiceType) := ChoiceType {fset K} (finSetChoiceMixin K).",
            "VernacDefinition",
            "c72d841dbbb7675f4584e1d0b27c99b2d25ed932"
        ],
        [
            "Section FinPredStruct.",
            "VernacBeginSection",
            "6eb74f3e6e078e342f2621921c5ce0957dd372d9"
        ],
        [
            "Structure finpredType (T : eqType) := FinPredType { finpred_sort :> Type; tofinpred : finpred_sort -> pred T; _ : {mem : finpred_sort -> mem_pred T | isMem tofinpred mem}; _ : {finpred_seq : finpred_sort -> seq T | ((forall p, uniq (finpred_seq p)) * forall p x, x \\in finpred_seq p = tofinpred p x)%type} }.",
            "VernacInductive",
            "1b5fcedd60cff043046be25a6b93b1f1c6307610"
        ],
        [
            "Canonical finpredType_predType (T : eqType) (fpT : finpredType T) := @PredType T (finpred_sort fpT) (@tofinpred T fpT) (let: FinPredType _ _ mem _ := fpT in mem).",
            "VernacDefinition",
            "27a5c678019ebb2abf532a74d5f2d808ac299a18"
        ],
        [
            "Definition enum_finpred (T : eqType) (fpT : finpredType T) : fpT -> seq T := let: FinPredType _ _ _ (exist s _) := fpT in s.",
            "VernacDefinition",
            "bb61b1c9c7989a02f15ffbef4f7678b56762500e"
        ],
        [
            "Lemma enum_finpred_uniq (T : eqType) (fpT : finpredType T) (p : fpT) : uniq (enum_finpred p).",
            "VernacStartTheoremProof",
            "4cd6e92a74226e9e46df73a237a85b6ed3b696cc"
        ],
        [
            "by case: fpT p => ??? [s sE] p; rewrite sE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma enum_finpredE (T : eqType) (fpT : finpredType T) (p : fpT) : enum_finpred p =i p.",
            "VernacStartTheoremProof",
            "1199fcf4dd3c8fdc3779b80904a209a9b7dab517"
        ],
        [
            "by case: fpT p => ??? [s sE] p x; rewrite sE -topredE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkFinPredType_of_subproof (T : eqType) (pT : predType T) (fpred_seq : pT -> seq T) (pred_fsetE : forall p, fpred_seq p =i p) : forall p x, x \\in fpred_seq p = topred p x.",
            "VernacStartTheoremProof",
            "7a1e1c1da3ea00428510a88903731beb6ca8d94d"
        ],
        [
            "by move=> p x; rewrite topredE pred_fsetE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition mkFinPredType_of (T : eqType) (U : Type) := fun (pT : predType T) & pred_sort pT -> U => fun a mP (pT' := @PredType T U a mP) & phant_id pT' pT => fun (fpred_seq : pT' -> seq T) (fpred_seq_uniq : forall p, uniq (fpred_seq p)) (fpred_seqE : forall p, fpred_seq p =i p) => @FinPredType T U a mP (exist _ fpred_seq (fpred_seq_uniq, (mkFinPredType_of_subproof fpred_seqE))).",
            "VernacDefinition",
            "7c8017357fd997f4031d11f5833d35cff7cef972"
        ],
        [
            "Definition clone_finpredType (T : eqType) (U : Type) := fun (pT : finpredType T) & finpred_sort pT -> U => fun a mP pP (pT' := @FinPredType T U a mP pP) & phant_id pT' pT => pT'.",
            "VernacDefinition",
            "d98ac183786cc1e719af9a1ec6dc7c902de7d0dd"
        ],
        [
            "Structure is_finite (T : eqType) (P : pred T) := IsFinite { seq_of_is_finite :> seq T; _ : uniq seq_of_is_finite; _ : forall x, x \\in seq_of_is_finite = P x; }.",
            "VernacInductive",
            "19a3e21b0600b0a812aba7b8dfe4bc9ec684e750"
        ],
        [
            "Lemma is_finite_uniq (T : eqType) (P : pred T) (p : is_finite P) : uniq p.",
            "VernacStartTheoremProof",
            "81b4bafc92710501e83d50490c1f07f091050127"
        ],
        [
            "by case: p.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_finiteE (T : eqType) (P : pred T) (p : is_finite P) x : x \\in (seq_of_is_finite p) = P x.",
            "VernacStartTheoremProof",
            "f116c2fc3bca1eea984ec74a5f81d502035552dd"
        ],
        [
            "by case: p.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Structure finpred (T : eqType) (pT : predType T) := FinPred { pred_of_finpred :> pT; _ : is_finite [pred x in pred_of_finpred] }.",
            "VernacInductive",
            "31db50c39b21c54acce04833a5fbc1d11d6773b3"
        ],
        [
            "Definition enum_fin (T : eqType) (pT : predType T) (p : finpred pT) : seq T := let: FinPred _ fp := p in fp.",
            "VernacDefinition",
            "632ef8cd787bad2b33f054ca23d4860af5ecf6fb"
        ],
        [
            "Lemma enum_fin_uniq (T : eqType) (pT : predType T) (p : finpred pT) : uniq (enum_fin p).",
            "VernacStartTheoremProof",
            "4d92df7d9c37fda65ace2b8cf5120b1deb5daea1"
        ],
        [
            "by case: p => ?[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma enum_finE (T : eqType) (pT : predType T) (p : finpred pT) : enum_fin p =i (pred_of_finpred p).",
            "VernacStartTheoremProof",
            "ad3e76a68d3a5008d7514517f76b762bd541c63c"
        ],
        [
            "by case: p => ?[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical fin_finpred (T : eqType) (pT : finpredType T) (p : pT) := @FinPred _ _ p (@IsFinite _ _ (enum_finpred p) (enum_finpred_uniq p) (enum_finpredE p)).",
            "VernacDefinition",
            "e68a22ad78c9acb58ccbcceb4d127048f470f440"
        ],
        [
            "Definition finpred_of (T : eqType) (pT : predType T) (p : pT) (fp : finpred pT) & phantom pT fp : finpred pT := fp.",
            "VernacDefinition",
            "620d9d4e8788f9b40bf7defdc6e18c48cb801f7e"
        ],
        [
            "Structure finmempred (T : eqType) := FinMemPred { pred_of_finmempred :> mem_pred T; _ : is_finite (fun x => in_mem x pred_of_finmempred) }.",
            "VernacInductive",
            "dd0e90793bdd95168cd70e4e9f8684b937cf88c3"
        ],
        [
            "Definition enum_finmem (T : eqType) (p : finmempred T) : seq T := let: FinMemPred _ fp := p in fp.",
            "VernacDefinition",
            "9cf318dd6ac5212475b297238d07742c670c3c70"
        ],
        [
            "Lemma enum_finmem_uniq (T : eqType) (p : finmempred T) : uniq (enum_finmem p).",
            "VernacStartTheoremProof",
            "ab7477887a577916822e634fe6d0f30e3614dfd6"
        ],
        [
            "by case: p => ?[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma enum_finmemE (T : eqType) (p : finmempred T) : enum_finmem p =i p.",
            "VernacStartTheoremProof",
            "17f2fcd12e4b23a97c4674d363adb0883b0ccd87"
        ],
        [
            "by case: p => ?[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition finmempred_of (T : eqType) (P : pred T) (mP : finmempred T) & phantom (mem_pred T) mP : finmempred T := mP.",
            "VernacDefinition",
            "15660ac530ec94eb6eb1a28f17c89076f558de5b"
        ],
        [
            "Canonical mem_fin (T : eqType) (pT : predType T) (p : finpred pT) := @FinMemPred _ (mem p) (@IsFinite _ _ (enum_fin p) (enum_fin_uniq p) (enum_finE p)).",
            "VernacDefinition",
            "bd8f7f63c7401b1fdc36eaa0ea1b13b8bb9fccf8"
        ],
        [
            "End FinPredStruct.",
            "VernacEndSegment",
            "edb04f8c286a7b08cde48eb2ead8e96f4dc573b4"
        ],
        [
            "Notation \"[ 'finpredType' 'of' T ]\" := (@clone_finpredType _ T _ id _ _ _ id) (at level 0, format \"[ 'finpredType' 'of' T ]\") : form_scope.",
            "VernacNotation",
            "59bdbfc6a3d3ce960593f1649ec24e723f916289"
        ],
        [
            "Notation mkFinPredType T s s_uniq sE := (@mkFinPredType_of _ T _ id _ _ id s s_uniq sE).",
            "VernacSyntacticDefinition",
            "ad37a60eeb40dedb4a942e445479bd2760f4d549"
        ],
        [
            "Section CanonicalFinPred.",
            "VernacBeginSection",
            "69b59274e6c7b9955e943a0d66b72ef08f199aaa"
        ],
        [
            "Canonical fset_finpredType (T: choiceType) := mkFinPredType (finSet T) (@enum_fset T) (@fset_uniq T) (fun _ _ => erefl).",
            "VernacDefinition",
            "46998726154a364451c2d4dae21167848b14fa9a"
        ],
        [
            "Canonical pred_finpredType (T : finType) := mkFinPredType (pred T) (fun P => enum_mem (mem P)) (@enum_uniq T) (@mem_enum T).",
            "VernacDefinition",
            "98177c44c9a12fb7d10e26d5d8534ed86ebb9a82"
        ],
        [
            "Canonical simpl_pred_finpredType (T : finType) := mkFinPredType (simpl_pred T) (fun P => enum_mem (mem P)) (@enum_uniq T) (@mem_enum T).",
            "VernacDefinition",
            "41c9a6f24263ec92c12a457e802bafd769358fef"
        ],
        [
            "Canonical fset_finpred (T: choiceType) (A : finSet T) := @FinPred _ _ (enum_fset A) (@IsFinite _ _ (enum_fset A) (fset_uniq _) (fun=> erefl)).",
            "VernacDefinition",
            "7924e826f582df5836e36be96fc40b140d177542"
        ],
        [
            "Program Canonical subfinset_finpred (T : choiceType) (A : finmempred T) (Q : pred T) := @FinPred _ _ [pred x in A | Q x] (@IsFinite _ _ [seq x <- enum_finmem A | Q x] _ _).",
            "VernacDefinition",
            "df730a70bd9d15215c084fa361fc1cdbfc5aff24"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "by rewrite filter_uniq// enum_finmem_uniq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "by rewrite !inE !mem_filter andbC enum_finmemE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical seq_finpredType (T : eqType) := mkFinPredType (seq T) undup (@undup_uniq T) (@mem_undup T).",
            "VernacDefinition",
            "508ff2c2beb27d45511c4740ddaeef1a53f7e1a8"
        ],
        [
            "End CanonicalFinPred.",
            "VernacEndSegment",
            "749fddc74bdf575d05689b2a7cc79286c55da617"
        ],
        [
            "Local Notation imfset_def key := (fun (T K : choiceType) (f : T -> K) (p : finmempred T) of phantom (mem_pred T) p => seq_fset key [seq f x | x <- enum_finmem p]).",
            "VernacSyntacticDefinition",
            "df1e48139b8ce619ba21995d951c268a8ab6ae45"
        ],
        [
            "Local Notation imfset2_def key := (fun (K T1 : choiceType) (T2 : T1 -> choiceType) (f : forall x : T1, T2 x -> K) (p1 : finmempred T1) (p2 : forall x : T1, finmempred (T2 x)) of phantom (mem_pred T1) p1 & phantom (forall x, mem_pred (T2 x)) p2 => seq_fset key (allsigs f (enum_finmem p1) (fun x => enum_finmem (p2 x)))).",
            "VernacSyntacticDefinition",
            "66ec2430adf4074506f0040265ae10fe24f6dcaa"
        ],
        [
            "Module Type ImfsetSig.",
            "VernacDeclareModuleType",
            "d922823bcbe1594a8568e668c2262df998bc722d"
        ],
        [
            "Parameter imfset : forall (key : unit) (T K : choiceType) (f : T -> K) (p : finmempred T), phantom (mem_pred T) p -> {fset K}.",
            "VernacAssumption",
            "35d666e6db3a21b10532056a271ee8dbda7a8cbb"
        ],
        [
            "Parameter imfset2 : forall (key : unit) (K T1 : choiceType) (T2 : T1 -> choiceType)(f : forall x : T1, T2 x -> K) (p1 : finmempred T1) (p2 : forall x : T1, finmempred (T2 x)), phantom (mem_pred T1) p1 -> phantom (forall x, mem_pred (T2 x)) p2 -> {fset K}.",
            "VernacAssumption",
            "9d5df728c801b8a9a7032394b2edf6b25f842985"
        ],
        [
            "Axiom imfsetE : forall key, imfset key = imfset_def key.",
            "VernacAssumption",
            "450a477654acae010820bdbe9ecf5c014717379f"
        ],
        [
            "Axiom imfset2E : forall key, imfset2 key = imfset2_def key.",
            "VernacAssumption",
            "750eff0b8796d28a7bc9882cf0ebb0203090e9de"
        ],
        [
            "End ImfsetSig.",
            "VernacEndSegment",
            "9d99fc5eaecb56598852503239762d3cb0a2cb9f"
        ],
        [
            "Module Imfset : ImfsetSig.",
            "VernacDefineModule",
            "f1096b4d1b1ff4ebaca3412e64a8a1c52b5835aa"
        ],
        [
            "Definition imfset key := imfset_def key.",
            "VernacDefinition",
            "f7c1c445a316d865177e8fe50cb3e62f885693d8"
        ],
        [
            "Definition imfset2 key := imfset2_def key.",
            "VernacDefinition",
            "490ebd38bb4ccc8482fbf58eab639899175df013"
        ],
        [
            "Lemma imfsetE key : imfset key = imfset_def key.",
            "VernacStartTheoremProof",
            "5d28f372bddd419af5f2d7fba612937aa4911f8f"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imfset2E key : imfset2 key = imfset2_def key.",
            "VernacStartTheoremProof",
            "062325b44f95822efb8505a73d00a99e07a05515"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Imfset.",
            "VernacEndSegment",
            "024300ac314e300dc554b71803a8da05a05ead6f"
        ],
        [
            "Notation imfset key f p := (Imfset.imfset key f (Phantom _ (pred_of_finmempred p))).",
            "VernacSyntacticDefinition",
            "97726a7a2c5de180b9cad5cc349f1350a4fdce80"
        ],
        [
            "Notation imfset2 key f p q := (Imfset.imfset2 key f (Phantom _ (pred_of_finmempred p)) (Phantom _ (fun x => (pred_of_finmempred (q x))))).",
            "VernacSyntacticDefinition",
            "abcc84a94b3777e2971afa86b09c34f880b58722"
        ],
        [
            "Canonical imfset_unlock k := Unlockable (Imfset.imfsetE k).",
            "VernacDefinition",
            "954fd51f0aa40d4a1e5a6d3a2d9b2616e9d5b196"
        ],
        [
            "Canonical imfset2_unlock k := Unlockable (Imfset.imfset2E k).",
            "VernacDefinition",
            "c83707d8ea9c68a779088529347e6d9b7882ed37"
        ],
        [
            "Notation \"A `=` B\" := (A = B :> {fset _}) (at level 70, no associativity, only parsing) : fset_scope.",
            "VernacNotation",
            "fe32c13212efe21658c8f5d1137c7a11f67d3c33"
        ],
        [
            "Notation \"A `<>` B\" := (A <> B :> {fset _}) (at level 70, no associativity, only parsing) : fset_scope.",
            "VernacNotation",
            "eb31b32bb691ca05813dc29e3413889686785964"
        ],
        [
            "Notation \"A `==` B\" := (A == B :> {fset _}) (at level 70, no associativity, only parsing) : fset_scope.",
            "VernacNotation",
            "f5b879342cb26b56c5c29b7e62bdef9c363630d3"
        ],
        [
            "Notation \"A `!=` B\" := (A != B :> {fset _}) (at level 70, no associativity, only parsing) : fset_scope.",
            "VernacNotation",
            "d0f764549f9e7595d3fa4418bae67d546408875c"
        ],
        [
            "Notation \"A `=P` B\" := (A =P B :> {fset _}) (at level 70, no associativity, only parsing) : fset_scope.",
            "VernacNotation",
            "1f0b62a136dd84b0ddff5bf7f3146bba0a2f078d"
        ],
        [
            "Notation \"f @`[ key ] A\" := (Imfset.imfset key f (Phantom _ (mem A))) (at level 24, key at level 0) : fset_scope.",
            "VernacNotation",
            "4c2a53dad921543f37a9d75febbb6afefe201021"
        ],
        [
            "Notation \"f @2`[ key ] ( A , B )\" := (Imfset.imfset2 key f (Phantom _ (mem A)) (Phantom _ (fun x => (mem (B x))))) (at level 24, format \"f @2`[ key ] ( A , B )\") : fset_scope.",
            "VernacNotation",
            "751d50c14d013a18bd6b0dd05ac3b78094c0ce90"
        ],
        [
            "Fact imfset_key : unit.",
            "VernacStartTheoremProof",
            "ab4f007f960b13349cccd1956bff11699fd10410"
        ],
        [
            "exact: tt.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Notation \"f @` A\" := (f @`[imfset_key] A) (at level 24) : fset_scope.",
            "VernacNotation",
            "7f12d63834f05c892858a0841b45290386c5dfc6"
        ],
        [
            "Notation \"f @2` ( A , B )\" := (f @2`[imfset_key] (A, B)) (at level 24, format \"f @2` ( A , B )\") : fset_scope.",
            "VernacNotation",
            "701ab6dc1a95c20474437d301c4097f3200e9950"
        ],
        [
            "Notation \"[ 'fset' E | x : T 'in' A ]\" := ((fun x : T => E) @` A) (at level 0, E, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "44c82fffb75bc53a261e15725db7dc98e137cf15"
        ],
        [
            "Notation \"[ 'fset' E | x 'in' A ]\" := [fset E | x : _ in A] (at level 0, E, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "bd0ccda781866bd4268af6d91e8ef962298b3ddb"
        ],
        [
            "Notation \"[ 'fset' E | x : A ]\" := [fset E | x : _ in {: A} ] (at level 0, E, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "78dce96119aa3de36e88d4b2f4bb7b2b6a22ee82"
        ],
        [
            "Notation \"[ 'fset' x : T 'in' A ]\" := [fset (x : T) | x in A] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "07f3e25acc1d3f1840ff0242f45a2e46547b621c"
        ],
        [
            "Notation \"[ 'fset' x : T 'in' A | P ]\" := [fset (x : T) | x in [pred x in A | P]] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "0cfdfbf9e0c03ff556ba8cc81013b7e48e4ec1e5"
        ],
        [
            "Notation \"[ 'fset' x 'in' A | P ]\" := [fset x : _ in A | P] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "39e080748a8e1f1bd91eb3495290f33b44ba421d"
        ],
        [
            "Notation \"[ 'fset' x 'in' A ]\" := [fset x : _ in A ] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "fb07b1b660c530f2ed4d601708811571ebc7bd27"
        ],
        [
            "Notation \"[ 'fset' x : T | P ]\" := [fset x in {: T} | P] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "08b8201cd34a449123d126f975e4d29589c178b9"
        ],
        [
            "Notation \"[ 'fset' x : T | P & Q ]\" := [fset x : T | P && Q] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "b82ad51658922a35160a872004120089c97aaa1e"
        ],
        [
            "Notation \"[ 'fset' x : T 'in' A | P & Q ]\" := [fset x : T in A | P && Q] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "d6022ec546e14d806bab064eadd1fb286355e865"
        ],
        [
            "Notation \"[ 'fset' x 'in' A | P & Q ]\" := [fset x in A | P && Q] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "2b5f6278d8b82f2a2ad43d3ec60c476a45ef63d1"
        ],
        [
            "Notation \"[ 'fset' E | x : T 'in' A , y : T' 'in' B ]\" := ((fun (x : T) (y : T') => E) @2` (A, fun x => B)) (at level 0, E, x at level 99, A at level 200, y at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "21cde5a41bc08b46e47ad8526f2124c500d0187f"
        ],
        [
            "Notation \"[ 'fset' E | x 'in' A , y 'in' B ]\" := [fset E | x : _ in A, y : _ in B] (at level 0, E, x at level 99, A at level 200, y at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "527c1500408bbfd88e28782f7b236fb061e93684"
        ],
        [
            "Notation \"[ 'fset[' key ] E | x : T 'in' A ]\" := ((fun x : T => E) @`[key] A) (at level 0, E, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "993510c208e2ab4ad5371ef4e00606d947aece0c"
        ],
        [
            "Notation \"[ 'fset[' key ] E | x 'in' A ]\" := [fset[key] E | x : _ in A] (at level 0, E, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "915bd7eb953be0fc78a1901051e1db0053a9e71c"
        ],
        [
            "Notation \"[ 'fset[' key ] E | x : A ]\" := [fset[key] E | x : _ in {: A} ] (at level 0, E, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "ad93e2d620045cb1eb951e4beac3434dbda720b9"
        ],
        [
            "Notation \"[ 'fset[' key ] x : T 'in' A ]\" := [fset[key] (x : T) | x in A] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "54647343c8227399aae775f09b2e6429e67aa61e"
        ],
        [
            "Notation \"[ 'fset[' key ] x : T 'in' A | P ]\" := [fset[key] (x : T) | x in [pred x in A | P]] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "7a1aecc4c23c50b723f181bcef9a38be8506a5f3"
        ],
        [
            "Notation \"[ 'fset[' key ] x 'in' A | P ]\" := [fset[key] x : _ in A | P] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "bc061f1823f6e9eaf7e9f1fe05d568dbdf816972"
        ],
        [
            "Notation \"[ 'fset[' key ] x 'in' A ]\" := [fset[key] x : _ in A ] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "a03d8eafc02c6c8e541022c0d6557212ccadb41b"
        ],
        [
            "Notation \"[ 'fset[' key ] x : T | P ]\" := [fset[key] x in {: T} | P] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "c7f61ab85463a93ea99e8bb6c06dac455a4609e8"
        ],
        [
            "Notation \"[ 'fset[' key ] x : T | P & Q ]\" := [fset[key] x : T | P && Q] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "6b036115b4950d86ea08621fa5f09b945f2d3258"
        ],
        [
            "Notation \"[ 'fset[' key ] x : T 'in' A | P & Q ]\" := [fset[key] x : T in A | P && Q] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "0a11e03144a64ed8f82e31c8cd6252ecab7500b6"
        ],
        [
            "Notation \"[ 'fset[' key ] x 'in' A | P & Q ]\" := [fset[key] x in A | P && Q] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "d653c9f2408dfc861da30b64b7e633ce8575ea21"
        ],
        [
            "Notation \"[ 'fset[' key ] E | x : T 'in' A , y : T' 'in' B ]\" := ((fun (x : T) (y : T') => E) @2` (A, fun x => B)) (at level 0, E, x at level 99, A at level 200, y at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "e2cc8e513f01cda9487b653875cfd6f34fc1073a"
        ],
        [
            "Notation \"[ 'fset[' key ] E | x 'in' A , y 'in' B ]\" := [fset[key] E | x : _ in A, y : _ in B] (at level 0, E, x at level 99, A at level 200, y at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "4cba8daeed975109077ff960e9a0efe32e33a3ab"
        ],
        [
            "Notation \"[ 'fset[' key ] E | x : A , y : B ]\" := [fset[key] E | x : _ in {: A}, y : _ in {: B}] (at level 0, E, x at level 99, A at level 200, y at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "906c91db704f2e35d3e7c8b6e1f7108313c9fba3"
        ],
        [
            "Notation \"[ 'f' 'set' E | x 'in' A ]\" := [fset[_] E | x in A] (at level 0, E, x at level 99, format \"[ '[hv' 'f' 'set' E '/ ' | x 'in' A ] ']'\") : fset_scope.",
            "VernacNotation",
            "a25ceb8954264c4a9742e5f3e711df39fd2b4edf"
        ],
        [
            "Notation \"[ 'f' 'set' E | x : A ]\" := [fset[_] E | x : A] (at level 0, E, x at level 99, format \"[ '[hv' 'f' 'set' E '/ ' | x : A ] ']'\") : fset_scope.",
            "VernacNotation",
            "35f55ffbb5a497f7fadb204268a2202ec0ed3830"
        ],
        [
            "Notation \"[ 'f' 'set' x 'in' A | P ]\" := [fset[_] x in A | P] (at level 0, x at level 99, format \"[ 'f' 'set' x 'in' A | P ]\") : fset_scope.",
            "VernacNotation",
            "cc57220cf7400782d3de9fdd43cf670896948632"
        ],
        [
            "Notation \"[ 'f' 'set' x 'in' A ]\" := [fset[_] x in A] (at level 0, x at level 99, format \"[ 'f' 'set' x 'in' A ]\") : fset_scope.",
            "VernacNotation",
            "5074a2ef465c67d26a15ff549fe3cc5fb56e306b"
        ],
        [
            "Notation \"[ 'f' 'set' x : T | P ]\" := [fset[_] x : T | P] (at level 0, x at level 99, format \"[ 'f' 'set' x : T | P ]\") : fset_scope.",
            "VernacNotation",
            "3a84f56a199f1d6ae1ee485d50277b0626484a94"
        ],
        [
            "Notation \"[ 'f' 'set' x : T | P & Q ]\" := [fset[_] x : T | P & Q] (at level 0, x at level 99, format \"[ 'f' 'set' x : T | P & Q ]\") : fset_scope.",
            "VernacNotation",
            "84758b85129f15424b0b344816fe449b802e80f2"
        ],
        [
            "Notation \"[ 'f' 'set' x 'in' A | P & Q ]\" := [fset[_] x in A | P & Q] (at level 0, x at level 99, format \"[ 'f' 'set' x 'in' A | P & Q ]\") : fset_scope.",
            "VernacNotation",
            "8d0c93bbd90fa46e26657eda891c02a4403c6a1c"
        ],
        [
            "Notation \"[ 'f' 'set' E | x 'in' A , y 'in' B ]\" := [fset[_] E | x in A, y in B] (at level 0, E, x at level 99, A at level 200, y at level 99, format \"[ '[hv' 'f' 'set' E '/ ' | x 'in' A , '/' y 'in' B ] ']'\" ) : fset_scope.",
            "VernacNotation",
            "e4709be7803db9653ff9413b2804f92a6a599a0c"
        ],
        [
            "Section Ops.",
            "VernacBeginSection",
            "52d9aa62c777a82d58414ea7bc3f86b50526909a"
        ],
        [
            "Context {K K': choiceType}.",
            "VernacContext",
            "8bba7bb4dadac569bc571bce0186174ffa7e7308"
        ],
        [
            "Implicit Types (a b c : K) (A B C D : {fset K}) (E : {fset K'}) (s : seq K).",
            "VernacReserve",
            "3c388e97c86eec397fa5e3b4e9b975100f84d965"
        ],
        [
            "Definition fset0 : {fset K} := @mkFinSet K [::] (introT eqP (@sort_keys_nil K)).",
            "VernacDefinition",
            "e615e78a426d6cd8c7de6b00fe4f1af3b3b29142"
        ],
        [
            "Fact fset1_key : unit.",
            "VernacStartTheoremProof",
            "b522687e107def38c48a519a0c43d18a62bd3980"
        ],
        [
            "exact: tt.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition fset1 a : {fset K} := [fset[fset1_key] x in [:: a]].",
            "VernacDefinition",
            "2803258a92a0a5d9b6485fda7c80a340e33d375e"
        ],
        [
            "Fact fsetU_key : unit.",
            "VernacStartTheoremProof",
            "21df97973f3f8729c92521729ea54891fc371b25"
        ],
        [
            "exact: tt.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition fsetU A B := [fset[fsetU_key] x in enum_fset A ++ enum_fset B].",
            "VernacDefinition",
            "5ea99bbd17a284f51e4259ea3401e91a873b6d91"
        ],
        [
            "Fact fsetI_key : unit.",
            "VernacStartTheoremProof",
            "e0f1fd073387e43d6112a665e13e87ef9ea811b1"
        ],
        [
            "exact: tt.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition fsetI A B := [fset[fsetI_key] x in A | x \\in B].",
            "VernacDefinition",
            "4326f5bd408e0dd1d4da3bc9fab3d76cb3871748"
        ],
        [
            "Fact fsetD_key : unit.",
            "VernacStartTheoremProof",
            "f5d36e09925c9d6a24d5c3d48ebb5443f597f73c"
        ],
        [
            "exact: tt.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition fsetD A B := [fset[fsetD_key] x in A | x \\notin B].",
            "VernacDefinition",
            "d0670845e68faf20a55ee28b932d8c008b99ce51"
        ],
        [
            "Fact fsetM_key : unit.",
            "VernacStartTheoremProof",
            "25e172ad73dff861c76b57e12004bcfdeeb378a3"
        ],
        [
            "exact: tt.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition fsetM A E := [fset[fsetM_key] (x, y) | x : K in A, y : K' in E].",
            "VernacDefinition",
            "5b287d67b0615a84bf826e28033dbd341bc384a6"
        ],
        [
            "Definition fsubset A B := fsetI A B == A.",
            "VernacDefinition",
            "e0000e2a15708e4164bd3291c089b1c6c47a2213"
        ],
        [
            "Definition fproper A B := fsubset A B && ~~ fsubset B A.",
            "VernacDefinition",
            "de930cc0546a12e675d1a540adb1bed2abfc036c"
        ],
        [
            "Definition fdisjoint A B := (fsetI A B == fset0).",
            "VernacDefinition",
            "aa702a8b44d6b9770d194d499f83bda09ada0d98"
        ],
        [
            "End Ops.",
            "VernacEndSegment",
            "c7e50ec7301a1cd71f0d4a4ff2dfc887f351fa21"
        ],
        [
            "Notation \"[ 'fset' a ]\" := (fset1 a) (at level 0, a at level 99, format \"[ 'fset' a ]\") : fset_scope.",
            "VernacNotation",
            "f586b7842eb5e6a76bba95412f39bc7de893807e"
        ],
        [
            "Notation \"[ 'fset' a : T ]\" := [fset (a : T)] (at level 0, a at level 99, format \"[ 'fset' a : T ]\") : fset_scope.",
            "VernacNotation",
            "f311100caeb6fdffaf2254fdab6529952584d658"
        ],
        [
            "Notation \"A `|` B\" := (fsetU A B) : fset_scope.",
            "VernacNotation",
            "c096eafd2dd5a53401d9817d81d1c661cb394706"
        ],
        [
            "Notation \"a |` A\" := ([fset a] `|` A) : fset_scope.",
            "VernacNotation",
            "d4b707fdc8c76ea55571d12adadff1513fd4636e"
        ],
        [
            "Notation \"[ 'fset' a1 ; a2 ; .. ; an ]\" := (fsetU .. (a1 |` [fset a2]) .. [fset an]) (at level 0, a1 at level 99, format \"[ 'fset' a1 ; a2 ; .. ; an ]\") : fset_scope.",
            "VernacNotation",
            "d94f081cf4b31ad31c4cbd65bb15d1161b55a30e"
        ],
        [
            "Notation \"A `&` B\" := (fsetI A B) : fset_scope.",
            "VernacNotation",
            "44fbdc905b5afd8a0389fcca8fcf6978e7cc6d52"
        ],
        [
            "Notation \"A `*` B\" := (fsetM A B) : fset_scope.",
            "VernacNotation",
            "169f9aca8abced62c2196a1aff01bb3997f4c893"
        ],
        [
            "Notation \"A `\\` B\" := (fsetD A B) : fset_scope.",
            "VernacNotation",
            "3234a66ebd41fd229c8e14895cd7750a21471751"
        ],
        [
            "Notation \"A `\\ a\" := (A `\\` [fset a]) : fset_scope.",
            "VernacNotation",
            "ed27b415a1471f42335bce46671acf28dadc9a47"
        ],
        [
            "Notation \"A `<=` B\" := (fsubset A B) (at level 70, no associativity) : fset_scope.",
            "VernacNotation",
            "792d52ad10a480c6198171e048fe06528aff9790"
        ],
        [
            "Notation \"A `<` B\" := (fproper A B) (at level 70, no associativity) : fset_scope.",
            "VernacNotation",
            "24e3c7a0c6b11cd697bf47e723035e2c6e88c9b7"
        ],
        [
            "Notation \"[ 'disjoint' A & B ]\" := (fdisjoint A B) : fset_scope.",
            "VernacNotation",
            "eba1aac7cbf7e9d5243d18bba1e0f7cc660c23e4"
        ],
        [
            "Notation \"[ 'fset' E | x 'in' A & P ]\" := [fset E | x in [pred x in A | P]] (at level 0, E, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "500867fd53ea69af14419ed901111c8ff238cf5e"
        ],
        [
            "Notation \"[ 'fset' E | x : A & P ]\" := [fset E | x in {: A} & P] (at level 0, E, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "ed9a62578ea4142556ff9ec91a9ac3bddf13dd8e"
        ],
        [
            "Notation \"[ 'fset' E | x : A , y 'in' B ]\" := [fset E | x in {: A}, y in B] (at level 0, E, x, y at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "8261514c18b3aacfef62b618811ab75cc8eded8f"
        ],
        [
            "Notation \"[ 'fset' E | x 'in' A , y : B ]\" := [fset E | x in A, y in {: B}] (at level 0, E, x, y at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "fdc4158d93ab1a1d7f006d808021d8b4f2c5d108"
        ],
        [
            "Notation \"[ 'fset' E | x : A , y : B ]\" := [fset E | x in {: A}, y in {: B}] (at level 0, E, x, y at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "a7cb0f8f09d11a0b176a9e5d595ef9e5e7b8c49c"
        ],
        [
            "Notation \"[ 'fset' E | x 'in' A , y 'in' B & P ]\" := [fset E | x in A, y in [pred y in B | P]] (at level 0, E, x, y at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "84ed9212f7cc7dcf02077b1cb0528278c944ab91"
        ],
        [
            "Notation \"[ 'fset' E | x : A , y 'in' B & P ]\" := [fset E | x in {: A}, y in B & P] (at level 0, E, x, y at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "0f5fc377449b028157a8c95f0594277411e756f3"
        ],
        [
            "Notation \"[ 'fset' E | x 'in' A , y : B & P ]\" := [fset E | x in A, y in {: B} & P] (at level 0, E, x, y at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "ba3260e1e031c946816992553987577a2c3e1856"
        ],
        [
            "Notation \"[ 'fset' E | x : A , y : B & P ]\" := [fset E | x in {: A}, y in {: B} & P] (at level 0, E, x, y at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "47fe289d448d6d3cdf1eb191fda1c2c6cda00da9"
        ],
        [
            "Notation \"[ 'fsetval' x 'in' A ]\" := [fset val x | x in A] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "8b163fc01b3591b0a462e5d7ec84cdf993fa0826"
        ],
        [
            "Notation \"[ 'fsetval' x 'in' A | P ]\" := [fset val x | x in A & P] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "c70b9d15efbca09f226ce3a7b26b779e63cefaac"
        ],
        [
            "Notation \"[ 'fsetval' x 'in' A | P & Q ]\" := [fsetval x in A | (P && Q)] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "dac2012de35c120525e0636561faac9b68f44e05"
        ],
        [
            "Notation \"[ 'fsetval' x : A ]\" := [fset val x | x in {: A}] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "87954472df61235c8bdcf2996f1ddfa814607672"
        ],
        [
            "Notation \"[ 'fsetval' x : A | P ]\" := [fset val x | x in {: A} & P] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "d54ff74cf6d4a9fd2ce0764da4b9de361d2d6a86"
        ],
        [
            "Notation \"[ 'fsetval' x : A | P & Q ]\" := [fsetval x in {: A} | (P && Q)] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "83c76051db75bfb8967a556555be8114d0154232"
        ],
        [
            "Notation \"[ 'fset[' key ] E | x 'in' A & P ]\" := [fset[key] E | x in [pred x in A | P]] (at level 0, E, x at level 99, only parsing).",
            "VernacNotation",
            "ed5a2f286b564b6e4a33a38e5f8c1d86154ee37d"
        ],
        [
            "Notation \"[ 'fset[' key ] E | x : A & P ]\" := [fset[key] E | x in {: A} & P] (at level 0, E, x at level 99, only parsing).",
            "VernacNotation",
            "99cd14be597f2f70e8bbd7b9b1dc06249aff8843"
        ],
        [
            "Notation \"[ 'fset[' key ] E | x : A , y 'in' B ]\" := [fset[key] E | x in {: A}, y in B] (at level 0, E, x, y at level 99, only parsing).",
            "VernacNotation",
            "0c3cb9f7ff1201035c2e7bdac6ffb8d45637f59f"
        ],
        [
            "Notation \"[ 'fset[' key ] E | x 'in' A , y : B ]\" := [fset[key] E | x in A, y in {: B}] (at level 0, E, x, y at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "9ba49e4c99ff13286d5295e9d6affbf31cff7ccc"
        ],
        [
            "Notation \"[ 'fset[' key ] E | x : A , y : B ]\" := [fset[key] E | x in {: A}, y in {: B}] (at level 0, E, x, y at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "2c5a878592e74ff421d1abfd5de2ae05ad7a0cfd"
        ],
        [
            "Notation \"[ 'fset[' key ] E | x 'in' A , y 'in' B & P ]\" := [fset[key] E | x in A, y in [pred y in B | P]] (at level 0, E, x, y at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "ceffdb1a2a1dfe16cc384b6ceda3f75d9c845cb4"
        ],
        [
            "Notation \"[ 'fset[' key ] E | x : A , y 'in' B & P ]\" := [fset[key] E | x in {: A}, y in B & P] (at level 0, E, x, y at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "c78c1d1de66b480ecf40b630d0198def2d7ddb0e"
        ],
        [
            "Notation \"[ 'fset[' key ] E | x 'in' A , y : B & P ]\" := [fset[key] E | x in A, y in {: B} & P] (at level 0, E, x, y at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "e36aaf85420ee4c9f99f5be62dacdade3778c01a"
        ],
        [
            "Notation \"[ 'fset[' key ] E | x : A , y : B & P ]\" := [fset[key] E | x in {: A}, y in {: B} & P] (at level 0, E, x, y at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "3bbea55fb3fc5f181f41fc2684cd5ec3a406d764"
        ],
        [
            "Notation \"[ 'fsetval[' key ] x 'in' A ]\" := [fset[key] val x | x in A] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "5e7fde6e3d723417d8bf0499b6e433bbb0e30810"
        ],
        [
            "Notation \"[ 'fsetval[' key ] x 'in' A | P ]\" := [fset[key] val x | x in A & P] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "da522f6c8ff168308b8ae40c9f0e3b5c8ec18aad"
        ],
        [
            "Notation \"[ 'fsetval[' key ] x 'in' A | P & Q ]\" := [fsetval[key] x in A | (P && Q)] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "986ec6f84cae753ced117490e2faf67521d20e45"
        ],
        [
            "Notation \"[ 'fsetval[' key ] x : A ]\" := [fset[key] val x | x in {: A}] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "a081bfe38550fe08fe274c77bfb13d68e65ab018"
        ],
        [
            "Notation \"[ 'fsetval[' key ] x : A | P ]\" := [fset[key] val x | x in {: A} & P] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "1299150eb8aa24d2ebd815c156ae910fb6425cc6"
        ],
        [
            "Notation \"[ 'fsetval[' key ] x : A | P & Q ]\" := [fsetval[key] x in {: A} | (P && Q)] (at level 0, x at level 99, only parsing) : fset_scope.",
            "VernacNotation",
            "6e7a99e3fdf6ce59ca220d599be031f355471c83"
        ],
        [
            "Notation \"[ 'f' 'set' E | x 'in' A & P ]\" := [fset[_] E | x in A & P] (at level 0, E, x at level 99, format \"[ '[hv' 'f' 'set' E '/ ' | x 'in' A '/ ' & P ] ']'\" ) : fset_scope.",
            "VernacNotation",
            "33228fc67c25395a986ed59bad1e0cae38fdffe7"
        ],
        [
            "Notation \"[ 'f' 'set' E | x : A & P ]\" := [fset[_] E | x : A & P] (at level 0, E, x at level 99, format \"[ '[hv' 'f' 'set' E '/ ' | x : A '/ ' & P ] ']'\") : fset_scope.",
            "VernacNotation",
            "3dc028b9840ef6df2dc885c43e9346983ad4a63c"
        ],
        [
            "Notation \"[ 'f' 'set' E | x : A , y 'in' B ]\" := [fset[_] E | x : A, y in B] (at level 0, E, x, y at level 99, format \"[ '[hv' 'f' 'set' E '/ ' | x : A , '/ ' y 'in' B ] ']'\" ) : fset_scope.",
            "VernacNotation",
            "c82e8e59d4f8f8f305d1ea94f0a1b273f553a94e"
        ],
        [
            "Notation \"[ 'f' 'set' E | x 'in' A , y : B ]\" := [fset[_] E | x in A, y : B] (at level 0, E, x, y at level 99, format \"[ '[hv' 'f' 'set' E '/ ' | x 'in' A , '/ ' y : B ] ']'\" ) : fset_scope.",
            "VernacNotation",
            "49aa6a41504348615dae8e0eb677a5f61a2075c0"
        ],
        [
            "Notation \"[ 'f' 'set' E | x : A , y : B ]\" := [fset[_] E | x : A, y : B] (at level 0, E, x, y at level 99, format \"[ '[hv' 'f' 'set' E '/ ' | x : A , '/ ' y : B ] ']'\" ) : fset_scope.",
            "VernacNotation",
            "68f29bd83bcb20f6c04179492b47344703e98320"
        ],
        [
            "Notation \"[ 'f' 'set' E | x 'in' A , y 'in' B & P ]\" := [fset[_] E | x in A, y in B & P] (at level 0, E, x, y at level 99, format \"[ '[hv' 'f' 'set' E '/ ' | x 'in' A , '/ ' y 'in' B '/ ' & P ] ']'\" ) : fset_scope.",
            "VernacNotation",
            "0b240af8ccb39e6f696f6fd987a88787333c280c"
        ],
        [
            "Notation \"[ 'f' 'set' E | x : A , y 'in' B & P ]\" := [fset[_] E | x : A, y in B & P] (at level 0, E, x, y at level 99, format \"[ '[hv' 'f' 'set' E '/ ' | x : A , '/ ' y 'in' B & P ] ']'\" ) : fset_scope.",
            "VernacNotation",
            "47405d0b2a18afe57486c8e20d794a4832cc88df"
        ],
        [
            "Notation \"[ 'f' 'set' E | x 'in' A , y : B & P ]\" := [fset[_] E | x in A, y : B & P] (at level 0, E, x, y at level 99, format \"[ '[hv' 'f' 'set' E '/ ' | x 'in' A , '/ ' y : B & P ] ']'\" ) : fset_scope.",
            "VernacNotation",
            "f51dca6c26990afdac453cefc210bd8b58805bb7"
        ],
        [
            "Notation \"[ 'f' 'set' E | x : A , y : B & P ]\" := [fset[_] E | x : A, y : B & P] (at level 0, E, x, y at level 99, format \"[ '[hv' 'f' 'set' E '/ ' | x : A , '/ ' y : B & P ] ']'\" ) : fset_scope.",
            "VernacNotation",
            "21506a2b594b5caed71bceb15f639b98f08bb5ae"
        ],
        [
            "Notation \"[ 'f' 'setval' x 'in' A ]\" := [fset[_] val x | x in A] (at level 0, x at level 99, format \"[ 'f' 'setval' x 'in' A ]\") : fset_scope.",
            "VernacNotation",
            "2bd2786b995415be1cb32f8e0824c05604ccf113"
        ],
        [
            "Notation \"[ 'f' 'setval' x 'in' A | P ]\" := [fset[_] val x | x in A & P] (at level 0, x at level 99, format \"[ 'f' 'setval' x 'in' A | P ]\") : fset_scope.",
            "VernacNotation",
            "0afa8531876174878f5619d9e2b40e52d55690c7"
        ],
        [
            "Notation \"[ 'f' 'setval' x 'in' A | P & Q ]\" := [fsetval[_] x in A | (P && Q)] (at level 0, x at level 99, format \"[ 'f' 'setval' x 'in' A | P & Q ]\") : fset_scope.",
            "VernacNotation",
            "7c2a5cc7d0904835cafeef2b3a6c4f411043d5fe"
        ],
        [
            "Notation \"[ 'f' 'setval' x : A ]\" := [fsetval[_] x : A] (at level 0, x at level 99, format \"[ 'f' 'setval' x : A ]\") : fset_scope.",
            "VernacNotation",
            "6b6e325487365cc3cf9c917bd3cdbd5621defff1"
        ],
        [
            "Notation \"[ 'f' 'setval' x : A | P ]\" := [fsetval[_] x : A | P] (at level 0, x at level 99, format \"[ 'f' 'setval' x : A | P ]\") : fset_scope.",
            "VernacNotation",
            "56833f7097254c536c11d7507bacac9586465146"
        ],
        [
            "Notation \"[ 'f' 'setval' x : A | P & Q ]\" := [fsetval[_] x : A | (P && Q)] (at level 0, x at level 99, format \"[ 'f' 'setval' x : A | P & Q ]\") : fset_scope.",
            "VernacNotation",
            "ea5c8a60ea186612d49eba3c346adbb78eb4ea5f"
        ],
        [
            "Section imfset.",
            "VernacBeginSection",
            "6ea9eb00fe005e22def98a231aea4ac7b40aa021"
        ],
        [
            "Variables (key : unit) (K : choiceType).",
            "VernacAssumption",
            "454191ee88f1b595dc3407b7db34eb6765fcf3f1"
        ],
        [
            "Implicit Types (A B : {fset K}).",
            "VernacReserve",
            "e95ca1d7c8ca6ca2ab1870d39fc9ef10fda8f727"
        ],
        [
            "Lemma imfsetP (T : choiceType) (f : T -> K) (p : finmempred T) (k : K) : reflect (exists2 x : T, in_mem x p & k = f x) (k \\in imfset key f p).",
            "VernacStartTheoremProof",
            "f7628fcef2ca0202dce9b0493c2d92e0c671b2ac"
        ],
        [
            "rewrite unlock seq_fsetE /=; apply: (iffP mapP) => [] [x xp eqkf]; by exists x => //=; move: xp; rewrite enum_finmemE.",
            "VernacExtend",
            "96e34964c36bc94366c4f8af7a32b94c647d6647"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_imfset (T : choiceType) (f : T -> K) (p : finmempred T) (x : T) : in_mem x p -> f x \\in imfset key f p.",
            "VernacStartTheoremProof",
            "5fd6d5c45be18cf2a97cb2500e5df7c60369714d"
        ],
        [
            "by move=> px; apply/imfsetP; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imfset_rec (T : choiceType) (f : T -> K) (p : finmempred T) (P : imfset key f p -> Prop) : (forall (x : T) (px : in_mem x p), P [` in_imfset f px ]) -> forall k, P k.",
            "VernacStartTheoremProof",
            "36e5a646346b12417ab8c7c968a9d99709b6dbd2"
        ],
        [
            "move=> PP v; have /imfsetP [k pk vv_eq] := valP v.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "pose vP := in_imfset f pk; suff -> : P v = P [` vP] by apply: PP.",
            "VernacExtend",
            "d0274a903cf620f2499167643e4b545453515c1d"
        ],
        [
            "by congr P; apply/val_inj => /=; rewrite vv_eq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_imfset (T : choiceType) (f : T -> K) (p : finmempred T) : injective f -> forall (x : T), (f x \\in imfset key f p) = (in_mem x p).",
            "VernacStartTheoremProof",
            "b6ba496031461d5dc05db3d95c12119759661ce8"
        ],
        [
            "by move=> f_inj x; rewrite unlock seq_fsetE mem_map// enum_finmemE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imfset2P (T1 : choiceType) (T2 : T1 -> choiceType) (f : forall x, T2 x -> K) (p1 : finmempred T1) (p2 : forall x, finmempred (T2 x)) k : reflect (exists2 x : T1, in_mem x p1 & exists2 y : T2 x, in_mem y (p2 x) & k = f x y) (k \\in imfset2 key f p1 p2).",
            "VernacStartTheoremProof",
            "782de9f7462ff521bbac703e756e8b79c1bb9d24"
        ],
        [
            "rewrite unlock !seq_fsetE; apply: (iffP (allsigsP _ _ _ _)).",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "move=> [[/=x y]]; rewrite !enum_finmemE => -[xp yp ->].",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by exists x => //; exists y.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=> [x xp [y yp ->]]; exists (Tagged T2 y); rewrite ?enum_finmemE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_imfset2 (T1 : choiceType) (T2 : T1 -> choiceType) (f : forall x, T2 x -> K) (p1 : finmempred T1) (p2 : forall x, finmempred (T2 x)) (x : T1) (y : T2 x) : in_mem x p1 -> in_mem y (p2 x) -> f x y \\in imfset2 key f p1 p2.",
            "VernacStartTheoremProof",
            "0183b4d357f89b43f21d2c2307d2cbbe62e07c68"
        ],
        [
            "by move=> xD1 yD2; apply/imfset2P; exists x => //; exists y.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_imfset2 (T1 : choiceType) (T2 : T1 -> choiceType) (f : forall x, T2 x -> K) (p1 : finmempred T1) (p2 : forall x, finmempred (T2 x)) (x : T1) (y : T2 x) : injective (fun x : sigT T2 => f (tag x) (tagged x)) -> f x y \\in imfset2 key f p1 p2 = (in_mem x p1) && (in_mem y (p2 x)).",
            "VernacStartTheoremProof",
            "68b6f6272b2260652f224a19a2d91af35b78fefb"
        ],
        [
            "move=> f_inj; rewrite unlock seq_fsetE.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "apply/allsigsP/idP => [[t]|]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move=> /andP[xp1 xp2]; exists (Tagged T2 y); rewrite ?enum_finmemE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite !enum_finmemE => -[pt1 pt2]; pose xy := Tagged T2 y.",
            "VernacExtend",
            "9d8fbc7ebaadb48200c542591ceec3e0f555a812"
        ],
        [
            "by rewrite -[x]/(tag xy) -[y]/(tagged xy) => /f_inj ->; apply/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma enum_imfset (T : choiceType) (f : T -> K) (p : finmempred T) : {in p &, injective f} -> perm_eq (imfset key f p) [seq f x | x <- enum_finmem p].",
            "VernacStartTheoremProof",
            "9fab00d3a213004ab9f65da1793d7ec76823a150"
        ],
        [
            "move=> f_inj; rewrite unlock -[X in perm_eq _ X]undup_id ?seq_fset_perm//.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "rewrite map_inj_in_uniq ?enum_finmem_uniq // => ??.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite ?enum_finmemE; apply: f_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma enum_imfset2 (T1 : choiceType) (T2 : T1 -> choiceType) (f : forall x, T2 x -> K) (p1 : finmempred T1) (p2 : forall x, finmempred (T2 x)) : {in [pred t | p1 (tag t) & p2 _ (tagged t)] &, injective (fun t : sigT T2 => f (tag t) (tagged t))} -> perm_eq (imfset2 key f p1 p2) (allsigs f (enum_finmem p1) (fun x => enum_finmem (p2 x))).",
            "VernacStartTheoremProof",
            "a088a60194c12e5847e5c6c179c97c82e7184808"
        ],
        [
            "move=> f_inj; rewrite unlock.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "apply: uniq_perm_eq => [||i]; rewrite ?seq_fset_uniq ?seq_fsetE //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite allsigs_uniq ?enum_finmem_uniq//.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by move=> x; rewrite enum_finmem_uniq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> t0 t0' /allsigsP[t]; rewrite !enum_finmemE => -[tp1 tp2 ->].",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "move=> /allsigsP[t']; rewrite !enum_finmemE => -[t'p1 t'p2 ->].",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by apply: f_inj; rewrite inE; apply/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End imfset.",
            "VernacEndSegment",
            "7307b2d1b5cb750607fe2ed3005317cab04e26ee"
        ],
        [
            "Section in_imfset.",
            "VernacBeginSection",
            "f82639138e7addd49ca00be37a0f88edc8042483"
        ],
        [
            "Variable (key : unit) (K : choiceType).",
            "VernacAssumption",
            "454191ee88f1b595dc3407b7db34eb6765fcf3f1"
        ],
        [
            "Implicit Types (A B : {fset K}) (a b : K).",
            "VernacReserve",
            "cbe0078e244495bc6528fcec443ca9fe3e4b5b3f"
        ],
        [
            "Lemma in_fset (p : finmempred K) (k : K) : (k \\in imfset key id p) = in_mem k p.",
            "VernacStartTheoremProof",
            "8735d2605bafb5acc4c4cdb16dbd024f3946b3bc"
        ],
        [
            "by rewrite mem_imfset; apply: inj_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma val_in_fset A (p : finmempred _) (k : A) : (val k \\in imfset key val p) = (in_mem k p).",
            "VernacStartTheoremProof",
            "90db8eb9328598384f157437070be16e765a600b"
        ],
        [
            "by rewrite mem_imfset ?in_finmempred //; exact: val_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_fset_val A (p : finmempred [eqType of A]) (k : K) : (k \\in imfset key val p) = if insub k is Some a then in_mem a p else false.",
            "VernacStartTheoremProof",
            "99858f6392b032d0ac49a309a45067f3df0a7649"
        ],
        [
            "have [a _ <- /=|kNA] := insubP; first by rewrite val_in_fset.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/imfsetP => [] [a _ k_def]; move: kNA; rewrite k_def [_ \\in _]valP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_fset_valT A (p : finmempred _) (k : K) (kA : k \\in A) : (k \\in imfset key val p) = in_mem [` kA] p.",
            "VernacStartTheoremProof",
            "aa4d2a11ad68f7cb5e6c764502182adc65bf532c"
        ],
        [
            "by rewrite in_fset_val insubT /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_fset_valP A (p : finmempred _) (k : K) : reflect {kA : k \\in A & in_mem [` kA] p} (k \\in imfset key val p).",
            "VernacStartTheoremProof",
            "468fe1feef1a53c943e914191a4683f653370fc9"
        ],
        [
            "apply: (iffP (imfsetP _ _ _ _)) => [|[kA xkA]]; last by exists [`kA].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move=> /sig2_eqW[/= x Xx ->]; exists (valP x); rewrite fsetsubE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_fset_valF A (p : finmempred [eqType of A]) (k : K) : k \\notin A -> (k \\in imfset key val p) = false.",
            "VernacStartTheoremProof",
            "595e0b3f0dbae4e495955fbf38bf2ad3331a65f7"
        ],
        [
            "by apply: contraNF => /imfsetP[/= a Xa->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_fset_nil a : a \\in [fset[key] x in [::]] = false.",
            "VernacStartTheoremProof",
            "8a6bd014c8831657057cdcdde143c88c1e6b8e06"
        ],
        [
            "by rewrite !mem_imfset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_fset_cons x (xs : seq K) a : (a \\in [fset[key] x in x :: xs]) = ((a == x) || (a \\in [fset[key] x in xs])).",
            "VernacStartTheoremProof",
            "4732e845373335dde350f61d3e1413f82f09ca41"
        ],
        [
            "by rewrite !mem_imfset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_fset_cat (xs ys : seq K) a : (a \\in [fset[key] x in xs ++ ys]) = ((a \\in [fset[key] x in xs]) || (a \\in [fset[key] x in ys])).",
            "VernacStartTheoremProof",
            "3fa21a55890478f2252d47ee9e423dd4e9c999c5"
        ],
        [
            "by rewrite !mem_imfset//= mem_cat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition in_fset_ (key : unit) := (in_fset_cons, in_fset_nil, in_fset_cat, in_fset).",
            "VernacDefinition",
            "f7795e27619b13ad8f7cd9194626b66cf29ad2b1"
        ],
        [
            "Lemma card_in_imfset (T T' : choiceType) (f : T -> T') (p : finmempred T) : {in p &, injective f} -> #|` (imfset key f p)| = (size (enum_finmem p)).",
            "VernacStartTheoremProof",
            "a6b63ec89277a6b98d024c559fa1cd04f17f6eb6"
        ],
        [
            "move=> f_inj; rewrite unlock /= size_seq_fset undup_id ?size_map//.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "rewrite map_inj_in_uniq ?enum_finmem_uniq// => ??.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite !enum_finmemE; apply: f_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_imfset (T T' : choiceType) (f : T -> T') (p : finmempred _) : injective f -> #|` (imfset key f p)| = size (enum_finmem p).",
            "VernacStartTheoremProof",
            "b064ab2a7d98df272118ea76e4f54802fe1cd60a"
        ],
        [
            "by move=> f_inj; rewrite card_in_imfset //= => x y ? ?; apply: f_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_imfset_card (T T' : choiceType) (f : T -> T') (p : finmempred _) : (#|` imfset key f p| <= size (enum_finmem p))%N.",
            "VernacStartTheoremProof",
            "050e923e2bd24d2e652f3b3d755bc3cbc19225a9"
        ],
        [
            "by rewrite unlock size_seq_fset (leq_trans (size_undup _)) ?size_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End in_imfset.",
            "VernacEndSegment",
            "ce34bb45f2cb832d77297ee1187e9591aa009ce7"
        ],
        [
            "Section Theory.",
            "VernacBeginSection",
            "57c003cfe14e91402b38cb11ad6e8012f88f07e9"
        ],
        [
            "Variables (key : unit) (K K': choiceType).",
            "VernacAssumption",
            "6c4e6671b962dd4a27935d3d5f30c45299527fb5"
        ],
        [
            "Implicit Types (a b x : K) (A B C D : {fset K}) (E : {fset K'}) (pA pB pC : pred K) (s : seq K).",
            "VernacReserve",
            "7be99ae54d8aabc1950539cc2b2f14136aee90e8"
        ],
        [
            "Lemma fsetP {A B} : A =i B <-> A = B.",
            "VernacStartTheoremProof",
            "db5e165ab62b3c841bccdeabec3b9f96f4c9d28e"
        ],
        [
            "by split=> [eqAB|-> //]; apply/val_inj/canonical_eq_keys => //= a.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "CoInductive in_fset_spec (A : {fset K}) (x : K) : K -> bool -> Prop := | InFset (u : A) & x = val u : in_fset_spec A x (val u) true | OutFset of x \\notin A : in_fset_spec A x x false.",
            "VernacInductive",
            "83740107615e3e6995025693961b837d45c52008"
        ],
        [
            "Lemma in_fsetP A x : in_fset_spec A x x (x \\in A).",
            "VernacStartTheoremProof",
            "40c9d891298f0c81932206d6c1e74199a85d3d50"
        ],
        [
            "have [xA|xNA] := boolP (x \\in A); last by constructor.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by have {2}-> : x = val [` xA] by []; constructor.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fset_eqP {A B} : reflect (A =i B) (A == B).",
            "VernacStartTheoremProof",
            "67187b15f1cdf3c9d76f8afaf30eeb8ea56903c6"
        ],
        [
            "exact: (equivP eqP (iff_sym fsetP)).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_fset0 x : x \\in fset0 = false.",
            "VernacStartTheoremProof",
            "7b0723cbfcaf77214108633c22ff6d947bc8fae2"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_fset1 a' a : a \\in [fset a'] = (a == a').",
            "VernacStartTheoremProof",
            "fd3cc0ae58fe31931b2899ee06d4ec92fbcc6c57"
        ],
        [
            "by rewrite !in_fset_ orbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_fsetU A B a : (a \\in A `|` B) = (a \\in A) || (a \\in B).",
            "VernacStartTheoremProof",
            "47572f8c1edae87f98f19090e3257c25064997db"
        ],
        [
            "by rewrite !in_fset_.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_fset1U a' A a : (a \\in a' |` A) = (a == a') || (a \\in A).",
            "VernacStartTheoremProof",
            "c6bba6b55fc479ab1f573c8c5379ef02424f8731"
        ],
        [
            "by rewrite in_fsetU in_fset1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_fsetI A B a : (a \\in A `&` B) = (a \\in A) && (a \\in B).",
            "VernacStartTheoremProof",
            "8895415da74c4c24b4329815c25a21089570465b"
        ],
        [
            "by rewrite in_fset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_fsetD A B a : (a \\in A `\\` B) = (a \\notin B) && (a \\in A).",
            "VernacStartTheoremProof",
            "8a75f19163aa2f7652a191f9f9c63602a75ea8d4"
        ],
        [
            "by rewrite in_fset andbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_fsetD1 A b a : (a \\in A `\\ b) = (a != b) && (a \\in A).",
            "VernacStartTheoremProof",
            "925281c3403492a5a92de1d352937b281b6438d5"
        ],
        [
            "by rewrite in_fsetD in_fset1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_fsetM A E (u : K * K') : (u \\in A `*` E) = (u.1 \\in A) && (u.2 \\in E).",
            "VernacStartTheoremProof",
            "1527af51b638f4ad7c7cf4137d3fd4574f5e5e6d"
        ],
        [
            "by case: u => /= x y; rewrite mem_imfset2//= => -[??] [??] [-> ->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition in_fsetE := (@in_fset_ imfset_key, val_in_fset, in_fset0, in_fset1, in_fsetU, in_fsetI, in_fsetD, in_fsetM, in_fset1U, in_fsetD1).",
            "VernacDefinition",
            "988827c12f7e1466bb3ae8e73feaba3acc848a95"
        ],
        [
            "Let inE := (inE, in_fsetE).",
            "VernacDefinition",
            "58779d8c6e6e2eca1ec6fa906e0b8314ab3f9ac3"
        ],
        [
            "Lemma fsetIC (A B : {fset K}) : A `&` B = B `&` A.",
            "VernacStartTheoremProof",
            "51025b2081bb242eb5b3f5be20e5e9f0e00303fc"
        ],
        [
            "by apply/fsetP => a; rewrite !inE andbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetUC (A B : {fset K}) : A `|` B = B `|` A.",
            "VernacStartTheoremProof",
            "a1c85fa6ef225e6354f5268d98ed9bbdadb34d35"
        ],
        [
            "by apply/fsetP => a; rewrite !inE orbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fset0I A : fset0 `&` A = fset0.",
            "VernacStartTheoremProof",
            "42942cd08ddbefb2ea0abae750991833c8fae2c3"
        ],
        [
            "by apply/fsetP => x; rewrite !inE andFb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetI0 A : A `&` fset0 = fset0.",
            "VernacStartTheoremProof",
            "73420ef7753c1596b2c3adc51ef75d653e711054"
        ],
        [
            "by rewrite fsetIC fset0I.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetIA A B C : A `&` (B `&` C) = A `&` B `&` C.",
            "VernacStartTheoremProof",
            "20c2eee6225d3618fe1fc81e7c3c08c879e9c784"
        ],
        [
            "by apply/fsetP=> x; rewrite !inE andbA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetICA A B C : A `&` (B `&` C) = B `&` (A `&` C).",
            "VernacStartTheoremProof",
            "1cb8bc3c6c4d21a9e4cb94fb0f86192bb09b4473"
        ],
        [
            "by rewrite !fsetIA (fsetIC A).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetIAC A B C : A `&` B `&` C = A `&` C `&` B.",
            "VernacStartTheoremProof",
            "e9876981ba0c2e8348c2052c266ebf4ec339e330"
        ],
        [
            "by rewrite -!fsetIA (fsetIC B).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetIACA A B C D : (A `&` B) `&` (C `&` D) = (A `&` C) `&` (B `&` D).",
            "VernacStartTheoremProof",
            "9b29a4a4fcba547eaac57428ff5be06a177d146b"
        ],
        [
            "by rewrite -!fsetIA (fsetICA B).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetIid A : A `&` A = A.",
            "VernacStartTheoremProof",
            "ae5e6c72b58a4bd5a081591aab3e92306a7dd89a"
        ],
        [
            "by apply/fsetP=> x; rewrite inE andbb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetIIl A B C : A `&` B `&` C = (A `&` C) `&` (B `&` C).",
            "VernacStartTheoremProof",
            "0ae2b6f7340cd3c5923f8b94df6f5fb358e3b309"
        ],
        [
            "by rewrite fsetIA !(fsetIAC _ C) -(fsetIA _ C) fsetIid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetIIr A B C : A `&` (B `&` C) = (A `&` B) `&` (A `&` C).",
            "VernacStartTheoremProof",
            "5981041e84030cab1afa39c43f93bc3865c8325d"
        ],
        [
            "by rewrite !(fsetIC A) fsetIIl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetUA A B C : A `|` (B `|` C) = A `|` B `|` C.",
            "VernacStartTheoremProof",
            "75e3dad094ca2a4490c5a360d4607b3417d12db1"
        ],
        [
            "by apply/fsetP => x; rewrite !inE orbA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetUCA A B C : A `|` (B `|` C) = B `|` (A `|` C).",
            "VernacStartTheoremProof",
            "3ac369c707915f47f228e0dae8d336491a198e3b"
        ],
        [
            "by rewrite !fsetUA (fsetUC B).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetUAC A B C : A `|` B `|` C = A `|` C `|` B.",
            "VernacStartTheoremProof",
            "243db3c6c1a872d1a05039067dd222f4ceb1f13d"
        ],
        [
            "by rewrite -!fsetUA (fsetUC B).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetUACA A B C D : (A `|` B) `|` (C `|` D) = (A `|` C) `|` (B `|` D).",
            "VernacStartTheoremProof",
            "e68df248bcab5c086bc85c7e009867c85c028f9b"
        ],
        [
            "by rewrite -!fsetUA (fsetUCA B).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetUid A : A `|` A = A.",
            "VernacStartTheoremProof",
            "93627fdfdfe70e9ed2294849465699fb91c1dfec"
        ],
        [
            "by apply/fsetP=> x; rewrite inE orbb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetUUl A B C : A `|` B `|` C = (A `|` C) `|` (B `|` C).",
            "VernacStartTheoremProof",
            "862f1446e18cac0a8600cb40b55f56148830a5e6"
        ],
        [
            "by rewrite fsetUA !(fsetUAC _ C) -(fsetUA _ C) fsetUid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetUUr A B C : A `|` (B `|` C) = (A `|` B) `|` (A `|` C).",
            "VernacStartTheoremProof",
            "e01d08363cf0ab01424ff8693569b2c96b782043"
        ],
        [
            "by rewrite !(fsetUC A) fsetUUl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetIUr A B C : A `&` (B `|` C) = (A `&` B) `|` (A `&` C).",
            "VernacStartTheoremProof",
            "83678122c337bb29c178dcff3ad1b6e5f1d284fd"
        ],
        [
            "by apply/fsetP=> x; rewrite !inE andb_orr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetIUl A B C : (A `|` B) `&` C = (A `&` C) `|` (B `&` C).",
            "VernacStartTheoremProof",
            "c7e3df776bd553fba9b97300897f638de161c9ae"
        ],
        [
            "by apply/fsetP=> x; rewrite !inE andb_orl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetUIr A B C : A `|` (B `&` C) = (A `|` B) `&` (A `|` C).",
            "VernacStartTheoremProof",
            "8de0c37ff4c36a93e92de44fe5aa68e5b79f4cff"
        ],
        [
            "by apply/fsetP=> x; rewrite !inE orb_andr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetUIl A B C : (A `&` B) `|` C = (A `|` C) `&` (B `|` C).",
            "VernacStartTheoremProof",
            "98fa3f0a1cc9f68ac56d28f19eec2b12692c0d85"
        ],
        [
            "by apply/fsetP=> x; rewrite !inE orb_andl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetUKC A B : (A `|` B) `&` A = A.",
            "VernacStartTheoremProof",
            "530dcb94fd9218e95b72612db5347a232715016f"
        ],
        [
            "by apply/fsetP=> x; rewrite !inE orbK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetUK A B : (B `|` A) `&` A = A.",
            "VernacStartTheoremProof",
            "78a87339b79f691fb128c982143bdd8bf4f63259"
        ],
        [
            "by rewrite fsetUC fsetUKC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetKUC A B : A `&` (B `|` A) = A.",
            "VernacStartTheoremProof",
            "7e42f8312302b08817c489a088724cae471dd514"
        ],
        [
            "by rewrite fsetIC fsetUK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetKU A B : A `&` (A `|` B) = A.",
            "VernacStartTheoremProof",
            "8305b929508b2a9ab998611e29a82cfe8bd308bf"
        ],
        [
            "by rewrite fsetIC fsetUKC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetIKC A B : (A `&` B) `|` A = A.",
            "VernacStartTheoremProof",
            "9b020ee6c5ad54e4f90085cef7e1c0525e2c15db"
        ],
        [
            "by apply/fsetP=> x; rewrite !inE andbK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetIK A B : (B `&` A) `|` A = A.",
            "VernacStartTheoremProof",
            "5bcc7f44d1334106d2620badb5a51101fde5a607"
        ],
        [
            "by rewrite fsetIC fsetIKC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetKIC A B : A `|` (B `&` A) = A.",
            "VernacStartTheoremProof",
            "aa8f6ec4aa71d83a2e166c91f24ef04db6039c53"
        ],
        [
            "by rewrite fsetUC fsetIK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetKI A B : A `|` (A `&` B) = A.",
            "VernacStartTheoremProof",
            "1f94739973f429c6b2631025cfb5aeb8f15dc49b"
        ],
        [
            "by rewrite fsetIC fsetKIC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetUKid A B : B `|` A `|` A = B `|` A.",
            "VernacStartTheoremProof",
            "df2c84f2465f1e5da5da81f8766aa74b687641a8"
        ],
        [
            "by rewrite -fsetUA fsetUid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetUKidC A B : A `|` B `|` A = A `|` B.",
            "VernacStartTheoremProof",
            "780c1c785852031791bc7bcd205a26ee9742d5f2"
        ],
        [
            "by rewrite fsetUAC fsetUid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetKUid A B : A `|` (A `|` B) = A `|` B.",
            "VernacStartTheoremProof",
            "a313f636e33c3a6e5073dbcd739018e9233e8573"
        ],
        [
            "by rewrite fsetUA fsetUid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetKUidC A B : A `|` (B `|` A) = B `|` A.",
            "VernacStartTheoremProof",
            "cee46eb34ecf5cf2a2eb3e8f717f592ea0a7662e"
        ],
        [
            "by rewrite fsetUCA fsetUid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetIKid A B : B `&` A `&` A = B `&` A.",
            "VernacStartTheoremProof",
            "ff8769b4113aa7d085037a66ea1f9e816957d6f7"
        ],
        [
            "by rewrite -fsetIA fsetIid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetIKidC A B : A `&` B `&` A = A `&` B.",
            "VernacStartTheoremProof",
            "d0b2e6524f4d107b1dc7f932b814c3656177dc9e"
        ],
        [
            "by rewrite fsetIAC fsetIid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetKIid A B : A `&` (A `&` B) = A `&` B.",
            "VernacStartTheoremProof",
            "9f68f17f566328e2dacc8e5e215d15c15d95b212"
        ],
        [
            "by rewrite fsetIA fsetIid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetKIidC A B : A `&` (B `&` A) = B `&` A.",
            "VernacStartTheoremProof",
            "ebd9900b9feb7173dcce1982b8d45887e2cb36a9"
        ],
        [
            "by rewrite fsetICA fsetIid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubsetP {A B} : reflect {subset A <= B} (A `<=` B).",
            "VernacStartTheoremProof",
            "81ba6364fd8d10a838466ee3b0da37eb8e7f28d7"
        ],
        [
            "apply: (iffP fset_eqP) => AsubB a; first by rewrite -AsubB inE => /andP[].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite inE; have [/AsubB|] := boolP (a \\in A).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fset_sub_val A (p : finmempred [eqType of A]) : (imfset key val p) `<=` A.",
            "VernacStartTheoremProof",
            "0eba467328af2d854ff2ac25183c55224d1d6832"
        ],
        [
            "by apply/fsubsetP => k /in_fset_valP [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fset_sub A (P : pred K) : [fset x in A | P x] `<=` A.",
            "VernacStartTheoremProof",
            "7e8cf0d890cf2dae3a4d7f18c070145235435974"
        ],
        [
            "by apply/fsubsetP => k; rewrite in_fset inE /= => /andP [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetD_eq0 (A B : {fset K}) : (A `\\` B == fset0) = (A `<=` B).",
            "VernacStartTheoremProof",
            "d59cac034b1378528608d3a19b7f46125434c854"
        ],
        [
            "apply/fset_eqP/fsubsetP => sAB a.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by move=> aA; have := sAB a; rewrite !inE aA andbT => /negPn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite !inE andbC; apply/negP => /andP [/sAB ->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubset_refl A : A `<=` A.",
            "VernacStartTheoremProof",
            "8feb0a754f4386213dac73c5495bb73756c57bf1"
        ],
        [
            "exact/fsubsetP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve fsubset_refl.",
            "VernacHints",
            "607d7c99cd1e5804342c106523f7d7f91ac2754e"
        ],
        [
            "Definition fincl A B (AsubB : A `<=` B) (a : A) : B := [` (fsubsetP AsubB) _ (valP a)].",
            "VernacDefinition",
            "8b694327a77a71088dff8e293fad79ee83270ef2"
        ],
        [
            "Definition fsub B A : {set B} := [set x : B | val x \\in A].",
            "VernacDefinition",
            "3f1d9afea9c7016b1b2f397beea213ae13b19af1"
        ],
        [
            "Lemma fsubE A B (AsubB : A `<=` B) : fsub B A = [set fincl AsubB x | x : A].",
            "VernacStartTheoremProof",
            "085d40b14ffa6d14127176a13eb97c817758a426"
        ],
        [
            "apply/setP => x; rewrite in_set; apply/idP/imsetP => [|[[a aA] aA' ->]] //.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "by move=> xA; exists [` xA]=> //; apply: val_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fincl_fsub A B (AsubB : A `<=` B) (a : A) : fincl AsubB a \\in fsub B A.",
            "VernacStartTheoremProof",
            "7c1888fa0bb0dbee96ca5b931f0cce7ee4cc457e"
        ],
        [
            "by rewrite inE /= (valP a).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_fsub B A (b : B) : (b \\in fsub B A) = (val b \\in A).",
            "VernacStartTheoremProof",
            "53ee747b1ff362ea19e83033bb90e9fa1cba9349"
        ],
        [
            "by rewrite inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subset_fsubE C A B : A `<=` C -> B `<=` C -> (fsub C A \\subset fsub C B) = (A `<=` B).",
            "VernacStartTheoremProof",
            "ae4fa472a5c481d0d7a9321c679e215566b44451"
        ],
        [
            "move=> sAC sBC; apply/subsetP/fsubsetP => sAB a; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !inE => /sAB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=> aA; have := sAB _ (fincl_fsub sAC [` aA]); rewrite inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubset_trans : transitive (@fsubset K).",
            "VernacStartTheoremProof",
            "e3bab883cdea90144b6a6de48fe795344938d57d"
        ],
        [
            "by move=>??? s t ; apply/fsubsetP => a /(fsubsetP s) /(fsubsetP t).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subset_fsub A B C : A `<=` B -> B `<=` C -> fsub C A \\subset fsub C B.",
            "VernacStartTheoremProof",
            "a20656e08014193f023f0722cc9b7a9d4fd8220c"
        ],
        [
            "by move=> sAB sBC; rewrite subset_fsubE // (fsubset_trans sAB).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetIidPl {A B} : reflect (A `&` B = A) (A `<=` B).",
            "VernacStartTheoremProof",
            "94156a0e0e613458688133574d6e483413e4b673"
        ],
        [
            "exact: eqP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetIidPr {A B} : reflect (A `&` B = B) (B `<=` A).",
            "VernacStartTheoremProof",
            "6351f502d169cdb4725a2e3764ab9ff46b949e75"
        ],
        [
            "by rewrite fsetIC; apply: fsetIidPl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubsetIidl A B : (A `<=` A `&` B) = (A `<=` B).",
            "VernacStartTheoremProof",
            "87a2903aeb49af5a52abc582831e305bf7a0fe6a"
        ],
        [
            "by apply/fsubsetP/fsubsetP=> sAB a aA; have := sAB _ aA; rewrite !inE ?aA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubsetIidr A B : (B `<=` A `&` B) = (B `<=` A).",
            "VernacStartTheoremProof",
            "eaadaf5850423a8c8c92b3da8f818455f0f45d78"
        ],
        [
            "by rewrite fsetIC fsubsetIidl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetUidPr A B : reflect (A `|` B = B) (A `<=` B).",
            "VernacStartTheoremProof",
            "96b00cad24eb366b6d5d8b22c8cd59da2126d276"
        ],
        [
            "apply: (iffP fsubsetP) => sAB; last by move=> a aA; rewrite -sAB inE aA.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/fsetP => b; rewrite inE; have [/sAB|//] := boolP (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetUidPl A B : reflect (A `|` B = A) (B `<=` A).",
            "VernacStartTheoremProof",
            "a334b404a396a16377a9f16061d3e5b3ac5de807"
        ],
        [
            "by rewrite fsetUC; apply/fsetUidPr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubsetUl A B : A `<=` A `|` B.",
            "VernacStartTheoremProof",
            "0023259c2f41e3f793a493a4448510080806c73d"
        ],
        [
            "by apply/fsubsetP => a; rewrite inE => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve fsubsetUl.",
            "VernacHints",
            "725490cb4321a1a1a11c70de44863da90dacc7b1"
        ],
        [
            "Lemma fsubsetUr A B : B `<=` A `|` B.",
            "VernacStartTheoremProof",
            "a82f4fd0f3fd40ca03a152d3ee13c816a550e432"
        ],
        [
            "by rewrite fsetUC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve fsubsetUr.",
            "VernacHints",
            "7070b9602a17cfc55fe104b52cc3d3baabf9b373"
        ],
        [
            "Lemma fsubsetU1 x A : A `<=` x |` A.",
            "VernacStartTheoremProof",
            "7620afba07a230016cceb4c262b728321f5ed872"
        ],
        [
            "by rewrite fsubsetUr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve fsubsetU1.",
            "VernacHints",
            "cf766f925becdb3d1c2be5be65e5f525fc8c6733"
        ],
        [
            "Lemma fsubsetU A B C : (A `<=` B) || (A `<=` C) -> A `<=` B `|` C.",
            "VernacStartTheoremProof",
            "d5c8c548d195320267334be28d76e9b124f7361f"
        ],
        [
            "by move=> /orP [] /fsubset_trans ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fincl_inj A B (AsubB : A `<=` B) : injective (fincl AsubB).",
            "VernacStartTheoremProof",
            "ac69826b8d2909baa08b1507698c9c377daea2ee"
        ],
        [
            "by move=> a b [eq_ab]; apply: val_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve fincl_inj.",
            "VernacHints",
            "1e34ecd25d18d767553fa914d2869d30f7942bc8"
        ],
        [
            "Lemma fsub_inj B : {in [pred A | A `<=` B] &, injective (fsub B)}.",
            "VernacStartTheoremProof",
            "bbf9c14ddda6eaca5554ba2d56d00265faff1ace"
        ],
        [
            "move=> A A'; rewrite -!topredE /= => sAB sA'B /setP eqAA'; apply/fsetP => a.",
            "VernacExtend",
            "1947c7e9e09bd3bd1687e7b79563947160de37d3"
        ],
        [
            "apply/idP/idP => mem_a.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by have := eqAA' (fincl sAB [` mem_a]); rewrite !inE // => <-.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by have := eqAA' (fincl sA'B [` mem_a]); rewrite !inE // => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve fsub_inj.",
            "VernacHints",
            "8e5e3e5f05a54f6ab88a7df0e452e4feca9e9d48"
        ],
        [
            "Lemma eqEfsubset A B : (A == B) = (A `<=` B) && (B `<=` A).",
            "VernacStartTheoremProof",
            "674227cd1d722de8c3448f05b90c20b202091411"
        ],
        [
            "apply/eqP/andP => [-> //|[/fsubsetP AB /fsubsetP BA]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by apply/fsetP=> x; apply/idP/idP=> [/AB|/BA].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subEfproper A B : A `<=` B = (A == B) || (A `<` B).",
            "VernacStartTheoremProof",
            "1d6261895182aca71bcf4d0c7360eb63ab1f3152"
        ],
        [
            "by rewrite eqEfsubset -andb_orr orbN andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fproper_sub A B : A `<` B -> A `<=` B.",
            "VernacStartTheoremProof",
            "0ee7eea1c1426a30c49665ffbe1ce950e3b2a054"
        ],
        [
            "by rewrite subEfproper orbC => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqVfproper A B : A `<=` B -> A = B \\/ A `<` B.",
            "VernacStartTheoremProof",
            "61c2c216e7cb5017cc26f9101fad9d06af4b972c"
        ],
        [
            "by rewrite subEfproper => /predU1P.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fproperEneq A B : A `<` B = (A != B) && (A `<=` B).",
            "VernacStartTheoremProof",
            "905d6547dbb719181b1dabc4dded1b83edc661fd"
        ],
        [
            "by rewrite andbC eqEfsubset negb_and andb_orr andbN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fproper_neq A B : A `<` B -> A != B.",
            "VernacStartTheoremProof",
            "b9b107c86bbeb7c9059eebbab634fa4166768aa5"
        ],
        [
            "by rewrite fproperEneq; case/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fproper_irrefl A : ~~ (A `<` A).",
            "VernacStartTheoremProof",
            "ea94dfc3d4ed0352e1dec91bcddda45dd0350c8b"
        ],
        [
            "by rewrite fproperEneq eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqEfproper A B : (A == B) = (A `<=` B) && ~~ (A `<` B).",
            "VernacStartTheoremProof",
            "a16d67b1c8c43b9a9bedf10ce9af58f160ab143b"
        ],
        [
            "by rewrite negb_and negbK andb_orr andbN eqEfsubset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_fsub B A : A `<=` B -> #|fsub B A| = #|` A|.",
            "VernacStartTheoremProof",
            "f9aa505eee0e61f3d567c6cb9e0f4335d0fe98ee"
        ],
        [
            "by move=> sAB; rewrite cardfE fsubE card_imset //; apply: fincl_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqEfcard A B : (A == B) = (A `<=` B) && (#|` B| <= #|` A|)%N.",
            "VernacStartTheoremProof",
            "2f3f8fde9512d4d53fb2ae105253b6e90a716003"
        ],
        [
            "rewrite -(inj_in_eq (@fsub_inj (A `|` B))) -?topredE //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite eqEcard !(@subset_fsubE (A `|` B)) ?(@card_fsub (A `|` B)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fproperEcard A B : (A `<` B) = (A `<=` B) && (#|` A| < #|` B|)%N.",
            "VernacStartTheoremProof",
            "67fea35a7bfcc448fc8491759e146fbf5e149ccc"
        ],
        [
            "by rewrite fproperEneq ltnNge andbC eqEfcard; case: (A `<=` B).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubset_leqif_cards A B : A `<=` B -> (#|` A| <= #|` B| ?= iff (A == B))%N.",
            "VernacStartTheoremProof",
            "4afc5093b609f14182a3d313ff758d6cab49c545"
        ],
        [
            "rewrite -!(@card_fsub (A `|` B)) // -(@subset_fsubE (A `|` B)) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by move=> /subset_leqif_cards; rewrite (inj_in_eq (@fsub_inj _)) -?topredE /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsub0set A : fset0 `<=` A.",
            "VernacStartTheoremProof",
            "8d254c63d1889312c120bb54398e221cd3e194e0"
        ],
        [
            "by apply/fsubsetP=> x; rewrite inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve fsub0set.",
            "VernacHints",
            "5a43325a4b84c6b1e40898ba7e1f006507cbb2cd"
        ],
        [
            "Lemma fsubset0 A : (A `<=` fset0) = (A == fset0).",
            "VernacStartTheoremProof",
            "5b54c87ebd47f9b99c166cc0675584ed140cc359"
        ],
        [
            "by rewrite eqEfsubset fsub0set andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fproper0 A : (fset0 `<` A) = (A != fset0).",
            "VernacStartTheoremProof",
            "0dfabbc5b5d9461097fce5e43bf992b2a27e7e8c"
        ],
        [
            "by rewrite /fproper fsub0set fsubset0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fproperE A B : (A `<` B) = (A `<=` B) && ~~ (B `<=` A).",
            "VernacStartTheoremProof",
            "79fc1f8a62a972193aa11774962f6504e2525a2b"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubEproper A B : (A `<=` B) = (A == B) || (A `<` B).",
            "VernacStartTheoremProof",
            "e4da5232fc1edfc98eee901eecab481baebec9ba"
        ],
        [
            "by rewrite fproperEneq; case: eqP => //= ->; apply: fsubset_refl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubset_leq_card A B : A `<=` B -> (#|` A| <= #|` B|)%N.",
            "VernacStartTheoremProof",
            "02a997bfafb29aecc5339a437855f9213acbc3d4"
        ],
        [
            "by move=> /fsubset_leqif_cards ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fproper_ltn_card A B : A `<` B -> (#|` A| < #|` B|)%N.",
            "VernacStartTheoremProof",
            "2155e30c67641c3713643442dc26c9d397c9834b"
        ],
        [
            "by rewrite fproperEcard => /andP [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubset_cardP A B : #|` A| = #|` B| -> reflect (A =i B) (A `<=` B).",
            "VernacStartTheoremProof",
            "9fc74e122af018cf90f7245e9cf7376049e7170d"
        ],
        [
            "move=> eq_cardAB; apply: (iffP idP) => [/eqVfproper [->//|]|/fsetP -> //].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite fproperEcard eq_cardAB ltnn andbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fproper_sub_trans B A C : A `<` B -> B `<=` C -> A `<` C.",
            "VernacStartTheoremProof",
            "232252a9b2d51afa012bb71d3fd5d6c2dd7cc5a7"
        ],
        [
            "rewrite !fproperEcard => /andP [sAB lt_AB] sBC.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite (fsubset_trans sAB) //= (leq_trans lt_AB) // fsubset_leq_card.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsub_proper_trans B A C : A `<=` B -> B `<` C -> A `<` C.",
            "VernacStartTheoremProof",
            "20cd5dd2b14b12fd311b44353726d8e4b1866432"
        ],
        [
            "rewrite !fproperEcard => sAB /andP [sBC lt_BC].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite (fsubset_trans sAB) //= (leq_ltn_trans _ lt_BC) // fsubset_leq_card.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubset_neq0 A B : A `<=` B -> A != fset0 -> B != fset0.",
            "VernacStartTheoremProof",
            "02a2bc6dc93da8b4eea9f710fee24ba7d6795371"
        ],
        [
            "by rewrite -!fproper0 => sAB /fproper_sub_trans->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsub0 A : fsub A fset0 = set0 :> {set A}.",
            "VernacStartTheoremProof",
            "cc950023dcae91855cb880f565d045b9079da25a"
        ],
        [
            "by apply/setP => x; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubT A : fsub A A = [set : A].",
            "VernacStartTheoremProof",
            "31cda8eb23da7b7300ebf76b9dd2884b2824d4c0"
        ],
        [
            "by apply/setP => x; rewrite !inE (valP x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsub1 A a (aA : a \\in A) : fsub A [fset a] = [set [` aA]] :> {set A}.",
            "VernacStartTheoremProof",
            "824a44f413db569f9874e57736b22ff6b14b03e1"
        ],
        [
            "by apply/setP=> x; rewrite !inE; congr eq_op.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubU C A B : fsub C (A `|` B) = fsub C A :|: fsub C B.",
            "VernacStartTheoremProof",
            "0e5955b2bab7b42dcfdd27e0e0afdda3cf140d21"
        ],
        [
            "by apply/setP => x; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubI C A B : fsub C (A `&` B) = fsub C A :&: fsub C B.",
            "VernacStartTheoremProof",
            "a4543551d956625398c55fb15ef831f6173ff129"
        ],
        [
            "by apply/setP => x; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubD C A B : fsub C (A `\\` B) = fsub C A :\\: fsub C B.",
            "VernacStartTheoremProof",
            "90ce8cf1bc3fd58762a253b3e0a468580df6dd5d"
        ],
        [
            "by apply/setP => x; rewrite !inE andbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubD1 C A b (bC : b \\in C) : fsub C (A `\\ b) = fsub C A :\\ [` bC].",
            "VernacStartTheoremProof",
            "261ead3b0dbd07cf657021f31bba51737f970048"
        ],
        [
            "by rewrite fsubD fsub1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsub_eq0 A B : A `<=` B -> (fsub B A == set0) = (A == fset0).",
            "VernacStartTheoremProof",
            "180a21eddd4a750dca98982ee45f2b1e10dd922a"
        ],
        [
            "by move=> sAB; rewrite -fsub0 (inj_in_eq (@fsub_inj _)) -?topredE /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fset_0Vmem A : (A = fset0) + {x : K | x \\in A}.",
            "VernacStartTheoremProof",
            "4d5938be556b2b5deca27073da5e2c5fdf8f175f"
        ],
        [
            "have [|[x mem_x]] := set_0Vmem (fsub A A); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by right; exists (val x); rewrite inE // in mem_x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=> /eqP; rewrite fsub_eq0 // => /eqP; left.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fset1P x a : reflect (x = a) (x \\in [fset a]).",
            "VernacStartTheoremProof",
            "24f072972003d1cd13a22fad0569e0d7df67b82c"
        ],
        [
            "by rewrite inE; exact: eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fset11 x : x \\in [fset x].",
            "VernacStartTheoremProof",
            "5fdb43fc6c677c38b6d01da1c2aa2b26bafa413c"
        ],
        [
            "by rewrite inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fset1_inj : injective (@fset1 K).",
            "VernacStartTheoremProof",
            "65f6983ab82c457e59b5f46e234f87341c53fe26"
        ],
        [
            "by move=> a b eqsab; apply/fset1P; rewrite -eqsab fset11.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fset1UP x a B : reflect (x = a \\/ x \\in B) (x \\in a |` B).",
            "VernacStartTheoremProof",
            "217e5a62ee500b8a8d8830ada2c0dede4ebfa482"
        ],
        [
            "by rewrite !inE; exact: predU1P.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fset_cons a s : [fset[key] x in a :: s] = a |` [fset[key] x in s].",
            "VernacStartTheoremProof",
            "b1ef1e9666ba07d9d7dc00501688855eee12c492"
        ],
        [
            "by apply/fsetP=> x; rewrite in_fset_cons !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fset_nil : [fset[key] x in [::] : seq K] = fset0.",
            "VernacStartTheoremProof",
            "e50416ca6cc05c350bb496d66866b8b9e44a6694"
        ],
        [
            "by apply/fsetP=> x; rewrite in_fset_nil.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fset_cat s s' : [fset[key] x in s ++ s'] = [fset[key] x in s] `|` [fset[key] x in s'].",
            "VernacStartTheoremProof",
            "96ac4963f6a3511191c9c3c0d84a5a33dbf30885"
        ],
        [
            "by apply/fsetP=> x; rewrite !inE !in_fset_cat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fset1U1 x B : x \\in x |` B.",
            "VernacStartTheoremProof",
            "01a7af1ad227c1856d10e763b7df307fd024ba39"
        ],
        [
            "by rewrite !inE eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fset1Ur x a B : x \\in B -> x \\in a |` B.",
            "VernacStartTheoremProof",
            "288a9ec1852f21f8d6dd20859eb449e3c033071f"
        ],
        [
            "by move=> Bx; rewrite !inE predU1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetU1l x A b : x \\in A -> x \\in A `|` [fset b].",
            "VernacStartTheoremProof",
            "588a5c6410b425af36b2bface99e12cfd5f57f43"
        ],
        [
            "by move=> Ax; rewrite !inE Ax.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetU1r A b : b \\in A `|` [fset b].",
            "VernacStartTheoremProof",
            "45661bb167b79916497bad839cd441c745d77d5f"
        ],
        [
            "by rewrite !inE eqxx orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetD1P x A b : reflect (x != b /\\ x \\in A) (x \\in A `\\ b).",
            "VernacStartTheoremProof",
            "07b9cba2318833a610601e3e07e58de6c1816aed"
        ],
        [
            "by rewrite !inE; exact: andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetD11 b A : (b \\in A `\\ b) = false.",
            "VernacStartTheoremProof",
            "1b653bb65b070c5d0d331aa92271f8644c645fd3"
        ],
        [
            "by rewrite !inE eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetD1K a A : a \\in A -> a |` (A `\\ a) = A.",
            "VernacStartTheoremProof",
            "a31890cddd9ed526d91140e233fe5fe6cd0dd18c"
        ],
        [
            "by move=> Aa; apply/fsetP=> x; rewrite !inE; case: eqP => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetU1K a B : a \\notin B -> (a |` B) `\\ a = B.",
            "VernacStartTheoremProof",
            "b8a230e1bbf63bee22ba725b431be7a198c48d7e"
        ],
        [
            "by move/negPf=> nBa; apply/fsetP=> x; rewrite !inE; case: eqP => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fset2P x a b : reflect (x = a \\/ x = b) (x \\in [fset a; b]).",
            "VernacStartTheoremProof",
            "adddf094217552179ad2462290aa80c96bc83a7a"
        ],
        [
            "by rewrite !inE; apply: (iffP orP) => [] [] /eqP ->; [left|right|left|right].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_fset2 x a b : (x \\in [fset a; b]) = (x == a) || (x == b).",
            "VernacStartTheoremProof",
            "04d32c1c78fbfd4f4b21e5190d4cedc6f8671e42"
        ],
        [
            "by rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fset21 a b : a \\in [fset a; b].",
            "VernacStartTheoremProof",
            "3f85c16f3c382d4931dbf29f75e846a3678f32d6"
        ],
        [
            "by rewrite fset1U1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fset22 a b : b \\in [fset a; b].",
            "VernacStartTheoremProof",
            "9c38a4c81a082eacf5683732ad2764b9ddf1724c"
        ],
        [
            "by rewrite in_fset2 eqxx orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetUP x A B : reflect (x \\in A \\/ x \\in B) (x \\in A `|` B).",
            "VernacStartTheoremProof",
            "1ffd3e1f1fd4a0429859ccc64b9d73b2865717ca"
        ],
        [
            "by rewrite !inE; exact: orP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetULVR x A B : x \\in A `|` B -> (x \\in A) + (x \\in B).",
            "VernacStartTheoremProof",
            "f4fc34ef1cc8c59d3bc5348c99a06e3cc0565d12"
        ],
        [
            "by rewrite inE; case: (x \\in A); [left|right].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetUS A B C : A `<=` B -> C `|` A `<=` C `|` B.",
            "VernacStartTheoremProof",
            "a266d88a97bf65ea2707e219361cf2c741c148a3"
        ],
        [
            "move=> sAB; apply/fsubsetP=> x; rewrite !inE.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by case: (x \\in C) => //; exact: (fsubsetP sAB).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetSU A B C : A `<=` B -> A `|` C `<=` B `|` C.",
            "VernacStartTheoremProof",
            "94a290040a823609e14c1d33c361795f3eebbaef"
        ],
        [
            "by move=> sAB; rewrite -!(fsetUC C) fsetUS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetUSS A B C D : A `<=` C -> B `<=` D -> A `|` B `<=` C `|` D.",
            "VernacStartTheoremProof",
            "41a7fee9ad9722ef5c5a43d5e481a7a9921d96e2"
        ],
        [
            "by move=> /(fsetSU B) /fsubset_trans sAC /(fsetUS C)/sAC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fset0U A : fset0 `|` A = A.",
            "VernacStartTheoremProof",
            "5aee42009735f96e73fe3d5d1bcb1de2c47a3ee1"
        ],
        [
            "by apply/fsetP => x; rewrite !inE orFb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetU0 A : A `|` fset0 = A.",
            "VernacStartTheoremProof",
            "85fb9e820fdfc12eab9416f50b253b675f1d66dd"
        ],
        [
            "by rewrite fsetUC fset0U.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetIP x A B : reflect (x \\in A /\\ x \\in B) (x \\in A `&` B).",
            "VernacStartTheoremProof",
            "7a5742f3ea1fce909b326f07150dab2589af8e3e"
        ],
        [
            "by rewrite inE; apply: andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetIS A B C : A `<=` B -> C `&` A `<=` C `&` B.",
            "VernacStartTheoremProof",
            "e4c02d55b05e023b4eae6b867d233523484c2f9d"
        ],
        [
            "move=> sAB; apply/fsubsetP=> x; rewrite !inE.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by case: (x \\in C) => //; exact: (fsubsetP sAB).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetSI A B C : A `<=` B -> A `&` C `<=` B `&` C.",
            "VernacStartTheoremProof",
            "fc59685a4ee2589abd4856ec0489ee020d324b25"
        ],
        [
            "by move=> sAB; rewrite -!(fsetIC C) fsetIS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetISS A B C D : A `<=` C -> B `<=` D -> A `&` B `<=` C `&` D.",
            "VernacStartTheoremProof",
            "e31b407ba92d66653e3d22e2a4aea4dccec60fa9"
        ],
        [
            "by move=> /(fsetSI B) /fsubset_trans sAC /(fsetIS C) /sAC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetDP A B x : reflect (x \\in A /\\ x \\notin B) (x \\in A `\\` B).",
            "VernacStartTheoremProof",
            "9279aef863df2c9785f7349e6cc753a02e1d37ae"
        ],
        [
            "by rewrite inE andbC; apply: andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetSD C A B : A `<=` B -> A `\\` C `<=` B `\\` C.",
            "VernacStartTheoremProof",
            "6d0d96b2253be20361d5284a2f4c491a8038d7fa"
        ],
        [
            "move=> sAB; apply/fsubsetP=> x; rewrite !inE.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by case: (x \\in C) => //; exact: (fsubsetP sAB).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetDS C A B : A `<=` B -> C `\\` B `<=` C `\\` A.",
            "VernacStartTheoremProof",
            "da10d08a6c9cb6232f165cc6ef079b5c12ec0094"
        ],
        [
            "move=> sAB; apply/fsubsetP=> x; rewrite !inE ![_ && (_ \\in _)]andbC.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by case: (x \\in C) => //; apply: contra; exact: (fsubsetP sAB).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetDSS A B C D : A `<=` C -> D `<=` B -> A `\\` B `<=` C `\\` D.",
            "VernacStartTheoremProof",
            "0a55280972aa238fdbe8f8509c0e62df02860c17"
        ],
        [
            "by move=> /(fsetSD B) /fsubset_trans sAC /(fsetDS C) /sAC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetD0 A : A `\\` fset0 = A.",
            "VernacStartTheoremProof",
            "99b16a73a1b7e9391d43b34aac61ac10ad19ba55"
        ],
        [
            "by apply/fsetP=> x; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fset0D A : fset0 `\\` A = fset0.",
            "VernacStartTheoremProof",
            "0b491cea9b75b7025432eb596ed0d7ef0e98e3af"
        ],
        [
            "by apply/fsetP=> x; rewrite !inE andbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetDv A : A `\\` A = fset0.",
            "VernacStartTheoremProof",
            "92e6072fe6210f0b04d7a7f54a572b6a93a7d396"
        ],
        [
            "by apply/fsetP=> x; rewrite !inE andNb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetID B A : A `&` B `|` A `\\` B = A.",
            "VernacStartTheoremProof",
            "2839dc30f01a285449a372f29d47b2dcd099b4f4"
        ],
        [
            "by apply/fsetP=> x; rewrite !inE; do ?case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetDUl A B C : (A `|` B) `\\` C = (A `\\` C) `|` (B `\\` C).",
            "VernacStartTheoremProof",
            "0382cfc00d110a422a706050603292c465e6c929"
        ],
        [
            "by apply/fsetP=> x; rewrite !inE; do ?case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetDUr A B C : A `\\` (B `|` C) = (A `\\` B) `&` (A `\\` C).",
            "VernacStartTheoremProof",
            "bc2b8b95518e8b79ab2bc5b1f3618e9bf94d2de4"
        ],
        [
            "by apply/fsetP=> x; rewrite !inE; do ?case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetDIl A B C : (A `&` B) `\\` C = (A `\\` C) `&` (B `\\` C).",
            "VernacStartTheoremProof",
            "a10a64e69d4cb6b6bee9979f1ed859454397b853"
        ],
        [
            "by apply/fsetP=> x; rewrite !inE; do ?case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetIDA A B C : A `&` (B `\\` C) = (A `&` B) `\\` C.",
            "VernacStartTheoremProof",
            "5145d7774f380a4a1676fb40fd2b3cb32d7f2bce"
        ],
        [
            "by apply/fsetP=> x; rewrite !inE; do ?case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetIDAC A B C : (A `\\` B) `&` C = (A `&` C) `\\` B.",
            "VernacStartTheoremProof",
            "6da9c2d9b54d2e05b89f18a69ec4b03a9769258c"
        ],
        [
            "by apply/fsetP=> x; rewrite !inE; do ?case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetDIr A B C : A `\\` (B `&` C) = (A `\\` B) `|` (A `\\` C).",
            "VernacStartTheoremProof",
            "3d6885fb693824f1e936ce1e5aa506b6d49be109"
        ],
        [
            "by apply/fsetP=> x; rewrite !inE; do ?case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetDDl A B C : (A `\\` B) `\\` C = A `\\` (B `|` C).",
            "VernacStartTheoremProof",
            "5445adba4cde00ecba01202e5f40ed9793e0eea0"
        ],
        [
            "by apply/fsetP=> x; rewrite !inE; do ?case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetDDr A B C : A `\\` (B `\\` C) = (A `\\` B) `|` (A `&` C).",
            "VernacStartTheoremProof",
            "fd33df966719c340a6f8e418884d47c240e7bd8d"
        ],
        [
            "by apply/fsetP=> x; rewrite !inE; do ?case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetDK A B : B `<=` A -> A `\\` (A `\\` B) = B.",
            "VernacStartTheoremProof",
            "8e79944d05597e3abab4f4153a2eacbbb1e7040b"
        ],
        [
            "by rewrite fsetDDr => /fsetIidPr->; rewrite fsetDv fset0U.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetUDl (A B C : {fset K}) : A `|` (B `\\` C) = (A `|` B) `\\` (C `\\` A).",
            "VernacStartTheoremProof",
            "2d62ae47e54dee6e00102b07d158b9d8a9b55da3"
        ],
        [
            "by apply/fsetP=> x; rewrite !inE; do ?case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetUDr (A B C : {fset K}) : (A `\\` B) `|` C = (A `|` C) `\\` (B `\\` C).",
            "VernacStartTheoremProof",
            "193f3c51894d9dbca11dcc0cfc6766eb580c2415"
        ],
        [
            "by apply/fsetP=> x; rewrite !inE; do ?case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubsetIl A B : A `&` B `<=` A.",
            "VernacStartTheoremProof",
            "e42b9cae11522624396d1f0afa6f6683db6cb1c5"
        ],
        [
            "by apply/fsubsetP=> x; rewrite inE => /andP [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubsetIr A B : A `&` B `<=` B.",
            "VernacStartTheoremProof",
            "d5af20db5b6057a1b12365629e4b05371af4d6b0"
        ],
        [
            "by apply/fsubsetP=> x; rewrite inE => /andP [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubsetDl A B : A `\\` B `<=` A.",
            "VernacStartTheoremProof",
            "9180dba9c6a5a70a6c320231c29ca195cff7ae7e"
        ],
        [
            "by apply/fsubsetP=> x; rewrite inE => /andP [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubD1set A x : A `\\ x `<=` A.",
            "VernacStartTheoremProof",
            "f3f932fced1ef29df0700ca91ba03f0721a4c0e6"
        ],
        [
            "by rewrite fsubsetDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubsetD2l C A B : A `<=` C -> B `<=` C -> (C `\\` B `<=` C `\\` A) = (A `<=` B).",
            "VernacStartTheoremProof",
            "a77d502dfb95e66521cb33492d724f7588c8e96d"
        ],
        [
            "move=> sAC sBC; apply/idP/idP; last exact: fsetDS.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move=> /(@fsetDS C); rewrite !fsetDK //; apply; apply: fsubsetDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve fsubsetIl fsubsetIr fsubsetDl fsubD1set.",
            "VernacHints",
            "e67b8b85d2df9c7e6a48dcf19dc7613edacadc78"
        ],
        [
            "Lemma card_finset (T : finType) (P : pred T) : #|` [fset x in P] | = #|P|.",
            "VernacStartTheoremProof",
            "b6d9fb72af5fd7d24019b682710c50e25deeb2ce"
        ],
        [
            "by rewrite card_imfset //= -cardE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_fset (T : choiceType) (A : {fset T}) : #|` [fset x in A] | = #|` A|.",
            "VernacStartTheoremProof",
            "9bcc10ea5d0a3849390bccae0c36102e63edd815"
        ],
        [
            "by rewrite card_imfset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_fseq (T : choiceType) (s : seq T) : #|` [fset x in s] | = size (undup s).",
            "VernacStartTheoremProof",
            "d783b10402effaf3793672fd5d2a1f6fba06eb94"
        ],
        [
            "by rewrite card_imfset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardfs0 : #|` @fset0 K| = 0.",
            "VernacStartTheoremProof",
            "62af7e50c53b1b9c9161fc6e0637ce85b5891e12"
        ],
        [
            "by rewrite -(@card_fsub fset0) // fsub0 cards0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardfT0 : #|{: @fset0 K}| = 0.",
            "VernacStartTheoremProof",
            "d26abaf66c68f47ff8d7dce07992fade941edfc0"
        ],
        [
            "by rewrite -cardfE cardfs0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardfs_eq0 A : (#|` A| == 0) = (A == fset0).",
            "VernacStartTheoremProof",
            "9e0d10887c785cdef8c7a65646aea3079cf128f4"
        ],
        [
            "by rewrite -(@card_fsub A) // cards_eq0 fsub_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardfs0_eq A : #|` A| = 0 -> A = fset0.",
            "VernacStartTheoremProof",
            "e5d22c261b9c7f7cdb3f4d4b5155c2082b945bc1"
        ],
        [
            "by move=> /eqP; rewrite cardfs_eq0 => /eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fset0Pn A : reflect (exists x, x \\in A) (A != fset0).",
            "VernacStartTheoremProof",
            "b260a9a0b381b33c9b2f764b865c94982b050d65"
        ],
        [
            "rewrite -cardfs_eq0 cardfE; apply: (equivP existsP).",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by split=> [] [a aP]; [exists (val a); apply: valP|exists [` aP]].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardfs_gt0 A : (0 < #|` A|)%N = (A != fset0).",
            "VernacStartTheoremProof",
            "6cdf49849599859998fa74047ac14fb59f82c123"
        ],
        [
            "by rewrite lt0n cardfs_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardfs1 x : #|` [fset x]| = 1.",
            "VernacStartTheoremProof",
            "1c1d8e323b6c59d73bb18bccf5fb9bc65af42eed"
        ],
        [
            "by rewrite card_imfset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardfsUI A B : #|` A `|` B| + #|` A `&` B| = #|` A| + #|` B|.",
            "VernacStartTheoremProof",
            "910599362deb526cee3cf8307a538d88260f4344"
        ],
        [
            "rewrite -!(@card_fsub (A `|` B)) ?(fsubset_trans (fsubsetIl _ _)) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite fsubU fsubI cardsUI.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardfsU A B : #|` A `|` B| = (#|` A| + #|` B| - #|` A `&` B|)%N.",
            "VernacStartTheoremProof",
            "336d5dae5d10d2c95f3587c15fee8a4c6b45e6b0"
        ],
        [
            "by rewrite -cardfsUI addnK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardfsI A B : #|` A `&` B| = (#|` A| + #|` B| - #|` A `|` B|)%N.",
            "VernacStartTheoremProof",
            "42156237e49e7b4ef8d897ecf81fa2f66e13e873"
        ],
        [
            "by rewrite -cardfsUI addKn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardfsID B A : #|` A `&` B| + #|` A `\\` B| = #|` A|.",
            "VernacStartTheoremProof",
            "4f81b17b7a68b3724de3c7fc3c6a17551bc5d4cd"
        ],
        [
            "by rewrite -!(@card_fsub A) // fsubI fsubD cardsID.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardfsD A B : #|` A `\\` B| = (#|` A| - #|` A `&` B|)%N.",
            "VernacStartTheoremProof",
            "90850027e4d30d47c4cc6de4abff688836ff3658"
        ],
        [
            "by rewrite -(cardfsID B A) addKn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_fset1U a A : a \\in A -> a |` A = A.",
            "VernacStartTheoremProof",
            "8c3afeb41545aa9a8509c7dfdaa66e762f15786d"
        ],
        [
            "move=> aA; apply/fsetP => x; rewrite !inE orbC.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by have [//|/=] := boolP (_ \\in A); apply: contraNF => /eqP ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_fsetD1 a A : a \\notin A -> A `\\ a = A.",
            "VernacStartTheoremProof",
            "278ab9673fce314f92771487e9b2c44b729da8ad"
        ],
        [
            "move=> aA; apply/fsetP => x; rewrite !inE andbC.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by have [/= xA|//] := boolP (_ \\in A); apply: contraNneq aA => <-.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetI1 a A : A `&` [fset a] = if a \\in A then [fset a] else fset0.",
            "VernacStartTheoremProof",
            "1eab2a2cf3eee5c5f0be75a30d914b79c1708f77"
        ],
        [
            "apply/fsetP => x; rewrite (fun_if (fun X => _ \\in X)) !inE.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by have [[->|?] []] := (altP (x =P a), boolP (a \\in A)); rewrite ?andbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardfsU1 a A : #|` a |` A| = (a \\notin A) + #|` A|.",
            "VernacStartTheoremProof",
            "d1d0c3814ed6fa7f587330b04734010abc9dd931"
        ],
        [
            "have [aA|aNA] := boolP (a \\in A); first by rewrite mem_fset1U.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite cardfsU -addnBA ?fsubset_leq_card // fsetIC -cardfsD.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite mem_fsetD1 // cardfs1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardfs2 a b : #|` [fset a; b]| = (a != b).+1.",
            "VernacStartTheoremProof",
            "a101c8d30aa898579a37681ac4e6c66d3c96d0b6"
        ],
        [
            "by rewrite !cardfsU1 cardfs1 inE addn1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardfsD1 a A : #|` A| = (a \\in A) + #|` A `\\ a|.",
            "VernacStartTheoremProof",
            "dcaf89670faf57db1ce9135586d475ae8303b9ee"
        ],
        [
            "rewrite -(cardfsID [fset a]) fsetI1 (fun_if (fun A => #|` A|)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite cardfs0 cardfs1; case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsub1set A x : ([fset x] `<=` A) = (x \\in A).",
            "VernacStartTheoremProof",
            "8486067094efed64d01e2f0959fba69e145416d1"
        ],
        [
            "rewrite -(@subset_fsubE (x |` A)) // fsub1 ?fset1U1 // => xxA.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite sub1set inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardfs1P A : reflect (exists x, A = [fset x]) (#|` A| == 1).",
            "VernacStartTheoremProof",
            "41390c58e3f430ff17fb546e2b7074ef656da073"
        ],
        [
            "apply: (iffP idP) => [|[x ->]]; last by rewrite cardfs1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite eq_sym eqn_leq cardfs_gt0=> /andP[/fset0Pn[x Ax] leA1].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by exists x; apply/eqP; rewrite eq_sym eqEfcard fsub1set cardfs1 leA1 Ax.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubset1 A x : (A `<=` [fset x]) = (A == [fset x]) || (A == fset0).",
            "VernacStartTheoremProof",
            "af14e09a5246d7a3cc1cd44064b55d16ea7e73f4"
        ],
        [
            "rewrite eqEfcard cardfs1 -cardfs_eq0 orbC andbC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case: posnP => // A0; rewrite (cardfs0_eq A0) fsub0set.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments fsetIidPl {A B}.",
            "VernacArguments",
            "b33dc5719d29170e8b2ba6f46c5f2241f064acf1"
        ],
        [
            "Lemma cardfsDS A B : B `<=` A -> #|` A `\\` B| = (#|` A| - #|` B|)%N.",
            "VernacStartTheoremProof",
            "41bfe9e66e1e7ffd04f904aa6a1ac02407e128b3"
        ],
        [
            "by rewrite cardfsD => /fsetIidPr->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubIset A B C : (B `<=` A) || (C `<=` A) -> (B `&` C `<=` A).",
            "VernacStartTheoremProof",
            "f97fd0aa5cb05d3e9e8cdb3902fe8591780148fd"
        ],
        [
            "by case/orP; apply: fsubset_trans; rewrite (fsubsetIl, fsubsetIr).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubsetI A B C : (A `<=` B `&` C) = (A `<=` B) && (A `<=` C).",
            "VernacStartTheoremProof",
            "ea470f6f2f9145e0e8c477ea0c404a0c17092110"
        ],
        [
            "rewrite !(sameP fsetIidPl eqP) fsetIA; have [-> //| ] := altP (A `&` B =P A).",
            "VernacExtend",
            "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
        ],
        [
            "by apply: contraNF => /eqP <-; rewrite -fsetIA -fsetIIl fsetIAC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubsetIP A B C : reflect (A `<=` B /\\ A `<=` C) (A `<=` B `&` C).",
            "VernacStartTheoremProof",
            "0b14ba4212fc214b036c1e028409222bd55c7b62"
        ],
        [
            "by rewrite fsubsetI; exact: andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubUset A B C : (B `|` C `<=` A) = (B `<=` A) && (C `<=` A).",
            "VernacStartTheoremProof",
            "42c7c633519562a0d3bb8614ee6f59014eb5dcb4"
        ],
        [
            "apply/idP/idP => [subA|/andP [AB CA]]; last by rewrite -[A]fsetUid fsetUSS.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !(fsubset_trans _ subA).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubUsetP A B C : reflect (A `<=` C /\\ B `<=` C) (A `|` B `<=` C).",
            "VernacStartTheoremProof",
            "06646c5522d7d2745ab4244c2d460989910cad44"
        ],
        [
            "by rewrite fsubUset; exact: andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubDset A B C : (A `\\` B `<=` C) = (A `<=` B `|` C).",
            "VernacStartTheoremProof",
            "ff61e845dc5088c3b024a9d18101701a46eeb1dc"
        ],
        [
            "apply/fsubsetP/fsubsetP=> sABC x; rewrite !inE.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by case Bx: (x \\in B) => // Ax; rewrite sABC ?in_fsetD ?Bx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case Bx: (x \\in B) => //; move/sABC; rewrite inE Bx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetU_eq0 A B : (A `|` B == fset0) = (A == fset0) && (B == fset0).",
            "VernacStartTheoremProof",
            "7fe981d3dc91b6d08a258d62d8711250a4e86541"
        ],
        [
            "by rewrite -!fsubset0 fsubUset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubsetD1 A B x : (A `<=` B `\\ x) = (A `<=` B) && (x \\notin A).",
            "VernacStartTheoremProof",
            "bf2c1fec09ad8546c8c3f2ca6c817706d01b98d6"
        ],
        [
            "do !rewrite -(@subset_fsubE (x |` A `|` B)) ?fsubDset ?fsetUA // 1?fsetUAC //.",
            "VernacExtend",
            "2ed5ae5c7a1513e882f170a2462d7a7c3c1ca435"
        ],
        [
            "rewrite fsubD1 => [|mem_x]; first by rewrite -fsetUA fset1U1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite subsetD1 // inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubsetD1P A B x : reflect (A `<=` B /\\ x \\notin A) (A `<=` B `\\ x).",
            "VernacStartTheoremProof",
            "863cc7796abfdc04465a8b9831e4b7c42c800898"
        ],
        [
            "by rewrite fsubsetD1; exact: andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubsetPn A B : reflect (exists2 x, x \\in A & x \\notin B) (~~ (A `<=` B)).",
            "VernacStartTheoremProof",
            "82f111fcb48ddeb8a44135b19e75c46721cd903a"
        ],
        [
            "rewrite -fsetD_eq0; apply: (iffP (fset0Pn _)) => [[x]|[x xA xNB]].",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite inE => /andP[]; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by exists x; rewrite inE xA xNB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fproperD1 A x : x \\in A -> A `\\ x `<` A.",
            "VernacStartTheoremProof",
            "bbb2f3297f38822c9e1a909356e7c39601b92964"
        ],
        [
            "move=> Ax; rewrite fproperE fsubsetDl; apply/fsubsetPn; exists x=> //.",
            "VernacExtend",
            "f7e1535beb7276979a5b89bc8a1738146a5562e1"
        ],
        [
            "by rewrite in_fsetD1 Ax eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fproperIr A B : ~~ (B `<=` A) -> A `&` B `<` B.",
            "VernacStartTheoremProof",
            "dbb934ba4b3ae317c73bfe45702974653039b7c5"
        ],
        [
            "by move=> nsAB; rewrite fproperE fsubsetIr fsubsetI negb_and nsAB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fproperIl A B : ~~ (A `<=` B) -> A `&` B `<` A.",
            "VernacStartTheoremProof",
            "5799e8cd6fbec35b79c90450b0767c5450e4aea1"
        ],
        [
            "by move=> nsBA; rewrite fproperE fsubsetIl fsubsetI negb_and nsBA orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fproperUr A B : ~~ (A `<=` B) -> B `<` A `|` B.",
            "VernacStartTheoremProof",
            "aee3a2edec502b68777662db93c1a5ef3eb7adec"
        ],
        [
            "by rewrite fproperE fsubsetUr fsubUset fsubset_refl /= andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fproperUl A B : ~~ (B `<=` A) -> A `<` A `|` B.",
            "VernacStartTheoremProof",
            "2b4e75da87a21f31bf98a40390cc047832e15393"
        ],
        [
            "by move=> not_sBA; rewrite fsetUC fproperUr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fproper1set A x : ([fset x] `<` A) -> (x \\in A).",
            "VernacStartTheoremProof",
            "a82da54bfdb4130311f34fc24a256608379d077d"
        ],
        [
            "by move/fproper_sub; rewrite fsub1set.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fproperIset A B C : (B `<` A) || (C `<` A) -> (B `&` C `<` A).",
            "VernacStartTheoremProof",
            "3976afa707eee79d11abc41f427a5e5831afcb73"
        ],
        [
            "by case/orP; apply: fsub_proper_trans; rewrite (fsubsetIl, fsubsetIr).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fproperI A B C : (A `<` B `&` C) -> (A `<` B) && (A `<` C).",
            "VernacStartTheoremProof",
            "275065d77d0b303fb66bb5c0af59bed919ee82cf"
        ],
        [
            "move=> pAI; apply/andP.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by split; apply: (fproper_sub_trans pAI); rewrite (fsubsetIl, fsubsetIr).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fproperU A B C : (B `|` C `<` A) -> (B `<` A) && (C `<` A).",
            "VernacStartTheoremProof",
            "966e3d28655b5be8fce7d977b9db2d1859a32d3d"
        ],
        [
            "move=> pUA; apply/andP.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by split; apply: fsub_proper_trans pUA; rewrite (fsubsetUr, fsubsetUl).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetDpS C A B : B `<=` C -> A `<` B -> C `\\` B `<` C `\\` A.",
            "VernacStartTheoremProof",
            "7f9ad0098cd8430b857f5ccaed1ca677853ff482"
        ],
        [
            "move=> subBC subAB; rewrite fproperEneq fsetDS 1?fproper_sub// andbT.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "apply/negP => /eqP /(congr1 (fsetD C)); rewrite !fsetDK // => [eqAB//|].",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "by rewrite eqAB (negPf (fproper_irrefl _)) in subAB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: fsubset_trans subBC; apply: fproper_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fproperD2l C A B : A `<=` C -> B `<=` C -> (C `\\` B `<` C `\\` A) = (A `<` B).",
            "VernacStartTheoremProof",
            "83be8c431ecd7cee728695fe1467fcef25a6d21c"
        ],
        [
            "move=> sAC sBC; apply/idP/idP; last exact: fsetDpS.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move=> /(@fsetDpS C); rewrite !fsetDK //; apply; apply: fsubsetDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetI_eq0 A B : (A `&` B == fset0) = [disjoint A & B].",
            "VernacStartTheoremProof",
            "45f1e632eb767a3cc09743e556410a540dcc8f0f"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fdisjoint_sub {A B} : [disjoint A & B]%fset -> forall C : {fset K}, [disjoint fsub C A & fsub C B]%bool.",
            "VernacStartTheoremProof",
            "1361d8d067f39210aa31e0ed18da76276217cc94"
        ],
        [
            "move=> disjointAB C; apply/pred0P => a /=; rewrite !inE.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by have /eqP /fsetP /(_ (val a)) := disjointAB; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma disjoint_fsub C A B : A `|` B `<=` C -> [disjoint fsub C A & fsub C B]%bool = [disjoint A & B].",
            "VernacStartTheoremProof",
            "1813550daf2ff153bdfe9f2ef74f928f71b3b6d4"
        ],
        [
            "move=> ABsubC.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply/idP/idP=> [/pred0P DAB|/fdisjoint_sub->//]; apply/eqP/fsetP=> a.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "rewrite !inE; have [aC|] := boolP (a \\in A `|` B); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !inE => /norP [/negPf-> /negPf->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by have /= := DAB [` fsubsetP ABsubC _ aC]; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fdisjointP {A B} : reflect (forall a, a \\in A -> a \\notin B) [disjoint A & B]%fset.",
            "VernacStartTheoremProof",
            "201278cad56c5ed78b2c6d8a57082dfefb79253e"
        ],
        [
            "apply: (iffP eqP) => [AIB_eq0 a aA|neq_ab].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by have /fsetP /(_ a) := AIB_eq0; rewrite !inE aA /= => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/fsetP => a; rewrite !inE.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by case: (boolP (a \\in A)) => // /neq_ab /negPf ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsetDidPl A B : reflect (A `\\` B = A) [disjoint A & B]%fset.",
            "VernacStartTheoremProof",
            "65244f32470378dd4e0fdd23d965c1cf0e055c9e"
        ],
        [
            "apply: (iffP fdisjointP)=> [NB|<- a]; last by rewrite inE => /andP[].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/fsetP => a; rewrite !inE andbC.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by case: (boolP (a \\in A)) => //= /NB ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma disjoint_fsetI0 A B : [disjoint A & B] -> A `&` B = fset0.",
            "VernacStartTheoremProof",
            "31abad16f653b2b2fe0d82c84dba39260adc7435"
        ],
        [
            "by rewrite -fsetI_eq0; move/eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubsetD A B C : (A `<=` (B `\\` C)) = (A `<=` B) && [disjoint A & C]%fset.",
            "VernacStartTheoremProof",
            "76f77ded212de566159f69494aada2eb3fc6542a"
        ],
        [
            "pose D := A `|` B `|` C.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have AD : A `<=` D by rewrite /D -fsetUA fsubsetUl.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have BD : B `<=` D by rewrite /D fsetUAC fsubsetUr.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -(@subset_fsubE D) //; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite fsubDset (fsubset_trans BD) // fsubsetUr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite fsubD subsetD !subset_fsubE // disjoint_fsub //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite /D fsetUAC fsubsetUl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubsetDP A B C : reflect (A `<=` B /\\ [disjoint A & C]%fset) (A `<=` (B `\\` C)).",
            "VernacStartTheoremProof",
            "7e4564f6922791f3dc1828f096e2a5098c24bbbb"
        ],
        [
            "by rewrite fsubsetD; apply: andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fdisjoint_sym A B : [disjoint A & B] = [disjoint B & A].",
            "VernacStartTheoremProof",
            "70731c6059aad1a79646e090fdce5f567f19a577"
        ],
        [
            "by rewrite -!fsetI_eq0 fsetIC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fdisjointP_sym {A B} : reflect (forall a, a \\in A -> a \\notin B) [disjoint B & A]%fset.",
            "VernacStartTheoremProof",
            "bf22ea71d45bdce5f86b461aba5d5915c26fb071"
        ],
        [
            "by rewrite fdisjoint_sym; apply: fdisjointP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fdisjoint_trans A B C : A `<=` B -> [disjoint B & C] -> [disjoint A & C].",
            "VernacStartTheoremProof",
            "914e12ada12c61a32250e44339186071e8e6d43b"
        ],
        [
            "move=> AsubB; rewrite -!(@disjoint_fsub (B `|` C)) ?fsetSU //.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by apply: disjoint_trans; rewrite subset_fsub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fdisjoint0X A : [disjoint fset0 & A].",
            "VernacStartTheoremProof",
            "464ebd5e17cf1a79aacb90f84721612c3f4fbee6"
        ],
        [
            "by rewrite -fsetI_eq0 fset0I.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fdisjointX0 A : [disjoint A & fset0].",
            "VernacStartTheoremProof",
            "6df866da2e4360ec1709e52e68c9438325063127"
        ],
        [
            "by rewrite -fsetI_eq0 fsetI0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fdisjoint1X x A : [disjoint [fset x] & A] = (x \\notin A).",
            "VernacStartTheoremProof",
            "588d00660db954f5942d153a6bc33cfeb6cb96e4"
        ],
        [
            "rewrite -(@disjoint_fsub (x |` A)) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (@eq_disjoint1 _ [` fset1U1 _ _]) ?inE =>// ?; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fdisjointX1 x A : [disjoint A & [fset x]] = (x \\notin A).",
            "VernacStartTheoremProof",
            "7f96621846cd90c12ba9fd1cc23fcae66ebdeda7"
        ],
        [
            "by rewrite fdisjoint_sym fdisjoint1X.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fdisjointUX A B C : [disjoint A `|` B & C] = [disjoint A & C]%fset && [disjoint B & C]%fset.",
            "VernacStartTheoremProof",
            "757d3769e0aab48289c5edf075cee6d7ab56227b"
        ],
        [
            "by rewrite -!fsetI_eq0 fsetIUl fsetU_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fdisjointXU A B C : [disjoint A & B `|` C] = [disjoint A & B]%fset && [disjoint A & C]%fset.",
            "VernacStartTheoremProof",
            "5a48d797a69942949a41d7d1b282c301acbb4989"
        ],
        [
            "by rewrite -!fsetI_eq0 fsetIUr fsetU_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fdisjointU1X x A B : [disjoint x |` A & B]%fset = (x \\notin B) && [disjoint A & B]%fset.",
            "VernacStartTheoremProof",
            "9e0b02ce645c31fcb64ed651f5dc4e6fb05b7189"
        ],
        [
            "by rewrite fdisjointUX fdisjoint1X.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsubK A B : A `<=` B -> [fsetval k in fsub B A] = A.",
            "VernacStartTheoremProof",
            "3331083c2448062b7dca1192b9310ef5abf8277c"
        ],
        [
            "move=> AsubB; apply/fsetP => k /=; symmetry.",
            "VernacExtend",
            "2af327f1a6bff11666a57d7f8dd6da6d7e22854e"
        ],
        [
            "have [kB|kNB] := (boolP (k \\in B)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite in_fset_valT /= inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite in_fset_valF //; apply: contraNF kNB; apply/fsubsetP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma FSetK A (X : {set A}) : fsub A [fsetval k in X] = X.",
            "VernacStartTheoremProof",
            "edf586bb489ec0f7d3d75ef980f183637aabbb10"
        ],
        [
            "by apply/setP => x; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Theory.",
            "VernacEndSegment",
            "3b5383a8665fcdb23b7893346ca6ee697173139d"
        ],
        [
            "Hint Resolve fsubset_refl.",
            "VernacHints",
            "607d7c99cd1e5804342c106523f7d7f91ac2754e"
        ],
        [
            "Hint Resolve fsubset_trans.",
            "VernacHints",
            "81254bf99434ec3dc3866af939e0b11c2a9c46c3"
        ],
        [
            "Hint Resolve fproper_irrefl.",
            "VernacHints",
            "dc7fd8db7de3032f91392ad4fba6ce8409b1ef71"
        ],
        [
            "Hint Resolve fsub0set.",
            "VernacHints",
            "5a43325a4b84c6b1e40898ba7e1f006507cbb2cd"
        ],
        [
            "Module Import FSetInE.",
            "VernacDefineModule",
            "b6f5146269463ec6013f012c5d8766cd3672b360"
        ],
        [
            "Definition inE := (inE, in_fsetE).",
            "VernacDefinition",
            "238f927bf7071057bbcb90bf8693ac9a96a3eeb7"
        ],
        [
            "End FSetInE.",
            "VernacEndSegment",
            "04f6a188939bd952953ba08b0a9818839cf0445b"
        ],
        [
            "Section Card.",
            "VernacBeginSection",
            "31decae13a598a390768e5b03a0e0b23d167c657"
        ],
        [
            "End Card.",
            "VernacEndSegment",
            "d37c25d58234bd9dfcd692fc4d3cf709c7e465e3"
        ],
        [
            "Section Enum.",
            "VernacBeginSection",
            "eb3c65c9445e3680b7b91959a336566e4fa09cf7"
        ],
        [
            "Lemma enum_fset0 (T : choiceType) : enum [finType of fset0] = [::] :> seq (@fset0 T).",
            "VernacStartTheoremProof",
            "030bee35c8f228a23a12945cbc86d65b8a423d43"
        ],
        [
            "by rewrite enumT unlock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma enum_fset1 (T : choiceType) (x : T) : enum [finType of [fset x]] = [:: [`fset11 x]].",
            "VernacStartTheoremProof",
            "e105998278a1c5b95d4a98a694550a591dca1ceb"
        ],
        [
            "apply/perm_eq_small=> //; apply/uniq_perm_eq => //.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by apply/enum_uniq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case=> [y hy]; rewrite mem_seq1 mem_enum /in_mem /=.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by rewrite eqE /=; rewrite in_fset1 in hy.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Enum.",
            "VernacEndSegment",
            "3080d0f2c82bd154ea9f69f1f5ec18ccb0758675"
        ],
        [
            "Section ImfsetTh.",
            "VernacBeginSection",
            "a4f5dd7f6cf9af664f62c277b6c7e5a1a9e6c00b"
        ],
        [
            "Variables (key : unit) (K V : choiceType).",
            "VernacAssumption",
            "831fc6ba0875bbaa83be069dd15f7b94087766ef"
        ],
        [
            "Implicit Types (f : K -> V) (g : V -> K) (A V : {fset K}).",
            "VernacReserve",
            "4940767117ca16bb2bb335ecd4e4f7e2f9e69bb3"
        ],
        [
            "Lemma imfset_id (A : {fset K}) : id @` A = A.",
            "VernacStartTheoremProof",
            "a49b76265ad9887384716716af45ea54f83085ce"
        ],
        [
            "by apply/fsetP=> a; rewrite in_fset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imfset_comp f g (p : finmempred _) : imfset key (g \\o f) p = g @` (imfset key f p).",
            "VernacStartTheoremProof",
            "08d07f88c59d23ca4285a99a94275fc203d87223"
        ],
        [
            "apply/fsetP=> a; apply/imfsetP/imfsetP=> [[/= x xA ->]|].",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by exists (f x); rewrite // in_imfset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=> [/= x /imfsetP [/= y yA ->] ->]; exists y.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subset_imfset f (p q : finmempred _) : {subset p <= q} -> imfset key f p `<=` imfset key f q.",
            "VernacStartTheoremProof",
            "bdfac19f55f342dc6620f478675518b7175429c1"
        ],
        [
            "move=> subPQ; apply/fsubsetP=> x /imfsetP [y /= yA ->].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite in_imfset //= [in_mem _ _]subPQ.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_imfset (f f' : K -> V) (p q : finmempred _): f =1 f' -> (forall x, in_mem x p = in_mem x q) -> imfset key f p = imfset key f' q.",
            "VernacStartTheoremProof",
            "3d14d988e4e2485ea69bd750f557dc95dfcc73c3"
        ],
        [
            "move=> eq_f eqP; apply/fsetP => x; apply/imfsetP/imfsetP => /= [] [k Pk ->]; by exists k => //=; rewrite ?eq_f ?eqP in Pk *.",
            "VernacExtend",
            "c2987fcf5c8c0a4a73943c6375063459f06ade02"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ImfsetTh.",
            "VernacEndSegment",
            "15ec8d93db74d0bf72d3ac31d61d94f8778df5d5"
        ],
        [
            "Section PowerSetTheory.",
            "VernacBeginSection",
            "f4f0ada6ab8d4655b1fcc389dff006a98c313c1e"
        ],
        [
            "Variable (K : choiceType).",
            "VernacAssumption",
            "f12791760ea7a097b3e48c57d86546a92346fc64"
        ],
        [
            "Fact fpowerset_key : unit.",
            "VernacStartTheoremProof",
            "1814a700a581a24e8c8f9f1e49ae75cb37037d5c"
        ],
        [
            "exact: tt.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition fpowerset (A : {fset K}) : {fset {fset K}} := [fset[fpowerset_key] [fsetval y in Y : {set A}] | Y in powerset [set: A]].",
            "VernacDefinition",
            "8a0d9d6f0b0e3ff92690d6a618ff9eea9476795e"
        ],
        [
            "Lemma fpowersetE A B : (B \\in fpowerset A) = (B `<=` A).",
            "VernacStartTheoremProof",
            "9a93d4d2dd2170750dd3c0925ca0c93aa66588cb"
        ],
        [
            "apply/imfsetP/fsubsetP => /= [[Z _ -> y /in_fset_valP [] //]|/fsubsetP subYX].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "exists (fsub _ B); last by rewrite fsubK.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite powersetE /= -fsubT subset_fsub ?fsubset_refl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fpowersetCE (X A B : {fset K}) : (A \\in fpowerset (X `\\` B)) = (A `<=` X) && [disjoint A & B]%fset.",
            "VernacStartTheoremProof",
            "09798dd4802d00c14bfd1082e7f1523410900d67"
        ],
        [
            "by rewrite fpowersetE fsubsetD.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fpowersetS A B : (fpowerset A `<=` fpowerset B) = (A `<=` B).",
            "VernacStartTheoremProof",
            "845ac4232120488a99dfca196e1925eb2b6a6e4e"
        ],
        [
            "apply/fsubsetP/fsubsetP => [sub_pA_pB a|subAB X].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by have := sub_pA_pB [fset a]; rewrite !fpowersetE !fsub1set.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite !fpowersetE => /fsubsetP XA; apply/fsubsetP => x /XA /subAB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fpowerset0 : fpowerset fset0 = [fset fset0].",
            "VernacStartTheoremProof",
            "7029cc7970d172ad4a87296c7a0c52c727887586"
        ],
        [
            "by apply/fsetP=> X; rewrite inE fpowersetE fsubset0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fpowerset1 (x : K) : fpowerset [fset x] = [fset fset0; [fset x]].",
            "VernacStartTheoremProof",
            "431876ad804de638553d8fc6fa0e5c403ddb5706"
        ],
        [
            "by apply/fsetP => X; rewrite !inE fpowersetE fsubset1 orbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fpowersetI A B : fpowerset (A `&` B) = fpowerset A `&` fpowerset B.",
            "VernacStartTheoremProof",
            "ae78c4d282b24db250534c6a02969b7c4c0b24ba"
        ],
        [
            "by apply/fsetP=> X; rewrite inE !fpowersetE fsubsetI.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_fpowerset (A : {fset K}) : #|` fpowerset A| = 2 ^ #|` A|.",
            "VernacStartTheoremProof",
            "48f8315ac8e2bee5c9c1beb8eb58c2b8f3aa076b"
        ],
        [
            "rewrite !card_imfset; first by rewrite -cardE card_powerset cardsE cardfE.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move=> X Y /fsetP eqXY; apply/setP => x; have := eqXY (val x); rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End PowerSetTheory.",
            "VernacEndSegment",
            "109bacd394036991c468740829ff53e73a332583"
        ],
        [
            "Section BigFSet.",
            "VernacBeginSection",
            "63cb4720d5dc51bbe4375fd41fdf169f4dd4b0d8"
        ],
        [
            "Variable (R : Type) (idx : R) (op : Monoid.law idx).",
            "VernacAssumption",
            "8e9c97dba8a47da80a9ec3763d739835393ce0d9"
        ],
        [
            "Variable (I : choiceType).",
            "VernacAssumption",
            "06e1693e1dc3bc379a6c96a08458ba8f7f054103"
        ],
        [
            "Lemma big_seq_fsetE (X : {fset I}) (P : pred I) (F : I -> R) : \\big[op/idx]_(i <- X | P i) F i = \\big[op/idx]_(x : X | P (val x)) F (val x).",
            "VernacStartTheoremProof",
            "a334896e6b73c774a8948f53837b5921e1f3a140"
        ],
        [
            "by rewrite enum_fsetE big_map enumT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big1_fset (X : {fset I}) (P : pred I) (F : I -> R) : (forall i, i \\in X -> P i -> F i = idx) -> \\big[op/idx]_(i <- X | P i) F i = idx.",
            "VernacStartTheoremProof",
            "91cc2d3300c2cf0053a8d4ea20b7b10067cdcf4b"
        ],
        [
            "by move=> Fid; rewrite big_seq_fsetE big1//= => -[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_fset0 (P : pred fset0) (F : @fset0 I -> R) : \\big[op/idx]_(i : fset0 | P i) F i = idx.",
            "VernacStartTheoremProof",
            "5eed6ff372dd87371b82aab0bac614d8ee37aeff"
        ],
        [
            "by rewrite /index_enum -enumT /= enum_fset0 big_nil.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_seq_fset0 (F : I -> R): \\big[op/idx]_(i <- fset0) F i = idx.",
            "VernacStartTheoremProof",
            "b0f69fc4e90066c1f71f6b570035e8fee941ed90"
        ],
        [
            "by rewrite big_seq_fsetE big_fset0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_fset1 (a : I) (F : [fset a] -> R) : \\big[op/idx]_(i : [fset a]) F i = F [` fset11 a].",
            "VernacStartTheoremProof",
            "c85c680c5f417aa0643ca57917b1aecc15f94d7c"
        ],
        [
            "by rewrite /index_enum -enumT enum_fset1 big_seq1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_seq_fset1 (a : I) (F : I -> R) : \\big[op/idx]_(i <- [fset a]) F i = F a.",
            "VernacStartTheoremProof",
            "9a4004c6c757d6e0e7df0a5be5ab78da525a657a"
        ],
        [
            "by rewrite big_seq_fsetE big_fset1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End BigFSet.",
            "VernacEndSegment",
            "46fa316c023e8a11604528132cd981f699244bdf"
        ],
        [
            "Notation eq_big_imfset := (eq_big_perm _ (enum_imfset _ _)).",
            "VernacSyntacticDefinition",
            "513f6fcde0c7f6f4b5975656470c9104f50f445d"
        ],
        [
            "Section BigComFSet.",
            "VernacBeginSection",
            "a00cb7bfb379cb6fbbf02c053e4361c60e71cffc"
        ],
        [
            "Variable (R : Type) (idx : R) (op : Monoid.com_law idx).",
            "VernacAssumption",
            "96cda60bdf0f3b3e90a3cfd20acc0f3b3ec771cc"
        ],
        [
            "Variable (I J : choiceType).",
            "VernacAssumption",
            "ad0561b7585c5071e77cdbd03982d220b54be6eb"
        ],
        [
            "Lemma big_fset (X : finmempred _) (P : pred I) (F : I -> R) : \\big[op/idx]_(i <- [fset i in X | P i]) F i = \\big[op/idx]_(i <- enum_finmem X | P i) F i.",
            "VernacStartTheoremProof",
            "7b2326efc1141cb951617de4be253651ef1ef1fd"
        ],
        [
            "by rewrite !eq_big_imfset//= !big_map !big_filter_cond big_andbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_fset_condE (X : {fset I}) (P : pred I) (F : I -> R) : \\big[op/idx]_(i <- X | P i) F i = \\big[op/idx]_(i <- [fset i in X | P i]) F i.",
            "VernacStartTheoremProof",
            "88d4ff330c2ce3e81a05358268667eaf0867e280"
        ],
        [
            "by rewrite big_fset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_fbig_cond (A B : {fset I}) (P Q : pred I) (F G : I -> R) : [fset x in A | P x] =i [fset x in B | Q x] -> (forall x, x \\in A -> P x -> F x = G x) -> \\big[op/idx]_(i <- A | P i) F i = \\big[op/idx]_(i <- B | Q i) G i.",
            "VernacStartTheoremProof",
            "d182cdcd20e777cbb5a7328b62b77449192d97e1"
        ],
        [
            "move=> /fsetP eqABPQ FG; rewrite big_fset_condE [in RHS]big_fset_condE -eqABPQ.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "rewrite big_seq_cond [in RHS]big_seq_cond; apply: eq_bigr => i.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite in_fset !inE => /andP[/andP[??] _]; apply: FG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_fbig (A B : {fset I}) (F G : I -> R) : A =i B -> (forall x, x \\in A -> F x = G x) -> \\big[op/idx]_(i <- A) F i = \\big[op/idx]_(i <- B) G i.",
            "VernacStartTheoremProof",
            "cd15bef625231d35b6130281dd1d02ff35280cd5"
        ],
        [
            "by move=> AB FG; apply: eq_fbig_cond => x; rewrite ?inE/= -?AB// => /FG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_fbigl_cond (A B : {fset I}) (P Q : pred I) (F : I -> R) : [fset x in A | P x] =i [fset x in B | Q x] -> \\big[op/idx]_(i <- A | P i) F i = \\big[op/idx]_(i <- B | Q i) F i.",
            "VernacStartTheoremProof",
            "80b0fd54ac50c872297fbf8902c5bceef622c239"
        ],
        [
            "by move=> AB; apply: eq_fbig_cond.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_fbigl (A B : {fset I}) (F : I -> R) : A =i B -> \\big[op/idx]_(i <- A) F i = \\big[op/idx]_(i <- B) F i.",
            "VernacStartTheoremProof",
            "4827c8581fe46831891552ac0d7fe98b5cef02ec"
        ],
        [
            "by move=> AB; apply: eq_fbig.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_fbigr (A : {fset I}) (P : pred I) (F G : I -> R) : (forall x, x \\in A -> P x -> F x = G x) -> \\big[op/idx]_(i <- A | P i) F i = \\big[op/idx]_(i <- A | P i) G i.",
            "VernacStartTheoremProof",
            "1205e51e727e91b24584bc975a6a6e1f0de5925f"
        ],
        [
            "by apply: eq_fbig_cond.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_fsetID (B : pred I) (A : {fset I}) (F : I -> R) : \\big[op/idx]_(i <- A) F i = op (\\big[op/idx]_(i <- [fset x in A | B x]) F i) (\\big[op/idx]_(i <- [fset x in A | ~~ B x]) F i).",
            "VernacStartTheoremProof",
            "3c4d70e74ade038d6d338e6fd3afd31ffe78c126"
        ],
        [
            "by rewrite !big_fset; apply: bigID.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_fsetIDcond (B : pred I) (A : {fset I}) (P : pred I) (F : I -> R) : \\big[op/idx]_(i <- A | P i) F i = op (\\big[op/idx]_(i <- [fset x in A | B x] | P i) F i) (\\big[op/idx]_(i <- [fset x in A | ~~ B x] | P i) F i).",
            "VernacStartTheoremProof",
            "11dd18b23b617b1e0f96c3ac53ade41ff9ba964c"
        ],
        [
            "by rewrite big_mkcond (big_fsetID B) // -!big_mkcond.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_fsetD1 (a : I) (A : {fset I}) (F : I -> R) : a \\in A -> \\big[op/idx]_(i <- A) F i = op (F a) (\\big[op/idx]_(i <- A `\\ a) F i).",
            "VernacStartTheoremProof",
            "dd533909e299228e00e1a610ef2bc3320e3583bb"
        ],
        [
            "move=> aA; rewrite (big_fsetID (mem [fset a])); congr (op _ _); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: eq_fbigl=> i; rewrite !inE/= andbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (_ : [fset _ | _ in _ & _] = [fset a]) ?big_seq_fset1//=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/fsetP=> i; rewrite !inE /= andbC; case: eqP => //->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_setU1 (a : I) (A : {fset I}) (F : I -> R) : a \\notin A -> \\big[op/idx]_(i <- (a |` A)) F i = op (F a) (\\big[op/idx]_(i <- A) F i).",
            "VernacStartTheoremProof",
            "09a9aafac13cfa0f348d14398858bff39023d234"
        ],
        [
            "move=> aNA; rewrite eq_big_imfset//= big_map undup_id ?big_cat ?big_seq_fset1//.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "rewrite cat_uniq ?fset_uniq andbT//=; apply/hasPn=> /= x xA; rewrite !inE/=.",
            "VernacExtend",
            "fe8f197e86415fc7f0a74eda9d312128b9473eda"
        ],
        [
            "by apply: contraNneq aNA => <-.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_fset_incl (A : {fset I}) B F : A `<=` B -> (forall x, x \\in B -> x \\notin A -> F x = idx) -> \\big[op/idx]_(x <- A) F x = \\big[op/idx]_(x <- B) F x.",
            "VernacStartTheoremProof",
            "19e826e84c2ea3fbc860be39f9e71503972d1de0"
        ],
        [
            "move=> subAB Fid; rewrite [in RHS](big_fsetID (mem A)) /=.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "rewrite [X in op _ X]big1_fset ?Monoid.mulm1; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move=> i; rewrite !inE /= => /andP[iB iNA _]; apply: Fid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: eq_fbigl => i; rewrite !inE /= -(@in_fsetI _ B A) (fsetIidPr _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_imfset key (h : I -> J) (A : finmempred _) (G : J -> R) : {in A &, injective h} -> \\big[op/idx]_(j <- imfset key h A) G j = \\big[op/idx]_(i <- enum_finmem A) G (h i).",
            "VernacStartTheoremProof",
            "65fc72f0dcbba4cc97d711dbdd3236d9875fa0ab"
        ],
        [
            "by move=> h_inj; rewrite eq_big_imfset// big_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End BigComFSet.",
            "VernacEndSegment",
            "36b3e7a433313d1c67407b29baf593c3933ad0f7"
        ],
        [
            "Arguments big_fsetD1 {R idx op I} a [A F].",
            "VernacArguments",
            "b7db7666ea9bcd209d2c32f921638c9db8c43351"
        ],
        [
            "Notation eq_big_imfset2 := (eq_big_perm _ (enum_imfset2 _ _)).",
            "VernacSyntacticDefinition",
            "629e11cf7890e28db535528c03b40bad479581b9"
        ],
        [
            "Section BigComImfset2.",
            "VernacBeginSection",
            "50fe8eb8e01bdaf5b0cbe345f4ebe667e1a02ae7"
        ],
        [
            "Variables (R : Type) (idx : R) (op : Monoid.com_law idx) (I : choiceType) (J : I -> choiceType) (K : choiceType).",
            "VernacAssumption",
            "ca79b00313c52074cee8f18127f5c8f456f2635a"
        ],
        [
            "Lemma big_imfset2 key (A : finmempred I) (B : forall i, finmempred (J i)) (h : forall i : I, J i -> K) (F : K -> R) : {in [pred t : sigT J | A (tag t) & B _ (tagged t)] &, injective (fun t => h (tag t) (tagged t))} -> \\big[op/idx]_(k <- imfset2 key h A B) F k = \\big[op/idx]_(i <- enum_finmem A) \\big[op/idx]_(j <- enum_finmem (B i)) F (h i j).",
            "VernacStartTheoremProof",
            "e69a98d520ccc57874b77bb79ce2c8e1893bcef6"
        ],
        [
            "move=> h_inj; rewrite eq_big_imfset2 //.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "rewrite (allsigs_comp (fun _ j => Tagged _ j) (fun t => h (tag t) (tagged t))).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite big_map big_allsigs /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End BigComImfset2.",
            "VernacEndSegment",
            "c3ca65d693d7311533a4e5d4e2fe7af4b974fe88"
        ],
        [
            "Section BigFsetDep.",
            "VernacBeginSection",
            "3c39b59ee7125ddc6f663137e84be4e7a1748b1d"
        ],
        [
            "Variables (R : Type) (idx : R) (op : Monoid.com_law idx) (I : choiceType) (J : choiceType) (K : choiceType).",
            "VernacAssumption",
            "14b0766d84fca7a5f12580ee2370ac5c074016b7"
        ],
        [
            "Lemma pair_big_dep_cond (A : {fset I}) (B : I -> {fset J}) (P : pred I) (Q : I -> pred J) (F : I -> J -> R) : \\big[op/idx]_(i <- A | P i) \\big[op/idx]_(j <- B i | Q i j) F i j = \\big[op/idx]_(p <- [fset ((i, j) : I * J) | i in [fset i in A | P i], j in [fset j in B i | Q i j]]) F p.1 p.2.",
            "VernacStartTheoremProof",
            "12b60290ff2319b15353e9bf78499ba073e7f891"
        ],
        [
            "rewrite big_imfset2 //=; last by move=> [??] [??] _ _ /= [-> ->].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite big_fset /=; apply: eq_bigr => i _; rewrite big_fset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End BigFsetDep.",
            "VernacEndSegment",
            "588a74f4bda70a13a2885b6048be25042e3bb08b"
        ],
        [
            "Section BigComImfset.",
            "VernacBeginSection",
            "03c7b87e17e1e6abbb599db16876ef23c2f7ce51"
        ],
        [
            "Variables (R : Type) (idx : R) (op : Monoid.com_law idx) (I : choiceType) (J : choiceType) (K : choiceType).",
            "VernacAssumption",
            "14b0766d84fca7a5f12580ee2370ac5c074016b7"
        ],
        [
            "Lemma partition_big_imfset (h : I -> J) (A : {fset I}) (F : I -> R) : \\big[op/idx]_(i <- A) F i = \\big[op/idx]_(j <- [fset h x | x in A]) \\big[op/idx]_(i <- A | h i == j) F i.",
            "VernacStartTheoremProof",
            "aebec20051c48d49eaa8e6845daad7b4f97424df"
        ],
        [
            "transitivity (\\big[op/idx]_(i <- [fset (h i, i) | i in A]) F i.2).",
            "VernacExtend",
            "0864f2f9e12ecf873dad7e6c718a02b58d8417cf"
        ],
        [
            "by rewrite eq_big_imfset ?big_map// => i j ? ? [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "transitivity (\\big[op/idx]_(i <- [fset ij | ij in [seq (i1, i2) | i1 <- [fset h x | x in A], i2 <- A]]) if h i.2 == i.1 then F i.2 else idx).",
            "VernacExtend",
            "4c99afa74da2c828a93a0ef2ad2d12532c251c09"
        ],
        [
            "rewrite -big_mkcond; apply: eq_fbigl_cond; move=> x; rewrite !inE/= andbT.",
            "VernacExtend",
            "f3d739df9823dee193a7da374fc8e217c19508ac"
        ],
        [
            "apply/imfsetP/idP => [[i /= iA -> /=]|].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite eqxx andbT; apply/allpairsP; exists (h i, i) => /=.",
            "VernacExtend",
            "0288f65064e83af8559a49f90a2eba4421e03fd4"
        ],
        [
            "by rewrite in_imfset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=> /andP[/allpairsP[[/= j i] [/imfsetP[/=a aA ->] iA ->/= /eqP<-]]]; exists i.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite eq_big_imfset //= big_map undup_id.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite big_allpairs; apply: eq_bigr => i /= _; rewrite -big_mkcond.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite allpairs_uniq => //= -[j0 i0] [j1 i1] /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End BigComImfset.",
            "VernacEndSegment",
            "a838ec55e0079f7131456c933df777f7fe5abc10"
        ],
        [
            "Notation \"\\bigcup_ ( i <- r | P ) F\" := (\\big[@fsetU _/fset0]_(i <- r | P%fset) F%fset) : fset_scope.",
            "VernacNotation",
            "8a96f3ebd50b8013f5aa0716f0936507562a9c2f"
        ],
        [
            "Notation \"\\bigcup_ ( i <- r ) F\" := (\\big[@fsetU _/fset0]_(i <- r) F%fset) : fset_scope.",
            "VernacNotation",
            "8e84897be2f451ba248fd4ab3b84e21c61f87234"
        ],
        [
            "Notation \"\\bigcup_ ( i | P ) F\" := (\\big[@fsetU _/fset0]_(i | P) F%fset) : fset_scope.",
            "VernacNotation",
            "840f4f6f77f64ea7f510ce9a3a7c84c544d7d2d9"
        ],
        [
            "Notation \"\\bigcup_ ( i 'in' A | P ) F\" := (\\big[@fsetU _/fset0]_(i in A | P) F%fset) : fset_scope.",
            "VernacNotation",
            "ffb5de0077aea9208566bdb30369e9fccfc8c13a"
        ],
        [
            "Notation \"\\bigcup_ ( i 'in' A ) F\" := (\\big[@fsetU _/fset0]_(i in A) F%fset) : fset_scope.",
            "VernacNotation",
            "ad77b2f2e4d7fe7ded5dacadb8f47eb9680fb5c3"
        ],
        [
            "Section FSetMonoids.",
            "VernacBeginSection",
            "ae690d6eaf09899c2501cd9afdbb1808800779b6"
        ],
        [
            "Import Monoid.",
            "VernacImport",
            "945d0fabc47ba59d12a2e0a6ed64b9e2553c957e"
        ],
        [
            "Variable (T : choiceType).",
            "VernacAssumption",
            "e5a71f2b7fbe826624aa45de919f05159938a9ea"
        ],
        [
            "Canonical fsetU_monoid := Law (@fsetUA T) (@fset0U T) (@fsetU0 T).",
            "VernacDefinition",
            "0da7624aeb288b2639dbbefe0447b405e62856b0"
        ],
        [
            "Canonical fsetU_comoid := ComLaw (@fsetUC T).",
            "VernacDefinition",
            "07d641f7919af31815903b3d573f1f65fafdd7e4"
        ],
        [
            "End FSetMonoids.",
            "VernacEndSegment",
            "c0b19b6961709b6072e9354316062f46d27ada1b"
        ],
        [
            "Section BigFOpsSeq.",
            "VernacBeginSection",
            "e1e6788ab6d38d12774c782a4304050d93fcc916"
        ],
        [
            "Variables (T : choiceType) (I : eqType) (r : seq I).",
            "VernacAssumption",
            "c1e0681d3a1f0ddc55fb0464a8c855952ccd2e40"
        ],
        [
            "Implicit Types (P : pred I) (F : I -> {fset T}).",
            "VernacReserve",
            "d5491628f6b91a622a97fe0f561e4a33f276a35d"
        ],
        [
            "Lemma bigfcup_undup P F : \\bigcup_(i <- undup r | P i) F i = \\bigcup_(i <- r | P i) F i.",
            "VernacStartTheoremProof",
            "a40d9aa6329aa963fce5de1449d7afb69f367511"
        ],
        [
            "by rewrite big_undup => //= A; rewrite fsetUid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bigfcup_sup j P F : j \\in r -> P j -> F j `<=` \\bigcup_(i <- r | P i) F i.",
            "VernacStartTheoremProof",
            "7edd7f8c2401cf28973b124fb670caa653b29f41"
        ],
        [
            "move=> jr Pj; rewrite -bigfcup_undup big_mkcond.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite (bigD1_seq j) ?mem_undup ?undup_uniq ?Pj //= fsubsetUl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bigfcupP x F P : reflect (exists2 i : I, (i \\in r) && P i & x \\in F i) (x \\in \\bigcup_(i <- r | P i) F i).",
            "VernacStartTheoremProof",
            "8788ea4398aaee8012a61525788798df11afe5e2"
        ],
        [
            "apply: (iffP idP) => [|[i /andP[ri Pi]]]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: fsubsetP x; rewrite bigfcup_sup.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite big_seq_cond; elim/big_rec: _ => [|i _ /andP[ri Pi] _ /fsetUP[|//]].",
            "VernacExtend",
            "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
        ],
        [
            "by rewrite in_fset0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by exists i; rewrite ?ri.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bigfcupsP (U : {fset T}) P F : reflect (forall i : I, i \\in r -> P i -> F i `<=` U) (\\bigcup_(i <- r | P i) F i `<=` U).",
            "VernacStartTheoremProof",
            "d8b77e13e23ac46603314e071347a4701558110a"
        ],
        [
            "apply: (iffP idP) => [sFU i ri Pi| sFU].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by apply: fsubset_trans sFU; apply: bigfcup_sup.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply/fsubsetP=> x /bigfcupP[i /andP[ri Pi]]; apply/fsubsetP/sFU.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End BigFOpsSeq.",
            "VernacEndSegment",
            "00dc1c8a290bbf2ce6d1472e2002337c904edf86"
        ],
        [
            "Lemma finSet_rect (T : choiceType) (P : {fset T} -> Type) : P fset0 -> (forall X, (forall Y, Y `<` X -> P Y) -> P X) -> forall X, P X.",
            "VernacStartTheoremProof",
            "baa1b7510d85cf32b584bda23cd1ef3796580da5"
        ],
        [
            "move=> P0 Psub X; move: (leqnn #|` X|); move: (X in Y in _ <= Y) => Y.",
            "VernacExtend",
            "e0ac37cc297cc328730d6b7eadc79537d4e2c654"
        ],
        [
            "elim: #|` _| X => [|n IHn] {Y} X; first by rewrite leqn0 cardfs_eq0 => /eqP->.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move=> Xleq; apply: Psub => Y XsubY; apply: IHn.",
            "VernacExtend",
            "e374b6c583d80c9d8b579c06df7953342f99f751"
        ],
        [
            "by rewrite -ltnS (leq_trans _ Xleq) // fproper_ltn_card.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fset_bounded_coind (T : choiceType) (P : {fset T} -> Type) (U : {fset T}): (forall X, (forall Y, Y `<=` U -> X `<` Y -> P Y) -> P X) -> forall X, X `<=` U -> P X.",
            "VernacStartTheoremProof",
            "66575aef8cdc789abd1bbe3ecd7d7115aeec2d5e"
        ],
        [
            "move=> Psuper X XsubU; rewrite -[X](fsetDK XsubU)//.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "have {XsubU}: (U `\\` X) `<=` U by rewrite fsubsetDl.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "elim: (_ `\\` X) => {X} [|X IHX] XsubU.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "rewrite fsetD0; apply: Psuper => Y /fsub_proper_trans UY/UY.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite fproperEneq eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: Psuper => Y /fsetDK<-; rewrite fproperD2l ?fsubsetDl //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by move=> /IHX; apply; rewrite fsubsetDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iter_fix T (f : T -> T) x n : f x = x -> iter n f x = x.",
            "VernacStartTheoremProof",
            "4c86d917e063abb3f8887e4ecaa56757512d8ef7"
        ],
        [
            "by move=> fixf; elim: n => //= n ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section SetFixpoint.",
            "VernacBeginSection",
            "3dd09e361ac62e23f3b4f54ab28809e0d03ee7d1"
        ],
        [
            "Section Least.",
            "VernacBeginSection",
            "892a53e0d120273b0ca38b48cf6e96cc7b8e02c6"
        ],
        [
            "Variables (T : finType) (F : {set T} -> {set T}).",
            "VernacAssumption",
            "bed0a28833dfa14d91253d8e8e7bdcc33aba7ddd"
        ],
        [
            "Hypothesis (F_mono : {homo F : X Y / X \\subset Y}).",
            "VernacAssumption",
            "a49678ebaeb67c1dfb2fd934b8a5c30544cd5a9c"
        ],
        [
            "Let n := #|T|.",
            "VernacDefinition",
            "c09187c99f86c94b0dcff8f785986cd7887caf9a"
        ],
        [
            "Notation iterF := (fun i => iter i F set0).",
            "VernacSyntacticDefinition",
            "85cc9525ba00c45a1d5bb4a9dd613205b543ab50"
        ],
        [
            "Lemma set_iterF_sub i : iterF i \\subset iterF i.+1.",
            "VernacStartTheoremProof",
            "db2c54bb0255298ac2049940f187edfbd527085c"
        ],
        [
            "by elim: i => [| i IHi]; rewrite /= ?sub0set ?F_mono.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set_iterF_mono : {homo iterF : i j / i <= j >-> i \\subset j}.",
            "VernacStartTheoremProof",
            "13fa637fd776b5620c4fe27f3a15e315b0d8758b"
        ],
        [
            "by apply: homo_leq => //[???|]; [apply: subset_trans|apply: set_iterF_sub].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition set_fix := iterF n.",
            "VernacDefinition",
            "d39456759a3fbc31d4e2aad51b26e0cc853b9f59"
        ],
        [
            "Lemma set_fixK : F set_fix = set_fix.",
            "VernacStartTheoremProof",
            "647d339c999df437cc6138a4009d0e2625c7d5ed"
        ],
        [
            "suff /'exists_eqP[x /= e]: [exists k : 'I_n.+1, iterF k == iterF k.+1].",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "by rewrite /set_fix -(subnK (leq_ord x)) iter_add iter_fix.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: contraT; rewrite negb_exists => /forallP /(_ (Ordinal _)) /= neq_iter.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "suff iter_big k : k <= n.+1 -> k <= #|iter k F set0|.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "by have := iter_big _ (leqnn _); rewrite ltnNge max_card.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: k => [|k IHk] k_lt //=; apply: (leq_ltn_trans (IHk (ltnW k_lt))).",
            "VernacExtend",
            "3b8f03a720bb925b016fe471cb11696669670c37"
        ],
        [
            "by rewrite proper_card// properEneq// set_iterF_sub neq_iter.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve set_fixK.",
            "VernacHints",
            "b29d590bdb6c72e6cb45817095fe3eb9ab0c11b7"
        ],
        [
            "Lemma set_fixKn k : iter k F set_fix = set_fix.",
            "VernacStartTheoremProof",
            "a504e589fded66bfe13a5aff5c7b2376175f5665"
        ],
        [
            "by rewrite iter_fix.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iter_sub_fix k : iterF k \\subset set_fix.",
            "VernacStartTheoremProof",
            "6b220bac4c050ed49fe5a79a22cac05e6b87f094"
        ],
        [
            "have [/set_iterF_mono//|/ltnW/subnK<-] := leqP k n; by rewrite iter_add set_fixKn.",
            "VernacExtend",
            "cccfb1bf1ad16c29c01cb81c89290714e430c436"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fix_order_proof x : x \\in set_fix -> exists n, x \\in iterF n.",
            "VernacStartTheoremProof",
            "67c5716cb20afafa8ac0735e15c0f0eed286b0be"
        ],
        [
            "by move=> x_fix; exists n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition fix_order (x : T) := if (x \\in set_fix) =P true isn't ReflectT x_fix then 0 else (ex_minn (fix_order_proof x_fix)).",
            "VernacDefinition",
            "61b0ddb7d4eba861da321d0c630e82588231ec3f"
        ],
        [
            "Lemma fix_order_le_max (x : T) : fix_order x <= n.",
            "VernacStartTheoremProof",
            "a745c67c7e708f521b4982fc7d1f1d82ac2985d1"
        ],
        [
            "rewrite /fix_order; case: eqP => //= x_in.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by case: ex_minnP => //= ??; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_iter_fix_orderE (x : T) : (x \\in iterF (fix_order x)) = (x \\in set_fix).",
            "VernacStartTheoremProof",
            "94b01a3b7cc91e483b831c9c2623b1277862548c"
        ],
        [
            "rewrite /fix_order; case: eqP; last by move=>/negP/negPf->; rewrite inE.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move=> x_in; case: ex_minnP => m ->; rewrite x_in.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fix_order_gt0 (x : T) : (fix_order x > 0) = (x \\in set_fix).",
            "VernacStartTheoremProof",
            "7e48ae778a309d20516ec8218f582ab2dffc1c0f"
        ],
        [
            "rewrite /fix_order; case: eqP => [x_in|/negP/negPf->//].",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by rewrite x_in; case: ex_minnP => -[|m]; rewrite ?inE//= => _; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fix_order_eq0 (x : T) : (fix_order x == 0) = (x \\notin set_fix).",
            "VernacStartTheoremProof",
            "b38f42b55d1ea151937ac3668f28d6c2f898cfa2"
        ],
        [
            "by rewrite -fix_order_gt0 -ltnNge ltnS leqn0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_iter_fixE (x : T) k : (x \\in iterF k) = (0 < fix_order x <= k).",
            "VernacStartTheoremProof",
            "37df2b662203b5a1cbe504e07d161a73b6572b17"
        ],
        [
            "rewrite /fix_order; case: eqP => //= [x_in|/negP xNin]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: contraNF xNin; apply/subsetP/iter_sub_fix.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: ex_minnP => -[|m]; rewrite ?inE// => xm mP.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "by apply/idP/idP=> [/mP//|lt_mk]; apply: subsetP xm; apply: set_iterF_mono.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_iter (x : T) k : x \\in set_fix -> fix_order x <= k -> x \\in iterF k.",
            "VernacStartTheoremProof",
            "44ff8dd68d7f468c4348959ee0c3e95441380648"
        ],
        [
            "by move=> x_in xk; rewrite in_iter_fixE fix_order_gt0 x_in xk.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma notin_iter (x : T) k : k < fix_order x -> x \\notin iterF k.",
            "VernacStartTheoremProof",
            "94ca33ed1f5fc4aedf51a55e5ea19c190389b52e"
        ],
        [
            "by move=> k_le; rewrite in_iter_fixE negb_and orbC -ltnNge k_le.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fix_order_small x k : x \\in iterF k -> fix_order x <= k.",
            "VernacStartTheoremProof",
            "67fac09e3d82fb543149f0f6e3b5bfdc8d4e6b73"
        ],
        [
            "by rewrite in_iter_fixE => /andP[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fix_order_big x k : x \\in set_fix -> x \\notin iterF k -> fix_order x > k.",
            "VernacStartTheoremProof",
            "3bf223504be758bfa6d66c356490e21905f0f903"
        ],
        [
            "by move=> x_in; rewrite in_iter_fixE fix_order_gt0 x_in /= -ltnNge.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma le_fix_order (x y : T) : y \\in iterF (fix_order x) -> fix_order y <= fix_order x.",
            "VernacStartTheoremProof",
            "8bb2d4f55583d039d436b265cbbaf24b575df83a"
        ],
        [
            "exact: fix_order_small.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Least.",
            "VernacEndSegment",
            "070f874f2b186b7f5398f7b8890f52ae9b400af2"
        ],
        [
            "Section Greatest.",
            "VernacBeginSection",
            "5bd0cc42ed8d74d2e3a14e83cfce03b4a84378fd"
        ],
        [
            "Variables (T : finType) (F : {set T} -> {set T}).",
            "VernacAssumption",
            "bed0a28833dfa14d91253d8e8e7bdcc33aba7ddd"
        ],
        [
            "Hypothesis (F_mono : {homo F : X Y / X \\subset Y}).",
            "VernacAssumption",
            "a49678ebaeb67c1dfb2fd934b8a5c30544cd5a9c"
        ],
        [
            "Notation n := #|T|.",
            "VernacSyntacticDefinition",
            "8cabc762f258637fa1a7c37ef84b8319fb0100f8"
        ],
        [
            "Definition funsetC X := ~: (F (~: X)).",
            "VernacDefinition",
            "56c36c2a66ff838acff76f271fa5db0682d39287"
        ],
        [
            "Notation G := funsetC.",
            "VernacSyntacticDefinition",
            "630243723df95f345618411f6e18c931ee3137ed"
        ],
        [
            "Lemma funsetC_mono : {homo G : X Y / X \\subset Y}.",
            "VernacStartTheoremProof",
            "0617482facdccb4edb13c70c1ce1cf02ae21c295"
        ],
        [
            "by move=> *; rewrite subCset setCK F_mono// subCset setCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve funsetC_mono.",
            "VernacHints",
            "51c67f81c6396bd6246eda9553d2b097544fe830"
        ],
        [
            "Definition set_cofix := ~: set_fix G.",
            "VernacDefinition",
            "243cafc6d5ebb5062738d4db278772268877fa9b"
        ],
        [
            "Lemma set_cofixK : F set_cofix = set_cofix.",
            "VernacStartTheoremProof",
            "6690aa984e5f17d185f125ec58642ae97b606764"
        ],
        [
            "by rewrite /set_cofix -[in RHS]set_fixK ?setCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Greatest.",
            "VernacEndSegment",
            "906a8960223b8ae3b22fbb7c8dff66e6bbd08ac6"
        ],
        [
            "End SetFixpoint.",
            "VernacEndSegment",
            "15b57be02639903895311a1a9952fed6273f4b72"
        ],
        [
            "Section Fixpoints.",
            "VernacBeginSection",
            "7612265bf23e8858984c074740bd5bad2cf006fa"
        ],
        [
            "Variables (T : choiceType) (U : {fset T}).",
            "VernacAssumption",
            "f7267aa171fed595301f0c8f8b5e256f71e138ca"
        ],
        [
            "Definition sub_fun (F : {fset T} -> {fset T}) (X : {set U}) : {set U} := fsub U (F [fsetval x in X]).",
            "VernacDefinition",
            "77f4fdec2eb8bb471abd4b912b53abae45156586"
        ],
        [
            "Lemma fset_fsub X : X `<=` U -> [fsetval x in fsub U X] = X.",
            "VernacStartTheoremProof",
            "8fa9d969f97aeeae16903a34dc102c6d1600e38a"
        ],
        [
            "move=> XU; apply/fsetP => x; apply/in_fset_valP/idP.",
            "VernacExtend",
            "e374b6c583d80c9d8b579c06df7953342f99f751"
        ],
        [
            "by move=> [xU/=]; rewrite in_fsub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=> xX; exists (fsubsetP XU x xX); rewrite /= in_fsub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variable (F : {fset T} -> {fset T}).",
            "VernacAssumption",
            "17c4f254ea4569b9496c13e6d2361c23046bf90e"
        ],
        [
            "Hypothesis (F_mono : {homo F : X Y / X `<=` Y}) (F_bound : {homo F : X / X `<=` U}).",
            "VernacAssumption",
            "39bee418413b4e5fb22ceed0a6a9ea2726084b7f"
        ],
        [
            "Notation Fsub := (sub_fun F).",
            "VernacSyntacticDefinition",
            "e274465e5a519b4c7b48024863b35bbcd899c2fe"
        ],
        [
            "Notation iterF := (fun i => iter i F fset0).",
            "VernacSyntacticDefinition",
            "225f0096301b0107dfa646b5594e62cda8dc9ad8"
        ],
        [
            "Lemma Fsub_mono : {homo Fsub : X Y / X \\subset Y}.",
            "VernacStartTheoremProof",
            "ef251361d42d4f8799b7916f04e8b8930fda9e1b"
        ],
        [
            "move=> X Y subXY; apply: subset_fsub; last by apply/F_bound/fset_sub_val.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/F_mono/subset_imfset/subsetP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve Fsub_mono.",
            "VernacHints",
            "d5662a307e8b3749239d6beff81eb84928398903"
        ],
        [
            "Definition fset_fix := [fsetval x in set_fix Fsub].",
            "VernacDefinition",
            "c9ffab4bf0867986e7a996df902d66e15f416f2a"
        ],
        [
            "Lemma fset_iterFE i : iterF i = [fsetval x in iter i Fsub set0].",
            "VernacStartTheoremProof",
            "868aa481562eed3204a8dd7f33603812c6034e17"
        ],
        [
            "elim: i => [|i /= -> /=]; last by rewrite fset_fsub // F_bound//= fset_sub_val.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/fsetP=> x; rewrite in_fset_val /=; case: insub=> //= ?; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fset_iterF_sub i : iterF i `<=` U.",
            "VernacStartTheoremProof",
            "405dd91b46b695885487430da81289e20ccb4a75"
        ],
        [
            "by rewrite /= fset_iterFE fset_sub_val.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fset_fixK : F fset_fix = fset_fix.",
            "VernacStartTheoremProof",
            "4cf502317e9a6d4d74840ed441c6e24f138ee755"
        ],
        [
            "by rewrite /fset_fix -[in RHS]set_fixK// fset_fsub// F_bound//= fset_sub_val.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve fset_fixK.",
            "VernacHints",
            "5c6627ea1b167cacc2ff0de49420297a585c3723"
        ],
        [
            "Lemma fset_fixKn k : iter k F fset_fix = fset_fix.",
            "VernacStartTheoremProof",
            "a4d91626c586154b716a07aeff28627e05a2e7a5"
        ],
        [
            "by rewrite iter_fix.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iter_sub_ffix k : iterF k `<=` fset_fix.",
            "VernacStartTheoremProof",
            "249da4025f6384faf6b4ac6a6a9f70dcd7b99f51"
        ],
        [
            "by rewrite /fset_fix !fset_iterFE; apply/subset_imfset/subsetP/iter_sub_fix.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ffix_order (x : T) := if x \\in U =P true is ReflectT xU then fix_order Fsub [` xU] else 0.",
            "VernacDefinition",
            "8bbedc81c6bbafbaec1c8128051c1eef2f055de3"
        ],
        [
            "Lemma ffix_order_le_max (x : T) : ffix_order x <= #|` U|.",
            "VernacStartTheoremProof",
            "3cc678bbfcd1ce5cbe96f4a824bc6933a07c9e57"
        ],
        [
            "by rewrite /ffix_order; case: eqP => //= x_in; rewrite cardfE fix_order_le_max.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_iter_ffix_orderE (x : T) : (x \\in iterF (ffix_order x)) = (x \\in fset_fix).",
            "VernacStartTheoremProof",
            "c387cd3a13e9053724dc48a73220e0c0e6044ee6"
        ],
        [
            "rewrite /ffix_order; case: eqP => [xU|/negP xNU]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !inE /fset_fix in_fset_valF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite fset_iterFE !in_fset_valT /= in_iter_fix_orderE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ffix_order_gt0 (x : T) : (ffix_order x > 0) = (x \\in fset_fix).",
            "VernacStartTheoremProof",
            "f5eea30012b10ffe36c82225a4e99ca7cb9b1818"
        ],
        [
            "rewrite /ffix_order; case: eqP => [xU|/negP xNU]; last by rewrite in_fset_valF.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite fix_order_gt0 in_fset_valT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ffix_order_eq0 (x : T) : (ffix_order x == 0) = (x \\notin fset_fix).",
            "VernacStartTheoremProof",
            "1859b32df114d5c4177c39fbabf5ff8e7b33c38e"
        ],
        [
            "by rewrite -ffix_order_gt0 -ltnNge ltnS leqn0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_iter_ffixE (x : T) k : (x \\in iterF k) = (0 < ffix_order x <= k).",
            "VernacStartTheoremProof",
            "153fc5806e0ae57a8d04865a9490404a8de0e440"
        ],
        [
            "rewrite /ffix_order fset_iterFE; case: eqP => [xU|/negP xNU]; by [rewrite in_fset_valF|rewrite in_fset_valT /= in_iter_fixE].",
            "VernacExtend",
            "edc181ae1523612867809723d78a66d7ba4793ea"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_iter_ffix (x : T) k : x \\in fset_fix -> ffix_order x <= k -> x \\in iterF k.",
            "VernacStartTheoremProof",
            "ab0265135d0cdfe87556461071c6a3648f713fdd"
        ],
        [
            "by move=> x_in xk; rewrite in_iter_ffixE ffix_order_gt0 x_in xk.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma notin_iter_ffix (x : T) k : k < ffix_order x -> x \\notin iterF k.",
            "VernacStartTheoremProof",
            "35e35e0f182f82c023d5f8f3a872cae912e382af"
        ],
        [
            "by move=> k_le; rewrite in_iter_ffixE negb_and orbC -ltnNge k_le.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ffix_order_small x k : x \\in iterF k -> ffix_order x <= k.",
            "VernacStartTheoremProof",
            "9f2c6161f21a66f94d8939e7665ab63f352cdf0c"
        ],
        [
            "by rewrite in_iter_ffixE => /andP[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ffix_order_big x k : x \\in fset_fix -> x \\notin iterF k -> ffix_order x > k.",
            "VernacStartTheoremProof",
            "b9f1a1bb23e480decb8362b5af9a0035c15b78d0"
        ],
        [
            "by move=> x_in; rewrite in_iter_ffixE ffix_order_gt0 x_in -ltnNge.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma le_ffix_order (x y : T) : y \\in iterF (ffix_order x) -> ffix_order y <= ffix_order x.",
            "VernacStartTheoremProof",
            "1b44cbe7e5cd04457b47dbff6ec0341f364d76e6"
        ],
        [
            "exact: ffix_order_small.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Fixpoints.",
            "VernacEndSegment",
            "aa8fd61c7e707910123cafa56acbbdc19b2bdc92"
        ],
        [
            "Section DefMap.",
            "VernacBeginSection",
            "a8782ed54ba25c3bc94fb3f79115a7272ade114d"
        ],
        [
            "Variables (K : choiceType) (V : Type).",
            "VernacAssumption",
            "18ca9a68a6eda75d78dbb99406675c5df139b315"
        ],
        [
            "Record finMap : Type := FinMap { domf : {fset K}; ffun_of_fmap :> {ffun domf -> V} }.",
            "VernacInductive",
            "f0c24aca3d589b020717342b6e7862f99b53f084"
        ],
        [
            "Definition finmap_of (_ : phant (K -> V)) := finMap.",
            "VernacDefinition",
            "7f21e39c467f00a7df2b6faafb164a1ae5b8027e"
        ],
        [
            "Let T_ (domf : {fset K}) := {ffun domf -> V}.",
            "VernacDefinition",
            "9b2d06bc501dbf41380e225cd719dd50a5beef1a"
        ],
        [
            "Local Notation finMap' := {domf : _ & T_ domf}.",
            "VernacSyntacticDefinition",
            "bd0fbeb23bb1f3633188be35008c0bb59f74d5f1"
        ],
        [
            "End DefMap.",
            "VernacEndSegment",
            "fc1a6db39242f104b452ef3746309143602dc37b"
        ],
        [
            "Notation \"{fmap T }\" := (@finmap_of _ _ (Phant T)) : type_scope.",
            "VernacNotation",
            "fbcc458fc4acabdc02fbdddde9bf907263dabed8"
        ],
        [
            "Definition pred_of_finmap (K : choiceType) (V : Type) (f : {fmap K -> V}) : pred K := mem (domf f).",
            "VernacDefinition",
            "de14be0cb468436f2b12b4032d5833fb71d3c98b"
        ],
        [
            "Canonical finMapPredType (K : choiceType) (V : Type) := Eval hnf in mkPredType (@pred_of_finmap K V).",
            "VernacDefinition",
            "9314a2f3ebf0fc52442fbbb427728f18de9dd05e"
        ],
        [
            "Delimit Scope fmap_scope with fmap.",
            "VernacDelimiters",
            "0020348a620134321cb8173cc97aeb504b49a0eb"
        ],
        [
            "Local Open Scope fmap_scope.",
            "VernacOpenCloseScope",
            "6931f8da750d01452bc1d5b8d70d3b9bd5f8d313"
        ],
        [
            "Notation \"f .[ kf ]\" := (f [` kf]) : fmap_scope.",
            "VernacNotation",
            "310a7743d97883d9124b08b3dd2cd1110c26a713"
        ],
        [
            "Arguments ffun_of_fmap : simpl never.",
            "VernacArguments",
            "9d83d10b0318e2e37a91740b39c54e4845e63fae"
        ],
        [
            "Notation \"[ 'fmap' x : aT => F ]\" := (FinMap [ffun x : aT => F]) (at level 0, x ident, only parsing) : fun_scope.",
            "VernacNotation",
            "17b9ba423f3aff1ab6c96e633f885f56ae05be5d"
        ],
        [
            "Notation \"[ 'fmap' : aT => F ]\" := (FinMap [ffun : aT => F]) (at level 0, only parsing) : fun_scope.",
            "VernacNotation",
            "a73df4dcaea56aa14421be3ad194981a88393da8"
        ],
        [
            "Notation \"[ 'fmap' x => F ]\" := [fmap x : _ => F] (at level 0, x ident, format \"[ 'fmap' x => F ]\") : fun_scope.",
            "VernacNotation",
            "f0e7ed76cb0e4f3d3dd55a5f47d76ce35c341eed"
        ],
        [
            "Notation \"[ 'fmap' => F ]\" := [fmap: _ => F] (at level 0, format \"[ 'fmap' => F ]\") : fun_scope.",
            "VernacNotation",
            "a142401de7c8448098df89911e578f64c2929996"
        ],
        [
            "Canonical finmap_of_finfun (K : choiceType) V (A : {fset K}) (f : {ffun A -> V}) := FinMap f.",
            "VernacDefinition",
            "3b592a5f3585be9c10154cea4302dfc8fd26ba8f"
        ],
        [
            "Arguments finmap_of_finfun /.",
            "VernacArguments",
            "a8610e86e06e57b371f19a61aed5efd0ad627556"
        ],
        [
            "Arguments ffun_of_fmap : simpl nomatch.",
            "VernacArguments",
            "0898ad27b9cafcc511edc2503fc173c749a51fab"
        ],
        [
            "Section OpsMap.",
            "VernacBeginSection",
            "ab204b9bf7b522d6cb4818c47cc95b45a6549812"
        ],
        [
            "Variables (K : choiceType).",
            "VernacAssumption",
            "f12791760ea7a097b3e48c57d86546a92346fc64"
        ],
        [
            "Definition fmap0 V : {fmap K -> V} := FinMap (ffun0 _ (cardfT0 K)).",
            "VernacDefinition",
            "4469482beca781b2134eef75486f39570db44b24"
        ],
        [
            "Definition fnd V (A : {fset K}) (f : {ffun A -> V}) (k : K) := omap f (insub k).",
            "VernacDefinition",
            "8424fedf3dd4b69260b597f158303896dab3792e"
        ],
        [
            "Inductive fnd_spec V (A : {fset K}) (f : {ffun A -> V}) k : bool -> option A -> option V -> Type := | FndIn (kf : k \\in A) : fnd_spec f k true (some [` kf]) (some (f.[kf])) | FndOut (kNf : k \\notin A) : fnd_spec f k false None None.",
            "VernacInductive",
            "c42eebb18de1681cd83104a80dddc68013f93f17"
        ],
        [
            "Definition setf V (f : {fmap K -> V}) (k0 : K) (v0 : V) : {fmap K -> V} := [fmap k : k0 |` domf f => if val k == k0 then v0 else odflt v0 (fnd f (val k))].",
            "VernacDefinition",
            "6615340f18e777b27fbe5631b108170b19a408c9"
        ],
        [
            "End OpsMap.",
            "VernacEndSegment",
            "e78841c5dd44ecbfb0c9c757bce80178159812ce"
        ],
        [
            "Prenex Implicits fnd setf.",
            "VernacExtend",
            "39b3c74f38dd008eafc0c2c446eb412b09487820"
        ],
        [
            "Arguments fmap0 {K V}.",
            "VernacArguments",
            "2390df501aaaf4e5c2e315fe677ffa40df47bad0"
        ],
        [
            "Arguments setf : simpl never.",
            "VernacArguments",
            "54df1f220b9be7d66efea763ed6c9e513016b4aa"
        ],
        [
            "Arguments fnd : simpl never.",
            "VernacArguments",
            "5c33fd1ee014c7936cffde97d216df11c7d43779"
        ],
        [
            "Notation \"[ 'fmap' 'of' T ]\" := (fmap0 : {fmap T}) (only parsing) : fmap_scope.",
            "VernacNotation",
            "40f085100414089e9e2c74c2627307fa55fb9711"
        ],
        [
            "Notation \"[fmap]\" := fmap0 : fmap_scope.",
            "VernacNotation",
            "3f9132b056176516a05af2a8742607bec2debddd"
        ],
        [
            "Notation \"x .[ k <- v ]\" := (setf x k v) : fmap_scope.",
            "VernacNotation",
            "0c1307f571462eee016b34f71c295bc1add932fc"
        ],
        [
            "Notation \"f .[? k ]\" := (fnd f k) : fmap_scope.",
            "VernacNotation",
            "b139976bdded9efcd64e6455614317eff3d8351c"
        ],
        [
            "Section FinMapCanonicals.",
            "VernacBeginSection",
            "d3b5f1ebc407889d379837eaf09a47d5e16e482e"
        ],
        [
            "Variable K : choiceType.",
            "VernacAssumption",
            "f12791760ea7a097b3e48c57d86546a92346fc64"
        ],
        [
            "Let finMap_on (V : Type) (d : {fset K}) := {ffun d -> V}.",
            "VernacDefinition",
            "35254148ec094658a0145faac497fe843bed12b5"
        ],
        [
            "Local Notation finMap_ V := {d : _ & finMap_on V d}.",
            "VernacSyntacticDefinition",
            "ba275666c6aee74ec6d52aa420e7315eae14ec8a"
        ],
        [
            "Definition finMap_encode V (f : {fmap K -> V}) := Tagged (finMap_on V) (ffun_of_fmap f).",
            "VernacDefinition",
            "434af17df2d4533b4c1dd9e6c2c44d1b5d1daadf"
        ],
        [
            "Definition finMap_decode V (f : finMap_ V) := FinMap (tagged f).",
            "VernacDefinition",
            "c0161c1649bf22fac38947b7b5bc1fd782299026"
        ],
        [
            "Lemma finMap_codeK V : cancel (@finMap_encode V) (@finMap_decode V).",
            "VernacStartTheoremProof",
            "a62621429dc1eb305396190e5c88c2e3b137a816"
        ],
        [
            "by case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section FinMapEqType.",
            "VernacBeginSection",
            "853957eb551f315fc11671f4ea6a66f923d0af1c"
        ],
        [
            "Variable V : eqType.",
            "VernacAssumption",
            "8b0873a92abcff3be48569e47b9cfc06553b6d90"
        ],
        [
            "Definition finMap_eqMixin := CanEqMixin (@finMap_codeK V).",
            "VernacDefinition",
            "9f9f03278bddc1c9b1027f957a6338975a79879f"
        ],
        [
            "Canonical finMap_eqType := EqType {fmap K -> V} finMap_eqMixin.",
            "VernacDefinition",
            "e3abeb1fa040fd9f01b9c7134491b851e7ab932e"
        ],
        [
            "End FinMapEqType.",
            "VernacEndSegment",
            "ad62824b94ffe93239b06b3f658e6154b78f61bd"
        ],
        [
            "Section FinMapChoiceType.",
            "VernacBeginSection",
            "2a520077be200675d5a3360c874ac265594b228a"
        ],
        [
            "Variable V : choiceType.",
            "VernacAssumption",
            "c8ca4685988b5230bc045e906e3fa587d9bef4b2"
        ],
        [
            "Definition finMap_choiceMixin := CanChoiceMixin (@finMap_codeK V).",
            "VernacDefinition",
            "1208b5e1df48685c6523a7a915cc1bc1e914a456"
        ],
        [
            "Canonical finMap_choiceType := ChoiceType {fmap K -> V} finMap_choiceMixin.",
            "VernacDefinition",
            "aa01c5ddcb980732f449b0b1e76b7e9cc29d7823"
        ],
        [
            "End FinMapChoiceType.",
            "VernacEndSegment",
            "db78c77780fc1ec4a7a05931eb42d55c505312d5"
        ],
        [
            "End FinMapCanonicals.",
            "VernacEndSegment",
            "726661ee8e06d6c09253b2bba510ac56c38e48dd"
        ],
        [
            "Section FinMapTheory.",
            "VernacBeginSection",
            "2b637b7f3a7590786d6cf0bdad8a0d1358e05b22"
        ],
        [
            "Variables (K : choiceType).",
            "VernacAssumption",
            "f12791760ea7a097b3e48c57d86546a92346fc64"
        ],
        [
            "Lemma fndP V (f : {fmap K -> V}) k : fnd_spec f k (k \\in domf f) (insub k) (f.[? k]).",
            "VernacStartTheoremProof",
            "46715a2ff5eb82d177ab64ab1d6c8fd399f7ddae"
        ],
        [
            "rewrite /fnd; case: insubP=> [[k' k'f] _ {k} <- /=|kNf].",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by rewrite k'f; constructor.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite (negPf kNf); constructor.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fndSome V (f : {fmap K -> V}) (k : K) : f.[? k] = (k \\in f) :> bool.",
            "VernacStartTheoremProof",
            "d94cd1df6010cd41b46f63531d140c650ef46872"
        ],
        [
            "by case: fndP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma not_fnd V (f : {fmap K -> V}) (k : K) : k \\notin f -> f.[? k] = None.",
            "VernacStartTheoremProof",
            "7f97b52ad3f3450b253fa06ced562a35a5f92af8"
        ],
        [
            "by case: fndP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma getfE V (f : {fmap K -> V}) (k : domf f) (kf : val k \\in domf f) : f.[kf] = f k :> V.",
            "VernacStartTheoremProof",
            "cbb93cc7f61f8e4c56312b0c9ae815d3834c63b8"
        ],
        [
            "by congr (_ _); apply: val_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_getf V (f : {fmap K -> V}) k (kf kf' : k \\in domf f) : f.[kf] = f.[kf'] :> V.",
            "VernacStartTheoremProof",
            "714be175b832e61436e339d1261a8abe0149b68e"
        ],
        [
            "by rewrite (@getfE _ _ [` kf']).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Some_fnd V (f : {fmap K -> V}) (k : domf f) : Some (f k) = f.[? val k].",
            "VernacStartTheoremProof",
            "08dfbf738206d1828382baeb334ad48044b168d5"
        ],
        [
            "by case: fndP (valP k) => // ? _; rewrite getfE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_fnd V (f : {fmap K -> V}) (k : K) (kf : k \\in domf f) : f.[? k] = Some f.[kf].",
            "VernacStartTheoremProof",
            "a9bbe16122e9958c6575896c60f8f8e1e2dd759a"
        ],
        [
            "by rewrite Some_fnd.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fnd_if V (cond : bool) (f g : {fmap K -> V}) (k : K) : ((if cond then f else g) : finMap _ _).[? k] = if cond then f.[? k] else g.[? k].",
            "VernacStartTheoremProof",
            "0d0a5a0fd045e0eabfbb9c54815c232e60dff747"
        ],
        [
            "by case: cond.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma getfP V (f g : {fmap K -> V}) : domf f = domf g -> (forall k (kMf : k \\in f) (kMg : k \\in g), f.[kMf] = g.[kMg]) -> f = g.",
            "VernacStartTheoremProof",
            "0dc38de3be7b2a043269aa9cfa673f86290c24f0"
        ],
        [
            "move: f g => [kf f] [kg g] /= eq_kfg; case: _ / eq_kfg in g * => {kg}.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "move=> eq_fg; congr FinMap; apply/ffunP => /= x.",
            "VernacExtend",
            "89de36e5aef0ebd726b6f55b2950d4d03c758898"
        ],
        [
            "by do [rewrite -!getfE; do ?exact: valP] => *.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fmapP V (f g : {fmap K -> V}) : (forall k, f.[? k] = g.[? k]) <-> f = g.",
            "VernacStartTheoremProof",
            "3eb16aa860631eb322f5adfcc4a352110a5b841a"
        ],
        [
            "split=> [fnd_fg|-> //]; apply: getfP => [|k kMf kMg].",
            "VernacExtend",
            "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
        ],
        [
            "by apply/fsetP => x; rewrite -!fndSome fnd_fg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: Some_inj; rewrite !Some_fnd.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fnd_fmap0 V k : ([fmap] : {fmap K -> V}).[? k] = None.",
            "VernacStartTheoremProof",
            "a75f65de0159f785f5454fda9613c0e194f47197"
        ],
        [
            "by rewrite not_fnd // in_fset0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_setf V (f : {fmap K -> V}) (k0 : K) (v0 : V) : f.[k0 <- v0] =i predU1 k0 (mem (domf f)).",
            "VernacStartTheoremProof",
            "75163ccb2a8c7899c86df5c57bb37f316dc424c7"
        ],
        [
            "by move=> k; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dom_setf V (f : {fmap K -> V}) (k0 : K) (v0 : V) : domf (f.[k0 <- v0]) = k0 |` domf f.",
            "VernacStartTheoremProof",
            "ceffb765cd22fe7020a139b05267889cc2774b2b"
        ],
        [
            "by apply/fsetP=> k; rewrite mem_setf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fnd_set_in V (f : {fmap K -> V}) k0 v0 (x : domf f.[k0 <- v0]) : val x != k0 -> val x \\in f.",
            "VernacStartTheoremProof",
            "75a522b3901d19563cb9c529866ce730e5aa05ff"
        ],
        [
            "by have := valP x; rewrite mem_setf inE; case: eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setfK V (f : {fmap K -> V}) k0 v0 (x : domf f.[k0 <- v0]): f.[k0 <- v0] x = if eqVneq (val x) k0 is right xNk0 then f.[fnd_set_in xNk0] else v0.",
            "VernacStartTheoremProof",
            "0d1ee1c5c9bd857d640280780302fd09f0fb57f0"
        ],
        [
            "case: eqVneq => [|xNk0]; rewrite ?ffunE /=; first by move->; rewrite eqxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite (negPf xNk0) in_fnd ?fnd_set_in //= => xf; apply: eq_getf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fnd_set V (f : {fmap K -> V}) k0 v0 k : f.[k0 <- v0].[? k] = if k == k0 then Some v0 else f.[? k].",
            "VernacStartTheoremProof",
            "0f345b0db67ec08c9e00d85f14aaa41bcb9a3c3a"
        ],
        [
            "case: fndP => [ksf|]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite mem_setf inE negb_or => /andP [/negPf ->]; case: fndP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite setfK; case: eqVneq => //= [->|kNk0]; first by rewrite eqxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite Some_fnd (negPf kNk0).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fmap_nil V (f : {fmap K -> V}) : domf f = fset0 -> f = [fmap].",
            "VernacStartTheoremProof",
            "04a09d3bd478ed4e69122990c5aeded06efe2546"
        ],
        [
            "by move=> kf0; apply: getfP => //= k ? kMg; have := kMg; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma getf_set V (f : {fmap K -> V}) (k : K) (v : V) (kf' : k \\in _) : f.[k <- v].[kf'] = v.",
            "VernacStartTheoremProof",
            "8721a94761f400606eb5326e7ca9ba5742ff8eb8"
        ],
        [
            "by apply: Some_inj; rewrite Some_fnd fnd_set eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setf_get V (f : {fmap K -> V}) (k : domf f) : f.[val k <- f k] = f.",
            "VernacStartTheoremProof",
            "c1594bbe0cb21e22493078246ceb1ee503834c77"
        ],
        [
            "by apply/fmapP=> k'; rewrite fnd_set Some_fnd; case: eqP => [->|].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setfNK V (f : {fmap K -> V}) (k k' : K) (v : V) (k'f : k' \\in _) (k'f' : k' \\in _): f.[k <- v].[k'f'] = if k' == k then v else f.[k'f].",
            "VernacStartTheoremProof",
            "978f7bf80e3b3bf9ad159bc5e669345a47695f16"
        ],
        [
            "by apply: Some_inj; rewrite Some_fnd !fnd_set in_fnd; case: ifP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma domf0 V : domf [fmap of K -> V] = fset0.",
            "VernacStartTheoremProof",
            "08e12bb125fbfb9e1501f92ba5a83558aa121a30"
        ],
        [
            "by apply/fsetP => x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FinMapTheory.",
            "VernacEndSegment",
            "2ab414c76a9709fdd0276d448b2dbbc5d446605d"
        ],
        [
            "Section ReduceOp.",
            "VernacBeginSection",
            "6435d9969361b244f906d31205258df4c24e2956"
        ],
        [
            "Variable (K : choiceType) (V : Type).",
            "VernacAssumption",
            "18ca9a68a6eda75d78dbb99406675c5df139b315"
        ],
        [
            "Implicit Types (f : {fmap K -> option V}).",
            "VernacReserve",
            "00f4b664028e930aa2819c2629eac9129f6a7075"
        ],
        [
            "Lemma reducef_subproof f (x : [fsetval x : domf f | f x]) : f (fincl (fset_sub_val _ _) x).",
            "VernacStartTheoremProof",
            "0a837aa2df623d7ef79efdbbf16847a1d3f6ef49"
        ],
        [
            "set y := (y in f y); suff : val y \\in [fsetval x : domf f | f x].",
            "VernacExtend",
            "aafa60d3205e06101f84b37dd84003fb7ee50464"
        ],
        [
            "by rewrite val_in_fset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by suff -> : val y = val x by exact: valP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition reducef f : {fmap K -> V} := [fmap x => oextract (@reducef_subproof f x)].",
            "VernacDefinition",
            "b9e49e77eb00a664a209b7b16efb13552f25ec7f"
        ],
        [
            "Lemma domf_reduce f : domf (reducef f) = [fsetval x : domf f | f x].",
            "VernacStartTheoremProof",
            "47889826ed6f856a3fe628be021dd04e5a290778"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_reducef f k : k \\in reducef f = ojoin f.[? k].",
            "VernacStartTheoremProof",
            "f9104c7eae3e9f0d65228c807ee84f71df5366e0"
        ],
        [
            "rewrite inE; case: fndP => [kf|] /=; first by rewrite in_fset_valT.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: contraNF; apply: (fsubsetP (fset_sub_val _ _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fnd_reducef f k : (reducef f).[? k] = ojoin f.[? k].",
            "VernacStartTheoremProof",
            "9a5d6bc99afaad12cf7703df9bbc4d38a85fb874"
        ],
        [
            "case: fndP => /= [kf|]; last by rewrite mem_reducef; case: ojoin.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite ffunE /= Some_oextract; apply: Some_inj; rewrite Some_fnd.",
            "VernacExtend",
            "fe8f197e86415fc7f0a74eda9d312128b9473eda"
        ],
        [
            "by rewrite Some_ojoin // ojoinT // -mem_reducef.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma get_reducef f k (krf : k \\in reducef f) (kf : k \\in f): Some (reducef f).[krf] = f.[kf].",
            "VernacStartTheoremProof",
            "ad5a66a4dc6ab9edb2def50bb1a5bdc66c5bce48"
        ],
        [
            "by rewrite Some_fnd fnd_reducef in_fnd.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ReduceOp.",
            "VernacEndSegment",
            "39df17db7719ee0768fafbddd6b06b4ddb2e57be"
        ],
        [
            "Arguments reducef : simpl never.",
            "VernacArguments",
            "7e5e0b23423c908691cb167e3d37ff215e33d752"
        ],
        [
            "Section RestrictionOps.",
            "VernacBeginSection",
            "d6f161ad95f39950710c77aabcdd3b5e7d1d9dd9"
        ],
        [
            "Variable (K : choiceType) (V : Type).",
            "VernacAssumption",
            "18ca9a68a6eda75d78dbb99406675c5df139b315"
        ],
        [
            "Implicit Types (f g : {fmap K -> V}).",
            "VernacReserve",
            "81736ea8ccde2552fd7151113938ba75cb8be3a0"
        ],
        [
            "Definition filterf f (P : pred K) : {fmap K -> V} := [fmap x : [fset x in domf f | P x] => f (fincl (fset_sub _ _) x)].",
            "VernacDefinition",
            "d8101eb43d4cf7d241358fbe9f0ef355cf926477"
        ],
        [
            "Definition restrictf f (A : {fset K}) : {fmap K -> V} := filterf f (mem A).",
            "VernacDefinition",
            "3ccece36330efd572130bf62c5ae27631a888c74"
        ],
        [
            "Notation \"x .[& A ]\" := (restrictf x A) : fmap_scope.",
            "VernacNotation",
            "46b937be49d9f74801971d55433f358d810bd73a"
        ],
        [
            "Notation \"x .[\\ A ]\" := (x.[& domf x `\\` A]) : fmap_scope.",
            "VernacNotation",
            "06842610acfb5e84fe4e764e11d3568cfc21f300"
        ],
        [
            "Notation \"x .[~ k ]\" := (x.[\\ [fset k]]) : fmap_scope.",
            "VernacNotation",
            "1b52354b1df4d026c5d5f39615065d1fedce71dc"
        ],
        [
            "Lemma domf_filterf f (P : pred K) : domf (filterf f P) = [fset k in domf f | P k].",
            "VernacStartTheoremProof",
            "798a90d046a16eb55d0fbdce9eae823985de9919"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_filterf f (P : pred K) (k : K) : (k \\in domf (filterf f P)) = (k \\in f) && (P k) :> bool.",
            "VernacStartTheoremProof",
            "13576b81cfd926cbc8e3f56ac6e519278041d3c4"
        ],
        [
            "by rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_restrictf f (A : {fset K}) (k : K) : k \\in f.[& A] = (k \\in A) && (k \\in f) :> bool.",
            "VernacStartTheoremProof",
            "247c04092bee7f0114cfb9c0103b873aee644a47"
        ],
        [
            "by rewrite mem_filterf andbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_remf f (A : {fset K}) (k : K) : k \\in f.[\\ A] = (k \\notin A) && (k \\in f) :> bool.",
            "VernacStartTheoremProof",
            "8ab2a7df6697dc5f42216d495b006f3dd05c63b1"
        ],
        [
            "by rewrite mem_restrictf inE -andbA andbb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_remf1 f (k' k : K) : k \\in f.[~ k'] = (k != k') && (k \\in f) :> bool.",
            "VernacStartTheoremProof",
            "fa6cb0945a7a2f5a0e1d7096314072d57388547e"
        ],
        [
            "by rewrite mem_remf inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma domf_restrict f A : domf f.[& A] = A `&` domf f.",
            "VernacStartTheoremProof",
            "16776151d83e372c5a8f60e7112f4d506c26b3a6"
        ],
        [
            "by apply/fsetP=> k'; rewrite mem_restrictf !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma domf_rem f A : domf f.[\\ A] = domf f `\\` A.",
            "VernacStartTheoremProof",
            "3a0ef80cf158088677b48add4bbe4e50c4bd1b33"
        ],
        [
            "by rewrite domf_restrict fsetIDAC fsetIid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_remfF f (k : K) : k \\in f.[~ k] = false.",
            "VernacStartTheoremProof",
            "5467868c88db12aa9700f55e133a776a4935252a"
        ],
        [
            "by rewrite mem_remf1 eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fnd_filterf f P k : (filterf f P).[? k] = if P k then f.[? k] else None.",
            "VernacStartTheoremProof",
            "441abf19052e28315d4b440ce8b4fccb84e89ab4"
        ],
        [
            "case: fndP => [kff|]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite in_fset => /nandP [/not_fnd->|/negPf-> //]; rewrite if_same.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by have := kff; rewrite in_fset => /andP [kf ->]; rewrite ffunE Some_fnd.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma get_filterf f P k (kff : k \\in filterf f P) (kf : k \\in f) : (filterf f P).[kff] = f.[kf].",
            "VernacStartTheoremProof",
            "1f8784c480a438101bc75a8fb1ae45aa5ab3e68b"
        ],
        [
            "apply: Some_inj; rewrite !Some_fnd /= fnd_filterf.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by move: kff; rewrite !(in_fset, inE) => /andP [? ->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fnd_restrict f A (k : K) : f.[& A].[? k] = if k \\in A then f.[? k] else None.",
            "VernacStartTheoremProof",
            "c9978317a5102bc7842474bcefaff7dc9568e48d"
        ],
        [
            "by rewrite fnd_filterf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fnd_rem f A (k : K) : f.[\\ A].[? k] = if k \\in A then None else f.[? k].",
            "VernacStartTheoremProof",
            "31a0850fe19d0f8e1c5fb0595cca9f4a055d8e09"
        ],
        [
            "rewrite fnd_restrict inE.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case: fndP => ?; rewrite ?(andbT, andbF) //=; case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma restrictf_comp f A B : f.[& A].[& B] = f.[& A `&` B].",
            "VernacStartTheoremProof",
            "39804dbb3c3ed80486a8e75154c09439029a1562"
        ],
        [
            "by apply/fmapP=> k; rewrite !fnd_restrict !inE; do !case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma remf_comp f A B : f.[\\ A].[\\ B] = f.[\\ A `|` B].",
            "VernacStartTheoremProof",
            "61cf8dd5d9efd34f5d36abdb6683fbbdecebca79"
        ],
        [
            "by apply/fmapP=> k; rewrite !fnd_rem inE; do !case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma restrictfT f : f.[& domf f] = f.",
            "VernacStartTheoremProof",
            "1482260fa67b8a0d409ce88f8814f1a27b9cd6e8"
        ],
        [
            "by apply/fmapP=> k; rewrite fnd_restrict; case: fndP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma restrictf0 f : f.[& fset0] = [fmap].",
            "VernacStartTheoremProof",
            "3c8ac12a93f8ad42a989eda47744bea59845b050"
        ],
        [
            "by apply/fmapP => k; rewrite fnd_restrict !(inE, not_fnd).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma remf0 f : f.[\\ fset0] = f.",
            "VernacStartTheoremProof",
            "3e60c0730e97f3c8c528f4f03042506ed4bfacd6"
        ],
        [
            "by rewrite fsetD0 restrictfT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fnd_rem1 f (k k' : K) : f.[~ k].[? k'] = if k' != k then f.[? k'] else None.",
            "VernacStartTheoremProof",
            "21b1edf32ff152295e8224c251f67390e98e41b0"
        ],
        [
            "by rewrite fnd_rem inE; case: eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma getf_restrict f A (k : K) (kf : k \\in f) (kfA : k \\in f.[& A]) : f.[& A].[kfA] = f.[kf].",
            "VernacStartTheoremProof",
            "549164fdf537b48c7f1ed7b97763a185caf05c6f"
        ],
        [
            "by rewrite get_filterf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setf_restrict f A (k : K) (v : V) : f.[& A].[k <- v] = f.[k <- v].[& k |` A].",
            "VernacStartTheoremProof",
            "f3004dfaa182bddc608765b300bd537f84f5d2f2"
        ],
        [
            "by apply/fmapP=> k'; rewrite !(fnd_set, fnd_restrict, inE); case: eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setf_rem f A (k : K) (v : V) : f.[\\ A].[k <- v] = f.[k <- v].[\\ (A `\\ k)].",
            "VernacStartTheoremProof",
            "ca628f4d45ae9dbf132770312d9dc199d11fd2f6"
        ],
        [
            "by rewrite setf_restrict fsetUDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setf_rem1 f (k : K) (v : V) : f.[~ k].[k <- v] = f.[k <- v].",
            "VernacStartTheoremProof",
            "dc2e2f7e72499148218db2d87a247645e0463885"
        ],
        [
            "by rewrite setf_rem fsetDv remf0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setfC f k1 k2 v1 v2 : f.[k1 <- v1].[k2 <- v2] = if k2 == k1 then f.[k2 <- v2] else f.[k2 <- v2].[k1 <- v1].",
            "VernacStartTheoremProof",
            "e0a382c8c9884526a4d65975db8b760859ffd529"
        ],
        [
            "apply/fmapP => k.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite fnd_if !fnd_set.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have [[->|kNk2] [// <-|k2Nk1]] // := (altP (k =P k2), altP (k2 =P k1)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite (negPf kNk2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma restrictf_mkdom f A : f.[& A] = f.[& domf f `&` A].",
            "VernacStartTheoremProof",
            "03d72b55fe9da1396985fc742fd71e01c51296c9"
        ],
        [
            "apply/fmapP=> k; rewrite !fnd_restrict inE.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by case: fndP => ?; rewrite ?(andbT, andbF) //=; case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma restrictf_id f A : [disjoint domf f & A] -> f.[& A] = [fmap].",
            "VernacStartTheoremProof",
            "38638dcb515bb76e3b53a7629017f0e70aee6e9e"
        ],
        [
            "by move=> dAf; rewrite restrictf_mkdom (eqP dAf) restrictf0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma remf_id f A : [disjoint domf f & A] -> f.[\\ A] = f.",
            "VernacStartTheoremProof",
            "4baf8cc422358eff3bb6a9c84a993f755066d4de"
        ],
        [
            "by move=> /fsetDidPl ->; rewrite restrictfT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma remf1_id f k : k \\notin f -> f.[~ k] = f.",
            "VernacStartTheoremProof",
            "483b14589872ea284977d0468ae40224483f5e82"
        ],
        [
            "by move=> kNf; rewrite remf_id //= fdisjointX1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma restrictf_set f A (k : K) (v : V) : f.[k <- v].[& A] = if k \\in A then f.[& A].[k <- v] else f.[& A].",
            "VernacStartTheoremProof",
            "f9301f581f19d3553a7667f9bbd9ddf443939cc9"
        ],
        [
            "apply/fmapP => k' /=; rewrite !(fnd_if, fnd_set, fnd_restrict).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by case: eqP => [->|]; do !case: ifP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma remf_set f A (k : K) (v : V) : f.[k <- v].[\\ A] = if k \\in A then f.[\\ A] else f.[\\ A].[k <- v].",
            "VernacStartTheoremProof",
            "33139136429c6f435617ea45f81564d69f442c9e"
        ],
        [
            "apply/fmapP => k' /=; rewrite !(fnd_if, fnd_rem, fnd_set, inE).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by case: eqP => [->|]; do !case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma remf1_set f (k k' : K) (v : V) : f.[k' <- v].[~ k] = if k == k' then f.[~ k] else f.[~ k].[k' <- v].",
            "VernacStartTheoremProof",
            "93a99eca4781ed161a987ece0220e06365d86850"
        ],
        [
            "by rewrite remf_set inE eq_sym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setf_inj f f' k v : k \\notin f -> k \\notin f' -> f.[k <- v] = f'.[k <- v]-> f = f'.",
            "VernacStartTheoremProof",
            "71d81cbe82fc7fe9064d9c612bc0f41557440f13"
        ],
        [
            "move=> kf kf' eq_fkv; apply/fmapP => k'.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "have := congr1 (fun g => g.[? k']) eq_fkv.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite !fnd_set; case: eqP => // ->; rewrite !not_fnd.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End RestrictionOps.",
            "VernacEndSegment",
            "9156062fee3f474fe5830314f8bda2086501e0bb"
        ],
        [
            "Arguments filterf : simpl never.",
            "VernacArguments",
            "69e19d0b237607e2500a78a8298361dfeae5975a"
        ],
        [
            "Arguments restrictf : simpl never.",
            "VernacArguments",
            "6d50c8181aa03d26502c2a525cae36882d89e861"
        ],
        [
            "Notation \"x .[& A ]\" := (restrictf x A) : fmap_scope.",
            "VernacNotation",
            "46b937be49d9f74801971d55433f358d810bd73a"
        ],
        [
            "Notation \"x .[\\ A ]\" := (x.[& domf x `\\` A]) : fmap_scope.",
            "VernacNotation",
            "06842610acfb5e84fe4e764e11d3568cfc21f300"
        ],
        [
            "Notation \"x .[~ k ]\" := (x.[\\ [fset k]]) : fmap_scope.",
            "VernacNotation",
            "1b52354b1df4d026c5d5f39615065d1fedce71dc"
        ],
        [
            "Section Cat.",
            "VernacBeginSection",
            "126ce5ae47e7f5a065f65682fc60b32b190d275a"
        ],
        [
            "Variables (K : choiceType) (V : Type).",
            "VernacAssumption",
            "18ca9a68a6eda75d78dbb99406675c5df139b315"
        ],
        [
            "Implicit Types (f g : {fmap K -> V}).",
            "VernacReserve",
            "81736ea8ccde2552fd7151113938ba75cb8be3a0"
        ],
        [
            "Definition catf (f g : {fmap K -> V}) := [fmap k : (domf f `\\` domf g) `|` domf g=> match fsetULVR (valP k) with | inl kfDg => f.[fsubsetP (fsubsetDl _ _) _ kfDg] | inr kg => g.[kg] end].",
            "VernacDefinition",
            "b9963a187b6dadb3ed1f19c4d2ace35d95479218"
        ],
        [
            "Local Notation \"f + g\" := (catf f g) : fset_scope.",
            "VernacNotation",
            "3f1fe82426352cc5c12826a403779937fe7bef7f"
        ],
        [
            "Lemma domf_cat f g : domf (f + g) = domf f `|` domf g.",
            "VernacStartTheoremProof",
            "9437e3d0dae32d2bac468c1b15e2d127881584b2"
        ],
        [
            "by apply/fsetP=> x; rewrite !inE; case: (boolP (_ \\in domf _)); rewrite ?orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_catf f g k : k \\in domf (f + g) = (k \\in f) || (k \\in g).",
            "VernacStartTheoremProof",
            "ff693961169c0d89745915d58da6b98701460ae3"
        ],
        [
            "by rewrite domf_cat inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fnd_cat f g k : (f + g).[? k] = if k \\in domf g then g.[? k] else f.[? k].",
            "VernacStartTheoremProof",
            "9dc580cad618102635a9e0c145091ec92eab94cc"
        ],
        [
            "case: fndP => //= [kfg|]; rewrite /catf /=.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "rewrite ffunE /=; case: fsetULVR => [kf|kg]; last by rewrite Some_fnd kg.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -in_fnd; move: kf; rewrite inE => /andP[/negPf ->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite mem_catf => /norP [kNf kNg]; rewrite !not_fnd // if_same.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma catfE f g : f + g = f.[\\ domf g] + g.",
            "VernacStartTheoremProof",
            "c12dbab3c28ac427153bc184b15c388239851230"
        ],
        [
            "by apply/fmapP=> k; rewrite !(fnd_cat, fnd_rem); case: ifP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma getf_catl f g k (kfg : k \\in domf (f + g)) (kf : k \\in domf f) : k \\notin domf g -> (f + g).[kfg] = f.[kf].",
            "VernacStartTheoremProof",
            "20dd192a973a4c2530c10236ef54cea1791cf859"
        ],
        [
            "by move=> kNg; apply: Some_inj; rewrite Some_fnd fnd_cat (negPf kNg) in_fnd.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma getf_catr f g k (kfg : k \\in domf (f + g)) (kg : k \\in domf g) : (f + g).[kfg] = g.[kg].",
            "VernacStartTheoremProof",
            "4de9403f564d692eb701806bb960eae3d59b58a2"
        ],
        [
            "by apply: Some_inj; rewrite Some_fnd fnd_cat kg in_fnd.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma catf0 f : f + [fmap] = f.",
            "VernacStartTheoremProof",
            "9c23f220b7ce6ae88f042e1912244dfa55faedd6"
        ],
        [
            "by apply/fmapP => k; rewrite fnd_cat in_fset0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cat0f f : [fmap] + f = f.",
            "VernacStartTheoremProof",
            "8a7d66437b4e5e06f87e43e08a2d7f966e5f2c67"
        ],
        [
            "apply/fmapP => k; rewrite fnd_cat; case: ifPn => //= kf.",
            "VernacExtend",
            "5caed936835e366e9e533d8f19382dcfedbf86d4"
        ],
        [
            "by rewrite !not_fnd ?inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma catf_setl f g k (v : V) : f.[k <- v] + g = if k \\in g then f + g else (f + g).[k <- v].",
            "VernacStartTheoremProof",
            "446b371555bb7ec432be966f0b47c4491cb2777f"
        ],
        [
            "apply/fmapP=> k'; rewrite !(fnd_if, fnd_cat, fnd_set).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by have [->|Nkk'] := altP eqP; do !case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma catf_setr f g k (v : V) : f + g.[k <- v] = (f + g).[k <- v].",
            "VernacStartTheoremProof",
            "16e9c6fdf6043557d86805cbda0742f039ea20cb"
        ],
        [
            "apply/fmapP=> k'; rewrite !(fnd_cat, fnd_set, mem_setf, inE).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by have [->|Nkk'] := altP eqP; do !case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma restrictf_cat f g A : (f + g).[& A] = f.[& A] + g.[& A].",
            "VernacStartTheoremProof",
            "6877ac4cfe315cd0c62e3809c4b25dcae9f45a73"
        ],
        [
            "apply/fmapP => k'; rewrite !(fnd_cat, fnd_restrict) mem_restrictf.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma restrictf_cat_domr f g : (f + g).[& domf g] = g.",
            "VernacStartTheoremProof",
            "71a74ee929119a71f4ee04997fd472f3107d4583"
        ],
        [
            "rewrite catfE restrictf_cat restrictf_comp.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite fsetIDAC fsetDIl fsetDv fsetI0 restrictf0 restrictfT cat0f.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma remf_cat f g A : (f + g).[\\ A] = f.[\\ A] + g.[\\ A].",
            "VernacStartTheoremProof",
            "c68dcdcb52d0a448556b50c58fbc4509d9ddea7e"
        ],
        [
            "by apply/fmapP => k'; rewrite !(fnd_cat, fnd_rem) mem_remf; case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma catf_restrictl A f g : f.[& A] + g = (f + g).[& A `|` domf g].",
            "VernacStartTheoremProof",
            "8242da0e73ccedcaacaa1680cfc6cdc098402eef"
        ],
        [
            "apply/fmapP=> k; rewrite !(fnd_cat, fnd_restrict) !inE.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by do !case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma catf_reml A f g : f.[\\ A] + g = (f + g).[\\ A `\\` domf g].",
            "VernacStartTheoremProof",
            "6721906ac8fd13fab947b22656a2cf6286451f02"
        ],
        [
            "by apply/fmapP=> k; rewrite !(fnd_cat, fnd_rem) inE; case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma catf_rem1l k f g : f.[~ k] + g = if k \\in g then f + g else (f + g).[~ k].",
            "VernacStartTheoremProof",
            "ad029cc8a05b77f43e4de3ad132b11360243aafa"
        ],
        [
            "apply/fmapP => k'; rewrite !(fnd_if, fnd_cat, fnd_rem1).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by have [->|?] := altP eqP; do !case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setf_catr f g k (v : V) : (f + g).[k <- v] = f + g.[k <- v].",
            "VernacStartTheoremProof",
            "1482bc1e09aa78e3107b1b92845f120069a7ee78"
        ],
        [
            "by rewrite catf_setr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setf_catl f g k (v : V) : (f + g).[k <- v] = f.[k <- v] + g.[~ k].",
            "VernacStartTheoremProof",
            "483c526ddd08645d8fcd8d955db4cf7da689b8f1"
        ],
        [
            "by rewrite catf_setl mem_remf1 eqxx /= !setf_catr setf_rem1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma catfA f g h : f + (g + h) = f + g + h.",
            "VernacStartTheoremProof",
            "bf70fd6fc38533d6671541203e17b2dd819c251d"
        ],
        [
            "by apply/fmapP => k; rewrite !fnd_cat !mem_catf; do !case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma catfC f g : f + g = g + f.[\\ domf g].",
            "VernacStartTheoremProof",
            "f6166ea727e1d5dd0e3651f2d11b6ae7daeb7f96"
        ],
        [
            "apply/fmapP=> k; rewrite !fnd_cat fnd_rem domf_rem inE.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by have [|kNg] //= := boolP (_ \\in domf g); rewrite (not_fnd kNg); case: fndP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma disjoint_catfC f g : [disjoint domf f & domf g] -> f + g = g + f.",
            "VernacStartTheoremProof",
            "c0e50e63338d64d38c23ae5e9d8a1b6a661ec14b"
        ],
        [
            "by move=> dfg; rewrite catfC remf_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma catfAC f g h : f + g + h = f + h + g.[\\ domf h].",
            "VernacStartTheoremProof",
            "280f665910bf593b9a5d929f5a2b00fe6415287f"
        ],
        [
            "by rewrite -!catfA [X in _ + X]catfC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma disjoint_catfAC f g h : [disjoint domf g & domf h]%fmap -> f + g + h = f + h + g.",
            "VernacStartTheoremProof",
            "e6645064cc96d134bdb35aa3002bb9f73b4675ed"
        ],
        [
            "by move=> dgh; rewrite catfAC remf_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma catfCA f g h : f + (g + h) = g + (f.[\\ domf g] + h).",
            "VernacStartTheoremProof",
            "a30eef933a04ab38797ee57950031f1dcbd1b539"
        ],
        [
            "by rewrite !catfA [X in X + _]catfC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma disjoint_catfCA f g h : [disjoint domf f & domf g]%fmap -> f + (g + h) = g + (f + h).",
            "VernacStartTheoremProof",
            "070b2710fea9243e7a4214ed133aa7d8da72bfb7"
        ],
        [
            "by move=> dfg; rewrite catfCA remf_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma catfIs f g h : f + h = g + h -> f.[\\ domf h] = g.[\\ domf h].",
            "VernacStartTheoremProof",
            "9a9b67165513707b212b5eaff48457167911ebbd"
        ],
        [
            "move=> /fmapP eq_fg_fh; apply/fmapP => k; have := eq_fg_fh k.",
            "VernacExtend",
            "fcbc4db6275a8d44907e8ed4b44d2f7f279ee662"
        ],
        [
            "by rewrite !fnd_cat !fnd_rem; case: ifP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma disjoint_catfIs h f g : [disjoint domf f & domf h] -> [disjoint domf g & domf h] -> f + h = g + h -> f = g.",
            "VernacStartTheoremProof",
            "2e4f5974918f80e44e977486c06041f35ad2cb1d"
        ],
        [
            "by move=> dfg dgh /catfIs; rewrite !remf_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma restrict_catfsI f g h : f + g = f + h -> g.[& domf h] = h.[& domf g].",
            "VernacStartTheoremProof",
            "25832d0b25438a031b537d7ed2558cec2db86cdf"
        ],
        [
            "move=> /fmapP eq_fg_fh; apply/fmapP => k; have := eq_fg_fh k.",
            "VernacExtend",
            "fcbc4db6275a8d44907e8ed4b44d2f7f279ee662"
        ],
        [
            "rewrite !fnd_cat !fnd_restrict.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by do ![case: (boolP (_ \\in domf _)) => ? //=] => _; rewrite not_fnd.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma disjoint_catfsI h f g : [disjoint domf f & domf h] -> [disjoint domf g & domf h] -> h + f = h + g -> f = g.",
            "VernacStartTheoremProof",
            "9bd3dc48e78e38a4e6e1be90af649f62705ae3a2"
        ],
        [
            "move=> dfg dgh; rewrite -disjoint_catfC // -[RHS]disjoint_catfC //.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by apply: disjoint_catfIs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Cat.",
            "VernacEndSegment",
            "ea5dbf64f4ef508287f5ad54352a825bea512bfb"
        ],
        [
            "Module Import FmapE.",
            "VernacDefineModule",
            "289f3183f59e909e55973b9592f1dd936169caaa"
        ],
        [
            "Definition fmapE := (fndSome, getfE, setfK, fnd_set, getf_set, setfNK, fnd_reducef, get_reducef, fnd_filterf, get_filterf, fnd_restrict, getf_restrict, fnd_rem, fnd_rem1, restrictfT, restrictf0, restrictf_id, remf_id, remf1_id, fnd_cat).",
            "VernacDefinition",
            "17fa649a114b7f12bf65ab45ae22f635f44cf3de"
        ],
        [
            "End FmapE.",
            "VernacEndSegment",
            "c725a4fe5a531479ee816729ba43e82375f335aa"
        ],
        [
            "Arguments catf : simpl never.",
            "VernacArguments",
            "904110159ffe5a26c6529973fcd53f5368d4e433"
        ],
        [
            "Notation \"f + g\" := (catf f g) : fset_scope.",
            "VernacNotation",
            "4f7b8d5a70c52a1572b3600383fb4f5043bc5664"
        ],
        [
            "Section FinMapKeyType.",
            "VernacBeginSection",
            "2e02e95c1959532b39489a7bc99317cd8717a0de"
        ],
        [
            "Variables (K V : choiceType).",
            "VernacAssumption",
            "0d0d88efe5c8a8a5bf6a54a0d89254c225991e3e"
        ],
        [
            "Implicit Types (f g : {fmap K -> V}).",
            "VernacReserve",
            "81736ea8ccde2552fd7151113938ba75cb8be3a0"
        ],
        [
            "Definition codomf f : {fset V} := [fset f k | k : domf f].",
            "VernacDefinition",
            "50323e638d58f154836954be2c41da1bbc4d1bd0"
        ],
        [
            "Lemma mem_codomf f v : (v \\in codomf f) = [exists x : domf f, f x == v].",
            "VernacStartTheoremProof",
            "e16e5944f64a1783b26ed4971ea51d9d61f9ee18"
        ],
        [
            "apply: sameP existsP.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by apply: (iffP (imfsetP _ _ _ _)) => /= [[x _ ->]|[x /eqP <-]]; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codomfP f v : reflect (exists x, f.[? x] = Some v) (v \\in codomf f).",
            "VernacStartTheoremProof",
            "3aac5eefd7d4f83a10a7486307f2211aadc7e117"
        ],
        [
            "apply: (iffP (imfsetP _ _ _ _)) => /= [[x _ ->]|[k]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by exists (val x); rewrite Some_fnd.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case: fndP => //= kf [<-]; exists [` kf].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codomfPn f v : reflect (forall x, f.[? x] != Some v) (v \\notin codomf f).",
            "VernacStartTheoremProof",
            "ccc3948b955521ca8291d01a5de65a9f9304f3b4"
        ],
        [
            "rewrite mem_codomf negb_exists; apply: (iffP forallP) => f_eq_v x /=.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by case: fndP => //= kf; rewrite f_eq_v.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: contraNneq (f_eq_v (val x)) => <-; rewrite Some_fnd.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codomf0 : codomf [fmap] = fset0.",
            "VernacStartTheoremProof",
            "0156725d21c1ff8397c72c5ef1579ef94759134c"
        ],
        [
            "apply/fsetP=> k; rewrite inE; apply/negP => /codomfP [k'].",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "by rewrite not_fnd //= inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_codomf f (k : domf f) : f k \\in codomf f.",
            "VernacStartTheoremProof",
            "59de8ea49646a238240e3f4956a409f3708ef73a"
        ],
        [
            "by rewrite in_imfset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fndSomeP f (k : K) (v : V): (f.[? k] = Some v) <-> {kf : k \\in f & f.[kf] = v}.",
            "VernacStartTheoremProof",
            "9eafceb86fac72db18cacb105cc080c8ba89c6f0"
        ],
        [
            "split => [fk|[kf fk]]; last by rewrite in_fnd fk.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have kf : k \\in f by rewrite -fndSome fk.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists kf; apply: Some_inj; rewrite Some_fnd.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codomf_restrict f (A : {fset K}) : codomf f.[& A] = [fset f k | k : domf f & val k \\in A].",
            "VernacStartTheoremProof",
            "9fc27af9ed3e3c278b6aff69f82747bd45be79eb"
        ],
        [
            "apply/fsetP=> v; apply/imfsetP/imfsetP => /= [] [k kP ->].",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "have := valP k; rewrite !inE => /andP [kf kA]; exists [` kf] => //.",
            "VernacExtend",
            "152c1e8356af9cca20427023e0c6369212e834d6"
        ],
        [
            "by rewrite ffunE /= -getfE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have kA : val k \\in [fset x | x in domf f & x \\in A] by rewrite !inE (valP k).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists [` kA]; rewrite // ?ffunE !getfE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codomf_restrict_exists f (A : {fset K}) : codomf f.[& A] = [fset v in codomf f | [exists k : domf f, (val k \\in A) && (f k == v)]].",
            "VernacStartTheoremProof",
            "8e1b1dac423051a0e2a849afb9d072acc5e966ef"
        ],
        [
            "rewrite codomf_restrict; apply/fsetP => v; rewrite !(in_fset, inE) /=; apply/imfsetP/idP.",
            "VernacExtend",
            "bd34eb86616c4b4032d1f227fa663a882fb51fac"
        ],
        [
            "by move=> [k kA ->]; rewrite in_codomf /=; apply/existsP; exists k; apply/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=> /andP[fkdom /existsP [k /andP[kA /eqP<-]]]; exists k.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codomf_rem f (A : {fset K}) : codomf f.[\\ A] = [fset f k | k : domf f & val k \\notin A].",
            "VernacStartTheoremProof",
            "063c6efa05e22c63400ef5b15839162cfd7debc9"
        ],
        [
            "rewrite codomf_restrict.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: eq_imfset => //= x /=; rewrite -!topredE /= !inE (valP x) andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codomf_rem_exists f (A : {fset K}) : codomf f.[\\ A] = [fset v in codomf f | [exists k : domf f, (val k \\notin A) && (f k == v)]].",
            "VernacStartTheoremProof",
            "ba3f5ee45ae7377a8b2c5f0310c1bc7912513631"
        ],
        [
            "rewrite codomf_restrict_exists; apply: eq_imfset => x //=.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite !inE; case: (_ \\in _) => //=.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "apply/existsP/existsP => [] /= [k]; rewrite ?inE; by do 2?[move=>/andP []]; exists k; rewrite ?inE; do 2?[apply/andP; split].",
            "VernacExtend",
            "d5238b4c7e326b53c70f61e9edb516f55fc674b5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_codomf_rem1 f (k : K) (kf : k \\in domf f) : codomf f.[~ k] = if [exists k' : domf f, (val k' != k) && (f k' == f.[kf])] then codomf f else codomf f `\\ f.[kf].",
            "VernacStartTheoremProof",
            "e4d512c73a73f16f50c55d7aac4d39ee889d692b"
        ],
        [
            "apply/fsetP => v; rewrite codomf_rem_exists (fun_if (fun x => v \\in x)) !(in_fset, inE).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "have [vf|vNf] := boolP (_ \\in codomf f); rewrite /= ?(andbF,andbT) ?if_same //.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "rewrite -/(_ || _); apply/existsP/idP => /= [[k' /andP[xk /eqP <-]]|].",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite orbC -implybE; apply/implyP => eq_fk.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite inE /= in xk; apply/existsP; exists k'; rewrite // xk eq_fk.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /imfsetP /= [[l lf] _ ->] := vf; rewrite orbC.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "have [->|neq_f _] := altP (f.[lf] =P _).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> /existsP [m /andP[Nmk /eqP <-]]; exists m; rewrite eqxx inE Nmk.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists [` lf]; rewrite eqxx andbT inE /=.",
            "VernacExtend",
            "33b976d9fceb32847aba44318a3f1d74b79e99e3"
        ],
        [
            "apply: contra neq_f => /eqP eq_lk; rewrite eq_lk in lf *.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by apply/eqP; congr f.[_]; apply: bool_irrelevance.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codomf_set f (k : K) (v : V) (kf : k \\in domf f) : codomf f.[k <- v] = v |` codomf f.[~ k].",
            "VernacStartTheoremProof",
            "e590290a0ee45b0c093783b14fded5f901c2a19d"
        ],
        [
            "rewrite -setf_rem1; apply/fsetP=> v'; rewrite !inE.",
            "VernacExtend",
            "fe8f197e86415fc7f0a74eda9d312128b9473eda"
        ],
        [
            "have [->|neq_v'v] /= := altP eqP.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/codomfP; exists k; rewrite fnd_set eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/codomfP/codomfP => [] [k' fk'_eq]; exists k'; move: fk'_eq; rewrite fnd_set.",
            "VernacExtend",
            "761ba7d4892c968ff2326f578777c4cf1542c3cf"
        ],
        [
            "by have [_ [eq_vv']|//] := altP eqP; rewrite eq_vv' eqxx in neq_v'v *.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by have [->|//] := altP eqP; rewrite fnd_rem inE eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FinMapKeyType.",
            "VernacEndSegment",
            "3c34c8dab3b5e9a983e1a89554602eb1f9538b05"
        ],
        [
            "Module Import FinmapInE.",
            "VernacDefineModule",
            "5db27ffb0c1480bcd1335b653765a73754a143c1"
        ],
        [
            "Definition inE := (inE, mem_codomf, mem_catf, mem_remfF, mem_filterf, mem_reducef, mem_restrictf, mem_remf, mem_remf1, mem_setf).",
            "VernacDefinition",
            "2b6d10399a21b31ba497e7773f5638c37ae781b1"
        ],
        [
            "End FinmapInE.",
            "VernacEndSegment",
            "c08c99db6c75cb6011b4978b9c4e173c09f54345"
        ],
        [
            "Section FsfunDef.",
            "VernacBeginSection",
            "e865e9548f1522d98787fa5e5e0a698ca3bc1eda"
        ],
        [
            "Variables (K : choiceType) (V : eqType) (default : K -> V).",
            "VernacAssumption",
            "8684f515ed444fa84e10f62a7ce4ce8625eff6e4"
        ],
        [
            "Record fsfun := Fsfun { fmap_of_fsfun : {fmap K -> V}; _ : [forall k : domf fmap_of_fsfun, fmap_of_fsfun k != default (val k)] }.",
            "VernacInductive",
            "17da1bc30feb4a4f7a9f5493ce3f2e0b6741aaa3"
        ],
        [
            "Canonical fsfun_subType := Eval hnf in [subType for fmap_of_fsfun].",
            "VernacDefinition",
            "77c583edba814b9195ca912a3139c688c1c603f8"
        ],
        [
            "Definition fsfun_eqMixin := [eqMixin of fsfun by <:].",
            "VernacDefinition",
            "1ea7ce7a41642f15b9fcf07cd99384d5baa71263"
        ],
        [
            "Canonical fsfun_eqType := EqType fsfun fsfun_eqMixin.",
            "VernacDefinition",
            "5ab5323e82d853cc0d9caa9ec44a46b128b06d07"
        ],
        [
            "Fact fsfun_subproof (f : fsfun) : forall (k : K) (kf : k \\in fmap_of_fsfun f), (fmap_of_fsfun f).[kf]%fmap != default k.",
            "VernacStartTheoremProof",
            "bf91e00c3e1d16c47e81218067a04c7be98ba98f"
        ],
        [
            "case:f => f f_stable k kf /=.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "exact: (forallP f_stable [` kf]).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition fun_of_fsfun (f : fsfun) (k : K) := odflt (default k) (fmap_of_fsfun f).[? k]%fmap.",
            "VernacDefinition",
            "343c8bc6521d715a64bec93c58c2fdd17e9f3611"
        ],
        [
            "End FsfunDef.",
            "VernacEndSegment",
            "e0a43574e9a4bdd19fdd68f2e9d74d12f1b60b64"
        ],
        [
            "Coercion fun_of_fsfun : fsfun >-> Funclass.",
            "VernacCoercion",
            "6f849b56c1dc732752550c800dcf42fa287a85a1"
        ],
        [
            "Module Type FinSuppSig.",
            "VernacDeclareModuleType",
            "37fbc686cedaee46ecec8bdc0a56087a965345fe"
        ],
        [
            "Axiom fs : forall (K : choiceType) (V : eqType) (default : K -> V), fsfun default -> {fset K}.",
            "VernacAssumption",
            "3d071c5464bc7e3d78c0c5f5ca94406adc8c13ac"
        ],
        [
            "Axiom E : fs = (fun K V d f => domf (@fmap_of_fsfun K V d f)).",
            "VernacAssumption",
            "2d764db6891ca65fb6294ee71ac03ec3c8adb141"
        ],
        [
            "End FinSuppSig.",
            "VernacEndSegment",
            "e428dc7599c349c9b852fcdb5418e60b86d21acb"
        ],
        [
            "Module FinSupp : FinSuppSig.",
            "VernacDefineModule",
            "aa0a5a73a15e18c662484b5f0feea591d9ccc304"
        ],
        [
            "Definition fs := (fun K V d f => domf (@fmap_of_fsfun K V d f)).",
            "VernacDefinition",
            "a610f3e0dd642bae9ee21dfb61580371cc84dd8a"
        ],
        [
            "Definition E := erefl fs.",
            "VernacDefinition",
            "7296159ad884db35d8c6fc2fce3e18554549b6eb"
        ],
        [
            "End FinSupp.",
            "VernacEndSegment",
            "4cdd40e923bb1e1e290c733be3b2d1aa8d9d32fb"
        ],
        [
            "Notation finsupp := FinSupp.fs.",
            "VernacSyntacticDefinition",
            "9bbb9be21aa9351c184e522251edbe27096b56fc"
        ],
        [
            "Canonical unlockable_finsupp := Unlockable FinSupp.E.",
            "VernacDefinition",
            "61315c40dab551dbda9ae5449ef627e7f049a8a9"
        ],
        [
            "Section FSfunBasics.",
            "VernacBeginSection",
            "b3b53ddd464e296e171ff166ce8acd637fcab7bc"
        ],
        [
            "Variables (K : choiceType) (V : eqType) (default : K -> V).",
            "VernacAssumption",
            "8684f515ed444fa84e10f62a7ce4ce8625eff6e4"
        ],
        [
            "Implicit Types (f : fsfun default) (k : K) (v : V).",
            "VernacReserve",
            "853efa43028d300b0e4e5ba89728aaeee9f62917"
        ],
        [
            "Lemma mem_finsupp f k : (k \\in finsupp f) = (f k != default k).",
            "VernacStartTheoremProof",
            "afad21dc9d27a836671195543a5ca067b0698e8b"
        ],
        [
            "rewrite /fun_of_fsfun [finsupp]unlock; case: fndP; rewrite ?eqxx //=.",
            "VernacExtend",
            "1dc1cec635c64f0cc3ec64ea6e4d6c7d5b8f81f6"
        ],
        [
            "by move=> kf; rewrite fsfun_subproof.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma memNfinsupp f k : (k \\notin finsupp f) = (f k == default k).",
            "VernacStartTheoremProof",
            "97c1698ef1294a95f96540b0bb9b78e630676c57"
        ],
        [
            "by rewrite mem_finsupp negbK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsfun_dflt f k : k \\notin finsupp f -> f k = default k.",
            "VernacStartTheoremProof",
            "66646458f56bf0159464d4ce7e5a342d9fd4560a"
        ],
        [
            "by rewrite mem_finsupp negbK => /eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "CoInductive fsfun_spec f k : V -> bool -> Type := | FsfunOut : k \\notin finsupp f -> fsfun_spec f k (default k) false | FsfunIn (kf : k \\in finsupp f) : fsfun_spec f k (f k) true.",
            "VernacInductive",
            "dc4a9e6a4633b54cb7cf52b681cc39544159b1ef"
        ],
        [
            "Lemma finsuppP f k : fsfun_spec f k (f k) (k \\in finsupp f).",
            "VernacStartTheoremProof",
            "4ddce9d396d248e92a23c25d740f8a73f8af30e4"
        ],
        [
            "have [kf|kNf] := boolP (_ \\in _); first by constructor.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite fsfun_dflt // ; constructor.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsfunP f f' : f =1 f' <-> f = f'.",
            "VernacStartTheoremProof",
            "3a09a3dbdb3241370d4fdff1eef4e9ffd8b2df62"
        ],
        [
            "split=> [eq_fg|->//]; apply/val_inj/fmapP => k.",
            "VernacExtend",
            "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
        ],
        [
            "have := eq_fg k; rewrite /(f _) /(f' _) /=.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "case: fndP; case: fndP => //= kf kf'; first by move->.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move/eqP/negPn; rewrite fsfun_subproof.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move/eqP/negPn; rewrite eq_sym fsfun_subproof.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsfun_injective_inP f (T : {fset K}) : reflect {in T &, injective f} (injectiveb [ffun x : T => f (val x)]).",
            "VernacStartTheoremProof",
            "63d3927246bf11af4221554678899e6e921e3e79"
        ],
        [
            "apply: (iffP (@injectiveP _ _ _)) => f_inj a b; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !ffunE => *; apply: val_inj; apply: f_inj => //; apply: valP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> aT bT eq_ga_gb; have := f_inj.[aT].[bT]; rewrite !ffunE /=.",
            "VernacExtend",
            "7cbc77a1e43ca1454debc28656b2dec3869cf69b"
        ],
        [
            "by move=> /(_ eq_ga_gb) /(congr1 val).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition fsfun_of_can_ffun (T : {fset K}) (g : {ffun T -> V}) (can_g : forall k : T, g k != default (val k)) := @Fsfun K V default (FinMap g) (appP forallP idP can_g).",
            "VernacDefinition",
            "12f3282b36e51002d2d7d9028cbb93e5cdb67f50"
        ],
        [
            "Lemma fsfun_of_can_ffunE (T : {fset K}) (g : {ffun T -> V}) (can_g : forall k : T , g k != default (val k)) k (kg : k \\in T) : (fsfun_of_can_ffun can_g) k = g.[kg].",
            "VernacStartTheoremProof",
            "ee085326abd685da300479520d73482d5a854a59"
        ],
        [
            "by rewrite/fun_of_fsfun in_fnd.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FSfunBasics.",
            "VernacEndSegment",
            "4d0616234668b107ed471f956ad4727567a391be"
        ],
        [
            "Notation \"{ 'fsfun' ty 'for' dflt }\" := (fsfun (dflt : ty)) (at level 0, format \"{ 'fsfun' ty 'for' dflt }\") : type_scope.",
            "VernacNotation",
            "5ff9c769ba76fb4855baa81ebd18274bbbcf09f8"
        ],
        [
            "Notation \"{ 'fsfun' ty 'of' x => dflt }\" := {fsfun ty for fun x => dflt} (at level 0, x at level 99, format \"{ 'fsfun' ty 'of' x => dflt }\") : type_scope.",
            "VernacNotation",
            "e6998c1297d23c3f4991b5820b337bfe5c31bbe4"
        ],
        [
            "Notation \"{ 'fsfun' ty 'with' dflt }\" := {fsfun ty of _ => dflt} (at level 0, format \"{ 'fsfun' ty 'with' dflt }\") : type_scope.",
            "VernacNotation",
            "ecfdf282da7003f538e4732a39f644bc03e3833b"
        ],
        [
            "Notation \"{ 'fsfun' ty }\" := {fsfun ty of x => x} (at level 0, format \"{ 'fsfun' ty }\") : type_scope.",
            "VernacNotation",
            "ca0e2596e76346984c1409c2f4aeffbb5f0280fb"
        ],
        [
            "Notation \"{ 'fsfun' 'for' dflt }\" := {fsfun _ for dflt} (at level 0, only parsing) : type_scope.",
            "VernacNotation",
            "17cdb324907f4fded08ef4d7bbcf4ee28302559a"
        ],
        [
            "Notation \"{ 'fsfun' 'of' x : T => dflt }\" := {fsfun T -> _ of x => dflt} (at level 0, x at level 99, only parsing) : type_scope.",
            "VernacNotation",
            "63802a93b94c185dc2c1d53bdb278b9fbbf827e1"
        ],
        [
            "Notation \"{ 'fsfun' 'of' x => dflt }\" := {fsfun of x : _ => dflt} (at level 0, x at level 99, only parsing) : type_scope.",
            "VernacNotation",
            "a9409f74d91cd4488077d6c3855f959c0efe810b"
        ],
        [
            "Notation \"{ 'fsfun' 'with' dflt }\" := {fsfun of _ => dflt} (at level 0, only parsing) : type_scope.",
            "VernacNotation",
            "a28f64922e76c9548e1873a960a73ca205a48a42"
        ],
        [
            "Module Type FsfunSig.",
            "VernacDeclareModuleType",
            "f533a8c38ebca9c1632ca5effe2d2de426d612ae"
        ],
        [
            "Section FsfunSig.",
            "VernacBeginSection",
            "a1cd579c55c795c467ee0e9c64fa4638bb43431a"
        ],
        [
            "Variables (K : choiceType) (V : eqType) (default : K -> V).",
            "VernacAssumption",
            "8684f515ed444fa84e10f62a7ce4ce8625eff6e4"
        ],
        [
            "Parameter of_ffun : forall (S : {fset K}), (S -> V) -> unit -> fsfun default.",
            "VernacAssumption",
            "7f47d50070840679443c0f91ef8f4434e33de21f"
        ],
        [
            "Variables (S : {fset K}) (h : S -> V).",
            "VernacAssumption",
            "159aad61aa812729a9b27c74d63ff8e2dd955004"
        ],
        [
            "Axiom of_ffunE :forall key x, of_ffun h key x = odflt (default x) (omap h (insub x)).",
            "VernacAssumption",
            "e0a294c46780d053730dc933863af155a709b86e"
        ],
        [
            "End FsfunSig.",
            "VernacEndSegment",
            "61e24cf23083bd3c93222c00be3dd4a22d0d0a0f"
        ],
        [
            "End FsfunSig.",
            "VernacEndSegment",
            "61e24cf23083bd3c93222c00be3dd4a22d0d0a0f"
        ],
        [
            "Module Fsfun : FsfunSig.",
            "VernacDefineModule",
            "869c2a219aad39c8e63301c788d9ef83bc04b04c"
        ],
        [
            "Section FsfunOfFinfun.",
            "VernacBeginSection",
            "27c9e0db7dff8bca20ef4193c82cafde7be76862"
        ],
        [
            "Variables (K : choiceType) (V : eqType) (default : K -> V) (S : {fset K}) (h : S -> V).",
            "VernacAssumption",
            "b9ffb5c605fe5b15d727d22dfb1fc640432a1371"
        ],
        [
            "Let fmap := [fmap a : [fsetval a in {: S} | h a != default (val a)] => h (fincl (fset_sub_val _ _) a)].",
            "VernacDefinition",
            "76d711942b2bf36a6f35f47c99874c14f323d19b"
        ],
        [
            "Fact fmapP a : fmap a != default (val a).",
            "VernacStartTheoremProof",
            "83b2b3c3264f495f3ce8aa7ccd636b5215e770c0"
        ],
        [
            "rewrite ffunE; have /in_fset_valP [a_in_S] := valP a.",
            "VernacExtend",
            "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
        ],
        [
            "by have -> : [` a_in_S] = fincl (fset_sub_val _ _) a by exact/val_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition of_ffun (k : unit) := fsfun_of_can_ffun fmapP.",
            "VernacDefinition",
            "d1cea73e757c6531a6d3112240afbe07c2e27feb"
        ],
        [
            "Lemma of_ffunE key x : of_ffun key x = odflt (default x) (omap h (insub x)).",
            "VernacStartTheoremProof",
            "dbb67b87a58d247ce538ff04289798f39ae62209"
        ],
        [
            "rewrite /fun_of_fsfun /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: insubP => /= [u _ <-|xNS]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case: fndP => //= kf; rewrite !ffunE /=.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by set y := (X in h X); rewrite (valP y) in xNS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: fndP => /= [kf|].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite ffunE; congr (h _); apply/val_inj => //.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite inE /= -topredE /= negbK => /eqP ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FsfunOfFinfun.",
            "VernacEndSegment",
            "4f17bbdd66286474a2746cdb938b5cabb4373802"
        ],
        [
            "End Fsfun.",
            "VernacEndSegment",
            "d756410c5cbc016685f12300a4d7f6867f202e27"
        ],
        [
            "Canonical fsfun_of_funE K V default S h key x := Unlockable (@Fsfun.of_ffunE K V default S h key x).",
            "VernacDefinition",
            "2928a4b333b80dfbff7f694dbf75da154f5a2bae"
        ],
        [
            "Fact fsfun_key : unit.",
            "VernacStartTheoremProof",
            "643e6ed9a76728074a6a4246c4267199d2123731"
        ],
        [
            "exact: tt.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition fsfun_of_ffun key (K : choiceType) (V : eqType) (S : {fset K}) (h : S -> V) (default : K -> V) := (Fsfun.of_ffun default h key).",
            "VernacDefinition",
            "c9566851bc41f9ae49363fe5603f5c6025afbe5c"
        ],
        [
            "Definition fsfun_choiceMixin (K V : choiceType) (d : K -> V) := [choiceMixin of fsfun d by <:].",
            "VernacDefinition",
            "45903e9646be59ea559abad36cbf570c8a702c89"
        ],
        [
            "Canonical fsfun_choiceType (K V : choiceType) (d : K -> V) := ChoiceType (fsfun d) (fsfun_choiceMixin d).",
            "VernacDefinition",
            "1e7b6582dab30a29d9bfd3403f0d205c2d9c0c7a"
        ],
        [
            "Delimit Scope fsfun_scope with fsfun.",
            "VernacDelimiters",
            "306397da47601717f1bb33447834f03d989b4579"
        ],
        [
            "Notation \"[ 'fsfun[' key ] x : aT => F | default ]\" := (fsfun_of_ffun key (fun x : aT => F) (fun x => default)) (at level 0, x at level 99, only parsing) : fun_scope.",
            "VernacNotation",
            "2c8315be794e17b106518fba52b89e4fccc3f358"
        ],
        [
            "Notation \"[ 'fsfun' x : aT => F | default ]\" := [fsfun[fsfun_key] x : aT => F | default] (at level 0, x at level 99, only parsing) : fun_scope.",
            "VernacNotation",
            "ea8b8fd8d0d1995b3e6dc5889785d4c3535b19ba"
        ],
        [
            "Notation \"[ 'fsfun[' key ] x : aT => F ]\" := [fsfun[key] x : aT => F | _] (at level 0, x at level 99, only parsing) : fun_scope.",
            "VernacNotation",
            "39ef1ce91ea15b7d6a864b3630b7177f8cad90fe"
        ],
        [
            "Notation \"[ 'fsfun' x : aT => F ]\" := [fsfun x : aT => F | _] (at level 0, x at level 99, only parsing) : fun_scope.",
            "VernacNotation",
            "b4141a1207cf9d547badc519ecdde3ba33254f1c"
        ],
        [
            "Notation \"[ 'fsfun[' key ] x => F | default ]\" := [fsfun[key] x : _ => F | default ] (at level 0, x at level 99, only parsing) : fun_scope.",
            "VernacNotation",
            "ace4e3e48be4aef9dd81da6be899cb56877adf74"
        ],
        [
            "Notation \"[ 'fsfun' x => F | default ]\" := [fsfun x : _ => F | default] (at level 0, x at level 99, only parsing) : fun_scope.",
            "VernacNotation",
            "a1a310173a8dc647f71942790dfb172605967fc9"
        ],
        [
            "Notation \"[ 'fsfun[' key ] x => F ]\" := [fsfun[key] x => F | _] (at level 0, x at level 99, only parsing) : fun_scope.",
            "VernacNotation",
            "d0725621704fdee00d0e02d7502ceb337d2fd21f"
        ],
        [
            "Notation \"[ 'fsfun' x => F ]\" := [fsfun x => F | _] (at level 0, x at level 99, only parsing) : fun_scope.",
            "VernacNotation",
            "5503c92b60b0f4aae4157c73f58c00fce3d41ec5"
        ],
        [
            "Notation \"[ 'fsfun[' key ]=> F | default ]\" := [fsfun[key] _ => F | default ] (at level 0, only parsing) : fun_scope.",
            "VernacNotation",
            "5c2c452702a107338076a0db9ccfc5150e9a7196"
        ],
        [
            "Notation \"[ 'fsfun=>' F | default ]\" := [fsfun _ => F | default] (at level 0, only parsing) : fun_scope.",
            "VernacNotation",
            "35ebf0d6487a9d30380b0120ae767546ec2551e5"
        ],
        [
            "Notation \"[ 'fsfun[' key ]=> F ]\" := [fsfun[key]=> F | _] (at level 0, only parsing) : fun_scope.",
            "VernacNotation",
            "66b6c9c13169dd08a101746e8ab2b80f96ef6adc"
        ],
        [
            "Notation \"[ 'fsfun=>' F ]\" := [fsfun=> F | _] (at level 0, only parsing) : fun_scope.",
            "VernacNotation",
            "230a8f2a238b88098f93133c3aac6de9cdce1dbe"
        ],
        [
            "Definition fsfun_of_fun key (K : choiceType) (V : eqType) (S : {fset K}) (h : K -> V) default := [fsfun[key] x : S => h (val x) | default x].",
            "VernacDefinition",
            "7d96f555181c521937c5168040feb4d49dcfde51"
        ],
        [
            "Notation \"[ 'fsfun[' key ] x 'in' S => F | default ]\" := (fsfun_of_fun key S (fun x => F) (fun x => default)) (at level 0, x at level 99, only parsing) : fun_scope.",
            "VernacNotation",
            "449df766e0be549bc86c6c3c9a579339a96594c6"
        ],
        [
            "Notation \"[ 'fsfun' x 'in' S => F | default ]\" := [fsfun[fsfun_key] x in S => F | default] (at level 0, x at level 99, only parsing) : fun_scope.",
            "VernacNotation",
            "577832c4c08b008a620976d267765fc82b0ca274"
        ],
        [
            "Notation \"[ 'fsfun[' key ] x 'in' S => F ]\" := [fsfun[key] x in S => F | _] (at level 0, x at level 99, only parsing) : fun_scope.",
            "VernacNotation",
            "06b7c12c05f74a31e888f59beaf83bb41ab9d8a9"
        ],
        [
            "Notation \"[ 'fsfun' x 'in' S => F ]\" := [fsfun[fsfun_key] x in S => F | _] (at level 0, x at level 99, only parsing) : fun_scope.",
            "VernacNotation",
            "bffd4a502f631e4e0c2978ffda29c9b48b632336"
        ],
        [
            "Notation \"[ 'fsfun[' key ] 'in' S => F | default ]\" := [fsfun[key] _ in S => F | default] (at level 0, only parsing) : fun_scope.",
            "VernacNotation",
            "2ffd705995117cd28bdb4be00fb0b9eefaca8441"
        ],
        [
            "Notation \"[ 'fsfun' 'in' S => F | default ]\" := [fsfun[fsfun_key] in S => F | default] (at level 0, only parsing) : fun_scope.",
            "VernacNotation",
            "5331fcfff8ca700dfcd8ded5223d585c67c1b590"
        ],
        [
            "Notation \"[ 'fsfun[' key ] 'in' S => F ]\" := [fsfun[key] in S => F | _] (at level 0, only parsing) : fun_scope.",
            "VernacNotation",
            "13caf2d924179a3114e82e3cecaa81dfdfefa697"
        ],
        [
            "Notation \"[ 'fsfun' 'in' S => F ]\" := [fsfun[fsfun_key] in S => F | _] (at level 0, only parsing) : fun_scope.",
            "VernacNotation",
            "990d2ea6aa22525ecfe728f9b833ab1835aad921"
        ],
        [
            "Notation \"[ 'fs' 'fun' x : aT => F ]\" := [fsfun[_] x : aT => F] (at level 0, x at level 99, format \"[ 'fs' 'fun' x : aT => F ]\") : fun_scope.",
            "VernacNotation",
            "a2c65ef4854d40f5eaba6ce5b6a20e35619f8870"
        ],
        [
            "Notation \"[ 'fs' 'fun' x 'in' aT => F ]\" := [fsfun[_] x in aT => F] (at level 0, x at level 99, format \"[ 'fs' 'fun' x 'in' aT => F ]\") : fun_scope.",
            "VernacNotation",
            "8830d792343c917a2de4c034515c2642ff7bed28"
        ],
        [
            "Fact fsfun0_key : unit.",
            "VernacStartTheoremProof",
            "67655a9828a39240a0b3064f45f846b0318c53c2"
        ],
        [
            "exact: tt.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Notation \"[ 'fsfun' 'for' default ]\" := (fsfun_of_ffun fsfun0_key [fmap] default) (at level 0, only parsing) : fun_scope.",
            "VernacNotation",
            "0a42c5b4d69db6a3030045273d70c3bd7c45131a"
        ],
        [
            "Notation \"[ 'fsfun' 'of' x => default ]\" := [fsfun for fun x => default] (at level 0, x at level 99, only parsing) : fun_scope.",
            "VernacNotation",
            "f4929f3ceb7099c567ab9e5dc832d50736666260"
        ],
        [
            "Notation \"[ 'fsfun' 'with' default ]\" := [fsfun of _ => default] (at level 0, only parsing) : fun_scope.",
            "VernacNotation",
            "c3adc060088d74f56b2d51af0721137741b26e3c"
        ],
        [
            "Notation \"[ 'fsfun' ]\" := [fsfun for _] (at level 0, format \"[ 'fsfun' ]\") : fun_scope.",
            "VernacNotation",
            "553fc8e03e5c232a429484a75bbef591a8b8c1f9"
        ],
        [
            "Section FsfunTheory.",
            "VernacBeginSection",
            "10500eb951ad207f19597887cf820e3faa60347a"
        ],
        [
            "Variables (key : unit) (K : choiceType) (V : eqType) (default : K -> V).",
            "VernacAssumption",
            "b9e26ed2d373a394992119fcd701634610bb2a39"
        ],
        [
            "Lemma fsfun_ffun (S : {fset K}) (h : S -> V) (x : K) : [fsfun[key] a : S => h a | default a] x = odflt (default x) (omap h (insub x)).",
            "VernacStartTheoremProof",
            "1e249bb279264772a51e3cf943b2863771bd8f73"
        ],
        [
            "by rewrite unlock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsfun_fun (S : {fset K}) (h : K -> V) (x : K) : [fsfun[key] a in S => h a | default a] x = if x \\in S then h x else (default x).",
            "VernacStartTheoremProof",
            "d5aaa2262b82046f8fc1552548fafbeb8d39ea9c"
        ],
        [
            "by rewrite fsfun_ffun; case: insubP => //= [u -> ->|/negPf ->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsfun0E : [fsfun for default] =1 default.",
            "VernacStartTheoremProof",
            "5cfaf1b9894e573b8d2aee65566f766fe41bb67b"
        ],
        [
            "by move=> x; rewrite unlock insubF ?inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition fsfunE := (fsfun_fun, fsfun0E).",
            "VernacDefinition",
            "28834f411d08821c085c6e83622140074a0c4fcc"
        ],
        [
            "Lemma finsupp_sub (S : {fset K}) (h : S -> V) : finsupp [fsfun[key] a : S => h a | default a] `<=` S.",
            "VernacStartTheoremProof",
            "c6763d5d8c9c2afd23c9916ee2ded4796999dae5"
        ],
        [
            "apply/fsubsetP => a; rewrite mem_finsupp unlock /=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by case: insubP => //=; rewrite eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma finsupp0 : finsupp [fsfun for default] = fset0.",
            "VernacStartTheoremProof",
            "71a846e0a311349417c5ac248f7c0e45cbe48d04"
        ],
        [
            "by apply/fsetP => x; rewrite !inE mem_finsupp fsfunE eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsfun0_inj : injective default -> injective [fsfun for default].",
            "VernacStartTheoremProof",
            "53b80b74062ec6aaff10075a25f612bfda1a9251"
        ],
        [
            "by move=> def_inj x y; rewrite !fsfunE => /def_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_finsupp0 x : x \\in finsupp [fsfun for default] = false.",
            "VernacStartTheoremProof",
            "e5d82f06336f3d2789e9fa63e79b7f822ff23f07"
        ],
        [
            "by rewrite finsupp0 inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FsfunTheory.",
            "VernacEndSegment",
            "12751137eb84580d3ad38383ca95b16eec7d280f"
        ],
        [
            "Module Import FsfunInE2.",
            "VernacDefineModule",
            "487c2a083bdb39f882c47e868abdabbe1abb94cd"
        ],
        [
            "Definition inE := (inE, in_finsupp0).",
            "VernacDefinition",
            "179f56ba9aa887047f2b93d5caf2a6c1ac7ae303"
        ],
        [
            "End FsfunInE2.",
            "VernacEndSegment",
            "1ee1c367054a8335233dc8fd1a5c0fe529268619"
        ],
        [
            "Section FsfunIdTheory.",
            "VernacBeginSection",
            "9201633c0331e676b589e80f36104986cfa3b83b"
        ],
        [
            "Variables (K : choiceType).",
            "VernacAssumption",
            "f12791760ea7a097b3e48c57d86546a92346fc64"
        ],
        [
            "Implicit Types (f g : {fsfun K -> K}).",
            "VernacReserve",
            "f46a73fe09a801cfd300c291028e1369dcb79f7a"
        ],
        [
            "Fact fsfun_comp_key : unit.",
            "VernacStartTheoremProof",
            "27f393edd900e025156edaa4270b1648a721e5bf"
        ],
        [
            "exact: tt.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition fsfun_comp g f : {fsfun _} := [fsfun[fsfun_comp_key] k in finsupp f `|` finsupp g => g (f k)].",
            "VernacDefinition",
            "085e00d3f75f08a10c7d57c80d40b39050214a49"
        ],
        [
            "Notation \"g \\o f\" := (fsfun_comp g f) : fsfun_scope.",
            "VernacNotation",
            "f9d6dcd0ba2060d49435d7cb4cf3a63f2360e64d"
        ],
        [
            "Lemma fscompE g f : (g \\o f)%fsfun =1 g \\o f.",
            "VernacStartTheoremProof",
            "17bc04ae4a10dcec4bfdd3f8482648bb4ac0c5e5"
        ],
        [
            "move=> k; rewrite fsfun_ffun; case: insubP => //= [u _ <- //|].",
            "VernacExtend",
            "d7214ac8fd48f4d1cd143edd9d16f6d28386a302"
        ],
        [
            "by rewrite inE => /norP [kNf kNg]; rewrite !fsfun_dflt.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fscomp0f : left_id [fsfun] fsfun_comp.",
            "VernacStartTheoremProof",
            "0406a15df1060b93ece3a5498301964da96082f1"
        ],
        [
            "by move=> f; apply/fsfunP=> k; rewrite fscompE /= fsfun0E.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fscompA : associative fsfun_comp.",
            "VernacStartTheoremProof",
            "50513dc4c7dfe101762412e2f12e54d8e5c72b63"
        ],
        [
            "by move=> f g h; apply/fsfunP => k; rewrite !fscompE /= !fscompE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fscomp_inj g f : injective f -> injective g -> injective (g \\o f)%fsfun.",
            "VernacStartTheoremProof",
            "8404ac021cbf57428576c4e81782eb6deb473d82"
        ],
        [
            "by move=> f_inj g_inj k k'; rewrite !fscompE => /= /g_inj /f_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition fsinjectiveb : pred {fsfun K -> K} := [pred f | (injectiveb [ffun a : finsupp f => f (val a)]) && [forall a : finsupp f, f (val a) \\in finsupp f]].",
            "VernacDefinition",
            "03cb08983ba79017d351bfa09439e8334d9cd47d"
        ],
        [
            "Let equivalent (Ps : seq Prop) := if Ps is P0 :: Ps then let fix aux (P : Prop) (Qs : seq Prop) := if Qs is Q :: Qs then (P -> Q) /\\ (aux Q Qs) else P -> P0 in aux P0 Ps else True.",
            "VernacDefinition",
            "1a85bfb08a02b36b3f70965a58dab0e406f7c5d9"
        ],
        [
            "Lemma fsinjective_subproof f : equivalent [:: injective f ; let S := finsupp f in {in S &, injective f} /\\ forall a : S, f (val a) \\in S ; exists2 S : {fset K}, (finsupp f `<=` S) & {in S &, injective f} /\\ forall a : S, f (val a) \\in S].",
            "VernacStartTheoremProof",
            "75bdd2c46224d63733f9242d00952d3fc79e907b"
        ],
        [
            "split => /= [f_inj|]; last split=> [[f_inj f_st]|[S fS [f_inj f_st]] a b].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "split=> [a b ? ?|a]; first exact: f_inj.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite mem_finsupp (inj_eq f_inj) -mem_finsupp; apply/valP.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by exists (finsupp f)=> //; apply: fsubset_refl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have Nfinsupp := contra (fsubsetP fS _).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "wlog /andP [aS bNS] : a b / (a \\in S) && (b \\notin S) => [hwlog|]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite (fsfun_dflt (Nfinsupp _ bNS)) => fb_eq_a.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by move: bNS; rewrite -fb_eq_a (f_st.[aS]).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [[aS|aNS] [bS|bNS]] := (boolP (a \\in S), boolP (b \\in S)); first 3 last.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite !fsfun_dflt // ?Nfinsupp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "exact: f_inj.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by apply: hwlog; rewrite aS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=> fab; symmetry; apply: hwlog; rewrite // bS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsinjectiveP f : reflect (injective f) (fsinjectiveb f).",
            "VernacStartTheoremProof",
            "53d6d24ff4ff767ae92de9cc4bb04c4cda216c08"
        ],
        [
            "have [H1 [H2 H3]]:= fsinjective_subproof f.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /fsinjectiveb; apply: (iffP idP)=> [|].",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by move=> /andP [/fsfun_injective_inP ? /forallP ?]; apply/H3/H2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=> /H1 [/fsfun_injective_inP ? /forallP ?]; apply/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsinjectivebP f : reflect (exists2 S : {fset K}, (finsupp f `<=` S) & {in S &, injective f} /\\ forall a : S, f (val a) \\in S) (fsinjectiveb f).",
            "VernacStartTheoremProof",
            "4d1a01ff858b628b902eb06c79c1514f6cfecac2"
        ],
        [
            "have [H1 [H2 H3]]:= fsinjective_subproof f.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: (iffP (fsinjectiveP _)) => //; by move=> /H1 /H2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FsfunIdTheory.",
            "VernacEndSegment",
            "71727cbdf0ab1cdfe633750791af765dfb06b5a6"
        ],
        [
            "Definition inE := inE.",
            "VernacDefinition",
            "fe4db5b4940e7526652749f9bf1a55f84d18cdc0"
        ],
        [
            "Export BigEnough.",
            "VernacImport",
            "1cb3821708dc4c2226d646008af99b73557a73db"
        ],
        [
            "Module BigEnoughFSet.",
            "VernacDefineModule",
            "a87781354443aa76cf0e204a651ea214b59e15a3"
        ],
        [
            "Definition big_rel_fsubset_class K : big_rel_class_of (@fsubset K).",
            "VernacDefinition",
            "e0ed26c20a016b02abde599e8dcafe0ba3c78e5d"
        ],
        [
            "exists fsubset (fun G => \\bigcup_(g <- G) g) => [|g s|g1 g2 j] //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite big_cons fsubsetUl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite big_cons => h; rewrite fsubsetU // h orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical big_enough_fset K := BigRelOf (big_rel_fsubset_class K).",
            "VernacDefinition",
            "e12c3528d57b60ddf480315127c51c2b0f368c19"
        ],
        [
            "Ltac fset_big_enough_trans := match goal with | [leq : is_true (?A `<=` ?B) |- is_true (?X `<=` ?B)] => apply: fsubset_trans leq; big_enough; olddone end.",
            "VernacExtend",
            "930dd939ca5427a38ec8517cdef51e77d870148c"
        ],
        [
            "Ltac done := do [fset_big_enough_trans|BigEnough.done].",
            "VernacExtend",
            "f44aad862b79e47d18c7dfae9e8a6930caaedcf8"
        ],
        [
            "Ltac pose_big_fset K i := evar (i : {fset K}); suff : closed i; first do [move=> _; instantiate (1 := bigger_than (@fsubset K) _) in (Value of i)].",
            "VernacExtend",
            "0356cb61ba44b1933a3818b4110935fea4f2ab95"
        ],
        [
            "End BigEnoughFSet.",
            "VernacEndSegment",
            "804260f29cc06c4ae9e1dcbc6f09217287eeda95"
        ]
    ],
    "proofs": [
        {
            "name": "mem_remF",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "by move=> us; rewrite mem_rem_uniq // inE eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffun0",
            "line_nb": 28,
            "steps": [
                {
                    "command": [
                        "by move=> T0; split; rewrite T0; exists nil.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "oextractE",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Some_oextract",
            "line_nb": 35,
            "steps": [
                {
                    "command": [
                        "by case: x x_ex.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Some_ojoin",
            "line_nb": 39,
            "steps": [
                {
                    "command": [
                        "by case : x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ojoinT",
            "line_nb": 42,
            "steps": [
                {
                    "command": [
                        "by case: x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_allsigs",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s IHs; rewrite size_cat size_map IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "allsigs_cat",
            "line_nb": 52,
            "steps": [
                {
                    "command": [
                        "by elim: s1 => //= x s1 ->; rewrite catA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "allsigs_comp",
            "line_nb": 56,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s ->; rewrite map_cat map_comp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "allsigsP",
            "line_nb": 65,
            "steps": [
                {
                    "command": [
                        "elim: s => [|x s IHs /=]; first by right=> [[p []]].",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite mem_cat; have [fxt_z | not_fxt_z] := altP mapP.",
                        "VernacExtend",
                        "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
                    ]
                },
                {
                    "command": [
                        "by left; have [y t_y ->] := fxt_z; exists (Tagged T y); rewrite mem_head.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: (iffP IHs) => [] [[x' y] /= [s_x' t_y def_z]]; exists (Tagged T y) => /=.",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "by rewrite !inE predU1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [def_x' | //] := predU1P s_x'.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by do [case: _ / def_x'; rewrite def_z map_f] in s_x' not_fxt_z *.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_allsigs",
            "line_nb": 74,
            "steps": [
                {
                    "command": [
                        "move=> eq_s eq_t z; apply/allsigsP/allsigsP=> [] [p fpz]; exists p => []; by move: fpz (fpz) => [???]; rewrite eq_s eq_t //= 1?eq_s.",
                        "VernacExtend",
                        "a9ea97ee9dd41a8b77349f5e0bd7080c0ea65a41"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_allsigs",
            "line_nb": 96,
            "steps": [
                {
                    "command": [
                        "elim: r1 => [|i1 r1 IHr1]; rewrite !(big_nil, big_cons)//= big_cat {}IHr1.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "by case: (r2 i1) => [|i2 r21]; rewrite /= !(big_nil, big_cons)//= big_map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "homo_ltn",
            "line_nb": 109,
            "steps": [
                {
                    "command": [
                        "by move=> /(@homo_ltn_in predT f) fr fS i j; apply: fr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "homo_leq_in",
            "line_nb": 112,
            "steps": [
                {
                    "command": [
                        "move=> r_refl r_trans Dcx /(homo_ltn_in r_trans Dcx) lt_r i j iD jD.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by rewrite leq_eqVlt => /predU1P[->//|/lt_r]; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "homo_leq",
            "line_nb": 116,
            "steps": [
                {
                    "command": [
                        "by move=> rrefl /(@homo_leq_in predT f r) fr fS i j; apply: fr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm",
            "line_nb": 137,
            "steps": [
                {
                    "command": [
                        "by rewrite perm_eq_sym chooseP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "uniq",
            "line_nb": 140,
            "steps": [
                {
                    "command": [
                        "by rewrite (perm_eq_uniq (perm _)) undup_uniq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "E",
            "line_nb": 143,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite (perm_eq_mem (perm _)) mem_undup.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq",
            "line_nb": 146,
            "steps": [
                {
                    "command": [
                        "split=> [eq_ss'|eq_ss' k]; last by rewrite -E eq_ss' E.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite /f; have peq_ss' : perm_eq (undup s) (undup s').",
                        "VernacExtend",
                        "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
                    ]
                },
                {
                    "command": [
                        "by apply: uniq_perm_eq; rewrite ?undup_uniq // => x; rewrite !mem_undup.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite (@choose_id _ _ _ (undup s')) //=; apply: eq_choose => x /=.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by apply: sym_left_transitive; [exact: perm_eq_sym|exact: perm_eq_trans|].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_sort_keys",
            "line_nb": 166,
            "steps": [
                {
                    "command": [
                        "by rewrite sort_keysE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_sort_keys_intro",
            "line_nb": 169,
            "steps": [
                {
                    "command": [
                        "by rewrite sort_keysE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sort_keys_nil",
            "line_nb": 172,
            "steps": [
                {
                    "command": [
                        "have := sort_keysE ([::] : seq K).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by case: sort_keys => //= a l /(_ a); rewrite mem_head.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sort_keys_id",
            "line_nb": 176,
            "steps": [
                {
                    "command": [
                        "by have /eq_sort_keys := sort_keysE ks.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "canonical_uniq",
            "line_nb": 180,
            "steps": [
                {
                    "command": [
                        "by move=> /eqP <-; exact: sort_keys_uniq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "canonical_sort_keys",
            "line_nb": 183,
            "steps": [
                {
                    "command": [
                        "by rewrite /canonical_keys sort_keys_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "canonical_eq_keys",
            "line_nb": 186,
            "steps": [
                {
                    "command": [
                        "move=> /eqP; case: _ /; move=> /eqP; case: _ / => eq_ks_ks'.",
                        "VernacExtend",
                        "fc1ec258bee181648c9cf0d67335f117ee57ee3e"
                    ]
                },
                {
                    "command": [
                        "by apply/eq_sort_keys => x; rewrite -sort_keysE eq_ks_ks' sort_keysE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_sort_keys",
            "line_nb": 190,
            "steps": [
                {
                    "command": [
                        "exact: perm_eq_size.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "keys_canonical",
            "line_nb": 214,
            "steps": [
                {
                    "command": [
                        "by case: A.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset_uniq",
            "line_nb": 217,
            "steps": [
                {
                    "command": [
                        "by rewrite canonical_uniq // keys_canonical.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_fset_sub_enum",
            "line_nb": 227,
            "steps": [
                {
                    "command": [
                        "by rewrite mem_undup mem_pmap -valK map_f // fsvalP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset_sub_pickleK",
            "line_nb": 237,
            "steps": [
                {
                    "command": [
                        "rewrite /fset_sub_unpickle => x.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite (nth_map x) ?nth_index ?index_mem ?mem_fset_sub_enum.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_fsetE",
            "line_nb": 246,
            "steps": [
                {
                    "command": [
                        "by rewrite enumT unlock val_fset_sub_enum.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardfE",
            "line_nb": 249,
            "steps": [
                {
                    "command": [
                        "by rewrite cardE enum_fsetE size_map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetsubE",
            "line_nb": 259,
            "steps": [
                {
                    "command": [
                        "by apply/val_inj => /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "seq_fsetE",
            "line_nb": 270,
            "steps": [
                {
                    "command": [
                        "by move=> a; rewrite [seq_fset]unlock sort_keysE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_seq_fset",
            "line_nb": 273,
            "steps": [
                {
                    "command": [
                        "by rewrite [seq_fset]unlock /= size_sort_keys.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "seq_fset_uniq",
            "line_nb": 276,
            "steps": [
                {
                    "command": [
                        "by rewrite [seq_fset]unlock /= sort_keys_uniq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "seq_fset_perm",
            "line_nb": 279,
            "steps": [
                {
                    "command": [
                        "by rewrite [seq_fset]unlock //= sort_keys_perm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_finpred_uniq",
            "line_nb": 294,
            "steps": [
                {
                    "command": [
                        "by case: fpT p => ??? [s sE] p; rewrite sE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_finpredE",
            "line_nb": 297,
            "steps": [
                {
                    "command": [
                        "by case: fpT p => ??? [s sE] p x; rewrite sE -topredE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkFinPredType_of_subproof",
            "line_nb": 300,
            "steps": [
                {
                    "command": [
                        "by move=> p x; rewrite topredE pred_fsetE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_finite_uniq",
            "line_nb": 306,
            "steps": [
                {
                    "command": [
                        "by case: p.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_finiteE",
            "line_nb": 309,
            "steps": [
                {
                    "command": [
                        "by case: p.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_fin_uniq",
            "line_nb": 314,
            "steps": [
                {
                    "command": [
                        "by case: p => ?[].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_finE",
            "line_nb": 317,
            "steps": [
                {
                    "command": [
                        "by case: p => ?[].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_finmem_uniq",
            "line_nb": 324,
            "steps": [
                {
                    "command": [
                        "by case: p => ?[].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_finmemE",
            "line_nb": 327,
            "steps": [
                {
                    "command": [
                        "by case: p => ?[].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subfinset_finpred_obligation_1",
            "line_nb": 341,
            "steps": [
                {
                    "command": [
                        "by rewrite filter_uniq// enum_finmem_uniq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subfinset_finpred_obligation_2",
            "line_nb": 344,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE !mem_filter andbC enum_finmemE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imfsetE",
            "line_nb": 360,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imfset2E",
            "line_nb": 363,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imfset_key",
            "line_nb": 378,
            "steps": [
                {
                    "command": [
                        "exact: tt.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset1_key",
            "line_nb": 422,
            "steps": [
                {
                    "command": [
                        "exact: tt.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetU_key",
            "line_nb": 426,
            "steps": [
                {
                    "command": [
                        "exact: tt.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetI_key",
            "line_nb": 430,
            "steps": [
                {
                    "command": [
                        "exact: tt.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetD_key",
            "line_nb": 434,
            "steps": [
                {
                    "command": [
                        "exact: tt.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetM_key",
            "line_nb": 438,
            "steps": [
                {
                    "command": [
                        "exact: tt.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imfsetP",
            "line_nb": 506,
            "steps": [
                {
                    "command": [
                        "rewrite unlock seq_fsetE /=; apply: (iffP mapP) => [] [x xp eqkf]; by exists x => //=; move: xp; rewrite enum_finmemE.",
                        "VernacExtend",
                        "96e34964c36bc94366c4f8af7a32b94c647d6647"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_imfset",
            "line_nb": 509,
            "steps": [
                {
                    "command": [
                        "by move=> px; apply/imfsetP; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imfset_rec",
            "line_nb": 512,
            "steps": [
                {
                    "command": [
                        "move=> PP v; have /imfsetP [k pk vv_eq] := valP v.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "pose vP := in_imfset f pk; suff -> : P v = P [` vP] by apply: PP.",
                        "VernacExtend",
                        "d0274a903cf620f2499167643e4b545453515c1d"
                    ]
                },
                {
                    "command": [
                        "by congr P; apply/val_inj => /=; rewrite vv_eq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_imfset",
            "line_nb": 517,
            "steps": [
                {
                    "command": [
                        "by move=> f_inj x; rewrite unlock seq_fsetE mem_map// enum_finmemE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_imfset2",
            "line_nb": 526,
            "steps": [
                {
                    "command": [
                        "by move=> xD1 yD2; apply/imfset2P; exists x => //; exists y.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_imfset",
            "line_nb": 536,
            "steps": [
                {
                    "command": [
                        "move=> f_inj; rewrite unlock -[X in perm_eq _ X]undup_id ?seq_fset_perm//.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "rewrite map_inj_in_uniq ?enum_finmem_uniq // => ??.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite ?enum_finmemE; apply: f_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_fset",
            "line_nb": 554,
            "steps": [
                {
                    "command": [
                        "by rewrite mem_imfset; apply: inj_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "val_in_fset",
            "line_nb": 557,
            "steps": [
                {
                    "command": [
                        "by rewrite mem_imfset ?in_finmempred //; exact: val_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_fset_val",
            "line_nb": 560,
            "steps": [
                {
                    "command": [
                        "have [a _ <- /=|kNA] := insubP; first by rewrite val_in_fset.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/imfsetP => [] [a _ k_def]; move: kNA; rewrite k_def [_ \\in _]valP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_fset_valT",
            "line_nb": 564,
            "steps": [
                {
                    "command": [
                        "by rewrite in_fset_val insubT /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_fset_valF",
            "line_nb": 571,
            "steps": [
                {
                    "command": [
                        "by apply: contraNF => /imfsetP[/= a Xa->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_fset_nil",
            "line_nb": 574,
            "steps": [
                {
                    "command": [
                        "by rewrite !mem_imfset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_fset_cons",
            "line_nb": 577,
            "steps": [
                {
                    "command": [
                        "by rewrite !mem_imfset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_fset_cat",
            "line_nb": 580,
            "steps": [
                {
                    "command": [
                        "by rewrite !mem_imfset//= mem_cat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_in_imfset",
            "line_nb": 584,
            "steps": [
                {
                    "command": [
                        "move=> f_inj; rewrite unlock /= size_seq_fset undup_id ?size_map//.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "rewrite map_inj_in_uniq ?enum_finmem_uniq// => ??.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite !enum_finmemE; apply: f_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_imfset",
            "line_nb": 589,
            "steps": [
                {
                    "command": [
                        "by move=> f_inj; rewrite card_in_imfset //= => x y ? ?; apply: f_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_imfset_card",
            "line_nb": 592,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock size_seq_fset (leq_trans (size_undup _)) ?size_map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetP",
            "line_nb": 599,
            "steps": [
                {
                    "command": [
                        "by split=> [eqAB|-> //]; apply/val_inj/canonical_eq_keys => //= a.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_fsetP",
            "line_nb": 603,
            "steps": [
                {
                    "command": [
                        "have [xA|xNA] := boolP (x \\in A); last by constructor.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by have {2}-> : x = val [` xA] by []; constructor.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset_eqP",
            "line_nb": 607,
            "steps": [
                {
                    "command": [
                        "exact: (equivP eqP (iff_sym fsetP)).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_fset0",
            "line_nb": 610,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_fset1",
            "line_nb": 613,
            "steps": [
                {
                    "command": [
                        "by rewrite !in_fset_ orbF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_fsetU",
            "line_nb": 616,
            "steps": [
                {
                    "command": [
                        "by rewrite !in_fset_.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_fset1U",
            "line_nb": 619,
            "steps": [
                {
                    "command": [
                        "by rewrite in_fsetU in_fset1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_fsetI",
            "line_nb": 622,
            "steps": [
                {
                    "command": [
                        "by rewrite in_fset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_fsetD",
            "line_nb": 625,
            "steps": [
                {
                    "command": [
                        "by rewrite in_fset andbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_fsetD1",
            "line_nb": 628,
            "steps": [
                {
                    "command": [
                        "by rewrite in_fsetD in_fset1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_fsetM",
            "line_nb": 631,
            "steps": [
                {
                    "command": [
                        "by case: u => /= x y; rewrite mem_imfset2//= => -[??] [??] [-> ->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetIC",
            "line_nb": 636,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP => a; rewrite !inE andbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetUC",
            "line_nb": 639,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP => a; rewrite !inE orbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset0I",
            "line_nb": 642,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP => x; rewrite !inE andFb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetI0",
            "line_nb": 645,
            "steps": [
                {
                    "command": [
                        "by rewrite fsetIC fset0I.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetIA",
            "line_nb": 648,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite !inE andbA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetICA",
            "line_nb": 651,
            "steps": [
                {
                    "command": [
                        "by rewrite !fsetIA (fsetIC A).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetIAC",
            "line_nb": 654,
            "steps": [
                {
                    "command": [
                        "by rewrite -!fsetIA (fsetIC B).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetIACA",
            "line_nb": 657,
            "steps": [
                {
                    "command": [
                        "by rewrite -!fsetIA (fsetICA B).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetIid",
            "line_nb": 660,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite inE andbb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetIIl",
            "line_nb": 663,
            "steps": [
                {
                    "command": [
                        "by rewrite fsetIA !(fsetIAC _ C) -(fsetIA _ C) fsetIid.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetIIr",
            "line_nb": 666,
            "steps": [
                {
                    "command": [
                        "by rewrite !(fsetIC A) fsetIIl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetUA",
            "line_nb": 669,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP => x; rewrite !inE orbA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetUCA",
            "line_nb": 672,
            "steps": [
                {
                    "command": [
                        "by rewrite !fsetUA (fsetUC B).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetUAC",
            "line_nb": 675,
            "steps": [
                {
                    "command": [
                        "by rewrite -!fsetUA (fsetUC B).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetUACA",
            "line_nb": 678,
            "steps": [
                {
                    "command": [
                        "by rewrite -!fsetUA (fsetUCA B).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetUid",
            "line_nb": 681,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite inE orbb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetUUl",
            "line_nb": 684,
            "steps": [
                {
                    "command": [
                        "by rewrite fsetUA !(fsetUAC _ C) -(fsetUA _ C) fsetUid.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetUUr",
            "line_nb": 687,
            "steps": [
                {
                    "command": [
                        "by rewrite !(fsetUC A) fsetUUl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetIUr",
            "line_nb": 690,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite !inE andb_orr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetIUl",
            "line_nb": 693,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite !inE andb_orl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetUIr",
            "line_nb": 696,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite !inE orb_andr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetUIl",
            "line_nb": 699,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite !inE orb_andl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetUKC",
            "line_nb": 702,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite !inE orbK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetUK",
            "line_nb": 705,
            "steps": [
                {
                    "command": [
                        "by rewrite fsetUC fsetUKC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetKUC",
            "line_nb": 708,
            "steps": [
                {
                    "command": [
                        "by rewrite fsetIC fsetUK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetKU",
            "line_nb": 711,
            "steps": [
                {
                    "command": [
                        "by rewrite fsetIC fsetUKC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetIKC",
            "line_nb": 714,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite !inE andbK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetIK",
            "line_nb": 717,
            "steps": [
                {
                    "command": [
                        "by rewrite fsetIC fsetIKC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetKIC",
            "line_nb": 720,
            "steps": [
                {
                    "command": [
                        "by rewrite fsetUC fsetIK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetKI",
            "line_nb": 723,
            "steps": [
                {
                    "command": [
                        "by rewrite fsetIC fsetKIC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetUKid",
            "line_nb": 726,
            "steps": [
                {
                    "command": [
                        "by rewrite -fsetUA fsetUid.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetUKidC",
            "line_nb": 729,
            "steps": [
                {
                    "command": [
                        "by rewrite fsetUAC fsetUid.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetKUid",
            "line_nb": 732,
            "steps": [
                {
                    "command": [
                        "by rewrite fsetUA fsetUid.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetKUidC",
            "line_nb": 735,
            "steps": [
                {
                    "command": [
                        "by rewrite fsetUCA fsetUid.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetIKid",
            "line_nb": 738,
            "steps": [
                {
                    "command": [
                        "by rewrite -fsetIA fsetIid.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetIKidC",
            "line_nb": 741,
            "steps": [
                {
                    "command": [
                        "by rewrite fsetIAC fsetIid.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetKIid",
            "line_nb": 744,
            "steps": [
                {
                    "command": [
                        "by rewrite fsetIA fsetIid.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetKIidC",
            "line_nb": 747,
            "steps": [
                {
                    "command": [
                        "by rewrite fsetICA fsetIid.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubsetP",
            "line_nb": 750,
            "steps": [
                {
                    "command": [
                        "apply: (iffP fset_eqP) => AsubB a; first by rewrite -AsubB inE => /andP[].",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite inE; have [/AsubB|] := boolP (a \\in A).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset_sub_val",
            "line_nb": 754,
            "steps": [
                {
                    "command": [
                        "by apply/fsubsetP => k /in_fset_valP [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset_sub",
            "line_nb": 757,
            "steps": [
                {
                    "command": [
                        "by apply/fsubsetP => k; rewrite in_fset inE /= => /andP [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetD_eq0",
            "line_nb": 760,
            "steps": [
                {
                    "command": [
                        "apply/fset_eqP/fsubsetP => sAB a.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by move=> aA; have := sAB a; rewrite !inE aA andbT => /negPn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite !inE andbC; apply/negP => /andP [/sAB ->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubset_refl",
            "line_nb": 765,
            "steps": [
                {
                    "command": [
                        "exact/fsubsetP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fincl_fsub",
            "line_nb": 775,
            "steps": [
                {
                    "command": [
                        "by rewrite inE /= (valP a).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_fsub",
            "line_nb": 778,
            "steps": [
                {
                    "command": [
                        "by rewrite inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subset_fsubE",
            "line_nb": 781,
            "steps": [
                {
                    "command": [
                        "move=> sAC sBC; apply/subsetP/fsubsetP => sAB a; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !inE => /sAB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by move=> aA; have := sAB _ (fincl_fsub sAC [` aA]); rewrite inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubset_trans",
            "line_nb": 786,
            "steps": [
                {
                    "command": [
                        "by move=>??? s t ; apply/fsubsetP => a /(fsubsetP s) /(fsubsetP t).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subset_fsub",
            "line_nb": 789,
            "steps": [
                {
                    "command": [
                        "by move=> sAB sBC; rewrite subset_fsubE // (fsubset_trans sAB).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetIidPl",
            "line_nb": 792,
            "steps": [
                {
                    "command": [
                        "exact: eqP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetIidPr",
            "line_nb": 795,
            "steps": [
                {
                    "command": [
                        "by rewrite fsetIC; apply: fsetIidPl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubsetIidl",
            "line_nb": 798,
            "steps": [
                {
                    "command": [
                        "by apply/fsubsetP/fsubsetP=> sAB a aA; have := sAB _ aA; rewrite !inE ?aA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubsetIidr",
            "line_nb": 801,
            "steps": [
                {
                    "command": [
                        "by rewrite fsetIC fsubsetIidl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetUidPr",
            "line_nb": 804,
            "steps": [
                {
                    "command": [
                        "apply: (iffP fsubsetP) => sAB; last by move=> a aA; rewrite -sAB inE aA.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/fsetP => b; rewrite inE; have [/sAB|//] := boolP (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetUidPl",
            "line_nb": 808,
            "steps": [
                {
                    "command": [
                        "by rewrite fsetUC; apply/fsetUidPr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubsetUl",
            "line_nb": 811,
            "steps": [
                {
                    "command": [
                        "by apply/fsubsetP => a; rewrite inE => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubsetUr",
            "line_nb": 815,
            "steps": [
                {
                    "command": [
                        "by rewrite fsetUC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubsetU1",
            "line_nb": 819,
            "steps": [
                {
                    "command": [
                        "by rewrite fsubsetUr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubsetU",
            "line_nb": 823,
            "steps": [
                {
                    "command": [
                        "by move=> /orP [] /fsubset_trans ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fincl_inj",
            "line_nb": 826,
            "steps": [
                {
                    "command": [
                        "by move=> a b [eq_ab]; apply: val_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsub_inj",
            "line_nb": 830,
            "steps": [
                {
                    "command": [
                        "move=> A A'; rewrite -!topredE /= => sAB sA'B /setP eqAA'; apply/fsetP => a.",
                        "VernacExtend",
                        "1947c7e9e09bd3bd1687e7b79563947160de37d3"
                    ]
                },
                {
                    "command": [
                        "apply/idP/idP => mem_a.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by have := eqAA' (fincl sAB [` mem_a]); rewrite !inE // => <-.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by have := eqAA' (fincl sA'B [` mem_a]); rewrite !inE // => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqEfsubset",
            "line_nb": 837,
            "steps": [
                {
                    "command": [
                        "apply/eqP/andP => [-> //|[/fsubsetP AB /fsubsetP BA]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by apply/fsetP=> x; apply/idP/idP=> [/AB|/BA].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subEfproper",
            "line_nb": 841,
            "steps": [
                {
                    "command": [
                        "by rewrite eqEfsubset -andb_orr orbN andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fproper_sub",
            "line_nb": 844,
            "steps": [
                {
                    "command": [
                        "by rewrite subEfproper orbC => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqVfproper",
            "line_nb": 847,
            "steps": [
                {
                    "command": [
                        "by rewrite subEfproper => /predU1P.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fproperEneq",
            "line_nb": 850,
            "steps": [
                {
                    "command": [
                        "by rewrite andbC eqEfsubset negb_and andb_orr andbN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fproper_neq",
            "line_nb": 853,
            "steps": [
                {
                    "command": [
                        "by rewrite fproperEneq; case/andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fproper_irrefl",
            "line_nb": 856,
            "steps": [
                {
                    "command": [
                        "by rewrite fproperEneq eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqEfproper",
            "line_nb": 859,
            "steps": [
                {
                    "command": [
                        "by rewrite negb_and negbK andb_orr andbN eqEfsubset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_fsub",
            "line_nb": 862,
            "steps": [
                {
                    "command": [
                        "by move=> sAB; rewrite cardfE fsubE card_imset //; apply: fincl_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqEfcard",
            "line_nb": 865,
            "steps": [
                {
                    "command": [
                        "rewrite -(inj_in_eq (@fsub_inj (A `|` B))) -?topredE //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite eqEcard !(@subset_fsubE (A `|` B)) ?(@card_fsub (A `|` B)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fproperEcard",
            "line_nb": 869,
            "steps": [
                {
                    "command": [
                        "by rewrite fproperEneq ltnNge andbC eqEfcard; case: (A `<=` B).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubset_leqif_cards",
            "line_nb": 872,
            "steps": [
                {
                    "command": [
                        "rewrite -!(@card_fsub (A `|` B)) // -(@subset_fsubE (A `|` B)) //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by move=> /subset_leqif_cards; rewrite (inj_in_eq (@fsub_inj _)) -?topredE /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsub0set",
            "line_nb": 876,
            "steps": [
                {
                    "command": [
                        "by apply/fsubsetP=> x; rewrite inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubset0",
            "line_nb": 880,
            "steps": [
                {
                    "command": [
                        "by rewrite eqEfsubset fsub0set andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fproper0",
            "line_nb": 883,
            "steps": [
                {
                    "command": [
                        "by rewrite /fproper fsub0set fsubset0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fproperE",
            "line_nb": 886,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubEproper",
            "line_nb": 889,
            "steps": [
                {
                    "command": [
                        "by rewrite fproperEneq; case: eqP => //= ->; apply: fsubset_refl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubset_leq_card",
            "line_nb": 892,
            "steps": [
                {
                    "command": [
                        "by move=> /fsubset_leqif_cards ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fproper_ltn_card",
            "line_nb": 895,
            "steps": [
                {
                    "command": [
                        "by rewrite fproperEcard => /andP [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubset_cardP",
            "line_nb": 898,
            "steps": [
                {
                    "command": [
                        "move=> eq_cardAB; apply: (iffP idP) => [/eqVfproper [->//|]|/fsetP -> //].",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by rewrite fproperEcard eq_cardAB ltnn andbF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fproper_sub_trans",
            "line_nb": 902,
            "steps": [
                {
                    "command": [
                        "rewrite !fproperEcard => /andP [sAB lt_AB] sBC.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite (fsubset_trans sAB) //= (leq_trans lt_AB) // fsubset_leq_card.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsub_proper_trans",
            "line_nb": 906,
            "steps": [
                {
                    "command": [
                        "rewrite !fproperEcard => sAB /andP [sBC lt_BC].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite (fsubset_trans sAB) //= (leq_ltn_trans _ lt_BC) // fsubset_leq_card.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubset_neq0",
            "line_nb": 910,
            "steps": [
                {
                    "command": [
                        "by rewrite -!fproper0 => sAB /fproper_sub_trans->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsub0",
            "line_nb": 913,
            "steps": [
                {
                    "command": [
                        "by apply/setP => x; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubT",
            "line_nb": 916,
            "steps": [
                {
                    "command": [
                        "by apply/setP => x; rewrite !inE (valP x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsub1",
            "line_nb": 919,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE; congr eq_op.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubU",
            "line_nb": 922,
            "steps": [
                {
                    "command": [
                        "by apply/setP => x; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubI",
            "line_nb": 925,
            "steps": [
                {
                    "command": [
                        "by apply/setP => x; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubD",
            "line_nb": 928,
            "steps": [
                {
                    "command": [
                        "by apply/setP => x; rewrite !inE andbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubD1",
            "line_nb": 931,
            "steps": [
                {
                    "command": [
                        "by rewrite fsubD fsub1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsub_eq0",
            "line_nb": 934,
            "steps": [
                {
                    "command": [
                        "by move=> sAB; rewrite -fsub0 (inj_in_eq (@fsub_inj _)) -?topredE /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset_0Vmem",
            "line_nb": 937,
            "steps": [
                {
                    "command": [
                        "have [|[x mem_x]] := set_0Vmem (fsub A A); last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by right; exists (val x); rewrite inE // in mem_x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by move=> /eqP; rewrite fsub_eq0 // => /eqP; left.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset1P",
            "line_nb": 942,
            "steps": [
                {
                    "command": [
                        "by rewrite inE; exact: eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset11",
            "line_nb": 945,
            "steps": [
                {
                    "command": [
                        "by rewrite inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset1_inj",
            "line_nb": 948,
            "steps": [
                {
                    "command": [
                        "by move=> a b eqsab; apply/fset1P; rewrite -eqsab fset11.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset1UP",
            "line_nb": 951,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE; exact: predU1P.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset_cons",
            "line_nb": 954,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite in_fset_cons !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset_nil",
            "line_nb": 957,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite in_fset_nil.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset_cat",
            "line_nb": 960,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite !inE !in_fset_cat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset1U1",
            "line_nb": 963,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset1Ur",
            "line_nb": 966,
            "steps": [
                {
                    "command": [
                        "by move=> Bx; rewrite !inE predU1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetU1l",
            "line_nb": 969,
            "steps": [
                {
                    "command": [
                        "by move=> Ax; rewrite !inE Ax.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetU1r",
            "line_nb": 972,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE eqxx orbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetD1P",
            "line_nb": 975,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE; exact: andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetD11",
            "line_nb": 978,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetD1K",
            "line_nb": 981,
            "steps": [
                {
                    "command": [
                        "by move=> Aa; apply/fsetP=> x; rewrite !inE; case: eqP => // ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetU1K",
            "line_nb": 984,
            "steps": [
                {
                    "command": [
                        "by move/negPf=> nBa; apply/fsetP=> x; rewrite !inE; case: eqP => // ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset2P",
            "line_nb": 987,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE; apply: (iffP orP) => [] [] /eqP ->; [left|right|left|right].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_fset2",
            "line_nb": 990,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset21",
            "line_nb": 993,
            "steps": [
                {
                    "command": [
                        "by rewrite fset1U1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset22",
            "line_nb": 996,
            "steps": [
                {
                    "command": [
                        "by rewrite in_fset2 eqxx orbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetUP",
            "line_nb": 999,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE; exact: orP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetULVR",
            "line_nb": 1002,
            "steps": [
                {
                    "command": [
                        "by rewrite inE; case: (x \\in A); [left|right].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetUS",
            "line_nb": 1005,
            "steps": [
                {
                    "command": [
                        "move=> sAB; apply/fsubsetP=> x; rewrite !inE.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by case: (x \\in C) => //; exact: (fsubsetP sAB).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetSU",
            "line_nb": 1009,
            "steps": [
                {
                    "command": [
                        "by move=> sAB; rewrite -!(fsetUC C) fsetUS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetUSS",
            "line_nb": 1012,
            "steps": [
                {
                    "command": [
                        "by move=> /(fsetSU B) /fsubset_trans sAC /(fsetUS C)/sAC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset0U",
            "line_nb": 1015,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP => x; rewrite !inE orFb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetU0",
            "line_nb": 1018,
            "steps": [
                {
                    "command": [
                        "by rewrite fsetUC fset0U.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetIP",
            "line_nb": 1021,
            "steps": [
                {
                    "command": [
                        "by rewrite inE; apply: andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetIS",
            "line_nb": 1024,
            "steps": [
                {
                    "command": [
                        "move=> sAB; apply/fsubsetP=> x; rewrite !inE.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by case: (x \\in C) => //; exact: (fsubsetP sAB).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetSI",
            "line_nb": 1028,
            "steps": [
                {
                    "command": [
                        "by move=> sAB; rewrite -!(fsetIC C) fsetIS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetISS",
            "line_nb": 1031,
            "steps": [
                {
                    "command": [
                        "by move=> /(fsetSI B) /fsubset_trans sAC /(fsetIS C) /sAC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetDP",
            "line_nb": 1034,
            "steps": [
                {
                    "command": [
                        "by rewrite inE andbC; apply: andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetSD",
            "line_nb": 1037,
            "steps": [
                {
                    "command": [
                        "move=> sAB; apply/fsubsetP=> x; rewrite !inE.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by case: (x \\in C) => //; exact: (fsubsetP sAB).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetDS",
            "line_nb": 1041,
            "steps": [
                {
                    "command": [
                        "move=> sAB; apply/fsubsetP=> x; rewrite !inE ![_ && (_ \\in _)]andbC.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by case: (x \\in C) => //; apply: contra; exact: (fsubsetP sAB).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetDSS",
            "line_nb": 1045,
            "steps": [
                {
                    "command": [
                        "by move=> /(fsetSD B) /fsubset_trans sAC /(fsetDS C) /sAC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetD0",
            "line_nb": 1048,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset0D",
            "line_nb": 1051,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite !inE andbF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetDv",
            "line_nb": 1054,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite !inE andNb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetID",
            "line_nb": 1057,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite !inE; do ?case: (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetDUl",
            "line_nb": 1060,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite !inE; do ?case: (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetDUr",
            "line_nb": 1063,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite !inE; do ?case: (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetDIl",
            "line_nb": 1066,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite !inE; do ?case: (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetIDA",
            "line_nb": 1069,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite !inE; do ?case: (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetIDAC",
            "line_nb": 1072,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite !inE; do ?case: (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetDIr",
            "line_nb": 1075,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite !inE; do ?case: (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetDDl",
            "line_nb": 1078,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite !inE; do ?case: (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetDDr",
            "line_nb": 1081,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite !inE; do ?case: (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetDK",
            "line_nb": 1084,
            "steps": [
                {
                    "command": [
                        "by rewrite fsetDDr => /fsetIidPr->; rewrite fsetDv fset0U.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetUDl",
            "line_nb": 1087,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite !inE; do ?case: (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetUDr",
            "line_nb": 1090,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite !inE; do ?case: (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubsetIl",
            "line_nb": 1093,
            "steps": [
                {
                    "command": [
                        "by apply/fsubsetP=> x; rewrite inE => /andP [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubsetIr",
            "line_nb": 1096,
            "steps": [
                {
                    "command": [
                        "by apply/fsubsetP=> x; rewrite inE => /andP [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubsetDl",
            "line_nb": 1099,
            "steps": [
                {
                    "command": [
                        "by apply/fsubsetP=> x; rewrite inE => /andP [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubD1set",
            "line_nb": 1102,
            "steps": [
                {
                    "command": [
                        "by rewrite fsubsetDl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_finset",
            "line_nb": 1110,
            "steps": [
                {
                    "command": [
                        "by rewrite card_imfset //= -cardE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_fset",
            "line_nb": 1113,
            "steps": [
                {
                    "command": [
                        "by rewrite card_imfset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_fseq",
            "line_nb": 1116,
            "steps": [
                {
                    "command": [
                        "by rewrite card_imfset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardfs0",
            "line_nb": 1119,
            "steps": [
                {
                    "command": [
                        "by rewrite -(@card_fsub fset0) // fsub0 cards0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardfT0",
            "line_nb": 1122,
            "steps": [
                {
                    "command": [
                        "by rewrite -cardfE cardfs0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardfs_eq0",
            "line_nb": 1125,
            "steps": [
                {
                    "command": [
                        "by rewrite -(@card_fsub A) // cards_eq0 fsub_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardfs0_eq",
            "line_nb": 1128,
            "steps": [
                {
                    "command": [
                        "by move=> /eqP; rewrite cardfs_eq0 => /eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardfs_gt0",
            "line_nb": 1135,
            "steps": [
                {
                    "command": [
                        "by rewrite lt0n cardfs_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardfs1",
            "line_nb": 1138,
            "steps": [
                {
                    "command": [
                        "by rewrite card_imfset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardfsUI",
            "line_nb": 1141,
            "steps": [
                {
                    "command": [
                        "rewrite -!(@card_fsub (A `|` B)) ?(fsubset_trans (fsubsetIl _ _)) //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite fsubU fsubI cardsUI.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardfsU",
            "line_nb": 1145,
            "steps": [
                {
                    "command": [
                        "by rewrite -cardfsUI addnK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardfsI",
            "line_nb": 1148,
            "steps": [
                {
                    "command": [
                        "by rewrite -cardfsUI addKn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardfsID",
            "line_nb": 1151,
            "steps": [
                {
                    "command": [
                        "by rewrite -!(@card_fsub A) // fsubI fsubD cardsID.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardfsD",
            "line_nb": 1154,
            "steps": [
                {
                    "command": [
                        "by rewrite -(cardfsID B A) addKn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_fset1U",
            "line_nb": 1157,
            "steps": [
                {
                    "command": [
                        "move=> aA; apply/fsetP => x; rewrite !inE orbC.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by have [//|/=] := boolP (_ \\in A); apply: contraNF => /eqP ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_fsetD1",
            "line_nb": 1161,
            "steps": [
                {
                    "command": [
                        "move=> aA; apply/fsetP => x; rewrite !inE andbC.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by have [/= xA|//] := boolP (_ \\in A); apply: contraNneq aA => <-.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetI1",
            "line_nb": 1165,
            "steps": [
                {
                    "command": [
                        "apply/fsetP => x; rewrite (fun_if (fun X => _ \\in X)) !inE.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by have [[->|?] []] := (altP (x =P a), boolP (a \\in A)); rewrite ?andbF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardfsU1",
            "line_nb": 1169,
            "steps": [
                {
                    "command": [
                        "have [aA|aNA] := boolP (a \\in A); first by rewrite mem_fset1U.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite cardfsU -addnBA ?fsubset_leq_card // fsetIC -cardfsD.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite mem_fsetD1 // cardfs1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardfs2",
            "line_nb": 1174,
            "steps": [
                {
                    "command": [
                        "by rewrite !cardfsU1 cardfs1 inE addn1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardfsD1",
            "line_nb": 1177,
            "steps": [
                {
                    "command": [
                        "rewrite -(cardfsID [fset a]) fsetI1 (fun_if (fun A => #|` A|)).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite cardfs0 cardfs1; case: (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsub1set",
            "line_nb": 1181,
            "steps": [
                {
                    "command": [
                        "rewrite -(@subset_fsubE (x |` A)) // fsub1 ?fset1U1 // => xxA.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite sub1set inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubset1",
            "line_nb": 1190,
            "steps": [
                {
                    "command": [
                        "rewrite eqEfcard cardfs1 -cardfs_eq0 orbC andbC.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by case: posnP => // A0; rewrite (cardfs0_eq A0) fsub0set.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardfsDS",
            "line_nb": 1195,
            "steps": [
                {
                    "command": [
                        "by rewrite cardfsD => /fsetIidPr->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubIset",
            "line_nb": 1198,
            "steps": [
                {
                    "command": [
                        "by case/orP; apply: fsubset_trans; rewrite (fsubsetIl, fsubsetIr).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubsetI",
            "line_nb": 1201,
            "steps": [
                {
                    "command": [
                        "rewrite !(sameP fsetIidPl eqP) fsetIA; have [-> //| ] := altP (A `&` B =P A).",
                        "VernacExtend",
                        "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
                    ]
                },
                {
                    "command": [
                        "by apply: contraNF => /eqP <-; rewrite -fsetIA -fsetIIl fsetIAC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubsetIP",
            "line_nb": 1205,
            "steps": [
                {
                    "command": [
                        "by rewrite fsubsetI; exact: andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubUset",
            "line_nb": 1208,
            "steps": [
                {
                    "command": [
                        "apply/idP/idP => [subA|/andP [AB CA]]; last by rewrite -[A]fsetUid fsetUSS.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !(fsubset_trans _ subA).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubUsetP",
            "line_nb": 1212,
            "steps": [
                {
                    "command": [
                        "by rewrite fsubUset; exact: andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubDset",
            "line_nb": 1215,
            "steps": [
                {
                    "command": [
                        "apply/fsubsetP/fsubsetP=> sABC x; rewrite !inE.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by case Bx: (x \\in B) => // Ax; rewrite sABC ?in_fsetD ?Bx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by case Bx: (x \\in B) => //; move/sABC; rewrite inE Bx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetU_eq0",
            "line_nb": 1220,
            "steps": [
                {
                    "command": [
                        "by rewrite -!fsubset0 fsubUset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubsetD1",
            "line_nb": 1223,
            "steps": [
                {
                    "command": [
                        "do !rewrite -(@subset_fsubE (x |` A `|` B)) ?fsubDset ?fsetUA // 1?fsetUAC //.",
                        "VernacExtend",
                        "2ed5ae5c7a1513e882f170a2462d7a7c3c1ca435"
                    ]
                },
                {
                    "command": [
                        "rewrite fsubD1 => [|mem_x]; first by rewrite -fsetUA fset1U1.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite subsetD1 // inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubsetD1P",
            "line_nb": 1228,
            "steps": [
                {
                    "command": [
                        "by rewrite fsubsetD1; exact: andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubsetPn",
            "line_nb": 1231,
            "steps": [
                {
                    "command": [
                        "rewrite -fsetD_eq0; apply: (iffP (fset0Pn _)) => [[x]|[x xA xNB]].",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite inE => /andP[]; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by exists x; rewrite inE xA xNB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fproperD1",
            "line_nb": 1236,
            "steps": [
                {
                    "command": [
                        "move=> Ax; rewrite fproperE fsubsetDl; apply/fsubsetPn; exists x=> //.",
                        "VernacExtend",
                        "f7e1535beb7276979a5b89bc8a1738146a5562e1"
                    ]
                },
                {
                    "command": [
                        "by rewrite in_fsetD1 Ax eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fproperIr",
            "line_nb": 1240,
            "steps": [
                {
                    "command": [
                        "by move=> nsAB; rewrite fproperE fsubsetIr fsubsetI negb_and nsAB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fproperIl",
            "line_nb": 1243,
            "steps": [
                {
                    "command": [
                        "by move=> nsBA; rewrite fproperE fsubsetIl fsubsetI negb_and nsBA orbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fproperUr",
            "line_nb": 1246,
            "steps": [
                {
                    "command": [
                        "by rewrite fproperE fsubsetUr fsubUset fsubset_refl /= andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fproperUl",
            "line_nb": 1249,
            "steps": [
                {
                    "command": [
                        "by move=> not_sBA; rewrite fsetUC fproperUr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fproper1set",
            "line_nb": 1252,
            "steps": [
                {
                    "command": [
                        "by move/fproper_sub; rewrite fsub1set.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fproperIset",
            "line_nb": 1255,
            "steps": [
                {
                    "command": [
                        "by case/orP; apply: fsub_proper_trans; rewrite (fsubsetIl, fsubsetIr).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetDpS",
            "line_nb": 1266,
            "steps": [
                {
                    "command": [
                        "move=> subBC subAB; rewrite fproperEneq fsetDS 1?fproper_sub// andbT.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "apply/negP => /eqP /(congr1 (fsetD C)); rewrite !fsetDK // => [eqAB//|].",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "by rewrite eqAB (negPf (fproper_irrefl _)) in subAB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply: fsubset_trans subBC; apply: fproper_sub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetI_eq0",
            "line_nb": 1276,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fdisjoint_sub",
            "line_nb": 1279,
            "steps": [
                {
                    "command": [
                        "move=> disjointAB C; apply/pred0P => a /=; rewrite !inE.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by have /eqP /fsetP /(_ (val a)) := disjointAB; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "disjoint_fsub",
            "line_nb": 1283,
            "steps": [
                {
                    "command": [
                        "move=> ABsubC.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "apply/idP/idP=> [/pred0P DAB|/fdisjoint_sub->//]; apply/eqP/fsetP=> a.",
                        "VernacExtend",
                        "8d9dae45eeb3a769b8a865cef8ae476451f63802"
                    ]
                },
                {
                    "command": [
                        "rewrite !inE; have [aC|] := boolP (a \\in A `|` B); last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !inE => /norP [/negPf-> /negPf->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by have /= := DAB [` fsubsetP ABsubC _ aC]; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fdisjointP",
            "line_nb": 1290,
            "steps": [
                {
                    "command": [
                        "apply: (iffP eqP) => [AIB_eq0 a aA|neq_ab].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by have /fsetP /(_ a) := AIB_eq0; rewrite !inE aA /= => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/fsetP => a; rewrite !inE.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by case: (boolP (a \\in A)) => // /neq_ab /negPf ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsetDidPl",
            "line_nb": 1296,
            "steps": [
                {
                    "command": [
                        "apply: (iffP fdisjointP)=> [NB|<- a]; last by rewrite inE => /andP[].",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply/fsetP => a; rewrite !inE andbC.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by case: (boolP (a \\in A)) => //= /NB ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "disjoint_fsetI0",
            "line_nb": 1301,
            "steps": [
                {
                    "command": [
                        "by rewrite -fsetI_eq0; move/eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubsetD",
            "line_nb": 1304,
            "steps": [
                {
                    "command": [
                        "pose D := A `|` B `|` C.",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have AD : A `<=` D by rewrite /D -fsetUA fsubsetUl.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have BD : B `<=` D by rewrite /D fsetUAC fsubsetUr.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -(@subset_fsubE D) //; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite fsubDset (fsubset_trans BD) // fsubsetUr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite fsubD subsetD !subset_fsubE // disjoint_fsub //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite /D fsetUAC fsubsetUl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubsetDP",
            "line_nb": 1313,
            "steps": [
                {
                    "command": [
                        "by rewrite fsubsetD; apply: andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fdisjoint_sym",
            "line_nb": 1316,
            "steps": [
                {
                    "command": [
                        "by rewrite -!fsetI_eq0 fsetIC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fdisjointP_sym",
            "line_nb": 1319,
            "steps": [
                {
                    "command": [
                        "by rewrite fdisjoint_sym; apply: fdisjointP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fdisjoint_trans",
            "line_nb": 1322,
            "steps": [
                {
                    "command": [
                        "move=> AsubB; rewrite -!(@disjoint_fsub (B `|` C)) ?fsetSU //.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by apply: disjoint_trans; rewrite subset_fsub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fdisjoint0X",
            "line_nb": 1326,
            "steps": [
                {
                    "command": [
                        "by rewrite -fsetI_eq0 fset0I.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fdisjointX0",
            "line_nb": 1329,
            "steps": [
                {
                    "command": [
                        "by rewrite -fsetI_eq0 fsetI0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fdisjoint1X",
            "line_nb": 1332,
            "steps": [
                {
                    "command": [
                        "rewrite -(@disjoint_fsub (x |` A)) //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (@eq_disjoint1 _ [` fset1U1 _ _]) ?inE =>// ?; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fdisjointX1",
            "line_nb": 1336,
            "steps": [
                {
                    "command": [
                        "by rewrite fdisjoint_sym fdisjoint1X.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fdisjointUX",
            "line_nb": 1339,
            "steps": [
                {
                    "command": [
                        "by rewrite -!fsetI_eq0 fsetIUl fsetU_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fdisjointXU",
            "line_nb": 1342,
            "steps": [
                {
                    "command": [
                        "by rewrite -!fsetI_eq0 fsetIUr fsetU_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fdisjointU1X",
            "line_nb": 1345,
            "steps": [
                {
                    "command": [
                        "by rewrite fdisjointUX fdisjoint1X.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsubK",
            "line_nb": 1348,
            "steps": [
                {
                    "command": [
                        "move=> AsubB; apply/fsetP => k /=; symmetry.",
                        "VernacExtend",
                        "2af327f1a6bff11666a57d7f8dd6da6d7e22854e"
                    ]
                },
                {
                    "command": [
                        "have [kB|kNB] := (boolP (k \\in B)).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite in_fset_valT /= inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite in_fset_valF //; apply: contraNF kNB; apply/fsubsetP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FSetK",
            "line_nb": 1354,
            "steps": [
                {
                    "command": [
                        "by apply/setP => x; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_fset0",
            "line_nb": 1368,
            "steps": [
                {
                    "command": [
                        "by rewrite enumT unlock.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imfset_id",
            "line_nb": 1381,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> a; rewrite in_fset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subset_imfset",
            "line_nb": 1389,
            "steps": [
                {
                    "command": [
                        "move=> subPQ; apply/fsubsetP=> x /imfsetP [y /= yA ->].",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by rewrite in_imfset //= [in_mem _ _]subPQ.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_imfset",
            "line_nb": 1393,
            "steps": [
                {
                    "command": [
                        "move=> eq_f eqP; apply/fsetP => x; apply/imfsetP/imfsetP => /= [] [k Pk ->]; by exists k => //=; rewrite ?eq_f ?eqP in Pk *.",
                        "VernacExtend",
                        "c2987fcf5c8c0a4a73943c6375063459f06ade02"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fpowerset_key",
            "line_nb": 1399,
            "steps": [
                {
                    "command": [
                        "exact: tt.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fpowersetE",
            "line_nb": 1403,
            "steps": [
                {
                    "command": [
                        "apply/imfsetP/fsubsetP => /= [[Z _ -> y /in_fset_valP [] //]|/fsubsetP subYX].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "exists (fsub _ B); last by rewrite fsubK.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite powersetE /= -fsubT subset_fsub ?fsubset_refl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fpowersetCE",
            "line_nb": 1408,
            "steps": [
                {
                    "command": [
                        "by rewrite fpowersetE fsubsetD.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fpowersetS",
            "line_nb": 1411,
            "steps": [
                {
                    "command": [
                        "apply/fsubsetP/fsubsetP => [sub_pA_pB a|subAB X].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by have := sub_pA_pB [fset a]; rewrite !fpowersetE !fsub1set.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite !fpowersetE => /fsubsetP XA; apply/fsubsetP => x /XA /subAB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fpowerset0",
            "line_nb": 1416,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> X; rewrite inE fpowersetE fsubset0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fpowerset1",
            "line_nb": 1419,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP => X; rewrite !inE fpowersetE fsubset1 orbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fpowersetI",
            "line_nb": 1422,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> X; rewrite inE !fpowersetE fsubsetI.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_fpowerset",
            "line_nb": 1425,
            "steps": [
                {
                    "command": [
                        "rewrite !card_imfset; first by rewrite -cardE card_powerset cardsE cardfE.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by move=> X Y /fsetP eqXY; apply/setP => x; have := eqXY (val x); rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_seq_fsetE",
            "line_nb": 1433,
            "steps": [
                {
                    "command": [
                        "by rewrite enum_fsetE big_map enumT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big1_fset",
            "line_nb": 1436,
            "steps": [
                {
                    "command": [
                        "by move=> Fid; rewrite big_seq_fsetE big1//= => -[].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_fset0",
            "line_nb": 1439,
            "steps": [
                {
                    "command": [
                        "by rewrite /index_enum -enumT /= enum_fset0 big_nil.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_seq_fset0",
            "line_nb": 1442,
            "steps": [
                {
                    "command": [
                        "by rewrite big_seq_fsetE big_fset0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_fset1",
            "line_nb": 1445,
            "steps": [
                {
                    "command": [
                        "by rewrite /index_enum -enumT enum_fset1 big_seq1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_seq_fset1",
            "line_nb": 1448,
            "steps": [
                {
                    "command": [
                        "by rewrite big_seq_fsetE big_fset1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_fset",
            "line_nb": 1456,
            "steps": [
                {
                    "command": [
                        "by rewrite !eq_big_imfset//= !big_map !big_filter_cond big_andbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_fset_condE",
            "line_nb": 1459,
            "steps": [
                {
                    "command": [
                        "by rewrite big_fset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_fbig_cond",
            "line_nb": 1462,
            "steps": [
                {
                    "command": [
                        "move=> /fsetP eqABPQ FG; rewrite big_fset_condE [in RHS]big_fset_condE -eqABPQ.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "rewrite big_seq_cond [in RHS]big_seq_cond; apply: eq_bigr => i.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite in_fset !inE => /andP[/andP[??] _]; apply: FG.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_fbig",
            "line_nb": 1467,
            "steps": [
                {
                    "command": [
                        "by move=> AB FG; apply: eq_fbig_cond => x; rewrite ?inE/= -?AB// => /FG.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_fbigl_cond",
            "line_nb": 1470,
            "steps": [
                {
                    "command": [
                        "by move=> AB; apply: eq_fbig_cond.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_fbigl",
            "line_nb": 1473,
            "steps": [
                {
                    "command": [
                        "by move=> AB; apply: eq_fbig.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_fbigr",
            "line_nb": 1476,
            "steps": [
                {
                    "command": [
                        "by apply: eq_fbig_cond.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_fsetID",
            "line_nb": 1479,
            "steps": [
                {
                    "command": [
                        "by rewrite !big_fset; apply: bigID.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_fsetIDcond",
            "line_nb": 1482,
            "steps": [
                {
                    "command": [
                        "by rewrite big_mkcond (big_fsetID B) // -!big_mkcond.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_setU1",
            "line_nb": 1491,
            "steps": [
                {
                    "command": [
                        "move=> aNA; rewrite eq_big_imfset//= big_map undup_id ?big_cat ?big_seq_fset1//.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "rewrite cat_uniq ?fset_uniq andbT//=; apply/hasPn=> /= x xA; rewrite !inE/=.",
                        "VernacExtend",
                        "fe8f197e86415fc7f0a74eda9d312128b9473eda"
                    ]
                },
                {
                    "command": [
                        "by apply: contraNneq aNA => <-.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_fset_incl",
            "line_nb": 1496,
            "steps": [
                {
                    "command": [
                        "move=> subAB Fid; rewrite [in RHS](big_fsetID (mem A)) /=.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "rewrite [X in op _ X]big1_fset ?Monoid.mulm1; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by move=> i; rewrite !inE /= => /andP[iB iNA _]; apply: Fid.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_fbigl => i; rewrite !inE /= -(@in_fsetI _ B A) (fsetIidPr _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_imfset",
            "line_nb": 1502,
            "steps": [
                {
                    "command": [
                        "by move=> h_inj; rewrite eq_big_imfset// big_map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_imfset2",
            "line_nb": 1510,
            "steps": [
                {
                    "command": [
                        "move=> h_inj; rewrite eq_big_imfset2 //.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "rewrite (allsigs_comp (fun _ j => Tagged _ j) (fun t => h (tag t) (tagged t))).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite big_map big_allsigs /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_big_dep_cond",
            "line_nb": 1518,
            "steps": [
                {
                    "command": [
                        "rewrite big_imfset2 //=; last by move=> [??] [??] _ _ /= [-> ->].",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite big_fset /=; apply: eq_bigr => i _; rewrite big_fset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bigfcup_undup",
            "line_nb": 1553,
            "steps": [
                {
                    "command": [
                        "by rewrite big_undup => //= A; rewrite fsetUid.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bigfcup_sup",
            "line_nb": 1556,
            "steps": [
                {
                    "command": [
                        "move=> jr Pj; rewrite -bigfcup_undup big_mkcond.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite (bigD1_seq j) ?mem_undup ?undup_uniq ?Pj //= fsubsetUl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bigfcupsP",
            "line_nb": 1567,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [sFU i ri Pi| sFU].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by apply: fsubset_trans sFU; apply: bigfcup_sup.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply/fsubsetP=> x /bigfcupP[i /andP[ri Pi]]; apply/fsubsetP/sFU.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finSet_rect",
            "line_nb": 1573,
            "steps": [
                {
                    "command": [
                        "move=> P0 Psub X; move: (leqnn #|` X|); move: (X in Y in _ <= Y) => Y.",
                        "VernacExtend",
                        "e0ac37cc297cc328730d6b7eadc79537d4e2c654"
                    ]
                },
                {
                    "command": [
                        "elim: #|` _| X => [|n IHn] {Y} X; first by rewrite leqn0 cardfs_eq0 => /eqP->.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "move=> Xleq; apply: Psub => Y XsubY; apply: IHn.",
                        "VernacExtend",
                        "e374b6c583d80c9d8b579c06df7953342f99f751"
                    ]
                },
                {
                    "command": [
                        "by rewrite -ltnS (leq_trans _ Xleq) // fproper_ltn_card.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset_bounded_coind",
            "line_nb": 1579,
            "steps": [
                {
                    "command": [
                        "move=> Psuper X XsubU; rewrite -[X](fsetDK XsubU)//.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "have {XsubU}: (U `\\` X) `<=` U by rewrite fsubsetDl.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "elim: (_ `\\` X) => {X} [|X IHX] XsubU.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "rewrite fsetD0; apply: Psuper => Y /fsub_proper_trans UY/UY.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite fproperEneq eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: Psuper => Y /fsetDK<-; rewrite fproperD2l ?fsubsetDl //.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by move=> /IHX; apply; rewrite fsubsetDl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iter_fix",
            "line_nb": 1588,
            "steps": [
                {
                    "command": [
                        "by move=> fixf; elim: n => //= n ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set_iterF_sub",
            "line_nb": 1597,
            "steps": [
                {
                    "command": [
                        "by elim: i => [| i IHi]; rewrite /= ?sub0set ?F_mono.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set_iterF_mono",
            "line_nb": 1600,
            "steps": [
                {
                    "command": [
                        "by apply: homo_leq => //[???|]; [apply: subset_trans|apply: set_iterF_sub].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set_fixKn",
            "line_nb": 1614,
            "steps": [
                {
                    "command": [
                        "by rewrite iter_fix.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iter_sub_fix",
            "line_nb": 1617,
            "steps": [
                {
                    "command": [
                        "have [/set_iterF_mono//|/ltnW/subnK<-] := leqP k n; by rewrite iter_add set_fixKn.",
                        "VernacExtend",
                        "cccfb1bf1ad16c29c01cb81c89290714e430c436"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fix_order_proof",
            "line_nb": 1620,
            "steps": [
                {
                    "command": [
                        "by move=> x_fix; exists n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fix_order_le_max",
            "line_nb": 1624,
            "steps": [
                {
                    "command": [
                        "rewrite /fix_order; case: eqP => //= x_in.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "by case: ex_minnP => //= ??; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_iter_fix_orderE",
            "line_nb": 1628,
            "steps": [
                {
                    "command": [
                        "rewrite /fix_order; case: eqP; last by move=>/negP/negPf->; rewrite inE.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by move=> x_in; case: ex_minnP => m ->; rewrite x_in.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fix_order_gt0",
            "line_nb": 1632,
            "steps": [
                {
                    "command": [
                        "rewrite /fix_order; case: eqP => [x_in|/negP/negPf->//].",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "by rewrite x_in; case: ex_minnP => -[|m]; rewrite ?inE//= => _; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fix_order_eq0",
            "line_nb": 1636,
            "steps": [
                {
                    "command": [
                        "by rewrite -fix_order_gt0 -ltnNge ltnS leqn0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_iter_fixE",
            "line_nb": 1639,
            "steps": [
                {
                    "command": [
                        "rewrite /fix_order; case: eqP => //= [x_in|/negP xNin]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply: contraNF xNin; apply/subsetP/iter_sub_fix.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: ex_minnP => -[|m]; rewrite ?inE// => xm mP.",
                        "VernacExtend",
                        "ba44c9d0281a02110ce54645304e6d990debd9c0"
                    ]
                },
                {
                    "command": [
                        "by apply/idP/idP=> [/mP//|lt_mk]; apply: subsetP xm; apply: set_iterF_mono.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_iter",
            "line_nb": 1645,
            "steps": [
                {
                    "command": [
                        "by move=> x_in xk; rewrite in_iter_fixE fix_order_gt0 x_in xk.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "notin_iter",
            "line_nb": 1648,
            "steps": [
                {
                    "command": [
                        "by move=> k_le; rewrite in_iter_fixE negb_and orbC -ltnNge k_le.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fix_order_small",
            "line_nb": 1651,
            "steps": [
                {
                    "command": [
                        "by rewrite in_iter_fixE => /andP[].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fix_order_big",
            "line_nb": 1654,
            "steps": [
                {
                    "command": [
                        "by move=> x_in; rewrite in_iter_fixE fix_order_gt0 x_in /= -ltnNge.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "le_fix_order",
            "line_nb": 1657,
            "steps": [
                {
                    "command": [
                        "exact: fix_order_small.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "funsetC_mono",
            "line_nb": 1667,
            "steps": [
                {
                    "command": [
                        "by move=> *; rewrite subCset setCK F_mono// subCset setCK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set_cofixK",
            "line_nb": 1672,
            "steps": [
                {
                    "command": [
                        "by rewrite /set_cofix -[in RHS]set_fixK ?setCK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset_iterFE",
            "line_nb": 1695,
            "steps": [
                {
                    "command": [
                        "elim: i => [|i /= -> /=]; last by rewrite fset_fsub // F_bound//= fset_sub_val.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite in_fset_val /=; case: insub=> //= ?; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset_iterF_sub",
            "line_nb": 1699,
            "steps": [
                {
                    "command": [
                        "by rewrite /= fset_iterFE fset_sub_val.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset_fixK",
            "line_nb": 1702,
            "steps": [
                {
                    "command": [
                        "by rewrite /fset_fix -[in RHS]set_fixK// fset_fsub// F_bound//= fset_sub_val.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fset_fixKn",
            "line_nb": 1706,
            "steps": [
                {
                    "command": [
                        "by rewrite iter_fix.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iter_sub_ffix",
            "line_nb": 1709,
            "steps": [
                {
                    "command": [
                        "by rewrite /fset_fix !fset_iterFE; apply/subset_imfset/subsetP/iter_sub_fix.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffix_order_le_max",
            "line_nb": 1713,
            "steps": [
                {
                    "command": [
                        "by rewrite /ffix_order; case: eqP => //= x_in; rewrite cardfE fix_order_le_max.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_iter_ffix_orderE",
            "line_nb": 1716,
            "steps": [
                {
                    "command": [
                        "rewrite /ffix_order; case: eqP => [xU|/negP xNU]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !inE /fset_fix in_fset_valF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite fset_iterFE !in_fset_valT /= in_iter_fix_orderE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffix_order_gt0",
            "line_nb": 1721,
            "steps": [
                {
                    "command": [
                        "rewrite /ffix_order; case: eqP => [xU|/negP xNU]; last by rewrite in_fset_valF.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite fix_order_gt0 in_fset_valT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffix_order_eq0",
            "line_nb": 1725,
            "steps": [
                {
                    "command": [
                        "by rewrite -ffix_order_gt0 -ltnNge ltnS leqn0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_iter_ffixE",
            "line_nb": 1728,
            "steps": [
                {
                    "command": [
                        "rewrite /ffix_order fset_iterFE; case: eqP => [xU|/negP xNU]; by [rewrite in_fset_valF|rewrite in_fset_valT /= in_iter_fixE].",
                        "VernacExtend",
                        "edc181ae1523612867809723d78a66d7ba4793ea"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_iter_ffix",
            "line_nb": 1731,
            "steps": [
                {
                    "command": [
                        "by move=> x_in xk; rewrite in_iter_ffixE ffix_order_gt0 x_in xk.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "notin_iter_ffix",
            "line_nb": 1734,
            "steps": [
                {
                    "command": [
                        "by move=> k_le; rewrite in_iter_ffixE negb_and orbC -ltnNge k_le.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffix_order_small",
            "line_nb": 1737,
            "steps": [
                {
                    "command": [
                        "by rewrite in_iter_ffixE => /andP[].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffix_order_big",
            "line_nb": 1740,
            "steps": [
                {
                    "command": [
                        "by move=> x_in; rewrite in_iter_ffixE ffix_order_gt0 x_in -ltnNge.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "le_ffix_order",
            "line_nb": 1743,
            "steps": [
                {
                    "command": [
                        "exact: ffix_order_small.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finMap_codeK",
            "line_nb": 1789,
            "steps": [
                {
                    "command": [
                        "by case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fndP",
            "line_nb": 1805,
            "steps": [
                {
                    "command": [
                        "rewrite /fnd; case: insubP=> [[k' k'f] _ {k} <- /=|kNf].",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "by rewrite k'f; constructor.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite (negPf kNf); constructor.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fndSome",
            "line_nb": 1810,
            "steps": [
                {
                    "command": [
                        "by case: fndP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_fnd",
            "line_nb": 1813,
            "steps": [
                {
                    "command": [
                        "by case: fndP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "getfE",
            "line_nb": 1816,
            "steps": [
                {
                    "command": [
                        "by congr (_ _); apply: val_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_getf",
            "line_nb": 1819,
            "steps": [
                {
                    "command": [
                        "by rewrite (@getfE _ _ [` kf']).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Some_fnd",
            "line_nb": 1822,
            "steps": [
                {
                    "command": [
                        "by case: fndP (valP k) => // ? _; rewrite getfE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_fnd",
            "line_nb": 1825,
            "steps": [
                {
                    "command": [
                        "by rewrite Some_fnd.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fnd_if",
            "line_nb": 1828,
            "steps": [
                {
                    "command": [
                        "by case: cond.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "getfP",
            "line_nb": 1831,
            "steps": [
                {
                    "command": [
                        "move: f g => [kf f] [kg g] /= eq_kfg; case: _ / eq_kfg in g * => {kg}.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "move=> eq_fg; congr FinMap; apply/ffunP => /= x.",
                        "VernacExtend",
                        "89de36e5aef0ebd726b6f55b2950d4d03c758898"
                    ]
                },
                {
                    "command": [
                        "by do [rewrite -!getfE; do ?exact: valP] => *.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fnd_fmap0",
            "line_nb": 1841,
            "steps": [
                {
                    "command": [
                        "by rewrite not_fnd // in_fset0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_setf",
            "line_nb": 1844,
            "steps": [
                {
                    "command": [
                        "by move=> k; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dom_setf",
            "line_nb": 1847,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> k; rewrite mem_setf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fnd_set_in",
            "line_nb": 1850,
            "steps": [
                {
                    "command": [
                        "by have := valP x; rewrite mem_setf inE; case: eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setfK",
            "line_nb": 1853,
            "steps": [
                {
                    "command": [
                        "case: eqVneq => [|xNk0]; rewrite ?ffunE /=; first by move->; rewrite eqxx.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite (negPf xNk0) in_fnd ?fnd_set_in //= => xf; apply: eq_getf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fnd_set",
            "line_nb": 1857,
            "steps": [
                {
                    "command": [
                        "case: fndP => [ksf|]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite mem_setf inE negb_or => /andP [/negPf ->]; case: fndP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite setfK; case: eqVneq => //= [->|kNk0]; first by rewrite eqxx.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite Some_fnd (negPf kNk0).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fmap_nil",
            "line_nb": 1863,
            "steps": [
                {
                    "command": [
                        "by move=> kf0; apply: getfP => //= k ? kMg; have := kMg; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "getf_set",
            "line_nb": 1866,
            "steps": [
                {
                    "command": [
                        "by apply: Some_inj; rewrite Some_fnd fnd_set eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setf_get",
            "line_nb": 1869,
            "steps": [
                {
                    "command": [
                        "by apply/fmapP=> k'; rewrite fnd_set Some_fnd; case: eqP => [->|].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setfNK",
            "line_nb": 1872,
            "steps": [
                {
                    "command": [
                        "by apply: Some_inj; rewrite Some_fnd !fnd_set in_fnd; case: ifP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "domf0",
            "line_nb": 1875,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP => x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "reducef_subproof",
            "line_nb": 1882,
            "steps": [
                {
                    "command": [
                        "set y := (y in f y); suff : val y \\in [fsetval x : domf f | f x].",
                        "VernacExtend",
                        "aafa60d3205e06101f84b37dd84003fb7ee50464"
                    ]
                },
                {
                    "command": [
                        "by rewrite val_in_fset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by suff -> : val y = val x by exact: valP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "domf_reduce",
            "line_nb": 1888,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_reducef",
            "line_nb": 1891,
            "steps": [
                {
                    "command": [
                        "rewrite inE; case: fndP => [kf|] /=; first by rewrite in_fset_valT.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply: contraNF; apply: (fsubsetP (fset_sub_val _ _)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fnd_reducef",
            "line_nb": 1895,
            "steps": [
                {
                    "command": [
                        "case: fndP => /= [kf|]; last by rewrite mem_reducef; case: ojoin.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite ffunE /= Some_oextract; apply: Some_inj; rewrite Some_fnd.",
                        "VernacExtend",
                        "fe8f197e86415fc7f0a74eda9d312128b9473eda"
                    ]
                },
                {
                    "command": [
                        "by rewrite Some_ojoin // ojoinT // -mem_reducef.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "get_reducef",
            "line_nb": 1900,
            "steps": [
                {
                    "command": [
                        "by rewrite Some_fnd fnd_reducef in_fnd.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "domf_filterf",
            "line_nb": 1913,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_filterf",
            "line_nb": 1916,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_restrictf",
            "line_nb": 1919,
            "steps": [
                {
                    "command": [
                        "by rewrite mem_filterf andbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_remf",
            "line_nb": 1922,
            "steps": [
                {
                    "command": [
                        "by rewrite mem_restrictf inE -andbA andbb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_remf1",
            "line_nb": 1925,
            "steps": [
                {
                    "command": [
                        "by rewrite mem_remf inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "domf_restrict",
            "line_nb": 1928,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> k'; rewrite mem_restrictf !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "domf_rem",
            "line_nb": 1931,
            "steps": [
                {
                    "command": [
                        "by rewrite domf_restrict fsetIDAC fsetIid.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_remfF",
            "line_nb": 1934,
            "steps": [
                {
                    "command": [
                        "by rewrite mem_remf1 eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fnd_filterf",
            "line_nb": 1937,
            "steps": [
                {
                    "command": [
                        "case: fndP => [kff|]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite in_fset => /nandP [/not_fnd->|/negPf-> //]; rewrite if_same.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by have := kff; rewrite in_fset => /andP [kf ->]; rewrite ffunE Some_fnd.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "get_filterf",
            "line_nb": 1942,
            "steps": [
                {
                    "command": [
                        "apply: Some_inj; rewrite !Some_fnd /= fnd_filterf.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by move: kff; rewrite !(in_fset, inE) => /andP [? ->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fnd_restrict",
            "line_nb": 1946,
            "steps": [
                {
                    "command": [
                        "by rewrite fnd_filterf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fnd_rem",
            "line_nb": 1949,
            "steps": [
                {
                    "command": [
                        "rewrite fnd_restrict inE.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by case: fndP => ?; rewrite ?(andbT, andbF) //=; case: (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "restrictf_comp",
            "line_nb": 1953,
            "steps": [
                {
                    "command": [
                        "by apply/fmapP=> k; rewrite !fnd_restrict !inE; do !case: (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "remf_comp",
            "line_nb": 1956,
            "steps": [
                {
                    "command": [
                        "by apply/fmapP=> k; rewrite !fnd_rem inE; do !case: (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "restrictfT",
            "line_nb": 1959,
            "steps": [
                {
                    "command": [
                        "by apply/fmapP=> k; rewrite fnd_restrict; case: fndP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "restrictf0",
            "line_nb": 1962,
            "steps": [
                {
                    "command": [
                        "by apply/fmapP => k; rewrite fnd_restrict !(inE, not_fnd).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "remf0",
            "line_nb": 1965,
            "steps": [
                {
                    "command": [
                        "by rewrite fsetD0 restrictfT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fnd_rem1",
            "line_nb": 1968,
            "steps": [
                {
                    "command": [
                        "by rewrite fnd_rem inE; case: eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "getf_restrict",
            "line_nb": 1971,
            "steps": [
                {
                    "command": [
                        "by rewrite get_filterf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setf_restrict",
            "line_nb": 1974,
            "steps": [
                {
                    "command": [
                        "by apply/fmapP=> k'; rewrite !(fnd_set, fnd_restrict, inE); case: eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setf_rem",
            "line_nb": 1977,
            "steps": [
                {
                    "command": [
                        "by rewrite setf_restrict fsetUDl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setf_rem1",
            "line_nb": 1980,
            "steps": [
                {
                    "command": [
                        "by rewrite setf_rem fsetDv remf0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setfC",
            "line_nb": 1983,
            "steps": [
                {
                    "command": [
                        "apply/fmapP => k.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "rewrite fnd_if !fnd_set.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have [[->|kNk2] [// <-|k2Nk1]] // := (altP (k =P k2), altP (k2 =P k1)).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite (negPf kNk2).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "restrictf_mkdom",
            "line_nb": 1989,
            "steps": [
                {
                    "command": [
                        "apply/fmapP=> k; rewrite !fnd_restrict inE.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by case: fndP => ?; rewrite ?(andbT, andbF) //=; case: (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "restrictf_id",
            "line_nb": 1993,
            "steps": [
                {
                    "command": [
                        "by move=> dAf; rewrite restrictf_mkdom (eqP dAf) restrictf0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "remf_id",
            "line_nb": 1996,
            "steps": [
                {
                    "command": [
                        "by move=> /fsetDidPl ->; rewrite restrictfT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "remf1_id",
            "line_nb": 1999,
            "steps": [
                {
                    "command": [
                        "by move=> kNf; rewrite remf_id //= fdisjointX1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "restrictf_set",
            "line_nb": 2002,
            "steps": [
                {
                    "command": [
                        "apply/fmapP => k' /=; rewrite !(fnd_if, fnd_set, fnd_restrict).",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by case: eqP => [->|]; do !case: ifP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "remf_set",
            "line_nb": 2006,
            "steps": [
                {
                    "command": [
                        "apply/fmapP => k' /=; rewrite !(fnd_if, fnd_rem, fnd_set, inE).",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by case: eqP => [->|]; do !case: (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "remf1_set",
            "line_nb": 2010,
            "steps": [
                {
                    "command": [
                        "by rewrite remf_set inE eq_sym.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setf_inj",
            "line_nb": 2013,
            "steps": [
                {
                    "command": [
                        "move=> kf kf' eq_fkv; apply/fmapP => k'.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "have := congr1 (fun g => g.[? k']) eq_fkv.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite !fnd_set; case: eqP => // ->; rewrite !not_fnd.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "domf_cat",
            "line_nb": 2029,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP=> x; rewrite !inE; case: (boolP (_ \\in domf _)); rewrite ?orbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_catf",
            "line_nb": 2032,
            "steps": [
                {
                    "command": [
                        "by rewrite domf_cat inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fnd_cat",
            "line_nb": 2035,
            "steps": [
                {
                    "command": [
                        "case: fndP => //= [kfg|]; rewrite /catf /=.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "rewrite ffunE /=; case: fsetULVR => [kf|kg]; last by rewrite Some_fnd kg.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -in_fnd; move: kf; rewrite inE => /andP[/negPf ->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite mem_catf => /norP [kNf kNg]; rewrite !not_fnd // if_same.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "catfE",
            "line_nb": 2041,
            "steps": [
                {
                    "command": [
                        "by apply/fmapP=> k; rewrite !(fnd_cat, fnd_rem); case: ifP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "getf_catl",
            "line_nb": 2044,
            "steps": [
                {
                    "command": [
                        "by move=> kNg; apply: Some_inj; rewrite Some_fnd fnd_cat (negPf kNg) in_fnd.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "getf_catr",
            "line_nb": 2047,
            "steps": [
                {
                    "command": [
                        "by apply: Some_inj; rewrite Some_fnd fnd_cat kg in_fnd.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "catf0",
            "line_nb": 2050,
            "steps": [
                {
                    "command": [
                        "by apply/fmapP => k; rewrite fnd_cat in_fset0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cat0f",
            "line_nb": 2053,
            "steps": [
                {
                    "command": [
                        "apply/fmapP => k; rewrite fnd_cat; case: ifPn => //= kf.",
                        "VernacExtend",
                        "5caed936835e366e9e533d8f19382dcfedbf86d4"
                    ]
                },
                {
                    "command": [
                        "by rewrite !not_fnd ?inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "catf_setl",
            "line_nb": 2057,
            "steps": [
                {
                    "command": [
                        "apply/fmapP=> k'; rewrite !(fnd_if, fnd_cat, fnd_set).",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by have [->|Nkk'] := altP eqP; do !case: (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "catf_setr",
            "line_nb": 2061,
            "steps": [
                {
                    "command": [
                        "apply/fmapP=> k'; rewrite !(fnd_cat, fnd_set, mem_setf, inE).",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by have [->|Nkk'] := altP eqP; do !case: (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "restrictf_cat",
            "line_nb": 2065,
            "steps": [
                {
                    "command": [
                        "apply/fmapP => k'; rewrite !(fnd_cat, fnd_restrict) mem_restrictf.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by case: (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "restrictf_cat_domr",
            "line_nb": 2069,
            "steps": [
                {
                    "command": [
                        "rewrite catfE restrictf_cat restrictf_comp.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite fsetIDAC fsetDIl fsetDv fsetI0 restrictf0 restrictfT cat0f.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "remf_cat",
            "line_nb": 2073,
            "steps": [
                {
                    "command": [
                        "by apply/fmapP => k'; rewrite !(fnd_cat, fnd_rem) mem_remf; case: (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "catf_restrictl",
            "line_nb": 2076,
            "steps": [
                {
                    "command": [
                        "apply/fmapP=> k; rewrite !(fnd_cat, fnd_restrict) !inE.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by do !case: (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "catf_reml",
            "line_nb": 2080,
            "steps": [
                {
                    "command": [
                        "by apply/fmapP=> k; rewrite !(fnd_cat, fnd_rem) inE; case: (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "catf_rem1l",
            "line_nb": 2083,
            "steps": [
                {
                    "command": [
                        "apply/fmapP => k'; rewrite !(fnd_if, fnd_cat, fnd_rem1).",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by have [->|?] := altP eqP; do !case: (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setf_catr",
            "line_nb": 2087,
            "steps": [
                {
                    "command": [
                        "by rewrite catf_setr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setf_catl",
            "line_nb": 2090,
            "steps": [
                {
                    "command": [
                        "by rewrite catf_setl mem_remf1 eqxx /= !setf_catr setf_rem1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "catfA",
            "line_nb": 2093,
            "steps": [
                {
                    "command": [
                        "by apply/fmapP => k; rewrite !fnd_cat !mem_catf; do !case: (_ \\in _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "catfC",
            "line_nb": 2096,
            "steps": [
                {
                    "command": [
                        "apply/fmapP=> k; rewrite !fnd_cat fnd_rem domf_rem inE.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by have [|kNg] //= := boolP (_ \\in domf g); rewrite (not_fnd kNg); case: fndP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "disjoint_catfC",
            "line_nb": 2100,
            "steps": [
                {
                    "command": [
                        "by move=> dfg; rewrite catfC remf_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "catfAC",
            "line_nb": 2103,
            "steps": [
                {
                    "command": [
                        "by rewrite -!catfA [X in _ + X]catfC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "disjoint_catfAC",
            "line_nb": 2106,
            "steps": [
                {
                    "command": [
                        "by move=> dgh; rewrite catfAC remf_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "catfCA",
            "line_nb": 2109,
            "steps": [
                {
                    "command": [
                        "by rewrite !catfA [X in X + _]catfC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "disjoint_catfCA",
            "line_nb": 2112,
            "steps": [
                {
                    "command": [
                        "by move=> dfg; rewrite catfCA remf_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "catfIs",
            "line_nb": 2115,
            "steps": [
                {
                    "command": [
                        "move=> /fmapP eq_fg_fh; apply/fmapP => k; have := eq_fg_fh k.",
                        "VernacExtend",
                        "fcbc4db6275a8d44907e8ed4b44d2f7f279ee662"
                    ]
                },
                {
                    "command": [
                        "by rewrite !fnd_cat !fnd_rem; case: ifP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "disjoint_catfIs",
            "line_nb": 2119,
            "steps": [
                {
                    "command": [
                        "by move=> dfg dgh /catfIs; rewrite !remf_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "restrict_catfsI",
            "line_nb": 2122,
            "steps": [
                {
                    "command": [
                        "move=> /fmapP eq_fg_fh; apply/fmapP => k; have := eq_fg_fh k.",
                        "VernacExtend",
                        "fcbc4db6275a8d44907e8ed4b44d2f7f279ee662"
                    ]
                },
                {
                    "command": [
                        "rewrite !fnd_cat !fnd_restrict.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by do ![case: (boolP (_ \\in domf _)) => ? //=] => _; rewrite not_fnd.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "disjoint_catfsI",
            "line_nb": 2127,
            "steps": [
                {
                    "command": [
                        "move=> dfg dgh; rewrite -disjoint_catfC // -[RHS]disjoint_catfC //.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by apply: disjoint_catfIs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codomfP",
            "line_nb": 2145,
            "steps": [
                {
                    "command": [
                        "apply: (iffP (imfsetP _ _ _ _)) => /= [[x _ ->]|[k]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by exists (val x); rewrite Some_fnd.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by case: fndP => //= kf [<-]; exists [` kf].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codomfPn",
            "line_nb": 2150,
            "steps": [
                {
                    "command": [
                        "rewrite mem_codomf negb_exists; apply: (iffP forallP) => f_eq_v x /=.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by case: fndP => //= kf; rewrite f_eq_v.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply: contraNneq (f_eq_v (val x)) => <-; rewrite Some_fnd.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codomf0",
            "line_nb": 2155,
            "steps": [
                {
                    "command": [
                        "apply/fsetP=> k; rewrite inE; apply/negP => /codomfP [k'].",
                        "VernacExtend",
                        "da24caf87c1bbbad0538b8be68905ec456c78aa7"
                    ]
                },
                {
                    "command": [
                        "by rewrite not_fnd //= inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_codomf",
            "line_nb": 2159,
            "steps": [
                {
                    "command": [
                        "by rewrite in_imfset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fndSomeP",
            "line_nb": 2162,
            "steps": [
                {
                    "command": [
                        "split => [fk|[kf fk]]; last by rewrite in_fnd fk.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have kf : k \\in f by rewrite -fndSome fk.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by exists kf; apply: Some_inj; rewrite Some_fnd.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codomf_restrict",
            "line_nb": 2167,
            "steps": [
                {
                    "command": [
                        "apply/fsetP=> v; apply/imfsetP/imfsetP => /= [] [k kP ->].",
                        "VernacExtend",
                        "8d9dae45eeb3a769b8a865cef8ae476451f63802"
                    ]
                },
                {
                    "command": [
                        "have := valP k; rewrite !inE => /andP [kf kA]; exists [` kf] => //.",
                        "VernacExtend",
                        "152c1e8356af9cca20427023e0c6369212e834d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite ffunE /= -getfE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have kA : val k \\in [fset x | x in domf f & x \\in A] by rewrite !inE (valP k).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by exists [` kA]; rewrite // ?ffunE !getfE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codomf_rem",
            "line_nb": 2179,
            "steps": [
                {
                    "command": [
                        "rewrite codomf_restrict.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_imfset => //= x /=; rewrite -!topredE /= !inE (valP x) andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codomf_rem_exists",
            "line_nb": 2183,
            "steps": [
                {
                    "command": [
                        "rewrite codomf_restrict_exists; apply: eq_imfset => x //=.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "rewrite !inE; case: (_ \\in _) => //=.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "apply/existsP/existsP => [] /= [k]; rewrite ?inE; by do 2?[move=>/andP []]; exists k; rewrite ?inE; do 2?[apply/andP; split].",
                        "VernacExtend",
                        "d5238b4c7e326b53c70f61e9edb516f55fc674b5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_codomf_rem1",
            "line_nb": 2188,
            "steps": [
                {
                    "command": [
                        "apply/fsetP => v; rewrite codomf_rem_exists (fun_if (fun x => v \\in x)) !(in_fset, inE).",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "have [vf|vNf] := boolP (_ \\in codomf f); rewrite /= ?(andbF,andbT) ?if_same //.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "rewrite -/(_ || _); apply/existsP/idP => /= [[k' /andP[xk /eqP <-]]|].",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "rewrite orbC -implybE; apply/implyP => eq_fk.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite inE /= in xk; apply/existsP; exists k'; rewrite // xk eq_fk.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have /imfsetP /= [[l lf] _ ->] := vf; rewrite orbC.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "have [->|neq_f _] := altP (f.[lf] =P _).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by move=> /existsP [m /andP[Nmk /eqP <-]]; exists m; rewrite eqxx inE Nmk.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists [` lf]; rewrite eqxx andbT inE /=.",
                        "VernacExtend",
                        "33b976d9fceb32847aba44318a3f1d74b79e99e3"
                    ]
                },
                {
                    "command": [
                        "apply: contra neq_f => /eqP eq_lk; rewrite eq_lk in lf *.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by apply/eqP; congr f.[_]; apply: bool_irrelevance.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codomf_set",
            "line_nb": 2201,
            "steps": [
                {
                    "command": [
                        "rewrite -setf_rem1; apply/fsetP=> v'; rewrite !inE.",
                        "VernacExtend",
                        "fe8f197e86415fc7f0a74eda9d312128b9473eda"
                    ]
                },
                {
                    "command": [
                        "have [->|neq_v'v] /= := altP eqP.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply/codomfP; exists k; rewrite fnd_set eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/codomfP/codomfP => [] [k' fk'_eq]; exists k'; move: fk'_eq; rewrite fnd_set.",
                        "VernacExtend",
                        "761ba7d4892c968ff2326f578777c4cf1542c3cf"
                    ]
                },
                {
                    "command": [
                        "by have [_ [eq_vv']|//] := altP eqP; rewrite eq_vv' eqxx in neq_v'v *.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by have [->|//] := altP eqP; rewrite fnd_rem inE eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsfun_subproof",
            "line_nb": 2219,
            "steps": [
                {
                    "command": [
                        "case:f => f f_stable k kf /=.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "exact: (forallP f_stable [` kf]).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_finsupp",
            "line_nb": 2239,
            "steps": [
                {
                    "command": [
                        "rewrite /fun_of_fsfun [finsupp]unlock; case: fndP; rewrite ?eqxx //=.",
                        "VernacExtend",
                        "1dc1cec635c64f0cc3ec64ea6e4d6c7d5b8f81f6"
                    ]
                },
                {
                    "command": [
                        "by move=> kf; rewrite fsfun_subproof.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "memNfinsupp",
            "line_nb": 2243,
            "steps": [
                {
                    "command": [
                        "by rewrite mem_finsupp negbK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsfun_dflt",
            "line_nb": 2246,
            "steps": [
                {
                    "command": [
                        "by rewrite mem_finsupp negbK => /eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finsuppP",
            "line_nb": 2250,
            "steps": [
                {
                    "command": [
                        "have [kf|kNf] := boolP (_ \\in _); first by constructor.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite fsfun_dflt // ; constructor.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsfunP",
            "line_nb": 2254,
            "steps": [
                {
                    "command": [
                        "split=> [eq_fg|->//]; apply/val_inj/fmapP => k.",
                        "VernacExtend",
                        "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
                    ]
                },
                {
                    "command": [
                        "have := eq_fg k; rewrite /(f _) /(f' _) /=.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "case: fndP; case: fndP => //= kf kf'; first by move->.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by move/eqP/negPn; rewrite fsfun_subproof.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by move/eqP/negPn; rewrite eq_sym fsfun_subproof.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsfun_injective_inP",
            "line_nb": 2261,
            "steps": [
                {
                    "command": [
                        "apply: (iffP (@injectiveP _ _ _)) => f_inj a b; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !ffunE => *; apply: val_inj; apply: f_inj => //; apply: valP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move=> aT bT eq_ga_gb; have := f_inj.[aT].[bT]; rewrite !ffunE /=.",
                        "VernacExtend",
                        "7cbc77a1e43ca1454debc28656b2dec3869cf69b"
                    ]
                },
                {
                    "command": [
                        "by move=> /(_ eq_ga_gb) /(congr1 val).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsfun_of_can_ffunE",
            "line_nb": 2268,
            "steps": [
                {
                    "command": [
                        "by rewrite/fun_of_fsfun in_fnd.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "of_ffunE",
            "line_nb": 2297,
            "steps": [
                {
                    "command": [
                        "rewrite /fun_of_fsfun /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: insubP => /= [u _ <-|xNS]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "case: fndP => //= kf; rewrite !ffunE /=.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "by set y := (X in h X); rewrite (valP y) in xNS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: fndP => /= [kf|].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite ffunE; congr (h _); apply/val_inj => //.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite inE /= -topredE /= negbK => /eqP ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsfun_key",
            "line_nb": 2309,
            "steps": [
                {
                    "command": [
                        "exact: tt.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsfun0_key",
            "line_nb": 2339,
            "steps": [
                {
                    "command": [
                        "exact: tt.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsfun_ffun",
            "line_nb": 2348,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsfun_fun",
            "line_nb": 2351,
            "steps": [
                {
                    "command": [
                        "by rewrite fsfun_ffun; case: insubP => //= [u -> ->|/negPf ->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsfun0E",
            "line_nb": 2354,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite unlock insubF ?inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finsupp_sub",
            "line_nb": 2358,
            "steps": [
                {
                    "command": [
                        "apply/fsubsetP => a; rewrite mem_finsupp unlock /=.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by case: insubP => //=; rewrite eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finsupp0",
            "line_nb": 2362,
            "steps": [
                {
                    "command": [
                        "by apply/fsetP => x; rewrite !inE mem_finsupp fsfunE eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsfun0_inj",
            "line_nb": 2365,
            "steps": [
                {
                    "command": [
                        "by move=> def_inj x y; rewrite !fsfunE => /def_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_finsupp0",
            "line_nb": 2368,
            "steps": [
                {
                    "command": [
                        "by rewrite finsupp0 inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsfun_comp_key",
            "line_nb": 2378,
            "steps": [
                {
                    "command": [
                        "exact: tt.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fscompE",
            "line_nb": 2383,
            "steps": [
                {
                    "command": [
                        "move=> k; rewrite fsfun_ffun; case: insubP => //= [u _ <- //|].",
                        "VernacExtend",
                        "d7214ac8fd48f4d1cd143edd9d16f6d28386a302"
                    ]
                },
                {
                    "command": [
                        "by rewrite inE => /norP [kNf kNg]; rewrite !fsfun_dflt.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fscomp0f",
            "line_nb": 2387,
            "steps": [
                {
                    "command": [
                        "by move=> f; apply/fsfunP=> k; rewrite fscompE /= fsfun0E.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fscompA",
            "line_nb": 2390,
            "steps": [
                {
                    "command": [
                        "by move=> f g h; apply/fsfunP => k; rewrite !fscompE /= !fscompE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fscomp_inj",
            "line_nb": 2393,
            "steps": [
                {
                    "command": [
                        "by move=> f_inj g_inj k k'; rewrite !fscompE => /= /g_inj /f_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsinjective_subproof",
            "line_nb": 2398,
            "steps": [
                {
                    "command": [
                        "split => /= [f_inj|]; last split=> [[f_inj f_st]|[S fS [f_inj f_st]] a b].",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "split=> [a b ? ?|a]; first exact: f_inj.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite mem_finsupp (inj_eq f_inj) -mem_finsupp; apply/valP.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by exists (finsupp f)=> //; apply: fsubset_refl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have Nfinsupp := contra (fsubsetP fS _).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "wlog /andP [aS bNS] : a b / (a \\in S) && (b \\notin S) => [hwlog|]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite (fsfun_dflt (Nfinsupp _ bNS)) => fb_eq_a.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by move: bNS; rewrite -fb_eq_a (f_st.[aS]).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [[aS|aNS] [bS|bNS]] := (boolP (a \\in S), boolP (b \\in S)); first 3 last.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by rewrite !fsfun_dflt // ?Nfinsupp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "exact: f_inj.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by apply: hwlog; rewrite aS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by move=> fab; symmetry; apply: hwlog; rewrite // bS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsinjectivebP",
            "line_nb": 2424,
            "steps": [
                {
                    "command": [
                        "have [H1 [H2 H3]]:= fsinjective_subproof f.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply: (iffP (fsinjectiveP _)) => //; by move=> /H1 /H2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_rel_fsubset_class",
            "line_nb": 2432,
            "steps": [
                {
                    "command": [
                        "exists fsubset (fun G => \\bigcup_(g <- G) g) => [|g s|g1 g2 j] //.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite big_cons fsubsetUl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite big_cons => h; rewrite fsubsetU // h orbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}