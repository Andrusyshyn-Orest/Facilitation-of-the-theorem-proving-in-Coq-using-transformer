{
    "filename": "set.v",
    "coq_project": "finmap",
    "vernac_cmds": [
        [
            "From mathcomp Require Import ssreflect ssrbool eqtype ssrfun ssrnat choice seq.",
            "VernacRequire",
            "f94b12801ef68951f9b51b2b9b95425e42b21647"
        ],
        [
            "From mathcomp Require Import fintype tuple bigop path.",
            "VernacRequire",
            "a9348e5c4e580a0b21459ab86ceafe95b6c812ea"
        ],
        [
            "From mathcomp Require Import order.",
            "VernacRequire",
            "9e7acb35b8056e4b78fb949c71a3f57b0e877967"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Reserved Notation \"x \\subset y\" (at level 70, y at next level).",
            "VernacSyntaxExtension",
            "966ee18dce7e0bff45c3c70b0bdd8d9c36461cb0"
        ],
        [
            "Reserved Notation \"x \\contains y\" (at level 70, y at next level, only parsing).",
            "VernacSyntaxExtension",
            "c7e8268a3773902927e50ebcd5b5d45af44aed5b"
        ],
        [
            "Reserved Notation \"x \\proper y\" (at level 70, y at next level).",
            "VernacSyntaxExtension",
            "0cff22ca29a5c24756e4e925303f341d2a14c343"
        ],
        [
            "Reserved Notation \"x \\containsproper y\" (at level 70, y at next level, only parsing).",
            "VernacSyntaxExtension",
            "e80bc82d7941519f41e4df14ae5826f6c24ac2be"
        ],
        [
            "Reserved Notation \"x \\subset y :> T\" (at level 70, y at next level).",
            "VernacSyntaxExtension",
            "45bc78bdf89b7857378f627f80583245cee47358"
        ],
        [
            "Reserved Notation \"x \\contains y :> T\" (at level 70, y at next level, only parsing).",
            "VernacSyntaxExtension",
            "35faa2dde8af5972534d3da8cd50523193b6182b"
        ],
        [
            "Reserved Notation \"x \\proper y :> T\" (at level 70, y at next level).",
            "VernacSyntaxExtension",
            "64b6d4ac9b35b7aa5599ba7cb43878bedeef18eb"
        ],
        [
            "Reserved Notation \"x \\containsproper y :> T\" (at level 70, y at next level, only parsing).",
            "VernacSyntaxExtension",
            "487da202151316c5a2eabefbde8c9b12f21e5bd0"
        ],
        [
            "Reserved Notation \"\\subsets y\" (at level 35).",
            "VernacSyntaxExtension",
            "c7b2e64c9e6c1950b235fa8328aacee75098f7ad"
        ],
        [
            "Reserved Notation \"\\supersets y\" (at level 35).",
            "VernacSyntaxExtension",
            "b587423dc1eb0c6a383ef29a3318b2b30a996e66"
        ],
        [
            "Reserved Notation \"\\propersets y\" (at level 35).",
            "VernacSyntaxExtension",
            "1d9939b1276615d167549e0626922575de435302"
        ],
        [
            "Reserved Notation \"\\superpropersets y\" (at level 35).",
            "VernacSyntaxExtension",
            "3e4d06bc6bb3b0316f2b0988e83f4952ea4cdd8c"
        ],
        [
            "Reserved Notation \"\\subsets y :> T\" (at level 35, y at next level).",
            "VernacSyntaxExtension",
            "aeac01d4cad78b7b51796289776b1ef1434e8fd2"
        ],
        [
            "Reserved Notation \"\\supersets y :> T\" (at level 35, y at next level).",
            "VernacSyntaxExtension",
            "c76a6ec786ca74b1dc1ab3a125d327aee14ff85d"
        ],
        [
            "Reserved Notation \"\\propersets y :> T\" (at level 35, y at next level).",
            "VernacSyntaxExtension",
            "92b1bca7df82ebda3e1d09336e5e87847472c767"
        ],
        [
            "Reserved Notation \"\\superpropersets y :> T\" (at level 35, y at next level).",
            "VernacSyntaxExtension",
            "463aba0623bc8b0833ad9c6530d36a5b7ef06fe1"
        ],
        [
            "Reserved Notation \"x \\subset y \\subset z\" (at level 70, y, z at next level).",
            "VernacSyntaxExtension",
            "9fcdd4beaf6204567e3b5ed93fc89812cb84a63f"
        ],
        [
            "Reserved Notation \"x \\proper y \\subset z\" (at level 70, y, z at next level).",
            "VernacSyntaxExtension",
            "838c4e08779eb690d9f995f44de61072fe08abe2"
        ],
        [
            "Reserved Notation \"x \\subset y \\proper z\" (at level 70, y, z at next level).",
            "VernacSyntaxExtension",
            "9c7910581536ad189993883cc1619010c36976e0"
        ],
        [
            "Reserved Notation \"x \\proper y \\proper z\" (at level 70, y, z at next level).",
            "VernacSyntaxExtension",
            "7a70421badf9205804084805aaaaed4e52db703a"
        ],
        [
            "Reserved Notation \"x \\subset y ?= 'iff' c\" (at level 70, y, c at next level, format \"x '[hv' \\subset y '/' ?= 'iff' c ']'\").",
            "VernacSyntaxExtension",
            "34a0ea764c5be7843d784e62df4c4c04f5cff149"
        ],
        [
            "Reserved Notation \"x \\subset y ?= 'iff' c :> T\" (at level 70, y, c at next level, format \"x '[hv' \\subset y '/' ?= 'iff' c :> T ']'\").",
            "VernacSyntaxExtension",
            "f9b4174e213c2f5a4b3fd08cc562b66ade7bfe5e"
        ],
        [
            "Reserved Notation \"~: A\" (at level 35, right associativity).",
            "VernacSyntaxExtension",
            "50cd3ddd304380eb151debdd8f3810e72aa8569d"
        ],
        [
            "Reserved Notation \"[ 'set' ~ a ]\" (at level 0, format \"[ 'set' ~ a ]\").",
            "VernacSyntaxExtension",
            "b52e4fe373e1b737f71e9dcb86000b054b6c7014"
        ],
        [
            "Reserved Notation \"[ 'set' a1 ; a2 ; .. ; an ]\" (at level 0, a1 at level 99, format \"[ 'set' a1 ; a2 ; .. ; an ]\").",
            "VernacSyntaxExtension",
            "77bbe1a8913c97229e148d0760fc962490aaf527"
        ],
        [
            "Delimit Scope abstract_set_scope with set.",
            "VernacDelimiters",
            "061dffa627f5600b7af6ee553a9517b2306522a8"
        ],
        [
            "Local Open Scope abstract_set_scope.",
            "VernacOpenCloseScope",
            "04840b137cd897cad08161798e06f32242f1cd20"
        ],
        [
            "Module SET.",
            "VernacDefineModule",
            "c09a9e2b70bfe1071af330d206544860d3adf36c"
        ],
        [
            "Import Order.Theory Order.Syntax Order.Def.",
            "VernacImport",
            "a71ca9ff8a5b5f2dc012cf882abb59017a6f2398"
        ],
        [
            "Fact display_set : unit -> unit.",
            "VernacStartTheoremProof",
            "05b287690ae66b24f285e9c151ea506115cac262"
        ],
        [
            "exact.",
            "VernacExtend",
            "6f8ef2f79d9f700fa94a7c87b5cc8bcbd915dec6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Module Import SetSyntax.",
            "VernacDefineModule",
            "7fe95cad3ea29165fcf6a254e8f60dc47472ba54"
        ],
        [
            "Notation \"\\sub%set\" := (@le (display_set _) _) : abstract_set_scope.",
            "VernacNotation",
            "1e6483db90fa86b3d882591ae2e4b1fa359da33c"
        ],
        [
            "Notation \"\\super%set\" := (@ge (display_set _) _) : abstract_set_scope.",
            "VernacNotation",
            "a147078a2926c8c39c13d7f8e0ffefeb97d5d67d"
        ],
        [
            "Notation \"\\proper%set\" := (@lt (display_set _) _) : abstract_set_scope.",
            "VernacNotation",
            "9e8158be44cc66bf52cbbde778fcffbaef6bfd3e"
        ],
        [
            "Notation \"\\superproper%set\" := (@gt (display_set _) _) : abstract_set_scope.",
            "VernacNotation",
            "868bf9b91a5f1ab8ee2aa7293a1ddff7c679b12b"
        ],
        [
            "Notation \"\\sub?%set\" := (@leif (display_set _) _) : abstract_set_scope.",
            "VernacNotation",
            "f7c10a3879cc67c0eb2ce23fd53cd670136c707d"
        ],
        [
            "Notation \"\\subsets y\" := (\\super%set y) : abstract_set_scope.",
            "VernacNotation",
            "fa1578aab75fe0d293514e722c8ca4ba54bca912"
        ],
        [
            "Notation \"\\subsets y :> T\" := (\\subsets (y : T)) : abstract_set_scope.",
            "VernacNotation",
            "bdef76ba88bab43aa508967ef6bac84196a3d140"
        ],
        [
            "Notation \"\\supersets y\" := (\\sub%set y) : abstract_set_scope.",
            "VernacNotation",
            "a37c06f14432dee47a0b6609afb574a3215d9ec8"
        ],
        [
            "Notation \"\\supersets y :> T\" := (\\supersets (y : T)) : abstract_set_scope.",
            "VernacNotation",
            "fa31424a0b353c261f7244556d01d4ce3717e39c"
        ],
        [
            "Notation \"\\propersets y\" := (\\superproper%set y) : abstract_set_scope.",
            "VernacNotation",
            "8eddc7c7d8c1f5e1a7875d9f77cdafc3a41cc687"
        ],
        [
            "Notation \"\\propersets y :> T\" := (\\propersets (y : T)) : abstract_set_scope.",
            "VernacNotation",
            "59d22a1dc17cc91523561e720478d6a85c0cdc3c"
        ],
        [
            "Notation \"\\superpropersets y\" := (\\proper%set y) : abstract_set_scope.",
            "VernacNotation",
            "7877488b7179852960c8653ea720360e9c0b55c5"
        ],
        [
            "Notation \"\\superpropersets y :> T\" := (\\superpropersets (y : T)) : abstract_set_scope.",
            "VernacNotation",
            "9da26b40e23a5cfb3d6beabf00ab76c0b3b57bdf"
        ],
        [
            "Notation \"x \\subset y\" := (\\sub%set x y) : abstract_set_scope.",
            "VernacNotation",
            "7c56ccfc3b822f1c26d05fc0b0b678c6edd67838"
        ],
        [
            "Notation \"x \\subset y :> T\" := ((x : T) \\subset (y : T)) : abstract_set_scope.",
            "VernacNotation",
            "70e67ae2b9ed19492ea4a3daf2ef4a87bc228822"
        ],
        [
            "Notation \"x \\proper y\" := (\\proper%set x y) : abstract_set_scope.",
            "VernacNotation",
            "250cc2254f4f842e536f6e8c433e088e73df5ca1"
        ],
        [
            "Notation \"x \\proper y :> T\" := ((x : T) \\proper (y : T)) : abstract_set_scope.",
            "VernacNotation",
            "d0936df5f4615d02a52be3321aadd9597772b2d9"
        ],
        [
            "Notation \"x \\subset y \\subset z\" := ((x \\subset y)%set && (y \\subset z)%set) : abstract_set_scope.",
            "VernacNotation",
            "463a25c88cf3d346c3d83455b8c621ad877a2015"
        ],
        [
            "Notation \"x \\proper y \\subset z\" := ((x \\proper y)%set && (y \\subset z)%set) : abstract_set_scope.",
            "VernacNotation",
            "6a2ea8d4c0c7d566fdb8960d70ca1540ececc978"
        ],
        [
            "Notation \"x \\subset y \\proper z\" := ((x \\subset y)%set && (y \\proper z)%set) : abstract_set_scope.",
            "VernacNotation",
            "b53926714c18059503f4bd3804d95b9ff65d4ee5"
        ],
        [
            "Notation \"x \\proper y \\proper z\" := ((x \\proper y)%set && (y \\proper z)%set) : abstract_set_scope.",
            "VernacNotation",
            "4e5930f5319ff5288a2843f2573c914e7a7f4738"
        ],
        [
            "Notation \"x \\subset y ?= 'iff' C\" := (\\sub?%set x y C) : abstract_set_scope.",
            "VernacNotation",
            "3e6f0ef04a99d8d575d308ff1a19f1883408dd38"
        ],
        [
            "Notation \"x \\subset y ?= 'iff' C :> R\" := ((x : R) \\subset (y : R) ?= iff C) (only parsing) : abstract_set_scope.",
            "VernacNotation",
            "e438bb897135ec46407dc7a5171209c0584fbfa5"
        ],
        [
            "Notation set0 := (@bottom (display_set _) _).",
            "VernacSyntacticDefinition",
            "2966fbc067de32c7edd69fbd322eaf5ce62b8b7d"
        ],
        [
            "Notation setT := (@top (display_set _) _).",
            "VernacSyntacticDefinition",
            "ed518952e27896bb8f6cc57976fecef7555618c8"
        ],
        [
            "Notation setU := (@join (display_set _) _).",
            "VernacSyntacticDefinition",
            "752e3566bb070390bcc3e9c5316ef906bbeaeaab"
        ],
        [
            "Notation setI := (@meet (display_set _) _).",
            "VernacSyntacticDefinition",
            "27762735f2c67eff14fcb0615311ef24a130af30"
        ],
        [
            "Notation setD := (@sub (display_set _) _).",
            "VernacSyntacticDefinition",
            "71d3698e9d7b2c38ddb99db6ac466bc149fcf6e7"
        ],
        [
            "Notation setC := (@compl (display_set _) _).",
            "VernacSyntacticDefinition",
            "94ce60fa5f1683eb5e6fd946aa1dbcf164944186"
        ],
        [
            "Notation \"x :&: y\" := (setI x y).",
            "VernacNotation",
            "e3761dd21fa9a46892e766e4e1c91b0501fee157"
        ],
        [
            "Notation \"x :|: y\" := (setU x y).",
            "VernacNotation",
            "02a560ef1074143c0871a0afb4431328d6702dd3"
        ],
        [
            "Notation \"x :\\: y\" := (setD x y).",
            "VernacNotation",
            "82e765ace841ffdad9409de69f56d5a6f3076151"
        ],
        [
            "Notation \"~: x\" := (setC x).",
            "VernacNotation",
            "f8b41dcf7c83bd06ed7addd18dc6fc50e9f8a94b"
        ],
        [
            "Notation \"x \\subset y\" := (\\sub%set x y) : bool_scope.",
            "VernacNotation",
            "21af20c8731966d513d15a3d5fae8d526e2224e4"
        ],
        [
            "Notation \"x \\proper y\" := (\\proper%set x y) : bool_scope.",
            "VernacNotation",
            "2f1ee064251710216e7e6e0d5ae5db6b4c0a2504"
        ],
        [
            "End SetSyntax.",
            "VernacEndSegment",
            "4dc4ca6f429710bf9c846eb951a9a815ab843741"
        ],
        [
            "Ltac EqualityPack cT xclass xT := match type of Equality.Pack with | forall sort : Type, Equality.mixin_of sort -> eqType => exact (@Equality.Pack cT xclass) | _ => exact (@Equality.Pack cT xclass xT) end.",
            "VernacExtend",
            "bd12253123293ec2da4f9186cb67d4cd4ba20348"
        ],
        [
            "Ltac ChoicePack cT xclass xT := match type of Choice.Pack with | forall sort : Type, Choice.class_of sort -> choiceType => exact (@Choice.Pack cT xclass) | _ => exact (@Choice.Pack cT xclass xT) end.",
            "VernacExtend",
            "1c7e07200e53885188ca8bbbdb71a2c78fc7fff6"
        ],
        [
            "Module Semiset.",
            "VernacDefineModule",
            "4a6d73e7a049811a0ad50982616278662f253e16"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Variable elementType : Type.",
            "VernacAssumption",
            "5b0a906c43f37a60b6af223a5e4c5124c77a067b"
        ],
        [
            "Variable eqType_of_elementType : elementType -> eqType.",
            "VernacAssumption",
            "0d9b83acd5caebf12f4115bfe0139abd76b4e393"
        ],
        [
            "Coercion eqType_of_elementType : elementType >-> eqType.",
            "VernacCoercion",
            "ec47c89d69c5f1de69307c4e2529c2afc900abc1"
        ],
        [
            "Implicit Types (X Y : elementType).",
            "VernacReserve",
            "b65929c2dbf16839f9323a72d22ecf95ed213911"
        ],
        [
            "Structure mixin_of d (set : elementType -> (cblatticeType (display_set d))) := Mixin { memset : forall X, set X -> X -> bool; set1 : forall X, X -> set X; _ : forall X (x : X), ~~ memset set0 x; _ : forall X (x y : X), memset (set1 y) x = (x == y); _ : forall X (x : X) A, (set1 x \\subset A) = (memset A x); _ : forall X (A : set X), (set0 \\proper A) -> {x | memset A x} ; _ : forall X (A B : set X), {subset memset A <= memset B} -> A \\subset B; _ : forall X (x : X) A B, (memset (A :|: B) x) = (memset A x) || (memset B x); funsort : elementType -> elementType -> Type; fun_of_funsort : forall X Y, funsort X Y -> X -> Y; imset : forall X Y, funsort X Y -> set X -> set Y; _ : forall X Y (f : funsort X Y) (A : set X) (y : Y), reflect (exists2 x : X, memset A x & y = fun_of_funsort f x) (memset (imset f A) y) }.",
            "VernacInductive",
            "164c4b55326dee456533f1602cbaeee420368267"
        ],
        [
            "Record class_of d (set : elementType -> Type) := Class { base : forall X, @Order.CBLattice.class_of (display_set d) (set X); mixin : mixin_of (fun X => Order.CBLattice.Pack (base X) (set X)) }.",
            "VernacInductive",
            "7372a2694c098327a1b7dd1c8e7829cad74a9f00"
        ],
        [
            "Local Coercion base : class_of >-> Funclass.",
            "VernacCoercion",
            "6effd2d955d8e418bdc6d110c11aaefb9d7322a4"
        ],
        [
            "Structure type d := Pack { sort ; _ : class_of d sort; _ : elementType -> Type }.",
            "VernacInductive",
            "552056dad9da191007ec89492cdd72e015b1baa5"
        ],
        [
            "Local Coercion sort : type >-> Funclass.",
            "VernacCoercion",
            "d9129ccab832b09cddeee41a3fb7b601ccdf6367"
        ],
        [
            "Variables (set : elementType -> Type) (disp : unit) (cT : type disp).",
            "VernacAssumption",
            "a0a785e8befb8b8218e6f0a966062925eccf2c7f"
        ],
        [
            "Definition class := let: Pack _ c _ as cT' := cT return class_of _ cT' in c.",
            "VernacDefinition",
            "627855ccd14e2b18140880ddde39943e777118c4"
        ],
        [
            "Definition clone disp' c of (disp = disp') & phant_id class c := @Pack disp' set c set.",
            "VernacDefinition",
            "cd5c7fc5f9ed1abf89f71bcee07d1aed5f96bea7"
        ],
        [
            "Let xset := let: Pack set _ _ := cT in set.",
            "VernacDefinition",
            "02e8ef3b106409884184e5f0b7f0ccb6af1961c6"
        ],
        [
            "Notation xclass := (class : class_of _ xset).",
            "VernacSyntacticDefinition",
            "4732cdaa2e6abbbad1c4515f8b2c4cae81f17aa0"
        ],
        [
            "Definition pack b0 (m0 : mixin_of (fun X=> @Order.CBLattice.Pack (display_set disp) (set X) (b0 X) (set X))) := fun bT b & (forall X, phant_id (@Order.CBLattice.class (display_set disp) (bT X)) (b X)) => fun m & phant_id m0 m => Pack (@Class disp set b m) set.",
            "VernacDefinition",
            "30ba52ee39a0bf96feda77f7c42d8eb2c665ec6f"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Section CanonicalDef.",
            "VernacBeginSection",
            "803f75f0efb597964b0717d62c39fddc28f8fc6d"
        ],
        [
            "Variable elementType : Type.",
            "VernacAssumption",
            "5b0a906c43f37a60b6af223a5e4c5124c77a067b"
        ],
        [
            "Variable eqType_of_elementType : elementType -> eqType.",
            "VernacAssumption",
            "0d9b83acd5caebf12f4115bfe0139abd76b4e393"
        ],
        [
            "Coercion eqType_of_elementType : elementType >-> eqType.",
            "VernacCoercion",
            "ec47c89d69c5f1de69307c4e2529c2afc900abc1"
        ],
        [
            "Notation type := (type eqType_of_elementType).",
            "VernacSyntacticDefinition",
            "19e0538e06d694a78214ed2e315a3ed94c0a5909"
        ],
        [
            "Local Coercion base : class_of >-> Funclass.",
            "VernacCoercion",
            "6effd2d955d8e418bdc6d110c11aaefb9d7322a4"
        ],
        [
            "Local Coercion sort : type >-> Funclass.",
            "VernacCoercion",
            "d9129ccab832b09cddeee41a3fb7b601ccdf6367"
        ],
        [
            "Variables (set : elementType -> Type) (X : elementType).",
            "VernacAssumption",
            "2127f288acf7e8ec77f424427cfbf39de5087f6d"
        ],
        [
            "Variables (disp : unit) (cT : type disp).",
            "VernacAssumption",
            "b1694d6a080345f25f0b660c333fbb5dd4ff3e3b"
        ],
        [
            "Local Notation ddisp := (display_set disp).",
            "VernacSyntacticDefinition",
            "4dae0144d4ab46b8ef771ef2c1c23ee6416b3732"
        ],
        [
            "Let xset := let: Pack set _ _ := cT in set.",
            "VernacDefinition",
            "02e8ef3b106409884184e5f0b7f0ccb6af1961c6"
        ],
        [
            "Notation xclass := (@class _ eqType_of_elementType _ cT : class_of eqType_of_elementType _ xset).",
            "VernacSyntacticDefinition",
            "5e45eee1f73da48bb1e5e5b49b1ad39f1dbb8194"
        ],
        [
            "Definition eqType := ltac:(EqualityPack (cT X) ((@class _ eqType_of_elementType _ cT : class_of eqType_of_elementType _ xset) X) (xset X)).",
            "VernacDefinition",
            "f72195f16b48031924d84d5b6fcfd887fb5d7f7a"
        ],
        [
            "Definition choiceType := ltac:(ChoicePack (cT X) ((@class _ eqType_of_elementType _ cT : class_of eqType_of_elementType _ xset) X) (xset X)).",
            "VernacDefinition",
            "ccf039f186a0f39c2d563a122d617bc052f91460"
        ],
        [
            "Definition porderType := @Order.POrder.Pack ddisp (cT X) (xclass X) (xset X).",
            "VernacDefinition",
            "1355dce4f34489e6e3e27a09f5a0309b25995f7c"
        ],
        [
            "Definition latticeType := @Order.Lattice.Pack ddisp (cT X) (xclass X) (xset X).",
            "VernacDefinition",
            "0347c46b408fab1d5b9dbbeadcea051bfc71c567"
        ],
        [
            "Definition blatticeType := @Order.BLattice.Pack ddisp (cT X) (xclass X) (xset X).",
            "VernacDefinition",
            "e44c8a6f40c55d10075dee690b658f52f4b1ead2"
        ],
        [
            "Definition cblatticeType := @Order.CBLattice.Pack ddisp (cT X) (xclass X) (xset X).",
            "VernacDefinition",
            "de32094f31f2baa14c5db63e9455c60d483ade20"
        ],
        [
            "End CanonicalDef.",
            "VernacEndSegment",
            "5f5453dd1caa3493c5ae103a55b6f0eb73fbb9d0"
        ],
        [
            "Module Import Exports.",
            "VernacDefineModule",
            "f5a1035b94691e963f68c6f9e1df4c47bb9f27d8"
        ],
        [
            "Coercion mixin : class_of >-> mixin_of.",
            "VernacCoercion",
            "6e94763ee53fdac946511987d81c3f6daccc67c3"
        ],
        [
            "Coercion base : class_of >-> Funclass.",
            "VernacCoercion",
            "b1fd3994d6e54edbbaf2bd99d33ef967cd491d3b"
        ],
        [
            "Coercion sort : type >-> Funclass.",
            "VernacCoercion",
            "3a7afc7a8a3e166983801c8a358a310f3790f1b3"
        ],
        [
            "Coercion eqType : type >-> Equality.type.",
            "VernacCoercion",
            "58308c67b5e73c9e004d57c486a5071598a25e8c"
        ],
        [
            "Coercion choiceType : type >-> Choice.type.",
            "VernacCoercion",
            "bdc8d608f4b963a8606cd33ad18b1977a8bcb78d"
        ],
        [
            "Coercion porderType : type >-> Order.POrder.type.",
            "VernacCoercion",
            "67eb22abe0668b48cebf1627e019444f861c264e"
        ],
        [
            "Coercion latticeType : type >-> Order.Lattice.type.",
            "VernacCoercion",
            "a292a486069605a7a0ad094a0ddeb0b48460979b"
        ],
        [
            "Coercion blatticeType : type >-> Order.BLattice.type.",
            "VernacCoercion",
            "4244dec5d252ead8db0371219d942a71e76882fe"
        ],
        [
            "Coercion cblatticeType : type >-> Order.CBLattice.type.",
            "VernacCoercion",
            "21a33c341b36a532a5bbaad0199148628e9384dc"
        ],
        [
            "Canonical eqType.",
            "VernacCanonical",
            "dd1ac877a396f552e2a8f23e59be45903d8b15ad"
        ],
        [
            "Canonical choiceType.",
            "VernacCanonical",
            "af7a1759ddd13e2b7e4e1ce16b6a3595a77b5659"
        ],
        [
            "Canonical porderType.",
            "VernacCanonical",
            "1f2601ee3286c3e905c04d57eddfe6483a6a1aef"
        ],
        [
            "Canonical latticeType.",
            "VernacCanonical",
            "45b99d0854f2cb90d22828569245cc19798f92e2"
        ],
        [
            "Canonical blatticeType.",
            "VernacCanonical",
            "0272e3c97126f3c4347e68ca6e6c33edaace71cd"
        ],
        [
            "Canonical cblatticeType.",
            "VernacCanonical",
            "d2d64b7655dea70cb64487e7e86ed629b931860b"
        ],
        [
            "Notation semisetType := type.",
            "VernacSyntacticDefinition",
            "82958588691d93667c14653d5a42874a5bbc0d47"
        ],
        [
            "Notation semisetMixin := mixin_of.",
            "VernacSyntacticDefinition",
            "2221900b7c9462716494d5de528a2c1a377d561f"
        ],
        [
            "Notation SemisetMixin := Mixin.",
            "VernacSyntacticDefinition",
            "b9bbceba9fc81037e8f86a00af483377b5e1d741"
        ],
        [
            "Notation SemisetType set m := (@pack _ _ set _ _ m _ _ (fun=> id) _ id).",
            "VernacSyntacticDefinition",
            "fa7e13345d5a82b671781c1b4f7c715d2e090b13"
        ],
        [
            "Notation \"[ 'semisetType' 'of' set 'for' cset ]\" := (@clone _ _ set _ cset _ _ erefl id) (at level 0, format \"[ 'semisetType' 'of' set 'for' cset ]\") : form_scope.",
            "VernacNotation",
            "3dfda830b4df0499fae287640334fe4a6727f987"
        ],
        [
            "Notation \"[ 'semisetType' 'of' set 'for' cset 'with' disp ]\" := (@clone _ _ set _ cset disp _ (unit_irrelevance _ _) id) (at level 0, format \"[ 'semisetType' 'of' set 'for' cset 'with' disp ]\") : form_scope.",
            "VernacNotation",
            "2040cb0d03c9ce99daef398dd21a626d32e826ad"
        ],
        [
            "Notation \"[ 'semisetType' 'of' set ]\" := [semisetType of set for _] (at level 0, format \"[ 'semisetType' 'of' set ]\") : form_scope.",
            "VernacNotation",
            "514f05838857291affbbbd3fffdd8d9edaf398f4"
        ],
        [
            "Notation \"[ 'semisetType' 'of' set 'with' disp ]\" := [semisetType of set for _ with disp] (at level 0, format \"[ 'semisetType' 'of' set 'with' disp ]\") : form_scope.",
            "VernacNotation",
            "0e350bf66a764250ed2a7e0f782c94b8ae548790"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End Semiset.",
            "VernacEndSegment",
            "033093b4f4e5e2bd9451152ace770bfc0a540be7"
        ],
        [
            "Import Semiset.Exports.",
            "VernacImport",
            "3137ab3d1bfc6ca19697014f14363502aca26568"
        ],
        [
            "Section SemisetOperations.",
            "VernacBeginSection",
            "94ab102e38512d9c94205f73dcf958dcca9f3ae3"
        ],
        [
            "Context {elementType : Type} {eqType_of_elementType : elementType -> eqType}.",
            "VernacContext",
            "68d9d95b3a2eff9d0406270230b53149289d2c49"
        ],
        [
            "Coercion eqType_of_elementType : elementType >-> eqType.",
            "VernacCoercion",
            "ec47c89d69c5f1de69307c4e2529c2afc900abc1"
        ],
        [
            "Context {disp : unit}.",
            "VernacContext",
            "3258053833db2ec939f2c12875ea3c556bf92899"
        ],
        [
            "Section setfun.",
            "VernacBeginSection",
            "6f6d09106111c1207e743b9335fa1998f1bf7efb"
        ],
        [
            "Variable (set : semisetType eqType_of_elementType disp).",
            "VernacAssumption",
            "502d037462cd6a515885580275ce6676e006337c"
        ],
        [
            "Definition setfun := Semiset.funsort (Semiset.class set).",
            "VernacDefinition",
            "d883c1ffa7e26f6488feada3963688f2bc673605"
        ],
        [
            "Definition fun_of_setfun X Y (f : setfun X Y) : X -> Y := @Semiset.fun_of_funsort _ _ _ _ (Semiset.class set) _ _ f.",
            "VernacDefinition",
            "d2dd7116d207d2ac414e388edd761bb99d09c717"
        ],
        [
            "Coercion fun_of_setfun : setfun >-> Funclass.",
            "VernacCoercion",
            "fa63fa195bbf91c92bc767ea70229abcfee73796"
        ],
        [
            "End setfun.",
            "VernacEndSegment",
            "d6fa578b01ad72fd7281cf5c6354dfc0274f34bf"
        ],
        [
            "Context {set : semisetType eqType_of_elementType disp}.",
            "VernacContext",
            "4c935fe1b987027572c912be42708e918f3c388b"
        ],
        [
            "Variable X Y : elementType.",
            "VernacAssumption",
            "f67eb3b3a3a850d7fcd239a654b5423ef5bfb14b"
        ],
        [
            "Definition memset : set X -> X -> bool := @Semiset.memset _ _ _ _ (Semiset.class set) _.",
            "VernacDefinition",
            "d83120ecf57cb30e01a3591c950d3662fbf9d76b"
        ],
        [
            "Definition set1 : X -> set X := @Semiset.set1 _ _ _ _ (Semiset.class set) _.",
            "VernacDefinition",
            "2f1966250aff3110913024f33e5af8553061483a"
        ],
        [
            "Definition imset : setfun set X Y -> set X -> set Y:= @Semiset.imset _ _ _ _ (Semiset.class set) _ _.",
            "VernacDefinition",
            "ccc753e8a184703e99abcb09f92fc4d0b458e5b5"
        ],
        [
            "Canonical set_predType := Eval hnf in mkPredType memset.",
            "VernacDefinition",
            "1e51cdb96d85547bb0ce42b2970261c2e1979703"
        ],
        [
            "Structure setpredType := SetPredType { setpred_sort :> Type; tosetpred : setpred_sort -> pred X; _ : {mem : setpred_sort -> mem_pred X | isMem tosetpred mem}; _ : {pred_fset : setpred_sort -> set X | forall p x, x \\in pred_fset p = tosetpred p x} }.",
            "VernacInductive",
            "4056c774bfba765de3bffee576bc326e57c9602e"
        ],
        [
            "Canonical setpredType_predType (fpX : setpredType) := @PredType X (setpred_sort fpX) (@tosetpred fpX) (let: SetPredType _ _ mem _ := fpX in mem).",
            "VernacDefinition",
            "aca5da3830223c96f9e336c2d3b0700f49fc6c1c"
        ],
        [
            "Definition predset (fpX : setpredType) : fpX -> set X := let: SetPredType _ _ _ (exist pred_fset _) := fpX in pred_fset.",
            "VernacDefinition",
            "f5139178a14bbdfe3d340c1ba75c1ec2d5f0725d"
        ],
        [
            "End SemisetOperations.",
            "VernacEndSegment",
            "3faefbe8b9b5cb4948aed0bf9a28e8b26327e258"
        ],
        [
            "Module Import SemisetSyntax.",
            "VernacDefineModule",
            "7e767fc57013ff838fabf5716ec4176de9a1fa61"
        ],
        [
            "Notation \"[ 'set' x : T | P ]\" := (predset (fun x : T => P%B)) (at level 0, x at level 99, only parsing) : abstract_set_scope.",
            "VernacNotation",
            "9062cda449ef1f6c620155364b3922d89ef1b9f1"
        ],
        [
            "Notation \"[ 'set' x | P ]\" := [set x : _ | P] (at level 0, x, P at level 99, format \"[ 'set' x | P ]\") : abstract_set_scope.",
            "VernacNotation",
            "a9bf35e3236dfee125f04725b02eec9d02656a36"
        ],
        [
            "Notation \"[ 'set' x 'in' A ]\" := [set x | x \\in A] (at level 0, x at level 99, format \"[ 'set' x 'in' A ]\") : abstract_set_scope.",
            "VernacNotation",
            "89b46006b6c538ab6752dd2ee28c3bfc5b5cb26e"
        ],
        [
            "Notation \"[ 'set' x : T 'in' A ]\" := [set x : T | x \\in A] (at level 0, x at level 99, only parsing) : abstract_set_scope.",
            "VernacNotation",
            "d83c61aeaeb806ec4fc6b12e3140ec06c3572576"
        ],
        [
            "Notation \"[ 'set' x : T | P & Q ]\" := [set x : T | P && Q] (at level 0, x at level 99, only parsing) : abstract_set_scope.",
            "VernacNotation",
            "7f52c56dd421f9f10a155a052e7a646ae110bd19"
        ],
        [
            "Notation \"[ 'set' x | P & Q ]\" := [set x | P && Q ] (at level 0, x, P at level 99, format \"[ 'set' x | P & Q ]\") : abstract_set_scope.",
            "VernacNotation",
            "139ef1a1590e8bcf246e3799933538183382e59d"
        ],
        [
            "Notation \"[ 'set' x : T 'in' A | P ]\" := [set x : T | x \\in A & P] (at level 0, x at level 99, only parsing) : abstract_set_scope.",
            "VernacNotation",
            "bfc159c65dea7a8cda492facc593c500d3b4b3c6"
        ],
        [
            "Notation \"[ 'set' x 'in' A | P ]\" := [set x | x \\in A & P] (at level 0, x at level 99, format \"[ 'set' x 'in' A | P ]\") : abstract_set_scope.",
            "VernacNotation",
            "eabc7f202defa9407022ddf2646426ba30917e6a"
        ],
        [
            "Notation \"[ 'set' x 'in' A | P & Q ]\" := [set x in A | P && Q] (at level 0, x at level 99, format \"[ 'set' x 'in' A | P & Q ]\") : abstract_set_scope.",
            "VernacNotation",
            "576e6e76577f657103ae25ec80fcc40cb58f2419"
        ],
        [
            "Notation \"[ 'set' x : T 'in' A | P & Q ]\" := [set x : T in A | P && Q] (at level 0, x at level 99, only parsing) : abstract_set_scope.",
            "VernacNotation",
            "27000de0e4d2a02b2ea001a9b869ed9b16adcb7b"
        ],
        [
            "Notation \"[ 'set' a ]\" := (set1 a) (at level 0, a at level 99, format \"[ 'set' a ]\") : abstract_set_scope.",
            "VernacNotation",
            "9a78798f21e2d2fe7830a82ed6c6bffb894d6c19"
        ],
        [
            "Notation \"[ 'set' a : T ]\" := [set (a : T)] (at level 0, a at level 99, format \"[ 'set' a : T ]\") : abstract_set_scope.",
            "VernacNotation",
            "c22508e35e10667a113176c2044ce7cb18b73812"
        ],
        [
            "Notation \"a |: y\" := ([set a] :|: y) : abstract_set_scope.",
            "VernacNotation",
            "57a97ff843ccd0b7557ad8e955b99d5b1aa657b4"
        ],
        [
            "Notation \"x :\\ a\" := (x :\\: [set a]) : abstract_set_scope.",
            "VernacNotation",
            "3a7d031a103195f7cea06318ffd5077fa5b5ff75"
        ],
        [
            "Notation \"[ 'set' a1 ; a2 ; .. ; an ]\" := (setU .. (a1 |: [set a2]) .. [set an]).",
            "VernacNotation",
            "8f1d14582426564bb51fa0d6164ed3547e8759b1"
        ],
        [
            "Notation \"f @: A\" := (imset f A) (at level 24) : abstract_set_scope.",
            "VernacNotation",
            "4179baab6bc6eb6bd6b68fce469bd99909203a1b"
        ],
        [
            "End SemisetSyntax.",
            "VernacEndSegment",
            "b67367d56eeb31e9bcbf3f6ab14700efb5e176f4"
        ],
        [
            "Module Import SemisetTheory.",
            "VernacDefineModule",
            "7aa3f4add18b6a11a517b7bd09f49efab38c0340"
        ],
        [
            "Section SemisetTheory.",
            "VernacBeginSection",
            "a7e51022f01efc1d23e89f17698d59151fae871a"
        ],
        [
            "Variable elementType : Type.",
            "VernacAssumption",
            "5b0a906c43f37a60b6af223a5e4c5124c77a067b"
        ],
        [
            "Variable eqType_of_elementType : elementType -> eqType.",
            "VernacAssumption",
            "0d9b83acd5caebf12f4115bfe0139abd76b4e393"
        ],
        [
            "Coercion eqType_of_elementType : elementType >-> eqType.",
            "VernacCoercion",
            "ec47c89d69c5f1de69307c4e2529c2afc900abc1"
        ],
        [
            "Variable disp : unit.",
            "VernacAssumption",
            "2bba0a8272971b730f73a3a79131561b0c20f13b"
        ],
        [
            "Variable set : semisetType eqType_of_elementType disp.",
            "VernacAssumption",
            "502d037462cd6a515885580275ce6676e006337c"
        ],
        [
            "Section setX.",
            "VernacBeginSection",
            "0eb6f413bd21b1b9d5f3e84886e7fd34988fb78b"
        ],
        [
            "Variables X : elementType.",
            "VernacAssumption",
            "6fe74071505deec2ac1cdf116747ad7404c2cc9b"
        ],
        [
            "Implicit Types (x y : X) (A B C : set X).",
            "VernacReserve",
            "ae59257d6e05f119eff383baea6f876adefd3ae5"
        ],
        [
            "Lemma notin_set0 (x : X) : x \\notin (set0 : set X).",
            "VernacStartTheoremProof",
            "2dabd222ba913da70909d90cf24991013a1c7f0b"
        ],
        [
            "rewrite /set1 /in_mem /= /memset.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: set => [S [base [memset set1 /= H ? ? ? ? ? ? ? ? ?]] ?] /=.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "exact: H.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_set1 x y : x \\in ([set y] : set X) = (x == y).",
            "VernacStartTheoremProof",
            "8871d124317e95aff5a4bf9b5c3bc5795db097c0"
        ],
        [
            "rewrite /set1 /in_mem /= /memset.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: set => [S [base [memset set1 /= ? H ? ? ? ? ? ? ? ?]] ?] /=.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "exact: H.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub1set x A : ([set x] \\subset A) = (x \\in A).",
            "VernacStartTheoremProof",
            "bf08daa84c7d265c21bf0344e9015c5635317388"
        ],
        [
            "rewrite /set1 /in_mem /= /memset.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: set A => [S [base [memset set1 /= ? ? H ? ? ? ? ? ? ?]] ?] A /=.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "exact: H.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set_gt0_ex A : set0 \\proper A -> {x | x \\in A}.",
            "VernacStartTheoremProof",
            "79ae7657fee7977384fbf923dc09f5883b3e964c"
        ],
        [
            "rewrite /set1 /in_mem /= /memset.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: set A => [S [base [memset set1 /= ? ? ? H ? ? ? ? ? ?]] ?] A /=.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "exact: H.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetP_subproof A B : {subset A <= B} -> A \\subset B.",
            "VernacStartTheoremProof",
            "2c1b994bcd331c97f01d978aac6ba0d0e2966294"
        ],
        [
            "rewrite /set1 /in_mem /= /memset.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: set A B => [S [base [memset set1 /= ? ? ? ? H ? ? ? ? ?]] ?] /=.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "exact: H.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_setU (x : X) A B : (x \\in A :|: B) = (x \\in A) || (x \\in B).",
            "VernacStartTheoremProof",
            "d16089fc003417e7c9371aca4dabd86a7ceb6a7f"
        ],
        [
            "rewrite /set1 /in_mem /= /memset.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: set A B => [S [base [memset set1 /= ? ? ? ? ? H ? ? ? ?]] ?] /=.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "exact: H.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_set0 x : x \\in (set0 : set X) = false.",
            "VernacStartTheoremProof",
            "4461c5d9bc80664587fa4d5a20e118533f617f80"
        ],
        [
            "by rewrite (negPf (notin_set0 _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetP {A B} : reflect {subset A <= B} (A <= B)%O.",
            "VernacStartTheoremProof",
            "e7381decd1b3e709fa3ed88b715ed26f8539ecdd"
        ],
        [
            "apply: (iffP idP) => [sAB x xA|/subsetP_subproof//].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite -sub1set (le_trans _ sAB) // sub1set.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setP A B : A =i B <-> A = B.",
            "VernacStartTheoremProof",
            "5ca5f1fdcc8b9605f11d0aaac7c6ccc8d651c2ca"
        ],
        [
            "split=> [eqAB|->//]; apply/eqP; rewrite eq_le.",
            "VernacExtend",
            "01f04d3f5bba3b876eb4ec7b1c8f26d2e2cced77"
        ],
        [
            "gen have leAB : A B eqAB / A \\subset B; last by rewrite !leAB.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/subsetP => x; rewrite eqAB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set1_neq0 (x : X) : [set x] != set0 :> set X.",
            "VernacStartTheoremProof",
            "89064d5728883f5352938a6b102034df783c8de0"
        ],
        [
            "by apply/negP=> /eqP /setP /(_ x); rewrite in_set0 in_set1 eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set1_eq0 x : ([set x] == set0 :> set X) = false.",
            "VernacStartTheoremProof",
            "b1e5c6936ac7c16d4026f49e14355538cc9b96e9"
        ],
        [
            "by rewrite (negPf (set1_neq0 _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set11 x : x \\in ([set x] : set X).",
            "VernacStartTheoremProof",
            "ebf0295c869aa50e69c5fbd839681e286643480d"
        ],
        [
            "by rewrite -sub1set.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve set11.",
            "VernacHints",
            "76b24dbd33b9ec1f535a2be0361d686e90fc56a1"
        ],
        [
            "Lemma set1_inj : injective (@set1 _ _ _ set X).",
            "VernacStartTheoremProof",
            "b8dab1c431d23e4ac9c74ead08d9790c4fc81dd1"
        ],
        [
            "move=> x y /eqP; rewrite eq_le sub1set => /andP [].",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by rewrite in_set1 => /eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set_0Vmem A : (A = set0) + {x : X | x \\in A}.",
            "VernacStartTheoremProof",
            "dd44b7d4eda5f2b771a923fcbe88bd9995a537cd"
        ],
        [
            "have [|AN0] := eqVneq A set0; [left|right] => //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by move: AN0; rewrite -lt0x => /set_gt0_ex.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set0Pn A : reflect (exists x, x \\in A) (A != set0).",
            "VernacStartTheoremProof",
            "800c6887dda360fd6685b3f4deaebe89fccc2bbc"
        ],
        [
            "have [->|[x xA]] := set_0Vmem A; rewrite ?eqxx -?lt0x.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "by constructor=> [[x]]; rewrite in_set0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suff -> : set0 \\proper A by constructor; exists x.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "by move: xA; rewrite -sub1set => /(lt_le_trans _)->; rewrite ?lt0x ?set1_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subset1 A x : (A \\subset [set x]) = (A == [set x]) || (A == set0).",
            "VernacStartTheoremProof",
            "53ec5782ece2f78f6bb97f9c42c6c8f6b5ef8e33"
        ],
        [
            "symmetry; rewrite eq_le; have [] /= := boolP (A \\subset [set x]); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: contraNF => /eqP ->; rewrite ?le0x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [/eqP->|[y yA]] := set_0Vmem A; rewrite ?orbT // ?sub1set.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "by move=> /subsetP /(_ _ yA); rewrite in_set1 => /eqP<-; rewrite yA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_set1 (x : X) A : (A == [set x]) = (set0 \\proper A \\subset [set x]).",
            "VernacStartTheoremProof",
            "37ae7e23869c399de2ee0ecd7e7d6bdf01a290c8"
        ],
        [
            "by rewrite subset1; have [->|?] := posxP A; rewrite 1?eq_sym ?set1_eq0 ?orbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_setI A B (x : X) : (x \\in A :&: B) = (x \\in A) && (x \\in B).",
            "VernacStartTheoremProof",
            "9862289fba28071b5e632d9e746353bfa33672df"
        ],
        [
            "apply/idP/idP => [xAB|?]; last by rewrite -sub1set lexI !sub1set.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite (subsetP (leIr _ _) _ xAB) (subsetP (leIl _ _) _ xAB).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set1U A x : [set x] :&: A = if x \\in A then [set x] else set0.",
            "VernacStartTheoremProof",
            "724d759218ff5e4d5b597c57a7d74adf03a4b34b"
        ],
        [
            "apply/setP => y; rewrite (fun_if (fun E => y \\in E)) in_setI in_set1 in_set0.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by have [->|] := altP (y =P x); rewrite ?if_same //; case: (_ \\in A).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set1U_eq0 A x : ([set x] :&: A == set0) = (x \\notin A).",
            "VernacStartTheoremProof",
            "de0f046a0747b0b458d8bf823374e571c6c47ec9"
        ],
        [
            "by rewrite set1U; case: (x \\in A); rewrite ?set1_eq0 ?eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_setD A B x : (x \\in A :\\: B) = (x \\notin B) && (x \\in A).",
            "VernacStartTheoremProof",
            "86c147d40064073c09ed580a9a6957ed2d9aae65"
        ],
        [
            "apply/idP/idP => [|/andP[xNB xA]]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -sub1set leBRL sub1set xA set1U_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -sub1set leBRL sub1set => /andP [-> dxB].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite -sub1set disj_le ?set1_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition inE := ((in_set0, in_set1, in_setU, in_setI, in_setD), inE).",
            "VernacDefinition",
            "d18bdb962e9debea2104195fd076b71a0e4baf09"
        ],
        [
            "Definition subset_trans B A C := (@le_trans _ _ B A C).",
            "VernacDefinition",
            "ea887b19b610bc1b9f6befa5f8698dd2c943ebf3"
        ],
        [
            "Definition proper_trans B A C := (@lt_trans _ _ B A C).",
            "VernacDefinition",
            "7f9d595887966687090f90eb3cdd1a9b378664ed"
        ],
        [
            "Definition sub_proper_trans B A C := (@le_lt_trans _ _ B A C).",
            "VernacDefinition",
            "8fc88a48d635adfadafef10e2085f9dbdef4472a"
        ],
        [
            "Definition proper_sub_trans B A C := (@lt_le_trans _ _ B A C).",
            "VernacDefinition",
            "51c135252f7070e8c0f1d0cb67bf3e24dc239542"
        ],
        [
            "Definition proper_sub A B := (@ltW _ _ A B).",
            "VernacDefinition",
            "934fcdd6f488d05b4cc506b4631000c3f91dc1c9"
        ],
        [
            "Lemma properP A B : reflect (A \\subset B /\\ (exists2 x, x \\in B & x \\notin A)) (A \\proper B).",
            "VernacStartTheoremProof",
            "82bcac65ea2b73bb15f4c1d127f47f6c32794ffc"
        ],
        [
            "apply: (iffP idP)=> [ltAB|[leAB [x xB xNA]]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite ltW //; split => //; have := lt0B ltAB; rewrite lt0x.",
            "VernacExtend",
            "dec625e0744a6395202e1c09905eb3865e81e16d"
        ],
        [
            "by move => /set0Pn [x]; rewrite in_setD => /andP [xNA xB]; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite lt_neqAle leAB andbT; apply: contraTneq xNA.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by move=> /setP /(_ x) ->; rewrite xB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set1P x y : reflect (x = y) (x \\in ([set y] : set X)).",
            "VernacStartTheoremProof",
            "cf608357d1ee54636ab374baf782bd56272675b0"
        ],
        [
            "by rewrite in_set1; apply/eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subset_eqP A B : reflect (A =i B) (A \\subset B \\subset A)%set.",
            "VernacStartTheoremProof",
            "1853c368a69091359fc18c2ce294897b46cf1a4f"
        ],
        [
            "apply: (iffP andP) => [[AB BA] x|eqAB]; first by apply/idP/idP; apply: subsetP.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by split; apply/subsetP=> x; rewrite !eqAB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqEsubset A B : (A == B) = (A \\subset B) && (B \\subset A).",
            "VernacStartTheoremProof",
            "f27c1f4e0f7c79a21c3869afb3bc621c665a0646"
        ],
        [
            "exact: eq_le.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma properE A B : A \\proper B = (A \\subset B) && ~~ (B \\subset A).",
            "VernacStartTheoremProof",
            "43abb97acc79cd262772f242947d97038bae0a1d"
        ],
        [
            "by case: comparableP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subEproper A B : A \\subset B = (A == B) || (A \\proper B).",
            "VernacStartTheoremProof",
            "8a162681ad0f472345b6bf9945626c43c1127c0b"
        ],
        [
            "exact: le_eqVlt.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqVproper A B : A \\subset B -> A = B \\/ A \\proper B.",
            "VernacStartTheoremProof",
            "91eb169fc44398c43b487a48abf3d48f8064ad5e"
        ],
        [
            "by rewrite subEproper => /predU1P.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma properEneq A B : A \\proper B = (A != B) && (A \\subset B).",
            "VernacStartTheoremProof",
            "08648626d4d38e83d3e44c4d8098274458434f7a"
        ],
        [
            "exact: lt_neqAle.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma proper_neq A B : A \\proper B -> A != B.",
            "VernacStartTheoremProof",
            "1440584c512b63290f5c7fd5462af56b44ead8ff"
        ],
        [
            "by rewrite properEneq; case/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqEproper A B : (A == B) = (A \\subset B) && ~~ (A \\proper B).",
            "VernacStartTheoremProof",
            "9d9bf296ff8a85ef713fcf9a6aab12befb5da508"
        ],
        [
            "by case: comparableP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub0set A : set0 \\subset A.",
            "VernacStartTheoremProof",
            "e6c9160002347a959016390426e451f5f9731942"
        ],
        [
            "by apply/subsetP=> x; rewrite inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subset0 A : (A \\subset set0) = (A == set0).",
            "VernacStartTheoremProof",
            "97bd1687dae1451b764ac36698b1a5b32289cb5a"
        ],
        [
            "by rewrite eqEsubset sub0set andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma proper0 A : (set0 \\proper A) = (A != set0).",
            "VernacStartTheoremProof",
            "a1a54a59cbbe5fcefe1ee33f3a95ee439fa685c9"
        ],
        [
            "by rewrite properE sub0set subset0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subset_neq0 A B : A \\subset B -> A != set0 -> B != set0.",
            "VernacStartTheoremProof",
            "281362e177f1ad1098731843176d20560d3387e0"
        ],
        [
            "by rewrite -!proper0 => sAB /proper_sub_trans->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setU1r x a B : x \\in B -> x \\in a |: B.",
            "VernacStartTheoremProof",
            "2a3819ae4c5a301697fda291f42a3ebce701a7a6"
        ],
        [
            "by move=> Bx; rewrite !inE predU1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setU1P x a B : reflect (x = a \\/ x \\in B) (x \\in a |: B).",
            "VernacStartTheoremProof",
            "f10e6f40293747bf9d1273ef568f7144a9aa13f0"
        ],
        [
            "by rewrite !inE; apply: predU1P.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set1Ul x A b : x \\in A -> x \\in A :|: [set b].",
            "VernacStartTheoremProof",
            "de97768bafca75cc11b34b936c2c26bc3478e745"
        ],
        [
            "by move=> Ax; rewrite !inE Ax.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set1Ur A b : b \\in A :|: [set b].",
            "VernacStartTheoremProof",
            "bf0e8a1e3eed6bb19da0610b3e425165d529c846"
        ],
        [
            "by rewrite !inE eqxx orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setD1P x A b : reflect (x != b /\\ x \\in A) (x \\in A :\\ b).",
            "VernacStartTheoremProof",
            "5ead6289933709b35840a9705bf9d4d42db57229"
        ],
        [
            "by rewrite !inE; apply: andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_setD1 x A b : (x \\in A :\\ b) = (x != b) && (x \\in A) .",
            "VernacStartTheoremProof",
            "7826253342ddc3f09ded2a0429fce8e1c11caf5f"
        ],
        [
            "by rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setD11 b A : (b \\in A :\\ b) = false.",
            "VernacStartTheoremProof",
            "fa3f33212b6e1d12d49de53e2f384263239e7502"
        ],
        [
            "by rewrite !inE eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setD1K a A : a \\in A -> a |: (A :\\ a) = A.",
            "VernacStartTheoremProof",
            "d3050099c84fcb2e20b34a88762409bae3bb4d22"
        ],
        [
            "by move=> Aa; apply/setP=> x; rewrite !inE; case: eqP => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setU1K a B : a \\notin B -> (a |: B) :\\ a = B.",
            "VernacStartTheoremProof",
            "2d79fdd5544bb423e6e9e10f104805850b969ba3"
        ],
        [
            "by move/negPf=> nBa; apply/setP=> x; rewrite !inE; case: eqP => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set2P x a b : reflect (x = a \\/ x = b) (x \\in ([set a; b] : set X)).",
            "VernacStartTheoremProof",
            "e3328c1b0c4688469c4391bc8845ef638434c2f4"
        ],
        [
            "by rewrite !inE; apply: pred2P.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_set2 x a b : (x \\in ([set a; b] : set X)) = (x == a) || (x == b).",
            "VernacStartTheoremProof",
            "c0fbc71c5fda3d3288e2ccbeafc2259bc0354af9"
        ],
        [
            "by rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set21 a b : a \\in ([set a; b] : set X).",
            "VernacStartTheoremProof",
            "2342fe812d4dbf0fa8e886435be8fb216f72a1cb"
        ],
        [
            "by rewrite !inE eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set22 a b : b \\in ([set a; b] : set X).",
            "VernacStartTheoremProof",
            "32b3e75fc298c6f5c0311134ae62008d82781cc0"
        ],
        [
            "by rewrite !inE eqxx orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUP x A B : reflect (x \\in A \\/ x \\in B) (x \\in A :|: B).",
            "VernacStartTheoremProof",
            "8ce0cfebe7f7490475d4be0fcdd7b1b215162c42"
        ],
        [
            "by rewrite !inE; apply: orP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUC A B : A :|: B = B :|: A.",
            "VernacStartTheoremProof",
            "64023076429e0540b43c2dd2c2e76a0918883d9a"
        ],
        [
            "by apply/setP => x; rewrite !inE orbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUS A B C : A \\subset B -> C :|: A \\subset C :|: B.",
            "VernacStartTheoremProof",
            "9ddfe04bd23919455d018ed0b76e9d47c63d66f2"
        ],
        [
            "move=> sAB; apply/subsetP=> x; rewrite !inE.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by case: (x \\in C) => //; apply: (subsetP sAB).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setSU A B C : A \\subset B -> A :|: C \\subset B :|: C.",
            "VernacStartTheoremProof",
            "6ac938f85807eafdc52c45f1957e5741d3af8af5"
        ],
        [
            "by move=> sAB; rewrite -!(setUC C) setUS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUSS A B C D : A \\subset C -> B \\subset D -> A :|: B \\subset C :|: D.",
            "VernacStartTheoremProof",
            "0556d477a66fcb4b5726d18a3a579c8f688109ef"
        ],
        [
            "by move=> /(setSU B) /subset_trans sAC /(setUS C)/sAC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set0U A : set0 :|: A = A.",
            "VernacStartTheoremProof",
            "5fed377b088ceec523bfd3375c9077e6f896f91d"
        ],
        [
            "by apply/setP => x; rewrite !inE orFb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setU0 A : A :|: set0 = A.",
            "VernacStartTheoremProof",
            "c89523af3261f775482273c7589e66ae95b88686"
        ],
        [
            "by rewrite setUC set0U.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUA A B C : A :|: (B :|: C) = A :|: B :|: C.",
            "VernacStartTheoremProof",
            "9f5ce2416b7bfaf0673a11e004ba6fe17931d5e3"
        ],
        [
            "by apply/setP => x; rewrite !inE orbA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUCA A B C : A :|: (B :|: C) = B :|: (A :|: C).",
            "VernacStartTheoremProof",
            "f3dff1e90c120322edd6d88670eff03f99103218"
        ],
        [
            "by rewrite !setUA (setUC B).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUAC A B C : A :|: B :|: C = A :|: C :|: B.",
            "VernacStartTheoremProof",
            "5377d5676bafaeb45aa2e09d6c18201d00f82d7b"
        ],
        [
            "by rewrite -!setUA (setUC B).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUACA A B C D : (A :|: B) :|: (C :|: D) = (A :|: C) :|: (B :|: D).",
            "VernacStartTheoremProof",
            "2b92a910c7d13fd7db562ae3c06c9be9a7d81f87"
        ],
        [
            "by rewrite -!setUA (setUCA B).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUid A : A :|: A = A.",
            "VernacStartTheoremProof",
            "0c722f8fbb8cfcf77e2978ef56c5fd1c03b1bad4"
        ],
        [
            "by apply/setP=> x; rewrite inE orbb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUUl A B C : A :|: B :|: C = (A :|: C) :|: (B :|: C).",
            "VernacStartTheoremProof",
            "5a93c884f7ce0e9c102e83d71def4c75d47dd1a6"
        ],
        [
            "by rewrite setUA !(setUAC _ C) -(setUA _ C) setUid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUUr A B C : A :|: (B :|: C) = (A :|: B) :|: (A :|: C).",
            "VernacStartTheoremProof",
            "e7d791c4d4ebf2134632a07d4d65a81ab4e801a0"
        ],
        [
            "by rewrite !(setUC A) setUUl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIP x A B : reflect (x \\in A /\\ x \\in B) (x \\in A :&: B).",
            "VernacStartTheoremProof",
            "74e5a51b6bf649f3e5dbb12d200f7e249967c0a6"
        ],
        [
            "by rewrite !inE; apply: andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIC A B : A :&: B = B :&: A.",
            "VernacStartTheoremProof",
            "cfb155a690361f5b79db13b947e5e96dad7f7778"
        ],
        [
            "by apply/setP => x; rewrite !inE andbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIS A B C : A \\subset B -> C :&: A \\subset C :&: B.",
            "VernacStartTheoremProof",
            "43e47624384bbfb74f923f85984b1c92703dfdb7"
        ],
        [
            "move=> sAB; apply/subsetP=> x; rewrite !inE.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by case: (x \\in C) => //; apply: (subsetP sAB).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setSI A B C : A \\subset B -> A :&: C \\subset B :&: C.",
            "VernacStartTheoremProof",
            "1ca884d7bb20fb628ec5ac64e8013c2d4202844c"
        ],
        [
            "by move=> sAB; rewrite -!(setIC C) setIS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setISS A B C D : A \\subset C -> B \\subset D -> A :&: B \\subset C :&: D.",
            "VernacStartTheoremProof",
            "8aa108efa9c99e248854b9e88fdeb8ba98b336ec"
        ],
        [
            "by move=> /(setSI B) /subset_trans sAC /(setIS C) /sAC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set0I A : set0 :&: A = set0.",
            "VernacStartTheoremProof",
            "ad1eb6fcdd9c14b9b0af8e4998787225b1c3ae76"
        ],
        [
            "by apply/setP => x; rewrite !inE andFb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setI0 A : A :&: set0 = set0.",
            "VernacStartTheoremProof",
            "7203022b9d03d11cd86602837d69082278ab4ea1"
        ],
        [
            "by rewrite setIC set0I.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIA A B C : A :&: (B :&: C) = A :&: B :&: C.",
            "VernacStartTheoremProof",
            "7ee71985049510b463fb3fb3351521c90e2d2eaf"
        ],
        [
            "by apply/setP=> x; rewrite !inE andbA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setICA A B C : A :&: (B :&: C) = B :&: (A :&: C).",
            "VernacStartTheoremProof",
            "fe1a2d43059ec6fecb2846b49664169aae1a75cb"
        ],
        [
            "by rewrite !setIA (setIC A).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIAC A B C : A :&: B :&: C = A :&: C :&: B.",
            "VernacStartTheoremProof",
            "f6f61470748f721b07406d0a4c5b4fc554048726"
        ],
        [
            "by rewrite -!setIA (setIC B).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIACA A B C D : (A :&: B) :&: (C :&: D) = (A :&: C) :&: (B :&: D).",
            "VernacStartTheoremProof",
            "bcd27209750456e0ce6708e761b7885ad0210e45"
        ],
        [
            "by rewrite -!setIA (setICA B).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIid A : A :&: A = A.",
            "VernacStartTheoremProof",
            "f766e5c8cd85678f03f77e9a97098efefb5d5db2"
        ],
        [
            "by apply/setP=> x; rewrite inE andbb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIIl A B C : A :&: B :&: C = (A :&: C) :&: (B :&: C).",
            "VernacStartTheoremProof",
            "1718cb53054d9e39e48995cc6e3329f68ba0f8f1"
        ],
        [
            "by rewrite setIA !(setIAC _ C) -(setIA _ C) setIid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIIr A B C : A :&: (B :&: C) = (A :&: B) :&: (A :&: C).",
            "VernacStartTheoremProof",
            "57598381e441cdb0c262a2863404e205a7d75db8"
        ],
        [
            "by rewrite !(setIC A) setIIl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIUr A B C : A :&: (B :|: C) = (A :&: B) :|: (A :&: C).",
            "VernacStartTheoremProof",
            "5cb0578c68962532cf0b6227fadc1e124f9f6030"
        ],
        [
            "by apply/setP=> x; rewrite !inE andb_orr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIUl A B C : (A :|: B) :&: C = (A :&: C) :|: (B :&: C).",
            "VernacStartTheoremProof",
            "8551bb054b750ed9a0841e4b1fb6a211ba4a7543"
        ],
        [
            "by apply/setP=> x; rewrite !inE andb_orl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUIr A B C : A :|: (B :&: C) = (A :|: B) :&: (A :|: C).",
            "VernacStartTheoremProof",
            "9dfc6fd95cbde9bc4af80f0adf7fc9cfa7e3e3fd"
        ],
        [
            "by apply/setP=> x; rewrite !inE orb_andr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUIl A B C : (A :&: B) :|: C = (A :|: C) :&: (B :|: C).",
            "VernacStartTheoremProof",
            "ea6c83c2ff7b5e7a24e34a99b93d33ac55033a6b"
        ],
        [
            "by apply/setP=> x; rewrite !inE orb_andl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUK A B : (A :|: B) :&: A = A.",
            "VernacStartTheoremProof",
            "3ff41257cdc26fda62450313d03b866760e86acb"
        ],
        [
            "by apply/setP=> x; rewrite !inE orbK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setKU A B : A :&: (B :|: A) = A.",
            "VernacStartTheoremProof",
            "38fc7a8d0c174ccb61e9d3c13fac1759810ec205"
        ],
        [
            "by apply/setP=> x; rewrite !inE orKb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIK A B : (A :&: B) :|: A = A.",
            "VernacStartTheoremProof",
            "f491cf2bc69fe39c5e6fef767cf1a7e9669436d8"
        ],
        [
            "by apply/setP=> x; rewrite !inE andbK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setKI A B : A :|: (B :&: A) = A.",
            "VernacStartTheoremProof",
            "074669d78555716f98e1fc857b9d132f370b3901"
        ],
        [
            "by apply/setP=> x; rewrite !inE andKb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setDP A B x : reflect (x \\in A /\\ x \\notin B) (x \\in A :\\: B).",
            "VernacStartTheoremProof",
            "b869615bd58ea2c2da8fb6a394acdc0097ed2107"
        ],
        [
            "by rewrite inE andbC; apply: andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setSD A B C : A \\subset B -> A :\\: C \\subset B :\\: C.",
            "VernacStartTheoremProof",
            "277f23bc61e5ca317974a9432324a47ff6b63e21"
        ],
        [
            "by move=> /subsetP AB; apply/subsetP => x; rewrite !inE => /andP[-> /AB].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setDS A B C : A \\subset B -> C :\\: B \\subset C :\\: A.",
            "VernacStartTheoremProof",
            "ea27634c1a8e7055517ce985f088a119f015896e"
        ],
        [
            "move=> /subsetP AB; apply/subsetP => x; rewrite !inE => /andP[].",
            "VernacExtend",
            "b7d55d5cc9e609b184db748f6780e12224901e48"
        ],
        [
            "by move=> /(contra (AB _)) ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setDSS A B C D : A \\subset C -> D \\subset B -> A :\\: B \\subset C :\\: D.",
            "VernacStartTheoremProof",
            "d338579d109897db4cd29e66fc61933a37b809c1"
        ],
        [
            "by move=> /(setSD B) /subset_trans sAC /(setDS C) /sAC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setD0 A : A :\\: set0 = A.",
            "VernacStartTheoremProof",
            "268be609c75e4bc99df8d35fa4591ed0086b3adb"
        ],
        [
            "exact: subx0.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set0D A : set0 :\\: A = set0.",
            "VernacStartTheoremProof",
            "902482ba3f24087cbce4b799bd7db977e44cbfc1"
        ],
        [
            "exact: sub0x.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setDv A : A :\\: A = set0.",
            "VernacStartTheoremProof",
            "68857f42029334e50062e4c214b22184db2c504f"
        ],
        [
            "exact: subxx.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setID A B : A :&: B :|: A :\\: B = A.",
            "VernacStartTheoremProof",
            "c831ef266c23708afd38906340a344ea4db0b78d"
        ],
        [
            "exact: joinIB.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setDUl A B C : (A :|: B) :\\: C = (A :\\: C) :|: (B :\\: C).",
            "VernacStartTheoremProof",
            "57ae7abd8c83620b37c5b5ac815add32519099fa"
        ],
        [
            "exact: subUx.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setDUr A B C : A :\\: (B :|: C) = (A :\\: B) :&: (A :\\: C).",
            "VernacStartTheoremProof",
            "0a387f2201926c29dab5ec4c3e9eb24bf5d943d3"
        ],
        [
            "exact: subxU.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setDIl A B C : (A :&: B) :\\: C = (A :\\: C) :&: (B :\\: C).",
            "VernacStartTheoremProof",
            "ec48be8ed047c1083ecfe3b9c54c2801fb246dc0"
        ],
        [
            "exact: subIx.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIDA A B C : A :&: (B :\\: C) = (A :&: B) :\\: C.",
            "VernacStartTheoremProof",
            "53a183b20656c3837435e45d9d7a8afa7e5fca96"
        ],
        [
            "exact: meetxB.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIDAC A B C : (A :\\: B) :&: C = (A :&: C) :\\: B.",
            "VernacStartTheoremProof",
            "595a40fb07e62696a43a43fb4d7b90f3573024aa"
        ],
        [
            "exact: meetBx.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setDIr A B C : A :\\: (B :&: C) = (A :\\: B) :|: (A :\\: C).",
            "VernacStartTheoremProof",
            "aee36678b55497de44ffac0544f12242d0c86523"
        ],
        [
            "exact: subxI.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setDDl A B C : (A :\\: B) :\\: C = A :\\: (B :|: C).",
            "VernacStartTheoremProof",
            "ab74353a475f745157a99b2b40b8d17c7acbf9bc"
        ],
        [
            "exact: subBx.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setDDr A B C : A :\\: (B :\\: C) = (A :\\: B) :|: (A :&: C).",
            "VernacStartTheoremProof",
            "f3208053cb245d1d6dc97d9f5c0afec15988e29a"
        ],
        [
            "exact: subxB.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetIl A B : A :&: B \\subset A.",
            "VernacStartTheoremProof",
            "e4540b69abcd5b396a0951eca3c51084595aa7ed"
        ],
        [
            "by apply/subsetP=> x; rewrite inE; case/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetIr A B : A :&: B \\subset B.",
            "VernacStartTheoremProof",
            "2b4f18b051ebd6a5579a71d0f696a5da5add7155"
        ],
        [
            "by apply/subsetP=> x; rewrite inE; case/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetUl A B : A \\subset A :|: B.",
            "VernacStartTheoremProof",
            "c7c45fcb45fb6f827b5220c013356a8e27edb6e1"
        ],
        [
            "by apply/subsetP=> x; rewrite inE => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetUr A B : B \\subset A :|: B.",
            "VernacStartTheoremProof",
            "e62db95d940192514221297a5f8e8fddb814ad83"
        ],
        [
            "by apply/subsetP=> x; rewrite inE orbC => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetU1 x A : A \\subset x |: A.",
            "VernacStartTheoremProof",
            "92c4273f12269fb0fb6614614e0ce1f6cf5e6598"
        ],
        [
            "exact: subsetUr.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetDl A B : A :\\: B \\subset A.",
            "VernacStartTheoremProof",
            "6999a58ac2af40351a6fd625e0c7d2aa6d6ce5aa"
        ],
        [
            "exact: leBx.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subD1set A x : A :\\ x \\subset A.",
            "VernacStartTheoremProof",
            "1aacf67a82dade377da442739be7f7f60778735e"
        ],
        [
            "by rewrite subsetDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIidPl A B : reflect (A :&: B = A) (A \\subset B).",
            "VernacStartTheoremProof",
            "c0f11fac8ed6c6f52aea887a7dc3a9c8d4d99a21"
        ],
        [
            "apply: (iffP subsetP) => [sAB | <- x /setIP[] //].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by apply/setP=> x; rewrite inE; apply/andb_idr/sAB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments setIidPl {A B}.",
            "VernacArguments",
            "8932ba9eedfc510f859e01498f0a40b8630d1edc"
        ],
        [
            "Lemma setIidPr A B : reflect (A :&: B = B) (B \\subset A).",
            "VernacStartTheoremProof",
            "c895fe6a5f4dd26c3ca6af0c436238cc6d3e09d2"
        ],
        [
            "by rewrite setIC; apply: setIidPl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUidPl A B : reflect (A :|: B = A) (B \\subset A).",
            "VernacStartTheoremProof",
            "b66c32ac059014464e04e31e5c88882ac258858b"
        ],
        [
            "exact: join_idPr.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUidPr A B : reflect (A :|: B = B) (A \\subset B).",
            "VernacStartTheoremProof",
            "6e99dba03b2a62f0c44decd6e86756281c7839cc"
        ],
        [
            "by rewrite setUC; apply: setUidPl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subIset A B C : (B \\subset A) || (C \\subset A) -> (B :&: C \\subset A).",
            "VernacStartTheoremProof",
            "2e6d00ea36ec02287dc70119739c575c4a7e2957"
        ],
        [
            "by case/orP; apply: subset_trans; rewrite (subsetIl, subsetIr).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetI A B C : (A \\subset B :&: C) = (A \\subset B) && (A \\subset C).",
            "VernacStartTheoremProof",
            "1dcbe7e75b95dd6b504d43ef800162ee9a8e6ee2"
        ],
        [
            "rewrite !(sameP setIidPl eqP) setIA; have [-> //| ] := altP (A :&: B =P A).",
            "VernacExtend",
            "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
        ],
        [
            "by apply: contraNF => /eqP <-; rewrite -setIA -setIIl setIAC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetIP A B C : reflect (A \\subset B /\\ A \\subset C) (A \\subset B :&: C).",
            "VernacStartTheoremProof",
            "b0d70fb4cab4dcf0292dd87155ca366a071604ef"
        ],
        [
            "by rewrite subsetI; apply: andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetIidl A B : (A \\subset A :&: B) = (A \\subset B).",
            "VernacStartTheoremProof",
            "2b3dfecbd356e76301d7bedc77e32d5f1b5d5e80"
        ],
        [
            "by rewrite subsetI lexx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetIidr A B : (B \\subset A :&: B) = (B \\subset A).",
            "VernacStartTheoremProof",
            "fd111381cf3457ba176b6494b461a31ca3b0624e"
        ],
        [
            "by rewrite setIC subsetIidl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subUset A B C : (B :|: C \\subset A) = (B \\subset A) && (C \\subset A).",
            "VernacStartTheoremProof",
            "d0385c41995ba581142b38912e78265b78911992"
        ],
        [
            "exact: leUx.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetU A B C : (A \\subset B) || (A \\subset C) -> A \\subset B :|: C.",
            "VernacStartTheoremProof",
            "10112a0bd33078efc3f7c9c9992423c551310ec0"
        ],
        [
            "exact: lexU.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subUsetP A B C : reflect (A \\subset C /\\ B \\subset C) (A :|: B \\subset C).",
            "VernacStartTheoremProof",
            "e6bc19845077a36c77d6de181ce810e2a29af009"
        ],
        [
            "by rewrite subUset; apply: andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subDset A B C : (A :\\: B \\subset C) = (A \\subset B :|: C).",
            "VernacStartTheoremProof",
            "74a0ca33c0b35fcf0466c5e44c703d97343deb0b"
        ],
        [
            "exact: leBLR.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setU_eq0 A B : (A :|: B == set0) = (A == set0) && (B == set0).",
            "VernacStartTheoremProof",
            "635cd52da0ce3eae229bff156a814b6cfc007a63"
        ],
        [
            "by rewrite -!subset0 subUset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setD_eq0 A B : (A :\\: B == set0) = (A \\subset B).",
            "VernacStartTheoremProof",
            "6e78d93c6948b51abab1cc97b5cced8ab23dbb75"
        ],
        [
            "by rewrite -subset0 subDset setU0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetD1 A B x : (A \\subset B :\\ x) = (A \\subset B) && (x \\notin A).",
            "VernacStartTheoremProof",
            "52d8f49022738baff1fcfadfdfb3716f7339127f"
        ],
        [
            "rewrite andbC; have [xA|] //= := boolP (x \\in A).",
            "VernacExtend",
            "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
        ],
        [
            "by apply: contraTF isT => /subsetP /(_ x xA); rewrite !inE eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> xNA; apply/subsetP/subsetP => sAB y yA.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by have:= sAB y yA; rewrite !inE => /andP[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite !inE sAB // andbT; apply: contraNneq xNA => <-.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetD1P A B x : reflect (A \\subset B /\\ x \\notin A) (A \\subset B :\\ x).",
            "VernacStartTheoremProof",
            "5c15ee2f190e7038cbcb0542bce1168780bf8802"
        ],
        [
            "by rewrite subsetD1; apply: andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma properD1 A x : x \\in A -> A :\\ x \\proper A.",
            "VernacStartTheoremProof",
            "92a31e1754a986519685ad3dfc1585f77d0a6602"
        ],
        [
            "by move=> Ax; rewrite properE subsetDl /= subsetD1 Ax andbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma properIr A B : ~~ (B \\subset A) -> A :&: B \\proper B.",
            "VernacStartTheoremProof",
            "273fb1ae25373078972a55a31ae4f894ec996029"
        ],
        [
            "by move=> nsAB; rewrite properE subsetIr subsetI negb_and nsAB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma properIl A B : ~~ (A \\subset B) -> A :&: B \\proper A.",
            "VernacStartTheoremProof",
            "736d6e659bfa6f2fc6fdbcb12133bcfe06a347d1"
        ],
        [
            "by move=> nsBA; rewrite properE subsetIl subsetI negb_and nsBA orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma properUr A B : ~~ (A \\subset B) -> B \\proper A :|: B.",
            "VernacStartTheoremProof",
            "9bbbfaca0cffec3662e985dc6cd923aea887355e"
        ],
        [
            "by rewrite properE subsetUr subUset lexx /= andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma properUl A B : ~~ (B \\subset A) -> A \\proper A :|: B.",
            "VernacStartTheoremProof",
            "6116021a07d60a073d6c3827843a4ee9db9375dd"
        ],
        [
            "by move=> not_sBA; rewrite setUC properUr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma proper1set A x : ([set x] \\proper A) -> (x \\in A).",
            "VernacStartTheoremProof",
            "b26068d8d3509d9ccaa4e306a041cc8c00cb5b3d"
        ],
        [
            "by move/proper_sub; rewrite sub1set.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma properIset A B C : (B \\proper A) || (C \\proper A) -> (B :&: C \\proper A).",
            "VernacStartTheoremProof",
            "ee4fc65a1edf583d1fedfb1e8c702471a274f569"
        ],
        [
            "by case/orP; apply: sub_proper_trans; rewrite (subsetIl, subsetIr).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma properI A B C : (A \\proper B :&: C) -> (A \\proper B) && (A \\proper C).",
            "VernacStartTheoremProof",
            "a702270b0cb43c16e098974e81e3d23cbddb89a5"
        ],
        [
            "move=> pAI; apply/andP.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by split; apply: (proper_sub_trans pAI); rewrite (subsetIl, subsetIr).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma properU A B C : (B :|: C \\proper A) -> (B \\proper A) && (C \\proper A).",
            "VernacStartTheoremProof",
            "3ef45c92d61ac8f30417ccd68c9edad2df5f99bd"
        ],
        [
            "move=> pUA; apply/andP.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by split; apply: sub_proper_trans pUA; rewrite (subsetUr, subsetUl).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End setX.",
            "VernacEndSegment",
            "594916d3bc5d0a5e6cbc8bd244048585d3120b48"
        ],
        [
            "Section setXY.",
            "VernacBeginSection",
            "f38a3bb6371ae782d0b80322161332c740438db9"
        ],
        [
            "Variables X Y : elementType.",
            "VernacAssumption",
            "f67eb3b3a3a850d7fcd239a654b5423ef5bfb14b"
        ],
        [
            "Implicit Types (x : X) (y : Y) (A : set X) (B : set Y) (f : setfun set X Y).",
            "VernacReserve",
            "b72b5e5c9f4de5d298cadbe88dd688509d9d93b2"
        ],
        [
            "Lemma imsetP (f : setfun set X Y) A y : reflect (exists2 x : X, x \\in A & y = f x) (y \\in imset f A).",
            "VernacStartTheoremProof",
            "237047a848b10a614a4df3c945da341554cac44a"
        ],
        [
            "move: A f; rewrite /set1 /in_mem /= /memset /imset /setfun.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "case: set => [S [base [memset set1 /= ? ? ? ? ? ? ? ? ? H]]] ? /= A f.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "exact: H.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_imset f A x : x \\in A -> f x \\in imset f A.",
            "VernacStartTheoremProof",
            "0792e06c95b263165370c3457dd32f1ce0364394"
        ],
        [
            "by move=> Dx; apply/imsetP; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imset0 f : imset f set0 = set0.",
            "VernacStartTheoremProof",
            "a9247a57989f1fb2fbbf244ac44296f1115056fe"
        ],
        [
            "apply/setP => y; rewrite in_set0.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by apply/imsetP => [[x]]; rewrite in_set0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imset_eq0 f A : (imset f A == set0) = (A == set0).",
            "VernacStartTheoremProof",
            "b5054dac926659e130a332a3dea7a89c3ad99049"
        ],
        [
            "have [->|/set_gt0_ex [x xA]] := posxP A; first by rewrite imset0 eqxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/set0Pn; exists (f x); rewrite mem_imset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imset_set1 f x : imset f [set x] = [set f x].",
            "VernacStartTheoremProof",
            "3266f3798656d59fa9e86d348e76f9f5631acd9e"
        ],
        [
            "apply/setP => y.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by apply/imsetP/set1P=> [[x' /set1P-> //]| ->]; exists x; rewrite ?set11.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imsetS f A A' : A \\subset A' -> imset f A \\subset imset f A'.",
            "VernacStartTheoremProof",
            "4e2f9a79506a5cb4cee90a7467db91ad8e92ff40"
        ],
        [
            "move=> leAB; apply/subsetP => y /imsetP [x xA ->].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite mem_imset // (subsetP leAB).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imset_proper f A A' : {in A' &, injective f} -> A \\proper A' -> imset f A \\proper imset f A'.",
            "VernacStartTheoremProof",
            "a2aba1e4c7739da78a099d3d66357a29610d37ba"
        ],
        [
            "move=> injf /properP[sAB [x Bx nAx]]; rewrite lt_leAnge imsetS //=.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "apply: contra nAx => sfBA.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "have: f x \\in imset f A by rewrite (subsetP sfBA) ?mem_imset.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by case/imsetP=> y Ay /injf-> //; apply: subsetP sAB y Ay.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End setXY.",
            "VernacEndSegment",
            "83001f94e24454a570d5bfa7e004a656fb88e98b"
        ],
        [
            "End SemisetTheory.",
            "VernacEndSegment",
            "e70862020c19591cd069f1941cefd53a5e8b042d"
        ],
        [
            "End SemisetTheory.",
            "VernacEndSegment",
            "e70862020c19591cd069f1941cefd53a5e8b042d"
        ],
        [
            "Module set.",
            "VernacDefineModule",
            "4fa72be286e0ddd12ea57e7fb5f3eb9273f8f342"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Variable elementType : Type.",
            "VernacAssumption",
            "5b0a906c43f37a60b6af223a5e4c5124c77a067b"
        ],
        [
            "Variable eqType_of_elementType : elementType -> eqType.",
            "VernacAssumption",
            "0d9b83acd5caebf12f4115bfe0139abd76b4e393"
        ],
        [
            "Coercion eqType_of_elementType : elementType >-> eqType.",
            "VernacCoercion",
            "ec47c89d69c5f1de69307c4e2529c2afc900abc1"
        ],
        [
            "Implicit Types (X Y : elementType).",
            "VernacReserve",
            "b65929c2dbf16839f9323a72d22ecf95ed213911"
        ],
        [
            "Record class_of d (set : elementType -> Type) := Class { base : forall X, Order.CTBLattice.class_of (display_set d) (set X); mixin : Semiset.mixin_of eqType_of_elementType (fun X => Order.CBLattice.Pack (base X) (set X)) }.",
            "VernacInductive",
            "5a6be75d3511384d345d37fc4f57db28bcce8d89"
        ],
        [
            "Local Coercion base : class_of >-> Funclass.",
            "VernacCoercion",
            "6effd2d955d8e418bdc6d110c11aaefb9d7322a4"
        ],
        [
            "Definition base2 d (set : elementType -> Type) (c : class_of d set) := Semiset.Class (@mixin _ set c).",
            "VernacDefinition",
            "a9141b7bdabbb8e210c4f4e4a14977ae7e736977"
        ],
        [
            "Local Coercion base2 : class_of >-> Semiset.class_of.",
            "VernacCoercion",
            "7f66498c86df2077234942c9415d272b103cc4b5"
        ],
        [
            "Structure type d := Pack { sort ; _ : class_of d sort; _ : elementType -> Type }.",
            "VernacInductive",
            "552056dad9da191007ec89492cdd72e015b1baa5"
        ],
        [
            "Local Coercion sort : type >-> Funclass.",
            "VernacCoercion",
            "d9129ccab832b09cddeee41a3fb7b601ccdf6367"
        ],
        [
            "Variables (set : elementType -> Type) (disp : unit) (cT : type disp).",
            "VernacAssumption",
            "a0a785e8befb8b8218e6f0a966062925eccf2c7f"
        ],
        [
            "Definition class := let: Pack _ c _ as cT' := cT return class_of _ cT' in c.",
            "VernacDefinition",
            "627855ccd14e2b18140880ddde39943e777118c4"
        ],
        [
            "Let xset := let: Pack set _ _ := cT in set.",
            "VernacDefinition",
            "02e8ef3b106409884184e5f0b7f0ccb6af1961c6"
        ],
        [
            "Notation xclass := (class : class_of xset).",
            "VernacSyntacticDefinition",
            "57da0add136ef48eca15ea88aa451245289b6017"
        ],
        [
            "Definition pack := fun bT (b : forall X, Order.CTBLattice.class_of _ _) & (forall X, phant_id (@Order.CTBLattice.class disp (bT X)) (b X)) => fun mT m & phant_id (@Semiset.class _ eqType_of_elementType mT) (@Semiset.Class _ _ disp set b m) => Pack (@Class _ set (fun x => b x) m) set.",
            "VernacDefinition",
            "d02a618b455553a8492cf2b9bb06add84ddca379"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Section CanonicalDef.",
            "VernacBeginSection",
            "803f75f0efb597964b0717d62c39fddc28f8fc6d"
        ],
        [
            "Variable elementType : Type.",
            "VernacAssumption",
            "5b0a906c43f37a60b6af223a5e4c5124c77a067b"
        ],
        [
            "Variable eqType_of_elementType : elementType -> eqType.",
            "VernacAssumption",
            "0d9b83acd5caebf12f4115bfe0139abd76b4e393"
        ],
        [
            "Coercion eqType_of_elementType : elementType >-> eqType.",
            "VernacCoercion",
            "ec47c89d69c5f1de69307c4e2529c2afc900abc1"
        ],
        [
            "Notation type := (type eqType_of_elementType).",
            "VernacSyntacticDefinition",
            "19e0538e06d694a78214ed2e315a3ed94c0a5909"
        ],
        [
            "Local Coercion sort : type >-> Funclass.",
            "VernacCoercion",
            "d9129ccab832b09cddeee41a3fb7b601ccdf6367"
        ],
        [
            "Local Coercion base : class_of >-> Funclass.",
            "VernacCoercion",
            "6effd2d955d8e418bdc6d110c11aaefb9d7322a4"
        ],
        [
            "Local Coercion base2 : class_of >-> Semiset.class_of.",
            "VernacCoercion",
            "7f66498c86df2077234942c9415d272b103cc4b5"
        ],
        [
            "Variables (set : elementType -> Type) (X : elementType).",
            "VernacAssumption",
            "2127f288acf7e8ec77f424427cfbf39de5087f6d"
        ],
        [
            "Variable (disp : unit) (cT : type disp).",
            "VernacAssumption",
            "b1694d6a080345f25f0b660c333fbb5dd4ff3e3b"
        ],
        [
            "Local Notation ddisp := (display_set disp).",
            "VernacSyntacticDefinition",
            "4dae0144d4ab46b8ef771ef2c1c23ee6416b3732"
        ],
        [
            "Let xset := let: Pack set _ _ := cT in set.",
            "VernacDefinition",
            "02e8ef3b106409884184e5f0b7f0ccb6af1961c6"
        ],
        [
            "Notation xclass := (@class _ eqType_of_elementType _ cT : class_of eqType_of_elementType _ xset).",
            "VernacSyntacticDefinition",
            "5e45eee1f73da48bb1e5e5b49b1ad39f1dbb8194"
        ],
        [
            "Definition eqType := ltac:(EqualityPack (cT X) ((@class _ eqType_of_elementType _ cT : class_of eqType_of_elementType _ xset) X) (xset X)).",
            "VernacDefinition",
            "f72195f16b48031924d84d5b6fcfd887fb5d7f7a"
        ],
        [
            "Definition choiceType := ltac:(ChoicePack (cT X) ((@class _ eqType_of_elementType _ cT : class_of eqType_of_elementType _ xset) X) (xset X)).",
            "VernacDefinition",
            "ccf039f186a0f39c2d563a122d617bc052f91460"
        ],
        [
            "Definition porderType := @Order.POrder.Pack ddisp (cT X) (xclass X) (xset X).",
            "VernacDefinition",
            "1355dce4f34489e6e3e27a09f5a0309b25995f7c"
        ],
        [
            "Definition latticeType := @Order.Lattice.Pack ddisp (cT X) (xclass X) (xset X).",
            "VernacDefinition",
            "0347c46b408fab1d5b9dbbeadcea051bfc71c567"
        ],
        [
            "Definition blatticeType := @Order.BLattice.Pack ddisp (cT X) (xclass X) (xset X).",
            "VernacDefinition",
            "e44c8a6f40c55d10075dee690b658f52f4b1ead2"
        ],
        [
            "Definition cblatticeType := @Order.CBLattice.Pack ddisp (cT X) (xclass X) (xset X).",
            "VernacDefinition",
            "de32094f31f2baa14c5db63e9455c60d483ade20"
        ],
        [
            "Definition ctblatticeType := @Order.CTBLattice.Pack ddisp (cT X) (xclass X) (xset X).",
            "VernacDefinition",
            "08846fb07ace0a99dddc90f91cfccedc4b8b9ac5"
        ],
        [
            "Definition semisetType := @Semiset.Pack _ _ disp cT xclass xset.",
            "VernacDefinition",
            "5e7b79ae2c360b8c5c1f563ecbae58832f88c999"
        ],
        [
            "Definition semiset_ctblatticeType := @Order.CTBLattice.Pack ddisp (semisetType X) (xclass X) (xset X).",
            "VernacDefinition",
            "f93fd4149dfca047ca353b197806deb646a3b908"
        ],
        [
            "End CanonicalDef.",
            "VernacEndSegment",
            "5f5453dd1caa3493c5ae103a55b6f0eb73fbb9d0"
        ],
        [
            "Module Import Exports.",
            "VernacDefineModule",
            "f5a1035b94691e963f68c6f9e1df4c47bb9f27d8"
        ],
        [
            "Coercion base : class_of >-> Funclass.",
            "VernacCoercion",
            "b1fd3994d6e54edbbaf2bd99d33ef967cd491d3b"
        ],
        [
            "Coercion base2 : class_of >-> Semiset.class_of.",
            "VernacCoercion",
            "b641131cf42e12b040d6e3a6fd0853d367207755"
        ],
        [
            "Coercion sort : type >-> Funclass.",
            "VernacCoercion",
            "3a7afc7a8a3e166983801c8a358a310f3790f1b3"
        ],
        [
            "Coercion eqType : type >-> Equality.type.",
            "VernacCoercion",
            "58308c67b5e73c9e004d57c486a5071598a25e8c"
        ],
        [
            "Coercion choiceType : type >-> Choice.type.",
            "VernacCoercion",
            "bdc8d608f4b963a8606cd33ad18b1977a8bcb78d"
        ],
        [
            "Coercion porderType : type >-> Order.POrder.type.",
            "VernacCoercion",
            "67eb22abe0668b48cebf1627e019444f861c264e"
        ],
        [
            "Coercion latticeType : type >-> Order.Lattice.type.",
            "VernacCoercion",
            "a292a486069605a7a0ad094a0ddeb0b48460979b"
        ],
        [
            "Coercion blatticeType : type >-> Order.BLattice.type.",
            "VernacCoercion",
            "4244dec5d252ead8db0371219d942a71e76882fe"
        ],
        [
            "Coercion cblatticeType : type >-> Order.CBLattice.type.",
            "VernacCoercion",
            "21a33c341b36a532a5bbaad0199148628e9384dc"
        ],
        [
            "Coercion ctblatticeType : type >-> Order.CTBLattice.type.",
            "VernacCoercion",
            "9b0b2e7478f8528be1d6b7c80c85d0390f88d119"
        ],
        [
            "Coercion semisetType : type >-> Semiset.type.",
            "VernacCoercion",
            "b966138944447864297ea715fb76511f35c51f07"
        ],
        [
            "Canonical eqType.",
            "VernacCanonical",
            "dd1ac877a396f552e2a8f23e59be45903d8b15ad"
        ],
        [
            "Canonical choiceType.",
            "VernacCanonical",
            "af7a1759ddd13e2b7e4e1ce16b6a3595a77b5659"
        ],
        [
            "Canonical porderType.",
            "VernacCanonical",
            "1f2601ee3286c3e905c04d57eddfe6483a6a1aef"
        ],
        [
            "Canonical latticeType.",
            "VernacCanonical",
            "45b99d0854f2cb90d22828569245cc19798f92e2"
        ],
        [
            "Canonical blatticeType.",
            "VernacCanonical",
            "0272e3c97126f3c4347e68ca6e6c33edaace71cd"
        ],
        [
            "Canonical cblatticeType.",
            "VernacCanonical",
            "d2d64b7655dea70cb64487e7e86ed629b931860b"
        ],
        [
            "Canonical ctblatticeType.",
            "VernacCanonical",
            "8205bab0501d3b1638ae87307ee510ef88eda83f"
        ],
        [
            "Canonical semisetType.",
            "VernacCanonical",
            "d2a7423eb38beb8f181039b46381e5c98d8c9c75"
        ],
        [
            "Notation setType := type.",
            "VernacSyntacticDefinition",
            "ee7e50f4112dbb2764a3919888adee08839aee18"
        ],
        [
            "Notation \"[ 'setType' 'of' set ]\" := (@pack _ _ set _ _ _ (fun=> id) _ _ id) (at level 0, format \"[ 'setType' 'of' set ]\") : form_scope.",
            "VernacNotation",
            "60e62ab7f3f034d198e6890279944f168a68428e"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End set.",
            "VernacEndSegment",
            "a81a92cfdbf8d1ee85f2acaeab1bcf22252375ea"
        ],
        [
            "Import set.Exports.",
            "VernacImport",
            "9f70b6a9689e48d8fd1e48bdfbe0d478f6263c97"
        ],
        [
            "Module Import setTheory.",
            "VernacDefineModule",
            "8ed43d04b244bdc1785e823b0280f159002acae5"
        ],
        [
            "Section setTheory.",
            "VernacBeginSection",
            "4a50616e2da4b41fb7cb6bbeef80cc99ac541d30"
        ],
        [
            "Variable elementType : Type.",
            "VernacAssumption",
            "5b0a906c43f37a60b6af223a5e4c5124c77a067b"
        ],
        [
            "Variable eqType_of_elementType : elementType -> eqType.",
            "VernacAssumption",
            "0d9b83acd5caebf12f4115bfe0139abd76b4e393"
        ],
        [
            "Coercion eqType_of_elementType : elementType >-> eqType.",
            "VernacCoercion",
            "ec47c89d69c5f1de69307c4e2529c2afc900abc1"
        ],
        [
            "Variable disp : unit.",
            "VernacAssumption",
            "2bba0a8272971b730f73a3a79131561b0c20f13b"
        ],
        [
            "Variable set : setType eqType_of_elementType disp.",
            "VernacAssumption",
            "e822c6c2e049033040839dc60f7f0887827c21de"
        ],
        [
            "Section setX.",
            "VernacBeginSection",
            "0eb6f413bd21b1b9d5f3e84886e7fd34988fb78b"
        ],
        [
            "Variables X : elementType.",
            "VernacAssumption",
            "6fe74071505deec2ac1cdf116747ad7404c2cc9b"
        ],
        [
            "Implicit Types (x y : X) (A B : set X).",
            "VernacReserve",
            "ad60bf1a46527ef14c901a1eb96ab798d303d0ea"
        ],
        [
            "End setX.",
            "VernacEndSegment",
            "594916d3bc5d0a5e6cbc8bd244048585d3120b48"
        ],
        [
            "End setTheory.",
            "VernacEndSegment",
            "dc773ed94d41ae95404843a9b31f3b9ee21e5eed"
        ],
        [
            "End setTheory.",
            "VernacEndSegment",
            "dc773ed94d41ae95404843a9b31f3b9ee21e5eed"
        ],
        [
            "Module Theory.",
            "VernacDefineModule",
            "ee0e24a0dfafd6fabdc3e744c74d7c5a9c820de0"
        ],
        [
            "Export Semiset.Exports.",
            "VernacImport",
            "23bfcab80617c77849a36e6620a9dc0b1c64e910"
        ],
        [
            "Export set.Exports.",
            "VernacImport",
            "d2349a83dcb51886bafee6e3bfbcd7691754f995"
        ],
        [
            "Export SetSyntax.",
            "VernacImport",
            "6cdba7a3599e889b44a9c86eb449251b87bc77cf"
        ],
        [
            "Export SemisetSyntax.",
            "VernacImport",
            "8d81b6d01bcccd10bed7428ff433005e93000372"
        ],
        [
            "Export SemisetTheory.",
            "VernacImport",
            "ecc2881e1d157970b531f428be56f9bbadaef9b7"
        ],
        [
            "Export setTheory.",
            "VernacImport",
            "8390e883c61a10194cdae325d3246042297587ef"
        ],
        [
            "End Theory.",
            "VernacEndSegment",
            "3b5383a8665fcdb23b7893346ca6ee697173139d"
        ],
        [
            "End SET.",
            "VernacEndSegment",
            "d2571cc43c409d0e2dc2344d87e729c839d1c990"
        ]
    ],
    "proofs": [
        {
            "name": "display_set",
            "line_nb": 35,
            "steps": [
                {
                    "command": [
                        "exact.",
                        "VernacExtend",
                        "6f8ef2f79d9f700fa94a7c87b5cc8bcbd915dec6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "notin_set0",
            "line_nb": 189,
            "steps": [
                {
                    "command": [
                        "rewrite /set1 /in_mem /= /memset.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: set => [S [base [memset set1 /= H ? ? ? ? ? ? ? ? ?]] ?] /=.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "exact: H.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_set1",
            "line_nb": 194,
            "steps": [
                {
                    "command": [
                        "rewrite /set1 /in_mem /= /memset.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: set => [S [base [memset set1 /= ? H ? ? ? ? ? ? ? ?]] ?] /=.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "exact: H.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub1set",
            "line_nb": 199,
            "steps": [
                {
                    "command": [
                        "rewrite /set1 /in_mem /= /memset.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: set A => [S [base [memset set1 /= ? ? H ? ? ? ? ? ? ?]] ?] A /=.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "exact: H.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set_gt0_ex",
            "line_nb": 204,
            "steps": [
                {
                    "command": [
                        "rewrite /set1 /in_mem /= /memset.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: set A => [S [base [memset set1 /= ? ? ? H ? ? ? ? ? ?]] ?] A /=.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "exact: H.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetP_subproof",
            "line_nb": 209,
            "steps": [
                {
                    "command": [
                        "rewrite /set1 /in_mem /= /memset.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: set A B => [S [base [memset set1 /= ? ? ? ? H ? ? ? ? ?]] ?] /=.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "exact: H.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_setU",
            "line_nb": 214,
            "steps": [
                {
                    "command": [
                        "rewrite /set1 /in_mem /= /memset.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: set A B => [S [base [memset set1 /= ? ? ? ? ? H ? ? ? ?]] ?] /=.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "exact: H.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_set0",
            "line_nb": 219,
            "steps": [
                {
                    "command": [
                        "by rewrite (negPf (notin_set0 _)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetP",
            "line_nb": 222,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [sAB x xA|/subsetP_subproof//].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -sub1set (le_trans _ sAB) // sub1set.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setP",
            "line_nb": 226,
            "steps": [
                {
                    "command": [
                        "split=> [eqAB|->//]; apply/eqP; rewrite eq_le.",
                        "VernacExtend",
                        "01f04d3f5bba3b876eb4ec7b1c8f26d2e2cced77"
                    ]
                },
                {
                    "command": [
                        "gen have leAB : A B eqAB / A \\subset B; last by rewrite !leAB.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/subsetP => x; rewrite eqAB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set1_neq0",
            "line_nb": 231,
            "steps": [
                {
                    "command": [
                        "by apply/negP=> /eqP /setP /(_ x); rewrite in_set0 in_set1 eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set1_eq0",
            "line_nb": 234,
            "steps": [
                {
                    "command": [
                        "by rewrite (negPf (set1_neq0 _)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set11",
            "line_nb": 237,
            "steps": [
                {
                    "command": [
                        "by rewrite -sub1set.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set1_inj",
            "line_nb": 241,
            "steps": [
                {
                    "command": [
                        "move=> x y /eqP; rewrite eq_le sub1set => /andP [].",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "by rewrite in_set1 => /eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set_0Vmem",
            "line_nb": 245,
            "steps": [
                {
                    "command": [
                        "have [|AN0] := eqVneq A set0; [left|right] => //.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by move: AN0; rewrite -lt0x => /set_gt0_ex.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set0Pn",
            "line_nb": 249,
            "steps": [
                {
                    "command": [
                        "have [->|[x xA]] := set_0Vmem A; rewrite ?eqxx -?lt0x.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "by constructor=> [[x]]; rewrite in_set0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "suff -> : set0 \\proper A by constructor; exists x.",
                        "VernacExtend",
                        "d07fc8b2103f140554938023774bf3f75d04ba99"
                    ]
                },
                {
                    "command": [
                        "by move: xA; rewrite -sub1set => /(lt_le_trans _)->; rewrite ?lt0x ?set1_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subset1",
            "line_nb": 255,
            "steps": [
                {
                    "command": [
                        "symmetry; rewrite eq_le; have [] /= := boolP (A \\subset [set x]); last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply: contraNF => /eqP ->; rewrite ?le0x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [/eqP->|[y yA]] := set_0Vmem A; rewrite ?orbT // ?sub1set.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "by move=> /subsetP /(_ _ yA); rewrite in_set1 => /eqP<-; rewrite yA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_set1",
            "line_nb": 261,
            "steps": [
                {
                    "command": [
                        "by rewrite subset1; have [->|?] := posxP A; rewrite 1?eq_sym ?set1_eq0 ?orbF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_setI",
            "line_nb": 264,
            "steps": [
                {
                    "command": [
                        "apply/idP/idP => [xAB|?]; last by rewrite -sub1set lexI !sub1set.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite (subsetP (leIr _ _) _ xAB) (subsetP (leIl _ _) _ xAB).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set1U",
            "line_nb": 268,
            "steps": [
                {
                    "command": [
                        "apply/setP => y; rewrite (fun_if (fun E => y \\in E)) in_setI in_set1 in_set0.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by have [->|] := altP (y =P x); rewrite ?if_same //; case: (_ \\in A).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set1U_eq0",
            "line_nb": 272,
            "steps": [
                {
                    "command": [
                        "by rewrite set1U; case: (x \\in A); rewrite ?set1_eq0 ?eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "properP",
            "line_nb": 287,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP)=> [ltAB|[leAB [x xB xNA]]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "rewrite ltW //; split => //; have := lt0B ltAB; rewrite lt0x.",
                        "VernacExtend",
                        "dec625e0744a6395202e1c09905eb3865e81e16d"
                    ]
                },
                {
                    "command": [
                        "by move => /set0Pn [x]; rewrite in_setD => /andP [xNA xB]; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite lt_neqAle leAB andbT; apply: contraTneq xNA.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by move=> /setP /(_ x) ->; rewrite xB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set1P",
            "line_nb": 294,
            "steps": [
                {
                    "command": [
                        "by rewrite in_set1; apply/eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subset_eqP",
            "line_nb": 297,
            "steps": [
                {
                    "command": [
                        "apply: (iffP andP) => [[AB BA] x|eqAB]; first by apply/idP/idP; apply: subsetP.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by split; apply/subsetP=> x; rewrite !eqAB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqEsubset",
            "line_nb": 301,
            "steps": [
                {
                    "command": [
                        "exact: eq_le.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "properE",
            "line_nb": 304,
            "steps": [
                {
                    "command": [
                        "by case: comparableP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subEproper",
            "line_nb": 307,
            "steps": [
                {
                    "command": [
                        "exact: le_eqVlt.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqVproper",
            "line_nb": 310,
            "steps": [
                {
                    "command": [
                        "by rewrite subEproper => /predU1P.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "properEneq",
            "line_nb": 313,
            "steps": [
                {
                    "command": [
                        "exact: lt_neqAle.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proper_neq",
            "line_nb": 316,
            "steps": [
                {
                    "command": [
                        "by rewrite properEneq; case/andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqEproper",
            "line_nb": 319,
            "steps": [
                {
                    "command": [
                        "by case: comparableP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub0set",
            "line_nb": 322,
            "steps": [
                {
                    "command": [
                        "by apply/subsetP=> x; rewrite inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subset0",
            "line_nb": 325,
            "steps": [
                {
                    "command": [
                        "by rewrite eqEsubset sub0set andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proper0",
            "line_nb": 328,
            "steps": [
                {
                    "command": [
                        "by rewrite properE sub0set subset0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subset_neq0",
            "line_nb": 331,
            "steps": [
                {
                    "command": [
                        "by rewrite -!proper0 => sAB /proper_sub_trans->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setU1r",
            "line_nb": 334,
            "steps": [
                {
                    "command": [
                        "by move=> Bx; rewrite !inE predU1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setU1P",
            "line_nb": 337,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE; apply: predU1P.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set1Ul",
            "line_nb": 340,
            "steps": [
                {
                    "command": [
                        "by move=> Ax; rewrite !inE Ax.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set1Ur",
            "line_nb": 343,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE eqxx orbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setD1P",
            "line_nb": 346,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE; apply: andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_setD1",
            "line_nb": 349,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setD11",
            "line_nb": 352,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setD1K",
            "line_nb": 355,
            "steps": [
                {
                    "command": [
                        "by move=> Aa; apply/setP=> x; rewrite !inE; case: eqP => // ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setU1K",
            "line_nb": 358,
            "steps": [
                {
                    "command": [
                        "by move/negPf=> nBa; apply/setP=> x; rewrite !inE; case: eqP => // ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set2P",
            "line_nb": 361,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE; apply: pred2P.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_set2",
            "line_nb": 364,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set21",
            "line_nb": 367,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set22",
            "line_nb": 370,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE eqxx orbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUP",
            "line_nb": 373,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE; apply: orP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUC",
            "line_nb": 376,
            "steps": [
                {
                    "command": [
                        "by apply/setP => x; rewrite !inE orbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUS",
            "line_nb": 379,
            "steps": [
                {
                    "command": [
                        "move=> sAB; apply/subsetP=> x; rewrite !inE.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by case: (x \\in C) => //; apply: (subsetP sAB).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setSU",
            "line_nb": 383,
            "steps": [
                {
                    "command": [
                        "by move=> sAB; rewrite -!(setUC C) setUS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUSS",
            "line_nb": 386,
            "steps": [
                {
                    "command": [
                        "by move=> /(setSU B) /subset_trans sAC /(setUS C)/sAC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set0U",
            "line_nb": 389,
            "steps": [
                {
                    "command": [
                        "by apply/setP => x; rewrite !inE orFb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setU0",
            "line_nb": 392,
            "steps": [
                {
                    "command": [
                        "by rewrite setUC set0U.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUA",
            "line_nb": 395,
            "steps": [
                {
                    "command": [
                        "by apply/setP => x; rewrite !inE orbA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUCA",
            "line_nb": 398,
            "steps": [
                {
                    "command": [
                        "by rewrite !setUA (setUC B).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUAC",
            "line_nb": 401,
            "steps": [
                {
                    "command": [
                        "by rewrite -!setUA (setUC B).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUACA",
            "line_nb": 404,
            "steps": [
                {
                    "command": [
                        "by rewrite -!setUA (setUCA B).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUid",
            "line_nb": 407,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite inE orbb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUUl",
            "line_nb": 410,
            "steps": [
                {
                    "command": [
                        "by rewrite setUA !(setUAC _ C) -(setUA _ C) setUid.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUUr",
            "line_nb": 413,
            "steps": [
                {
                    "command": [
                        "by rewrite !(setUC A) setUUl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIP",
            "line_nb": 416,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE; apply: andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIC",
            "line_nb": 419,
            "steps": [
                {
                    "command": [
                        "by apply/setP => x; rewrite !inE andbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIS",
            "line_nb": 422,
            "steps": [
                {
                    "command": [
                        "move=> sAB; apply/subsetP=> x; rewrite !inE.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by case: (x \\in C) => //; apply: (subsetP sAB).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setSI",
            "line_nb": 426,
            "steps": [
                {
                    "command": [
                        "by move=> sAB; rewrite -!(setIC C) setIS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setISS",
            "line_nb": 429,
            "steps": [
                {
                    "command": [
                        "by move=> /(setSI B) /subset_trans sAC /(setIS C) /sAC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set0I",
            "line_nb": 432,
            "steps": [
                {
                    "command": [
                        "by apply/setP => x; rewrite !inE andFb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setI0",
            "line_nb": 435,
            "steps": [
                {
                    "command": [
                        "by rewrite setIC set0I.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIA",
            "line_nb": 438,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE andbA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setICA",
            "line_nb": 441,
            "steps": [
                {
                    "command": [
                        "by rewrite !setIA (setIC A).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIAC",
            "line_nb": 444,
            "steps": [
                {
                    "command": [
                        "by rewrite -!setIA (setIC B).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIACA",
            "line_nb": 447,
            "steps": [
                {
                    "command": [
                        "by rewrite -!setIA (setICA B).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIid",
            "line_nb": 450,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite inE andbb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIIl",
            "line_nb": 453,
            "steps": [
                {
                    "command": [
                        "by rewrite setIA !(setIAC _ C) -(setIA _ C) setIid.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIIr",
            "line_nb": 456,
            "steps": [
                {
                    "command": [
                        "by rewrite !(setIC A) setIIl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIUr",
            "line_nb": 459,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE andb_orr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIUl",
            "line_nb": 462,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE andb_orl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUIr",
            "line_nb": 465,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE orb_andr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUIl",
            "line_nb": 468,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE orb_andl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUK",
            "line_nb": 471,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE orbK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setKU",
            "line_nb": 474,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE orKb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIK",
            "line_nb": 477,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE andbK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setKI",
            "line_nb": 480,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE andKb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setDP",
            "line_nb": 483,
            "steps": [
                {
                    "command": [
                        "by rewrite inE andbC; apply: andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setSD",
            "line_nb": 486,
            "steps": [
                {
                    "command": [
                        "by move=> /subsetP AB; apply/subsetP => x; rewrite !inE => /andP[-> /AB].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setDS",
            "line_nb": 489,
            "steps": [
                {
                    "command": [
                        "move=> /subsetP AB; apply/subsetP => x; rewrite !inE => /andP[].",
                        "VernacExtend",
                        "b7d55d5cc9e609b184db748f6780e12224901e48"
                    ]
                },
                {
                    "command": [
                        "by move=> /(contra (AB _)) ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setDSS",
            "line_nb": 493,
            "steps": [
                {
                    "command": [
                        "by move=> /(setSD B) /subset_trans sAC /(setDS C) /sAC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setD0",
            "line_nb": 496,
            "steps": [
                {
                    "command": [
                        "exact: subx0.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set0D",
            "line_nb": 499,
            "steps": [
                {
                    "command": [
                        "exact: sub0x.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setDv",
            "line_nb": 502,
            "steps": [
                {
                    "command": [
                        "exact: subxx.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setID",
            "line_nb": 505,
            "steps": [
                {
                    "command": [
                        "exact: joinIB.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setDUl",
            "line_nb": 508,
            "steps": [
                {
                    "command": [
                        "exact: subUx.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setDUr",
            "line_nb": 511,
            "steps": [
                {
                    "command": [
                        "exact: subxU.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setDIl",
            "line_nb": 514,
            "steps": [
                {
                    "command": [
                        "exact: subIx.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIDA",
            "line_nb": 517,
            "steps": [
                {
                    "command": [
                        "exact: meetxB.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIDAC",
            "line_nb": 520,
            "steps": [
                {
                    "command": [
                        "exact: meetBx.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setDIr",
            "line_nb": 523,
            "steps": [
                {
                    "command": [
                        "exact: subxI.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setDDl",
            "line_nb": 526,
            "steps": [
                {
                    "command": [
                        "exact: subBx.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setDDr",
            "line_nb": 529,
            "steps": [
                {
                    "command": [
                        "exact: subxB.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetIl",
            "line_nb": 532,
            "steps": [
                {
                    "command": [
                        "by apply/subsetP=> x; rewrite inE; case/andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetIr",
            "line_nb": 535,
            "steps": [
                {
                    "command": [
                        "by apply/subsetP=> x; rewrite inE; case/andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetUl",
            "line_nb": 538,
            "steps": [
                {
                    "command": [
                        "by apply/subsetP=> x; rewrite inE => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetUr",
            "line_nb": 541,
            "steps": [
                {
                    "command": [
                        "by apply/subsetP=> x; rewrite inE orbC => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetU1",
            "line_nb": 544,
            "steps": [
                {
                    "command": [
                        "exact: subsetUr.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetDl",
            "line_nb": 547,
            "steps": [
                {
                    "command": [
                        "exact: leBx.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subD1set",
            "line_nb": 550,
            "steps": [
                {
                    "command": [
                        "by rewrite subsetDl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIidPl",
            "line_nb": 553,
            "steps": [
                {
                    "command": [
                        "apply: (iffP subsetP) => [sAB | <- x /setIP[] //].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by apply/setP=> x; rewrite inE; apply/andb_idr/sAB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIidPr",
            "line_nb": 558,
            "steps": [
                {
                    "command": [
                        "by rewrite setIC; apply: setIidPl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUidPl",
            "line_nb": 561,
            "steps": [
                {
                    "command": [
                        "exact: join_idPr.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUidPr",
            "line_nb": 564,
            "steps": [
                {
                    "command": [
                        "by rewrite setUC; apply: setUidPl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subIset",
            "line_nb": 567,
            "steps": [
                {
                    "command": [
                        "by case/orP; apply: subset_trans; rewrite (subsetIl, subsetIr).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetI",
            "line_nb": 570,
            "steps": [
                {
                    "command": [
                        "rewrite !(sameP setIidPl eqP) setIA; have [-> //| ] := altP (A :&: B =P A).",
                        "VernacExtend",
                        "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
                    ]
                },
                {
                    "command": [
                        "by apply: contraNF => /eqP <-; rewrite -setIA -setIIl setIAC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetIP",
            "line_nb": 574,
            "steps": [
                {
                    "command": [
                        "by rewrite subsetI; apply: andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetIidl",
            "line_nb": 577,
            "steps": [
                {
                    "command": [
                        "by rewrite subsetI lexx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetIidr",
            "line_nb": 580,
            "steps": [
                {
                    "command": [
                        "by rewrite setIC subsetIidl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subUset",
            "line_nb": 583,
            "steps": [
                {
                    "command": [
                        "exact: leUx.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetU",
            "line_nb": 586,
            "steps": [
                {
                    "command": [
                        "exact: lexU.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subUsetP",
            "line_nb": 589,
            "steps": [
                {
                    "command": [
                        "by rewrite subUset; apply: andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subDset",
            "line_nb": 592,
            "steps": [
                {
                    "command": [
                        "exact: leBLR.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setU_eq0",
            "line_nb": 595,
            "steps": [
                {
                    "command": [
                        "by rewrite -!subset0 subUset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setD_eq0",
            "line_nb": 598,
            "steps": [
                {
                    "command": [
                        "by rewrite -subset0 subDset setU0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetD1",
            "line_nb": 601,
            "steps": [
                {
                    "command": [
                        "rewrite andbC; have [xA|] //= := boolP (x \\in A).",
                        "VernacExtend",
                        "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
                    ]
                },
                {
                    "command": [
                        "by apply: contraTF isT => /subsetP /(_ x xA); rewrite !inE eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move=> xNA; apply/subsetP/subsetP => sAB y yA.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by have:= sAB y yA; rewrite !inE => /andP[].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite !inE sAB // andbT; apply: contraNneq xNA => <-.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetD1P",
            "line_nb": 608,
            "steps": [
                {
                    "command": [
                        "by rewrite subsetD1; apply: andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "properD1",
            "line_nb": 611,
            "steps": [
                {
                    "command": [
                        "by move=> Ax; rewrite properE subsetDl /= subsetD1 Ax andbF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "properIr",
            "line_nb": 614,
            "steps": [
                {
                    "command": [
                        "by move=> nsAB; rewrite properE subsetIr subsetI negb_and nsAB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "properIl",
            "line_nb": 617,
            "steps": [
                {
                    "command": [
                        "by move=> nsBA; rewrite properE subsetIl subsetI negb_and nsBA orbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "properUr",
            "line_nb": 620,
            "steps": [
                {
                    "command": [
                        "by rewrite properE subsetUr subUset lexx /= andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "properUl",
            "line_nb": 623,
            "steps": [
                {
                    "command": [
                        "by move=> not_sBA; rewrite setUC properUr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proper1set",
            "line_nb": 626,
            "steps": [
                {
                    "command": [
                        "by move/proper_sub; rewrite sub1set.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "properIset",
            "line_nb": 629,
            "steps": [
                {
                    "command": [
                        "by case/orP; apply: sub_proper_trans; rewrite (subsetIl, subsetIr).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imsetP",
            "line_nb": 644,
            "steps": [
                {
                    "command": [
                        "move: A f; rewrite /set1 /in_mem /= /memset /imset /setfun.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "case: set => [S [base [memset set1 /= ? ? ? ? ? ? ? ? ? H]]] ? /= A f.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "exact: H.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_imset",
            "line_nb": 649,
            "steps": [
                {
                    "command": [
                        "by move=> Dx; apply/imsetP; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imset0",
            "line_nb": 652,
            "steps": [
                {
                    "command": [
                        "apply/setP => y; rewrite in_set0.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by apply/imsetP => [[x]]; rewrite in_set0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imset_eq0",
            "line_nb": 656,
            "steps": [
                {
                    "command": [
                        "have [->|/set_gt0_ex [x xA]] := posxP A; first by rewrite imset0 eqxx.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/set0Pn; exists (f x); rewrite mem_imset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imset_set1",
            "line_nb": 660,
            "steps": [
                {
                    "command": [
                        "apply/setP => y.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by apply/imsetP/set1P=> [[x' /set1P-> //]| ->]; exists x; rewrite ?set11.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imsetS",
            "line_nb": 664,
            "steps": [
                {
                    "command": [
                        "move=> leAB; apply/subsetP => y /imsetP [x xA ->].",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by rewrite mem_imset // (subsetP leAB).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imset_proper",
            "line_nb": 668,
            "steps": [
                {
                    "command": [
                        "move=> injf /properP[sAB [x Bx nAx]]; rewrite lt_leAnge imsetS //=.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "apply: contra nAx => sfBA.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "have: f x \\in imset f A by rewrite (subsetP sfBA) ?mem_imset.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by case/imsetP=> y Ay /injf-> //; apply: subsetP sAB y Ay.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}