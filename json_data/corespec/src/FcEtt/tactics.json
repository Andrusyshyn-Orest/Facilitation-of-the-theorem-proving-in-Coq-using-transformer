{
    "filename": "src/FcEtt/tactics.v",
    "coq_project": "corespec",
    "vernac_cmds": [
        [
            "Require Import FcEtt.imports.",
            "VernacRequire",
            "1958d89d1693bbae9debda5c453d5c5e1e5e917f"
        ],
        [
            "Require Import FcEtt.ett_inf.",
            "VernacRequire",
            "d23c6a00b4a827d1980079f0705e94583c6d6612"
        ],
        [
            "Inductive Dyn : Type := dyn : forall {T : Type}, T -> Dyn.",
            "VernacInductive",
            "1598e081d3dcfe639cd6f2663efb08bf7b4b3091"
        ],
        [
            "Ltac unwrap_dyn d := match d with | dyn ?v => v end.",
            "VernacExtend",
            "f3b7a5cdeb2db7cf32ebeb17ecb7e6c020be70fe"
        ],
        [
            "Ltac split_hyp := repeat ( match goal with | [ H : _ /\\ _ |- _ ] => destruct H end).",
            "VernacExtend",
            "55f630a4605cb401e2e931383bf42cadb62e2696"
        ],
        [
            "Ltac rewrite_and_clear eq := first [rewrite -> eq | rewrite <- eq]; clear eq.",
            "VernacExtend",
            "af0c27abeaf1bccff0a1e7833d4a39501b48ac3b"
        ],
        [
            "Ltac try_rewrite_and_clear eq := first [rewrite -> ! eq | rewrite <- ! eq | idtac]; clear eq.",
            "VernacExtend",
            "1e7d89d62909db4780abeacd1d34460f1685813b"
        ],
        [
            "Ltac try_rewrite_and_clear_f eq := first [rewrite ! eq | idtac]; clear eq.",
            "VernacExtend",
            "cc376800edbdc5d3e5538d1cb8ae0a94338369e7"
        ],
        [
            "Ltac find_eq_rew_clear := match goal with | [ eq : forall t1, _ = _ |- _ ] => rewrite_and_clear eq | [ eq : forall t1 t2, _ = _ |- _ ] => rewrite_and_clear eq | [ eq : forall t1 t2 t3, _ = _ |- _ ] => rewrite_and_clear eq | [ eq : forall t1 t2 t3 t4, _ = _ |- _ ] => rewrite_and_clear eq | [ eq : forall t1 t2 t3 t4 t5, _ = _ |- _ ] => rewrite_and_clear eq | [ eq : forall t1 t2 t3 t4 t5 t6, _ = _ |- _ ] => rewrite_and_clear eq end.",
            "VernacExtend",
            "0fb858c65d52bd34643fa67a7a439bbf01077041"
        ],
        [
            "Ltac subst_forall := repeat find_eq_rew_clear.",
            "VernacExtend",
            "0da96b9c34e0b8c2811e44eb8e1deaa2abcf2795"
        ],
        [
            "Tactic Notation \"basic_nosolve_n\" int_or_var(n) := intuition (subst; eauto n).",
            "VernacExtend",
            "c812b7e7ff5492329c883cf340aaa265871fb0e1"
        ],
        [
            "Tactic Notation \"basic_nosolve_n'\" int_or_var(n) := intuition (subst; simpl in *; subst; eauto n; try done).",
            "VernacExtend",
            "f6c7152b6b7dd14005827a38e3d7704004a62381"
        ],
        [
            "Tactic Notation \"basic_nosolve_fo_n\" int_or_var(n) := firstorder (subst; eauto n).",
            "VernacExtend",
            "4aff40611c34fbab6687ae27981760470ff57aac"
        ],
        [
            "Tactic Notation \"basic_nosolve_fo_n'\" int_or_var(n) := firstorder (subst_forall; simpl in *; subst_forall; eauto n; try done).",
            "VernacExtend",
            "72ce15c131376ede48ddec789c353e408b37e211"
        ],
        [
            "Tactic Notation \"basic_solve_n\" int_or_var(n) := try solve [basic_nosolve_n n].",
            "VernacExtend",
            "bbf5f8a05d8134b4c2d697fa6e7074dd558f1313"
        ],
        [
            "Tactic Notation \"basic_solve_n'\" int_or_var(n) := try solve [basic_nosolve_n' n].",
            "VernacExtend",
            "5fd5fc132f677d7ff4fe97c194e7cb0ba181d421"
        ],
        [
            "Tactic Notation \"basic_solve_fo_n\" int_or_var(n) := try solve [basic_nosolve_fo_n n].",
            "VernacExtend",
            "5b6a8146ee7ae020051b3e9e764a19795d0e174e"
        ],
        [
            "Tactic Notation \"basic_solve_fo_n'\" int_or_var(n) := try solve [basic_nosolve_fo_n' n].",
            "VernacExtend",
            "bcc340ba429bce1dbee28e1faf1a2c077c991535"
        ],
        [
            "Ltac basic_nosolve := basic_nosolve_n 5.",
            "VernacExtend",
            "ceac7d09e39adc5d2a3ead5d2d36cd44737286ab"
        ],
        [
            "Ltac basic_nosolve' := basic_nosolve_n' 5.",
            "VernacExtend",
            "fcce408aa9131125f0c1460f88b09cd830f3793c"
        ],
        [
            "Ltac basic_nosolve_fo := basic_nosolve_fo_n 5.",
            "VernacExtend",
            "850705b1513c84a5ab25f9245bc3b418ca032f6a"
        ],
        [
            "Ltac basic_nosolve_fo' := basic_nosolve_fo_n' 5.",
            "VernacExtend",
            "7c84cddac437f4d9475f7db2317cacfd9351c032"
        ],
        [
            "Ltac basic_solve := try solve [basic_nosolve].",
            "VernacExtend",
            "98e374256ca348b703acf284570dcb8ef918bcbc"
        ],
        [
            "Ltac basic_solve' := try solve [basic_nosolve'].",
            "VernacExtend",
            "9005df0d1f59e8185ff5bbbec35027f7020cdaf0"
        ],
        [
            "Ltac basic_solve_fo := try solve [basic_nosolve_fo].",
            "VernacExtend",
            "0a19584d298117bed06f814480e30fe1952a122d"
        ],
        [
            "Ltac basic_solve_fo' := try solve [basic_nosolve_fo'].",
            "VernacExtend",
            "438b0fbe4ef8b8a065cba252048fab3108d04c79"
        ],
        [
            "Ltac solve_by_inv_hyp_about A := multimatch goal with | [ H : context [?A] |- _ ] => solve [inversion H; basic_solve] end.",
            "VernacExtend",
            "4d11141ec195f3470a40fc6a29776ed9e754c870"
        ],
        [
            "Ltac revert_all := repeat match goal with | [ H : _ |- _ ] => revert H end.",
            "VernacExtend",
            "3673315e19b2ae834e52c0c5965d2560de2abcc0"
        ],
        [
            "Ltac revert_all_with t := repeat match goal with | [ H : _ |- _ ] => try t H; revert dependent H end.",
            "VernacExtend",
            "fcc88b5b181f250bd1cdfcb854e5673c28becac4"
        ],
        [
            "Ltac intro_all_with t := repeat (let x := fresh in intro x; try (t x)).",
            "VernacExtend",
            "46dd065cfd583e410a40fbbeb6ba18dafaeae4e3"
        ],
        [
            "Ltac disjunction_assumption := match goal with | [H : ?P |- ?P] => exact H | [H : ?P |- ?P \u2228 _] => left; exact H | [ |- _ \u2228 _] => right; disjunction_assumption end.",
            "VernacExtend",
            "7f7142339a8764ad86340338adee6da2aaabf86b"
        ],
        [
            "Ltac invert_and_clear H := inversion H; clear H.",
            "VernacExtend",
            "d8fbae2dc3d4d8de05aafe4ce9883bc708e82189"
        ],
        [
            "Definition wrap : forall P : Prop, P -> P * True := fun _ p => (p, I).",
            "VernacDefinition",
            "cb26917f2c1b2edab817ed57370df86bf414f60e"
        ],
        [
            "Ltac wrap_hyp H := apply wrap in H.",
            "VernacExtend",
            "918a18e2283e9d13604194f68a8cfd2242a1dcdf"
        ],
        [
            "Lemma AnnCtx_uniq G : AnnCtx G -> uniq G.",
            "VernacStartTheoremProof",
            "be2399f0c745c84da56f251a18efcd39da48e5f5"
        ],
        [
            "by elim=> * //=; apply uniq_cons.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac prove_this stmt name := match stmt with | uniq ?G => match goal with | [ HG : AnnCtx G |- _ ] => move: (AnnCtx_uniq HG) => name end end.",
            "VernacExtend",
            "2f3f150310d6312b4494b84fd06a750eb0255be7"
        ],
        [
            "Ltac find_invertible_hyps := repeat ( match goal with | [ H : AnnIso _ _ (g_EqCong _ _ _) _ _ |- _ ] => invert_and_clear H | [ H : AnnIso _ _ (_ _) _ _ |- _ ] => inversion H; wrap_hyp H | [ H : AnnTyping _ (_ _) _ |- _ ] => inversion H; wrap_hyp H end).",
            "VernacExtend",
            "69ae556ef3cbbb0974274f7a3397366cc68e4eeb"
        ],
        [
            "Ltac pair_coupled_hyps := repeat match goal with | [ H1 : binds ?T _ ?G, H2 : binds ?T _ ?G |- _ ] => let unG := fresh \"uniq\" G in prove_this (uniq G) unG; move: (binds_unique _ _ _ _ _ H1 H2 unG) => ?; wrap_hyp H2 end.",
            "VernacExtend",
            "b6b1211f306f8c2620611799ec60185158843de3"
        ],
        [
            "Ltac pcess_hyps := find_invertible_hyps; pair_coupled_hyps; repeat ( match goal with | [ H : _ /\\ _ |- _ ] => destruct H | [ H : exists x, _ |- _ ] => destruct H | [ H : _ * True |- _ ] => destruct H as [H _] | [ H : ?A = ?A |- _ ] => clear H | [ H : forall _, ?A = ?A |- _ ] => clear H | [ H : forall _ _, ?A = ?A |- _ ] => clear H | [ H : forall _ _ _, ?A = ?A |- _ ] => clear H | [ H : forall _ _ _ _, ?A = ?A |- _ ] => clear H | [ H : forall _ _ _ _ _, ?A = ?A |- _ ] => clear H | [ H : ?P |- _ ] => clear H; let x := fresh in assert (x : P) by solve [assumption | trivial]; clear x | [ H : ?C _ = ?C _ |- _ ] => injection H; clear H; intros; try subst | [ H : ?C _ _ = ?C _ _ |- _ ] => injection H; clear H; intros; try subst | [ H : ?C _ _ _ = ?C _ _ _ |- _ ] => injection H; clear H; intros; try subst | [ H : ?C _ _ _ _ = ?C _ _ _ _ |- _ ] => injection H; clear H; intros; try subst | [ H : ?C _ _ _ _ _ = ?C _ _ _ _ _ |- _ ] => injection H; clear H; intros; try subst | [ H : ?C _ _ _ _ _ _ = ?C _ _ _ _ _ _ |- _ ] => injection H; clear H; intros; try subst | [ H : ?C _ _ _ _ _ _ _ = ?C _ _ _ _ _ _ _ |- _ ] => injection H; clear H; intros; try subst | [ H : ?C _ _ _ _ _ _ _ _ = ?C _ _ _ _ _ _ _ _ |- _ ] => injection H; clear H; intros; try subst | [ H : ?C _ _ _ _ _ _ _ _ _ = ?C _ _ _ _ _ _ _ _ _ |- _ ] => injection H; clear H; intros; try subst | [ H : ?C _ _ _ _ _ _ _ _ _ _ = ?C _ _ _ _ _ _ _ _ _ _ |- _ ] => injection H; clear H; intros; try subst | [ H : ?C _ _ _ _ _ _ _ _ _ _ _ = ?C _ _ _ _ _ _ _ _ _ _ _ |- _ ] => injection H; clear H; intros; try subst | [ H : ?C _ _ _ _ _ _ _ _ _ _ _ _ = ?C _ _ _ _ _ _ _ _ _ _ _ _ |- _ ] => injection H; clear H; intros; try subst | [ H : ?C _ _ _ _ _ _ _ _ _ _ _ _ _ = ?C _ _ _ _ _ _ _ _ _ _ _ _ _ |- _ ] => injection H; clear H; intros; try subst end).",
            "VernacExtend",
            "1e4c763c49b2667e8f0ebfa1bfdb5190985f4059"
        ],
        [
            "Ltac pre := repeat (intros; try split); unfold \"~\" in *.",
            "VernacExtend",
            "092bc6c4ddc0c9cf00c1683ec35842d5d5682f4b"
        ],
        [
            "Ltac pre' := repeat (intros; try split); pcess_hyps; unfold \"~\" in *.",
            "VernacExtend",
            "6009955081867c6a9f9abfbfb1b29853dea0361e"
        ],
        [
            "Ltac prove_eq_same_head := solve [subst; reflexivity | f_equal; basic_solve].",
            "VernacExtend",
            "b3bec84c224a6a86b691a0d1ec8b31274bd2e865"
        ],
        [
            "Ltac break_union := repeat match goal with | [ H : ~ ?x `in` union _ _ |- _ ] => move: (notin_union_1 _ _ _ H) (notin_union_2 _ _ _ H) => ??; clear H end.",
            "VernacExtend",
            "e819f89f806e3b5ccef7098a06a16eb9b6722c64"
        ],
        [
            "Ltac fsetdec_fast := solve [break_union; basic_solve_n 3].",
            "VernacExtend",
            "ba7e399e2e53d86e901f9e6d9b574ae8cbc5f3ce"
        ],
        [
            "Ltac autofresh_fixed x := repeat match goal with | [ H : \u2200 x' : atom, x' `notin` ?L -> _ |- _] => let xL := fresh x L in (have xL : x `notin` L by first [fsetdec_fast | fsetdec]); specialize (H x xL); clear xL end.",
            "VernacExtend",
            "998e5e84e2e552789e167f6cc513b3211767bbb8"
        ],
        [
            "Ltac autofresh := let x := fresh \"x\" in pick fresh x; autofresh_fixed x.",
            "VernacExtend",
            "93c093f5b3599fb93a8e3ccc6b00a66292e247ca"
        ],
        [
            "Ltac autotype := pcess_hyps; repeat match goal with | [ |- _ /\\ _ ] => split | [ |- _ `in` _ ] => try fsetdec_fast; first [fsetdec | fail 2] | [ |- \u00ac _ `in` _ ] => try fsetdec_fast; first [fsetdec | fail 2] | [ |- _ [=] _ ] => first [fsetdec | fail 2] | [ |- _ [<=] _ ] => first [fsetdec | fail 2] | [ |- ?C _ = ?C _ ] => prove_eq_same_head | [ |- ?C _ _ = ?C _ _ ] => prove_eq_same_head | [ |- ?C _ _ _ = ?C _ _ _ ] => prove_eq_same_head | [ |- ?C _ _ _ _ = ?C _ _ _ _ ] => prove_eq_same_head | [ |- ?C _ _ _ _ _ = ?C _ _ _ _ _ ] => prove_eq_same_head | [ |- ?C _ _ _ _ _ _ = ?C _ _ _ _ _ _ ] => prove_eq_same_head | [ |- ?C _ _ _ _ _ _ _ = ?C _ _ _ _ _ _ _ ] => prove_eq_same_head | [ |- ?C _ _ _ _ _ _ _ _ = ?C _ _ _ _ _ _ _ _ ] => prove_eq_same_head | [ |- ?C _ _ _ _ _ _ _ _ _ = ?C _ _ _ _ _ _ _ _ _ ] => prove_eq_same_head | [ |- ?C _ _ _ _ _ _ _ _ _ _ = ?C _ _ _ _ _ _ _ _ _ _ ] => prove_eq_same_head | [ |- ?C _ _ _ _ _ _ _ _ _ _ _ = ?C _ _ _ _ _ _ _ _ _ _ _ ] => prove_eq_same_head | [ |- ?C _ _ _ _ _ _ _ _ _ _ _ _ = ?C _ _ _ _ _ _ _ _ _ _ _ _ ] => prove_eq_same_head | [ |- ?C _ _ _ _ _ _ _ _ _ _ _ _ _ = ?C _ _ _ _ _ _ _ _ _ _ _ _ _ ] => prove_eq_same_head | _ => try done; basic_solve; fail 0 | [ |- ex _ ] => eexists | [ |- AnnTyping _ (_ _) _ ] => econstructor; pcess_hyps | [ |- AnnDefEq _ _ (_ _) _ _ ] => econstructor; pcess_hyps | [ |- AnnIso _ _ (_ _) _ _ ] => econstructor; pcess_hyps end.",
            "VernacExtend",
            "e685905d1e8a1adb4743d09af32f336259e9a9d4"
        ],
        [
            "Ltac ok := autotype.",
            "VernacExtend",
            "0596c41d609f4423b49e3e98503976a627fd8233"
        ],
        [
            "Ltac depind x := dependent induction x.",
            "VernacExtend",
            "8ace58acbf7a22433408e977af6eb9eb357a1e63"
        ]
    ],
    "proofs": [
        {
            "name": "AnnCtx_uniq",
            "line_nb": 34,
            "steps": [
                {
                    "command": [
                        "by elim=> * //=; apply uniq_cons.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}