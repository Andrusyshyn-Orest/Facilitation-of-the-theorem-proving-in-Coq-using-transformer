{
    "filename": "src/DemoExplicitSystemF.v",
    "coq_project": "dblib",
    "vernac_cmds": [
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Require Export Coq.Program.Equality.",
            "VernacRequire",
            "db4f8fe04532ef40d0953125640625a46cdd70a7"
        ],
        [
            "Require Import Dblib.DblibTactics.",
            "VernacRequire",
            "52dee7e99cbfbd23b1a6ec0b4c66c74e09cdfec3"
        ],
        [
            "Require Import Dblib.DeBruijn.",
            "VernacRequire",
            "17500072de112e9bf22124655cb1833f9aa3c08e"
        ],
        [
            "Require Import Dblib.Environments.",
            "VernacRequire",
            "25fb139ae9c2974164752e48649f78b434a65853"
        ],
        [
            "Inductive term := | TVar: nat -> term | TAbs: term -> term | TApp: term -> term -> term | TTyAbs: term -> term | TTyApp: term -> term.",
            "VernacInductive",
            "0132530385c2d9b9ee534015fa624bf4c7ae78ea"
        ],
        [
            "Instance Var_term : Var term := { var := TVar }.",
            "VernacInstance",
            "0d549f81832213b43a5eed00f63bff8d5415bbc5"
        ],
        [
            "Fixpoint traverse_term (f : nat -> nat -> term) l t := match t with | TVar x => f l x | TAbs t => TAbs (traverse_term f (1 + l) t) | TApp t1 t2 => TApp (traverse_term f l t1) (traverse_term f l t2) | TTyAbs t => TTyAbs (traverse_term f l t) | TTyApp t => TTyApp (traverse_term f l t) end.",
            "VernacFixpoint",
            "744a674358af8f5b68b76045aea9b5672d848a24"
        ],
        [
            "Instance Traverse_term : Traverse term term := { traverse := traverse_term }.",
            "VernacInstance",
            "ea47c0d9a53c13188d32d5306711da1a97d59e01"
        ],
        [
            "Instance TraverseVarInjective_term : @TraverseVarInjective term _ term _.",
            "VernacInstance",
            "b20ab1b750ed555a0443894d7a9d1151232a0715"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "prove_traverse_var_injective.",
            "VernacExtend",
            "c18c5e48aceaf5aecbe63ddf49022ebb7f5cd93b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance TraverseFunctorial_term : @TraverseFunctorial term _ term _.",
            "VernacInstance",
            "59221e189d72f951d625944d7c71ac48da56c6c9"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "prove_traverse_functorial.",
            "VernacExtend",
            "64096dfda95deff93c808e66f907ddb8d2d58b28"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance TraverseRelative_term : @TraverseRelative term term _.",
            "VernacInstance",
            "0fa3fbce0103fe4235b1886c22d72784e5d479bb"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "prove_traverse_relative.",
            "VernacExtend",
            "0af481c0af5ea8c1ae4e856347a52755de757da0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance TraverseIdentifiesVar_term : @TraverseIdentifiesVar term _ _.",
            "VernacInstance",
            "3ce87e54ba1b07a1b5edd1d48d0d882a8fd41cbe"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "prove_traverse_identifies_var.",
            "VernacExtend",
            "0882f12e6d14d058c8f7d48175b3c521e117c0b1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance TraverseVarIsIdentity_term : @TraverseVarIsIdentity term _ term _.",
            "VernacInstance",
            "e8f206d8b0229fe5c585d55dc48d619d888d5268"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "prove_traverse_var_is_identity.",
            "VernacExtend",
            "dc14900763cf2b871d486a9be0ddc6c0fc60b933"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Inductive red : term -> term -> Prop := | RedBeta: forall t1 t2, red (TApp (TAbs t1) t2) (subst t2 0 t1) | RedTyBeta: forall t, red (TTyApp (TTyAbs t)) t | RedContextTAbs: forall t1 t2, red t1 t2 -> red (TAbs t1) (TAbs t2) | RedContextTAppLeft: forall t1 t2 t, red t1 t2 -> red (TApp t1 t) (TApp t2 t) | RedContextTAppRight: forall t1 t2 t, red t1 t2 -> red (TApp t t1) (TApp t t2) | RedContextTTyAbs: forall t1 t2, red t1 t2 -> red (TTyAbs t1) (TTyAbs t2) | RedContextTTyApp: forall t1 t2, red t1 t2 -> red (TTyApp t1) (TTyApp t2).",
            "VernacInductive",
            "7c22ca69b6621b355adec5529ce34f30792effe0"
        ],
        [
            "Inductive ty := | TyVar: nat -> ty | TyArrow: ty -> ty -> ty | TyForall: ty -> ty.",
            "VernacInductive",
            "8b5d782feca6ff9fb99b773c33af231b1f00fe05"
        ],
        [
            "Instance Var_ty : Var ty := { var := TyVar }.",
            "VernacInstance",
            "180cdde82fc5c862aeb8c7492e034a388ee0087d"
        ],
        [
            "Fixpoint traverse_ty (f : nat -> nat -> ty) l T := match T with | TyVar x => f l x | TyArrow T1 T2 => TyArrow (traverse_ty f l T1) (traverse_ty f l T2) | TyForall T => TyForall (traverse_ty f (1 + l) T) end.",
            "VernacFixpoint",
            "db71373156d547854ea6f9ec020be0ec101957c2"
        ],
        [
            "Instance Traverse_ty : Traverse ty ty := { traverse := traverse_ty }.",
            "VernacInstance",
            "ae4f770ba1de26351eeccf2b6bf046ab08713ac6"
        ],
        [
            "Instance TraverseVarInjective_ty : @TraverseVarInjective ty _ ty _.",
            "VernacInstance",
            "6b592e3deeae4d74dbd6f5af5331a52ae860f6f4"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "prove_traverse_var_injective.",
            "VernacExtend",
            "c18c5e48aceaf5aecbe63ddf49022ebb7f5cd93b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance TraverseFunctorial_ty : @TraverseFunctorial ty _ ty _.",
            "VernacInstance",
            "c37db96a9a9afc5fc10171d18f9237295cf49e3d"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "prove_traverse_functorial.",
            "VernacExtend",
            "64096dfda95deff93c808e66f907ddb8d2d58b28"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance TraverseRelative_ty : @TraverseRelative ty ty _.",
            "VernacInstance",
            "10871bc80fe3df1a9d8c37953b21c5623d1c4d05"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "prove_traverse_relative.",
            "VernacExtend",
            "0af481c0af5ea8c1ae4e856347a52755de757da0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance TraverseIdentifiesVar_ty : @TraverseIdentifiesVar ty _ _.",
            "VernacInstance",
            "f781ccd8361d5e22e9a8eda80875471056c494fc"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "prove_traverse_identifies_var.",
            "VernacExtend",
            "0882f12e6d14d058c8f7d48175b3c521e117c0b1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance TraverseVarIsIdentity_ty : @TraverseVarIsIdentity ty _ ty _.",
            "VernacInstance",
            "120ec303b5191c2bba8b532129c431c5c2048cf6"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "prove_traverse_var_is_identity.",
            "VernacExtend",
            "dc14900763cf2b871d486a9be0ddc6c0fc60b933"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Inductive j : env ty -> term -> ty -> Prop := | JVar: forall E x T, lookup x E = Some T -> j E (TVar x) T | JAbs: forall E t T1 T2, j (insert 0 T1 E) t T2 -> j E (TAbs t) (TyArrow T1 T2) | JApp: forall E t1 t2 T1 T2, j E t1 (TyArrow T1 T2) -> j E t2 T1 -> j E (TApp t1 t2) T2 | JTyAbs: forall E t T, j (map (shift 0) E) t T -> j E (TTyAbs t) (TyForall T) | JTyApp: forall E t T U U', j E t (TyForall T) -> subst U 0 T = U' -> j E (TTyApp t) U'.",
            "VernacInductive",
            "e36ce0148d53fd286629803d6db7c4f3d80d3f63"
        ],
        [
            "Hint Constructors j : j.",
            "VernacHints",
            "94d1df505ef7934173232600561ccdde5f5874d4"
        ],
        [
            "Lemma term_weakening: forall E t T, j E t T -> forall x U E', insert x U E = E' -> j E' (shift x t) T.",
            "VernacStartTheoremProof",
            "7689ae0c6c56a54a04f18003c9fc18a2927ee22d"
        ],
        [
            "induction 1; intros; subst; simpl_lift_goal; econstructor; eauto with lookup_insert insert_insert map_insert.",
            "VernacExtend",
            "8a03f950fe1aad349e83ac318908677be9dc4ff7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma type_weakening: forall E t T, j E t T -> forall x E' T', map (shift x) E = E' -> shift x T = T' -> j E' t T'.",
            "VernacStartTheoremProof",
            "49a2b2aada6fbaf35f8d5a90534e331d8d45d115"
        ],
        [
            "induction 1; intros; subst; simpl_lift_goal; econstructor; eauto using lookup_map_some, map_map_exchange with simpl_lift_goal lift_lift lift_subst map_insert.",
            "VernacExtend",
            "9e1de6cba939ed9489c894645234356fe29af79c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma term_substitution: forall E x t2 T1 T2, j (insert x T1 E) t2 T2 -> forall t1, j E t1 T1 -> j E (subst t1 x t2) T2.",
            "VernacStartTheoremProof",
            "cfeffe67606447ab7459e4b2d1404dd1d63b8197"
        ],
        [
            "do 5 intro; intro h; dependent induction h; intros; simpl_subst_goal; try ( econstructor; eauto using term_weakening, type_weakening with insert_insert map_insert ).",
            "VernacExtend",
            "e74178997726d33db49de7b2d773404830d9ca7b"
        ],
        [
            "unfold subst_idx.",
            "VernacExtend",
            "a01ddbe447666d5659c2bc5908a803dd9cedf1a3"
        ],
        [
            "dblib_by_cases; lookup_insert_all; eauto with j.",
            "VernacExtend",
            "ba41e187b2759262362dd384bde099d1364966c6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma type_substitution: forall E t T, j E t T -> forall U x E' T', map (subst U x) E = E' -> subst U x T = T' -> j E' t T'.",
            "VernacStartTheoremProof",
            "e3887d46515d62554463307dfaf854ef8ecb4f36"
        ],
        [
            "induction 1; intros; subst; simpl_subst_goal; econstructor; eauto using lookup_map_some, map_map_exchange with simpl_subst_goal lift_subst subst_subst map_insert.",
            "VernacExtend",
            "3d439a783866a88ff9eb1b6ab1b8e565f183caee"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac j_inversion := match goal with | h: j _ (TAbs _) _ |- _ => inversion h; clear h; subst | h: j _ (TTyAbs _) _ |- _ => inversion h; clear h; subst end.",
            "VernacExtend",
            "56116aabb42ebcda73a12532198d439c9d41726d"
        ],
        [
            "Lemma type_preservation: forall t1 t2, red t1 t2 -> forall E T, j E t1 T -> j E t2 T.",
            "VernacStartTheoremProof",
            "9ec996a1357f93acbd2e59e8ec2425f43ef794b1"
        ],
        [
            "induction 1; intros ? ? h; dependent destruction h; subst; eauto with j.",
            "VernacExtend",
            "088aa3ee3c121722e046b208a554896440d93bed"
        ],
        [
            "j_inversion.",
            "VernacExtend",
            "b2f550e06aaec58fbcb90e17b5260ea71579542f"
        ],
        [
            "eauto using term_substitution.",
            "VernacExtend",
            "74388977a834a33dc79cf052f88041df3f15590e"
        ],
        [
            "j_inversion.",
            "VernacExtend",
            "b2f550e06aaec58fbcb90e17b5260ea71579542f"
        ],
        [
            "eauto using type_substitution, map_map_vanish with subst_lift.",
            "VernacExtend",
            "f3ef3a2b63f2bf990ffaa2894be5b9b32be55bac"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "TraverseVarInjective_term",
            "line_nb": 9,
            "steps": [
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "prove_traverse_var_injective.",
                        "VernacExtend",
                        "c18c5e48aceaf5aecbe63ddf49022ebb7f5cd93b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "TraverseFunctorial_term",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "prove_traverse_functorial.",
                        "VernacExtend",
                        "64096dfda95deff93c808e66f907ddb8d2d58b28"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "TraverseRelative_term",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "prove_traverse_relative.",
                        "VernacExtend",
                        "0af481c0af5ea8c1ae4e856347a52755de757da0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "TraverseIdentifiesVar_term",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "prove_traverse_identifies_var.",
                        "VernacExtend",
                        "0882f12e6d14d058c8f7d48175b3c521e117c0b1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "TraverseVarIsIdentity_term",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "prove_traverse_var_is_identity.",
                        "VernacExtend",
                        "dc14900763cf2b871d486a9be0ddc6c0fc60b933"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "TraverseVarInjective_ty",
            "line_nb": 34,
            "steps": [
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "prove_traverse_var_injective.",
                        "VernacExtend",
                        "c18c5e48aceaf5aecbe63ddf49022ebb7f5cd93b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "TraverseFunctorial_ty",
            "line_nb": 38,
            "steps": [
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "prove_traverse_functorial.",
                        "VernacExtend",
                        "64096dfda95deff93c808e66f907ddb8d2d58b28"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "TraverseRelative_ty",
            "line_nb": 42,
            "steps": [
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "prove_traverse_relative.",
                        "VernacExtend",
                        "0af481c0af5ea8c1ae4e856347a52755de757da0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "TraverseIdentifiesVar_ty",
            "line_nb": 46,
            "steps": [
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "prove_traverse_identifies_var.",
                        "VernacExtend",
                        "0882f12e6d14d058c8f7d48175b3c521e117c0b1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "TraverseVarIsIdentity_ty",
            "line_nb": 50,
            "steps": [
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "prove_traverse_var_is_identity.",
                        "VernacExtend",
                        "dc14900763cf2b871d486a9be0ddc6c0fc60b933"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "term_weakening",
            "line_nb": 56,
            "steps": [
                {
                    "command": [
                        "induction 1; intros; subst; simpl_lift_goal; econstructor; eauto with lookup_insert insert_insert map_insert.",
                        "VernacExtend",
                        "8a03f950fe1aad349e83ac318908677be9dc4ff7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "type_weakening",
            "line_nb": 59,
            "steps": [
                {
                    "command": [
                        "induction 1; intros; subst; simpl_lift_goal; econstructor; eauto using lookup_map_some, map_map_exchange with simpl_lift_goal lift_lift lift_subst map_insert.",
                        "VernacExtend",
                        "9e1de6cba939ed9489c894645234356fe29af79c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "term_substitution",
            "line_nb": 62,
            "steps": [
                {
                    "command": [
                        "do 5 intro; intro h; dependent induction h; intros; simpl_subst_goal; try ( econstructor; eauto using term_weakening, type_weakening with insert_insert map_insert ).",
                        "VernacExtend",
                        "e74178997726d33db49de7b2d773404830d9ca7b"
                    ]
                },
                {
                    "command": [
                        "unfold subst_idx.",
                        "VernacExtend",
                        "a01ddbe447666d5659c2bc5908a803dd9cedf1a3"
                    ]
                },
                {
                    "command": [
                        "dblib_by_cases; lookup_insert_all; eauto with j.",
                        "VernacExtend",
                        "ba41e187b2759262362dd384bde099d1364966c6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "type_substitution",
            "line_nb": 67,
            "steps": [
                {
                    "command": [
                        "induction 1; intros; subst; simpl_subst_goal; econstructor; eauto using lookup_map_some, map_map_exchange with simpl_subst_goal lift_subst subst_subst map_insert.",
                        "VernacExtend",
                        "3d439a783866a88ff9eb1b6ab1b8e565f183caee"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "type_preservation",
            "line_nb": 71,
            "steps": [
                {
                    "command": [
                        "induction 1; intros ? ? h; dependent destruction h; subst; eauto with j.",
                        "VernacExtend",
                        "088aa3ee3c121722e046b208a554896440d93bed"
                    ]
                },
                {
                    "command": [
                        "j_inversion.",
                        "VernacExtend",
                        "b2f550e06aaec58fbcb90e17b5260ea71579542f"
                    ]
                },
                {
                    "command": [
                        "eauto using term_substitution.",
                        "VernacExtend",
                        "74388977a834a33dc79cf052f88041df3f15590e"
                    ]
                },
                {
                    "command": [
                        "j_inversion.",
                        "VernacExtend",
                        "b2f550e06aaec58fbcb90e17b5260ea71579542f"
                    ]
                },
                {
                    "command": [
                        "eauto using type_substitution, map_map_vanish with subst_lift.",
                        "VernacExtend",
                        "f3ef3a2b63f2bf990ffaa2894be5b9b32be55bac"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}