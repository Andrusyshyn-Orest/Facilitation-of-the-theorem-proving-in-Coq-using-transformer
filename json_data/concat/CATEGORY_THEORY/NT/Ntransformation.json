{
    "filename": "CATEGORY_THEORY/NT/Ntransformation.v",
    "coq_project": "concat",
    "vernac_cmds": [
        [
            "Require Export Functor.",
            "VernacRequire",
            "a81a66160b306838d6886f769c4529008a544c6b"
        ],
        [
            "Require Export Setoid_dup2.",
            "VernacRequire",
            "97837ea943594736a938d1480782066cd0c248bd"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Section nt_def.",
            "VernacBeginSection",
            "8d3dabff6c69e25f0b86607b929ac2fc030950b4"
        ],
        [
            "Variables (C D : Category) (F G : Functor C D).",
            "VernacAssumption",
            "e839dc843ddb6ac69ffca8848d59825e7ffca8f6"
        ],
        [
            "Definition NT_law (T : forall a : C, F a --> G a) := forall (a b : C) (f : a --> b), FMor F f o T b =_S T a o FMor G f.",
            "VernacDefinition",
            "0fd5a8b3acab652c18b31797d999fcdb6713ac57"
        ],
        [
            "Structure > NT : Type := {ApNT :> forall a : C, F a --> G a; Prf_NT_law :> NT_law ApNT}.",
            "VernacInductive",
            "783fd8d36896f90eb6c24c044fd63c30d321f45b"
        ],
        [
            "Lemma NatCond : forall (T : NT) (a b : C) (f : a --> b), FMor F f o T b =_S T a o FMor G f.",
            "VernacStartTheoremProof",
            "15dfd06ff3059e3b85d3535349c28e00e7aab740"
        ],
        [
            "exact Prf_NT_law.",
            "VernacExtend",
            "770a3fa7b06c591faebbefebe5c88ef406eec4c8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma NatCond1 : forall (T : NT) (a b : C) (f : a --> b), T a o FMor G f =_S FMor F f o T b.",
            "VernacStartTheoremProof",
            "b3b23a908fd91bc22c51b03ba0fac7d47481b78f"
        ],
        [
            "intros T a b f; apply Sym; apply (Prf_NT_law T f).",
            "VernacExtend",
            "ea0e51b57e9afd62196808ea7510e734c8ac5216"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End nt_def.",
            "VernacEndSegment",
            "b7e92aac6f46fdce3e080eb0b36596f831568440"
        ],
        [
            "Section setoid_nt.",
            "VernacBeginSection",
            "432a8cf91210d02864fa406345f973d7356fa78c"
        ],
        [
            "Variables (C D : Category) (F G : Functor C D).",
            "VernacAssumption",
            "e839dc843ddb6ac69ffca8848d59825e7ffca8f6"
        ],
        [
            "Definition Equal_NT (T T' : NT F G) := forall a : C, T a =_S T' a.",
            "VernacDefinition",
            "663f25c3dcdd9308308841192c00aa1658d51e84"
        ],
        [
            "Lemma Equal_NT_equiv : Equivalence Equal_NT.",
            "VernacStartTheoremProof",
            "4b4860cfc1bda654cf4fa850a0996250c7e093f1"
        ],
        [
            "apply Build_Equivalence; unfold Equal_NT in |- *.",
            "VernacExtend",
            "16ac2e51520166713d71bc268274aa7dd0c3e2c4"
        ],
        [
            "unfold Reflexive in |- *; intros T a; apply Refl.",
            "VernacExtend",
            "657764bb7c37506e997b64efb59e46877ea1a08c"
        ],
        [
            "apply Build_Partial_equivalence.",
            "VernacExtend",
            "5de4c099bba37baf71314284222f46bb7a8fa46f"
        ],
        [
            "unfold Transitive in |- *; intros T1 T2 T3 H H0 a.",
            "VernacExtend",
            "20a2699b090c3cc4a191d9501edfb91a18bd9314"
        ],
        [
            "apply Trans with (ApNT T2 a); auto.",
            "VernacExtend",
            "6715b4642a31abb04f3933bff11ca0447f54ccb6"
        ],
        [
            "unfold Symmetric in |- *; intros T1 T2 H a.",
            "VernacExtend",
            "817394d713970e24179041be5f82ee47620b0fec"
        ],
        [
            "apply Sym; apply H.",
            "VernacExtend",
            "a8f4e0175214b2262cb6cd2be4a230d48dda3638"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Structure NT_setoid : Setoid'' := Equal_NT_equiv.",
            "VernacDefinition",
            "891d44dfc57e2acd886c2b461a80be09d6aa249b"
        ],
        [
            "End setoid_nt.",
            "VernacEndSegment",
            "5acf9659aa157e39224be4d7539030b40597760f"
        ],
        [
            "Infix \"=_NT\" := Equal_NT (at level 70).",
            "VernacInfix",
            "4cc5a04c95e6ea5cccfd2e23f1460488b3104786"
        ]
    ],
    "proofs": [
        {
            "name": "NatCond",
            "line_nb": 8,
            "steps": [
                {
                    "command": [
                        "exact Prf_NT_law.",
                        "VernacExtend",
                        "770a3fa7b06c591faebbefebe5c88ef406eec4c8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NatCond1",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "intros T a b f; apply Sym; apply (Prf_NT_law T f).",
                        "VernacExtend",
                        "ea0e51b57e9afd62196808ea7510e734c8ac5216"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Equal_NT_equiv",
            "line_nb": 18,
            "steps": [
                {
                    "command": [
                        "apply Build_Equivalence; unfold Equal_NT in |- *.",
                        "VernacExtend",
                        "16ac2e51520166713d71bc268274aa7dd0c3e2c4"
                    ]
                },
                {
                    "command": [
                        "unfold Reflexive in |- *; intros T a; apply Refl.",
                        "VernacExtend",
                        "657764bb7c37506e997b64efb59e46877ea1a08c"
                    ]
                },
                {
                    "command": [
                        "apply Build_Partial_equivalence.",
                        "VernacExtend",
                        "5de4c099bba37baf71314284222f46bb7a8fa46f"
                    ]
                },
                {
                    "command": [
                        "unfold Transitive in |- *; intros T1 T2 T3 H H0 a.",
                        "VernacExtend",
                        "20a2699b090c3cc4a191d9501edfb91a18bd9314"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (ApNT T2 a); auto.",
                        "VernacExtend",
                        "6715b4642a31abb04f3933bff11ca0447f54ccb6"
                    ]
                },
                {
                    "command": [
                        "unfold Symmetric in |- *; intros T1 T2 H a.",
                        "VernacExtend",
                        "817394d713970e24179041be5f82ee47620b0fec"
                    ]
                },
                {
                    "command": [
                        "apply Sym; apply H.",
                        "VernacExtend",
                        "a8f4e0175214b2262cb6cd2be4a230d48dda3638"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}