{
    "filename": "CATEGORY_THEORY/FUNCTOR/Setoid_dup1.v",
    "coq_project": "concat",
    "vernac_cmds": [
        [
            "Require Export Relations.",
            "VernacRequire",
            "ca942e55691cd1c29ddde01ebb7404769af28098"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Structure > Setoid' : Type := {Carrier' :> Type; Equal' : Relation Carrier'; Prf_equiv' :> Equivalence Equal'}.",
            "VernacInductive",
            "8c90c786ad8ff0e5b6690cc67f711265707444f5"
        ],
        [
            "Infix \"=_S'\" := Equal' (at level 70).",
            "VernacInfix",
            "ad9b5fe529d416602b208fd1f9c5459dda505eea"
        ],
        [
            "Lemma Refl' : forall (S : Setoid') (x : S), x =_S' x.",
            "VernacStartTheoremProof",
            "efd7d0e7cedb5d5ff11f1a5c93cef9f902adeeb8"
        ],
        [
            "intro S; exact (Prf_refl S).",
            "VernacExtend",
            "df4d03e4d6400175c339779edaf70de0a4b21e43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Sym' : forall (S : Setoid') (x y : S), x =_S' y -> y =_S' x.",
            "VernacStartTheoremProof",
            "45de161e8e6bae4b5d0280d8f3cb181ece7a371f"
        ],
        [
            "intro S; exact (Prf_sym S).",
            "VernacExtend",
            "782a4d3fea7b3661c309f90cd3fc273475555da0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trans' : forall (S : Setoid') (x y z : S), x =_S' y -> y =_S' z -> x =_S' z.",
            "VernacStartTheoremProof",
            "805f64ce874f1f83535f87ab714571943f97d819"
        ],
        [
            "intro S; exact (Prf_trans S).",
            "VernacExtend",
            "0ac43f4ce2a4a546b7b82799805bf194498089b5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section maps'.",
            "VernacBeginSection",
            "4517e14b1688a693f1df4938e59199b0eaf110ce"
        ],
        [
            "Variable A B : Setoid'.",
            "VernacAssumption",
            "0940aaaa1e37abbb09394f4de4d8a7b185180135"
        ],
        [
            "Definition Map_law' (f : A -> B) := forall x y : A, x =_S' y -> f x =_S' f y.",
            "VernacDefinition",
            "8c7e69ca453931dd58ab310d428daa5b1291330b"
        ],
        [
            "Structure > Map' : Type := {Ap' :> A -> B; Pres' :> Map_law' Ap'}.",
            "VernacInductive",
            "c8cafd86d8e8b202214663a4d01daaca5dda9b49"
        ],
        [
            "Lemma Pres1' : forall (m : Map') (x y : A), x =_S' y -> m x =_S' m y.",
            "VernacStartTheoremProof",
            "bdd5cb7a27402e6d7796ea2109711dbc46cf2d12"
        ],
        [
            "exact Pres'.",
            "VernacExtend",
            "e4bab9bbeaf25c4cb7d7941b51d9348e26b2bf77"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Ext' (f g : Map') := forall x : A, f x =_S' g x.",
            "VernacDefinition",
            "b151161ca5f251cbfa05da7af5aa8711c885e5e1"
        ],
        [
            "Lemma Ext_equiv' : Equivalence Ext'.",
            "VernacStartTheoremProof",
            "3cc86b6c6b1056b583c098fdeedcefff43fae960"
        ],
        [
            "intros; apply Build_Equivalence.",
            "VernacExtend",
            "1b7eab7afcaa4fe7d6474d4275e98a493632352d"
        ],
        [
            "unfold Reflexive in |- *; unfold Ext' in |- *; intros f x.",
            "VernacExtend",
            "e1b1efa2eff8f7871a45a828b112d1407a13e36c"
        ],
        [
            "apply Refl'.",
            "VernacExtend",
            "297b238f9ce677ab839a7e8e5c833c342ace9ad4"
        ],
        [
            "apply Build_Partial_equivalence.",
            "VernacExtend",
            "5de4c099bba37baf71314284222f46bb7a8fa46f"
        ],
        [
            "unfold Transitive in |- *; unfold Ext' in |- *; intros f g h e1 e2 x.",
            "VernacExtend",
            "da709916063df29c247187ccbefcf96ffa68f34a"
        ],
        [
            "apply Trans' with (g x).",
            "VernacExtend",
            "4f5b925406452c257b1a70d80e0a19c2fd4f8f3a"
        ],
        [
            "apply (e1 x).",
            "VernacExtend",
            "2263c9ac2269f954a7bb1e9e4496fdda5c2f462c"
        ],
        [
            "apply (e2 x).",
            "VernacExtend",
            "0f7b80f91cc28d14500d52b865766c35978a455f"
        ],
        [
            "unfold Symmetric in |- *; unfold Ext' in |- *; intros f g e x.",
            "VernacExtend",
            "79e3d4e84220622327d4411e80f8e9a452662e90"
        ],
        [
            "apply Sym'; trivial.",
            "VernacExtend",
            "280a57c933f638154792bf569a5b3715a6826bca"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Structure Map_setoid' : Setoid' := Ext_equiv'.",
            "VernacDefinition",
            "c2c912fe9755805d76c7404bccf9820448fcb73a"
        ],
        [
            "End maps'.",
            "VernacEndSegment",
            "16c3fbff55c7a6475efa5c32dcafe61eb892c765"
        ],
        [
            "Section fun2_to_map2'.",
            "VernacBeginSection",
            "dbc17ed0def17f51f79108c3a60417547e00fc71"
        ],
        [
            "Variable A B C : Setoid'.",
            "VernacAssumption",
            "517588055256c4b760e2a1f5e0a67833aa899f58"
        ],
        [
            "Definition Map2' := Map' A (Map_setoid' B C).",
            "VernacDefinition",
            "881f7076a155b94f256a7b29cb9fd75e3f856d07"
        ],
        [
            "Variable f : A -> B -> C.",
            "VernacAssumption",
            "43e9c5907ad5d67097b95e0b8d029e9dfccd8592"
        ],
        [
            "Definition Map2_congl_law' := forall (b1 b2 : B) (a : A), b1 =_S' b2 -> f a b1 =_S' f a b2.",
            "VernacDefinition",
            "ef17c4f3461182fbd3b3b8ad8670ccaf5177effa"
        ],
        [
            "Definition Map2_congr_law' := forall (a1 a2 : A) (b : B), a1 =_S' a2 -> f a1 b =_S' f a2 b.",
            "VernacDefinition",
            "691fc552eae4ea50171a9fb80b6b788758ce88a2"
        ],
        [
            "Definition Map2_cong_law' := forall (a1 a2 : A) (b1 b2 : B), a1 =_S' a2 -> b1 =_S' b2 -> f a1 b1 =_S' f a2 b2.",
            "VernacDefinition",
            "58c93643e629fb7b483a4d14bf5c2170365f4cd2"
        ],
        [
            "Hypothesis pgcl : Map2_congl_law'.",
            "VernacAssumption",
            "5cd2f36d498ac8c6a363e7282058b17fe4198fce"
        ],
        [
            "Hypothesis pgcr : Map2_congr_law'.",
            "VernacAssumption",
            "10ea8caf4957c8291e2ab92ae640b46f356b9587"
        ],
        [
            "Lemma Map2_map_law1' : forall a : A, Map_law' (f a).",
            "VernacStartTheoremProof",
            "9ac8f7f45b12d195efd67fd3835239e0b242984b"
        ],
        [
            "intro a; unfold Map_law' in |- *.",
            "VernacExtend",
            "ae15470a885e4b2b9a15a54fb4374e0250b7fc15"
        ],
        [
            "intros b1 b2 H; apply (pgcl a H).",
            "VernacExtend",
            "1b3bb87b16df28e25f9bb1013fb12d3145f67491"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Structure Map2_map1' (a : A) := Build_Map' (Map2_map_law1' a).",
            "VernacDefinition",
            "efc8d4d7385eaee7d14d306c8d29b42a53563b1b"
        ],
        [
            "Lemma Map2_map_law2' : Map_law' Map2_map1'.",
            "VernacStartTheoremProof",
            "1a9bd955ec8c4aa26354ece39b9862ec8ef29035"
        ],
        [
            "unfold Map_law', Map2_map1' in |- *.",
            "VernacExtend",
            "a83447c2b80a66ddd6c6f44368999c0a1e9ebf24"
        ],
        [
            "intros a1 a2 H; simpl in |- *; unfold Ext' in |- *; intro b; simpl in |- *.",
            "VernacExtend",
            "5e3caa6196bb8332c28770852d6ced6d94b5075f"
        ],
        [
            "apply pgcr; trivial.",
            "VernacExtend",
            "f8ed075ff402d29035148a5b7e80a214b1d48562"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Build_Map2' : Map2' := Build_Map' Map2_map_law2'.",
            "VernacDefinition",
            "c7b392a63807204c7598dc26d5cba0c88604fea2"
        ],
        [
            "End fun2_to_map2'.",
            "VernacEndSegment",
            "22c1e8d44279f4d8894c7ab0db74b61f87ccb2a2"
        ],
        [
            "Section prop_map2'.",
            "VernacBeginSection",
            "e300c4b6e8e926614a7c7cfb2fc84de7dac3597e"
        ],
        [
            "Variables (A B C : Setoid') (f : Map2' A B C).",
            "VernacAssumption",
            "bf1eb2fda1f31693e15d9cbb0e1287732c47af94"
        ],
        [
            "Definition Ap2' (a : A) (b : B) := f a b.",
            "VernacDefinition",
            "1808d3c1444ec1feaec33d46fa796e03464043fe"
        ],
        [
            "Lemma Prf_map2_congl' : Map2_congl_law' Ap2'.",
            "VernacStartTheoremProof",
            "e6563648efd33cc64ef30252ed5ca845a05867c7"
        ],
        [
            "unfold Map2_congl_law' in |- *; intros b1 b2 a H.",
            "VernacExtend",
            "57a235f6340e58b67b5135157e6a7c7daece9d4e"
        ],
        [
            "unfold Ap2' in |- *; apply (Pres1' (f a)); trivial.",
            "VernacExtend",
            "3b11b932a05d94ccd4f087df033ac8c1476c9257"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Prf_map2_congr' : Map2_congr_law' Ap2'.",
            "VernacStartTheoremProof",
            "6bf0ae5cde4c9419a3ba9340b14426db382bfbe2"
        ],
        [
            "unfold Map2_congr_law' in |- *; intros a1 a2 b H.",
            "VernacExtend",
            "8fbeee66fff9a1182e47b323b15fff375f4e639f"
        ],
        [
            "apply (Pres1' f H b).",
            "VernacExtend",
            "5be42e95e9a08c7292a30ebfb538e4bf06c4e55e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Prf_map2_cong' : Map2_cong_law' Ap2'.",
            "VernacStartTheoremProof",
            "51907cad469671c3036246b80935ff3aca747441"
        ],
        [
            "unfold Map2_cong_law' in |- *; intros a1 a2 b1 b2 H1 H2.",
            "VernacExtend",
            "894fd3e0cb5b0e4c61fba4c4f44f1b2b467270cb"
        ],
        [
            "apply Trans' with (Ap2' a2 b1).",
            "VernacExtend",
            "8d41c7bf64a3e29a846e3ccaeb00e2baf6813bfe"
        ],
        [
            "apply (Prf_map2_congr' b1 H1).",
            "VernacExtend",
            "bf7960b3770275282dec979577b0fd4c0edb7a3b"
        ],
        [
            "apply (Prf_map2_congl' a2 H2).",
            "VernacExtend",
            "9355f80fa5c02df585643f37ebb8700e52d0a97a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End prop_map2'.",
            "VernacEndSegment",
            "29899abfaee766f01a1ecfe71de6836ba0f75a74"
        ],
        [
            "Coercion Ap2' : Map2' >-> Funclass.",
            "VernacCoercion",
            "90fa1f82c4d6cdd9f4ab0f6a8e4e2442593788b8"
        ],
        [
            "Identity Coercion Map2'_Map' : Map2' >-> Map'.",
            "VernacIdentityCoercion",
            "473843ac46076ba3e6858a327a06622c1c5181f1"
        ]
    ],
    "proofs": [
        {
            "name": "Refl'",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "intro S; exact (Prf_refl S).",
                        "VernacExtend",
                        "df4d03e4d6400175c339779edaf70de0a4b21e43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Sym'",
            "line_nb": 8,
            "steps": [
                {
                    "command": [
                        "intro S; exact (Prf_sym S).",
                        "VernacExtend",
                        "782a4d3fea7b3661c309f90cd3fc273475555da0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trans'",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "intro S; exact (Prf_trans S).",
                        "VernacExtend",
                        "0ac43f4ce2a4a546b7b82799805bf194498089b5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Pres1'",
            "line_nb": 18,
            "steps": [
                {
                    "command": [
                        "exact Pres'.",
                        "VernacExtend",
                        "e4bab9bbeaf25c4cb7d7941b51d9348e26b2bf77"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Ext_equiv'",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "intros; apply Build_Equivalence.",
                        "VernacExtend",
                        "1b7eab7afcaa4fe7d6474d4275e98a493632352d"
                    ]
                },
                {
                    "command": [
                        "unfold Reflexive in |- *; unfold Ext' in |- *; intros f x.",
                        "VernacExtend",
                        "e1b1efa2eff8f7871a45a828b112d1407a13e36c"
                    ]
                },
                {
                    "command": [
                        "apply Refl'.",
                        "VernacExtend",
                        "297b238f9ce677ab839a7e8e5c833c342ace9ad4"
                    ]
                },
                {
                    "command": [
                        "apply Build_Partial_equivalence.",
                        "VernacExtend",
                        "5de4c099bba37baf71314284222f46bb7a8fa46f"
                    ]
                },
                {
                    "command": [
                        "unfold Transitive in |- *; unfold Ext' in |- *; intros f g h e1 e2 x.",
                        "VernacExtend",
                        "da709916063df29c247187ccbefcf96ffa68f34a"
                    ]
                },
                {
                    "command": [
                        "apply Trans' with (g x).",
                        "VernacExtend",
                        "4f5b925406452c257b1a70d80e0a19c2fd4f8f3a"
                    ]
                },
                {
                    "command": [
                        "apply (e1 x).",
                        "VernacExtend",
                        "2263c9ac2269f954a7bb1e9e4496fdda5c2f462c"
                    ]
                },
                {
                    "command": [
                        "apply (e2 x).",
                        "VernacExtend",
                        "0f7b80f91cc28d14500d52b865766c35978a455f"
                    ]
                },
                {
                    "command": [
                        "unfold Symmetric in |- *; unfold Ext' in |- *; intros f g e x.",
                        "VernacExtend",
                        "79e3d4e84220622327d4411e80f8e9a452662e90"
                    ]
                },
                {
                    "command": [
                        "apply Sym'; trivial.",
                        "VernacExtend",
                        "280a57c933f638154792bf569a5b3715a6826bca"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Map2_map_law1'",
            "line_nb": 45,
            "steps": [
                {
                    "command": [
                        "intro a; unfold Map_law' in |- *.",
                        "VernacExtend",
                        "ae15470a885e4b2b9a15a54fb4374e0250b7fc15"
                    ]
                },
                {
                    "command": [
                        "intros b1 b2 H; apply (pgcl a H).",
                        "VernacExtend",
                        "1b3bb87b16df28e25f9bb1013fb12d3145f67491"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Map2_map_law2'",
            "line_nb": 50,
            "steps": [
                {
                    "command": [
                        "unfold Map_law', Map2_map1' in |- *.",
                        "VernacExtend",
                        "a83447c2b80a66ddd6c6f44368999c0a1e9ebf24"
                    ]
                },
                {
                    "command": [
                        "intros a1 a2 H; simpl in |- *; unfold Ext' in |- *; intro b; simpl in |- *.",
                        "VernacExtend",
                        "5e3caa6196bb8332c28770852d6ced6d94b5075f"
                    ]
                },
                {
                    "command": [
                        "apply pgcr; trivial.",
                        "VernacExtend",
                        "f8ed075ff402d29035148a5b7e80a214b1d48562"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Prf_map2_congl'",
            "line_nb": 60,
            "steps": [
                {
                    "command": [
                        "unfold Map2_congl_law' in |- *; intros b1 b2 a H.",
                        "VernacExtend",
                        "57a235f6340e58b67b5135157e6a7c7daece9d4e"
                    ]
                },
                {
                    "command": [
                        "unfold Ap2' in |- *; apply (Pres1' (f a)); trivial.",
                        "VernacExtend",
                        "3b11b932a05d94ccd4f087df033ac8c1476c9257"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Prf_map2_congr'",
            "line_nb": 64,
            "steps": [
                {
                    "command": [
                        "unfold Map2_congr_law' in |- *; intros a1 a2 b H.",
                        "VernacExtend",
                        "8fbeee66fff9a1182e47b323b15fff375f4e639f"
                    ]
                },
                {
                    "command": [
                        "apply (Pres1' f H b).",
                        "VernacExtend",
                        "5be42e95e9a08c7292a30ebfb538e4bf06c4e55e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Prf_map2_cong'",
            "line_nb": 68,
            "steps": [
                {
                    "command": [
                        "unfold Map2_cong_law' in |- *; intros a1 a2 b1 b2 H1 H2.",
                        "VernacExtend",
                        "894fd3e0cb5b0e4c61fba4c4f44f1b2b467270cb"
                    ]
                },
                {
                    "command": [
                        "apply Trans' with (Ap2' a2 b1).",
                        "VernacExtend",
                        "8d41c7bf64a3e29a846e3ccaeb00e2baf6813bfe"
                    ]
                },
                {
                    "command": [
                        "apply (Prf_map2_congr' b1 H1).",
                        "VernacExtend",
                        "bf7960b3770275282dec979577b0fd4c0edb7a3b"
                    ]
                },
                {
                    "command": [
                        "apply (Prf_map2_congl' a2 H2).",
                        "VernacExtend",
                        "9355f80fa5c02df585643f37ebb8700e52d0a97a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}