{
    "filename": "SETOID/Setoid.v",
    "coq_project": "concat",
    "vernac_cmds": [
        [
            "Require Export Relations.",
            "VernacRequire",
            "ca942e55691cd1c29ddde01ebb7404769af28098"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Global Set Asymmetric Patterns.",
            "VernacSetOption",
            "2cc91d0a437fbd1f49bf43960caf4a2b10040c6b"
        ],
        [
            "Structure > Setoid : Type := {Carrier :> Type; Equal : Relation Carrier; Prf_equiv :> Equivalence Equal}.",
            "VernacInductive",
            "8443f7356dd87f03054af8d4e2bfe2ba5ab732f6"
        ],
        [
            "Infix \"=_S\" := Equal (at level 70).",
            "VernacInfix",
            "e7c25d0a065b7fa974643efabcd09861ebe5c32b"
        ],
        [
            "Lemma Refl : forall (S : Setoid) (x : S), x =_S x.",
            "VernacStartTheoremProof",
            "1706bb42496617bc6e94ead22162d0adb101b011"
        ],
        [
            "intro S; exact (Prf_refl S).",
            "VernacExtend",
            "df4d03e4d6400175c339779edaf70de0a4b21e43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Sym : forall (S : Setoid) (x y : S), x =_S y -> y =_S x.",
            "VernacStartTheoremProof",
            "d9378de1149636e48822caa7335754ea1b83c726"
        ],
        [
            "intro S; exact (Prf_sym S).",
            "VernacExtend",
            "782a4d3fea7b3661c309f90cd3fc273475555da0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Trans : forall (S : Setoid) (x y z : S), x =_S y -> y =_S z -> x =_S z.",
            "VernacStartTheoremProof",
            "a6b4b112eb25e3113091d1b7073edde7eb454ff0"
        ],
        [
            "intro S; exact (Prf_trans S).",
            "VernacExtend",
            "0ac43f4ce2a4a546b7b82799805bf194498089b5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Inductive Nat : Type := | Z : Nat | Suc : Nat -> Nat.",
            "VernacInductive",
            "5f08aa6c2b8736f22677a03580819088266c9303"
        ],
        [
            "Definition Eq_Nat (N1 N2 : Nat) := N1 = N2.",
            "VernacDefinition",
            "efff4edc1e973110447e63c064b82a0cb309a62c"
        ],
        [
            "Lemma Eq_Nat_equiv : Equivalence Eq_Nat.",
            "VernacStartTheoremProof",
            "a4b1f6bad9d1bf9cc641b92321c167ce0b185cc7"
        ],
        [
            "apply Build_Equivalence; unfold Eq_Nat in |- *.",
            "VernacExtend",
            "fee502cc66a210cec77426b78d67c550712a11d5"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply Build_Partial_equivalence.",
            "VernacExtend",
            "5de4c099bba37baf71314284222f46bb7a8fa46f"
        ],
        [
            "unfold Transitive in |- *; intros x y z H1 H2; apply (trans_eq H1 H2).",
            "VernacExtend",
            "fa9d3b4e4ece3580f53a69aac549aafcbc0d7bb1"
        ],
        [
            "unfold Symmetric in |- *; intros x y H1; apply (sym_eq H1).",
            "VernacExtend",
            "24ea504833ed5a82fe517718e41ebc7d8b7d5099"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Set_of_nat : Setoid := Eq_Nat_equiv.",
            "VernacDefinition",
            "334c3f1120f3a9a06698cf98c7aaef81b3187a87"
        ],
        [
            "Structure > PSetoid : Type := {PCarrier :> Type; Coherence : Relation PCarrier; Prf_PER :> Partial_equivalence Coherence}.",
            "VernacInductive",
            "0ccbdec58e4106d9bf40558dbfc0e2675a0b2d47"
        ],
        [
            "Definition Total (A : PSetoid) (x : A) := Coherence x x.",
            "VernacDefinition",
            "5df91ac7d55ac07fd95d2af019bc506e768e16dd"
        ]
    ],
    "proofs": [
        {
            "name": "Refl",
            "line_nb": 6,
            "steps": [
                {
                    "command": [
                        "intro S; exact (Prf_refl S).",
                        "VernacExtend",
                        "df4d03e4d6400175c339779edaf70de0a4b21e43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Sym",
            "line_nb": 9,
            "steps": [
                {
                    "command": [
                        "intro S; exact (Prf_sym S).",
                        "VernacExtend",
                        "782a4d3fea7b3661c309f90cd3fc273475555da0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Trans",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "intro S; exact (Prf_trans S).",
                        "VernacExtend",
                        "0ac43f4ce2a4a546b7b82799805bf194498089b5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Eq_Nat_equiv",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "apply Build_Equivalence; unfold Eq_Nat in |- *.",
                        "VernacExtend",
                        "fee502cc66a210cec77426b78d67c550712a11d5"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "apply Build_Partial_equivalence.",
                        "VernacExtend",
                        "5de4c099bba37baf71314284222f46bb7a8fa46f"
                    ]
                },
                {
                    "command": [
                        "unfold Transitive in |- *; intros x y z H1 H2; apply (trans_eq H1 H2).",
                        "VernacExtend",
                        "fa9d3b4e4ece3580f53a69aac549aafcbc0d7bb1"
                    ]
                },
                {
                    "command": [
                        "unfold Symmetric in |- *; intros x y H1; apply (sym_eq H1).",
                        "VernacExtend",
                        "24ea504833ed5a82fe517718e41ebc7d8b7d5099"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}