{
    "filename": "SETOID/SetoidPROD.v",
    "coq_project": "concat",
    "vernac_cmds": [
        [
            "Require Export Map.",
            "VernacRequire",
            "ed4a8a29eea459a4bf665981f8c1786476869a09"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Section s_prod.",
            "VernacBeginSection",
            "709769645113156fa9c3ae5290e765198bd6c568"
        ],
        [
            "Variable A B : Setoid.",
            "VernacAssumption",
            "c71dda629bc97bfaca45ab4606f4dcc1b96246a5"
        ],
        [
            "Structure Sprod : Type := {Sprod_l : A; Sprod_r : B}.",
            "VernacInductive",
            "3bbc1544fbdb76d7e2b5d0eb724e29fc7402224e"
        ],
        [
            "Definition Equal_Sprod (a1xb1 a2xb2 : Sprod) := Sprod_l a1xb1 =_S Sprod_l a2xb2 /\\ Sprod_r a1xb1 =_S Sprod_r a2xb2.",
            "VernacDefinition",
            "43077d1dc2ea457448e6ff7cd4c43d60ae386495"
        ],
        [
            "Lemma Equal_Sprod_equiv : Equivalence Equal_Sprod.",
            "VernacStartTheoremProof",
            "d170d50a50e799a544a3c6ab143e1c849cad3c44"
        ],
        [
            "apply Build_Equivalence.",
            "VernacExtend",
            "6179e27dcd740b742a59fad768ff2e759dba2ba2"
        ],
        [
            "unfold Reflexive in |- *; simple induction x; intros a b; unfold Equal_Sprod in |- *; simpl in |- *.",
            "VernacExtend",
            "0c71702d3fc0c2fe7d98bbcb8713a362f72d665c"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Refl.",
            "VernacExtend",
            "64c21b04c4d864da74440455ec9ef517f0f4452a"
        ],
        [
            "apply Refl.",
            "VernacExtend",
            "64c21b04c4d864da74440455ec9ef517f0f4452a"
        ],
        [
            "apply Build_Partial_equivalence.",
            "VernacExtend",
            "5de4c099bba37baf71314284222f46bb7a8fa46f"
        ],
        [
            "unfold Transitive in |- *.",
            "VernacExtend",
            "c59dd7be648cd1b1f5f87504c548ca5d849f47cf"
        ],
        [
            "simple induction x; intros a b; simple induction y; intros a' b'; simple induction z; intros a'' b''.",
            "VernacExtend",
            "f83984eeaf583e9e5a3381aacfc29e9d8eab0066"
        ],
        [
            "unfold Equal_Sprod in |- *; simpl in |- *.",
            "VernacExtend",
            "31d82bd62d77ac3c72c9dfe47cb1208f92a3e7e6"
        ],
        [
            "intros H H0; elim H; intros H1 H2; elim H0; intros H3 H4.",
            "VernacExtend",
            "d4a5058cf8d2ae72332d32d73ae45d3d10a0ff26"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Trans with a'; trivial.",
            "VernacExtend",
            "613b11a750e4d36abcb7b398b04285dad0f8c276"
        ],
        [
            "apply Trans with b'; trivial.",
            "VernacExtend",
            "09a26295c1c5c5eb40be98163551da2c1ae65ba0"
        ],
        [
            "unfold Symmetric in |- *; simple induction x; intros a b; simple induction y; intros a' b'.",
            "VernacExtend",
            "ebb7a2a7515d4ccfd177e237e0feaf355c071c0b"
        ],
        [
            "unfold Equal_Sprod in |- *; simpl in |- *.",
            "VernacExtend",
            "31d82bd62d77ac3c72c9dfe47cb1208f92a3e7e6"
        ],
        [
            "intros H; elim H; intros H1 H2.",
            "VernacExtend",
            "69f846f708653c9e8c0b2df9f7b361d6d452ab77"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Sym; trivial.",
            "VernacExtend",
            "b9c4e356dcc86c00657eec7ffa80eb594d5e1b88"
        ],
        [
            "apply Sym; trivial.",
            "VernacExtend",
            "b9c4e356dcc86c00657eec7ffa80eb594d5e1b88"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Structure SPROD : Setoid := Equal_Sprod_equiv.",
            "VernacDefinition",
            "459b757bcb7b74ae286ba681c64d6052755af32e"
        ],
        [
            "Lemma Proj1_SPROD_map_law : Map_law (Sprod_l:SPROD -> A).",
            "VernacStartTheoremProof",
            "0c367d32f6c89c7970b6649934bd2a2947007534"
        ],
        [
            "unfold Map_law in |- *; simpl in |- *.",
            "VernacExtend",
            "63e006e61be04a0030bcdd5ffea48f48cee6c173"
        ],
        [
            "simple induction x; intros a b; simple induction y; intros a' b'.",
            "VernacExtend",
            "e244655167ad862ca32a201eb2d3f116ca86b1dc"
        ],
        [
            "simpl in |- *; unfold Equal_Sprod in |- *; simpl in |- *.",
            "VernacExtend",
            "a4f87d067b5d8cda63be710c8da0642306b4efa4"
        ],
        [
            "simple induction 1; trivial.",
            "VernacExtend",
            "375fa7ea8520b0358134c4e23d76dded562441e3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Structure Proj1_SPROD : Map SPROD A := Proj1_SPROD_map_law.",
            "VernacDefinition",
            "6bc39b30cc138840382e6814f2a076a886ee8fb3"
        ],
        [
            "Lemma Proj2_SPROD_map_law : Map_law (Sprod_r:SPROD -> B).",
            "VernacStartTheoremProof",
            "2b44aa190d00abc2c3f5d7801f87f2aec3512748"
        ],
        [
            "unfold Map_law in |- *; simpl in |- *.",
            "VernacExtend",
            "63e006e61be04a0030bcdd5ffea48f48cee6c173"
        ],
        [
            "simple induction x; intros a b; simple induction y; intros a' b'.",
            "VernacExtend",
            "e244655167ad862ca32a201eb2d3f116ca86b1dc"
        ],
        [
            "simpl in |- *; unfold Equal_Sprod in |- *; simpl in |- *.",
            "VernacExtend",
            "a4f87d067b5d8cda63be710c8da0642306b4efa4"
        ],
        [
            "simple induction 1; trivial.",
            "VernacExtend",
            "375fa7ea8520b0358134c4e23d76dded562441e3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Structure Proj2_SPROD : Map SPROD B := Proj2_SPROD_map_law.",
            "VernacDefinition",
            "d689ef0a0a004df22302475c809d0cdb8ad5da62"
        ],
        [
            "End s_prod.",
            "VernacEndSegment",
            "49088848900509a9327dfce46bedf0ad983e82b9"
        ]
    ],
    "proofs": [
        {
            "name": "Equal_Sprod_equiv",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "apply Build_Equivalence.",
                        "VernacExtend",
                        "6179e27dcd740b742a59fad768ff2e759dba2ba2"
                    ]
                },
                {
                    "command": [
                        "unfold Reflexive in |- *; simple induction x; intros a b; unfold Equal_Sprod in |- *; simpl in |- *.",
                        "VernacExtend",
                        "0c71702d3fc0c2fe7d98bbcb8713a362f72d665c"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Refl.",
                        "VernacExtend",
                        "64c21b04c4d864da74440455ec9ef517f0f4452a"
                    ]
                },
                {
                    "command": [
                        "apply Refl.",
                        "VernacExtend",
                        "64c21b04c4d864da74440455ec9ef517f0f4452a"
                    ]
                },
                {
                    "command": [
                        "apply Build_Partial_equivalence.",
                        "VernacExtend",
                        "5de4c099bba37baf71314284222f46bb7a8fa46f"
                    ]
                },
                {
                    "command": [
                        "unfold Transitive in |- *.",
                        "VernacExtend",
                        "c59dd7be648cd1b1f5f87504c548ca5d849f47cf"
                    ]
                },
                {
                    "command": [
                        "simple induction x; intros a b; simple induction y; intros a' b'; simple induction z; intros a'' b''.",
                        "VernacExtend",
                        "f83984eeaf583e9e5a3381aacfc29e9d8eab0066"
                    ]
                },
                {
                    "command": [
                        "unfold Equal_Sprod in |- *; simpl in |- *.",
                        "VernacExtend",
                        "31d82bd62d77ac3c72c9dfe47cb1208f92a3e7e6"
                    ]
                },
                {
                    "command": [
                        "intros H H0; elim H; intros H1 H2; elim H0; intros H3 H4.",
                        "VernacExtend",
                        "d4a5058cf8d2ae72332d32d73ae45d3d10a0ff26"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Trans with a'; trivial.",
                        "VernacExtend",
                        "613b11a750e4d36abcb7b398b04285dad0f8c276"
                    ]
                },
                {
                    "command": [
                        "apply Trans with b'; trivial.",
                        "VernacExtend",
                        "09a26295c1c5c5eb40be98163551da2c1ae65ba0"
                    ]
                },
                {
                    "command": [
                        "unfold Symmetric in |- *; simple induction x; intros a b; simple induction y; intros a' b'.",
                        "VernacExtend",
                        "ebb7a2a7515d4ccfd177e237e0feaf355c071c0b"
                    ]
                },
                {
                    "command": [
                        "unfold Equal_Sprod in |- *; simpl in |- *.",
                        "VernacExtend",
                        "31d82bd62d77ac3c72c9dfe47cb1208f92a3e7e6"
                    ]
                },
                {
                    "command": [
                        "intros H; elim H; intros H1 H2.",
                        "VernacExtend",
                        "69f846f708653c9e8c0b2df9f7b361d6d452ab77"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Sym; trivial.",
                        "VernacExtend",
                        "b9c4e356dcc86c00657eec7ffa80eb594d5e1b88"
                    ]
                },
                {
                    "command": [
                        "apply Sym; trivial.",
                        "VernacExtend",
                        "b9c4e356dcc86c00657eec7ffa80eb594d5e1b88"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Proj1_SPROD_map_law",
            "line_nb": 29,
            "steps": [
                {
                    "command": [
                        "unfold Map_law in |- *; simpl in |- *.",
                        "VernacExtend",
                        "63e006e61be04a0030bcdd5ffea48f48cee6c173"
                    ]
                },
                {
                    "command": [
                        "simple induction x; intros a b; simple induction y; intros a' b'.",
                        "VernacExtend",
                        "e244655167ad862ca32a201eb2d3f116ca86b1dc"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; unfold Equal_Sprod in |- *; simpl in |- *.",
                        "VernacExtend",
                        "a4f87d067b5d8cda63be710c8da0642306b4efa4"
                    ]
                },
                {
                    "command": [
                        "simple induction 1; trivial.",
                        "VernacExtend",
                        "375fa7ea8520b0358134c4e23d76dded562441e3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Proj2_SPROD_map_law",
            "line_nb": 36,
            "steps": [
                {
                    "command": [
                        "unfold Map_law in |- *; simpl in |- *.",
                        "VernacExtend",
                        "63e006e61be04a0030bcdd5ffea48f48cee6c173"
                    ]
                },
                {
                    "command": [
                        "simple induction x; intros a b; simple induction y; intros a' b'.",
                        "VernacExtend",
                        "e244655167ad862ca32a201eb2d3f116ca86b1dc"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; unfold Equal_Sprod in |- *; simpl in |- *.",
                        "VernacExtend",
                        "a4f87d067b5d8cda63be710c8da0642306b4efa4"
                    ]
                },
                {
                    "command": [
                        "simple induction 1; trivial.",
                        "VernacExtend",
                        "375fa7ea8520b0358134c4e23d76dded562441e3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}