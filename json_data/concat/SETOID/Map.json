{
    "filename": "SETOID/Map.v",
    "coq_project": "concat",
    "vernac_cmds": [
        [
            "Require Export Setoid.",
            "VernacRequire",
            "a0df4327e58518a5282381a0591ee590a2104408"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Section maps.",
            "VernacBeginSection",
            "56a4b28233c56e65fad0b33a20a714adaf1e2f11"
        ],
        [
            "Variable A B : Setoid.",
            "VernacAssumption",
            "c71dda629bc97bfaca45ab4606f4dcc1b96246a5"
        ],
        [
            "Definition Map_law (f : A -> B) := forall x y : A, x =_S y -> f x =_S f y.",
            "VernacDefinition",
            "4a3a0850eaea1c2c7fc815134a47d5e652ffb52b"
        ],
        [
            "Structure > Map : Type := {Ap :> A -> B; Pres :> Map_law Ap}.",
            "VernacInductive",
            "b7ade044884480b5a58ac4493a728af601b93d06"
        ],
        [
            "Lemma Pres1 : forall (m : Map) (x y : A), x =_S y -> m x =_S m y.",
            "VernacStartTheoremProof",
            "9827d16ff7e4457577f1bffa8a52987a1fe423f4"
        ],
        [
            "exact Pres.",
            "VernacExtend",
            "3a505a625e85b523a267f3c54c1d435fa395ab1b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Ext (f g : Map) := forall x : A, f x =_S g x.",
            "VernacDefinition",
            "946d2205ebe6f7382d85946dca2c2e207d974c6b"
        ],
        [
            "Lemma Ext_equiv : Equivalence Ext.",
            "VernacStartTheoremProof",
            "c216a6218d3bc9e980e161826483b94e75ef0ee2"
        ],
        [
            "intros; apply Build_Equivalence.",
            "VernacExtend",
            "1b7eab7afcaa4fe7d6474d4275e98a493632352d"
        ],
        [
            "unfold Reflexive in |- *; unfold Ext in |- *; intros f x.",
            "VernacExtend",
            "a35f3bf9c59e13366e8d3b78eb950766ae4ff5c7"
        ],
        [
            "apply Refl.",
            "VernacExtend",
            "64c21b04c4d864da74440455ec9ef517f0f4452a"
        ],
        [
            "apply Build_Partial_equivalence.",
            "VernacExtend",
            "5de4c099bba37baf71314284222f46bb7a8fa46f"
        ],
        [
            "unfold Transitive in |- *; unfold Ext in |- *; intros f g h e1 e2 x.",
            "VernacExtend",
            "ef0762609a1cc9122ab48f482ebe57d4696ee55d"
        ],
        [
            "apply Trans with (g x).",
            "VernacExtend",
            "c4a281162eab7fc37d38a2850f6000a351e6b85a"
        ],
        [
            "apply (e1 x).",
            "VernacExtend",
            "2263c9ac2269f954a7bb1e9e4496fdda5c2f462c"
        ],
        [
            "apply (e2 x).",
            "VernacExtend",
            "0f7b80f91cc28d14500d52b865766c35978a455f"
        ],
        [
            "unfold Symmetric in |- *; unfold Ext in |- *; intros f g e x.",
            "VernacExtend",
            "3b21eaf0d296524f7b03e7615ddbefc39ade78df"
        ],
        [
            "apply Sym; trivial.",
            "VernacExtend",
            "b9c4e356dcc86c00657eec7ffa80eb594d5e1b88"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Structure Map_setoid : Setoid := Ext_equiv.",
            "VernacDefinition",
            "657766a2fb2500535f24022d04f666e11091a7b9"
        ],
        [
            "End maps.",
            "VernacEndSegment",
            "6ace5ffd6c60d53b59167aa44abcbfc6401e9f16"
        ],
        [
            "Infix \"=_M\" := Ext (at level 70).",
            "VernacInfix",
            "a1326272237ccca4abd210b2851e1618eb12658c"
        ],
        [
            "Infix \"==>\" := Map_setoid (at level 95, right associativity).",
            "VernacInfix",
            "43db33ea4b041ff21d9464e132bd25ee7d794cc4"
        ],
        [
            "Section id_map_def.",
            "VernacBeginSection",
            "04d863a875b539dc373d34e47b812e3e9c9d9249"
        ],
        [
            "Variable A : Setoid.",
            "VernacAssumption",
            "5313bf7d7a362d347e137b00724b1953a498f593"
        ],
        [
            "Definition Id_fun (x : A) := x.",
            "VernacDefinition",
            "7a73b2737c35b40996948101eddb8603f6a8f536"
        ],
        [
            "Lemma Id_fun_map_law : Map_law Id_fun.",
            "VernacStartTheoremProof",
            "f6627c844e73dae08c3f1ce586d5bee551abf2dd"
        ],
        [
            "unfold Map_law in |- *; trivial.",
            "VernacExtend",
            "cf0ac04471a86b2803eb76ae7498d009f51c4112"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Structure Id_map : Map A A := Id_fun_map_law.",
            "VernacDefinition",
            "79dc2ef2f63c42db472682bd9f1df77ef2209bfb"
        ],
        [
            "End id_map_def.",
            "VernacEndSegment",
            "cc4a0c5244c495f014bbaffc63369cb6493592f2"
        ],
        [
            "Section mcomp.",
            "VernacBeginSection",
            "e84090f9035d82e8907f6cd79cc3009792234968"
        ],
        [
            "Variables (A B C : Setoid) (f : Map A B) (g : Map B C).",
            "VernacAssumption",
            "940d9867478a8e8719dc9b586e9f12ee47eede9d"
        ],
        [
            "Definition Comp_fun (x : A) := g (f x).",
            "VernacDefinition",
            "23ec99f2495ea2f13bfa4257a7b12f7e151a0b35"
        ],
        [
            "Lemma Comp_fun_map_law : Map_law Comp_fun.",
            "VernacStartTheoremProof",
            "3b3dd9ae751c315004f1c32e11235417ccf8ee46"
        ],
        [
            "unfold Map_law in |- *; intros a1 a2 H.",
            "VernacExtend",
            "a423cd13ef45a45fd7ef28601f11102c814ef773"
        ],
        [
            "unfold Comp_fun in |- *; simpl in |- *.",
            "VernacExtend",
            "ec334b1f1605bea285de7b0ebe34c9e2b687704f"
        ],
        [
            "apply Pres1.",
            "VernacExtend",
            "5fbb85859b275e89c8c9612a2e024e3051b16e3c"
        ],
        [
            "apply Pres1; trivial.",
            "VernacExtend",
            "d97d16403b5a7ba80ec74125fa07e51626688fb6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Structure Comp_map : Map A C := Comp_fun_map_law.",
            "VernacDefinition",
            "e6e06102ffe514b18be128447169f48ebaf9c7f9"
        ],
        [
            "End mcomp.",
            "VernacEndSegment",
            "1387c02acbd3c216b89c38fc1586e0646d8fdccd"
        ],
        [
            "Infix \"o_M\" := Comp_map (at level 20, right associativity).",
            "VernacInfix",
            "e894e55336ce4e350bc96c3e8e0d42f1278fa956"
        ]
    ],
    "proofs": [
        {
            "name": "Pres1",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "exact Pres.",
                        "VernacExtend",
                        "3a505a625e85b523a267f3c54c1d435fa395ab1b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Ext_equiv",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "intros; apply Build_Equivalence.",
                        "VernacExtend",
                        "1b7eab7afcaa4fe7d6474d4275e98a493632352d"
                    ]
                },
                {
                    "command": [
                        "unfold Reflexive in |- *; unfold Ext in |- *; intros f x.",
                        "VernacExtend",
                        "a35f3bf9c59e13366e8d3b78eb950766ae4ff5c7"
                    ]
                },
                {
                    "command": [
                        "apply Refl.",
                        "VernacExtend",
                        "64c21b04c4d864da74440455ec9ef517f0f4452a"
                    ]
                },
                {
                    "command": [
                        "apply Build_Partial_equivalence.",
                        "VernacExtend",
                        "5de4c099bba37baf71314284222f46bb7a8fa46f"
                    ]
                },
                {
                    "command": [
                        "unfold Transitive in |- *; unfold Ext in |- *; intros f g h e1 e2 x.",
                        "VernacExtend",
                        "ef0762609a1cc9122ab48f482ebe57d4696ee55d"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (g x).",
                        "VernacExtend",
                        "c4a281162eab7fc37d38a2850f6000a351e6b85a"
                    ]
                },
                {
                    "command": [
                        "apply (e1 x).",
                        "VernacExtend",
                        "2263c9ac2269f954a7bb1e9e4496fdda5c2f462c"
                    ]
                },
                {
                    "command": [
                        "apply (e2 x).",
                        "VernacExtend",
                        "0f7b80f91cc28d14500d52b865766c35978a455f"
                    ]
                },
                {
                    "command": [
                        "unfold Symmetric in |- *; unfold Ext in |- *; intros f g e x.",
                        "VernacExtend",
                        "3b21eaf0d296524f7b03e7615ddbefc39ade78df"
                    ]
                },
                {
                    "command": [
                        "apply Sym; trivial.",
                        "VernacExtend",
                        "b9c4e356dcc86c00657eec7ffa80eb594d5e1b88"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Id_fun_map_law",
            "line_nb": 30,
            "steps": [
                {
                    "command": [
                        "unfold Map_law in |- *; trivial.",
                        "VernacExtend",
                        "cf0ac04471a86b2803eb76ae7498d009f51c4112"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Comp_fun_map_law",
            "line_nb": 38,
            "steps": [
                {
                    "command": [
                        "unfold Map_law in |- *; intros a1 a2 H.",
                        "VernacExtend",
                        "a423cd13ef45a45fd7ef28601f11102c814ef773"
                    ]
                },
                {
                    "command": [
                        "unfold Comp_fun in |- *; simpl in |- *.",
                        "VernacExtend",
                        "ec334b1f1605bea285de7b0ebe34c9e2b687704f"
                    ]
                },
                {
                    "command": [
                        "apply Pres1.",
                        "VernacExtend",
                        "5fbb85859b275e89c8c9612a2e024e3051b16e3c"
                    ]
                },
                {
                    "command": [
                        "apply Pres1; trivial.",
                        "VernacExtend",
                        "d97d16403b5a7ba80ec74125fa07e51626688fb6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}