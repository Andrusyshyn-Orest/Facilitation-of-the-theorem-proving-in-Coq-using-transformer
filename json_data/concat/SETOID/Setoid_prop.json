{
    "filename": "SETOID/Setoid_prop.v",
    "coq_project": "concat",
    "vernac_cmds": [
        [
            "Require Export Map.",
            "VernacRequire",
            "ed4a8a29eea459a4bf665981f8c1786476869a09"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Section sub_setoid.",
            "VernacBeginSection",
            "9c3aaee9f23377f081ea044584d0aee24dcc92cf"
        ],
        [
            "Variable U : Setoid.",
            "VernacAssumption",
            "2a53ebaf70db4999d69420977bb9f9616794681c"
        ],
        [
            "Definition Reg_law (A : U -> Prop) := forall x y : U, x =_S y -> A x -> A y.",
            "VernacDefinition",
            "793d83ed815879b4059cfac329c7f2fa73a9c3f7"
        ],
        [
            "Structure > Setoid_pred : Type := {Pred :> U -> Prop; Prf_reg :> Reg_law Pred}.",
            "VernacInductive",
            "a96ba5f0bbb526779373cf9fc4129cd6fb6cdc6a"
        ],
        [
            "Variable A : Setoid_pred.",
            "VernacAssumption",
            "037dbcc7520153a867da330c5f332d39de13251a"
        ],
        [
            "Structure SubType : Type := {Elt_sub : U; Prf_constr : A Elt_sub}.",
            "VernacInductive",
            "ad9b44c149d137663e0abab673e70a09f9276a99"
        ],
        [
            "Definition Equal_SubType (a b : SubType) := Elt_sub a =_S Elt_sub b.",
            "VernacDefinition",
            "8e78bcab2c5c682334195006a73d01f28462ae12"
        ],
        [
            "Lemma Equal_SubType_equiv : Equivalence Equal_SubType.",
            "VernacStartTheoremProof",
            "df4e0d728a4d2f8727da2b2fb011a22548fe4934"
        ],
        [
            "apply Build_Equivalence.",
            "VernacExtend",
            "6179e27dcd740b742a59fad768ff2e759dba2ba2"
        ],
        [
            "unfold Reflexive in |- *; intro x; exact (Refl (Elt_sub x)).",
            "VernacExtend",
            "a9f33b23116a4e2d0ba49cfd7cd05a8ab36400cf"
        ],
        [
            "apply Build_Partial_equivalence.",
            "VernacExtend",
            "5de4c099bba37baf71314284222f46bb7a8fa46f"
        ],
        [
            "unfold Transitive in |- *; intros a b c H1 H2; unfold Equal_SubType in |- *.",
            "VernacExtend",
            "5a0f4403a271ed25152af3e9297b0a5038d054f7"
        ],
        [
            "apply Trans with (Elt_sub b); auto.",
            "VernacExtend",
            "304149495415b7a05c75116910f7a0b669eef3fc"
        ],
        [
            "unfold Symmetric in |- *; intros a b H; unfold Equal_SubType in |- *.",
            "VernacExtend",
            "cbfd67ab263c339f27bbf2621ccf6d63486569cb"
        ],
        [
            "apply Sym; auto.",
            "VernacExtend",
            "65df26a46f261cc73fa344bf919f8ef5d9e2117a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Structure SubSetoid : Setoid := Equal_SubType_equiv.",
            "VernacDefinition",
            "47c982530a7641f17650deec327306a1ec00a74c"
        ],
        [
            "End sub_setoid.",
            "VernacEndSegment",
            "e5e4bd5ad1bc645b0030cd4fa7358a6b71643fa2"
        ],
        [
            "Section restricted_map.",
            "VernacBeginSection",
            "b4fe8f6727157461e262940d36f9c08a947c370e"
        ],
        [
            "Variables (A B : Setoid) (f : Map A B) (P : Setoid_pred A).",
            "VernacAssumption",
            "ade655cc8485d130003f27baa597b9c06f2ad053"
        ],
        [
            "Definition Restricted_fun (a : SubSetoid P) := f (Elt_sub a).",
            "VernacDefinition",
            "4f4efa5869512d70a6ff81865e2e2b7c400fc0fe"
        ],
        [
            "Lemma Restricted_map_law : Map_law Restricted_fun.",
            "VernacStartTheoremProof",
            "a55f89bb5c957cfe33971903792ef153ce0217c0"
        ],
        [
            "unfold Map_law in |- *; simpl in |- *.",
            "VernacExtend",
            "63e006e61be04a0030bcdd5ffea48f48cee6c173"
        ],
        [
            "unfold Equal_SubType in |- *; intros a1 a2 H.",
            "VernacExtend",
            "5d88407ce8d9cc73bb742bad5f4e3960fe560ace"
        ],
        [
            "unfold Restricted_fun in |- *; apply Pres1; trivial.",
            "VernacExtend",
            "48ae71ca17bc8e5c313adcfa8e298051af1794cb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Structure RestrictedMap := Build_Map Restricted_map_law.",
            "VernacDefinition",
            "dacddbe7075f41c0209f1dd760c3f7ed8d798ddb"
        ],
        [
            "End restricted_map.",
            "VernacEndSegment",
            "ad28cb3f50b78183fe7d14de98ed20f6c57101e1"
        ]
    ],
    "proofs": [
        {
            "name": "Equal_SubType_equiv",
            "line_nb": 10,
            "steps": [
                {
                    "command": [
                        "apply Build_Equivalence.",
                        "VernacExtend",
                        "6179e27dcd740b742a59fad768ff2e759dba2ba2"
                    ]
                },
                {
                    "command": [
                        "unfold Reflexive in |- *; intro x; exact (Refl (Elt_sub x)).",
                        "VernacExtend",
                        "a9f33b23116a4e2d0ba49cfd7cd05a8ab36400cf"
                    ]
                },
                {
                    "command": [
                        "apply Build_Partial_equivalence.",
                        "VernacExtend",
                        "5de4c099bba37baf71314284222f46bb7a8fa46f"
                    ]
                },
                {
                    "command": [
                        "unfold Transitive in |- *; intros a b c H1 H2; unfold Equal_SubType in |- *.",
                        "VernacExtend",
                        "5a0f4403a271ed25152af3e9297b0a5038d054f7"
                    ]
                },
                {
                    "command": [
                        "apply Trans with (Elt_sub b); auto.",
                        "VernacExtend",
                        "304149495415b7a05c75116910f7a0b669eef3fc"
                    ]
                },
                {
                    "command": [
                        "unfold Symmetric in |- *; intros a b H; unfold Equal_SubType in |- *.",
                        "VernacExtend",
                        "cbfd67ab263c339f27bbf2621ccf6d63486569cb"
                    ]
                },
                {
                    "command": [
                        "apply Sym; auto.",
                        "VernacExtend",
                        "65df26a46f261cc73fa344bf919f8ef5d9e2117a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Restricted_map_law",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "unfold Map_law in |- *; simpl in |- *.",
                        "VernacExtend",
                        "63e006e61be04a0030bcdd5ffea48f48cee6c173"
                    ]
                },
                {
                    "command": [
                        "unfold Equal_SubType in |- *; intros a1 a2 H.",
                        "VernacExtend",
                        "5d88407ce8d9cc73bb742bad5f4e3960fe560ace"
                    ]
                },
                {
                    "command": [
                        "unfold Restricted_fun in |- *; apply Pres1; trivial.",
                        "VernacExtend",
                        "48ae71ca17bc8e5c313adcfa8e298051af1794cb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}