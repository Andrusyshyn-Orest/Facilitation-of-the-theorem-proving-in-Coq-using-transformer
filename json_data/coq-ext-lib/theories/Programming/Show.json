{
    "filename": "theories/Programming/Show.v",
    "coq_project": "coq-ext-lib",
    "vernac_cmds": [
        [
            "Require Coq.Strings.Ascii.",
            "VernacRequire",
            "992b1fbe733b9fe7bd33abdf36c70b852f3f20a3"
        ],
        [
            "Require Coq.Strings.String.",
            "VernacRequire",
            "dae40f5d92165d2021b36a066f00181cb158ff34"
        ],
        [
            "Require Import Coq.Strings.String.",
            "VernacRequire",
            "5c887f44cc52e2a2db22e7cb04fefdce0c1d84f0"
        ],
        [
            "Require Import Coq.Program.Wf.",
            "VernacRequire",
            "020696913b1c2b6c01425c8967a530fa30e972fb"
        ],
        [
            "Require Import Coq.PArith.BinPos.",
            "VernacRequire",
            "72243c80f2b82cdffd33fcdaf347eb32d99a1980"
        ],
        [
            "Require Import Coq.ZArith.ZArith.",
            "VernacRequire",
            "75233d7b9135f982328c9c060998d6513587b48b"
        ],
        [
            "Require Import ExtLib.Structures.Monoid.",
            "VernacRequire",
            "f032d55031b73511a3b5f710a37e267ebb87da85"
        ],
        [
            "Require Import ExtLib.Structures.Reducible.",
            "VernacRequire",
            "3d0145326c8c36a3bac1544c5c8e01d880d61b29"
        ],
        [
            "Require Import ExtLib.Programming.Injection.",
            "VernacRequire",
            "b299b7fd1c1fd2f99ccda80bce682a8b996c4b2d"
        ],
        [
            "Require Import ExtLib.Data.Char.",
            "VernacRequire",
            "ccecbe2533bae8051cab32845c2492abf0720f9e"
        ],
        [
            "Require Import ExtLib.Data.String.",
            "VernacRequire",
            "fb0f516351625938c7e15d4a8d9cc2f2c5be5b57"
        ],
        [
            "Require Import ExtLib.Data.Fun.",
            "VernacRequire",
            "06f8248a51a161a9650deb7ff884269e90f7417e"
        ],
        [
            "Require Import ExtLib.Core.RelDec.",
            "VernacRequire",
            "0e3bcdc14736b545ca698ea9a09e10feafbc33d4"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Set Strict Implicit.",
            "VernacSetOption",
            "6b94f70716dd2a2fc34140a20b87bb0e87225ff4"
        ],
        [
            "Set Printing Universes.",
            "VernacSetOption",
            "c222e635197e6d2a46b8b20c2fc5e9c79c70a8dd"
        ],
        [
            "Universe Ushow.",
            "VernacUniverse",
            "8a4023930f77de83265b8a9bd43dbbace2ffcfe1"
        ],
        [
            "Polymorphic Definition showM@{T} : Type@{Ushow} := forall m : Type@{T}, Injection ascii m -> Monoid m -> m.",
            "VernacDefinition",
            "ba105a705043b357d8aa2b318401c83cd3a2f173"
        ],
        [
            "Polymorphic Class ShowScheme@{t} (T : Type@{t}) : Type := { show_mon : Monoid@{t} T ; show_inj : Injection ascii T }.",
            "VernacInductive",
            "db453c1831f2df656e7ffe712f9321edc51160b7"
        ],
        [
            "Global Instance ShowScheme_string : ShowScheme string := { show_mon := Monoid_string_append ; show_inj := fun x => String x EmptyString }.",
            "VernacInstance",
            "fa3361752083d58f293b89048a994d4786114379"
        ],
        [
            "Global Instance ShowScheme_string_compose : ShowScheme (string -> string) := { show_mon := Monoid_compose string ; show_inj := String }.",
            "VernacInstance",
            "9313ec4491bc7ca77c83bb6dfa15d71fff44fd72"
        ],
        [
            "Polymorphic Definition runShow {T} {M : ShowScheme T} (m : showM) : T := m _ show_inj show_mon.",
            "VernacDefinition",
            "21a84ab6b1f91bf512e8f4d779c4dcea32eae5a2"
        ],
        [
            "Polymorphic Class Show@{t m} (T : Type@{t}) : Type := show : T -> showM@{m}.",
            "VernacInductive",
            "18415b75c48262d2a3d3e32b6812baf3b8262d86"
        ],
        [
            "Polymorphic Definition to_string {T} {M : Show T} (v : T) : string := runShow (show v) \"\"%string.",
            "VernacDefinition",
            "00e969f362ff2250e9010deb6462e0a5c8bd7dee"
        ],
        [
            "Polymorphic Definition empty : showM := fun _ _ m => monoid_unit m.",
            "VernacDefinition",
            "596d6167ec645194bc86ecfdedee5a4d08274f8f"
        ],
        [
            "Polymorphic Definition cat (a b : showM) : showM := fun _ i m => monoid_plus m (a _ i m) (b _ i m).",
            "VernacDefinition",
            "c282490050aa3c51de57b77a9013e2f8da85251b"
        ],
        [
            "Global Polymorphic Instance Injection_ascii_showM : Injection ascii showM := fun v => fun _ i _ => i v.",
            "VernacInstance",
            "473c73da52821c6e4ef65e3e30d8f84130b416e1"
        ],
        [
            "Polymorphic Fixpoint show_exact (s : string) : showM := match s with | EmptyString => empty | String a s' => cat (inject a) (show_exact s') end.",
            "VernacFixpoint",
            "e1705f5ecdc32c09ab759d92cf40244fac03ba87"
        ],
        [
            "Module ShowNotation.",
            "VernacDefineModule",
            "7dc98221eaaaec02bb073def8704cd88a577b8a1"
        ],
        [
            "Delimit Scope show_scope with show.",
            "VernacDelimiters",
            "7f8dd954351d090b9655891b6bef5bc69a2f6a57"
        ],
        [
            "Notation \"x << y\" := (cat x%show y%show) (at level 100) : show_scope.",
            "VernacNotation",
            "ddd9fe4b5bfa400ccaee9a5f5392b2af9a3b77fb"
        ],
        [
            "Coercion show_exact : string >-> showM.",
            "VernacCoercion",
            "8b7c2de4f2f23b95633028244307dc9f9154a7d0"
        ],
        [
            "Definition _inject_char : ascii -> showM := inject.",
            "VernacDefinition",
            "fb808677e17760a51c6e1b4f2c81c2e6ab324680"
        ],
        [
            "Coercion _inject_char : ascii >-> showM.",
            "VernacCoercion",
            "082b6d5fc5267988ffb5363ed82471a1b7b3e8e8"
        ],
        [
            "End ShowNotation.",
            "VernacEndSegment",
            "eed1cdc7d33e06ecdd1d18be3fc788ced09268a0"
        ],
        [
            "Polymorphic Definition indent (indent : showM) (v : showM) : showM := let nl := Ascii.ascii_of_nat 10 in fun _ inj mon => v _ (fun a => if eq_dec a nl then monoid_plus mon (inj a) (indent _ inj mon) else inj a) mon.",
            "VernacDefinition",
            "938d23cd308c37b09a3c8c59afcf690e2463b5a1"
        ],
        [
            "Section sepBy.",
            "VernacBeginSection",
            "66e1572f3f4be096265de022e97b7c482b062841"
        ],
        [
            "Import ShowNotation.",
            "VernacImport",
            "4d05ed08cd4cfae3947006ebee88e59e8da0c2c5"
        ],
        [
            "Local Open Scope show_scope.",
            "VernacOpenCloseScope",
            "6400b628a96f75aaada1d4d50ac2b9cc337b30b6"
        ],
        [
            "Polymorphic Definition sepBy {T : Type} {F : Foldable T showM} (sep : showM) (ls : T) : showM := match fold (fun s acc => match acc with | None => Some s | Some x => Some (x << sep << s) end) None ls with | None => empty | Some s => s end.",
            "VernacDefinition",
            "e889a7e248829b674ba08dd6608ba5c1ba36fb62"
        ],
        [
            "End sepBy.",
            "VernacEndSegment",
            "acab56fe205b17253a2fa474a5c5a4f78f12e6db"
        ],
        [
            "Section sepBy_f.",
            "VernacBeginSection",
            "33cb5e1cbbb25737a7d48ce3008fdee588071944"
        ],
        [
            "Import ShowNotation.",
            "VernacImport",
            "4d05ed08cd4cfae3947006ebee88e59e8da0c2c5"
        ],
        [
            "Local Open Scope show_scope.",
            "VernacOpenCloseScope",
            "6400b628a96f75aaada1d4d50ac2b9cc337b30b6"
        ],
        [
            "Polymorphic Variables (T : Type) (E : Type).",
            "VernacAssumption",
            "73263187f55a6c51d9aaad2be0a51e36750c36dd"
        ],
        [
            "Polymorphic Context {F : Foldable T E}.",
            "VernacContext",
            "ff01d00f4f501146b28430e50342c5bc6e87b28f"
        ],
        [
            "Polymorphic Variable (f : E -> showM).",
            "VernacAssumption",
            "6bab8ae90a62acedfb9007915bfe5b709005b923"
        ],
        [
            "Polymorphic Definition sepBy_f (sep : showM) (ls : T) : showM := match fold (fun s acc => match acc with | None => Some (f s) | Some x => Some (x << sep << f s) end) None ls with | None => empty | Some s => s end.",
            "VernacDefinition",
            "560e1bed4bd54e3d7c74768467419a298251b387"
        ],
        [
            "End sepBy_f.",
            "VernacEndSegment",
            "7553bad277a3a1f8388412d474feba61c7608e45"
        ],
        [
            "Polymorphic Definition wrap (before after : showM) (x : showM) : showM := cat before (cat x after).",
            "VernacDefinition",
            "8652ca69905e9197875d4783cb5deee1f2150e70"
        ],
        [
            "Section sum_Show.",
            "VernacBeginSection",
            "193f748dccd6f603faa80538509b42c36fefd363"
        ],
        [
            "Import ShowNotation.",
            "VernacImport",
            "4d05ed08cd4cfae3947006ebee88e59e8da0c2c5"
        ],
        [
            "Local Open Scope show_scope.",
            "VernacOpenCloseScope",
            "6400b628a96f75aaada1d4d50ac2b9cc337b30b6"
        ],
        [
            "Polymorphic Definition sum_Show@{a m} {A : Type@{a}} {B : Type@{a}} {AS:Show@{a m} A} {BS:Show@{a m} B} : Show@{a m} (A+B) := fun s => let (tag, payload) := match s with | inl a => (show_exact \"inl\"%string, show a) | inr b => (show_exact \"inr\"%string, show b) end in \"(\"%char << tag << \" \"%char << payload << \")\"%char.",
            "VernacDefinition",
            "8d22d7b5657ce91ffb823f361153526748c11419"
        ],
        [
            "End sum_Show.",
            "VernacEndSegment",
            "635c83be0bd0a9f5f0ef6eb7023664a7636e09c2"
        ],
        [
            "Section foldable_Show.",
            "VernacBeginSection",
            "1c8ca19fcbd8ebf29d54c9597d359ea15a5e5267"
        ],
        [
            "Polymorphic Context {A:Type} {B:Type} {F : Foldable B A} {BS : Show A}.",
            "VernacContext",
            "7a7dc4684edf2633c599597b25ae23969e0f7113"
        ],
        [
            "Global Polymorphic Instance foldable_Show : Show B := { show s := sepBy_f show (show_exact \", \"%string) s }.",
            "VernacInstance",
            "62b47d172d0d167e409d953d3c3887659cccc129"
        ],
        [
            "End foldable_Show.",
            "VernacEndSegment",
            "5fa28af83f429fa81bd7741cfeeb0f8f11d1a819"
        ],
        [
            "Polymorphic Fixpoint iter_show (ss : list showM) : showM := match ss with | nil => empty | cons s ss => cat s (iter_show ss) end.",
            "VernacFixpoint",
            "1135050df81124f0faa86550d848f1019e763ffa"
        ],
        [
            "Section hiding_notation.",
            "VernacBeginSection",
            "40c263a05dd784bddcbc6a6191bb4a7c6fe9ef1b"
        ],
        [
            "Import ShowNotation.",
            "VernacImport",
            "4d05ed08cd4cfae3947006ebee88e59e8da0c2c5"
        ],
        [
            "Local Open Scope show_scope.",
            "VernacOpenCloseScope",
            "6400b628a96f75aaada1d4d50ac2b9cc337b30b6"
        ],
        [
            "Import Ascii.",
            "VernacImport",
            "c7c5b1d9fd41ea72766c0f764398dcafab6b11a0"
        ],
        [
            "Import String.",
            "VernacImport",
            "ab06a84ba92a619ceea6d71b5e5638414d80c1ee"
        ],
        [
            "Global Instance unit_Show : Show unit := { show u := \"tt\"%string }.",
            "VernacInstance",
            "0ce049d6e0f9465bcc17756760752736e98caedf"
        ],
        [
            "Global Instance bool_Show : Show bool := { show b := if b then \"true\"%string else \"false\"%string }.",
            "VernacInstance",
            "707862f958c0ba21aba22192c40300e0b98e9751"
        ],
        [
            "Global Instance ascii_Show : Show ascii := fun a => \"'\"%char << a << \"'\"%char.",
            "VernacInstance",
            "d0b749bf400f3567c0adecf0fb4c1b8065fcb69e"
        ],
        [
            "Global Instance string_Show : Show string := { show s := \"\"\"\"%char << s << \"\"\"\"%char }.",
            "VernacInstance",
            "769a6e70c0078999251772ed6cbb1e24a29baae0"
        ],
        [
            "Program Fixpoint nat_show (n:nat) {measure n} : showM := if Compare_dec.le_gt_dec n 9 then inject (Char.digit2ascii n) else let n' := NPeano.Nat.div n 10 in (@nat_show n' _) << (inject (Char.digit2ascii (n - 10 * n'))).",
            "VernacFixpoint",
            "7b16ca4308577b1f3b88087128e7ee512462fc28"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "assert (NPeano.Nat.div n 10 < n) ; eauto.",
            "VernacExtend",
            "cc7bb2755947ea4a77723520c8b1b63bc5dda146"
        ],
        [
            "eapply NPeano.Nat.div_lt.",
            "VernacExtend",
            "9aeb253da3531393245894cd2dd6231bd5385fbf"
        ],
        [
            "inversion H; apply Lt.lt_O_Sn.",
            "VernacExtend",
            "9271cac5622e5685761f9766242cc14e21574519"
        ],
        [
            "repeat constructor.",
            "VernacExtend",
            "79943d98275d564d777a905b79a73e398a3a18fd"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Global Instance nat_Show : Show nat := { show := nat_show }.",
            "VernacInstance",
            "9d2f484cac52b832cf0b75afb226605ca2febc31"
        ],
        [
            "Global Instance Show_positive : Show positive := fun x => nat_show (Pos.to_nat x).",
            "VernacInstance",
            "f42732d0835ea30afd41519ac0b4f4a1afc0d7fc"
        ],
        [
            "Global Instance Show_Z : Show Z := fun x => match x with | Z0 => \"0\"%char | Zpos p => show p | Zneg p => \"-\"%char << show p end.",
            "VernacInstance",
            "eac60e175bc7ec7a2590662e4be979f997dba290"
        ],
        [
            "Section pair_Show.",
            "VernacBeginSection",
            "5bc22a4fe0370a6e4923f601e47c0b2526fe90ce"
        ],
        [
            "Polymorphic Definition pair_Show@{a m} {A : Type@{a}} {B : Type@{a}} {AS:Show A} {BS:Show B} : Show (A*B) := fun p => let (a,b) := p in \"(\"%char << show a << \",\"%char << show b << \")\"%char.",
            "VernacDefinition",
            "f401099eb2f21d81e1f400f0b48b9ff1b1494907"
        ],
        [
            "End pair_Show.",
            "VernacEndSegment",
            "14c9b9f64c9091cdf3368b54f3b8873db2492995"
        ],
        [
            "End hiding_notation.",
            "VernacEndSegment",
            "093ba118f8ce727c6d7f1907cbc568850a385988"
        ]
    ],
    "proofs": [
        {
            "name": "nat_show_obligation_1",
            "line_nb": 70,
            "steps": [
                {
                    "command": [
                        "assert (NPeano.Nat.div n 10 < n) ; eauto.",
                        "VernacExtend",
                        "cc7bb2755947ea4a77723520c8b1b63bc5dda146"
                    ]
                },
                {
                    "command": [
                        "eapply NPeano.Nat.div_lt.",
                        "VernacExtend",
                        "9aeb253da3531393245894cd2dd6231bd5385fbf"
                    ]
                },
                {
                    "command": [
                        "inversion H; apply Lt.lt_O_Sn.",
                        "VernacExtend",
                        "9271cac5622e5685761f9766242cc14e21574519"
                    ]
                },
                {
                    "command": [
                        "repeat constructor.",
                        "VernacExtend",
                        "79943d98275d564d777a905b79a73e398a3a18fd"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        }
    ]
}