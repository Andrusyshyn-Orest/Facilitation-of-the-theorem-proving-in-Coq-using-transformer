{
    "filename": "theories/Tactics/BoolTac.v",
    "coq_project": "coq-ext-lib",
    "vernac_cmds": [
        [
            "Require Import Coq.Bool.Bool.",
            "VernacRequire",
            "38f52b48f6f716417469716568252bf78819181b"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Set Strict Implicit.",
            "VernacSetOption",
            "6b94f70716dd2a2fc34140a20b87bb0e87225ff4"
        ],
        [
            "Hint Rewrite negb_orb negb_andb negb_involutive if_negb : bool_rw.",
            "VernacExtend",
            "e855c19d2ad366644740e517e8ee516d2d093263"
        ],
        [
            "Lemma negb_true : forall a, negb a = true -> a = false.",
            "VernacStartTheoremProof",
            "94ae1ab1e6ae55d501acb3180f15474e2dc12e88"
        ],
        [
            "destruct a; auto.",
            "VernacExtend",
            "7f3d8b3039d2691d4be2748b78f9d8a9a90a4b44"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma negb_false : forall a, negb a = false -> a = true.",
            "VernacStartTheoremProof",
            "5e2fef68c8b86ce746aeede6ecaf4cb9760e2a71"
        ],
        [
            "destruct a; auto.",
            "VernacExtend",
            "7f3d8b3039d2691d4be2748b78f9d8a9a90a4b44"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac do_bool' runner := ( autorewrite with bool_rw in * ); repeat match goal with | [ H : negb _ = true |- _ ] => apply negb_true in H | [ H : negb _ = false |- _ ] => apply negb_false in H | [ H : andb _ _ = true |- _ ] => apply andb_true_iff in H; destruct H | [ H : orb _ _ = false |- _ ] => apply orb_false_iff in H; destruct H | [ H : true = andb _ _ |- _ ] => symmetry in H; apply andb_true_iff in H; destruct H | [ H : false = orb _ _ |- _ ] => symmetry in H; apply orb_false_iff in H; destruct H | [ H : andb _ _ = false |- _ ] => apply andb_false_iff in H; runner H | [ H : orb _ _ = true |- _ ] => apply orb_true_iff in H; runner H | [ H : false = andb _ _ |- _ ] => symmetry in H; apply andb_false_iff in H; runner H | [ H : true = orb _ _ |- _ ] => symmetry in H; apply orb_true_iff in H; runner H end.",
            "VernacExtend",
            "24e862feb99c8c674501a7369be50a53aed36803"
        ],
        [
            "Ltac do_bool_case := let t H := (destruct H) in do_bool' t.",
            "VernacExtend",
            "6c6d88140f42559ef84e3a57b77ad4b444c6a7c7"
        ],
        [
            "Ltac do_bool := let t _ := idtac in do_bool' t.",
            "VernacExtend",
            "5e934824ce970475e0b31a1b2122ce08a6398023"
        ]
    ],
    "proofs": [
        {
            "name": "negb_true",
            "line_nb": 4,
            "steps": [
                {
                    "command": [
                        "destruct a; auto.",
                        "VernacExtend",
                        "7f3d8b3039d2691d4be2748b78f9d8a9a90a4b44"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "negb_false",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "destruct a; auto.",
                        "VernacExtend",
                        "7f3d8b3039d2691d4be2748b78f9d8a9a90a4b44"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}