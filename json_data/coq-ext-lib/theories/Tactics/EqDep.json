{
    "filename": "theories/Tactics/EqDep.v",
    "coq_project": "coq-ext-lib",
    "vernac_cmds": [
        [
            "Require Import Coq.Classes.EquivDec.",
            "VernacRequire",
            "bc8fdd4058899aeb2ad18521d0a2496a87cd9eb2"
        ],
        [
            "Require Import ExtLib.Structures.EqDep.",
            "VernacRequire",
            "9ee60b502271a6f43b3633c0afe2bfce74dbdaed"
        ],
        [
            "Require Coq.Logic.Eqdep_dec.",
            "VernacRequire",
            "ab4c27eac2d80217647853c8554c230678657d09"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Set Strict Implicit.",
            "VernacSetOption",
            "6b94f70716dd2a2fc34140a20b87bb0e87225ff4"
        ],
        [
            "Section Classes.",
            "VernacBeginSection",
            "fa5d7ec7086ed57889e36dc5f3271b64ba174956"
        ],
        [
            "Context {A : Type}.",
            "VernacContext",
            "c9c3c92f9391cb196430f2c558473771d9c86d28"
        ],
        [
            "Context {dec : EqDec A (@eq A)}.",
            "VernacContext",
            "1eb138892410775ae9c2639d3b24de48153dfc56"
        ],
        [
            "Theorem UIP_refl : forall {x : A} (p1 : x = x), p1 = refl_equal _.",
            "VernacStartTheoremProof",
            "af41792e711c18680d16c648a6a4db533c09fbfe"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "eapply Eqdep_dec.UIP_dec.",
            "VernacExtend",
            "2a7de3481d847c0713208b6ac1a7b1c568127b47"
        ],
        [
            "apply equiv_dec.",
            "VernacExtend",
            "259b9210506bf632be9117513d80de564e3dbf8d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem UIP_equal : forall {x y : A} (p1 p2 : x = y), p1 = p2.",
            "VernacStartTheoremProof",
            "e064d36e7be0caa064953d7798718db1348edd95"
        ],
        [
            "eapply Eqdep_dec.UIP_dec.",
            "VernacExtend",
            "2a7de3481d847c0713208b6ac1a7b1c568127b47"
        ],
        [
            "apply equiv_dec.",
            "VernacExtend",
            "259b9210506bf632be9117513d80de564e3dbf8d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma inj_pair2 : forall (P:A -> Type) (p:A) (x y:P p), existT P p x = existT P p y -> x = y.",
            "VernacStartTheoremProof",
            "95c92963890735a1b681c37171328bb44a4e81ca"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "eapply Eqdep_dec.inj_pair2_eq_dec; auto.",
            "VernacExtend",
            "7e29bbab41f6731fbb618c82138ea3b55b944147"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Classes.",
            "VernacEndSegment",
            "2b49da0ca342719129d14cacdbaf699d38121170"
        ],
        [
            "Ltac notVar X := match X with | _ _ => idtac | _ _ _ => idtac | _ _ _ _ => idtac | _ _ _ _ _ => idtac | _ _ _ _ _ _ => idtac | _ _ _ _ _ _ _ => idtac | _ _ _ _ _ _ _ _ => idtac | _ _ _ _ _ _ _ _ _ => idtac | _ _ _ _ _ _ _ _ _ _ => idtac | _ _ _ _ _ _ _ _ _ _ _ => idtac | _ _ _ _ _ _ _ _ _ _ _ _ => idtac | _ _ _ _ _ _ _ _ _ _ _ _ _ => idtac | _ _ _ _ _ _ _ _ _ _ _ _ _ _ => idtac end.",
            "VernacExtend",
            "4f2a254f450b3d4bfc0ab891babcb9dd22647130"
        ],
        [
            "Ltac gen_refl := repeat match goal with | H : context [ @eq_refl ?X ?Y ] |- _ => generalize dependent (@eq_refl X Y) | |- context [ @eq_refl ?X ?Y ] => generalize dependent (@eq_refl X Y) end.",
            "VernacExtend",
            "3dc816daef349cea731b41268b75b115b878d532"
        ],
        [
            "Ltac uip_all := repeat match goal with | [ H : _ = _ |- _ ] => rewrite H | [ |- context [ match ?X in _ = t return _ with | refl_equal => _ end ] ] => notVar X; generalize X | [ |- context [ eq_rect_r _ _ ?X ] ] => notVar X; generalize X end; intros; repeat match goal with | [ H : ?X = ?X |- _ ] => rewrite (UIP_refl H) in * | [ _ : context [ ?H ] |- _ ] => rewrite (UIP_refl H) in * | [ |- context [ ?H ] ] => rewrite (UIP_refl H) in * end.",
            "VernacExtend",
            "0ae880a68dfaa745c80079eb62f4bd68bf6715df"
        ],
        [
            "Ltac uip_all' := repeat match goal with | [ H : _ = _ |- _ ] => rewrite H | [ |- context [ match ?X in _ = t return _ with | refl_equal => _ end ] ] => notVar X; generalize X | [ |- context [ eq_rect_r _ _ ?X ] ] => notVar X; generalize X end; intros; repeat match goal with | [ H : ?X = ?X |- _ ] => generalize dependent H; let pf := fresh in intro pf; rewrite (UIP_refl pf) in * ; try clear pf end.",
            "VernacExtend",
            "95f8378d9e35901755267b0fb2f5774f73c40b9f"
        ],
        [
            "Export EquivDec.",
            "VernacImport",
            "6d73dc9c6c61f283416c02dd9f9c532cb2ab6a70"
        ]
    ],
    "proofs": [
        {
            "name": "UIP_refl",
            "line_nb": 8,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "eapply Eqdep_dec.UIP_dec.",
                        "VernacExtend",
                        "2a7de3481d847c0713208b6ac1a7b1c568127b47"
                    ]
                },
                {
                    "command": [
                        "apply equiv_dec.",
                        "VernacExtend",
                        "259b9210506bf632be9117513d80de564e3dbf8d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "UIP_equal",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "eapply Eqdep_dec.UIP_dec.",
                        "VernacExtend",
                        "2a7de3481d847c0713208b6ac1a7b1c568127b47"
                    ]
                },
                {
                    "command": [
                        "apply equiv_dec.",
                        "VernacExtend",
                        "259b9210506bf632be9117513d80de564e3dbf8d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inj_pair2",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "eapply Eqdep_dec.inj_pair2_eq_dec; auto.",
                        "VernacExtend",
                        "7e29bbab41f6731fbb618c82138ea3b55b944147"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}