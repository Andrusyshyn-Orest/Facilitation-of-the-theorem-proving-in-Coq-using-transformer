{
    "filename": "theories/Data/Map/FMapPositive.v",
    "coq_project": "coq-ext-lib",
    "vernac_cmds": [
        [
            "Require Import ExtLib.Structures.Maps.",
            "VernacRequire",
            "4708be1f910be286c82d57d079b77fbe8ffaaf6d"
        ],
        [
            "Require Import ExtLib.Structures.Functor.",
            "VernacRequire",
            "3da96fef886011735d53bdbc91b94d8e7f273e3d"
        ],
        [
            "Require Import ExtLib.Data.Option.",
            "VernacRequire",
            "2bd48e639cb7daa3f78434bfb911539f5ce569e2"
        ],
        [
            "Require Import ExtLib.Data.Positive.",
            "VernacRequire",
            "3ede59da2ca6539a221ae5516cea987edf0dcd76"
        ],
        [
            "Require Import ExtLib.Tactics.Cases.",
            "VernacRequire",
            "20344be2ac52828588d6abfb4129ad733b237333"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Set Strict Implicit.",
            "VernacSetOption",
            "6b94f70716dd2a2fc34140a20b87bb0e87225ff4"
        ],
        [
            "Section pmap.",
            "VernacBeginSection",
            "97a4499d2cc6fb45440fa335cb34a79b25840653"
        ],
        [
            "Variable T : Type.",
            "VernacAssumption",
            "a15b17e37c4241158d544882375356c273dc93f2"
        ],
        [
            "Inductive pmap : Type := | Empty | Branch : option T -> pmap -> pmap -> pmap.",
            "VernacInductive",
            "c0192f2776c911543b255a695c090acff564ec93"
        ],
        [
            "Definition pmap_here (m : pmap) : option T := match m with | Empty => None | Branch d _ _ => d end.",
            "VernacDefinition",
            "8f475d9b1a373a0c2db9d4f3cabc9876934e48ab"
        ],
        [
            "Definition pmap_left (m : pmap) : pmap := match m with | Empty => Empty | Branch _ l _ => l end.",
            "VernacDefinition",
            "fa377dff0c75a4f91fa77b283e46c22a3085967d"
        ],
        [
            "Definition pmap_right (m : pmap) : pmap := match m with | Empty => Empty | Branch _ _ r => r end.",
            "VernacDefinition",
            "274036599b5e732af1758e44ac220529ea4e4b92"
        ],
        [
            "Fixpoint pmap_lookup (p : positive) (m : pmap) : option T := match m with | Empty => None | Branch d l r => match p with | xH => d | xO p => pmap_lookup p l | xI p => pmap_lookup p r end end.",
            "VernacFixpoint",
            "f7d32bd1fb32b6fb88e5d7b6141cde88c7df2922"
        ],
        [
            "Fixpoint pmap_insert (p : positive) (v : T) (m : pmap) : pmap := match p with | xH => Branch (Some v) (pmap_left m) (pmap_right m) | xO p => Branch (pmap_here m) (pmap_insert p v (pmap_left m)) (pmap_right m) | xI p => Branch (pmap_here m) (pmap_left m) (pmap_insert p v (pmap_right m)) end.",
            "VernacFixpoint",
            "e422baa05e29ac16d7c7fe4670cbce379bce2734"
        ],
        [
            "Definition branch (o : option T) (l r : pmap) : pmap := match o , l , r with | None , Empty , Empty => Empty | _ , _ , _ => Branch o l r end.",
            "VernacDefinition",
            "19e8786e4637c0aa13e68c1d865ad80268f1b1cc"
        ],
        [
            "Fixpoint pmap_remove (p : positive) (m : pmap) : pmap := match m with | Empty => Empty | Branch d l r => match p with | xH => branch None l r | xO p => branch d (pmap_remove p l) r | xI p => branch d l (pmap_remove p r) end end.",
            "VernacFixpoint",
            "64725f06f73a4e58eb2fcb083fb2fd448d483567"
        ],
        [
            "Definition pmap_empty : pmap := Empty.",
            "VernacDefinition",
            "823b3b1ab48743625f31f50458a01f4616d70854"
        ],
        [
            "Fixpoint pmap_union (f m : pmap) : pmap := match f with | Empty => m | Branch d l r => Branch (match d with | Some x => Some x | None => pmap_here m end) (pmap_union l (pmap_left m)) (pmap_union r (pmap_right m)) end.",
            "VernacFixpoint",
            "0e6f11351c4588baaa8bbe7037859ce72f2b4e0d"
        ],
        [
            "Global Instance Map_pmap : Map positive T pmap := { empty := pmap_empty ; add := pmap_insert ; remove := pmap_remove ; lookup := pmap_lookup ; union := pmap_union }.",
            "VernacInstance",
            "30e718a782c88b9a7bc96efee75abd6437472e5c"
        ],
        [
            "Lemma tilde_1_inj_neg : forall k k', (k~1)%positive <> (k'~1)%positive -> k <> k'.",
            "VernacStartTheoremProof",
            "93c6806baa60e55c41bd2fbb3540a814b9607d21"
        ],
        [
            "induction k; destruct k'; intuition; try match goal with | H : _ = _ |- _ => inversion H; clear H; subst end; intuition eauto.",
            "VernacExtend",
            "2fd785ffd55bdb5b3f09352f4ff6dc6a0b5775d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tilde_0_inj_neg : forall k k', (k~0)%positive <> (k'~0)%positive -> k <> k'.",
            "VernacStartTheoremProof",
            "ac07e1c6a96de018c47226ac8952d3da6e0ccb67"
        ],
        [
            "induction k; destruct k'; intuition; try match goal with | H : _ = _ |- _ => inversion H; clear H; subst end; intuition eauto.",
            "VernacExtend",
            "2fd785ffd55bdb5b3f09352f4ff6dc6a0b5775d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pmap_lookup_insert_empty : forall k k' v, k <> k' -> pmap_lookup k' (pmap_insert k v Empty) = None.",
            "VernacStartTheoremProof",
            "6be3b7cce9c5e3392116e984921d486802270071"
        ],
        [
            "induction k; destruct k'; simpl; intros; eauto using tilde_0_inj_neg, tilde_1_inj_neg.",
            "VernacExtend",
            "bbf932ad164cf33a91b4a190225cba109cef417d"
        ],
        [
            "destruct k'; simpl; auto.",
            "VernacExtend",
            "aa7cedb51d0a25775a3e49dfae3a019ef80a47b0"
        ],
        [
            "destruct k'; simpl; auto.",
            "VernacExtend",
            "aa7cedb51d0a25775a3e49dfae3a019ef80a47b0"
        ],
        [
            "destruct k'; simpl; auto.",
            "VernacExtend",
            "aa7cedb51d0a25775a3e49dfae3a019ef80a47b0"
        ],
        [
            "destruct k'; simpl; auto.",
            "VernacExtend",
            "aa7cedb51d0a25775a3e49dfae3a019ef80a47b0"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lookup_empty : forall k, pmap_lookup k Empty = None.",
            "VernacStartTheoremProof",
            "9e47a3be748c930c83a0061fdedbced3346aaed7"
        ],
        [
            "destruct k; reflexivity.",
            "VernacExtend",
            "b43c418ea8135b4c311e3d2a087ec885dc05572c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Rewrite lookup_empty pmap_lookup_insert_empty using (eauto using tilde_1_inj_neg, tilde_1_inj_neg) : pmap_rw.",
            "VernacExtend",
            "7a9f1e608781927d7225c72e392f27fdbbc5bf3d"
        ],
        [
            "Lemma pmap_lookup_insert_eq : forall (m : pmap) (k : positive) (v : T), pmap_lookup k (pmap_insert k v m) = Some v.",
            "VernacStartTheoremProof",
            "4720162ec4daaa20bd8671e7070688304229fada"
        ],
        [
            "intros m k; revert m.",
            "VernacExtend",
            "b0f60d6d8a96564682110f127c934e7a84c0e3b1"
        ],
        [
            "induction k; simpl; intros; forward; Cases.rewrite_all_goal; eauto.",
            "VernacExtend",
            "2cb16da28480d658589784c83a7be989dc05458a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pmap_lookup_insert_Some_neq : forall (m : pmap) (k : positive) (v : T) (k' : positive), k <> k' -> forall v' : T, pmap_lookup k' m = Some v' <-> pmap_lookup k' (pmap_insert k v m) = Some v'.",
            "VernacStartTheoremProof",
            "5f91285025cc2de839176873cf1a396e37ff0869"
        ],
        [
            "intros m k; revert m.",
            "VernacExtend",
            "b0f60d6d8a96564682110f127c934e7a84c0e3b1"
        ],
        [
            "induction k; simpl; intros; forward; Cases.rewrite_all_goal; autorewrite with pmap_rw; eauto.",
            "VernacExtend",
            "1db6f0f1dfcc6f15577d9d98134866ee491a71a3"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "destruct k'; simpl; destruct m; simpl; autorewrite with pmap_rw; Cases.rewrite_all_goal; try reflexivity.",
            "VernacExtend",
            "2caa1e5bb08fd8beacc78a641bfc8304f7e566ea"
        ],
        [
            "erewrite IHk; eauto using tilde_1_inj_neg.",
            "VernacExtend",
            "373e47b3886b3436485812b0f5ea686bac5fa943"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "destruct k'; simpl; destruct m; simpl; autorewrite with pmap_rw; Cases.rewrite_all_goal; try reflexivity; try congruence.",
            "VernacExtend",
            "9c0334b4bb355e71f555cb4515a4550e6f889bfa"
        ],
        [
            "erewrite IHk.",
            "VernacExtend",
            "24c35e8288c8605bb7bf270505d14d58e054ea17"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "eauto using tilde_0_inj_neg.",
            "VernacExtend",
            "0ffddbba77486c282cc106ad5e9c849d38b36f07"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "destruct k'; simpl; destruct m; simpl; autorewrite with pmap_rw; Cases.rewrite_all_goal; try reflexivity; try congruence.",
            "VernacExtend",
            "9c0334b4bb355e71f555cb4515a4550e6f889bfa"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pmap_lookup_insert_None_neq : forall (m : pmap) (k : positive) (v : T) (k' : positive), k <> k' -> pmap_lookup k' m = None <-> pmap_lookup k' (pmap_insert k v m) = None.",
            "VernacStartTheoremProof",
            "2140338cdbb52dc244a13acd2e424af8ae1c8d61"
        ],
        [
            "intros m k; revert m.",
            "VernacExtend",
            "b0f60d6d8a96564682110f127c934e7a84c0e3b1"
        ],
        [
            "induction k; simpl; intros; forward; Cases.rewrite_all_goal; autorewrite with pmap_rw; eauto.",
            "VernacExtend",
            "1db6f0f1dfcc6f15577d9d98134866ee491a71a3"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "destruct k'; simpl; destruct m; simpl; autorewrite with pmap_rw; Cases.rewrite_all_goal; try reflexivity.",
            "VernacExtend",
            "2caa1e5bb08fd8beacc78a641bfc8304f7e566ea"
        ],
        [
            "erewrite IHk; eauto using tilde_1_inj_neg.",
            "VernacExtend",
            "373e47b3886b3436485812b0f5ea686bac5fa943"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "destruct k'; simpl; destruct m; simpl; autorewrite with pmap_rw; Cases.rewrite_all_goal; try reflexivity; try congruence.",
            "VernacExtend",
            "9c0334b4bb355e71f555cb4515a4550e6f889bfa"
        ],
        [
            "erewrite IHk.",
            "VernacExtend",
            "24c35e8288c8605bb7bf270505d14d58e054ea17"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "eauto using tilde_0_inj_neg.",
            "VernacExtend",
            "0ffddbba77486c282cc106ad5e9c849d38b36f07"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "destruct k'; simpl; destruct m; simpl; autorewrite with pmap_rw; Cases.rewrite_all_goal; try reflexivity; try congruence.",
            "VernacExtend",
            "9c0334b4bb355e71f555cb4515a4550e6f889bfa"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pmap_lookup_insert_neq : forall (m : pmap) (k : positive) (v : T) (k' : positive), k <> k' -> forall v' : T, pmap_lookup k' (pmap_insert k v m) = pmap_lookup k' m.",
            "VernacStartTheoremProof",
            "abf108061dfe24d4c29962454858fa903d209b77"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "remember (pmap_lookup k' m).",
            "VernacExtend",
            "f45dd9a319ac9879e20cfb895edbd53cb4e18363"
        ],
        [
            "destruct o; [ apply pmap_lookup_insert_Some_neq; intuition | apply pmap_lookup_insert_None_neq; intuition].",
            "VernacExtend",
            "05167948f7ed172b1326dc69eec326a0205a969d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Global Instance MapOk_pmap : MapOk (@eq _) Map_pmap.",
            "VernacInstance",
            "d599b18874d2ee19a391a1862fefc48c84feeac1"
        ],
        [
            "refine {| mapsto := fun k v m => pmap_lookup k m = Some v |}.",
            "VernacExtend",
            "b1c3dde861fd3ea0500e063adcabf5bfd15a538d"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "abstract (induction k; simpl; congruence).",
            "VernacExtend",
            "3d2a5eba431cd9dcfce5d39eb95c599a2e07229e"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "abstract (induction k; simpl; intros; forward).",
            "VernacExtend",
            "1c81878f71bf4550429b82e217d63fb49f5567a6"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "eauto using pmap_lookup_insert_eq.",
            "VernacExtend",
            "4ff07f4c43262f18e7f7b8b381e30e28aef2cd23"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "eauto using pmap_lookup_insert_Some_neq.",
            "VernacExtend",
            "31e7c51c002f008dfc3a5dc87e4387d5d6f0786d"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition from_list : list T -> pmap := (fix from_list acc i ls {struct ls} := match ls with | nil => acc | List.cons l ls => from_list (pmap_insert i l acc) (Pos.succ i) ls end) Empty 1%positive.",
            "VernacDefinition",
            "ea1084dcf4b47b60563b247ff664573e51258fac"
        ],
        [
            "End pmap.",
            "VernacEndSegment",
            "e04533236b5d07f83f189d05e43a9bc0730198a9"
        ],
        [
            "Arguments Empty {_}.",
            "VernacArguments",
            "e10c9ea5d26c4f90446c69e72da14982748b724c"
        ],
        [
            "Arguments Branch {_} _ _ _.",
            "VernacArguments",
            "775ab71e50ce7a5e573bc7a66eda9862585a93cf"
        ],
        [
            "Section fmap.",
            "VernacBeginSection",
            "4a18f444ea6695c3a7a3857be873189260bab4f8"
        ],
        [
            "Variables T U : Type.",
            "VernacAssumption",
            "a0dd0f619c287f89447aad2bc4820898ca5c630d"
        ],
        [
            "Variable f : T -> U.",
            "VernacAssumption",
            "6ac047e912585d1878878accd0307f42e7f573a4"
        ],
        [
            "Fixpoint fmap_pmap (m : pmap T) : pmap U := match m with | Empty => Empty | Branch h l r => Branch (fmap f h) (fmap_pmap l) (fmap_pmap r) end.",
            "VernacFixpoint",
            "89e97c002216100ddee40e9ce7abcf39a0f650f2"
        ],
        [
            "Theorem fmap_lookup : forall a b m, mapsto a b m -> mapsto a (f b) (fmap_pmap m).",
            "VernacStartTheoremProof",
            "3fb8f0a8e450b14f5cbfa452be7fa7d5dbf92c2f"
        ],
        [
            "induction a; destruct m; simpl; intros; try congruence.",
            "VernacExtend",
            "80d4412f91bbd43115556e8d13b4e4238babac51"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "eapply IHa.",
            "VernacExtend",
            "ff07a44ba6b03024fc599c1524cd9014dcc0312e"
        ],
        [
            "eapply H.",
            "VernacExtend",
            "cf02e2445d256ebbbf0bbedfdc7f26983e04ec5a"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "eapply IHa; eapply H.",
            "VernacExtend",
            "e959ed10b95e9b274c6330d77c1d2211f342102b"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem fmap_lookup_bk : forall a b m, mapsto a b (fmap_pmap m) -> exists b', mapsto a b' m /\\ f b' = b.",
            "VernacStartTheoremProof",
            "b7c396ea1374c356a5edfae167e2f376c460d852"
        ],
        [
            "induction a; destruct m; simpl; intros; try congruence.",
            "VernacExtend",
            "80d4412f91bbd43115556e8d13b4e4238babac51"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "eapply IHa.",
            "VernacExtend",
            "ff07a44ba6b03024fc599c1524cd9014dcc0312e"
        ],
        [
            "eapply H.",
            "VernacExtend",
            "cf02e2445d256ebbbf0bbedfdc7f26983e04ec5a"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "eapply IHa.",
            "VernacExtend",
            "ff07a44ba6b03024fc599c1524cd9014dcc0312e"
        ],
        [
            "eapply H.",
            "VernacExtend",
            "cf02e2445d256ebbbf0bbedfdc7f26983e04ec5a"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "destruct o; try congruence.",
            "VernacExtend",
            "79b2c4cf5447c5c4e64b01bb87f7a19c39dd0b88"
        ],
        [
            "eexists; split; eauto.",
            "VernacExtend",
            "79f3b564d9de421e26f4d4011c66097e301daa61"
        ],
        [
            "inversion H; auto.",
            "VernacExtend",
            "ca70ce9532e796fd752cb12d4d270e557a16bc8a"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End fmap.",
            "VernacEndSegment",
            "f7608380545d212ed5daa76b034210da9202a46f"
        ],
        [
            "Require Import ExtLib.Core.Type.",
            "VernacRequire",
            "f386eaa7bb737409baadc3f90d39f8f6cd79d7fe"
        ],
        [
            "Section type.",
            "VernacBeginSection",
            "2c34aef55fed16ddde4b4d4655f4ae858f4c50a9"
        ],
        [
            "Variable T : Type.",
            "VernacAssumption",
            "a15b17e37c4241158d544882375356c273dc93f2"
        ],
        [
            "Variable tT : type T.",
            "VernacAssumption",
            "2b4af9d5a52083cf01943692fbb6d5ce475117c9"
        ],
        [
            "Instance type_pmap : type (pmap T) := type_from_equal (fun l r => (forall k v, mapsto k v l -> exists v', mapsto k v' r /\\ equal v v') /\\ (forall k v, mapsto k v r -> exists v', mapsto k v' l /\\ equal v v')).",
            "VernacInstance",
            "54e534aa5e9e071b904818285ab88a3992df6cb5"
        ],
        [
            "End type.",
            "VernacEndSegment",
            "8d0f4c701b8711538af57173787aa08f3663856b"
        ],
        [
            "Global Instance Functor_pmap : Functor pmap := { fmap := fmap_pmap }.",
            "VernacInstance",
            "c06e563b7f681564f34cd41184bc4d539c691c03"
        ]
    ],
    "proofs": [
        {
            "name": "tilde_1_inj_neg",
            "line_nb": 20,
            "steps": [
                {
                    "command": [
                        "induction k; destruct k'; intuition; try match goal with | H : _ = _ |- _ => inversion H; clear H; subst end; intuition eauto.",
                        "VernacExtend",
                        "2fd785ffd55bdb5b3f09352f4ff6dc6a0b5775d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tilde_0_inj_neg",
            "line_nb": 23,
            "steps": [
                {
                    "command": [
                        "induction k; destruct k'; intuition; try match goal with | H : _ = _ |- _ => inversion H; clear H; subst end; intuition eauto.",
                        "VernacExtend",
                        "2fd785ffd55bdb5b3f09352f4ff6dc6a0b5775d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pmap_lookup_insert_empty",
            "line_nb": 26,
            "steps": [
                {
                    "command": [
                        "induction k; destruct k'; simpl; intros; eauto using tilde_0_inj_neg, tilde_1_inj_neg.",
                        "VernacExtend",
                        "bbf932ad164cf33a91b4a190225cba109cef417d"
                    ]
                },
                {
                    "command": [
                        "destruct k'; simpl; auto.",
                        "VernacExtend",
                        "aa7cedb51d0a25775a3e49dfae3a019ef80a47b0"
                    ]
                },
                {
                    "command": [
                        "destruct k'; simpl; auto.",
                        "VernacExtend",
                        "aa7cedb51d0a25775a3e49dfae3a019ef80a47b0"
                    ]
                },
                {
                    "command": [
                        "destruct k'; simpl; auto.",
                        "VernacExtend",
                        "aa7cedb51d0a25775a3e49dfae3a019ef80a47b0"
                    ]
                },
                {
                    "command": [
                        "destruct k'; simpl; auto.",
                        "VernacExtend",
                        "aa7cedb51d0a25775a3e49dfae3a019ef80a47b0"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lookup_empty",
            "line_nb": 34,
            "steps": [
                {
                    "command": [
                        "destruct k; reflexivity.",
                        "VernacExtend",
                        "b43c418ea8135b4c311e3d2a087ec885dc05572c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pmap_lookup_insert_eq",
            "line_nb": 38,
            "steps": [
                {
                    "command": [
                        "intros m k; revert m.",
                        "VernacExtend",
                        "b0f60d6d8a96564682110f127c934e7a84c0e3b1"
                    ]
                },
                {
                    "command": [
                        "induction k; simpl; intros; forward; Cases.rewrite_all_goal; eauto.",
                        "VernacExtend",
                        "2cb16da28480d658589784c83a7be989dc05458a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pmap_lookup_insert_neq",
            "line_nb": 78,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "remember (pmap_lookup k' m).",
                        "VernacExtend",
                        "f45dd9a319ac9879e20cfb895edbd53cb4e18363"
                    ]
                },
                {
                    "command": [
                        "destruct o; [ apply pmap_lookup_insert_Some_neq; intuition | apply pmap_lookup_insert_None_neq; intuition].",
                        "VernacExtend",
                        "05167948f7ed172b1326dc69eec326a0205a969d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}