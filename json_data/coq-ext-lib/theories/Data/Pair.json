{
    "filename": "theories/Data/Pair.v",
    "coq_project": "coq-ext-lib",
    "vernac_cmds": [
        [
            "Require Import Coq.Relations.Relation_Definitions.",
            "VernacRequire",
            "e90e5840c35495258b335912cbf63f3e29ec520e"
        ],
        [
            "Require Import Coq.Classes.RelationClasses.",
            "VernacRequire",
            "e1e9fb5bb83f789dcff9c0bfa33e2d359b0caa70"
        ],
        [
            "Require Import ExtLib.Core.RelDec.",
            "VernacRequire",
            "0e3bcdc14736b545ca698ea9a09e10feafbc33d4"
        ],
        [
            "Require Import ExtLib.Tactics.Consider.",
            "VernacRequire",
            "d7f1290b398c3a51484b77ae4b362f89ed2a3ede"
        ],
        [
            "Require Import ExtLib.Tactics.Injection.",
            "VernacRequire",
            "775eac3c69d154f6fee4c7e10d0af17b678b5153"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Set Strict Implicit.",
            "VernacSetOption",
            "6b94f70716dd2a2fc34140a20b87bb0e87225ff4"
        ],
        [
            "Section Eqpair.",
            "VernacBeginSection",
            "7483cdef062acc461954dd7061290f20cbbccd45"
        ],
        [
            "Context {T U} (rT : relation T) (rU : relation U).",
            "VernacContext",
            "fe0f89f872977e0320918e52dc5480b32b644dfc"
        ],
        [
            "Inductive Eqpair : relation (T * U) := | Eqpair_both : forall a b c d, rT a b -> rU c d -> Eqpair (a,c) (b,d).",
            "VernacInductive",
            "fc71fb70b5940ab476060a9e4c1b5fec54f5c2e2"
        ],
        [
            "Global Instance Reflexive_Eqpair {RrT : Reflexive rT} {RrU : Reflexive rU} : Reflexive Eqpair.",
            "VernacInstance",
            "5dd8d61664bf26d249c8b996436940a79c1392a8"
        ],
        [
            "red.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "destruct x.",
            "VernacExtend",
            "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
        ],
        [
            "constructor; reflexivity.",
            "VernacExtend",
            "c88c5380016ed9a8a9962e78d115a81e20c0d220"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Global Instance Symmetric_Eqpair {RrT : Symmetric rT} {RrU : Symmetric rU} : Symmetric Eqpair.",
            "VernacInstance",
            "111c638dfd4131168223f88e340fc4d681b0b563"
        ],
        [
            "red.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "inversion 1; constructor; symmetry; assumption.",
            "VernacExtend",
            "40086e8baf6aaa17b6b8dcbb8f25dcc641c26e1d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Global Instance Transitive_Eqpair {RrT : Transitive rT} {RrU : Transitive rU} : Transitive Eqpair.",
            "VernacInstance",
            "a93410f8530f60714625bd09425e413c446e53a6"
        ],
        [
            "red.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "inversion 1; inversion 1; constructor; etransitivity; eauto.",
            "VernacExtend",
            "ec3dfa3ab69ba15cdf3f652bfb45f23dc982effc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Global Instance Injective_Eqpair a b c d : Injective (Eqpair (a,b) (c,d)).",
            "VernacInstance",
            "589cc53d40cdb2e6da52adc5fb638ec5bdb5da93"
        ],
        [
            "refine {| result := rT a c /\\ rU b d |}.",
            "VernacExtend",
            "d5ed7a3c65eb164920a6df812dce351a2d20d24b"
        ],
        [
            "abstract (inversion 1; auto).",
            "VernacExtend",
            "4eb9ff0e75db4b10e7d0a803e2aa1036c0fbcfa3"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "End Eqpair.",
            "VernacEndSegment",
            "c9d130b67a77edae85d4c66dca565e73023897c9"
        ],
        [
            "Section PairWF.",
            "VernacBeginSection",
            "db033dfda2858e727d4a68298f5306ce30269284"
        ],
        [
            "Variables T U : Type.",
            "VernacAssumption",
            "a0dd0f619c287f89447aad2bc4820898ca5c630d"
        ],
        [
            "Variable RT : T -> T -> Prop.",
            "VernacAssumption",
            "aa765f947b390420d041c098efdcfde208431321"
        ],
        [
            "Variable RU : U -> U -> Prop.",
            "VernacAssumption",
            "7195c036d46eab8315e308729d0a7da7292f1d48"
        ],
        [
            "Inductive R_pair : T * U -> T * U -> Prop := | L : forall l l' r r', RT l l' -> R_pair (l,r) (l',r') | R : forall l r r', RU r r' -> R_pair (l,r) (l,r').",
            "VernacInductive",
            "8a242757fc091b8f47a032ed5453441a8b1a9059"
        ],
        [
            "Hypothesis wf_RT : well_founded RT.",
            "VernacAssumption",
            "11b572a63d49a012d9ba6457c1a2160e81c2bc02"
        ],
        [
            "Hypothesis wf_RU : well_founded RU.",
            "VernacAssumption",
            "9fab21688b273028917bcbf3386791b466525041"
        ],
        [
            "Theorem wf_R_pair : well_founded R_pair.",
            "VernacStartTheoremProof",
            "915b670db064ca033e49c27a6e5a21a6ec7a1b49"
        ],
        [
            "red.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "intro x.",
            "VernacExtend",
            "f7163633eedf12f483fa0d8c0c119dd59431ca1e"
        ],
        [
            "destruct x.",
            "VernacExtend",
            "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
        ],
        [
            "generalize dependent u.",
            "VernacExtend",
            "25a224ea00889c955ccf5d8574c6aed5b2703521"
        ],
        [
            "apply (well_founded_ind wf_RT (fun t => forall u : U, Acc R_pair (t, u))) .",
            "VernacExtend",
            "d42a8765ab9c7575fdfc23b7a4015b6f38f2f414"
        ],
        [
            "do 2 intro.",
            "VernacExtend",
            "94cab4807bd907dc3f92e3b75fad36963d81fc73"
        ],
        [
            "apply (well_founded_ind wf_RU (fun u => Acc R_pair (x,u))).",
            "VernacExtend",
            "9172af077843a7b8d623ce9d7d4fd2cf98e73cc1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "destruct y.",
            "VernacExtend",
            "fbeb4c3b73b2f0e6bfc89563d7f3b824ea0ea309"
        ],
        [
            "remember (t0,u).",
            "VernacExtend",
            "f4b6e59228dfb9e2c0b92ba95e41a14416db845b"
        ],
        [
            "remember (x,x0).",
            "VernacExtend",
            "63c081c5e578a74aa186928d5e2dd9b976323664"
        ],
        [
            "inversion 1; subst; inversion H4; inversion H3; clear H4 H3; subst; eauto.",
            "VernacExtend",
            "d78811cfe91c2dcb8c7752decf58fa42dd8afd58"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "End PairWF.",
            "VernacEndSegment",
            "79c0de1ec4a07c0ea512bdc311aa6735eec4fa17"
        ],
        [
            "Section PairParam.",
            "VernacBeginSection",
            "4d6907cd8355a488e43dcc2da2c43c0f88f26c36"
        ],
        [
            "Variable T : Type.",
            "VernacAssumption",
            "a15b17e37c4241158d544882375356c273dc93f2"
        ],
        [
            "Variable eqT : T -> T -> Prop.",
            "VernacAssumption",
            "803af1619d7fb8bd507b117b1e880192140b6cda"
        ],
        [
            "Variable U : Type.",
            "VernacAssumption",
            "eb05258af3da16894daf420a97be779934a15d7e"
        ],
        [
            "Variable eqU : U -> U -> Prop.",
            "VernacAssumption",
            "cc0d3f5afcbf9c1de80e6e250fd29964e3f0f70e"
        ],
        [
            "Variable EDT : RelDec eqT.",
            "VernacAssumption",
            "27c9d646798a682262f49e7386808e3ba1280672"
        ],
        [
            "Variable EDU : RelDec eqU.",
            "VernacAssumption",
            "0045fa9d8dcdb1b07ddc494f4c969208403bcd27"
        ],
        [
            "Global Instance RelDec_equ_pair : RelDec (fun x y => eqT (fst x) (fst y) /\\ eqU (snd x) (snd y)) := { rel_dec := fun x y => if rel_dec (fst x) (fst y) then rel_dec (snd x) (snd y) else false }.",
            "VernacInstance",
            "719cf54e20434219c7a905ae69076af50d02733d"
        ],
        [
            "Variable EDCT : RelDec_Correct EDT.",
            "VernacAssumption",
            "aff316bf180903c2962457217cbc7de70ff4501b"
        ],
        [
            "Variable EDCU : RelDec_Correct EDU.",
            "VernacAssumption",
            "9d6c18f550674e42155d495a1e34ce2c3e6b8ae3"
        ],
        [
            "Global Instance RelDec_Correct_equ_pair : RelDec_Correct RelDec_equ_pair.",
            "VernacInstance",
            "50d885794af78dcd6f1610d66bd7d74632922249"
        ],
        [
            "constructor; destruct x; destruct y; split; simpl in *; intros; repeat match goal with | [ H : context [ rel_dec ?X ?Y ] |- _ ] => consider (rel_dec X Y); intros; subst | [ |- context [ rel_dec ?X ?Y ] ] => consider (rel_dec X Y); intros; subst end; intuition.",
            "VernacExtend",
            "9fa6ae9410dbce3bf075bfc1338c1a0addd2180b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End PairParam.",
            "VernacEndSegment",
            "91c3b15ab2c67af1d8660011668bdf2f37995857"
        ],
        [
            "Section PairEq.",
            "VernacBeginSection",
            "e4268637785bb8861baf489f8a46a1c486eb0d4b"
        ],
        [
            "Variable T : Type.",
            "VernacAssumption",
            "a15b17e37c4241158d544882375356c273dc93f2"
        ],
        [
            "Variable U : Type.",
            "VernacAssumption",
            "eb05258af3da16894daf420a97be779934a15d7e"
        ],
        [
            "Variable EDT : RelDec (@eq T).",
            "VernacAssumption",
            "4e7537d6f710dc562f1f65d8b7d9753b0ec75826"
        ],
        [
            "Variable EDU : RelDec (@eq U).",
            "VernacAssumption",
            "255ef0dd85b7a2d1a067b4a1c573eedf7c288d24"
        ],
        [
            "Global Instance RelDec_eq_pair : RelDec (@eq (T * U)) := { rel_dec := fun x y => if rel_dec (fst x) (fst y) then rel_dec (snd x) (snd y) else false }.",
            "VernacInstance",
            "b5d007b9e9fb0a93ca9479b05a83b88e6346f468"
        ],
        [
            "Variable EDCT : RelDec_Correct EDT.",
            "VernacAssumption",
            "aff316bf180903c2962457217cbc7de70ff4501b"
        ],
        [
            "Variable EDCU : RelDec_Correct EDU.",
            "VernacAssumption",
            "9d6c18f550674e42155d495a1e34ce2c3e6b8ae3"
        ],
        [
            "Global Instance RelDec_Correct_eq_pair : RelDec_Correct RelDec_eq_pair.",
            "VernacInstance",
            "cb319e790a4238b7b41a3e01efbfce44aeb8492d"
        ],
        [
            "constructor; destruct x; destruct y; split; simpl in *; intros; repeat match goal with | [ H : context [ rel_dec ?X ?Y ] |- _ ] => consider (rel_dec X Y); intros; subst | [ |- context [ rel_dec ?X ?Y ] ] => consider (rel_dec X Y); intros; subst end; congruence.",
            "VernacExtend",
            "69a4205fb8c9dac41956538dfe3562222f475a33"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End PairEq.",
            "VernacEndSegment",
            "93fa97bbbbdaf346367807b74f3d14eb641c3a2c"
        ],
        [
            "Global Instance Injective_pair T U (a :T) (b:U) c d : Injective ((a,b) = (c,d)).",
            "VernacInstance",
            "3ac8731fe8bc61342c57bf767d46f266620de0db"
        ],
        [
            "refine {| result := a = c /\\ b = d |}.",
            "VernacExtend",
            "c69434affda40b49474bf8a23ace3ceacf71d991"
        ],
        [
            "abstract (inversion 1; intuition).",
            "VernacExtend",
            "f79d4d5f6f2a3a2fe13cd3d8e3c7edce3b4252bd"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ]
    ],
    "proofs": [
        {
            "name": "Reflexive_Eqpair",
            "line_nb": 10,
            "steps": [
                {
                    "command": [
                        "red.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "destruct x.",
                        "VernacExtend",
                        "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
                    ]
                },
                {
                    "command": [
                        "constructor; reflexivity.",
                        "VernacExtend",
                        "c88c5380016ed9a8a9962e78d115a81e20c0d220"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Symmetric_Eqpair",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "red.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "inversion 1; constructor; symmetry; assumption.",
                        "VernacExtend",
                        "40086e8baf6aaa17b6b8dcbb8f25dcc641c26e1d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Transitive_Eqpair",
            "line_nb": 19,
            "steps": [
                {
                    "command": [
                        "red.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "inversion 1; inversion 1; constructor; etransitivity; eauto.",
                        "VernacExtend",
                        "ec3dfa3ab69ba15cdf3f652bfb45f23dc982effc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Injective_Eqpair",
            "line_nb": 23,
            "steps": [
                {
                    "command": [
                        "refine {| result := rT a c /\\ rU b d |}.",
                        "VernacExtend",
                        "d5ed7a3c65eb164920a6df812dce351a2d20d24b"
                    ]
                },
                {
                    "command": [
                        "abstract (inversion 1; auto).",
                        "VernacExtend",
                        "4eb9ff0e75db4b10e7d0a803e2aa1036c0fbcfa3"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "wf_R_pair",
            "line_nb": 35,
            "steps": [
                {
                    "command": [
                        "red.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "intro x.",
                        "VernacExtend",
                        "f7163633eedf12f483fa0d8c0c119dd59431ca1e"
                    ]
                },
                {
                    "command": [
                        "destruct x.",
                        "VernacExtend",
                        "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
                    ]
                },
                {
                    "command": [
                        "generalize dependent u.",
                        "VernacExtend",
                        "25a224ea00889c955ccf5d8574c6aed5b2703521"
                    ]
                },
                {
                    "command": [
                        "apply (well_founded_ind wf_RT (fun t => forall u : U, Acc R_pair (t, u))) .",
                        "VernacExtend",
                        "d42a8765ab9c7575fdfc23b7a4015b6f38f2f414"
                    ]
                },
                {
                    "command": [
                        "do 2 intro.",
                        "VernacExtend",
                        "94cab4807bd907dc3f92e3b75fad36963d81fc73"
                    ]
                },
                {
                    "command": [
                        "apply (well_founded_ind wf_RU (fun u => Acc R_pair (x,u))).",
                        "VernacExtend",
                        "9172af077843a7b8d623ce9d7d4fd2cf98e73cc1"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "destruct y.",
                        "VernacExtend",
                        "fbeb4c3b73b2f0e6bfc89563d7f3b824ea0ea309"
                    ]
                },
                {
                    "command": [
                        "remember (t0,u).",
                        "VernacExtend",
                        "f4b6e59228dfb9e2c0b92ba95e41a14416db845b"
                    ]
                },
                {
                    "command": [
                        "remember (x,x0).",
                        "VernacExtend",
                        "63c081c5e578a74aa186928d5e2dd9b976323664"
                    ]
                },
                {
                    "command": [
                        "inversion 1; subst; inversion H4; inversion H3; clear H4 H3; subst; eauto.",
                        "VernacExtend",
                        "d78811cfe91c2dcb8c7752decf58fa42dd8afd58"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "RelDec_Correct_equ_pair",
            "line_nb": 61,
            "steps": [
                {
                    "command": [
                        "constructor; destruct x; destruct y; split; simpl in *; intros; repeat match goal with | [ H : context [ rel_dec ?X ?Y ] |- _ ] => consider (rel_dec X Y); intros; subst | [ |- context [ rel_dec ?X ?Y ] ] => consider (rel_dec X Y); intros; subst end; intuition.",
                        "VernacExtend",
                        "9fa6ae9410dbce3bf075bfc1338c1a0addd2180b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RelDec_Correct_eq_pair",
            "line_nb": 73,
            "steps": [
                {
                    "command": [
                        "constructor; destruct x; destruct y; split; simpl in *; intros; repeat match goal with | [ H : context [ rel_dec ?X ?Y ] |- _ ] => consider (rel_dec X Y); intros; subst | [ |- context [ rel_dec ?X ?Y ] ] => consider (rel_dec X Y); intros; subst end; congruence.",
                        "VernacExtend",
                        "69a4205fb8c9dac41956538dfe3562222f475a33"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Injective_pair",
            "line_nb": 77,
            "steps": [
                {
                    "command": [
                        "refine {| result := a = c /\\ b = d |}.",
                        "VernacExtend",
                        "c69434affda40b49474bf8a23ace3ceacf71d991"
                    ]
                },
                {
                    "command": [
                        "abstract (inversion 1; intuition).",
                        "VernacExtend",
                        "f79d4d5f6f2a3a2fe13cd3d8e3c7edce3b4252bd"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        }
    ]
}