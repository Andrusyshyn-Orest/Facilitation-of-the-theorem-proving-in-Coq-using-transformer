{
    "filename": "theories/Data/String.v",
    "coq_project": "coq-ext-lib",
    "vernac_cmds": [
        [
            "Require Import Coq.Strings.String.",
            "VernacRequire",
            "5c887f44cc52e2a2db22e7cb04fefdce0c1d84f0"
        ],
        [
            "Require Import Coq.Program.Program.",
            "VernacRequire",
            "f0aaea5df52d8de8e090bb8f78148264c53bb6ee"
        ],
        [
            "Require Import Coq.Numbers.Natural.Peano.NPeano.",
            "VernacRequire",
            "89b8c42b8f3511a71eb8e553ee9b9c59331c0e08"
        ],
        [
            "Require Import Coq.Arith.Arith.",
            "VernacRequire",
            "b49308ec6684e45c9ea6cf40956f6c798f9946c8"
        ],
        [
            "Require Import ExtLib.Tactics.Consider.",
            "VernacRequire",
            "d7f1290b398c3a51484b77ae4b362f89ed2a3ede"
        ],
        [
            "Require Import ExtLib.Core.RelDec.",
            "VernacRequire",
            "0e3bcdc14736b545ca698ea9a09e10feafbc33d4"
        ],
        [
            "Require Import ExtLib.Structures.Reducible.",
            "VernacRequire",
            "3d0145326c8c36a3bac1544c5c8e01d880d61b29"
        ],
        [
            "Require Import ExtLib.Structures.Monoid.",
            "VernacRequire",
            "f032d55031b73511a3b5f710a37e267ebb87da85"
        ],
        [
            "Require Import ExtLib.Data.Char.",
            "VernacRequire",
            "ccecbe2533bae8051cab32845c2492abf0720f9e"
        ],
        [
            "Require Import ExtLib.Data.Nat.",
            "VernacRequire",
            "1e735ec76247ba8e5c3803227bb096ba7a80868b"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Set Strict Implicit.",
            "VernacSetOption",
            "6b94f70716dd2a2fc34140a20b87bb0e87225ff4"
        ],
        [
            "Local Notation \"x >> y\" := (match x with | Eq => y | z => z end) (only parsing, at level 30).",
            "VernacNotation",
            "4caeafef47b644cb237f24dd7b5a28b80d25900e"
        ],
        [
            "Definition bool_cmp (l r : bool) : comparison := match l , r with | true , false => Gt | false , true => Lt | true , true | false , false => Eq end.",
            "VernacDefinition",
            "bf41ee1ed0845732ec91e129cb60586b0f1109a7"
        ],
        [
            "Definition ascii_cmp (l r : Ascii.ascii) : comparison := match l , r with | Ascii.Ascii l1 l2 l3 l4 l5 l6 l7 l8 , Ascii.Ascii r1 r2 r3 r4 r5 r6 r7 r8 => bool_cmp l8 r8 >> bool_cmp l7 r7 >> bool_cmp l6 r6 >> bool_cmp l5 r5 >> bool_cmp l4 r4 >> bool_cmp l3 r3 >> bool_cmp l2 r2 >> bool_cmp l1 r1 end.",
            "VernacDefinition",
            "915477d4f7bf86e44535d27f96c4223c797415a1"
        ],
        [
            "Fixpoint string_dec (l r : string) : bool := match l , r with | EmptyString , EmptyString => true | String l ls , String r rs => if ascii_dec l r then string_dec ls rs else false | _ , _ => false end.",
            "VernacFixpoint",
            "e23a5bf9991ab4f48ea43ae15f49b4d45d03b826"
        ],
        [
            "Theorem string_dec_sound : forall l r, string_dec l r = true <-> l = r.",
            "VernacStartTheoremProof",
            "2d198b7979954259db066af268726f0460e1bcee"
        ],
        [
            "induction l; destruct r; simpl; split; try solve [ intuition ; congruence ]; consider (ascii_dec a a0); intros; subst.",
            "VernacExtend",
            "fc229ef956d0037c23e1206e7128a80a87efa45e"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "eapply IHl; auto.",
            "VernacExtend",
            "a64ce95461554c362d0b80799a5de6771cabb4a6"
        ],
        [
            "apply IHl.",
            "VernacExtend",
            "af412c6009bba78f939aa53ab07dcd1baaf5888b"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Global Instance RelDec_string : RelDec (@eq string) := {| rel_dec := string_dec |}.",
            "VernacInstance",
            "038b0cd9789e16bdfc6058b400e0116360ad10a0"
        ],
        [
            "Global Instance RelDec_Correct_string : RelDec_Correct RelDec_string.",
            "VernacInstance",
            "e94bd4333569227a0f0484f2983c0eca4221d874"
        ],
        [
            "constructor; auto using string_dec_sound.",
            "VernacExtend",
            "d1c389506293a75865f47b1ae8134bc093c595cb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Global Instance Reflect_string_dec a b : Reflect (string_dec a b) (a = b) (a <> b).",
            "VernacInstance",
            "106a9342c833af19bcba3875623df587042b8f94"
        ],
        [
            "apply iff_to_reflect; auto using string_dec_sound.",
            "VernacExtend",
            "6ff630fe39cbcf29d1f53fd91e0df2e0d348947d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint string_cmp (l r : string) : comparison := match l , r with | EmptyString , EmptyString => Eq | EmptyString , _ => Lt | _ , EmptyString => Gt | String l ls , String r rs => ascii_cmp l r >> string_cmp ls rs end.",
            "VernacFixpoint",
            "22c2a5d0746b1b9fc17924ed7078e0b6a8d79ceb"
        ],
        [
            "Section Program_Scope.",
            "VernacBeginSection",
            "0c707012e1086c9a64826d862102212b25f0ad9e"
        ],
        [
            "Variable modulus : nat.",
            "VernacAssumption",
            "a22024b6d1c238644a1e542d0a8479caa4ca56c0"
        ],
        [
            "Hypothesis one_lt_mod : 1 < modulus.",
            "VernacAssumption",
            "ee682aa68c03ae8b01c42d2892657a91a51989cc"
        ],
        [
            "Lemma _xxx : forall m n, 1 < m -> ~ n < m -> 0 < n.",
            "VernacStartTheoremProof",
            "cdd8c06dab7543a943741ef43a41ba912373d482"
        ],
        [
            "destruct n; destruct m; intros.",
            "VernacExtend",
            "987b38556e5ac9f74d8ddefc43ae54d4ce68f153"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "exfalso.",
            "VernacExtend",
            "f6514338e7c49f3c5a647bc69b7154700a8e57f1"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "etransitivity.",
            "VernacExtend",
            "be6e37ea1161f59d4c906a2d8011256577b6109b"
        ],
        [
            "2: eassumption.",
            "VernacExtend",
            "0ff50f8d3d17a5bf261a0547553b55ca426f43c9"
        ],
        [
            "repeat constructor.",
            "VernacExtend",
            "79943d98275d564d777a905b79a73e398a3a18fd"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "eapply neq_0_lt.",
            "VernacExtend",
            "c063f432b02793201245b4e77bf5836e91b4629a"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Program Fixpoint nat2string (n:nat) {measure n}: string := match NPeano.Nat.ltb n modulus as x return NPeano.Nat.ltb n modulus = x -> string with | true => fun _ => String (digit2ascii n) EmptyString | false => fun pf => let m := NPeano.Nat.div n modulus in append (nat2string m) (String (digit2ascii (n - modulus * m)) EmptyString) end (@Logic.eq_refl _ (NPeano.Nat.ltb n modulus)).",
            "VernacFixpoint",
            "911f5daa9471776d4420ae2956906f0de83117f9"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "eapply NPeano.Nat.div_lt; auto.",
            "VernacExtend",
            "1b45ebb126e73786529dd468299daae0fb0badb3"
        ],
        [
            "consider (NPeano.Nat.ltb n modulus); try congruence.",
            "VernacExtend",
            "82b853ff8da21079ff974f64a080ecaee025e72f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "eapply _xxx; eassumption.",
            "VernacExtend",
            "347fe67acd9bea62f1935d36523591cc38139f1f"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "End Program_Scope.",
            "VernacEndSegment",
            "bc99acc9d237e4772d596d6f70dd37385d236ec5"
        ],
        [
            "Definition nat2string10 : nat -> string.",
            "VernacDefinition",
            "27dd388d4f2f0640f616fc1be9ef70dca41262e6"
        ],
        [
            "refine (@nat2string 10 _).",
            "VernacExtend",
            "3900467e98ea9f1b322f281d6df5594ca6ccfe7c"
        ],
        [
            "repeat constructor.",
            "VernacExtend",
            "79943d98275d564d777a905b79a73e398a3a18fd"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition nat2string2 : nat -> string.",
            "VernacDefinition",
            "4b6b3459fe5710ca850a7803e12536632d22133a"
        ],
        [
            "refine (@nat2string 2 _).",
            "VernacExtend",
            "a93fb02e4e2fc12df64c673c5a8f32381210b883"
        ],
        [
            "repeat constructor.",
            "VernacExtend",
            "79943d98275d564d777a905b79a73e398a3a18fd"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition nat2string8 : nat -> string.",
            "VernacDefinition",
            "91357e024cea505669e32eaa03939f14f7f20da0"
        ],
        [
            "refine (@nat2string 8 _).",
            "VernacExtend",
            "b8d8a7dc07d082b0f2746d6893063930a91ede9e"
        ],
        [
            "repeat constructor.",
            "VernacExtend",
            "79943d98275d564d777a905b79a73e398a3a18fd"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition nat2string16 : nat -> string.",
            "VernacDefinition",
            "5d0e3de63e970623249b4aa8ff2e92058a893a04"
        ],
        [
            "refine (@nat2string 16 _).",
            "VernacExtend",
            "56d2a281165429663e937cd53bf90355238d40c6"
        ],
        [
            "repeat constructor.",
            "VernacExtend",
            "79943d98275d564d777a905b79a73e398a3a18fd"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Global Instance Foldable_string : Foldable string ascii := fun _ f base => fix go ls := match ls with | EmptyString => base | String l ls => f l (go ls) end.",
            "VernacInstance",
            "00b9b9d98a80ba875f28a62f117a3758d00fa390"
        ],
        [
            "Section string.",
            "VernacBeginSection",
            "2a37c5f8238b1482ddcfb0ffe2b8dafc34050e81"
        ],
        [
            "Inductive R_string_len : string -> string -> Prop := | R_s_len : forall n m, length n < length m -> R_string_len n m.",
            "VernacInductive",
            "ce41c8acd513041e03e3e729c4b8e63ad3d8480a"
        ],
        [
            "Theorem wf_R_string_len : well_founded R_string_len.",
            "VernacStartTheoremProof",
            "582462ab4dea90c04dffcc95baf088bd5bded4a7"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "refine (@Fix _ _ wf_R_lt (fun n : nat => forall ls : string, n = length ls -> Acc R_string_len ls) (fun x rec ls pfls => Acc_intro _ _) _ _ refl_equal).",
            "VernacExtend",
            "ed7a06908f0084c7902d2413f1fc6b070e298986"
        ],
        [
            "refine ( match ls as ls return x = length ls -> forall z : string, R_string_len z ls -> Acc R_string_len z with | EmptyString => fun (pfls : x = 0) z pf => _ | String l ls => fun pfls z pf => rec _ (match pf in R_string_len xs ys return x = length ys -> R_nat_lt (length xs) x with | R_s_len n m pf' => fun pf_eq => match eq_sym pf_eq in _ = x return R_nat_lt (length n) x with | refl_equal => R_lt pf' end end pfls) _ eq_refl end pfls).",
            "VernacExtend",
            "1e70e4a747a56ab97590c621c056f43a7c0f0496"
        ],
        [
            "clear - pf; abstract (inversion pf; subst; simpl in *; inversion H).",
            "VernacExtend",
            "44b0708efadb4a96f8c8eee5b2834057191c082c"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "End string.",
            "VernacEndSegment",
            "3cf5d138d339d5b96b157ce1adc61fd14a5eec9a"
        ],
        [
            "Definition Monoid_string_append : Monoid string := {| monoid_plus := append ; monoid_unit := EmptyString |}.",
            "VernacDefinition",
            "15757b531f51f2e33843e08e83e87f31a76256c8"
        ]
    ],
    "proofs": [
        {
            "name": "string_dec_sound",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "induction l; destruct r; simpl; split; try solve [ intuition ; congruence ]; consider (ascii_dec a a0); intros; subst.",
                        "VernacExtend",
                        "fc229ef956d0037c23e1206e7128a80a87efa45e"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "eapply IHl; auto.",
                        "VernacExtend",
                        "a64ce95461554c362d0b80799a5de6771cabb4a6"
                    ]
                },
                {
                    "command": [
                        "apply IHl.",
                        "VernacExtend",
                        "af412c6009bba78f939aa53ab07dcd1baaf5888b"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RelDec_Correct_string",
            "line_nb": 26,
            "steps": [
                {
                    "command": [
                        "constructor; auto using string_dec_sound.",
                        "VernacExtend",
                        "d1c389506293a75865f47b1ae8134bc093c595cb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Reflect_string_dec",
            "line_nb": 29,
            "steps": [
                {
                    "command": [
                        "apply iff_to_reflect; auto using string_dec_sound.",
                        "VernacExtend",
                        "6ff630fe39cbcf29d1f53fd91e0df2e0d348947d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nat2string_obligation_1",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "eapply NPeano.Nat.div_lt; auto.",
                        "VernacExtend",
                        "1b45ebb126e73786529dd468299daae0fb0badb3"
                    ]
                },
                {
                    "command": [
                        "consider (NPeano.Nat.ltb n modulus); try congruence.",
                        "VernacExtend",
                        "82b853ff8da21079ff974f64a080ecaee025e72f"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "eapply _xxx; eassumption.",
                        "VernacExtend",
                        "347fe67acd9bea62f1935d36523591cc38139f1f"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "nat2string10",
            "line_nb": 56,
            "steps": [
                {
                    "command": [
                        "refine (@nat2string 10 _).",
                        "VernacExtend",
                        "3900467e98ea9f1b322f281d6df5594ca6ccfe7c"
                    ]
                },
                {
                    "command": [
                        "repeat constructor.",
                        "VernacExtend",
                        "79943d98275d564d777a905b79a73e398a3a18fd"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "nat2string2",
            "line_nb": 60,
            "steps": [
                {
                    "command": [
                        "refine (@nat2string 2 _).",
                        "VernacExtend",
                        "a93fb02e4e2fc12df64c673c5a8f32381210b883"
                    ]
                },
                {
                    "command": [
                        "repeat constructor.",
                        "VernacExtend",
                        "79943d98275d564d777a905b79a73e398a3a18fd"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "nat2string8",
            "line_nb": 64,
            "steps": [
                {
                    "command": [
                        "refine (@nat2string 8 _).",
                        "VernacExtend",
                        "b8d8a7dc07d082b0f2746d6893063930a91ede9e"
                    ]
                },
                {
                    "command": [
                        "repeat constructor.",
                        "VernacExtend",
                        "79943d98275d564d777a905b79a73e398a3a18fd"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "nat2string16",
            "line_nb": 68,
            "steps": [
                {
                    "command": [
                        "refine (@nat2string 16 _).",
                        "VernacExtend",
                        "56d2a281165429663e937cd53bf90355238d40c6"
                    ]
                },
                {
                    "command": [
                        "repeat constructor.",
                        "VernacExtend",
                        "79943d98275d564d777a905b79a73e398a3a18fd"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "wf_R_string_len",
            "line_nb": 75,
            "steps": [
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "refine (@Fix _ _ wf_R_lt (fun n : nat => forall ls : string, n = length ls -> Acc R_string_len ls) (fun x rec ls pfls => Acc_intro _ _) _ _ refl_equal).",
                        "VernacExtend",
                        "ed7a06908f0084c7902d2413f1fc6b070e298986"
                    ]
                },
                {
                    "command": [
                        "refine ( match ls as ls return x = length ls -> forall z : string, R_string_len z ls -> Acc R_string_len z with | EmptyString => fun (pfls : x = 0) z pf => _ | String l ls => fun pfls z pf => rec _ (match pf in R_string_len xs ys return x = length ys -> R_nat_lt (length xs) x with | R_s_len n m pf' => fun pf_eq => match eq_sym pf_eq in _ = x return R_nat_lt (length n) x with | refl_equal => R_lt pf' end end pfls) _ eq_refl end pfls).",
                        "VernacExtend",
                        "1e70e4a747a56ab97590c621c056f43a7c0f0496"
                    ]
                },
                {
                    "command": [
                        "clear - pf; abstract (inversion pf; subst; simpl in *; inversion H).",
                        "VernacExtend",
                        "44b0708efadb4a96f8c8eee5b2834057191c082c"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        }
    ]
}