{
    "filename": "theories/Generic/DerivingData.v",
    "coq_project": "coq-ext-lib",
    "vernac_cmds": [
        [
            "Require Import String List.",
            "VernacRequire",
            "bdcdf17403f5a30a67a1073d994f7d3c0d098b28"
        ],
        [
            "Require Import ExtLib.Data.HList.",
            "VernacRequire",
            "8e49b82404f8e1787c9857383c7a12be80eea2bf"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Set Strict Implicit.",
            "VernacSetOption",
            "6b94f70716dd2a2fc34140a20b87bb0e87225ff4"
        ],
        [
            "Inductive data T : (T -> Type) -> Type := | Inj : forall X, Type -> data X | Get : forall X, T -> data X | Prod : forall X, data X -> data X -> data X | Sigma : forall X (S : Type), (S -> data X) -> data X | Pi : forall X (S : Type), (S -> data X) -> data X.",
            "VernacInductive",
            "c9b8b14540d5fda7148883e509e883b5bf1cad67"
        ],
        [
            "Fixpoint dataD (T : Type) (X : T -> Type) (d : data X) : Type := match d with | Inj _X x => x | Get X i => X i | Prod l r => prod (dataD l) (dataD r) | @Sigma _ _ i s => @sigT i (fun v => dataD (s v)) | @Pi _ _ i s => forall v : i, dataD (s v) end.",
            "VernacFixpoint",
            "f142f99fba5673d70cd90b36434354b9063e2a3b"
        ],
        [
            "Definition dataList (a : Type) : @data unit (fun _ => list a) := @Sigma _ _ bool (fun x => match x with | true => @Inj _ _ unit | false => @Prod _ _ (Inj _ a) (Get _ tt) end).",
            "VernacDefinition",
            "8c2e17c924c79addf43872d07d8e1fdd438458f3"
        ],
        [
            "Theorem dataList_to_list : forall T (x : dataD (dataList T)), list T.",
            "VernacStartTheoremProof",
            "9c76cca06d254c8a802b7cf56b1fee7792c2ba4b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct x.",
            "VernacExtend",
            "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
        ],
        [
            "destruct x.",
            "VernacExtend",
            "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
        ],
        [
            "apply nil.",
            "VernacExtend",
            "a0b32a22cd8c40dd93e9a518cc07a13f50d35401"
        ],
        [
            "simpl in *.",
            "VernacExtend",
            "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
        ],
        [
            "apply (fst d :: snd d).",
            "VernacExtend",
            "bab03f7543bb58ef2cd6943a83a3c3e38b1cd1a9"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Theorem list_to_dataList : forall T (ls : list T), dataD (dataList T).",
            "VernacStartTheoremProof",
            "baafa0674fd8ce367862b489e3274c346683b3df"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct 1.",
            "VernacExtend",
            "0e61c29dbe9a16af1faa0807bdb22c467076a9d2"
        ],
        [
            "exists true.",
            "VernacExtend",
            "f1afb887f52dc5f2c33bbe529599a5806ba44286"
        ],
        [
            "apply tt.",
            "VernacExtend",
            "e17d1c00751fad1fcfa324a6feeac8aa8dd9a0c5"
        ],
        [
            "exists false.",
            "VernacExtend",
            "efaf31ccfff4e7a1a53eebfda466496ad9cae6be"
        ],
        [
            "apply (t, ls).",
            "VernacExtend",
            "6888895cc34d8b4289ab04c144a2eda51e3be26e"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Fixpoint dataP (T : Type) (X : T -> Type) (d : data X) (R : Type) : Type := match d with | Inj _X x => x -> R | Get X x => X x -> R | @Prod _ _ l r => dataP l (dataP r R) | @Sigma _ _ i s => forall i, dataP (s i) R | @Pi _ _ i s => (forall i, dataD (s i)) -> R end.",
            "VernacFixpoint",
            "7b1d0d0baa868d81466008944809c10e2a1c16f1"
        ],
        [
            "Fixpoint dataMatch (T : Type) (X : T -> Type) (d : data X) {struct d} : forall (R : Type), dataP d R -> dataD d -> R := match d as d return forall (R : Type), dataP d R -> dataD d -> R with | Inj _ _ => fun _ p => p | Get X x => fun _ p => p | @Prod _ _ l r => fun _ p v => dataMatch r _ (dataMatch l _ p (fst v)) (snd v) | @Sigma _ _ i d => fun _ p v => match v with | existT _ x y => dataMatch (d x) _ (p _) y end | @Pi _ _ i d => fun _ p v => p v end.",
            "VernacFixpoint",
            "f32269be87eba17ada01e4eacf4ca4d55cecb755"
        ]
    ],
    "proofs": [
        {
            "name": "dataList_to_list",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct x.",
                        "VernacExtend",
                        "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
                    ]
                },
                {
                    "command": [
                        "destruct x.",
                        "VernacExtend",
                        "24973a7b5353196d2d5bd2a7e0fe5cfacd5f4460"
                    ]
                },
                {
                    "command": [
                        "apply nil.",
                        "VernacExtend",
                        "a0b32a22cd8c40dd93e9a518cc07a13f50d35401"
                    ]
                },
                {
                    "command": [
                        "simpl in *.",
                        "VernacExtend",
                        "5f89d9715fcf9b11bc0d0aadc658e9b10c47b606"
                    ]
                },
                {
                    "command": [
                        "apply (fst d :: snd d).",
                        "VernacExtend",
                        "bab03f7543bb58ef2cd6943a83a3c3e38b1cd1a9"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "list_to_dataList",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct 1.",
                        "VernacExtend",
                        "0e61c29dbe9a16af1faa0807bdb22c467076a9d2"
                    ]
                },
                {
                    "command": [
                        "exists true.",
                        "VernacExtend",
                        "f1afb887f52dc5f2c33bbe529599a5806ba44286"
                    ]
                },
                {
                    "command": [
                        "apply tt.",
                        "VernacExtend",
                        "e17d1c00751fad1fcfa324a6feeac8aa8dd9a0c5"
                    ]
                },
                {
                    "command": [
                        "exists false.",
                        "VernacExtend",
                        "efaf31ccfff4e7a1a53eebfda466496ad9cae6be"
                    ]
                },
                {
                    "command": [
                        "apply (t, ls).",
                        "VernacExtend",
                        "6888895cc34d8b4289ab04c144a2eda51e3be26e"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        }
    ]
}