{
    "filename": "Replacement.v",
    "coq_project": "zfc",
    "vernac_cmds": [
        [
            "Require Import Sets.",
            "VernacRequire",
            "732c40760f9b4ebf75cf2afd12148193aa1718e6"
        ],
        [
            "Require Import Axioms.",
            "VernacRequire",
            "c989a924e4bb8fe5a57f18260df70c530a537b50"
        ],
        [
            "Require Import Cartesian.",
            "VernacRequire",
            "f930f6fa17af0adaf5886c19ee35654fd9aa29a1"
        ],
        [
            "Require Import Omega.",
            "VernacRequire",
            "72dd903de5f3320ef9d302d79812066579ed9cdb"
        ],
        [
            "Definition collection := forall P : Ens -> Ens -> Prop, (forall x x' y : Ens, EQ x x' -> P x y -> P x' y) -> (forall E : Ens, EXType _ (P E)) -> forall E : Ens, EXType _ (fun A : Ens => forall x : Ens, IN x E -> EXType _ (fun y : Ens => IN y A /\\ P x y)).",
            "VernacDefinition",
            "52b1d0ee7a3b431f2e3521a05e69c68faaf6f04e"
        ],
        [
            "Definition choice := forall (A B : Type) (P : A -> B -> Prop), (forall a : A, EXType _ (fun b : B => P a b)) -> EXType _ (fun f : A -> B => forall a : A, P a (f a)).",
            "VernacDefinition",
            "9f99112f8908dcfc2d9421829c7d473212230474"
        ],
        [
            "Theorem Choice_Collection : choice -> collection.",
            "VernacStartTheoremProof",
            "ec05748c865c32592d3cbd06b79f9bd77ddc55a8"
        ],
        [
            "unfold collection in |- *; intro; intros P comp G E.",
            "VernacExtend",
            "7ed7e7854da1c104e14e7f983a4f620716d55b56"
        ],
        [
            "cut (EXType _ (fun f : Ens -> Ens => forall B : Ens, P B (f B))).",
            "VernacExtend",
            "5f994e207ed841a0855ffb10d59fd09d330fc20e"
        ],
        [
            "simple induction 1; intros f pf.",
            "VernacExtend",
            "9114868ebbba775af665fcce2d885ba3c5c0644f"
        ],
        [
            "elim E; intros A g hr; intros.",
            "VernacExtend",
            "7c8cceb6997eff8b3de4cfbe0be6e5edfef4e150"
        ],
        [
            "exists (sup A (fun a : A => f (g a))).",
            "VernacExtend",
            "c5c04e92058fe7be332a06484cb949c2ce6d7855"
        ],
        [
            "simpl in |- *; intros X i.",
            "VernacExtend",
            "d4e24ffda471eb6471eb44d2dcc52beddd5151cf"
        ],
        [
            "elim i; intros a ea.",
            "VernacExtend",
            "004f5f1b32d2dcc14da4d8e9985ed6b0303c5035"
        ],
        [
            "exists (f (g a)).",
            "VernacExtend",
            "6a29f23973cd6233b5a49318381a19290f7fac71"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "exists a; auto with zfc.",
            "VernacExtend",
            "eb5e793353b56ca84e3b357e848d07d9542e901f"
        ],
        [
            "apply comp with (g a); auto with zfc.",
            "VernacExtend",
            "52a5429ea77824b58c2df5e7f39857669249455f"
        ],
        [
            "unfold choice in H.",
            "VernacExtend",
            "7e6dd9b76448ec798afd325f6640cab5bc42198f"
        ],
        [
            "apply H; intros.",
            "VernacExtend",
            "fddb17fff207d2c75e7b0fce3d0bd6d4f5ce5309"
        ],
        [
            "elim (G a); intros b hb; exists b; auto with zfc.",
            "VernacExtend",
            "e26a199fb1141fece5e6cacf9a9385cce7e3e6a5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition functional (P : Ens -> Ens -> Prop) := forall x y y' : Ens, P x y -> P x y' -> EQ y y'.",
            "VernacDefinition",
            "b90a0de044e21c30f54a46aa01190c53afd99310"
        ],
        [
            "Definition replacement := forall P : Ens -> Ens -> Prop, functional P -> (forall x y y' : Ens, EQ y y' -> P x y -> P x y') -> (forall x x' y : Ens, EQ x x' -> P x y -> P x' y) -> forall X : Ens, EXType _ (fun Y : Ens => forall y : Ens, (IN y Y -> EXType _ (fun x : Ens => IN x X /\\ P x y)) /\\ (EXType _ (fun x : Ens => IN x X /\\ P x y) -> IN y Y)).",
            "VernacDefinition",
            "10450abb5a4ec802809073ed7a44a302d599f5a1"
        ],
        [
            "Theorem classical_Collection_Replacement : (forall S : Prop, S \\/ (S -> False)) -> collection -> replacement.",
            "VernacStartTheoremProof",
            "a8d3183964f2451c38cb8997559297697da8c1c6"
        ],
        [
            "unfold replacement in |- *; intros EM Collection P fp comp_r comp_l X.",
            "VernacExtend",
            "4b3c554aec3b0016e5d8dd6492dba8e758337d1f"
        ],
        [
            "cut (EXType _ (fun Y : Ens => forall y : Ens, EXType _ (fun x : Ens => IN x X /\\ P x y) -> IN y Y)).",
            "VernacExtend",
            "4733790d729c38c1dd9580d1c2fd9a05d8ec2582"
        ],
        [
            "simple induction 1; intros Y HY.",
            "VernacExtend",
            "37527bc1585499dad11248125499d926525f0b14"
        ],
        [
            "exists (Comp Y (fun y : Ens => EXType _ (fun x : Ens => IN x X /\\ P x y))).",
            "VernacExtend",
            "acb25a84d0e1811ed774cb5301da2d476f425aa7"
        ],
        [
            "intros y; split.",
            "VernacExtend",
            "674e59b92e446fae8dccf2fab719f2a6af6d2018"
        ],
        [
            "intros HC.",
            "VernacExtend",
            "8a591c39f84c1591ea36f0fa4145f1dbd4cd4a16"
        ],
        [
            "apply (IN_Comp_P Y y (fun y0 : Ens => EXType Ens (fun x : Ens => IN x X /\\ P x y0))); auto with zfc.",
            "VernacExtend",
            "1e613e2708695c4afc111d20f2b7e00950a62d05"
        ],
        [
            "intros w1 w2; simple induction 1; intros x; simple induction 1; intros Ix Px e.",
            "VernacExtend",
            "62b08f3ddd930e2441b0f4c2fbbd56dc5b984cf3"
        ],
        [
            "exists x; split; auto with zfc.",
            "VernacExtend",
            "b72d0571a78d6c5085dcde74cc03c2a5a1a4b0c7"
        ],
        [
            "apply comp_r with w1; auto with zfc.",
            "VernacExtend",
            "31886a88193ebbf283c4ff7bd537b3e682f3596b"
        ],
        [
            "intros He.",
            "VernacExtend",
            "dfbedaae88fb1ac0f1e0aadf409bd4a7b0ced9da"
        ],
        [
            "apply IN_P_Comp.",
            "VernacExtend",
            "0ef9dee0d1d30ccf0b9609ef667f3480d0bf11c2"
        ],
        [
            "intros w1 w2; simple induction 1; intros x; simple induction 1; intros Ix Px e.",
            "VernacExtend",
            "62b08f3ddd930e2441b0f4c2fbbd56dc5b984cf3"
        ],
        [
            "exists x; split; auto with zfc.",
            "VernacExtend",
            "b72d0571a78d6c5085dcde74cc03c2a5a1a4b0c7"
        ],
        [
            "apply comp_r with w1; auto with zfc.",
            "VernacExtend",
            "31886a88193ebbf283c4ff7bd537b3e682f3596b"
        ],
        [
            "apply HY; auto with zfc.",
            "VernacExtend",
            "c71a1db596763da998c5e554050733002c239c83"
        ],
        [
            "auto with zfc.",
            "VernacExtend",
            "8bf36810215e123a1a6345183c18fcfc444dd33d"
        ],
        [
            "elim (Collection (fun x y : Ens => P x y \\/ (forall y' : Ens, P x y' -> False) /\\ EQ y Vide)) with X.",
            "VernacExtend",
            "d9489a150ebdc44612eb4e6e2292e7baccd9962b"
        ],
        [
            "intros Y HY.",
            "VernacExtend",
            "4f3faf4863ea128c93dce2feb45a7bece1502148"
        ],
        [
            "elim (EM (EXType _ (fun x : Ens => IN x X /\\ P x Vide))).",
            "VernacExtend",
            "ab34d9a166ccff3cda34d8e41c43452531ba85db"
        ],
        [
            "intros Hvide; elim Hvide; intros xv Hxv; exists Y.",
            "VernacExtend",
            "ff8f41cd8ba3e0c42723c0e3c881e01f18858abb"
        ],
        [
            "intros y; simple induction 1; intros x; simple induction 1; intros Hx1 Hx2.",
            "VernacExtend",
            "468e6e64e7eeae838ea6d20fd76e215d5df7588a"
        ],
        [
            "elim (HY x Hx1).",
            "VernacExtend",
            "665eebe779d12cdb3d0e7354d2b7ad414daf9611"
        ],
        [
            "intros y'; simple induction 1; intros Hy'1 Hy'2.",
            "VernacExtend",
            "1524755b2f6e10e9a234637678fac965a2b090d4"
        ],
        [
            "elim Hy'2.",
            "VernacExtend",
            "edb0ce0b0fcad189c63b65ceb8234adc7385481c"
        ],
        [
            "intros Hy'3; apply IN_sound_left with y'; auto with zfc.",
            "VernacExtend",
            "0ba8130088f85a401597fdcc9a506f5b472932dd"
        ],
        [
            "apply fp with x; auto with zfc.",
            "VernacExtend",
            "f9197bbf4a88cbdfda80197f44f36ce2371cadea"
        ],
        [
            "simple induction 1; intros Hy'3 Hy'4.",
            "VernacExtend",
            "d01c4a6a97cc700583bd6193a697fb551ce0de2e"
        ],
        [
            "elim (Hy'3 y Hx2).",
            "VernacExtend",
            "4b1775bfc1c9a5f3924306636b1a068d6b2c8d4a"
        ],
        [
            "intros HP; exists (Comp Y (fun y : Ens => EQ y Vide -> False)).",
            "VernacExtend",
            "7efc345c14c4096665c7d7a683758b5dbfaf50d5"
        ],
        [
            "intros y; simple induction 1; intros x; simple induction 1; intros Hx1 Hx2.",
            "VernacExtend",
            "468e6e64e7eeae838ea6d20fd76e215d5df7588a"
        ],
        [
            "apply IN_P_Comp.",
            "VernacExtend",
            "0ef9dee0d1d30ccf0b9609ef667f3480d0bf11c2"
        ],
        [
            "intros w1 w2 Hw1 Hw Hw2; apply Hw1; apply EQ_tran with w2; auto with zfc.",
            "VernacExtend",
            "7f8476ae0f4307257e59d20d5db0f9c8099acc82"
        ],
        [
            "elim (HY x).",
            "VernacExtend",
            "60ae375ae6da1b25774346572b728b252c9c6e5c"
        ],
        [
            "intros y'; simple induction 1; intros Hy'1 Hy'2.",
            "VernacExtend",
            "1524755b2f6e10e9a234637678fac965a2b090d4"
        ],
        [
            "elim Hy'2; intros Hy'3.",
            "VernacExtend",
            "eb32782be2756b78665f09e698e79685685a8d5a"
        ],
        [
            "apply IN_sound_left with y'; auto with zfc.",
            "VernacExtend",
            "26c1304d0d2577592bce9bbd00083cbfdc1f7932"
        ],
        [
            "apply fp with x; auto with zfc.",
            "VernacExtend",
            "f9197bbf4a88cbdfda80197f44f36ce2371cadea"
        ],
        [
            "elim Hy'3; intros Hy'4 Hy'5.",
            "VernacExtend",
            "b83be932036aaca1d28bcc892dea9333880221af"
        ],
        [
            "elim (Hy'4 y); auto with zfc.",
            "VernacExtend",
            "4a9834b18e010a6f981172401fbc6e3f38f0998d"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intros e; apply HP; exists x; split; auto with zfc; apply comp_r with y; auto with zfc; apply fp; auto with zfc.",
            "VernacExtend",
            "f2ffadf53f1c1f37855c8308cf171ad28aaebe45"
        ],
        [
            "intros x x' y e Hx; elim Hx; intros Hx1.",
            "VernacExtend",
            "b3c6474e4d10bb6f2e5251b08f357707b91895bd"
        ],
        [
            "left; apply comp_l with x; auto with zfc.",
            "VernacExtend",
            "fc967d0542927d6568e7b572d1c9885dfadc8b4b"
        ],
        [
            "right; elim Hx1; intros Hx2 Hx3; split.",
            "VernacExtend",
            "8707069abf2b60c0f00a5b686e69a2972ff3163b"
        ],
        [
            "2: assumption.",
            "VernacExtend",
            "733bef30779add23f5d2d5ba011ac50b88aa9b5a"
        ],
        [
            "intros y' Hy'; apply (Hx2 y'); apply comp_l with x'; auto with zfc.",
            "VernacExtend",
            "82b24709828a7b955ef2cddaf300b9686d2fca0e"
        ],
        [
            "intros x; elim (EM (EXType _ (fun y : Ens => P x y))); intros Hx.",
            "VernacExtend",
            "596a237b5a3816f9f218a2fd1b34a3e43050f4e0"
        ],
        [
            "elim Hx; intros x0 Hx0; exists x0; left; assumption.",
            "VernacExtend",
            "34909e3d8f8fdadb6c9b7b69183c66920c08a5ea"
        ],
        [
            "exists Vide; right; split; auto with zfc.",
            "VernacExtend",
            "2b184c81b4234cb16ddd3ff9f4c037139d517fea"
        ],
        [
            "intros y Hy; elim Hx; exists y; auto with zfc.",
            "VernacExtend",
            "6b3a05b9130918b3714ce57be25efb0bf5b12c6e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "Choice_Collection",
            "line_nb": 6,
            "steps": [
                {
                    "command": [
                        "unfold collection in |- *; intro; intros P comp G E.",
                        "VernacExtend",
                        "7ed7e7854da1c104e14e7f983a4f620716d55b56"
                    ]
                },
                {
                    "command": [
                        "cut (EXType _ (fun f : Ens -> Ens => forall B : Ens, P B (f B))).",
                        "VernacExtend",
                        "5f994e207ed841a0855ffb10d59fd09d330fc20e"
                    ]
                },
                {
                    "command": [
                        "simple induction 1; intros f pf.",
                        "VernacExtend",
                        "9114868ebbba775af665fcce2d885ba3c5c0644f"
                    ]
                },
                {
                    "command": [
                        "elim E; intros A g hr; intros.",
                        "VernacExtend",
                        "7c8cceb6997eff8b3de4cfbe0be6e5edfef4e150"
                    ]
                },
                {
                    "command": [
                        "exists (sup A (fun a : A => f (g a))).",
                        "VernacExtend",
                        "c5c04e92058fe7be332a06484cb949c2ce6d7855"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; intros X i.",
                        "VernacExtend",
                        "d4e24ffda471eb6471eb44d2dcc52beddd5151cf"
                    ]
                },
                {
                    "command": [
                        "elim i; intros a ea.",
                        "VernacExtend",
                        "004f5f1b32d2dcc14da4d8e9985ed6b0303c5035"
                    ]
                },
                {
                    "command": [
                        "exists (f (g a)).",
                        "VernacExtend",
                        "6a29f23973cd6233b5a49318381a19290f7fac71"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "exists a; auto with zfc.",
                        "VernacExtend",
                        "eb5e793353b56ca84e3b357e848d07d9542e901f"
                    ]
                },
                {
                    "command": [
                        "apply comp with (g a); auto with zfc.",
                        "VernacExtend",
                        "52a5429ea77824b58c2df5e7f39857669249455f"
                    ]
                },
                {
                    "command": [
                        "unfold choice in H.",
                        "VernacExtend",
                        "7e6dd9b76448ec798afd325f6640cab5bc42198f"
                    ]
                },
                {
                    "command": [
                        "apply H; intros.",
                        "VernacExtend",
                        "fddb17fff207d2c75e7b0fce3d0bd6d4f5ce5309"
                    ]
                },
                {
                    "command": [
                        "elim (G a); intros b hb; exists b; auto with zfc.",
                        "VernacExtend",
                        "e26a199fb1141fece5e6cacf9a9385cce7e3e6a5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}