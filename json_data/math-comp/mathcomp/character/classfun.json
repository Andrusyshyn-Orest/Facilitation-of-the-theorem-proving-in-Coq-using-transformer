{
    "filename": "mathcomp/character/classfun.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrbool ssrfun eqtype ssrnat seq path div choice.",
            "VernacRequire",
            "28f7cc4746e8608411d0ebf22fadc6cf30a98194"
        ],
        [
            "From mathcomp Require Import fintype tuple finfun bigop prime ssralg poly finset.",
            "VernacRequire",
            "fab5cc7f7404dfb6565f6b962fccbe62aedbe140"
        ],
        [
            "From mathcomp Require Import fingroup morphism perm automorphism quotient finalg action.",
            "VernacRequire",
            "f7aa06ce69a2a83b2101824f34d6286c74fbb71d"
        ],
        [
            "From mathcomp Require Import gproduct zmodp commutator cyclic center pgroup sylow.",
            "VernacRequire",
            "1d70851403efd99e01f77c6e9618afa1ff1da1af"
        ],
        [
            "From mathcomp Require Import matrix vector falgebra ssrnum algC algnum.",
            "VernacRequire",
            "791e749fc2238da085f59adf5af501c1a9c82e83"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Import GroupScope GRing.Theory Num.Theory.",
            "VernacImport",
            "8d87fd9194cd0dee18ad3305b14d36d18908f225"
        ],
        [
            "Local Open Scope ring_scope.",
            "VernacOpenCloseScope",
            "fb9da4a291533574d328be8c8a69d90a14641928"
        ],
        [
            "Delimit Scope cfun_scope with CF.",
            "VernacDelimiters",
            "049e6519a5314268b7f3221600a8639b6e39e29f"
        ],
        [
            "Reserved Notation \"''CF' ( G , A )\" (at level 8, format \"''CF' ( G , A )\").",
            "VernacSyntaxExtension",
            "9a59aeb12dd37eead476a7f4860ff2fcef029427"
        ],
        [
            "Reserved Notation \"''CF' ( G )\" (at level 8, format \"''CF' ( G )\").",
            "VernacSyntaxExtension",
            "39c67e77f6e96d58c64c9c8492a80bba173cecab"
        ],
        [
            "Reserved Notation \"''1_' G\" (at level 8, G at level 2, format \"''1_' G\").",
            "VernacSyntaxExtension",
            "998d968b10a7a9831557643d2bf98feefb7ded51"
        ],
        [
            "Reserved Notation \"''Res[' H , G ]\" (at level 8, only parsing).",
            "VernacSyntaxExtension",
            "30cd85bdd784fa0ddf3cf2182c2cfb4da6848e98"
        ],
        [
            "Reserved Notation \"''Res[' H ]\" (at level 8, format \"''Res[' H ]\").",
            "VernacSyntaxExtension",
            "5e538b316e2457f3f722e11c8368312da7f68033"
        ],
        [
            "Reserved Notation \"''Res'\" (at level 8, only parsing).",
            "VernacSyntaxExtension",
            "ef127318c1d988cb748c97682b2040c7031ef599"
        ],
        [
            "Reserved Notation \"''Ind[' G , H ]\" (at level 8, only parsing).",
            "VernacSyntaxExtension",
            "81ddede0423bdad236a905e4aa4c2ef82c84c0da"
        ],
        [
            "Reserved Notation \"''Ind[' G ]\" (at level 8, format \"''Ind[' G ]\").",
            "VernacSyntaxExtension",
            "134f84918fe049d5cbc6412a0964e34e1a37484d"
        ],
        [
            "Reserved Notation \"''Ind'\" (at level 8, only parsing).",
            "VernacSyntaxExtension",
            "a812259205d9c27b228f16608e51484d17728a31"
        ],
        [
            "Reserved Notation \"'[ phi , psi ]_ G\" (at level 2, only parsing).",
            "VernacSyntaxExtension",
            "1ca6a46c0947b7d6c6196b9e9c3049b1fd4a010e"
        ],
        [
            "Reserved Notation \"'[ phi , psi ]\" (at level 2, format \"'[hv' ''[' phi , '/ ' psi ] ']'\").",
            "VernacSyntaxExtension",
            "6fbc371380a7fda4fa2c8ddc3d0ed7e81e5d7129"
        ],
        [
            "Reserved Notation \"'[ phi ]_ G\" (at level 2, only parsing).",
            "VernacSyntaxExtension",
            "596ecc7ae2cc7c9fe76adc946064f9f2102e746d"
        ],
        [
            "Reserved Notation \"'[ phi ]\" (at level 2, format \"''[' phi ]\").",
            "VernacSyntaxExtension",
            "a551ff966c9dbf66f47c31157dd169148afd4219"
        ],
        [
            "Reserved Notation \"phi ^u\" (at level 3, format \"phi ^u\").",
            "VernacSyntaxExtension",
            "35ce0f3db39c79400df96cc7de58f871cdce2e2e"
        ],
        [
            "Section AlgC.",
            "VernacBeginSection",
            "c4b3bbd2bb71634e8b3a653e6f7766b16aa27a3d"
        ],
        [
            "Variable (gT : finGroupType).",
            "VernacAssumption",
            "694477e88f23a3b7d6edaa9ed9d49ebe1ee92aa6"
        ],
        [
            "Implicit Types (G : {group gT}) (B : {set gT}).",
            "VernacReserve",
            "108bd9ff1ea28bb4fb2f1f9f011170d7ce45e749"
        ],
        [
            "Lemma neq0CG G : (#|G|)%:R != 0 :> algC.",
            "VernacStartTheoremProof",
            "c86c3a9b5a9b50b8a686fe837db205cdc631d28a"
        ],
        [
            "exact: natrG_neq0.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma neq0CiG G B : (#|G : B|)%:R != 0 :> algC.",
            "VernacStartTheoremProof",
            "b54cc4211156519e9c7e21aa611128eae8d5368c"
        ],
        [
            "exact: natr_indexg_neq0.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gt0CG G : 0 < #|G|%:R :> algC.",
            "VernacStartTheoremProof",
            "668195530c802ac395d19957bcbbce19cd940a28"
        ],
        [
            "exact: natrG_gt0.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gt0CiG G B : 0 < #|G : B|%:R :> algC.",
            "VernacStartTheoremProof",
            "219d57bb13b8d06709266b3511ffd54730f6108b"
        ],
        [
            "exact: natr_indexg_gt0.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma algC'G G : [char algC]^'.-group G.",
            "VernacStartTheoremProof",
            "c88cf162d4581204be99d7311c80ff6549740bb9"
        ],
        [
            "by apply/pgroupP=> p _; rewrite inE /= char_num.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End AlgC.",
            "VernacEndSegment",
            "b0e2bcb6b1f7f615b535deaa3179d343240dd714"
        ],
        [
            "Section Defs.",
            "VernacBeginSection",
            "0538f5188d53d77ea5d8ba0fff0a7cfc5485e666"
        ],
        [
            "Variable gT : finGroupType.",
            "VernacAssumption",
            "694477e88f23a3b7d6edaa9ed9d49ebe1ee92aa6"
        ],
        [
            "Definition is_class_fun (B : {set gT}) (f : {ffun gT -> algC}) := [forall x, forall y in B, f (x ^ y) == f x] && (support f \\subset B).",
            "VernacDefinition",
            "3668f4775bbfdfa6399aee2c21462e75c5a72fc9"
        ],
        [
            "Lemma intro_class_fun (G : {group gT}) f : {in G &, forall x y, f (x ^ y) = f x} -> (forall x, x \\notin G -> f x = 0) -> is_class_fun G (finfun f).",
            "VernacStartTheoremProof",
            "9d07128f1d5f70079db575b5f9dc646ec9c5a551"
        ],
        [
            "move=> fJ Gf; apply/andP; split; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/supportP=> x notAf; rewrite ffunE Gf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/'forall_eqfun_inP=> x y Gy; rewrite !ffunE.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by have [/fJ-> // | notGx] := boolP (x \\in G); rewrite !Gf ?groupJr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variable B : {set gT}.",
            "VernacAssumption",
            "f01720fe02eaf9f13ba2e882e7b2a570e1fa7b17"
        ],
        [
            "Local Notation G := <<B>>.",
            "VernacSyntacticDefinition",
            "a95cf71357b07290b01b1fcb761af850a32bc9df"
        ],
        [
            "Record classfun : predArgType := Classfun {cfun_val; _ : is_class_fun G cfun_val}.",
            "VernacInductive",
            "6f6a8ea8f94c702a993b5cc85f826a363f28c989"
        ],
        [
            "Implicit Types phi psi xi : classfun.",
            "VernacReserve",
            "1bc9561a2c1ef6d48239ffa049cc98fa7b5bad33"
        ],
        [
            "Fact classfun_key : unit.",
            "VernacStartTheoremProof",
            "20ab98ae7a4361cab4222f61c03f4652afc6657c"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Cfun := locked_with classfun_key (fun flag : nat => Classfun).",
            "VernacDefinition",
            "43e5eb244f68928fbe15361bc47d3011f07ec3c5"
        ],
        [
            "Canonical cfun_subType := Eval hnf in [subType for cfun_val].",
            "VernacDefinition",
            "74fd7c36b3593d509cb24524768231b9173e6e34"
        ],
        [
            "Definition cfun_eqMixin := Eval hnf in [eqMixin of classfun by <:].",
            "VernacDefinition",
            "4b29300831dc0784482342a62137954338055a97"
        ],
        [
            "Canonical cfun_eqType := Eval hnf in EqType classfun cfun_eqMixin.",
            "VernacDefinition",
            "64168fa8b4a812be9f22f3e613bf140a38009297"
        ],
        [
            "Definition cfun_choiceMixin := Eval hnf in [choiceMixin of classfun by <:].",
            "VernacDefinition",
            "d200a2845719d4ccd407f59ddc4b04cd6aab1b00"
        ],
        [
            "Canonical cfun_choiceType := Eval hnf in ChoiceType classfun cfun_choiceMixin.",
            "VernacDefinition",
            "e170adaa57036b6edd4064aa51dc2438d1e2954e"
        ],
        [
            "Definition fun_of_cfun phi := cfun_val phi : gT -> algC.",
            "VernacDefinition",
            "edc6de4ed724bc6c0780f025126a975a4935091e"
        ],
        [
            "Coercion fun_of_cfun : classfun >-> Funclass.",
            "VernacCoercion",
            "91c05941aa713f2676d6eeae791b5dcb2ceb77d1"
        ],
        [
            "Lemma cfunElock k f fP : @Cfun k (finfun f) fP =1 f.",
            "VernacStartTheoremProof",
            "0b2690bf7aaa3d3ebe4e2a50aff8317468ac5830"
        ],
        [
            "by rewrite locked_withE; apply: ffunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfunE f fP : @Cfun 0 (finfun f) fP =1 f.",
            "VernacStartTheoremProof",
            "04a091882c82a70fa7669c1f39239e25c766ead1"
        ],
        [
            "exact: cfunElock.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfunP phi psi : phi =1 psi <-> phi = psi.",
            "VernacStartTheoremProof",
            "74a8cd524453b684456d6be06a87ba0b8fd11ab7"
        ],
        [
            "by split=> [/ffunP/val_inj | ->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfun0gen phi x : x \\notin G -> phi x = 0.",
            "VernacStartTheoremProof",
            "63626f9bca10bf6563bc6c221a03ba1b867b7f9a"
        ],
        [
            "by case: phi => f fP; case: (andP fP) => _ /supportP; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfun_in_genP phi psi : {in G, phi =1 psi} -> phi = psi.",
            "VernacStartTheoremProof",
            "503bb8fb9edb25624025769ab3d73fa81abc9617"
        ],
        [
            "move=> eq_phi; apply/cfunP=> x.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by have [/eq_phi-> // | notAx] := boolP (x \\in G); rewrite !cfun0gen.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfunJgen phi x y : y \\in G -> phi (x ^ y) = phi x.",
            "VernacStartTheoremProof",
            "d762dfb1a15303311a68d0ea794798ee82066bf1"
        ],
        [
            "case: phi => f fP Gy; apply/eqP.",
            "VernacExtend",
            "d62e4c271de3f2a9ff5062b8b89d3c57d965c518"
        ],
        [
            "by case: (andP fP) => /'forall_forall_inP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact cfun_zero_subproof : is_class_fun G (0 : {ffun _}).",
            "VernacStartTheoremProof",
            "6c0f0473af314e1e1c50f2df72ff6db4395a0571"
        ],
        [
            "exact: intro_class_fun.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cfun_zero := Cfun 0 cfun_zero_subproof.",
            "VernacDefinition",
            "91f6825bebd15cb5c79ec6748d8472089299dc97"
        ],
        [
            "Fact cfun_comp_subproof f phi : f 0 = 0 -> is_class_fun G [ffun x => f (phi x)].",
            "VernacStartTheoremProof",
            "4137e9a91ef4561a077d0d4cae76ff259e45cee6"
        ],
        [
            "by move=> f0; apply: intro_class_fun => [x y _ /cfunJgen | x /cfun0gen] ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cfun_comp f f0 phi := Cfun 0 (@cfun_comp_subproof f phi f0).",
            "VernacDefinition",
            "6bcf6f7d0324fdc0342b004da02cda3438ca5450"
        ],
        [
            "Definition cfun_opp := cfun_comp (oppr0 _).",
            "VernacDefinition",
            "f4c82f2c719cbd7176b5215957c3f13391d97de7"
        ],
        [
            "Fact cfun_add_subproof phi psi : is_class_fun G [ffun x => phi x + psi x].",
            "VernacStartTheoremProof",
            "e5f0f1f3dd6fa83a79a4a09228d5a8e1b18fcff5"
        ],
        [
            "apply: intro_class_fun => [x y Gx Gy | x notGx]; rewrite ?cfunJgen //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite !cfun0gen ?add0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cfun_add phi psi := Cfun 0 (cfun_add_subproof phi psi).",
            "VernacDefinition",
            "2d3e5b5350060877dabb6904b4e759290c130dc8"
        ],
        [
            "Fact cfun_indicator_subproof (A : {set gT}) : is_class_fun G [ffun x => ((x \\in G) && (x ^: G \\subset A))%:R].",
            "VernacStartTheoremProof",
            "ce1f17f3e8f03ecd85d6a1b2edb8e1f36d2acc17"
        ],
        [
            "apply: intro_class_fun => [x y Gx Gy | x /negbTE/= -> //].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite groupJr ?classGidl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cfun_indicator A := Cfun 1 (cfun_indicator_subproof A).",
            "VernacDefinition",
            "59c0d70efbfa84d5054a2bfb6aecec62ae690699"
        ],
        [
            "Local Notation \"''1_' A\" := (cfun_indicator A) : ring_scope.",
            "VernacNotation",
            "8b1c61bfa6da87dbc0e4065333c27451507bdfde"
        ],
        [
            "Lemma cfun1Egen x : '1_G x = (x \\in G)%:R.",
            "VernacStartTheoremProof",
            "e000bef24893759fec98be18544ee64799c59221"
        ],
        [
            "by rewrite cfunElock andb_idr // => /class_subG->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact cfun_mul_subproof phi psi : is_class_fun G [ffun x => phi x * psi x].",
            "VernacStartTheoremProof",
            "5ce344c768606fc8ac18dd41f5d550c5e95931b1"
        ],
        [
            "apply: intro_class_fun => [x y Gx Gy | x notGx]; rewrite ?cfunJgen //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite cfun0gen ?mul0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cfun_mul phi psi := Cfun 0 (cfun_mul_subproof phi psi).",
            "VernacDefinition",
            "bd7d3fd7e9d62a182d48b7a9188af7b0a3a37562"
        ],
        [
            "Definition cfun_unit := [pred phi : classfun | [forall x in G, phi x != 0]].",
            "VernacDefinition",
            "3b43e2627b4c040e80510d2aa62bff1155a4d595"
        ],
        [
            "Definition cfun_inv phi := if phi \\in cfun_unit then cfun_comp (invr0 _) phi else phi.",
            "VernacDefinition",
            "c36f7389ba0184a7c30285ca0e23d887d5ce5134"
        ],
        [
            "Definition cfun_scale a := cfun_comp (mulr0 a).",
            "VernacDefinition",
            "9d1804deec4ad33cf11d042c4f0258425e25e632"
        ],
        [
            "Fact cfun_addA : associative cfun_add.",
            "VernacStartTheoremProof",
            "2ca3ac1c1503b9df46f0519dc7efcb598fa9e838"
        ],
        [
            "by move=> phi psi xi; apply/cfunP=> x; rewrite !cfunE addrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact cfun_addC : commutative cfun_add.",
            "VernacStartTheoremProof",
            "1b3d08cb2e2b9bbea3b105921d20b57e563cd3cc"
        ],
        [
            "by move=> phi psi; apply/cfunP=> x; rewrite !cfunE addrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact cfun_add0 : left_id cfun_zero cfun_add.",
            "VernacStartTheoremProof",
            "5402757d11efce43cd1dda1fdb8a3e5efe52a5c3"
        ],
        [
            "by move=> phi; apply/cfunP=> x; rewrite !cfunE add0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact cfun_addN : left_inverse cfun_zero cfun_opp cfun_add.",
            "VernacStartTheoremProof",
            "7defe77ef00081dda8da584f7638ccff41cb095c"
        ],
        [
            "by move=> phi; apply/cfunP=> x; rewrite !cfunE addNr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cfun_zmodMixin := ZmodMixin cfun_addA cfun_addC cfun_add0 cfun_addN.",
            "VernacDefinition",
            "d8c75f9b5b86684976f18a6f70a494113d501e63"
        ],
        [
            "Canonical cfun_zmodType := ZmodType classfun cfun_zmodMixin.",
            "VernacDefinition",
            "d490a217e7a701955efeba4b460477b923e565a1"
        ],
        [
            "Lemma muln_cfunE phi n x : (phi *+ n) x = phi x *+ n.",
            "VernacStartTheoremProof",
            "02e0d9066462fce151ea21da7017bea494695fac"
        ],
        [
            "by elim: n => [|n IHn]; rewrite ?mulrS !cfunE ?IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sum_cfunE I r (P : pred I) (phi : I -> classfun) x : (\\sum_(i <- r | P i) phi i) x = \\sum_(i <- r | P i) (phi i) x.",
            "VernacStartTheoremProof",
            "1e3abe9638e03eb021369886333fb913c7944924"
        ],
        [
            "by elim/big_rec2: _ => [|i _ psi _ <-]; rewrite cfunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact cfun_mulA : associative cfun_mul.",
            "VernacStartTheoremProof",
            "bfc89273dd88f04b9314c70ddd38b92eb5ffcf0e"
        ],
        [
            "by move=> phi psi xi; apply/cfunP=> x; rewrite !cfunE mulrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact cfun_mulC : commutative cfun_mul.",
            "VernacStartTheoremProof",
            "40e7ff1b7740813cad9a28e3dad5e62a6208e44e"
        ],
        [
            "by move=> phi psi; apply/cfunP=> x; rewrite !cfunE mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact cfun_mul1 : left_id '1_G cfun_mul.",
            "VernacStartTheoremProof",
            "f0b5c499d1af890c301313d9cc7048ac64ffce15"
        ],
        [
            "by move=> phi; apply: cfun_in_genP => x Gx; rewrite !cfunE cfun1Egen Gx mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact cfun_mulD : left_distributive cfun_mul cfun_add.",
            "VernacStartTheoremProof",
            "060501c24ee576dbeeae6418744796531dce75b5"
        ],
        [
            "by move=> phi psi xi; apply/cfunP=> x; rewrite !cfunE mulrDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact cfun_nz1 : '1_G != 0.",
            "VernacStartTheoremProof",
            "97dfb8e56b8ebbd7ad1985e7d67a89f5347f52c2"
        ],
        [
            "by apply/eqP=> /cfunP/(_ 1%g)/eqP; rewrite cfun1Egen cfunE group1 oner_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cfun_ringMixin := ComRingMixin cfun_mulA cfun_mulC cfun_mul1 cfun_mulD cfun_nz1.",
            "VernacDefinition",
            "6346198a1fc2f9de1ae9eaed5238ceb6a3718d87"
        ],
        [
            "Canonical cfun_ringType := RingType classfun cfun_ringMixin.",
            "VernacDefinition",
            "ca4e55de7ae4ad9f678ff837bce6f80b5771dc60"
        ],
        [
            "Canonical cfun_comRingType := ComRingType classfun cfun_mulC.",
            "VernacDefinition",
            "5fdd7cbacb716aa703ff923b09a2858e910b1ed6"
        ],
        [
            "Lemma expS_cfunE phi n x : (phi ^+ n.+1) x = phi x ^+ n.+1.",
            "VernacStartTheoremProof",
            "bf2d3828db2c1387b54d627fb468e9cd18671477"
        ],
        [
            "by elim: n => //= n IHn; rewrite !cfunE IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact cfun_mulV : {in cfun_unit, left_inverse 1 cfun_inv *%R}.",
            "VernacStartTheoremProof",
            "b278c769676f8008f1073c45ebab841a77099663"
        ],
        [
            "move=> phi Uphi; rewrite /cfun_inv Uphi; apply/cfun_in_genP=> x Gx.",
            "VernacExtend",
            "0fa388cebe8ed6372154caa26cd10c357f123670"
        ],
        [
            "by rewrite !cfunE cfun1Egen Gx mulVf ?(forall_inP Uphi).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact cfun_unitP phi psi : psi * phi = 1 -> phi \\in cfun_unit.",
            "VernacStartTheoremProof",
            "80bda6dbbaea0e1b79d81529049a470a90a16b52"
        ],
        [
            "move/cfunP=> phiK; apply/forall_inP=> x Gx; rewrite -unitfE; apply/unitrP.",
            "VernacExtend",
            "42e188f64c1b305ed274c1704aedbf73891c3017"
        ],
        [
            "by exists (psi x); have:= phiK x; rewrite !cfunE cfun1Egen Gx mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact cfun_inv0id : {in [predC cfun_unit], cfun_inv =1 id}.",
            "VernacStartTheoremProof",
            "38d7e38647ed86b065972b83b2f7a35552599b7c"
        ],
        [
            "by rewrite /cfun_inv => phi /negbTE/= ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cfun_unitMixin := ComUnitRingMixin cfun_mulV cfun_unitP cfun_inv0id.",
            "VernacDefinition",
            "e0c32ae3d072dd9151bfa6b99016e4f482dfffc1"
        ],
        [
            "Canonical cfun_unitRingType := UnitRingType classfun cfun_unitMixin.",
            "VernacDefinition",
            "d2f5d146738f246139db68b0473c45301461fb50"
        ],
        [
            "Canonical cfun_comUnitRingType := [comUnitRingType of classfun].",
            "VernacDefinition",
            "4a46f1b855a9d6fa15b69ec29e8de163bba8c82a"
        ],
        [
            "Fact cfun_scaleA a b phi : cfun_scale a (cfun_scale b phi) = cfun_scale (a * b) phi.",
            "VernacStartTheoremProof",
            "a3f737756bdf920a8cadb465f9f0396ebf64afaf"
        ],
        [
            "by apply/cfunP=> x; rewrite !cfunE mulrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact cfun_scale1 : left_id 1 cfun_scale.",
            "VernacStartTheoremProof",
            "80040de6b3dcf091b9365cbb9eb9eeca7b005072"
        ],
        [
            "by move=> phi; apply/cfunP=> x; rewrite !cfunE mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact cfun_scaleDr : right_distributive cfun_scale +%R.",
            "VernacStartTheoremProof",
            "a618a84fb2fd201899c247c4efd0c063824a59bf"
        ],
        [
            "by move=> a phi psi; apply/cfunP=> x; rewrite !cfunE mulrDr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact cfun_scaleDl phi : {morph cfun_scale^~ phi : a b / a + b}.",
            "VernacStartTheoremProof",
            "415c31b7290b51bf31052efa1d87ee97c7df7e3e"
        ],
        [
            "by move=> a b; apply/cfunP=> x; rewrite !cfunE mulrDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cfun_lmodMixin := LmodMixin cfun_scaleA cfun_scale1 cfun_scaleDr cfun_scaleDl.",
            "VernacDefinition",
            "97f79bbb4e8fd42ec1b3b431d48e23860c996c8b"
        ],
        [
            "Canonical cfun_lmodType := LmodType algC classfun cfun_lmodMixin.",
            "VernacDefinition",
            "344dffe64e50f6ae21725989cd3699834e100f07"
        ],
        [
            "Fact cfun_scaleAl a phi psi : a *: (phi * psi) = (a *: phi) * psi.",
            "VernacStartTheoremProof",
            "b34465064069eab582b75f31b89db42958e3e5db"
        ],
        [
            "by apply/cfunP=> x; rewrite !cfunE mulrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact cfun_scaleAr a phi psi : a *: (phi * psi) = phi * (a *: psi).",
            "VernacStartTheoremProof",
            "d43ca1ab5900f368a3dc310420b8d376200f813b"
        ],
        [
            "by rewrite !(mulrC phi) cfun_scaleAl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical cfun_lalgType := LalgType algC classfun cfun_scaleAl.",
            "VernacDefinition",
            "3a3ff9addb37381c6e767070f8aa65c127f79654"
        ],
        [
            "Canonical cfun_algType := AlgType algC classfun cfun_scaleAr.",
            "VernacDefinition",
            "c0c0b5dc424920ca0972e4ac1018ef9c017f58ec"
        ],
        [
            "Canonical cfun_unitAlgType := [unitAlgType algC of classfun].",
            "VernacDefinition",
            "79ba36c848449998680f53086c4273e290b281d9"
        ],
        [
            "Section Automorphism.",
            "VernacBeginSection",
            "1a7607070d355e3ba48037c7c80b39ac343dcc7a"
        ],
        [
            "Variable u : {rmorphism algC -> algC}.",
            "VernacAssumption",
            "2d1c498729d3ab3c00a5b0f3435e1cf0f7462e74"
        ],
        [
            "Definition cfAut := cfun_comp (rmorph0 u).",
            "VernacDefinition",
            "3b731145a9b17168902b6e944298ba8cf6bf1295"
        ],
        [
            "Lemma cfAut_cfun1i A : cfAut '1_A = '1_A.",
            "VernacStartTheoremProof",
            "b688688aac234ee73eba1b2904cb00f25ede2506"
        ],
        [
            "by apply/cfunP=> x; rewrite !cfunElock rmorph_nat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfAutZ a phi : cfAut (a *: phi) = u a *: cfAut phi.",
            "VernacStartTheoremProof",
            "e474ea66b70d862b5a8f2778f0848dbbe3c835cf"
        ],
        [
            "by apply/cfunP=> x; rewrite !cfunE rmorphM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfAut_is_rmorphism : rmorphism cfAut.",
            "VernacStartTheoremProof",
            "ecdb0b12325c24487c88e7d3cb3677bebd56b34e"
        ],
        [
            "by do 2?split=> [phi psi|]; apply/cfunP=> x; rewrite ?cfAut_cfun1i // !cfunE (rmorphB, rmorphM).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical cfAut_additive := Additive cfAut_is_rmorphism.",
            "VernacDefinition",
            "64018c6541ffc9788e438878d267b138aedcc4e4"
        ],
        [
            "Canonical cfAut_rmorphism := RMorphism cfAut_is_rmorphism.",
            "VernacDefinition",
            "9d256bd8a8a224313b86f5b509fc6d78d2cb3eb0"
        ],
        [
            "Lemma cfAut_cfun1 : cfAut 1 = 1.",
            "VernacStartTheoremProof",
            "379fe6f9b52f544d758c3646f123db896171d5ce"
        ],
        [
            "exact: rmorph1.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfAut_scalable : scalable_for (u \\; *:%R) cfAut.",
            "VernacStartTheoremProof",
            "e6a44c266e8d2d19df8e99dce974fb401655dbdb"
        ],
        [
            "by move=> a phi; apply/cfunP=> x; rewrite !cfunE rmorphM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical cfAut_linear := AddLinear cfAut_scalable.",
            "VernacDefinition",
            "61943a64c2f8e331dce9b895a2cc0b6d5b0519f2"
        ],
        [
            "Canonical cfAut_lrmorphism := [lrmorphism of cfAut].",
            "VernacDefinition",
            "539f992c573d1a6c3164f8dd2123c6e0615aa00a"
        ],
        [
            "Definition cfAut_closed (S : seq classfun) := {in S, forall phi, cfAut phi \\in S}.",
            "VernacDefinition",
            "5ee575b2e27a9db2d8d521cc7c51b38d31a7015e"
        ],
        [
            "End Automorphism.",
            "VernacEndSegment",
            "01df54af9c5eda8ed3e956acd613a21191efd780"
        ],
        [
            "Definition cfReal phi := cfAut conjC phi == phi.",
            "VernacDefinition",
            "c13edb3b5940aa2142e44140119ffcb9f3645fc6"
        ],
        [
            "Definition cfConjC_subset (S1 S2 : seq classfun) := [/\\ uniq S1, {subset S1 <= S2} & cfAut_closed conjC S1].",
            "VernacDefinition",
            "865139473a3a2b29bd836c0eeb1ded896f2d218e"
        ],
        [
            "Fact cfun_vect_iso : Vector.axiom #|classes G| classfun.",
            "VernacStartTheoremProof",
            "4e2ad7c254431362fafc350df8e7981667fc8e0c"
        ],
        [
            "exists (fun phi => \\row_i phi (repr (enum_val i))) => [a phi psi|].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by apply/rowP=> i; rewrite !(mxE, cfunE).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "set n := #|_|; pose eK x : 'I_n := enum_rank_in (classes1 _) (x ^: G).",
            "VernacExtend",
            "dda58a04ca4da9adf6d016079f462c4d6ff69ca8"
        ],
        [
            "have rV2vP v : is_class_fun G [ffun x => v (eK x) *+ (x \\in G)].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: intro_class_fun => [x y Gx Gy | x /negbTE/=-> //].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite groupJr // /eK classGidl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (fun v : 'rV_n => Cfun 0 (rV2vP (v 0))) => [phi | v].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply/cfun_in_genP=> x Gx; rewrite cfunE Gx mxE enum_rankK_in ?mem_classes //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by have [y Gy ->] := repr_class <<B>> x; rewrite cfunJgen.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/rowP=> i; rewrite mxE cfunE; have /imsetP[x Gx def_i] := enum_valP i.",
            "VernacExtend",
            "88e21057fc6b7102e6280fe7858222ef45ddbdf0"
        ],
        [
            "rewrite def_i; have [y Gy ->] := repr_class <<B>> x.",
            "VernacExtend",
            "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
        ],
        [
            "by rewrite groupJ // /eK classGidl // -def_i enum_valK_in.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cfun_vectMixin := VectMixin cfun_vect_iso.",
            "VernacDefinition",
            "b6429355d825339dd0061be104af29ccaaf8b02a"
        ],
        [
            "Canonical cfun_vectType := VectType algC classfun cfun_vectMixin.",
            "VernacDefinition",
            "5ffb1bafc9368bb6c6e35e419ba6247d46f84872"
        ],
        [
            "Canonical cfun_FalgType := [FalgType algC of classfun].",
            "VernacDefinition",
            "a51d2c77d0d9d7c501efb8fed44a933b12986373"
        ],
        [
            "Definition cfun_base A : #|classes B ::&: A|.-tuple classfun := [tuple of [seq '1_xB | xB in classes B ::&: A]].",
            "VernacDefinition",
            "a071c9db58e71ca591941849c29c636b7e5d5759"
        ],
        [
            "Definition classfun_on A := <<cfun_base A>>%VS.",
            "VernacDefinition",
            "967e0efd1e70712b393b77ad4796e92af6463d30"
        ],
        [
            "Definition cfdot phi psi := #|B|%:R^-1 * \\sum_(x in B) phi x * (psi x)^*.",
            "VernacDefinition",
            "66062452f31ee6ac120347b39c73366cbbc56059"
        ],
        [
            "Definition cfdotr_head k psi phi := let: tt := k in cfdot phi psi.",
            "VernacDefinition",
            "f444d9b73fd4caf315e4fa938ccbc6927403fb8f"
        ],
        [
            "Definition cfnorm_head k phi := let: tt := k in cfdot phi phi.",
            "VernacDefinition",
            "ca5e0c0593695b4885e6538c104313de93986593"
        ],
        [
            "Coercion seq_of_cfun phi := [:: phi].",
            "VernacDefinition",
            "f1fc545c2353f5f6e02dcf5ff733e21fc1b1f29e"
        ],
        [
            "Definition cforder phi := \\big[lcmn/1%N]_(x in <<B>>) #[phi x]%C.",
            "VernacDefinition",
            "7419711a493b8a004caae02428553882815c3981"
        ],
        [
            "End Defs.",
            "VernacEndSegment",
            "e5c42fff3384ffa717a0ec819d3b7eaff5043179"
        ],
        [
            "Bind Scope cfun_scope with classfun.",
            "VernacBindScope",
            "90fc5be89001cd8e3ecec827395ae207b2884050"
        ],
        [
            "Arguments classfun {gT} B%g.",
            "VernacArguments",
            "dc72c90f684c9818e7cf3f6739d2867f42cb665a"
        ],
        [
            "Arguments classfun_on {gT} B%g A%g.",
            "VernacArguments",
            "bcac9faacd72ddf297add1bc38d49d2410740ecf"
        ],
        [
            "Arguments cfun_indicator {gT} B%g.",
            "VernacArguments",
            "1e10201df55cc694605abfb687ed294ff8d8b47f"
        ],
        [
            "Arguments cfAut {gT B%g} u phi%CF.",
            "VernacArguments",
            "55ac778b04e57c53079b6f2808efc9a55f416edc"
        ],
        [
            "Arguments cfReal {gT B%g} phi%CF.",
            "VernacArguments",
            "d6401e39686bb168c100841cc99b275e7498a814"
        ],
        [
            "Arguments cfdot {gT B%g} phi%CF psi%CF.",
            "VernacArguments",
            "0d9a4fb4af252bf09c17958654c19b55e342a282"
        ],
        [
            "Arguments cfdotr_head {gT B%g} k psi%CF phi%CF.",
            "VernacArguments",
            "e6a12a47f83bd5c49c816a511ff7b274901ed580"
        ],
        [
            "Notation \"''CF' ( G )\" := (classfun G) : type_scope.",
            "VernacNotation",
            "9c353556b7a487f88178eeb184af5d0030f928a6"
        ],
        [
            "Notation \"''CF' ( G )\" := (@fullv _ (cfun_vectType G)) : vspace_scope.",
            "VernacNotation",
            "80172d3a468b0756e4ed46123d009055839bfc91"
        ],
        [
            "Notation \"''1_' A\" := (cfun_indicator _ A) : ring_scope.",
            "VernacNotation",
            "83359a9ddebda87fae8327e7b220b3dd80f53680"
        ],
        [
            "Notation \"''CF' ( G , A )\" := (classfun_on G A) : ring_scope.",
            "VernacNotation",
            "8b6aff68be61ccf6b86167cf6bf067075b1fc929"
        ],
        [
            "Notation \"1\" := (@GRing.one (cfun_ringType _)) (only parsing) : cfun_scope.",
            "VernacNotation",
            "fa0699a5a411c8000ee9a16da69807fb1be29288"
        ],
        [
            "Notation \"phi ^*\" := (cfAut conjC phi) : cfun_scope.",
            "VernacNotation",
            "bdfbf7a717c759b812bcce60e64b4c7c022502fc"
        ],
        [
            "Notation cfConjC_closed := (cfAut_closed conjC).",
            "VernacSyntacticDefinition",
            "1efc113c7d0efcefc6da46c4dc20ee283d690b50"
        ],
        [
            "Prenex Implicits cfReal.",
            "VernacExtend",
            "b27e2cdba5d13ad917709c13ac4b09684f5efc78"
        ],
        [
            "Notation eqcfP := (@eqP (cfun_eqType _) _ _) (only parsing).",
            "VernacSyntacticDefinition",
            "72b96bba32c31d40ac469dca14dacd139d8dd722"
        ],
        [
            "Notation \"#[ phi ]\" := (cforder phi) : cfun_scope.",
            "VernacNotation",
            "9ee5c30a8693dc1b572916a77a737f2dc039f53c"
        ],
        [
            "Notation \"''[' u , v ]_ G\":= (@cfdot _ G u v) (only parsing) : ring_scope.",
            "VernacNotation",
            "86e8f08a2a77f8653021ea9a938681ba95b51c82"
        ],
        [
            "Notation \"''[' u , v ]\" := (cfdot u v) : ring_scope.",
            "VernacNotation",
            "360ad15ede2b721d7725bca1d06774e01ae15b4c"
        ],
        [
            "Notation \"''[' u ]_ G\" := '[u, u]_G (only parsing) : ring_scope.",
            "VernacNotation",
            "dcbfc2e885e2b1a6a65d7e407677244667621ca0"
        ],
        [
            "Notation \"''[' u ]\" := '[u, u] : ring_scope.",
            "VernacNotation",
            "89130ea3713269e588f25d5f60cd4b36b19a5871"
        ],
        [
            "Notation cfdotr := (cfdotr_head tt).",
            "VernacSyntacticDefinition",
            "2dd871662de2441060bc473787c4dc8cbb77ff4f"
        ],
        [
            "Notation cfnorm := (cfnorm_head tt).",
            "VernacSyntacticDefinition",
            "49dc01a861a4e4d08a7dd34572f7d4dfc7fc0144"
        ],
        [
            "Section Predicates.",
            "VernacBeginSection",
            "9df9f8e47ebf8f05e97818dc41a6decf2caadceb"
        ],
        [
            "Variables (gT rT : finGroupType) (D : {set gT}) (R : {set rT}).",
            "VernacAssumption",
            "50cd4b9379a151106d4a3e3c64dba9e0b0bc795f"
        ],
        [
            "Implicit Types (phi psi : 'CF(D)) (S : seq 'CF(D)) (tau : 'CF(D) -> 'CF(R)).",
            "VernacReserve",
            "78b355bf4c25aa99bd28890a0bc95d69a33e325b"
        ],
        [
            "Definition cfker phi := [set x in D | [forall y, phi (x * y)%g == phi y]].",
            "VernacDefinition",
            "402322082f4c196945bb142d1354a0c32eabbd7f"
        ],
        [
            "Definition cfaithful phi := cfker phi \\subset [1].",
            "VernacDefinition",
            "338cd6bf42e99a2290ccf0be18c94f40a4122340"
        ],
        [
            "Definition ortho_rec S1 S2 := all [pred phi | all [pred psi | '[phi, psi] == 0] S2] S1.",
            "VernacDefinition",
            "994c3204de03f84f42ed3191e2b2e9a2b9492aef"
        ],
        [
            "Fixpoint pair_ortho_rec S := if S is psi :: S' then ortho_rec psi S' && pair_ortho_rec S' else true.",
            "VernacFixpoint",
            "0c439f8b093e8d2bad036e8dc2feff0e7e0dd87c"
        ],
        [
            "Definition pairwise_orthogonal S := (0 \\notin S) && pair_ortho_rec S.",
            "VernacDefinition",
            "fc3257181980290c2149e6e8ade8cee33469e8c2"
        ],
        [
            "Definition orthonormal S := all [pred psi | '[psi] == 1] S && pair_ortho_rec S.",
            "VernacDefinition",
            "839f24b952f1f57b861998101e2fe0c117c7206d"
        ],
        [
            "Definition isometry tau := forall phi psi, '[tau phi, tau psi] = '[phi, psi].",
            "VernacDefinition",
            "02d0cf58fe8eba106e618b621287450029f03c2f"
        ],
        [
            "Definition isometry_from_to mCFD tau mCFR := prop_in2 mCFD (inPhantom (isometry tau)) /\\ prop_in1 mCFD (inPhantom (forall phi, in_mem (tau phi) mCFR)).",
            "VernacDefinition",
            "a212cc592cd7970e477a665036230a7e8ea28f4e"
        ],
        [
            "End Predicates.",
            "VernacEndSegment",
            "ecbe5da6427239d32e444fa4d516db31ac039acd"
        ],
        [
            "Definition orthogonal gT D S1 S2 := nosimpl (@ortho_rec gT D S1 S2).",
            "VernacDefinition",
            "f4fba19047e07629002e4ea3e64ace8cb844f425"
        ],
        [
            "Arguments cfker {gT D%g} phi%CF.",
            "VernacArguments",
            "7e1ca8ad0945a2355f9274b4600327ba83c98313"
        ],
        [
            "Arguments cfaithful {gT D%g} phi%CF.",
            "VernacArguments",
            "3c266b323a8b2825a03cb15a06ea9f34312c85ba"
        ],
        [
            "Arguments orthogonal {gT D%g} S1%CF S2%CF.",
            "VernacArguments",
            "6263641e0b9c738f10109d04cef2ef22c0b5e6f6"
        ],
        [
            "Arguments pairwise_orthogonal {gT D%g} S%CF.",
            "VernacArguments",
            "f94a3f5fde8f19a469c770200174dfcc20b03281"
        ],
        [
            "Arguments orthonormal {gT D%g} S%CF.",
            "VernacArguments",
            "da898045d6762ede4a75a45d762b856c0db917b6"
        ],
        [
            "Arguments isometry {gT rT D%g R%g} tau%CF.",
            "VernacArguments",
            "0de1ea0a1e8eda8c104042dfb61c5b31fe58b75b"
        ],
        [
            "Notation \"{ 'in' CFD , 'isometry' tau , 'to' CFR }\" := (isometry_from_to (mem CFD) tau (mem CFR)) (at level 0, format \"{ 'in' CFD , 'isometry' tau , 'to' CFR }\") : type_scope.",
            "VernacNotation",
            "fbd5eee4dd66e628edaa1f50c331101363905d86"
        ],
        [
            "Section ClassFun.",
            "VernacBeginSection",
            "7fcbdf148c55ce5b6021d7482da1e49bc93d5d73"
        ],
        [
            "Variables (gT : finGroupType) (G : {group gT}).",
            "VernacAssumption",
            "26cb7d9f8ae434831772d6c107d7cf3e4590cb48"
        ],
        [
            "Implicit Types (A B : {set gT}) (H K : {group gT}) (phi psi xi : 'CF(G)).",
            "VernacReserve",
            "4cd80fe5d181070aa552f95242b55b9a6a4b3ba2"
        ],
        [
            "Local Notation \"''1_' A\" := (cfun_indicator G A).",
            "VernacNotation",
            "8bf396446b0aed7b85a40cec3335bd8ddc0b70dd"
        ],
        [
            "Lemma cfun0 phi x : x \\notin G -> phi x = 0.",
            "VernacStartTheoremProof",
            "22c51886e04ad18ff250e42261ab8e4ae9fc2b6b"
        ],
        [
            "by rewrite -{1}(genGid G) => /(cfun0gen phi).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma support_cfun phi : support phi \\subset G.",
            "VernacStartTheoremProof",
            "8b35f3a710bf5d509c840d8080514099bee5592a"
        ],
        [
            "by apply/subsetP=> g; apply: contraR => /cfun0->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfunJ phi x y : y \\in G -> phi (x ^ y) = phi x.",
            "VernacStartTheoremProof",
            "84beb15ce07a514a58d1c004665fbb895858a521"
        ],
        [
            "by rewrite -{1}(genGid G) => /(cfunJgen phi)->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfun_repr phi x : phi (repr (x ^: G)) = phi x.",
            "VernacStartTheoremProof",
            "445806ef959267c685b7ca1e37ea08a2e1b3bd2d"
        ],
        [
            "by have [y Gy ->] := repr_class G x; apply: cfunJ.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfun_inP phi psi : {in G, phi =1 psi} -> phi = psi.",
            "VernacStartTheoremProof",
            "ac4b90904daac33eeb6905171646634d1c3496e2"
        ],
        [
            "by rewrite -{1}genGid => /cfun_in_genP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfuniE A x : A <| G -> '1_A x = (x \\in A)%:R.",
            "VernacStartTheoremProof",
            "c984eba3dde1fb7432fce8876228f68cb359e949"
        ],
        [
            "case/andP=> sAG nAG; rewrite cfunElock genGid.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by rewrite class_sub_norm // andb_idl // => /(subsetP sAG).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma support_cfuni A : A <| G -> support '1_A =i A.",
            "VernacStartTheoremProof",
            "e1c2205179c9c5f4120f6249460d1174e7bd686b"
        ],
        [
            "by move=> nsAG x; rewrite !inE cfuniE // pnatr_eq0 -lt0n lt0b.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_mul_cfuni A phi : A <| G -> {in A, phi * '1_A =1 phi}.",
            "VernacStartTheoremProof",
            "7475b53eff97637a52636b60f430de3e419112f2"
        ],
        [
            "by move=> nsAG x Ax; rewrite cfunE cfuniE // Ax mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_cfuni A : A <| G -> {in A, '1_A =1 (1 : 'CF(G))}.",
            "VernacStartTheoremProof",
            "8e9ce8e03a250c551a5d0cabeb305c0be804c13e"
        ],
        [
            "by rewrite -['1_A]mul1r; apply: eq_mul_cfuni.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfuniG : '1_G = 1.",
            "VernacStartTheoremProof",
            "5f59b473893e582c53a7a23bf810efe323bbc8e8"
        ],
        [
            "by rewrite -[G in '1_G]genGid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfun1E g : (1 : 'CF(G)) g = (g \\in G)%:R.",
            "VernacStartTheoremProof",
            "39ca7ba5d779886580f410762b37b30270dc2c8a"
        ],
        [
            "by rewrite -cfuniG cfuniE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfun11 : (1 : 'CF(G)) 1%g = 1.",
            "VernacStartTheoremProof",
            "94fff54fa6286972363dfff35b770d6560c9f047"
        ],
        [
            "by rewrite cfun1E group1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prod_cfunE I r (P : pred I) (phi : I -> 'CF(G)) x : x \\in G -> (\\prod_(i <- r | P i) phi i) x = \\prod_(i <- r | P i) (phi i) x.",
            "VernacStartTheoremProof",
            "765f61b816b7c14e06e15a699b5e3de915ededbf"
        ],
        [
            "by move=> Gx; elim/big_rec2: _ => [|i _ psi _ <-]; rewrite ?cfunE ?cfun1E ?Gx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exp_cfunE phi n x : x \\in G -> (phi ^+ n) x = phi x ^+ n.",
            "VernacStartTheoremProof",
            "e5b55c1465d2e41ddda2d38545d55d4d81106419"
        ],
        [
            "by rewrite -[n]card_ord -!prodr_const; apply: prod_cfunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mul_cfuni A B : '1_A * '1_B = '1_(A :&: B) :> 'CF(G).",
            "VernacStartTheoremProof",
            "a94357404389b3e0c894a0824509db192badd70a"
        ],
        [
            "apply/cfunP=> g; rewrite !cfunElock -natrM mulnb subsetI.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite andbCA !andbA andbb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfun_classE x y : '1_(x ^: G) y = ((x \\in G) && (y \\in x ^: G))%:R.",
            "VernacStartTheoremProof",
            "cd856ca906aad4d0f3530c678671d75535cc4528"
        ],
        [
            "rewrite cfunElock genGid class_sub_norm ?class_norm //; congr (_ : bool)%:R.",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by apply: andb_id2r => /imsetP[z Gz ->]; rewrite groupJr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfun_on_sum A : 'CF(G, A) = (\\sum_(xG in classes G | xG \\subset A) <['1_xG]>)%VS.",
            "VernacStartTheoremProof",
            "93564bdc1854f740fef2b1590489116893e8ab3a"
        ],
        [
            "rewrite ['CF(G, A)]span_def big_map big_filter.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: eq_bigl => xG; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfun_onP A phi : reflect (forall x, x \\notin A -> phi x = 0) (phi \\in 'CF(G, A)).",
            "VernacStartTheoremProof",
            "9162947c467ce7d095f4eea12b7db51a84f073c2"
        ],
        [
            "apply: (iffP idP) => [/coord_span-> x notAx | Aphi].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "set b := cfun_base G A; rewrite sum_cfunE big1 // => i _; rewrite cfunE.",
            "VernacExtend",
            "fbd4d70cb3eec14ba9e9ce9706c8e824c424a5a7"
        ],
        [
            "have /mapP[xG]: b`_i \\in b by rewrite -tnth_nth mem_tnth.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite mem_enum => /setIdP[/imsetP[y Gy ->] Ay] ->.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite cfun_classE Gy (contraNF (subsetP Ay x)) ?mulr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices <-: \\sum_(xG in classes G) phi (repr xG) *: '1_xG = phi.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "apply: memv_suml => _ /imsetP[x Gx ->]; rewrite rpredZeq cfun_repr.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "have [s_xG_A | /subsetPn[_ /imsetP[y Gy ->]]] := boolP (x ^: G \\subset A).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite cfun_on_sum [_ \\in _](sumv_sup (x ^: G)) ?mem_classes ?orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move/Aphi; rewrite cfunJ // => ->; rewrite eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/cfun_inP=> x Gx; rewrite sum_cfunE (bigD1 (x ^: G)) ?mem_classes //=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite cfunE cfun_repr cfun_classE Gx class_refl mulr1.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite big1 ?addr0 // => _ /andP[/imsetP[y Gy ->]]; apply: contraNeq.",
            "VernacExtend",
            "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
        ],
        [
            "rewrite cfunE cfun_repr cfun_classE Gy mulf_eq0 => /norP[_].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite pnatr_eq0 -lt0n lt0b => /class_eqP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments cfun_onP {A phi}.",
            "VernacArguments",
            "96ea40b85a887bc079301a2b6f28256ecc36cc35"
        ],
        [
            "Lemma cfun_on0 A phi x : phi \\in 'CF(G, A) -> x \\notin A -> phi x = 0.",
            "VernacStartTheoremProof",
            "da674c832af52d2a134aa02d14910a4bebdfc5fb"
        ],
        [
            "by move/cfun_onP; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sum_by_classes (R : ringType) (F : gT -> R) : {in G &, forall g h, F (g ^ h) = F g} -> \\sum_(g in G) F g = \\sum_(xG in classes G) #|xG|%:R * F (repr xG).",
            "VernacStartTheoremProof",
            "793831681f898d99c06743f76259a361c1ba10ae"
        ],
        [
            "move=> FJ; rewrite {1}(partition_big _ _ ((@mem_classes gT)^~ G)) /=.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "apply: eq_bigr => _ /imsetP[x Gx ->]; have [y Gy ->] := repr_class G x.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "rewrite mulr_natl -sumr_const FJ {y Gy}//; apply/esym/eq_big=> y /=.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "apply/idP/andP=> [xGy | [Gy /eqP<-]]; last exact: class_refl.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite (class_eqP xGy) (subsetP (class_subG Gx (subxx _))).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case/imsetP=> z Gz ->; rewrite FJ.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfun_base_free A : free (cfun_base G A).",
            "VernacStartTheoremProof",
            "cef509fb5aab16701d1a1ff0b476947fb210b5ca"
        ],
        [
            "have b_i (i : 'I_#|classes G ::&: A|) : (cfun_base G A)`_i = '1_(enum_val i).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite /enum_val -!tnth_nth tnth_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/freeP => s S0 i; move/cfunP/(_ (repr (enum_val i))): S0.",
            "VernacExtend",
            "86bb0d3d5ae27b38aac15f69d532d662f1518315"
        ],
        [
            "rewrite sum_cfunE (bigD1 i) //= big1 ?addr0 => [|j].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite b_i !cfunE; have /setIdP[/imsetP[x Gx ->] _] := enum_valP i.",
            "VernacExtend",
            "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
        ],
        [
            "by rewrite cfun_repr cfun_classE Gx class_refl mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: contraNeq; rewrite b_i !cfunE mulf_eq0 => /norP[_].",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "rewrite -(inj_eq enum_val_inj).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have /setIdP[/imsetP[x _ ->] _] := enum_valP i; rewrite cfun_repr.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "have /setIdP[/imsetP[y Gy ->] _] := enum_valP j; rewrite cfun_classE Gy.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "by rewrite pnatr_eq0 -lt0n lt0b => /class_eqP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dim_cfun : \\dim 'CF(G) = #|classes G|.",
            "VernacStartTheoremProof",
            "e2c4db33098bb19c90c27196e1cb5e5b8ebb377a"
        ],
        [
            "by rewrite dimvf /Vector.dim /= genGid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dim_cfun_on A : \\dim 'CF(G, A) = #|classes G ::&: A|.",
            "VernacStartTheoremProof",
            "05bc8d4da70421d2150acabe10d2a848fd03225f"
        ],
        [
            "by rewrite (eqnP (cfun_base_free A)) size_tuple.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dim_cfun_on_abelian A : abelian G -> A \\subset G -> \\dim 'CF(G, A) = #|A|.",
            "VernacStartTheoremProof",
            "803d09527f430bf0e339d4c39408216747070a5a"
        ],
        [
            "move/abelian_classP=> cGG sAG; rewrite -(card_imset _ set1_inj) dim_cfun_on.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "apply/eq_card=> xG; rewrite !inE.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply/andP/imsetP=> [[/imsetP[x Gx ->] Ax] | [x Ax ->]] {xG}.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite cGG ?sub1set // in Ax *; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -{1}(cGG x) ?mem_classes ?(subsetP sAG) ?sub1set.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfuni_on A : '1_A \\in 'CF(G, A).",
            "VernacStartTheoremProof",
            "a04ca701ee0e2ae0c0e690e1407e53196371dd68"
        ],
        [
            "apply/cfun_onP=> x notAx; rewrite cfunElock genGid.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by case: andP => // [[_ s_xG_A]]; rewrite (subsetP s_xG_A) ?class_refl in notAx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mul_cfuni_on A phi : phi * '1_A \\in 'CF(G, A).",
            "VernacStartTheoremProof",
            "25d72ea64e8153918540723e194ba9c6f68c2c6c"
        ],
        [
            "by apply/cfun_onP=> x /(cfun_onP (cfuni_on A)) Ax0; rewrite cfunE Ax0 mulr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfun_onE phi A : (phi \\in 'CF(G, A)) = (support phi \\subset A).",
            "VernacStartTheoremProof",
            "52fbaf4f4cf09c194f7f38afaf55bf986bca0f35"
        ],
        [
            "exact: (sameP cfun_onP supportP).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfun_onT phi : phi \\in 'CF(G, [set: gT]).",
            "VernacStartTheoremProof",
            "a61c2083cae3ec7f433afa0fe570c0a76fa0b4c5"
        ],
        [
            "by rewrite cfun_onE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfun_onD1 phi A : (phi \\in 'CF(G, A^#)) = (phi \\in 'CF(G, A)) && (phi 1%g == 0).",
            "VernacStartTheoremProof",
            "80ec334266001a8596dcd69891da10b94b95666b"
        ],
        [
            "by rewrite !cfun_onE -!(eq_subset (in_set (support _))) subsetD1 !inE negbK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfun_onG phi : phi \\in 'CF(G, G).",
            "VernacStartTheoremProof",
            "4a578d5c8cf6c836883ffb4c36bac57db135d514"
        ],
        [
            "by rewrite cfun_onE support_cfun.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfunD1E phi : (phi \\in 'CF(G, G^#)) = (phi 1%g == 0).",
            "VernacStartTheoremProof",
            "a2d1aceed5ed175bdad530f4679b88e221c35226"
        ],
        [
            "by rewrite cfun_onD1 cfun_onG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfunGid : 'CF(G, G) = 'CF(G)%VS.",
            "VernacStartTheoremProof",
            "7499c4d8e1380c1c421e0f0c1f8a49491d2f2e8c"
        ],
        [
            "by apply/vspaceP=> phi; rewrite cfun_onG memvf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfun_onS A B phi : B \\subset A -> phi \\in 'CF(G, B) -> phi \\in 'CF(G, A).",
            "VernacStartTheoremProof",
            "90a6ce5be3cb0fc191c409fab0d764478b8680af"
        ],
        [
            "by rewrite !cfun_onE => sBA /subset_trans->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfun_complement A : A <| G -> ('CF(G, A) + 'CF(G, G :\\: A)%SET = 'CF(G))%VS.",
            "VernacStartTheoremProof",
            "ad2dc7b509ba3deecee4e5e782f70fcbbf929fd4"
        ],
        [
            "case/andP=> sAG nAG; rewrite -cfunGid [rhs in _ = rhs]cfun_on_sum.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "rewrite (bigID (fun B => B \\subset A)) /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "congr (_ + _)%VS; rewrite cfun_on_sum; apply: eq_bigl => /= xG.",
            "VernacExtend",
            "775b998c29d59f89d853e0c4a629d4a3388abe3b"
        ],
        [
            "rewrite andbAC; apply/esym/andb_idr=> /andP[/imsetP[x Gx ->] _].",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite class_subG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -andbA; apply: andb_id2l => /imsetP[x Gx ->].",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite !class_sub_norm ?normsD ?normG // inE andbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfConjCE phi x : (phi^*)%CF x = (phi x)^*.",
            "VernacStartTheoremProof",
            "f1418850a10710da7bf209a970b8cc3b6d7611ad"
        ],
        [
            "by rewrite cfunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfConjCK : involutive (fun phi => phi^*)%CF.",
            "VernacStartTheoremProof",
            "8a37bf9960eb5d660131eaa7a5e8bf1969b5c2d5"
        ],
        [
            "by move=> phi; apply/cfunP=> x; rewrite !cfunE conjCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfConjC_cfun1 : (1^*)%CF = 1 :> 'CF(G).",
            "VernacStartTheoremProof",
            "35329373c364f743ca42c5228a3c98b09d5ea32f"
        ],
        [
            "exact: rmorph1.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact cfker_is_group phi : group_set (cfker phi).",
            "VernacStartTheoremProof",
            "3ddeed2be4e4a09b001752e6af6dfbaf8577ddf3"
        ],
        [
            "apply/group_setP; split=> [|x y]; rewrite !inE ?group1.",
            "VernacExtend",
            "945ac9810113bf938ceefee9ae4e6b3a8be91952"
        ],
        [
            "by apply/forallP=> y; rewrite mul1g.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/andP=> Gx /forallP-Kx /andP[Gy /forallP-Ky]; rewrite groupM //.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by apply/forallP=> z; rewrite -mulgA (eqP (Kx _)) Ky.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical cfker_group phi := Group (cfker_is_group phi).",
            "VernacDefinition",
            "443e52b6909d3087a58bb34929b8829be7c8909b"
        ],
        [
            "Lemma cfker_sub phi : cfker phi \\subset G.",
            "VernacStartTheoremProof",
            "13353a99062383656a007252450f7ecf96ae9803"
        ],
        [
            "by rewrite /cfker setIdE subsetIl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfker_norm phi : G \\subset 'N(cfker phi).",
            "VernacStartTheoremProof",
            "074607b43f80046e373017f54489e36746a16597"
        ],
        [
            "apply/subsetP=> z Gz; have phiJz := cfunJ phi _ (groupVr Gz).",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "rewrite inE; apply/subsetP=> _ /imsetP[x /setIdP[Gx /forallP-Kx] ->].",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite inE groupJ //; apply/forallP=> y.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite -(phiJz y) -phiJz conjMg conjgK Kx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfker_normal phi : cfker phi <| G.",
            "VernacStartTheoremProof",
            "6832a50576131d2a706f179beeddcb1d79c65e69"
        ],
        [
            "by rewrite /normal cfker_sub cfker_norm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfkerMl phi x y : x \\in cfker phi -> phi (x * y)%g = phi y.",
            "VernacStartTheoremProof",
            "415d67611025cb6e56b20240550e588f9864b602"
        ],
        [
            "by case/setIdP=> _ /eqfunP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfkerMr phi x y : x \\in cfker phi -> phi (y * x)%g = phi y.",
            "VernacStartTheoremProof",
            "d3846e18709171df764c3971a0ba8e6e7f0dd9ac"
        ],
        [
            "by move=> Kx; rewrite conjgC cfkerMl ?cfunJ ?(subsetP (cfker_sub phi)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfker1 phi x : x \\in cfker phi -> phi x = phi 1%g.",
            "VernacStartTheoremProof",
            "6e95f3d73cc3f5bee45f0b401e841f1a07a43b70"
        ],
        [
            "by move=> Kx; rewrite -[x]mulg1 cfkerMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfker_cfun0 : @cfker _ G 0 = G.",
            "VernacStartTheoremProof",
            "610f58a4c25c7058d6bef6229edff1d07bbbd5b3"
        ],
        [
            "apply/setP=> x; rewrite !inE andb_idr // => Gx; apply/forallP=> y.",
            "VernacExtend",
            "09ff90107c05f6bf4f743acb58a064bacfe65029"
        ],
        [
            "by rewrite !cfunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfker_add phi psi : cfker phi :&: cfker psi \\subset cfker (phi + psi).",
            "VernacStartTheoremProof",
            "2e67a7c8d903170d92d7b19abd744e29ebe4caf3"
        ],
        [
            "apply/subsetP=> x /setIP[Kphi_x Kpsi_x]; have [Gx _] := setIdP Kphi_x.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "by rewrite inE Gx; apply/forallP=> y; rewrite !cfunE !cfkerMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfker_sum I r (P : pred I) (Phi : I -> 'CF(G)) : G :&: \\bigcap_(i <- r | P i) cfker (Phi i) \\subset cfker (\\sum_(i <- r | P i) Phi i).",
            "VernacStartTheoremProof",
            "cf7ff11939600236164c59db6b646ca70f710807"
        ],
        [
            "elim/big_rec2: _ => [|i K psi Pi sK_psi]; first by rewrite setIT cfker_cfun0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite setICA; apply: subset_trans (setIS _ sK_psi) (cfker_add _ _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfker_scale a phi : cfker phi \\subset cfker (a *: phi).",
            "VernacStartTheoremProof",
            "8912698fe5c87c0f7f06c706e4e6dec82807f6c0"
        ],
        [
            "apply/subsetP=> x Kphi_x; have [Gx _] := setIdP Kphi_x.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "by rewrite inE Gx; apply/forallP=> y; rewrite !cfunE cfkerMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfker_scale_nz a phi : a != 0 -> cfker (a *: phi) = cfker phi.",
            "VernacStartTheoremProof",
            "50f78fb96c75d0dc49921f0100c4861e3ebafdab"
        ],
        [
            "move=> nz_a; apply/eqP.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite eqEsubset -{2}(scalerK nz_a phi) !cfker_scale.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfker_opp phi : cfker (- phi) = cfker phi.",
            "VernacStartTheoremProof",
            "28772a86e2970db3e0f03fc4c6635eeda64974d2"
        ],
        [
            "by rewrite -scaleN1r cfker_scale_nz // oppr_eq0 oner_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfker_cfun1 : @cfker _ G 1 = G.",
            "VernacStartTheoremProof",
            "a0da9ad3402fee98df29320d3468340b6cc5bd8c"
        ],
        [
            "apply/setP=> x; rewrite !inE andb_idr // => Gx; apply/forallP=> y.",
            "VernacExtend",
            "09ff90107c05f6bf4f743acb58a064bacfe65029"
        ],
        [
            "by rewrite !cfun1E groupMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfker_mul phi psi : cfker phi :&: cfker psi \\subset cfker (phi * psi).",
            "VernacStartTheoremProof",
            "5e4f6aef0828f14bbc71e5467af1d5dc0f94974c"
        ],
        [
            "apply/subsetP=> x /setIP[Kphi_x Kpsi_x]; have [Gx _] := setIdP Kphi_x.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "by rewrite inE Gx; apply/forallP=> y; rewrite !cfunE !cfkerMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfker_prod I r (P : pred I) (Phi : I -> 'CF(G)) : G :&: \\bigcap_(i <- r | P i) cfker (Phi i) \\subset cfker (\\prod_(i <- r | P i) Phi i).",
            "VernacStartTheoremProof",
            "77fe19bcccd1c73970f3b7738b5b0837459fa71a"
        ],
        [
            "elim/big_rec2: _ => [|i K psi Pi sK_psi]; first by rewrite setIT cfker_cfun1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite setICA; apply: subset_trans (setIS _ sK_psi) (cfker_mul _ _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfaithfulE phi : cfaithful phi = (cfker phi \\subset [1]).",
            "VernacStartTheoremProof",
            "c44d3faa91d7821f188ba90687bc580897ba0f11"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ClassFun.",
            "VernacEndSegment",
            "ebb8612fe0309330a4110abb287f40f30d2227c2"
        ],
        [
            "Arguments classfun_on {gT} B%g A%g.",
            "VernacArguments",
            "bcac9faacd72ddf297add1bc38d49d2410740ecf"
        ],
        [
            "Notation \"''CF' ( G , A )\" := (classfun_on G A) : ring_scope.",
            "VernacNotation",
            "8b6aff68be61ccf6b86167cf6bf067075b1fc929"
        ],
        [
            "Arguments cfun_onP {gT G A phi}.",
            "VernacArguments",
            "66a0c8ac64458d6b7b22f131ff6613a27f30b1c5"
        ],
        [
            "Arguments cfConjCK {gT G} phi : rename.",
            "VernacArguments",
            "09cd14511652055fa985705c283a388f844ef6ed"
        ],
        [
            "Hint Resolve cfun_onT : core.",
            "VernacHints",
            "a3bedb41e99aec57ade12921980db19d880b8c1e"
        ],
        [
            "Section DotProduct.",
            "VernacBeginSection",
            "c5c0d71bb7aef73877b72a278188fbe2213f6ca1"
        ],
        [
            "Variable (gT : finGroupType) (G : {group gT}).",
            "VernacAssumption",
            "26cb7d9f8ae434831772d6c107d7cf3e4590cb48"
        ],
        [
            "Implicit Types (M : {group gT}) (phi psi xi : 'CF(G)) (R S : seq 'CF(G)).",
            "VernacReserve",
            "93d99be9a2eb18b7c7407f242eea601edd30c120"
        ],
        [
            "Lemma cfdotE phi psi : '[phi, psi] = #|G|%:R^-1 * \\sum_(x in G) phi x * (psi x)^*.",
            "VernacStartTheoremProof",
            "0bdf6fae31def521846b751de1975d43b254d7ac"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdotElr A B phi psi : phi \\in 'CF(G, A) -> psi \\in 'CF(G, B) -> '[phi, psi] = #|G|%:R^-1 * \\sum_(x in A :&: B) phi x * (psi x)^*.",
            "VernacStartTheoremProof",
            "1067a9cf87bc7c3ef3843b980825f1449fe35596"
        ],
        [
            "move=> Aphi Bpsi; rewrite (big_setID G) cfdotE (big_setID (A :&: B)) setIC /=.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "congr (_ * (_ + _)); rewrite !big1 // => x /setDP[_].",
            "VernacExtend",
            "0553e143ed0fb2c0710eda520af4b8f4044d5871"
        ],
        [
            "by move/cfun0->; rewrite mul0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite inE; case/nandP=> notABx; first by rewrite (cfun_on0 Aphi) ?mul0r.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite (cfun_on0 Bpsi) // rmorph0 mulr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdotEl A phi psi : phi \\in 'CF(G, A) -> '[phi, psi] = #|G|%:R^-1 * \\sum_(x in A) phi x * (psi x)^*.",
            "VernacStartTheoremProof",
            "a1479078a3fd84522db392c0f0eb5a0d2badb4fc"
        ],
        [
            "by move=> Aphi; rewrite (cfdotElr Aphi (cfun_onT psi)) setIT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdotEr A phi psi : psi \\in 'CF(G, A) -> '[phi, psi] = #|G|%:R^-1 * \\sum_(x in A) phi x * (psi x)^*.",
            "VernacStartTheoremProof",
            "a5fbff650ea0ed9711361fd054edb313aeaad7c3"
        ],
        [
            "by move=> Apsi; rewrite (cfdotElr (cfun_onT phi) Apsi) setTI.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdot_complement A phi psi : phi \\in 'CF(G, A) -> psi \\in 'CF(G, G :\\: A) -> '[phi, psi] = 0.",
            "VernacStartTheoremProof",
            "f6ed08d02d628c0357dfd21577a55702fc253d70"
        ],
        [
            "move=> Aphi A'psi; rewrite (cfdotElr Aphi A'psi).",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite setDE setICA setICr setI0 big_set0 mulr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfnormE A phi : phi \\in 'CF(G, A) -> '[phi] = #|G|%:R^-1 * (\\sum_(x in A) `|phi x| ^+ 2).",
            "VernacStartTheoremProof",
            "e9df4773c9097239a8fa88048bab26ad1d0677fc"
        ],
        [
            "by move/cfdotEl->; rewrite (eq_bigr _ (fun _ _ => normCK _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_cfdotl A phi1 phi2 psi : psi \\in 'CF(G, A) -> {in A, phi1 =1 phi2} -> '[phi1, psi] = '[phi2, psi].",
            "VernacStartTheoremProof",
            "9e0a88e021b4d58542963e04cefd7498939d08ec"
        ],
        [
            "move/cfdotEr=> eq_dot eq_phi; rewrite !eq_dot; congr (_ * _).",
            "VernacExtend",
            "485e46f06ecb626ff6a640f6969694ae3ffba974"
        ],
        [
            "by apply: eq_bigr => x Ax; rewrite eq_phi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdot_cfuni A B : A <| G -> B <| G -> '['1_A, '1_B]_G = #|A :&: B|%:R / #|G|%:R.",
            "VernacStartTheoremProof",
            "fe1c1e5bf9649336e4833b80bdb2eb416cc38f9e"
        ],
        [
            "move=> nsAG nsBG; rewrite (cfdotElr (cfuni_on G A) (cfuni_on G B)) mulrC.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "congr (_ / _); rewrite -sumr_const; apply: eq_bigr => x /setIP[Ax Bx].",
            "VernacExtend",
            "775b998c29d59f89d853e0c4a629d4a3388abe3b"
        ],
        [
            "by rewrite !cfuniE // Ax Bx rmorph1 mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfnorm1 : '[1]_G = 1.",
            "VernacStartTheoremProof",
            "47df61d62609c5817d0301d2017da0d063abb639"
        ],
        [
            "by rewrite cfdot_cfuni ?genGid // setIid divff ?neq0CG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdotrE psi phi : cfdotr psi phi = '[phi, psi].",
            "VernacStartTheoremProof",
            "9912783e7918615f854e2cdf18f732f3cf0a8681"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdotr_is_linear xi : linear (cfdotr xi : 'CF(G) -> algC^o).",
            "VernacStartTheoremProof",
            "21c2e14d352a280d8fa4d3d6d9991e1be506eb81"
        ],
        [
            "move=> a phi psi; rewrite scalerAr -mulrDr; congr (_ * _).",
            "VernacExtend",
            "485e46f06ecb626ff6a640f6969694ae3ffba974"
        ],
        [
            "rewrite linear_sum -big_split; apply: eq_bigr => x _ /=.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite !cfunE mulrDl -mulrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical cfdotr_additive xi := Additive (cfdotr_is_linear xi).",
            "VernacDefinition",
            "076556fd4715f2085e60a35841617bff7b31a9d5"
        ],
        [
            "Canonical cfdotr_linear xi := Linear (cfdotr_is_linear xi).",
            "VernacDefinition",
            "e900992a31c07766234bd8f7a1b333a7161705b9"
        ],
        [
            "Lemma cfdot0l xi : '[0, xi] = 0.",
            "VernacStartTheoremProof",
            "ecba43f03da8512527029fc3b946e7f653fc8b4a"
        ],
        [
            "by rewrite -cfdotrE linear0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdotNl xi phi : '[- phi, xi] = - '[phi, xi].",
            "VernacStartTheoremProof",
            "bf3f272de0c1f2eb5376eb27596682e813bc7fa5"
        ],
        [
            "by rewrite -!cfdotrE linearN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdotDl xi phi psi : '[phi + psi, xi] = '[phi, xi] + '[psi, xi].",
            "VernacStartTheoremProof",
            "f34ab11701f23423a4aa84c6cef79632f2c41a02"
        ],
        [
            "by rewrite -!cfdotrE linearD.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdotBl xi phi psi : '[phi - psi, xi] = '[phi, xi] - '[psi, xi].",
            "VernacStartTheoremProof",
            "41390615f8e9422127be0b08ddcdbd576cba18d8"
        ],
        [
            "by rewrite -!cfdotrE linearB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdotMnl xi phi n : '[phi *+ n, xi] = '[phi, xi] *+ n.",
            "VernacStartTheoremProof",
            "4ac73a9535a505f3424c46888c5b27c9aafc3bda"
        ],
        [
            "by rewrite -!cfdotrE linearMn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdot_suml xi I r (P : pred I) (phi : I -> 'CF(G)) : '[\\sum_(i <- r | P i) phi i, xi] = \\sum_(i <- r | P i) '[phi i, xi].",
            "VernacStartTheoremProof",
            "b9eb3748a8fb13557a93de7bd380e2b99072ed3e"
        ],
        [
            "by rewrite -!cfdotrE linear_sum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdotZl xi a phi : '[a *: phi, xi] = a * '[phi, xi].",
            "VernacStartTheoremProof",
            "baa48d72617a0dc4d2bd679a70d59ef8eefc8418"
        ],
        [
            "by rewrite -!cfdotrE linearZ.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdotC phi psi : '[phi, psi] = ('[psi, phi])^*.",
            "VernacStartTheoremProof",
            "14895ddfe79c80e82c3242f1001317d0af04cae2"
        ],
        [
            "rewrite /cfdot rmorphM fmorphV rmorph_nat rmorph_sum; congr (_ * _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by apply: eq_bigr=> x _; rewrite rmorphM conjCK mulrC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_cfdotr A phi psi1 psi2 : phi \\in 'CF(G, A) -> {in A, psi1 =1 psi2} -> '[phi, psi1] = '[phi, psi2].",
            "VernacStartTheoremProof",
            "3c4ab650a0bb1d202212e674bc9cd854074392cd"
        ],
        [
            "by move=> Aphi /eq_cfdotl eq_dot; rewrite cfdotC eq_dot // -cfdotC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdotBr xi phi psi : '[xi, phi - psi] = '[xi, phi] - '[xi, psi].",
            "VernacStartTheoremProof",
            "db4e871acde65a4637d9e64067235c995e34cec3"
        ],
        [
            "by rewrite !(cfdotC xi) -rmorphB cfdotBl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical cfun_dot_additive xi := Additive (cfdotBr xi).",
            "VernacDefinition",
            "c5c9947fa6930946549c85d849cd31667f7b4e31"
        ],
        [
            "Lemma cfdot0r xi : '[xi, 0] = 0.",
            "VernacStartTheoremProof",
            "f2cf30a45d5e0854a3853358607707701c63bb20"
        ],
        [
            "exact: raddf0.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdotNr xi phi : '[xi, - phi] = - '[xi, phi].",
            "VernacStartTheoremProof",
            "c370bd6a96ef69ec7d3921a93ed2d48687a51929"
        ],
        [
            "exact: raddfN.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdotDr xi phi psi : '[xi, phi + psi] = '[xi, phi] + '[xi, psi].",
            "VernacStartTheoremProof",
            "01b9c741ba46879883645cb758434c6b2348bd19"
        ],
        [
            "exact: raddfD.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdotMnr xi phi n : '[xi, phi *+ n] = '[xi, phi] *+ n.",
            "VernacStartTheoremProof",
            "9e570c4605b8cefdd048959f7e611e6448fdc5eb"
        ],
        [
            "exact: raddfMn.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdot_sumr xi I r (P : pred I) (phi : I -> 'CF(G)) : '[xi, \\sum_(i <- r | P i) phi i] = \\sum_(i <- r | P i) '[xi, phi i].",
            "VernacStartTheoremProof",
            "d259a28076d6292ccdaf6faf3d306cc118eea908"
        ],
        [
            "exact: raddf_sum.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdotZr a xi phi : '[xi, a *: phi] = a^* * '[xi, phi].",
            "VernacStartTheoremProof",
            "5243ff41edec030d42cb01a633fa188de8f63a5e"
        ],
        [
            "by rewrite !(cfdotC xi) cfdotZl rmorphM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdot_cfAut (u : {rmorphism algC -> algC}) phi psi : {in image psi G, {morph u : x / x^*}} -> '[cfAut u phi, cfAut u psi] = u '[phi, psi].",
            "VernacStartTheoremProof",
            "2a089c220c18e0c771976621e3fa432bd1209a41"
        ],
        [
            "move=> uC; rewrite rmorphM fmorphV rmorph_nat rmorph_sum; congr (_ * _).",
            "VernacExtend",
            "485e46f06ecb626ff6a640f6969694ae3ffba974"
        ],
        [
            "by apply: eq_bigr => x Gx; rewrite !cfunE rmorphM uC ?map_f ?mem_enum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdot_conjC phi psi : '[phi^*, psi^*] = '[phi, psi]^*.",
            "VernacStartTheoremProof",
            "97bfbf72fea307dab7207217f7c24ef546417950"
        ],
        [
            "by rewrite cfdot_cfAut.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdot_conjCl phi psi : '[phi^*, psi] = '[phi, psi^*]^*.",
            "VernacStartTheoremProof",
            "a4195a96f23da7c44896cb885e65515e7507447b"
        ],
        [
            "by rewrite -cfdot_conjC cfConjCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdot_conjCr phi psi : '[phi, psi^*] = '[phi^*, psi]^*.",
            "VernacStartTheoremProof",
            "97b3948045eee1cb1aa16b32f6f74730a1c719fd"
        ],
        [
            "by rewrite -cfdot_conjC cfConjCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfnorm_ge0 phi : 0 <= '[phi].",
            "VernacStartTheoremProof",
            "c048517466441d3dd8b504ae99f677c79c799f20"
        ],
        [
            "by rewrite mulr_ge0 ?invr_ge0 ?ler0n ?sumr_ge0 // => x _; apply: mul_conjC_ge0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfnorm_eq0 phi : ('[phi] == 0) = (phi == 0).",
            "VernacStartTheoremProof",
            "645afbc5d928140da94ad39193ef6b474d33ebff"
        ],
        [
            "apply/idP/eqP=> [|->]; last by rewrite cfdot0r.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite mulf_eq0 invr_eq0 (negbTE (neq0CG G)) /= => /eqP/psumr_eq0P phi0.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply/cfun_inP=> x Gx; apply/eqP; rewrite cfunE -mul_conjC_eq0.",
            "VernacExtend",
            "7d4450169cd8610cf3ff90cd2eeb2f84258ab13d"
        ],
        [
            "by rewrite phi0 // => y _; apply: mul_conjC_ge0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfnorm_gt0 phi : ('[phi] > 0) = (phi != 0).",
            "VernacStartTheoremProof",
            "8e945ade0303167941f0500a15dd08489908ae3e"
        ],
        [
            "by rewrite ltr_def cfnorm_ge0 cfnorm_eq0 andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqrt_cfnorm_ge0 phi : 0 <= sqrtC '[phi].",
            "VernacStartTheoremProof",
            "1e1ee687308cbf2f60c07fb339d699c425e4c4d8"
        ],
        [
            "by rewrite sqrtC_ge0 cfnorm_ge0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqrt_cfnorm_eq0 phi : (sqrtC '[phi] == 0) = (phi == 0).",
            "VernacStartTheoremProof",
            "54cacf3418a14e118dbfc8a5379c7eb51fc02f80"
        ],
        [
            "by rewrite sqrtC_eq0 cfnorm_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqrt_cfnorm_gt0 phi : (sqrtC '[phi] > 0) = (phi != 0).",
            "VernacStartTheoremProof",
            "d4e1cb2bdcd0dd3056d2a723ba37d5ee311add0f"
        ],
        [
            "by rewrite sqrtC_gt0 cfnorm_gt0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfnormZ a phi : '[a *: phi]= `|a| ^+ 2 * '[phi]_G.",
            "VernacStartTheoremProof",
            "4398cca97698ffe8224b2209d448c95cd48ebe8a"
        ],
        [
            "by rewrite cfdotZl cfdotZr mulrA normCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfnormN phi : '[- phi] = '[phi].",
            "VernacStartTheoremProof",
            "3210e8147f220ae8cdf0b567747f05f38d9bccfc"
        ],
        [
            "by rewrite cfdotNl raddfN opprK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfnorm_sign n phi : '[(-1) ^+ n *: phi] = '[phi].",
            "VernacStartTheoremProof",
            "f40c913b11bb7cc2e9888a6dce6c17315d1bb9fe"
        ],
        [
            "by rewrite -signr_odd scaler_sign; case: (odd n); rewrite ?cfnormN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfnormD phi psi : let d := '[phi, psi] in '[phi + psi] = '[phi] + '[psi] + (d + d^*).",
            "VernacStartTheoremProof",
            "00b572727835e26b6b9e59ed7b40d52f05d16a0a"
        ],
        [
            "by rewrite /= addrAC -cfdotC cfdotDl !cfdotDr !addrA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfnormB phi psi : let d := '[phi, psi] in '[phi - psi] = '[phi] + '[psi] - (d + d^*).",
            "VernacStartTheoremProof",
            "0e0a794fc48d7ef9146f140d2673273d2cbf1356"
        ],
        [
            "by rewrite /= cfnormD cfnormN cfdotNr rmorphN -opprD.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfnormDd phi psi : '[phi, psi] = 0 -> '[phi + psi] = '[phi] + '[psi].",
            "VernacStartTheoremProof",
            "a43adabf4a198031a5ae612a6a374e55b98c01f1"
        ],
        [
            "by move=> ophipsi; rewrite cfnormD ophipsi rmorph0 !addr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfnormBd phi psi : '[phi, psi] = 0 -> '[phi - psi] = '[phi] + '[psi].",
            "VernacStartTheoremProof",
            "1b978f1e1fabb7a8cc755de2d2f33d72b71ad6b1"
        ],
        [
            "by move=> ophipsi; rewrite cfnormDd ?cfnormN // cfdotNr ophipsi oppr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfnorm_conjC phi : '[phi^*] = '[phi].",
            "VernacStartTheoremProof",
            "28c2db7857167c0b4b07754d8c001408b85e6ed7"
        ],
        [
            "by rewrite cfdot_conjC geC0_conj // cfnorm_ge0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfCauchySchwarz phi psi : `|'[phi, psi]| ^+ 2 <= '[phi] * '[psi] ?= iff ~~ free (phi :: psi).",
            "VernacStartTheoremProof",
            "1061e04f2b06ccf8215dbb30b003f121e0a13e24"
        ],
        [
            "rewrite free_cons span_seq1 seq1_free -negb_or negbK orbC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have [-> | nz_psi] /= := altP (psi =P 0).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/lerifP; rewrite !cfdot0r normCK mul0r mulr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "without loss ophi: phi / '[phi, psi] = 0.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "move=> IHo; pose a := '[phi, psi] / '[psi]; pose phi1 := phi - a *: psi.",
            "VernacExtend",
            "81927515fc3ecfba885b46cf7f9013852021d404"
        ],
        [
            "have ophi: '[phi1, psi] = 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite cfdotBl cfdotZl divfK ?cfnorm_eq0 ?subrr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (canRL (subrK _) (erefl phi1)) rpredDr ?rpredZ ?memv_line //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite cfdotDl ophi add0r cfdotZl normrM (ger0_norm (cfnorm_ge0 _)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite exprMn mulrA -cfnormZ cfnormDd; last by rewrite cfdotZr ophi mulr0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by have:= IHo _ ophi; rewrite mulrDl -lerif_subLR subrr ophi normCK mul0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite ophi normCK mul0r; split; first by rewrite mulr_ge0 ?cfnorm_ge0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite eq_sym mulf_eq0 orbC cfnorm_eq0 (negPf nz_psi) /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/idP/idP=> [|/vlineP[a {2}->]]; last by rewrite cfdotZr ophi mulr0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite cfnorm_eq0 => /eqP->; apply: rpred0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfCauchySchwarz_sqrt phi psi : `|'[phi, psi]| <= sqrtC '[phi] * sqrtC '[psi] ?= iff ~~ free (phi :: psi).",
            "VernacStartTheoremProof",
            "c897d94dd9100c743b396c8376e7798ae9a2a0a1"
        ],
        [
            "rewrite -(sqrCK (normr_ge0 _)) -sqrtCM ?qualifE ?cfnorm_ge0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (mono_in_lerif (@ler_sqrtC _)) 1?rpredM ?qualifE; rewrite ?normr_ge0 ?cfnorm_ge0 //.",
            "VernacExtend",
            "2194fcb4d6d52cbae24a29f7ff14a3997f1912fd"
        ],
        [
            "exact: cfCauchySchwarz.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cf_triangle_lerif phi psi : sqrtC '[phi + psi] <= sqrtC '[phi] + sqrtC '[psi] ?= iff ~~ free (phi :: psi) && (0 <= coord [tuple psi] 0 phi).",
            "VernacStartTheoremProof",
            "4d162490a1bb45bcaa5ca9fc207b20cbf260fc67"
        ],
        [
            "rewrite -(mono_in_lerif ler_sqr) ?rpredD ?qualifE ?sqrtC_ge0 ?cfnorm_ge0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite andbC sqrrD !sqrtCK addrAC cfnormD (mono_lerif (ler_add2l _)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -mulr_natr -[_ + _](divfK (negbT (eqC_nat 2 0))) -/('Re _).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (mono_lerif (ler_pmul2r _)) ?ltr0n //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have:= lerif_trans (lerif_Re_Creal '[phi, psi]) (cfCauchySchwarz_sqrt phi psi).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "congr (_ <= _ ?= iff _); apply: andb_id2r.",
            "VernacExtend",
            "385739dd8a4f73703d3828c61e1780a276bfaa31"
        ],
        [
            "rewrite free_cons span_seq1 seq1_free -negb_or negbK orbC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have [-> | nz_psi] := altP (psi =P 0); first by rewrite cfdot0r coord0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case/vlineP=> [x ->]; rewrite cfdotZl linearZ pmulr_lge0 ?cfnorm_gt0 //=.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by rewrite (coord_free 0) ?seq1_free // eqxx mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orthogonal_cons phi R S : orthogonal (phi :: R) S = orthogonal phi S && orthogonal R S.",
            "VernacStartTheoremProof",
            "0f2244562f363072abcf293527a9b39e82f26e71"
        ],
        [
            "by rewrite /orthogonal /= andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orthoP phi psi : reflect ('[phi, psi] = 0) (orthogonal phi psi).",
            "VernacStartTheoremProof",
            "ef9263f5aa12d468b8f3d45f2bf34626351663f6"
        ],
        [
            "by rewrite /orthogonal /= !andbT; apply: eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orthogonalP S R : reflect {in S & R, forall phi psi, '[phi, psi] = 0} (orthogonal S R).",
            "VernacStartTheoremProof",
            "8efeec3fab46cb8a25795e781f5c8fc43b4c4616"
        ],
        [
            "apply: (iffP allP) => oSR phi => [psi /oSR/allP opS /opS/eqP // | /oSR opS].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by apply/allP=> psi /= /opS->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orthoPl phi S : reflect {in S, forall psi, '[phi, psi] = 0} (orthogonal phi S).",
            "VernacStartTheoremProof",
            "afcdbaf6b32a7601f77fb27f867a60a1ed8f2f6a"
        ],
        [
            "by rewrite [orthogonal _ S]andbT /=; apply: (iffP allP) => ophiS ? /ophiS/eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments orthoPl {phi S}.",
            "VernacArguments",
            "b9cef4ac549ee520e7be364c5162773be21fd3d3"
        ],
        [
            "Lemma orthogonal_sym : symmetric (@orthogonal _ G).",
            "VernacStartTheoremProof",
            "93a66306ba4a9eda9aa8d580681442b7e31b0ebf"
        ],
        [
            "apply: symmetric_from_pre => R S /orthogonalP oRS.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by apply/orthogonalP=> phi psi Rpsi Sphi; rewrite cfdotC oRS ?rmorph0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orthoPr S psi : reflect {in S, forall phi, '[phi, psi] = 0} (orthogonal S psi).",
            "VernacStartTheoremProof",
            "19ab0aa822085d2be9aa3743dc56a3c3340601e2"
        ],
        [
            "rewrite orthogonal_sym.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: (iffP orthoPl) => oSpsi phi Sphi; rewrite cfdotC oSpsi ?conjC0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_orthogonal R1 R2 S1 S2 : R1 =i R2 -> S1 =i S2 -> orthogonal R1 S1 = orthogonal R2 S2.",
            "VernacStartTheoremProof",
            "c96ecf43ef3f40788cf47f61323885e76dc5c2e4"
        ],
        [
            "move=> eqR eqS; rewrite [orthogonal _ _](eq_all_r eqR).",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by apply: eq_all => psi /=; apply: eq_all_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orthogonal_catl R1 R2 S : orthogonal (R1 ++ R2) S = orthogonal R1 S && orthogonal R2 S.",
            "VernacStartTheoremProof",
            "f2742c18570d376054323fa7a0e7b666ee0ab8a9"
        ],
        [
            "exact: all_cat.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orthogonal_catr R S1 S2 : orthogonal R (S1 ++ S2) = orthogonal R S1 && orthogonal R S2.",
            "VernacStartTheoremProof",
            "44575a26e3b444b7cb540110472a723196008d52"
        ],
        [
            "by rewrite !(orthogonal_sym R) orthogonal_catl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma span_orthogonal S1 S2 phi1 phi2 : orthogonal S1 S2 -> phi1 \\in <<S1>>%VS -> phi2 \\in <<S2>>%VS -> '[phi1, phi2] = 0.",
            "VernacStartTheoremProof",
            "58190c6169c8a4a0a062da8c939fe701b65f951f"
        ],
        [
            "move/orthogonalP=> oS12; do 2!move/(@coord_span _ _ _ (in_tuple _))->.",
            "VernacExtend",
            "22b510de5a19ae026f48022a3dcf9db1d297df52"
        ],
        [
            "rewrite cfdot_suml big1 // => i _; rewrite cfdot_sumr big1 // => j _.",
            "VernacExtend",
            "fbaa61af20867a5dfb8bb5213ca8048b258f8f3a"
        ],
        [
            "by rewrite cfdotZl cfdotZr oS12 ?mem_nth ?mulr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orthogonal_split S beta : {X : 'CF(G) & X \\in <<S>>%VS & {Y | [/\\ beta = X + Y, '[X, Y] = 0 & orthogonal Y S]}}.",
            "VernacStartTheoremProof",
            "3afe3adc3b0bb0642eaafc804d0180ea7e12c854"
        ],
        [
            "suffices [X S_X [Y -> oYS]]: {X : _ & X \\in <<S>>%VS & {Y | beta = X + Y & orthogonal Y S}}.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "exists X => //; exists Y.",
            "VernacExtend",
            "0395c7867b4a69524ca6bbf53c6209ecd1403e04"
        ],
        [
            "by rewrite cfdotC (span_orthogonal oYS) ?memv_span1 ?conjC0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: S beta => [|phi S IHS] beta.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by exists 0; last exists beta; rewrite ?mem0v ?add0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [[U S_U [V -> oVS]] [X S_X [Y -> oYS]]] := (IHS phi, IHS beta).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose Z := '[Y, V] / '[V] *: V; exists (X + Z).",
            "VernacExtend",
            "1b3824b467c0078fc6708c18c4371940a050646c"
        ],
        [
            "rewrite /Z -{4}(addKr U V) scalerDr scalerN addrA addrC span_cons.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite memv_add ?memvB ?memvZ ?memv_line.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (Y - Z); first by rewrite addrCA !addrA addrK addrC.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/orthoPl=> psi; rewrite !inE => /predU1P[-> | Spsi]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite cfdotBl cfdotZl (orthoPl oVS _ Spsi) mulr0 subr0 (orthoPl oYS).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite cfdotBl !cfdotDr (span_orthogonal oYS) // ?memv_span ?mem_head //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite !cfdotZl (span_orthogonal oVS _ S_U) ?mulr0 ?memv_span ?mem_head //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have [-> | nzV] := eqVneq V 0; first by rewrite cfdot0r !mul0r subrr.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite divfK ?cfnorm_eq0 ?subrr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_orthogonal M (nu : 'CF(G) -> 'CF(M)) S R (A : pred 'CF(G)) : {in A &, isometry nu} -> {subset S <= A} -> {subset R <= A} -> orthogonal (map nu S) (map nu R) = orthogonal S R.",
            "VernacStartTheoremProof",
            "7ec90aab68d21c481bc9b7f518de5a091fa724f5"
        ],
        [
            "move=> Inu sSA sRA; rewrite [orthogonal _ _]all_map.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "apply: eq_in_all => phi Sphi; rewrite /= all_map.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by apply: eq_in_all => psi Rpsi; rewrite /= Inu ?(sSA phi) ?(sRA psi).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orthogonal_oppr S R : orthogonal S (map -%R R) = orthogonal S R.",
            "VernacStartTheoremProof",
            "e944b5df06011236606a1b92f6c55624d0cffec6"
        ],
        [
            "wlog suffices IH: S R / orthogonal S R -> orthogonal S (map -%R R).",
            "VernacExtend",
            "348aa27e7c84ea4ca2ac06b8a3b3db24e74b6ad7"
        ],
        [
            "by apply/idP/idP=> /IH; rewrite ?mapK //; apply: opprK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move/orthogonalP=> oSR; apply/orthogonalP=> xi1 _ Sxi1 /mapP[xi2 Rxi2 ->].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite cfdotNr oSR ?oppr0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orthogonal_oppl S R : orthogonal (map -%R S) R = orthogonal S R.",
            "VernacStartTheoremProof",
            "34c8f0262f42420c64a36a9ebbf421fbe1e10d38"
        ],
        [
            "by rewrite -!(orthogonal_sym R) orthogonal_oppr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pairwise_orthogonalP S : reflect (uniq (0 :: S) /\\ {in S &, forall phi psi, phi != psi -> '[phi, psi] = 0}) (pairwise_orthogonal S).",
            "VernacStartTheoremProof",
            "1a54a8ff4e7c55bb2d953a6bf5edaa8fb41acf24"
        ],
        [
            "rewrite /pairwise_orthogonal /=; case notS0: (~~ _); last by right; case.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "elim: S notS0 => [|phi S IH] /=; first by left.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite inE eq_sym andbT => /norP[nz_phi /IH{IH}IH].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "have [opS | not_opS] := allP; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "right=> [[/andP[notSp _] opS]]; case: not_opS => psi Spsi /=.",
            "VernacExtend",
            "4a95f82aca0fc9a50f43053eca44fc9141212abe"
        ],
        [
            "by rewrite opS ?mem_head 1?mem_behead // (memPnC notSp).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (contra (opS _)) /= ?cfnorm_eq0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: (iffP IH) => [] [uniqS oSS]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by split=> //; apply: sub_in2 oSS => psi Spsi; apply: mem_behead.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split=> // psi xi; rewrite !inE => /predU1P[-> // | Spsi].",
            "VernacExtend",
            "fbaa61af20867a5dfb8bb5213ca8048b258f8f3a"
        ],
        [
            "by case/predU1P=> [-> | /opS] /eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/predU1P=> [-> _ | Sxi /oSS-> //].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply/eqP; rewrite cfdotC conjC_eq0 [_ == 0]opS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pairwise_orthogonal_cat R S : pairwise_orthogonal (R ++ S) = [&& pairwise_orthogonal R, pairwise_orthogonal S & orthogonal R S].",
            "VernacStartTheoremProof",
            "149e5dfefebd1eadfc23c8efe4b00b1565a76171"
        ],
        [
            "rewrite /pairwise_orthogonal mem_cat negb_or -!andbA; do !bool_congr.",
            "VernacExtend",
            "6a72213b8ff230d3c557d3c0d5b7e6e6d5c919ed"
        ],
        [
            "elim: R => [|phi R /= ->]; rewrite ?andbT // orthogonal_cons all_cat -!andbA /=.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by do !bool_congr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_pairwise_orthogonal R S : perm_eq R S -> pairwise_orthogonal R = pairwise_orthogonal S.",
            "VernacStartTheoremProof",
            "372d3b7eeabf1a00130fde5f8b88a017655c1f73"
        ],
        [
            "apply: catCA_perm_subst R S => R S S'.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite !pairwise_orthogonal_cat !orthogonal_catr (orthogonal_sym R S) -!andbA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by do !bool_congr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_pairwise_orthogonal S1 S2 : {subset S1 <= S2} -> uniq S1 -> pairwise_orthogonal S2 -> pairwise_orthogonal S1.",
            "VernacStartTheoremProof",
            "9638afd2cd68c7d25a36687859f75abdd3724008"
        ],
        [
            "move=> sS12 uniqS1 /pairwise_orthogonalP[/andP[notS2_0 _] oS2].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply/pairwise_orthogonalP; rewrite /= (contra (sS12 0)) //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by split=> //; apply: sub_in2 oS2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orthogonal_free S : pairwise_orthogonal S -> free S.",
            "VernacStartTheoremProof",
            "2469cb5cc707c720d417eff842c99f6470ceda20"
        ],
        [
            "case/pairwise_orthogonalP=> [/=/andP[notS0 uniqS] oSS].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite -(in_tupleE S); apply/freeP => a aS0 i.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "have S_i: S`_i \\in S by apply: mem_nth.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /eqP: '[S`_i, 0]_G = 0 := cfdot0r _.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -{2}aS0 raddf_sum /= (bigD1 i) //= big1 => [|j neq_ji]; last 1 first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite cfdotZr oSS ?mulr0 ?mem_nth // eq_sym nth_uniq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite addr0 cfdotZr mulf_eq0 conjC_eq0 cfnorm_eq0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case/pred2P=> // Si0; rewrite -Si0 S_i in notS0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma filter_pairwise_orthogonal S p : pairwise_orthogonal S -> pairwise_orthogonal (filter p S).",
            "VernacStartTheoremProof",
            "6ea94dbe97a55c97fc0f541afe7adde247cdfde7"
        ],
        [
            "move=> orthoS; apply: sub_pairwise_orthogonal (orthoS).",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "exact: mem_subseq (filter_subseq p S).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "exact/filter_uniq/free_uniq/orthogonal_free.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orthonormal_not0 S : orthonormal S -> 0 \\notin S.",
            "VernacStartTheoremProof",
            "42798d9696bd7327028d492fb010c35899b40a3e"
        ],
        [
            "by case/andP=> /allP S1 _; rewrite (contra (S1 _)) //= cfdot0r eq_sym oner_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orthonormalE S : orthonormal S = all [pred phi | '[phi] == 1] S && pairwise_orthogonal S.",
            "VernacStartTheoremProof",
            "f95a7ac46fc999316b5905d7ce5fda59fe0e59ed"
        ],
        [
            "by rewrite -(andb_idl (@orthonormal_not0 S)) andbCA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orthonormal_orthogonal S : orthonormal S -> pairwise_orthogonal S.",
            "VernacStartTheoremProof",
            "b10cf09d49decdcbccd616d92bfdded6dda3d13a"
        ],
        [
            "by rewrite orthonormalE => /andP[_].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orthonormal_cat R S : orthonormal (R ++ S) = [&& orthonormal R, orthonormal S & orthogonal R S].",
            "VernacStartTheoremProof",
            "c77ec799b8c4ba5a886116b8913239b3cec13d29"
        ],
        [
            "rewrite !orthonormalE pairwise_orthogonal_cat all_cat -!andbA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by do !bool_congr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_orthonormal R S : perm_eq R S -> orthonormal R = orthonormal S.",
            "VernacStartTheoremProof",
            "845afa0ef0788951d7ee796034d4bf25af5d4691"
        ],
        [
            "move=> eqRS; rewrite !orthonormalE (eq_all_r (perm_eq_mem eqRS)).",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite (eq_pairwise_orthogonal eqRS).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orthonormal_free S : orthonormal S -> free S.",
            "VernacStartTheoremProof",
            "7f442d62abb827a49fd3d995ad98cb962df14be5"
        ],
        [
            "by move/orthonormal_orthogonal/orthogonal_free.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orthonormalP S : reflect (uniq S /\\ {in S &, forall phi psi, '[phi, psi]_G = (phi == psi)%:R}) (orthonormal S).",
            "VernacStartTheoremProof",
            "9410154920c7c12ad6a567d2e5301be4513340ba"
        ],
        [
            "rewrite orthonormalE; have [/= normS | not_normS] := allP; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by right=> [[_ o1S]]; case: not_normS => phi Sphi; rewrite /= o1S ?eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: (iffP (pairwise_orthogonalP S)) => [] [uniqS oSS].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "split=> // [|phi psi]; first by case/andP: uniqS.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by have [-> _ /normS/eqP | /oSS] := altP eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split=> // [|phi psi Sphi Spsi /negbTE]; last by rewrite oSS // => ->.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite /= (contra (normS _)) // cfdot0r eq_sym oner_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_orthonormal S1 S2 : {subset S1 <= S2} -> uniq S1 -> orthonormal S2 -> orthonormal S1.",
            "VernacStartTheoremProof",
            "4a8c3f5246581a776996345b48c8caabf2715122"
        ],
        [
            "move=> sS12 uniqS1 /orthonormalP[_ oS1].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by apply/orthonormalP; split; last apply: sub_in2 sS12 _ _.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orthonormal2P phi psi : reflect [/\\ '[phi, psi] = 0, '[phi] = 1 & '[psi] = 1] (orthonormal [:: phi; psi]).",
            "VernacStartTheoremProof",
            "64c002e90d067881f4c0cb6e4714db67ce8a3b91"
        ],
        [
            "rewrite /orthonormal /= !andbT andbC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: (iffP and3P) => [] []; do 3!move/eqP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma conjC_pair_orthogonal S chi : cfConjC_closed S -> ~~ has cfReal S -> pairwise_orthogonal S -> chi \\in S -> pairwise_orthogonal (chi :: chi^*%CF).",
            "VernacStartTheoremProof",
            "1470cd23fa475f57e8f48c95ef73cfd36e60db66"
        ],
        [
            "move=> ccS /hasPn nrS oSS Schi; apply: sub_pairwise_orthogonal oSS.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by apply/allP; rewrite /= Schi ccS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite /= inE eq_sym nrS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdot_real_conjC phi psi : cfReal phi -> '[phi, psi^*]_G = '[phi, psi]^*.",
            "VernacStartTheoremProof",
            "1ec91c4b745fa483c26400635d77a8360fbbe37b"
        ],
        [
            "by rewrite -cfdot_conjC => /eqcfP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma extend_cfConjC_subset S X phi : cfConjC_closed S -> ~~ has cfReal S -> phi \\in S -> phi \\notin X -> cfConjC_subset X S -> cfConjC_subset [:: phi, phi^* & X]%CF S.",
            "VernacStartTheoremProof",
            "af74dc48247dfcf19a04a521ee21c3cd9ca9952b"
        ],
        [
            "move=> ccS nrS Sphi X'phi [uniqX /allP-sXS ccX].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "split; last 1 [by apply/allP; rewrite /= Sphi ccS | apply/allP]; rewrite /= inE.",
            "VernacExtend",
            "2522bb31d2ee5eb333bb7e2a816e0a3ac64f5b0e"
        ],
        [
            "by rewrite negb_or X'phi eq_sym (hasPn nrS) // (contra (ccX _)) ?cfConjCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite cfConjCK !mem_head orbT; apply/allP=> xi Xxi; rewrite !inE ccX ?orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End DotProduct.",
            "VernacEndSegment",
            "7e97e3b62d8746ba662bbc582879e34d4da4d5e6"
        ],
        [
            "Arguments orthoP {gT G phi psi}.",
            "VernacArguments",
            "d24a998074b7d12da596019c71779e4ff84a774f"
        ],
        [
            "Arguments orthoPl {gT G phi S}.",
            "VernacArguments",
            "07d8363cd44ebf6981a776eb3c8eabe0f82ccb31"
        ],
        [
            "Arguments orthoPr {gT G S psi}.",
            "VernacArguments",
            "8912cc913264ce55bb49e8e1326fd47eef0886d7"
        ],
        [
            "Arguments orthogonalP {gT G S R}.",
            "VernacArguments",
            "dee57b5e7ad35b5b81eafc9960df36d2ffde6e0b"
        ],
        [
            "Arguments pairwise_orthogonalP {gT G S}.",
            "VernacArguments",
            "25cb143f2296bf6059ec858c13b7ff798cc32c35"
        ],
        [
            "Arguments orthonormalP {gT G S}.",
            "VernacArguments",
            "4fdd21484cd815fb65c660951d9dcf99c62dc6ff"
        ],
        [
            "Section CfunOrder.",
            "VernacBeginSection",
            "eca5ebe1e01df1a020f2dc36512d4322307aea26"
        ],
        [
            "Variables (gT : finGroupType) (G : {group gT}) (phi : 'CF(G)).",
            "VernacAssumption",
            "5227353621faa8444763cadb8f78e1291d7b93f2"
        ],
        [
            "Lemma dvdn_cforderP n : reflect {in G, forall x, phi x ^+ n = 1} (#[phi]%CF %| n)%N.",
            "VernacStartTheoremProof",
            "803b1359439567b8e76a586a57e4a3d211f3a52a"
        ],
        [
            "apply: (iffP (dvdn_biglcmP _ _ _)); rewrite genGid => phiG1 x Gx.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "by apply/eqP; rewrite -dvdn_orderC phiG1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite dvdn_orderC phiG1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dvdn_cforder n : (#[phi]%CF %| n) = (phi ^+ n == 1).",
            "VernacStartTheoremProof",
            "7449071e4c282f2e0def82045f65db44460a33ec"
        ],
        [
            "apply/dvdn_cforderP/eqP=> phi_n_1 => [|x Gx].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by apply/cfun_inP=> x Gx; rewrite exp_cfunE // cfun1E Gx phi_n_1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -exp_cfunE // phi_n_1 // cfun1E Gx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exp_cforder : phi ^+ #[phi]%CF = 1.",
            "VernacStartTheoremProof",
            "cca63355d555ebc5ff7f5acb50cba8d2c345bae0"
        ],
        [
            "by apply/eqP; rewrite -dvdn_cforder.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End CfunOrder.",
            "VernacEndSegment",
            "172eeada4f9bdad1bdeee5073a4f2f18e46fa1a4"
        ],
        [
            "Arguments dvdn_cforderP {gT G phi n}.",
            "VernacArguments",
            "c6686c53b200701099e6a96dfd0a8eb7257b28b6"
        ],
        [
            "Section MorphOrder.",
            "VernacBeginSection",
            "bb9d6a912f2d76b53785946bb598737d02de2290"
        ],
        [
            "Variables (aT rT : finGroupType) (G : {group aT}) (R : {group rT}).",
            "VernacAssumption",
            "31cbbe4b2f6b8e6c9d664f33961914d46d235a99"
        ],
        [
            "Variable f : {rmorphism 'CF(G) -> 'CF(R)}.",
            "VernacAssumption",
            "c8818c538b85b79b359f336da8cf9975ce0c718c"
        ],
        [
            "Lemma cforder_rmorph phi : #[f phi]%CF %| #[phi]%CF.",
            "VernacStartTheoremProof",
            "9fde4c9bd5902afc5a59a74cbc6cb437dbc96df4"
        ],
        [
            "by rewrite dvdn_cforder -rmorphX exp_cforder rmorph1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cforder_inj_rmorph phi : injective f -> #[f phi]%CF = #[phi]%CF.",
            "VernacStartTheoremProof",
            "04c5e228e0bdeef097299123612c24f49d416bff"
        ],
        [
            "move=> inj_f; apply/eqP; rewrite eqn_dvd cforder_rmorph dvdn_cforder /=.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by rewrite -(rmorph_eq1 _ inj_f) rmorphX exp_cforder.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MorphOrder.",
            "VernacEndSegment",
            "a89c540d6d190689cddf54f75bc2ab0f77ba77fb"
        ],
        [
            "Section BuildIsometries.",
            "VernacBeginSection",
            "c0121c8b7f008908cd30cb048764821fc0ec315c"
        ],
        [
            "Variable (gT : finGroupType) (L G : {group gT}).",
            "VernacAssumption",
            "cf81fdeac0d831c36441015a9b71ff118fca8048"
        ],
        [
            "Implicit Types (phi psi xi : 'CF(L)) (R S : seq 'CF(L)).",
            "VernacReserve",
            "d6b3bbceea15f4ee9a5a7cfae717aac0419567b2"
        ],
        [
            "Implicit Types (U : pred 'CF(L)) (W : pred 'CF(G)).",
            "VernacReserve",
            "71a962c886b2e91105753f128c589fd4e056c8a1"
        ],
        [
            "Lemma sub_iso_to U1 U2 W1 W2 tau : {subset U2 <= U1} -> {subset W1 <= W2} -> {in U1, isometry tau, to W1} -> {in U2, isometry tau, to W2}.",
            "VernacStartTheoremProof",
            "b9bb9a0f9be994df9c5dd969eff3f55ca5011f3b"
        ],
        [
            "by move=> sU sW [Itau Wtau]; split=> [|u /sU/Wtau/sW //]; apply: sub_in2 Itau.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma isometry_of_free S f : free S -> {in S &, isometry f} -> {tau : {linear 'CF(L) -> 'CF(G)} | {in S, tau =1 f} & {in <<S>>%VS &, isometry tau}}.",
            "VernacStartTheoremProof",
            "e250d0a2840c699f7a33655856f91905da627ec9"
        ],
        [
            "move=> freeS If; have defS := free_span freeS.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "have [tau /(_ freeS (size_map f S))Dtau] := linear_of_free S (map f S).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{Dtau} Dtau: {in S, tau =1 f}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> _ /(nthP 0)[i ltiS <-]; rewrite -!(nth_map 0 0) ?Dtau.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists tau => // _ _ /defS[a -> _] /defS[b -> _].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite !{1}linear_sum !{1}cfdot_suml; apply/eq_big_seq=> xi1 Sxi1.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite !{1}cfdot_sumr; apply/eq_big_seq=> xi2 Sxi2.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite !linearZ /= !Dtau // !cfdotZl !cfdotZr If.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma isometry_of_cfnorm S tauS : pairwise_orthogonal S -> pairwise_orthogonal tauS -> map cfnorm tauS = map cfnorm S -> {tau : {linear 'CF(L) -> 'CF(G)} | map tau S = tauS & {in <<S>>%VS &, isometry tau}}.",
            "VernacStartTheoremProof",
            "49f34465902a653d1d11b9440a24ccb059a34910"
        ],
        [
            "move=> oS oT eq_nST; have freeS := orthogonal_free oS.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "have eq_sz: size tauS = size S by have:= congr1 size eq_nST; rewrite !size_map.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [tau defT] := linear_of_free S tauS; rewrite -[S]/(tval (in_tuple S)).",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "exists tau => [|u v /coord_span-> /coord_span->]; rewrite ?raddf_sum ?defT //=.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "apply: eq_bigr => i _ /=; rewrite linearZ !cfdotZr !cfdot_suml; congr (_ * _).",
            "VernacExtend",
            "91580bd9cdf2cad626638a70b66bf9b00afa41b1"
        ],
        [
            "apply: eq_bigr => j _ /=; rewrite linearZ !cfdotZl; congr (_ * _).",
            "VernacExtend",
            "91580bd9cdf2cad626638a70b66bf9b00afa41b1"
        ],
        [
            "rewrite -!(nth_map 0 0 tau) ?{}defT //; have [-> | neq_ji] := eqVneq j i.",
            "VernacExtend",
            "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
        ],
        [
            "by rewrite -!['[_]](nth_map 0 0 cfnorm) ?eq_sz // eq_nST.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{oS} [/=/andP[_ uS] oS] := pairwise_orthogonalP oS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{oT} [/=/andP[_ uT] oT] := pairwise_orthogonalP oT.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite oS ?oT ?mem_nth ?nth_uniq ?eq_sz.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma isometry_raddf_inj U (tau : {additive 'CF(L) -> 'CF(G)}) : {in U &, isometry tau} -> {in U &, forall u v, u - v \\in U} -> {in U &, injective tau}.",
            "VernacStartTheoremProof",
            "5640f96f6c4dfad7779715af1b7858015dc2d31e"
        ],
        [
            "move=> Itau linU phi psi Uphi Upsi /eqP; rewrite -subr_eq0 -raddfB.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite -cfnorm_eq0 Itau ?linU // cfnorm_eq0 subr_eq0 => /eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma opp_isometry : @isometry _ _ G G -%R.",
            "VernacStartTheoremProof",
            "99854b4932ec755582df8b3d266b405db9b2b576"
        ],
        [
            "by move=> x y; rewrite cfdotNl cfdotNr opprK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End BuildIsometries.",
            "VernacEndSegment",
            "ed476000902b462ecfdb467d69ca613cdda02b00"
        ],
        [
            "Section Restrict.",
            "VernacBeginSection",
            "457b91c4635da7a08fdf3f3bda44e7aa7a4a51b1"
        ],
        [
            "Variables (gT : finGroupType) (A B : {set gT}).",
            "VernacAssumption",
            "6bfeea6b62f6d4f86c82a87ff9443facdc8d66f0"
        ],
        [
            "Local Notation H := <<A>>.",
            "VernacSyntacticDefinition",
            "32018917870751aee972f660ba6a7302cc80b893"
        ],
        [
            "Local Notation G := <<B>>.",
            "VernacSyntacticDefinition",
            "a95cf71357b07290b01b1fcb761af850a32bc9df"
        ],
        [
            "Fact cfRes_subproof (phi : 'CF(B)) : is_class_fun H [ffun x => phi (if H \\subset G then x else 1%g) *+ (x \\in H)].",
            "VernacStartTheoremProof",
            "8f084dfd7fec9a6d5d49ee7b64f776f8645bd852"
        ],
        [
            "apply: intro_class_fun => /= [x y Hx Hy | x /negbTE/=-> //].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite Hx (groupJ Hx) //; case: subsetP => // sHG; rewrite cfunJgen ?sHG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cfRes phi := Cfun 1 (cfRes_subproof phi).",
            "VernacDefinition",
            "29be02ed0800cdbd38b71fd86bfa358a6b64c25f"
        ],
        [
            "Lemma cfResE phi : A \\subset B -> {in A, cfRes phi =1 phi}.",
            "VernacStartTheoremProof",
            "bb4bc65dbc1722cbd920f623f7bb57a8e561fb57"
        ],
        [
            "by move=> sAB x Ax; rewrite cfunElock mem_gen ?genS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfRes1 phi : cfRes phi 1%g = phi 1%g.",
            "VernacStartTheoremProof",
            "8e81c03db2aeb2f780486aeb4ea1df567b3b1347"
        ],
        [
            "by rewrite cfunElock if_same group1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfRes_is_linear : linear cfRes.",
            "VernacStartTheoremProof",
            "642ec24ddee90dbc8aee9930358c310bbf7b3b40"
        ],
        [
            "by move=> a phi psi; apply/cfunP=> x; rewrite !cfunElock mulrnAr mulrnDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical cfRes_additive := Additive cfRes_is_linear.",
            "VernacDefinition",
            "32e1a63565689eeebae653f6569094ac4c1816e9"
        ],
        [
            "Canonical cfRes_linear := Linear cfRes_is_linear.",
            "VernacDefinition",
            "4173977f1d694986cb13849f22d02b56fe2fabd9"
        ],
        [
            "Lemma cfRes_cfun1 : cfRes 1 = 1.",
            "VernacStartTheoremProof",
            "0432173a1f90abd7503946afa35d054c14f1c846"
        ],
        [
            "apply: cfun_in_genP => x Hx; rewrite cfunElock Hx !cfun1Egen Hx.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by case: subsetP => [-> // | _]; rewrite group1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfRes_is_multiplicative : multiplicative cfRes.",
            "VernacStartTheoremProof",
            "27751f5d290d9eaaf7b247e510659e68580130f5"
        ],
        [
            "split=> [phi psi|]; [apply/cfunP=> x | exact: cfRes_cfun1].",
            "VernacExtend",
            "e39ce58ba910954f3979c04da8f305ff8a1d61cc"
        ],
        [
            "by rewrite !cfunElock mulrnAr mulrnAl -mulrnA mulnb andbb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical cfRes_rmorphism := AddRMorphism cfRes_is_multiplicative.",
            "VernacDefinition",
            "1a27454bab9ca21c5f38ef201b985ee46dcb6109"
        ],
        [
            "Canonical cfRes_lrmorphism := [lrmorphism of cfRes].",
            "VernacDefinition",
            "b6706eee1a22a842b3b62be518435cfe4e1a5892"
        ],
        [
            "End Restrict.",
            "VernacEndSegment",
            "746f669aebca461bfe6449478db2d94d3e29eaab"
        ],
        [
            "Arguments cfRes {gT} A%g {B%g} phi%CF.",
            "VernacArguments",
            "d5621bb4f8b010026002726ebf238516b745b6f5"
        ],
        [
            "Notation \"''Res[' H , G ]\" := (@cfRes _ H G) (only parsing) : ring_scope.",
            "VernacNotation",
            "b59a3639295296b6358063725851a23637f11056"
        ],
        [
            "Notation \"''Res[' H ]\" := 'Res[H, _] : ring_scope.",
            "VernacNotation",
            "d188d373a70e6a8d99a68e249978fca0e48d48e3"
        ],
        [
            "Notation \"''Res'\" := 'Res[_] (only parsing) : ring_scope.",
            "VernacNotation",
            "5fca67ccac6a8a30fa99b3befbc63089c233ada3"
        ],
        [
            "Section MoreRestrict.",
            "VernacBeginSection",
            "c324bddde486c4ad4a8c8055b00fcb27e82a9597"
        ],
        [
            "Variables (gT : finGroupType) (G H : {group gT}).",
            "VernacAssumption",
            "7daa1d9261ae1a6ccdcbdd91ed19876e2639bc72"
        ],
        [
            "Implicit Types (A : {set gT}) (phi : 'CF(G)).",
            "VernacReserve",
            "54354942abbc3d3e3c338bbe747c0fc9956fb5f2"
        ],
        [
            "Lemma cfResEout phi : ~~ (H \\subset G) -> 'Res[H] phi = (phi 1%g)%:A.",
            "VernacStartTheoremProof",
            "16550a897c9042306875557ead2cd26851d563c9"
        ],
        [
            "move/negPf=> not_sHG; apply/cfunP=> x.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite cfunE cfun1E mulr_natr cfunElock !genGid not_sHG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfResRes A phi : A \\subset H -> H \\subset G -> 'Res[A] ('Res[H] phi) = 'Res[A] phi.",
            "VernacStartTheoremProof",
            "ca74099ee8a0a694e16cff1a353a9de5d128328b"
        ],
        [
            "move=> sAH sHG; apply/cfunP=> x; rewrite !cfunElock !genGid !gen_subG sAH sHG.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by rewrite (subset_trans sAH) // -mulrnA mulnb -in_setI (setIidPr _) ?gen_subG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfRes_id A psi : 'Res[A] psi = psi.",
            "VernacStartTheoremProof",
            "07598660894f557cb5e0646491892ba840ecbc21"
        ],
        [
            "by apply/cfun_in_genP=> x Ax; rewrite cfunElock Ax subxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_cfker_Res A phi : A \\subset H -> A \\subset cfker phi -> A \\subset cfker ('Res[H, G] phi).",
            "VernacStartTheoremProof",
            "fceb9756a385da653ac1b7ffffafe3dd16966443"
        ],
        [
            "move=> sAH kerA; apply/subsetP=> x Ax; have Hx := subsetP sAH x Ax.",
            "VernacExtend",
            "fcbc4db6275a8d44907e8ed4b44d2f7f279ee662"
        ],
        [
            "rewrite inE Hx; apply/forallP=> y; rewrite !cfunElock !genGid groupMl //.",
            "VernacExtend",
            "fe8f197e86415fc7f0a74eda9d312128b9473eda"
        ],
        [
            "by rewrite !(fun_if phi) cfkerMl // (subsetP kerA).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_cfker_Res phi : H \\subset cfker phi -> cfker ('Res[H, G] phi) = H.",
            "VernacStartTheoremProof",
            "a6c4df390dd89f5a5fddc18cfe86d862499a40cf"
        ],
        [
            "by move=> kH; apply/eqP; rewrite eqEsubset cfker_sub sub_cfker_Res.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfRes_sub_ker phi : H \\subset cfker phi -> 'Res[H, G] phi = (phi 1%g)%:A.",
            "VernacStartTheoremProof",
            "d188c28187c0cc31cdb36de8e7c8aabcc715d806"
        ],
        [
            "move=> kerHphi; have sHG := subset_trans kerHphi (cfker_sub phi).",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "apply/cfun_inP=> x Hx; have ker_x := subsetP kerHphi x Hx.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "by rewrite cfResE // cfunE cfun1E Hx mulr1 cfker1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cforder_Res phi : #['Res[H] phi]%CF %| #[phi]%CF.",
            "VernacStartTheoremProof",
            "da2a9048748eee3e22f2b1233be4ed1ab475cb81"
        ],
        [
            "exact: cforder_rmorph.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MoreRestrict.",
            "VernacEndSegment",
            "306973b060eb9807b6a12fc0b8c6f2afd79332d0"
        ],
        [
            "Section Morphim.",
            "VernacBeginSection",
            "4646452bcbeec569fe6b270cd8e4d27da72b6079"
        ],
        [
            "Variables (aT rT : finGroupType) (D : {group aT}) (f : {morphism D >-> rT}).",
            "VernacAssumption",
            "2a757b1a13339a354a9e9ac2eac5dac1c6c5e35b"
        ],
        [
            "Section Main.",
            "VernacBeginSection",
            "bf8e296e33fd240eeab7bd1f708c4a04f5372b48"
        ],
        [
            "Variable G : {group aT}.",
            "VernacAssumption",
            "a031ecfe166b30f84d418e65f04061c9c811b072"
        ],
        [
            "Implicit Type phi : 'CF(f @* G).",
            "VernacReserve",
            "d39863dc4194e93d6f6cb7182640e621d363ec64"
        ],
        [
            "Fact cfMorph_subproof phi : is_class_fun <<G>> [ffun x => phi (if G \\subset D then f x else 1%g) *+ (x \\in G)].",
            "VernacStartTheoremProof",
            "cede92911a00d96a093927673b2ffd0cc22e8247"
        ],
        [
            "rewrite genGid; apply: intro_class_fun => [x y Gx Gy | x /negPf-> //].",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite Gx groupJ //; case subsetP => // sGD.",
            "VernacExtend",
            "80e7cce19c53eb5d5a21aafd83e552d37e23084a"
        ],
        [
            "by rewrite morphJ ?cfunJ ?mem_morphim ?sGD.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cfMorph phi := Cfun 1 (cfMorph_subproof phi).",
            "VernacDefinition",
            "1a9defe7a342ed0e4236fe10f7f22d92a7c09b82"
        ],
        [
            "Lemma cfMorphE phi x : G \\subset D -> x \\in G -> cfMorph phi x = phi (f x).",
            "VernacStartTheoremProof",
            "c5d5f1bb6a68bb51b8215235ed54928426561838"
        ],
        [
            "by rewrite cfunElock => -> ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfMorph1 phi : cfMorph phi 1%g = phi 1%g.",
            "VernacStartTheoremProof",
            "aa70dde1a3e10e4ff6571c9f946757c1c7483d86"
        ],
        [
            "by rewrite cfunElock morph1 if_same group1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfMorphEout phi : ~~ (G \\subset D) -> cfMorph phi = (phi 1%g)%:A.",
            "VernacStartTheoremProof",
            "ef5d6eadf670aac055d0696b6e00b96fbf4f83c6"
        ],
        [
            "move/negPf=> not_sGD; apply/cfunP=> x; rewrite cfunE cfun1E mulr_natr.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by rewrite cfunElock not_sGD.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfMorph_cfun1 : cfMorph 1 = 1.",
            "VernacStartTheoremProof",
            "19b88efcbd96ce86b17dcdbdbb93720cc1b29f87"
        ],
        [
            "apply/cfun_inP=> x Gx; rewrite cfunElock !cfun1E Gx.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by case: subsetP => [sGD | _]; rewrite ?group1 // mem_morphim ?sGD.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact cfMorph_is_linear : linear cfMorph.",
            "VernacStartTheoremProof",
            "bda0c06a0f1ae1a01098a83b51610b24e29e32c1"
        ],
        [
            "by move=> a phi psi; apply/cfunP=> x; rewrite !cfunElock mulrnAr -mulrnDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical cfMorph_additive := Additive cfMorph_is_linear.",
            "VernacDefinition",
            "6eb62378d15dc522969a93fd9036b7dd90ce958f"
        ],
        [
            "Canonical cfMorph_linear := Linear cfMorph_is_linear.",
            "VernacDefinition",
            "2b6d3adf6a16d0541ddf8312dd2ea77622160ee4"
        ],
        [
            "Fact cfMorph_is_multiplicative : multiplicative cfMorph.",
            "VernacStartTheoremProof",
            "67026cf3c1e780b7402e3138cb5ed785c6bdb510"
        ],
        [
            "split=> [phi psi|]; [apply/cfunP=> x | exact: cfMorph_cfun1].",
            "VernacExtend",
            "e39ce58ba910954f3979c04da8f305ff8a1d61cc"
        ],
        [
            "by rewrite !cfunElock mulrnAr mulrnAl -mulrnA mulnb andbb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical cfMorph_rmorphism := AddRMorphism cfMorph_is_multiplicative.",
            "VernacDefinition",
            "965e4e066d0e6122c08dcbd6359b7b56077637a5"
        ],
        [
            "Canonical cfMorph_lrmorphism := [lrmorphism of cfMorph].",
            "VernacDefinition",
            "aab6692da162bd7eae0b745cd540de1ee8c74bc7"
        ],
        [
            "Hypothesis sGD : G \\subset D.",
            "VernacAssumption",
            "e5bee542dae4b94e2f2a5d0212db17bcb357c2f3"
        ],
        [
            "Lemma cfMorph_inj : injective cfMorph.",
            "VernacStartTheoremProof",
            "98cad9e2454fc4ac444796b2d70af0999ea6968c"
        ],
        [
            "move=> phi1 phi2 eq_phi; apply/cfun_inP=> _ /morphimP[x Dx Gx ->].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite -!cfMorphE // eq_phi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfMorph_eq1 phi : (cfMorph phi == 1) = (phi == 1).",
            "VernacStartTheoremProof",
            "01a30ff19d44d84606aac6ba7204331413db1948"
        ],
        [
            "by apply: rmorph_eq1; apply: cfMorph_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfker_morph phi : cfker (cfMorph phi) = G :&: f @*^-1 (cfker phi).",
            "VernacStartTheoremProof",
            "3ad2679ac57b51e62d00965ffa7513fcd1c4168f"
        ],
        [
            "apply/setP=> x; rewrite !inE; apply: andb_id2l => Gx.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "have Dx := subsetP sGD x Gx; rewrite Dx mem_morphim //=.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "apply/forallP/forallP=> Kx y.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "have [{y} /morphimP[y Dy Gy ->] | fG'y] := boolP (y \\in f @* G).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -morphM // -!(cfMorphE phi) ?groupM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite !cfun0 ?groupMl // mem_morphim.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [Gy | G'y] := boolP (y \\in G); last by rewrite !cfun0 ?groupMl.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !cfMorphE ?groupM ?morphM // (subsetP sGD).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfker_morph_im phi : f @* cfker (cfMorph phi) = cfker phi.",
            "VernacStartTheoremProof",
            "77fb934775fb9987fb8ad77bcb8b468dd02c197c"
        ],
        [
            "by rewrite cfker_morph // morphim_setIpre (setIidPr (cfker_sub _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_cfker_morph phi (A : {set aT}) : (A \\subset cfker (cfMorph phi)) = (A \\subset G) && (f @* A \\subset cfker phi).",
            "VernacStartTheoremProof",
            "c144c0a44d421fbf5aa28763a7be1fd171c59f4e"
        ],
        [
            "rewrite cfker_morph // subsetI; apply: andb_id2l => sAG.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite sub_morphim_pre // (subset_trans sAG).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_morphim_cfker phi (A : {set aT}) : A \\subset G -> (f @* A \\subset cfker phi) = (A \\subset cfker (cfMorph phi)).",
            "VernacStartTheoremProof",
            "e7fe7d79cfa3b88c30d9d253125427bec9e055f3"
        ],
        [
            "by move=> sAG; rewrite sub_cfker_morph ?sAG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cforder_morph phi : #[cfMorph phi]%CF = #[phi]%CF.",
            "VernacStartTheoremProof",
            "f7d2bda1ae751c81ab6932afcbdfeb59a0167e10"
        ],
        [
            "by apply: cforder_inj_rmorph; apply: cfMorph_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Main.",
            "VernacEndSegment",
            "90613a77e34fb3c12284eeecea95031c8f09c2f1"
        ],
        [
            "Lemma cfResMorph (G H : {group aT}) (phi : 'CF(f @* G)) : H \\subset G -> G \\subset D -> 'Res (cfMorph phi) = cfMorph ('Res[f @* H] phi).",
            "VernacStartTheoremProof",
            "4e7e36d45dc19548ff72ca20fc65b3a5c8ac5792"
        ],
        [
            "move=> sHG sGD; have sHD := subset_trans sHG sGD.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "apply/cfun_inP=> x Hx; have [Gx Dx] := (subsetP sHG x Hx, subsetP sHD x Hx).",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "by rewrite !(cfMorphE, cfResE) ?morphimS ?mem_morphim //.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Morphim.",
            "VernacEndSegment",
            "168fbc3a2a73e55e94c79bdb37226af0d77bd3d8"
        ],
        [
            "Prenex Implicits cfMorph.",
            "VernacExtend",
            "9d7a7a6905c7ec784bb55173bfdec59020a82cc9"
        ],
        [
            "Section Isomorphism.",
            "VernacBeginSection",
            "3411a35ad5f68ebef11b7a221152a9a4b850ba3f"
        ],
        [
            "Variables (aT rT : finGroupType) (G : {group aT}) (f : {morphism G >-> rT}).",
            "VernacAssumption",
            "95e3b77230b5e100bf2b03f16b216719b9d823b3"
        ],
        [
            "Variable R : {group rT}.",
            "VernacAssumption",
            "92d689c50837f10a13d7fd32549f0c9e42c1a1b1"
        ],
        [
            "Hypothesis isoGR : isom G R f.",
            "VernacAssumption",
            "f868602c8f8e7d79a0d758ebb3179b71d82d49a8"
        ],
        [
            "Let defR := isom_im isoGR.",
            "VernacDefinition",
            "97bc5cda3d01122bfe377130bcb475cef09dbfac"
        ],
        [
            "Local Notation G1 := (isom_inv isoGR @* R).",
            "VernacSyntacticDefinition",
            "7dfea7c2fa6fe3f4d0d0f8a9d3c8e6d747562f4c"
        ],
        [
            "Let defG : G1 = G := isom_im (isom_sym isoGR).",
            "VernacDefinition",
            "7524e35748387633c2f07fd2f2cb2820e1f55337"
        ],
        [
            "Fact cfIsom_key : unit.",
            "VernacStartTheoremProof",
            "645b72c19cc433ba82a916abca5922a8046515a1"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cfIsom := locked_with cfIsom_key (cfMorph \\o 'Res[G1] : 'CF(G) -> 'CF(R)).",
            "VernacDefinition",
            "6477154858a55b180001984d090a79d29c43e3aa"
        ],
        [
            "Canonical cfIsom_unlockable := [unlockable of cfIsom].",
            "VernacDefinition",
            "970115e31a17cf1deb60486fe4511a2bbd90d5d6"
        ],
        [
            "Lemma cfIsomE phi x : x \\in G -> cfIsom phi (f x) = phi x.",
            "VernacStartTheoremProof",
            "1cb1a6e1cb731dd7c889f8d4f3fd9c637b7f49ba"
        ],
        [
            "move=> Gx; rewrite unlock cfMorphE //= /restrm ?defG ?cfRes_id ?invmE //.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite -defR mem_morphim.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfIsom1 phi : cfIsom phi 1%g = phi 1%g.",
            "VernacStartTheoremProof",
            "effa431fd70ddb08771588d72a26301dc8255c57"
        ],
        [
            "by rewrite -(morph1 f) cfIsomE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical cfIsom_additive := [additive of cfIsom].",
            "VernacDefinition",
            "d7e4946f66df1e070bb60453288e7a804ce4d35d"
        ],
        [
            "Canonical cfIsom_linear := [linear of cfIsom].",
            "VernacDefinition",
            "3760c253ae7dce81ea1d93ab4cbb5cf1517da855"
        ],
        [
            "Canonical cfIsom_rmorphism := [rmorphism of cfIsom].",
            "VernacDefinition",
            "6701797ff729160084c44d57ce2ff15382547673"
        ],
        [
            "Canonical cfIsom_lrmorphism := [lrmorphism of cfIsom].",
            "VernacDefinition",
            "03b54b7963d6c70ad394bb806e668377dd920c35"
        ],
        [
            "Lemma cfIsom_cfun1 : cfIsom 1 = 1.",
            "VernacStartTheoremProof",
            "7772064e04a33ad9fc7bf6cfd077f6176b695267"
        ],
        [
            "exact: rmorph1.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfker_isom phi : cfker (cfIsom phi) = f @* cfker phi.",
            "VernacStartTheoremProof",
            "c7219fb374ecdfb226d7a5094474139700f612be"
        ],
        [
            "rewrite unlock cfker_morph // defG cfRes_id morphpre_restrm morphpre_invm.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -defR !morphimIim.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Isomorphism.",
            "VernacEndSegment",
            "af6f4e2cf4afb7a94b566cf13d2afb5cb4e9b2fd"
        ],
        [
            "Prenex Implicits cfIsom.",
            "VernacExtend",
            "d753def144b2fd7d5beb048ef6353698d93ae217"
        ],
        [
            "Section InvMorphism.",
            "VernacBeginSection",
            "7adfcf5e4e57dec7d1a25ede2ead402c125c2492"
        ],
        [
            "Variables (aT rT : finGroupType) (G : {group aT}) (f : {morphism G >-> rT}).",
            "VernacAssumption",
            "95e3b77230b5e100bf2b03f16b216719b9d823b3"
        ],
        [
            "Variable R : {group rT}.",
            "VernacAssumption",
            "92d689c50837f10a13d7fd32549f0c9e42c1a1b1"
        ],
        [
            "Hypothesis isoGR : isom G R f.",
            "VernacAssumption",
            "f868602c8f8e7d79a0d758ebb3179b71d82d49a8"
        ],
        [
            "Lemma cfIsomK : cancel (cfIsom isoGR) (cfIsom (isom_sym isoGR)).",
            "VernacStartTheoremProof",
            "61c1e2e2dab2757f326ee9227ba2c517d0d928c7"
        ],
        [
            "move=> phi; apply/cfun_inP=> x Gx; rewrite -{1}(invmE (isom_inj isoGR) Gx).",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by rewrite !cfIsomE // -(isom_im isoGR) mem_morphim.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfIsomKV : cancel (cfIsom (isom_sym isoGR)) (cfIsom isoGR).",
            "VernacStartTheoremProof",
            "ebc0e4aef7da64a48d03b40a16429af5c5513071"
        ],
        [
            "move=> phi; apply/cfun_inP=> y Ry; pose injGR := isom_inj isoGR.",
            "VernacExtend",
            "d7b8cb010e17c0eef7bcb84dff260d146075a321"
        ],
        [
            "rewrite -{1}[y](invmK injGR) ?(isom_im isoGR) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "suffices /morphpreP[fGy Gf'y]: y \\in invm injGR @*^-1 G by rewrite !cfIsomE.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by rewrite morphpre_invm (isom_im isoGR).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfIsom_inj : injective (cfIsom isoGR).",
            "VernacStartTheoremProof",
            "b802b3ba25214ae57387ef8bc65fbf05c68ee1e7"
        ],
        [
            "exact: can_inj cfIsomK.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfIsom_eq1 phi : (cfIsom isoGR phi == 1) = (phi == 1).",
            "VernacStartTheoremProof",
            "a9ec47c3bb24978f3fbbd25b9819c3ae51547cbb"
        ],
        [
            "by apply: rmorph_eq1; apply: cfIsom_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cforder_isom phi : #[cfIsom isoGR phi]%CF = #[phi]%CF.",
            "VernacStartTheoremProof",
            "2a1bfc97b979057664d439bc35783c86dd7a5be7"
        ],
        [
            "exact: cforder_inj_rmorph cfIsom_inj.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End InvMorphism.",
            "VernacEndSegment",
            "801d87128a0a18871f87d62c80d8b3c02a4fd3c6"
        ],
        [
            "Arguments cfIsom_inj {aT rT G f R} isoGR [phi1 phi2] : rename.",
            "VernacArguments",
            "58b2016376fd37fec20dc78bf7e712c905b9622b"
        ],
        [
            "Section Coset.",
            "VernacBeginSection",
            "8d1ae0b8486dcb53298258bfec01d3f8cf56d2b6"
        ],
        [
            "Variables (gT : finGroupType) (G : {group gT}) (B : {set gT}).",
            "VernacAssumption",
            "de833604451d0a7bc1a0ccf7b68c376ece950f01"
        ],
        [
            "Implicit Type rT : finGroupType.",
            "VernacReserve",
            "c78110371eba3535561fcdbb7f94a7e5246392b7"
        ],
        [
            "Local Notation H := <<B>>%g.",
            "VernacSyntacticDefinition",
            "fdc3f00d6e161c0e06a5b5e20c686f9cc642f700"
        ],
        [
            "Definition cfMod : 'CF(G / B) -> 'CF(G) := cfMorph.",
            "VernacDefinition",
            "b052772bf5578cdafb76f0df38ba8c7aa8ae24bb"
        ],
        [
            "Definition ffun_Quo (phi : 'CF(G)) := [ffun Hx : coset_of B => phi (if B \\subset cfker phi then repr Hx else 1%g) *+ (Hx \\in G / B)%g].",
            "VernacDefinition",
            "080a14347680b05e4f0e164c497df2dd983cd2a8"
        ],
        [
            "Fact cfQuo_subproof phi : is_class_fun <<G / B>> (ffun_Quo phi).",
            "VernacStartTheoremProof",
            "43d8d37a2f9301141a5006ee3f27f5430782b4db"
        ],
        [
            "rewrite genGid; apply: intro_class_fun => [|Hx /negPf-> //].",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "move=> _ _ /morphimP[x Nx Gx ->] /morphimP[z Nz Gz ->].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite -morphJ ?mem_morphim ?val_coset_prim ?groupJ //= -gen_subG.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: subsetP => // KphiH; do 2!case: repr_rcosetP => _ /KphiH/cfkerMl->.",
            "VernacExtend",
            "09d2a9a8185b9355b5ea9923b8ee73e4bb71f9bf"
        ],
        [
            "by rewrite cfunJ.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cfQuo phi := Cfun 1 (cfQuo_subproof phi).",
            "VernacDefinition",
            "5e04eede17b2aae27a06c6cf448de5c0e80f9684"
        ],
        [
            "Local Notation \"phi / 'B'\" := (cfQuo phi) (at level 40) : cfun_scope.",
            "VernacNotation",
            "bcd300370d3e50eefa11622282df737a4aefb973"
        ],
        [
            "Local Notation \"phi %% 'B'\" := (cfMod phi) (at level 40) : cfun_scope.",
            "VernacNotation",
            "9ecdfa777899bf20489350323c37f44503dba5d6"
        ],
        [
            "Lemma cfModE phi x : B <| G -> x \\in G -> (phi %% B)%CF x = phi (coset B x).",
            "VernacStartTheoremProof",
            "bdcf991723da46e035fcc854446deafac4b5be44"
        ],
        [
            "by move/normal_norm=> nBG; apply: cfMorphE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfMod1 phi : (phi %% B)%CF 1%g = phi 1%g.",
            "VernacStartTheoremProof",
            "94fe30c6f996d30a16449cb43259964aa41b72b0"
        ],
        [
            "exact: cfMorph1.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical cfMod_additive := [additive of cfMod].",
            "VernacDefinition",
            "40b2541784ce9b22a8eff1df335d794955087cb0"
        ],
        [
            "Canonical cfMod_rmorphism := [rmorphism of cfMod].",
            "VernacDefinition",
            "5c787c95baf16b694cc928151f433f3b8f51c7a2"
        ],
        [
            "Canonical cfMod_linear := [linear of cfMod].",
            "VernacDefinition",
            "110c21040276922f9d365fbcefa36f7645400bce"
        ],
        [
            "Canonical cfMod_lrmorphism := [lrmorphism of cfMod].",
            "VernacDefinition",
            "e2b73510e87a95dba08c586b4a2af111e816ce22"
        ],
        [
            "Lemma cfMod_cfun1 : (1 %% B)%CF = 1.",
            "VernacStartTheoremProof",
            "b9f521be5dc6c26a21cd38050aa63d784bab30a0"
        ],
        [
            "exact: rmorph1.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfker_mod phi : B <| G -> B \\subset cfker (phi %% B).",
            "VernacStartTheoremProof",
            "61cd08efdda838ab3ecd835962886b2a4aedee99"
        ],
        [
            "case/andP=> sBG nBG; rewrite cfker_morph // subsetI sBG.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "apply: subset_trans _ (ker_sub_pre _ _); rewrite ker_coset_prim subsetI.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite (subset_trans sBG nBG) sub_gen.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfQuoEnorm (phi : 'CF(G)) x : B \\subset cfker phi -> x \\in 'N_G(B) -> (phi / B)%CF (coset B x) = phi x.",
            "VernacStartTheoremProof",
            "8881a1d28d003597f18a55a14196cf3f957914ce"
        ],
        [
            "rewrite cfunElock -gen_subG => sHK /setIP[Gx nHx]; rewrite sHK /=.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "rewrite mem_morphim // val_coset_prim //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case: repr_rcosetP => _ /(subsetP sHK)/cfkerMl->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfQuoE (phi : 'CF(G)) x : B <| G -> B \\subset cfker phi -> x \\in G -> (phi / B)%CF (coset B x) = phi x.",
            "VernacStartTheoremProof",
            "dee106567c89d3e8954405e927474448d539ce6f"
        ],
        [
            "by case/andP=> _ nBG sBK Gx; rewrite cfQuoEnorm // (setIidPl _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfQuo1 (phi : 'CF(G)) : (phi / B)%CF 1%g = phi 1%g.",
            "VernacStartTheoremProof",
            "d082e9413de9f2248fd5428db793fec910042cfc"
        ],
        [
            "by rewrite cfunElock repr_coset1 group1 if_same.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfQuoEout (phi : 'CF(G)) : ~~ (B \\subset cfker phi) -> (phi / B)%CF = (phi 1%g)%:A.",
            "VernacStartTheoremProof",
            "ca450f472bead748fe7899b00da91b634973e58e"
        ],
        [
            "move/negPf=> not_kerB; apply/cfunP=> x; rewrite cfunE cfun1E mulr_natr.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by rewrite cfunElock not_kerB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfQuo_cfun1 : (1 / B)%CF = 1.",
            "VernacStartTheoremProof",
            "f737b5379b0a5f41276cf94782d5e91c98284bf6"
        ],
        [
            "apply/cfun_inP=> Hx G_Hx; rewrite cfunElock !cfun1E G_Hx cfker_cfun1 -gen_subG.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "have [x nHx Gx ->] := morphimP G_Hx.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case: subsetP=> [sHG | _]; last by rewrite group1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite val_coset_prim //; case: repr_rcosetP => y /sHG/groupM->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfModK : B <| G -> cancel cfMod cfQuo.",
            "VernacStartTheoremProof",
            "4aea251150a1f8de4651a9146be25366e1a82098"
        ],
        [
            "move=> nsBG phi; apply/cfun_inP=> _ /morphimP[x Nx Gx ->] //.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite cfQuoE ?cfker_mod ?cfModE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfQuoK : B <| G -> forall phi, B \\subset cfker phi -> (phi / B %% B)%CF = phi.",
            "VernacStartTheoremProof",
            "38e7615d42b3fa0cb2fdc0684054bfd0e4e19427"
        ],
        [
            "by move=> nsHG phi sHK; apply/cfun_inP=> x Gx; rewrite cfModE ?cfQuoE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfMod_eq1 psi : B <| G -> (psi %% B == 1)%CF = (psi == 1).",
            "VernacStartTheoremProof",
            "6e31a4a4478f8dadaab8d8ced2a2f3bc00a7cf74"
        ],
        [
            "by move/cfModK/can_eq <-; rewrite rmorph1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfQuo_eq1 phi : B <| G -> B \\subset cfker phi -> (phi / B == 1)%CF = (phi == 1).",
            "VernacStartTheoremProof",
            "802c1ce2cf181015ec39131904899dfcb1a7888c"
        ],
        [
            "by move=> nsBG kerH; rewrite -cfMod_eq1 // cfQuoK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Coset.",
            "VernacEndSegment",
            "67f19be5e3b7dff3ae1a7764fb7dc59d0d923ade"
        ],
        [
            "Arguments cfQuo {gT G%G} B%g phi%CF.",
            "VernacArguments",
            "9c498f218bdd49b68f488cc3a4d0d8c5c5463611"
        ],
        [
            "Arguments cfMod {gT G%G B%g} phi%CF.",
            "VernacArguments",
            "dfaa540061be00e96cdefd6e07fe3cf7c797c8d5"
        ],
        [
            "Notation \"phi / H\" := (cfQuo H phi) : cfun_scope.",
            "VernacNotation",
            "45d7e2ebf031759ba1f441606d7e35387a0095b6"
        ],
        [
            "Notation \"phi %% H\" := (@cfMod _ _ H phi) : cfun_scope.",
            "VernacNotation",
            "d831211f79cb29f4473e6a74db9ce6d10acd2e6b"
        ],
        [
            "Section MoreCoset.",
            "VernacBeginSection",
            "7d93a360bf45f091eb800815b10d8f65df2044b7"
        ],
        [
            "Variables (gT : finGroupType) (G : {group gT}).",
            "VernacAssumption",
            "26cb7d9f8ae434831772d6c107d7cf3e4590cb48"
        ],
        [
            "Implicit Types (H K : {group gT}) (phi : 'CF(G)).",
            "VernacReserve",
            "bd9da5a4b48dd1fa3513b11379b82c75ede3d363"
        ],
        [
            "Lemma cfResMod H K (psi : 'CF(G / K)) : H \\subset G -> K <| G -> ('Res (psi %% K) = 'Res[H / K] psi %% K)%CF.",
            "VernacStartTheoremProof",
            "f9ab0725496d45f2eb877a4e73ed017900b61f97"
        ],
        [
            "by move=> sHG /andP[_]; apply: cfResMorph.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma quotient_cfker_mod (A : {set gT}) K (psi : 'CF(G / K)) : K <| G -> (cfker (psi %% K) / K)%g = cfker psi.",
            "VernacStartTheoremProof",
            "d12628e96c8b579a798164858e7dff7d9283c16e"
        ],
        [
            "by case/andP=> _ /cfker_morph_im <-.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_cfker_mod (A : {set gT}) K (psi : 'CF(G / K)) : K <| G -> A \\subset 'N(K) -> (A \\subset cfker (psi %% K)) = (A / K \\subset cfker psi)%g.",
            "VernacStartTheoremProof",
            "4111e54849bcff72f7adc5d0eef9db95e23a0757"
        ],
        [
            "by move=> nsKG nKA; rewrite -(quotientSGK nKA) ?quotient_cfker_mod ?cfker_mod.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfker_quo H phi : H <| G -> H \\subset cfker (phi) -> cfker (phi / H) = (cfker phi / H)%g.",
            "VernacStartTheoremProof",
            "7519fb2a34276847f8a22011909b0bb4ff57d2a7"
        ],
        [
            "move=> nsHG /cfQuoK {2}<- //; have [sHG nHG] := andP nsHG.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "by rewrite cfker_morph 1?quotientGI // cosetpreK (setIidPr _) ?cfker_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfQuoEker phi x : x \\in G -> (phi / cfker phi)%CF (coset (cfker phi) x) = phi x.",
            "VernacStartTheoremProof",
            "13ae1877b05a8d7d384a9191ec52d6d3e4b8c8af"
        ],
        [
            "by move/cfQuoE->; rewrite ?cfker_normal.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfaithful_quo phi : cfaithful (phi / cfker phi).",
            "VernacStartTheoremProof",
            "b814aa99d548b5df4cab326c177cb825b20a4ebd"
        ],
        [
            "by rewrite cfaithfulE cfker_quo ?cfker_normal ?trivg_quotient.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfResQuo H K phi : K \\subset cfker phi -> K \\subset H -> H \\subset G -> ('Res[H / K] (phi / K) = 'Res[H] phi / K)%CF.",
            "VernacStartTheoremProof",
            "83cbe243447b6d43a544750799f2b9906a54eaa6"
        ],
        [
            "move=> kerK sKH sHG; apply/cfun_inP=> xb Hxb; rewrite cfResE ?quotientS //.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "have{xb Hxb} [x nKx Hx ->] := morphimP Hxb.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite !cfQuoEnorm ?cfResE ?sub_cfker_Res // inE ?Hx ?(subsetP sHG).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfQuoInorm K phi : K \\subset cfker phi -> (phi / K)%CF = 'Res ('Res['N_G(K)] phi / K)%CF.",
            "VernacStartTheoremProof",
            "d9532ffe8353413832d25e7121c1b29fe509464d"
        ],
        [
            "move=> kerK; rewrite -cfResQuo ?subsetIl ?quotientInorm ?cfRes_id //.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite subsetI normG (subset_trans kerK) ?cfker_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cforder_mod H (psi : 'CF(G / H)) : H <| G -> #[psi %% H]%CF = #[psi]%CF.",
            "VernacStartTheoremProof",
            "3142a50865e9db46616dd296e9933fbeb5c2e372"
        ],
        [
            "by move/cfModK/can_inj/cforder_inj_rmorph->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cforder_quo H phi : H <| G -> H \\subset cfker phi -> #[phi / H]%CF = #[phi]%CF.",
            "VernacStartTheoremProof",
            "e1bb64cad9cfea0e81aebb7fdebde3c6a7638f05"
        ],
        [
            "by move=> nsHG kerHphi; rewrite -cforder_mod ?cfQuoK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MoreCoset.",
            "VernacEndSegment",
            "8b82d86f4e549f7c68260a311d2f7eecb4e24269"
        ],
        [
            "Section Product.",
            "VernacBeginSection",
            "914172d3ed327611addc0cf5c5164c8f883dd2c9"
        ],
        [
            "Variable (gT : finGroupType) (G : {group gT}).",
            "VernacAssumption",
            "26cb7d9f8ae434831772d6c107d7cf3e4590cb48"
        ],
        [
            "Lemma cfunM_onI A B phi psi : phi \\in 'CF(G, A) -> psi \\in 'CF(G, B) -> phi * psi \\in 'CF(G, A :&: B).",
            "VernacStartTheoremProof",
            "ba01aea9ce42f6912b0e0a1f5f7f42df0f8bcdbb"
        ],
        [
            "rewrite !cfun_onE => Aphi Bpsi; apply/subsetP=> x; rewrite !inE cfunE mulf_eq0.",
            "VernacExtend",
            "01f04d3f5bba3b876eb4ec7b1c8f26d2e2cced77"
        ],
        [
            "by case/norP=> /(subsetP Aphi)-> /(subsetP Bpsi).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfunM_on A phi psi : phi \\in 'CF(G, A) -> psi \\in 'CF(G, A) -> phi * psi \\in 'CF(G, A).",
            "VernacStartTheoremProof",
            "27b9312a2f337930f0ae6bd4315006dc2cc352b5"
        ],
        [
            "by move=> Aphi Bpsi; rewrite -[A]setIid cfunM_onI.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Product.",
            "VernacEndSegment",
            "5f04f1144398832b8d2fce779a7623aa771d11ef"
        ],
        [
            "Section SDproduct.",
            "VernacBeginSection",
            "858b4bb2cbe8cf024fa321a3e48618cdc2df10b3"
        ],
        [
            "Variables (gT : finGroupType) (G K H : {group gT}).",
            "VernacAssumption",
            "4f858719f977f912d8fd5cceff262ca6499eba35"
        ],
        [
            "Hypothesis defG : K ><| H = G.",
            "VernacAssumption",
            "813ec0fb558b04dd0355c167c4bfbb2bef103f5d"
        ],
        [
            "Fact cfSdprodKey : unit.",
            "VernacStartTheoremProof",
            "f7f2afc1e66fe769704038e605dda4dfc4032103"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cfSdprod := locked_with cfSdprodKey (cfMorph \\o cfIsom (tagged (sdprod_isom defG)) : 'CF(H) -> 'CF(G)).",
            "VernacDefinition",
            "bf7eb111594376c111f4129fd20cb5a278e5a7ee"
        ],
        [
            "Canonical cfSdprod_unlockable := [unlockable of cfSdprod].",
            "VernacDefinition",
            "3180bdd4ad9436674d8ecf99c83017483016e714"
        ],
        [
            "Canonical cfSdprod_additive := [additive of cfSdprod].",
            "VernacDefinition",
            "9e7077ca9b7e79ff79e27fa72a87b81b17edd76c"
        ],
        [
            "Canonical cfSdprod_linear := [linear of cfSdprod].",
            "VernacDefinition",
            "c87756f7f60893b025a8800eb199426a8ff13389"
        ],
        [
            "Canonical cfSdprod_rmorphism := [rmorphism of cfSdprod].",
            "VernacDefinition",
            "100fd97a624f0a217399e9533f98c9db0295552e"
        ],
        [
            "Canonical cfSdprod_lrmorphism := [lrmorphism of cfSdprod].",
            "VernacDefinition",
            "88176ccd00d02c04d6bb9c6f7e6a3b7eb53555a6"
        ],
        [
            "Lemma cfSdprod1 phi : cfSdprod phi 1%g = phi 1%g.",
            "VernacStartTheoremProof",
            "2ddb4d4cfa4ac65167bb50e52d4f5f1291e88562"
        ],
        [
            "by rewrite unlock /= cfMorph1 cfIsom1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let nsKG : K <| G.",
            "VernacDefinition",
            "537da3cd4d7ed1a8264bcf89bd08b7da5266655a"
        ],
        [
            "by have [] := sdprod_context defG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let sHG : H \\subset G.",
            "VernacDefinition",
            "b726f0bf853708711a718c0848c95484a9cecba2"
        ],
        [
            "by have [] := sdprod_context defG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let sKG : K \\subset G.",
            "VernacDefinition",
            "32afad186e282c63037b962c4608107c252a067e"
        ],
        [
            "by have [] := andP nsKG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfker_sdprod phi : K \\subset cfker (cfSdprod phi).",
            "VernacStartTheoremProof",
            "0208b1c56562660bd8c304e89da78e5f510645e5"
        ],
        [
            "by rewrite unlock_with cfker_mod.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfSdprodEr phi : {in H, cfSdprod phi =1 phi}.",
            "VernacStartTheoremProof",
            "95429d2cf87adb2e0ae78cbde795a2a4ac0c98ee"
        ],
        [
            "by move=> y Hy; rewrite unlock cfModE ?cfIsomE ?(subsetP sHG).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfSdprodE phi : {in K & H, forall x y, cfSdprod phi (x * y)%g = phi y}.",
            "VernacStartTheoremProof",
            "e4a763ce97c6aa450d218a60db4be57991506bae"
        ],
        [
            "by move=> x y Kx Hy; rewrite /= cfkerMl ?(subsetP (cfker_sdprod _)) ?cfSdprodEr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfSdprodK : cancel cfSdprod 'Res[H].",
            "VernacStartTheoremProof",
            "74089da815a8b520a61072f08c71847771f63306"
        ],
        [
            "by move=> phi; apply/cfun_inP=> x Hx; rewrite cfResE ?cfSdprodEr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfSdprod_inj : injective cfSdprod.",
            "VernacStartTheoremProof",
            "cd3b13a1c51d878c16351b8b2501099db7c4afdf"
        ],
        [
            "exact: can_inj cfSdprodK.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfSdprod_eq1 phi : (cfSdprod phi == 1) = (phi == 1).",
            "VernacStartTheoremProof",
            "070a52e5c49f4da05f4c61315195df81b50531a9"
        ],
        [
            "exact: rmorph_eq1 cfSdprod_inj.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfRes_sdprodK phi : K \\subset cfker phi -> cfSdprod ('Res[H] phi) = phi.",
            "VernacStartTheoremProof",
            "a0ea6e9003cba75edfa586ff2369e17140167a23"
        ],
        [
            "move=> kerK; apply/cfun_inP=> _ /(mem_sdprod defG)[x [y [Kx Hy -> _]]].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite cfSdprodE // cfResE // cfkerMl ?(subsetP kerK).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sdprod_cfker phi : K ><| cfker phi = cfker (cfSdprod phi).",
            "VernacStartTheoremProof",
            "a0a89e24e404eca18a2080793684816bc96c8764"
        ],
        [
            "have [skerH [_ _ nKH tiKH]] := (cfker_sub phi, sdprodP defG).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite unlock cfker_morph ?normal_norm // cfker_isom restrmEsub //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -(sdprod_modl defG) ?sub_cosetpre //=; congr (_ ><| _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by rewrite quotientK ?(subset_trans skerH) // -group_modr //= setIC tiKH mul1g.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cforder_sdprod phi : #[cfSdprod phi]%CF = #[phi]%CF.",
            "VernacStartTheoremProof",
            "065dd36351de73d2515463b3aaa6f18311f7ecff"
        ],
        [
            "by apply: cforder_inj_rmorph cfSdprod_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SDproduct.",
            "VernacEndSegment",
            "6e9ad9882367ecd7487092145fb1c92bef4583a4"
        ],
        [
            "Section DProduct.",
            "VernacBeginSection",
            "31ccc7799a01a955d99c0828b32d47bf0a1d6c2d"
        ],
        [
            "Variables (gT : finGroupType) (G K H : {group gT}).",
            "VernacAssumption",
            "4f858719f977f912d8fd5cceff262ca6499eba35"
        ],
        [
            "Hypothesis KxH : K \\x H = G.",
            "VernacAssumption",
            "2aeeb7d1b4e0adf9874a9f7f99bddca6575d103a"
        ],
        [
            "Lemma reindex_dprod R idx (op : Monoid.com_law idx) (F : gT -> R) : \\big[op/idx]_(g in G) F g = \\big[op/idx]_(k in K) \\big[op/idx]_(h in H) F (k * h)%g.",
            "VernacStartTheoremProof",
            "97237398a143662327da3d80575e7737adadeb9a"
        ],
        [
            "have /mulgmP/misomP[fM /isomP[injf im_f]] := KxH.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite pair_big_dep -im_f morphimEdom big_imset; last exact/injmP.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: eq_big => [][x y]; rewrite ?inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cfDprodr := cfSdprod (dprodWsd KxH).",
            "VernacDefinition",
            "da99581f24aef07783fbdbbd6a6bc9d6c111f852"
        ],
        [
            "Definition cfDprodl := cfSdprod (dprodWsdC KxH).",
            "VernacDefinition",
            "837918f52c4ad7ee389b58303e2111d08104f289"
        ],
        [
            "Definition cfDprod phi psi := cfDprodl phi * cfDprodr psi.",
            "VernacDefinition",
            "1d528917d978c1754e3ae591aec47436db02a13b"
        ],
        [
            "Canonical cfDprodl_additive := [additive of cfDprodl].",
            "VernacDefinition",
            "3c723636cd0ef93bc78c9b96cf426b07f7a73fb9"
        ],
        [
            "Canonical cfDprodl_linear := [linear of cfDprodl].",
            "VernacDefinition",
            "fdf51aebb8ececabec2407972ef68c793f26f5a4"
        ],
        [
            "Canonical cfDprodl_rmorphism := [rmorphism of cfDprodl].",
            "VernacDefinition",
            "094e9e464afa9a450d28f1ff93a724ce4ea40026"
        ],
        [
            "Canonical cfDprodl_lrmorphism := [lrmorphism of cfDprodl].",
            "VernacDefinition",
            "c10be385779e0e96b0019c019556b80de278c477"
        ],
        [
            "Canonical cfDprodr_additive := [additive of cfDprodr].",
            "VernacDefinition",
            "fd1f0679898bd505b6ff9bb1b11e0652149d8941"
        ],
        [
            "Canonical cfDprodr_linear := [linear of cfDprodr].",
            "VernacDefinition",
            "3c6c290ae66f94988c5d4b47397b0582388d61c2"
        ],
        [
            "Canonical cfDprodr_rmorphism := [rmorphism of cfDprodr].",
            "VernacDefinition",
            "c84f702647d564d1b7cd0ffaec03b48a516042e4"
        ],
        [
            "Canonical cfDprodr_lrmorphism := [lrmorphism of cfDprodr].",
            "VernacDefinition",
            "52aaae5fe5f4b91599f202fa06eee825c98dfa46"
        ],
        [
            "Lemma cfDprodl1 phi : cfDprodl phi 1%g = phi 1%g.",
            "VernacStartTheoremProof",
            "d41c3a5232641faa6b5ed5f6bbb71bc3f091a2cc"
        ],
        [
            "exact: cfSdprod1.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfDprodr1 psi : cfDprodr psi 1%g = psi 1%g.",
            "VernacStartTheoremProof",
            "8cf3085f5ecd1760a431263de3b581281c78f531"
        ],
        [
            "exact: cfSdprod1.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfDprod1 phi psi : cfDprod phi psi 1%g = phi 1%g * psi 1%g.",
            "VernacStartTheoremProof",
            "4abab8ffbf6092de29a4b54f0518e0b331eca35c"
        ],
        [
            "by rewrite cfunE /= !cfSdprod1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfDprodl_eq1 phi : (cfDprodl phi == 1) = (phi == 1).",
            "VernacStartTheoremProof",
            "2c9f69ec22234b18b1c729e3fd32b0421910dd7e"
        ],
        [
            "exact: cfSdprod_eq1.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfDprodr_eq1 psi : (cfDprodr psi == 1) = (psi == 1).",
            "VernacStartTheoremProof",
            "140618b451d13b23fd32a8abe50ca0242faad133"
        ],
        [
            "exact: cfSdprod_eq1.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfDprod_cfun1r phi : cfDprod phi 1 = cfDprodl phi.",
            "VernacStartTheoremProof",
            "db37834cd77151896d6dee3799a56d50676ddadb"
        ],
        [
            "by rewrite /cfDprod rmorph1 mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfDprod_cfun1l psi : cfDprod 1 psi = cfDprodr psi.",
            "VernacStartTheoremProof",
            "6db5a2333cc0f4e3634ffb6ea15fcf632d74753f"
        ],
        [
            "by rewrite /cfDprod rmorph1 mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfDprod_cfun1 : cfDprod 1 1 = 1.",
            "VernacStartTheoremProof",
            "0eac884120defbb0f2c8f88f10500d2c55502e59"
        ],
        [
            "by rewrite cfDprod_cfun1l rmorph1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfDprod_split phi psi : cfDprod phi psi = cfDprod phi 1 * cfDprod 1 psi.",
            "VernacStartTheoremProof",
            "cb2768fe687dd260258eb1a41798da7c6db2248b"
        ],
        [
            "by rewrite cfDprod_cfun1l cfDprod_cfun1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let nsKG : K <| G.",
            "VernacDefinition",
            "537da3cd4d7ed1a8264bcf89bd08b7da5266655a"
        ],
        [
            "by have [] := dprod_normal2 KxH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let nsHG : H <| G.",
            "VernacDefinition",
            "f3cb445b108781fe13e28d613a15786618f4ca61"
        ],
        [
            "by have [] := dprod_normal2 KxH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let cKH : H \\subset 'C(K).",
            "VernacDefinition",
            "807796132eddf84dae4477954072dbdccdf130a6"
        ],
        [
            "by have [] := dprodP KxH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let sKG := normal_sub nsKG.",
            "VernacDefinition",
            "83af50a89e9bb39a8d6d6fd0b4568bb0028bc6d1"
        ],
        [
            "Let sHG := normal_sub nsHG.",
            "VernacDefinition",
            "c7f781c1c5f3c43b09fb36fa5b01e8c7c2d0fcf3"
        ],
        [
            "Lemma cfDprodlK : cancel cfDprodl 'Res[K].",
            "VernacStartTheoremProof",
            "07de8f4734206cd71aff2e3507baa4e6780c01dd"
        ],
        [
            "exact: cfSdprodK.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfDprodrK : cancel cfDprodr 'Res[H].",
            "VernacStartTheoremProof",
            "3e96958c0635fabe09e21fe0c3412e70b063b640"
        ],
        [
            "exact: cfSdprodK.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfker_dprodl phi : cfker phi \\x H = cfker (cfDprodl phi).",
            "VernacStartTheoremProof",
            "ef5640bb8d0f34ddba33a7d1b8e5085f01c650a4"
        ],
        [
            "by rewrite dprodC -sdprod_cfker dprodEsd // centsC (centsS (cfker_sub _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfker_dprodr psi : K \\x cfker psi = cfker (cfDprodr psi).",
            "VernacStartTheoremProof",
            "d75e7aa54b1d8155b6a8b373955f0cf6b17515a1"
        ],
        [
            "by rewrite -sdprod_cfker dprodEsd // (subset_trans (cfker_sub _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfDprodEl phi : {in K & H, forall k h, cfDprodl phi (k * h)%g = phi k}.",
            "VernacStartTheoremProof",
            "4e90aeab4f193c191a1282ff644360c5aa7c69fd"
        ],
        [
            "by move=> k h Kk Hh /=; rewrite -(centsP cKH) // cfSdprodE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfDprodEr psi : {in K & H, forall k h, cfDprodr psi (k * h)%g = psi h}.",
            "VernacStartTheoremProof",
            "2e2a2c2ffba62158ecc789e4f2d02b2ba80899c8"
        ],
        [
            "exact: cfSdprodE.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfDprodE phi psi : {in K & H, forall h k, cfDprod phi psi (h * k)%g = phi h * psi k}.",
            "VernacStartTheoremProof",
            "dfbf3f7bcb176a91b481c66100432f05ec60c19e"
        ],
        [
            "by move=> k h Kk Hh /=; rewrite cfunE cfDprodEl ?cfDprodEr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfDprod_Resl phi psi : 'Res[K] (cfDprod phi psi) = psi 1%g *: phi.",
            "VernacStartTheoremProof",
            "cb951998ad352cf6e701dcaeb5ead4fee7b6cba3"
        ],
        [
            "by apply/cfun_inP=> x Kx; rewrite cfunE cfResE // -{1}[x]mulg1 mulrC cfDprodE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfDprod_Resr phi psi : 'Res[H] (cfDprod phi psi) = phi 1%g *: psi.",
            "VernacStartTheoremProof",
            "746e196c13f87d2559f13af2291835fe44f2902e"
        ],
        [
            "by apply/cfun_inP=> y Hy; rewrite cfunE cfResE // -{1}[y]mul1g cfDprodE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfDprodKl (psi : 'CF(H)) : psi 1%g = 1 -> cancel (cfDprod^~ psi) 'Res.",
            "VernacStartTheoremProof",
            "8eb4a529855a7b3cec3597ae904ec325c7eb598c"
        ],
        [
            "by move=> psi1 phi; rewrite cfDprod_Resl psi1 scale1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfDprodKr (phi : 'CF(K)) : phi 1%g = 1 -> cancel (cfDprod phi) 'Res.",
            "VernacStartTheoremProof",
            "86fde8588c88af94b91c4ddc8efee2094aec4843"
        ],
        [
            "by move=> phi1 psi; rewrite cfDprod_Resr phi1 scale1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfker_dprod phi psi : cfker phi <*> cfker psi \\subset cfker (cfDprod phi psi).",
            "VernacStartTheoremProof",
            "9c67955b23912544cc75e197306078811ae1eab6"
        ],
        [
            "rewrite -genM_join gen_subG; apply/subsetP=> _ /mulsgP[x y kKx kHy ->] /=.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "have [[Kx _] [Hy _]] := (setIdP kKx, setIdP kHy).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have Gxy: (x * y)%g \\in G by rewrite -(dprodW KxH) mem_mulg.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite inE Gxy; apply/forallP=> g.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "have [Gg | G'g] := boolP (g \\in G); last by rewrite !cfun0 1?groupMl.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have{g Gg} [k [h [Kk Hh -> _]]] := mem_dprod KxH Gg.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite mulgA -(mulgA x) (centsP cKH y) // mulgA -mulgA !cfDprodE ?groupM //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite !cfkerMl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdot_dprod phi1 phi2 psi1 psi2 : '[cfDprod phi1 psi1, cfDprod phi2 psi2] = '[phi1, phi2] * '[psi1, psi2].",
            "VernacStartTheoremProof",
            "ad7921894d5a8cc9ba81cdbe7aadac52e0c921ac"
        ],
        [
            "rewrite !cfdotE mulrCA -mulrA mulrCA mulrA -invfM -natrM (dprod_card KxH).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "congr (_ * _); rewrite big_distrl reindex_dprod /=; apply: eq_bigr => k Kk.",
            "VernacExtend",
            "775b998c29d59f89d853e0c4a629d4a3388abe3b"
        ],
        [
            "rewrite big_distrr; apply: eq_bigr => h Hh /=.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite mulrCA -mulrA -rmorphM mulrCA mulrA !cfDprodE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfDprodl_iso : isometry cfDprodl.",
            "VernacStartTheoremProof",
            "6717bc20b1882a47995488c179c10ed354a231f5"
        ],
        [
            "by move=> phi1 phi2; rewrite -!cfDprod_cfun1r cfdot_dprod cfnorm1 mulr1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfDprodr_iso : isometry cfDprodr.",
            "VernacStartTheoremProof",
            "c539ec7a29d85c6f6c4af91507302192b36d977a"
        ],
        [
            "by move=> psi1 psi2; rewrite -!cfDprod_cfun1l cfdot_dprod cfnorm1 mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cforder_dprodl phi : #[cfDprodl phi]%CF = #[phi]%CF.",
            "VernacStartTheoremProof",
            "fc7396815d68cef650b67729ba3dfc0ccc9409cf"
        ],
        [
            "exact: cforder_sdprod.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cforder_dprodr psi : #[cfDprodr psi]%CF = #[psi]%CF.",
            "VernacStartTheoremProof",
            "71720a39d5259b4ebcee05e820c28772f0b6765a"
        ],
        [
            "exact: cforder_sdprod.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End DProduct.",
            "VernacEndSegment",
            "f1bd963824b31978e80fc2e8273a6a0830e13563"
        ],
        [
            "Lemma cfDprodC (gT : finGroupType) (G K H : {group gT}) (KxH : K \\x H = G) (HxK : H \\x K = G) chi psi : cfDprod KxH chi psi = cfDprod HxK psi chi.",
            "VernacStartTheoremProof",
            "48adc163b617b90045219c0093089be17c7161ff"
        ],
        [
            "rewrite /cfDprod mulrC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by congr (_ * _); congr (cfSdprod _ _); apply: eq_irrelevance.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Bigdproduct.",
            "VernacBeginSection",
            "7a7fa1e55857353d6c2e6cff8f79d7ae6230067b"
        ],
        [
            "Variables (gT : finGroupType) (I : finType) (P : pred I).",
            "VernacAssumption",
            "69254dfe92e8b6056c735a7426d5547e06769392"
        ],
        [
            "Variables (A : I -> {group gT}) (G : {group gT}).",
            "VernacAssumption",
            "80fcfc21d9705e2f1be5f70e2873aac140630b3a"
        ],
        [
            "Hypothesis defG : \\big[dprod/1%g]_(i | P i) A i = G.",
            "VernacAssumption",
            "92e6d8a86db9291b3cd3fa2d69ee04d305a7c11a"
        ],
        [
            "Let sAG i : P i -> A i \\subset G.",
            "VernacDefinition",
            "052746740faf467d19ae8076ef846f227042c316"
        ],
        [
            "by move=> Pi; rewrite -(bigdprodWY defG) (bigD1 i) ?joing_subl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact cfBigdprodi_subproof i : gval (if P i then A i else 1%G) \\x <<\\bigcup_(j | P j && (j != i)) A j>> = G.",
            "VernacStartTheoremProof",
            "ea5c8f6bb3bc556cb7d0013175427264679c8d93"
        ],
        [
            "have:= defG; rewrite fun_if big_mkcond (bigD1 i) // -big_mkcondl /= => defGi.",
            "VernacExtend",
            "8431fc4d2460f7908baa11892c1b26797a3f17b8"
        ],
        [
            "by have [[_ Gi' _ defGi']] := dprodP defGi; rewrite (bigdprodWY defGi') -defGi'.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cfBigdprodi i := cfDprodl (cfBigdprodi_subproof i) \\o 'Res[_, A i].",
            "VernacDefinition",
            "78f64601c69d83f4070058e3c4cce2e93cc6f059"
        ],
        [
            "Canonical cfBigdprodi_additive i := [additive of @cfBigdprodi i].",
            "VernacDefinition",
            "45a2a9c952a2f169b59c15dee8b069894b64e36f"
        ],
        [
            "Canonical cfBigdprodi_linear i := [linear of @cfBigdprodi i].",
            "VernacDefinition",
            "91c0362e809aa0394238ca4c2a0ea942079964dc"
        ],
        [
            "Canonical cfBigdprodi_rmorphism i := [rmorphism of @cfBigdprodi i].",
            "VernacDefinition",
            "78521f1076bc044d00a9f5c9a01cb55d04ec12bb"
        ],
        [
            "Canonical cfBigdprodi_lrmorphism i := [lrmorphism of @cfBigdprodi i].",
            "VernacDefinition",
            "2814c491712bb9656e55fcb5b7d1bb63f8c3bc44"
        ],
        [
            "Lemma cfBigdprodi1 i (phi : 'CF(A i)) : cfBigdprodi phi 1%g = phi 1%g.",
            "VernacStartTheoremProof",
            "8398d40723c886072ee02eba138faceb2c006008"
        ],
        [
            "by rewrite cfDprodl1 cfRes1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfBigdprodi_eq1 i (phi : 'CF(A i)) : P i -> (cfBigdprodi phi == 1) = (phi == 1).",
            "VernacStartTheoremProof",
            "fec44544d52deb5c255741952f89ae8baacb86a6"
        ],
        [
            "by move=> Pi; rewrite cfSdprod_eq1 Pi cfRes_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfBigdprodiK i : P i -> cancel (@cfBigdprodi i) 'Res[A i].",
            "VernacStartTheoremProof",
            "16464292b554468d726e2fb5af463ca0394697e8"
        ],
        [
            "move=> Pi phi; have:= cfDprodlK (cfBigdprodi_subproof i) ('Res phi).",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "by rewrite -[cfDprodl _ _]/(cfBigdprodi phi) Pi cfRes_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfBigdprodi_inj i : P i -> injective (@cfBigdprodi i).",
            "VernacStartTheoremProof",
            "0229201314569935cbde85a8fbb5f9cc3894f06b"
        ],
        [
            "by move/cfBigdprodiK; apply: can_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfBigdprodEi i (phi : 'CF(A i)) x : P i -> (forall j, P j -> x j \\in A j) -> cfBigdprodi phi (\\prod_(j | P j) x j)%g = phi (x i).",
            "VernacStartTheoremProof",
            "6593e9b6072330c5fde014c2068d83a641b31c02"
        ],
        [
            "set r := enum P => Pi /forall_inP; have r_i: i \\in r by rewrite mem_enum.",
            "VernacExtend",
            "d2991b7607b6316c9d43d28c85f87ca601299ca6"
        ],
        [
            "have:= bigdprodWcp defG; rewrite -big_andE -!(big_filter _ P) filter_index_enum.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "rewrite -/r big_all => defGr /allP Ax.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite (perm_bigcprod defGr Ax (perm_to_rem r_i)) big_cons cfDprodEl ?Pi //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite cfRes_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite Ax.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite big_seq group_prod // => j; rewrite mem_rem_uniq ?enum_uniq //.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "case/andP=> i'j /= r_j; apply/mem_gen/bigcupP; exists j; last exact: Ax.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -[P j](mem_enum P) r_j.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfBigdprodi_iso i : P i -> isometry (@cfBigdprodi i).",
            "VernacStartTheoremProof",
            "649c8f1fc30118280a912fb4965aad374d54ffa8"
        ],
        [
            "by move=> Pi phi psi; rewrite cfDprodl_iso Pi !cfRes_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cfBigdprod (phi : forall i, 'CF(A i)) := \\prod_(i | P i) cfBigdprodi (phi i).",
            "VernacDefinition",
            "d91a8445efc30187d5f7b5e8b7b379f449011de4"
        ],
        [
            "Lemma cfBigdprodE phi x : (forall i, P i -> x i \\in A i) -> cfBigdprod phi (\\prod_(i | P i) x i)%g = \\prod_(i | P i) phi i (x i).",
            "VernacStartTheoremProof",
            "e2b69c39b827b07f512fd7a541db2d023d68ac97"
        ],
        [
            "move=> Ax; rewrite prod_cfunE; last by rewrite -(bigdprodW defG) mem_prodg.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: eq_bigr => i Pi; rewrite cfBigdprodEi.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfBigdprod1 phi : cfBigdprod phi 1%g = \\prod_(i | P i) phi i 1%g.",
            "VernacStartTheoremProof",
            "790ed62fbfc7008075ea535071fcc0e078d3254e"
        ],
        [
            "by rewrite prod_cfunE //; apply/eq_bigr=> i _; apply: cfBigdprodi1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfBigdprodK phi (Phi := cfBigdprod phi) i (a := phi i 1%g / Phi 1%g) : Phi 1%g != 0 -> P i -> a != 0 /\\ a *: 'Res[A i] Phi = phi i.",
            "VernacStartTheoremProof",
            "73a3476c20b3a5aeffc364c5ac253d0239b0aecf"
        ],
        [
            "move=> nzPhi Pi; split.",
            "VernacExtend",
            "22de1c5faad21de60fd48f882c8175e01347018a"
        ],
        [
            "rewrite mulf_neq0 ?invr_eq0 // (contraNneq _ nzPhi) // => phi_i0.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite cfBigdprod1 (bigD1 i) //= phi_i0 mul0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/cfun_inP=> x Aix; rewrite cfunE cfResE ?sAG // mulrAC.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "have {1}->: x = (\\prod_(j | P j) (if j == i then x else 1))%g.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -big_mkcondr (big_pred1 i) ?eqxx // => j /=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by apply: andb_idl => /eqP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite cfBigdprodE => [|j _]; last by case: eqP => // ->.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply: canLR (mulfK nzPhi) _; rewrite cfBigdprod1 !(bigD1 i Pi) /= eqxx.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite mulrCA !mulrA; congr (_ * _); apply: eq_bigr => j /andP[_ /negPf->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfdot_bigdprod phi psi : '[cfBigdprod phi, cfBigdprod psi] = \\prod_(i | P i) '[phi i, psi i].",
            "VernacStartTheoremProof",
            "25e9946365486030702eef5839d7d62c7718d2af"
        ],
        [
            "apply: canLR (mulKf (neq0CG G)) _; rewrite -(bigdprod_card defG).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite (big_morph _ (@natrM _) (erefl _)) -big_split /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (eq_bigr _ (fun i _ => mulVKf (neq0CG _) _)) (big_distr_big_dep 1%g) /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "set F := pfamily _ _ _; pose h (f : {ffun I -> gT}) := (\\prod_(i | P i) f i)%g.",
            "VernacExtend",
            "dda58a04ca4da9adf6d016079f462c4d6ff69ca8"
        ],
        [
            "pose is_hK x f := forall f1, (f1 \\in F) && (h f1 == x) = (f == f1).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have /fin_all_exists[h1 Dh1] x: exists f, x \\in G -> is_hK x f.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case Gx: (x \\in G); last by exists [ffun _ => x].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have [f [Af fK Uf]] := mem_bigdprod defG Gx.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists [ffun i => if P i then f i else 1%g] => _ f1.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply/andP/eqP=> [[/pfamilyP[Pf1 Af1] /eqP Dx] | <-].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by apply/ffunP=> i; rewrite ffunE; case: ifPn => [/Uf-> | /(supportP Pf1)].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split; last by rewrite fK; apply/eqP/eq_bigr=> i Pi; rewrite ffunE Pi.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/familyP=> i; rewrite ffunE !unfold_in; case: ifP => //= /Af.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (reindex_onto h h1) /= => [|x /Dh1/(_ (h1 x))]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite eqxx => /andP[_ /eqP].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/eq_big => [f | f /andP[/Dh1<- /andP[/pfamilyP[_ Af] _]]]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !cfBigdprodE // rmorph_prod -big_split /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/idP/idP=> [/andP[/Dh1<-] | Ff]; first by rewrite eqxx andbT.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have /pfamilyP[_ Af] := Ff; suffices Ghf: h f \\in G by rewrite -Dh1 ?Ghf ?Ff /=.",
            "VernacExtend",
            "32f3051101718011671dd27b552d72a725766d33"
        ],
        [
            "by apply/group_prod=> i Pi; rewrite (subsetP (sAG Pi)) ?Af.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Bigdproduct.",
            "VernacEndSegment",
            "38ed38b42584ef7cbc1dc3e563b82483d30db704"
        ],
        [
            "Section MorphIsometry.",
            "VernacBeginSection",
            "17b83411e8ce4813e879d88b1f726939f0f6615d"
        ],
        [
            "Variable gT : finGroupType.",
            "VernacAssumption",
            "694477e88f23a3b7d6edaa9ed9d49ebe1ee92aa6"
        ],
        [
            "Implicit Types (D G H K : {group gT}) (aT rT : finGroupType).",
            "VernacReserve",
            "44132d7f66ab91464d877334b5b8fda5c5276b86"
        ],
        [
            "Lemma cfMorph_iso aT rT (G D : {group aT}) (f : {morphism D >-> rT}) : G \\subset D -> isometry (cfMorph : 'CF(f @* G) -> 'CF(G)).",
            "VernacStartTheoremProof",
            "557d7228ced6c9671a5bac06df5371adc751107e"
        ],
        [
            "move=> sGD phi psi; rewrite !cfdotE card_morphim (setIidPr sGD).",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "rewrite -(LagrangeI G ('ker f)) /= mulnC natrM invfM -mulrA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "congr (_ * _); apply: (canLR (mulKf (neq0CG _))).",
            "VernacExtend",
            "385739dd8a4f73703d3828c61e1780a276bfaa31"
        ],
        [
            "rewrite mulr_sumr (partition_big_imset f) /= -morphimEsub //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: eq_bigr => _ /morphimP[x Dx Gx ->].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite -(card_rcoset _ x) mulr_natl -sumr_const.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/eq_big => [y | y /andP[Gy /eqP <-]]; last by rewrite !cfMorphE.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite mem_rcoset inE groupMr ?groupV // -mem_rcoset.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: andb_id2l => /(subsetP sGD) Dy; apply: sameP eqP (rcoset_kerP f _ _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfIsom_iso rT G (R : {group rT}) (f : {morphism G >-> rT}) : forall isoG : isom G R f, isometry (cfIsom isoG).",
            "VernacStartTheoremProof",
            "1369b8205766c7fd860cbd0c9adbf603601762eb"
        ],
        [
            "move=> isoG phi psi; rewrite unlock cfMorph_iso //; set G1 := _ @* R.",
            "VernacExtend",
            "08b421e4a82ee4b06ce888937579fc5af7d251b4"
        ],
        [
            "by rewrite -(isom_im (isom_sym isoG)) -/G1 in phi psi *; rewrite !cfRes_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfMod_iso H G : H <| G -> isometry (@cfMod _ G H).",
            "VernacStartTheoremProof",
            "fe675e546638a4bd249505ffed19def94aaba7a7"
        ],
        [
            "by case/andP=> _; apply: cfMorph_iso.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfQuo_iso H G : H <| G -> {in [pred phi | H \\subset cfker phi] &, isometry (@cfQuo _ G H)}.",
            "VernacStartTheoremProof",
            "0731b704ff161f9240b885dce356b6ebbbf4c159"
        ],
        [
            "by move=> nsHG phi psi sHkphi sHkpsi; rewrite -(cfMod_iso nsHG) !cfQuoK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfnorm_quo H G phi : H <| G -> H \\subset cfker phi -> '[phi / H] = '[phi]_G.",
            "VernacStartTheoremProof",
            "2448d35f24adda0fb84743aea5414ca9e4f8f0f4"
        ],
        [
            "by move=> nsHG sHker; apply: cfQuo_iso.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfSdprod_iso K H G (defG : K ><| H = G) : isometry (cfSdprod defG).",
            "VernacStartTheoremProof",
            "c8da80d4f0034c0c9a39969b405e44fe642d5b92"
        ],
        [
            "move=> phi psi; have [/andP[_ nKG] _ _ _ _] := sdprod_context defG.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "by rewrite [cfSdprod _]locked_withE cfMorph_iso ?cfIsom_iso.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MorphIsometry.",
            "VernacEndSegment",
            "94709eb37e38ac1b7f271b78f52f8256ed3cdc65"
        ],
        [
            "Section Induced.",
            "VernacBeginSection",
            "152f9b832edb97736f7a7c61269517b4df1bc877"
        ],
        [
            "Variable gT : finGroupType.",
            "VernacAssumption",
            "694477e88f23a3b7d6edaa9ed9d49ebe1ee92aa6"
        ],
        [
            "Section Def.",
            "VernacBeginSection",
            "891f679f68bab7ae72311468953cd39d353d2080"
        ],
        [
            "Variables B A : {set gT}.",
            "VernacAssumption",
            "3ce7448de1361a3f7889c0e633dbd90a8a5c0505"
        ],
        [
            "Local Notation G := <<B>>.",
            "VernacSyntacticDefinition",
            "a95cf71357b07290b01b1fcb761af850a32bc9df"
        ],
        [
            "Local Notation H := <<A>>.",
            "VernacSyntacticDefinition",
            "32018917870751aee972f660ba6a7302cc80b893"
        ],
        [
            "Definition ffun_cfInd (phi : 'CF(A)) := [ffun x => if H \\subset G then #|A|%:R^-1 * (\\sum_(y in G) phi (x ^ y)) else #|G|%:R * '[phi, 1] *+ (x == 1%g)].",
            "VernacDefinition",
            "3d3c8ace5e331a9d9e460ca56993f7141a9b8fd8"
        ],
        [
            "Fact cfInd_subproof phi : is_class_fun G (ffun_cfInd phi).",
            "VernacStartTheoremProof",
            "8791cf0985ecf5a8565311ffe79dc556292e763f"
        ],
        [
            "apply: intro_class_fun => [x y Gx Gy | x H'x]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case: subsetP => [sHG | _]; last by rewrite (negPf (group1_contra H'x)).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite big1 ?mulr0 // => y Gy; rewrite cfun0gen ?(contra _ H'x) //= => /sHG.",
            "VernacExtend",
            "fbaa61af20867a5dfb8bb5213ca8048b258f8f3a"
        ],
        [
            "by rewrite memJ_norm ?(subsetP (normG _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite conjg_eq1 (reindex_inj (mulgI y^-1)%g); congr (if _ then _ * _ else _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by apply: eq_big => [z | z Gz]; rewrite ?groupMl ?groupV // -conjgM mulKVg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cfInd phi := Cfun 1 (cfInd_subproof phi).",
            "VernacDefinition",
            "6984df83583aadf18e0af2ea97819435ae80ac2c"
        ],
        [
            "Lemma cfInd_is_linear : linear cfInd.",
            "VernacStartTheoremProof",
            "fe20a14f31d13e17cfe1dd55e21218eda60a56f8"
        ],
        [
            "move=> c phi psi; apply/cfunP=> x; rewrite !cfunElock; case: ifP => _.",
            "VernacExtend",
            "7900ff5f460c85794ce7b5348b38d8262a58a2c2"
        ],
        [
            "rewrite mulrCA -mulrDr [c * _]mulr_sumr -big_split /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by congr (_ * _); apply: eq_bigr => y _; rewrite !cfunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite mulrnAr -mulrnDl !(mulrCA c) -!mulrDr [c * _]mulr_sumr -big_split /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by congr (_ * (_ * _) *+ _); apply: eq_bigr => y; rewrite !cfunE mulrA mulrDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical cfInd_additive := Additive cfInd_is_linear.",
            "VernacDefinition",
            "d2732e602dd88e1d3a6558306cfc7b131390354e"
        ],
        [
            "Canonical cfInd_linear := Linear cfInd_is_linear.",
            "VernacDefinition",
            "5ca63ad057f58fc23eff6451c1352df99acb5d7e"
        ],
        [
            "End Def.",
            "VernacEndSegment",
            "616ad5692568c74f61a9df3a82ac03d2b7ebac01"
        ],
        [
            "Local Notation \"''Ind[' B , A ]\" := (@cfInd B A) : ring_scope.",
            "VernacNotation",
            "572dca3a97901d46ccf00fecc6edee53f648e621"
        ],
        [
            "Local Notation \"''Ind[' B ]\" := 'Ind[B, _] : ring_scope.",
            "VernacNotation",
            "fdeb07b633af36ff7bf1ab4eace5a65d0a70c1e0"
        ],
        [
            "Lemma cfIndE (G H : {group gT}) phi x : H \\subset G -> 'Ind[G, H] phi x = #|H|%:R^-1 * (\\sum_(y in G) phi (x ^ y)).",
            "VernacStartTheoremProof",
            "4486fb44a6cacb53d644dc966f5818700e97bb17"
        ],
        [
            "by rewrite cfunElock !genGid => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variables G K H : {group gT}.",
            "VernacAssumption",
            "1d86bf479ff48af9198e511b63f820917e4a4836"
        ],
        [
            "Implicit Types (phi : 'CF(H)) (psi : 'CF(G)).",
            "VernacReserve",
            "47777d1938c2ad75cabe5030ca89f3d0274bdb99"
        ],
        [
            "Lemma cfIndEout phi : ~~ (H \\subset G) -> 'Ind[G] phi = (#|G|%:R * '[phi, 1]) *: '1_1%G.",
            "VernacStartTheoremProof",
            "00a7848a6168ee6a4ea35b1d23a964dd47480283"
        ],
        [
            "move/negPf=> not_sHG; apply/cfunP=> x; rewrite cfunE cfuniE ?normal1 // inE.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by rewrite mulr_natr cfunElock !genGid not_sHG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfIndEsdprod (phi : 'CF(K)) x : K ><| H = G -> 'Ind[G] phi x = \\sum_(w in H) phi (x ^ w)%g.",
            "VernacStartTheoremProof",
            "9ad98793ba16add52b899241b69502944bdd67b3"
        ],
        [
            "move=> defG; have [/andP[sKG _] _ mulKH nKH _] := sdprod_context defG.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "rewrite cfIndE //; apply: canLR (mulKf (neq0CG _)) _; rewrite -mulKH mulr_sumr.",
            "VernacExtend",
            "fe8f197e86415fc7f0a74eda9d312128b9473eda"
        ],
        [
            "rewrite (set_partition_big _ (rcosets_partition_mul H K)) ?big_imset /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: eq_bigr => y Hy; rewrite rcosetE norm_rlcoset ?(subsetP nKH) //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite -lcosetE mulr_natl big_imset /=; last exact: in2W (mulgI _).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -sumr_const; apply: eq_bigr => z Kz; rewrite conjgM cfunJ.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [{nKH}nKH /isomP[injf _]] := sdprod_isom defG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: can_in_inj (fun Ky => invm injf (coset K (repr Ky))) _ => y Hy.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite rcosetE -val_coset ?(subsetP nKH) // coset_reprK invmE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfInd_on A phi : H \\subset G -> phi \\in 'CF(H, A) -> 'Ind[G] phi \\in 'CF(G, class_support A G).",
            "VernacStartTheoremProof",
            "8b319b6689860fa9d476b48fcea3a492474d4fcb"
        ],
        [
            "move=> sHG Af; apply/cfun_onP=> g AG'g; rewrite cfIndE ?big1 ?mulr0 // => h Gh.",
            "VernacExtend",
            "b7d55d5cc9e609b184db748f6780e12224901e48"
        ],
        [
            "apply: (cfun_on0 Af); apply: contra AG'g => Agh.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by rewrite -[g](conjgK h) memJ_class_support // groupV.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfInd_id phi : 'Ind[H] phi = phi.",
            "VernacStartTheoremProof",
            "da588581f0c08c669de598645d8491d16db2e757"
        ],
        [
            "apply/cfun_inP=> x Hx; rewrite cfIndE // (eq_bigr _ (cfunJ phi x)) sumr_const.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite -[phi x *+ _]mulr_natl mulKf ?neq0CG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfInd_normal phi : H <| G -> 'Ind[G] phi \\in 'CF(G, H).",
            "VernacStartTheoremProof",
            "8230a6f111ad660b2bec80bd498211fca678072b"
        ],
        [
            "case/andP=> sHG nHG; apply: (cfun_onS (class_support_sub_norm (subxx _) nHG)).",
            "VernacExtend",
            "d62e4c271de3f2a9ff5062b8b89d3c57d965c518"
        ],
        [
            "by rewrite cfInd_on ?cfun_onG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfInd1 phi : H \\subset G -> 'Ind[G] phi 1%g = #|G : H|%:R * phi 1%g.",
            "VernacStartTheoremProof",
            "2749b7afed88ba5ece3d85d3559223e772724533"
        ],
        [
            "move=> sHG; rewrite cfIndE // natf_indexg // -mulrA mulrCA; congr (_ * _).",
            "VernacExtend",
            "485e46f06ecb626ff6a640f6969694ae3ffba974"
        ],
        [
            "by rewrite mulr_natl -sumr_const; apply: eq_bigr => x; rewrite conj1g.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfInd_cfun1 : H <| G -> 'Ind[G, H] 1 = #|G : H|%:R *: '1_H.",
            "VernacStartTheoremProof",
            "6b32ecb8add800e810f725da65ebc5d25a10c0e0"
        ],
        [
            "move=> nsHG; have [sHG nHG] := andP nsHG; rewrite natf_indexg // mulrC.",
            "VernacExtend",
            "7cbc77a1e43ca1454debc28656b2dec3869cf69b"
        ],
        [
            "apply/cfunP=> x; rewrite cfIndE ?cfunE ?cfuniE // -mulrA; congr (_ * _).",
            "VernacExtend",
            "91580bd9cdf2cad626638a70b66bf9b00afa41b1"
        ],
        [
            "rewrite mulr_natl -sumr_const; apply: eq_bigr => y Gy.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite cfun1E -{1}(normsP nHG y Gy) memJ_conjg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfnorm_Ind_cfun1 : H <| G -> '['Ind[G, H] 1] = #|G : H|%:R.",
            "VernacStartTheoremProof",
            "f564bb88fc9ac243205997b282d0fcc73d847af0"
        ],
        [
            "move=> nsHG; rewrite cfInd_cfun1 // cfnormZ normr_nat cfdot_cfuni // setIid.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite expr2 {2}natf_indexg ?normal_sub // !mulrA divfK ?mulfK ?neq0CG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfIndInd phi : K \\subset G -> H \\subset K -> 'Ind[G] ('Ind[K] phi) = 'Ind[G] phi.",
            "VernacStartTheoremProof",
            "1079fa2912a22cc466d00303bad79b30536eff11"
        ],
        [
            "move=> sKG sHK; apply/cfun_inP=> x Gx; rewrite !cfIndE ?(subset_trans sHK) //.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "apply: canLR (mulKf (neq0CG K)) _; rewrite mulr_sumr mulr_natl.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "transitivity (\\sum_(y in G) \\sum_(z in K) #|H|%:R^-1 * phi ((x ^ y) ^ z)).",
            "VernacExtend",
            "48c94b33217960658574357ad8e51a2cfe20d1a0"
        ],
        [
            "by apply: eq_bigr => y Gy; rewrite cfIndE // -mulr_sumr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "symmetry; rewrite exchange_big /= -sumr_const; apply: eq_bigr => z Kz.",
            "VernacExtend",
            "b531cdfdd16edb48e06651aa0838bf384aa38229"
        ],
        [
            "rewrite (reindex_inj (mulIg z)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: eq_big => [y | y _]; rewrite ?conjgM // groupMr // (subsetP sKG).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Frobenius_reciprocity phi psi : '[phi, 'Res[H] psi] = '['Ind[G] phi, psi].",
            "VernacStartTheoremProof",
            "6dd9a69bf87029fa0962c1a6e5993c1c59d3b400"
        ],
        [
            "have [sHG | not_sHG] := boolP (H \\subset G); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite cfResEout // cfIndEout // cfdotZr cfdotZl mulrAC; congr (_ * _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "rewrite (cfdotEl _ (cfuni_on _ _)) mulVKf ?neq0CG // big_set1.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite cfuniE ?normal1 ?set11 ?mul1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "transitivity (#|H|%:R^-1 * \\sum_(x in G) phi x * (psi x)^*).",
            "VernacExtend",
            "27e52a6fea3109bba47a302790a77cbc2a355421"
        ],
        [
            "rewrite (big_setID H) /= (setIidPr sHG) addrC big1 ?add0r; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move=> x /setDP[_ /cfun0->]; rewrite mul0r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by congr (_ * _); apply: eq_bigr => x Hx; rewrite cfResE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "set h' := _^-1; apply: canRL (mulKf (neq0CG G)) _.",
            "VernacExtend",
            "0efc893cd6f40fa03714e330608ed1eb1de1560e"
        ],
        [
            "transitivity (h' * \\sum_(y in G) \\sum_(x in G) phi (x ^ y) * (psi (x ^ y))^*).",
            "VernacExtend",
            "f3790cc4d9974b3b635dffe9fc09ddb8e153887b"
        ],
        [
            "rewrite mulrCA mulr_natl -sumr_const; congr (_ * _); apply: eq_bigr => y Gy.",
            "VernacExtend",
            "75f5ff0fb7cf09d432c728351fd923a93d5d7135"
        ],
        [
            "by rewrite (reindex_acts 'J _ Gy) ?astabsJ ?normG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite exchange_big mulr_sumr; apply: eq_bigr => x _; rewrite cfIndE //=.",
            "VernacExtend",
            "fe8f197e86415fc7f0a74eda9d312128b9473eda"
        ],
        [
            "by rewrite -mulrA mulr_suml; congr (_ * _); apply: eq_bigr => y /(cfunJ psi)->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cfdot_Res_r := Frobenius_reciprocity.",
            "VernacDefinition",
            "39cf5df830d1bdea067f135b5d591a090d28541c"
        ],
        [
            "Lemma cfdot_Res_l psi phi : '['Res[H] psi, phi] = '[psi, 'Ind[G] phi].",
            "VernacStartTheoremProof",
            "78714c6e69696aef964e4ad727ab95d7b848bc41"
        ],
        [
            "by rewrite cfdotC cfdot_Res_r -cfdotC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfIndM phi psi: H \\subset G -> 'Ind[G] (phi * ('Res[H] psi)) = 'Ind[G] phi * psi.",
            "VernacStartTheoremProof",
            "07434e948ba1d3528d1753a8daf5bdcfdab60dda"
        ],
        [
            "move=> HsG; apply/cfun_inP=> x Gx; rewrite !cfIndE // !cfunE !cfIndE // -mulrA.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "congr (_ * _); rewrite mulr_suml; apply: eq_bigr=> i iG; rewrite !cfunE.",
            "VernacExtend",
            "fa1706e48d527f9e8bdea6a60dbdfc6eefc4fda5"
        ],
        [
            "case: (boolP (x^i \\in H))=> xJi; last by rewrite cfun0gen ?mul0r ?genGid.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !cfResE //; congr (_*_); rewrite cfunJgen ?genGid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Induced.",
            "VernacEndSegment",
            "13b7a403737371e0fbcf131dce1f5fa8ed91b2c5"
        ],
        [
            "Arguments cfInd {gT} B%g {A%g} phi%CF.",
            "VernacArguments",
            "4deff2deef402116d0f3787c891b7d429586c29e"
        ],
        [
            "Notation \"''Ind[' G , H ]\" := (@cfInd _ G H) (only parsing) : ring_scope.",
            "VernacNotation",
            "cf4430bf5070760f642714450d90190e9157e122"
        ],
        [
            "Notation \"''Ind[' G ]\" := 'Ind[G, _] : ring_scope.",
            "VernacNotation",
            "23130038c848d6aa88a2d17d0890c1fcf96dfcc4"
        ],
        [
            "Notation \"''Ind'\" := 'Ind[_] (only parsing) : ring_scope.",
            "VernacNotation",
            "6f92223d5eecd71beda2d1aa391370e36cc636d5"
        ],
        [
            "Section MorphInduced.",
            "VernacBeginSection",
            "12dc34dfa7e97cbb092328fe90679cfd3dc8a878"
        ],
        [
            "Variables (aT rT : finGroupType) (D G H : {group aT}) (R S : {group rT}).",
            "VernacAssumption",
            "954c7fa59fae0a21132a85bb4ad2166b59b98da6"
        ],
        [
            "Lemma cfIndMorph (f : {morphism D >-> rT}) (phi : 'CF(f @* H)) : 'ker f \\subset H -> H \\subset G -> G \\subset D -> 'Ind[G] (cfMorph phi) = cfMorph ('Ind[f @* G] phi).",
            "VernacStartTheoremProof",
            "15036201d2fd526003e21aa7169f1c520b4c49e0"
        ],
        [
            "move=> sKH sHG sGD; have [sHD inD] := (subset_trans sHG sGD, subsetP sGD).",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "apply/cfun_inP=> /= x Gx; have [Dx sKG] := (inD x Gx, subset_trans sKH sHG).",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "rewrite cfMorphE ?cfIndE ?morphimS // (partition_big_imset f) -morphimEsub //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite card_morphim (setIidPr sHD) natf_indexg // invfM invrK -mulrA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "congr (_ * _); rewrite mulr_sumr; apply: eq_bigr => _ /morphimP[y Dy Gy ->].",
            "VernacExtend",
            "775b998c29d59f89d853e0c4a629d4a3388abe3b"
        ],
        [
            "rewrite -(card_rcoset _ y) mulr_natl -sumr_const.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: eq_big => [z | z /andP[Gz /eqP <-]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "have [Gz | G'z] := boolP (z \\in G).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite (sameP eqP (rcoset_kerP _ _ _)) ?inD.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case: rcosetP G'z => // [[t Kt ->]]; rewrite groupM // (subsetP sKG).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [Dz Dxz] := (inD z Gz, inD (x ^ z) (groupJ Gx Gz)); rewrite -morphJ //.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "have [Hxz | notHxz] := boolP (x ^ z \\in H); first by rewrite cfMorphE.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !cfun0 // -sub1set -morphim_set1 // morphimSGK ?sub1set.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variables (g : {morphism G >-> rT}) (h : {morphism H >-> rT}).",
            "VernacAssumption",
            "7bfc48dd4b02eb8e6534538fd6ed7f0642a0244b"
        ],
        [
            "Hypotheses (isoG : isom G R g) (isoH : isom H S h) (eq_hg : {in H, h =1 g}).",
            "VernacAssumption",
            "954def6e9cbf4ca45ec7cf48a9c266f430f38260"
        ],
        [
            "Hypothesis sHG : H \\subset G.",
            "VernacAssumption",
            "e6a1d44b7def616917f2606808485d59eddc6886"
        ],
        [
            "Lemma cfResIsom phi : 'Res[S] (cfIsom isoG phi) = cfIsom isoH ('Res[H] phi).",
            "VernacStartTheoremProof",
            "d336ae28173d055c99c761544006b7d33f0da65b"
        ],
        [
            "have [[injg defR] [injh defS]] := (isomP isoG, isomP isoH).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite !morphimEdom in defS defR; apply/cfun_inP=> s.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite -{1}defS => /imsetP[x Hx ->] {s}; have Gx := subsetP sHG x Hx.",
            "VernacExtend",
            "d2991b7607b6316c9d43d28c85f87ca601299ca6"
        ],
        [
            "rewrite {1}eq_hg ?(cfResE, cfIsomE) // -defS -?eq_hg ?mem_imset // -defR.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (eq_in_imset eq_hg) imsetS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfIndIsom phi : 'Ind[R] (cfIsom isoH phi) = cfIsom isoG ('Ind[G] phi).",
            "VernacStartTheoremProof",
            "a1606aff8f34df7bc1b70e6c70e45e4d77e25f8a"
        ],
        [
            "have [[injg defR] [_ defS]] := (isomP isoG, isomP isoH).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite morphimEdom (eq_in_imset eq_hg) -morphimEsub // in defS.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/cfun_inP=> s; rewrite -{1}defR => /morphimP[x _ Gx ->]{s}.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "rewrite cfIsomE ?cfIndE // -defR -{1}defS ?morphimS ?card_injm // morphimEdom.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "congr (_ * _); rewrite big_imset //=; last exact/injmP.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply: eq_bigr => y Gy; rewrite -morphJ //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "have [Hxy | H'xy] := boolP (x ^ y \\in H); first by rewrite -eq_hg ?cfIsomE.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !cfun0 -?defS // -sub1set -morphim_set1 ?injmSK ?sub1set // groupJ.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MorphInduced.",
            "VernacEndSegment",
            "87edbb4b904b655dfd1cbb05bd6ff772b9aae9de"
        ],
        [
            "Section FieldAutomorphism.",
            "VernacBeginSection",
            "43fd90ad5f1dd91b75243ce380d1488acd1cef43"
        ],
        [
            "Variables (u : {rmorphism algC -> algC}) (gT rT : finGroupType).",
            "VernacAssumption",
            "c8663cd0c7eef87e66f8059a8423f858386ea816"
        ],
        [
            "Variables (G K H : {group gT}) (f : {morphism G >-> rT}) (R : {group rT}).",
            "VernacAssumption",
            "b18650e83bcd1bb9778f459e1f67fd9d7cb9614c"
        ],
        [
            "Implicit Types (phi : 'CF(G)) (S : seq 'CF(G)).",
            "VernacReserve",
            "017cd1bd1812a258e21e0b919bfc778a01118705"
        ],
        [
            "Local Notation \"phi ^u\" := (cfAut u phi) (at level 3, format \"phi ^u\").",
            "VernacNotation",
            "878f4bafac5a8dd34d9331c1a0a030b0fbd40e45"
        ],
        [
            "Lemma cfAutZ_nat n phi : (n%:R *: phi)^u = n%:R *: phi^u.",
            "VernacStartTheoremProof",
            "bf3a3661ace6d1b4d56e1dfffee32fe243cc7af4"
        ],
        [
            "exact: raddfZnat.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfAutZ_Cnat z phi : z \\in Cnat -> (z *: phi)^u = z *: phi^u.",
            "VernacStartTheoremProof",
            "c9456f41fbde16037683e80e519b6de4ad4ba6a3"
        ],
        [
            "exact: raddfZ_Cnat.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfAutZ_Cint z phi : z \\in Cint -> (z *: phi)^u = z *: phi^u.",
            "VernacStartTheoremProof",
            "f0ba8fed9984c8fb578b3f079237175675e2bc56"
        ],
        [
            "exact: raddfZ_Cint.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfAutK : cancel (@cfAut gT G u) (cfAut (algC_invaut_rmorphism u)).",
            "VernacStartTheoremProof",
            "7d308694b5a7f1b9c53249185a7f0cc12ea030e6"
        ],
        [
            "by move=> phi; apply/cfunP=> x; rewrite !cfunE /= algC_autK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfAutVK : cancel (cfAut (algC_invaut_rmorphism u)) (@cfAut gT G u).",
            "VernacStartTheoremProof",
            "04cae9188f6902f92fd7e8f2378f0d7fe29b0028"
        ],
        [
            "by move=> phi; apply/cfunP=> x; rewrite !cfunE /= algC_invautK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfAut_inj : injective (@cfAut gT G u).",
            "VernacStartTheoremProof",
            "af3d10b6b53e8ff5b43c308611885ade1c959b09"
        ],
        [
            "exact: can_inj cfAutK.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfAut_eq1 phi : (cfAut u phi == 1) = (phi == 1).",
            "VernacStartTheoremProof",
            "608115f74b463924ff0bd5957fee509101e2a17b"
        ],
        [
            "by rewrite rmorph_eq1 //; apply: cfAut_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma support_cfAut phi : support phi^u =i support phi.",
            "VernacStartTheoremProof",
            "e3ff49634dd2e3c81f9bbc8d9c46364a008b27f1"
        ],
        [
            "by move=> x; rewrite !inE cfunE fmorph_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_cfAut_free S : cfAut_closed u S -> free S -> free (map (cfAut u) S).",
            "VernacStartTheoremProof",
            "d01ed7494c3c86db878cc5f2260ca1a8dcc9d1ee"
        ],
        [
            "set Su := map _ S => sSuS freeS; have uniqS := free_uniq freeS.",
            "VernacExtend",
            "d2991b7607b6316c9d43d28c85f87ca601299ca6"
        ],
        [
            "have uniqSu: uniq Su by rewrite (map_inj_uniq cfAut_inj).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{sSuS} sSuS: {subset Su <= S} by move=> _ /mapP[phi Sphi ->]; apply: sSuS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [|eqSuS _] := leq_size_perm uniqSu sSuS; first by rewrite size_map.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite (perm_free (uniq_perm_eq uniqSu uniqS eqSuS)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfAut_on A phi : (phi^u \\in 'CF(G, A)) = (phi \\in 'CF(G, A)).",
            "VernacStartTheoremProof",
            "d858196eae428a8ecd0fe59bc6dca312a90a0b59"
        ],
        [
            "by rewrite !cfun_onE (eq_subset (support_cfAut phi)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfker_aut phi : cfker phi^u = cfker phi.",
            "VernacStartTheoremProof",
            "db7e1ac81744e16e03baafcc21a2dfa9a7c5d39d"
        ],
        [
            "apply/setP=> x; rewrite !inE; apply: andb_id2l => Gx.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "by apply/forallP/forallP=> Kx y; have:= Kx y; rewrite !cfunE (inj_eq (fmorph_inj u)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfAut_cfuni A : ('1_A)^u = '1_A :> 'CF(G).",
            "VernacStartTheoremProof",
            "719ed6cd8cfe5d84c56e805fd13140b4d1da13b3"
        ],
        [
            "by apply/cfunP=> x; rewrite !cfunElock rmorph_nat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cforder_aut phi : #[phi^u]%CF = #[phi]%CF.",
            "VernacStartTheoremProof",
            "324c03ff04a77556dfb4d0dfac3ff53c8a34c8fb"
        ],
        [
            "exact: cforder_inj_rmorph cfAut_inj.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfAutRes phi : ('Res[H] phi)^u = 'Res phi^u.",
            "VernacStartTheoremProof",
            "09e3b9b647839a3582d3740c2e19dca2282399a5"
        ],
        [
            "by apply/cfunP=> x; rewrite !cfunElock rmorphMn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfAutMorph (psi : 'CF(f @* H)) : (cfMorph psi)^u = cfMorph psi^u.",
            "VernacStartTheoremProof",
            "46bee0bc21c13ff829c1c05c08ec048141ac1459"
        ],
        [
            "by apply/cfun_inP=> x Hx; rewrite !cfunElock Hx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfAutIsom (isoGR : isom G R f) phi : (cfIsom isoGR phi)^u = cfIsom isoGR phi^u.",
            "VernacStartTheoremProof",
            "83353ab971d19733748631db85f3e9d15ef088e3"
        ],
        [
            "apply/cfun_inP=> y; have [_ {1}<-] := isomP isoGR => /morphimP[x _ Gx ->{y}].",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "by rewrite !(cfunE, cfIsomE).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfAutQuo phi : (phi / H)^u = (phi^u / H)%CF.",
            "VernacStartTheoremProof",
            "b717cc44ec647314ee25486ca837c07a05d51d6f"
        ],
        [
            "by apply/cfunP=> Hx; rewrite !cfunElock cfker_aut rmorphMn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfAutMod (psi : 'CF(G / H)) : (psi %% H)^u = (psi^u %% H)%CF.",
            "VernacStartTheoremProof",
            "4aff34826281c7545b179195df95152b7c4d1108"
        ],
        [
            "by apply/cfunP=> x; rewrite !cfunElock rmorphMn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfAutInd (psi : 'CF(H)) : ('Ind[G] psi)^u = 'Ind psi^u.",
            "VernacStartTheoremProof",
            "9fd283c82cb15c9303ae70becff73aba0c7b17fd"
        ],
        [
            "have [sHG | not_sHG] := boolP (H \\subset G).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/cfunP=> x; rewrite !(cfunE, cfIndE) // rmorphM fmorphV rmorph_nat.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by congr (_ * _); rewrite rmorph_sum; apply: eq_bigr => y; rewrite !cfunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite !cfIndEout // linearZ /= cfAut_cfuni rmorphM rmorph_nat.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -cfdot_cfAut ?rmorph1 // => _ /imageP[x Hx ->].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite cfun1E Hx !rmorph1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hypothesis KxH : K \\x H = G.",
            "VernacAssumption",
            "2aeeb7d1b4e0adf9874a9f7f99bddca6575d103a"
        ],
        [
            "Lemma cfAutDprodl (phi : 'CF(K)) : (cfDprodl KxH phi)^u = cfDprodl KxH phi^u.",
            "VernacStartTheoremProof",
            "3769c42079d0a64b9d04469d68b60f347589d6b6"
        ],
        [
            "apply/cfun_inP=> _ /(mem_dprod KxH)[x [y [Kx Hy -> _]]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite !(cfunE, cfDprodEl).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfAutDprodr (psi : 'CF(H)) : (cfDprodr KxH psi)^u = cfDprodr KxH psi^u.",
            "VernacStartTheoremProof",
            "4e6fc5ec4c1eccadac132b477ed929a3c207e178"
        ],
        [
            "apply/cfun_inP=> _ /(mem_dprod KxH)[x [y [Kx Hy -> _]]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite !(cfunE, cfDprodEr).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cfAutDprod (phi : 'CF(K)) (psi : 'CF(H)) : (cfDprod KxH phi psi)^u = cfDprod KxH phi^u psi^u.",
            "VernacStartTheoremProof",
            "8222f1d9f2bb4b6a8185ccde5199a66d549dd73c"
        ],
        [
            "by rewrite rmorphM /= cfAutDprodl cfAutDprodr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FieldAutomorphism.",
            "VernacEndSegment",
            "b9c13d2fc0d088503f03d29d0616dccba89fecfe"
        ],
        [
            "Arguments cfAutK u {gT G}.",
            "VernacArguments",
            "2ea5cccb92bff27fdcbea5c9df7b83290a96f7ae"
        ],
        [
            "Arguments cfAutVK u {gT G}.",
            "VernacArguments",
            "4fa08c5b2a5daf24cb3b5aff65a615db7ced8a34"
        ],
        [
            "Arguments cfAut_inj u {gT G} [phi1 phi2] : rename.",
            "VernacArguments",
            "3389e88a7ab43d17774212cf60eba1444df983f6"
        ],
        [
            "Definition conj_cfRes := cfAutRes conjC.",
            "VernacDefinition",
            "906f15433853ad2128b281b655bcffecceede63b"
        ],
        [
            "Definition cfker_conjC := cfker_aut conjC.",
            "VernacDefinition",
            "fee43b220d59de8eac04e78d363e44a2fe19ba63"
        ],
        [
            "Definition conj_cfQuo := cfAutQuo conjC.",
            "VernacDefinition",
            "016b7c545b9d36000c9e49e8c4a77dea5456d1c4"
        ],
        [
            "Definition conj_cfMod := cfAutMod conjC.",
            "VernacDefinition",
            "319429dc44eee52ac7ef5cfb71af0e85b0b23626"
        ],
        [
            "Definition conj_cfInd := cfAutInd conjC.",
            "VernacDefinition",
            "0540662df5a54465f2939172205229db7589f6a4"
        ],
        [
            "Definition cfconjC_eq1 := cfAut_eq1 conjC.",
            "VernacDefinition",
            "7ff9534f8d2eee7d8ee3d294d60dfea229e8f343"
        ]
    ],
    "proofs": [
        {
            "name": "neq0CG",
            "line_nb": 29,
            "steps": [
                {
                    "command": [
                        "exact: natrG_neq0.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "neq0CiG",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "exact: natr_indexg_neq0.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gt0CG",
            "line_nb": 35,
            "steps": [
                {
                    "command": [
                        "exact: natrG_gt0.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gt0CiG",
            "line_nb": 38,
            "steps": [
                {
                    "command": [
                        "exact: natr_indexg_gt0.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "algC'G",
            "line_nb": 41,
            "steps": [
                {
                    "command": [
                        "by apply/pgroupP=> p _; rewrite inE /= char_num.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "intro_class_fun",
            "line_nb": 48,
            "steps": [
                {
                    "command": [
                        "move=> fJ Gf; apply/andP; split; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/supportP=> x notAf; rewrite ffunE Gf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/'forall_eqfun_inP=> x y Gy; rewrite !ffunE.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by have [/fJ-> // | notGx] := boolP (x \\in G); rewrite !Gf ?groupJr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "classfun_key",
            "line_nb": 58,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfunElock",
            "line_nb": 69,
            "steps": [
                {
                    "command": [
                        "by rewrite locked_withE; apply: ffunE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfunE",
            "line_nb": 72,
            "steps": [
                {
                    "command": [
                        "exact: cfunElock.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfunP",
            "line_nb": 75,
            "steps": [
                {
                    "command": [
                        "by split=> [/ffunP/val_inj | ->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun0gen",
            "line_nb": 78,
            "steps": [
                {
                    "command": [
                        "by case: phi => f fP; case: (andP fP) => _ /supportP; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_in_genP",
            "line_nb": 81,
            "steps": [
                {
                    "command": [
                        "move=> eq_phi; apply/cfunP=> x.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by have [/eq_phi-> // | notAx] := boolP (x \\in G); rewrite !cfun0gen.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_zero_subproof",
            "line_nb": 89,
            "steps": [
                {
                    "command": [
                        "exact: intro_class_fun.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_comp_subproof",
            "line_nb": 93,
            "steps": [
                {
                    "command": [
                        "by move=> f0; apply: intro_class_fun => [x y _ /cfunJgen | x /cfun0gen] ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_add_subproof",
            "line_nb": 98,
            "steps": [
                {
                    "command": [
                        "apply: intro_class_fun => [x y Gx Gy | x notGx]; rewrite ?cfunJgen //.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite !cfun0gen ?add0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_indicator_subproof",
            "line_nb": 103,
            "steps": [
                {
                    "command": [
                        "apply: intro_class_fun => [x y Gx Gy | x /negbTE/= -> //].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite groupJr ?classGidl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun1Egen",
            "line_nb": 109,
            "steps": [
                {
                    "command": [
                        "by rewrite cfunElock andb_idr // => /class_subG->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_mul_subproof",
            "line_nb": 112,
            "steps": [
                {
                    "command": [
                        "apply: intro_class_fun => [x y Gx Gy | x notGx]; rewrite ?cfunJgen //.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite cfun0gen ?mul0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_addA",
            "line_nb": 120,
            "steps": [
                {
                    "command": [
                        "by move=> phi psi xi; apply/cfunP=> x; rewrite !cfunE addrA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_addC",
            "line_nb": 123,
            "steps": [
                {
                    "command": [
                        "by move=> phi psi; apply/cfunP=> x; rewrite !cfunE addrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_add0",
            "line_nb": 126,
            "steps": [
                {
                    "command": [
                        "by move=> phi; apply/cfunP=> x; rewrite !cfunE add0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_addN",
            "line_nb": 129,
            "steps": [
                {
                    "command": [
                        "by move=> phi; apply/cfunP=> x; rewrite !cfunE addNr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "muln_cfunE",
            "line_nb": 134,
            "steps": [
                {
                    "command": [
                        "by elim: n => [|n IHn]; rewrite ?mulrS !cfunE ?IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sum_cfunE",
            "line_nb": 137,
            "steps": [
                {
                    "command": [
                        "by elim/big_rec2: _ => [|i _ psi _ <-]; rewrite cfunE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_mulA",
            "line_nb": 140,
            "steps": [
                {
                    "command": [
                        "by move=> phi psi xi; apply/cfunP=> x; rewrite !cfunE mulrA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_mulC",
            "line_nb": 143,
            "steps": [
                {
                    "command": [
                        "by move=> phi psi; apply/cfunP=> x; rewrite !cfunE mulrC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_mul1",
            "line_nb": 146,
            "steps": [
                {
                    "command": [
                        "by move=> phi; apply: cfun_in_genP => x Gx; rewrite !cfunE cfun1Egen Gx mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_mulD",
            "line_nb": 149,
            "steps": [
                {
                    "command": [
                        "by move=> phi psi xi; apply/cfunP=> x; rewrite !cfunE mulrDl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_nz1",
            "line_nb": 152,
            "steps": [
                {
                    "command": [
                        "by apply/eqP=> /cfunP/(_ 1%g)/eqP; rewrite cfun1Egen cfunE group1 oner_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expS_cfunE",
            "line_nb": 158,
            "steps": [
                {
                    "command": [
                        "by elim: n => //= n IHn; rewrite !cfunE IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_mulV",
            "line_nb": 161,
            "steps": [
                {
                    "command": [
                        "move=> phi Uphi; rewrite /cfun_inv Uphi; apply/cfun_in_genP=> x Gx.",
                        "VernacExtend",
                        "0fa388cebe8ed6372154caa26cd10c357f123670"
                    ]
                },
                {
                    "command": [
                        "by rewrite !cfunE cfun1Egen Gx mulVf ?(forall_inP Uphi).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_inv0id",
            "line_nb": 169,
            "steps": [
                {
                    "command": [
                        "by rewrite /cfun_inv => phi /negbTE/= ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_scaleA",
            "line_nb": 175,
            "steps": [
                {
                    "command": [
                        "by apply/cfunP=> x; rewrite !cfunE mulrA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_scale1",
            "line_nb": 178,
            "steps": [
                {
                    "command": [
                        "by move=> phi; apply/cfunP=> x; rewrite !cfunE mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_scaleDr",
            "line_nb": 181,
            "steps": [
                {
                    "command": [
                        "by move=> a phi psi; apply/cfunP=> x; rewrite !cfunE mulrDr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_scaleDl",
            "line_nb": 184,
            "steps": [
                {
                    "command": [
                        "by move=> a b; apply/cfunP=> x; rewrite !cfunE mulrDl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_scaleAl",
            "line_nb": 189,
            "steps": [
                {
                    "command": [
                        "by apply/cfunP=> x; rewrite !cfunE mulrA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_scaleAr",
            "line_nb": 192,
            "steps": [
                {
                    "command": [
                        "by rewrite !(mulrC phi) cfun_scaleAl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfAut_cfun1i",
            "line_nb": 201,
            "steps": [
                {
                    "command": [
                        "by apply/cfunP=> x; rewrite !cfunElock rmorph_nat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfAutZ",
            "line_nb": 204,
            "steps": [
                {
                    "command": [
                        "by apply/cfunP=> x; rewrite !cfunE rmorphM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfAut_is_rmorphism",
            "line_nb": 207,
            "steps": [
                {
                    "command": [
                        "by do 2?split=> [phi psi|]; apply/cfunP=> x; rewrite ?cfAut_cfun1i // !cfunE (rmorphB, rmorphM).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfAut_cfun1",
            "line_nb": 212,
            "steps": [
                {
                    "command": [
                        "exact: rmorph1.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfAut_scalable",
            "line_nb": 215,
            "steps": [
                {
                    "command": [
                        "by move=> a phi; apply/cfunP=> x; rewrite !cfunE rmorphM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_vect_iso",
            "line_nb": 224,
            "steps": [
                {
                    "command": [
                        "exists (fun phi => \\row_i phi (repr (enum_val i))) => [a phi psi|].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by apply/rowP=> i; rewrite !(mxE, cfunE).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "set n := #|_|; pose eK x : 'I_n := enum_rank_in (classes1 _) (x ^: G).",
                        "VernacExtend",
                        "dda58a04ca4da9adf6d016079f462c4d6ff69ca8"
                    ]
                },
                {
                    "command": [
                        "have rV2vP v : is_class_fun G [ffun x => v (eK x) *+ (x \\in G)].",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply: intro_class_fun => [x y Gx Gy | x /negbTE/=-> //].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite groupJr // /eK classGidl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists (fun v : 'rV_n => Cfun 0 (rV2vP (v 0))) => [phi | v].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply/cfun_in_genP=> x Gx; rewrite cfunE Gx mxE enum_rankK_in ?mem_classes //.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by have [y Gy ->] := repr_class <<B>> x; rewrite cfunJgen.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/rowP=> i; rewrite mxE cfunE; have /imsetP[x Gx def_i] := enum_valP i.",
                        "VernacExtend",
                        "88e21057fc6b7102e6280fe7858222ef45ddbdf0"
                    ]
                },
                {
                    "command": [
                        "rewrite def_i; have [y Gy ->] := repr_class <<B>> x.",
                        "VernacExtend",
                        "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
                    ]
                },
                {
                    "command": [
                        "by rewrite groupJ // /eK classGidl // -def_i enum_valK_in.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun0",
            "line_nb": 297,
            "steps": [
                {
                    "command": [
                        "by rewrite -{1}(genGid G) => /(cfun0gen phi).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "support_cfun",
            "line_nb": 300,
            "steps": [
                {
                    "command": [
                        "by apply/subsetP=> g; apply: contraR => /cfun0->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfunJ",
            "line_nb": 303,
            "steps": [
                {
                    "command": [
                        "by rewrite -{1}(genGid G) => /(cfunJgen phi)->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_repr",
            "line_nb": 306,
            "steps": [
                {
                    "command": [
                        "by have [y Gy ->] := repr_class G x; apply: cfunJ.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_inP",
            "line_nb": 309,
            "steps": [
                {
                    "command": [
                        "by rewrite -{1}genGid => /cfun_in_genP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfuniE",
            "line_nb": 312,
            "steps": [
                {
                    "command": [
                        "case/andP=> sAG nAG; rewrite cfunElock genGid.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "by rewrite class_sub_norm // andb_idl // => /(subsetP sAG).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "support_cfuni",
            "line_nb": 316,
            "steps": [
                {
                    "command": [
                        "by move=> nsAG x; rewrite !inE cfuniE // pnatr_eq0 -lt0n lt0b.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_mul_cfuni",
            "line_nb": 319,
            "steps": [
                {
                    "command": [
                        "by move=> nsAG x Ax; rewrite cfunE cfuniE // Ax mulr1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_cfuni",
            "line_nb": 322,
            "steps": [
                {
                    "command": [
                        "by rewrite -['1_A]mul1r; apply: eq_mul_cfuni.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfuniG",
            "line_nb": 325,
            "steps": [
                {
                    "command": [
                        "by rewrite -[G in '1_G]genGid.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun1E",
            "line_nb": 328,
            "steps": [
                {
                    "command": [
                        "by rewrite -cfuniG cfuniE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun11",
            "line_nb": 331,
            "steps": [
                {
                    "command": [
                        "by rewrite cfun1E group1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prod_cfunE",
            "line_nb": 334,
            "steps": [
                {
                    "command": [
                        "by move=> Gx; elim/big_rec2: _ => [|i _ psi _ <-]; rewrite ?cfunE ?cfun1E ?Gx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exp_cfunE",
            "line_nb": 337,
            "steps": [
                {
                    "command": [
                        "by rewrite -[n]card_ord -!prodr_const; apply: prod_cfunE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mul_cfuni",
            "line_nb": 340,
            "steps": [
                {
                    "command": [
                        "apply/cfunP=> g; rewrite !cfunElock -natrM mulnb subsetI.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite andbCA !andbA andbb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_on_sum",
            "line_nb": 348,
            "steps": [
                {
                    "command": [
                        "rewrite ['CF(G, A)]span_def big_map big_filter.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_bigl => xG; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_on0",
            "line_nb": 370,
            "steps": [
                {
                    "command": [
                        "by move/cfun_onP; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sum_by_classes",
            "line_nb": 373,
            "steps": [
                {
                    "command": [
                        "move=> FJ; rewrite {1}(partition_big _ _ ((@mem_classes gT)^~ G)) /=.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "apply: eq_bigr => _ /imsetP[x Gx ->]; have [y Gy ->] := repr_class G x.",
                        "VernacExtend",
                        "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
                    ]
                },
                {
                    "command": [
                        "rewrite mulr_natl -sumr_const FJ {y Gy}//; apply/esym/eq_big=> y /=.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "apply/idP/andP=> [xGy | [Gy /eqP<-]]; last exact: class_refl.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite (class_eqP xGy) (subsetP (class_subG Gx (subxx _))).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by case/imsetP=> z Gz ->; rewrite FJ.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_base_free",
            "line_nb": 381,
            "steps": [
                {
                    "command": [
                        "have b_i (i : 'I_#|classes G ::&: A|) : (cfun_base G A)`_i = '1_(enum_val i).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite /enum_val -!tnth_nth tnth_map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/freeP => s S0 i; move/cfunP/(_ (repr (enum_val i))): S0.",
                        "VernacExtend",
                        "86bb0d3d5ae27b38aac15f69d532d662f1518315"
                    ]
                },
                {
                    "command": [
                        "rewrite sum_cfunE (bigD1 i) //= big1 ?addr0 => [|j].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite b_i !cfunE; have /setIdP[/imsetP[x Gx ->] _] := enum_valP i.",
                        "VernacExtend",
                        "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
                    ]
                },
                {
                    "command": [
                        "by rewrite cfun_repr cfun_classE Gx class_refl mulr1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: contraNeq; rewrite b_i !cfunE mulf_eq0 => /norP[_].",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "rewrite -(inj_eq enum_val_inj).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have /setIdP[/imsetP[x _ ->] _] := enum_valP i; rewrite cfun_repr.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "have /setIdP[/imsetP[y Gy ->] _] := enum_valP j; rewrite cfun_classE Gy.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "by rewrite pnatr_eq0 -lt0n lt0b => /class_eqP->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dim_cfun",
            "line_nb": 394,
            "steps": [
                {
                    "command": [
                        "by rewrite dimvf /Vector.dim /= genGid.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dim_cfun_on",
            "line_nb": 397,
            "steps": [
                {
                    "command": [
                        "by rewrite (eqnP (cfun_base_free A)) size_tuple.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dim_cfun_on_abelian",
            "line_nb": 400,
            "steps": [
                {
                    "command": [
                        "move/abelian_classP=> cGG sAG; rewrite -(card_imset _ set1_inj) dim_cfun_on.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "apply/eq_card=> xG; rewrite !inE.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "apply/andP/imsetP=> [[/imsetP[x Gx ->] Ax] | [x Ax ->]] {xG}.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite cGG ?sub1set // in Ax *; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite -{1}(cGG x) ?mem_classes ?(subsetP sAG) ?sub1set.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfuni_on",
            "line_nb": 407,
            "steps": [
                {
                    "command": [
                        "apply/cfun_onP=> x notAx; rewrite cfunElock genGid.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by case: andP => // [[_ s_xG_A]]; rewrite (subsetP s_xG_A) ?class_refl in notAx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mul_cfuni_on",
            "line_nb": 411,
            "steps": [
                {
                    "command": [
                        "by apply/cfun_onP=> x /(cfun_onP (cfuni_on A)) Ax0; rewrite cfunE Ax0 mulr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_onE",
            "line_nb": 414,
            "steps": [
                {
                    "command": [
                        "exact: (sameP cfun_onP supportP).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_onT",
            "line_nb": 417,
            "steps": [
                {
                    "command": [
                        "by rewrite cfun_onE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_onD1",
            "line_nb": 420,
            "steps": [
                {
                    "command": [
                        "by rewrite !cfun_onE -!(eq_subset (in_set (support _))) subsetD1 !inE negbK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_onG",
            "line_nb": 423,
            "steps": [
                {
                    "command": [
                        "by rewrite cfun_onE support_cfun.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfunD1E",
            "line_nb": 426,
            "steps": [
                {
                    "command": [
                        "by rewrite cfun_onD1 cfun_onG.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfunGid",
            "line_nb": 429,
            "steps": [
                {
                    "command": [
                        "by apply/vspaceP=> phi; rewrite cfun_onG memvf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_onS",
            "line_nb": 432,
            "steps": [
                {
                    "command": [
                        "by rewrite !cfun_onE => sBA /subset_trans->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfun_complement",
            "line_nb": 435,
            "steps": [
                {
                    "command": [
                        "case/andP=> sAG nAG; rewrite -cfunGid [rhs in _ = rhs]cfun_on_sum.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "rewrite (bigID (fun B => B \\subset A)) /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "congr (_ + _)%VS; rewrite cfun_on_sum; apply: eq_bigl => /= xG.",
                        "VernacExtend",
                        "775b998c29d59f89d853e0c4a629d4a3388abe3b"
                    ]
                },
                {
                    "command": [
                        "rewrite andbAC; apply/esym/andb_idr=> /andP[/imsetP[x Gx ->] _].",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite class_subG.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -andbA; apply: andb_id2l => /imsetP[x Gx ->].",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite !class_sub_norm ?normsD ?normG // inE andbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfConjCE",
            "line_nb": 444,
            "steps": [
                {
                    "command": [
                        "by rewrite cfunE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfConjCK",
            "line_nb": 447,
            "steps": [
                {
                    "command": [
                        "by move=> phi; apply/cfunP=> x; rewrite !cfunE conjCK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfConjC_cfun1",
            "line_nb": 450,
            "steps": [
                {
                    "command": [
                        "exact: rmorph1.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfker_is_group",
            "line_nb": 453,
            "steps": [
                {
                    "command": [
                        "apply/group_setP; split=> [|x y]; rewrite !inE ?group1.",
                        "VernacExtend",
                        "945ac9810113bf938ceefee9ae4e6b3a8be91952"
                    ]
                },
                {
                    "command": [
                        "by apply/forallP=> y; rewrite mul1g.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case/andP=> Gx /forallP-Kx /andP[Gy /forallP-Ky]; rewrite groupM //.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "by apply/forallP=> z; rewrite -mulgA (eqP (Kx _)) Ky.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfker_sub",
            "line_nb": 460,
            "steps": [
                {
                    "command": [
                        "by rewrite /cfker setIdE subsetIl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfker_norm",
            "line_nb": 463,
            "steps": [
                {
                    "command": [
                        "apply/subsetP=> z Gz; have phiJz := cfunJ phi _ (groupVr Gz).",
                        "VernacExtend",
                        "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
                    ]
                },
                {
                    "command": [
                        "rewrite inE; apply/subsetP=> _ /imsetP[x /setIdP[Gx /forallP-Kx] ->].",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "rewrite inE groupJ //; apply/forallP=> y.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(phiJz y) -phiJz conjMg conjgK Kx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfker_normal",
            "line_nb": 469,
            "steps": [
                {
                    "command": [
                        "by rewrite /normal cfker_sub cfker_norm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfkerMl",
            "line_nb": 472,
            "steps": [
                {
                    "command": [
                        "by case/setIdP=> _ /eqfunP->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfkerMr",
            "line_nb": 475,
            "steps": [
                {
                    "command": [
                        "by move=> Kx; rewrite conjgC cfkerMl ?cfunJ ?(subsetP (cfker_sub phi)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfker1",
            "line_nb": 478,
            "steps": [
                {
                    "command": [
                        "by move=> Kx; rewrite -[x]mulg1 cfkerMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfker_cfun0",
            "line_nb": 481,
            "steps": [
                {
                    "command": [
                        "apply/setP=> x; rewrite !inE andb_idr // => Gx; apply/forallP=> y.",
                        "VernacExtend",
                        "09ff90107c05f6bf4f743acb58a064bacfe65029"
                    ]
                },
                {
                    "command": [
                        "by rewrite !cfunE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfker_add",
            "line_nb": 485,
            "steps": [
                {
                    "command": [
                        "apply/subsetP=> x /setIP[Kphi_x Kpsi_x]; have [Gx _] := setIdP Kphi_x.",
                        "VernacExtend",
                        "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
                    ]
                },
                {
                    "command": [
                        "by rewrite inE Gx; apply/forallP=> y; rewrite !cfunE !cfkerMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfker_sum",
            "line_nb": 489,
            "steps": [
                {
                    "command": [
                        "elim/big_rec2: _ => [|i K psi Pi sK_psi]; first by rewrite setIT cfker_cfun0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite setICA; apply: subset_trans (setIS _ sK_psi) (cfker_add _ _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfker_scale",
            "line_nb": 493,
            "steps": [
                {
                    "command": [
                        "apply/subsetP=> x Kphi_x; have [Gx _] := setIdP Kphi_x.",
                        "VernacExtend",
                        "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
                    ]
                },
                {
                    "command": [
                        "by rewrite inE Gx; apply/forallP=> y; rewrite !cfunE cfkerMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfker_opp",
            "line_nb": 501,
            "steps": [
                {
                    "command": [
                        "by rewrite -scaleN1r cfker_scale_nz // oppr_eq0 oner_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfker_cfun1",
            "line_nb": 504,
            "steps": [
                {
                    "command": [
                        "apply/setP=> x; rewrite !inE andb_idr // => Gx; apply/forallP=> y.",
                        "VernacExtend",
                        "09ff90107c05f6bf4f743acb58a064bacfe65029"
                    ]
                },
                {
                    "command": [
                        "by rewrite !cfun1E groupMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfker_mul",
            "line_nb": 508,
            "steps": [
                {
                    "command": [
                        "apply/subsetP=> x /setIP[Kphi_x Kpsi_x]; have [Gx _] := setIdP Kphi_x.",
                        "VernacExtend",
                        "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
                    ]
                },
                {
                    "command": [
                        "by rewrite inE Gx; apply/forallP=> y; rewrite !cfunE !cfkerMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfker_prod",
            "line_nb": 512,
            "steps": [
                {
                    "command": [
                        "elim/big_rec2: _ => [|i K psi Pi sK_psi]; first by rewrite setIT cfker_cfun1.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite setICA; apply: subset_trans (setIS _ sK_psi) (cfker_mul _ _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfaithfulE",
            "line_nb": 516,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdotE",
            "line_nb": 528,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdotElr",
            "line_nb": 531,
            "steps": [
                {
                    "command": [
                        "move=> Aphi Bpsi; rewrite (big_setID G) cfdotE (big_setID (A :&: B)) setIC /=.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "congr (_ * (_ + _)); rewrite !big1 // => x /setDP[_].",
                        "VernacExtend",
                        "0553e143ed0fb2c0710eda520af4b8f4044d5871"
                    ]
                },
                {
                    "command": [
                        "by move/cfun0->; rewrite mul0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite inE; case/nandP=> notABx; first by rewrite (cfun_on0 Aphi) ?mul0r.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite (cfun_on0 Bpsi) // rmorph0 mulr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdotEl",
            "line_nb": 538,
            "steps": [
                {
                    "command": [
                        "by move=> Aphi; rewrite (cfdotElr Aphi (cfun_onT psi)) setIT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdotEr",
            "line_nb": 541,
            "steps": [
                {
                    "command": [
                        "by move=> Apsi; rewrite (cfdotElr (cfun_onT phi) Apsi) setTI.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdot_complement",
            "line_nb": 544,
            "steps": [
                {
                    "command": [
                        "move=> Aphi A'psi; rewrite (cfdotElr Aphi A'psi).",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite setDE setICA setICr setI0 big_set0 mulr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfnormE",
            "line_nb": 548,
            "steps": [
                {
                    "command": [
                        "by move/cfdotEl->; rewrite (eq_bigr _ (fun _ _ => normCK _)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdot_cfuni",
            "line_nb": 555,
            "steps": [
                {
                    "command": [
                        "move=> nsAG nsBG; rewrite (cfdotElr (cfuni_on G A) (cfuni_on G B)) mulrC.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "congr (_ / _); rewrite -sumr_const; apply: eq_bigr => x /setIP[Ax Bx].",
                        "VernacExtend",
                        "775b998c29d59f89d853e0c4a629d4a3388abe3b"
                    ]
                },
                {
                    "command": [
                        "by rewrite !cfuniE // Ax Bx rmorph1 mulr1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfnorm1",
            "line_nb": 560,
            "steps": [
                {
                    "command": [
                        "by rewrite cfdot_cfuni ?genGid // setIid divff ?neq0CG.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdotrE",
            "line_nb": 563,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdot0l",
            "line_nb": 573,
            "steps": [
                {
                    "command": [
                        "by rewrite -cfdotrE linear0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdotNl",
            "line_nb": 576,
            "steps": [
                {
                    "command": [
                        "by rewrite -!cfdotrE linearN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdotDl",
            "line_nb": 579,
            "steps": [
                {
                    "command": [
                        "by rewrite -!cfdotrE linearD.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdotBl",
            "line_nb": 582,
            "steps": [
                {
                    "command": [
                        "by rewrite -!cfdotrE linearB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdotMnl",
            "line_nb": 585,
            "steps": [
                {
                    "command": [
                        "by rewrite -!cfdotrE linearMn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdot_suml",
            "line_nb": 588,
            "steps": [
                {
                    "command": [
                        "by rewrite -!cfdotrE linear_sum.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdotZl",
            "line_nb": 591,
            "steps": [
                {
                    "command": [
                        "by rewrite -!cfdotrE linearZ.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_cfdotr",
            "line_nb": 598,
            "steps": [
                {
                    "command": [
                        "by move=> Aphi /eq_cfdotl eq_dot; rewrite cfdotC eq_dot // -cfdotC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdotBr",
            "line_nb": 601,
            "steps": [
                {
                    "command": [
                        "by rewrite !(cfdotC xi) -rmorphB cfdotBl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdot0r",
            "line_nb": 605,
            "steps": [
                {
                    "command": [
                        "exact: raddf0.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdotNr",
            "line_nb": 608,
            "steps": [
                {
                    "command": [
                        "exact: raddfN.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdotDr",
            "line_nb": 611,
            "steps": [
                {
                    "command": [
                        "exact: raddfD.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdotMnr",
            "line_nb": 614,
            "steps": [
                {
                    "command": [
                        "exact: raddfMn.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdot_sumr",
            "line_nb": 617,
            "steps": [
                {
                    "command": [
                        "exact: raddf_sum.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdotZr",
            "line_nb": 620,
            "steps": [
                {
                    "command": [
                        "by rewrite !(cfdotC xi) cfdotZl rmorphM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdot_conjC",
            "line_nb": 627,
            "steps": [
                {
                    "command": [
                        "by rewrite cfdot_cfAut.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdot_conjCl",
            "line_nb": 630,
            "steps": [
                {
                    "command": [
                        "by rewrite -cfdot_conjC cfConjCK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdot_conjCr",
            "line_nb": 633,
            "steps": [
                {
                    "command": [
                        "by rewrite -cfdot_conjC cfConjCK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfnorm_ge0",
            "line_nb": 636,
            "steps": [
                {
                    "command": [
                        "by rewrite mulr_ge0 ?invr_ge0 ?ler0n ?sumr_ge0 // => x _; apply: mul_conjC_ge0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfnorm_gt0",
            "line_nb": 645,
            "steps": [
                {
                    "command": [
                        "by rewrite ltr_def cfnorm_ge0 cfnorm_eq0 andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqrt_cfnorm_ge0",
            "line_nb": 648,
            "steps": [
                {
                    "command": [
                        "by rewrite sqrtC_ge0 cfnorm_ge0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqrt_cfnorm_eq0",
            "line_nb": 651,
            "steps": [
                {
                    "command": [
                        "by rewrite sqrtC_eq0 cfnorm_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqrt_cfnorm_gt0",
            "line_nb": 654,
            "steps": [
                {
                    "command": [
                        "by rewrite sqrtC_gt0 cfnorm_gt0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfnormZ",
            "line_nb": 657,
            "steps": [
                {
                    "command": [
                        "by rewrite cfdotZl cfdotZr mulrA normCK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfnormN",
            "line_nb": 660,
            "steps": [
                {
                    "command": [
                        "by rewrite cfdotNl raddfN opprK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfnorm_sign",
            "line_nb": 663,
            "steps": [
                {
                    "command": [
                        "by rewrite -signr_odd scaler_sign; case: (odd n); rewrite ?cfnormN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfnormD",
            "line_nb": 666,
            "steps": [
                {
                    "command": [
                        "by rewrite /= addrAC -cfdotC cfdotDl !cfdotDr !addrA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfnormB",
            "line_nb": 669,
            "steps": [
                {
                    "command": [
                        "by rewrite /= cfnormD cfnormN cfdotNr rmorphN -opprD.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfnormBd",
            "line_nb": 675,
            "steps": [
                {
                    "command": [
                        "by move=> ophipsi; rewrite cfnormDd ?cfnormN // cfdotNr ophipsi oppr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfnorm_conjC",
            "line_nb": 678,
            "steps": [
                {
                    "command": [
                        "by rewrite cfdot_conjC geC0_conj // cfnorm_ge0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfCauchySchwarz_sqrt",
            "line_nb": 698,
            "steps": [
                {
                    "command": [
                        "rewrite -(sqrCK (normr_ge0 _)) -sqrtCM ?qualifE ?cfnorm_ge0 //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite (mono_in_lerif (@ler_sqrtC _)) 1?rpredM ?qualifE; rewrite ?normr_ge0 ?cfnorm_ge0 //.",
                        "VernacExtend",
                        "2194fcb4d6d52cbae24a29f7ff14a3997f1912fd"
                    ]
                },
                {
                    "command": [
                        "exact: cfCauchySchwarz.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orthogonal_cons",
            "line_nb": 715,
            "steps": [
                {
                    "command": [
                        "by rewrite /orthogonal /= andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orthoP",
            "line_nb": 718,
            "steps": [
                {
                    "command": [
                        "by rewrite /orthogonal /= !andbT; apply: eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orthogonalP",
            "line_nb": 721,
            "steps": [
                {
                    "command": [
                        "apply: (iffP allP) => oSR phi => [psi /oSR/allP opS /opS/eqP // | /oSR opS].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by apply/allP=> psi /= /opS->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orthoPl",
            "line_nb": 725,
            "steps": [
                {
                    "command": [
                        "by rewrite [orthogonal _ S]andbT /=; apply: (iffP allP) => ophiS ? /ophiS/eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orthogonal_sym",
            "line_nb": 729,
            "steps": [
                {
                    "command": [
                        "apply: symmetric_from_pre => R S /orthogonalP oRS.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by apply/orthogonalP=> phi psi Rpsi Sphi; rewrite cfdotC oRS ?rmorph0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orthoPr",
            "line_nb": 733,
            "steps": [
                {
                    "command": [
                        "rewrite orthogonal_sym.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: (iffP orthoPl) => oSpsi phi Sphi; rewrite cfdotC oSpsi ?conjC0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_orthogonal",
            "line_nb": 737,
            "steps": [
                {
                    "command": [
                        "move=> eqR eqS; rewrite [orthogonal _ _](eq_all_r eqR).",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_all => psi /=; apply: eq_all_r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orthogonal_catl",
            "line_nb": 741,
            "steps": [
                {
                    "command": [
                        "exact: all_cat.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orthogonal_catr",
            "line_nb": 744,
            "steps": [
                {
                    "command": [
                        "by rewrite !(orthogonal_sym R) orthogonal_catl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "span_orthogonal",
            "line_nb": 747,
            "steps": [
                {
                    "command": [
                        "move/orthogonalP=> oS12; do 2!move/(@coord_span _ _ _ (in_tuple _))->.",
                        "VernacExtend",
                        "22b510de5a19ae026f48022a3dcf9db1d297df52"
                    ]
                },
                {
                    "command": [
                        "rewrite cfdot_suml big1 // => i _; rewrite cfdot_sumr big1 // => j _.",
                        "VernacExtend",
                        "fbaa61af20867a5dfb8bb5213ca8048b258f8f3a"
                    ]
                },
                {
                    "command": [
                        "by rewrite cfdotZl cfdotZr oS12 ?mem_nth ?mulr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orthogonal_split",
            "line_nb": 752,
            "steps": [
                {
                    "command": [
                        "suffices [X S_X [Y -> oYS]]: {X : _ & X \\in <<S>>%VS & {Y | beta = X + Y & orthogonal Y S}}.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "exists X => //; exists Y.",
                        "VernacExtend",
                        "0395c7867b4a69524ca6bbf53c6209ecd1403e04"
                    ]
                },
                {
                    "command": [
                        "by rewrite cfdotC (span_orthogonal oYS) ?memv_span1 ?conjC0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: S beta => [|phi S IHS] beta.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by exists 0; last exists beta; rewrite ?mem0v ?add0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [[U S_U [V -> oVS]] [X S_X [Y -> oYS]]] := (IHS phi, IHS beta).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "pose Z := '[Y, V] / '[V] *: V; exists (X + Z).",
                        "VernacExtend",
                        "1b3824b467c0078fc6708c18c4371940a050646c"
                    ]
                },
                {
                    "command": [
                        "rewrite /Z -{4}(addKr U V) scalerDr scalerN addrA addrC span_cons.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite memv_add ?memvB ?memvZ ?memv_line.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists (Y - Z); first by rewrite addrCA !addrA addrK addrC.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply/orthoPl=> psi; rewrite !inE => /predU1P[-> | Spsi]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite cfdotBl cfdotZl (orthoPl oVS _ Spsi) mulr0 subr0 (orthoPl oYS).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite cfdotBl !cfdotDr (span_orthogonal oYS) // ?memv_span ?mem_head //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite !cfdotZl (span_orthogonal oVS _ S_U) ?mulr0 ?memv_span ?mem_head //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have [-> | nzV] := eqVneq V 0; first by rewrite cfdot0r !mul0r subrr.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite divfK ?cfnorm_eq0 ?subrr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_orthogonal",
            "line_nb": 771,
            "steps": [
                {
                    "command": [
                        "move=> Inu sSA sRA; rewrite [orthogonal _ _]all_map.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "apply: eq_in_all => phi Sphi; rewrite /= all_map.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_in_all => psi Rpsi; rewrite /= Inu ?(sSA phi) ?(sRA psi).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orthogonal_oppr",
            "line_nb": 776,
            "steps": [
                {
                    "command": [
                        "wlog suffices IH: S R / orthogonal S R -> orthogonal S (map -%R R).",
                        "VernacExtend",
                        "348aa27e7c84ea4ca2ac06b8a3b3db24e74b6ad7"
                    ]
                },
                {
                    "command": [
                        "by apply/idP/idP=> /IH; rewrite ?mapK //; apply: opprK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move/orthogonalP=> oSR; apply/orthogonalP=> xi1 _ Sxi1 /mapP[xi2 Rxi2 ->].",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by rewrite cfdotNr oSR ?oppr0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orthogonal_oppl",
            "line_nb": 782,
            "steps": [
                {
                    "command": [
                        "by rewrite -!(orthogonal_sym R) orthogonal_oppr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pairwise_orthogonalP",
            "line_nb": 785,
            "steps": [
                {
                    "command": [
                        "rewrite /pairwise_orthogonal /=; case notS0: (~~ _); last by right; case.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "elim: S notS0 => [|phi S IH] /=; first by left.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite inE eq_sym andbT => /norP[nz_phi /IH{IH}IH].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "have [opS | not_opS] := allP; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "right=> [[/andP[notSp _] opS]]; case: not_opS => psi Spsi /=.",
                        "VernacExtend",
                        "4a95f82aca0fc9a50f43053eca44fc9141212abe"
                    ]
                },
                {
                    "command": [
                        "by rewrite opS ?mem_head 1?mem_behead // (memPnC notSp).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite (contra (opS _)) /= ?cfnorm_eq0 //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply: (iffP IH) => [] [uniqS oSS]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by split=> //; apply: sub_in2 oSS => psi Spsi; apply: mem_behead.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "split=> // psi xi; rewrite !inE => /predU1P[-> // | Spsi].",
                        "VernacExtend",
                        "fbaa61af20867a5dfb8bb5213ca8048b258f8f3a"
                    ]
                },
                {
                    "command": [
                        "by case/predU1P=> [-> | /opS] /eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case/predU1P=> [-> _ | Sxi /oSS-> //].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply/eqP; rewrite cfdotC conjC_eq0 [_ == 0]opS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pairwise_orthogonal_cat",
            "line_nb": 800,
            "steps": [
                {
                    "command": [
                        "rewrite /pairwise_orthogonal mem_cat negb_or -!andbA; do !bool_congr.",
                        "VernacExtend",
                        "6a72213b8ff230d3c557d3c0d5b7e6e6d5c919ed"
                    ]
                },
                {
                    "command": [
                        "elim: R => [|phi R /= ->]; rewrite ?andbT // orthogonal_cons all_cat -!andbA /=.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "by do !bool_congr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_pairwise_orthogonal",
            "line_nb": 805,
            "steps": [
                {
                    "command": [
                        "apply: catCA_perm_subst R S => R S S'.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "rewrite !pairwise_orthogonal_cat !orthogonal_catr (orthogonal_sym R S) -!andbA.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by do !bool_congr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_pairwise_orthogonal",
            "line_nb": 810,
            "steps": [
                {
                    "command": [
                        "move=> sS12 uniqS1 /pairwise_orthogonalP[/andP[notS2_0 _] oS2].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "apply/pairwise_orthogonalP; rewrite /= (contra (sS12 0)) //.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by split=> //; apply: sub_in2 oS2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orthogonal_free",
            "line_nb": 815,
            "steps": [
                {
                    "command": [
                        "case/pairwise_orthogonalP=> [/=/andP[notS0 uniqS] oSS].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite -(in_tupleE S); apply/freeP => a aS0 i.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "have S_i: S`_i \\in S by apply: mem_nth.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have /eqP: '[S`_i, 0]_G = 0 := cfdot0r _.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -{2}aS0 raddf_sum /= (bigD1 i) //= big1 => [|j neq_ji]; last 1 first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite cfdotZr oSS ?mulr0 ?mem_nth // eq_sym nth_uniq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite addr0 cfdotZr mulf_eq0 conjC_eq0 cfnorm_eq0.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by case/pred2P=> // Si0; rewrite -Si0 S_i in notS0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orthonormal_not0",
            "line_nb": 830,
            "steps": [
                {
                    "command": [
                        "by case/andP=> /allP S1 _; rewrite (contra (S1 _)) //= cfdot0r eq_sym oner_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orthonormalE",
            "line_nb": 833,
            "steps": [
                {
                    "command": [
                        "by rewrite -(andb_idl (@orthonormal_not0 S)) andbCA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orthonormal_orthogonal",
            "line_nb": 836,
            "steps": [
                {
                    "command": [
                        "by rewrite orthonormalE => /andP[_].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orthonormal_cat",
            "line_nb": 839,
            "steps": [
                {
                    "command": [
                        "rewrite !orthonormalE pairwise_orthogonal_cat all_cat -!andbA.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by do !bool_congr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_orthonormal",
            "line_nb": 843,
            "steps": [
                {
                    "command": [
                        "move=> eqRS; rewrite !orthonormalE (eq_all_r (perm_eq_mem eqRS)).",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite (eq_pairwise_orthogonal eqRS).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orthonormal_free",
            "line_nb": 847,
            "steps": [
                {
                    "command": [
                        "by move/orthonormal_orthogonal/orthogonal_free.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orthonormalP",
            "line_nb": 850,
            "steps": [
                {
                    "command": [
                        "rewrite orthonormalE; have [/= normS | not_normS] := allP; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by right=> [[_ o1S]]; case: not_normS => phi Sphi; rewrite /= o1S ?eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: (iffP (pairwise_orthogonalP S)) => [] [uniqS oSS].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "split=> // [|phi psi]; first by case/andP: uniqS.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by have [-> _ /normS/eqP | /oSS] := altP eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "split=> // [|phi psi Sphi Spsi /negbTE]; last by rewrite oSS // => ->.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite /= (contra (normS _)) // cfdot0r eq_sym oner_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_orthonormal",
            "line_nb": 859,
            "steps": [
                {
                    "command": [
                        "move=> sS12 uniqS1 /orthonormalP[_ oS1].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by apply/orthonormalP; split; last apply: sub_in2 sS12 _ _.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orthonormal2P",
            "line_nb": 863,
            "steps": [
                {
                    "command": [
                        "rewrite /orthonormal /= !andbT andbC.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: (iffP and3P) => [] []; do 3!move/eqP->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "conjC_pair_orthogonal",
            "line_nb": 867,
            "steps": [
                {
                    "command": [
                        "move=> ccS /hasPn nrS oSS Schi; apply: sub_pairwise_orthogonal oSS.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by apply/allP; rewrite /= Schi ccS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite /= inE eq_sym nrS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdot_real_conjC",
            "line_nb": 872,
            "steps": [
                {
                    "command": [
                        "by rewrite -cfdot_conjC => /eqcfP->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "extend_cfConjC_subset",
            "line_nb": 875,
            "steps": [
                {
                    "command": [
                        "move=> ccS nrS Sphi X'phi [uniqX /allP-sXS ccX].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "split; last 1 [by apply/allP; rewrite /= Sphi ccS | apply/allP]; rewrite /= inE.",
                        "VernacExtend",
                        "2522bb31d2ee5eb333bb7e2a816e0a3ac64f5b0e"
                    ]
                },
                {
                    "command": [
                        "by rewrite negb_or X'phi eq_sym (hasPn nrS) // (contra (ccX _)) ?cfConjCK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite cfConjCK !mem_head orbT; apply/allP=> xi Xxi; rewrite !inE ccX ?orbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dvdn_cforderP",
            "line_nb": 890,
            "steps": [
                {
                    "command": [
                        "apply: (iffP (dvdn_biglcmP _ _ _)); rewrite genGid => phiG1 x Gx.",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "by apply/eqP; rewrite -dvdn_orderC phiG1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite dvdn_orderC phiG1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dvdn_cforder",
            "line_nb": 895,
            "steps": [
                {
                    "command": [
                        "apply/dvdn_cforderP/eqP=> phi_n_1 => [|x Gx].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by apply/cfun_inP=> x Gx; rewrite exp_cfunE // cfun1E Gx phi_n_1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite -exp_cfunE // phi_n_1 // cfun1E Gx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exp_cforder",
            "line_nb": 900,
            "steps": [
                {
                    "command": [
                        "by apply/eqP; rewrite -dvdn_cforder.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cforder_rmorph",
            "line_nb": 908,
            "steps": [
                {
                    "command": [
                        "by rewrite dvdn_cforder -rmorphX exp_cforder rmorph1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cforder_inj_rmorph",
            "line_nb": 911,
            "steps": [
                {
                    "command": [
                        "move=> inj_f; apply/eqP; rewrite eqn_dvd cforder_rmorph dvdn_cforder /=.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(rmorph_eq1 _ inj_f) rmorphX exp_cforder.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_iso_to",
            "line_nb": 920,
            "steps": [
                {
                    "command": [
                        "by move=> sU sW [Itau Wtau]; split=> [|u /sU/Wtau/sW //]; apply: sub_in2 Itau.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isometry_of_free",
            "line_nb": 923,
            "steps": [
                {
                    "command": [
                        "move=> freeS If; have defS := free_span freeS.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "have [tau /(_ freeS (size_map f S))Dtau] := linear_of_free S (map f S).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have{Dtau} Dtau: {in S, tau =1 f}.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by move=> _ /(nthP 0)[i ltiS <-]; rewrite -!(nth_map 0 0) ?Dtau.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists tau => // _ _ /defS[a -> _] /defS[b -> _].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite !{1}linear_sum !{1}cfdot_suml; apply/eq_big_seq=> xi1 Sxi1.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "rewrite !{1}cfdot_sumr; apply/eq_big_seq=> xi2 Sxi2.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite !linearZ /= !Dtau // !cfdotZl !cfdotZr If.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isometry_raddf_inj",
            "line_nb": 946,
            "steps": [
                {
                    "command": [
                        "move=> Itau linU phi psi Uphi Upsi /eqP; rewrite -subr_eq0 -raddfB.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite -cfnorm_eq0 Itau ?linU // cfnorm_eq0 subr_eq0 => /eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "opp_isometry",
            "line_nb": 950,
            "steps": [
                {
                    "command": [
                        "by move=> x y; rewrite cfdotNl cfdotNr opprK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfRes_subproof",
            "line_nb": 958,
            "steps": [
                {
                    "command": [
                        "apply: intro_class_fun => /= [x y Hx Hy | x /negbTE/=-> //].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite Hx (groupJ Hx) //; case: subsetP => // sHG; rewrite cfunJgen ?sHG.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfResE",
            "line_nb": 963,
            "steps": [
                {
                    "command": [
                        "by move=> sAB x Ax; rewrite cfunElock mem_gen ?genS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfRes1",
            "line_nb": 966,
            "steps": [
                {
                    "command": [
                        "by rewrite cfunElock if_same group1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfRes_is_linear",
            "line_nb": 969,
            "steps": [
                {
                    "command": [
                        "by move=> a phi psi; apply/cfunP=> x; rewrite !cfunElock mulrnAr mulrnDl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfRes_cfun1",
            "line_nb": 974,
            "steps": [
                {
                    "command": [
                        "apply: cfun_in_genP => x Hx; rewrite cfunElock Hx !cfun1Egen Hx.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by case: subsetP => [-> // | _]; rewrite group1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfRes_is_multiplicative",
            "line_nb": 978,
            "steps": [
                {
                    "command": [
                        "split=> [phi psi|]; [apply/cfunP=> x | exact: cfRes_cfun1].",
                        "VernacExtend",
                        "e39ce58ba910954f3979c04da8f305ff8a1d61cc"
                    ]
                },
                {
                    "command": [
                        "by rewrite !cfunElock mulrnAr mulrnAl -mulrnA mulnb andbb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfResEout",
            "line_nb": 992,
            "steps": [
                {
                    "command": [
                        "move/negPf=> not_sHG; apply/cfunP=> x.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by rewrite cfunE cfun1E mulr_natr cfunElock !genGid not_sHG.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfResRes",
            "line_nb": 996,
            "steps": [
                {
                    "command": [
                        "move=> sAH sHG; apply/cfunP=> x; rewrite !cfunElock !genGid !gen_subG sAH sHG.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by rewrite (subset_trans sAH) // -mulrnA mulnb -in_setI (setIidPr _) ?gen_subG.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfRes_id",
            "line_nb": 1000,
            "steps": [
                {
                    "command": [
                        "by apply/cfun_in_genP=> x Ax; rewrite cfunElock Ax subxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_cfker_Res",
            "line_nb": 1003,
            "steps": [
                {
                    "command": [
                        "move=> sAH kerA; apply/subsetP=> x Ax; have Hx := subsetP sAH x Ax.",
                        "VernacExtend",
                        "fcbc4db6275a8d44907e8ed4b44d2f7f279ee662"
                    ]
                },
                {
                    "command": [
                        "rewrite inE Hx; apply/forallP=> y; rewrite !cfunElock !genGid groupMl //.",
                        "VernacExtend",
                        "fe8f197e86415fc7f0a74eda9d312128b9473eda"
                    ]
                },
                {
                    "command": [
                        "by rewrite !(fun_if phi) cfkerMl // (subsetP kerA).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_cfker_Res",
            "line_nb": 1008,
            "steps": [
                {
                    "command": [
                        "by move=> kH; apply/eqP; rewrite eqEsubset cfker_sub sub_cfker_Res.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfRes_sub_ker",
            "line_nb": 1011,
            "steps": [
                {
                    "command": [
                        "move=> kerHphi; have sHG := subset_trans kerHphi (cfker_sub phi).",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "apply/cfun_inP=> x Hx; have ker_x := subsetP kerHphi x Hx.",
                        "VernacExtend",
                        "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
                    ]
                },
                {
                    "command": [
                        "by rewrite cfResE // cfunE cfun1E Hx mulr1 cfker1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cforder_Res",
            "line_nb": 1016,
            "steps": [
                {
                    "command": [
                        "exact: cforder_rmorph.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfMorph_subproof",
            "line_nb": 1025,
            "steps": [
                {
                    "command": [
                        "rewrite genGid; apply: intro_class_fun => [x y Gx Gy | x /negPf-> //].",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "rewrite Gx groupJ //; case subsetP => // sGD.",
                        "VernacExtend",
                        "80e7cce19c53eb5d5a21aafd83e552d37e23084a"
                    ]
                },
                {
                    "command": [
                        "by rewrite morphJ ?cfunJ ?mem_morphim ?sGD.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfMorphE",
            "line_nb": 1031,
            "steps": [
                {
                    "command": [
                        "by rewrite cfunElock => -> ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfMorph1",
            "line_nb": 1034,
            "steps": [
                {
                    "command": [
                        "by rewrite cfunElock morph1 if_same group1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfMorphEout",
            "line_nb": 1037,
            "steps": [
                {
                    "command": [
                        "move/negPf=> not_sGD; apply/cfunP=> x; rewrite cfunE cfun1E mulr_natr.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by rewrite cfunElock not_sGD.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfMorph_cfun1",
            "line_nb": 1041,
            "steps": [
                {
                    "command": [
                        "apply/cfun_inP=> x Gx; rewrite cfunElock !cfun1E Gx.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by case: subsetP => [sGD | _]; rewrite ?group1 // mem_morphim ?sGD.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfMorph_is_linear",
            "line_nb": 1045,
            "steps": [
                {
                    "command": [
                        "by move=> a phi psi; apply/cfunP=> x; rewrite !cfunElock mulrnAr -mulrnDl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfMorph_is_multiplicative",
            "line_nb": 1050,
            "steps": [
                {
                    "command": [
                        "split=> [phi psi|]; [apply/cfunP=> x | exact: cfMorph_cfun1].",
                        "VernacExtend",
                        "e39ce58ba910954f3979c04da8f305ff8a1d61cc"
                    ]
                },
                {
                    "command": [
                        "by rewrite !cfunElock mulrnAr mulrnAl -mulrnA mulnb andbb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfMorph_inj",
            "line_nb": 1057,
            "steps": [
                {
                    "command": [
                        "move=> phi1 phi2 eq_phi; apply/cfun_inP=> _ /morphimP[x Dx Gx ->].",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by rewrite -!cfMorphE // eq_phi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfMorph_eq1",
            "line_nb": 1061,
            "steps": [
                {
                    "command": [
                        "by apply: rmorph_eq1; apply: cfMorph_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfker_morph",
            "line_nb": 1064,
            "steps": [
                {
                    "command": [
                        "apply/setP=> x; rewrite !inE; apply: andb_id2l => Gx.",
                        "VernacExtend",
                        "da24caf87c1bbbad0538b8be68905ec456c78aa7"
                    ]
                },
                {
                    "command": [
                        "have Dx := subsetP sGD x Gx; rewrite Dx mem_morphim //=.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "apply/forallP/forallP=> Kx y.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "have [{y} /morphimP[y Dy Gy ->] | fG'y] := boolP (y \\in f @* G).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite -morphM // -!(cfMorphE phi) ?groupM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite !cfun0 ?groupMl // mem_morphim.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [Gy | G'y] := boolP (y \\in G); last by rewrite !cfun0 ?groupMl.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !cfMorphE ?groupM ?morphM // (subsetP sGD).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfker_morph_im",
            "line_nb": 1074,
            "steps": [
                {
                    "command": [
                        "by rewrite cfker_morph // morphim_setIpre (setIidPr (cfker_sub _)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_cfker_morph",
            "line_nb": 1077,
            "steps": [
                {
                    "command": [
                        "rewrite cfker_morph // subsetI; apply: andb_id2l => sAG.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite sub_morphim_pre // (subset_trans sAG).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_morphim_cfker",
            "line_nb": 1081,
            "steps": [
                {
                    "command": [
                        "by move=> sAG; rewrite sub_cfker_morph ?sAG.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cforder_morph",
            "line_nb": 1084,
            "steps": [
                {
                    "command": [
                        "by apply: cforder_inj_rmorph; apply: cfMorph_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfResMorph",
            "line_nb": 1088,
            "steps": [
                {
                    "command": [
                        "move=> sHG sGD; have sHD := subset_trans sHG sGD.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "apply/cfun_inP=> x Hx; have [Gx Dx] := (subsetP sHG x Hx, subsetP sHD x Hx).",
                        "VernacExtend",
                        "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
                    ]
                },
                {
                    "command": [
                        "by rewrite !(cfMorphE, cfResE) ?morphimS ?mem_morphim //.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfIsom_key",
            "line_nb": 1102,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfIsomE",
            "line_nb": 1107,
            "steps": [
                {
                    "command": [
                        "move=> Gx; rewrite unlock cfMorphE //= /restrm ?defG ?cfRes_id ?invmE //.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite -defR mem_morphim.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfIsom1",
            "line_nb": 1111,
            "steps": [
                {
                    "command": [
                        "by rewrite -(morph1 f) cfIsomE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfker_isom",
            "line_nb": 1121,
            "steps": [
                {
                    "command": [
                        "rewrite unlock cfker_morph // defG cfRes_id morphpre_restrm morphpre_invm.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -defR !morphimIim.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfIsomK",
            "line_nb": 1131,
            "steps": [
                {
                    "command": [
                        "move=> phi; apply/cfun_inP=> x Gx; rewrite -{1}(invmE (isom_inj isoGR) Gx).",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by rewrite !cfIsomE // -(isom_im isoGR) mem_morphim.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfIsomKV",
            "line_nb": 1135,
            "steps": [
                {
                    "command": [
                        "move=> phi; apply/cfun_inP=> y Ry; pose injGR := isom_inj isoGR.",
                        "VernacExtend",
                        "d7b8cb010e17c0eef7bcb84dff260d146075a321"
                    ]
                },
                {
                    "command": [
                        "rewrite -{1}[y](invmK injGR) ?(isom_im isoGR) //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "suffices /morphpreP[fGy Gf'y]: y \\in invm injGR @*^-1 G by rewrite !cfIsomE.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "by rewrite morphpre_invm (isom_im isoGR).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfIsom_inj",
            "line_nb": 1141,
            "steps": [
                {
                    "command": [
                        "exact: can_inj cfIsomK.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfIsom_eq1",
            "line_nb": 1144,
            "steps": [
                {
                    "command": [
                        "by apply: rmorph_eq1; apply: cfIsom_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cforder_isom",
            "line_nb": 1147,
            "steps": [
                {
                    "command": [
                        "exact: cforder_inj_rmorph cfIsom_inj.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfModE",
            "line_nb": 1168,
            "steps": [
                {
                    "command": [
                        "by move/normal_norm=> nBG; apply: cfMorphE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfMod1",
            "line_nb": 1171,
            "steps": [
                {
                    "command": [
                        "exact: cfMorph1.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfMod_cfun1",
            "line_nb": 1178,
            "steps": [
                {
                    "command": [
                        "exact: rmorph1.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfker_mod",
            "line_nb": 1181,
            "steps": [
                {
                    "command": [
                        "case/andP=> sBG nBG; rewrite cfker_morph // subsetI sBG.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "apply: subset_trans _ (ker_sub_pre _ _); rewrite ker_coset_prim subsetI.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite (subset_trans sBG nBG) sub_gen.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfQuoEnorm",
            "line_nb": 1186,
            "steps": [
                {
                    "command": [
                        "rewrite cfunElock -gen_subG => sHK /setIP[Gx nHx]; rewrite sHK /=.",
                        "VernacExtend",
                        "82d53976234637e3f0907eb36cddf61d028c6306"
                    ]
                },
                {
                    "command": [
                        "rewrite mem_morphim // val_coset_prim //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by case: repr_rcosetP => _ /(subsetP sHK)/cfkerMl->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfQuoE",
            "line_nb": 1191,
            "steps": [
                {
                    "command": [
                        "by case/andP=> _ nBG sBK Gx; rewrite cfQuoEnorm // (setIidPl _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfQuo1",
            "line_nb": 1194,
            "steps": [
                {
                    "command": [
                        "by rewrite cfunElock repr_coset1 group1 if_same.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfQuoEout",
            "line_nb": 1197,
            "steps": [
                {
                    "command": [
                        "move/negPf=> not_kerB; apply/cfunP=> x; rewrite cfunE cfun1E mulr_natr.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by rewrite cfunElock not_kerB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfQuo_cfun1",
            "line_nb": 1201,
            "steps": [
                {
                    "command": [
                        "apply/cfun_inP=> Hx G_Hx; rewrite cfunElock !cfun1E G_Hx cfker_cfun1 -gen_subG.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "have [x nHx Gx ->] := morphimP G_Hx.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "case: subsetP=> [sHG | _]; last by rewrite group1.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite val_coset_prim //; case: repr_rcosetP => y /sHG/groupM->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfModK",
            "line_nb": 1207,
            "steps": [
                {
                    "command": [
                        "move=> nsBG phi; apply/cfun_inP=> _ /morphimP[x Nx Gx ->] //.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by rewrite cfQuoE ?cfker_mod ?cfModE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfQuoK",
            "line_nb": 1211,
            "steps": [
                {
                    "command": [
                        "by move=> nsHG phi sHK; apply/cfun_inP=> x Gx; rewrite cfModE ?cfQuoE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfMod_eq1",
            "line_nb": 1214,
            "steps": [
                {
                    "command": [
                        "by move/cfModK/can_eq <-; rewrite rmorph1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfQuo_eq1",
            "line_nb": 1217,
            "steps": [
                {
                    "command": [
                        "by move=> nsBG kerH; rewrite -cfMod_eq1 // cfQuoK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfResMod",
            "line_nb": 1228,
            "steps": [
                {
                    "command": [
                        "by move=> sHG /andP[_]; apply: cfResMorph.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "quotient_cfker_mod",
            "line_nb": 1231,
            "steps": [
                {
                    "command": [
                        "by case/andP=> _ /cfker_morph_im <-.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_cfker_mod",
            "line_nb": 1234,
            "steps": [
                {
                    "command": [
                        "by move=> nsKG nKA; rewrite -(quotientSGK nKA) ?quotient_cfker_mod ?cfker_mod.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfker_quo",
            "line_nb": 1237,
            "steps": [
                {
                    "command": [
                        "move=> nsHG /cfQuoK {2}<- //; have [sHG nHG] := andP nsHG.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "by rewrite cfker_morph 1?quotientGI // cosetpreK (setIidPr _) ?cfker_sub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfQuoEker",
            "line_nb": 1241,
            "steps": [
                {
                    "command": [
                        "by move/cfQuoE->; rewrite ?cfker_normal.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfaithful_quo",
            "line_nb": 1244,
            "steps": [
                {
                    "command": [
                        "by rewrite cfaithfulE cfker_quo ?cfker_normal ?trivg_quotient.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfResQuo",
            "line_nb": 1247,
            "steps": [
                {
                    "command": [
                        "move=> kerK sKH sHG; apply/cfun_inP=> xb Hxb; rewrite cfResE ?quotientS //.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "have{xb Hxb} [x nKx Hx ->] := morphimP Hxb.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite !cfQuoEnorm ?cfResE ?sub_cfker_Res // inE ?Hx ?(subsetP sHG).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfQuoInorm",
            "line_nb": 1252,
            "steps": [
                {
                    "command": [
                        "move=> kerK; rewrite -cfResQuo ?subsetIl ?quotientInorm ?cfRes_id //.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite subsetI normG (subset_trans kerK) ?cfker_sub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cforder_mod",
            "line_nb": 1256,
            "steps": [
                {
                    "command": [
                        "by move/cfModK/can_inj/cforder_inj_rmorph->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cforder_quo",
            "line_nb": 1259,
            "steps": [
                {
                    "command": [
                        "by move=> nsHG kerHphi; rewrite -cforder_mod ?cfQuoK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfunM_onI",
            "line_nb": 1265,
            "steps": [
                {
                    "command": [
                        "rewrite !cfun_onE => Aphi Bpsi; apply/subsetP=> x; rewrite !inE cfunE mulf_eq0.",
                        "VernacExtend",
                        "01f04d3f5bba3b876eb4ec7b1c8f26d2e2cced77"
                    ]
                },
                {
                    "command": [
                        "by case/norP=> /(subsetP Aphi)-> /(subsetP Bpsi).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfunM_on",
            "line_nb": 1269,
            "steps": [
                {
                    "command": [
                        "by move=> Aphi Bpsi; rewrite -[A]setIid cfunM_onI.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfSdprodKey",
            "line_nb": 1276,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfSdprod1",
            "line_nb": 1285,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock /= cfMorph1 cfIsom1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nsKG",
            "line_nb": 1288,
            "steps": [
                {
                    "command": [
                        "by have [] := sdprod_context defG.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sHG",
            "line_nb": 1291,
            "steps": [
                {
                    "command": [
                        "by have [] := sdprod_context defG.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sKG",
            "line_nb": 1294,
            "steps": [
                {
                    "command": [
                        "by have [] := andP nsKG.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfker_sdprod",
            "line_nb": 1297,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock_with cfker_mod.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfSdprodEr",
            "line_nb": 1300,
            "steps": [
                {
                    "command": [
                        "by move=> y Hy; rewrite unlock cfModE ?cfIsomE ?(subsetP sHG).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfSdprodE",
            "line_nb": 1303,
            "steps": [
                {
                    "command": [
                        "by move=> x y Kx Hy; rewrite /= cfkerMl ?(subsetP (cfker_sdprod _)) ?cfSdprodEr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfSdprodK",
            "line_nb": 1306,
            "steps": [
                {
                    "command": [
                        "by move=> phi; apply/cfun_inP=> x Hx; rewrite cfResE ?cfSdprodEr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfSdprod_inj",
            "line_nb": 1309,
            "steps": [
                {
                    "command": [
                        "exact: can_inj cfSdprodK.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfSdprod_eq1",
            "line_nb": 1312,
            "steps": [
                {
                    "command": [
                        "exact: rmorph_eq1 cfSdprod_inj.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfRes_sdprodK",
            "line_nb": 1315,
            "steps": [
                {
                    "command": [
                        "move=> kerK; apply/cfun_inP=> _ /(mem_sdprod defG)[x [y [Kx Hy -> _]]].",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by rewrite cfSdprodE // cfResE // cfkerMl ?(subsetP kerK).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cforder_sdprod",
            "line_nb": 1325,
            "steps": [
                {
                    "command": [
                        "by apply: cforder_inj_rmorph cfSdprod_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "reindex_dprod",
            "line_nb": 1332,
            "steps": [
                {
                    "command": [
                        "have /mulgmP/misomP[fM /isomP[injf im_f]] := KxH.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite pair_big_dep -im_f morphimEdom big_imset; last exact/injmP.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_big => [][x y]; rewrite ?inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfDprodl1",
            "line_nb": 1348,
            "steps": [
                {
                    "command": [
                        "exact: cfSdprod1.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfDprodr1",
            "line_nb": 1351,
            "steps": [
                {
                    "command": [
                        "exact: cfSdprod1.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfDprod1",
            "line_nb": 1354,
            "steps": [
                {
                    "command": [
                        "by rewrite cfunE /= !cfSdprod1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfDprodl_eq1",
            "line_nb": 1357,
            "steps": [
                {
                    "command": [
                        "exact: cfSdprod_eq1.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfDprodr_eq1",
            "line_nb": 1360,
            "steps": [
                {
                    "command": [
                        "exact: cfSdprod_eq1.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfDprod_cfun1r",
            "line_nb": 1363,
            "steps": [
                {
                    "command": [
                        "by rewrite /cfDprod rmorph1 mulr1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfDprod_cfun1l",
            "line_nb": 1366,
            "steps": [
                {
                    "command": [
                        "by rewrite /cfDprod rmorph1 mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfDprod_cfun1",
            "line_nb": 1369,
            "steps": [
                {
                    "command": [
                        "by rewrite cfDprod_cfun1l rmorph1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfDprod_split",
            "line_nb": 1372,
            "steps": [
                {
                    "command": [
                        "by rewrite cfDprod_cfun1l cfDprod_cfun1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nsHG",
            "line_nb": 1378,
            "steps": [
                {
                    "command": [
                        "by have [] := dprod_normal2 KxH.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cKH",
            "line_nb": 1381,
            "steps": [
                {
                    "command": [
                        "by have [] := dprodP KxH.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfDprodlK",
            "line_nb": 1386,
            "steps": [
                {
                    "command": [
                        "exact: cfSdprodK.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfDprodrK",
            "line_nb": 1389,
            "steps": [
                {
                    "command": [
                        "exact: cfSdprodK.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfker_dprodl",
            "line_nb": 1392,
            "steps": [
                {
                    "command": [
                        "by rewrite dprodC -sdprod_cfker dprodEsd // centsC (centsS (cfker_sub _)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfker_dprodr",
            "line_nb": 1395,
            "steps": [
                {
                    "command": [
                        "by rewrite -sdprod_cfker dprodEsd // (subset_trans (cfker_sub _)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfDprodEl",
            "line_nb": 1398,
            "steps": [
                {
                    "command": [
                        "by move=> k h Kk Hh /=; rewrite -(centsP cKH) // cfSdprodE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfDprodEr",
            "line_nb": 1401,
            "steps": [
                {
                    "command": [
                        "exact: cfSdprodE.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfDprodE",
            "line_nb": 1404,
            "steps": [
                {
                    "command": [
                        "by move=> k h Kk Hh /=; rewrite cfunE cfDprodEl ?cfDprodEr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfDprod_Resl",
            "line_nb": 1407,
            "steps": [
                {
                    "command": [
                        "by apply/cfun_inP=> x Kx; rewrite cfunE cfResE // -{1}[x]mulg1 mulrC cfDprodE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfDprod_Resr",
            "line_nb": 1410,
            "steps": [
                {
                    "command": [
                        "by apply/cfun_inP=> y Hy; rewrite cfunE cfResE // -{1}[y]mul1g cfDprodE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfDprodKl",
            "line_nb": 1413,
            "steps": [
                {
                    "command": [
                        "by move=> psi1 phi; rewrite cfDprod_Resl psi1 scale1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfDprodKr",
            "line_nb": 1416,
            "steps": [
                {
                    "command": [
                        "by move=> phi1 psi; rewrite cfDprod_Resr phi1 scale1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfker_dprod",
            "line_nb": 1419,
            "steps": [
                {
                    "command": [
                        "rewrite -genM_join gen_subG; apply/subsetP=> _ /mulsgP[x y kKx kHy ->] /=.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "have [[Kx _] [Hy _]] := (setIdP kKx, setIdP kHy).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have Gxy: (x * y)%g \\in G by rewrite -(dprodW KxH) mem_mulg.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite inE Gxy; apply/forallP=> g.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "have [Gg | G'g] := boolP (g \\in G); last by rewrite !cfun0 1?groupMl.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have{g Gg} [k [h [Kk Hh -> _]]] := mem_dprod KxH Gg.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite mulgA -(mulgA x) (centsP cKH y) // mulgA -mulgA !cfDprodE ?groupM //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite !cfkerMl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdot_dprod",
            "line_nb": 1429,
            "steps": [
                {
                    "command": [
                        "rewrite !cfdotE mulrCA -mulrA mulrCA mulrA -invfM -natrM (dprod_card KxH).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "congr (_ * _); rewrite big_distrl reindex_dprod /=; apply: eq_bigr => k Kk.",
                        "VernacExtend",
                        "775b998c29d59f89d853e0c4a629d4a3388abe3b"
                    ]
                },
                {
                    "command": [
                        "rewrite big_distrr; apply: eq_bigr => h Hh /=.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulrCA -mulrA -rmorphM mulrCA mulrA !cfDprodE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfDprodl_iso",
            "line_nb": 1435,
            "steps": [
                {
                    "command": [
                        "by move=> phi1 phi2; rewrite -!cfDprod_cfun1r cfdot_dprod cfnorm1 mulr1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfDprodr_iso",
            "line_nb": 1438,
            "steps": [
                {
                    "command": [
                        "by move=> psi1 psi2; rewrite -!cfDprod_cfun1l cfdot_dprod cfnorm1 mul1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cforder_dprodl",
            "line_nb": 1441,
            "steps": [
                {
                    "command": [
                        "exact: cforder_sdprod.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cforder_dprodr",
            "line_nb": 1444,
            "steps": [
                {
                    "command": [
                        "exact: cforder_sdprod.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfDprodC",
            "line_nb": 1448,
            "steps": [
                {
                    "command": [
                        "rewrite /cfDprod mulrC.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by congr (_ * _); congr (cfSdprod _ _); apply: eq_irrelevance.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sAG",
            "line_nb": 1456,
            "steps": [
                {
                    "command": [
                        "by move=> Pi; rewrite -(bigdprodWY defG) (bigD1 i) ?joing_subl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfBigdprodi_subproof",
            "line_nb": 1459,
            "steps": [
                {
                    "command": [
                        "have:= defG; rewrite fun_if big_mkcond (bigD1 i) // -big_mkcondl /= => defGi.",
                        "VernacExtend",
                        "8431fc4d2460f7908baa11892c1b26797a3f17b8"
                    ]
                },
                {
                    "command": [
                        "by have [[_ Gi' _ defGi']] := dprodP defGi; rewrite (bigdprodWY defGi') -defGi'.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfBigdprodi1",
            "line_nb": 1468,
            "steps": [
                {
                    "command": [
                        "by rewrite cfDprodl1 cfRes1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfBigdprodi_eq1",
            "line_nb": 1471,
            "steps": [
                {
                    "command": [
                        "by move=> Pi; rewrite cfSdprod_eq1 Pi cfRes_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfBigdprodiK",
            "line_nb": 1474,
            "steps": [
                {
                    "command": [
                        "move=> Pi phi; have:= cfDprodlK (cfBigdprodi_subproof i) ('Res phi).",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "by rewrite -[cfDprodl _ _]/(cfBigdprodi phi) Pi cfRes_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfBigdprodi_inj",
            "line_nb": 1478,
            "steps": [
                {
                    "command": [
                        "by move/cfBigdprodiK; apply: can_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfBigdprodEi",
            "line_nb": 1481,
            "steps": [
                {
                    "command": [
                        "set r := enum P => Pi /forall_inP; have r_i: i \\in r by rewrite mem_enum.",
                        "VernacExtend",
                        "d2991b7607b6316c9d43d28c85f87ca601299ca6"
                    ]
                },
                {
                    "command": [
                        "have:= bigdprodWcp defG; rewrite -big_andE -!(big_filter _ P) filter_index_enum.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "rewrite -/r big_all => defGr /allP Ax.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite (perm_bigcprod defGr Ax (perm_to_rem r_i)) big_cons cfDprodEl ?Pi //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by rewrite cfRes_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by rewrite Ax.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite big_seq group_prod // => j; rewrite mem_rem_uniq ?enum_uniq //.",
                        "VernacExtend",
                        "82d53976234637e3f0907eb36cddf61d028c6306"
                    ]
                },
                {
                    "command": [
                        "case/andP=> i'j /= r_j; apply/mem_gen/bigcupP; exists j; last exact: Ax.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -[P j](mem_enum P) r_j.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfBigdprodi_iso",
            "line_nb": 1494,
            "steps": [
                {
                    "command": [
                        "by move=> Pi phi psi; rewrite cfDprodl_iso Pi !cfRes_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfBigdprodE",
            "line_nb": 1498,
            "steps": [
                {
                    "command": [
                        "move=> Ax; rewrite prod_cfunE; last by rewrite -(bigdprodW defG) mem_prodg.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_bigr => i Pi; rewrite cfBigdprodEi.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfBigdprod1",
            "line_nb": 1502,
            "steps": [
                {
                    "command": [
                        "by rewrite prod_cfunE //; apply/eq_bigr=> i _; apply: cfBigdprodi1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfBigdprodK",
            "line_nb": 1505,
            "steps": [
                {
                    "command": [
                        "move=> nzPhi Pi; split.",
                        "VernacExtend",
                        "22de1c5faad21de60fd48f882c8175e01347018a"
                    ]
                },
                {
                    "command": [
                        "rewrite mulf_neq0 ?invr_eq0 // (contraNneq _ nzPhi) // => phi_i0.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite cfBigdprod1 (bigD1 i) //= phi_i0 mul0r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/cfun_inP=> x Aix; rewrite cfunE cfResE ?sAG // mulrAC.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "have {1}->: x = (\\prod_(j | P j) (if j == i then x else 1))%g.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -big_mkcondr (big_pred1 i) ?eqxx // => j /=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by apply: andb_idl => /eqP->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite cfBigdprodE => [|j _]; last by case: eqP => // ->.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply: canLR (mulfK nzPhi) _; rewrite cfBigdprod1 !(bigD1 i Pi) /= eqxx.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulrCA !mulrA; congr (_ * _); apply: eq_bigr => j /andP[_ /negPf->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdot_bigdprod",
            "line_nb": 1517,
            "steps": [
                {
                    "command": [
                        "apply: canLR (mulKf (neq0CG G)) _; rewrite -(bigdprod_card defG).",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "rewrite (big_morph _ (@natrM _) (erefl _)) -big_split /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite (eq_bigr _ (fun i _ => mulVKf (neq0CG _) _)) (big_distr_big_dep 1%g) /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "set F := pfamily _ _ _; pose h (f : {ffun I -> gT}) := (\\prod_(i | P i) f i)%g.",
                        "VernacExtend",
                        "dda58a04ca4da9adf6d016079f462c4d6ff69ca8"
                    ]
                },
                {
                    "command": [
                        "pose is_hK x f := forall f1, (f1 \\in F) && (h f1 == x) = (f == f1).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have /fin_all_exists[h1 Dh1] x: exists f, x \\in G -> is_hK x f.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "case Gx: (x \\in G); last by exists [ffun _ => x].",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have [f [Af fK Uf]] := mem_bigdprod defG Gx.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "exists [ffun i => if P i then f i else 1%g] => _ f1.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply/andP/eqP=> [[/pfamilyP[Pf1 Af1] /eqP Dx] | <-].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by apply/ffunP=> i; rewrite ffunE; case: ifPn => [/Uf-> | /(supportP Pf1)].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "split; last by rewrite fK; apply/eqP/eq_bigr=> i Pi; rewrite ffunE Pi.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/familyP=> i; rewrite ffunE !unfold_in; case: ifP => //= /Af.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite (reindex_onto h h1) /= => [|x /Dh1/(_ (h1 x))]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite eqxx => /andP[_ /eqP].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/eq_big => [f | f /andP[/Dh1<- /andP[/pfamilyP[_ Af] _]]]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !cfBigdprodE // rmorph_prod -big_split /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/idP/idP=> [/andP[/Dh1<-] | Ff]; first by rewrite eqxx andbT.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have /pfamilyP[_ Af] := Ff; suffices Ghf: h f \\in G by rewrite -Dh1 ?Ghf ?Ff /=.",
                        "VernacExtend",
                        "32f3051101718011671dd27b552d72a725766d33"
                    ]
                },
                {
                    "command": [
                        "by apply/group_prod=> i Pi; rewrite (subsetP (sAG Pi)) ?Af.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfIsom_iso",
            "line_nb": 1554,
            "steps": [
                {
                    "command": [
                        "move=> isoG phi psi; rewrite unlock cfMorph_iso //; set G1 := _ @* R.",
                        "VernacExtend",
                        "08b421e4a82ee4b06ce888937579fc5af7d251b4"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(isom_im (isom_sym isoG)) -/G1 in phi psi *; rewrite !cfRes_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfMod_iso",
            "line_nb": 1558,
            "steps": [
                {
                    "command": [
                        "by case/andP=> _; apply: cfMorph_iso.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfQuo_iso",
            "line_nb": 1561,
            "steps": [
                {
                    "command": [
                        "by move=> nsHG phi psi sHkphi sHkpsi; rewrite -(cfMod_iso nsHG) !cfQuoK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfnorm_quo",
            "line_nb": 1564,
            "steps": [
                {
                    "command": [
                        "by move=> nsHG sHker; apply: cfQuo_iso.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfSdprod_iso",
            "line_nb": 1567,
            "steps": [
                {
                    "command": [
                        "move=> phi psi; have [/andP[_ nKG] _ _ _ _] := sdprod_context defG.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "by rewrite [cfSdprod _]locked_withE cfMorph_iso ?cfIsom_iso.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfInd_is_linear",
            "line_nb": 1588,
            "steps": [
                {
                    "command": [
                        "move=> c phi psi; apply/cfunP=> x; rewrite !cfunElock; case: ifP => _.",
                        "VernacExtend",
                        "7900ff5f460c85794ce7b5348b38d8262a58a2c2"
                    ]
                },
                {
                    "command": [
                        "rewrite mulrCA -mulrDr [c * _]mulr_sumr -big_split /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by congr (_ * _); apply: eq_bigr => y _; rewrite !cfunE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite mulrnAr -mulrnDl !(mulrCA c) -!mulrDr [c * _]mulr_sumr -big_split /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by congr (_ * (_ * _) *+ _); apply: eq_bigr => y; rewrite !cfunE mulrA mulrDl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfIndE",
            "line_nb": 1600,
            "steps": [
                {
                    "command": [
                        "by rewrite cfunElock !genGid => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfIndEout",
            "line_nb": 1605,
            "steps": [
                {
                    "command": [
                        "move/negPf=> not_sHG; apply/cfunP=> x; rewrite cfunE cfuniE ?normal1 // inE.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulr_natr cfunElock !genGid not_sHG.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfIndEsdprod",
            "line_nb": 1609,
            "steps": [
                {
                    "command": [
                        "move=> defG; have [/andP[sKG _] _ mulKH nKH _] := sdprod_context defG.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "rewrite cfIndE //; apply: canLR (mulKf (neq0CG _)) _; rewrite -mulKH mulr_sumr.",
                        "VernacExtend",
                        "fe8f197e86415fc7f0a74eda9d312128b9473eda"
                    ]
                },
                {
                    "command": [
                        "rewrite (set_partition_big _ (rcosets_partition_mul H K)) ?big_imset /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply: eq_bigr => y Hy; rewrite rcosetE norm_rlcoset ?(subsetP nKH) //.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "rewrite -lcosetE mulr_natl big_imset /=; last exact: in2W (mulgI _).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -sumr_const; apply: eq_bigr => z Kz; rewrite conjgM cfunJ.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [{nKH}nKH /isomP[injf _]] := sdprod_isom defG.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply: can_in_inj (fun Ky => invm injf (coset K (repr Ky))) _ => y Hy.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite rcosetE -val_coset ?(subsetP nKH) // coset_reprK invmE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfInd_on",
            "line_nb": 1620,
            "steps": [
                {
                    "command": [
                        "move=> sHG Af; apply/cfun_onP=> g AG'g; rewrite cfIndE ?big1 ?mulr0 // => h Gh.",
                        "VernacExtend",
                        "b7d55d5cc9e609b184db748f6780e12224901e48"
                    ]
                },
                {
                    "command": [
                        "apply: (cfun_on0 Af); apply: contra AG'g => Agh.",
                        "VernacExtend",
                        "8d9dae45eeb3a769b8a865cef8ae476451f63802"
                    ]
                },
                {
                    "command": [
                        "by rewrite -[g](conjgK h) memJ_class_support // groupV.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfInd_id",
            "line_nb": 1625,
            "steps": [
                {
                    "command": [
                        "apply/cfun_inP=> x Hx; rewrite cfIndE // (eq_bigr _ (cfunJ phi x)) sumr_const.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite -[phi x *+ _]mulr_natl mulKf ?neq0CG.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfnorm_Ind_cfun1",
            "line_nb": 1643,
            "steps": [
                {
                    "command": [
                        "move=> nsHG; rewrite cfInd_cfun1 // cfnormZ normr_nat cfdot_cfuni // setIid.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite expr2 {2}natf_indexg ?normal_sub // !mulrA divfK ?mulfK ?neq0CG.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfIndInd",
            "line_nb": 1647,
            "steps": [
                {
                    "command": [
                        "move=> sKG sHK; apply/cfun_inP=> x Gx; rewrite !cfIndE ?(subset_trans sHK) //.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "apply: canLR (mulKf (neq0CG K)) _; rewrite mulr_sumr mulr_natl.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "transitivity (\\sum_(y in G) \\sum_(z in K) #|H|%:R^-1 * phi ((x ^ y) ^ z)).",
                        "VernacExtend",
                        "48c94b33217960658574357ad8e51a2cfe20d1a0"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_bigr => y Gy; rewrite cfIndE // -mulr_sumr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "symmetry; rewrite exchange_big /= -sumr_const; apply: eq_bigr => z Kz.",
                        "VernacExtend",
                        "b531cdfdd16edb48e06651aa0838bf384aa38229"
                    ]
                },
                {
                    "command": [
                        "rewrite (reindex_inj (mulIg z)).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_big => [y | y _]; rewrite ?conjgM // groupMr // (subsetP sKG).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfdot_Res_l",
            "line_nb": 1673,
            "steps": [
                {
                    "command": [
                        "by rewrite cfdotC cfdot_Res_r -cfdotC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfIndM",
            "line_nb": 1676,
            "steps": [
                {
                    "command": [
                        "move=> HsG; apply/cfun_inP=> x Gx; rewrite !cfIndE // !cfunE !cfIndE // -mulrA.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "congr (_ * _); rewrite mulr_suml; apply: eq_bigr=> i iG; rewrite !cfunE.",
                        "VernacExtend",
                        "fa1706e48d527f9e8bdea6a60dbdfc6eefc4fda5"
                    ]
                },
                {
                    "command": [
                        "case: (boolP (x^i \\in H))=> xJi; last by rewrite cfun0gen ?mul0r ?genGid.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !cfResE //; congr (_*_); rewrite cfunJgen ?genGid.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfIndMorph",
            "line_nb": 1689,
            "steps": [
                {
                    "command": [
                        "move=> sKH sHG sGD; have [sHD inD] := (subset_trans sHG sGD, subsetP sGD).",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "apply/cfun_inP=> /= x Gx; have [Dx sKG] := (inD x Gx, subset_trans sKH sHG).",
                        "VernacExtend",
                        "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
                    ]
                },
                {
                    "command": [
                        "rewrite cfMorphE ?cfIndE ?morphimS // (partition_big_imset f) -morphimEsub //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite card_morphim (setIidPr sHD) natf_indexg // invfM invrK -mulrA.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "congr (_ * _); rewrite mulr_sumr; apply: eq_bigr => _ /morphimP[y Dy Gy ->].",
                        "VernacExtend",
                        "775b998c29d59f89d853e0c4a629d4a3388abe3b"
                    ]
                },
                {
                    "command": [
                        "rewrite -(card_rcoset _ y) mulr_natl -sumr_const.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply: eq_big => [z | z /andP[Gz /eqP <-]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "have [Gz | G'z] := boolP (z \\in G).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite (sameP eqP (rcoset_kerP _ _ _)) ?inD.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by case: rcosetP G'z => // [[t Kt ->]]; rewrite groupM // (subsetP sKG).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [Dz Dxz] := (inD z Gz, inD (x ^ z) (groupJ Gx Gz)); rewrite -morphJ //.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "have [Hxz | notHxz] := boolP (x ^ z \\in H); first by rewrite cfMorphE.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !cfun0 // -sub1set -morphim_set1 // morphimSGK ?sub1set.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfResIsom",
            "line_nb": 1707,
            "steps": [
                {
                    "command": [
                        "have [[injg defR] [injh defS]] := (isomP isoG, isomP isoH).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite !morphimEdom in defS defR; apply/cfun_inP=> s.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "rewrite -{1}defS => /imsetP[x Hx ->] {s}; have Gx := subsetP sHG x Hx.",
                        "VernacExtend",
                        "d2991b7607b6316c9d43d28c85f87ca601299ca6"
                    ]
                },
                {
                    "command": [
                        "rewrite {1}eq_hg ?(cfResE, cfIsomE) // -defS -?eq_hg ?mem_imset // -defR.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (eq_in_imset eq_hg) imsetS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfIndIsom",
            "line_nb": 1714,
            "steps": [
                {
                    "command": [
                        "have [[injg defR] [_ defS]] := (isomP isoG, isomP isoH).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite morphimEdom (eq_in_imset eq_hg) -morphimEsub // in defS.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply/cfun_inP=> s; rewrite -{1}defR => /morphimP[x _ Gx ->]{s}.",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "rewrite cfIsomE ?cfIndE // -defR -{1}defS ?morphimS ?card_injm // morphimEdom.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "congr (_ * _); rewrite big_imset //=; last exact/injmP.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply: eq_bigr => y Gy; rewrite -morphJ //.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "have [Hxy | H'xy] := boolP (x ^ y \\in H); first by rewrite -eq_hg ?cfIsomE.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !cfun0 -?defS // -sub1set -morphim_set1 ?injmSK ?sub1set // groupJ.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfAutZ_nat",
            "line_nb": 1730,
            "steps": [
                {
                    "command": [
                        "exact: raddfZnat.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfAutZ_Cnat",
            "line_nb": 1733,
            "steps": [
                {
                    "command": [
                        "exact: raddfZ_Cnat.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfAutZ_Cint",
            "line_nb": 1736,
            "steps": [
                {
                    "command": [
                        "exact: raddfZ_Cint.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfAutK",
            "line_nb": 1739,
            "steps": [
                {
                    "command": [
                        "by move=> phi; apply/cfunP=> x; rewrite !cfunE /= algC_autK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfAutVK",
            "line_nb": 1742,
            "steps": [
                {
                    "command": [
                        "by move=> phi; apply/cfunP=> x; rewrite !cfunE /= algC_invautK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfAut_inj",
            "line_nb": 1745,
            "steps": [
                {
                    "command": [
                        "exact: can_inj cfAutK.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfAut_eq1",
            "line_nb": 1748,
            "steps": [
                {
                    "command": [
                        "by rewrite rmorph_eq1 //; apply: cfAut_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "support_cfAut",
            "line_nb": 1751,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite !inE cfunE fmorph_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_cfAut_free",
            "line_nb": 1754,
            "steps": [
                {
                    "command": [
                        "set Su := map _ S => sSuS freeS; have uniqS := free_uniq freeS.",
                        "VernacExtend",
                        "d2991b7607b6316c9d43d28c85f87ca601299ca6"
                    ]
                },
                {
                    "command": [
                        "have uniqSu: uniq Su by rewrite (map_inj_uniq cfAut_inj).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have{sSuS} sSuS: {subset Su <= S} by move=> _ /mapP[phi Sphi ->]; apply: sSuS.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [|eqSuS _] := leq_size_perm uniqSu sSuS; first by rewrite size_map.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite (perm_free (uniq_perm_eq uniqSu uniqS eqSuS)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfAut_on",
            "line_nb": 1761,
            "steps": [
                {
                    "command": [
                        "by rewrite !cfun_onE (eq_subset (support_cfAut phi)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfker_aut",
            "line_nb": 1764,
            "steps": [
                {
                    "command": [
                        "apply/setP=> x; rewrite !inE; apply: andb_id2l => Gx.",
                        "VernacExtend",
                        "da24caf87c1bbbad0538b8be68905ec456c78aa7"
                    ]
                },
                {
                    "command": [
                        "by apply/forallP/forallP=> Kx y; have:= Kx y; rewrite !cfunE (inj_eq (fmorph_inj u)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfAut_cfuni",
            "line_nb": 1768,
            "steps": [
                {
                    "command": [
                        "by apply/cfunP=> x; rewrite !cfunElock rmorph_nat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cforder_aut",
            "line_nb": 1771,
            "steps": [
                {
                    "command": [
                        "exact: cforder_inj_rmorph cfAut_inj.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfAutRes",
            "line_nb": 1774,
            "steps": [
                {
                    "command": [
                        "by apply/cfunP=> x; rewrite !cfunElock rmorphMn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfAutMorph",
            "line_nb": 1777,
            "steps": [
                {
                    "command": [
                        "by apply/cfun_inP=> x Hx; rewrite !cfunElock Hx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfAutIsom",
            "line_nb": 1780,
            "steps": [
                {
                    "command": [
                        "apply/cfun_inP=> y; have [_ {1}<-] := isomP isoGR => /morphimP[x _ Gx ->{y}].",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "by rewrite !(cfunE, cfIsomE).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfAutQuo",
            "line_nb": 1784,
            "steps": [
                {
                    "command": [
                        "by apply/cfunP=> Hx; rewrite !cfunElock cfker_aut rmorphMn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfAutMod",
            "line_nb": 1787,
            "steps": [
                {
                    "command": [
                        "by apply/cfunP=> x; rewrite !cfunElock rmorphMn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfAutInd",
            "line_nb": 1790,
            "steps": [
                {
                    "command": [
                        "have [sHG | not_sHG] := boolP (H \\subset G).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/cfunP=> x; rewrite !(cfunE, cfIndE) // rmorphM fmorphV rmorph_nat.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by congr (_ * _); rewrite rmorph_sum; apply: eq_bigr => y; rewrite !cfunE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite !cfIndEout // linearZ /= cfAut_cfuni rmorphM rmorph_nat.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -cfdot_cfAut ?rmorph1 // => _ /imageP[x Hx ->].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite cfun1E Hx !rmorph1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfAutDprodl",
            "line_nb": 1799,
            "steps": [
                {
                    "command": [
                        "apply/cfun_inP=> _ /(mem_dprod KxH)[x [y [Kx Hy -> _]]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !(cfunE, cfDprodEl).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfAutDprodr",
            "line_nb": 1803,
            "steps": [
                {
                    "command": [
                        "apply/cfun_inP=> _ /(mem_dprod KxH)[x [y [Kx Hy -> _]]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !(cfunE, cfDprodEr).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cfAutDprod",
            "line_nb": 1807,
            "steps": [
                {
                    "command": [
                        "by rewrite rmorphM /= cfAutDprodl cfAutDprodr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}