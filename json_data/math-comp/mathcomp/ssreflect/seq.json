{
    "filename": "mathcomp/ssreflect/seq.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrfun ssrbool eqtype ssrnat.",
            "VernacRequire",
            "3a154cf9b360cffd6978f181ff671465f6f3b1d7"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Delimit Scope seq_scope with SEQ.",
            "VernacDelimiters",
            "b799cef116df71e2272064e4ee8456db310eb3a5"
        ],
        [
            "Open Scope seq_scope.",
            "VernacOpenCloseScope",
            "edee662f52bbb4baabd9f9032eab56a730eaa9d0"
        ],
        [
            "Notation seq := list.",
            "VernacSyntacticDefinition",
            "8dd08b32858dbf4785c18a0c84b4d67b9566b173"
        ],
        [
            "Prenex Implicits cons.",
            "VernacExtend",
            "295d629a3c5b350e5c6580c257d9fb9d119c503b"
        ],
        [
            "Notation Cons T := (@cons T) (only parsing).",
            "VernacSyntacticDefinition",
            "131e1925e5466b556df54ad1f6bd931a9d74fc6d"
        ],
        [
            "Notation Nil T := (@nil T) (only parsing).",
            "VernacSyntacticDefinition",
            "3eafd54f3299b21d0b88943e643268b6ccb3738d"
        ],
        [
            "Bind Scope seq_scope with list.",
            "VernacBindScope",
            "75ac6c28f8027f3c84d2ff9775a7df5d5e4bbf92"
        ],
        [
            "Arguments cons _%type _ _%SEQ.",
            "VernacArguments",
            "1fbe9d935a4522155cdc536ec85cce0327c2e9ee"
        ],
        [
            "Infix \"::\" := cons : seq_scope.",
            "VernacInfix",
            "6711a1d89ffabacbeb777542ed5a3efd2c30063e"
        ],
        [
            "Notation \"[ :: ]\" := nil (at level 0, format \"[ :: ]\") : seq_scope.",
            "VernacNotation",
            "345e3285fae013b35df691bdeea7a39af0bb6750"
        ],
        [
            "Notation \"[ :: x1 ]\" := (x1 :: [::]) (at level 0, format \"[ :: x1 ]\") : seq_scope.",
            "VernacNotation",
            "aefeab5a673ee75cc21bdf75e71f3249a7d0a1b8"
        ],
        [
            "Notation \"[ :: x & s ]\" := (x :: s) (at level 0, only parsing) : seq_scope.",
            "VernacNotation",
            "a15a4e7fd95df1aed9e181f3dd0efac74817b1ee"
        ],
        [
            "Notation \"[ :: x1 , x2 , .. , xn & s ]\" := (x1 :: x2 :: .. (xn :: s) ..) (at level 0, format \"'[hv' [ :: '[' x1 , '/' x2 , '/' .. , '/' xn ']' '/ ' & s ] ']'\" ) : seq_scope.",
            "VernacNotation",
            "3237753a193478b084c36df6e4e8ee88a131601d"
        ],
        [
            "Notation \"[ :: x1 ; x2 ; .. ; xn ]\" := (x1 :: x2 :: .. [:: xn] ..) (at level 0, format \"[ :: '[' x1 ; '/' x2 ; '/' .. ; '/' xn ']' ]\" ) : seq_scope.",
            "VernacNotation",
            "936ee0110399d942709d02741004b38d3f154438"
        ],
        [
            "Section Sequences.",
            "VernacBeginSection",
            "17470e3935fcd6a1eac88319fa3de4de3a4cab5b"
        ],
        [
            "Variable n0 : nat.",
            "VernacAssumption",
            "6be9361751c81d82bfe0038c636c0146a25090c8"
        ],
        [
            "Variable T : Type.",
            "VernacAssumption",
            "a15b17e37c4241158d544882375356c273dc93f2"
        ],
        [
            "Variable x0 : T.",
            "VernacAssumption",
            "05880c3f53142d28092acbab5ebe840e2309ba4d"
        ],
        [
            "Implicit Types x y z : T.",
            "VernacReserve",
            "4551975a1e0f19c6e2a6f6aed52241382e61c546"
        ],
        [
            "Implicit Types m n : nat.",
            "VernacReserve",
            "0ecfe15bad90ec7331aed44f013a28555260d9c8"
        ],
        [
            "Implicit Type s : seq T.",
            "VernacReserve",
            "d07b3ddcd5fd915117241a5590804fc28c5a4d12"
        ],
        [
            "Fixpoint size s := if s is _ :: s' then (size s').+1 else 0.",
            "VernacFixpoint",
            "d3a0dcbfd09446da7009a39f5a3e78ccaba38561"
        ],
        [
            "Lemma size0nil s : size s = 0 -> s = [::].",
            "VernacStartTheoremProof",
            "b2ad578019a316b1907c8caab4ceee0fec00b37c"
        ],
        [
            "by case: s.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition nilp s := size s == 0.",
            "VernacDefinition",
            "cb2469457da6a864341c2354e7a32b4cd8427289"
        ],
        [
            "Lemma nilP s : reflect (s = [::]) (nilp s).",
            "VernacStartTheoremProof",
            "8a38a9026f53a3d96c54dcd3e19719ff3ad2d99c"
        ],
        [
            "by case: s => [|x s]; constructor.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ohead s := if s is x :: _ then Some x else None.",
            "VernacDefinition",
            "10c4a978d78ebfbce0893816728175e2b713ae5a"
        ],
        [
            "Definition head s := if s is x :: _ then x else x0.",
            "VernacDefinition",
            "53733a59f8c9c7e68af1f27fcf0535ecb2144606"
        ],
        [
            "Definition behead s := if s is _ :: s' then s' else [::].",
            "VernacDefinition",
            "7591771ca7c99ec73e41db9f6b75d3d98e831401"
        ],
        [
            "Lemma size_behead s : size (behead s) = (size s).-1.",
            "VernacStartTheoremProof",
            "ef8dd535f03eea6d14891ac0f5628982e0174291"
        ],
        [
            "by case: s.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ncons n x := iter n (cons x).",
            "VernacDefinition",
            "e860ea7150897b32996c100f3104e43ca5c75000"
        ],
        [
            "Definition nseq n x := ncons n x [::].",
            "VernacDefinition",
            "5bab06fc4d317ad6ecbc375afa0cdeed1b74dffc"
        ],
        [
            "Lemma size_ncons n x s : size (ncons n x s) = n + size s.",
            "VernacStartTheoremProof",
            "c0327250108385ea22eb526fa8349e94e442a977"
        ],
        [
            "by elim: n => //= n ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_nseq n x : size (nseq n x) = n.",
            "VernacStartTheoremProof",
            "4f34dc835a6592d8485c70d9f189db9fe722a55a"
        ],
        [
            "by rewrite size_ncons addn0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint seqn_type n := if n is n'.+1 then T -> seqn_type n' else seq T.",
            "VernacFixpoint",
            "45f23373729432197bb213b40718ec90b45250b0"
        ],
        [
            "Fixpoint seqn_rec f n : seqn_type n := if n is n'.+1 return seqn_type n then fun x => seqn_rec (fun s => f (x :: s)) n' else f [::].",
            "VernacFixpoint",
            "7226be9767ddd22695f4e7752b5987e07986608a"
        ],
        [
            "Definition seqn := seqn_rec id.",
            "VernacDefinition",
            "fa4ee11655815bff98e6b4c5cab640aa1b6ee4dd"
        ],
        [
            "Fixpoint cat s1 s2 := if s1 is x :: s1' then x :: s1' ++ s2 else s2 where \"s1 ++ s2\" := (cat s1 s2) : seq_scope.",
            "VernacFixpoint",
            "c635cf4ab0b43cd545ee00eedcf20489013140b8"
        ],
        [
            "Lemma cat0s s : [::] ++ s = s.",
            "VernacStartTheoremProof",
            "2f4df3ddba07ad54798a3ea9f90c52b557f95e62"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cat1s x s : [:: x] ++ s = x :: s.",
            "VernacStartTheoremProof",
            "d0f7b6f795d0a8c2ba6e0195b4b2767daaeac397"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cat_cons x s1 s2 : (x :: s1) ++ s2 = x :: s1 ++ s2.",
            "VernacStartTheoremProof",
            "ee98bd1ec30b7fb1c1505eb7f52e902fd10ca63d"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cat_nseq n x s : nseq n x ++ s = ncons n x s.",
            "VernacStartTheoremProof",
            "b3e0c51b42584bfd3ae138e4bb760536ddb569a6"
        ],
        [
            "by elim: n => //= n ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cats0 s : s ++ [::] = s.",
            "VernacStartTheoremProof",
            "ec8c2be79592561f2b97de24fb7f354042b0df08"
        ],
        [
            "by elim: s => //= x s ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma catA s1 s2 s3 : s1 ++ s2 ++ s3 = (s1 ++ s2) ++ s3.",
            "VernacStartTheoremProof",
            "ecf04079d378a9522c91a4bff792dcc8c2b501b9"
        ],
        [
            "by elim: s1 => //= x s1 ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_cat s1 s2 : size (s1 ++ s2) = size s1 + size s2.",
            "VernacStartTheoremProof",
            "5885de1263d2dc3c7d4903611da3c1c01f3d63d2"
        ],
        [
            "by elim: s1 => //= x s1 ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint rcons s z := if s is x :: s' then x :: rcons s' z else [:: z].",
            "VernacFixpoint",
            "1e2c941ded80adc1e3010aacef019e90fe0e0d25"
        ],
        [
            "Lemma rcons_cons x s z : rcons (x :: s) z = x :: rcons s z.",
            "VernacStartTheoremProof",
            "df9d450e721028e3d99c0c753482b484fcaaa712"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cats1 s z : s ++ [:: z] = rcons s z.",
            "VernacStartTheoremProof",
            "b0dccce6c450199a137c9697eebaba6f259f6b52"
        ],
        [
            "by elim: s => //= x s ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint last x s := if s is x' :: s' then last x' s' else x.",
            "VernacFixpoint",
            "6c46f09039c5ed0139c86080cca05c8a6c41706a"
        ],
        [
            "Fixpoint belast x s := if s is x' :: s' then x :: (belast x' s') else [::].",
            "VernacFixpoint",
            "6bb77bc125c45b67df3ff6063b20cd7075cb3a5a"
        ],
        [
            "Lemma lastI x s : x :: s = rcons (belast x s) (last x s).",
            "VernacStartTheoremProof",
            "e0743e6b052a9bc7fbd9628680d006c4454a5571"
        ],
        [
            "by elim: s x => [|y s IHs] x //=; rewrite IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma last_cons x y s : last x (y :: s) = last y s.",
            "VernacStartTheoremProof",
            "cef40ec5a8a0ce4dd7967155f08c9836866b1852"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_rcons s x : size (rcons s x) = (size s).+1.",
            "VernacStartTheoremProof",
            "55abd2e18bd83c08605342525da6e87a50fdd478"
        ],
        [
            "by rewrite -cats1 size_cat addnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_belast x s : size (belast x s) = size s.",
            "VernacStartTheoremProof",
            "cff16bd98bc14542e88a98b3d372adfa7f7a4901"
        ],
        [
            "by elim: s x => [|y s IHs] x //=; rewrite IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma last_cat x s1 s2 : last x (s1 ++ s2) = last (last x s1) s2.",
            "VernacStartTheoremProof",
            "fafbe535bf99a8decd99600800f16f8f20bff664"
        ],
        [
            "by elim: s1 x => [|y s1 IHs] x //=; rewrite IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma last_rcons x s z : last x (rcons s z) = z.",
            "VernacStartTheoremProof",
            "fb9a898cccbfb818ab4054ebad7645c6ce7bc97a"
        ],
        [
            "by rewrite -cats1 last_cat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma belast_cat x s1 s2 : belast x (s1 ++ s2) = belast x s1 ++ belast (last x s1) s2.",
            "VernacStartTheoremProof",
            "15762040f4b4e77091b409ac346cb31f3a031d9c"
        ],
        [
            "by elim: s1 x => [|y s1 IHs] x //=; rewrite IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma belast_rcons x s z : belast x (rcons s z) = x :: s.",
            "VernacStartTheoremProof",
            "67fc865480a3de3d7e579bb061f1ca81e88ab045"
        ],
        [
            "by rewrite lastI -!cats1 belast_cat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cat_rcons x s1 s2 : rcons s1 x ++ s2 = s1 ++ x :: s2.",
            "VernacStartTheoremProof",
            "4a46b9fec49f7a8ced0c040b3a1a34e99d20d614"
        ],
        [
            "by rewrite -cats1 -catA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rcons_cat x s1 s2 : rcons (s1 ++ s2) x = s1 ++ rcons s2 x.",
            "VernacStartTheoremProof",
            "eadbeee00546a33e65a7423ee590ad81851f87d7"
        ],
        [
            "by rewrite -!cats1 catA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variant last_spec : seq T -> Type := | LastNil : last_spec [::] | LastRcons s x : last_spec (rcons s x).",
            "VernacInductive",
            "74ca8716b9c4a5a6227bae10ed785aefdc65f1a5"
        ],
        [
            "Lemma lastP s : last_spec s.",
            "VernacStartTheoremProof",
            "20da2b407793f87d035debbc03c99af595979cf5"
        ],
        [
            "case: s => [|x s]; [left | rewrite lastI; right].",
            "VernacExtend",
            "df502ce9f27d15070fcbf8467ebad2f6ea5217b3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma last_ind P : P [::] -> (forall s x, P s -> P (rcons s x)) -> forall s, P s.",
            "VernacStartTheoremProof",
            "35cd77927f4d9ee3f7de1546175120ea6f884c78"
        ],
        [
            "move=> Hnil Hlast s; rewrite -(cat0s s).",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "elim: s [::] Hnil => [|x s2 IHs] s1 Hs1; first by rewrite cats0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -cat_rcons; auto.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint nth s n {struct n} := if s is x :: s' then if n is n'.+1 then @nth s' n' else x else x0.",
            "VernacFixpoint",
            "b58d3023ad481208d39afdb05ffaccc20aa6b2b1"
        ],
        [
            "Fixpoint set_nth s n y {struct n} := if s is x :: s' then if n is n'.+1 then x :: @set_nth s' n' y else y :: s' else ncons n x0 [:: y].",
            "VernacFixpoint",
            "114a2ee8fb2bff15e44c4649c7563972b595d210"
        ],
        [
            "Lemma nth0 s : nth s 0 = head s.",
            "VernacStartTheoremProof",
            "a29f16b861e93b154de084758ba289ac27cd93b4"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_default s n : size s <= n -> nth s n = x0.",
            "VernacStartTheoremProof",
            "05b1b2ef901cda8aed063b35fe3980ccdfe16259"
        ],
        [
            "by elim: s n => [|x s IHs] [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_nil n : nth [::] n = x0.",
            "VernacStartTheoremProof",
            "eeead4fd4f0dea8e4096f6bdd24765ac24955468"
        ],
        [
            "by case: n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma last_nth x s : last x s = nth (x :: s) (size s).",
            "VernacStartTheoremProof",
            "17830b66d80497906966e0b9c66a267ef88f0e4e"
        ],
        [
            "by elim: s x => [|y s IHs] x /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_last s : nth s (size s).-1 = last x0 s.",
            "VernacStartTheoremProof",
            "f944bf1430359ae68ceeb37abdae224bbc678e2e"
        ],
        [
            "by case: s => //= x s; rewrite last_nth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_behead s n : nth (behead s) n = nth s n.+1.",
            "VernacStartTheoremProof",
            "25303ae34a0ffdcf1264e44cfb339dbe52fe01b3"
        ],
        [
            "by case: s n => [|x s] [|n].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_cat s1 s2 n : nth (s1 ++ s2) n = if n < size s1 then nth s1 n else nth s2 (n - size s1).",
            "VernacStartTheoremProof",
            "d605d611a815df69dcd1cb9eabacc2214452e977"
        ],
        [
            "by elim: s1 n => [|x s1 IHs] [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_rcons s x n : nth (rcons s x) n = if n < size s then nth s n else if n == size s then x else x0.",
            "VernacStartTheoremProof",
            "5b05c9e6ca6024f5e68b2ae356322e53ab904e90"
        ],
        [
            "by elim: s n => [|y s IHs] [] //=; apply: nth_nil.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_ncons m x s n : nth (ncons m x s) n = if n < m then x else nth s (n - m).",
            "VernacStartTheoremProof",
            "d197f9a418bca626ddc274d1bfd26a54e26b6d0d"
        ],
        [
            "by elim: m n => [|m IHm] [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_nseq m x n : nth (nseq m x) n = (if n < m then x else x0).",
            "VernacStartTheoremProof",
            "50bdade9286fccfe97d3b96ff4ffb0dd4cfb72fc"
        ],
        [
            "by elim: m n => [|m IHm] [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_from_nth s1 s2 : size s1 = size s2 -> (forall i, i < size s1 -> nth s1 i = nth s2 i) -> s1 = s2.",
            "VernacStartTheoremProof",
            "8dedaa17006d20380d179331ab85e11877d0c738"
        ],
        [
            "elim: s1 s2 => [|x1 s1 IHs1] [|x2 s2] //= [eq_sz] eq_s12.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite [x1](eq_s12 0) // (IHs1 s2) // => i; apply: (eq_s12 i.+1).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_set_nth s n y : size (set_nth s n y) = maxn n.+1 (size s).",
            "VernacStartTheoremProof",
            "a49ed773feff830b4609e7be56ecf9c3079eee1c"
        ],
        [
            "elim: s n => [|x s IHs] [|n] //=.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite size_ncons addn1 maxn0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite maxnE subn1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite IHs -add1n addn_maxr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set_nth_nil n y : set_nth [::] n y = ncons n x0 [:: y].",
            "VernacStartTheoremProof",
            "72956e7ff980ac7d71642596b0d0de7997eae4a0"
        ],
        [
            "by case: n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_set_nth s n y : nth (set_nth s n y) =1 [eta nth s with n |-> y].",
            "VernacStartTheoremProof",
            "f45b0bef106bdb663c6b4c6b2d930d6dc26ec221"
        ],
        [
            "elim: s n => [|x s IHs] [|n] [|m] //=; rewrite ?nth_nil ?IHs // nth_ncons eqSS.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "case: ltngtP => // [lt_nm | ->]; last by rewrite subnn.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite nth_default // subn_gt0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set_set_nth s n1 y1 n2 y2 (s2 := set_nth s n2 y2) : set_nth (set_nth s n1 y1) n2 y2 = if n1 == n2 then s2 else set_nth s2 n1 y1.",
            "VernacStartTheoremProof",
            "b9e215042d520571b409f21ee478d6b4155e9e46"
        ],
        [
            "have [-> | ne_n12] := altP eqP.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: eq_from_nth => [|i _]; first by rewrite !size_set_nth maxnA maxnn.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by do 2!rewrite !nth_set_nth /=; case: eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: eq_from_nth => [|i _]; first by rewrite !size_set_nth maxnCA.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "do 2!rewrite !nth_set_nth /=; case: eqP => // ->.",
            "VernacExtend",
            "00ba158d222255c76e4931f459cd922d35170a11"
        ],
        [
            "by rewrite eq_sym -if_neg ne_n12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section SeqFind.",
            "VernacBeginSection",
            "25a9c634c90fae3cc0d7fb3c09756b9bd2e74ef7"
        ],
        [
            "Variable a : pred T.",
            "VernacAssumption",
            "bf9400e5dd72108c5b9fea4789914b12961b30c3"
        ],
        [
            "Fixpoint find s := if s is x :: s' then if a x then 0 else (find s').+1 else 0.",
            "VernacFixpoint",
            "8b84091eed7b3634198116d9a2795340f15a05c2"
        ],
        [
            "Fixpoint filter s := if s is x :: s' then if a x then x :: filter s' else filter s' else [::].",
            "VernacFixpoint",
            "7fd2bfe668162df165980719f61fbe6c03283f92"
        ],
        [
            "Fixpoint count s := if s is x :: s' then a x + count s' else 0.",
            "VernacFixpoint",
            "79e293466ad7b8bf36e232273718a17d33650399"
        ],
        [
            "Fixpoint has s := if s is x :: s' then a x || has s' else false.",
            "VernacFixpoint",
            "f64d6d59ad36b2ea32378834e0e74b94155980f8"
        ],
        [
            "Fixpoint all s := if s is x :: s' then a x && all s' else true.",
            "VernacFixpoint",
            "d0ce9b48e47a1655ae9300f4a3ac68b5fef513fd"
        ],
        [
            "Lemma size_filter s : size (filter s) = count s.",
            "VernacStartTheoremProof",
            "822768266a2fc2f26e48dbaa21a51150210953fd"
        ],
        [
            "by elim: s => //= x s <-; case (a x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma has_count s : has s = (0 < count s).",
            "VernacStartTheoremProof",
            "b8355b59e37ea29f32ba3e95f6731ef5c38f4cd0"
        ],
        [
            "by elim: s => //= x s ->; case (a x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma count_size s : count s <= size s.",
            "VernacStartTheoremProof",
            "4d1c741470cea910046353abe0b57e3424b9751f"
        ],
        [
            "by elim: s => //= x s; case: (a x); last apply: leqW.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma all_count s : all s = (count s == size s).",
            "VernacStartTheoremProof",
            "f01e19823a03758338f64b2daa0cf9b81fb50e23"
        ],
        [
            "elim: s => //= x s; case: (a x) => _ //=.",
            "VernacExtend",
            "df63f96bedbb0673aecb42521d90011325a86c94"
        ],
        [
            "by rewrite add0n eqn_leq andbC ltnNge count_size.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma filter_all s : all (filter s).",
            "VernacStartTheoremProof",
            "300626075602ecb4cb12dddbbc8f19f50367fdf1"
        ],
        [
            "by elim: s => //= x s IHs; case: ifP => //= ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma all_filterP s : reflect (filter s = s) (all s).",
            "VernacStartTheoremProof",
            "e1b107bf8cb25609a2c02e67324ab77b5ba3ce80"
        ],
        [
            "apply: (iffP idP) => [| <-]; last exact: filter_all.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by elim: s => //= x s IHs /andP[-> Hs]; rewrite IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma filter_id s : filter (filter s) = filter s.",
            "VernacStartTheoremProof",
            "06bb61db32bb67de3a2b0b6ac83548620ce2ab14"
        ],
        [
            "by apply/all_filterP; apply: filter_all.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma has_find s : has s = (find s < size s).",
            "VernacStartTheoremProof",
            "19b35874bcbeb28a3c2ad0ddeb29d5e3f3dcaaea"
        ],
        [
            "by elim: s => //= x s IHs; case (a x); rewrite ?leqnn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma find_size s : find s <= size s.",
            "VernacStartTheoremProof",
            "60e8a8c2fda8c6973e4337b2c770d01e5dc1c5c8"
        ],
        [
            "by elim: s => //= x s IHs; case (a x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma find_cat s1 s2 : find (s1 ++ s2) = if has s1 then find s1 else size s1 + find s2.",
            "VernacStartTheoremProof",
            "e0823e555a800d9cdb5b7bf0df9469a75da9f6bd"
        ],
        [
            "by elim: s1 => //= x s1 IHs; case: (a x) => //; rewrite IHs (fun_if succn).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma has_nil : has [::] = false.",
            "VernacStartTheoremProof",
            "92fe3d95d9537c4da2f3635b612f7d04a121f9c4"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma has_seq1 x : has [:: x] = a x.",
            "VernacStartTheoremProof",
            "fe454d9e11ec984a2754a6d0b3fe6523ac61b192"
        ],
        [
            "exact: orbF.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma has_nseq n x : has (nseq n x) = (0 < n) && a x.",
            "VernacStartTheoremProof",
            "98390ed162294bf9bcda8338c8a5da24f653877f"
        ],
        [
            "by elim: n => //= n ->; apply: andKb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma has_seqb (b : bool) x : has (nseq b x) = b && a x.",
            "VernacStartTheoremProof",
            "f45bacecb6be2bb57a35e9ed219bd49d569a08de"
        ],
        [
            "by rewrite has_nseq lt0b.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma all_nil : all [::] = true.",
            "VernacStartTheoremProof",
            "b0c978ba1afaf2b401275ac38902b5b1a960aad4"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma all_seq1 x : all [:: x] = a x.",
            "VernacStartTheoremProof",
            "2eadd65808770ee1c5cb6c3769662b4f9c02ffe1"
        ],
        [
            "exact: andbT.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma all_nseq n x : all (nseq n x) = (n == 0) || a x.",
            "VernacStartTheoremProof",
            "1139dc150b16577a166f9becffc6bdb501e110d2"
        ],
        [
            "by elim: n => //= n ->; apply: orKb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma all_nseqb (b : bool) x : all (nseq b x) = b ==> a x.",
            "VernacStartTheoremProof",
            "46a4e7b7396ade6640c9a6b824b391fe525df16d"
        ],
        [
            "by rewrite all_nseq eqb0 implybE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma find_nseq n x : find (nseq n x) = ~~ a x * n.",
            "VernacStartTheoremProof",
            "94b77b42a22659434d9fc3b2918a1145554c2e5f"
        ],
        [
            "by elim: n => //= n ->; case: (a x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_find s : has s -> a (nth s (find s)).",
            "VernacStartTheoremProof",
            "8d9500c000a58f313ffb51243f5dd90bde224456"
        ],
        [
            "by elim: s => //= x s IHs; case Hx: (a x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma before_find s i : i < find s -> a (nth s i) = false.",
            "VernacStartTheoremProof",
            "fff45c081e94a377cb0c0e7fdcaefe55e406ecef"
        ],
        [
            "by elim: s i => //= x s IHs; case Hx: (a x) => [|] // [|i] //; apply: (IHs i).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma filter_cat s1 s2 : filter (s1 ++ s2) = filter s1 ++ filter s2.",
            "VernacStartTheoremProof",
            "e6da5d85d398a5b1e0aed84cccaf652be7b88bf6"
        ],
        [
            "by elim: s1 => //= x s1 ->; case (a x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma filter_rcons s x : filter (rcons s x) = if a x then rcons (filter s) x else filter s.",
            "VernacStartTheoremProof",
            "50e7fa4843f2df233485795c3a519cf44ec25ffe"
        ],
        [
            "by rewrite -!cats1 filter_cat /=; case (a x); rewrite /= ?cats0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma count_cat s1 s2 : count (s1 ++ s2) = count s1 + count s2.",
            "VernacStartTheoremProof",
            "41ccc2ea759bc76b050b9aadfe9a36808edfdf37"
        ],
        [
            "by rewrite -!size_filter filter_cat size_cat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma has_cat s1 s2 : has (s1 ++ s2) = has s1 || has s2.",
            "VernacStartTheoremProof",
            "c08805dd5c51914eade1a8a206d1df4acddf1c85"
        ],
        [
            "by elim: s1 => [|x s1 IHs] //=; rewrite IHs orbA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma has_rcons s x : has (rcons s x) = a x || has s.",
            "VernacStartTheoremProof",
            "128bb52f8ca6dbac9e741abd7352743961e80d21"
        ],
        [
            "by rewrite -cats1 has_cat has_seq1 orbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma all_cat s1 s2 : all (s1 ++ s2) = all s1 && all s2.",
            "VernacStartTheoremProof",
            "2bf7b750e8d5057dbd68301f1fd2646da0aa5428"
        ],
        [
            "by elim: s1 => [|x s1 IHs] //=; rewrite IHs andbA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma all_rcons s x : all (rcons s x) = a x && all s.",
            "VernacStartTheoremProof",
            "05e766a3b6164e1107dfb349cf54c782db5ddf5f"
        ],
        [
            "by rewrite -cats1 all_cat all_seq1 andbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SeqFind.",
            "VernacEndSegment",
            "72a96de465000fa8c03fddb20587ca4ea0540ccb"
        ],
        [
            "Lemma eq_find a1 a2 : a1 =1 a2 -> find a1 =1 find a2.",
            "VernacStartTheoremProof",
            "ef5fdee736c62fc0135ca4b7b88faf53773b83c8"
        ],
        [
            "by move=> Ea; elim=> //= x s IHs; rewrite Ea IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_filter a1 a2 : a1 =1 a2 -> filter a1 =1 filter a2.",
            "VernacStartTheoremProof",
            "356032f0272c2d97f629b7f60416a8f1d35e0cbf"
        ],
        [
            "by move=> Ea; elim=> //= x s IHs; rewrite Ea IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_count a1 a2 : a1 =1 a2 -> count a1 =1 count a2.",
            "VernacStartTheoremProof",
            "9b22f528105741f54bdd89e9470a99323b21be11"
        ],
        [
            "by move=> Ea s; rewrite -!size_filter (eq_filter Ea).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_has a1 a2 : a1 =1 a2 -> has a1 =1 has a2.",
            "VernacStartTheoremProof",
            "d0057423f31acf48198a6a78508647b6757566b3"
        ],
        [
            "by move=> Ea s; rewrite !has_count (eq_count Ea).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_all a1 a2 : a1 =1 a2 -> all a1 =1 all a2.",
            "VernacStartTheoremProof",
            "7d9b1ad0c3af6bf9d81bd480d42b16b5c25533dc"
        ],
        [
            "by move=> Ea s; rewrite !all_count (eq_count Ea).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section SubPred.",
            "VernacBeginSection",
            "788905b0944ec5c35e78fcc25a1396569a4f0c00"
        ],
        [
            "Variable (a1 a2 : pred T).",
            "VernacAssumption",
            "2f75e398ae42b5935f07e7a238a136f678306d55"
        ],
        [
            "Hypothesis s12 : subpred a1 a2.",
            "VernacAssumption",
            "6f22b73ec62c6b68b511010cf0600c197f9b8574"
        ],
        [
            "Lemma sub_find s : find a2 s <= find a1 s.",
            "VernacStartTheoremProof",
            "249ff4106c44b144065acddc1d6d76731b990408"
        ],
        [
            "by elim: s => //= x s IHs; case: ifP => // /(contraFF (@s12 x))->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_has s : has a1 s -> has a2 s.",
            "VernacStartTheoremProof",
            "dbe598ec31cdf90688339fa29ffba110d184c36c"
        ],
        [
            "by rewrite !has_find; apply: leq_ltn_trans (sub_find s).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_count s : count a1 s <= count a2 s.",
            "VernacStartTheoremProof",
            "e59e4db45bc2e905a79f7a6e8e35adbb403a560b"
        ],
        [
            "by elim: s => //= x s; apply: leq_add; case a1x: (a1 x); rewrite // s12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_all s : all a1 s -> all a2 s.",
            "VernacStartTheoremProof",
            "9180a65302450cd81eab51295df323656fff127f"
        ],
        [
            "by rewrite !all_count !eqn_leq !count_size => /leq_trans-> //; apply: sub_count.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SubPred.",
            "VernacEndSegment",
            "8764d141ace88bf8808db2442c2a983ad7b1dca3"
        ],
        [
            "Lemma filter_pred0 s : filter pred0 s = [::].",
            "VernacStartTheoremProof",
            "748fef8df5140c1fe5fa056258a0375e14675436"
        ],
        [
            "by elim: s.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma filter_predT s : filter predT s = s.",
            "VernacStartTheoremProof",
            "8a8b858ec97cfd8cc942addca49a4db8ae22caa2"
        ],
        [
            "by elim: s => //= x s ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma filter_predI a1 a2 s : filter (predI a1 a2) s = filter a1 (filter a2 s).",
            "VernacStartTheoremProof",
            "8d4549b5671c41d7c7d61ecca75411db08b9966a"
        ],
        [
            "elim: s => //= x s IHs; rewrite andbC IHs.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by case: (a2 x) => //=; case (a1 x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma count_pred0 s : count pred0 s = 0.",
            "VernacStartTheoremProof",
            "e7bf9288a897157327c908ca40c9d2e4d0c9d807"
        ],
        [
            "by rewrite -size_filter filter_pred0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma count_predT s : count predT s = size s.",
            "VernacStartTheoremProof",
            "1925023b48423c7cab6a40a04099e49058f2fea8"
        ],
        [
            "by rewrite -size_filter filter_predT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma count_predUI a1 a2 s : count (predU a1 a2) s + count (predI a1 a2) s = count a1 s + count a2 s.",
            "VernacStartTheoremProof",
            "dddf698db831eced0ca8a626470556d04f932fb4"
        ],
        [
            "elim: s => //= x s IHs; rewrite /= addnCA -addnA IHs addnA addnC.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by rewrite -!addnA; do 2 nat_congr; case (a1 x); case (a2 x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma count_predC a s : count a s + count (predC a) s = size s.",
            "VernacStartTheoremProof",
            "0a37110ce5682b77910c19fae0eff66ce6462cc6"
        ],
        [
            "by elim: s => //= x s IHs; rewrite addnCA -addnA IHs addnA addn_negb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma count_filter a1 a2 s : count a1 (filter a2 s) = count (predI a1 a2) s.",
            "VernacStartTheoremProof",
            "3db4dc763e54b815da2c5396b8c2c8a4624988fb"
        ],
        [
            "by rewrite -!size_filter filter_predI.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma has_pred0 s : has pred0 s = false.",
            "VernacStartTheoremProof",
            "744629ee7955ce701abd23d73343cc2034f1d7f5"
        ],
        [
            "by rewrite has_count count_pred0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma has_predT s : has predT s = (0 < size s).",
            "VernacStartTheoremProof",
            "e4b02d31fa204c7f639778a0af5d60dc0eba03bb"
        ],
        [
            "by rewrite has_count count_predT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma has_predC a s : has (predC a) s = ~~ all a s.",
            "VernacStartTheoremProof",
            "853671e5eed5030e9886dd4edb1415d263960ed2"
        ],
        [
            "by elim: s => //= x s ->; case (a x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma has_predU a1 a2 s : has (predU a1 a2) s = has a1 s || has a2 s.",
            "VernacStartTheoremProof",
            "9562605d9df8201355b18a36d52bbd655104ebe5"
        ],
        [
            "by elim: s => //= x s ->; rewrite -!orbA; do !bool_congr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma all_pred0 s : all pred0 s = (size s == 0).",
            "VernacStartTheoremProof",
            "f7b9b083ad57e653ae8bc2ccbc349fd384aba9dc"
        ],
        [
            "by rewrite all_count count_pred0 eq_sym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma all_predT s : all predT s.",
            "VernacStartTheoremProof",
            "c744f899d12e1deda56073df793c8a90cd48fc89"
        ],
        [
            "by rewrite all_count count_predT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma all_predC a s : all (predC a) s = ~~ has a s.",
            "VernacStartTheoremProof",
            "37cb74325a9c6290cd20ecb42ee466141af41b51"
        ],
        [
            "by elim: s => //= x s ->; case (a x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma all_predI a1 a2 s : all (predI a1 a2) s = all a1 s && all a2 s.",
            "VernacStartTheoremProof",
            "b513c25186b70b5d49c3434d6eebbaa133e2285c"
        ],
        [
            "apply: (can_inj negbK); rewrite negb_and -!has_predC -has_predU.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by apply: eq_has => x; rewrite /= negb_and.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint drop n s {struct s} := match s, n with | _ :: s', n'.+1 => drop n' s' | _, _ => s end.",
            "VernacFixpoint",
            "4e48ee5c00dee75cb5b488c58559a91fc52b2e81"
        ],
        [
            "Lemma drop_behead : drop n0 =1 iter n0 behead.",
            "VernacStartTheoremProof",
            "a39114bfa408587ed386cc2dc38a4ffe50615efc"
        ],
        [
            "by elim: n0 => [|n IHn] [|x s] //; rewrite iterSr -IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma drop0 s : drop 0 s = s.",
            "VernacStartTheoremProof",
            "eb5b5cb5a5953957098fa4951bee660b369902ac"
        ],
        [
            "by case: s.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma drop1 : drop 1 =1 behead.",
            "VernacStartTheoremProof",
            "bd9ca156db7af98650bba3dadc0e91e6d64436fc"
        ],
        [
            "by case=> [|x [|y s]].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma drop_oversize n s : size s <= n -> drop n s = [::].",
            "VernacStartTheoremProof",
            "e4ed3d7b8d2e2b90ee5c90de18d148b266fb06f4"
        ],
        [
            "by elim: s n => [|x s IHs] [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma drop_size s : drop (size s) s = [::].",
            "VernacStartTheoremProof",
            "c7951aca484165e7ddce086cf84836b22854d7a8"
        ],
        [
            "by rewrite drop_oversize // leqnn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma drop_cons x s : drop n0 (x :: s) = if n0 is n.+1 then drop n s else x :: s.",
            "VernacStartTheoremProof",
            "5d64ca9d1993835a0d5b64b470d43360b3ec81ac"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_drop s : size (drop n0 s) = size s - n0.",
            "VernacStartTheoremProof",
            "a033114bb956d8d94417080fcc2b0d1cd34b7243"
        ],
        [
            "by elim: s n0 => [|x s IHs] [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma drop_cat s1 s2 : drop n0 (s1 ++ s2) = if n0 < size s1 then drop n0 s1 ++ s2 else drop (n0 - size s1) s2.",
            "VernacStartTheoremProof",
            "cca833290c1408a687342a43d423fd6b6b257ea0"
        ],
        [
            "by elim: s1 n0 => [|x s1 IHs] [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma drop_size_cat n s1 s2 : size s1 = n -> drop n (s1 ++ s2) = s2.",
            "VernacStartTheoremProof",
            "e138abb5b54b0508408208b71cbc22e297a09754"
        ],
        [
            "by move <-; elim: s1 => //=; rewrite drop0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nconsK n x : cancel (ncons n x) (drop n).",
            "VernacStartTheoremProof",
            "4da6bcbbd5054c13a082c7de3b42c0672cb1e252"
        ],
        [
            "by elim: n => // -[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma drop_drop s n1 n2 : drop n1 (drop n2 s) = drop (n1 + n2) s.",
            "VernacStartTheoremProof",
            "71788e584c992f6dbc28ada131dab18c95dc77fe"
        ],
        [
            "by elim: n2 s => [s|n2 IHn1 [|x s]]; rewrite ?drop0 ?addn0 ?addnS /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint take n s {struct s} := match s, n with | x :: s', n'.+1 => x :: take n' s' | _, _ => [::] end.",
            "VernacFixpoint",
            "2700303f46dd7f242c1e00379592892435dafda7"
        ],
        [
            "Lemma take0 s : take 0 s = [::].",
            "VernacStartTheoremProof",
            "24b590b24e7bc9dd7a0b5445c05283611fd7e805"
        ],
        [
            "by case: s.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma take_oversize n s : size s <= n -> take n s = s.",
            "VernacStartTheoremProof",
            "2dec13c72df69c1239f80d97f907090610e680d8"
        ],
        [
            "by elim: s n => [|x s IHs] [|n] //= /IHs->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma take_size s : take (size s) s = s.",
            "VernacStartTheoremProof",
            "1c67a03933a213058304fb26530c8a3b0734031e"
        ],
        [
            "by rewrite take_oversize // leqnn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma take_cons x s : take n0 (x :: s) = if n0 is n.+1 then x :: (take n s) else [::].",
            "VernacStartTheoremProof",
            "d83552327396769b1a9c5667cad0e27d5accac0a"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma drop_rcons s : n0 <= size s -> forall x, drop n0 (rcons s x) = rcons (drop n0 s) x.",
            "VernacStartTheoremProof",
            "929d2343bd981c993ed8e5261043742fad37a78f"
        ],
        [
            "by elim: s n0 => [|y s IHs] [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cat_take_drop s : take n0 s ++ drop n0 s = s.",
            "VernacStartTheoremProof",
            "678fa613c43a03e0762dd398ccd89e683ae0f820"
        ],
        [
            "by elim: s n0 => [|x s IHs] [|n] //=; rewrite IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_takel s : n0 <= size s -> size (take n0 s) = n0.",
            "VernacStartTheoremProof",
            "8a3e954d2dff963a2ca400992dc597850f6939af"
        ],
        [
            "by move/subKn; rewrite -size_drop -[in size s](cat_take_drop s) size_cat addnK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_take s : size (take n0 s) = if n0 < size s then n0 else size s.",
            "VernacStartTheoremProof",
            "987244f859d5e4a1ab9c128401bc99c1b9ed2d82"
        ],
        [
            "have [le_sn | lt_ns] := leqP (size s) n0; first by rewrite take_oversize.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite size_takel // ltnW.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma take_cat s1 s2 : take n0 (s1 ++ s2) = if n0 < size s1 then take n0 s1 else s1 ++ take (n0 - size s1) s2.",
            "VernacStartTheoremProof",
            "620f138010d48dbd264a994ebbdd793b89ddfed8"
        ],
        [
            "elim: s1 n0 => [|x s1 IHs] [|n] //=.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite ltnS subSS -(fun_if (cons x)) -IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma take_size_cat n s1 s2 : size s1 = n -> take n (s1 ++ s2) = s1.",
            "VernacStartTheoremProof",
            "a4a6fda4adc914cd20c1a70a40d56da812935e7d"
        ],
        [
            "by move <-; elim: s1 => [|x s1 IHs]; rewrite ?take0 //= IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma takel_cat s1 : n0 <= size s1 -> forall s2, take n0 (s1 ++ s2) = take n0 s1.",
            "VernacStartTheoremProof",
            "b8b6f46b60295b19065abab27cdcb996a0fccdc8"
        ],
        [
            "move=> Hn0 s2; rewrite take_cat ltn_neqAle Hn0 andbT.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by case: (n0 =P size s1) => //= ->; rewrite subnn take0 cats0 take_size.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_drop s i : nth (drop n0 s) i = nth s (n0 + i).",
            "VernacStartTheoremProof",
            "21ed8b3a9d5f26a3e29f2f18f37c8665ad066d88"
        ],
        [
            "have [lt_n0_s | le_s_n0] := ltnP n0 (size s).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -{2}[s]cat_take_drop nth_cat size_take lt_n0_s /= addKn.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite ltnNge leq_addr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite !nth_default //; first exact: leq_trans (leq_addr _ _).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite size_drop (eqnP le_s_n0).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_take i : i < n0 -> forall s, nth (take n0 s) i = nth s i.",
            "VernacStartTheoremProof",
            "6750a8e6b363a76cd9529c39da4864a86feb3d55"
        ],
        [
            "move=> lt_i_n0 s; case lt_n0_s: (n0 < size s).",
            "VernacExtend",
            "a01b3d93f426ff68d360351709a5fa5af822af32"
        ],
        [
            "by rewrite -{2}[s]cat_take_drop nth_cat size_take lt_n0_s /= lt_i_n0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -{1}[s]cats0 take_cat lt_n0_s /= cats0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma drop_nth n s : n < size s -> drop n s = nth s n :: drop n.+1 s.",
            "VernacStartTheoremProof",
            "663f5f978b4920aa3796c4db4acf098364034568"
        ],
        [
            "by elim: s n => [|x s IHs] [|n] Hn //=; rewrite ?drop0 1?IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma take_nth n s : n < size s -> take n.+1 s = rcons (take n s) (nth s n).",
            "VernacStartTheoremProof",
            "3a51045d07db9dc4b989e43e8f7c4a0c6f01eb9b"
        ],
        [
            "by elim: s n => [|x s IHs] //= [|n] Hn /=; rewrite ?take0 -?IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition rot n s := drop n s ++ take n s.",
            "VernacDefinition",
            "caac6b6f9b372ec941b80f4e5b6ff4334648dda4"
        ],
        [
            "Lemma rot0 s : rot 0 s = s.",
            "VernacStartTheoremProof",
            "f4b74fee8c6744b73226b65808643320963cb7e2"
        ],
        [
            "by rewrite /rot drop0 take0 cats0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_rot s : size (rot n0 s) = size s.",
            "VernacStartTheoremProof",
            "daafe655961045da8d2ce459bed28e8ce7ecd994"
        ],
        [
            "by rewrite -{2}[s]cat_take_drop /rot !size_cat addnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rot_oversize n s : size s <= n -> rot n s = s.",
            "VernacStartTheoremProof",
            "bd7057e5b14a7c6fcea1e47db8ed137db1709ad3"
        ],
        [
            "by move=> le_s_n; rewrite /rot take_oversize ?drop_oversize.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rot_size s : rot (size s) s = s.",
            "VernacStartTheoremProof",
            "7a95f9881131c212ff4335ba66ee17a839606e00"
        ],
        [
            "exact: rot_oversize.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma has_rot s a : has a (rot n0 s) = has a s.",
            "VernacStartTheoremProof",
            "da5404d1f2dad430a8284f878f5b3e1129bf92b4"
        ],
        [
            "by rewrite has_cat orbC -has_cat cat_take_drop.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rot_size_cat s1 s2 : rot (size s1) (s1 ++ s2) = s2 ++ s1.",
            "VernacStartTheoremProof",
            "9ae5693b848abf40e77888661fba551a8edc3218"
        ],
        [
            "by rewrite /rot take_size_cat ?drop_size_cat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition rotr n s := rot (size s - n) s.",
            "VernacDefinition",
            "adcdefbe547d0e99939039114f18d71498025d30"
        ],
        [
            "Lemma rotK : cancel (rot n0) (rotr n0).",
            "VernacStartTheoremProof",
            "22fdfdd3ce0106c0e1435916229e62862a6f5bc2"
        ],
        [
            "move=> s; rewrite /rotr size_rot -size_drop {2}/rot.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite rot_size_cat cat_take_drop.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rot_inj : injective (rot n0).",
            "VernacStartTheoremProof",
            "f7a5b3d9cccaa89778f3bd49175164027674dfb9"
        ],
        [
            "exact (can_inj rotK).",
            "VernacExtend",
            "4a8620e8c591b59c12332c2a5d196689df77b87f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rot1_cons x s : rot 1 (x :: s) = rcons s x.",
            "VernacStartTheoremProof",
            "0407c4e345b962047f53acdc0dbab7683b91db32"
        ],
        [
            "by rewrite /rot /= take0 drop0 -cats1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint catrev s1 s2 := if s1 is x :: s1' then catrev s1' (x :: s2) else s2.",
            "VernacFixpoint",
            "44db2e0d0df64a421960e18763101d7b62a0e840"
        ],
        [
            "End Sequences.",
            "VernacEndSegment",
            "22496e6a633626e9c4d9e5442100f4a0b36288e5"
        ],
        [
            "Definition rev T (s : seq T) := nosimpl (catrev s [::]).",
            "VernacDefinition",
            "5c2410425fadeb7710d374f61bca18f6a6d15ad5"
        ],
        [
            "Arguments nilP {T s}.",
            "VernacArguments",
            "c301faa9e66689f2f65ae5bff9b2a1e1165a897d"
        ],
        [
            "Arguments all_filterP {T a s}.",
            "VernacArguments",
            "0652f237a106ab1ee16dce6982e8db9c4c704379"
        ],
        [
            "Prenex Implicits size head ohead behead last rcons belast.",
            "VernacExtend",
            "f8ba2a59e911830320f54565ca351b15f8d5f148"
        ],
        [
            "Prenex Implicits cat take drop rev rot rotr.",
            "VernacExtend",
            "a9c87ddc059cb62d4f3cbe5e464c05d9381676cb"
        ],
        [
            "Prenex Implicits find count nth all has filter.",
            "VernacExtend",
            "ec664ec95e4fbc87133851ebb1643d6b6feb2cf2"
        ],
        [
            "Notation count_mem x := (count (pred_of_simpl (pred1 x))).",
            "VernacSyntacticDefinition",
            "5f96f97f6e04fb4a55441a309ece7c587465db73"
        ],
        [
            "Infix \"++\" := cat : seq_scope.",
            "VernacInfix",
            "fd6dec6c61d126a357bbcc77179afd02aff1cc44"
        ],
        [
            "Notation \"[ 'seq' x <- s | C ]\" := (filter (fun x => C%B) s) (at level 0, x at level 99, format \"[ '[hv' 'seq' x <- s '/ ' | C ] ']'\") : seq_scope.",
            "VernacNotation",
            "2fb1050c324259ebe38a6da1da77549f757fee21"
        ],
        [
            "Notation \"[ 'seq' x <- s | C1 & C2 ]\" := [seq x <- s | C1 && C2] (at level 0, x at level 99, format \"[ '[hv' 'seq' x <- s '/ ' | C1 '/ ' & C2 ] ']'\") : seq_scope.",
            "VernacNotation",
            "362c098bdd6aff6971e6beab26a79e06826a8ddc"
        ],
        [
            "Notation \"[ 'seq' x : T <- s | C ]\" := (filter (fun x : T => C%B) s) (at level 0, x at level 99, only parsing).",
            "VernacNotation",
            "8ffcc29f5f7868fac91c26d6ca51559a481dc86f"
        ],
        [
            "Notation \"[ 'seq' x : T <- s | C1 & C2 ]\" := [seq x : T <- s | C1 && C2] (at level 0, x at level 99, only parsing).",
            "VernacNotation",
            "15dbe065efdd9a03c975a14eb0f305869ee226fa"
        ],
        [
            "Lemma seq2_ind T1 T2 (P : seq T1 -> seq T2 -> Type) : P [::] [::] -> (forall x1 x2 s1 s2, P s1 s2 -> P (x1 :: s1) (x2 :: s2)) -> forall s1 s2, size s1 = size s2 -> P s1 s2.",
            "VernacStartTheoremProof",
            "732e9e2569fac8a2dd50b2dfcc911fc527318dc4"
        ],
        [
            "by move=> Pnil Pcons; elim=> [|x s IHs] [] //= x2 s2 [] /IHs/Pcons.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Rev.",
            "VernacBeginSection",
            "5cf258adbb142976c87034e3eb937181c301f804"
        ],
        [
            "Variable T : Type.",
            "VernacAssumption",
            "a15b17e37c4241158d544882375356c273dc93f2"
        ],
        [
            "Implicit Types s t : seq T.",
            "VernacReserve",
            "18a66e1f0178255c86660fac358bba0b56d43a2c"
        ],
        [
            "Lemma catrev_catl s t u : catrev (s ++ t) u = catrev t (catrev s u).",
            "VernacStartTheoremProof",
            "f2994a406a97e72761f81fe3fe78c4fe4fbf87c4"
        ],
        [
            "by elim: s u => /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma catrev_catr s t u : catrev s (t ++ u) = catrev s t ++ u.",
            "VernacStartTheoremProof",
            "63b247d9df14ccfade1b75e177c08b1657195dff"
        ],
        [
            "by elim: s t => //= x s IHs t; rewrite -IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma catrevE s t : catrev s t = rev s ++ t.",
            "VernacStartTheoremProof",
            "843c85ebc56cf72898dc53587c7c1c3010831004"
        ],
        [
            "by rewrite -catrev_catr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rev_cons x s : rev (x :: s) = rcons (rev s) x.",
            "VernacStartTheoremProof",
            "95c7a6de51872317350641472ed51cac2318e0e7"
        ],
        [
            "by rewrite -cats1 -catrevE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_rev s : size (rev s) = size s.",
            "VernacStartTheoremProof",
            "280b278578549b6ab537184bda7ad9990332626b"
        ],
        [
            "by elim: s => // x s IHs; rewrite rev_cons size_rcons IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rev_cat s t : rev (s ++ t) = rev t ++ rev s.",
            "VernacStartTheoremProof",
            "a6b0fabb99027eebf7fa5909221a607fba158676"
        ],
        [
            "by rewrite -catrev_catr -catrev_catl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rev_rcons s x : rev (rcons s x) = x :: rev s.",
            "VernacStartTheoremProof",
            "199e4e6a24b667f42bc35c4489b78cfac76d80a9"
        ],
        [
            "by rewrite -cats1 rev_cat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma revK : involutive (@rev T).",
            "VernacStartTheoremProof",
            "6f57c14e93dca3bdfac8fa0f924bbdeb871bfe43"
        ],
        [
            "by elim=> //= x s IHs; rewrite rev_cons rev_rcons IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_rev x0 n s : n < size s -> nth x0 (rev s) n = nth x0 s (size s - n.+1).",
            "VernacStartTheoremProof",
            "ce8a1c9675d256e78e455366637ae14a8b5f88cd"
        ],
        [
            "elim/last_ind: s => // s x IHs in n *.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "rewrite rev_rcons size_rcons ltnS subSS -cats1 nth_cat /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: n => [|n] lt_n_s; first by rewrite subn0 ltnn subnn.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -{2}(subnK lt_n_s) -addSnnS leq_addr /= -IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma filter_rev a s : filter a (rev s) = rev (filter a s).",
            "VernacStartTheoremProof",
            "d44709fd2fa29cc54849c932f003d26266f68954"
        ],
        [
            "by elim: s => //= x s IH; rewrite fun_if !rev_cons filter_rcons IH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma count_rev a s : count a (rev s) = count a s.",
            "VernacStartTheoremProof",
            "1134cd576afafd6b35a3b08f9eca3f8e1810dbc0"
        ],
        [
            "by rewrite -!size_filter filter_rev size_rev.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma has_rev a s : has a (rev s) = has a s.",
            "VernacStartTheoremProof",
            "bb6b32fbaed69b7ae72ccffbc5c189a8c8a651ca"
        ],
        [
            "by rewrite !has_count count_rev.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma all_rev a s : all a (rev s) = all a s.",
            "VernacStartTheoremProof",
            "d912cba1e1facb38cec7da8c5016ff7e9a585d14"
        ],
        [
            "by rewrite !all_count count_rev size_rev.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma take_rev s n : take n (rev s) = rev (drop (size s - n) s).",
            "VernacStartTheoremProof",
            "f782a87794599d1b1dcff8fe530b9190706fa4fe"
        ],
        [
            "have /orP[le_s_n | le_n_s] := leq_total (size s) n.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite (eqnP le_s_n) drop0 take_oversize ?size_rev.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -[s in LHS](cat_take_drop (size s - n)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite rev_cat take_size_cat // size_rev size_drop subKn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma drop_rev s n : drop n (rev s) = rev (take (size s - n) s).",
            "VernacStartTheoremProof",
            "6e72917ca45835c2973a184683e18c60b1bd3f93"
        ],
        [
            "rewrite -[s]revK take_rev !revK size_rev -minnE /minn.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case: ifP => // /ltnW-le_s_n; rewrite !drop_oversize ?size_rev.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Rev.",
            "VernacEndSegment",
            "9621abc171eed3208028788ec899c70c84b26d01"
        ],
        [
            "Arguments revK {T}.",
            "VernacArguments",
            "453f44f463f148d438ce063f6782b96841c7433b"
        ],
        [
            "Section EqSeq.",
            "VernacBeginSection",
            "d67f8de7ea4586afca99c953cfaff8ebcb52078d"
        ],
        [
            "Variables (n0 : nat) (T : eqType) (x0 : T).",
            "VernacAssumption",
            "bca15fcddedd7f43ca336a4df55a49136984ac49"
        ],
        [
            "Local Notation nth := (nth x0).",
            "VernacSyntacticDefinition",
            "42c350b69533ac218c0483e94a43649453ee1f97"
        ],
        [
            "Implicit Type s : seq T.",
            "VernacReserve",
            "d07b3ddcd5fd915117241a5590804fc28c5a4d12"
        ],
        [
            "Implicit Types x y z : T.",
            "VernacReserve",
            "4551975a1e0f19c6e2a6f6aed52241382e61c546"
        ],
        [
            "Fixpoint eqseq s1 s2 {struct s2} := match s1, s2 with | [::], [::] => true | x1 :: s1', x2 :: s2' => (x1 == x2) && eqseq s1' s2' | _, _ => false end.",
            "VernacFixpoint",
            "3270ed5173067d5a032a91cb53f684f1c48a9165"
        ],
        [
            "Lemma eqseqP : Equality.axiom eqseq.",
            "VernacStartTheoremProof",
            "b96028236b8ca76932b573ec08f3a7df96527e5e"
        ],
        [
            "move; elim=> [|x1 s1 IHs] [|x2 s2]; do [by constructor | simpl].",
            "VernacExtend",
            "15d3cbad47768eb0551ac593d3d63acdd13eeaf7"
        ],
        [
            "case: (x1 =P x2) => [<-|neqx]; last by right; case.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: (iffP (IHs s2)) => [<-|[]].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical seq_eqMixin := EqMixin eqseqP.",
            "VernacDefinition",
            "e156691e7bd7283b2c1a752ed337c56969e05091"
        ],
        [
            "Canonical seq_eqType := Eval hnf in EqType (seq T) seq_eqMixin.",
            "VernacDefinition",
            "d2e9c60daec6e280fade248ed3d862ea1fc2a651"
        ],
        [
            "Lemma eqseqE : eqseq = eq_op.",
            "VernacStartTheoremProof",
            "8bef48f72d665bbf760da2a3058e5f644092e068"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqseq_cons x1 x2 s1 s2 : (x1 :: s1 == x2 :: s2) = (x1 == x2) && (s1 == s2).",
            "VernacStartTheoremProof",
            "806ebd444f96caeb182a334bd98cebb1744f05a2"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqseq_cat s1 s2 s3 s4 : size s1 = size s2 -> (s1 ++ s3 == s2 ++ s4) = (s1 == s2) && (s3 == s4).",
            "VernacStartTheoremProof",
            "48624d8b9bc4a531a3369ffbd7dbb0401532a3cc"
        ],
        [
            "elim: s1 s2 => [|x1 s1 IHs] [|x2 s2] //= [sz12].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite !eqseq_cons -andbA IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqseq_rcons s1 s2 x1 x2 : (rcons s1 x1 == rcons s2 x2) = (s1 == s2) && (x1 == x2).",
            "VernacStartTheoremProof",
            "e87113c9305e23ac7642770f0acfc699adca598b"
        ],
        [
            "by rewrite -(can_eq revK) !rev_rcons eqseq_cons andbC (can_eq revK).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_eq0 s : (size s == 0) = (s == [::]).",
            "VernacStartTheoremProof",
            "8e91956fb7eac55a89b7c46c7075ae3015bca031"
        ],
        [
            "exact: (sameP nilP eqP).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma has_filter a s : has a s = (filter a s != [::]).",
            "VernacStartTheoremProof",
            "e53382a5d1ded2669c7d96912c18ac73adbc2f9d"
        ],
        [
            "by rewrite -size_eq0 size_filter has_count lt0n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint mem_seq (s : seq T) := if s is y :: s' then xpredU1 y (mem_seq s') else xpred0.",
            "VernacFixpoint",
            "17745979f75c31794e20570df25edcfbef83d06e"
        ],
        [
            "Definition eqseq_class := seq T.",
            "VernacDefinition",
            "380a3cfea5a15e9026656dba7ccad1d6f5c2b472"
        ],
        [
            "Identity Coercion seq_of_eqseq : eqseq_class >-> seq.",
            "VernacIdentityCoercion",
            "d81a2aa8a9d6101f0c2ef5f9572df1e03c467485"
        ],
        [
            "Coercion pred_of_eq_seq (s : eqseq_class) : pred_class := [eta mem_seq s].",
            "VernacDefinition",
            "7524ba60e41b201c12f75fb0720e5ab1171007a7"
        ],
        [
            "Canonical seq_predType := @mkPredType T (seq T) pred_of_eq_seq.",
            "VernacDefinition",
            "ea7bff99cab2bbb01b00645b4810dbd770ca6a6c"
        ],
        [
            "Canonical mem_seq_predType := mkPredType mem_seq.",
            "VernacDefinition",
            "815dacd7f8f92e1a28d633d90ee1bfd0c83d2550"
        ],
        [
            "Lemma in_cons y s x : (x \\in y :: s) = (x == y) || (x \\in s).",
            "VernacStartTheoremProof",
            "1399fa0bf52fc970fa8acfa0ea40d67450664b21"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_nil x : (x \\in [::]) = false.",
            "VernacStartTheoremProof",
            "356a2c059f6f5e1b4092d4b07d04a841b2c6b3c6"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_seq1 x y : (x \\in [:: y]) = (x == y).",
            "VernacStartTheoremProof",
            "729e9a6cc4fe5e11f2f12638d067c2b2ce5569c0"
        ],
        [
            "by rewrite in_cons orbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let inE := (mem_seq1, in_cons, inE).",
            "VernacDefinition",
            "44130473758110b9a5caacf6b32b4d81857741bd"
        ],
        [
            "Lemma mem_seq2 x y1 y2 : (x \\in [:: y1; y2]) = xpred2 y1 y2 x.",
            "VernacStartTheoremProof",
            "0489716776265c08afd0a5314429369c7f12a3be"
        ],
        [
            "by rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_seq3 x y1 y2 y3 : (x \\in [:: y1; y2; y3]) = xpred3 y1 y2 y3 x.",
            "VernacStartTheoremProof",
            "6ba52bb67a6f1f14f5090139dde7ddf19f054ff3"
        ],
        [
            "by rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_seq4 x y1 y2 y3 y4 : (x \\in [:: y1; y2; y3; y4]) = xpred4 y1 y2 y3 y4 x.",
            "VernacStartTheoremProof",
            "1a92faf1f07804412e59de4f0353300eb31da8f5"
        ],
        [
            "by rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_cat x s1 s2 : (x \\in s1 ++ s2) = (x \\in s1) || (x \\in s2).",
            "VernacStartTheoremProof",
            "c94edb08b137ba1a07b6409fb701e9e9b835e111"
        ],
        [
            "by elim: s1 => //= y s1 IHs; rewrite !inE /= -orbA -IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_rcons s y : rcons s y =i y :: s.",
            "VernacStartTheoremProof",
            "15adf2c9f15c57f4c6f702413c3b8098442397ee"
        ],
        [
            "by move=> x; rewrite -cats1 /= mem_cat mem_seq1 orbC in_cons.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_head x s : x \\in x :: s.",
            "VernacStartTheoremProof",
            "c9f7983dada34c94dcb32537373d47c3181ab4ab"
        ],
        [
            "exact: predU1l.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_last x s : last x s \\in x :: s.",
            "VernacStartTheoremProof",
            "5877711516d42dcdb5c6ffaf66720a7e142cf32a"
        ],
        [
            "by rewrite lastI mem_rcons mem_head.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_behead s : {subset behead s <= s}.",
            "VernacStartTheoremProof",
            "05a9cbc7e28a4afe8bbeab52298793147a21f927"
        ],
        [
            "by case: s => // y s x; apply: predU1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_belast s y : {subset belast y s <= y :: s}.",
            "VernacStartTheoremProof",
            "25c24daf79c756c159dfffa624705439faf06b4e"
        ],
        [
            "by move=> x ys'x; rewrite lastI mem_rcons mem_behead.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_nth s n : n < size s -> nth s n \\in s.",
            "VernacStartTheoremProof",
            "4cf1236c91f205ce8da73b0b452af5322951330a"
        ],
        [
            "by elim: s n => [|x s IHs] // [_|n sz_s]; rewrite ?mem_head // mem_behead ?IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_take s x : x \\in take n0 s -> x \\in s.",
            "VernacStartTheoremProof",
            "542a5e033f6708c16fcdd9775ccca9a5f51a2e7a"
        ],
        [
            "by move=> s0x; rewrite -(cat_take_drop n0 s) mem_cat /= s0x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_drop s x : x \\in drop n0 s -> x \\in s.",
            "VernacStartTheoremProof",
            "0305bcdb93499bac022434fc312b4ac19e7c8d5b"
        ],
        [
            "by move=> s0'x; rewrite -(cat_take_drop n0 s) mem_cat /= s0'x orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma last_eq s z x y : x != y -> z != y -> (last x s == y) = (last z s == y).",
            "VernacStartTheoremProof",
            "e44fa9432772afa6e13c4a98ae59e5b8c6e370e2"
        ],
        [
            "by move=> /negPf xz /negPf yz; case: s => [|t s]//; rewrite xz yz.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Filters.",
            "VernacBeginSection",
            "c0751403b5ed222b3a2467145aeabdef9454a867"
        ],
        [
            "Variable a : pred T.",
            "VernacAssumption",
            "bf9400e5dd72108c5b9fea4789914b12961b30c3"
        ],
        [
            "Lemma hasP s : reflect (exists2 x, x \\in s & a x) (has a s).",
            "VernacStartTheoremProof",
            "605392beba8a78e1285bfa27066cbe546cd3c614"
        ],
        [
            "elim: s => [|y s IHs] /=; first by right; case.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case ay: (a y); first by left; exists y; rewrite ?mem_head.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply: (iffP IHs) => [] [x ysx ax]; exists x => //; first exact: mem_behead.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case: (predU1P ysx) ax => [->|//]; rewrite ay.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma hasPP s aP : (forall x, reflect (aP x) (a x)) -> reflect (exists2 x, x \\in s & aP x) (has a s).",
            "VernacStartTheoremProof",
            "954e1c04b49943d78392b4789ab2720db7035a4b"
        ],
        [
            "by move=> vP; apply: (iffP (hasP _)) => -[x?/vP]; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma hasPn s : reflect (forall x, x \\in s -> ~~ a x) (~~ has a s).",
            "VernacStartTheoremProof",
            "0e682376546d1e2e14b41f149f5558dc27967dc4"
        ],
        [
            "apply: (iffP idP) => not_a_s => [x s_x|].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by apply: contra not_a_s => a_x; apply/hasP; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply/hasP=> [[x s_x]]; apply/negP; apply: not_a_s.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma allP s : reflect (forall x, x \\in s -> a x) (all a s).",
            "VernacStartTheoremProof",
            "01d6ee892820d64ffaa5461f8b89c2005efc5f43"
        ],
        [
            "elim: s => [|x s IHs]; first by left.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite /= andbC; case: IHs => IHs /=.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "apply: (iffP idP) => [Hx y|]; last by apply; apply: mem_head.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case/predU1P=> [->|Hy]; auto.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by right=> H; case IHs => y Hy; apply H; apply: mem_behead.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma allPP s aP : (forall x, reflect (aP x) (a x)) -> reflect (forall x, x \\in s -> aP x) (all a s).",
            "VernacStartTheoremProof",
            "cf21d25e5e5b2ca832b42cb635cc6e2f5979d39f"
        ],
        [
            "by move=> vP; apply: (iffP (allP _)) => /(_ _ _) /vP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma allPn s : reflect (exists2 x, x \\in s & ~~ a x) (~~ all a s).",
            "VernacStartTheoremProof",
            "d2d31620f7a0b4c4b4b0d70ed260d8e78d7995b5"
        ],
        [
            "elim: s => [|x s IHs]; first by right=> [[x Hx _]].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite /= andbC negb_and; case: IHs => IHs /=.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by left; case: IHs => y Hy Hay; exists y; first apply: mem_behead.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: (iffP idP) => [|[y]]; first by exists x; rewrite ?mem_head.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case/predU1P=> [-> // | s_y not_a_y]; case: IHs; exists y.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_filter x s : (x \\in filter a s) = a x && (x \\in s).",
            "VernacStartTheoremProof",
            "42c9046676f906aa040d74d12cb3b3acbaab44a3"
        ],
        [
            "rewrite andbC; elim: s => //= y s IHs.",
            "VernacExtend",
            "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
        ],
        [
            "rewrite (fun_if (fun s' : seq T => x \\in s')) !in_cons {}IHs.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case: eqP => [->|_]; case (a y); rewrite /= ?andbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Filters.",
            "VernacEndSegment",
            "ba991dc1c9479eef1da05574f450cf24553e70d1"
        ],
        [
            "Notation \"'has_ view\" := (hasPP _ (fun _ => view)) (at level 4, right associativity, format \"''has_' view\").",
            "VernacNotation",
            "1ea6ba1ea48520a54048ba0204374773fc02b213"
        ],
        [
            "Notation \"'all_ view\" := (allPP _ (fun _ => view)) (at level 4, right associativity, format \"''all_' view\").",
            "VernacNotation",
            "9c1bb8cc5069b22b9022f693fc492a6beb21004f"
        ],
        [
            "Section EqIn.",
            "VernacBeginSection",
            "0f553051a3e8d72e7ec44a242bbc53cc56a8814d"
        ],
        [
            "Variables a1 a2 : pred T.",
            "VernacAssumption",
            "2f75e398ae42b5935f07e7a238a136f678306d55"
        ],
        [
            "Lemma eq_in_filter s : {in s, a1 =1 a2} -> filter a1 s = filter a2 s.",
            "VernacStartTheoremProof",
            "79f9b11b85c46916c52c301383ef81f8d950e929"
        ],
        [
            "elim: s => //= x s IHs eq_a.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite eq_a ?mem_head ?IHs // => y s_y; apply: eq_a; apply: mem_behead.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_in_find s : {in s, a1 =1 a2} -> find a1 s = find a2 s.",
            "VernacStartTheoremProof",
            "dff1cdc3caf5a23bb44f04f01dedc0c666627986"
        ],
        [
            "elim: s => //= x s IHs eq_a12; rewrite eq_a12 ?mem_head // IHs // => y s'y.",
            "VernacExtend",
            "5c0d3b68844697b312245da3ed2c1b277720f6af"
        ],
        [
            "by rewrite eq_a12 // mem_behead.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_in_count s : {in s, a1 =1 a2} -> count a1 s = count a2 s.",
            "VernacStartTheoremProof",
            "8f10ca83528a9abd1cd87b3cfedcaceb7e4e2969"
        ],
        [
            "by move/eq_in_filter=> eq_a12; rewrite -!size_filter eq_a12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_in_all s : {in s, a1 =1 a2} -> all a1 s = all a2 s.",
            "VernacStartTheoremProof",
            "ed67c27063c9539ddca5f0f14041a728dca9b0d1"
        ],
        [
            "by move=> eq_a12; rewrite !all_count eq_in_count.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_in_has s : {in s, a1 =1 a2} -> has a1 s = has a2 s.",
            "VernacStartTheoremProof",
            "a5a2c3d1bbfa1c5f778ce815a54ecb517c352184"
        ],
        [
            "by move/eq_in_filter=> eq_a12; rewrite !has_filter eq_a12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EqIn.",
            "VernacEndSegment",
            "2e7b8cf1085d77b94bf194046a9ba591cb0adc2f"
        ],
        [
            "Lemma eq_has_r s1 s2 : s1 =i s2 -> has^~ s1 =1 has^~ s2.",
            "VernacStartTheoremProof",
            "14affd4d1f7f59335a8466f5f13878e1ccba0d49"
        ],
        [
            "move=> Es12 a; apply/(hasP a s1)/(hasP a s2) => [] [x Hx Hax]; by exists x; rewrite // ?Es12 // -Es12.",
            "VernacExtend",
            "863cc135acc45d5c9d170c836bc1464e830f66a2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_all_r s1 s2 : s1 =i s2 -> all^~ s1 =1 all^~ s2.",
            "VernacStartTheoremProof",
            "4284a09cc664530f5e778f0c6a58ff8e591d3b17"
        ],
        [
            "by move=> Es12 a; apply/(allP a s1)/(allP a s2) => Hs x Hx; apply: Hs; rewrite Es12 in Hx *.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma has_sym s1 s2 : has (mem s1) s2 = has (mem s2) s1.",
            "VernacStartTheoremProof",
            "9df7f860e7a51002afe7adeb86de60af1f05c2d8"
        ],
        [
            "by apply/(hasP _ s2)/(hasP _ s1) => [] [x]; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma has_pred1 x s : has (pred1 x) s = (x \\in s).",
            "VernacStartTheoremProof",
            "75ad35c8eff080fbc7157c9f2815093e43f0d019"
        ],
        [
            "by rewrite -(eq_has (mem_seq1^~ x)) (has_sym [:: x]) /= orbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_rev s : rev s =i s.",
            "VernacStartTheoremProof",
            "6acdbf1ef346b04f062f99517f4a621242969588"
        ],
        [
            "by move=> a; rewrite -!has_pred1 has_rev.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition constant s := if s is x :: s' then all (pred1 x) s' else true.",
            "VernacDefinition",
            "a10213a61247b653495674cad85c4b006050790a"
        ],
        [
            "Lemma all_pred1P x s : reflect (s = nseq (size s) x) (all (pred1 x) s).",
            "VernacStartTheoremProof",
            "d453debd3092b24dae781ebf7cce4e47f48ab502"
        ],
        [
            "elim: s => [|y s IHs] /=; first by left.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case: eqP => [->{y} | ne_xy]; last by right=> [] [? _]; case ne_xy.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: (iffP IHs) => [<- //| []].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma all_pred1_constant x s : all (pred1 x) s -> constant s.",
            "VernacStartTheoremProof",
            "13f33e43ae44fc7937f42b0758cfd2fee5d7a44c"
        ],
        [
            "by case: s => //= y s /andP[/eqP->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma all_pred1_nseq x n : all (pred1 x) (nseq n x).",
            "VernacStartTheoremProof",
            "7621a42976c0520c27436adc07ddfaae3b08221f"
        ],
        [
            "by rewrite all_nseq /= eqxx orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nseqP n x y : reflect (y = x /\\ n > 0) (y \\in nseq n x).",
            "VernacStartTheoremProof",
            "f6a2a4a3c097c2920ce41083d2f5034007681755"
        ],
        [
            "by rewrite -has_pred1 has_nseq /= eq_sym andbC; apply: (iffP andP) => -[/eqP].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma constant_nseq n x : constant (nseq n x).",
            "VernacStartTheoremProof",
            "9c0d1217e35486ea1da24ee63a2241344f85437e"
        ],
        [
            "exact: all_pred1_constant (all_pred1_nseq x n).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma constantP s : reflect (exists x, s = nseq (size s) x) (constant s).",
            "VernacStartTheoremProof",
            "3bf94986b63d66e698aa9be4c5af9f41b080c15d"
        ],
        [
            "apply: (iffP idP) => [| [x ->]]; last exact: constant_nseq.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case: s => [|x s] /=; first by exists x0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move/all_pred1P=> def_s; exists x; rewrite -def_s.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint uniq s := if s is x :: s' then (x \\notin s') && uniq s' else true.",
            "VernacFixpoint",
            "f0c766e7df4856983b2d47071c2ecb9ef381d0dd"
        ],
        [
            "Lemma cons_uniq x s : uniq (x :: s) = (x \\notin s) && uniq s.",
            "VernacStartTheoremProof",
            "46666f26dfd25a015b38ddd28e57a8ea5d31b45e"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cat_uniq s1 s2 : uniq (s1 ++ s2) = [&& uniq s1, ~~ has (mem s1) s2 & uniq s2].",
            "VernacStartTheoremProof",
            "a5a9c69fa042ed15e1b758dfe2888d48b71e245e"
        ],
        [
            "elim: s1 => [|x s1 IHs]; first by rewrite /= has_pred0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite has_sym /= mem_cat !negb_or has_sym IHs -!andbA; do !bool_congr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma uniq_catC s1 s2 : uniq (s1 ++ s2) = uniq (s2 ++ s1).",
            "VernacStartTheoremProof",
            "cbc42d289ce6a3dd226febb75bb7b7270623adb9"
        ],
        [
            "by rewrite !cat_uniq has_sym andbCA andbA andbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma uniq_catCA s1 s2 s3 : uniq (s1 ++ s2 ++ s3) = uniq (s2 ++ s1 ++ s3).",
            "VernacStartTheoremProof",
            "2e7949492eb5798fcfd3143abc402865f8cd46aa"
        ],
        [
            "by rewrite !catA -!(uniq_catC s3) !(cat_uniq s3) uniq_catC !has_cat orbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rcons_uniq s x : uniq (rcons s x) = (x \\notin s) && uniq s.",
            "VernacStartTheoremProof",
            "fd05976e7081ee6ed2e55c3753e42a491c663ec3"
        ],
        [
            "by rewrite -cats1 uniq_catC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma filter_uniq s a : uniq s -> uniq (filter a s).",
            "VernacStartTheoremProof",
            "cafc745c82e4ee7418f9b27533f740a5ee455993"
        ],
        [
            "elim: s => [|x s IHs] //= /andP[Hx Hs]; case (a x); auto.",
            "VernacExtend",
            "440ef132e263f776265e2c72c58e082b4623b4c1"
        ],
        [
            "by rewrite /= mem_filter /= (negbTE Hx) andbF; auto.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rot_uniq s : uniq (rot n0 s) = uniq s.",
            "VernacStartTheoremProof",
            "8a4d67b5c137ea63f91d3e3ad40b9b57b1b8fc0f"
        ],
        [
            "by rewrite /rot uniq_catC cat_take_drop.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rev_uniq s : uniq (rev s) = uniq s.",
            "VernacStartTheoremProof",
            "80b9ca799fad3bd7bee79940917ce1f908bec87e"
        ],
        [
            "elim: s => // x s IHs.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite rev_cons -cats1 cat_uniq /= andbT andbC mem_rev orbF IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma count_memPn x s : reflect (count_mem x s = 0) (x \\notin s).",
            "VernacStartTheoremProof",
            "a1f1b7a4983ec2f03ced94e36bfd875100ca6ff1"
        ],
        [
            "by rewrite -has_pred1 has_count -eqn0Ngt; apply: eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma count_uniq_mem s x : uniq s -> count_mem x s = (x \\in s).",
            "VernacStartTheoremProof",
            "0f3d83e09abf48b438cd8b931f1cfd0ed2523e0d"
        ],
        [
            "elim: s => //= y s IHs /andP[/negbTE s'y /IHs-> {IHs}].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite in_cons eq_sym; case: eqP => // ->; rewrite s'y.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma filter_pred1_uniq s x : uniq s -> x \\in s -> filter (pred1 x) s = [:: x].",
            "VernacStartTheoremProof",
            "4d88abd326b868dd3b8f65e661952c7c6a316916"
        ],
        [
            "move=> uniq_s s_x; rewrite (all_pred1P _ _ (filter_all _ _)).",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite size_filter count_uniq_mem ?s_x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint undup s := if s is x :: s' then if x \\in s' then undup s' else x :: undup s' else [::].",
            "VernacFixpoint",
            "60eebe5694aea5afae22d75502629298ce4b7d52"
        ],
        [
            "Lemma size_undup s : size (undup s) <= size s.",
            "VernacStartTheoremProof",
            "3834ef3ef0210efedf837a8cbea829449eefacd3"
        ],
        [
            "by elim: s => //= x s IHs; case: (x \\in s) => //=; apply: ltnW.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_undup s : undup s =i s.",
            "VernacStartTheoremProof",
            "52066588475b49311a91f71dfe2750440a824968"
        ],
        [
            "move=> x; elim: s => //= y s IHs.",
            "VernacExtend",
            "06880003f1108b2eb418688c7bc6bf1013cf0e4c"
        ],
        [
            "by case Hy: (y \\in s); rewrite in_cons IHs //; case: eqP => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma undup_uniq s : uniq (undup s).",
            "VernacStartTheoremProof",
            "b8228243b58232fe838732b1964950ae28c07ab1"
        ],
        [
            "by elim: s => //= x s IHs; case s_x: (x \\in s); rewrite //= mem_undup s_x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma undup_id s : uniq s -> undup s = s.",
            "VernacStartTheoremProof",
            "a5291ae2463f1f2393112703653a92ff60a5afd1"
        ],
        [
            "by elim: s => //= x s IHs /andP[/negbTE-> /IHs->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn_size_undup s : (size (undup s) < size s) = ~~ uniq s.",
            "VernacStartTheoremProof",
            "fa5ff0fd7c8c839869cf903680e3b4ab3c097b4c"
        ],
        [
            "by elim: s => //= x s IHs; case Hx: (x \\in s); rewrite //= ltnS size_undup.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma filter_undup p s : filter p (undup s) = undup (filter p s).",
            "VernacStartTheoremProof",
            "6632895e2629c44e317a5218e71fb5b625103458"
        ],
        [
            "elim: s => //= x s IHs; rewrite (fun_if undup) fun_if /= mem_filter /=.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by rewrite (fun_if (filter p)) /= IHs; case: ifP => -> //=; apply: if_same.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma undup_nil s : undup s = [::] -> s = [::].",
            "VernacStartTheoremProof",
            "81ac39f114a0939e86e4b3cb809ebd4ed9402cc5"
        ],
        [
            "by case: s => //= x s; rewrite -mem_undup; case: ifP; case: undup.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition index x := find (pred1 x).",
            "VernacDefinition",
            "f9474598b078144e7b2645afc18afd2b0f50b89b"
        ],
        [
            "Lemma index_size x s : index x s <= size s.",
            "VernacStartTheoremProof",
            "55ffd4e94bb246f75a6d9fb4fbf9d958c41f418b"
        ],
        [
            "by rewrite /index find_size.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma index_mem x s : (index x s < size s) = (x \\in s).",
            "VernacStartTheoremProof",
            "73240d6be502e464331f815624f6505f43994005"
        ],
        [
            "by rewrite -has_pred1 has_find.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_index x s : x \\in s -> nth s (index x s) = x.",
            "VernacStartTheoremProof",
            "5cdb4388944b92f2f07e5c3503f4eb1b455f5c80"
        ],
        [
            "by rewrite -has_pred1 => /(nth_find x0)/eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma index_cat x s1 s2 : index x (s1 ++ s2) = if x \\in s1 then index x s1 else size s1 + index x s2.",
            "VernacStartTheoremProof",
            "6d242ace578cffdf45fcadfbc54586fbd91b3ce7"
        ],
        [
            "by rewrite /index find_cat has_pred1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma index_uniq i s : i < size s -> uniq s -> index (nth s i) s = i.",
            "VernacStartTheoremProof",
            "42c317565f7dc8bf6f5e30bf20723765aeb8b17b"
        ],
        [
            "elim: s i => [|x s IHs] //= [|i]; rewrite /= ?eqxx // ltnS => lt_i_s.",
            "VernacExtend",
            "5c0d3b68844697b312245da3ed2c1b277720f6af"
        ],
        [
            "case/andP=> not_s_x /(IHs i)-> {IHs}//.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by case: eqP not_s_x => // ->; rewrite mem_nth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma index_head x s : index x (x :: s) = 0.",
            "VernacStartTheoremProof",
            "d4607ec2123895a560ddd0ce057995eba22e5330"
        ],
        [
            "by rewrite /= eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma index_last x s : uniq (x :: s) -> index (last x s) (x :: s) = size s.",
            "VernacStartTheoremProof",
            "e265998739c2e826ba8d37cf266c8e28fb1169cf"
        ],
        [
            "rewrite lastI rcons_uniq -cats1 index_cat size_belast.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case: ifP => //=; rewrite eqxx addn0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_uniq s i j : i < size s -> j < size s -> uniq s -> (nth s i == nth s j) = (i == j).",
            "VernacStartTheoremProof",
            "4cf19e777f5c3d0f21b893959587ceeeae552904"
        ],
        [
            "move=> lt_i_s lt_j_s Us; apply/eqP/eqP=> [eq_sij|-> //].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite -(index_uniq lt_i_s Us) eq_sij index_uniq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma uniqPn s : reflect (exists i j, [/\\ i < j, j < size s & nth s i = nth s j]) (~~ uniq s).",
            "VernacStartTheoremProof",
            "290c18677cff0848053d1c1d2491d518ab4dae26"
        ],
        [
            "apply: (iffP idP) => [|[i [j [ltij ltjs]]]]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: contra_eqN => Us; rewrite nth_uniq ?ltn_eqF // (ltn_trans ltij).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: s => // x s IHs /nandP[/negbNE | /IHs[i [j]]]; last by exists i.+1, j.+1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by exists 0, (index x s).+1; rewrite !ltnS index_mem /= nth_index.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma uniqP s : reflect {in [pred i | i < size s] &, injective (nth s)} (uniq s).",
            "VernacStartTheoremProof",
            "ec9ba2ad7f412d5af874eaed4c5e267d8d910ab6"
        ],
        [
            "apply: (iffP idP) => [????? /eqP|]; first by rewrite nth_uniq // => /eqP.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move=> nth_inj; apply/uniqPn => -[i [j [ltij ltjs /nth_inj ]]].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by move=> /(_ (ltn_trans ltij ltjs)) /(_ ltjs) eq_ij; rewrite eq_ij ltnn in ltij.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_rot s : rot n0 s =i s.",
            "VernacStartTheoremProof",
            "bd2eb11fb1636814d292d2ed57f7a10577859839"
        ],
        [
            "by move=> x; rewrite -{2}(cat_take_drop n0 s) !mem_cat /= orbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqseq_rot s1 s2 : (rot n0 s1 == rot n0 s2) = (s1 == s2).",
            "VernacStartTheoremProof",
            "13d5b60f75e1b40d13800a42eadabb73c6f0b660"
        ],
        [
            "by apply: inj_eq; apply: rot_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variant rot_to_spec s x := RotToSpec i s' of rot i s = x :: s'.",
            "VernacInductive",
            "9bdd95342fc68e226ab99e1f5c3fa88ae6b4a3aa"
        ],
        [
            "Lemma rot_to s x : x \\in s -> rot_to_spec s x.",
            "VernacStartTheoremProof",
            "2605de275ac9054fde2d70e988cf4bd21ff61065"
        ],
        [
            "move=> s_x; pose i := index x s; exists i (drop i.+1 s ++ take i s).",
            "VernacExtend",
            "ff25b8814cda351869eff83b429f96923635e853"
        ],
        [
            "rewrite -cat_cons {}/i; congr cat; elim: s s_x => //= y s IHs.",
            "VernacExtend",
            "757c53630ddc3260b621b4ad3c53f1262c7cbcec"
        ],
        [
            "by rewrite eq_sym in_cons; case: eqP => // -> _; rewrite drop0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EqSeq.",
            "VernacEndSegment",
            "d7f6fadb1f15358f70ce97b24fb65fc1676b6307"
        ],
        [
            "Definition inE := (mem_seq1, in_cons, inE).",
            "VernacDefinition",
            "0514dd5f19fd9d93184e74da18f346ff756a5435"
        ],
        [
            "Prenex Implicits mem_seq1 uniq undup index.",
            "VernacExtend",
            "587bc52b8fa351ae54ae31aee8729e9be79074cf"
        ],
        [
            "Arguments eqseq {T} !_ !_.",
            "VernacArguments",
            "67bf0105783bf09d152fbb60ee5f769c4f4300b4"
        ],
        [
            "Arguments eqseqP {T x y}.",
            "VernacArguments",
            "ab3a836d5ae696a7b0107e1bf356e01e89cbd3ca"
        ],
        [
            "Arguments hasP {T a s}.",
            "VernacArguments",
            "c8154f075e868feb861eb5fc3cc29fbb9bcf3edb"
        ],
        [
            "Arguments hasPn {T a s}.",
            "VernacArguments",
            "d593f3421131de7bf32433af3e511b7f01fad91d"
        ],
        [
            "Arguments allP {T a s}.",
            "VernacArguments",
            "c45bdedad966aa5b6f8e7693bb8b9022d9073a64"
        ],
        [
            "Arguments allPn {T a s}.",
            "VernacArguments",
            "e829f3d4b93983f93924e7f67a1b006f65b92b84"
        ],
        [
            "Arguments nseqP {T n x y}.",
            "VernacArguments",
            "987193366d3a748d2b203f19ae5dda983d979f98"
        ],
        [
            "Arguments count_memPn {T x s}.",
            "VernacArguments",
            "3d40e2e5c6d5c417099b6efed506f8a4232f3f19"
        ],
        [
            "Section NthTheory.",
            "VernacBeginSection",
            "32df9773a2866b3e3ab893272edf079e17ef25b2"
        ],
        [
            "Lemma nthP (T : eqType) (s : seq T) x x0 : reflect (exists2 i, i < size s & nth x0 s i = x) (x \\in s).",
            "VernacStartTheoremProof",
            "97cb9eab518ce598747772ad85fab669bba7e981"
        ],
        [
            "apply: (iffP idP) => [|[n Hn <-]]; last by apply mem_nth.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by exists (index x s); [rewrite index_mem | apply nth_index].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variable T : Type.",
            "VernacAssumption",
            "a15b17e37c4241158d544882375356c273dc93f2"
        ],
        [
            "Lemma has_nthP (a : pred T) s x0 : reflect (exists2 i, i < size s & a (nth x0 s i)) (has a s).",
            "VernacStartTheoremProof",
            "1b4d7bf6659e1d5a78a9c8d5b14e4e89d8a24c4f"
        ],
        [
            "elim: s => [|x s IHs] /=; first by right; case.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case nax: (a x); first by left; exists 0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: (iffP IHs) => [[i]|[[|i]]]; [exists i.+1 | rewrite nax | exists i].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma all_nthP (a : pred T) s x0 : reflect (forall i, i < size s -> a (nth x0 s i)) (all a s).",
            "VernacStartTheoremProof",
            "b34886525a268f18c51ae714016e4e0bf1e6ab3e"
        ],
        [
            "rewrite -(eq_all (fun x => negbK (a x))) all_predC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: (has_nthP _ _ x0) => [na_s | a_s]; [right=> a_s | left=> i lti].",
            "VernacExtend",
            "9b36a4f7f7479e172f3399032e2ee42d2778fdbc"
        ],
        [
            "by case: na_s => i lti; rewrite a_s.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply/idPn=> na_si; case: a_s; exists i.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End NthTheory.",
            "VernacEndSegment",
            "0c7db104ce01ed956d60c717caddfef14c004258"
        ],
        [
            "Lemma set_nth_default T s (y0 x0 : T) n : n < size s -> nth x0 s n = nth y0 s n.",
            "VernacStartTheoremProof",
            "e72a4ee76484e5d21f9d915053722d2c4808c64c"
        ],
        [
            "by elim: s n => [|y s' IHs] [|n] /=; auto.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma headI T s (x : T) : rcons s x = head x s :: behead (rcons s x).",
            "VernacStartTheoremProof",
            "456eac205b94f4c8dd58d72d38f59452ced2344d"
        ],
        [
            "by case: s.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments nthP {T s x}.",
            "VernacArguments",
            "4a5342136228467db664b6dd79800a97dbb5a4a4"
        ],
        [
            "Arguments has_nthP {T a s}.",
            "VernacArguments",
            "226c69106454c9aa889bf1745547dfd06052001f"
        ],
        [
            "Arguments all_nthP {T a s}.",
            "VernacArguments",
            "f028617b57958d4b8faec89f12502336f84e86e6"
        ],
        [
            "Definition bitseq := seq bool.",
            "VernacDefinition",
            "559efa49ba58e28e23e618d895de07798e0cb17a"
        ],
        [
            "Canonical bitseq_eqType := Eval hnf in [eqType of bitseq].",
            "VernacDefinition",
            "b6287bba2688e45f802cad0d6f80e069aac9a382"
        ],
        [
            "Canonical bitseq_predType := Eval hnf in [predType of bitseq].",
            "VernacDefinition",
            "8781699a761387338009387b648f43210d404e62"
        ],
        [
            "Fixpoint incr_nth v i {struct i} := if v is n :: v' then if i is i'.+1 then n :: incr_nth v' i' else n.+1 :: v' else ncons i 0 [:: 1].",
            "VernacFixpoint",
            "0895e9b16851f2dc1d5b67e1211cb8ff9e3ae285"
        ],
        [
            "Lemma nth_incr_nth v i j : nth 0 (incr_nth v i) j = (i == j) + nth 0 v j.",
            "VernacStartTheoremProof",
            "b9d16156352f08833c955790c12ed1b1137ca812"
        ],
        [
            "elim: v i j => [|n v IHv] [|i] [|j] //=; rewrite ?eqSS ?addn0 //; try by case j.",
            "VernacExtend",
            "2c154537bba468e8a25a46bd843eef1d3fbbaf4e"
        ],
        [
            "elim: i j => [|i IHv] [|j] //=; rewrite ?eqSS //; by case j.",
            "VernacExtend",
            "244a9a5eebe0941cff21b86f46627271de195205"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_incr_nth v i : size (incr_nth v i) = if i < size v then size v else i.+1.",
            "VernacStartTheoremProof",
            "775227bc032c75faad711f9df5c9f3aa2e982248"
        ],
        [
            "elim: v i => [|n v IHv] [|i] //=; first by rewrite size_ncons /= addn1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite IHv; apply: fun_if.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma incr_nth_inj v : injective (incr_nth v).",
            "VernacStartTheoremProof",
            "87d8d4dec3974cc091d0378b9ea0a198dc441f19"
        ],
        [
            "move=> i j /(congr1 (nth 0 ^~ i)); apply: contra_eq => neq_ij.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite !nth_incr_nth eqn_add2r eqxx /nat_of_bool ifN_eqC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma incr_nthC v i j : incr_nth (incr_nth v i) j = incr_nth (incr_nth v j) i.",
            "VernacStartTheoremProof",
            "fff7d51e993f87774f0921b35d8de68d01e191b3"
        ],
        [
            "apply: (@eq_from_nth _ 0) => [|k _]; last by rewrite !nth_incr_nth addnCA.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by do !rewrite size_incr_nth leqNgt if_neg -/(maxn _ _); apply: maxnAC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section PermSeq.",
            "VernacBeginSection",
            "0154a6ae9c1acbb90dc383ff51fb5e130153bdc9"
        ],
        [
            "Variable T : eqType.",
            "VernacAssumption",
            "2ceeb4536776ca324e5be084d2deb4d476694ef1"
        ],
        [
            "Implicit Type s : seq T.",
            "VernacReserve",
            "d07b3ddcd5fd915117241a5590804fc28c5a4d12"
        ],
        [
            "Definition perm_eq s1 s2 := all [pred x | count_mem x s1 == count_mem x s2] (s1 ++ s2).",
            "VernacDefinition",
            "bce43259f774870339bbf57745281af32ccb637a"
        ],
        [
            "Lemma perm_eqP s1 s2 : reflect (count^~ s1 =1 count^~ s2) (perm_eq s1 s2).",
            "VernacStartTheoremProof",
            "96446a033b0527dd8b4848d74c927ed4165308e4"
        ],
        [
            "apply: (iffP allP) => /= [eq_cnt1 a | eq_cnt x _]; last exact/eqP.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "elim: {a}_.+1 {-2}a (ltnSn (count a (s1 ++ s2))) => // n IHn a le_an.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "have [/eqP|] := posnP (count a (s1 ++ s2)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite count_cat addn_eq0; do 2!case: eqP => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -has_count => /hasP[x s12x a_x]; pose a' := predD1 a x.",
            "VernacExtend",
            "9d8fbc7ebaadb48200c542591ceec3e0f555a812"
        ],
        [
            "have cnt_a' s: count a s = count_mem x s + count a' s.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -count_predUI -[LHS]addn0 -(count_pred0 s).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by congr (_ + _); apply: eq_count => y /=; case: eqP => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite !cnt_a' (eqnP (eq_cnt1 _ s12x)) (IHn a') // -ltnS.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: leq_trans le_an.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite ltnS cnt_a' -add1n leq_add2r -has_count has_pred1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_eq_refl s : perm_eq s s.",
            "VernacStartTheoremProof",
            "fcf7d964c59a00994265e56f7340782f72c8298e"
        ],
        [
            "exact/perm_eqP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve perm_eq_refl : core.",
            "VernacHints",
            "5fe0437922698270e7132f214ce76fa0da626aea"
        ],
        [
            "Lemma perm_eq_sym : symmetric perm_eq.",
            "VernacStartTheoremProof",
            "ef6ff513a6afe66af16bdbf901df91c79106591d"
        ],
        [
            "by move=> s1 s2; apply/perm_eqP/perm_eqP=> ? ?.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_eq_trans : transitive perm_eq.",
            "VernacStartTheoremProof",
            "3860dcff82d5adea708ac20eefbcaee93989f1f6"
        ],
        [
            "by move=> s2 s1 s3 /perm_eqP-eq12 /perm_eqP/(ftrans eq12)/perm_eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Notation perm_eql s1 s2 := (perm_eq s1 =1 perm_eq s2).",
            "VernacSyntacticDefinition",
            "93aa6a274aded3eeca2d0d7ec703e19db9eb1e4e"
        ],
        [
            "Notation perm_eqr s1 s2 := (perm_eq^~ s1 =1 perm_eq^~ s2).",
            "VernacSyntacticDefinition",
            "f3f56bbf965fbf2b27908b36c3f5fdcd843695f3"
        ],
        [
            "Lemma perm_eqlE s1 s2 : perm_eql s1 s2 -> perm_eq s1 s2.",
            "VernacStartTheoremProof",
            "2a9a9a04ba53be56ea8c861a1e6cee7537fe5aa9"
        ],
        [
            "by move->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_eqlP s1 s2 : reflect (perm_eql s1 s2) (perm_eq s1 s2).",
            "VernacStartTheoremProof",
            "0d8cdadae84b02d8f25ab713f6a518006598506b"
        ],
        [
            "apply: (iffP idP) => [eq12 s3 | -> //].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "apply/idP/idP; last exact: perm_eq_trans.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -!(perm_eq_sym s3); move/perm_eq_trans; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_eqrP s1 s2 : reflect (perm_eqr s1 s2) (perm_eq s1 s2).",
            "VernacStartTheoremProof",
            "0f4bec58c3eada88cd039e1d36cc1fadd0497b19"
        ],
        [
            "apply: (iffP idP) => [/perm_eqlP eq12 s3| <- //].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite !(perm_eq_sym s3) eq12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_catC s1 s2 : perm_eql (s1 ++ s2) (s2 ++ s1).",
            "VernacStartTheoremProof",
            "815eaa368125356353edb095125d5b3efbeca396"
        ],
        [
            "by apply/perm_eqlP; apply/perm_eqP=> a; rewrite !count_cat addnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_cat2l s1 s2 s3 : perm_eq (s1 ++ s2) (s1 ++ s3) = perm_eq s2 s3.",
            "VernacStartTheoremProof",
            "5ce92cdcfed7559acc5a7fee36f0cb0f1f11f780"
        ],
        [
            "apply/perm_eqP/perm_eqP=> eq23 a; apply/eqP; by move/(_ a)/eqP: eq23; rewrite !count_cat eqn_add2l.",
            "VernacExtend",
            "32b15fc96f4fd456981d0dd2c828d21282fb462e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_cons x s1 s2 : perm_eq (x :: s1) (x :: s2) = perm_eq s1 s2.",
            "VernacStartTheoremProof",
            "d57370c91af1214df0debb88bd1ad16a74ac812c"
        ],
        [
            "exact: (perm_cat2l [::x]).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_cat2r s1 s2 s3 : perm_eq (s2 ++ s1) (s3 ++ s1) = perm_eq s2 s3.",
            "VernacStartTheoremProof",
            "0d67144bd2df7cf783b208343ce483924aeb1223"
        ],
        [
            "by do 2!rewrite perm_eq_sym perm_catC; apply: perm_cat2l.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_catAC s1 s2 s3 : perm_eql ((s1 ++ s2) ++ s3) ((s1 ++ s3) ++ s2).",
            "VernacStartTheoremProof",
            "ac4eb6f6e1e2d466253c710b1368080037e5303e"
        ],
        [
            "by apply/perm_eqlP; rewrite -!catA perm_cat2l perm_catC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_catCA s1 s2 s3 : perm_eql (s1 ++ s2 ++ s3) (s2 ++ s1 ++ s3).",
            "VernacStartTheoremProof",
            "a2d39e585391a7cf27356c7e1f913758564a40ea"
        ],
        [
            "by apply/perm_eqlP; rewrite !catA perm_cat2r perm_catC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_rcons x s : perm_eql (rcons s x) (x :: s).",
            "VernacStartTheoremProof",
            "96bbe5fa830d6846d93b924096ffaa9a3ba0d92e"
        ],
        [
            "by move=> /= s2; rewrite -cats1 perm_catC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_rot n s : perm_eql (rot n s) s.",
            "VernacStartTheoremProof",
            "afb11bcbfcefed52d09e3aefeac7ef1bdfe89525"
        ],
        [
            "by move=> /= s2; rewrite perm_catC cat_take_drop.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_rotr n s : perm_eql (rotr n s) s.",
            "VernacStartTheoremProof",
            "2f098a7dd0de45181bc19f647b0aaf166aba2e5c"
        ],
        [
            "exact: perm_rot.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_eq_rev s : perm_eq s (rev s).",
            "VernacStartTheoremProof",
            "a28c4b4190e416ddf15207536c5bd950c9e3c8a4"
        ],
        [
            "by apply/perm_eqP=> i; rewrite count_rev.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_filter s1 s2 P : perm_eq s1 s2 -> perm_eq (filter P s1) (filter P s2).",
            "VernacStartTheoremProof",
            "c368b85f3f7e58cf0197458dcfe3018e30ec20b3"
        ],
        [
            "by move/perm_eqP=> s12_count; apply/perm_eqP=> Q; rewrite !count_filter.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_filterC a s : perm_eql (filter a s ++ filter (predC a) s) s.",
            "VernacStartTheoremProof",
            "adb434ff85dbc5bcd90f71016355ebced82725e2"
        ],
        [
            "apply/perm_eqlP; elim: s => //= x s IHs.",
            "VernacExtend",
            "470117b6920bbf0ab181fc70f91f03232cdae40b"
        ],
        [
            "by case: (a x); last rewrite /= -cat1s perm_catCA; rewrite perm_cons.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_eq_mem s1 s2 : perm_eq s1 s2 -> s1 =i s2.",
            "VernacStartTheoremProof",
            "5c9ef9174a848d18c58b7678daf30b9e730e79a6"
        ],
        [
            "by move/perm_eqP=> eq12 x; rewrite -!has_pred1 !has_count eq12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_eq_all s1 s2 P : perm_eq s1 s2 -> all P s1 = all P s2.",
            "VernacStartTheoremProof",
            "e2a07ee3d9be3dbcb277f6835191062292169ce2"
        ],
        [
            "by move/perm_eq_mem/eq_all_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_eq_size s1 s2 : perm_eq s1 s2 -> size s1 = size s2.",
            "VernacStartTheoremProof",
            "0ba7827ccd722004a11542f0b3290012fead71f5"
        ],
        [
            "by move/perm_eqP=> eq12; rewrite -!count_predT eq12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_eq_small s1 s2 : size s2 <= 1 -> perm_eq s1 s2 -> s1 = s2.",
            "VernacStartTheoremProof",
            "20e54cee923bb73aec2fda1f74e0614beb8b7943"
        ],
        [
            "move=> s2_le1 eqs12; move/perm_eq_size: eqs12 s2_le1 (perm_eq_mem eqs12).",
            "VernacExtend",
            "8b784377bdc4d565ff66d4cf36a6041e9354c156"
        ],
        [
            "by case: s2 s1 => [|x []] // [|y []] // _ _ /(_ x); rewrite !inE eqxx => /eqP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma uniq_leq_size s1 s2 : uniq s1 -> {subset s1 <= s2} -> size s1 <= size s2.",
            "VernacStartTheoremProof",
            "9c24f8a634c6851b4fbec38de2d85b803fa30c84"
        ],
        [
            "elim: s1 s2 => //= x s1 IHs s2 /andP[not_s1x Us1] /allP/=/andP[s2x /allP ss12].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "have [i s3 def_s2] := rot_to s2x; rewrite -(size_rot i s2) def_s2.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "apply: IHs => // y s1y; have:= ss12 y s1y.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "by rewrite -(mem_rot i) def_s2 inE (negPf (memPn _ y s1y)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_size_uniq s1 s2 : uniq s1 -> {subset s1 <= s2} -> size s2 <= size s1 -> uniq s2.",
            "VernacStartTheoremProof",
            "78f70646d20e0de291477127b50529bb38235c2f"
        ],
        [
            "elim: s1 s2 => [[] | x s1 IHs s2] // Us1x; have /andP[not_s1x Us1] := Us1x.",
            "VernacExtend",
            "482bdb35b460847e2e446a9aa1672126d9f59cdc"
        ],
        [
            "case/allP/andP=> /rot_to[i s3 def_s2] /allP ss12 le_s21.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite -(rot_uniq i) -(size_rot i) def_s2 /= in le_s21 *.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have ss13 y (s1y : y \\in s1): y \\in s3.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by have:= ss12 y s1y; rewrite -(mem_rot i) def_s2 inE (negPf (memPn _ y s1y)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite IHs // andbT; apply: contraL _ le_s21 => s3x; rewrite -leqNgt.",
            "VernacExtend",
            "fe8f197e86415fc7f0a74eda9d312128b9473eda"
        ],
        [
            "by apply/(uniq_leq_size Us1x)/allP; rewrite /= s3x; apply/allP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma uniq_size_uniq s1 s2 : uniq s1 -> s1 =i s2 -> uniq s2 = (size s2 == size s1).",
            "VernacStartTheoremProof",
            "3531b499bc3f56764c35d493ec53fff403905fa4"
        ],
        [
            "move=> Us1 eqs12; apply/idP/idP=> [Us2 | /eqP eq_sz12].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite eqn_leq !uniq_leq_size // => y; rewrite eqs12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: (leq_size_uniq Us1) => [y|]; rewrite (eqs12, eq_sz12).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_size_perm s1 s2 : uniq s1 -> {subset s1 <= s2} -> size s2 <= size s1 -> s1 =i s2 /\\ size s1 = size s2.",
            "VernacStartTheoremProof",
            "e21b1634acddd02b984bf1b869ddfaefa1a6e5c6"
        ],
        [
            "move=> Us1 ss12 le_s21; have Us2: uniq s2 := leq_size_uniq Us1 ss12 le_s21.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "suffices: s1 =i s2 by split; last by apply/eqP; rewrite -uniq_size_uniq.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "move=> x; apply/idP/idP=> [/ss12// | s2x]; apply: contraLR le_s21 => not_s1x.",
            "VernacExtend",
            "e374b6c583d80c9d8b579c06df7953342f99f751"
        ],
        [
            "rewrite -ltnNge (@uniq_leq_size (x :: s1)) /= ?not_s1x //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/allP; rewrite /= s2x; apply/allP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_uniq s1 s2 : s1 =i s2 -> size s1 = size s2 -> uniq s1 = uniq s2.",
            "VernacStartTheoremProof",
            "3aab2de231e19dcf03e51823ff39d856598b917a"
        ],
        [
            "move=> Es12 Esz12.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by apply/idP/idP=> Us; rewrite (uniq_size_uniq Us) ?Esz12 ?eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_eq_uniq s1 s2 : perm_eq s1 s2 -> uniq s1 = uniq s2.",
            "VernacStartTheoremProof",
            "4c6e643eadf0424ab8116a388de6e62224fb9fe8"
        ],
        [
            "by move=> eq_s12; apply: perm_uniq; [apply: perm_eq_mem | apply: perm_eq_size].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma uniq_perm_eq s1 s2 : uniq s1 -> uniq s2 -> s1 =i s2 -> perm_eq s1 s2.",
            "VernacStartTheoremProof",
            "f837535b4ff2595e9980a87b13c96082c3e09bc8"
        ],
        [
            "move=> Us1 Us2 eq12; apply/allP=> x _; apply/eqP.",
            "VernacExtend",
            "e374b6c583d80c9d8b579c06df7953342f99f751"
        ],
        [
            "by rewrite !count_uniq_mem ?eq12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma count_mem_uniq s : (forall x, count_mem x s = (x \\in s)) -> uniq s.",
            "VernacStartTheoremProof",
            "58e8c5ae9edd19c85d94b1896f3886232adcb707"
        ],
        [
            "move=> count1_s; have Uus := undup_uniq s.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "suffices: perm_eq s (undup s) by move/perm_eq_uniq->.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by apply/allP=> x _; apply/eqP; rewrite (count_uniq_mem x Uus) mem_undup.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma catCA_perm_ind P : (forall s1 s2 s3, P (s1 ++ s2 ++ s3) -> P (s2 ++ s1 ++ s3)) -> (forall s1 s2, perm_eq s1 s2 -> P s1 -> P s2).",
            "VernacStartTheoremProof",
            "e7f6eaa57163a83538d74dbe429dbb68c5f31abd"
        ],
        [
            "move=> PcatCA s1 s2 eq_s12; rewrite -[s1]cats0 -[s2]cats0.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "elim: s2 nil => [| x s2 IHs] s3 in s1 eq_s12 *.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by case: s1 {eq_s12}(perm_eq_size eq_s12).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /rot_to[i s' def_s1]: x \\in s1 by rewrite (perm_eq_mem eq_s12) mem_head.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -(cat_take_drop i s1) -catA => /PcatCA.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite catA -/(rot i s1) def_s1 /= -cat1s => /PcatCA/IHs/PcatCA; apply.",
            "VernacExtend",
            "7b6cefeb8aab053c8ef9903e6fd6afda1148ad78"
        ],
        [
            "by rewrite -(perm_cons x) -def_s1 perm_rot.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma catCA_perm_subst R F : (forall s1 s2 s3, F (s1 ++ s2 ++ s3) = F (s2 ++ s1 ++ s3) :> R) -> (forall s1 s2, perm_eq s1 s2 -> F s1 = F s2).",
            "VernacStartTheoremProof",
            "492aa77f9b29763274cf7d66c51d39cf232ef06a"
        ],
        [
            "move=> FcatCA s1 s2 /catCA_perm_ind => ind_s12.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by apply: (ind_s12 (eq _ \\o F)) => //= *; rewrite FcatCA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End PermSeq.",
            "VernacEndSegment",
            "da3ea6bb05b361b0a09658fd2c2f61f90506909f"
        ],
        [
            "Notation perm_eql s1 s2 := (perm_eq s1 =1 perm_eq s2).",
            "VernacSyntacticDefinition",
            "93aa6a274aded3eeca2d0d7ec703e19db9eb1e4e"
        ],
        [
            "Notation perm_eqr s1 s2 := (perm_eq^~ s1 =1 perm_eq^~ s2).",
            "VernacSyntacticDefinition",
            "f3f56bbf965fbf2b27908b36c3f5fdcd843695f3"
        ],
        [
            "Arguments perm_eqP {T s1 s2}.",
            "VernacArguments",
            "10bfa085efcef3de8fe276bb36a971c113147530"
        ],
        [
            "Arguments perm_eqlP {T s1 s2}.",
            "VernacArguments",
            "d44180232d4e10d38aa872eae7c3cd0adb0c6119"
        ],
        [
            "Arguments perm_eqrP {T s1 s2}.",
            "VernacArguments",
            "728bfc369fbb0cb3d0f39f6b678bed4075dceb00"
        ],
        [
            "Prenex Implicits perm_eq.",
            "VernacExtend",
            "e3574c540e15488ea4f426a293df0ee3bff673ac"
        ],
        [
            "Hint Resolve perm_eq_refl : core.",
            "VernacHints",
            "5fe0437922698270e7132f214ce76fa0da626aea"
        ],
        [
            "Section RotrLemmas.",
            "VernacBeginSection",
            "9a380f00cf6f7cd0706d510df403c8608c85c7ad"
        ],
        [
            "Variables (n0 : nat) (T : Type) (T' : eqType).",
            "VernacAssumption",
            "8603294ef723f1d58b8a6749059d11daec059e60"
        ],
        [
            "Implicit Type s : seq T.",
            "VernacReserve",
            "d07b3ddcd5fd915117241a5590804fc28c5a4d12"
        ],
        [
            "Lemma size_rotr s : size (rotr n0 s) = size s.",
            "VernacStartTheoremProof",
            "eb8551b9ba7d7d24179a7781b4c5b1edd9d4b9ca"
        ],
        [
            "by rewrite size_rot.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_rotr (s : seq T') : rotr n0 s =i s.",
            "VernacStartTheoremProof",
            "e8f1b96ec5c316909c8babd5992c0f50f65727e5"
        ],
        [
            "by move=> x; rewrite mem_rot.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rotr_size_cat s1 s2 : rotr (size s2) (s1 ++ s2) = s2 ++ s1.",
            "VernacStartTheoremProof",
            "5ff1ec68391dc242c0ee689710108da9cd1b44c5"
        ],
        [
            "by rewrite /rotr size_cat addnK rot_size_cat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rotr1_rcons x s : rotr 1 (rcons s x) = x :: s.",
            "VernacStartTheoremProof",
            "e1ce8291d52dcaf35323511a603072725fdb1b7d"
        ],
        [
            "by rewrite -rot1_cons rotK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma has_rotr a s : has a (rotr n0 s) = has a s.",
            "VernacStartTheoremProof",
            "19e97b7cc2dadf853b18d9e1c588050f544fe47a"
        ],
        [
            "by rewrite has_rot.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rotr_uniq (s : seq T') : uniq (rotr n0 s) = uniq s.",
            "VernacStartTheoremProof",
            "b433c4fc28ddb6fb86c1be679f228e226ad4ee31"
        ],
        [
            "by rewrite rot_uniq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rotrK : cancel (@rotr T n0) (rot n0).",
            "VernacStartTheoremProof",
            "37cb3866f4fa848b552c2db37730d7a163c5c7b7"
        ],
        [
            "move=> s; have [lt_n0s | ge_n0s] := ltnP n0 (size s).",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "by rewrite -{1}(subKn (ltnW lt_n0s)) -{1}[size s]size_rotr; apply: rotK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -{2}(rot_oversize ge_n0s) /rotr (eqnP ge_n0s) rot0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rotr_inj : injective (@rotr T n0).",
            "VernacStartTheoremProof",
            "65c37d9446ff8513ef03c8beece4505620ca08d3"
        ],
        [
            "exact (can_inj rotrK).",
            "VernacExtend",
            "a9708cdef14da727796ff8d271fcee7db3a4d37f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rev_rotr s : rev (rotr n0 s) = rot n0 (rev s).",
            "VernacStartTheoremProof",
            "d2cd43dd03fc4a04e4aec09039fb2fc879788e7a"
        ],
        [
            "by rewrite rev_cat -take_rev -drop_rev.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rev_rot s : rev (rot n0 s) = rotr n0 (rev s).",
            "VernacStartTheoremProof",
            "6e1dd3f2cc70297784a7e992994e7a399b4eb23a"
        ],
        [
            "by rewrite (canRL revK (rev_rotr _)) revK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End RotrLemmas.",
            "VernacEndSegment",
            "81b02691db0c225c3f05dbd417eb4fe3f412f6c4"
        ],
        [
            "Section RotCompLemmas.",
            "VernacBeginSection",
            "206037757589cf7a80abaa66bb20dc46a9dac385"
        ],
        [
            "Variable T : Type.",
            "VernacAssumption",
            "a15b17e37c4241158d544882375356c273dc93f2"
        ],
        [
            "Implicit Type s : seq T.",
            "VernacReserve",
            "d07b3ddcd5fd915117241a5590804fc28c5a4d12"
        ],
        [
            "Lemma rot_addn m n s : m + n <= size s -> rot (m + n) s = rot m (rot n s).",
            "VernacStartTheoremProof",
            "89e262ca12fca35785249195a65936cb8c348cda"
        ],
        [
            "move=> sz_s; rewrite {1}/rot -[take _ s](cat_take_drop n).",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "rewrite 5!(catA, =^~ rot_size_cat) !cat_take_drop.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite size_drop !size_takel ?leq_addl ?addnK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rotS n s : n < size s -> rot n.+1 s = rot 1 (rot n s).",
            "VernacStartTheoremProof",
            "558b48c9b19964ad4e3d8afceda94a9a203ceca6"
        ],
        [
            "exact: (@rot_addn 1).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rot_add_mod m n s : n <= size s -> m <= size s -> rot m (rot n s) = rot (if m + n <= size s then m + n else m + n - size s) s.",
            "VernacStartTheoremProof",
            "08a8fe5bb27b406d55dab46abbabab2691211985"
        ],
        [
            "move=> Hn Hm; case: leqP => [/rot_addn // | /ltnW Hmn]; symmetry.",
            "VernacExtend",
            "f1c1af3758710d06417099a809d0460e11e632a5"
        ],
        [
            "by rewrite -{2}(rotK n s) /rotr -rot_addn size_rot addnBA ?subnK ?addnK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rot_rot m n s : rot m (rot n s) = rot n (rot m s).",
            "VernacStartTheoremProof",
            "5ca48d4d7ff5ae7d378a3c6f6275ce76f07416a9"
        ],
        [
            "case: (ltnP (size s) m) => Hm.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite !(@rot_oversize T m) ?size_rot 1?ltnW.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (ltnP (size s) n) => Hn.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite !(@rot_oversize T n) ?size_rot 1?ltnW.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite !rot_add_mod 1?addnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rot_rotr m n s : rot m (rotr n s) = rotr n (rot m s).",
            "VernacStartTheoremProof",
            "36822c811b59845ea4f5979412cb56586e9c9ee1"
        ],
        [
            "by rewrite {2}/rotr size_rot rot_rot.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rotr_rotr m n s : rotr m (rotr n s) = rotr n (rotr m s).",
            "VernacStartTheoremProof",
            "3011a65c8cd2658163295e36d72cbfb6b87ff0e2"
        ],
        [
            "by rewrite /rotr !size_rot rot_rot.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End RotCompLemmas.",
            "VernacEndSegment",
            "7fe6f5eece579a099572cfedb3f281b928928707"
        ],
        [
            "Section Mask.",
            "VernacBeginSection",
            "a429d3cda19f4701b4be09943225dd2aedf84a10"
        ],
        [
            "Variables (n0 : nat) (T : Type).",
            "VernacAssumption",
            "29998335e6c855dadd5f2bc72b16be4a0241b308"
        ],
        [
            "Implicit Types (m : bitseq) (s : seq T).",
            "VernacReserve",
            "afea70f8c418166310f9c79abe240c27cc1a9e97"
        ],
        [
            "Fixpoint mask m s {struct m} := match m, s with | b :: m', x :: s' => if b then x :: mask m' s' else mask m' s' | _, _ => [::] end.",
            "VernacFixpoint",
            "c769cabca75e5d921269040d14ba740277eac3b2"
        ],
        [
            "Lemma mask_false s n : mask (nseq n false) s = [::].",
            "VernacStartTheoremProof",
            "76dd04b63f6954d414b8a795e6bb030672daafe7"
        ],
        [
            "by elim: s n => [|x s IHs] [|n] /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mask_true s n : size s <= n -> mask (nseq n true) s = s.",
            "VernacStartTheoremProof",
            "b4fc1a2cfdbd586eef51729d800acb1bc44c5ee4"
        ],
        [
            "by elim: s n => [|x s IHs] [|n] //= Hn; congr (_ :: _); apply: IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mask0 m : mask m [::] = [::].",
            "VernacStartTheoremProof",
            "2af8aa5a86f2aa29bd5769347b73ec9613f6a725"
        ],
        [
            "by case: m.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mask1 b x : mask [:: b] [:: x] = nseq b x.",
            "VernacStartTheoremProof",
            "6a763959f67e1b2631c4ac66ba2588e18ae92760"
        ],
        [
            "by case: b.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mask_cons b m x s : mask (b :: m) (x :: s) = nseq b x ++ mask m s.",
            "VernacStartTheoremProof",
            "42cc44b3d2bd321d5740024f1bd4446695f14b3a"
        ],
        [
            "by case: b.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_mask m s : size m = size s -> size (mask m s) = count id m.",
            "VernacStartTheoremProof",
            "4f0656ad759096d5f3a152af0133d9d208d528ea"
        ],
        [
            "by move: m s; apply: seq2_ind => // -[] x m s /= ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mask_cat m1 m2 s1 s2 : size m1 = size s1 -> mask (m1 ++ m2) (s1 ++ s2) = mask m1 s1 ++ mask m2 s2.",
            "VernacStartTheoremProof",
            "7d2ca2ec1413b7a59dd0410613bbb57f723e7261"
        ],
        [
            "by move: m1 s1; apply: seq2_ind => // -[] m1 x1 s1 /= ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma has_mask_cons a b m x s : has a (mask (b :: m) (x :: s)) = b && a x || has a (mask m s).",
            "VernacStartTheoremProof",
            "14d973fa8dd598c092f61ed1e13601c2662a2f39"
        ],
        [
            "by case: b.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma has_mask a m s : has a (mask m s) -> has a s.",
            "VernacStartTheoremProof",
            "f1cb944ff20f30694910565575593c9194a78523"
        ],
        [
            "elim: m s => [|b m IHm] [|x s] //; rewrite has_mask_cons /= andbC.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by case: (a x) => //= /IHm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mask_rot m s : size m = size s -> mask (rot n0 m) (rot n0 s) = rot (count id (take n0 m)) (mask m s).",
            "VernacStartTheoremProof",
            "ca1db630652cc697b3fe0ebafa293ca466e56a13"
        ],
        [
            "move=> Ems; rewrite mask_cat ?size_drop ?Ems // -rot_size_cat.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite size_mask -?mask_cat ?size_take ?Ems // !cat_take_drop.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma resize_mask m s : {m1 | size m1 = size s & mask m s = mask m1 s}.",
            "VernacStartTheoremProof",
            "3f7638ad6eba4cf316c0fedcc1d5f6ccac0ac9ca"
        ],
        [
            "by exists (take (size s) m ++ nseq (size s - size m) false); elim: s m => [|x s IHs] [|b m] //=; rewrite (size_nseq, mask_false, IHs).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Mask.",
            "VernacEndSegment",
            "6128e5136ad73cc5167308de74ffe4b8671a7bed"
        ],
        [
            "Section EqMask.",
            "VernacBeginSection",
            "f143a111302f73107c92b49575279534316acbaf"
        ],
        [
            "Variables (n0 : nat) (T : eqType).",
            "VernacAssumption",
            "818b65729ecc085cb4954e8b70102f3214f9265a"
        ],
        [
            "Implicit Types (s : seq T) (m : bitseq).",
            "VernacReserve",
            "b7ec049834b83980b9cffde54a7b12013d1bfdce"
        ],
        [
            "Lemma mem_mask_cons x b m y s : (x \\in mask (b :: m) (y :: s)) = b && (x == y) || (x \\in mask m s).",
            "VernacStartTheoremProof",
            "c95a6726f001a63a501120a29d10259d7761baf7"
        ],
        [
            "by case: b.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_mask x m s : x \\in mask m s -> x \\in s.",
            "VernacStartTheoremProof",
            "8bddd64b45acf192c06a7ddcbda761e58b3b1264"
        ],
        [
            "by rewrite -!has_pred1 => /has_mask.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mask_uniq s : uniq s -> forall m, uniq (mask m s).",
            "VernacStartTheoremProof",
            "e91f2b8d7a5866431ba7318bbfcbd1f453c27c62"
        ],
        [
            "elim: s => [|x s IHs] Uxs [|b m] //=.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "case: b Uxs => //= /andP[s'x Us]; rewrite {}IHs // andbT.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by apply: contra s'x; apply: mem_mask.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_mask_rot m s : size m = size s -> mask (rot n0 m) (rot n0 s) =i mask m s.",
            "VernacStartTheoremProof",
            "d973a9a6d18e81182fed04e282d4b44041f43c29"
        ],
        [
            "by move=> Ems x; rewrite mask_rot // mem_rot.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EqMask.",
            "VernacEndSegment",
            "6e9a9392a84a20d97f99cb2574545d1c4958b7de"
        ],
        [
            "Section Subseq.",
            "VernacBeginSection",
            "72f7e6b415f18e6d2db3e561c4193f8676814088"
        ],
        [
            "Variable T : eqType.",
            "VernacAssumption",
            "2ceeb4536776ca324e5be084d2deb4d476694ef1"
        ],
        [
            "Implicit Type s : seq T.",
            "VernacReserve",
            "d07b3ddcd5fd915117241a5590804fc28c5a4d12"
        ],
        [
            "Fixpoint subseq s1 s2 := if s2 is y :: s2' then if s1 is x :: s1' then subseq (if x == y then s1' else s1) s2' else true else s1 == [::].",
            "VernacFixpoint",
            "6d9a88fe3cf381c06b10caf3e4fbe9e736530dbe"
        ],
        [
            "Lemma sub0seq s : subseq [::] s.",
            "VernacStartTheoremProof",
            "57b7ecb5cdcea4f051ac55b6e8737392c96114df"
        ],
        [
            "by case: s.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subseq0 s : subseq s [::] = (s == [::]).",
            "VernacStartTheoremProof",
            "3cf5848a88c41661ebaf44cf7c90a912e02ca30e"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subseqP s1 s2 : reflect (exists2 m, size m = size s2 & s1 = mask m s2) (subseq s1 s2).",
            "VernacStartTheoremProof",
            "b6fa19c351f792fb5338aeb32a8d5fb54a9143cb"
        ],
        [
            "elim: s2 s1 => [|y s2 IHs2] [|x s1].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by left; exists [::].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by right; do 2!case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by left; exists (nseq (size s2).+1 false); rewrite ?size_nseq //= mask_false.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: {IHs2}(iffP (IHs2 _)) => [] [m sz_m def_s1].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by exists ((x == y) :: m); rewrite /= ?sz_m // -def_s1; case: eqP => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: eqP => [_ | ne_xy]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case: m def_s1 sz_m => [//|[m []//|m]] -> [<-]; exists m.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose i := index true m; have def_m_i: take i m = nseq (size (take i m)) false.",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "apply/all_pred1P; apply/(all_nthP true) => j.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "rewrite size_take ltnNge geq_min negb_or -ltnNge; case/andP=> lt_j_i _.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "rewrite nth_take //= -negb_add addbF -addbT -negb_eqb.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite [_ == _](before_find _ lt_j_i).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have lt_i_m: i < size m.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite ltnNge; apply/negP=> le_m_i; rewrite take_oversize // in def_m_i.",
            "VernacExtend",
            "fe8f197e86415fc7f0a74eda9d312128b9473eda"
        ],
        [
            "by rewrite def_m_i mask_false in def_s1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite size_take lt_i_m in def_m_i.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "exists (take i m ++ drop i.+1 m).",
            "VernacExtend",
            "d270e689840817f8773f2dde9c598fdecce2e37a"
        ],
        [
            "rewrite size_cat size_take size_drop lt_i_m.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite sz_m in lt_i_m *; rewrite subnKC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite {s1 def_s1}[s1](congr1 behead def_s1).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -[s2](cat_take_drop i) -{1}[m](cat_take_drop i) {}def_m_i -cat_cons.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have sz_i_s2: size (take i s2) = i by apply: size_takel; rewrite sz_m in lt_i_m.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite lastI cat_rcons !mask_cat ?size_nseq ?size_belast ?mask_false //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (drop_nth true) // nth_index -?index_mem.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mask_subseq m s : subseq (mask m s) s.",
            "VernacStartTheoremProof",
            "08e3f015415fe7ea1caed060eff9fb81acecf69d"
        ],
        [
            "by apply/subseqP; have [m1] := resize_mask m s; exists m1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subseq_trans : transitive subseq.",
            "VernacStartTheoremProof",
            "0215c7181c42a3615b73dfc99f7620d05a42c8b2"
        ],
        [
            "move=> _ _ s /subseqP[m2 _ ->] /subseqP[m1 _ ->].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "elim: s => [|x s IHs] in m2 m1 *; first by rewrite !mask0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case: m1 => [|[] m1]; first by rewrite mask0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case: m2 => [|[] m2] //; first by rewrite /= eqxx IHs.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case/subseqP: (IHs m2 m1) => m sz_m def_s; apply/subseqP.",
            "VernacExtend",
            "d62e4c271de3f2a9ff5062b8b89d3c57d965c518"
        ],
        [
            "by exists (false :: m); rewrite //= sz_m.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/subseqP: (IHs m2 m1) => m sz_m def_s; apply/subseqP.",
            "VernacExtend",
            "d62e4c271de3f2a9ff5062b8b89d3c57d965c518"
        ],
        [
            "by exists (false :: m); rewrite //= sz_m.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subseq_refl s : subseq s s.",
            "VernacStartTheoremProof",
            "d3d69b859a325fc35b3ff073d8bd4a1db3b7784d"
        ],
        [
            "by elim: s => //= x s IHs; rewrite eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve subseq_refl : core.",
            "VernacHints",
            "6275e768ea9030f47665aaee18d3fd979f05b9a0"
        ],
        [
            "Lemma cat_subseq s1 s2 s3 s4 : subseq s1 s3 -> subseq s2 s4 -> subseq (s1 ++ s2) (s3 ++ s4).",
            "VernacStartTheoremProof",
            "7b350fc1a4346fddbf8e47e0b29b5d5d9ddc0eed"
        ],
        [
            "case/subseqP=> m1 sz_m1 ->; case/subseqP=> m2 sz_m2 ->; apply/subseqP.",
            "VernacExtend",
            "d2380c5ddfa1ceeb28b65f11c73d20f7b7f618ea"
        ],
        [
            "by exists (m1 ++ m2); rewrite ?size_cat ?mask_cat ?sz_m1 ?sz_m2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prefix_subseq s1 s2 : subseq s1 (s1 ++ s2).",
            "VernacStartTheoremProof",
            "666cae140304041c02e5f18c929e230c99abc507"
        ],
        [
            "by rewrite -[s1 in subseq s1]cats0 cat_subseq ?sub0seq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma suffix_subseq s1 s2 : subseq s2 (s1 ++ s2).",
            "VernacStartTheoremProof",
            "ea53d13b3684e6a67a9aaad6c3eb4a51d91ff516"
        ],
        [
            "exact: cat_subseq (sub0seq s1) _.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma take_subseq s i : subseq (take i s) s.",
            "VernacStartTheoremProof",
            "6aa4acdf2b65b012afc896d6adf981b15b0f0cf4"
        ],
        [
            "by rewrite -[s in X in subseq _ X](cat_take_drop i) prefix_subseq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma drop_subseq s i : subseq (drop i s) s.",
            "VernacStartTheoremProof",
            "0ebcdaa72124b8fbf239e4fba3add9b7939f24fc"
        ],
        [
            "by rewrite -[s in X in subseq _ X](cat_take_drop i) suffix_subseq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_subseq s1 s2 : subseq s1 s2 -> {subset s1 <= s2}.",
            "VernacStartTheoremProof",
            "ecebb7bee49cc40df0ec592ececb294018316f54"
        ],
        [
            "by case/subseqP=> m _ -> x; apply: mem_mask.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub1seq x s : subseq [:: x] s = (x \\in s).",
            "VernacStartTheoremProof",
            "c28e0748361bfc14cdf0e3aec34e2afae0c94050"
        ],
        [
            "by elim: s => //= y s; rewrite inE; case: (x == y); rewrite ?sub0seq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_subseq s1 s2 : subseq s1 s2 -> size s1 <= size s2.",
            "VernacStartTheoremProof",
            "fbf9d4b6fc12cfc0b77a7ce4ef4a2cc37236079c"
        ],
        [
            "by case/subseqP=> m sz_m ->; rewrite size_mask -sz_m ?count_size.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_subseq_leqif s1 s2 : subseq s1 s2 -> size s1 <= size s2 ?= iff (s1 == s2).",
            "VernacStartTheoremProof",
            "4376c3cba6cd75fb2419775caaf175148bcc8c6b"
        ],
        [
            "move=> sub12; split; first exact: size_subseq.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/idP/eqP=> [|-> //]; case/subseqP: sub12 => m sz_m ->{s1}.",
            "VernacExtend",
            "20ec428e50c31e1399aee62c5a532bc8417a4b29"
        ],
        [
            "rewrite size_mask -sz_m // -all_count -(eq_all eqb_id).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by move/(@all_pred1P _ true)->; rewrite sz_m mask_true.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subseq_cons s x : subseq s (x :: s).",
            "VernacStartTheoremProof",
            "48b0c3d3f01bd609342697affeb1de5511ef5053"
        ],
        [
            "exact: suffix_subseq [:: x] s.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subseq_rcons s x : subseq s (rcons s x).",
            "VernacStartTheoremProof",
            "2b81ec85e541cb97e1728f1ce6ca2911aca81b9c"
        ],
        [
            "by rewrite -cats1 prefix_subseq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subseq_uniq s1 s2 : subseq s1 s2 -> uniq s2 -> uniq s1.",
            "VernacStartTheoremProof",
            "956ac3c5a6fb45870fef4b49c36eb7497842da7e"
        ],
        [
            "by case/subseqP=> m _ -> Us2; apply: mask_uniq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Subseq.",
            "VernacEndSegment",
            "8e5d01e48e32265a2480039c95ba230d3690a239"
        ],
        [
            "Prenex Implicits subseq.",
            "VernacExtend",
            "0b51111f5c8657bfec991e64eb4261d1ce095e14"
        ],
        [
            "Arguments subseqP {T s1 s2}.",
            "VernacArguments",
            "0c0e8c9d7479192cf87c0cb557e0fa9dee4234c3"
        ],
        [
            "Hint Resolve subseq_refl : core.",
            "VernacHints",
            "6275e768ea9030f47665aaee18d3fd979f05b9a0"
        ],
        [
            "Section Rem.",
            "VernacBeginSection",
            "48eb6f8df082dcf7116572fe269b2561e605f5b1"
        ],
        [
            "Variables (T : eqType) (x : T).",
            "VernacAssumption",
            "53ee168e94aca4de52d2f1dbd75867913c85fd99"
        ],
        [
            "Fixpoint rem s := if s is y :: t then (if y == x then t else y :: rem t) else s.",
            "VernacFixpoint",
            "bf0b6f9f9fc0ba27dda500d21acc096630c96227"
        ],
        [
            "Lemma rem_id s : x \\notin s -> rem s = s.",
            "VernacStartTheoremProof",
            "11c72a2a0ea274ae7de74e86d2c09b7aefcdbdd4"
        ],
        [
            "by elim: s => //= y s IHs /norP[neq_yx /IHs->]; rewrite eq_sym (negbTE neq_yx).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_to_rem s : x \\in s -> perm_eq s (x :: rem s).",
            "VernacStartTheoremProof",
            "92a80af963fc0856ea8e8ac958b6a88e70598ee4"
        ],
        [
            "elim: s => // y s IHs; rewrite inE /= eq_sym perm_eq_sym.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "case: eqP => [-> // | _ /IHs].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite (perm_catCA [:: x] [:: y]) perm_cons perm_eq_sym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_rem s : x \\in s -> size (rem s) = (size s).-1.",
            "VernacStartTheoremProof",
            "6ec3684b848a423318c9fcb88528ce93eb0e07d2"
        ],
        [
            "by move/perm_to_rem/perm_eq_size->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rem_subseq s : subseq (rem s) s.",
            "VernacStartTheoremProof",
            "e39321ea09ce7a176b85c4d5561edee1e7e2b22a"
        ],
        [
            "elim: s => //= y s IHs; rewrite eq_sym.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by case: ifP => _; [apply: subseq_cons | rewrite eqxx].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rem_uniq s : uniq s -> uniq (rem s).",
            "VernacStartTheoremProof",
            "7e0914ed53eb2950f114c2d0a3dedf36ac275436"
        ],
        [
            "by apply: subseq_uniq; apply: rem_subseq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_rem s : {subset rem s <= s}.",
            "VernacStartTheoremProof",
            "04ceca78c16cc36278eac709cff37c2297c2788c"
        ],
        [
            "exact: mem_subseq (rem_subseq s).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rem_filter s : uniq s -> rem s = filter (predC1 x) s.",
            "VernacStartTheoremProof",
            "33509fcc3866df5adb1aa001d9b9c7e30a04751f"
        ],
        [
            "elim: s => //= y s IHs /andP[not_s_y /IHs->].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by case: eqP => //= <-; apply/esym/all_filterP; rewrite all_predC has_pred1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_rem_uniq s : uniq s -> rem s =i [predD1 s & x].",
            "VernacStartTheoremProof",
            "5ab0f3435dbb426839cde8a8a410d3f12a78e831"
        ],
        [
            "by move/rem_filter=> -> y; rewrite mem_filter.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Rem.",
            "VernacEndSegment",
            "92dfb55396074b05c273dd222ca34a5bd7152730"
        ],
        [
            "Section Map.",
            "VernacBeginSection",
            "12ca5ab2f7de3292eec6072cc06769cd51c25553"
        ],
        [
            "Variables (n0 : nat) (T1 : Type) (x1 : T1).",
            "VernacAssumption",
            "7d8700faba0fad88247cd4aad9c61237e5c6f470"
        ],
        [
            "Variables (T2 : Type) (x2 : T2) (f : T1 -> T2).",
            "VernacAssumption",
            "953e801f8616a7a0ec593adf6f077dcfd5b7d67c"
        ],
        [
            "Fixpoint map s := if s is x :: s' then f x :: map s' else [::].",
            "VernacFixpoint",
            "436321988a1e06a0f8634f64f7a64c19fc12e7c3"
        ],
        [
            "Lemma map_cons x s : map (x :: s) = f x :: map s.",
            "VernacStartTheoremProof",
            "a419e7bd6c00b2a1c7f9f92e6dfc73c7467f5304"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_nseq x : map (nseq n0 x) = nseq n0 (f x).",
            "VernacStartTheoremProof",
            "dd1b46a2f570295dce3a5a31209315d00dcd630a"
        ],
        [
            "by elim: n0 => // *; congr (_ :: _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_cat s1 s2 : map (s1 ++ s2) = map s1 ++ map s2.",
            "VernacStartTheoremProof",
            "86d479b5dc2f315539f8d88a970d819d4c45b776"
        ],
        [
            "by elim: s1 => [|x s1 IHs] //=; rewrite IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_map s : size (map s) = size s.",
            "VernacStartTheoremProof",
            "db96a3f64909445b92eb023bf565cb14b7de4f73"
        ],
        [
            "by elim: s => //= x s ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma behead_map s : behead (map s) = map (behead s).",
            "VernacStartTheoremProof",
            "85211845823ab0c61b3e020af4cb765e9d762188"
        ],
        [
            "by case: s.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_map n s : n < size s -> nth x2 (map s) n = f (nth x1 s n).",
            "VernacStartTheoremProof",
            "ae201a7c45092792178591a7ea27f50a24ffe430"
        ],
        [
            "by elim: s n => [|x s IHs] [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_rcons s x : map (rcons s x) = rcons (map s) (f x).",
            "VernacStartTheoremProof",
            "2aa4b0bba44cf2cdb9497f0bd8b70920ba6abb44"
        ],
        [
            "by rewrite -!cats1 map_cat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma last_map s x : last (f x) (map s) = f (last x s).",
            "VernacStartTheoremProof",
            "e7b4de11ce05a3ae8874b5bd5150dcbf2a02cbc6"
        ],
        [
            "by elim: s x => /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma belast_map s x : belast (f x) (map s) = map (belast x s).",
            "VernacStartTheoremProof",
            "896c4de43b954fc68c80218688f810d6c202d0c7"
        ],
        [
            "by elim: s x => //= y s IHs x; rewrite IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma filter_map a s : filter a (map s) = map (filter (preim f a) s).",
            "VernacStartTheoremProof",
            "e105e82bafedf0d86c2a361b6a26baedc0a26951"
        ],
        [
            "by elim: s => //= x s IHs; rewrite (fun_if map) /= IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma find_map a s : find a (map s) = find (preim f a) s.",
            "VernacStartTheoremProof",
            "c88eafb0a915eeeb6121c02c0e31d62a33ad97aa"
        ],
        [
            "by elim: s => //= x s ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma has_map a s : has a (map s) = has (preim f a) s.",
            "VernacStartTheoremProof",
            "06d5d2682746ae14c9957b430125274efe462643"
        ],
        [
            "by elim: s => //= x s ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma all_map a s : all a (map s) = all (preim f a) s.",
            "VernacStartTheoremProof",
            "19fae71f0fe99e3c74ddeeac1f806a96e9a45d85"
        ],
        [
            "by elim: s => //= x s ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma count_map a s : count a (map s) = count (preim f a) s.",
            "VernacStartTheoremProof",
            "7a2ccea957e1df8d304fd8d77f7b93cb664cac64"
        ],
        [
            "by elim: s => //= x s ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_take s : map (take n0 s) = take n0 (map s).",
            "VernacStartTheoremProof",
            "f5e8992c2fde3afa9aa96f6d49e801e56249a953"
        ],
        [
            "by elim: n0 s => [|n IHn] [|x s] //=; rewrite IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_drop s : map (drop n0 s) = drop n0 (map s).",
            "VernacStartTheoremProof",
            "29e96cb2f269a77178072edb0e6d00ddc2c737f9"
        ],
        [
            "by elim: n0 s => [|n IHn] [|x s] //=; rewrite IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_rot s : map (rot n0 s) = rot n0 (map s).",
            "VernacStartTheoremProof",
            "94f17da4b0203862e63593a36545ad587cceec2d"
        ],
        [
            "by rewrite /rot map_cat map_take map_drop.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_rotr s : map (rotr n0 s) = rotr n0 (map s).",
            "VernacStartTheoremProof",
            "9400ea4cc98db1a395f53fb093ea6ca8914f90a2"
        ],
        [
            "by apply: canRL (@rotK n0 T2) _; rewrite -map_rot rotrK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_rev s : map (rev s) = rev (map s).",
            "VernacStartTheoremProof",
            "5bea73980d0c592eccc9a11fb1da6d8508c034d3"
        ],
        [
            "by elim: s => //= x s IHs; rewrite !rev_cons -!cats1 map_cat IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_mask m s : map (mask m s) = mask m (map s).",
            "VernacStartTheoremProof",
            "1171ef02e6dd29e311a3abbfcce3bc54e9a0f0d5"
        ],
        [
            "by elim: m s => [|[|] m IHm] [|x p] //=; rewrite IHm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma inj_map : injective f -> injective map.",
            "VernacStartTheoremProof",
            "615cad9e8133e31a6375fbdf9a4d4d9e5c73cfda"
        ],
        [
            "by move=> injf; elim=> [|y1 s1 IHs] [|y2 s2] //= [/injf-> /IHs->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Map.",
            "VernacEndSegment",
            "8fa7735d92e76131e10c5cfe95a2247db65a4b9f"
        ],
        [
            "Notation \"[ 'seq' E | i <- s ]\" := (map (fun i => E) s) (at level 0, E at level 99, i ident, format \"[ '[hv' 'seq' E '/ ' | i <- s ] ']'\") : seq_scope.",
            "VernacNotation",
            "354effcd2bc5de9cb13fcdffc47485693eaaad21"
        ],
        [
            "Notation \"[ 'seq' E | i <- s & C ]\" := [seq E | i <- [seq i <- s | C]] (at level 0, E at level 99, i ident, format \"[ '[hv' 'seq' E '/ ' | i <- s '/ ' & C ] ']'\") : seq_scope.",
            "VernacNotation",
            "372271a0eee28e1dcf1337434ab4e582ddf0a7c6"
        ],
        [
            "Notation \"[ 'seq' E | i : T <- s ]\" := (map (fun i : T => E) s) (at level 0, E at level 99, i ident, only parsing) : seq_scope.",
            "VernacNotation",
            "5e1916309df13e1458505dceae1cf433258426eb"
        ],
        [
            "Notation \"[ 'seq' E | i : T <- s & C ]\" := [seq E | i : T <- [seq i : T <- s | C]] (at level 0, E at level 99, i ident, only parsing) : seq_scope.",
            "VernacNotation",
            "287bc0449a30c2820f7cb6fea9fcb6f5e50ae02c"
        ],
        [
            "Lemma filter_mask T a (s : seq T) : filter a s = mask (map a s) s.",
            "VernacStartTheoremProof",
            "acf6de2fc76faa9f7210a2670aca8286e2ab5cf8"
        ],
        [
            "by elim: s => //= x s <-; case: (a x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section FilterSubseq.",
            "VernacBeginSection",
            "bed84deeabb4951b4fa7eee79d594941a45678c0"
        ],
        [
            "Variable T : eqType.",
            "VernacAssumption",
            "2ceeb4536776ca324e5be084d2deb4d476694ef1"
        ],
        [
            "Implicit Types (s : seq T) (a : pred T).",
            "VernacReserve",
            "60498faef48c9ccebc73fb630630117ca431f704"
        ],
        [
            "Lemma filter_subseq a s : subseq (filter a s) s.",
            "VernacStartTheoremProof",
            "5e2e971651123ad9d847b8697b3d68128523189f"
        ],
        [
            "by apply/subseqP; exists (map a s); rewrite ?size_map ?filter_mask.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subseq_filter s1 s2 a : subseq s1 (filter a s2) = all a s1 && subseq s1 s2.",
            "VernacStartTheoremProof",
            "6c81eaf9b501a7d73bc9277ec59729e96ed0e16f"
        ],
        [
            "elim: s2 s1 => [|x s2 IHs] [|y s1] //=; rewrite ?andbF ?sub0seq //.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by case a_x: (a x); rewrite /= !IHs /=; case: eqP => // ->; rewrite a_x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subseq_uniqP s1 s2 : uniq s2 -> reflect (s1 = filter (mem s1) s2) (subseq s1 s2).",
            "VernacStartTheoremProof",
            "ca1135c9140dd99471457835f76564b4b87c3134"
        ],
        [
            "move=> uniq_s2; apply: (iffP idP) => [ss12 | ->]; last exact: filter_subseq.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/eqP; rewrite -size_subseq_leqif ?subseq_filter ?(introT allP) //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply/eqP/esym/perm_eq_size.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite uniq_perm_eq ?filter_uniq ?(subseq_uniq ss12) // => x.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite mem_filter; apply: andb_idr; apply: (mem_subseq ss12).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_to_subseq s1 s2 : subseq s1 s2 -> {s3 | perm_eq s2 (s1 ++ s3)}.",
            "VernacStartTheoremProof",
            "79ab579a7cef1e73315da1b40e11b12b2dba902f"
        ],
        [
            "elim Ds2: s2 s1 => [|y s2' IHs] [|x s1] //=; try by exists s2; rewrite Ds2.",
            "VernacExtend",
            "4f3ff96ca2d1111d66bee768f7796420a56e669b"
        ],
        [
            "case: eqP => [-> | _] /IHs[s3 perm_s2] {IHs}.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by exists s3; rewrite perm_cons.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by exists (rcons s3 y); rewrite -cat_cons -perm_rcons -!cats1 catA perm_cat2r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FilterSubseq.",
            "VernacEndSegment",
            "eb28a3f37e27cd0daff378174fde87a2f27d2732"
        ],
        [
            "Arguments subseq_uniqP [T s1 s2].",
            "VernacArguments",
            "ef7659dc5ff9c8b8ae9a1ab7aaad1fd7a42b3977"
        ],
        [
            "Section EqMap.",
            "VernacBeginSection",
            "b8f374a7fa85ec9d383211c3ca0e29916d5344a1"
        ],
        [
            "Variables (n0 : nat) (T1 : eqType) (x1 : T1).",
            "VernacAssumption",
            "6e16bad7dab4be45fcfa6cd0d6c7e554a31d0adf"
        ],
        [
            "Variables (T2 : eqType) (x2 : T2) (f : T1 -> T2).",
            "VernacAssumption",
            "cfaabc5bffd44805bccec5ae242ebf3db39d3ab2"
        ],
        [
            "Implicit Type s : seq T1.",
            "VernacReserve",
            "71ea767d2d7826a63a0be84452bf2db0a8bb6247"
        ],
        [
            "Lemma map_f s x : x \\in s -> f x \\in map f s.",
            "VernacStartTheoremProof",
            "47ad7577bcc4c8b62e6e56662ae56a00adcafa90"
        ],
        [
            "elim: s => [|y s IHs] //=.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by case/predU1P=> [->|Hx]; [apply: predU1l | apply: predU1r; auto].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mapP s y : reflect (exists2 x, x \\in s & y = f x) (y \\in map f s).",
            "VernacStartTheoremProof",
            "a3ccdf25def266634950fb08cb4d4c359af10ce6"
        ],
        [
            "elim: s => [|x s IHs]; first by right; case.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite /= in_cons eq_sym; case Hxy: (f x == y).",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by left; exists x; [rewrite mem_head | rewrite (eqP Hxy)].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: (iffP IHs) => [[x' Hx' ->]|[x' Hx' Dy]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by exists x'; first apply: predU1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move: Dy Hxy => ->; case/predU1P: Hx' => [->|]; [rewrite eqxx | exists x'].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_uniq s : uniq (map f s) -> uniq s.",
            "VernacStartTheoremProof",
            "3c3e226a95729ef4ef5da5337c3e1c230d6b429d"
        ],
        [
            "elim: s => //= x s IHs /andP[not_sfx /IHs->]; rewrite andbT.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by apply: contra not_sfx => sx; apply/mapP; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_inj_in_uniq s : {in s &, injective f} -> uniq (map f s) = uniq s.",
            "VernacStartTheoremProof",
            "a24be8b4729deae1f963f6162016fe379c398a4c"
        ],
        [
            "elim: s => //= x s IHs //= injf; congr (~~ _ && _).",
            "VernacExtend",
            "ddce1258874b5551db478d57e8e266a25ae73dca"
        ],
        [
            "apply/mapP/idP=> [[y sy /injf] | ]; last by exists x.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite mem_head mem_behead // => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: IHs => y z sy sz; apply: injf => //; apply: predU1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_subseq s1 s2 : subseq s1 s2 -> subseq (map f s1) (map f s2).",
            "VernacStartTheoremProof",
            "e87f7b7e41575bc22a688ede1aeac0c306d391ee"
        ],
        [
            "case/subseqP=> m sz_m ->; apply/subseqP.",
            "VernacExtend",
            "d62e4c271de3f2a9ff5062b8b89d3c57d965c518"
        ],
        [
            "by exists m; rewrite ?size_map ?map_mask.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_index_map s x0 x : {in s &, injective f} -> x \\in s -> nth x0 s (index (f x) (map f s)) = x.",
            "VernacStartTheoremProof",
            "0f1c44a6f8d4305f231b47216a1b2dc4c3f955d9"
        ],
        [
            "elim: s => //= y s IHs inj_f s_x; rewrite (inj_in_eq inj_f) ?mem_head //.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "move: s_x; rewrite inE eq_sym; case: eqP => [-> | _] //=; apply: IHs.",
            "VernacExtend",
            "baf26b2a0e43ffbfbf3d72e47e92908480589ac4"
        ],
        [
            "by apply: sub_in2 inj_f => z; apply: predU1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_map s t : perm_eq s t -> perm_eq (map f s) (map f t).",
            "VernacStartTheoremProof",
            "af0d324d29cc28112fa3ed9c2a642789509481f9"
        ],
        [
            "by move/perm_eqP=> Est; apply/perm_eqP=> a; rewrite !count_map Est.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hypothesis Hf : injective f.",
            "VernacAssumption",
            "816b747fb3a51da0ac05061c53f7c04e03de1ca3"
        ],
        [
            "Lemma mem_map s x : (f x \\in map f s) = (x \\in s).",
            "VernacStartTheoremProof",
            "b0d10dbf2423af3e48e90b545d75e2b49433603c"
        ],
        [
            "by apply/mapP/idP=> [[y Hy /Hf->] //|]; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma index_map s x : index (f x) (map f s) = index x s.",
            "VernacStartTheoremProof",
            "5936e46d38c9706cacad7d199ee9992dd3871cf2"
        ],
        [
            "by rewrite /index; elim: s => //= y s IHs; rewrite (inj_eq Hf) IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_inj_uniq s : uniq (map f s) = uniq s.",
            "VernacStartTheoremProof",
            "4563d22887929c81092e4443db720e4213882a2b"
        ],
        [
            "by apply: map_inj_in_uniq; apply: in2W.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_map_inj s t : perm_eq (map f s) (map f t) -> perm_eq s t.",
            "VernacStartTheoremProof",
            "c6265f1e1bf90113d9494da90ff9986ae1c63838"
        ],
        [
            "move/perm_eqP=> Est; apply/allP=> x _ /=.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "have Dx: pred1 x =1 preim f (pred1 (f x)) by move=> y /=; rewrite inj_eq.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite !(eq_count Dx) -!count_map Est.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EqMap.",
            "VernacEndSegment",
            "9cbd9066e8fe3ef2ad5df585911bd20a3d5a2bd0"
        ],
        [
            "Arguments mapP {T1 T2 f s y}.",
            "VernacArguments",
            "94654cb3d184cc7813e03955d4115872f4570acf"
        ],
        [
            "Lemma map_of_seq (T1 : eqType) T2 (s : seq T1) (fs : seq T2) (y0 : T2) : {f | uniq s -> size fs = size s -> map f s = fs}.",
            "VernacStartTheoremProof",
            "bca9d442a1a0683dfdc6d855ce1239d851ce8510"
        ],
        [
            "exists (fun x => nth y0 fs (index x s)) => uAs eq_sz.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply/esym/(@eq_from_nth _ y0); rewrite ?size_map eq_sz // => i ltis.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "by have x0 : T1 by [case: (s) ltis]; rewrite (nth_map x0) // index_uniq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section MapComp.",
            "VernacBeginSection",
            "bb3e6c8c32dd1dd14f096753882c0d102752434f"
        ],
        [
            "Variable T1 T2 T3 : Type.",
            "VernacAssumption",
            "90968a2e84cf97c6321883a67d8a05d414425fdd"
        ],
        [
            "Lemma map_id (s : seq T1) : map id s = s.",
            "VernacStartTheoremProof",
            "a79efd416f9035aa30d69f27219b9e0a5315e6b4"
        ],
        [
            "by elim: s => //= x s ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_map (f1 f2 : T1 -> T2) : f1 =1 f2 -> map f1 =1 map f2.",
            "VernacStartTheoremProof",
            "b3905c373d0f35f15f813319259dc04af56f1108"
        ],
        [
            "by move=> Ef; elim=> //= x s ->; rewrite Ef.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_comp (f1 : T2 -> T3) (f2 : T1 -> T2) s : map (f1 \\o f2) s = map f1 (map f2 s).",
            "VernacStartTheoremProof",
            "00606ec343334a0db51400e618805556c190ced2"
        ],
        [
            "by elim: s => //= x s ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mapK (f1 : T1 -> T2) (f2 : T2 -> T1) : cancel f1 f2 -> cancel (map f1) (map f2).",
            "VernacStartTheoremProof",
            "d56a249345baadf7fcd6e7294998a149d21dccd6"
        ],
        [
            "by move=> eq_f12; elim=> //= x s ->; rewrite eq_f12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MapComp.",
            "VernacEndSegment",
            "2993435901f027e3800c499270888f8f73d42ae1"
        ],
        [
            "Lemma eq_in_map (T1 : eqType) T2 (f1 f2 : T1 -> T2) (s : seq T1) : {in s, f1 =1 f2} <-> map f1 s = map f2 s.",
            "VernacStartTheoremProof",
            "2bc650eda78db0c0c8e89a79604138a6a562a5ba"
        ],
        [
            "elim: s => //= x s IHs; split=> [eqf12 | [f12x /IHs eqf12]]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move=> y /predU1P[-> | /eqf12].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite eqf12 ?mem_head //; congr (_ :: _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by apply/IHs=> y s_y; rewrite eqf12 // mem_behead.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_id_in (T : eqType) f (s : seq T) : {in s, f =1 id} -> map f s = s.",
            "VernacStartTheoremProof",
            "63f2db75c3cd909b4277fabcc21d698579c08385"
        ],
        [
            "by move/eq_in_map->; apply: map_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Pmap.",
            "VernacBeginSection",
            "e4eaaf61b7340608ebfb37614149a40d3a96e77a"
        ],
        [
            "Variables (aT rT : Type) (f : aT -> option rT) (g : rT -> aT).",
            "VernacAssumption",
            "4271595ad55c3a6627fde2f8e6723d652028c145"
        ],
        [
            "Fixpoint pmap s := if s is x :: s' then let r := pmap s' in oapp (cons^~ r) r (f x) else [::].",
            "VernacFixpoint",
            "dae839b572dc45c8576bd627d09146e67d99ef56"
        ],
        [
            "Lemma map_pK : pcancel g f -> cancel (map g) pmap.",
            "VernacStartTheoremProof",
            "0c94416aa2ab5b13278f6336a07991cbe550a105"
        ],
        [
            "by move=> gK; elim=> //= x s ->; rewrite gK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_pmap s : size (pmap s) = count [eta f] s.",
            "VernacStartTheoremProof",
            "f53f1a872eeb8fb77d02865f0164dedd2ebb0840"
        ],
        [
            "by elim: s => //= x s <-; case: (f _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pmapS_filter s : map some (pmap s) = map f (filter [eta f] s).",
            "VernacStartTheoremProof",
            "e029cb1266cac73281837c08678559b0a8594b84"
        ],
        [
            "by elim: s => //= x s; case fx: (f x) => //= [u] <-; congr (_ :: _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hypothesis fK : ocancel f g.",
            "VernacAssumption",
            "5fd6b5910909a0a5368d7f594a7ac570cf2c104c"
        ],
        [
            "Lemma pmap_filter s : map g (pmap s) = filter [eta f] s.",
            "VernacStartTheoremProof",
            "ca605b9d1628e32ef7af487349d3408ac972e860"
        ],
        [
            "by elim: s => //= x s <-; rewrite -{3}(fK x); case: (f _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pmap_cat s t : pmap (s ++ t) = pmap s ++ pmap t.",
            "VernacStartTheoremProof",
            "5e322b16d248b8befa2987b2401525c668eed5bd"
        ],
        [
            "by elim: s => //= x s ->; case/f: x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Pmap.",
            "VernacEndSegment",
            "327c351c3c96364fa989b03ec0288689aa7c6b58"
        ],
        [
            "Section EqPmap.",
            "VernacBeginSection",
            "484712d21eb357a3041e85cf0aea0808a5106d97"
        ],
        [
            "Variables (aT rT : eqType) (f : aT -> option rT) (g : rT -> aT).",
            "VernacAssumption",
            "068b85ff988985d8eeea0f8a0f3efda9160824dc"
        ],
        [
            "Lemma eq_pmap (f1 f2 : aT -> option rT) : f1 =1 f2 -> pmap f1 =1 pmap f2.",
            "VernacStartTheoremProof",
            "a0573ec278bd3aeb21815f072123bdb420793314"
        ],
        [
            "by move=> Ef; elim=> //= x s ->; rewrite Ef.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_pmap s u : (u \\in pmap f s) = (Some u \\in map f s).",
            "VernacStartTheoremProof",
            "25e44bc8feb4b1dee313561f2151cf9fbd1db894"
        ],
        [
            "by elim: s => //= x s IHs; rewrite in_cons -IHs; case: (f x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hypothesis fK : ocancel f g.",
            "VernacAssumption",
            "5fd6b5910909a0a5368d7f594a7ac570cf2c104c"
        ],
        [
            "Lemma can2_mem_pmap : pcancel g f -> forall s u, (u \\in pmap f s) = (g u \\in s).",
            "VernacStartTheoremProof",
            "11f09ba2566efdb033d92cdb0e2589e97fc1194f"
        ],
        [
            "by move=> gK s u; rewrite -(mem_map (pcan_inj gK)) pmap_filter // mem_filter gK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pmap_uniq s : uniq s -> uniq (pmap f s).",
            "VernacStartTheoremProof",
            "ea3f2634207303cf5dbb131b8481b42088489a79"
        ],
        [
            "by move/(filter_uniq [eta f]); rewrite -(pmap_filter fK); apply: map_uniq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_pmap s t : perm_eq s t -> perm_eq (pmap f s) (pmap f t).",
            "VernacStartTheoremProof",
            "4836e94e7d562318ead8f68a0c24f5ffb75dd849"
        ],
        [
            "move=> eq_st; apply/(perm_map_inj (@Some_inj _)); rewrite !pmapS_filter.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "exact/perm_map/perm_filter.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EqPmap.",
            "VernacEndSegment",
            "4f12c24bd6df03738c187d0b0dedb4215c5a9b72"
        ],
        [
            "Section PmapSub.",
            "VernacBeginSection",
            "ea54315a7e9673f022ae5cf3dc6699f4276cbe2c"
        ],
        [
            "Variables (T : Type) (p : pred T) (sT : subType p).",
            "VernacAssumption",
            "cbef7aac54efc41df7ab457b85a7281c2cf2719b"
        ],
        [
            "Lemma size_pmap_sub s : size (pmap (insub : T -> option sT) s) = count p s.",
            "VernacStartTheoremProof",
            "a74a967f18c04b28121c93f87cef773fd9d55cd9"
        ],
        [
            "by rewrite size_pmap (eq_count (isSome_insub _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End PmapSub.",
            "VernacEndSegment",
            "bbd7ad60b8bc656c6d70860c94427cfa25662d7a"
        ],
        [
            "Section EqPmapSub.",
            "VernacBeginSection",
            "8eba76667bcef8dcef6476c14c21dd2f9c2012b6"
        ],
        [
            "Variables (T : eqType) (p : pred T) (sT : subType p).",
            "VernacAssumption",
            "e1470b4126c2b6e28afb546342ba34de4f844ce7"
        ],
        [
            "Let insT : T -> option sT := insub.",
            "VernacDefinition",
            "6ee582257aca088a338c99afb3b9bd1f2ce8a20e"
        ],
        [
            "Lemma mem_pmap_sub s u : (u \\in pmap insT s) = (val u \\in s).",
            "VernacStartTheoremProof",
            "c52d1b6c917ac088b18289374f46b3938e40b657"
        ],
        [
            "exact/(can2_mem_pmap (insubK _))/valK.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pmap_sub_uniq s : uniq s -> uniq (pmap insT s).",
            "VernacStartTheoremProof",
            "a93e748e42bfee42998ba977e1b56312ce02b41e"
        ],
        [
            "exact: (pmap_uniq (insubK _)).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EqPmapSub.",
            "VernacEndSegment",
            "54fbcc103dd2ef9cebf31a4c32f5b8240ade63f7"
        ],
        [
            "Fixpoint iota m n := if n is n'.+1 then m :: iota m.+1 n' else [::].",
            "VernacFixpoint",
            "d2a0974b7bb7a142b3feae1d098bbbc5c87bc80f"
        ],
        [
            "Lemma size_iota m n : size (iota m n) = n.",
            "VernacStartTheoremProof",
            "16375eef9b893dfffd2c0b22c8168016b4b3adb6"
        ],
        [
            "by elim: n m => //= n IHn m; rewrite IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iota_add m n1 n2 : iota m (n1 + n2) = iota m n1 ++ iota (m + n1) n2.",
            "VernacStartTheoremProof",
            "0da0e60f80f8e6e73db497b78c531e7da4e85e01"
        ],
        [
            "by elim: n1 m => //= [|n1 IHn1] m; rewrite ?addn0 // -addSnnS -IHn1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iota_addl m1 m2 n : iota (m1 + m2) n = map (addn m1) (iota m2 n).",
            "VernacStartTheoremProof",
            "a5dbcef246bae53767e8cd0311441f7ede0fc3b3"
        ],
        [
            "by elim: n m2 => //= n IHn m2; rewrite -addnS IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_iota p m n i : i < n -> nth p (iota m n) i = m + i.",
            "VernacStartTheoremProof",
            "bd637cae62086d0b94565f3bd712999417c07ca1"
        ],
        [
            "by move/subnKC <-; rewrite addSnnS iota_add nth_cat size_iota ltnn subnn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_iota m n i : (i \\in iota m n) = (m <= i) && (i < m + n).",
            "VernacStartTheoremProof",
            "d0bafdb3163c238c7284a1402a255713e1fd1792"
        ],
        [
            "elim: n m => [|n IHn] /= m; first by rewrite addn0 ltnNge andbN.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite -addSnnS leq_eqVlt in_cons eq_sym.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case: eqP => [->|_]; [rewrite leq_addr | apply: IHn].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iota_uniq m n : uniq (iota m n).",
            "VernacStartTheoremProof",
            "2b8d0612c7e8e2eb8519caa996b3157daab27baa"
        ],
        [
            "by elim: n m => //= n IHn m; rewrite mem_iota ltnn /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section MakeSeq.",
            "VernacBeginSection",
            "6c8840c2f10d770af3d387d0b41ddadafbc5446a"
        ],
        [
            "Variables (T : Type) (x0 : T).",
            "VernacAssumption",
            "008b8e12fd3c81eeece58c0ba58b5e24b476facb"
        ],
        [
            "Definition mkseq f n : seq T := map f (iota 0 n).",
            "VernacDefinition",
            "fb06aa65e69edbf212fbcb9621147482f6b0a069"
        ],
        [
            "Lemma size_mkseq f n : size (mkseq f n) = n.",
            "VernacStartTheoremProof",
            "63a8b93a2b54c072dad5465d170c3e018197c3f1"
        ],
        [
            "by rewrite size_map size_iota.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_mkseq f g : f =1 g -> mkseq f =1 mkseq g.",
            "VernacStartTheoremProof",
            "6d79ced3621b598006c4979d9187c6f663ef1041"
        ],
        [
            "by move=> Efg n; apply: eq_map Efg _.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_mkseq f n i : i < n -> nth x0 (mkseq f n) i = f i.",
            "VernacStartTheoremProof",
            "f86e3038b93ea47211e8fb07f28049f9d5a312d4"
        ],
        [
            "by move=> Hi; rewrite (nth_map 0) ?nth_iota ?size_iota.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mkseq_nth s : mkseq (nth x0 s) (size s) = s.",
            "VernacStartTheoremProof",
            "246784c921b1d301d357b5e1a1f31b7ee54df06f"
        ],
        [
            "by apply: (@eq_from_nth _ x0); rewrite size_mkseq // => i Hi; rewrite nth_mkseq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MakeSeq.",
            "VernacEndSegment",
            "4f6c722f96d9457b035584cfd144bb1aeb426f69"
        ],
        [
            "Section MakeEqSeq.",
            "VernacBeginSection",
            "6708f8c176ad70e2724c7700bea112a146f487b0"
        ],
        [
            "Variable T : eqType.",
            "VernacAssumption",
            "2ceeb4536776ca324e5be084d2deb4d476694ef1"
        ],
        [
            "Lemma mkseq_uniq (f : nat -> T) n : injective f -> uniq (mkseq f n).",
            "VernacStartTheoremProof",
            "86b4b1ee316ccbf7793f62020728f7b82c815785"
        ],
        [
            "by move/map_inj_uniq->; apply: iota_uniq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_eq_iotaP {s t : seq T} x0 (It := iota 0 (size t)) : reflect (exists2 Is, perm_eq Is It & s = map (nth x0 t) Is) (perm_eq s t).",
            "VernacStartTheoremProof",
            "41cb82da979625444aa603b5232bcddb1247dd2e"
        ],
        [
            "apply: (iffP idP) => [Est | [Is eqIst ->]]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -{2}[t](mkseq_nth x0) perm_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: t => [|x t IHt] in s It Est *.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite (perm_eq_small _ Est) //; exists [::].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /rot_to[k s1 Ds]: x \\in s by rewrite (perm_eq_mem Est) mem_head.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [|Is1 eqIst1 Ds1] := IHt s1; first by rewrite -(perm_cons x) -Ds perm_rot.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "exists (rotr k (0 :: map succn Is1)).",
            "VernacExtend",
            "d93d6c1d8e919e87915c7d660c843f1ad4601575"
        ],
        [
            "by rewrite perm_rot /It /= perm_cons (iota_addl 1) perm_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite map_rotr /= -map_comp -(@eq_map _ _ (nth x0 t)) // -Ds1 -Ds rotK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MakeEqSeq.",
            "VernacEndSegment",
            "87d3d518c13c716611686f0355895304c2829630"
        ],
        [
            "Arguments perm_eq_iotaP {T s t}.",
            "VernacArguments",
            "388847204266df526a11e046e5a2a61cccb94f2b"
        ],
        [
            "Section FoldRight.",
            "VernacBeginSection",
            "fd7f1c727b50069396b00a21393fcf3d11ddc003"
        ],
        [
            "Variables (T : Type) (R : Type) (f : T -> R -> R) (z0 : R).",
            "VernacAssumption",
            "63950ed83380a805c933e5defa032785910f15f1"
        ],
        [
            "Fixpoint foldr s := if s is x :: s' then f x (foldr s') else z0.",
            "VernacFixpoint",
            "2bef78a4a9d729236fd673f90594f7d789d321d7"
        ],
        [
            "End FoldRight.",
            "VernacEndSegment",
            "0d9eec5029aa8015c7b07b23118add7113f71a0d"
        ],
        [
            "Section FoldRightComp.",
            "VernacBeginSection",
            "4ff0bd3c40d50770937cd68adb768671f2204e05"
        ],
        [
            "Variables (T1 T2 : Type) (h : T1 -> T2).",
            "VernacAssumption",
            "3b8988c1880665a20cf9b0221a46cc2bbb4032f9"
        ],
        [
            "Variables (R : Type) (f : T2 -> R -> R) (z0 : R).",
            "VernacAssumption",
            "8ddf375980e8998bd0e0792c4f2e26329b5e120e"
        ],
        [
            "Lemma foldr_cat s1 s2 : foldr f z0 (s1 ++ s2) = foldr f (foldr f z0 s2) s1.",
            "VernacStartTheoremProof",
            "a08e9de85cd107257e92e9d279428ac9f88f7957"
        ],
        [
            "by elim: s1 => //= x s1 ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma foldr_map s : foldr f z0 (map h s) = foldr (fun x z => f (h x) z) z0 s.",
            "VernacStartTheoremProof",
            "e79c756f8da0935732d75ec7eacf22c9dfdbce56"
        ],
        [
            "by elim: s => //= x s ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FoldRightComp.",
            "VernacEndSegment",
            "7981b7daa5e8fafa425630904c9f84e75c79d03b"
        ],
        [
            "Definition sumn := foldr addn 0.",
            "VernacDefinition",
            "e65fe825eecd3c435279cc775f615bc4eb336d6b"
        ],
        [
            "Lemma sumn_nseq x n : sumn (nseq n x) = x * n.",
            "VernacStartTheoremProof",
            "d71d83ff33e3ff5f055c4cdfa14acdc8b6939c0b"
        ],
        [
            "by rewrite mulnC; elim: n => //= n ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sumn_cat s1 s2 : sumn (s1 ++ s2) = sumn s1 + sumn s2.",
            "VernacStartTheoremProof",
            "ea3e5870760b7e50aab966b62713e116384ada67"
        ],
        [
            "by elim: s1 => //= x s1 ->; rewrite addnA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sumn_count T (P : pred T) s : sumn [seq (P i : nat) | i <- s] = count P s.",
            "VernacStartTheoremProof",
            "9dc889639c7023436a6077f73b2e734a3957bf8a"
        ],
        [
            "by elim: s => //= s0 s /= ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sumn_rcons s n : sumn (rcons s n) = sumn s + n.",
            "VernacStartTheoremProof",
            "a365aabb6fe2419f796f42293e26b4664b245883"
        ],
        [
            "by rewrite -cats1 sumn_cat /= addn0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sumn_rev s : sumn (rev s) = sumn s.",
            "VernacStartTheoremProof",
            "b46401dfc9279c7b11c8c8101aaae95d923c41fd"
        ],
        [
            "by elim: s => //= x s <-; rewrite rev_cons sumn_rcons addnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma natnseq0P s : reflect (s = nseq (size s) 0) (sumn s == 0).",
            "VernacStartTheoremProof",
            "f82532beeb8b0c10381e7c0b6506a1749e2bb9b2"
        ],
        [
            "apply: (iffP idP) => [|->]; last by rewrite sumn_nseq.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by elim: s => //= x s IHs; rewrite addn_eq0 => /andP[/eqP-> /IHs <-].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section FoldLeft.",
            "VernacBeginSection",
            "5303cc33108665554c875d2ce260df8067b0cf74"
        ],
        [
            "Variables (T R : Type) (f : R -> T -> R).",
            "VernacAssumption",
            "39a877c595fca5a1a0b537911addc826aa926545"
        ],
        [
            "Fixpoint foldl z s := if s is x :: s' then foldl (f z x) s' else z.",
            "VernacFixpoint",
            "67562a036bd9ce70af4e800994019a24d3ce3e8e"
        ],
        [
            "Lemma foldl_rev z s : foldl z (rev s) = foldr (fun x z => f z x) z s.",
            "VernacStartTheoremProof",
            "4b23dddcf860c10337ffb76e27097c841de5785e"
        ],
        [
            "elim/last_ind: s z => [|s x IHs] z //=.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite rev_rcons -cats1 foldr_cat -IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma foldl_cat z s1 s2 : foldl z (s1 ++ s2) = foldl (foldl z s1) s2.",
            "VernacStartTheoremProof",
            "2d3d9b9dfde3ee8cd768dc8ee4fb00060c9d6bcd"
        ],
        [
            "by rewrite -(revK (s1 ++ s2)) foldl_rev rev_cat foldr_cat -!foldl_rev !revK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FoldLeft.",
            "VernacEndSegment",
            "87102afe2543dcc3ffe84e9cc776e16b27794ab3"
        ],
        [
            "Section Scan.",
            "VernacBeginSection",
            "b0f701333703da87e456c9b76b54e7fc71cb42ac"
        ],
        [
            "Variables (T1 : Type) (x1 : T1) (T2 : Type) (x2 : T2).",
            "VernacAssumption",
            "8dd5e5cd62c7bb751347de82c7a20a7c23380c81"
        ],
        [
            "Variables (f : T1 -> T1 -> T2) (g : T1 -> T2 -> T1).",
            "VernacAssumption",
            "de3a31aa1741ab914297cc9f3a168609d8041650"
        ],
        [
            "Fixpoint pairmap x s := if s is y :: s' then f x y :: pairmap y s' else [::].",
            "VernacFixpoint",
            "27fb3f05f11e0140aeb8f3b3821f9141c0f59e17"
        ],
        [
            "Lemma size_pairmap x s : size (pairmap x s) = size s.",
            "VernacStartTheoremProof",
            "1004e752bace1f753981eb08530e553665cbb037"
        ],
        [
            "by elim: s x => //= y s IHs x; rewrite IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pairmap_cat x s1 s2 : pairmap x (s1 ++ s2) = pairmap x s1 ++ pairmap (last x s1) s2.",
            "VernacStartTheoremProof",
            "de6882ed86052ac4f8c1bb0cfa2274678ae61e56"
        ],
        [
            "by elim: s1 x => //= y s1 IHs1 x; rewrite IHs1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_pairmap s n : n < size s -> forall x, nth x2 (pairmap x s) n = f (nth x1 (x :: s) n) (nth x1 s n).",
            "VernacStartTheoremProof",
            "b077a91d4aa02c131ace76fc8cc3051f781a2f67"
        ],
        [
            "by elim: s n => [|y s IHs] [|n] //= Hn x; apply: IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint scanl x s := if s is y :: s' then let x' := g x y in x' :: scanl x' s' else [::].",
            "VernacFixpoint",
            "3ddeb6748120cda290991772ab1abf6b8b31ee48"
        ],
        [
            "Lemma size_scanl x s : size (scanl x s) = size s.",
            "VernacStartTheoremProof",
            "bdcc665dda49d466bf8ade824b73f8f599869f3e"
        ],
        [
            "by elim: s x => //= y s IHs x; rewrite IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scanl_cat x s1 s2 : scanl x (s1 ++ s2) = scanl x s1 ++ scanl (foldl g x s1) s2.",
            "VernacStartTheoremProof",
            "0e9624f33663992012b05fbc2ca1fbff3c5f5aa9"
        ],
        [
            "by elim: s1 x => //= y s1 IHs1 x; rewrite IHs1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_scanl s n : n < size s -> forall x, nth x1 (scanl x s) n = foldl g x (take n.+1 s).",
            "VernacStartTheoremProof",
            "bc7e24d1017f6ba932801000798b91669701b5c4"
        ],
        [
            "by elim: s n => [|y s IHs] [|n] Hn x //=; rewrite ?take0 ?IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma scanlK : (forall x, cancel (g x) (f x)) -> forall x, cancel (scanl x) (pairmap x).",
            "VernacStartTheoremProof",
            "ce447d85b34e0c699705e56957ee5417d1f03a28"
        ],
        [
            "by move=> Hfg x s; elim: s x => //= y s IHs x; rewrite Hfg IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pairmapK : (forall x, cancel (f x) (g x)) -> forall x, cancel (pairmap x) (scanl x).",
            "VernacStartTheoremProof",
            "5e5bde1502f298913be8381c3047c89080b1640d"
        ],
        [
            "by move=> Hgf x s; elim: s x => //= y s IHs x; rewrite Hgf IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Scan.",
            "VernacEndSegment",
            "4156cfe497e29e1488f1e41b22c7274c98b4a48d"
        ],
        [
            "Prenex Implicits mask map pmap foldr foldl scanl pairmap.",
            "VernacExtend",
            "55854e9821dc8d24ee6c8a28743457278d154ec0"
        ],
        [
            "Section Zip.",
            "VernacBeginSection",
            "847b9bcfe56522bd6491c29c12dc9c8db56b9042"
        ],
        [
            "Variables S T : Type.",
            "VernacAssumption",
            "91f50dbe10d5f8c1a81c9649f057821f07616886"
        ],
        [
            "Fixpoint zip (s : seq S) (t : seq T) {struct t} := match s, t with | x :: s', y :: t' => (x, y) :: zip s' t' | _, _ => [::] end.",
            "VernacFixpoint",
            "7bd3fa0620b203275cf8060198b0b57033654c73"
        ],
        [
            "Definition unzip1 := map (@fst S T).",
            "VernacDefinition",
            "073286eb1471a4021a5df37087a188bebf748c68"
        ],
        [
            "Definition unzip2 := map (@snd S T).",
            "VernacDefinition",
            "bcbf483637c1cc08ba3e5f105878500967442404"
        ],
        [
            "Lemma zip_unzip s : zip (unzip1 s) (unzip2 s) = s.",
            "VernacStartTheoremProof",
            "d5246c4d7742ea1a5dd9efa904790f0548c65886"
        ],
        [
            "by elim: s => [|[x y] s /= ->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unzip1_zip s t : size s <= size t -> unzip1 (zip s t) = s.",
            "VernacStartTheoremProof",
            "b461bac974df2153b7f79a25fcfbbedd725ff42e"
        ],
        [
            "by elim: s t => [|x s IHs] [|y t] //= le_s_t; rewrite IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unzip2_zip s t : size t <= size s -> unzip2 (zip s t) = t.",
            "VernacStartTheoremProof",
            "8bd71e16a75d3c8264d33753b65ce34d16cd80a0"
        ],
        [
            "by elim: s t => [|x s IHs] [|y t] //= le_t_s; rewrite IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size1_zip s t : size s <= size t -> size (zip s t) = size s.",
            "VernacStartTheoremProof",
            "3be147d4e8341eae16105deea724422474595bd9"
        ],
        [
            "by elim: s t => [|x s IHs] [|y t] //= Hs; rewrite IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size2_zip s t : size t <= size s -> size (zip s t) = size t.",
            "VernacStartTheoremProof",
            "2e9403e6686a8cddf05645923b2a140f4a72cba9"
        ],
        [
            "by elim: s t => [|x s IHs] [|y t] //= Hs; rewrite IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_zip s t : size (zip s t) = minn (size s) (size t).",
            "VernacStartTheoremProof",
            "a490c472a42455ec6627b90ec0e78df1cb70947a"
        ],
        [
            "by elim: s t => [|x s IHs] [|t2 t] //=; rewrite IHs -add1n addn_minr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma zip_cat s1 s2 t1 t2 : size s1 = size t1 -> zip (s1 ++ s2) (t1 ++ t2) = zip s1 t1 ++ zip s2 t2.",
            "VernacStartTheoremProof",
            "8a5a14b488c685d4215575d5428fe17ffb6e8748"
        ],
        [
            "by elim: s1 t1 => [|x s IHs] [|y t] //= [/IHs->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_zip x y s t i : size s = size t -> nth (x, y) (zip s t) i = (nth x s i, nth y t i).",
            "VernacStartTheoremProof",
            "0b44bc88c8a98965a997862a74e48288e221dd3c"
        ],
        [
            "by elim: i s t => [|i IHi] [|y1 s1] [|y2 t] //= [/IHi->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_zip_cond p s t i : nth p (zip s t) i = (if i < size (zip s t) then (nth p.1 s i, nth p.2 t i) else p).",
            "VernacStartTheoremProof",
            "25059181b1f425937fccb71cbbb0938378586dfe"
        ],
        [
            "rewrite size_zip ltnNge geq_min.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by elim: s t i => [|x s IHs] [|y t] [|i] //=; rewrite ?orbT -?IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma zip_rcons s1 s2 z1 z2 : size s1 = size s2 -> zip (rcons s1 z1) (rcons s2 z2) = rcons (zip s1 s2) (z1, z2).",
            "VernacStartTheoremProof",
            "1f56932fa048fc91de0ab02f203e29ddc03ff8d6"
        ],
        [
            "by move=> eq_sz; rewrite -!cats1 zip_cat //= eq_sz.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rev_zip s1 s2 : size s1 = size s2 -> rev (zip s1 s2) = zip (rev s1) (rev s2).",
            "VernacStartTheoremProof",
            "71495b727b5b62cd4c341546e8e7d8740d66b36e"
        ],
        [
            "elim: s1 s2 => [|x s1 IHs] [|y s2] //= [eq_sz].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite !rev_cons zip_rcons ?IHs ?size_rev.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Zip.",
            "VernacEndSegment",
            "68443f4f1a81bbd1c36cf72b046763e456bb2a9f"
        ],
        [
            "Prenex Implicits zip unzip1 unzip2.",
            "VernacExtend",
            "257049f83feca15345a997f62e65cc09fea45eb2"
        ],
        [
            "Section Flatten.",
            "VernacBeginSection",
            "16c2638a4ca5d7ff619b9972ffbaa529d985a1d0"
        ],
        [
            "Variable T : Type.",
            "VernacAssumption",
            "a15b17e37c4241158d544882375356c273dc93f2"
        ],
        [
            "Implicit Types (s : seq T) (ss : seq (seq T)).",
            "VernacReserve",
            "05b508f3ab44d51f29f002800bf41b99e94b8de6"
        ],
        [
            "Definition flatten := foldr cat (Nil T).",
            "VernacDefinition",
            "3e061ffb95537e58804d48c8b794af596de5f972"
        ],
        [
            "Definition shape := map (@size T).",
            "VernacDefinition",
            "309b2bde5e9ac2c36ffb7b50d47a5db61f86ec01"
        ],
        [
            "Fixpoint reshape sh s := if sh is n :: sh' then take n s :: reshape sh' (drop n s) else [::].",
            "VernacFixpoint",
            "0b1d85b6a304d6b3574b1403b66fc6429f3916d2"
        ],
        [
            "Definition flatten_index sh r c := sumn (take r sh) + c.",
            "VernacDefinition",
            "a3b94d36df4bd9c11e84f1f05a3205358c32fa7f"
        ],
        [
            "Definition reshape_index sh i := find (pred1 0) (scanl subn i.+1 sh).",
            "VernacDefinition",
            "6dff73f3f967c2601401f778e391c470cbc721bd"
        ],
        [
            "Definition reshape_offset sh i := i - sumn (take (reshape_index sh i) sh).",
            "VernacDefinition",
            "ba51bf22b3d9e689a0a06b0c1d5e1ad32c71c907"
        ],
        [
            "Lemma size_flatten ss : size (flatten ss) = sumn (shape ss).",
            "VernacStartTheoremProof",
            "b95af4466ccf585835e6932f9de2e2a7ed891e0a"
        ],
        [
            "by elim: ss => //= s ss <-; rewrite size_cat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma flatten_cat ss1 ss2 : flatten (ss1 ++ ss2) = flatten ss1 ++ flatten ss2.",
            "VernacStartTheoremProof",
            "f9c709908178e7f5c2cfc736a5926bec9167e464"
        ],
        [
            "by elim: ss1 => //= s ss1 ->; rewrite catA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_reshape sh s : size (reshape sh s) = size sh.",
            "VernacStartTheoremProof",
            "26176f933f273429f62e1aae1badb1e02f75e704"
        ],
        [
            "by elim: sh s => //= s0 sh IHsh s; rewrite IHsh.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_reshape (sh : seq nat) l n : nth [::] (reshape sh l) n = take (nth 0 sh n) (drop (sumn (take n sh)) l).",
            "VernacStartTheoremProof",
            "fc2890dacd53b80824e92e5d8c8d44aca1409f99"
        ],
        [
            "elim: n sh l => [| n IHn] [| sh0 sh] l; rewrite ?take0 ?drop0 //=.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by rewrite addnC -drop_drop; apply: IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma flattenK ss : reshape (shape ss) (flatten ss) = ss.",
            "VernacStartTheoremProof",
            "4f5e09a94600cdf7d15c905ae4cbb6ca0e49d11a"
        ],
        [
            "by elim: ss => //= s ss IHss; rewrite take_size_cat ?drop_size_cat ?IHss.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma reshapeKr sh s : size s <= sumn sh -> flatten (reshape sh s) = s.",
            "VernacStartTheoremProof",
            "f7baa6d562c0ef6bf4239bab64caea53372b1870"
        ],
        [
            "elim: sh s => [[]|n sh IHsh] //= s sz_s; rewrite IHsh ?cat_take_drop //.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by rewrite size_drop leq_subLR.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma reshapeKl sh s : size s >= sumn sh -> shape (reshape sh s) = sh.",
            "VernacStartTheoremProof",
            "33cd41793da7d4b35b2f42b44520471843221bf3"
        ],
        [
            "elim: sh s => [[]|n sh IHsh] //= s sz_s.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "rewrite size_takel; last exact: leq_trans (leq_addr _ _) sz_s.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite IHsh // -(leq_add2l n) size_drop -maxnE leq_max sz_s orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma flatten_rcons ss s : flatten (rcons ss s) = flatten ss ++ s.",
            "VernacStartTheoremProof",
            "c7cb6b9ac5de237c8af0cb423ab90b5cf4bf7816"
        ],
        [
            "by rewrite -cats1 flatten_cat /= cats0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma flatten_seq1 s : flatten [seq [:: x] | x <- s] = s.",
            "VernacStartTheoremProof",
            "ebe0ee6305858d66716499a7a1b144f9ec4b48c3"
        ],
        [
            "by elim: s => //= s0 s ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma count_flatten ss P : count P (flatten ss) = sumn [seq count P x | x <- ss].",
            "VernacStartTheoremProof",
            "843d7e7dcdb40f8ce2399a245be91c59fd18e4e6"
        ],
        [
            "by elim: ss => //= s ss IHss; rewrite count_cat IHss.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma filter_flatten ss (P : pred T) : filter P (flatten ss) = flatten [seq filter P i | i <- ss].",
            "VernacStartTheoremProof",
            "2d9fe26bde3a0a065982ec01bbfda3274b2e471b"
        ],
        [
            "by elim: ss => // s ss /= <-; apply: filter_cat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rev_flatten ss : rev (flatten ss) = flatten (rev (map rev ss)).",
            "VernacStartTheoremProof",
            "a227c65609eb1081c1e17718e2b0dbb9b1c5895d"
        ],
        [
            "elim: ss => //= s ss IHss.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite rev_cons flatten_rcons -IHss rev_cat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_shape ss i : nth 0 (shape ss) i = size (nth [::] ss i).",
            "VernacStartTheoremProof",
            "1157582e7dd95bad4ca9866de1b1c2b9b2345a08"
        ],
        [
            "rewrite /shape; case: (ltnP i (size ss)) => Hi; first exact: nth_map.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !nth_default // size_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma shape_rev ss : shape (rev ss) = rev (shape ss).",
            "VernacStartTheoremProof",
            "c6bbcb3a9926c7072725252849d9c8b8ed66d442"
        ],
        [
            "exact: map_rev.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_from_flatten_shape ss1 ss2 : flatten ss1 = flatten ss2 -> shape ss1 = shape ss2 -> ss1 = ss2.",
            "VernacStartTheoremProof",
            "5f1c52614f07489d1907d7bdecf8ab9d4794e954"
        ],
        [
            "by move=> Eflat Esh; rewrite -[LHS]flattenK Eflat Esh flattenK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rev_reshape sh s : size s = sumn sh -> rev (reshape sh s) = map rev (reshape (rev sh) (rev s)).",
            "VernacStartTheoremProof",
            "6fdca3550de67c4ed9d03c63ac0e08184745dab9"
        ],
        [
            "move=> sz_s; apply/(canLR revK)/eq_from_flatten_shape.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "rewrite reshapeKr ?sz_s // -rev_flatten reshapeKr ?revK //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite size_rev sumn_rev sz_s.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "transitivity (rev (shape (reshape (rev sh) (rev s)))).",
            "VernacExtend",
            "65fb372ddfafa8d8f4adb3b87accaef7a9678d6b"
        ],
        [
            "by rewrite !reshapeKl ?revK ?size_rev ?sz_s ?sumn_rev.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite shape_rev; congr (rev _); rewrite -[RHS]map_comp.",
            "VernacExtend",
            "9d78117f9fa00d8b79d08aff717709f8d084ba84"
        ],
        [
            "by apply: eq_map => t /=; rewrite size_rev.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma reshape_rcons s sh n (m := sumn sh) : m + n = size s -> reshape (rcons sh n) s = rcons (reshape sh (take m s)) (drop m s).",
            "VernacStartTheoremProof",
            "0f8cc3b9fec201dbdd5b46a4f4e4adae1c578bc6"
        ],
        [
            "move=> Dmn; apply/(can_inj revK); rewrite rev_reshape ?rev_rcons ?sumn_rcons //.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "rewrite /= take_rev drop_rev -Dmn addnK revK -rev_reshape //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite size_takel // -Dmn leq_addr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma flatten_indexP sh r c : c < nth 0 sh r -> flatten_index sh r c < sumn sh.",
            "VernacStartTheoremProof",
            "577a70719346ce859575021505d9cd52d3401f3a"
        ],
        [
            "move=> lt_c_sh; rewrite -[sh in sumn sh](cat_take_drop r) sumn_cat ltn_add2l.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "suffices lt_r_sh: r < size sh by rewrite (drop_nth 0 lt_r_sh) ltn_addr.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by case: ltnP => // le_sh_r; rewrite nth_default in lt_c_sh.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma reshape_indexP sh i : i < sumn sh -> reshape_index sh i < size sh.",
            "VernacStartTheoremProof",
            "39e7a08f3809734122aa04b2b856faa18406e6b7"
        ],
        [
            "rewrite /reshape_index; elim: sh => //= n sh IHsh in i *; rewrite subn_eq0.",
            "VernacExtend",
            "c376f01ebc4f30ac37ca603296f6548f23fe4a48"
        ],
        [
            "by have [// | le_n_i] := ltnP i n; rewrite -leq_subLR subSn // => /IHsh.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma reshape_offsetP sh i : i < sumn sh -> reshape_offset sh i < nth 0 sh (reshape_index sh i).",
            "VernacStartTheoremProof",
            "c73b51679f42c127f78d5bbcbfa72d81b8fb985a"
        ],
        [
            "rewrite /reshape_offset /reshape_index; elim: sh => //= n sh IHsh in i *.",
            "VernacExtend",
            "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
        ],
        [
            "rewrite subn_eq0; have [| le_n_i] := ltnP i n; first by rewrite subn0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -leq_subLR /= subnDA subSn // => /IHsh.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma reshape_indexK sh i : flatten_index sh (reshape_index sh i) (reshape_offset sh i) = i.",
            "VernacStartTheoremProof",
            "c7125a3ed1d87b59c48f3adda13d05659d150369"
        ],
        [
            "rewrite /reshape_offset /reshape_index /flatten_index -subSKn.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "elim: sh => //= n sh IHsh in i *; rewrite subn_eq0; have [//|le_n_i] := ltnP.",
            "VernacExtend",
            "ccee67ded37cbdb863a7863d6bf3474936020f74"
        ],
        [
            "by rewrite /= subnDA subSn // -addnA IHsh subnKC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma flatten_indexKl sh r c : c < nth 0 sh r -> reshape_index sh (flatten_index sh r c) = r.",
            "VernacStartTheoremProof",
            "eaf7e5c2cda9be43066c62cf6444a97a12b344d8"
        ],
        [
            "rewrite /reshape_index /flatten_index.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "elim: sh r => [|n sh IHsh] [|r] //= lt_c_sh; first by rewrite ifT.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -addnA -addnS addKn IHsh.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma flatten_indexKr sh r c : c < nth 0 sh r -> reshape_offset sh (flatten_index sh r c) = c.",
            "VernacStartTheoremProof",
            "e7f507c2263a68a76a551dd292dd6ff8bf67a219"
        ],
        [
            "rewrite /reshape_offset /reshape_index /flatten_index.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "elim: sh r => [|n sh IHsh] [|r] //= lt_c_sh; first by rewrite ifT ?subn0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -addnA -addnS addKn /= subnDl IHsh.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_flatten x0 ss i (r := reshape_index (shape ss) i) : nth x0 (flatten ss) i = nth x0 (nth [::] ss r) (reshape_offset (shape ss) i).",
            "VernacStartTheoremProof",
            "bb8fc873b2aade49f0590d5bdd060222d63845fa"
        ],
        [
            "rewrite /reshape_offset -subSKn {}/r /reshape_index.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "elim: ss => //= s ss IHss in i *; rewrite subn_eq0 nth_cat.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by have [//|le_s_i] := ltnP; rewrite subnDA subSn /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma reshape_leq sh i1 i2 (r1 := reshape_index sh i1) (c1 := reshape_offset sh i1) (r2 := reshape_index sh i2) (c2 := reshape_offset sh i2) : (i1 <= i2) = ((r1 < r2) || ((r1 == r2) && (c1 <= c2))).",
            "VernacStartTheoremProof",
            "150a06d219dd8ae772f151df3d1d379e3991ea58"
        ],
        [
            "rewrite {}/r1 {}/c1 {}/r2 {}/c2 /reshape_offset /reshape_index.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "elim: sh => [|s0 s IHs] /= in i1 i2 *; rewrite ?subn0 ?subn_eq0 //.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "have [[] i1s0 [] i2s0] := (ltnP i1 s0, ltnP i2 s0); first by rewrite !subn0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by apply: leq_trans i2s0; apply/ltnW.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by apply/negP => /(leq_trans i1s0); rewrite leqNgt i2s0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite !subSn // !eqSS !ltnS !subnDA -IHs leq_subLR subnKC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Flatten.",
            "VernacEndSegment",
            "373fa2d9550a0a8d80d815a20ec0a7e4209045e1"
        ],
        [
            "Prenex Implicits flatten shape reshape.",
            "VernacExtend",
            "a518c2f0598a727b51e05cf4e2e86aa8c858b326"
        ],
        [
            "Lemma map_flatten S T (f : T -> S) ss : map f (flatten ss) = flatten (map (map f) ss).",
            "VernacStartTheoremProof",
            "a1a401556bc25cb6b62189c3c12f0c3df198f4c1"
        ],
        [
            "by elim: ss => // s ss /= <-; apply: map_cat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sumn_flatten (ss : seq (seq nat)) : sumn (flatten ss) = sumn (map sumn ss).",
            "VernacStartTheoremProof",
            "2a198dfea0437d8dba8fea3b8d5be1e687766fb2"
        ],
        [
            "by elim: ss => // s ss /= <-; apply: sumn_cat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_reshape T S (f : T -> S) sh s : map (map f) (reshape sh s) = reshape sh (map f s).",
            "VernacStartTheoremProof",
            "7ced6fee9ba3cae0b93b1e185c114c747029d38c"
        ],
        [
            "by elim: sh s => //= sh0 sh IHsh s; rewrite map_take IHsh map_drop.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section EqFlatten.",
            "VernacBeginSection",
            "63524ae879bda662d7a3e0089d393a0926e1446c"
        ],
        [
            "Variables S T : eqType.",
            "VernacAssumption",
            "6c266319af6b8910576ff87bebfbe75084426d1c"
        ],
        [
            "Lemma flattenP (A : seq (seq T)) x : reflect (exists2 s, s \\in A & x \\in s) (x \\in flatten A).",
            "VernacStartTheoremProof",
            "72180415402e5f68c2e37ecb22435a9a8d1ad46d"
        ],
        [
            "elim: A => /= [|s A /iffP IH_A]; [by right; case | rewrite mem_cat].",
            "VernacExtend",
            "6f713a0299dcb4531f4e0400d0b4ac3fb1e0973c"
        ],
        [
            "have [s_x|s'x] := @idP (x \\in s); first by left; exists s; rewrite ?mem_head.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: IH_A => [[t] | [t /predU1P[->|]]]; exists t; rewrite // mem_behead.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments flattenP {A x}.",
            "VernacArguments",
            "38386d3bb7a570d468e69dfd6e82ba2af71d750b"
        ],
        [
            "Lemma flatten_mapP (A : S -> seq T) s y : reflect (exists2 x, x \\in s & y \\in A x) (y \\in flatten (map A s)).",
            "VernacStartTheoremProof",
            "1279e23cd6d4e54efcaf48970541ace3435b3de7"
        ],
        [
            "apply: (iffP flattenP) => [[_ /mapP[x sx ->]] | [x sx]] Axy; first by exists x.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by exists (A x); rewrite ?map_f.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EqFlatten.",
            "VernacEndSegment",
            "cc685ed72a3cfa1d440fe025962a746bcfa09ba2"
        ],
        [
            "Arguments flattenP {T A x}.",
            "VernacArguments",
            "8f4af7948af60713a50517c904d8404ba8c13db1"
        ],
        [
            "Arguments flatten_mapP {S T A s y}.",
            "VernacArguments",
            "1519260885258119b5e87e899226f854e5445627"
        ],
        [
            "Lemma perm_undup_count (T : eqType) (s : seq T) : perm_eq (flatten [seq nseq (count_mem x s) x | x <- undup s]) s.",
            "VernacStartTheoremProof",
            "2e0f471e74dbd804a1986351ea4fe8b9823cadd6"
        ],
        [
            "pose N x r := count_mem x (flatten [seq nseq (count_mem y s) y | y <- r]).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "apply/allP=> x _; rewrite /= -/(N x _).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "have Nx0 r (r'x : x \\notin r): N x r = 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/count_memPn; apply: contra r'x => /flatten_mapP[y r_y /nseqP[->]].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [|s'x] := boolP (x \\in s); last by rewrite Nx0 ?mem_undup ?(count_memPn _).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite -mem_undup => /perm_to_rem/catCA_perm_subst->; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move=> s1 s2 s3; rewrite /N !map_cat !flatten_cat !count_cat addnCA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /N /= count_cat -/(N x _) Nx0 ?mem_rem_uniq ?undup_uniq ?inE ?eqxx //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite addn0 -{2}(size_nseq (_ s) x) -all_count all_pred1_nseq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section AllPairs.",
            "VernacBeginSection",
            "a1e0b57828aa2376a267b5d62616ce6f0e04b6c1"
        ],
        [
            "Variables (S T R : Type) (f : S -> T -> R).",
            "VernacAssumption",
            "0e8a4e78411c30c691df77b9117d16affe6054e1"
        ],
        [
            "Implicit Types (s : seq S) (t : seq T).",
            "VernacReserve",
            "3b3e4ab3eef9865c2e0f2e4974a52fc9b31e28a5"
        ],
        [
            "Definition allpairs s t := foldr (fun x => cat (map (f x) t)) [::] s.",
            "VernacDefinition",
            "61b30c5c66421753a1aa27b7cd68a6bf2601a044"
        ],
        [
            "Lemma size_allpairs s t : size (allpairs s t) = size s * size t.",
            "VernacStartTheoremProof",
            "6252a839965475fb05132669e57ce68e45ce146a"
        ],
        [
            "by elim: s => //= x s IHs; rewrite size_cat size_map IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma allpairs_cat s1 s2 t : allpairs (s1 ++ s2) t = allpairs s1 t ++ allpairs s2 t.",
            "VernacStartTheoremProof",
            "cee05a64d31a3215587b6d3c1e76fff7f288ef63"
        ],
        [
            "by elim: s1 => //= x s1 ->; rewrite catA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End AllPairs.",
            "VernacEndSegment",
            "c9130f92c96f4250e61cc3e919c6be8c25fb6011"
        ],
        [
            "Prenex Implicits allpairs.",
            "VernacExtend",
            "d2130643e1e39426b8783f39c4ec613d9b8c54a2"
        ],
        [
            "Notation \"[ 'seq' E | i <- s , j <- t ]\" := (allpairs (fun i j => E) s t) (at level 0, E at level 99, i ident, j ident, format \"[ '[hv' 'seq' E '/ ' | i <- s , '/ ' j <- t ] ']'\") : seq_scope.",
            "VernacNotation",
            "d1b3e8c6cfb5db15a1f324dbdfac53363ebc5483"
        ],
        [
            "Notation \"[ 'seq' E | i : T <- s , j : U <- t ]\" := (allpairs (fun (i : T) (j : U) => E) s t) (at level 0, E at level 99, i ident, j ident, only parsing) : seq_scope.",
            "VernacNotation",
            "84c6c5fa31f850f827b8d27ba768bb2884eb74a9"
        ],
        [
            "Section EqAllPairs.",
            "VernacBeginSection",
            "62fa9b8d46efa5aed81b8c9d53cfb973437c73e9"
        ],
        [
            "Variables S T : eqType.",
            "VernacAssumption",
            "6c266319af6b8910576ff87bebfbe75084426d1c"
        ],
        [
            "Implicit Types (R : eqType) (s : seq S) (t : seq T).",
            "VernacReserve",
            "8f7ea26f2e4fd6f689174bea1b4163243f975bf0"
        ],
        [
            "Lemma allpairsP R (f : S -> T -> R) s t z : reflect (exists p, [/\\ p.1 \\in s, p.2 \\in t & z = f p.1 p.2]) (z \\in allpairs f s t).",
            "VernacStartTheoremProof",
            "84ca2eb615aa5ef18fc005db58718eb8c00610c9"
        ],
        [
            "elim: s => [|x s IHs /=]; first by right=> [[p []]].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite mem_cat; have [fxt_z | not_fxt_z] := altP mapP.",
            "VernacExtend",
            "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
        ],
        [
            "by left; have [y t_y ->] := fxt_z; exists (x, y); rewrite mem_head.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: (iffP IHs) => [] [[x' y] /= [s_x' t_y def_z]]; exists (x', y).",
            "VernacExtend",
            "381d5710e29dfc757190634490ee8b4a9cd77c34"
        ],
        [
            "by rewrite !inE predU1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by have [def_x' | //] := predU1P s_x'; rewrite def_z def_x' map_f in not_fxt_z.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_allpairs R (f : S -> T -> R) s1 t1 s2 t2 : s1 =i s2 -> t1 =i t2 -> allpairs f s1 t1 =i allpairs f s2 t2.",
            "VernacStartTheoremProof",
            "a8e1d4811ed4728c934c8efd9a5ab6dfcf8b9909"
        ],
        [
            "move=> eq_s eq_t z.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by apply/allpairsP/allpairsP=> [] [p fpz]; exists p; rewrite eq_s eq_t in fpz *.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma allpairs_catr R (f : S -> T -> R) s t1 t2 : allpairs f s (t1 ++ t2) =i allpairs f s t1 ++ allpairs f s t2.",
            "VernacStartTheoremProof",
            "d4fc86c3798d943fda355ed5ed1669149c3f651f"
        ],
        [
            "move=> z; rewrite mem_cat.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "apply/allpairsP/orP=> [[p [sP1]]|].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite mem_cat; case/orP; [left | right]; apply/allpairsP; exists p.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case=> /allpairsP[p [sp1 sp2 ->]]; exists p; rewrite mem_cat sp2 ?orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma allpairs_uniq R (f : S -> T -> R) s t : uniq s -> uniq t -> {in [seq (x, y) | x <- s, y <- t] &, injective (prod_curry f)} -> uniq (allpairs f s t).",
            "VernacStartTheoremProof",
            "d66bbf6899d57ec85b8ed795dde2187f92b08f2c"
        ],
        [
            "move=> Us Ut inj_f; have: all (mem s) s by apply/allP.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "elim: {-2}s Us => //= x s1 IHs /andP[s1'x Us1] /andP[sx1 ss1].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "rewrite cat_uniq {}IHs // andbT map_inj_in_uniq ?Ut // => [|y1 y2 *].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply/hasPn=> _ /allpairsP[z [s1z tz ->]]; apply/mapP=> [[y ty Dy]].",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "suffices [Dz1 _]: (z.1, z.2) = (x, y) by rewrite -Dz1 s1z in s1'x.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "apply: inj_f => //; apply/allpairsP; last by exists (x, y).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by have:= allP ss1 _ s1z; exists z.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices: (x, y1) = (x, y2) by case.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by apply: inj_f => //; apply/allpairsP; [exists (x, y1) | exists (x, y2)].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EqAllPairs.",
            "VernacEndSegment",
            "2f7f04fb1daade2b4e3b146e021c6e1065618e44"
        ],
        [
            "Section AllIff.",
            "VernacBeginSection",
            "93666284a361c3aa379fd148b3ccf33b02a8d814"
        ],
        [
            "Inductive all_iff_and (P Q : Prop) : Prop := AllIffConj of P & Q.",
            "VernacInductive",
            "5b0ff89aba869afd4cda9a3e69a03c5b1bce645e"
        ],
        [
            "Definition all_iff (P0 : Prop) (Ps : seq Prop) : Prop := (fix aux (P : Prop) (Qs : seq Prop) : Prop := if Qs is Q :: Qs then all_iff_and (P -> Q) (aux Q Qs) else P -> P0 : Prop) P0 Ps.",
            "VernacDefinition",
            "616c8b7b680d4afbbf19259ceb09c02885d716d3"
        ],
        [
            "Lemma all_iffLR P0 Ps : all_iff P0 Ps -> forall m n, nth P0 (P0 :: Ps) m -> nth P0 (P0 :: Ps) n.",
            "VernacStartTheoremProof",
            "07a855263905c1734465b2e1f86ef95c79cdea31"
        ],
        [
            "have homo_ltn T (f : nat -> T) (r : T -> T -> Prop) : (forall y x z, r x y -> r y z -> r x z) -> (forall i, r (f i) (f i.+1)) -> {homo f : i j / i < j >-> r i j}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> rtrans rfS x y; elim: y x => // y ihy x; rewrite ltnS leq_eqVlt.",
            "VernacExtend",
            "cbbd752ffe762291637c91622d62599b0c60d123"
        ],
        [
            "case/orP=> [/eqP-> // | ltxy]; apply: rtrans (rfS _); exact: ihy.",
            "VernacExtend",
            "2601770e6b0673602561bb5724ff31d9d993f449"
        ],
        [
            "move=> Ps_iff; have ltn_imply : {homo nth P0 Ps : m n / m < n >-> (m -> n)}.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "apply: homo_ltn => [??? xy yz /xy /yz //|i].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "elim: Ps i P0 Ps_iff => [|P [|/=Q Ps] IHPs] [|i]//= P0 [P0P Ps_iff]//=; do ?by [rewrite nth_nil|case: Ps_iff].",
            "VernacExtend",
            "76a5e31afa9f762ef77303567a3381de5e93bd22"
        ],
        [
            "by case: Ps_iff => [PQ Ps_iff]; apply: IHPs; split => // /P0P.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have {ltn_imply}leq_imply : {homo nth P0 Ps : m n / m <= n >-> (m -> n)}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> m n; rewrite leq_eqVlt => /predU1P[->//|/ltn_imply].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> [:P0ton Pnto0] [|m] [|n]//=.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "abstract: P0ton n.",
            "VernacExtend",
            "6dee0a3c7f08fdffe952c321d966d0fc6306dcfd"
        ],
        [
            "suff P0to0 : P0 -> nth P0 Ps 0 by move=> /P0to0; apply: leq_imply.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "by case: Ps Ps_iff {leq_imply} => // P Ps [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "abstract: Pnto0 m => /(leq_imply m (maxn (size Ps) m)).",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite nth_default ?leq_max ?leqnn // orbT ; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=> /Pnto0; apply: P0ton.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma all_iffP P0 Ps : all_iff P0 Ps -> forall m n, nth P0 (P0 :: Ps) m <-> nth P0 (P0 :: Ps) n.",
            "VernacStartTheoremProof",
            "6d768a48aca9026a8dd206ca7dc2c8cd032e5981"
        ],
        [
            "by move=> /all_iffLR iffPs m n; split => /iffPs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End AllIff.",
            "VernacEndSegment",
            "059774df76487a0fc87047220adaa0549ea59e87"
        ],
        [
            "Arguments all_iffLR {P0 Ps}.",
            "VernacArguments",
            "1018bb96df5183a97cffb654e03d0d7c2999ff24"
        ],
        [
            "Arguments all_iffP {P0 Ps}.",
            "VernacArguments",
            "d53ae0ec18996af5f2db5c5e862d7ecedfd48839"
        ],
        [
            "Coercion all_iffP : all_iff >-> Funclass.",
            "VernacCoercion",
            "2649695c2ae24e1ec719b9a0f8419f262f100986"
        ],
        [
            "Notation \"[ '<->' P0 ; P1 ; .. ; Pn ]\" := (all_iff P0 (P1 :: .. [:: Pn] ..)) (at level 0, format \"[ '<->' '[' P0 ; '/' P1 ; '/' .. ; '/' Pn ']' ]\") : form_scope.",
            "VernacNotation",
            "b06d58df124bfda1576d0e7bf05951d253819d5b"
        ],
        [
            "Section All2.",
            "VernacBeginSection",
            "a63ad85ee029298b5c4f492647ffa396d85732f8"
        ],
        [
            "Context {T U : Type} (p : T -> U -> bool).",
            "VernacContext",
            "4824211bda02319b2d6105405356689c45431628"
        ],
        [
            "Fixpoint all2 s1 s2 := match s1, s2 with | [::], [::] => true | x1 :: s1, x2 :: s2 => p x1 x2 && all2 s1 s2 | _, _ => false end.",
            "VernacFixpoint",
            "e5a0893d6256c610ebbe2118c0a77624517c36d9"
        ],
        [
            "Lemma all2E s1 s2 : all2 s1 s2 = (size s1 == size s2) && all [pred xy | p xy.1 xy.2] (zip s1 s2).",
            "VernacStartTheoremProof",
            "c409f5e61d80067012db73e708ea6a16279cd44f"
        ],
        [
            "by elim: s1 s2 => [|x s1 ihs1] [|y s2] //=; rewrite ihs1 andbCA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End All2.",
            "VernacEndSegment",
            "5285d70899a56bf96eb05cde1e7f868c27bfe07b"
        ],
        [
            "Arguments all2 {T U} p !s1 !s2.",
            "VernacArguments",
            "905788e7dd93200b2e14fc22590be813676c6d4e"
        ]
    ],
    "proofs": [
        {
            "name": "size0nil",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "by case: s.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nilP",
            "line_nb": 31,
            "steps": [
                {
                    "command": [
                        "by case: s => [|x s]; constructor.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_behead",
            "line_nb": 37,
            "steps": [
                {
                    "command": [
                        "by case: s.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_ncons",
            "line_nb": 42,
            "steps": [
                {
                    "command": [
                        "by elim: n => //= n ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_nseq",
            "line_nb": 45,
            "steps": [
                {
                    "command": [
                        "by rewrite size_ncons addn0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cat0s",
            "line_nb": 52,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cat1s",
            "line_nb": 55,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cat_cons",
            "line_nb": 58,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cat_nseq",
            "line_nb": 61,
            "steps": [
                {
                    "command": [
                        "by elim: n => //= n ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cats0",
            "line_nb": 64,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "catA",
            "line_nb": 67,
            "steps": [
                {
                    "command": [
                        "by elim: s1 => //= x s1 ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_cat",
            "line_nb": 70,
            "steps": [
                {
                    "command": [
                        "by elim: s1 => //= x s1 ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rcons_cons",
            "line_nb": 74,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cats1",
            "line_nb": 77,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lastI",
            "line_nb": 82,
            "steps": [
                {
                    "command": [
                        "by elim: s x => [|y s IHs] x //=; rewrite IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "last_cons",
            "line_nb": 85,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_rcons",
            "line_nb": 88,
            "steps": [
                {
                    "command": [
                        "by rewrite -cats1 size_cat addnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_belast",
            "line_nb": 91,
            "steps": [
                {
                    "command": [
                        "by elim: s x => [|y s IHs] x //=; rewrite IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "last_cat",
            "line_nb": 94,
            "steps": [
                {
                    "command": [
                        "by elim: s1 x => [|y s1 IHs] x //=; rewrite IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "last_rcons",
            "line_nb": 97,
            "steps": [
                {
                    "command": [
                        "by rewrite -cats1 last_cat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "belast_cat",
            "line_nb": 100,
            "steps": [
                {
                    "command": [
                        "by elim: s1 x => [|y s1 IHs] x //=; rewrite IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "belast_rcons",
            "line_nb": 103,
            "steps": [
                {
                    "command": [
                        "by rewrite lastI -!cats1 belast_cat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cat_rcons",
            "line_nb": 106,
            "steps": [
                {
                    "command": [
                        "by rewrite -cats1 -catA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rcons_cat",
            "line_nb": 109,
            "steps": [
                {
                    "command": [
                        "by rewrite -!cats1 catA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lastP",
            "line_nb": 113,
            "steps": [
                {
                    "command": [
                        "case: s => [|x s]; [left | rewrite lastI; right].",
                        "VernacExtend",
                        "df502ce9f27d15070fcbf8467ebad2f6ea5217b3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "last_ind",
            "line_nb": 116,
            "steps": [
                {
                    "command": [
                        "move=> Hnil Hlast s; rewrite -(cat0s s).",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "elim: s [::] Hnil => [|x s2 IHs] s1 Hs1; first by rewrite cats0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -cat_rcons; auto.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth0",
            "line_nb": 123,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_default",
            "line_nb": 126,
            "steps": [
                {
                    "command": [
                        "by elim: s n => [|x s IHs] [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_nil",
            "line_nb": 129,
            "steps": [
                {
                    "command": [
                        "by case: n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "last_nth",
            "line_nb": 132,
            "steps": [
                {
                    "command": [
                        "by elim: s x => [|y s IHs] x /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_last",
            "line_nb": 135,
            "steps": [
                {
                    "command": [
                        "by case: s => //= x s; rewrite last_nth.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_behead",
            "line_nb": 138,
            "steps": [
                {
                    "command": [
                        "by case: s n => [|x s] [|n].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_cat",
            "line_nb": 141,
            "steps": [
                {
                    "command": [
                        "by elim: s1 n => [|x s1 IHs] [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_rcons",
            "line_nb": 144,
            "steps": [
                {
                    "command": [
                        "by elim: s n => [|y s IHs] [] //=; apply: nth_nil.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_ncons",
            "line_nb": 147,
            "steps": [
                {
                    "command": [
                        "by elim: m n => [|m IHm] [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_nseq",
            "line_nb": 150,
            "steps": [
                {
                    "command": [
                        "by elim: m n => [|m IHm] [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_from_nth",
            "line_nb": 153,
            "steps": [
                {
                    "command": [
                        "elim: s1 s2 => [|x1 s1 IHs1] [|x2 s2] //= [eq_sz] eq_s12.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by rewrite [x1](eq_s12 0) // (IHs1 s2) // => i; apply: (eq_s12 i.+1).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_set_nth",
            "line_nb": 157,
            "steps": [
                {
                    "command": [
                        "elim: s n => [|x s IHs] [|n] //=.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by rewrite size_ncons addn1 maxn0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by rewrite maxnE subn1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite IHs -add1n addn_maxr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set_nth_nil",
            "line_nb": 165,
            "steps": [
                {
                    "command": [
                        "by case: n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_set_nth",
            "line_nb": 168,
            "steps": [
                {
                    "command": [
                        "elim: s n => [|x s IHs] [|n] [|m] //=; rewrite ?nth_nil ?IHs // nth_ncons eqSS.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "case: ltngtP => // [lt_nm | ->]; last by rewrite subnn.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite nth_default // subn_gt0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set_set_nth",
            "line_nb": 173,
            "steps": [
                {
                    "command": [
                        "have [-> | ne_n12] := altP eqP.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply: eq_from_nth => [|i _]; first by rewrite !size_set_nth maxnA maxnn.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by do 2!rewrite !nth_set_nth /=; case: eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: eq_from_nth => [|i _]; first by rewrite !size_set_nth maxnCA.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "do 2!rewrite !nth_set_nth /=; case: eqP => // ->.",
                        "VernacExtend",
                        "00ba158d222255c76e4931f459cd922d35170a11"
                    ]
                },
                {
                    "command": [
                        "by rewrite eq_sym -if_neg ne_n12.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_filter",
            "line_nb": 188,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s <-; case (a x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "has_count",
            "line_nb": 191,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s ->; case (a x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "count_size",
            "line_nb": 194,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s; case: (a x); last apply: leqW.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_count",
            "line_nb": 197,
            "steps": [
                {
                    "command": [
                        "elim: s => //= x s; case: (a x) => _ //=.",
                        "VernacExtend",
                        "df63f96bedbb0673aecb42521d90011325a86c94"
                    ]
                },
                {
                    "command": [
                        "by rewrite add0n eqn_leq andbC ltnNge count_size.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "filter_all",
            "line_nb": 201,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s IHs; case: ifP => //= ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "filter_id",
            "line_nb": 208,
            "steps": [
                {
                    "command": [
                        "by apply/all_filterP; apply: filter_all.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "has_find",
            "line_nb": 211,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s IHs; case (a x); rewrite ?leqnn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "find_size",
            "line_nb": 214,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s IHs; case (a x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "find_cat",
            "line_nb": 217,
            "steps": [
                {
                    "command": [
                        "by elim: s1 => //= x s1 IHs; case: (a x) => //; rewrite IHs (fun_if succn).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "has_nil",
            "line_nb": 220,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "has_seq1",
            "line_nb": 223,
            "steps": [
                {
                    "command": [
                        "exact: orbF.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "has_nseq",
            "line_nb": 226,
            "steps": [
                {
                    "command": [
                        "by elim: n => //= n ->; apply: andKb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "has_seqb",
            "line_nb": 229,
            "steps": [
                {
                    "command": [
                        "by rewrite has_nseq lt0b.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_nil",
            "line_nb": 232,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_seq1",
            "line_nb": 235,
            "steps": [
                {
                    "command": [
                        "exact: andbT.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_nseq",
            "line_nb": 238,
            "steps": [
                {
                    "command": [
                        "by elim: n => //= n ->; apply: orKb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_nseqb",
            "line_nb": 241,
            "steps": [
                {
                    "command": [
                        "by rewrite all_nseq eqb0 implybE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "find_nseq",
            "line_nb": 244,
            "steps": [
                {
                    "command": [
                        "by elim: n => //= n ->; case: (a x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_find",
            "line_nb": 247,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s IHs; case Hx: (a x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "before_find",
            "line_nb": 250,
            "steps": [
                {
                    "command": [
                        "by elim: s i => //= x s IHs; case Hx: (a x) => [|] // [|i] //; apply: (IHs i).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "filter_cat",
            "line_nb": 253,
            "steps": [
                {
                    "command": [
                        "by elim: s1 => //= x s1 ->; case (a x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "filter_rcons",
            "line_nb": 256,
            "steps": [
                {
                    "command": [
                        "by rewrite -!cats1 filter_cat /=; case (a x); rewrite /= ?cats0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "count_cat",
            "line_nb": 259,
            "steps": [
                {
                    "command": [
                        "by rewrite -!size_filter filter_cat size_cat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "has_cat",
            "line_nb": 262,
            "steps": [
                {
                    "command": [
                        "by elim: s1 => [|x s1 IHs] //=; rewrite IHs orbA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "has_rcons",
            "line_nb": 265,
            "steps": [
                {
                    "command": [
                        "by rewrite -cats1 has_cat has_seq1 orbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_cat",
            "line_nb": 268,
            "steps": [
                {
                    "command": [
                        "by elim: s1 => [|x s1 IHs] //=; rewrite IHs andbA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_rcons",
            "line_nb": 271,
            "steps": [
                {
                    "command": [
                        "by rewrite -cats1 all_cat all_seq1 andbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_find",
            "line_nb": 275,
            "steps": [
                {
                    "command": [
                        "by move=> Ea; elim=> //= x s IHs; rewrite Ea IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_filter",
            "line_nb": 278,
            "steps": [
                {
                    "command": [
                        "by move=> Ea; elim=> //= x s IHs; rewrite Ea IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_count",
            "line_nb": 281,
            "steps": [
                {
                    "command": [
                        "by move=> Ea s; rewrite -!size_filter (eq_filter Ea).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_has",
            "line_nb": 284,
            "steps": [
                {
                    "command": [
                        "by move=> Ea s; rewrite !has_count (eq_count Ea).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_all",
            "line_nb": 287,
            "steps": [
                {
                    "command": [
                        "by move=> Ea s; rewrite !all_count (eq_count Ea).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_find",
            "line_nb": 293,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s IHs; case: ifP => // /(contraFF (@s12 x))->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_has",
            "line_nb": 296,
            "steps": [
                {
                    "command": [
                        "by rewrite !has_find; apply: leq_ltn_trans (sub_find s).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_count",
            "line_nb": 299,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s; apply: leq_add; case a1x: (a1 x); rewrite // s12.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_all",
            "line_nb": 302,
            "steps": [
                {
                    "command": [
                        "by rewrite !all_count !eqn_leq !count_size => /leq_trans-> //; apply: sub_count.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "filter_pred0",
            "line_nb": 306,
            "steps": [
                {
                    "command": [
                        "by elim: s.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "filter_predT",
            "line_nb": 309,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "filter_predI",
            "line_nb": 312,
            "steps": [
                {
                    "command": [
                        "elim: s => //= x s IHs; rewrite andbC IHs.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "by case: (a2 x) => //=; case (a1 x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "count_pred0",
            "line_nb": 316,
            "steps": [
                {
                    "command": [
                        "by rewrite -size_filter filter_pred0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "count_predT",
            "line_nb": 319,
            "steps": [
                {
                    "command": [
                        "by rewrite -size_filter filter_predT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "count_predUI",
            "line_nb": 322,
            "steps": [
                {
                    "command": [
                        "elim: s => //= x s IHs; rewrite /= addnCA -addnA IHs addnA addnC.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "by rewrite -!addnA; do 2 nat_congr; case (a1 x); case (a2 x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "count_predC",
            "line_nb": 326,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s IHs; rewrite addnCA -addnA IHs addnA addn_negb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "count_filter",
            "line_nb": 329,
            "steps": [
                {
                    "command": [
                        "by rewrite -!size_filter filter_predI.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "has_pred0",
            "line_nb": 332,
            "steps": [
                {
                    "command": [
                        "by rewrite has_count count_pred0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "has_predT",
            "line_nb": 335,
            "steps": [
                {
                    "command": [
                        "by rewrite has_count count_predT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "has_predC",
            "line_nb": 338,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s ->; case (a x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "has_predU",
            "line_nb": 341,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s ->; rewrite -!orbA; do !bool_congr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_pred0",
            "line_nb": 344,
            "steps": [
                {
                    "command": [
                        "by rewrite all_count count_pred0 eq_sym.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_predT",
            "line_nb": 347,
            "steps": [
                {
                    "command": [
                        "by rewrite all_count count_predT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_predC",
            "line_nb": 350,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s ->; case (a x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_predI",
            "line_nb": 353,
            "steps": [
                {
                    "command": [
                        "apply: (can_inj negbK); rewrite negb_and -!has_predC -has_predU.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_has => x; rewrite /= negb_and.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "drop_behead",
            "line_nb": 358,
            "steps": [
                {
                    "command": [
                        "by elim: n0 => [|n IHn] [|x s] //; rewrite iterSr -IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "drop0",
            "line_nb": 361,
            "steps": [
                {
                    "command": [
                        "by case: s.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "drop1",
            "line_nb": 364,
            "steps": [
                {
                    "command": [
                        "by case=> [|x [|y s]].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "drop_oversize",
            "line_nb": 367,
            "steps": [
                {
                    "command": [
                        "by elim: s n => [|x s IHs] [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "drop_size",
            "line_nb": 370,
            "steps": [
                {
                    "command": [
                        "by rewrite drop_oversize // leqnn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "drop_cons",
            "line_nb": 373,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_drop",
            "line_nb": 376,
            "steps": [
                {
                    "command": [
                        "by elim: s n0 => [|x s IHs] [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "drop_cat",
            "line_nb": 379,
            "steps": [
                {
                    "command": [
                        "by elim: s1 n0 => [|x s1 IHs] [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "drop_size_cat",
            "line_nb": 382,
            "steps": [
                {
                    "command": [
                        "by move <-; elim: s1 => //=; rewrite drop0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nconsK",
            "line_nb": 385,
            "steps": [
                {
                    "command": [
                        "by elim: n => // -[].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "drop_drop",
            "line_nb": 388,
            "steps": [
                {
                    "command": [
                        "by elim: n2 s => [s|n2 IHn1 [|x s]]; rewrite ?drop0 ?addn0 ?addnS /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "take0",
            "line_nb": 392,
            "steps": [
                {
                    "command": [
                        "by case: s.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "take_oversize",
            "line_nb": 395,
            "steps": [
                {
                    "command": [
                        "by elim: s n => [|x s IHs] [|n] //= /IHs->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "take_size",
            "line_nb": 398,
            "steps": [
                {
                    "command": [
                        "by rewrite take_oversize // leqnn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "drop_rcons",
            "line_nb": 404,
            "steps": [
                {
                    "command": [
                        "by elim: s n0 => [|y s IHs] [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cat_take_drop",
            "line_nb": 407,
            "steps": [
                {
                    "command": [
                        "by elim: s n0 => [|x s IHs] [|n] //=; rewrite IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_takel",
            "line_nb": 410,
            "steps": [
                {
                    "command": [
                        "by move/subKn; rewrite -size_drop -[in size s](cat_take_drop s) size_cat addnK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_take",
            "line_nb": 413,
            "steps": [
                {
                    "command": [
                        "have [le_sn | lt_ns] := leqP (size s) n0; first by rewrite take_oversize.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite size_takel // ltnW.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "take_cat",
            "line_nb": 417,
            "steps": [
                {
                    "command": [
                        "elim: s1 n0 => [|x s1 IHs] [|n] //=.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by rewrite ltnS subSS -(fun_if (cons x)) -IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "take_size_cat",
            "line_nb": 421,
            "steps": [
                {
                    "command": [
                        "by move <-; elim: s1 => [|x s1 IHs]; rewrite ?take0 //= IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "takel_cat",
            "line_nb": 424,
            "steps": [
                {
                    "command": [
                        "move=> Hn0 s2; rewrite take_cat ltn_neqAle Hn0 andbT.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by case: (n0 =P size s1) => //= ->; rewrite subnn take0 cats0 take_size.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_drop",
            "line_nb": 428,
            "steps": [
                {
                    "command": [
                        "have [lt_n0_s | le_s_n0] := ltnP n0 (size s).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -{2}[s]cat_take_drop nth_cat size_take lt_n0_s /= addKn.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite ltnNge leq_addr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite !nth_default //; first exact: leq_trans (leq_addr _ _).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite size_drop (eqnP le_s_n0).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_take",
            "line_nb": 435,
            "steps": [
                {
                    "command": [
                        "move=> lt_i_n0 s; case lt_n0_s: (n0 < size s).",
                        "VernacExtend",
                        "a01b3d93f426ff68d360351709a5fa5af822af32"
                    ]
                },
                {
                    "command": [
                        "by rewrite -{2}[s]cat_take_drop nth_cat size_take lt_n0_s /= lt_i_n0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite -{1}[s]cats0 take_cat lt_n0_s /= cats0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "drop_nth",
            "line_nb": 440,
            "steps": [
                {
                    "command": [
                        "by elim: s n => [|x s IHs] [|n] Hn //=; rewrite ?drop0 1?IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "take_nth",
            "line_nb": 443,
            "steps": [
                {
                    "command": [
                        "by elim: s n => [|x s IHs] //= [|n] Hn /=; rewrite ?take0 -?IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rot0",
            "line_nb": 447,
            "steps": [
                {
                    "command": [
                        "by rewrite /rot drop0 take0 cats0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_rot",
            "line_nb": 450,
            "steps": [
                {
                    "command": [
                        "by rewrite -{2}[s]cat_take_drop /rot !size_cat addnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rot_oversize",
            "line_nb": 453,
            "steps": [
                {
                    "command": [
                        "by move=> le_s_n; rewrite /rot take_oversize ?drop_oversize.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rot_size",
            "line_nb": 456,
            "steps": [
                {
                    "command": [
                        "exact: rot_oversize.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "has_rot",
            "line_nb": 459,
            "steps": [
                {
                    "command": [
                        "by rewrite has_cat orbC -has_cat cat_take_drop.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rot_size_cat",
            "line_nb": 462,
            "steps": [
                {
                    "command": [
                        "by rewrite /rot take_size_cat ?drop_size_cat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rotK",
            "line_nb": 466,
            "steps": [
                {
                    "command": [
                        "move=> s; rewrite /rotr size_rot -size_drop {2}/rot.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite rot_size_cat cat_take_drop.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rot_inj",
            "line_nb": 470,
            "steps": [
                {
                    "command": [
                        "exact (can_inj rotK).",
                        "VernacExtend",
                        "4a8620e8c591b59c12332c2a5d196689df77b87f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rot1_cons",
            "line_nb": 473,
            "steps": [
                {
                    "command": [
                        "by rewrite /rot /= take0 drop0 -cats1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "seq2_ind",
            "line_nb": 490,
            "steps": [
                {
                    "command": [
                        "by move=> Pnil Pcons; elim=> [|x s IHs] [] //= x2 s2 [] /IHs/Pcons.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "catrev_catl",
            "line_nb": 496,
            "steps": [
                {
                    "command": [
                        "by elim: s u => /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "catrev_catr",
            "line_nb": 499,
            "steps": [
                {
                    "command": [
                        "by elim: s t => //= x s IHs t; rewrite -IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "catrevE",
            "line_nb": 502,
            "steps": [
                {
                    "command": [
                        "by rewrite -catrev_catr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rev_cons",
            "line_nb": 505,
            "steps": [
                {
                    "command": [
                        "by rewrite -cats1 -catrevE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_rev",
            "line_nb": 508,
            "steps": [
                {
                    "command": [
                        "by elim: s => // x s IHs; rewrite rev_cons size_rcons IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rev_cat",
            "line_nb": 511,
            "steps": [
                {
                    "command": [
                        "by rewrite -catrev_catr -catrev_catl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rev_rcons",
            "line_nb": 514,
            "steps": [
                {
                    "command": [
                        "by rewrite -cats1 rev_cat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "revK",
            "line_nb": 517,
            "steps": [
                {
                    "command": [
                        "by elim=> //= x s IHs; rewrite rev_cons rev_rcons IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_rev",
            "line_nb": 520,
            "steps": [
                {
                    "command": [
                        "elim/last_ind: s => // s x IHs in n *.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "rewrite rev_rcons size_rcons ltnS subSS -cats1 nth_cat /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: n => [|n] lt_n_s; first by rewrite subn0 ltnn subnn.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -{2}(subnK lt_n_s) -addSnnS leq_addr /= -IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "filter_rev",
            "line_nb": 526,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s IH; rewrite fun_if !rev_cons filter_rcons IH.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "count_rev",
            "line_nb": 529,
            "steps": [
                {
                    "command": [
                        "by rewrite -!size_filter filter_rev size_rev.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "has_rev",
            "line_nb": 532,
            "steps": [
                {
                    "command": [
                        "by rewrite !has_count count_rev.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_rev",
            "line_nb": 535,
            "steps": [
                {
                    "command": [
                        "by rewrite !all_count count_rev size_rev.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "take_rev",
            "line_nb": 538,
            "steps": [
                {
                    "command": [
                        "have /orP[le_s_n | le_n_s] := leq_total (size s) n.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite (eqnP le_s_n) drop0 take_oversize ?size_rev.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -[s in LHS](cat_take_drop (size s - n)).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite rev_cat take_size_cat // size_rev size_drop subKn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "drop_rev",
            "line_nb": 544,
            "steps": [
                {
                    "command": [
                        "rewrite -[s]revK take_rev !revK size_rev -minnE /minn.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by case: ifP => // /ltnW-le_s_n; rewrite !drop_oversize ?size_rev.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqseqP",
            "line_nb": 556,
            "steps": [
                {
                    "command": [
                        "move; elim=> [|x1 s1 IHs] [|x2 s2]; do [by constructor | simpl].",
                        "VernacExtend",
                        "15d3cbad47768eb0551ac593d3d63acdd13eeaf7"
                    ]
                },
                {
                    "command": [
                        "case: (x1 =P x2) => [<-|neqx]; last by right; case.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply: (iffP (IHs s2)) => [<-|[]].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqseqE",
            "line_nb": 563,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqseq_cons",
            "line_nb": 566,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqseq_cat",
            "line_nb": 569,
            "steps": [
                {
                    "command": [
                        "elim: s1 s2 => [|x1 s1 IHs] [|x2 s2] //= [sz12].",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by rewrite !eqseq_cons -andbA IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqseq_rcons",
            "line_nb": 573,
            "steps": [
                {
                    "command": [
                        "by rewrite -(can_eq revK) !rev_rcons eqseq_cons andbC (can_eq revK).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_eq0",
            "line_nb": 576,
            "steps": [
                {
                    "command": [
                        "exact: (sameP nilP eqP).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "has_filter",
            "line_nb": 579,
            "steps": [
                {
                    "command": [
                        "by rewrite -size_eq0 size_filter has_count lt0n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_cons",
            "line_nb": 588,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_nil",
            "line_nb": 591,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_seq1",
            "line_nb": 594,
            "steps": [
                {
                    "command": [
                        "by rewrite in_cons orbF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_seq2",
            "line_nb": 598,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_seq3",
            "line_nb": 601,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_seq4",
            "line_nb": 604,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_cat",
            "line_nb": 607,
            "steps": [
                {
                    "command": [
                        "by elim: s1 => //= y s1 IHs; rewrite !inE /= -orbA -IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_rcons",
            "line_nb": 610,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite -cats1 /= mem_cat mem_seq1 orbC in_cons.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_head",
            "line_nb": 613,
            "steps": [
                {
                    "command": [
                        "exact: predU1l.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_last",
            "line_nb": 616,
            "steps": [
                {
                    "command": [
                        "by rewrite lastI mem_rcons mem_head.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_behead",
            "line_nb": 619,
            "steps": [
                {
                    "command": [
                        "by case: s => // y s x; apply: predU1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_belast",
            "line_nb": 622,
            "steps": [
                {
                    "command": [
                        "by move=> x ys'x; rewrite lastI mem_rcons mem_behead.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_nth",
            "line_nb": 625,
            "steps": [
                {
                    "command": [
                        "by elim: s n => [|x s IHs] // [_|n sz_s]; rewrite ?mem_head // mem_behead ?IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_take",
            "line_nb": 628,
            "steps": [
                {
                    "command": [
                        "by move=> s0x; rewrite -(cat_take_drop n0 s) mem_cat /= s0x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_drop",
            "line_nb": 631,
            "steps": [
                {
                    "command": [
                        "by move=> s0'x; rewrite -(cat_take_drop n0 s) mem_cat /= s0'x orbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "last_eq",
            "line_nb": 634,
            "steps": [
                {
                    "command": [
                        "by move=> /negPf xz /negPf yz; case: s => [|t s]//; rewrite xz yz.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "hasP",
            "line_nb": 639,
            "steps": [
                {
                    "command": [
                        "elim: s => [|y s IHs] /=; first by right; case.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "case ay: (a y); first by left; exists y; rewrite ?mem_head.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply: (iffP IHs) => [] [x ysx ax]; exists x => //; first exact: mem_behead.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case: (predU1P ysx) ax => [->|//]; rewrite ay.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "hasPP",
            "line_nb": 645,
            "steps": [
                {
                    "command": [
                        "by move=> vP; apply: (iffP (hasP _)) => -[x?/vP]; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "hasPn",
            "line_nb": 648,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => not_a_s => [x s_x|].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by apply: contra not_a_s => a_x; apply/hasP; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply/hasP=> [[x s_x]]; apply/negP; apply: not_a_s.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "allP",
            "line_nb": 653,
            "steps": [
                {
                    "command": [
                        "elim: s => [|x s IHs]; first by left.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite /= andbC; case: IHs => IHs /=.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "apply: (iffP idP) => [Hx y|]; last by apply; apply: mem_head.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case/predU1P=> [->|Hy]; auto.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by right=> H; case IHs => y Hy; apply H; apply: mem_behead.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "allPP",
            "line_nb": 660,
            "steps": [
                {
                    "command": [
                        "by move=> vP; apply: (iffP (allP _)) => /(_ _ _) /vP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "allPn",
            "line_nb": 663,
            "steps": [
                {
                    "command": [
                        "elim: s => [|x s IHs]; first by right=> [[x Hx _]].",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite /= andbC negb_and; case: IHs => IHs /=.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "by left; case: IHs => y Hy Hay; exists y; first apply: mem_behead.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: (iffP idP) => [|[y]]; first by exists x; rewrite ?mem_head.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case/predU1P=> [-> // | s_y not_a_y]; case: IHs; exists y.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_filter",
            "line_nb": 670,
            "steps": [
                {
                    "command": [
                        "rewrite andbC; elim: s => //= y s IHs.",
                        "VernacExtend",
                        "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
                    ]
                },
                {
                    "command": [
                        "rewrite (fun_if (fun s' : seq T => x \\in s')) !in_cons {}IHs.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by case: eqP => [->|_]; case (a y); rewrite /= ?andbF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_in_filter",
            "line_nb": 680,
            "steps": [
                {
                    "command": [
                        "elim: s => //= x s IHs eq_a.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by rewrite eq_a ?mem_head ?IHs // => y s_y; apply: eq_a; apply: mem_behead.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_in_find",
            "line_nb": 684,
            "steps": [
                {
                    "command": [
                        "elim: s => //= x s IHs eq_a12; rewrite eq_a12 ?mem_head // IHs // => y s'y.",
                        "VernacExtend",
                        "5c0d3b68844697b312245da3ed2c1b277720f6af"
                    ]
                },
                {
                    "command": [
                        "by rewrite eq_a12 // mem_behead.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_in_count",
            "line_nb": 688,
            "steps": [
                {
                    "command": [
                        "by move/eq_in_filter=> eq_a12; rewrite -!size_filter eq_a12.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_in_all",
            "line_nb": 691,
            "steps": [
                {
                    "command": [
                        "by move=> eq_a12; rewrite !all_count eq_in_count.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_in_has",
            "line_nb": 694,
            "steps": [
                {
                    "command": [
                        "by move/eq_in_filter=> eq_a12; rewrite !has_filter eq_a12.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_has_r",
            "line_nb": 698,
            "steps": [
                {
                    "command": [
                        "move=> Es12 a; apply/(hasP a s1)/(hasP a s2) => [] [x Hx Hax]; by exists x; rewrite // ?Es12 // -Es12.",
                        "VernacExtend",
                        "863cc135acc45d5c9d170c836bc1464e830f66a2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_all_r",
            "line_nb": 701,
            "steps": [
                {
                    "command": [
                        "by move=> Es12 a; apply/(allP a s1)/(allP a s2) => Hs x Hx; apply: Hs; rewrite Es12 in Hx *.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "has_sym",
            "line_nb": 704,
            "steps": [
                {
                    "command": [
                        "by apply/(hasP _ s2)/(hasP _ s1) => [] [x]; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "has_pred1",
            "line_nb": 707,
            "steps": [
                {
                    "command": [
                        "by rewrite -(eq_has (mem_seq1^~ x)) (has_sym [:: x]) /= orbF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_rev",
            "line_nb": 710,
            "steps": [
                {
                    "command": [
                        "by move=> a; rewrite -!has_pred1 has_rev.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_pred1P",
            "line_nb": 714,
            "steps": [
                {
                    "command": [
                        "elim: s => [|y s IHs] /=; first by left.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "case: eqP => [->{y} | ne_xy]; last by right=> [] [? _]; case ne_xy.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply: (iffP IHs) => [<- //| []].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_pred1_constant",
            "line_nb": 719,
            "steps": [
                {
                    "command": [
                        "by case: s => //= y s /andP[/eqP->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_pred1_nseq",
            "line_nb": 722,
            "steps": [
                {
                    "command": [
                        "by rewrite all_nseq /= eqxx orbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nseqP",
            "line_nb": 725,
            "steps": [
                {
                    "command": [
                        "by rewrite -has_pred1 has_nseq /= eq_sym andbC; apply: (iffP andP) => -[/eqP].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "constant_nseq",
            "line_nb": 728,
            "steps": [
                {
                    "command": [
                        "exact: all_pred1_constant (all_pred1_nseq x n).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cons_uniq",
            "line_nb": 737,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cat_uniq",
            "line_nb": 740,
            "steps": [
                {
                    "command": [
                        "elim: s1 => [|x s1 IHs]; first by rewrite /= has_pred0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite has_sym /= mem_cat !negb_or has_sym IHs -!andbA; do !bool_congr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "uniq_catC",
            "line_nb": 744,
            "steps": [
                {
                    "command": [
                        "by rewrite !cat_uniq has_sym andbCA andbA andbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "uniq_catCA",
            "line_nb": 747,
            "steps": [
                {
                    "command": [
                        "by rewrite !catA -!(uniq_catC s3) !(cat_uniq s3) uniq_catC !has_cat orbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rcons_uniq",
            "line_nb": 750,
            "steps": [
                {
                    "command": [
                        "by rewrite -cats1 uniq_catC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "filter_uniq",
            "line_nb": 753,
            "steps": [
                {
                    "command": [
                        "elim: s => [|x s IHs] //= /andP[Hx Hs]; case (a x); auto.",
                        "VernacExtend",
                        "440ef132e263f776265e2c72c58e082b4623b4c1"
                    ]
                },
                {
                    "command": [
                        "by rewrite /= mem_filter /= (negbTE Hx) andbF; auto.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rot_uniq",
            "line_nb": 757,
            "steps": [
                {
                    "command": [
                        "by rewrite /rot uniq_catC cat_take_drop.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rev_uniq",
            "line_nb": 760,
            "steps": [
                {
                    "command": [
                        "elim: s => // x s IHs.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by rewrite rev_cons -cats1 cat_uniq /= andbT andbC mem_rev orbF IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "count_memPn",
            "line_nb": 764,
            "steps": [
                {
                    "command": [
                        "by rewrite -has_pred1 has_count -eqn0Ngt; apply: eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "count_uniq_mem",
            "line_nb": 767,
            "steps": [
                {
                    "command": [
                        "elim: s => //= y s IHs /andP[/negbTE s'y /IHs-> {IHs}].",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by rewrite in_cons eq_sym; case: eqP => // ->; rewrite s'y.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "filter_pred1_uniq",
            "line_nb": 771,
            "steps": [
                {
                    "command": [
                        "move=> uniq_s s_x; rewrite (all_pred1P _ _ (filter_all _ _)).",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite size_filter count_uniq_mem ?s_x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_undup",
            "line_nb": 776,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s IHs; case: (x \\in s) => //=; apply: ltnW.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_undup",
            "line_nb": 779,
            "steps": [
                {
                    "command": [
                        "move=> x; elim: s => //= y s IHs.",
                        "VernacExtend",
                        "06880003f1108b2eb418688c7bc6bf1013cf0e4c"
                    ]
                },
                {
                    "command": [
                        "by case Hy: (y \\in s); rewrite in_cons IHs //; case: eqP => // ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "undup_uniq",
            "line_nb": 783,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s IHs; case s_x: (x \\in s); rewrite //= mem_undup s_x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "undup_id",
            "line_nb": 786,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s IHs /andP[/negbTE-> /IHs->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_size_undup",
            "line_nb": 789,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s IHs; case Hx: (x \\in s); rewrite //= ltnS size_undup.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "filter_undup",
            "line_nb": 792,
            "steps": [
                {
                    "command": [
                        "elim: s => //= x s IHs; rewrite (fun_if undup) fun_if /= mem_filter /=.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "by rewrite (fun_if (filter p)) /= IHs; case: ifP => -> //=; apply: if_same.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "undup_nil",
            "line_nb": 796,
            "steps": [
                {
                    "command": [
                        "by case: s => //= x s; rewrite -mem_undup; case: ifP; case: undup.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "index_size",
            "line_nb": 800,
            "steps": [
                {
                    "command": [
                        "by rewrite /index find_size.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "index_mem",
            "line_nb": 803,
            "steps": [
                {
                    "command": [
                        "by rewrite -has_pred1 has_find.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_index",
            "line_nb": 806,
            "steps": [
                {
                    "command": [
                        "by rewrite -has_pred1 => /(nth_find x0)/eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "index_cat",
            "line_nb": 809,
            "steps": [
                {
                    "command": [
                        "by rewrite /index find_cat has_pred1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "index_uniq",
            "line_nb": 812,
            "steps": [
                {
                    "command": [
                        "elim: s i => [|x s IHs] //= [|i]; rewrite /= ?eqxx // ltnS => lt_i_s.",
                        "VernacExtend",
                        "5c0d3b68844697b312245da3ed2c1b277720f6af"
                    ]
                },
                {
                    "command": [
                        "case/andP=> not_s_x /(IHs i)-> {IHs}//.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by case: eqP not_s_x => // ->; rewrite mem_nth.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "index_head",
            "line_nb": 817,
            "steps": [
                {
                    "command": [
                        "by rewrite /= eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "index_last",
            "line_nb": 820,
            "steps": [
                {
                    "command": [
                        "rewrite lastI rcons_uniq -cats1 index_cat size_belast.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by case: ifP => //=; rewrite eqxx addn0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_uniq",
            "line_nb": 824,
            "steps": [
                {
                    "command": [
                        "move=> lt_i_s lt_j_s Us; apply/eqP/eqP=> [eq_sij|-> //].",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(index_uniq lt_i_s Us) eq_sij index_uniq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_rot",
            "line_nb": 839,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite -{2}(cat_take_drop n0 s) !mem_cat /= orbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqseq_rot",
            "line_nb": 842,
            "steps": [
                {
                    "command": [
                        "by apply: inj_eq; apply: rot_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rot_to",
            "line_nb": 846,
            "steps": [
                {
                    "command": [
                        "move=> s_x; pose i := index x s; exists i (drop i.+1 s ++ take i s).",
                        "VernacExtend",
                        "ff25b8814cda351869eff83b429f96923635e853"
                    ]
                },
                {
                    "command": [
                        "rewrite -cat_cons {}/i; congr cat; elim: s s_x => //= y s IHs.",
                        "VernacExtend",
                        "757c53630ddc3260b621b4ad3c53f1262c7cbcec"
                    ]
                },
                {
                    "command": [
                        "by rewrite eq_sym in_cons; case: eqP => // -> _; rewrite drop0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "has_nthP",
            "line_nb": 868,
            "steps": [
                {
                    "command": [
                        "elim: s => [|x s IHs] /=; first by right; case.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "case nax: (a x); first by left; exists 0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply: (iffP IHs) => [[i]|[[|i]]]; [exists i.+1 | rewrite nax | exists i].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_nthP",
            "line_nb": 873,
            "steps": [
                {
                    "command": [
                        "rewrite -(eq_all (fun x => negbK (a x))) all_predC.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: (has_nthP _ _ x0) => [na_s | a_s]; [right=> a_s | left=> i lti].",
                        "VernacExtend",
                        "9b36a4f7f7479e172f3399032e2ee42d2778fdbc"
                    ]
                },
                {
                    "command": [
                        "by case: na_s => i lti; rewrite a_s.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply/idPn=> na_si; case: a_s; exists i.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set_nth_default",
            "line_nb": 880,
            "steps": [
                {
                    "command": [
                        "by elim: s n => [|y s' IHs] [|n] /=; auto.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "headI",
            "line_nb": 883,
            "steps": [
                {
                    "command": [
                        "by case: s.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_incr_nth",
            "line_nb": 893,
            "steps": [
                {
                    "command": [
                        "elim: v i j => [|n v IHv] [|i] [|j] //=; rewrite ?eqSS ?addn0 //; try by case j.",
                        "VernacExtend",
                        "2c154537bba468e8a25a46bd843eef1d3fbbaf4e"
                    ]
                },
                {
                    "command": [
                        "elim: i j => [|i IHv] [|j] //=; rewrite ?eqSS //; by case j.",
                        "VernacExtend",
                        "244a9a5eebe0941cff21b86f46627271de195205"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_incr_nth",
            "line_nb": 897,
            "steps": [
                {
                    "command": [
                        "elim: v i => [|n v IHv] [|i] //=; first by rewrite size_ncons /= addn1.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite IHv; apply: fun_if.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "incr_nth_inj",
            "line_nb": 901,
            "steps": [
                {
                    "command": [
                        "move=> i j /(congr1 (nth 0 ^~ i)); apply: contra_eq => neq_ij.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by rewrite !nth_incr_nth eqn_add2r eqxx /nat_of_bool ifN_eqC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_eqP",
            "line_nb": 913,
            "steps": [
                {
                    "command": [
                        "apply: (iffP allP) => /= [eq_cnt1 a | eq_cnt x _]; last exact/eqP.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "elim: {a}_.+1 {-2}a (ltnSn (count a (s1 ++ s2))) => // n IHn a le_an.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "have [/eqP|] := posnP (count a (s1 ++ s2)).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite count_cat addn_eq0; do 2!case: eqP => // ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -has_count => /hasP[x s12x a_x]; pose a' := predD1 a x.",
                        "VernacExtend",
                        "9d8fbc7ebaadb48200c542591ceec3e0f555a812"
                    ]
                },
                {
                    "command": [
                        "have cnt_a' s: count a s = count_mem x s + count a' s.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -count_predUI -[LHS]addn0 -(count_pred0 s).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by congr (_ + _); apply: eq_count => y /=; case: eqP => // ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite !cnt_a' (eqnP (eq_cnt1 _ s12x)) (IHn a') // -ltnS.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply: leq_trans le_an.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite ltnS cnt_a' -add1n leq_add2r -has_count has_pred1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_eq_refl",
            "line_nb": 926,
            "steps": [
                {
                    "command": [
                        "exact/perm_eqP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_eq_sym",
            "line_nb": 930,
            "steps": [
                {
                    "command": [
                        "by move=> s1 s2; apply/perm_eqP/perm_eqP=> ? ?.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_eq_trans",
            "line_nb": 933,
            "steps": [
                {
                    "command": [
                        "by move=> s2 s1 s3 /perm_eqP-eq12 /perm_eqP/(ftrans eq12)/perm_eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_eqlE",
            "line_nb": 938,
            "steps": [
                {
                    "command": [
                        "by move->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_eqrP",
            "line_nb": 946,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [/perm_eqlP eq12 s3| <- //].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !(perm_eq_sym s3) eq12.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_catC",
            "line_nb": 950,
            "steps": [
                {
                    "command": [
                        "by apply/perm_eqlP; apply/perm_eqP=> a; rewrite !count_cat addnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_cat2l",
            "line_nb": 953,
            "steps": [
                {
                    "command": [
                        "apply/perm_eqP/perm_eqP=> eq23 a; apply/eqP; by move/(_ a)/eqP: eq23; rewrite !count_cat eqn_add2l.",
                        "VernacExtend",
                        "32b15fc96f4fd456981d0dd2c828d21282fb462e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_cons",
            "line_nb": 956,
            "steps": [
                {
                    "command": [
                        "exact: (perm_cat2l [::x]).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_cat2r",
            "line_nb": 959,
            "steps": [
                {
                    "command": [
                        "by do 2!rewrite perm_eq_sym perm_catC; apply: perm_cat2l.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_catAC",
            "line_nb": 962,
            "steps": [
                {
                    "command": [
                        "by apply/perm_eqlP; rewrite -!catA perm_cat2l perm_catC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_catCA",
            "line_nb": 965,
            "steps": [
                {
                    "command": [
                        "by apply/perm_eqlP; rewrite !catA perm_cat2r perm_catC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_rot",
            "line_nb": 971,
            "steps": [
                {
                    "command": [
                        "by move=> /= s2; rewrite perm_catC cat_take_drop.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_rotr",
            "line_nb": 974,
            "steps": [
                {
                    "command": [
                        "exact: perm_rot.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_eq_rev",
            "line_nb": 977,
            "steps": [
                {
                    "command": [
                        "by apply/perm_eqP=> i; rewrite count_rev.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_filter",
            "line_nb": 980,
            "steps": [
                {
                    "command": [
                        "by move/perm_eqP=> s12_count; apply/perm_eqP=> Q; rewrite !count_filter.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_filterC",
            "line_nb": 983,
            "steps": [
                {
                    "command": [
                        "apply/perm_eqlP; elim: s => //= x s IHs.",
                        "VernacExtend",
                        "470117b6920bbf0ab181fc70f91f03232cdae40b"
                    ]
                },
                {
                    "command": [
                        "by case: (a x); last rewrite /= -cat1s perm_catCA; rewrite perm_cons.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_eq_mem",
            "line_nb": 987,
            "steps": [
                {
                    "command": [
                        "by move/perm_eqP=> eq12 x; rewrite -!has_pred1 !has_count eq12.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_eq_all",
            "line_nb": 990,
            "steps": [
                {
                    "command": [
                        "by move/perm_eq_mem/eq_all_r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_eq_size",
            "line_nb": 993,
            "steps": [
                {
                    "command": [
                        "by move/perm_eqP=> eq12; rewrite -!count_predT eq12.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_eq_small",
            "line_nb": 996,
            "steps": [
                {
                    "command": [
                        "move=> s2_le1 eqs12; move/perm_eq_size: eqs12 s2_le1 (perm_eq_mem eqs12).",
                        "VernacExtend",
                        "8b784377bdc4d565ff66d4cf36a6041e9354c156"
                    ]
                },
                {
                    "command": [
                        "by case: s2 s1 => [|x []] // [|y []] // _ _ /(_ x); rewrite !inE eqxx => /eqP->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "uniq_leq_size",
            "line_nb": 1000,
            "steps": [
                {
                    "command": [
                        "elim: s1 s2 => //= x s1 IHs s2 /andP[not_s1x Us1] /allP/=/andP[s2x /allP ss12].",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "have [i s3 def_s2] := rot_to s2x; rewrite -(size_rot i s2) def_s2.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "apply: IHs => // y s1y; have:= ss12 y s1y.",
                        "VernacExtend",
                        "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(mem_rot i) def_s2 inE (negPf (memPn _ y s1y)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_size_uniq",
            "line_nb": 1006,
            "steps": [
                {
                    "command": [
                        "elim: s1 s2 => [[] | x s1 IHs s2] // Us1x; have /andP[not_s1x Us1] := Us1x.",
                        "VernacExtend",
                        "482bdb35b460847e2e446a9aa1672126d9f59cdc"
                    ]
                },
                {
                    "command": [
                        "case/allP/andP=> /rot_to[i s3 def_s2] /allP ss12 le_s21.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite -(rot_uniq i) -(size_rot i) def_s2 /= in le_s21 *.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have ss13 y (s1y : y \\in s1): y \\in s3.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by have:= ss12 y s1y; rewrite -(mem_rot i) def_s2 inE (negPf (memPn _ y s1y)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite IHs // andbT; apply: contraL _ le_s21 => s3x; rewrite -leqNgt.",
                        "VernacExtend",
                        "fe8f197e86415fc7f0a74eda9d312128b9473eda"
                    ]
                },
                {
                    "command": [
                        "by apply/(uniq_leq_size Us1x)/allP; rewrite /= s3x; apply/allP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "uniq_size_uniq",
            "line_nb": 1015,
            "steps": [
                {
                    "command": [
                        "move=> Us1 eqs12; apply/idP/idP=> [Us2 | /eqP eq_sz12].",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by rewrite eqn_leq !uniq_leq_size // => y; rewrite eqs12.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply: (leq_size_uniq Us1) => [y|]; rewrite (eqs12, eq_sz12).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_size_perm",
            "line_nb": 1020,
            "steps": [
                {
                    "command": [
                        "move=> Us1 ss12 le_s21; have Us2: uniq s2 := leq_size_uniq Us1 ss12 le_s21.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "suffices: s1 =i s2 by split; last by apply/eqP; rewrite -uniq_size_uniq.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "move=> x; apply/idP/idP=> [/ss12// | s2x]; apply: contraLR le_s21 => not_s1x.",
                        "VernacExtend",
                        "e374b6c583d80c9d8b579c06df7953342f99f751"
                    ]
                },
                {
                    "command": [
                        "rewrite -ltnNge (@uniq_leq_size (x :: s1)) /= ?not_s1x //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply/allP; rewrite /= s2x; apply/allP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_uniq",
            "line_nb": 1027,
            "steps": [
                {
                    "command": [
                        "move=> Es12 Esz12.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by apply/idP/idP=> Us; rewrite (uniq_size_uniq Us) ?Esz12 ?eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_eq_uniq",
            "line_nb": 1031,
            "steps": [
                {
                    "command": [
                        "by move=> eq_s12; apply: perm_uniq; [apply: perm_eq_mem | apply: perm_eq_size].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "count_mem_uniq",
            "line_nb": 1038,
            "steps": [
                {
                    "command": [
                        "move=> count1_s; have Uus := undup_uniq s.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "suffices: perm_eq s (undup s) by move/perm_eq_uniq->.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "by apply/allP=> x _; apply/eqP; rewrite (count_uniq_mem x Uus) mem_undup.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "catCA_perm_ind",
            "line_nb": 1043,
            "steps": [
                {
                    "command": [
                        "move=> PcatCA s1 s2 eq_s12; rewrite -[s1]cats0 -[s2]cats0.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "elim: s2 nil => [| x s2 IHs] s3 in s1 eq_s12 *.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by case: s1 {eq_s12}(perm_eq_size eq_s12).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have /rot_to[i s' def_s1]: x \\in s1 by rewrite (perm_eq_mem eq_s12) mem_head.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -(cat_take_drop i s1) -catA => /PcatCA.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite catA -/(rot i s1) def_s1 /= -cat1s => /PcatCA/IHs/PcatCA; apply.",
                        "VernacExtend",
                        "7b6cefeb8aab053c8ef9903e6fd6afda1148ad78"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(perm_cons x) -def_s1 perm_rot.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "catCA_perm_subst",
            "line_nb": 1052,
            "steps": [
                {
                    "command": [
                        "move=> FcatCA s1 s2 /catCA_perm_ind => ind_s12.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by apply: (ind_s12 (eq _ \\o F)) => //= *; rewrite FcatCA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_rotr",
            "line_nb": 1067,
            "steps": [
                {
                    "command": [
                        "by rewrite size_rot.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_rotr",
            "line_nb": 1070,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite mem_rot.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rotr_size_cat",
            "line_nb": 1073,
            "steps": [
                {
                    "command": [
                        "by rewrite /rotr size_cat addnK rot_size_cat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rotr1_rcons",
            "line_nb": 1076,
            "steps": [
                {
                    "command": [
                        "by rewrite -rot1_cons rotK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "has_rotr",
            "line_nb": 1079,
            "steps": [
                {
                    "command": [
                        "by rewrite has_rot.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rotr_uniq",
            "line_nb": 1082,
            "steps": [
                {
                    "command": [
                        "by rewrite rot_uniq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rotrK",
            "line_nb": 1085,
            "steps": [
                {
                    "command": [
                        "move=> s; have [lt_n0s | ge_n0s] := ltnP n0 (size s).",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "by rewrite -{1}(subKn (ltnW lt_n0s)) -{1}[size s]size_rotr; apply: rotK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite -{2}(rot_oversize ge_n0s) /rotr (eqnP ge_n0s) rot0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rotr_inj",
            "line_nb": 1090,
            "steps": [
                {
                    "command": [
                        "exact (can_inj rotrK).",
                        "VernacExtend",
                        "a9708cdef14da727796ff8d271fcee7db3a4d37f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rev_rotr",
            "line_nb": 1093,
            "steps": [
                {
                    "command": [
                        "by rewrite rev_cat -take_rev -drop_rev.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rev_rot",
            "line_nb": 1096,
            "steps": [
                {
                    "command": [
                        "by rewrite (canRL revK (rev_rotr _)) revK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rot_addn",
            "line_nb": 1103,
            "steps": [
                {
                    "command": [
                        "move=> sz_s; rewrite {1}/rot -[take _ s](cat_take_drop n).",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "rewrite 5!(catA, =^~ rot_size_cat) !cat_take_drop.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite size_drop !size_takel ?leq_addl ?addnK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rotS",
            "line_nb": 1108,
            "steps": [
                {
                    "command": [
                        "exact: (@rot_addn 1).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rot_add_mod",
            "line_nb": 1111,
            "steps": [
                {
                    "command": [
                        "move=> Hn Hm; case: leqP => [/rot_addn // | /ltnW Hmn]; symmetry.",
                        "VernacExtend",
                        "f1c1af3758710d06417099a809d0460e11e632a5"
                    ]
                },
                {
                    "command": [
                        "by rewrite -{2}(rotK n s) /rotr -rot_addn size_rot addnBA ?subnK ?addnK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rot_rot",
            "line_nb": 1115,
            "steps": [
                {
                    "command": [
                        "case: (ltnP (size s) m) => Hm.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite !(@rot_oversize T m) ?size_rot 1?ltnW.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: (ltnP (size s) n) => Hn.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite !(@rot_oversize T n) ?size_rot 1?ltnW.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite !rot_add_mod 1?addnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rot_rotr",
            "line_nb": 1122,
            "steps": [
                {
                    "command": [
                        "by rewrite {2}/rotr size_rot rot_rot.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rotr_rotr",
            "line_nb": 1125,
            "steps": [
                {
                    "command": [
                        "by rewrite /rotr !size_rot rot_rot.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mask_false",
            "line_nb": 1133,
            "steps": [
                {
                    "command": [
                        "by elim: s n => [|x s IHs] [|n] /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mask_true",
            "line_nb": 1136,
            "steps": [
                {
                    "command": [
                        "by elim: s n => [|x s IHs] [|n] //= Hn; congr (_ :: _); apply: IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mask0",
            "line_nb": 1139,
            "steps": [
                {
                    "command": [
                        "by case: m.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mask1",
            "line_nb": 1142,
            "steps": [
                {
                    "command": [
                        "by case: b.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mask_cons",
            "line_nb": 1145,
            "steps": [
                {
                    "command": [
                        "by case: b.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_mask",
            "line_nb": 1148,
            "steps": [
                {
                    "command": [
                        "by move: m s; apply: seq2_ind => // -[] x m s /= ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mask_cat",
            "line_nb": 1151,
            "steps": [
                {
                    "command": [
                        "by move: m1 s1; apply: seq2_ind => // -[] m1 x1 s1 /= ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "has_mask_cons",
            "line_nb": 1154,
            "steps": [
                {
                    "command": [
                        "by case: b.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "has_mask",
            "line_nb": 1157,
            "steps": [
                {
                    "command": [
                        "elim: m s => [|b m IHm] [|x s] //; rewrite has_mask_cons /= andbC.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "by case: (a x) => //= /IHm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mask_rot",
            "line_nb": 1161,
            "steps": [
                {
                    "command": [
                        "move=> Ems; rewrite mask_cat ?size_drop ?Ems // -rot_size_cat.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite size_mask -?mask_cat ?size_take ?Ems // !cat_take_drop.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "resize_mask",
            "line_nb": 1165,
            "steps": [
                {
                    "command": [
                        "by exists (take (size s) m ++ nseq (size s - size m) false); elim: s m => [|x s IHs] [|b m] //=; rewrite (size_nseq, mask_false, IHs).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_mask_cons",
            "line_nb": 1172,
            "steps": [
                {
                    "command": [
                        "by case: b.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_mask",
            "line_nb": 1175,
            "steps": [
                {
                    "command": [
                        "by rewrite -!has_pred1 => /has_mask.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mask_uniq",
            "line_nb": 1178,
            "steps": [
                {
                    "command": [
                        "elim: s => [|x s IHs] Uxs [|b m] //=.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "case: b Uxs => //= /andP[s'x Us]; rewrite {}IHs // andbT.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "by apply: contra s'x; apply: mem_mask.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_mask_rot",
            "line_nb": 1183,
            "steps": [
                {
                    "command": [
                        "by move=> Ems x; rewrite mask_rot // mem_rot.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub0seq",
            "line_nb": 1191,
            "steps": [
                {
                    "command": [
                        "by case: s.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subseq0",
            "line_nb": 1194,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subseqP",
            "line_nb": 1197,
            "steps": [
                {
                    "command": [
                        "elim: s2 s1 => [|y s2 IHs2] [|x s1].",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by left; exists [::].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by right; do 2!case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by left; exists (nseq (size s2).+1 false); rewrite ?size_nseq //= mask_false.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: {IHs2}(iffP (IHs2 _)) => [] [m sz_m def_s1].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by exists ((x == y) :: m); rewrite /= ?sz_m // -def_s1; case: eqP => // ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: eqP => [_ | ne_xy]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case: m def_s1 sz_m => [//|[m []//|m]] -> [<-]; exists m.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "pose i := index true m; have def_m_i: take i m = nseq (size (take i m)) false.",
                        "VernacExtend",
                        "c09d1274557abc8857ed64eb3450db2da906c185"
                    ]
                },
                {
                    "command": [
                        "apply/all_pred1P; apply/(all_nthP true) => j.",
                        "VernacExtend",
                        "8d9dae45eeb3a769b8a865cef8ae476451f63802"
                    ]
                },
                {
                    "command": [
                        "rewrite size_take ltnNge geq_min negb_or -ltnNge; case/andP=> lt_j_i _.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "rewrite nth_take //= -negb_add addbF -addbT -negb_eqb.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite [_ == _](before_find _ lt_j_i).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have lt_i_m: i < size m.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite ltnNge; apply/negP=> le_m_i; rewrite take_oversize // in def_m_i.",
                        "VernacExtend",
                        "fe8f197e86415fc7f0a74eda9d312128b9473eda"
                    ]
                },
                {
                    "command": [
                        "by rewrite def_m_i mask_false in def_s1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite size_take lt_i_m in def_m_i.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "exists (take i m ++ drop i.+1 m).",
                        "VernacExtend",
                        "d270e689840817f8773f2dde9c598fdecce2e37a"
                    ]
                },
                {
                    "command": [
                        "rewrite size_cat size_take size_drop lt_i_m.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite sz_m in lt_i_m *; rewrite subnKC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite {s1 def_s1}[s1](congr1 behead def_s1).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -[s2](cat_take_drop i) -{1}[m](cat_take_drop i) {}def_m_i -cat_cons.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have sz_i_s2: size (take i s2) = i by apply: size_takel; rewrite sz_m in lt_i_m.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite lastI cat_rcons !mask_cat ?size_nseq ?size_belast ?mask_false //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (drop_nth true) // nth_index -?index_mem.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mask_subseq",
            "line_nb": 1227,
            "steps": [
                {
                    "command": [
                        "by apply/subseqP; have [m1] := resize_mask m s; exists m1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subseq_refl",
            "line_nb": 1240,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s IHs; rewrite eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prefix_subseq",
            "line_nb": 1248,
            "steps": [
                {
                    "command": [
                        "by rewrite -[s1 in subseq s1]cats0 cat_subseq ?sub0seq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "suffix_subseq",
            "line_nb": 1251,
            "steps": [
                {
                    "command": [
                        "exact: cat_subseq (sub0seq s1) _.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "take_subseq",
            "line_nb": 1254,
            "steps": [
                {
                    "command": [
                        "by rewrite -[s in X in subseq _ X](cat_take_drop i) prefix_subseq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "drop_subseq",
            "line_nb": 1257,
            "steps": [
                {
                    "command": [
                        "by rewrite -[s in X in subseq _ X](cat_take_drop i) suffix_subseq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_subseq",
            "line_nb": 1260,
            "steps": [
                {
                    "command": [
                        "by case/subseqP=> m _ -> x; apply: mem_mask.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub1seq",
            "line_nb": 1263,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= y s; rewrite inE; case: (x == y); rewrite ?sub0seq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_subseq",
            "line_nb": 1266,
            "steps": [
                {
                    "command": [
                        "by case/subseqP=> m sz_m ->; rewrite size_mask -sz_m ?count_size.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_subseq_leqif",
            "line_nb": 1269,
            "steps": [
                {
                    "command": [
                        "move=> sub12; split; first exact: size_subseq.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply/idP/eqP=> [|-> //]; case/subseqP: sub12 => m sz_m ->{s1}.",
                        "VernacExtend",
                        "20ec428e50c31e1399aee62c5a532bc8417a4b29"
                    ]
                },
                {
                    "command": [
                        "rewrite size_mask -sz_m // -all_count -(eq_all eqb_id).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by move/(@all_pred1P _ true)->; rewrite sz_m mask_true.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subseq_cons",
            "line_nb": 1275,
            "steps": [
                {
                    "command": [
                        "exact: suffix_subseq [:: x] s.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subseq_rcons",
            "line_nb": 1278,
            "steps": [
                {
                    "command": [
                        "by rewrite -cats1 prefix_subseq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subseq_uniq",
            "line_nb": 1281,
            "steps": [
                {
                    "command": [
                        "by case/subseqP=> m _ -> Us2; apply: mask_uniq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rem_id",
            "line_nb": 1291,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= y s IHs /norP[neq_yx /IHs->]; rewrite eq_sym (negbTE neq_yx).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_to_rem",
            "line_nb": 1294,
            "steps": [
                {
                    "command": [
                        "elim: s => // y s IHs; rewrite inE /= eq_sym perm_eq_sym.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "case: eqP => [-> // | _ /IHs].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite (perm_catCA [:: x] [:: y]) perm_cons perm_eq_sym.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_rem",
            "line_nb": 1299,
            "steps": [
                {
                    "command": [
                        "by move/perm_to_rem/perm_eq_size->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rem_subseq",
            "line_nb": 1302,
            "steps": [
                {
                    "command": [
                        "elim: s => //= y s IHs; rewrite eq_sym.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "by case: ifP => _; [apply: subseq_cons | rewrite eqxx].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rem_uniq",
            "line_nb": 1306,
            "steps": [
                {
                    "command": [
                        "by apply: subseq_uniq; apply: rem_subseq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_rem",
            "line_nb": 1309,
            "steps": [
                {
                    "command": [
                        "exact: mem_subseq (rem_subseq s).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rem_filter",
            "line_nb": 1312,
            "steps": [
                {
                    "command": [
                        "elim: s => //= y s IHs /andP[not_s_y /IHs->].",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by case: eqP => //= <-; apply/esym/all_filterP; rewrite all_predC has_pred1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_rem_uniq",
            "line_nb": 1316,
            "steps": [
                {
                    "command": [
                        "by move/rem_filter=> -> y; rewrite mem_filter.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_cons",
            "line_nb": 1324,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_nseq",
            "line_nb": 1327,
            "steps": [
                {
                    "command": [
                        "by elim: n0 => // *; congr (_ :: _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_cat",
            "line_nb": 1330,
            "steps": [
                {
                    "command": [
                        "by elim: s1 => [|x s1 IHs] //=; rewrite IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_map",
            "line_nb": 1333,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "behead_map",
            "line_nb": 1336,
            "steps": [
                {
                    "command": [
                        "by case: s.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_map",
            "line_nb": 1339,
            "steps": [
                {
                    "command": [
                        "by elim: s n => [|x s IHs] [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_rcons",
            "line_nb": 1342,
            "steps": [
                {
                    "command": [
                        "by rewrite -!cats1 map_cat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "last_map",
            "line_nb": 1345,
            "steps": [
                {
                    "command": [
                        "by elim: s x => /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "belast_map",
            "line_nb": 1348,
            "steps": [
                {
                    "command": [
                        "by elim: s x => //= y s IHs x; rewrite IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "filter_map",
            "line_nb": 1351,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s IHs; rewrite (fun_if map) /= IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "find_map",
            "line_nb": 1354,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "has_map",
            "line_nb": 1357,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_map",
            "line_nb": 1360,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "count_map",
            "line_nb": 1363,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_take",
            "line_nb": 1366,
            "steps": [
                {
                    "command": [
                        "by elim: n0 s => [|n IHn] [|x s] //=; rewrite IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_drop",
            "line_nb": 1369,
            "steps": [
                {
                    "command": [
                        "by elim: n0 s => [|n IHn] [|x s] //=; rewrite IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_rot",
            "line_nb": 1372,
            "steps": [
                {
                    "command": [
                        "by rewrite /rot map_cat map_take map_drop.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_rotr",
            "line_nb": 1375,
            "steps": [
                {
                    "command": [
                        "by apply: canRL (@rotK n0 T2) _; rewrite -map_rot rotrK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_rev",
            "line_nb": 1378,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s IHs; rewrite !rev_cons -!cats1 map_cat IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_mask",
            "line_nb": 1381,
            "steps": [
                {
                    "command": [
                        "by elim: m s => [|[|] m IHm] [|x p] //=; rewrite IHm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inj_map",
            "line_nb": 1384,
            "steps": [
                {
                    "command": [
                        "by move=> injf; elim=> [|y1 s1 IHs] [|y2 s2] //= [/injf-> /IHs->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "filter_mask",
            "line_nb": 1392,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s <-; case: (a x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "filter_subseq",
            "line_nb": 1398,
            "steps": [
                {
                    "command": [
                        "by apply/subseqP; exists (map a s); rewrite ?size_map ?filter_mask.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subseq_filter",
            "line_nb": 1401,
            "steps": [
                {
                    "command": [
                        "elim: s2 s1 => [|x s2 IHs] [|y s1] //=; rewrite ?andbF ?sub0seq //.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "by case a_x: (a x); rewrite /= !IHs /=; case: eqP => // ->; rewrite a_x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_to_subseq",
            "line_nb": 1412,
            "steps": [
                {
                    "command": [
                        "elim Ds2: s2 s1 => [|y s2' IHs] [|x s1] //=; try by exists s2; rewrite Ds2.",
                        "VernacExtend",
                        "4f3ff96ca2d1111d66bee768f7796420a56e669b"
                    ]
                },
                {
                    "command": [
                        "case: eqP => [-> | _] /IHs[s3 perm_s2] {IHs}.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by exists s3; rewrite perm_cons.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by exists (rcons s3 y); rewrite -cat_cons -perm_rcons -!cats1 catA perm_cat2r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_f",
            "line_nb": 1424,
            "steps": [
                {
                    "command": [
                        "elim: s => [|y s IHs] //=.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by case/predU1P=> [->|Hx]; [apply: predU1l | apply: predU1r; auto].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mapP",
            "line_nb": 1428,
            "steps": [
                {
                    "command": [
                        "elim: s => [|x s IHs]; first by right; case.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite /= in_cons eq_sym; case Hxy: (f x == y).",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "by left; exists x; [rewrite mem_head | rewrite (eqP Hxy)].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: (iffP IHs) => [[x' Hx' ->]|[x' Hx' Dy]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by exists x'; first apply: predU1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by move: Dy Hxy => ->; case/predU1P: Hx' => [->|]; [rewrite eqxx | exists x'].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_uniq",
            "line_nb": 1436,
            "steps": [
                {
                    "command": [
                        "elim: s => //= x s IHs /andP[not_sfx /IHs->]; rewrite andbT.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "by apply: contra not_sfx => sx; apply/mapP; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_index_map",
            "line_nb": 1450,
            "steps": [
                {
                    "command": [
                        "elim: s => //= y s IHs inj_f s_x; rewrite (inj_in_eq inj_f) ?mem_head //.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "move: s_x; rewrite inE eq_sym; case: eqP => [-> | _] //=; apply: IHs.",
                        "VernacExtend",
                        "baf26b2a0e43ffbfbf3d72e47e92908480589ac4"
                    ]
                },
                {
                    "command": [
                        "by apply: sub_in2 inj_f => z; apply: predU1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_map",
            "line_nb": 1455,
            "steps": [
                {
                    "command": [
                        "by move/perm_eqP=> Est; apply/perm_eqP=> a; rewrite !count_map Est.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_map",
            "line_nb": 1459,
            "steps": [
                {
                    "command": [
                        "by apply/mapP/idP=> [[y Hy /Hf->] //|]; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "index_map",
            "line_nb": 1462,
            "steps": [
                {
                    "command": [
                        "by rewrite /index; elim: s => //= y s IHs; rewrite (inj_eq Hf) IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_inj_uniq",
            "line_nb": 1465,
            "steps": [
                {
                    "command": [
                        "by apply: map_inj_in_uniq; apply: in2W.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_map_inj",
            "line_nb": 1468,
            "steps": [
                {
                    "command": [
                        "move/perm_eqP=> Est; apply/allP=> x _ /=.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "have Dx: pred1 x =1 preim f (pred1 (f x)) by move=> y /=; rewrite inj_eq.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite !(eq_count Dx) -!count_map Est.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_of_seq",
            "line_nb": 1475,
            "steps": [
                {
                    "command": [
                        "exists (fun x => nth y0 fs (index x s)) => uAs eq_sz.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply/esym/(@eq_from_nth _ y0); rewrite ?size_map eq_sz // => i ltis.",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "by have x0 : T1 by [case: (s) ltis]; rewrite (nth_map x0) // index_uniq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_id",
            "line_nb": 1482,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_map",
            "line_nb": 1485,
            "steps": [
                {
                    "command": [
                        "by move=> Ef; elim=> //= x s ->; rewrite Ef.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_comp",
            "line_nb": 1488,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mapK",
            "line_nb": 1491,
            "steps": [
                {
                    "command": [
                        "by move=> eq_f12; elim=> //= x s ->; rewrite eq_f12.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_id_in",
            "line_nb": 1501,
            "steps": [
                {
                    "command": [
                        "by move/eq_in_map->; apply: map_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_pK",
            "line_nb": 1507,
            "steps": [
                {
                    "command": [
                        "by move=> gK; elim=> //= x s ->; rewrite gK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_pmap",
            "line_nb": 1510,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s <-; case: (f _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pmapS_filter",
            "line_nb": 1513,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s; case fx: (f x) => //= [u] <-; congr (_ :: _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pmap_filter",
            "line_nb": 1517,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s <-; rewrite -{3}(fK x); case: (f _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pmap_cat",
            "line_nb": 1520,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s ->; case/f: x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_pmap",
            "line_nb": 1526,
            "steps": [
                {
                    "command": [
                        "by move=> Ef; elim=> //= x s ->; rewrite Ef.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_pmap",
            "line_nb": 1529,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s IHs; rewrite in_cons -IHs; case: (f x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "can2_mem_pmap",
            "line_nb": 1533,
            "steps": [
                {
                    "command": [
                        "by move=> gK s u; rewrite -(mem_map (pcan_inj gK)) pmap_filter // mem_filter gK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pmap_uniq",
            "line_nb": 1536,
            "steps": [
                {
                    "command": [
                        "by move/(filter_uniq [eta f]); rewrite -(pmap_filter fK); apply: map_uniq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_pmap",
            "line_nb": 1539,
            "steps": [
                {
                    "command": [
                        "move=> eq_st; apply/(perm_map_inj (@Some_inj _)); rewrite !pmapS_filter.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "exact/perm_map/perm_filter.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_pmap_sub",
            "line_nb": 1546,
            "steps": [
                {
                    "command": [
                        "by rewrite size_pmap (eq_count (isSome_insub _)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_pmap_sub",
            "line_nb": 1553,
            "steps": [
                {
                    "command": [
                        "exact/(can2_mem_pmap (insubK _))/valK.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pmap_sub_uniq",
            "line_nb": 1556,
            "steps": [
                {
                    "command": [
                        "exact: (pmap_uniq (insubK _)).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_iota",
            "line_nb": 1561,
            "steps": [
                {
                    "command": [
                        "by elim: n m => //= n IHn m; rewrite IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iota_add",
            "line_nb": 1564,
            "steps": [
                {
                    "command": [
                        "by elim: n1 m => //= [|n1 IHn1] m; rewrite ?addn0 // -addSnnS -IHn1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iota_addl",
            "line_nb": 1567,
            "steps": [
                {
                    "command": [
                        "by elim: n m2 => //= n IHn m2; rewrite -addnS IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_iota",
            "line_nb": 1570,
            "steps": [
                {
                    "command": [
                        "by move/subnKC <-; rewrite addSnnS iota_add nth_cat size_iota ltnn subnn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_iota",
            "line_nb": 1573,
            "steps": [
                {
                    "command": [
                        "elim: n m => [|n IHn] /= m; first by rewrite addn0 ltnNge andbN.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite -addSnnS leq_eqVlt in_cons eq_sym.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by case: eqP => [->|_]; [rewrite leq_addr | apply: IHn].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iota_uniq",
            "line_nb": 1578,
            "steps": [
                {
                    "command": [
                        "by elim: n m => //= n IHn m; rewrite mem_iota ltnn /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_mkseq",
            "line_nb": 1584,
            "steps": [
                {
                    "command": [
                        "by rewrite size_map size_iota.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_mkseq",
            "line_nb": 1587,
            "steps": [
                {
                    "command": [
                        "by move=> Efg n; apply: eq_map Efg _.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_mkseq",
            "line_nb": 1590,
            "steps": [
                {
                    "command": [
                        "by move=> Hi; rewrite (nth_map 0) ?nth_iota ?size_iota.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkseq_nth",
            "line_nb": 1593,
            "steps": [
                {
                    "command": [
                        "by apply: (@eq_from_nth _ x0); rewrite size_mkseq // => i Hi; rewrite nth_mkseq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkseq_uniq",
            "line_nb": 1599,
            "steps": [
                {
                    "command": [
                        "by move/map_inj_uniq->; apply: iota_uniq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_eq_iotaP",
            "line_nb": 1602,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [Est | [Is eqIst ->]]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -{2}[t](mkseq_nth x0) perm_map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: t => [|x t IHt] in s It Est *.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by rewrite (perm_eq_small _ Est) //; exists [::].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have /rot_to[k s1 Ds]: x \\in s by rewrite (perm_eq_mem Est) mem_head.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [|Is1 eqIst1 Ds1] := IHt s1; first by rewrite -(perm_cons x) -Ds perm_rot.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "exists (rotr k (0 :: map succn Is1)).",
                        "VernacExtend",
                        "d93d6c1d8e919e87915c7d660c843f1ad4601575"
                    ]
                },
                {
                    "command": [
                        "by rewrite perm_rot /It /= perm_cons (iota_addl 1) perm_map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite map_rotr /= -map_comp -(@eq_map _ _ (nth x0 t)) // -Ds1 -Ds rotK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "foldr_cat",
            "line_nb": 1622,
            "steps": [
                {
                    "command": [
                        "by elim: s1 => //= x s1 ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "foldr_map",
            "line_nb": 1625,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sumn_nseq",
            "line_nb": 1630,
            "steps": [
                {
                    "command": [
                        "by rewrite mulnC; elim: n => //= n ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sumn_cat",
            "line_nb": 1633,
            "steps": [
                {
                    "command": [
                        "by elim: s1 => //= x s1 ->; rewrite addnA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sumn_count",
            "line_nb": 1636,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= s0 s /= ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sumn_rcons",
            "line_nb": 1639,
            "steps": [
                {
                    "command": [
                        "by rewrite -cats1 sumn_cat /= addn0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sumn_rev",
            "line_nb": 1642,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s <-; rewrite rev_cons sumn_rcons addnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "foldl_rev",
            "line_nb": 1652,
            "steps": [
                {
                    "command": [
                        "elim/last_ind: s z => [|s x IHs] z //=.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by rewrite rev_rcons -cats1 foldr_cat -IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "foldl_cat",
            "line_nb": 1656,
            "steps": [
                {
                    "command": [
                        "by rewrite -(revK (s1 ++ s2)) foldl_rev rev_cat foldr_cat -!foldl_rev !revK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_pairmap",
            "line_nb": 1664,
            "steps": [
                {
                    "command": [
                        "by elim: s x => //= y s IHs x; rewrite IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pairmap_cat",
            "line_nb": 1667,
            "steps": [
                {
                    "command": [
                        "by elim: s1 x => //= y s1 IHs1 x; rewrite IHs1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_pairmap",
            "line_nb": 1670,
            "steps": [
                {
                    "command": [
                        "by elim: s n => [|y s IHs] [|n] //= Hn x; apply: IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_scanl",
            "line_nb": 1674,
            "steps": [
                {
                    "command": [
                        "by elim: s x => //= y s IHs x; rewrite IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scanl_cat",
            "line_nb": 1677,
            "steps": [
                {
                    "command": [
                        "by elim: s1 x => //= y s1 IHs1 x; rewrite IHs1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_scanl",
            "line_nb": 1680,
            "steps": [
                {
                    "command": [
                        "by elim: s n => [|y s IHs] [|n] Hn x //=; rewrite ?take0 ?IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scanlK",
            "line_nb": 1683,
            "steps": [
                {
                    "command": [
                        "by move=> Hfg x s; elim: s x => //= y s IHs x; rewrite Hfg IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pairmapK",
            "line_nb": 1686,
            "steps": [
                {
                    "command": [
                        "by move=> Hgf x s; elim: s x => //= y s IHs x; rewrite Hgf IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "zip_unzip",
            "line_nb": 1696,
            "steps": [
                {
                    "command": [
                        "by elim: s => [|[x y] s /= ->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unzip1_zip",
            "line_nb": 1699,
            "steps": [
                {
                    "command": [
                        "by elim: s t => [|x s IHs] [|y t] //= le_s_t; rewrite IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unzip2_zip",
            "line_nb": 1702,
            "steps": [
                {
                    "command": [
                        "by elim: s t => [|x s IHs] [|y t] //= le_t_s; rewrite IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size1_zip",
            "line_nb": 1705,
            "steps": [
                {
                    "command": [
                        "by elim: s t => [|x s IHs] [|y t] //= Hs; rewrite IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size2_zip",
            "line_nb": 1708,
            "steps": [
                {
                    "command": [
                        "by elim: s t => [|x s IHs] [|y t] //= Hs; rewrite IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_zip",
            "line_nb": 1711,
            "steps": [
                {
                    "command": [
                        "by elim: s t => [|x s IHs] [|t2 t] //=; rewrite IHs -add1n addn_minr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "zip_cat",
            "line_nb": 1714,
            "steps": [
                {
                    "command": [
                        "by elim: s1 t1 => [|x s IHs] [|y t] //= [/IHs->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_zip",
            "line_nb": 1717,
            "steps": [
                {
                    "command": [
                        "by elim: i s t => [|i IHi] [|y1 s1] [|y2 t] //= [/IHi->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_zip_cond",
            "line_nb": 1720,
            "steps": [
                {
                    "command": [
                        "rewrite size_zip ltnNge geq_min.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by elim: s t i => [|x s IHs] [|y t] [|i] //=; rewrite ?orbT -?IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "zip_rcons",
            "line_nb": 1724,
            "steps": [
                {
                    "command": [
                        "by move=> eq_sz; rewrite -!cats1 zip_cat //= eq_sz.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rev_zip",
            "line_nb": 1727,
            "steps": [
                {
                    "command": [
                        "elim: s1 s2 => [|x s1 IHs] [|y s2] //= [eq_sz].",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by rewrite !rev_cons zip_rcons ?IHs ?size_rev.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_flatten",
            "line_nb": 1742,
            "steps": [
                {
                    "command": [
                        "by elim: ss => //= s ss <-; rewrite size_cat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "flatten_cat",
            "line_nb": 1745,
            "steps": [
                {
                    "command": [
                        "by elim: ss1 => //= s ss1 ->; rewrite catA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_reshape",
            "line_nb": 1748,
            "steps": [
                {
                    "command": [
                        "by elim: sh s => //= s0 sh IHsh s; rewrite IHsh.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_reshape",
            "line_nb": 1751,
            "steps": [
                {
                    "command": [
                        "elim: n sh l => [| n IHn] [| sh0 sh] l; rewrite ?take0 ?drop0 //=.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "by rewrite addnC -drop_drop; apply: IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "flattenK",
            "line_nb": 1755,
            "steps": [
                {
                    "command": [
                        "by elim: ss => //= s ss IHss; rewrite take_size_cat ?drop_size_cat ?IHss.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "reshapeKr",
            "line_nb": 1758,
            "steps": [
                {
                    "command": [
                        "elim: sh s => [[]|n sh IHsh] //= s sz_s; rewrite IHsh ?cat_take_drop //.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "by rewrite size_drop leq_subLR.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "reshapeKl",
            "line_nb": 1762,
            "steps": [
                {
                    "command": [
                        "elim: sh s => [[]|n sh IHsh] //= s sz_s.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "rewrite size_takel; last exact: leq_trans (leq_addr _ _) sz_s.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite IHsh // -(leq_add2l n) size_drop -maxnE leq_max sz_s orbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "flatten_rcons",
            "line_nb": 1767,
            "steps": [
                {
                    "command": [
                        "by rewrite -cats1 flatten_cat /= cats0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "flatten_seq1",
            "line_nb": 1770,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= s0 s ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "count_flatten",
            "line_nb": 1773,
            "steps": [
                {
                    "command": [
                        "by elim: ss => //= s ss IHss; rewrite count_cat IHss.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "filter_flatten",
            "line_nb": 1776,
            "steps": [
                {
                    "command": [
                        "by elim: ss => // s ss /= <-; apply: filter_cat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rev_flatten",
            "line_nb": 1779,
            "steps": [
                {
                    "command": [
                        "elim: ss => //= s ss IHss.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by rewrite rev_cons flatten_rcons -IHss rev_cat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_shape",
            "line_nb": 1783,
            "steps": [
                {
                    "command": [
                        "rewrite /shape; case: (ltnP i (size ss)) => Hi; first exact: nth_map.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !nth_default // size_map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "shape_rev",
            "line_nb": 1787,
            "steps": [
                {
                    "command": [
                        "exact: map_rev.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_from_flatten_shape",
            "line_nb": 1790,
            "steps": [
                {
                    "command": [
                        "by move=> Eflat Esh; rewrite -[LHS]flattenK Eflat Esh flattenK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "reshape_rcons",
            "line_nb": 1802,
            "steps": [
                {
                    "command": [
                        "move=> Dmn; apply/(can_inj revK); rewrite rev_reshape ?rev_rcons ?sumn_rcons //.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "rewrite /= take_rev drop_rev -Dmn addnK revK -rev_reshape //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite size_takel // -Dmn leq_addr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "flatten_indexP",
            "line_nb": 1807,
            "steps": [
                {
                    "command": [
                        "move=> lt_c_sh; rewrite -[sh in sumn sh](cat_take_drop r) sumn_cat ltn_add2l.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "suffices lt_r_sh: r < size sh by rewrite (drop_nth 0 lt_r_sh) ltn_addr.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "by case: ltnP => // le_sh_r; rewrite nth_default in lt_c_sh.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "reshape_indexP",
            "line_nb": 1812,
            "steps": [
                {
                    "command": [
                        "rewrite /reshape_index; elim: sh => //= n sh IHsh in i *; rewrite subn_eq0.",
                        "VernacExtend",
                        "c376f01ebc4f30ac37ca603296f6548f23fe4a48"
                    ]
                },
                {
                    "command": [
                        "by have [// | le_n_i] := ltnP i n; rewrite -leq_subLR subSn // => /IHsh.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "reshape_offsetP",
            "line_nb": 1816,
            "steps": [
                {
                    "command": [
                        "rewrite /reshape_offset /reshape_index; elim: sh => //= n sh IHsh in i *.",
                        "VernacExtend",
                        "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
                    ]
                },
                {
                    "command": [
                        "rewrite subn_eq0; have [| le_n_i] := ltnP i n; first by rewrite subn0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -leq_subLR /= subnDA subSn // => /IHsh.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "reshape_indexK",
            "line_nb": 1821,
            "steps": [
                {
                    "command": [
                        "rewrite /reshape_offset /reshape_index /flatten_index -subSKn.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "elim: sh => //= n sh IHsh in i *; rewrite subn_eq0; have [//|le_n_i] := ltnP.",
                        "VernacExtend",
                        "ccee67ded37cbdb863a7863d6bf3474936020f74"
                    ]
                },
                {
                    "command": [
                        "by rewrite /= subnDA subSn // -addnA IHsh subnKC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "flatten_indexKl",
            "line_nb": 1826,
            "steps": [
                {
                    "command": [
                        "rewrite /reshape_index /flatten_index.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "elim: sh r => [|n sh IHsh] [|r] //= lt_c_sh; first by rewrite ifT.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -addnA -addnS addKn IHsh.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "flatten_indexKr",
            "line_nb": 1831,
            "steps": [
                {
                    "command": [
                        "rewrite /reshape_offset /reshape_index /flatten_index.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "elim: sh r => [|n sh IHsh] [|r] //= lt_c_sh; first by rewrite ifT ?subn0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -addnA -addnS addKn /= subnDl IHsh.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_flatten",
            "line_nb": 1836,
            "steps": [
                {
                    "command": [
                        "rewrite /reshape_offset -subSKn {}/r /reshape_index.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "elim: ss => //= s ss IHss in i *; rewrite subn_eq0 nth_cat.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "by have [//|le_s_i] := ltnP; rewrite subnDA subSn /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "reshape_leq",
            "line_nb": 1841,
            "steps": [
                {
                    "command": [
                        "rewrite {}/r1 {}/c1 {}/r2 {}/c2 /reshape_offset /reshape_index.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "elim: sh => [|s0 s IHs] /= in i1 i2 *; rewrite ?subn0 ?subn_eq0 //.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "have [[] i1s0 [] i2s0] := (ltnP i1 s0, ltnP i2 s0); first by rewrite !subn0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by apply: leq_trans i2s0; apply/ltnW.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by apply/negP => /(leq_trans i1s0); rewrite leqNgt i2s0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite !subSn // !eqSS !ltnS !subnDA -IHs leq_subLR subnKC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_flatten",
            "line_nb": 1853,
            "steps": [
                {
                    "command": [
                        "by elim: ss => // s ss /= <-; apply: map_cat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sumn_flatten",
            "line_nb": 1856,
            "steps": [
                {
                    "command": [
                        "by elim: ss => // s ss /= <-; apply: sumn_cat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_reshape",
            "line_nb": 1859,
            "steps": [
                {
                    "command": [
                        "by elim: sh s => //= sh0 sh IHsh s; rewrite map_take IHsh map_drop.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "flattenP",
            "line_nb": 1864,
            "steps": [
                {
                    "command": [
                        "elim: A => /= [|s A /iffP IH_A]; [by right; case | rewrite mem_cat].",
                        "VernacExtend",
                        "6f713a0299dcb4531f4e0400d0b4ac3fb1e0973c"
                    ]
                },
                {
                    "command": [
                        "have [s_x|s'x] := @idP (x \\in s); first by left; exists s; rewrite ?mem_head.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply: IH_A => [[t] | [t /predU1P[->|]]]; exists t; rewrite // mem_behead.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "flatten_mapP",
            "line_nb": 1870,
            "steps": [
                {
                    "command": [
                        "apply: (iffP flattenP) => [[_ /mapP[x sx ->]] | [x sx]] Axy; first by exists x.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by exists (A x); rewrite ?map_f.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_undup_count",
            "line_nb": 1877,
            "steps": [
                {
                    "command": [
                        "pose N x r := count_mem x (flatten [seq nseq (count_mem y s) y | y <- r]).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "apply/allP=> x _; rewrite /= -/(N x _).",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "have Nx0 r (r'x : x \\notin r): N x r = 0.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply/count_memPn; apply: contra r'x => /flatten_mapP[y r_y /nseqP[->]].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [|s'x] := boolP (x \\in s); last by rewrite Nx0 ?mem_undup ?(count_memPn _).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite -mem_undup => /perm_to_rem/catCA_perm_subst->; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by move=> s1 s2 s3; rewrite /N !map_cat !flatten_cat !count_cat addnCA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite /N /= count_cat -/(N x _) Nx0 ?mem_rem_uniq ?undup_uniq ?inE ?eqxx //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite addn0 -{2}(size_nseq (_ s) x) -all_count all_pred1_nseq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_allpairs",
            "line_nb": 1892,
            "steps": [
                {
                    "command": [
                        "by elim: s => //= x s IHs; rewrite size_cat size_map IHs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "allpairs_cat",
            "line_nb": 1895,
            "steps": [
                {
                    "command": [
                        "by elim: s1 => //= x s1 ->; rewrite catA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "allpairsP",
            "line_nb": 1905,
            "steps": [
                {
                    "command": [
                        "elim: s => [|x s IHs /=]; first by right=> [[p []]].",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite mem_cat; have [fxt_z | not_fxt_z] := altP mapP.",
                        "VernacExtend",
                        "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
                    ]
                },
                {
                    "command": [
                        "by left; have [y t_y ->] := fxt_z; exists (x, y); rewrite mem_head.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: (iffP IHs) => [] [[x' y] /= [s_x' t_y def_z]]; exists (x', y).",
                        "VernacExtend",
                        "381d5710e29dfc757190634490ee8b4a9cd77c34"
                    ]
                },
                {
                    "command": [
                        "by rewrite !inE predU1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by have [def_x' | //] := predU1P s_x'; rewrite def_z def_x' map_f in not_fxt_z.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_allpairs",
            "line_nb": 1913,
            "steps": [
                {
                    "command": [
                        "move=> eq_s eq_t z.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by apply/allpairsP/allpairsP=> [] [p fpz]; exists p; rewrite eq_s eq_t in fpz *.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_iffLR",
            "line_nb": 1938,
            "steps": [
                {
                    "command": [
                        "have homo_ltn T (f : nat -> T) (r : T -> T -> Prop) : (forall y x z, r x y -> r y z -> r x z) -> (forall i, r (f i) (f i.+1)) -> {homo f : i j / i < j >-> r i j}.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "move=> rtrans rfS x y; elim: y x => // y ihy x; rewrite ltnS leq_eqVlt.",
                        "VernacExtend",
                        "cbbd752ffe762291637c91622d62599b0c60d123"
                    ]
                },
                {
                    "command": [
                        "case/orP=> [/eqP-> // | ltxy]; apply: rtrans (rfS _); exact: ihy.",
                        "VernacExtend",
                        "2601770e6b0673602561bb5724ff31d9d993f449"
                    ]
                },
                {
                    "command": [
                        "move=> Ps_iff; have ltn_imply : {homo nth P0 Ps : m n / m < n >-> (m -> n)}.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "apply: homo_ltn => [??? xy yz /xy /yz //|i].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "elim: Ps i P0 Ps_iff => [|P [|/=Q Ps] IHPs] [|i]//= P0 [P0P Ps_iff]//=; do ?by [rewrite nth_nil|case: Ps_iff].",
                        "VernacExtend",
                        "76a5e31afa9f762ef77303567a3381de5e93bd22"
                    ]
                },
                {
                    "command": [
                        "by case: Ps_iff => [PQ Ps_iff]; apply: IHPs; split => // /P0P.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have {ltn_imply}leq_imply : {homo nth P0 Ps : m n / m <= n >-> (m -> n)}.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by move=> m n; rewrite leq_eqVlt => /predU1P[->//|/ltn_imply].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move=> [:P0ton Pnto0] [|m] [|n]//=.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "abstract: P0ton n.",
                        "VernacExtend",
                        "6dee0a3c7f08fdffe952c321d966d0fc6306dcfd"
                    ]
                },
                {
                    "command": [
                        "suff P0to0 : P0 -> nth P0 Ps 0 by move=> /P0to0; apply: leq_imply.",
                        "VernacExtend",
                        "d07fc8b2103f140554938023774bf3f75d04ba99"
                    ]
                },
                {
                    "command": [
                        "by case: Ps Ps_iff {leq_imply} => // P Ps [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "abstract: Pnto0 m => /(leq_imply m (maxn (size Ps) m)).",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite nth_default ?leq_max ?leqnn // orbT ; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by move=> /Pnto0; apply: P0ton.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_iffP",
            "line_nb": 1958,
            "steps": [
                {
                    "command": [
                        "by move=> /all_iffLR iffPs m n; split => /iffPs.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all2E",
            "line_nb": 1969,
            "steps": [
                {
                    "command": [
                        "by elim: s1 s2 => [|x s1 ihs1] [|y s2] //=; rewrite ihs1 andbCA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}