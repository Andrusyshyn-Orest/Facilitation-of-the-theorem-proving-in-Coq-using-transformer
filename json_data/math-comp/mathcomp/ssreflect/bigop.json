{
    "filename": "mathcomp/ssreflect/bigop.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrbool ssrfun eqtype ssrnat seq path div fintype.",
            "VernacRequire",
            "fddb1a7662c5fc606fe44ca30e938746db77bc37"
        ],
        [
            "From mathcomp Require Import tuple finfun.",
            "VernacRequire",
            "31cccf3ab8b60aa022e42ae8285b7b5c0bc57d95"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Reserved Notation \"\\big [ op / idx ]_ i F\" (at level 36, F at level 36, op, idx at level 10, i at level 0, right associativity, format \"'[' \\big [ op / idx ]_ i '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "d19b98de1724c03b08e114daffb82a9b36525739"
        ],
        [
            "Reserved Notation \"\\big [ op / idx ]_ ( i <- r | P ) F\" (at level 36, F at level 36, op, idx at level 10, i, r at level 50, format \"'[' \\big [ op / idx ]_ ( i <- r | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "17026624a8c93f65654f45d9a805d5e52770ea54"
        ],
        [
            "Reserved Notation \"\\big [ op / idx ]_ ( i <- r ) F\" (at level 36, F at level 36, op, idx at level 10, i, r at level 50, format \"'[' \\big [ op / idx ]_ ( i <- r ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "488d54de24e605d643e2e040baab6106ee77f35b"
        ],
        [
            "Reserved Notation \"\\big [ op / idx ]_ ( m <= i < n | P ) F\" (at level 36, F at level 36, op, idx at level 10, m, i, n at level 50, format \"'[' \\big [ op / idx ]_ ( m <= i < n | P ) F ']'\").",
            "VernacSyntaxExtension",
            "b58a015981afa7f2961a1acca7117aa56ff61638"
        ],
        [
            "Reserved Notation \"\\big [ op / idx ]_ ( m <= i < n ) F\" (at level 36, F at level 36, op, idx at level 10, i, m, n at level 50, format \"'[' \\big [ op / idx ]_ ( m <= i < n ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "b045400ac66cc330c993f363eed8a0c250187ce6"
        ],
        [
            "Reserved Notation \"\\big [ op / idx ]_ ( i | P ) F\" (at level 36, F at level 36, op, idx at level 10, i at level 50, format \"'[' \\big [ op / idx ]_ ( i | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "a97dcfb1c406e17ffca1555c4d05def44940aa4d"
        ],
        [
            "Reserved Notation \"\\big [ op / idx ]_ ( i : t | P ) F\" (at level 36, F at level 36, op, idx at level 10, i at level 50, format \"'[' \\big [ op / idx ]_ ( i : t | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "a2b939eacfe1934c063d15c86ef16bcddf9975a2"
        ],
        [
            "Reserved Notation \"\\big [ op / idx ]_ ( i : t ) F\" (at level 36, F at level 36, op, idx at level 10, i at level 50, format \"'[' \\big [ op / idx ]_ ( i : t ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "439ef239ae9b616e0863f26d07b2be1f4c78b2ee"
        ],
        [
            "Reserved Notation \"\\big [ op / idx ]_ ( i < n | P ) F\" (at level 36, F at level 36, op, idx at level 10, i, n at level 50, format \"'[' \\big [ op / idx ]_ ( i < n | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "4e694f603f65ba0e5822f31f43fa931d69a72317"
        ],
        [
            "Reserved Notation \"\\big [ op / idx ]_ ( i < n ) F\" (at level 36, F at level 36, op, idx at level 10, i, n at level 50, format \"'[' \\big [ op / idx ]_ ( i < n ) F ']'\").",
            "VernacSyntaxExtension",
            "9698dc8c348c24cd628c07b65c5cfba16531b798"
        ],
        [
            "Reserved Notation \"\\big [ op / idx ]_ ( i 'in' A | P ) F\" (at level 36, F at level 36, op, idx at level 10, i, A at level 50, format \"'[' \\big [ op / idx ]_ ( i 'in' A | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "ad2def4f013d2d260453561488545a5fe0ba2bd2"
        ],
        [
            "Reserved Notation \"\\big [ op / idx ]_ ( i 'in' A ) F\" (at level 36, F at level 36, op, idx at level 10, i, A at level 50, format \"'[' \\big [ op / idx ]_ ( i 'in' A ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "e095af1a40d6a8c729000898a18fcd31b3cb04d6"
        ],
        [
            "Reserved Notation \"\\sum_ i F\" (at level 41, F at level 41, i at level 0, right associativity, format \"'[' \\sum_ i '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "9bc95bbffd92b478ba190914e508476db8bbad6a"
        ],
        [
            "Reserved Notation \"\\sum_ ( i <- r | P ) F\" (at level 41, F at level 41, i, r at level 50, format \"'[' \\sum_ ( i <- r | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "719f805be86e1488230b8795df126d17dc2c0db2"
        ],
        [
            "Reserved Notation \"\\sum_ ( i <- r ) F\" (at level 41, F at level 41, i, r at level 50, format \"'[' \\sum_ ( i <- r ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "e6f73c41fc25590ce46247bac7046270f3ca09f9"
        ],
        [
            "Reserved Notation \"\\sum_ ( m <= i < n | P ) F\" (at level 41, F at level 41, i, m, n at level 50, format \"'[' \\sum_ ( m <= i < n | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "9781f139cb1a34a6f7c8f501c89f548341ec8259"
        ],
        [
            "Reserved Notation \"\\sum_ ( m <= i < n ) F\" (at level 41, F at level 41, i, m, n at level 50, format \"'[' \\sum_ ( m <= i < n ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "8e19dbf64fcaef322c3badcf3b3a2847475eddc7"
        ],
        [
            "Reserved Notation \"\\sum_ ( i | P ) F\" (at level 41, F at level 41, i at level 50, format \"'[' \\sum_ ( i | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "f4c3910af4520103112ef9a7650c45de13f40ea2"
        ],
        [
            "Reserved Notation \"\\sum_ ( i : t | P ) F\" (at level 41, F at level 41, i at level 50, only parsing).",
            "VernacSyntaxExtension",
            "848e312eea70a2ba946172ca9a53a7e7a28bbdc2"
        ],
        [
            "Reserved Notation \"\\sum_ ( i : t ) F\" (at level 41, F at level 41, i at level 50, only parsing).",
            "VernacSyntaxExtension",
            "ccbb3f09db62c33490700909a1057db146b8c621"
        ],
        [
            "Reserved Notation \"\\sum_ ( i < n | P ) F\" (at level 41, F at level 41, i, n at level 50, format \"'[' \\sum_ ( i < n | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "e4cdfc8efcba86d7477f0b4db51d7b6c32c4dde4"
        ],
        [
            "Reserved Notation \"\\sum_ ( i < n ) F\" (at level 41, F at level 41, i, n at level 50, format \"'[' \\sum_ ( i < n ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "00881859b2e4eeb127c9f7207c519898deaeeedb"
        ],
        [
            "Reserved Notation \"\\sum_ ( i 'in' A | P ) F\" (at level 41, F at level 41, i, A at level 50, format \"'[' \\sum_ ( i 'in' A | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "50cbdf6742ab0602083a2aa4266516b381325aae"
        ],
        [
            "Reserved Notation \"\\sum_ ( i 'in' A ) F\" (at level 41, F at level 41, i, A at level 50, format \"'[' \\sum_ ( i 'in' A ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "11c6692d483256d53ddd8a0614e00c833a838f7c"
        ],
        [
            "Reserved Notation \"\\max_ i F\" (at level 41, F at level 41, i at level 0, format \"'[' \\max_ i '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "01d3c78a67c4c0acf41faa219904ef2c82b5ef36"
        ],
        [
            "Reserved Notation \"\\max_ ( i <- r | P ) F\" (at level 41, F at level 41, i, r at level 50, format \"'[' \\max_ ( i <- r | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "4ddc1d94fb1353c42686c237ff57786838ac6272"
        ],
        [
            "Reserved Notation \"\\max_ ( i <- r ) F\" (at level 41, F at level 41, i, r at level 50, format \"'[' \\max_ ( i <- r ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "443559c398c563ca41495bae4596b2a6a28dafc0"
        ],
        [
            "Reserved Notation \"\\max_ ( m <= i < n | P ) F\" (at level 41, F at level 41, i, m, n at level 50, format \"'[' \\max_ ( m <= i < n | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "488296814d24c7bbb212aa0c8936cfb163625948"
        ],
        [
            "Reserved Notation \"\\max_ ( m <= i < n ) F\" (at level 41, F at level 41, i, m, n at level 50, format \"'[' \\max_ ( m <= i < n ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "d496864f387d1de0b1dd8d2b4fe2e779e23ec2a4"
        ],
        [
            "Reserved Notation \"\\max_ ( i | P ) F\" (at level 41, F at level 41, i at level 50, format \"'[' \\max_ ( i | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "70cdb656c4208a7eca747cb300d37ff6b286be52"
        ],
        [
            "Reserved Notation \"\\max_ ( i : t | P ) F\" (at level 41, F at level 41, i at level 50, only parsing).",
            "VernacSyntaxExtension",
            "0d0f1496e87d2115cb6a61603e2d8b42fd3cf7aa"
        ],
        [
            "Reserved Notation \"\\max_ ( i : t ) F\" (at level 41, F at level 41, i at level 50, only parsing).",
            "VernacSyntaxExtension",
            "be67804982ac57548cf3ac68f33d4b528e129106"
        ],
        [
            "Reserved Notation \"\\max_ ( i < n | P ) F\" (at level 41, F at level 41, i, n at level 50, format \"'[' \\max_ ( i < n | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "3f926efad525e2f1c073eea52aa889f4b862d85c"
        ],
        [
            "Reserved Notation \"\\max_ ( i < n ) F\" (at level 41, F at level 41, i, n at level 50, format \"'[' \\max_ ( i < n ) F ']'\").",
            "VernacSyntaxExtension",
            "ef1cedd46575071c446c5aef6d3608a6981114a5"
        ],
        [
            "Reserved Notation \"\\max_ ( i 'in' A | P ) F\" (at level 41, F at level 41, i, A at level 50, format \"'[' \\max_ ( i 'in' A | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "bba17c24373143141b61d88b352bdc207cbe37bc"
        ],
        [
            "Reserved Notation \"\\max_ ( i 'in' A ) F\" (at level 41, F at level 41, i, A at level 50, format \"'[' \\max_ ( i 'in' A ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "6353b5b563f36c8cd17124cc484bf1629f64a5ec"
        ],
        [
            "Reserved Notation \"\\prod_ i F\" (at level 36, F at level 36, i at level 0, format \"'[' \\prod_ i '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "d900669799519272c0d70485a3558794f2fae96e"
        ],
        [
            "Reserved Notation \"\\prod_ ( i <- r | P ) F\" (at level 36, F at level 36, i, r at level 50, format \"'[' \\prod_ ( i <- r | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "f2b9c564747aeb1e298f2aa2480fa9eaaead0ce6"
        ],
        [
            "Reserved Notation \"\\prod_ ( i <- r ) F\" (at level 36, F at level 36, i, r at level 50, format \"'[' \\prod_ ( i <- r ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "ecc119fe6bb07d850e3b30e076b3819b25158f0b"
        ],
        [
            "Reserved Notation \"\\prod_ ( m <= i < n | P ) F\" (at level 36, F at level 36, i, m, n at level 50, format \"'[' \\prod_ ( m <= i < n | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "317fb83b862cca4d9dd7bef9e8716b6a6441754b"
        ],
        [
            "Reserved Notation \"\\prod_ ( m <= i < n ) F\" (at level 36, F at level 36, i, m, n at level 50, format \"'[' \\prod_ ( m <= i < n ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "5add4216c7548632a7481143b1b4ae3db1277043"
        ],
        [
            "Reserved Notation \"\\prod_ ( i | P ) F\" (at level 36, F at level 36, i at level 50, format \"'[' \\prod_ ( i | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "6500c6c72a7f079aa3b1d0090f34fd49d6758192"
        ],
        [
            "Reserved Notation \"\\prod_ ( i : t | P ) F\" (at level 36, F at level 36, i at level 50, only parsing).",
            "VernacSyntaxExtension",
            "19a654eddcdd189e2cfc6cbeda734274b2424ae5"
        ],
        [
            "Reserved Notation \"\\prod_ ( i : t ) F\" (at level 36, F at level 36, i at level 50, only parsing).",
            "VernacSyntaxExtension",
            "c5dfe9c008561d401e86008917c94c6515b5b7e1"
        ],
        [
            "Reserved Notation \"\\prod_ ( i < n | P ) F\" (at level 36, F at level 36, i, n at level 50, format \"'[' \\prod_ ( i < n | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "e6c6ff76443683a3ce5e9a3a6049ca41b8854948"
        ],
        [
            "Reserved Notation \"\\prod_ ( i < n ) F\" (at level 36, F at level 36, i, n at level 50, format \"'[' \\prod_ ( i < n ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "fd91699a9878381faa15b7e744082989d1a62a9a"
        ],
        [
            "Reserved Notation \"\\prod_ ( i 'in' A | P ) F\" (at level 36, F at level 36, i, A at level 50, format \"'[' \\prod_ ( i 'in' A | P ) F ']'\").",
            "VernacSyntaxExtension",
            "a56a9b9b89e2650172667e1e3ac0757483c98a06"
        ],
        [
            "Reserved Notation \"\\prod_ ( i 'in' A ) F\" (at level 36, F at level 36, i, A at level 50, format \"'[' \\prod_ ( i 'in' A ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "37a67508183db8c187920b7c0d263707e3914e13"
        ],
        [
            "Reserved Notation \"\\bigcup_ i F\" (at level 41, F at level 41, i at level 0, format \"'[' \\bigcup_ i '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "2a52ac8c1b20c970bdb555aa9e6ec1f3967d1ea9"
        ],
        [
            "Reserved Notation \"\\bigcup_ ( i <- r | P ) F\" (at level 41, F at level 41, i, r at level 50, format \"'[' \\bigcup_ ( i <- r | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "22e7318449f9680f702e0ae682298c47fc4aaff1"
        ],
        [
            "Reserved Notation \"\\bigcup_ ( i <- r ) F\" (at level 41, F at level 41, i, r at level 50, format \"'[' \\bigcup_ ( i <- r ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "f9587f5a5a14ad405fae12bb6e27f582365bfb68"
        ],
        [
            "Reserved Notation \"\\bigcup_ ( m <= i < n | P ) F\" (at level 41, F at level 41, m, i, n at level 50, format \"'[' \\bigcup_ ( m <= i < n | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "b25476d7672a6a6d6a9f48f7b5f8a6b7654003a7"
        ],
        [
            "Reserved Notation \"\\bigcup_ ( m <= i < n ) F\" (at level 41, F at level 41, i, m, n at level 50, format \"'[' \\bigcup_ ( m <= i < n ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "d1d72bdc2ad9df7faa63233a01ff992a594e5d1e"
        ],
        [
            "Reserved Notation \"\\bigcup_ ( i | P ) F\" (at level 41, F at level 41, i at level 50, format \"'[' \\bigcup_ ( i | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "dbc5e76cc3bdedcdd85cae8d82a78621d9523cfc"
        ],
        [
            "Reserved Notation \"\\bigcup_ ( i : t | P ) F\" (at level 41, F at level 41, i at level 50, format \"'[' \\bigcup_ ( i : t | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "4770723db98565f8ee3a165a7da33ed55f5f52cf"
        ],
        [
            "Reserved Notation \"\\bigcup_ ( i : t ) F\" (at level 41, F at level 41, i at level 50, format \"'[' \\bigcup_ ( i : t ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "be7559032241152378b6f7bc9e7f005b59a0c4d6"
        ],
        [
            "Reserved Notation \"\\bigcup_ ( i < n | P ) F\" (at level 41, F at level 41, i, n at level 50, format \"'[' \\bigcup_ ( i < n | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "f7591d11225b2ebe50db079fae73c8940f075d20"
        ],
        [
            "Reserved Notation \"\\bigcup_ ( i < n ) F\" (at level 41, F at level 41, i, n at level 50, format \"'[' \\bigcup_ ( i < n ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "a2ba2e85edae5b4f6f9af9e29df39ac44ac5a9e5"
        ],
        [
            "Reserved Notation \"\\bigcup_ ( i 'in' A | P ) F\" (at level 41, F at level 41, i, A at level 50, format \"'[' \\bigcup_ ( i 'in' A | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "4fc96151ab54467991b0ce0b9c7e65ccba00d31b"
        ],
        [
            "Reserved Notation \"\\bigcup_ ( i 'in' A ) F\" (at level 41, F at level 41, i, A at level 50, format \"'[' \\bigcup_ ( i 'in' A ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "757f8374cabc28aea6cb90fd882c334e73fe6b65"
        ],
        [
            "Reserved Notation \"\\bigcap_ i F\" (at level 41, F at level 41, i at level 0, format \"'[' \\bigcap_ i '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "66743f51308de63c869da3487f90720ad1f12b71"
        ],
        [
            "Reserved Notation \"\\bigcap_ ( i <- r | P ) F\" (at level 41, F at level 41, i, r at level 50, format \"'[' \\bigcap_ ( i <- r | P ) F ']'\").",
            "VernacSyntaxExtension",
            "680a764bd72fd1207a34fbfb8dd6eae7482fb8a4"
        ],
        [
            "Reserved Notation \"\\bigcap_ ( i <- r ) F\" (at level 41, F at level 41, i, r at level 50, format \"'[' \\bigcap_ ( i <- r ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "fcc5c066b4ab2d123c7441dddf1fa6281f60c643"
        ],
        [
            "Reserved Notation \"\\bigcap_ ( m <= i < n | P ) F\" (at level 41, F at level 41, m, i, n at level 50, format \"'[' \\bigcap_ ( m <= i < n | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "a534368d23ca26ec5173ba907fd7b52f0a65cfa0"
        ],
        [
            "Reserved Notation \"\\bigcap_ ( m <= i < n ) F\" (at level 41, F at level 41, i, m, n at level 50, format \"'[' \\bigcap_ ( m <= i < n ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "cfff588a1e90aaefd9581732db12735dab6421d7"
        ],
        [
            "Reserved Notation \"\\bigcap_ ( i | P ) F\" (at level 41, F at level 41, i at level 50, format \"'[' \\bigcap_ ( i | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "83ea5cf253a7d3d070520494e982c6d44d722202"
        ],
        [
            "Reserved Notation \"\\bigcap_ ( i : t | P ) F\" (at level 41, F at level 41, i at level 50, format \"'[' \\bigcap_ ( i : t | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "7250f17489a84dbadefb1e0b59f6f6d72267559d"
        ],
        [
            "Reserved Notation \"\\bigcap_ ( i : t ) F\" (at level 41, F at level 41, i at level 50, format \"'[' \\bigcap_ ( i : t ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "516b3f51d118c502bab0cb3a61800eb73020a81a"
        ],
        [
            "Reserved Notation \"\\bigcap_ ( i < n | P ) F\" (at level 41, F at level 41, i, n at level 50, format \"'[' \\bigcap_ ( i < n | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "a0d1a121753f8748d4a92d34eb03821c57695869"
        ],
        [
            "Reserved Notation \"\\bigcap_ ( i < n ) F\" (at level 41, F at level 41, i, n at level 50, format \"'[' \\bigcap_ ( i < n ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "1bc0fa903d6be9f0f3f83e11900b94d773b26bf2"
        ],
        [
            "Reserved Notation \"\\bigcap_ ( i 'in' A | P ) F\" (at level 41, F at level 41, i, A at level 50, format \"'[' \\bigcap_ ( i 'in' A | P ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "ce1c775b9c285d0f93875e8f33098688b00e8c29"
        ],
        [
            "Reserved Notation \"\\bigcap_ ( i 'in' A ) F\" (at level 41, F at level 41, i, A at level 50, format \"'[' \\bigcap_ ( i 'in' A ) '/ ' F ']'\").",
            "VernacSyntaxExtension",
            "0fadfe9adedc033edd9b0a135c13eb6b0396f512"
        ],
        [
            "Module Monoid.",
            "VernacDefineModule",
            "d180582c2d45eec1b754515bc8bdea7b1d3f2861"
        ],
        [
            "Section Definitions.",
            "VernacBeginSection",
            "44c8aeee6f7e234b1ae876a1cda441d352768d1b"
        ],
        [
            "Variables (T : Type) (idm : T).",
            "VernacAssumption",
            "5166185fb69d222d91bedaf782267db16e8e1baf"
        ],
        [
            "Structure law := Law { operator : T -> T -> T; _ : associative operator; _ : left_id idm operator; _ : right_id idm operator }.",
            "VernacInductive",
            "6c84802062a0cf3fe60c697ff43ae9a97060ff43"
        ],
        [
            "Local Coercion operator : law >-> Funclass.",
            "VernacCoercion",
            "8e22a3868023f3fcf931b884d78cdf6d1a222b48"
        ],
        [
            "Structure com_law := ComLaw { com_operator : law; _ : commutative com_operator }.",
            "VernacInductive",
            "4f4388e1e6ca15b837f8ad165df34f9b3fc6c3db"
        ],
        [
            "Local Coercion com_operator : com_law >-> law.",
            "VernacCoercion",
            "a0d871ae3ef2a3f04a2981d06c9a0b696e1a44a3"
        ],
        [
            "Structure mul_law := MulLaw { mul_operator : T -> T -> T; _ : left_zero idm mul_operator; _ : right_zero idm mul_operator }.",
            "VernacInductive",
            "8dfdbc99063223784eca11465f0754a28b430bfc"
        ],
        [
            "Local Coercion mul_operator : mul_law >-> Funclass.",
            "VernacCoercion",
            "96cf8796ad012c29b5c6444e4eab2c6267f331b2"
        ],
        [
            "Structure add_law (mul : T -> T -> T) := AddLaw { add_operator : com_law; _ : left_distributive mul add_operator; _ : right_distributive mul add_operator }.",
            "VernacInductive",
            "21071477063b8003a1577bc2f7c0aa5c41410f5f"
        ],
        [
            "Local Coercion add_operator : add_law >-> com_law.",
            "VernacCoercion",
            "adc53b5f080082315fdeb2057f6197325a3459b2"
        ],
        [
            "Let op_id (op1 op2 : T -> T -> T) := phant_id op1 op2.",
            "VernacDefinition",
            "bc904acb7d85ee3da291d3e71b2e12947f6b914a"
        ],
        [
            "Definition clone_law op := fun (opL : law) & op_id opL op => fun opmA op1m opm1 (opL' := @Law op opmA op1m opm1) & phant_id opL' opL => opL'.",
            "VernacDefinition",
            "514a14eca3fc3a49966c232cbfc48a8a625e158c"
        ],
        [
            "Definition clone_com_law op := fun (opL : law) (opC : com_law) & op_id opL op & op_id opC op => fun opmC (opC' := @ComLaw opL opmC) & phant_id opC' opC => opC'.",
            "VernacDefinition",
            "dc5a20018ab0a646996ea136cad21c6b82ed6166"
        ],
        [
            "Definition clone_mul_law op := fun (opM : mul_law) & op_id opM op => fun op0m opm0 (opM' := @MulLaw op op0m opm0) & phant_id opM' opM => opM'.",
            "VernacDefinition",
            "9d23727e469ab00dec1fac2c6a80ed91e063e9ce"
        ],
        [
            "Definition clone_add_law mop aop := fun (opC : com_law) (opA : add_law mop) & op_id opC aop & op_id opA aop => fun mopDm mopmD (opA' := @AddLaw mop opC mopDm mopmD) & phant_id opA' opA => opA'.",
            "VernacDefinition",
            "1a0bfe3f40e5d77af4986ecb9281cc90f0935847"
        ],
        [
            "End Definitions.",
            "VernacEndSegment",
            "a9ff902ce1bf921ade03bc4535b4de21f2fcc02c"
        ],
        [
            "Module Import Exports.",
            "VernacDefineModule",
            "f5a1035b94691e963f68c6f9e1df4c47bb9f27d8"
        ],
        [
            "Coercion operator : law >-> Funclass.",
            "VernacCoercion",
            "2727c614f4d9346b0fb0f10ba5daf179f16a6fba"
        ],
        [
            "Coercion com_operator : com_law >-> law.",
            "VernacCoercion",
            "17e8a0c7542fbfc3da2c66adb2ca80ffd55240d3"
        ],
        [
            "Coercion mul_operator : mul_law >-> Funclass.",
            "VernacCoercion",
            "ac71369d0661c299ec01224ad46cd7c2fc218ac2"
        ],
        [
            "Coercion add_operator : add_law >-> com_law.",
            "VernacCoercion",
            "219301f1133628b73fefe172b72244d7319a8e6b"
        ],
        [
            "Notation \"[ 'law' 'of' f ]\" := (@clone_law _ _ f _ id _ _ _ id) (at level 0, format\"[ 'law' 'of' f ]\") : form_scope.",
            "VernacNotation",
            "2056737a57e784591844ad710097480551bb9621"
        ],
        [
            "Notation \"[ 'com_law' 'of' f ]\" := (@clone_com_law _ _ f _ _ id id _ id) (at level 0, format \"[ 'com_law' 'of' f ]\") : form_scope.",
            "VernacNotation",
            "2f46cd91373fcbcaa77b9f41ce76603315925d90"
        ],
        [
            "Notation \"[ 'mul_law' 'of' f ]\" := (@clone_mul_law _ _ f _ id _ _ id) (at level 0, format\"[ 'mul_law' 'of' f ]\") : form_scope.",
            "VernacNotation",
            "cb1f99dc7a5a336fecb7d7fbb3a8e4a39d9e516b"
        ],
        [
            "Notation \"[ 'add_law' m 'of' a ]\" := (@clone_add_law _ _ m a _ _ id id _ _ id) (at level 0, format \"[ 'add_law' m 'of' a ]\") : form_scope.",
            "VernacNotation",
            "97084a404b8e458a3c618e4407d5c9165826964b"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "Section CommutativeAxioms.",
            "VernacBeginSection",
            "021b68171411dbe2863bdc8822247e954693c406"
        ],
        [
            "Variable (T : Type) (zero one : T) (mul add : T -> T -> T) (inv : T -> T).",
            "VernacAssumption",
            "c5eee5b5fd8de30fa5f127008e332a4ce488bdd3"
        ],
        [
            "Hypothesis mulC : commutative mul.",
            "VernacAssumption",
            "1113f08c2471a1790ef667f40124ce896f3937bf"
        ],
        [
            "Lemma mulC_id : left_id one mul -> right_id one mul.",
            "VernacStartTheoremProof",
            "dbb8317a1bcaebb5a6a55d8e1d68f49940afbf5f"
        ],
        [
            "by move=> mul1x x; rewrite mulC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulC_zero : left_zero zero mul -> right_zero zero mul.",
            "VernacStartTheoremProof",
            "97b8acf1352109e3a48084d888c53bfb3c6c8320"
        ],
        [
            "by move=> mul0x x; rewrite mulC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulC_dist : left_distributive mul add -> right_distributive mul add.",
            "VernacStartTheoremProof",
            "86cad878c9611942d4922e992aad41a6402fc022"
        ],
        [
            "by move=> mul_addl x y z; rewrite !(mulC x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End CommutativeAxioms.",
            "VernacEndSegment",
            "b3eda72d2a3c987b2c570b87c866c1dfba315334"
        ],
        [
            "Module Theory.",
            "VernacDefineModule",
            "ee0e24a0dfafd6fabdc3e744c74d7c5a9c820de0"
        ],
        [
            "Section Theory.",
            "VernacBeginSection",
            "57c003cfe14e91402b38cb11ad6e8012f88f07e9"
        ],
        [
            "Variables (T : Type) (idm : T).",
            "VernacAssumption",
            "5166185fb69d222d91bedaf782267db16e8e1baf"
        ],
        [
            "Section Plain.",
            "VernacBeginSection",
            "07a372aa05b5487bd3d853dbe1ec47526cb2821e"
        ],
        [
            "Variable mul : law idm.",
            "VernacAssumption",
            "16902424b7227bc0852f168137d721856245c348"
        ],
        [
            "Lemma mul1m : left_id idm mul.",
            "VernacStartTheoremProof",
            "7b79f4a2d80343c0ca23de595feee53dfdc3991e"
        ],
        [
            "by case mul.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulm1 : right_id idm mul.",
            "VernacStartTheoremProof",
            "bcdaf682a13de0580e3f70f22a542837b22a1f3f"
        ],
        [
            "by case mul.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulmA : associative mul.",
            "VernacStartTheoremProof",
            "791becbe359d98fadac490ae4d128d7922721d12"
        ],
        [
            "by case mul.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iteropE n x : iterop n mul x idm = iter n (mul x) idm.",
            "VernacStartTheoremProof",
            "dde6c04fde0c0ed3cee5b0bb01c8f35c82f5f29c"
        ],
        [
            "by case: n => // n; rewrite iterSr mulm1 iteropS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Plain.",
            "VernacEndSegment",
            "55cb578be1727d454e2c4bba5568da721ac109cb"
        ],
        [
            "Section Commutative.",
            "VernacBeginSection",
            "a95310dbc0906b22b5f0a3eff098acb479abe4ca"
        ],
        [
            "Variable mul : com_law idm.",
            "VernacAssumption",
            "2d00918dff5f1ec742a281b2109b014ece183ea4"
        ],
        [
            "Lemma mulmC : commutative mul.",
            "VernacStartTheoremProof",
            "2417763f55250d4720ce4c4a8fdadc0b9d4e8c31"
        ],
        [
            "by case mul.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulmCA : left_commutative mul.",
            "VernacStartTheoremProof",
            "50f69c95ce93155cf14be05e9b43d9c44f4b60ef"
        ],
        [
            "by move=> x y z; rewrite !mulmA (mulmC x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulmAC : right_commutative mul.",
            "VernacStartTheoremProof",
            "dc7b7de0c644b71164ef72d87cc56a2f431e2047"
        ],
        [
            "by move=> x y z; rewrite -!mulmA (mulmC y).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulmACA : interchange mul mul.",
            "VernacStartTheoremProof",
            "ea418aaf314e835713f1d0adbf603aea06c83fe8"
        ],
        [
            "by move=> x y z t; rewrite -!mulmA (mulmCA y).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Commutative.",
            "VernacEndSegment",
            "6c15964e12cbfa754b4f31af708ed4d342fdeafb"
        ],
        [
            "Section Mul.",
            "VernacBeginSection",
            "4e3a40737f00d4a89f1ad24bd721c80525b3bc93"
        ],
        [
            "Variable mul : mul_law idm.",
            "VernacAssumption",
            "551f27e57c6f9af37aa4740391bccf395c5b735d"
        ],
        [
            "Lemma mul0m : left_zero idm mul.",
            "VernacStartTheoremProof",
            "24ffa78988967e07f056a78076ed8435ad771312"
        ],
        [
            "by case mul.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulm0 : right_zero idm mul.",
            "VernacStartTheoremProof",
            "8005d158454d27c6f81619de7be22666749be830"
        ],
        [
            "by case mul.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Mul.",
            "VernacEndSegment",
            "f4c1828069b879244fd298506775511f3e2cf7a9"
        ],
        [
            "Section Add.",
            "VernacBeginSection",
            "2ed14f7f1ad853e4f3f0cb096277c692eceb9417"
        ],
        [
            "Variables (mul : T -> T -> T) (add : add_law idm mul).",
            "VernacAssumption",
            "6e0e1893bfb049c3425b953547b5af214dedad3e"
        ],
        [
            "Lemma addmA : associative add.",
            "VernacStartTheoremProof",
            "6a39cc14ee3e0132e7952b92f049a73503f9a959"
        ],
        [
            "exact: mulmA.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addmC : commutative add.",
            "VernacStartTheoremProof",
            "5e11203b4d897856c9fccd41bac0efd45c4c9f40"
        ],
        [
            "exact: mulmC.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addmCA : left_commutative add.",
            "VernacStartTheoremProof",
            "dc086fb9f4857dc320ab0756d28b7709f2e8f78a"
        ],
        [
            "exact: mulmCA.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addmAC : right_commutative add.",
            "VernacStartTheoremProof",
            "6b966b0959447a632166b59a49cce0fb63d61651"
        ],
        [
            "exact: mulmAC.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add0m : left_id idm add.",
            "VernacStartTheoremProof",
            "47200f8da29da55e15ea7426558806ecfc01ec1a"
        ],
        [
            "exact: mul1m.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addm0 : right_id idm add.",
            "VernacStartTheoremProof",
            "7cd9f6bd1ee9dfb015a3af79f5a0cfb5dad7a607"
        ],
        [
            "exact: mulm1.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulm_addl : left_distributive mul add.",
            "VernacStartTheoremProof",
            "fb0141ea3ebf51c1e828f94908aebf350769b246"
        ],
        [
            "by case add.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulm_addr : right_distributive mul add.",
            "VernacStartTheoremProof",
            "96204f50d5d7a6c73d7e667bdcf8f31091c34d8f"
        ],
        [
            "by case add.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Add.",
            "VernacEndSegment",
            "b8e94d4921ed3e2aaeaaa2cb5717ea846a213d62"
        ],
        [
            "Definition simpm := (mulm1, mulm0, mul1m, mul0m, mulmA).",
            "VernacDefinition",
            "40cfddd751923ca6c4d9446e714de3d73e6a22e6"
        ],
        [
            "End Theory.",
            "VernacEndSegment",
            "3b5383a8665fcdb23b7893346ca6ee697173139d"
        ],
        [
            "End Theory.",
            "VernacEndSegment",
            "3b5383a8665fcdb23b7893346ca6ee697173139d"
        ],
        [
            "Include Theory.",
            "VernacInclude",
            "f715775404763c29653fb2dc78568bea9959e63c"
        ],
        [
            "End Monoid.",
            "VernacEndSegment",
            "6c93219965c411f47de628b74a689cd4a4bf720b"
        ],
        [
            "Export Monoid.Exports.",
            "VernacImport",
            "644a6c089171d23b943f76a7aead0975b71d8697"
        ],
        [
            "Section PervasiveMonoids.",
            "VernacBeginSection",
            "561b7df06f5b08afebbcb6c3cd839be682940f6c"
        ],
        [
            "Import Monoid.",
            "VernacImport",
            "945d0fabc47ba59d12a2e0a6ed64b9e2553c957e"
        ],
        [
            "Canonical andb_monoid := Law andbA andTb andbT.",
            "VernacDefinition",
            "393005c610a06f735c30b86f229e948bf8119d8d"
        ],
        [
            "Canonical andb_comoid := ComLaw andbC.",
            "VernacDefinition",
            "3d86d978a07dd3b8e88f64f3afdbb71e5d66f691"
        ],
        [
            "Canonical andb_muloid := MulLaw andFb andbF.",
            "VernacDefinition",
            "195cfd7ba8d3fabce546fb423e83923f98c5f2d7"
        ],
        [
            "Canonical orb_monoid := Law orbA orFb orbF.",
            "VernacDefinition",
            "55bd776251d8303f28dec1cb9d2f24ff6e11e49e"
        ],
        [
            "Canonical orb_comoid := ComLaw orbC.",
            "VernacDefinition",
            "a13879d494230832c5983212425c4f2306c2bf93"
        ],
        [
            "Canonical orb_muloid := MulLaw orTb orbT.",
            "VernacDefinition",
            "dc4db84ef935117615b03c2dab0cf1ff0cc20450"
        ],
        [
            "Canonical addb_monoid := Law addbA addFb addbF.",
            "VernacDefinition",
            "4a2e1787d204b7aa3f703e62545ee946bc94ac6d"
        ],
        [
            "Canonical addb_comoid := ComLaw addbC.",
            "VernacDefinition",
            "098f0bdaf7895667e7a42fb006e0c08baf51a71c"
        ],
        [
            "Canonical orb_addoid := AddLaw andb_orl andb_orr.",
            "VernacDefinition",
            "cded46a073f618f0658492a47f7deb4514dae781"
        ],
        [
            "Canonical andb_addoid := AddLaw orb_andl orb_andr.",
            "VernacDefinition",
            "f315277924b358eae27043a293b63f6ef70386c8"
        ],
        [
            "Canonical addb_addoid := AddLaw andb_addl andb_addr.",
            "VernacDefinition",
            "6653232573a92cd30816c05fe88cfe2eb38e204d"
        ],
        [
            "Canonical addn_monoid := Law addnA add0n addn0.",
            "VernacDefinition",
            "8cf38a58dd2182ca690d336a9e65064cb0e0f8ff"
        ],
        [
            "Canonical addn_comoid := ComLaw addnC.",
            "VernacDefinition",
            "f58b91c5cb1ccdc861d2c274b952adf7bb4d87d6"
        ],
        [
            "Canonical muln_monoid := Law mulnA mul1n muln1.",
            "VernacDefinition",
            "6c22de1eca05aa816455a9ee69bab0ec7b1c2141"
        ],
        [
            "Canonical muln_comoid := ComLaw mulnC.",
            "VernacDefinition",
            "1cd08537651155500406136c8016c451fc1289f8"
        ],
        [
            "Canonical muln_muloid := MulLaw mul0n muln0.",
            "VernacDefinition",
            "a190801476a45cc3550852870b71fd28443cf5f3"
        ],
        [
            "Canonical addn_addoid := AddLaw mulnDl mulnDr.",
            "VernacDefinition",
            "27e0209685f5689b1ba2605ccd8b394890ce9475"
        ],
        [
            "Canonical maxn_monoid := Law maxnA max0n maxn0.",
            "VernacDefinition",
            "e077a184ffb47fa6bbbd6be918a2b78b79ccade0"
        ],
        [
            "Canonical maxn_comoid := ComLaw maxnC.",
            "VernacDefinition",
            "bb534dc318e7aff6af55dad3806fbbd99b3fecf0"
        ],
        [
            "Canonical maxn_addoid := AddLaw maxn_mull maxn_mulr.",
            "VernacDefinition",
            "500e0f8ad97e5704819560a82613a4fae9589936"
        ],
        [
            "Canonical gcdn_monoid := Law gcdnA gcd0n gcdn0.",
            "VernacDefinition",
            "f9ed16bfe0c726c236b15e747799a1758f3aa0b3"
        ],
        [
            "Canonical gcdn_comoid := ComLaw gcdnC.",
            "VernacDefinition",
            "887d9fe6422dd300e6a7859e0ebd4c8c48a78347"
        ],
        [
            "Canonical gcdnDoid := AddLaw muln_gcdl muln_gcdr.",
            "VernacDefinition",
            "f3f29635255a38cb2077256902755e6d7b587870"
        ],
        [
            "Canonical lcmn_monoid := Law lcmnA lcm1n lcmn1.",
            "VernacDefinition",
            "5493d754285d62a091df59daf8634dac6a768599"
        ],
        [
            "Canonical lcmn_comoid := ComLaw lcmnC.",
            "VernacDefinition",
            "f1502a2cf32a59d2eca84304a97a99433cfb46c7"
        ],
        [
            "Canonical lcmn_addoid := AddLaw muln_lcml muln_lcmr.",
            "VernacDefinition",
            "35542bc8665342ce0eff7d7ef610323a183be456"
        ],
        [
            "Canonical cat_monoid T := Law (@catA T) (@cat0s T) (@cats0 T).",
            "VernacDefinition",
            "28448d481bef159cbe3eca94631b6c527913c055"
        ],
        [
            "End PervasiveMonoids.",
            "VernacEndSegment",
            "c554f5bd44c848caa6928b9cbbdc3952e65b65dc"
        ],
        [
            "Delimit Scope big_scope with BIG.",
            "VernacDelimiters",
            "d5b999816089210525800e7bb4eebacb59746ede"
        ],
        [
            "Open Scope big_scope.",
            "VernacOpenCloseScope",
            "4a6d02003298d88b05dd166591582826ff2faee0"
        ],
        [
            "Variant bigbody R I := BigBody of I & (R -> R -> R) & bool & R.",
            "VernacInductive",
            "7a3bea20c9e8c2fdb73b8be149e52b81d54bca01"
        ],
        [
            "Definition applybig {R I} (body : bigbody R I) x := let: BigBody _ op b v := body in if b then op v x else x.",
            "VernacDefinition",
            "73bf80ec1a47b01debc8f883056b9ea2bf6dd409"
        ],
        [
            "Definition reducebig R I idx r (body : I -> bigbody R I) := foldr (applybig \\o body) idx r.",
            "VernacDefinition",
            "728f3c34f46ae98222df72c6c18b57da9468dacd"
        ],
        [
            "Module Type BigOpSig.",
            "VernacDeclareModuleType",
            "2d9cd2ea46c7ca98450e67a734387bff98cdbc41"
        ],
        [
            "Parameter bigop : forall R I, R -> seq I -> (I -> bigbody R I) -> R.",
            "VernacAssumption",
            "0f6056fca04274c68d9750ca3a73bccda1165784"
        ],
        [
            "Axiom bigopE : bigop = reducebig.",
            "VernacAssumption",
            "1b8628e541b90df89771198c1215e8f66694ef8a"
        ],
        [
            "End BigOpSig.",
            "VernacEndSegment",
            "1b46087f2ff6ab21b1996b2a50fd76c40b74762f"
        ],
        [
            "Module BigOp : BigOpSig.",
            "VernacDefineModule",
            "419295b4ca012d5043c4b9e0dba8a70cb249c57a"
        ],
        [
            "Definition bigop := reducebig.",
            "VernacDefinition",
            "e0a0ff594b34ae7c7bcdca4f6d538cc74d323a5e"
        ],
        [
            "Lemma bigopE : bigop = reducebig.",
            "VernacStartTheoremProof",
            "ad6a422381c66deb5a32bda360e7d77e5b730b56"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End BigOp.",
            "VernacEndSegment",
            "df2b77746f4ec538d052976b6714f4edcc78bac6"
        ],
        [
            "Notation bigop := BigOp.bigop (only parsing).",
            "VernacSyntacticDefinition",
            "337b76faed6f37c2185b127e2d9d894fcaf5b65b"
        ],
        [
            "Canonical bigop_unlock := Unlockable BigOp.bigopE.",
            "VernacDefinition",
            "fc1043a6b466a450de544cef072018abf544247b"
        ],
        [
            "Definition index_iota m n := iota m (n - m).",
            "VernacDefinition",
            "0feda77ed7f0c125c17e3c2d9b76abfa12f63518"
        ],
        [
            "Definition index_enum (T : finType) := Finite.enum T.",
            "VernacDefinition",
            "fc1146d4a1eefa420086ec6edb9d192fea902b89"
        ],
        [
            "Lemma mem_index_iota m n i : i \\in index_iota m n = (m <= i < n).",
            "VernacStartTheoremProof",
            "fa79a6ceab5076d3c02dfd74bae1fc7dd1a9c8f5"
        ],
        [
            "rewrite mem_iota; case le_m_i: (m <= i) => //=.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by rewrite -leq_subLR subSn // -subn_gt0 -subnDA subnKC // subn_gt0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_index_enum T i : i \\in index_enum T.",
            "VernacStartTheoremProof",
            "6fde43cb7cc62c74d23300d0a335bccc714bf9bf"
        ],
        [
            "by rewrite -[index_enum T]enumT mem_enum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve mem_index_enum : core.",
            "VernacHints",
            "a4811afe301adc2efe4f77e2926cd2662f644895"
        ],
        [
            "Lemma filter_index_enum T P : filter P (index_enum T) = enum P.",
            "VernacStartTheoremProof",
            "75111d04ab07776001ad5fbd1ac0ebf205527b47"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Notation \"\\big [ op / idx ]_ ( i <- r | P ) F\" := (bigop idx r (fun i => BigBody i op P%B F)) : big_scope.",
            "VernacNotation",
            "ddad8aa26a1f91540462c61465702f206badb225"
        ],
        [
            "Notation \"\\big [ op / idx ]_ ( i <- r ) F\" := (bigop idx r (fun i => BigBody i op true F)) : big_scope.",
            "VernacNotation",
            "f1bd4d0935e83c2469e1f0eeb53e1be4b72bdb49"
        ],
        [
            "Notation \"\\big [ op / idx ]_ ( m <= i < n | P ) F\" := (bigop idx (index_iota m n) (fun i : nat => BigBody i op P%B F)) : big_scope.",
            "VernacNotation",
            "ec142d36a55b08a835595219d3d79706207ad0a8"
        ],
        [
            "Notation \"\\big [ op / idx ]_ ( m <= i < n ) F\" := (bigop idx (index_iota m n) (fun i : nat => BigBody i op true F)) : big_scope.",
            "VernacNotation",
            "a812b05431f06c43e8c7f0d868ee7743c05200fa"
        ],
        [
            "Notation \"\\big [ op / idx ]_ ( i | P ) F\" := (bigop idx (index_enum _) (fun i => BigBody i op P%B F)) : big_scope.",
            "VernacNotation",
            "95c408e01db7911422ff8e46e930a279264f0666"
        ],
        [
            "Notation \"\\big [ op / idx ]_ i F\" := (bigop idx (index_enum _) (fun i => BigBody i op true F)) : big_scope.",
            "VernacNotation",
            "687966c19ff45a33ed64a2359ebd15fb2049ee91"
        ],
        [
            "Notation \"\\big [ op / idx ]_ ( i : t | P ) F\" := (bigop idx (index_enum _) (fun i : t => BigBody i op P%B F)) (only parsing) : big_scope.",
            "VernacNotation",
            "48b4ce1c6f7f11a05cb691ca9c5b8defa01208c0"
        ],
        [
            "Notation \"\\big [ op / idx ]_ ( i : t ) F\" := (bigop idx (index_enum _) (fun i : t => BigBody i op true F)) (only parsing) : big_scope.",
            "VernacNotation",
            "e91f916a812da042f5279abfd4a8487b951e5e99"
        ],
        [
            "Notation \"\\big [ op / idx ]_ ( i < n | P ) F\" := (\\big[op/idx]_(i : ordinal n | P%B) F) : big_scope.",
            "VernacNotation",
            "cb1bebd7a949790f5c69d75030a2598bec7c404c"
        ],
        [
            "Notation \"\\big [ op / idx ]_ ( i < n ) F\" := (\\big[op/idx]_(i : ordinal n) F) : big_scope.",
            "VernacNotation",
            "ebc26710005d5485a84cc31aaed84d3a341809a6"
        ],
        [
            "Notation \"\\big [ op / idx ]_ ( i 'in' A | P ) F\" := (\\big[op/idx]_(i | (i \\in A) && P) F) : big_scope.",
            "VernacNotation",
            "9047f3c5f06475942d9223f84c6e5f141d1face3"
        ],
        [
            "Notation \"\\big [ op / idx ]_ ( i 'in' A ) F\" := (\\big[op/idx]_(i | i \\in A) F) : big_scope.",
            "VernacNotation",
            "63ed9d3c9ba381cde11d6ebe792fd139bf218e52"
        ],
        [
            "Notation BIG_F := (F in \\big[_/_]_(i <- _ | _) F i)%pattern.",
            "VernacSyntacticDefinition",
            "980d06d5bb9ee2e7654d5fb6b9204ca310868f4d"
        ],
        [
            "Notation BIG_P := (P in \\big[_/_]_(i <- _ | P i) _)%pattern.",
            "VernacSyntacticDefinition",
            "e670c35f68cbeb5f81fa15b1be2baab4bdd05f57"
        ],
        [
            "Local Notation \"+%N\" := addn (at level 0, only parsing).",
            "VernacNotation",
            "80d8c3a0c0e0b7d9aff2a4f751338b2e08b95c11"
        ],
        [
            "Notation \"\\sum_ ( i <- r | P ) F\" := (\\big[+%N/0%N]_(i <- r | P%B) F%N) : nat_scope.",
            "VernacNotation",
            "42e3578a46c6bed8ce18437a32ed47b943729590"
        ],
        [
            "Notation \"\\sum_ ( i <- r ) F\" := (\\big[+%N/0%N]_(i <- r) F%N) : nat_scope.",
            "VernacNotation",
            "fac16568007d037ab1f7b58e136d5563684f0fe6"
        ],
        [
            "Notation \"\\sum_ ( m <= i < n | P ) F\" := (\\big[+%N/0%N]_(m <= i < n | P%B) F%N) : nat_scope.",
            "VernacNotation",
            "c81023917a5e234619ae8b0a63e73121a8a2c191"
        ],
        [
            "Notation \"\\sum_ ( m <= i < n ) F\" := (\\big[+%N/0%N]_(m <= i < n) F%N) : nat_scope.",
            "VernacNotation",
            "21db532ff0cac739915f4e483280568e675a0fb8"
        ],
        [
            "Notation \"\\sum_ ( i | P ) F\" := (\\big[+%N/0%N]_(i | P%B) F%N) : nat_scope.",
            "VernacNotation",
            "e377d5d2cece1a12095e7d02a8655280275f763e"
        ],
        [
            "Notation \"\\sum_ i F\" := (\\big[+%N/0%N]_i F%N) : nat_scope.",
            "VernacNotation",
            "20142176ffd9327589bedd6f06894572a1eda8b9"
        ],
        [
            "Notation \"\\sum_ ( i : t | P ) F\" := (\\big[+%N/0%N]_(i : t | P%B) F%N) (only parsing) : nat_scope.",
            "VernacNotation",
            "7efaf6cdc2cdaafd31770fc3f05c356e791a3324"
        ],
        [
            "Notation \"\\sum_ ( i : t ) F\" := (\\big[+%N/0%N]_(i : t) F%N) (only parsing) : nat_scope.",
            "VernacNotation",
            "c1edd25fe885314ab21a2260859dddbbaa6ced5e"
        ],
        [
            "Notation \"\\sum_ ( i < n | P ) F\" := (\\big[+%N/0%N]_(i < n | P%B) F%N) : nat_scope.",
            "VernacNotation",
            "08776870393045e5018895932f761541226b6099"
        ],
        [
            "Notation \"\\sum_ ( i < n ) F\" := (\\big[+%N/0%N]_(i < n) F%N) : nat_scope.",
            "VernacNotation",
            "86b61812a52ae8607f953e8966eb2175b06953d7"
        ],
        [
            "Notation \"\\sum_ ( i 'in' A | P ) F\" := (\\big[+%N/0%N]_(i in A | P%B) F%N) : nat_scope.",
            "VernacNotation",
            "b3cef7ec5611e0bcbe8cfec6f0c400bed496f2f0"
        ],
        [
            "Notation \"\\sum_ ( i 'in' A ) F\" := (\\big[+%N/0%N]_(i in A) F%N) : nat_scope.",
            "VernacNotation",
            "2312b97938974383506c00534dd7bd7ae18ad6bf"
        ],
        [
            "Local Notation \"*%N\" := muln (at level 0, only parsing).",
            "VernacNotation",
            "ca1efd6eca7e34320a8f92494503ae67e6ba76ab"
        ],
        [
            "Notation \"\\prod_ ( i <- r | P ) F\" := (\\big[*%N/1%N]_(i <- r | P%B) F%N) : nat_scope.",
            "VernacNotation",
            "36c6eeb7a02f8676ac32eef38b8d2a9bc71770f0"
        ],
        [
            "Notation \"\\prod_ ( i <- r ) F\" := (\\big[*%N/1%N]_(i <- r) F%N) : nat_scope.",
            "VernacNotation",
            "3a7d68f80f0214be1a702608aab01d1fd292c5bf"
        ],
        [
            "Notation \"\\prod_ ( m <= i < n | P ) F\" := (\\big[*%N/1%N]_(m <= i < n | P%B) F%N) : nat_scope.",
            "VernacNotation",
            "dc1dde8e6caf6abfbccfbd329248962e9332ed71"
        ],
        [
            "Notation \"\\prod_ ( m <= i < n ) F\" := (\\big[*%N/1%N]_(m <= i < n) F%N) : nat_scope.",
            "VernacNotation",
            "bc96fb4274af2a842cee9d23548f11edfe1ad00e"
        ],
        [
            "Notation \"\\prod_ ( i | P ) F\" := (\\big[*%N/1%N]_(i | P%B) F%N) : nat_scope.",
            "VernacNotation",
            "9c22459274960a06463251c72e6f2932fc202ad3"
        ],
        [
            "Notation \"\\prod_ i F\" := (\\big[*%N/1%N]_i F%N) : nat_scope.",
            "VernacNotation",
            "59cc9b70623a717845abd167cd05d4dcd6f1b082"
        ],
        [
            "Notation \"\\prod_ ( i : t | P ) F\" := (\\big[*%N/1%N]_(i : t | P%B) F%N) (only parsing) : nat_scope.",
            "VernacNotation",
            "077ace7b0fb246bb184a919fc11f64515d04ebeb"
        ],
        [
            "Notation \"\\prod_ ( i : t ) F\" := (\\big[*%N/1%N]_(i : t) F%N) (only parsing) : nat_scope.",
            "VernacNotation",
            "3e74ea81030ebbbf0a3a9d1919c8a72d5bc2df9f"
        ],
        [
            "Notation \"\\prod_ ( i < n | P ) F\" := (\\big[*%N/1%N]_(i < n | P%B) F%N) : nat_scope.",
            "VernacNotation",
            "147ebe7140389b7ae426cbef7ef3ad099df9b287"
        ],
        [
            "Notation \"\\prod_ ( i < n ) F\" := (\\big[*%N/1%N]_(i < n) F%N) : nat_scope.",
            "VernacNotation",
            "c89c85eae76089027a8469987cb8070e1061b52d"
        ],
        [
            "Notation \"\\prod_ ( i 'in' A | P ) F\" := (\\big[*%N/1%N]_(i in A | P%B) F%N) : nat_scope.",
            "VernacNotation",
            "5cac0b6cf44af09f449a99427193e186778353f7"
        ],
        [
            "Notation \"\\prod_ ( i 'in' A ) F\" := (\\big[*%N/1%N]_(i in A) F%N) : nat_scope.",
            "VernacNotation",
            "ba6a9ea9b0d11ff171e6d475a30ea3b5fdce0051"
        ],
        [
            "Notation \"\\max_ ( i <- r | P ) F\" := (\\big[maxn/0%N]_(i <- r | P%B) F%N) : nat_scope.",
            "VernacNotation",
            "9fe52300389f172bcdb140a59f4f226f88a05eb6"
        ],
        [
            "Notation \"\\max_ ( i <- r ) F\" := (\\big[maxn/0%N]_(i <- r) F%N) : nat_scope.",
            "VernacNotation",
            "6e4e36a080d6a22e355cf65b7860a8c14fd14180"
        ],
        [
            "Notation \"\\max_ ( i | P ) F\" := (\\big[maxn/0%N]_(i | P%B) F%N) : nat_scope.",
            "VernacNotation",
            "dd10f42ef02567bc9787506abf780971321d8345"
        ],
        [
            "Notation \"\\max_ i F\" := (\\big[maxn/0%N]_i F%N) : nat_scope.",
            "VernacNotation",
            "6574ceae584c6f71ea732001c7b86ea6049155a5"
        ],
        [
            "Notation \"\\max_ ( i : I | P ) F\" := (\\big[maxn/0%N]_(i : I | P%B) F%N) (only parsing) : nat_scope.",
            "VernacNotation",
            "abeaf2e2818cb999bbe267f18c1a7a0f3843223b"
        ],
        [
            "Notation \"\\max_ ( i : I ) F\" := (\\big[maxn/0%N]_(i : I) F%N) (only parsing) : nat_scope.",
            "VernacNotation",
            "06ec3cf1ec08f3e2f746ad50b9cfbf80889c31b3"
        ],
        [
            "Notation \"\\max_ ( m <= i < n | P ) F\" := (\\big[maxn/0%N]_(m <= i < n | P%B) F%N) : nat_scope.",
            "VernacNotation",
            "17bcae16d5465b1c6d37f12f77f4f600048eed55"
        ],
        [
            "Notation \"\\max_ ( m <= i < n ) F\" := (\\big[maxn/0%N]_(m <= i < n) F%N) : nat_scope.",
            "VernacNotation",
            "dbe9c20abffcc31fe2bd90081f7e22a195a499c1"
        ],
        [
            "Notation \"\\max_ ( i < n | P ) F\" := (\\big[maxn/0%N]_(i < n | P%B) F%N) : nat_scope.",
            "VernacNotation",
            "4ff72e4cc694aea1873d087a219ad29b64231091"
        ],
        [
            "Notation \"\\max_ ( i < n ) F\" := (\\big[maxn/0%N]_(i < n) F%N) : nat_scope.",
            "VernacNotation",
            "cb1ed5ac29edf689c663b7594ba42e8bd469c912"
        ],
        [
            "Notation \"\\max_ ( i 'in' A | P ) F\" := (\\big[maxn/0%N]_(i in A | P%B) F%N) : nat_scope.",
            "VernacNotation",
            "c8c5968321feee7f514cb37cd48ccdcb92be81d4"
        ],
        [
            "Notation \"\\max_ ( i 'in' A ) F\" := (\\big[maxn/0%N]_(i in A) F%N) : nat_scope.",
            "VernacNotation",
            "01256fcdef571c7bb8d9b1e2243265aaf070ba43"
        ],
        [
            "Lemma big_load R (K K' : R -> Type) idx op I r (P : pred I) F : K (\\big[op/idx]_(i <- r | P i) F i) * K' (\\big[op/idx]_(i <- r | P i) F i) -> K' (\\big[op/idx]_(i <- r | P i) F i).",
            "VernacStartTheoremProof",
            "3badde9678373264ffa0b491a9eeb1b79b9ff5bb"
        ],
        [
            "by case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments big_load [R] K [K'] idx op [I].",
            "VernacArguments",
            "1fa58d602a0274b66b1dab758e857b318749d8e5"
        ],
        [
            "Section Elim3.",
            "VernacBeginSection",
            "ba0eac08d1130bbef11307f8a063937b5c9512c2"
        ],
        [
            "Variables (R1 R2 R3 : Type) (K : R1 -> R2 -> R3 -> Type).",
            "VernacAssumption",
            "1e4ab29529641cf2004f10b6d83fe60d40c83f67"
        ],
        [
            "Variables (id1 : R1) (op1 : R1 -> R1 -> R1).",
            "VernacAssumption",
            "8ed829c3aaaa58644eb4124e7ba264f89550157d"
        ],
        [
            "Variables (id2 : R2) (op2 : R2 -> R2 -> R2).",
            "VernacAssumption",
            "93721e4ff9866dcffe1531a83ce37d5db29e65c7"
        ],
        [
            "Variables (id3 : R3) (op3 : R3 -> R3 -> R3).",
            "VernacAssumption",
            "94eb433711e05baf9ebb5eaeebca3a217ebf8997"
        ],
        [
            "Hypothesis Kid : K id1 id2 id3.",
            "VernacAssumption",
            "993a253863750bf8e8b8cc069b92cba2fea304a9"
        ],
        [
            "Lemma big_rec3 I r (P : pred I) F1 F2 F3 (K_F : forall i y1 y2 y3, P i -> K y1 y2 y3 -> K (op1 (F1 i) y1) (op2 (F2 i) y2) (op3 (F3 i) y3)) : K (\\big[op1/id1]_(i <- r | P i) F1 i) (\\big[op2/id2]_(i <- r | P i) F2 i) (\\big[op3/id3]_(i <- r | P i) F3 i).",
            "VernacStartTheoremProof",
            "7ce17b19920e743947f187f4535f82dafde138c0"
        ],
        [
            "by rewrite unlock; elim: r => //= i r; case: ifP => //; apply: K_F.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hypothesis Kop : forall x1 x2 x3 y1 y2 y3, K x1 x2 x3 -> K y1 y2 y3-> K (op1 x1 y1) (op2 x2 y2) (op3 x3 y3).",
            "VernacAssumption",
            "60428e715698acff3f906d794bfee88abb358731"
        ],
        [
            "Lemma big_ind3 I r (P : pred I) F1 F2 F3 (K_F : forall i, P i -> K (F1 i) (F2 i) (F3 i)) : K (\\big[op1/id1]_(i <- r | P i) F1 i) (\\big[op2/id2]_(i <- r | P i) F2 i) (\\big[op3/id3]_(i <- r | P i) F3 i).",
            "VernacStartTheoremProof",
            "033c544cb59c23ba3a696dc439a68a087b25fe76"
        ],
        [
            "by apply: big_rec3 => i x1 x2 x3 /K_F; apply: Kop.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Elim3.",
            "VernacEndSegment",
            "0c0c1f2922096435955d2770786ea8f1b46d35dc"
        ],
        [
            "Arguments big_rec3 [R1 R2 R3] K [id1 op1 id2 op2 id3 op3] _ [I r P F1 F2 F3].",
            "VernacArguments",
            "0ec70eab33b19d6a432bddecf7bf5eeda198f189"
        ],
        [
            "Arguments big_ind3 [R1 R2 R3] K [id1 op1 id2 op2 id3 op3] _ _ [I r P F1 F2 F3].",
            "VernacArguments",
            "c8f95959c6f54bc7a82d4cbf89691b1a91d98198"
        ],
        [
            "Section Elim2.",
            "VernacBeginSection",
            "e3c37c4fb4a1ba5238249d3e75359290c8e11c07"
        ],
        [
            "Variables (R1 R2 : Type) (K : R1 -> R2 -> Type) (f : R2 -> R1).",
            "VernacAssumption",
            "7be6e2346d0b8ade6cbfff8bab54bd3a502d64ee"
        ],
        [
            "Variables (id1 : R1) (op1 : R1 -> R1 -> R1).",
            "VernacAssumption",
            "8ed829c3aaaa58644eb4124e7ba264f89550157d"
        ],
        [
            "Variables (id2 : R2) (op2 : R2 -> R2 -> R2).",
            "VernacAssumption",
            "93721e4ff9866dcffe1531a83ce37d5db29e65c7"
        ],
        [
            "Hypothesis Kid : K id1 id2.",
            "VernacAssumption",
            "c96fb6f0ca688389d7d54c8b7ac78937095adac8"
        ],
        [
            "Lemma big_rec2 I r (P : pred I) F1 F2 (K_F : forall i y1 y2, P i -> K y1 y2 -> K (op1 (F1 i) y1) (op2 (F2 i) y2)) : K (\\big[op1/id1]_(i <- r | P i) F1 i) (\\big[op2/id2]_(i <- r | P i) F2 i).",
            "VernacStartTheoremProof",
            "6229981d8eec078436fd7865432b580ec3bad2a5"
        ],
        [
            "by rewrite unlock; elim: r => //= i r; case: ifP => //; apply: K_F.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hypothesis Kop : forall x1 x2 y1 y2, K x1 x2 -> K y1 y2 -> K (op1 x1 y1) (op2 x2 y2).",
            "VernacAssumption",
            "b2613ca0a865c8e35668028252999f50845d3d5a"
        ],
        [
            "Lemma big_ind2 I r (P : pred I) F1 F2 (K_F : forall i, P i -> K (F1 i) (F2 i)) : K (\\big[op1/id1]_(i <- r | P i) F1 i) (\\big[op2/id2]_(i <- r | P i) F2 i).",
            "VernacStartTheoremProof",
            "67fe1ecb274c6c1cbf53213cf36ef510da64fc32"
        ],
        [
            "by apply: big_rec2 => i x1 x2 /K_F; apply: Kop.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hypotheses (f_op : {morph f : x y / op2 x y >-> op1 x y}) (f_id : f id2 = id1).",
            "VernacAssumption",
            "4cafe34132649127d0f38fa84ea7e8d178ef39bd"
        ],
        [
            "Lemma big_morph I r (P : pred I) F : f (\\big[op2/id2]_(i <- r | P i) F i) = \\big[op1/id1]_(i <- r | P i) f (F i).",
            "VernacStartTheoremProof",
            "3520cdfc7ae59663ff9fde0839b250c6b1ada5e7"
        ],
        [
            "by rewrite unlock; elim: r => //= i r <-; rewrite -f_op -fun_if.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Elim2.",
            "VernacEndSegment",
            "433c61c0b27dab6620058f2ede672c30b98fa0e5"
        ],
        [
            "Arguments big_rec2 [R1 R2] K [id1 op1 id2 op2] _ [I r P F1 F2].",
            "VernacArguments",
            "fc56f2ae9ef7438f73a4dc4bfe6a690873448fe3"
        ],
        [
            "Arguments big_ind2 [R1 R2] K [id1 op1 id2 op2] _ _ [I r P F1 F2].",
            "VernacArguments",
            "65e5bf7b4c0a2094d6462b1af528ae9436177489"
        ],
        [
            "Arguments big_morph [R1 R2] f [id1 op1 id2 op2] _ _ [I].",
            "VernacArguments",
            "2598cd03052421c3db0d15d9bf8d64acebfc8a43"
        ],
        [
            "Section Elim1.",
            "VernacBeginSection",
            "efa0e96c294a7d93e0a96fda509ed3d3dfeb2fc5"
        ],
        [
            "Variables (R : Type) (K : R -> Type) (f : R -> R).",
            "VernacAssumption",
            "54574993ece6a4fdb1acb06015be252b701b221b"
        ],
        [
            "Variables (idx : R) (op op' : R -> R -> R).",
            "VernacAssumption",
            "2f022b07ca549bf97a38d021caffdb0dad0de9c4"
        ],
        [
            "Hypothesis Kid : K idx.",
            "VernacAssumption",
            "0028e89aa4a9c50226f9a1cb7c01d5a370ff99ed"
        ],
        [
            "Lemma big_rec I r (P : pred I) F (Kop : forall i x, P i -> K x -> K (op (F i) x)) : K (\\big[op/idx]_(i <- r | P i) F i).",
            "VernacStartTheoremProof",
            "cecc9d2015f043f8bc07502497af51422e4fcbbb"
        ],
        [
            "by rewrite unlock; elim: r => //= i r; case: ifP => //; apply: Kop.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hypothesis Kop : forall x y, K x -> K y -> K (op x y).",
            "VernacAssumption",
            "55cad4cd2d0922b8143c8864824ca437245d3496"
        ],
        [
            "Lemma big_ind I r (P : pred I) F (K_F : forall i, P i -> K (F i)) : K (\\big[op/idx]_(i <- r | P i) F i).",
            "VernacStartTheoremProof",
            "ddf91ebe3f293241b4fd21df92099d5df8b1438a"
        ],
        [
            "by apply: big_rec => // i x /K_F /Kop; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hypothesis Kop' : forall x y, K x -> K y -> op x y = op' x y.",
            "VernacAssumption",
            "b3edb77b5692df18418129cbb9650d3d20091dad"
        ],
        [
            "Lemma eq_big_op I r (P : pred I) F (K_F : forall i, P i -> K (F i)) : \\big[op/idx]_(i <- r | P i) F i = \\big[op'/idx]_(i <- r | P i) F i.",
            "VernacStartTheoremProof",
            "0c427f3b5c3ce9aa508301caf00feec3b405ea5b"
        ],
        [
            "by elim/(big_load K): _; elim/big_rec2: _ => // i _ y Pi [Ky <-]; auto.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hypotheses (fM : {morph f : x y / op x y}) (f_id : f idx = idx).",
            "VernacAssumption",
            "3d5f900894fded482a2ca2dafa80d0740f0024c3"
        ],
        [
            "Lemma big_endo I r (P : pred I) F : f (\\big[op/idx]_(i <- r | P i) F i) = \\big[op/idx]_(i <- r | P i) f (F i).",
            "VernacStartTheoremProof",
            "ac717030ba15a2f0f06159e64faf05278b64d8be"
        ],
        [
            "exact: big_morph.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Elim1.",
            "VernacEndSegment",
            "2cfa825e3ff2d98886797ce2f84de0a0b42514fc"
        ],
        [
            "Arguments big_rec [R] K [idx op] _ [I r P F].",
            "VernacArguments",
            "062592b1e9910214cbd0a84ad18f86260b50cf87"
        ],
        [
            "Arguments big_ind [R] K [idx op] _ _ [I r P F].",
            "VernacArguments",
            "863fe1c57c9f81d4262c0c57a679affe25937bd2"
        ],
        [
            "Arguments eq_big_op [R] K [idx op] op' _ _ _ [I].",
            "VernacArguments",
            "4b17a6698dc4b6ebbc232b47095b2b2ac126eb50"
        ],
        [
            "Arguments big_endo [R] f [idx op] _ _ [I].",
            "VernacArguments",
            "0f5c881b946a8734cddec414d2b85b5e4bf5bd24"
        ],
        [
            "Section Extensionality.",
            "VernacBeginSection",
            "fef2c0825b072d51bff37065769e1dd7dcbe3238"
        ],
        [
            "Variables (R : Type) (idx : R) (op : R -> R -> R).",
            "VernacAssumption",
            "7fb594ac503c8c1fae441a796a4f54223e69c853"
        ],
        [
            "Section SeqExtension.",
            "VernacBeginSection",
            "a149cd0e3dea1622c26a27dde1e493a28857dc78"
        ],
        [
            "Variable I : Type.",
            "VernacAssumption",
            "e26fb96eafce9dfef5334cfca2067d5e35cee5b8"
        ],
        [
            "Lemma big_filter r (P : pred I) F : \\big[op/idx]_(i <- filter P r) F i = \\big[op/idx]_(i <- r | P i) F i.",
            "VernacStartTheoremProof",
            "0663f800b73769f21e8120f82149c2eeb2a41c5c"
        ],
        [
            "by rewrite unlock; elim: r => //= i r <-; case (P i).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_filter_cond r (P1 P2 : pred I) F : \\big[op/idx]_(i <- filter P1 r | P2 i) F i = \\big[op/idx]_(i <- r | P1 i && P2 i) F i.",
            "VernacStartTheoremProof",
            "3e05d8344e48435a0eadedc96d332bfaaf596dfe"
        ],
        [
            "rewrite -big_filter -(big_filter r); congr bigop.",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by rewrite -filter_predI; apply: eq_filter => i; apply: andbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_bigl r (P1 P2 : pred I) F : P1 =1 P2 -> \\big[op/idx]_(i <- r | P1 i) F i = \\big[op/idx]_(i <- r | P2 i) F i.",
            "VernacStartTheoremProof",
            "3275115c83c0a3e2e58bfd60bb5d4be5e86af0c9"
        ],
        [
            "by move=> eqP12; rewrite -!(big_filter r) (eq_filter eqP12).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_andbC r (P Q : pred I) F : \\big[op/idx]_(i <- r | P i && Q i) F i = \\big[op/idx]_(i <- r | Q i && P i) F i.",
            "VernacStartTheoremProof",
            "fe96ed9f5ae0422df8ba0771d9541602b076602d"
        ],
        [
            "by apply: eq_bigl => i; apply: andbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_bigr r (P : pred I) F1 F2 : (forall i, P i -> F1 i = F2 i) -> \\big[op/idx]_(i <- r | P i) F1 i = \\big[op/idx]_(i <- r | P i) F2 i.",
            "VernacStartTheoremProof",
            "5b498b2dfb3001bb4bf4180c598da535f9f22767"
        ],
        [
            "by move=> eqF12; elim/big_rec2: _ => // i x _ /eqF12-> ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_big r (P1 P2 : pred I) F1 F2 : P1 =1 P2 -> (forall i, P1 i -> F1 i = F2 i) -> \\big[op/idx]_(i <- r | P1 i) F1 i = \\big[op/idx]_(i <- r | P2 i) F2 i.",
            "VernacStartTheoremProof",
            "9fe1b7029c0aa2006c7d4e95b2fb231ae28010b5"
        ],
        [
            "by move/eq_bigl <-; move/eq_bigr->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma congr_big r1 r2 (P1 P2 : pred I) F1 F2 : r1 = r2 -> P1 =1 P2 -> (forall i, P1 i -> F1 i = F2 i) -> \\big[op/idx]_(i <- r1 | P1 i) F1 i = \\big[op/idx]_(i <- r2 | P2 i) F2 i.",
            "VernacStartTheoremProof",
            "321e9d0030df4cb0e7630fe13fc92df7eda21434"
        ],
        [
            "by move=> <-{r2}; apply: eq_big.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_nil (P : pred I) F : \\big[op/idx]_(i <- [::] | P i) F i = idx.",
            "VernacStartTheoremProof",
            "ef21570db1faaf19eb47d57e59f8762b6f11a287"
        ],
        [
            "by rewrite unlock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_cons i r (P : pred I) F : let x := \\big[op/idx]_(j <- r | P j) F j in \\big[op/idx]_(j <- i :: r | P j) F j = if P i then op (F i) x else x.",
            "VernacStartTheoremProof",
            "cec02b4b054a54e1d8ec7da4c2019eea89fa4a48"
        ],
        [
            "by rewrite unlock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_map J (h : J -> I) r (P : pred I) F : \\big[op/idx]_(i <- map h r | P i) F i = \\big[op/idx]_(j <- r | P (h j)) F (h j).",
            "VernacStartTheoremProof",
            "7e84e47470ac7686b273fe584998c778dd35e3a1"
        ],
        [
            "by rewrite unlock; elim: r => //= j r ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_nth x0 r (P : pred I) F : \\big[op/idx]_(i <- r | P i) F i = \\big[op/idx]_(0 <= i < size r | P (nth x0 r i)) (F (nth x0 r i)).",
            "VernacStartTheoremProof",
            "c4fbe124325e11da5855c079ee4a4b772401bd67"
        ],
        [
            "by rewrite -{1}(mkseq_nth x0 r) big_map /index_iota subn0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_hasC r (P : pred I) F : ~~ has P r -> \\big[op/idx]_(i <- r | P i) F i = idx.",
            "VernacStartTheoremProof",
            "f784b92074eee81f94bfc36f7c21c5241266f613"
        ],
        [
            "by rewrite -big_filter has_count -size_filter -eqn0Ngt unlock => /nilP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_pred0_eq (r : seq I) F : \\big[op/idx]_(i <- r | false) F i = idx.",
            "VernacStartTheoremProof",
            "ca29de66eaca7e05fbea675ba1e61e5589e455cf"
        ],
        [
            "by rewrite big_hasC // has_pred0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_pred0 r (P : pred I) F : P =1 xpred0 -> \\big[op/idx]_(i <- r | P i) F i = idx.",
            "VernacStartTheoremProof",
            "53c52f90b74ae905bd0a25cd0453fba691873029"
        ],
        [
            "by move/eq_bigl->; apply: big_pred0_eq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_cat_nested r1 r2 (P : pred I) F : let x := \\big[op/idx]_(i <- r2 | P i) F i in \\big[op/idx]_(i <- r1 ++ r2 | P i) F i = \\big[op/x]_(i <- r1 | P i) F i.",
            "VernacStartTheoremProof",
            "be7cda00958d93875dbe26f449eaecea1e0b8e0e"
        ],
        [
            "by rewrite unlock /reducebig foldr_cat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_catl r1 r2 (P : pred I) F : ~~ has P r2 -> \\big[op/idx]_(i <- r1 ++ r2 | P i) F i = \\big[op/idx]_(i <- r1 | P i) F i.",
            "VernacStartTheoremProof",
            "3b0d171ee9a49fa5e7d9f69ff20c4a9b8a2a9171"
        ],
        [
            "by rewrite big_cat_nested => /big_hasC->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_catr r1 r2 (P : pred I) F : ~~ has P r1 -> \\big[op/idx]_(i <- r1 ++ r2 | P i) F i = \\big[op/idx]_(i <- r2 | P i) F i.",
            "VernacStartTheoremProof",
            "f075196bfa3cc6dfb67bd8c17451430dd9e5195e"
        ],
        [
            "rewrite -big_filter -(big_filter r2) filter_cat.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite has_count -size_filter; case: filter.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_const_seq r (P : pred I) x : \\big[op/idx]_(i <- r | P i) x = iter (count P r) (op x) idx.",
            "VernacStartTheoremProof",
            "a043ec8c9bf06dcf31b421a4872eabdad2835845"
        ],
        [
            "by rewrite unlock; elim: r => //= i r ->; case: (P i).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SeqExtension.",
            "VernacEndSegment",
            "d59df1cadf2ce65fde36ed5a9180416817c7db93"
        ],
        [
            "Lemma big_seq_cond (I : eqType) r (P : pred I) F : \\big[op/idx]_(i <- r | P i) F i = \\big[op/idx]_(i <- r | (i \\in r) && P i) F i.",
            "VernacStartTheoremProof",
            "bd9eea7df06951d2ccef95e05289f200f12cc0d9"
        ],
        [
            "by rewrite -!(big_filter r); congr bigop; apply: eq_in_filter => i ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_seq (I : eqType) (r : seq I) F : \\big[op/idx]_(i <- r) F i = \\big[op/idx]_(i <- r | i \\in r) F i.",
            "VernacStartTheoremProof",
            "db6ffb1aee89eb927fe46e20bfe9c8d9e89f20bc"
        ],
        [
            "by rewrite big_seq_cond big_andbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_big_seq (I : eqType) (r : seq I) F1 F2 : {in r, F1 =1 F2} -> \\big[op/idx]_(i <- r) F1 i = \\big[op/idx]_(i <- r) F2 i.",
            "VernacStartTheoremProof",
            "5175eed7186b74ef4c648c3b266caeb1a4503e24"
        ],
        [
            "by move=> eqF; rewrite !big_seq (eq_bigr _ eqF).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_nat_cond m n (P : pred nat) F : \\big[op/idx]_(m <= i < n | P i) F i = \\big[op/idx]_(m <= i < n | (m <= i < n) && P i) F i.",
            "VernacStartTheoremProof",
            "cf947e1afe5d47fe22d7ff3e937403b611e17edc"
        ],
        [
            "by rewrite big_seq_cond; apply: eq_bigl => i; rewrite mem_index_iota.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_nat m n F : \\big[op/idx]_(m <= i < n) F i = \\big[op/idx]_(m <= i < n | m <= i < n) F i.",
            "VernacStartTheoremProof",
            "ef7cd03cc808715d3db99eb22afe69a670167213"
        ],
        [
            "by rewrite big_nat_cond big_andbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma congr_big_nat m1 n1 m2 n2 P1 P2 F1 F2 : m1 = m2 -> n1 = n2 -> (forall i, m1 <= i < n2 -> P1 i = P2 i) -> (forall i, P1 i && (m1 <= i < n2) -> F1 i = F2 i) -> \\big[op/idx]_(m1 <= i < n1 | P1 i) F1 i = \\big[op/idx]_(m2 <= i < n2 | P2 i) F2 i.",
            "VernacStartTheoremProof",
            "2601eff83f2efac9e9114b2e95a72b2d762875a0"
        ],
        [
            "move=> <- <- eqP12 eqF12; rewrite big_seq_cond (big_seq_cond _ P2).",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "apply: eq_big => i; rewrite ?inE /= !mem_index_iota.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by apply: andb_id2l; apply: eqP12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite andbC; apply: eqF12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_big_nat m n F1 F2 : (forall i, m <= i < n -> F1 i = F2 i) -> \\big[op/idx]_(m <= i < n) F1 i = \\big[op/idx]_(m <= i < n) F2 i.",
            "VernacStartTheoremProof",
            "7ad6f1e270745af37ddf350847c79eda20a11794"
        ],
        [
            "by move=> eqF; apply: congr_big_nat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_geq m n (P : pred nat) F : m >= n -> \\big[op/idx]_(m <= i < n | P i) F i = idx.",
            "VernacStartTheoremProof",
            "800fdd814833397d187f3528bd1aa1cedf3daa24"
        ],
        [
            "by move=> ge_m_n; rewrite /index_iota (eqnP ge_m_n) big_nil.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_ltn_cond m n (P : pred nat) F : m < n -> let x := \\big[op/idx]_(m.+1 <= i < n | P i) F i in \\big[op/idx]_(m <= i < n | P i) F i = if P m then op (F m) x else x.",
            "VernacStartTheoremProof",
            "15909d0b107eef6eca4c9b181ae6ab4aab0a67bb"
        ],
        [
            "by case: n => [//|n] le_m_n; rewrite /index_iota subSn // big_cons.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_ltn m n F : m < n -> \\big[op/idx]_(m <= i < n) F i = op (F m) (\\big[op/idx]_(m.+1 <= i < n) F i).",
            "VernacStartTheoremProof",
            "7387598cd8d00c4bf2004020cd94d21656c2a2db"
        ],
        [
            "by move=> lt_mn; apply: big_ltn_cond.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_addn m n a (P : pred nat) F : \\big[op/idx]_(m + a <= i < n | P i) F i = \\big[op/idx]_(m <= i < n - a | P (i + a)) F (i + a).",
            "VernacStartTheoremProof",
            "afbecfc7c4fd5b6c35d4c71da431e455fb1ab3b6"
        ],
        [
            "rewrite /index_iota -subnDA addnC iota_addl big_map.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: eq_big => ? *; rewrite addnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_add1 m n (P : pred nat) F : \\big[op/idx]_(m.+1 <= i < n | P i) F i = \\big[op/idx]_(m <= i < n.-1 | P (i.+1)) F (i.+1).",
            "VernacStartTheoremProof",
            "595b6b45c05c81bbc6f51daabba9837fa89147ef"
        ],
        [
            "by rewrite -addn1 big_addn subn1; apply: eq_big => ? *; rewrite addn1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_nat_recl n m F : m <= n -> \\big[op/idx]_(m <= i < n.+1) F i = op (F m) (\\big[op/idx]_(m <= i < n) F i.+1).",
            "VernacStartTheoremProof",
            "772ad15511fd6ad10e42c7a0e66b0d45d2ad59b8"
        ],
        [
            "by move=> lemn; rewrite big_ltn // big_add1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_mkord n (P : pred nat) F : \\big[op/idx]_(0 <= i < n | P i) F i = \\big[op/idx]_(i < n | P i) F i.",
            "VernacStartTheoremProof",
            "63d55909c5fa76882d822fc3bedc59c2065f0264"
        ],
        [
            "rewrite /index_iota subn0 -(big_map (@nat_of_ord n)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by congr bigop; rewrite /index_enum unlock val_ord_enum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_nat_widen m n1 n2 (P : pred nat) F : n1 <= n2 -> \\big[op/idx]_(m <= i < n1 | P i) F i = \\big[op/idx]_(m <= i < n2 | P i && (i < n1)) F i.",
            "VernacStartTheoremProof",
            "fc8a4bc51c155c91d10c0595b507a3fa925de30a"
        ],
        [
            "move=> len12; symmetry; rewrite -big_filter filter_predI big_filter.",
            "VernacExtend",
            "7d7dbc461628e3c5ab8fc0bd4c5735707abb3cca"
        ],
        [
            "have [ltn_trans eq_by_mem] := (ltn_trans, eq_sorted_irr ltn_trans ltnn).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "congr bigop; apply: eq_by_mem; rewrite ?sorted_filter ?iota_ltn_sorted // => i.",
            "VernacExtend",
            "56bc78d8bb1a71d15be349821aa36e25641f1ff9"
        ],
        [
            "rewrite mem_filter !mem_index_iota andbCA andbA andb_idr => // /andP[_].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by move/leq_trans->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_ord_widen_cond n1 n2 (P : pred nat) (F : nat -> R) : n1 <= n2 -> \\big[op/idx]_(i < n1 | P i) F i = \\big[op/idx]_(i < n2 | P i && (i < n1)) F i.",
            "VernacStartTheoremProof",
            "cc6f435f5f2cfa47ebdb3cacc39241799a1f8874"
        ],
        [
            "by move/big_nat_widen=> len12; rewrite -big_mkord len12 big_mkord.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_ord_widen n1 n2 (F : nat -> R) : n1 <= n2 -> \\big[op/idx]_(i < n1) F i = \\big[op/idx]_(i < n2 | i < n1) F i.",
            "VernacStartTheoremProof",
            "28ebf0020ca1d1ab178c3ce4385bcf799573606b"
        ],
        [
            "by move=> le_n12; apply: (big_ord_widen_cond (predT)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_ord_widen_leq n1 n2 (P : pred 'I_(n1.+1)) F : n1 < n2 -> \\big[op/idx]_(i < n1.+1 | P i) F i = \\big[op/idx]_(i < n2 | P (inord i) && (i <= n1)) F (inord i).",
            "VernacStartTheoremProof",
            "eb9508a63590661558b20d6e8b377237d0f0eb90"
        ],
        [
            "move=> len12; pose g G i := G (inord i : 'I_(n1.+1)).",
            "VernacExtend",
            "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
        ],
        [
            "rewrite -(big_ord_widen_cond (g _ P) (g _ F) len12) {}/g.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: eq_big => i *; rewrite inord_val.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_ord0 P F : \\big[op/idx]_(i < 0 | P i) F i = idx.",
            "VernacStartTheoremProof",
            "fc670ea349b8253cb014795b86828d82b903817d"
        ],
        [
            "by rewrite big_pred0 => [|[]].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_tnth I r (P : pred I) F : let r_ := tnth (in_tuple r) in \\big[op/idx]_(i <- r | P i) F i = \\big[op/idx]_(i < size r | P (r_ i)) (F (r_ i)).",
            "VernacStartTheoremProof",
            "f8452119737b3b727fd848c4ce6960cedcbeb350"
        ],
        [
            "case: r => /= [|x0 r]; first by rewrite big_nil big_ord0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite (big_nth x0) big_mkord; apply: eq_big => i; rewrite (tnth_nth x0).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_index_uniq (I : eqType) (r : seq I) (E : 'I_(size r) -> R) : uniq r -> \\big[op/idx]_i E i = \\big[op/idx]_(x <- r) oapp E idx (insub (index x r)).",
            "VernacStartTheoremProof",
            "7aa9eb006f77680238a38faf93f414d6d16c58cf"
        ],
        [
            "move=> Ur; apply/esym; rewrite big_tnth; apply: eq_bigr => i _.",
            "VernacExtend",
            "42e188f64c1b305ed274c1704aedbf73891c3017"
        ],
        [
            "by rewrite index_uniq // valK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_tuple I n (t : n.-tuple I) (P : pred I) F : \\big[op/idx]_(i <- t | P i) F i = \\big[op/idx]_(i < n | P (tnth t i)) F (tnth t i).",
            "VernacStartTheoremProof",
            "69785210fbf7c3ff1abf37ecc187f9e88ac50e69"
        ],
        [
            "by rewrite big_tnth tvalK; case: _ / (esym _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_ord_narrow_cond n1 n2 (P : pred 'I_n2) F (le_n12 : n1 <= n2) : let w := widen_ord le_n12 in \\big[op/idx]_(i < n2 | P i && (i < n1)) F i = \\big[op/idx]_(i < n1 | P (w i)) F (w i).",
            "VernacStartTheoremProof",
            "add9356b6fc06185072a48b1f729f33d8d5deec4"
        ],
        [
            "case: n1 => [|n1] /= in le_n12 *.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite big_ord0 big_pred0 // => i; rewrite andbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (big_ord_widen_leq _ _ le_n12); apply: eq_big => i.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by apply: andb_id2r => le_i_n1; congr P; apply: val_inj; rewrite /= inordK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case/andP=> _ le_i_n1; congr F; apply: val_inj; rewrite /= inordK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_ord_narrow_cond_leq n1 n2 (P : pred _) F (le_n12 : n1 <= n2) : let w := @widen_ord n1.+1 n2.+1 le_n12 in \\big[op/idx]_(i < n2.+1 | P i && (i <= n1)) F i = \\big[op/idx]_(i < n1.+1 | P (w i)) F (w i).",
            "VernacStartTheoremProof",
            "d09fc90bbd2fdde819cee2f69975c97dae1c12b7"
        ],
        [
            "exact: (@big_ord_narrow_cond n1.+1 n2.+1).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_ord_narrow n1 n2 F (le_n12 : n1 <= n2) : let w := widen_ord le_n12 in \\big[op/idx]_(i < n2 | i < n1) F i = \\big[op/idx]_(i < n1) F (w i).",
            "VernacStartTheoremProof",
            "6ab8cfd6e473891d4d77d74574df56d0c80718f7"
        ],
        [
            "exact: (big_ord_narrow_cond (predT)).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_ord_narrow_leq n1 n2 F (le_n12 : n1 <= n2) : let w := @widen_ord n1.+1 n2.+1 le_n12 in \\big[op/idx]_(i < n2.+1 | i <= n1) F i = \\big[op/idx]_(i < n1.+1) F (w i).",
            "VernacStartTheoremProof",
            "255e91259b9b44be8342f5cb65a3ec8e3f1e115f"
        ],
        [
            "exact: (big_ord_narrow_cond_leq (predT)).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_ord_recl n F : \\big[op/idx]_(i < n.+1) F i = op (F ord0) (\\big[op/idx]_(i < n) F (@lift n.+1 ord0 i)).",
            "VernacStartTheoremProof",
            "3bcec233fd0cc98dc3747e4a1ce3a5bf8a6ef2b2"
        ],
        [
            "pose G i := F (inord i); have eqFG i: F i = G i by rewrite /G inord_val.",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "rewrite (eq_bigr _ (fun i _ => eqFG i)) -(big_mkord _ (fun _ => _) G) eqFG.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite big_ltn // big_add1 /= big_mkord; congr op.",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by apply: eq_bigr => i _; rewrite eqFG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_const (I : finType) (A : pred I) x : \\big[op/idx]_(i in A) x = iter #|A| (op x) idx.",
            "VernacStartTheoremProof",
            "a56e6fd2505e3cf4033d74aa2ae7875c71d0ff7c"
        ],
        [
            "by rewrite big_const_seq -size_filter cardE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_const_nat m n x : \\big[op/idx]_(m <= i < n) x = iter (n - m) (op x) idx.",
            "VernacStartTheoremProof",
            "d276822584d2cf83bcce3a8568685546f8096325"
        ],
        [
            "by rewrite big_const_seq count_predT size_iota.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_const_ord n x : \\big[op/idx]_(i < n) x = iter n (op x) idx.",
            "VernacStartTheoremProof",
            "96175dcd3c9be2e851074f9f74177350789d72d9"
        ],
        [
            "by rewrite big_const card_ord.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_nseq_cond I n a (P : pred I) F : \\big[op/idx]_(i <- nseq n a | P i) F i = if P a then iter n (op (F a)) idx else idx.",
            "VernacStartTheoremProof",
            "2be1b4edabc0e0ef8247df3e63a3f0c95e7486f5"
        ],
        [
            "by rewrite unlock; elim: n => /= [|n ->]; case: (P a).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_nseq I n a (F : I -> R): \\big[op/idx]_(i <- nseq n a) F i = iter n (op (F a)) idx.",
            "VernacStartTheoremProof",
            "1617280c0a5cd89120516f3775d6b9396c8b9448"
        ],
        [
            "exact: big_nseq_cond.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Extensionality.",
            "VernacEndSegment",
            "35bfb1e3b301b5c235f0f3e32da85761f43fe8ae"
        ],
        [
            "Section MonoidProperties.",
            "VernacBeginSection",
            "a1b993316147553e042f149807ca440ac5770757"
        ],
        [
            "Import Monoid.Theory.",
            "VernacImport",
            "668847cb44619a233f3430564d48b00fafb02450"
        ],
        [
            "Variable R : Type.",
            "VernacAssumption",
            "ab8b7c03c13a438d85be3477064b5f670ea3b2a7"
        ],
        [
            "Variable idx : R.",
            "VernacAssumption",
            "c3838c72f9a9bbb16e47f815f3cd128d1a2d4b9e"
        ],
        [
            "Local Notation \"1\" := idx.",
            "VernacNotation",
            "4fd89063880550f10e958fb4fdbe9cb8a3bc119a"
        ],
        [
            "Section Plain.",
            "VernacBeginSection",
            "07a372aa05b5487bd3d853dbe1ec47526cb2821e"
        ],
        [
            "Variable op : Monoid.law 1.",
            "VernacAssumption",
            "97fdabba09bbab4642fb1977d1d678b6ca5aa20d"
        ],
        [
            "Local Notation \"*%M\" := op (at level 0).",
            "VernacNotation",
            "864c42d5f380eb0d34d6af0d1a0b0ab5d152a774"
        ],
        [
            "Local Notation \"x * y\" := (op x y).",
            "VernacNotation",
            "7ea860e6f64cd2a7df5ec7efbd73031a7c98cfbe"
        ],
        [
            "Lemma eq_big_idx_seq idx' I r (P : pred I) F : right_id idx' *%M -> has P r -> \\big[*%M/idx']_(i <- r | P i) F i =\\big[*%M/1]_(i <- r | P i) F i.",
            "VernacStartTheoremProof",
            "8fd503291ec0dc6066fcbe250a38e0a575b8a530"
        ],
        [
            "move=> op_idx'; rewrite -!(big_filter _ _ r) has_count -size_filter.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "case/lastP: (filter P r) => {r}// r i _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite -cats1 !(big_cat_nested, big_cons, big_nil) op_idx' mulm1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_big_idx idx' (I : finType) i0 (P : pred I) F : P i0 -> right_id idx' *%M -> \\big[*%M/idx']_(i | P i) F i =\\big[*%M/1]_(i | P i) F i.",
            "VernacStartTheoremProof",
            "7199b469e0d57fc8cac0a7fcc4ef659f0d22442b"
        ],
        [
            "by move=> Pi0 op_idx'; apply: eq_big_idx_seq => //; apply/hasP; exists i0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big1_eq I r (P : pred I) : \\big[*%M/1]_(i <- r | P i) 1 = 1.",
            "VernacStartTheoremProof",
            "0775bf6447ee2a30e4ead6085e8706a72e9c21c8"
        ],
        [
            "by rewrite big_const_seq; elim: (count _ _) => //= n ->; apply: mul1m.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big1 I r (P : pred I) F : (forall i, P i -> F i = 1) -> \\big[*%M/1]_(i <- r | P i) F i = 1.",
            "VernacStartTheoremProof",
            "d33671a3f0a0822cab16cf98fd971eb421b40bab"
        ],
        [
            "by move/(eq_bigr _)->; apply: big1_eq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big1_seq (I : eqType) r (P : pred I) F : (forall i, P i && (i \\in r) -> F i = 1) -> \\big[*%M/1]_(i <- r | P i) F i = 1.",
            "VernacStartTheoremProof",
            "333100f734eb69016eaf7e942a214827e7377475"
        ],
        [
            "by move=> eqF1; rewrite big_seq_cond big_andbC big1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_seq1 I (i : I) F : \\big[*%M/1]_(j <- [:: i]) F j = F i.",
            "VernacStartTheoremProof",
            "78c6db0e9f614aa6832f5d63ad40591ea9f10ba4"
        ],
        [
            "by rewrite unlock /= mulm1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_mkcond I r (P : pred I) F : \\big[*%M/1]_(i <- r | P i) F i = \\big[*%M/1]_(i <- r) (if P i then F i else 1).",
            "VernacStartTheoremProof",
            "07628d630d080600db083d774fa988375c899123"
        ],
        [
            "by rewrite unlock; elim: r => //= i r ->; case P; rewrite ?mul1m.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_mkcondr I r (P Q : pred I) F : \\big[*%M/1]_(i <- r | P i && Q i) F i = \\big[*%M/1]_(i <- r | P i) (if Q i then F i else 1).",
            "VernacStartTheoremProof",
            "ae62a27f700b4ec9eca22de273081319c157cfc9"
        ],
        [
            "by rewrite -big_filter_cond big_mkcond big_filter.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_mkcondl I r (P Q : pred I) F : \\big[*%M/1]_(i <- r | P i && Q i) F i = \\big[*%M/1]_(i <- r | Q i) (if P i then F i else 1).",
            "VernacStartTheoremProof",
            "4f0157edb1b29e6895544ffab919c713c0470af1"
        ],
        [
            "by rewrite big_andbC big_mkcondr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_cat I r1 r2 (P : pred I) F : \\big[*%M/1]_(i <- r1 ++ r2 | P i) F i = \\big[*%M/1]_(i <- r1 | P i) F i * \\big[*%M/1]_(i <- r2 | P i) F i.",
            "VernacStartTheoremProof",
            "e3a453bbc2f64593eddf38298abcf3a825576cc2"
        ],
        [
            "rewrite !(big_mkcond _ P) unlock.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by elim: r1 => /= [|i r1 ->]; rewrite (mul1m, mulmA).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_allpairs I1 I2 (r1 : seq I1) (r2 : seq I2) F : \\big[*%M/1]_(i <- [seq (i1, i2) | i1 <- r1, i2 <- r2]) F i = \\big[*%M/1]_(i1 <- r1) \\big[op/idx]_(i2 <- r2) F (i1, i2).",
            "VernacStartTheoremProof",
            "51111c27e615bead493ec29d90aacf10ad4b1832"
        ],
        [
            "elim: r1 => [|i1 r1 IHr1]; first by rewrite !big_nil.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite big_cat IHr1 big_cons big_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_pred1_eq (I : finType) (i : I) F : \\big[*%M/1]_(j | j == i) F j = F i.",
            "VernacStartTheoremProof",
            "a1e1817b3f25a686a7acda0e8f55da1830d786e1"
        ],
        [
            "by rewrite -big_filter filter_index_enum enum1 big_seq1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_pred1 (I : finType) i (P : pred I) F : P =1 pred1 i -> \\big[*%M/1]_(j | P j) F j = F i.",
            "VernacStartTheoremProof",
            "332cbce06d27219dd43db78a03c577b5fbe92a8e"
        ],
        [
            "by move/(eq_bigl _ _)->; apply: big_pred1_eq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_cat_nat n m p (P : pred nat) F : m <= n -> n <= p -> \\big[*%M/1]_(m <= i < p | P i) F i = (\\big[*%M/1]_(m <= i < n | P i) F i) * (\\big[*%M/1]_(n <= i < p | P i) F i).",
            "VernacStartTheoremProof",
            "e2f0e2563e83f66637f32b24cc09df8296b2d6aa"
        ],
        [
            "move=> le_mn le_np; rewrite -big_cat -{2}(subnKC le_mn) -iota_add subnDA.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite subnKC // leq_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_nat1 n F : \\big[*%M/1]_(n <= i < n.+1) F i = F n.",
            "VernacStartTheoremProof",
            "00dcbcde18a1a0787d04e0c69665e57c1c51ab39"
        ],
        [
            "by rewrite big_ltn // big_geq // mulm1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_nat_recr n m F : m <= n -> \\big[*%M/1]_(m <= i < n.+1) F i = (\\big[*%M/1]_(m <= i < n) F i) * F n.",
            "VernacStartTheoremProof",
            "e830c13be1c789d2901a47faa36db28c1fe6086b"
        ],
        [
            "by move=> lemn; rewrite (@big_cat_nat n) ?leqnSn // big_nat1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_ord_recr n F : \\big[*%M/1]_(i < n.+1) F i = (\\big[*%M/1]_(i < n) F (widen_ord (leqnSn n) i)) * F ord_max.",
            "VernacStartTheoremProof",
            "9e1f15dda3b3816aa70ef7b2c92140fab7b7a882"
        ],
        [
            "transitivity (\\big[*%M/1]_(0 <= i < n.+1) F (inord i)).",
            "VernacExtend",
            "f46250854a0a9f2ababee41f748696a1730e2b12"
        ],
        [
            "by rewrite big_mkord; apply: eq_bigr=> i _; rewrite inord_val.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite big_nat_recr // big_mkord; congr (_ * F _); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: val_inj; rewrite /= inordK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: eq_bigr => [] i _; congr F; apply: ord_inj; rewrite inordK //= leqW.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_sumType (I1 I2 : finType) (P : pred (I1 + I2)) F : \\big[*%M/1]_(i | P i) F i = (\\big[*%M/1]_(i | P (inl _ i)) F (inl _ i)) * (\\big[*%M/1]_(i | P (inr _ i)) F (inr _ i)).",
            "VernacStartTheoremProof",
            "3e83b7204850b37c9d059991ebb6fa91166f2499"
        ],
        [
            "by rewrite /index_enum {1}[@Finite.enum]unlock /= big_cat !big_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_split_ord m n (P : pred 'I_(m + n)) F : \\big[*%M/1]_(i | P i) F i = (\\big[*%M/1]_(i | P (lshift n i)) F (lshift n i)) * (\\big[*%M/1]_(i | P (rshift m i)) F (rshift m i)).",
            "VernacStartTheoremProof",
            "9a7cd1ef7f387d7550666ea3c13f6ad3c01cc8e8"
        ],
        [
            "rewrite -(big_map _ _ (lshift n) _ P F) -(big_map _ _ (@rshift m _) _ P F).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -big_cat; congr bigop; apply: (inj_map val_inj).",
            "VernacExtend",
            "75f5ff0fb7cf09d432c728351fd923a93d5d7135"
        ],
        [
            "rewrite /index_enum -!enumT val_enum_ord map_cat -map_comp val_enum_ord.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -map_comp (map_comp (addn m)) val_enum_ord.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -iota_addl addn0 iota_add.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_flatten I rr (P : pred I) F : \\big[*%M/1]_(i <- flatten rr | P i) F i = \\big[*%M/1]_(r <- rr) \\big[*%M/1]_(i <- r | P i) F i.",
            "VernacStartTheoremProof",
            "433a6237533574858ab819f8079a66026072cc9f"
        ],
        [
            "by elim: rr => [|r rr IHrr]; rewrite ?big_nil //= big_cat big_cons -IHrr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Plain.",
            "VernacEndSegment",
            "55cb578be1727d454e2c4bba5568da721ac109cb"
        ],
        [
            "Section Abelian.",
            "VernacBeginSection",
            "0a057f839b9b9c78cc35fe5808bc270ceeaca373"
        ],
        [
            "Variable op : Monoid.com_law 1.",
            "VernacAssumption",
            "435a23161d31121f2d0ecaf015a45669435683bc"
        ],
        [
            "Local Notation \"'*%M'\" := op (at level 0).",
            "VernacNotation",
            "7c6a8e82ee6483f75b9e0c59a71e17180d409c32"
        ],
        [
            "Local Notation \"x * y\" := (op x y).",
            "VernacNotation",
            "7ea860e6f64cd2a7df5ec7efbd73031a7c98cfbe"
        ],
        [
            "Lemma eq_big_perm (I : eqType) r1 r2 (P : pred I) F : perm_eq r1 r2 -> \\big[*%M/1]_(i <- r1 | P i) F i = \\big[*%M/1]_(i <- r2 | P i) F i.",
            "VernacStartTheoremProof",
            "7a640118205c57f68ca18d35dfdb49783e6ea0b0"
        ],
        [
            "move/perm_eqP; rewrite !(big_mkcond _ _ P).",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "elim: r1 r2 => [|i r1 IHr1] r2 eq_r12.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by case: r2 eq_r12 => // i r2; move/(_ (pred1 i)); rewrite /= eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have r2i: i \\in r2 by rewrite -has_pred1 has_count -eq_r12 /= eqxx.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case/splitPr: r2 / r2i => [r3 r4] in eq_r12 *; rewrite big_cat /= !big_cons.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "rewrite mulmCA; congr (_ * _); rewrite -big_cat; apply: IHr1 => a.",
            "VernacExtend",
            "cf70e9f85fa92317530c4d200680b1504297e61b"
        ],
        [
            "by move/(_ a): eq_r12; rewrite !count_cat /= addnCA; apply: addnI.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_uniq (I : finType) (r : seq I) F : uniq r -> \\big[*%M/1]_(i <- r) F i = \\big[*%M/1]_(i in r) F i.",
            "VernacStartTheoremProof",
            "2fcb52452d641d9929d909c1efaf5f5f9e078c99"
        ],
        [
            "move=> uniq_r; rewrite -(big_filter _ _ _ (mem r)); apply: eq_big_perm.",
            "VernacExtend",
            "0fa388cebe8ed6372154caa26cd10c357f123670"
        ],
        [
            "by rewrite filter_index_enum uniq_perm_eq ?enum_uniq // => i; rewrite mem_enum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_rem (I : eqType) r x (P : pred I) F : x \\in r -> \\big[*%M/1]_(y <- r | P y) F y = (if P x then F x else 1) * \\big[*%M/1]_(y <- rem x r | P y) F y.",
            "VernacStartTheoremProof",
            "6698fa5b64932c2ee0d585cb7997052318ce14da"
        ],
        [
            "by move/perm_to_rem/(eq_big_perm _)->; rewrite !(big_mkcond _ _ P) big_cons.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_undup (I : eqType) (r : seq I) (P : pred I) F : idempotent *%M -> \\big[*%M/1]_(i <- undup r | P i) F i = \\big[*%M/1]_(i <- r | P i) F i.",
            "VernacStartTheoremProof",
            "bea37146141993890d7edd9e8ca2009f5cd09904"
        ],
        [
            "move=> idM; rewrite -!(big_filter _ _ _ P) filter_undup.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "elim: {P r}(filter P r) => //= i r IHr.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "case: ifP => [r_i | _]; rewrite !big_cons {}IHr //.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by rewrite (big_rem _ _ r_i) mulmA idM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_big_idem (I : eqType) (r1 r2 : seq I) (P : pred I) F : idempotent *%M -> r1 =i r2 -> \\big[*%M/1]_(i <- r1 | P i) F i = \\big[*%M/1]_(i <- r2 | P i) F i.",
            "VernacStartTheoremProof",
            "709ecd160aa849ff01b8757b4594b2e8d701ff95"
        ],
        [
            "move=> idM eq_r; rewrite -big_undup // -(big_undup r2) //; apply/eq_big_perm.",
            "VernacExtend",
            "0fa388cebe8ed6372154caa26cd10c357f123670"
        ],
        [
            "by rewrite uniq_perm_eq ?undup_uniq // => i; rewrite !mem_undup eq_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_undup_iterop_count (I : eqType) (r : seq I) (P : pred I) F : \\big[*%M/1]_(i <- undup r | P i) iterop (count_mem i r) *%M (F i) 1 = \\big[*%M/1]_(i <- r | P i) F i.",
            "VernacStartTheoremProof",
            "3bacf40f0035d11d3b97b200ab00c0fb1c7eb7f6"
        ],
        [
            "rewrite -[RHS](eq_big_perm _ F (perm_undup_count _)) big_flatten big_map.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite big_mkcond; apply: eq_bigr => i _; rewrite big_nseq_cond iteropE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_split I r (P : pred I) F1 F2 : \\big[*%M/1]_(i <- r | P i) (F1 i * F2 i) = \\big[*%M/1]_(i <- r | P i) F1 i * \\big[*%M/1]_(i <- r | P i) F2 i.",
            "VernacStartTheoremProof",
            "d6f555156515ee164fe4cd2952463e4d59207e95"
        ],
        [
            "by elim/big_rec3: _ => [|i x y _ _ ->]; rewrite ?mulm1 // mulmCA -!mulmA mulmCA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bigID I r (a P : pred I) F : \\big[*%M/1]_(i <- r | P i) F i = \\big[*%M/1]_(i <- r | P i && a i) F i * \\big[*%M/1]_(i <- r | P i && ~~ a i) F i.",
            "VernacStartTheoremProof",
            "1b8c3a659bbf1dce903b8b46f769d264dd3eaf65"
        ],
        [
            "rewrite !(big_mkcond _ _ _ F) -big_split.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: eq_bigr => i; case: (a i); rewrite !simpm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments bigID [I r].",
            "VernacArguments",
            "d184a2f7f71b36e709ea223c4185ce9300a9ffd8"
        ],
        [
            "Lemma bigU (I : finType) (A B : pred I) F : [disjoint A & B] -> \\big[*%M/1]_(i in [predU A & B]) F i = (\\big[*%M/1]_(i in A) F i) * (\\big[*%M/1]_(i in B) F i).",
            "VernacStartTheoremProof",
            "3f235f1ffb1c5c30374fd4c6b6ad8fb1d5deae41"
        ],
        [
            "move=> dAB; rewrite (bigID (mem A)).",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "congr (_ * _); apply: eq_bigl => i; first by rewrite orbK.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by have:= pred0P dAB i; rewrite andbC /= !inE; case: (i \\in A).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bigD1 (I : finType) j (P : pred I) F : P j -> \\big[*%M/1]_(i | P i) F i = F j * \\big[*%M/1]_(i | P i && (i != j)) F i.",
            "VernacStartTheoremProof",
            "ad7905b5f006f899f6f471705bb4c48ee9ec4429"
        ],
        [
            "move=> Pj; rewrite (bigID (pred1 j)); congr (_ * _).",
            "VernacExtend",
            "485e46f06ecb626ff6a640f6969694ae3ffba974"
        ],
        [
            "by apply: big_pred1 => i; rewrite /= andbC; case: eqP => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments bigD1 [I] j [P F].",
            "VernacArguments",
            "15dfe1ed793e4e623a674e0c4a66ee9fb093c4dd"
        ],
        [
            "Lemma bigD1_seq (I : eqType) (r : seq I) j F : j \\in r -> uniq r -> \\big[*%M/1]_(i <- r) F i = F j * \\big[*%M/1]_(i <- r | i != j) F i.",
            "VernacStartTheoremProof",
            "cf4b76712703b41185e60ed2617ec533c250faa7"
        ],
        [
            "by move=> /big_rem-> /rem_filter->; rewrite big_filter.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardD1x (I : finType) (A : pred I) j : A j -> #|SimplPred A| = 1 + #|[pred i | A i & i != j]|.",
            "VernacStartTheoremProof",
            "1554335d290a01194871a64ae0df75626ab8b715"
        ],
        [
            "move=> Aj; rewrite (cardD1 j) [j \\in A]Aj; congr (_ + _).",
            "VernacExtend",
            "485e46f06ecb626ff6a640f6969694ae3ffba974"
        ],
        [
            "by apply: eq_card => i; rewrite inE /= andbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments cardD1x [I A].",
            "VernacArguments",
            "ad92f1d81a4ab16874f50c7ae1389232163ec488"
        ],
        [
            "Lemma partition_big (I J : finType) (P : pred I) p (Q : pred J) F : (forall i, P i -> Q (p i)) -> \\big[*%M/1]_(i | P i) F i = \\big[*%M/1]_(j | Q j) \\big[*%M/1]_(i | P i && (p i == j)) F i.",
            "VernacStartTheoremProof",
            "6d36d3d55b7c8ea1a72156f3d612e8e885593a13"
        ],
        [
            "move=> Qp; transitivity (\\big[*%M/1]_(i | P i && Q (p i)) F i).",
            "VernacExtend",
            "d8d8948c25a59a9b77653718466ec6cb07303ee8"
        ],
        [
            "by apply: eq_bigl => i; case Pi: (P i); rewrite // Qp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: {Q Qp}_.+1 {-2}Q (ltnSn #|Q|) => // n IHn Q.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "case: (pickP Q) => [j Qj | Q0 _]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !big_pred0 // => i; rewrite Q0 andbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite ltnS (cardD1x j Qj) (bigD1 j) //; move/IHn=> {n IHn} <-.",
            "VernacExtend",
            "7e529e80bb2879787ee6d9466056f19f0215c721"
        ],
        [
            "rewrite (bigID (fun i => p i == j)); congr (_ * _); apply: eq_bigl => i.",
            "VernacExtend",
            "75f5ff0fb7cf09d432c728351fd923a93d5d7135"
        ],
        [
            "by case: eqP => [-> | _]; rewrite !(Qj, simpm).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite andbA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments partition_big [I J P] p Q [F].",
            "VernacArguments",
            "99df8347e74f760887ccce18eec2bb16ea86d417"
        ],
        [
            "Lemma reindex_onto (I J : finType) (h : J -> I) h' (P : pred I) F : (forall i, P i -> h (h' i) = i) -> \\big[*%M/1]_(i | P i) F i = \\big[*%M/1]_(j | P (h j) && (h' (h j) == j)) F (h j).",
            "VernacStartTheoremProof",
            "b8936a489db80687c4b444076e2c7c43a2174653"
        ],
        [
            "move=> h'K; elim: {P}_.+1 {-3}P h'K (ltnSn #|P|) => //= n IHn P h'K.",
            "VernacExtend",
            "06880003f1108b2eb418688c7bc6bf1013cf0e4c"
        ],
        [
            "case: (pickP P) => [i Pi | P0 _]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !big_pred0 // => j; rewrite P0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite ltnS (cardD1x i Pi); move/IHn {n IHn} => IH.",
            "VernacExtend",
            "7e529e80bb2879787ee6d9466056f19f0215c721"
        ],
        [
            "rewrite (bigD1 i Pi) (bigD1 (h' i)) h'K ?Pi ?eq_refl //=; congr (_ * _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "rewrite {}IH => [|j]; [apply: eq_bigl => j | by case/andP; auto].",
            "VernacExtend",
            "5aea5be59d7f1a695ebe6039b2942f7496777955"
        ],
        [
            "rewrite andbC -andbA (andbCA (P _)); case: eqP => //= hK; congr (_ && ~~ _).",
            "VernacExtend",
            "5db661b2eabaeba9ea767f17a66a333944a22b53"
        ],
        [
            "by apply/eqP/eqP=> [<-|->] //; rewrite h'K.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments reindex_onto [I J] h h' [P F].",
            "VernacArguments",
            "657962b1318ed8c0f5e565d5035f6c8f217f3a8d"
        ],
        [
            "Lemma reindex (I J : finType) (h : J -> I) (P : pred I) F : {on [pred i | P i], bijective h} -> \\big[*%M/1]_(i | P i) F i = \\big[*%M/1]_(j | P (h j)) F (h j).",
            "VernacStartTheoremProof",
            "83203923383af7946fa89ff6ba1a192bde4ffdd9"
        ],
        [
            "case=> h' hK h'K; rewrite (reindex_onto h h' h'K).",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by apply: eq_bigl => j; rewrite !inE; case Pi: (P _); rewrite //= hK ?eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments reindex [I J] h [P F].",
            "VernacArguments",
            "1dbb7cb8df100c3f14ba2c1f571cbad69904929f"
        ],
        [
            "Lemma reindex_inj (I : finType) (h : I -> I) (P : pred I) F : injective h -> \\big[*%M/1]_(i | P i) F i = \\big[*%M/1]_(j | P (h j)) F (h j).",
            "VernacStartTheoremProof",
            "ed69854c2b79ff0cb0efbaaeb611bf45b49e2a70"
        ],
        [
            "by move=> injh; apply: reindex (onW_bij _ (injF_bij injh)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments reindex_inj [I h P F].",
            "VernacArguments",
            "e7380b28702f4c41a635f96a0f9645261fdedb19"
        ],
        [
            "Lemma big_nat_rev m n P F : \\big[*%M/1]_(m <= i < n | P i) F i = \\big[*%M/1]_(m <= i < n | P (m + n - i.+1)) F (m + n - i.+1).",
            "VernacStartTheoremProof",
            "e113a177bd926d13b7c9da7b828a16044ddbbe60"
        ],
        [
            "case: (ltnP m n) => ltmn; last by rewrite !big_geq.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite -{3 4}(subnK (ltnW ltmn)) addnA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "do 2!rewrite (big_addn _ _ 0) big_mkord; rewrite (reindex_inj rev_ord_inj) /=.",
            "VernacExtend",
            "f8a765f8b8158bfb954eb4eeb20c0cb6489ecdb4"
        ],
        [
            "by apply: eq_big => [i | i _]; rewrite /= -addSn subnDr addnC addnBA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pair_big_dep (I J : finType) (P : pred I) (Q : I -> pred J) F : \\big[*%M/1]_(i | P i) \\big[*%M/1]_(j | Q i j) F i j = \\big[*%M/1]_(p | P p.1 && Q p.1 p.2) F p.1 p.2.",
            "VernacStartTheoremProof",
            "e05c567f9c1a1b7d9897f84d533658bfd470e0b9"
        ],
        [
            "rewrite (partition_big (fun p => p.1) P) => [|j]; last by case/andP.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply: eq_bigr => i /= Pi; rewrite (reindex_onto (pair i) (fun p => p.2)).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by apply: eq_bigl => j; rewrite !eqxx [P i]Pi !andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case=> i' j /=; case/andP=> _ /=; move/eqP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pair_big (I J : finType) (P : pred I) (Q : pred J) F : \\big[*%M/1]_(i | P i) \\big[*%M/1]_(j | Q j) F i j = \\big[*%M/1]_(p | P p.1 && Q p.2) F p.1 p.2.",
            "VernacStartTheoremProof",
            "476bdf6272a5b8da9cb0646ea7fdafa22ddbaa9c"
        ],
        [
            "exact: pair_big_dep.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pair_bigA (I J : finType) (F : I -> J -> R) : \\big[*%M/1]_i \\big[*%M/1]_j F i j = \\big[*%M/1]_p F p.1 p.2.",
            "VernacStartTheoremProof",
            "a7160360e0cd0b9f9e11751d4a8a308ad7e2f9a6"
        ],
        [
            "exact: pair_big_dep.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exchange_big_dep I J rI rJ (P : pred I) (Q : I -> pred J) (xQ : pred J) F : (forall i j, P i -> Q i j -> xQ j) -> \\big[*%M/1]_(i <- rI | P i) \\big[*%M/1]_(j <- rJ | Q i j) F i j = \\big[*%M/1]_(j <- rJ | xQ j) \\big[*%M/1]_(i <- rI | P i && Q i j) F i j.",
            "VernacStartTheoremProof",
            "45b45063f2bbd3eba7d121c05d952ee7a6e9a0d1"
        ],
        [
            "move=> PQxQ; pose p u := (u.2, u.1).",
            "VernacExtend",
            "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
        ],
        [
            "rewrite (eq_bigr _ _ _ (fun _ _ => big_tnth _ _ rI _ _)) (big_tnth _ _ rJ).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (eq_bigr _ _ _ (fun _ _ => (big_tnth _ _ rJ _ _))) big_tnth.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite !pair_big_dep (reindex_onto (p _ _) (p _ _)) => [|[]] //=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply: eq_big => [] [j i] //=; symmetry; rewrite eqxx andbT andb_idl //.",
            "VernacExtend",
            "752925a62852bcfb152847f137ed8a2eb5456da4"
        ],
        [
            "by case/andP; apply: PQxQ.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments exchange_big_dep [I J rI rJ P Q] xQ [F].",
            "VernacArguments",
            "e643e500c872b7064c095474392d84e88bf8946e"
        ],
        [
            "Lemma exchange_big I J rI rJ (P : pred I) (Q : pred J) F : \\big[*%M/1]_(i <- rI | P i) \\big[*%M/1]_(j <- rJ | Q j) F i j = \\big[*%M/1]_(j <- rJ | Q j) \\big[*%M/1]_(i <- rI | P i) F i j.",
            "VernacStartTheoremProof",
            "bd3227867239a94d427c9963133fef8730d4b854"
        ],
        [
            "rewrite (exchange_big_dep Q) //; apply: eq_bigr => i /= Qi.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by apply: eq_bigl => j; rewrite Qi andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exchange_big_dep_nat m1 n1 m2 n2 (P : pred nat) (Q : rel nat) (xQ : pred nat) F : (forall i j, m1 <= i < n1 -> m2 <= j < n2 -> P i -> Q i j -> xQ j) -> \\big[*%M/1]_(m1 <= i < n1 | P i) \\big[*%M/1]_(m2 <= j < n2 | Q i j) F i j = \\big[*%M/1]_(m2 <= j < n2 | xQ j) \\big[*%M/1]_(m1 <= i < n1 | P i && Q i j) F i j.",
            "VernacStartTheoremProof",
            "6dad8a7dcaf573cbc3d47fb2bf562380b310a3ef"
        ],
        [
            "move=> PQxQ; rewrite (eq_bigr _ _ _ (fun _ _ => big_seq_cond _ _ _ _ _)).",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "rewrite big_seq_cond /= (exchange_big_dep xQ) => [|i j]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !mem_index_iota => /andP[mn_i Pi] /andP[mn_j /PQxQ->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite 2!(big_seq_cond _ _ _ xQ); apply: eq_bigr => j /andP[-> _] /=.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite [rhs in _ = rhs]big_seq_cond; apply: eq_bigl => i; rewrite -andbA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments exchange_big_dep_nat [m1 n1 m2 n2 P Q] xQ [F].",
            "VernacArguments",
            "27cf205ca8be352c8a4ae96426ec28c91234dead"
        ],
        [
            "Lemma exchange_big_nat m1 n1 m2 n2 (P Q : pred nat) F : \\big[*%M/1]_(m1 <= i < n1 | P i) \\big[*%M/1]_(m2 <= j < n2 | Q j) F i j = \\big[*%M/1]_(m2 <= j < n2 | Q j) \\big[*%M/1]_(m1 <= i < n1 | P i) F i j.",
            "VernacStartTheoremProof",
            "2770f4fe7dd8c53428bb23c68802572789a9e046"
        ],
        [
            "rewrite (exchange_big_dep_nat Q) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: eq_bigr => i /= Qi; apply: eq_bigl => j; rewrite Qi andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Abelian.",
            "VernacEndSegment",
            "2d97d645a2bd469e77139d465e12f159c49f174f"
        ],
        [
            "End MonoidProperties.",
            "VernacEndSegment",
            "f6e510c1fccdd41ee6e57a17012c70ab00703c10"
        ],
        [
            "Arguments big_filter [R idx op I].",
            "VernacArguments",
            "5c75d3946d37ddc0569eb3b469a88f74cbf0cab1"
        ],
        [
            "Arguments big_filter_cond [R idx op I].",
            "VernacArguments",
            "b8e75a138594f7e89fd493546b8bc6c1c430d706"
        ],
        [
            "Arguments congr_big [R idx op I r1] r2 [P1] P2 [F1] F2.",
            "VernacArguments",
            "ef6d2752dd2a2be6786fa5d4bfd1e04f279b4c61"
        ],
        [
            "Arguments eq_big [R idx op I r P1] P2 [F1] F2.",
            "VernacArguments",
            "a76cf4c24647c3778adda291bd12e7383064223a"
        ],
        [
            "Arguments eq_bigl [R idx op I r P1] P2.",
            "VernacArguments",
            "b37e471ceb59f763c3bc32f6b98158c9e6ef4ce9"
        ],
        [
            "Arguments eq_bigr [R idx op I r P F1] F2.",
            "VernacArguments",
            "ceb368309662ecc2d3d8daf2f2fda3f61586ced5"
        ],
        [
            "Arguments eq_big_idx [R idx op idx' I] i0 [P F].",
            "VernacArguments",
            "9e89190d7b4dcbf690e09355b21fa6ccf846e89b"
        ],
        [
            "Arguments big_seq_cond [R idx op I r].",
            "VernacArguments",
            "925f1f9aad60dbcd4fba4648f85efb271ef4964e"
        ],
        [
            "Arguments eq_big_seq [R idx op I r F1] F2.",
            "VernacArguments",
            "1ecf1410fec24af96bd79ee27fc6a44e14053ab4"
        ],
        [
            "Arguments congr_big_nat [R idx op m1 n1] m2 n2 [P1] P2 [F1] F2.",
            "VernacArguments",
            "225bea7f0a04b09e37a42b978d97d46c0cb2df2d"
        ],
        [
            "Arguments big_map [R idx op I J] h [r].",
            "VernacArguments",
            "dcddd2dd993339fc424ab2c1ebae73dae7ee0e53"
        ],
        [
            "Arguments big_nth [R idx op I] x0 [r].",
            "VernacArguments",
            "918b9c5b00c8b6e8414df8af293a95660a60846d"
        ],
        [
            "Arguments big_catl [R idx op I r1 r2 P F].",
            "VernacArguments",
            "7b7ae752d0829837097625d54605a3c0dbbb01b5"
        ],
        [
            "Arguments big_catr [R idx op I r1 r2 P F].",
            "VernacArguments",
            "b2ea586fbc05ea44ea3693d9de2d97a53678f2cb"
        ],
        [
            "Arguments big_geq [R idx op m n P F].",
            "VernacArguments",
            "940ba6fe77724cf9d289f316147792a9fb50ccda"
        ],
        [
            "Arguments big_ltn_cond [R idx op m n P F].",
            "VernacArguments",
            "8025b188fa0e7c6cf1bb6ad712e5971c5b6c5e0e"
        ],
        [
            "Arguments big_ltn [R idx op m n F].",
            "VernacArguments",
            "41f53aacc757a172298a96d2ba49a1b204d6578e"
        ],
        [
            "Arguments big_addn [R idx op].",
            "VernacArguments",
            "51acb7cf753c2fe407baf81f0f63700a864c91f9"
        ],
        [
            "Arguments big_mkord [R idx op n].",
            "VernacArguments",
            "1a0f3960b1809f685fa5fad74e681f8d9ad9f2fa"
        ],
        [
            "Arguments big_nat_widen [R idx op] .",
            "VernacArguments",
            "166c90575a3122aea2b9cd982f192fd14f0d7de4"
        ],
        [
            "Arguments big_ord_widen_cond [R idx op n1].",
            "VernacArguments",
            "d439839b526a546515f1ac0edddc5604d0bd4ba5"
        ],
        [
            "Arguments big_ord_widen [R idx op n1].",
            "VernacArguments",
            "47da654c54e4e3057af17e76e326990be8b4fcb1"
        ],
        [
            "Arguments big_ord_widen_leq [R idx op n1].",
            "VernacArguments",
            "ff43ddeb70098e9017a20977b53e17f493214c6d"
        ],
        [
            "Arguments big_ord_narrow_cond [R idx op n1 n2 P F].",
            "VernacArguments",
            "764408a30e83ec1ab8f60977cd8bb63d0cb73ebf"
        ],
        [
            "Arguments big_ord_narrow_cond_leq [R idx op n1 n2 P F].",
            "VernacArguments",
            "3fb790e8f86545efaa1bc471babb1c7c57c399b2"
        ],
        [
            "Arguments big_ord_narrow [R idx op n1 n2 F].",
            "VernacArguments",
            "4884c896082d89d0d3b280ee0bbaaf9c312a7fd5"
        ],
        [
            "Arguments big_ord_narrow_leq [R idx op n1 n2 F].",
            "VernacArguments",
            "1357401aa9a92f7cac64f0bc9670096deb70fb70"
        ],
        [
            "Arguments big_mkcond [R idx op I r].",
            "VernacArguments",
            "3fbf2190e94ff33977f06d7ece7f27301db38988"
        ],
        [
            "Arguments big1_eq [R idx op I].",
            "VernacArguments",
            "36a7a7f9a394ebc7214aa30aaf7a32f9e03021ce"
        ],
        [
            "Arguments big1_seq [R idx op I].",
            "VernacArguments",
            "f24cfe9574573088268bf027c48b071da4e50159"
        ],
        [
            "Arguments big1 [R idx op I].",
            "VernacArguments",
            "50dde531133d966a801c1a0572c9a340e78dc952"
        ],
        [
            "Arguments big_pred1 [R idx op I] i [P F].",
            "VernacArguments",
            "e334a39bbd2ebf692a56b4fb5c2a741ef60c14db"
        ],
        [
            "Arguments eq_big_perm [R idx op I r1] r2 [P F].",
            "VernacArguments",
            "8a784bcb2ff098f5e58416d260e630fd6753bb25"
        ],
        [
            "Arguments big_uniq [R idx op I] r [F].",
            "VernacArguments",
            "c3723e06a9af000d330df8170f4b0dc022b1a8b3"
        ],
        [
            "Arguments big_rem [R idx op I r] x [P F].",
            "VernacArguments",
            "96b2364fa4d23f48037359b98800f8db4eebd361"
        ],
        [
            "Arguments bigID [R idx op I r].",
            "VernacArguments",
            "274941afc335b72ce0d71f5a8de26f6164b5d0d4"
        ],
        [
            "Arguments bigU [R idx op I].",
            "VernacArguments",
            "e8f747cdb43001fca8155fcca93d13ebf1a0b02f"
        ],
        [
            "Arguments bigD1 [R idx op I] j [P F].",
            "VernacArguments",
            "7c971f07e2fba5e4d07e68ae6d903baa6bf32e39"
        ],
        [
            "Arguments bigD1_seq [R idx op I r] j [F].",
            "VernacArguments",
            "8c06717eb2a2feaba6bd46bba986807b5de21bf1"
        ],
        [
            "Arguments partition_big [R idx op I J P] p Q [F].",
            "VernacArguments",
            "09fc704875ecabb6d25a47e96d820ab523b08d7f"
        ],
        [
            "Arguments reindex_onto [R idx op I J] h h' [P F].",
            "VernacArguments",
            "52091b90d9a099945bedc683a7a38fd6da4e36f8"
        ],
        [
            "Arguments reindex [R idx op I J] h [P F].",
            "VernacArguments",
            "075fdda6fcbf259154cdff27014b8b3950d1ee8e"
        ],
        [
            "Arguments reindex_inj [R idx op I h P F].",
            "VernacArguments",
            "3044fc40f9022a0e98090078391aaa02615946ff"
        ],
        [
            "Arguments pair_big_dep [R idx op I J].",
            "VernacArguments",
            "b58f54a3028b8c067653617b6faf4e4fc3e6eda2"
        ],
        [
            "Arguments pair_big [R idx op I J].",
            "VernacArguments",
            "d542bbb46f5d92373c0999bae41a927e979d8c30"
        ],
        [
            "Arguments big_allpairs [R idx op I1 I2 r1 r2 F].",
            "VernacArguments",
            "232c8b4e4e310c0a8f33fd467b165c87eb5537e5"
        ],
        [
            "Arguments exchange_big_dep [R idx op I J rI rJ P Q] xQ [F].",
            "VernacArguments",
            "59c1f1c0d69a850f53594c6f14b6df34fe845bca"
        ],
        [
            "Arguments exchange_big_dep_nat [R idx op m1 n1 m2 n2 P Q] xQ [F].",
            "VernacArguments",
            "f761adf81644cac68fff372849aa7bcf9b76c866"
        ],
        [
            "Arguments big_ord_recl [R idx op].",
            "VernacArguments",
            "24cd999ec5899e4fbf3e1e54bc92e55b01240da1"
        ],
        [
            "Arguments big_ord_recr [R idx op].",
            "VernacArguments",
            "27b33f9d536331cd0cb5facad35624f0e2c2a15d"
        ],
        [
            "Arguments big_nat_recl [R idx op].",
            "VernacArguments",
            "89e46d078ad3ae6790a1d38025844f3206a31562"
        ],
        [
            "Arguments big_nat_recr [R idx op].",
            "VernacArguments",
            "c144c16bf38a5daa62bf8d6e70e1d4326a67b7ee"
        ],
        [
            "Section Distributivity.",
            "VernacBeginSection",
            "bb0b49ecfbf5f2935133e830c328b24aad44c674"
        ],
        [
            "Import Monoid.Theory.",
            "VernacImport",
            "668847cb44619a233f3430564d48b00fafb02450"
        ],
        [
            "Variable R : Type.",
            "VernacAssumption",
            "ab8b7c03c13a438d85be3477064b5f670ea3b2a7"
        ],
        [
            "Variables zero one : R.",
            "VernacAssumption",
            "86c1fb3f0f9c36aeeb12b3eb57f8d9ab3484b2c2"
        ],
        [
            "Local Notation \"0\" := zero.",
            "VernacNotation",
            "ecb186b793dfff1b8d349e36830b70b951526cf8"
        ],
        [
            "Local Notation \"1\" := one.",
            "VernacNotation",
            "df8113eadf412fba0b408230c6305108d78c268b"
        ],
        [
            "Variable times : Monoid.mul_law 0.",
            "VernacAssumption",
            "486d2ad2a852c5b899d81b79949c5715aa5d4b2f"
        ],
        [
            "Local Notation \"*%M\" := times (at level 0).",
            "VernacNotation",
            "96f3b5db2fc07ccc0780e69fedb00b57f67b1e17"
        ],
        [
            "Local Notation \"x * y\" := (times x y).",
            "VernacNotation",
            "84afc1c01a4a2f357830c7c0740ccbe2bafea2f3"
        ],
        [
            "Variable plus : Monoid.add_law 0 *%M.",
            "VernacAssumption",
            "87c4d8a707b98c95f9ef79cf4e0d62ac79b1d411"
        ],
        [
            "Local Notation \"+%M\" := plus (at level 0).",
            "VernacNotation",
            "90721194f88a0d881548ac0f687f4db8c4f363bd"
        ],
        [
            "Local Notation \"x + y\" := (plus x y).",
            "VernacNotation",
            "8eea56747e12767f37dd896d1e4a43fe16248da7"
        ],
        [
            "Lemma big_distrl I r a (P : pred I) F : \\big[+%M/0]_(i <- r | P i) F i * a = \\big[+%M/0]_(i <- r | P i) (F i * a).",
            "VernacStartTheoremProof",
            "781fc2b01cf8f1e2db0e0bbd18e5810901e4827c"
        ],
        [
            "by rewrite (big_endo ( *%M^~ a)) ?mul0m // => x y; apply: mulm_addl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_distrr I r a (P : pred I) F : a * \\big[+%M/0]_(i <- r | P i) F i = \\big[+%M/0]_(i <- r | P i) (a * F i).",
            "VernacStartTheoremProof",
            "3155833270c3b582e6799f2c8eaa9a7696d30cef"
        ],
        [
            "by rewrite big_endo ?mulm0 // => x y; apply: mulm_addr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_distrlr I J rI rJ (pI : pred I) (pJ : pred J) F G : (\\big[+%M/0]_(i <- rI | pI i) F i) * (\\big[+%M/0]_(j <- rJ | pJ j) G j) = \\big[+%M/0]_(i <- rI | pI i) \\big[+%M/0]_(j <- rJ | pJ j) (F i * G j).",
            "VernacStartTheoremProof",
            "b53cf29d0d96fc8445e68c075ea98ec478d0afc9"
        ],
        [
            "by rewrite big_distrl; apply: eq_bigr => i _; rewrite big_distrr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_distr_big_dep (I J : finType) j0 (P : pred I) (Q : I -> pred J) F : \\big[*%M/1]_(i | P i) \\big[+%M/0]_(j | Q i j) F i j = \\big[+%M/0]_(f in pfamily j0 P Q) \\big[*%M/1]_(i | P i) F i (f i).",
            "VernacStartTheoremProof",
            "0523d6968d225a599a8b1f24c6ffbda3c04f5252"
        ],
        [
            "pose fIJ := {ffun I -> J}; pose Pf := pfamily j0 (_ : seq I) Q.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "rewrite -big_filter filter_index_enum; set r := enum P; symmetry.",
            "VernacExtend",
            "845116228f2df2f975f4e5ec6c4b8e06c81d2b2e"
        ],
        [
            "transitivity (\\big[+%M/0]_(f in Pf r) \\big[*%M/1]_(i <- r) F i (f i)).",
            "VernacExtend",
            "90b59c3428e3290e66c13a0b1045716fbb632bfc"
        ],
        [
            "apply: eq_big => f; last by rewrite -big_filter filter_index_enum.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: eq_forallb => i; rewrite /= mem_enum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have: uniq r by apply: enum_uniq.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "elim: {P}r => /= [_ | i r IHr].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "rewrite (big_pred1 [ffun => j0]) ?big_nil //= => f.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply/familyP/eqP=> /= [Df |->{f} i]; last by rewrite ffunE !inE.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/ffunP=> i; rewrite ffunE; apply/eqP/Df.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/andP=> /negbTE nri; rewrite big_cons big_distrl => {IHr}/IHr <-.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "rewrite (partition_big (fun f : fIJ => f i) (Q i)) => [|f]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move/familyP/(_ i); rewrite /= inE /= eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose seti j (f : fIJ) := [ffun k => if k == i then j else f k].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "apply: eq_bigr => j Qij.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite (reindex_onto (seti j) (seti j0)) => [|f /andP[_ /eqP fi]]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/ffunP=> k; rewrite !ffunE; case: eqP => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite big_distrr; apply: eq_big => [f | f eq_f]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite big_cons ffunE eqxx !big_seq; congr (_ * _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by apply: eq_bigr => k; rewrite ffunE; case: eqP nri => // -> ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite !ffunE !eqxx andbT; apply/andP/familyP=> /= [[Pjf fij0] k | Pff].",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "have:= familyP Pjf k; rewrite /= ffunE inE; case: eqP => // -> _.",
            "VernacExtend",
            "3ce4f03148eef327ef1c0ea0b904dc833d71f154"
        ],
        [
            "by rewrite nri -(eqP fij0) !ffunE !inE !eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split; [apply/familyP | apply/eqP/ffunP] => k; have:= Pff k; rewrite !ffunE.",
            "VernacExtend",
            "42e90b443f1437031b0f98995036c35ca06c6f67"
        ],
        [
            "by rewrite inE; case: eqP => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case: eqP => // ->; rewrite nri /= => /eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_distr_big (I J : finType) j0 (P : pred I) (Q : pred J) F : \\big[*%M/1]_(i | P i) \\big[+%M/0]_(j | Q j) F i j = \\big[+%M/0]_(f in pffun_on j0 P Q) \\big[*%M/1]_(i | P i) F i (f i).",
            "VernacStartTheoremProof",
            "6885b4aedb05a821f22b5c9ebf57e6058c9ef244"
        ],
        [
            "rewrite (big_distr_big_dep j0); apply: eq_bigl => f.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by apply/familyP/familyP=> Pf i; case: ifP (Pf i).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bigA_distr_big_dep (I J : finType) (Q : I -> pred J) F : \\big[*%M/1]_i \\big[+%M/0]_(j | Q i j) F i j = \\big[+%M/0]_(f in family Q) \\big[*%M/1]_i F i (f i).",
            "VernacStartTheoremProof",
            "f761c9650f828170c845a192134c09b72b70a997"
        ],
        [
            "case: (pickP J) => [j0 _ | J0]; first exact: (big_distr_big_dep j0).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite {1 4}/index_enum -enumT; case: (enum I) (mem_enum I) => [I0 | i r _].",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "have f0: I -> J by move=> i; have:= I0 i.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (big_pred1 (finfun f0)) ?big_nil // => g.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by apply/familyP/eqP=> _; first apply/ffunP; move => i; have:= I0 i.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have Q0 i': Q i' =1 pred0 by move=> j; have:= J0 j.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite big_cons /= big_pred0 // mul0m big_pred0 // => f.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by apply/familyP=> /(_ i); rewrite [_ \\in _]Q0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bigA_distr_big (I J : finType) (Q : pred J) (F : I -> J -> R) : \\big[*%M/1]_i \\big[+%M/0]_(j | Q j) F i j = \\big[+%M/0]_(f in ffun_on Q) \\big[*%M/1]_i F i (f i).",
            "VernacStartTheoremProof",
            "9bf928a90f7e845ba0275ea65d1184550c2b9917"
        ],
        [
            "exact: bigA_distr_big_dep.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bigA_distr_bigA (I J : finType) F : \\big[*%M/1]_(i : I) \\big[+%M/0]_(j : J) F i j = \\big[+%M/0]_(f : {ffun I -> J}) \\big[*%M/1]_i F i (f i).",
            "VernacStartTheoremProof",
            "fea40fc66bc101bec55e05db836c8bca85b63aa1"
        ],
        [
            "by rewrite bigA_distr_big; apply: eq_bigl => ?; apply/familyP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Distributivity.",
            "VernacEndSegment",
            "15801ab5d8a09bdbd849e36bbe8fc7f068490549"
        ],
        [
            "Arguments big_distrl [R zero times plus I r].",
            "VernacArguments",
            "c64202db9ffad8bd15e21fab17a2bada704a9549"
        ],
        [
            "Arguments big_distrr [R zero times plus I r].",
            "VernacArguments",
            "be2f6aa18ed826d179764d310844a0d70f025c4f"
        ],
        [
            "Arguments big_distr_big_dep [R zero one times plus I J].",
            "VernacArguments",
            "a94cb5be28a6e451c6ecd47ec7b3b1481118174b"
        ],
        [
            "Arguments big_distr_big [R zero one times plus I J].",
            "VernacArguments",
            "aac6754f8e03ed7443c5490bd41bb361ec22ec7a"
        ],
        [
            "Arguments bigA_distr_big_dep [R zero one times plus I J].",
            "VernacArguments",
            "aba7299eb953eb1473169b4bb3bd0af89c93d1fd"
        ],
        [
            "Arguments bigA_distr_big [R zero one times plus I J].",
            "VernacArguments",
            "b636ec181854d5f9a0b27fc79b3baedb577c857a"
        ],
        [
            "Arguments bigA_distr_bigA [R zero one times plus I J].",
            "VernacArguments",
            "63be0667821fbab2d258dfc7f8a3d0af43c67a38"
        ],
        [
            "Section BigBool.",
            "VernacBeginSection",
            "0cddf6b0289344995121dfc22f2be70ef01778ee"
        ],
        [
            "Section Seq.",
            "VernacBeginSection",
            "9a165d3a5b04ad5b8ea48881baa380d3190594af"
        ],
        [
            "Variables (I : Type) (r : seq I) (P B : pred I).",
            "VernacAssumption",
            "35226f7ad7c3f70749a81864b48370e77a296d24"
        ],
        [
            "Lemma big_has : \\big[orb/false]_(i <- r) B i = has B r.",
            "VernacStartTheoremProof",
            "462a3e79688c3cdf4693eb9dd91f6b822d3f2541"
        ],
        [
            "by rewrite unlock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_all : \\big[andb/true]_(i <- r) B i = all B r.",
            "VernacStartTheoremProof",
            "9ab79ffa4ccd7d8d8613186cbc90930caf8eb8d1"
        ],
        [
            "by rewrite unlock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_has_cond : \\big[orb/false]_(i <- r | P i) B i = has (predI P B) r.",
            "VernacStartTheoremProof",
            "24bdeb3d0210c6d26d5be8ff082898bd5bad7040"
        ],
        [
            "by rewrite big_mkcond unlock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_all_cond : \\big[andb/true]_(i <- r | P i) B i = all [pred i | P i ==> B i] r.",
            "VernacStartTheoremProof",
            "e4e1c966ee6252d9f07d7621f46e1803d5f00d22"
        ],
        [
            "by rewrite big_mkcond unlock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Seq.",
            "VernacEndSegment",
            "167711f722d425f99f199369e362d90dfa73473d"
        ],
        [
            "Section FinType.",
            "VernacBeginSection",
            "3da259060832d532529dd57a085b3656520905e5"
        ],
        [
            "Variables (I : finType) (P B : pred I).",
            "VernacAssumption",
            "f1a28ff4ed87b3e1ea6e9bdf3b1ffa32cabcf9b6"
        ],
        [
            "Lemma big_orE : \\big[orb/false]_(i | P i) B i = [exists (i | P i), B i].",
            "VernacStartTheoremProof",
            "fa9156a3b14751c0c4586ee988e5a95fa1841a72"
        ],
        [
            "by rewrite big_has_cond; apply/hasP/existsP=> [] [i]; exists i.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_andE : \\big[andb/true]_(i | P i) B i = [forall (i | P i), B i].",
            "VernacStartTheoremProof",
            "70c1b355cda58e07f0fff64f899168f2dd3dc456"
        ],
        [
            "rewrite big_all_cond; apply/allP/forallP=> /= allB i; rewrite allB //.",
            "VernacExtend",
            "fe8f197e86415fc7f0a74eda9d312128b9473eda"
        ],
        [
            "exact: mem_index_enum.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FinType.",
            "VernacEndSegment",
            "e105379085ee4a967b3439412ebca59f7a2701a7"
        ],
        [
            "End BigBool.",
            "VernacEndSegment",
            "3237f93cb15a623876e9ecf6af571fcb2813e29e"
        ],
        [
            "Section NatConst.",
            "VernacBeginSection",
            "e5aec699be6f868a8b73ff2dfdaff5b3b9689e9a"
        ],
        [
            "Variables (I : finType) (A : pred I).",
            "VernacAssumption",
            "359046dff91d39b9217dd8e83441aa0d34494248"
        ],
        [
            "Lemma sum_nat_const n : \\sum_(i in A) n = #|A| * n.",
            "VernacStartTheoremProof",
            "d28cac9f8e23bd8ba39625e7e70666d68d9c2ecd"
        ],
        [
            "by rewrite big_const iter_addn_0 mulnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sum1_card : \\sum_(i in A) 1 = #|A|.",
            "VernacStartTheoremProof",
            "455d432dea3ce65b203c45d862919df3dc0111e6"
        ],
        [
            "by rewrite sum_nat_const muln1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sum1_count J (r : seq J) (a : pred J) : \\sum_(j <- r | a j) 1 = count a r.",
            "VernacStartTheoremProof",
            "634847263a7e6e0b2e208745f829cc88391c385a"
        ],
        [
            "by rewrite big_const_seq iter_addn_0 mul1n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sum1_size J (r : seq J) : \\sum_(j <- r) 1 = size r.",
            "VernacStartTheoremProof",
            "f680a522d25fe1590e2b8e58274ed3b424976ba6"
        ],
        [
            "by rewrite sum1_count count_predT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prod_nat_const n : \\prod_(i in A) n = n ^ #|A|.",
            "VernacStartTheoremProof",
            "4afb6f03ea1c0de80ebce779db914b297e70703a"
        ],
        [
            "by rewrite big_const -Monoid.iteropE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sum_nat_const_nat n1 n2 n : \\sum_(n1 <= i < n2) n = (n2 - n1) * n.",
            "VernacStartTheoremProof",
            "ce487b2614e3e88d7cd1daad7bea744c7ebaf988"
        ],
        [
            "by rewrite big_const_nat; elim: (_ - _) => //= ? ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prod_nat_const_nat n1 n2 n : \\prod_(n1 <= i < n2) n = n ^ (n2 - n1).",
            "VernacStartTheoremProof",
            "a70f7388e9a72ffc449dd25159b65068b92460d1"
        ],
        [
            "by rewrite big_const_nat -Monoid.iteropE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End NatConst.",
            "VernacEndSegment",
            "6052bdcb260d420051db8fbb6708de2601fefc4d"
        ],
        [
            "Lemma leqif_sum (I : finType) (P C : pred I) (E1 E2 : I -> nat) : (forall i, P i -> E1 i <= E2 i ?= iff C i) -> \\sum_(i | P i) E1 i <= \\sum_(i | P i) E2 i ?= iff [forall (i | P i), C i].",
            "VernacStartTheoremProof",
            "e633bf238614b738b039ef68f7f50663acefc405"
        ],
        [
            "move=> leE12; rewrite -big_andE.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by elim/big_rec3: _ => // i Ci m1 m2 /leE12; apply: leqif_add.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_sum I r (P : pred I) (E1 E2 : I -> nat) : (forall i, P i -> E1 i <= E2 i) -> \\sum_(i <- r | P i) E1 i <= \\sum_(i <- r | P i) E2 i.",
            "VernacStartTheoremProof",
            "2cedf45de1abf97c93f9c96162e09c26f268a3e4"
        ],
        [
            "by move=> leE12; elim/big_ind2: _ => // m1 m2 n1 n2; apply: leq_add.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sum_nat_eq0 (I : finType) (P : pred I) (E : I -> nat) : (\\sum_(i | P i) E i == 0)%N = [forall (i | P i), E i == 0%N].",
            "VernacStartTheoremProof",
            "6611aa76a68a1ed342ee69065e161bf9708f8c67"
        ],
        [
            "by rewrite eq_sym -(@leqif_sum I P _ (fun _ => 0%N) E) ?big1_eq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prodn_cond_gt0 I r (P : pred I) F : (forall i, P i -> 0 < F i) -> 0 < \\prod_(i <- r | P i) F i.",
            "VernacStartTheoremProof",
            "a479564f2cef33b4f9f34b8b7e8e7c7c19ea472b"
        ],
        [
            "by move=> Fpos; elim/big_ind: _ => // n1 n2; rewrite muln_gt0 => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prodn_gt0 I r (P : pred I) F : (forall i, 0 < F i) -> 0 < \\prod_(i <- r | P i) F i.",
            "VernacStartTheoremProof",
            "b42c3923c069a62877f02cb03f278baec228f779"
        ],
        [
            "by move=> Fpos; apply: prodn_cond_gt0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_bigmax_cond (I : finType) (P : pred I) F i0 : P i0 -> F i0 <= \\max_(i | P i) F i.",
            "VernacStartTheoremProof",
            "5669ad5e3f0d91b309c6824bca47b7c475bf7672"
        ],
        [
            "by move=> Pi0; rewrite (bigD1 i0) ?leq_maxl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments leq_bigmax_cond [I P F].",
            "VernacArguments",
            "632c8b5a5f2d8fc74d020439fd9f5ab320c7fd54"
        ],
        [
            "Lemma leq_bigmax (I : finType) F (i0 : I) : F i0 <= \\max_i F i.",
            "VernacStartTheoremProof",
            "6de72c7f411238f843873f6909847fc53eec813b"
        ],
        [
            "exact: leq_bigmax_cond.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments leq_bigmax [I F].",
            "VernacArguments",
            "a3f1ff3ea99490b4b9d7a580e49be669bb85b01d"
        ],
        [
            "Lemma bigmax_leqP (I : finType) (P : pred I) m F : reflect (forall i, P i -> F i <= m) (\\max_(i | P i) F i <= m).",
            "VernacStartTheoremProof",
            "74ae11e703f3550e646dffe69b80d52e5b2c1f50"
        ],
        [
            "apply: (iffP idP) => leFm => [i Pi|].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by apply: leq_trans leFm; apply: leq_bigmax_cond.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by elim/big_ind: _ => // m1 m2; rewrite geq_max => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bigmax_sup (I : finType) i0 (P : pred I) m F : P i0 -> m <= F i0 -> m <= \\max_(i | P i) F i.",
            "VernacStartTheoremProof",
            "bbbe034c85d71ff9f36d8b503702d5234a90c803"
        ],
        [
            "by move=> Pi0 le_m_Fi0; apply: leq_trans (leq_bigmax_cond i0 Pi0).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments bigmax_sup [I] i0 [P m F].",
            "VernacArguments",
            "0bc6097de1b6dcda8f4f3a81fa08bebc1ef0c918"
        ],
        [
            "Lemma bigmax_eq_arg (I : finType) i0 (P : pred I) F : P i0 -> \\max_(i | P i) F i = F [arg max_(i > i0 | P i) F i].",
            "VernacStartTheoremProof",
            "8b4b63644412b4caea7e202b763278060f95b1bc"
        ],
        [
            "move=> Pi0; case: arg_maxP => //= i Pi maxFi.",
            "VernacExtend",
            "a01b3d93f426ff68d360351709a5fa5af822af32"
        ],
        [
            "by apply/eqP; rewrite eqn_leq leq_bigmax_cond // andbT; apply/bigmax_leqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments bigmax_eq_arg [I] i0 [P F].",
            "VernacArguments",
            "592eac625d4b06eaf95a0c77f6c81e78630755b1"
        ],
        [
            "Lemma eq_bigmax_cond (I : finType) (A : pred I) F : #|A| > 0 -> {i0 | i0 \\in A & \\max_(i in A) F i = F i0}.",
            "VernacStartTheoremProof",
            "6d137813ac084212af3918e3b2f37405d55083f7"
        ],
        [
            "case: (pickP A) => [i0 Ai0 _ | ]; last by move/eq_card0->.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by exists [arg max_(i > i0 in A) F i]; [case: arg_maxP | apply: bigmax_eq_arg].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_bigmax (I : finType) F : #|I| > 0 -> {i0 : I | \\max_i F i = F i0}.",
            "VernacStartTheoremProof",
            "9744cd3a9b7bcee2c4d2c7645f98a902741489f0"
        ],
        [
            "by case/(eq_bigmax_cond F) => x _ ->; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expn_sum m I r (P : pred I) F : (m ^ (\\sum_(i <- r | P i) F i) = \\prod_(i <- r | P i) m ^ F i)%N.",
            "VernacStartTheoremProof",
            "ef9866fbcdb4173f4100449ffcd4798515be7204"
        ],
        [
            "exact: (big_morph _ (expnD m)).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dvdn_biglcmP (I : finType) (P : pred I) F m : reflect (forall i, P i -> F i %| m) (\\big[lcmn/1%N]_(i | P i) F i %| m).",
            "VernacStartTheoremProof",
            "608f02ba32e50ec5b6cc416d3512f57f586bd653"
        ],
        [
            "apply: (iffP idP) => [dvFm i Pi | dvFm].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite (bigD1 i) // dvdn_lcm in dvFm; case/andP: dvFm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by elim/big_ind: _ => // p q p_m; rewrite dvdn_lcm p_m.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma biglcmn_sup (I : finType) i0 (P : pred I) F m : P i0 -> m %| F i0 -> m %| \\big[lcmn/1%N]_(i | P i) F i.",
            "VernacStartTheoremProof",
            "50517236817981f4f92ca69587b8a9c71f246be0"
        ],
        [
            "by move=> Pi0 m_Fi0; rewrite (dvdn_trans m_Fi0) // (bigD1 i0) ?dvdn_lcml.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments biglcmn_sup [I] i0 [P F m].",
            "VernacArguments",
            "ddfa7bae96ac4799929edaa315dc63a5a808f5dd"
        ],
        [
            "Lemma dvdn_biggcdP (I : finType) (P : pred I) F m : reflect (forall i, P i -> m %| F i) (m %| \\big[gcdn/0]_(i | P i) F i).",
            "VernacStartTheoremProof",
            "62221f4b3386dcb984d3bda230f0fa7ea3a0a536"
        ],
        [
            "apply: (iffP idP) => [dvmF i Pi | dvmF].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite (bigD1 i) // dvdn_gcd in dvmF; case/andP: dvmF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by elim/big_ind: _ => // p q m_p; rewrite dvdn_gcd m_p.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma biggcdn_inf (I : finType) i0 (P : pred I) F m : P i0 -> F i0 %| m -> \\big[gcdn/0]_(i | P i) F i %| m.",
            "VernacStartTheoremProof",
            "497f6a3d43b9edbf616229db9aa90061e7f656dd"
        ],
        [
            "by move=> Pi0; apply: dvdn_trans; rewrite (bigD1 i0) ?dvdn_gcdl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments biggcdn_inf [I] i0 [P F m].",
            "VernacArguments",
            "d18617ce7a930c99dfb6f8b426b3a480c315ac95"
        ],
        [
            "Unset Implicit Arguments.",
            "VernacUnsetOption",
            "cacc0f023301fae157e1bbb31e84419045fc8198"
        ]
    ],
    "proofs": [
        {
            "name": "mulC_id",
            "line_nb": 108,
            "steps": [
                {
                    "command": [
                        "by move=> mul1x x; rewrite mulC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulC_zero",
            "line_nb": 111,
            "steps": [
                {
                    "command": [
                        "by move=> mul0x x; rewrite mulC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulC_dist",
            "line_nb": 114,
            "steps": [
                {
                    "command": [
                        "by move=> mul_addl x y z; rewrite !(mulC x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mul1m",
            "line_nb": 123,
            "steps": [
                {
                    "command": [
                        "by case mul.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulm1",
            "line_nb": 126,
            "steps": [
                {
                    "command": [
                        "by case mul.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulmA",
            "line_nb": 129,
            "steps": [
                {
                    "command": [
                        "by case mul.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iteropE",
            "line_nb": 132,
            "steps": [
                {
                    "command": [
                        "by case: n => // n; rewrite iterSr mulm1 iteropS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulmC",
            "line_nb": 138,
            "steps": [
                {
                    "command": [
                        "by case mul.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulmCA",
            "line_nb": 141,
            "steps": [
                {
                    "command": [
                        "by move=> x y z; rewrite !mulmA (mulmC x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulmAC",
            "line_nb": 144,
            "steps": [
                {
                    "command": [
                        "by move=> x y z; rewrite -!mulmA (mulmC y).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulmACA",
            "line_nb": 147,
            "steps": [
                {
                    "command": [
                        "by move=> x y z t; rewrite -!mulmA (mulmCA y).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mul0m",
            "line_nb": 153,
            "steps": [
                {
                    "command": [
                        "by case mul.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulm0",
            "line_nb": 156,
            "steps": [
                {
                    "command": [
                        "by case mul.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addmA",
            "line_nb": 162,
            "steps": [
                {
                    "command": [
                        "exact: mulmA.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addmC",
            "line_nb": 165,
            "steps": [
                {
                    "command": [
                        "exact: mulmC.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addmCA",
            "line_nb": 168,
            "steps": [
                {
                    "command": [
                        "exact: mulmCA.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addmAC",
            "line_nb": 171,
            "steps": [
                {
                    "command": [
                        "exact: mulmAC.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add0m",
            "line_nb": 174,
            "steps": [
                {
                    "command": [
                        "exact: mul1m.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addm0",
            "line_nb": 177,
            "steps": [
                {
                    "command": [
                        "exact: mulm1.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulm_addl",
            "line_nb": 180,
            "steps": [
                {
                    "command": [
                        "by case add.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulm_addr",
            "line_nb": 183,
            "steps": [
                {
                    "command": [
                        "by case add.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bigopE",
            "line_nb": 234,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_index_iota",
            "line_nb": 242,
            "steps": [
                {
                    "command": [
                        "rewrite mem_iota; case le_m_i: (m <= i) => //=.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "by rewrite -leq_subLR subSn // -subn_gt0 -subnDA subnKC // subn_gt0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_index_enum",
            "line_nb": 246,
            "steps": [
                {
                    "command": [
                        "by rewrite -[index_enum T]enumT mem_enum.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "filter_index_enum",
            "line_nb": 250,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_load",
            "line_nb": 305,
            "steps": [
                {
                    "command": [
                        "by case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_rec3",
            "line_nb": 315,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock; elim: r => //= i r; case: ifP => //; apply: K_F.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_ind3",
            "line_nb": 319,
            "steps": [
                {
                    "command": [
                        "by apply: big_rec3 => i x1 x2 x3 /K_F; apply: Kop.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_rec2",
            "line_nb": 330,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock; elim: r => //= i r; case: ifP => //; apply: K_F.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_ind2",
            "line_nb": 334,
            "steps": [
                {
                    "command": [
                        "by apply: big_rec2 => i x1 x2 /K_F; apply: Kop.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_morph",
            "line_nb": 338,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock; elim: r => //= i r <-; rewrite -f_op -fun_if.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_rec",
            "line_nb": 349,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock; elim: r => //= i r; case: ifP => //; apply: Kop.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_ind",
            "line_nb": 353,
            "steps": [
                {
                    "command": [
                        "by apply: big_rec => // i x /K_F /Kop; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_big_op",
            "line_nb": 357,
            "steps": [
                {
                    "command": [
                        "by elim/(big_load K): _; elim/big_rec2: _ => // i _ y Pi [Ky <-]; auto.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_endo",
            "line_nb": 361,
            "steps": [
                {
                    "command": [
                        "exact: big_morph.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_filter",
            "line_nb": 373,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock; elim: r => //= i r <-; case (P i).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_bigl",
            "line_nb": 380,
            "steps": [
                {
                    "command": [
                        "by move=> eqP12; rewrite -!(big_filter r) (eq_filter eqP12).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_andbC",
            "line_nb": 383,
            "steps": [
                {
                    "command": [
                        "by apply: eq_bigl => i; apply: andbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_bigr",
            "line_nb": 386,
            "steps": [
                {
                    "command": [
                        "by move=> eqF12; elim/big_rec2: _ => // i x _ /eqF12-> ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_big",
            "line_nb": 389,
            "steps": [
                {
                    "command": [
                        "by move/eq_bigl <-; move/eq_bigr->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "congr_big",
            "line_nb": 392,
            "steps": [
                {
                    "command": [
                        "by move=> <-{r2}; apply: eq_big.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_nil",
            "line_nb": 395,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_cons",
            "line_nb": 398,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_map",
            "line_nb": 401,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock; elim: r => //= j r ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_nth",
            "line_nb": 404,
            "steps": [
                {
                    "command": [
                        "by rewrite -{1}(mkseq_nth x0 r) big_map /index_iota subn0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_hasC",
            "line_nb": 407,
            "steps": [
                {
                    "command": [
                        "by rewrite -big_filter has_count -size_filter -eqn0Ngt unlock => /nilP->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_pred0_eq",
            "line_nb": 410,
            "steps": [
                {
                    "command": [
                        "by rewrite big_hasC // has_pred0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_pred0",
            "line_nb": 413,
            "steps": [
                {
                    "command": [
                        "by move/eq_bigl->; apply: big_pred0_eq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_cat_nested",
            "line_nb": 416,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock /reducebig foldr_cat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_catl",
            "line_nb": 419,
            "steps": [
                {
                    "command": [
                        "by rewrite big_cat_nested => /big_hasC->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_catr",
            "line_nb": 422,
            "steps": [
                {
                    "command": [
                        "rewrite -big_filter -(big_filter r2) filter_cat.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite has_count -size_filter; case: filter.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_const_seq",
            "line_nb": 426,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock; elim: r => //= i r ->; case: (P i).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_seq_cond",
            "line_nb": 430,
            "steps": [
                {
                    "command": [
                        "by rewrite -!(big_filter r); congr bigop; apply: eq_in_filter => i ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_seq",
            "line_nb": 433,
            "steps": [
                {
                    "command": [
                        "by rewrite big_seq_cond big_andbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_big_seq",
            "line_nb": 436,
            "steps": [
                {
                    "command": [
                        "by move=> eqF; rewrite !big_seq (eq_bigr _ eqF).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_nat_cond",
            "line_nb": 439,
            "steps": [
                {
                    "command": [
                        "by rewrite big_seq_cond; apply: eq_bigl => i; rewrite mem_index_iota.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_nat",
            "line_nb": 442,
            "steps": [
                {
                    "command": [
                        "by rewrite big_nat_cond big_andbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "congr_big_nat",
            "line_nb": 445,
            "steps": [
                {
                    "command": [
                        "move=> <- <- eqP12 eqF12; rewrite big_seq_cond (big_seq_cond _ P2).",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "apply: eq_big => i; rewrite ?inE /= !mem_index_iota.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by apply: andb_id2l; apply: eqP12.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite andbC; apply: eqF12.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_big_nat",
            "line_nb": 451,
            "steps": [
                {
                    "command": [
                        "by move=> eqF; apply: congr_big_nat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_geq",
            "line_nb": 454,
            "steps": [
                {
                    "command": [
                        "by move=> ge_m_n; rewrite /index_iota (eqnP ge_m_n) big_nil.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_ltn_cond",
            "line_nb": 457,
            "steps": [
                {
                    "command": [
                        "by case: n => [//|n] le_m_n; rewrite /index_iota subSn // big_cons.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_ltn",
            "line_nb": 460,
            "steps": [
                {
                    "command": [
                        "by move=> lt_mn; apply: big_ltn_cond.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_addn",
            "line_nb": 463,
            "steps": [
                {
                    "command": [
                        "rewrite /index_iota -subnDA addnC iota_addl big_map.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_big => ? *; rewrite addnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_add1",
            "line_nb": 467,
            "steps": [
                {
                    "command": [
                        "by rewrite -addn1 big_addn subn1; apply: eq_big => ? *; rewrite addn1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_nat_recl",
            "line_nb": 470,
            "steps": [
                {
                    "command": [
                        "by move=> lemn; rewrite big_ltn // big_add1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_mkord",
            "line_nb": 473,
            "steps": [
                {
                    "command": [
                        "rewrite /index_iota subn0 -(big_map (@nat_of_ord n)).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by congr bigop; rewrite /index_enum unlock val_ord_enum.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_nat_widen",
            "line_nb": 477,
            "steps": [
                {
                    "command": [
                        "move=> len12; symmetry; rewrite -big_filter filter_predI big_filter.",
                        "VernacExtend",
                        "7d7dbc461628e3c5ab8fc0bd4c5735707abb3cca"
                    ]
                },
                {
                    "command": [
                        "have [ltn_trans eq_by_mem] := (ltn_trans, eq_sorted_irr ltn_trans ltnn).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "congr bigop; apply: eq_by_mem; rewrite ?sorted_filter ?iota_ltn_sorted // => i.",
                        "VernacExtend",
                        "56bc78d8bb1a71d15be349821aa36e25641f1ff9"
                    ]
                },
                {
                    "command": [
                        "rewrite mem_filter !mem_index_iota andbCA andbA andb_idr => // /andP[_].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by move/leq_trans->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_ord_widen_cond",
            "line_nb": 484,
            "steps": [
                {
                    "command": [
                        "by move/big_nat_widen=> len12; rewrite -big_mkord len12 big_mkord.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_ord_widen",
            "line_nb": 487,
            "steps": [
                {
                    "command": [
                        "by move=> le_n12; apply: (big_ord_widen_cond (predT)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_ord_widen_leq",
            "line_nb": 490,
            "steps": [
                {
                    "command": [
                        "move=> len12; pose g G i := G (inord i : 'I_(n1.+1)).",
                        "VernacExtend",
                        "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
                    ]
                },
                {
                    "command": [
                        "rewrite -(big_ord_widen_cond (g _ P) (g _ F) len12) {}/g.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_big => i *; rewrite inord_val.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_ord0",
            "line_nb": 495,
            "steps": [
                {
                    "command": [
                        "by rewrite big_pred0 => [|[]].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_tnth",
            "line_nb": 498,
            "steps": [
                {
                    "command": [
                        "case: r => /= [|x0 r]; first by rewrite big_nil big_ord0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite (big_nth x0) big_mkord; apply: eq_big => i; rewrite (tnth_nth x0).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_index_uniq",
            "line_nb": 502,
            "steps": [
                {
                    "command": [
                        "move=> Ur; apply/esym; rewrite big_tnth; apply: eq_bigr => i _.",
                        "VernacExtend",
                        "42e188f64c1b305ed274c1704aedbf73891c3017"
                    ]
                },
                {
                    "command": [
                        "by rewrite index_uniq // valK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_tuple",
            "line_nb": 506,
            "steps": [
                {
                    "command": [
                        "by rewrite big_tnth tvalK; case: _ / (esym _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_ord_narrow_cond",
            "line_nb": 509,
            "steps": [
                {
                    "command": [
                        "case: n1 => [|n1] /= in le_n12 *.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite big_ord0 big_pred0 // => i; rewrite andbF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite (big_ord_widen_leq _ _ le_n12); apply: eq_big => i.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by apply: andb_id2r => le_i_n1; congr P; apply: val_inj; rewrite /= inordK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by case/andP=> _ le_i_n1; congr F; apply: val_inj; rewrite /= inordK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_ord_narrow_cond_leq",
            "line_nb": 516,
            "steps": [
                {
                    "command": [
                        "exact: (@big_ord_narrow_cond n1.+1 n2.+1).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_ord_narrow",
            "line_nb": 519,
            "steps": [
                {
                    "command": [
                        "exact: (big_ord_narrow_cond (predT)).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_ord_narrow_leq",
            "line_nb": 522,
            "steps": [
                {
                    "command": [
                        "exact: (big_ord_narrow_cond_leq (predT)).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_const",
            "line_nb": 531,
            "steps": [
                {
                    "command": [
                        "by rewrite big_const_seq -size_filter cardE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_const_nat",
            "line_nb": 534,
            "steps": [
                {
                    "command": [
                        "by rewrite big_const_seq count_predT size_iota.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_const_ord",
            "line_nb": 537,
            "steps": [
                {
                    "command": [
                        "by rewrite big_const card_ord.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_nseq_cond",
            "line_nb": 540,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock; elim: n => /= [|n ->]; case: (P a).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_nseq",
            "line_nb": 543,
            "steps": [
                {
                    "command": [
                        "exact: big_nseq_cond.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_big_idx_seq",
            "line_nb": 556,
            "steps": [
                {
                    "command": [
                        "move=> op_idx'; rewrite -!(big_filter _ _ r) has_count -size_filter.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "case/lastP: (filter P r) => {r}// r i _.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite -cats1 !(big_cat_nested, big_cons, big_nil) op_idx' mulm1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_big_idx",
            "line_nb": 561,
            "steps": [
                {
                    "command": [
                        "by move=> Pi0 op_idx'; apply: eq_big_idx_seq => //; apply/hasP; exists i0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big1_eq",
            "line_nb": 564,
            "steps": [
                {
                    "command": [
                        "by rewrite big_const_seq; elim: (count _ _) => //= n ->; apply: mul1m.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big1",
            "line_nb": 567,
            "steps": [
                {
                    "command": [
                        "by move/(eq_bigr _)->; apply: big1_eq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big1_seq",
            "line_nb": 570,
            "steps": [
                {
                    "command": [
                        "by move=> eqF1; rewrite big_seq_cond big_andbC big1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_seq1",
            "line_nb": 573,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock /= mulm1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_mkcond",
            "line_nb": 576,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock; elim: r => //= i r ->; case P; rewrite ?mul1m.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_mkcondr",
            "line_nb": 579,
            "steps": [
                {
                    "command": [
                        "by rewrite -big_filter_cond big_mkcond big_filter.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_mkcondl",
            "line_nb": 582,
            "steps": [
                {
                    "command": [
                        "by rewrite big_andbC big_mkcondr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_cat",
            "line_nb": 585,
            "steps": [
                {
                    "command": [
                        "rewrite !(big_mkcond _ P) unlock.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by elim: r1 => /= [|i r1 ->]; rewrite (mul1m, mulmA).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_allpairs",
            "line_nb": 589,
            "steps": [
                {
                    "command": [
                        "elim: r1 => [|i1 r1 IHr1]; first by rewrite !big_nil.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite big_cat IHr1 big_cons big_map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_pred1_eq",
            "line_nb": 593,
            "steps": [
                {
                    "command": [
                        "by rewrite -big_filter filter_index_enum enum1 big_seq1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_pred1",
            "line_nb": 596,
            "steps": [
                {
                    "command": [
                        "by move/(eq_bigl _ _)->; apply: big_pred1_eq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_cat_nat",
            "line_nb": 599,
            "steps": [
                {
                    "command": [
                        "move=> le_mn le_np; rewrite -big_cat -{2}(subnKC le_mn) -iota_add subnDA.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite subnKC // leq_sub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_nat1",
            "line_nb": 603,
            "steps": [
                {
                    "command": [
                        "by rewrite big_ltn // big_geq // mulm1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_nat_recr",
            "line_nb": 606,
            "steps": [
                {
                    "command": [
                        "by move=> lemn; rewrite (@big_cat_nat n) ?leqnSn // big_nat1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_sumType",
            "line_nb": 616,
            "steps": [
                {
                    "command": [
                        "by rewrite /index_enum {1}[@Finite.enum]unlock /= big_cat !big_map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_flatten",
            "line_nb": 626,
            "steps": [
                {
                    "command": [
                        "by elim: rr => [|r rr IHrr]; rewrite ?big_nil //= big_cat big_cons -IHrr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_big_perm",
            "line_nb": 634,
            "steps": [
                {
                    "command": [
                        "move/perm_eqP; rewrite !(big_mkcond _ _ P).",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "elim: r1 r2 => [|i r1 IHr1] r2 eq_r12.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by case: r2 eq_r12 => // i r2; move/(_ (pred1 i)); rewrite /= eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have r2i: i \\in r2 by rewrite -has_pred1 has_count -eq_r12 /= eqxx.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "case/splitPr: r2 / r2i => [r3 r4] in eq_r12 *; rewrite big_cat /= !big_cons.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "rewrite mulmCA; congr (_ * _); rewrite -big_cat; apply: IHr1 => a.",
                        "VernacExtend",
                        "cf70e9f85fa92317530c4d200680b1504297e61b"
                    ]
                },
                {
                    "command": [
                        "by move/(_ a): eq_r12; rewrite !count_cat /= addnCA; apply: addnI.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_rem",
            "line_nb": 647,
            "steps": [
                {
                    "command": [
                        "by move/perm_to_rem/(eq_big_perm _)->; rewrite !(big_mkcond _ _ P) big_cons.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_undup",
            "line_nb": 650,
            "steps": [
                {
                    "command": [
                        "move=> idM; rewrite -!(big_filter _ _ _ P) filter_undup.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "elim: {P r}(filter P r) => //= i r IHr.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "case: ifP => [r_i | _]; rewrite !big_cons {}IHr //.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "by rewrite (big_rem _ _ r_i) mulmA idM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_undup_iterop_count",
            "line_nb": 660,
            "steps": [
                {
                    "command": [
                        "rewrite -[RHS](eq_big_perm _ F (perm_undup_count _)) big_flatten big_map.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite big_mkcond; apply: eq_bigr => i _; rewrite big_nseq_cond iteropE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_split",
            "line_nb": 664,
            "steps": [
                {
                    "command": [
                        "by elim/big_rec3: _ => [|i x y _ _ ->]; rewrite ?mulm1 // mulmCA -!mulmA mulmCA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bigID",
            "line_nb": 667,
            "steps": [
                {
                    "command": [
                        "rewrite !(big_mkcond _ _ _ F) -big_split.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_bigr => i; case: (a i); rewrite !simpm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bigU",
            "line_nb": 672,
            "steps": [
                {
                    "command": [
                        "move=> dAB; rewrite (bigID (mem A)).",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "congr (_ * _); apply: eq_bigl => i; first by rewrite orbK.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by have:= pred0P dAB i; rewrite andbC /= !inE; case: (i \\in A).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bigD1_seq",
            "line_nb": 682,
            "steps": [
                {
                    "command": [
                        "by move=> /big_rem-> /rem_filter->; rewrite big_filter.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "partition_big",
            "line_nb": 690,
            "steps": [
                {
                    "command": [
                        "move=> Qp; transitivity (\\big[*%M/1]_(i | P i && Q (p i)) F i).",
                        "VernacExtend",
                        "d8d8948c25a59a9b77653718466ec6cb07303ee8"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_bigl => i; case Pi: (P i); rewrite // Qp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: {Q Qp}_.+1 {-2}Q (ltnSn #|Q|) => // n IHn Q.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "case: (pickP Q) => [j Qj | Q0 _]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !big_pred0 // => i; rewrite Q0 andbF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite ltnS (cardD1x j Qj) (bigD1 j) //; move/IHn=> {n IHn} <-.",
                        "VernacExtend",
                        "7e529e80bb2879787ee6d9466056f19f0215c721"
                    ]
                },
                {
                    "command": [
                        "rewrite (bigID (fun i => p i == j)); congr (_ * _); apply: eq_bigl => i.",
                        "VernacExtend",
                        "75f5ff0fb7cf09d432c728351fd923a93d5d7135"
                    ]
                },
                {
                    "command": [
                        "by case: eqP => [-> | _]; rewrite !(Qj, simpm).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite andbA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "reindex",
            "line_nb": 713,
            "steps": [
                {
                    "command": [
                        "case=> h' hK h'K; rewrite (reindex_onto h h' h'K).",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_bigl => j; rewrite !inE; case Pi: (P _); rewrite //= hK ?eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "reindex_inj",
            "line_nb": 718,
            "steps": [
                {
                    "command": [
                        "by move=> injh; apply: reindex (onW_bij _ (injF_bij injh)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_nat_rev",
            "line_nb": 722,
            "steps": [
                {
                    "command": [
                        "case: (ltnP m n) => ltmn; last by rewrite !big_geq.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite -{3 4}(subnK (ltnW ltmn)) addnA.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "do 2!rewrite (big_addn _ _ 0) big_mkord; rewrite (reindex_inj rev_ord_inj) /=.",
                        "VernacExtend",
                        "f8a765f8b8158bfb954eb4eeb20c0cb6489ecdb4"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_big => [i | i _]; rewrite /= -addSn subnDr addnC addnBA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_big_dep",
            "line_nb": 728,
            "steps": [
                {
                    "command": [
                        "rewrite (partition_big (fun p => p.1) P) => [|j]; last by case/andP.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply: eq_bigr => i /= Pi; rewrite (reindex_onto (pair i) (fun p => p.2)).",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_bigl => j; rewrite !eqxx [P i]Pi !andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by case=> i' j /=; case/andP=> _ /=; move/eqP->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_big",
            "line_nb": 734,
            "steps": [
                {
                    "command": [
                        "exact: pair_big_dep.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_bigA",
            "line_nb": 737,
            "steps": [
                {
                    "command": [
                        "exact: pair_big_dep.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exchange_big_dep",
            "line_nb": 740,
            "steps": [
                {
                    "command": [
                        "move=> PQxQ; pose p u := (u.2, u.1).",
                        "VernacExtend",
                        "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
                    ]
                },
                {
                    "command": [
                        "rewrite (eq_bigr _ _ _ (fun _ _ => big_tnth _ _ rI _ _)) (big_tnth _ _ rJ).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite (eq_bigr _ _ _ (fun _ _ => (big_tnth _ _ rJ _ _))) big_tnth.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite !pair_big_dep (reindex_onto (p _ _) (p _ _)) => [|[]] //=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply: eq_big => [] [j i] //=; symmetry; rewrite eqxx andbT andb_idl //.",
                        "VernacExtend",
                        "752925a62852bcfb152847f137ed8a2eb5456da4"
                    ]
                },
                {
                    "command": [
                        "by case/andP; apply: PQxQ.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exchange_big",
            "line_nb": 749,
            "steps": [
                {
                    "command": [
                        "rewrite (exchange_big_dep Q) //; apply: eq_bigr => i /= Qi.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_bigl => j; rewrite Qi andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exchange_big_dep_nat",
            "line_nb": 753,
            "steps": [
                {
                    "command": [
                        "move=> PQxQ; rewrite (eq_bigr _ _ _ (fun _ _ => big_seq_cond _ _ _ _ _)).",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "rewrite big_seq_cond /= (exchange_big_dep xQ) => [|i j]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !mem_index_iota => /andP[mn_i Pi] /andP[mn_j /PQxQ->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite 2!(big_seq_cond _ _ _ xQ); apply: eq_bigr => j /andP[-> _] /=.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite [rhs in _ = rhs]big_seq_cond; apply: eq_bigl => i; rewrite -andbA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exchange_big_nat",
            "line_nb": 761,
            "steps": [
                {
                    "command": [
                        "rewrite (exchange_big_dep_nat Q) //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_bigr => i /= Qi; apply: eq_bigl => j; rewrite Qi andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_distrl",
            "line_nb": 831,
            "steps": [
                {
                    "command": [
                        "by rewrite (big_endo ( *%M^~ a)) ?mul0m // => x y; apply: mulm_addl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_distrr",
            "line_nb": 834,
            "steps": [
                {
                    "command": [
                        "by rewrite big_endo ?mulm0 // => x y; apply: mulm_addr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_distrlr",
            "line_nb": 837,
            "steps": [
                {
                    "command": [
                        "by rewrite big_distrl; apply: eq_bigr => i _; rewrite big_distrr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_distr_big",
            "line_nb": 868,
            "steps": [
                {
                    "command": [
                        "rewrite (big_distr_big_dep j0); apply: eq_bigl => f.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by apply/familyP/familyP=> Pf i; case: ifP (Pf i).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bigA_distr_big_dep",
            "line_nb": 872,
            "steps": [
                {
                    "command": [
                        "case: (pickP J) => [j0 _ | J0]; first exact: (big_distr_big_dep j0).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite {1 4}/index_enum -enumT; case: (enum I) (mem_enum I) => [I0 | i r _].",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "have f0: I -> J by move=> i; have:= I0 i.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite (big_pred1 (finfun f0)) ?big_nil // => g.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by apply/familyP/eqP=> _; first apply/ffunP; move => i; have:= I0 i.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have Q0 i': Q i' =1 pred0 by move=> j; have:= J0 j.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite big_cons /= big_pred0 // mul0m big_pred0 // => f.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by apply/familyP=> /(_ i); rewrite [_ \\in _]Q0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bigA_distr_big",
            "line_nb": 882,
            "steps": [
                {
                    "command": [
                        "exact: bigA_distr_big_dep.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bigA_distr_bigA",
            "line_nb": 885,
            "steps": [
                {
                    "command": [
                        "by rewrite bigA_distr_big; apply: eq_bigl => ?; apply/familyP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_has",
            "line_nb": 899,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_all",
            "line_nb": 902,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_has_cond",
            "line_nb": 905,
            "steps": [
                {
                    "command": [
                        "by rewrite big_mkcond unlock.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_all_cond",
            "line_nb": 908,
            "steps": [
                {
                    "command": [
                        "by rewrite big_mkcond unlock.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_orE",
            "line_nb": 914,
            "steps": [
                {
                    "command": [
                        "by rewrite big_has_cond; apply/hasP/existsP=> [] [i]; exists i.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_andE",
            "line_nb": 917,
            "steps": [
                {
                    "command": [
                        "rewrite big_all_cond; apply/allP/forallP=> /= allB i; rewrite allB //.",
                        "VernacExtend",
                        "fe8f197e86415fc7f0a74eda9d312128b9473eda"
                    ]
                },
                {
                    "command": [
                        "exact: mem_index_enum.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sum_nat_const",
            "line_nb": 925,
            "steps": [
                {
                    "command": [
                        "by rewrite big_const iter_addn_0 mulnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sum1_card",
            "line_nb": 928,
            "steps": [
                {
                    "command": [
                        "by rewrite sum_nat_const muln1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sum1_count",
            "line_nb": 931,
            "steps": [
                {
                    "command": [
                        "by rewrite big_const_seq iter_addn_0 mul1n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sum1_size",
            "line_nb": 934,
            "steps": [
                {
                    "command": [
                        "by rewrite sum1_count count_predT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prod_nat_const",
            "line_nb": 937,
            "steps": [
                {
                    "command": [
                        "by rewrite big_const -Monoid.iteropE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sum_nat_const_nat",
            "line_nb": 940,
            "steps": [
                {
                    "command": [
                        "by rewrite big_const_nat; elim: (_ - _) => //= ? ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prod_nat_const_nat",
            "line_nb": 943,
            "steps": [
                {
                    "command": [
                        "by rewrite big_const_nat -Monoid.iteropE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leqif_sum",
            "line_nb": 947,
            "steps": [
                {
                    "command": [
                        "move=> leE12; rewrite -big_andE.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by elim/big_rec3: _ => // i Ci m1 m2 /leE12; apply: leqif_add.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_sum",
            "line_nb": 951,
            "steps": [
                {
                    "command": [
                        "by move=> leE12; elim/big_ind2: _ => // m1 m2 n1 n2; apply: leq_add.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sum_nat_eq0",
            "line_nb": 954,
            "steps": [
                {
                    "command": [
                        "by rewrite eq_sym -(@leqif_sum I P _ (fun _ => 0%N) E) ?big1_eq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prodn_cond_gt0",
            "line_nb": 957,
            "steps": [
                {
                    "command": [
                        "by move=> Fpos; elim/big_ind: _ => // n1 n2; rewrite muln_gt0 => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prodn_gt0",
            "line_nb": 960,
            "steps": [
                {
                    "command": [
                        "by move=> Fpos; apply: prodn_cond_gt0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_bigmax_cond",
            "line_nb": 963,
            "steps": [
                {
                    "command": [
                        "by move=> Pi0; rewrite (bigD1 i0) ?leq_maxl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_bigmax",
            "line_nb": 967,
            "steps": [
                {
                    "command": [
                        "exact: leq_bigmax_cond.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bigmax_leqP",
            "line_nb": 971,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => leFm => [i Pi|].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by apply: leq_trans leFm; apply: leq_bigmax_cond.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by elim/big_ind: _ => // m1 m2; rewrite geq_max => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bigmax_sup",
            "line_nb": 976,
            "steps": [
                {
                    "command": [
                        "by move=> Pi0 le_m_Fi0; apply: leq_trans (leq_bigmax_cond i0 Pi0).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bigmax_eq_arg",
            "line_nb": 980,
            "steps": [
                {
                    "command": [
                        "move=> Pi0; case: arg_maxP => //= i Pi maxFi.",
                        "VernacExtend",
                        "a01b3d93f426ff68d360351709a5fa5af822af32"
                    ]
                },
                {
                    "command": [
                        "by apply/eqP; rewrite eqn_leq leq_bigmax_cond // andbT; apply/bigmax_leqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_bigmax_cond",
            "line_nb": 985,
            "steps": [
                {
                    "command": [
                        "case: (pickP A) => [i0 Ai0 _ | ]; last by move/eq_card0->.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by exists [arg max_(i > i0 in A) F i]; [case: arg_maxP | apply: bigmax_eq_arg].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_bigmax",
            "line_nb": 989,
            "steps": [
                {
                    "command": [
                        "by case/(eq_bigmax_cond F) => x _ ->; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expn_sum",
            "line_nb": 992,
            "steps": [
                {
                    "command": [
                        "exact: (big_morph _ (expnD m)).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dvdn_biglcmP",
            "line_nb": 995,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [dvFm i Pi | dvFm].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite (bigD1 i) // dvdn_lcm in dvFm; case/andP: dvFm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by elim/big_ind: _ => // p q p_m; rewrite dvdn_lcm p_m.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "biglcmn_sup",
            "line_nb": 1000,
            "steps": [
                {
                    "command": [
                        "by move=> Pi0 m_Fi0; rewrite (dvdn_trans m_Fi0) // (bigD1 i0) ?dvdn_lcml.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dvdn_biggcdP",
            "line_nb": 1004,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [dvmF i Pi | dvmF].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite (bigD1 i) // dvdn_gcd in dvmF; case/andP: dvmF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by elim/big_ind: _ => // p q m_p; rewrite dvdn_gcd m_p.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "biggcdn_inf",
            "line_nb": 1009,
            "steps": [
                {
                    "command": [
                        "by move=> Pi0; apply: dvdn_trans; rewrite (bigD1 i0) ?dvdn_gcdl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}