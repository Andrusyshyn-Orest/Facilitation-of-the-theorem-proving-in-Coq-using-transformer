{
    "filename": "mathcomp/ssreflect/finset.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrbool ssrfun eqtype ssrnat div seq choice fintype.",
            "VernacRequire",
            "9b58d7aedd3ea398d2c4bb4be4498ec9ba85f09e"
        ],
        [
            "From mathcomp Require Import finfun bigop.",
            "VernacRequire",
            "9980de4f52e0fbbf9ab4041d59835e0fd54d364b"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Section SetType.",
            "VernacBeginSection",
            "61653da4b66b315b2daafb4b9ebe5759709811f8"
        ],
        [
            "Variable T : finType.",
            "VernacAssumption",
            "6349381da4d33cbc2eeaf1bade38718e15f7a2c9"
        ],
        [
            "Inductive set_type : predArgType := FinSet of {ffun pred T}.",
            "VernacInductive",
            "af8b07a556e6227b2e90d420ad054a1ca333d6d2"
        ],
        [
            "Definition finfun_of_set A := let: FinSet f := A in f.",
            "VernacDefinition",
            "d2dc68bf00bb4300c5b046edfaefd5e387cebcf1"
        ],
        [
            "Definition set_of of phant T := set_type.",
            "VernacDefinition",
            "e384a3e6e8ca2f1012fa2222c7f118f9f760802e"
        ],
        [
            "Identity Coercion type_of_set_of : set_of >-> set_type.",
            "VernacIdentityCoercion",
            "05ee58768257e9b692a534aa560a17e2c0018ac6"
        ],
        [
            "Canonical set_subType := Eval hnf in [newType for finfun_of_set].",
            "VernacDefinition",
            "9fca21aa18b1fb5d28c0b84d4fe9fa226738c7bb"
        ],
        [
            "Definition set_eqMixin := Eval hnf in [eqMixin of set_type by <:].",
            "VernacDefinition",
            "e61ad12ab914087ccc94c7dece2589e1bafee51a"
        ],
        [
            "Canonical set_eqType := Eval hnf in EqType set_type set_eqMixin.",
            "VernacDefinition",
            "dc1ebaadb9d236d5016d24ff2aa328afdd2fcdff"
        ],
        [
            "Definition set_choiceMixin := [choiceMixin of set_type by <:].",
            "VernacDefinition",
            "eb77d8e44eb3c9aaa89786c25b34bd80c57e51f1"
        ],
        [
            "Canonical set_choiceType := Eval hnf in ChoiceType set_type set_choiceMixin.",
            "VernacDefinition",
            "862b5c37b4c658742bc2770669453803aa17309c"
        ],
        [
            "Definition set_countMixin := [countMixin of set_type by <:].",
            "VernacDefinition",
            "de3993af7ca8fb76cc71c7ef7026a9e32dff36ec"
        ],
        [
            "Canonical set_countType := Eval hnf in CountType set_type set_countMixin.",
            "VernacDefinition",
            "c4b22972ed4c9b1540b8caaac9718d8b7965da02"
        ],
        [
            "Canonical set_subCountType := Eval hnf in [subCountType of set_type].",
            "VernacDefinition",
            "61f89bf0d28cab19a8225a9ee56f1627b7f60187"
        ],
        [
            "Definition set_finMixin := [finMixin of set_type by <:].",
            "VernacDefinition",
            "8e8267f5f093a3f3f1a5e6e2f92bf59f90ed4b56"
        ],
        [
            "Canonical set_finType := Eval hnf in FinType set_type set_finMixin.",
            "VernacDefinition",
            "dc9e0d5a04e5ea4527db729ccb63d91f3bc5d80f"
        ],
        [
            "Canonical set_subFinType := Eval hnf in [subFinType of set_type].",
            "VernacDefinition",
            "fa067b4ef0d0e7bc90376ee60dbe95e862053914"
        ],
        [
            "End SetType.",
            "VernacEndSegment",
            "02ec6e0130c2314d89526825ec5a0952a49a0df2"
        ],
        [
            "Delimit Scope set_scope with SET.",
            "VernacDelimiters",
            "f16010291dc2e850d8c63c341add17e575e918bd"
        ],
        [
            "Bind Scope set_scope with set_type.",
            "VernacBindScope",
            "fdf612d735c066a7e7893467400bb0fd23580d87"
        ],
        [
            "Bind Scope set_scope with set_of.",
            "VernacBindScope",
            "93dd34f122aaf40c03ca2fa0304a29e8fa009b1f"
        ],
        [
            "Open Scope set_scope.",
            "VernacOpenCloseScope",
            "417be06cab40feb6c94f908d49fb1ba5a4a04ab7"
        ],
        [
            "Arguments finfun_of_set {T} A%SET.",
            "VernacArguments",
            "d37d3f1294fb56309337ef1e86e82932c598ccd2"
        ],
        [
            "Notation \"{ 'set' T }\" := (set_of (Phant T)) (at level 0, format \"{ 'set' T }\") : type_scope.",
            "VernacNotation",
            "cd72bbc3cbdf86ecb7593129c0d6fd6e2756650c"
        ],
        [
            "Notation \"A :=: B\" := (A = B :> {set _}) (at level 70, no associativity, only parsing) : set_scope.",
            "VernacNotation",
            "c6ffbc9c38f9284297992dd177661d5a6ddf556f"
        ],
        [
            "Notation \"A :<>: B\" := (A <> B :> {set _}) (at level 70, no associativity, only parsing) : set_scope.",
            "VernacNotation",
            "1be56a56a14d7b189290a502708fb87298766daa"
        ],
        [
            "Notation \"A :==: B\" := (A == B :> {set _}) (at level 70, no associativity, only parsing) : set_scope.",
            "VernacNotation",
            "c585fd90016344be470a5d55a5d970c8d1c1bba4"
        ],
        [
            "Notation \"A :!=: B\" := (A != B :> {set _}) (at level 70, no associativity, only parsing) : set_scope.",
            "VernacNotation",
            "cba1f2202556a8ce0ab989d25079855272d9bad6"
        ],
        [
            "Notation \"A :=P: B\" := (A =P B :> {set _}) (at level 70, no associativity, only parsing) : set_scope.",
            "VernacNotation",
            "e93c1ebab3ee0329cd84f749e8dad1efc127d94d"
        ],
        [
            "Local Notation finset_def := (fun T P => @FinSet T (finfun P)).",
            "VernacSyntacticDefinition",
            "140a13d4fa18d8a53b60927b445359313e49f8ad"
        ],
        [
            "Local Notation pred_of_set_def := (fun T (A : set_type T) => val A : _ -> _).",
            "VernacSyntacticDefinition",
            "29ad7d8a2b77f540a3b653ea92f367b106af0b67"
        ],
        [
            "Module Type SetDefSig.",
            "VernacDeclareModuleType",
            "bc93bbdd8862ac42f1940c6bb89ed66a34cabaf3"
        ],
        [
            "Parameter finset : forall T : finType, pred T -> {set T}.",
            "VernacAssumption",
            "2360c009226972a3e4b4938c3a8df9f9cf688725"
        ],
        [
            "Parameter pred_of_set : forall T, set_type T -> fin_pred_sort (predPredType T).",
            "VernacAssumption",
            "e417d5bb782263f6acfa914c319e7258410d7202"
        ],
        [
            "Axiom finsetE : finset = finset_def.",
            "VernacAssumption",
            "201459e384933f47c55525e19926c5d03c0b7ce8"
        ],
        [
            "Axiom pred_of_setE : pred_of_set = pred_of_set_def.",
            "VernacAssumption",
            "aef9c87cc51d634569af026ffa92dd904a406677"
        ],
        [
            "End SetDefSig.",
            "VernacEndSegment",
            "3e2ec21e84fc51bdf4ebd60406a33ba5d41e7e51"
        ],
        [
            "Module SetDef : SetDefSig.",
            "VernacDefineModule",
            "e7fe87e4b6a71d311d3a0b3cf5bc6768d80c5632"
        ],
        [
            "Definition finset := finset_def.",
            "VernacDefinition",
            "b6115eb87afa44454f93aad5705d802f9af51cb0"
        ],
        [
            "Definition pred_of_set := pred_of_set_def.",
            "VernacDefinition",
            "e365ff0b3c68b776b5dd254d171c6c06d184f00f"
        ],
        [
            "Lemma finsetE : finset = finset_def.",
            "VernacStartTheoremProof",
            "349afe92edd80a4cf2957004cc4baf53a0b636cb"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pred_of_setE : pred_of_set = pred_of_set_def.",
            "VernacStartTheoremProof",
            "ae1cfd72002942568bdec4052dd76ec2deeafe62"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SetDef.",
            "VernacEndSegment",
            "1612c07da35ee8180528d8d2f4408124760c2695"
        ],
        [
            "Notation finset := SetDef.finset.",
            "VernacSyntacticDefinition",
            "9ce8d6ab03edd72b42c59625b81d18af1c0ad750"
        ],
        [
            "Notation pred_of_set := SetDef.pred_of_set.",
            "VernacSyntacticDefinition",
            "0839091cff78a2054a3c68cb61d7bd485d3e6fe6"
        ],
        [
            "Canonical finset_unlock := Unlockable SetDef.finsetE.",
            "VernacDefinition",
            "6af6abfc2715c6866a8be97f3a10f52e9b250b3f"
        ],
        [
            "Canonical pred_of_set_unlock := Unlockable SetDef.pred_of_setE.",
            "VernacDefinition",
            "987fab2056eeb0efacf21e15c540efa0e915249c"
        ],
        [
            "Notation \"[ 'set' x : T | P ]\" := (finset (fun x : T => P%B)) (at level 0, x at level 99, only parsing) : set_scope.",
            "VernacNotation",
            "4aaf71db024d3ab153e72e2e61dde36392b96a99"
        ],
        [
            "Notation \"[ 'set' x | P ]\" := [set x : _ | P] (at level 0, x, P at level 99, format \"[ 'set' x | P ]\") : set_scope.",
            "VernacNotation",
            "95523ead8eaf6121c11647e6a9f4642569142dff"
        ],
        [
            "Notation \"[ 'set' x 'in' A ]\" := [set x | x \\in A] (at level 0, x at level 99, format \"[ 'set' x 'in' A ]\") : set_scope.",
            "VernacNotation",
            "2f4de3a6aaf959499bb436e58fe5a165e65074c9"
        ],
        [
            "Notation \"[ 'set' x : T 'in' A ]\" := [set x : T | x \\in A] (at level 0, x at level 99, only parsing) : set_scope.",
            "VernacNotation",
            "871ac35e123595cd7c6f7c9ef997426f31068543"
        ],
        [
            "Notation \"[ 'set' x : T | P & Q ]\" := [set x : T | P && Q] (at level 0, x at level 99, only parsing) : set_scope.",
            "VernacNotation",
            "8bf870c83dd6f32b38859a76336cb77036507e2e"
        ],
        [
            "Notation \"[ 'set' x | P & Q ]\" := [set x | P && Q ] (at level 0, x, P at level 99, format \"[ 'set' x | P & Q ]\") : set_scope.",
            "VernacNotation",
            "7d847a115697660dc82c25fd9bd3c12dc223445e"
        ],
        [
            "Notation \"[ 'set' x : T 'in' A | P ]\" := [set x : T | x \\in A & P] (at level 0, x at level 99, only parsing) : set_scope.",
            "VernacNotation",
            "79d5ce297f1ca22d4f60b7dc06d6f70be4fe1a8c"
        ],
        [
            "Notation \"[ 'set' x 'in' A | P ]\" := [set x | x \\in A & P] (at level 0, x at level 99, format \"[ 'set' x 'in' A | P ]\") : set_scope.",
            "VernacNotation",
            "a60895a4df4be4982335c6547b2e7e643dcd60fa"
        ],
        [
            "Notation \"[ 'set' x 'in' A | P & Q ]\" := [set x in A | P && Q] (at level 0, x at level 99, format \"[ 'set' x 'in' A | P & Q ]\") : set_scope.",
            "VernacNotation",
            "870b946419eee9178a6fe89a2722eabdeaa11410"
        ],
        [
            "Notation \"[ 'set' x : T 'in' A | P & Q ]\" := [set x : T in A | P && Q] (at level 0, x at level 99, only parsing) : set_scope.",
            "VernacNotation",
            "c367f87d052ec30058e445633fc6a62ea692c9c2"
        ],
        [
            "Coercion pred_of_set: set_type >-> fin_pred_sort.",
            "VernacCoercion",
            "faf31e034e02133e1fbc8d791248d09f00e0f254"
        ],
        [
            "Canonical set_predType T := Eval hnf in @mkPredType _ (unkeyed (set_type T)) (@pred_of_set T).",
            "VernacDefinition",
            "61472423db0d57ad0f778d319d09bbca278f8ac4"
        ],
        [
            "Section BasicSetTheory.",
            "VernacBeginSection",
            "f24f9fd080e4983791e678647e72578ea8075130"
        ],
        [
            "Variable T : finType.",
            "VernacAssumption",
            "6349381da4d33cbc2eeaf1bade38718e15f7a2c9"
        ],
        [
            "Implicit Types (x : T) (A B : {set T}) (pA : pred T).",
            "VernacReserve",
            "28df067eba885546a0bdec95ce8db5d6bcecaba1"
        ],
        [
            "Canonical set_of_subType := Eval hnf in [subType of {set T}].",
            "VernacDefinition",
            "db421fdfd577277738c26b25e15b6cc17b8f0ac1"
        ],
        [
            "Canonical set_of_eqType := Eval hnf in [eqType of {set T}].",
            "VernacDefinition",
            "a672f1905feb2177c02dd6d8f2a5d5919d7ade76"
        ],
        [
            "Canonical set_of_choiceType := Eval hnf in [choiceType of {set T}].",
            "VernacDefinition",
            "d00e697643ec1abdeb0aefc7ebc625352c56eea8"
        ],
        [
            "Canonical set_of_countType := Eval hnf in [countType of {set T}].",
            "VernacDefinition",
            "c4b41abc3e1ed59981bd0226b2ed6129ed991769"
        ],
        [
            "Canonical set_of_subCountType := Eval hnf in [subCountType of {set T}].",
            "VernacDefinition",
            "f7f002aa72b1f10247f4d0b97311e4f1607f5e58"
        ],
        [
            "Canonical set_of_finType := Eval hnf in [finType of {set T}].",
            "VernacDefinition",
            "67e84dde3a04c43310559aa7533c07992bd16843"
        ],
        [
            "Canonical set_of_subFinType := Eval hnf in [subFinType of {set T}].",
            "VernacDefinition",
            "ef9cd1cdd0057146af41a340bee3f49b6c871534"
        ],
        [
            "Lemma in_set pA x : x \\in finset pA = pA x.",
            "VernacStartTheoremProof",
            "27f47f7c6af40523341f190f5809327356c378e8"
        ],
        [
            "by rewrite [@finset]unlock unlock [x \\in _]ffunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setP A B : A =i B <-> A = B.",
            "VernacStartTheoremProof",
            "5ca5f1fdcc8b9605f11d0aaac7c6ccc8d651c2ca"
        ],
        [
            "by split=> [eqAB|-> //]; apply/val_inj/ffunP=> x; have:= eqAB x; rewrite unlock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition set0 := [set x : T | false].",
            "VernacDefinition",
            "40d59501524315a7599a20410089a5f16a4bdfea"
        ],
        [
            "Definition setTfor (phT : phant T) := [set x : T | true].",
            "VernacDefinition",
            "9a1438ba5df4411a72ae8c8fb7b661aaa4e64bd8"
        ],
        [
            "Lemma in_setT x : x \\in setTfor (Phant T).",
            "VernacStartTheoremProof",
            "573f965e3ee2af8313db251da97150046742e38f"
        ],
        [
            "by rewrite in_set.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqsVneq A B : {A = B} + {A != B}.",
            "VernacStartTheoremProof",
            "0b46b97d02d63d006e38e4285f623d1fdb4a162c"
        ],
        [
            "exact: eqVneq.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End BasicSetTheory.",
            "VernacEndSegment",
            "1a022207ffed5eb588f605621dc0d7c93fa7530d"
        ],
        [
            "Definition inE := (in_set, inE).",
            "VernacDefinition",
            "606cb1014e8ab0a1359d8e1eaa32f9967a7d9dbf"
        ],
        [
            "Arguments set0 {T}.",
            "VernacArguments",
            "391cf06c4e211f51929a5ae4c4d0d91f507f642b"
        ],
        [
            "Hint Resolve in_setT : core.",
            "VernacHints",
            "f3726ace35b6b13a1899070e89aeab8a488fe23a"
        ],
        [
            "Notation \"[ 'set' : T ]\" := (setTfor (Phant T)) (at level 0, format \"[ 'set' : T ]\") : set_scope.",
            "VernacNotation",
            "b9f6abe94ac37598a8c7e2026ee2b08fb6a808b1"
        ],
        [
            "Notation setT := [set: _] (only parsing).",
            "VernacSyntacticDefinition",
            "59904221ab2f490cea8a89ef345adfb9d3989d82"
        ],
        [
            "Section setOpsDefs.",
            "VernacBeginSection",
            "81b97c37f98082d7407f111d9ea0423e23466cce"
        ],
        [
            "Variable T : finType.",
            "VernacAssumption",
            "6349381da4d33cbc2eeaf1bade38718e15f7a2c9"
        ],
        [
            "Implicit Types (a x : T) (A B D : {set T}) (P : {set {set T}}).",
            "VernacReserve",
            "3a57c8c4f3f4b6a8e7d9d3ef69c30896ec1417dd"
        ],
        [
            "Definition set1 a := [set x | x == a].",
            "VernacDefinition",
            "967ad47f74ecc789663a3a3ccd47796338b45db5"
        ],
        [
            "Definition setU A B := [set x | (x \\in A) || (x \\in B)].",
            "VernacDefinition",
            "0c6d7d38966425d764c3b0c55a046dc848afb9c8"
        ],
        [
            "Definition setI A B := [set x in A | x \\in B].",
            "VernacDefinition",
            "ed863ed85b97f70d7f0a2cb056df5eb6d7a37d3d"
        ],
        [
            "Definition setC A := [set x | x \\notin A].",
            "VernacDefinition",
            "d0cf1fcfa12a66fb84ca7ec26369f12be6d8873e"
        ],
        [
            "Definition setD A B := [set x | x \\notin B & x \\in A].",
            "VernacDefinition",
            "74438097eae0cc90cdd84eb7f4d58110f1c95cc2"
        ],
        [
            "Definition ssetI P D := [set A in P | A \\subset D].",
            "VernacDefinition",
            "7d12f2cd9d9be1f37b23df13a4f1b9539aef18c8"
        ],
        [
            "Definition powerset D := [set A : {set T} | A \\subset D].",
            "VernacDefinition",
            "86e725c94509787d652d9117bc20a22d766fccb4"
        ],
        [
            "End setOpsDefs.",
            "VernacEndSegment",
            "96aa23ba8ee9f6d9847e310975026e87696f535b"
        ],
        [
            "Notation \"[ 'set' a ]\" := (set1 a) (at level 0, a at level 99, format \"[ 'set' a ]\") : set_scope.",
            "VernacNotation",
            "abcbefd8f97bd6dc0c231898c1880c43a3b19b6f"
        ],
        [
            "Notation \"[ 'set' a : T ]\" := [set (a : T)] (at level 0, a at level 99, format \"[ 'set' a : T ]\") : set_scope.",
            "VernacNotation",
            "faa1de0d7934c649deddc2181f834e24314a1557"
        ],
        [
            "Notation \"A :|: B\" := (setU A B) : set_scope.",
            "VernacNotation",
            "ff6e534bdf597f6f353c2065620b0ce63fa9af55"
        ],
        [
            "Notation \"a |: A\" := ([set a] :|: A) : set_scope.",
            "VernacNotation",
            "2eebb82b31a5f8bd1d3b14e3162b553619894d93"
        ],
        [
            "Notation \"[ 'set' a1 ; a2 ; .. ; an ]\" := (setU .. (a1 |: [set a2]) .. [set an]) (at level 0, a1 at level 99, format \"[ 'set' a1 ; a2 ; .. ; an ]\") : set_scope.",
            "VernacNotation",
            "bddaa664487b48f8ac98c155eea6edbbea4ad001"
        ],
        [
            "Notation \"A :&: B\" := (setI A B) : set_scope.",
            "VernacNotation",
            "3e02afb8234aec1812af32aa6a0a8c3a2faed09c"
        ],
        [
            "Notation \"~: A\" := (setC A) (at level 35, right associativity) : set_scope.",
            "VernacNotation",
            "8dc846ae2c0a5b5143000fce16acd5936299e8fb"
        ],
        [
            "Notation \"[ 'set' ~ a ]\" := (~: [set a]) (at level 0, format \"[ 'set' ~ a ]\") : set_scope.",
            "VernacNotation",
            "e9081f2b6ecd032fd9f82bea476f3c9b47ceea3d"
        ],
        [
            "Notation \"A :\\: B\" := (setD A B) : set_scope.",
            "VernacNotation",
            "9d4fbc9308da769e1bc6dde5a6a9c3092ec655c3"
        ],
        [
            "Notation \"A :\\ a\" := (A :\\: [set a]) : set_scope.",
            "VernacNotation",
            "1c0bc0e8123fc44d58ee8a82c79ee6ac31ae4ee5"
        ],
        [
            "Notation \"P ::&: D\" := (ssetI P D) (at level 48) : set_scope.",
            "VernacNotation",
            "9381aa630067d41171eb9cc1e43981293d1e7d72"
        ],
        [
            "Section setOps.",
            "VernacBeginSection",
            "83e206de5809378b919b8586d09a129cc6fd1623"
        ],
        [
            "Variable T : finType.",
            "VernacAssumption",
            "6349381da4d33cbc2eeaf1bade38718e15f7a2c9"
        ],
        [
            "Implicit Types (a x : T) (A B C D : {set T}) (pA pB pC : pred T).",
            "VernacReserve",
            "3bcc66b99a6587423c83396c213b90f39f5aebae"
        ],
        [
            "Lemma eqEsubset A B : (A == B) = (A \\subset B) && (B \\subset A).",
            "VernacStartTheoremProof",
            "f27c1f4e0f7c79a21c3869afb3bc621c665a0646"
        ],
        [
            "by apply/eqP/subset_eqP=> /setP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subEproper A B : A \\subset B = (A == B) || (A \\proper B).",
            "VernacStartTheoremProof",
            "8a162681ad0f472345b6bf9945626c43c1127c0b"
        ],
        [
            "by rewrite eqEsubset -andb_orr orbN andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqVproper A B : A \\subset B -> A = B \\/ A \\proper B.",
            "VernacStartTheoremProof",
            "91eb169fc44398c43b487a48abf3d48f8064ad5e"
        ],
        [
            "by rewrite subEproper => /predU1P.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma properEneq A B : A \\proper B = (A != B) && (A \\subset B).",
            "VernacStartTheoremProof",
            "08648626d4d38e83d3e44c4d8098274458434f7a"
        ],
        [
            "by rewrite andbC eqEsubset negb_and andb_orr andbN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma proper_neq A B : A \\proper B -> A != B.",
            "VernacStartTheoremProof",
            "1440584c512b63290f5c7fd5462af56b44ead8ff"
        ],
        [
            "by rewrite properEneq; case/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqEproper A B : (A == B) = (A \\subset B) && ~~ (A \\proper B).",
            "VernacStartTheoremProof",
            "9d9bf296ff8a85ef713fcf9a6aab12befb5da508"
        ],
        [
            "by rewrite negb_and negbK andb_orr andbN eqEsubset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqEcard A B : (A == B) = (A \\subset B) && (#|B| <= #|A|).",
            "VernacStartTheoremProof",
            "5657053e399b27de177f9bd5a2d3521f1f87714f"
        ],
        [
            "rewrite eqEsubset; apply: andb_id2l => sAB.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite (geq_leqif (subset_leqif_card sAB)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma properEcard A B : (A \\proper B) = (A \\subset B) && (#|A| < #|B|).",
            "VernacStartTheoremProof",
            "cd764ffcb544cc89a0b00ab666d4df7531176611"
        ],
        [
            "by rewrite properEneq ltnNge andbC eqEcard; case: (A \\subset B).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subset_leqif_cards A B : A \\subset B -> (#|A| <= #|B| ?= iff (A == B)).",
            "VernacStartTheoremProof",
            "e0c5551ee094af64e4f3ce7213d55e133882417f"
        ],
        [
            "by move=> sAB; rewrite eqEsubset sAB; apply: subset_leqif_card.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_set0 x : x \\in set0 = false.",
            "VernacStartTheoremProof",
            "27a85406518f6c25f4df221406e4cadcadf001cc"
        ],
        [
            "by rewrite inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub0set A : set0 \\subset A.",
            "VernacStartTheoremProof",
            "e6c9160002347a959016390426e451f5f9731942"
        ],
        [
            "by apply/subsetP=> x; rewrite inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subset0 A : (A \\subset set0) = (A == set0).",
            "VernacStartTheoremProof",
            "97bd1687dae1451b764ac36698b1a5b32289cb5a"
        ],
        [
            "by rewrite eqEsubset sub0set andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma proper0 A : (set0 \\proper A) = (A != set0).",
            "VernacStartTheoremProof",
            "a1a54a59cbbe5fcefe1ee33f3a95ee439fa685c9"
        ],
        [
            "by rewrite properE sub0set subset0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subset_neq0 A B : A \\subset B -> A != set0 -> B != set0.",
            "VernacStartTheoremProof",
            "281362e177f1ad1098731843176d20560d3387e0"
        ],
        [
            "by rewrite -!proper0 => sAB /proper_sub_trans->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set_0Vmem A : (A = set0) + {x : T | x \\in A}.",
            "VernacStartTheoremProof",
            "80b55eb895263472833be8aace59e16b46c90c6d"
        ],
        [
            "case: (pickP (mem A)) => [x Ax | A0]; [by right; exists x | left].",
            "VernacExtend",
            "0b71d550d1734a15236329f121aae615a86c6240"
        ],
        [
            "by apply/setP=> x; rewrite inE; apply: A0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma enum_set0 : enum set0 = [::] :> seq T.",
            "VernacStartTheoremProof",
            "9dbb132a5d7a840f5d23a784e92c4a0a7dbfae29"
        ],
        [
            "by rewrite (eq_enum (in_set _)) enum0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetT A : A \\subset setT.",
            "VernacStartTheoremProof",
            "22118983608563b924a3cb0b6781b0fe4167228a"
        ],
        [
            "by apply/subsetP=> x; rewrite inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetT_hint mA : subset mA (mem [set: T]).",
            "VernacStartTheoremProof",
            "b8ceaab192a01659e4d44869c517dfc432cd2a7a"
        ],
        [
            "by rewrite unlock; apply/pred0P=> x; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve subsetT_hint : core.",
            "VernacHints",
            "b35bd2e92d32d81105f92bf16890658692264d6b"
        ],
        [
            "Lemma subTset A : (setT \\subset A) = (A == setT).",
            "VernacStartTheoremProof",
            "583bb5bed490da73264b0ecdd68063fd8d1953c4"
        ],
        [
            "by rewrite eqEsubset subsetT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma properT A : (A \\proper setT) = (A != setT).",
            "VernacStartTheoremProof",
            "c35f6c56dfdc917a325b1130dc01fa24b5a4edee"
        ],
        [
            "by rewrite properEneq subsetT andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set1P x a : reflect (x = a) (x \\in [set a]).",
            "VernacStartTheoremProof",
            "d7f9fbc0c82330034ae582c952fc92b6c600507b"
        ],
        [
            "by rewrite inE; apply: eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma enum_setT : enum [set: T] = Finite.enum T.",
            "VernacStartTheoremProof",
            "578105b705ba452077ea0ae7bbeaff818d17c44a"
        ],
        [
            "by rewrite (eq_enum (in_set _)) enumT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_set1 x a : (x \\in [set a]) = (x == a).",
            "VernacStartTheoremProof",
            "5b372063560888444b779069f30e341783d22df5"
        ],
        [
            "exact: in_set.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set11 x : x \\in [set x].",
            "VernacStartTheoremProof",
            "bf6cd4111800bfbf1ce61a41b3d1d101e4a107bd"
        ],
        [
            "by rewrite inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set1_inj : injective (@set1 T).",
            "VernacStartTheoremProof",
            "913cf100377becfb31d730bc4eb53d87a3db3397"
        ],
        [
            "by move=> a b eqsab; apply/set1P; rewrite -eqsab set11.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma enum_set1 a : enum [set a] = [:: a].",
            "VernacStartTheoremProof",
            "f6273ca03820b3618f481c1b20a9d81ae66a7d2c"
        ],
        [
            "by rewrite (eq_enum (in_set _)) enum1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setU1P x a B : reflect (x = a \\/ x \\in B) (x \\in a |: B).",
            "VernacStartTheoremProof",
            "f10e6f40293747bf9d1273ef568f7144a9aa13f0"
        ],
        [
            "by rewrite !inE; apply: predU1P.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_setU1 x a B : (x \\in a |: B) = (x == a) || (x \\in B).",
            "VernacStartTheoremProof",
            "0871f2cee907de3b0990d444bba49d60ba33e878"
        ],
        [
            "by rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set_cons a s : [set x in a :: s] = a |: [set x in s].",
            "VernacStartTheoremProof",
            "2767ffbfda9a1649989d174403d731acd4e9b56e"
        ],
        [
            "by apply/setP=> x; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setU11 x B : x \\in x |: B.",
            "VernacStartTheoremProof",
            "8a4f81310c2094f3f19bffde3c31b32385f5dc15"
        ],
        [
            "by rewrite !inE eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setU1r x a B : x \\in B -> x \\in a |: B.",
            "VernacStartTheoremProof",
            "2a3819ae4c5a301697fda291f42a3ebce701a7a6"
        ],
        [
            "by move=> Bx; rewrite !inE predU1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set1Ul x A b : x \\in A -> x \\in A :|: [set b].",
            "VernacStartTheoremProof",
            "de97768bafca75cc11b34b936c2c26bc3478e745"
        ],
        [
            "by move=> Ax; rewrite !inE Ax.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set1Ur A b : b \\in A :|: [set b].",
            "VernacStartTheoremProof",
            "bf0e8a1e3eed6bb19da0610b3e425165d529c846"
        ],
        [
            "by rewrite !inE eqxx orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_setC1 x a : (x \\in [set~ a]) = (x != a).",
            "VernacStartTheoremProof",
            "aa40505fd59f6b9d6462784b2af2b81f3b655785"
        ],
        [
            "by rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setC11 x : (x \\in [set~ x]) = false.",
            "VernacStartTheoremProof",
            "6339c22d25b38ca0196cff0f1b251c6cff3670ef"
        ],
        [
            "by rewrite !inE eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setD1P x A b : reflect (x != b /\\ x \\in A) (x \\in A :\\ b).",
            "VernacStartTheoremProof",
            "5ead6289933709b35840a9705bf9d4d42db57229"
        ],
        [
            "by rewrite !inE; apply: andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_setD1 x A b : (x \\in A :\\ b) = (x != b) && (x \\in A) .",
            "VernacStartTheoremProof",
            "7826253342ddc3f09ded2a0429fce8e1c11caf5f"
        ],
        [
            "by rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setD11 b A : (b \\in A :\\ b) = false.",
            "VernacStartTheoremProof",
            "fa3f33212b6e1d12d49de53e2f384263239e7502"
        ],
        [
            "by rewrite !inE eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setD1K a A : a \\in A -> a |: (A :\\ a) = A.",
            "VernacStartTheoremProof",
            "d3050099c84fcb2e20b34a88762409bae3bb4d22"
        ],
        [
            "by move=> Aa; apply/setP=> x; rewrite !inE; case: eqP => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setU1K a B : a \\notin B -> (a |: B) :\\ a = B.",
            "VernacStartTheoremProof",
            "2d79fdd5544bb423e6e9e10f104805850b969ba3"
        ],
        [
            "by move/negPf=> nBa; apply/setP=> x; rewrite !inE; case: eqP => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set2P x a b : reflect (x = a \\/ x = b) (x \\in [set a; b]).",
            "VernacStartTheoremProof",
            "ebdaf35b3e167872d4348e2fcdee262d7945c3d0"
        ],
        [
            "by rewrite !inE; apply: pred2P.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_set2 x a b : (x \\in [set a; b]) = (x == a) || (x == b).",
            "VernacStartTheoremProof",
            "9b0fe8ab2c544ae83e354034eb70c6169cdeddaf"
        ],
        [
            "by rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set21 a b : a \\in [set a; b].",
            "VernacStartTheoremProof",
            "5ad2bbd4e9c663ad2785156cc52d8403b6a06909"
        ],
        [
            "by rewrite !inE eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set22 a b : b \\in [set a; b].",
            "VernacStartTheoremProof",
            "8896de9e94c7f5072f06cb128a3d0040b66dc73c"
        ],
        [
            "by rewrite !inE eqxx orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUP x A B : reflect (x \\in A \\/ x \\in B) (x \\in A :|: B).",
            "VernacStartTheoremProof",
            "8ce0cfebe7f7490475d4be0fcdd7b1b215162c42"
        ],
        [
            "by rewrite !inE; apply: orP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_setU x A B : (x \\in A :|: B) = (x \\in A) || (x \\in B).",
            "VernacStartTheoremProof",
            "b7faff73b4545bfe21dbf310428e452d869dfd56"
        ],
        [
            "exact: in_set.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUC A B : A :|: B = B :|: A.",
            "VernacStartTheoremProof",
            "64023076429e0540b43c2dd2c2e76a0918883d9a"
        ],
        [
            "by apply/setP => x; rewrite !inE orbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUS A B C : A \\subset B -> C :|: A \\subset C :|: B.",
            "VernacStartTheoremProof",
            "9ddfe04bd23919455d018ed0b76e9d47c63d66f2"
        ],
        [
            "move=> sAB; apply/subsetP=> x; rewrite !inE.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by case: (x \\in C) => //; apply: (subsetP sAB).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setSU A B C : A \\subset B -> A :|: C \\subset B :|: C.",
            "VernacStartTheoremProof",
            "6ac938f85807eafdc52c45f1957e5741d3af8af5"
        ],
        [
            "by move=> sAB; rewrite -!(setUC C) setUS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUSS A B C D : A \\subset C -> B \\subset D -> A :|: B \\subset C :|: D.",
            "VernacStartTheoremProof",
            "0556d477a66fcb4b5726d18a3a579c8f688109ef"
        ],
        [
            "by move=> /(setSU B) /subset_trans sAC /(setUS C)/sAC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set0U A : set0 :|: A = A.",
            "VernacStartTheoremProof",
            "5fed377b088ceec523bfd3375c9077e6f896f91d"
        ],
        [
            "by apply/setP => x; rewrite !inE orFb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setU0 A : A :|: set0 = A.",
            "VernacStartTheoremProof",
            "c89523af3261f775482273c7589e66ae95b88686"
        ],
        [
            "by rewrite setUC set0U.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUA A B C : A :|: (B :|: C) = A :|: B :|: C.",
            "VernacStartTheoremProof",
            "9f5ce2416b7bfaf0673a11e004ba6fe17931d5e3"
        ],
        [
            "by apply/setP => x; rewrite !inE orbA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUCA A B C : A :|: (B :|: C) = B :|: (A :|: C).",
            "VernacStartTheoremProof",
            "f3dff1e90c120322edd6d88670eff03f99103218"
        ],
        [
            "by rewrite !setUA (setUC B).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUAC A B C : A :|: B :|: C = A :|: C :|: B.",
            "VernacStartTheoremProof",
            "5377d5676bafaeb45aa2e09d6c18201d00f82d7b"
        ],
        [
            "by rewrite -!setUA (setUC B).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUACA A B C D : (A :|: B) :|: (C :|: D) = (A :|: C) :|: (B :|: D).",
            "VernacStartTheoremProof",
            "2b92a910c7d13fd7db562ae3c06c9be9a7d81f87"
        ],
        [
            "by rewrite -!setUA (setUCA B).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setTU A : setT :|: A = setT.",
            "VernacStartTheoremProof",
            "8813cd9d0836346a8d1056affa1aea938f957e64"
        ],
        [
            "by apply/setP => x; rewrite !inE orTb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUT A : A :|: setT = setT.",
            "VernacStartTheoremProof",
            "cce4218774d535f97064a9be8fd0d8c1109e73b9"
        ],
        [
            "by rewrite setUC setTU.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUid A : A :|: A = A.",
            "VernacStartTheoremProof",
            "0c722f8fbb8cfcf77e2978ef56c5fd1c03b1bad4"
        ],
        [
            "by apply/setP=> x; rewrite inE orbb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUUl A B C : A :|: B :|: C = (A :|: C) :|: (B :|: C).",
            "VernacStartTheoremProof",
            "5a93c884f7ce0e9c102e83d71def4c75d47dd1a6"
        ],
        [
            "by rewrite setUA !(setUAC _ C) -(setUA _ C) setUid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUUr A B C : A :|: (B :|: C) = (A :|: B) :|: (A :|: C).",
            "VernacStartTheoremProof",
            "e7d791c4d4ebf2134632a07d4d65a81ab4e801a0"
        ],
        [
            "by rewrite !(setUC A) setUUl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIdP x pA pB : reflect (pA x /\\ pB x) (x \\in [set y | pA y & pB y]).",
            "VernacStartTheoremProof",
            "4092c39921272887a4b36ce7bb6240897f378026"
        ],
        [
            "by rewrite !inE; apply: andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setId2P x pA pB pC : reflect [/\\ pA x, pB x & pC x] (x \\in [set y | pA y & pB y && pC y]).",
            "VernacStartTheoremProof",
            "e054cb872107212e71cf0bbcb94734131dba78ba"
        ],
        [
            "by rewrite !inE; apply: and3P.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIdE A pB : [set x in A | pB x] = A :&: [set x | pB x].",
            "VernacStartTheoremProof",
            "dd3a9f589e8e735ebe49b9fe28861201e5bf84a0"
        ],
        [
            "by apply/setP=> x; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIP x A B : reflect (x \\in A /\\ x \\in B) (x \\in A :&: B).",
            "VernacStartTheoremProof",
            "74e5a51b6bf649f3e5dbb12d200f7e249967c0a6"
        ],
        [
            "exact: (iffP (@setIdP _ _ _)).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_setI x A B : (x \\in A :&: B) = (x \\in A) && (x \\in B).",
            "VernacStartTheoremProof",
            "fa769c0884d5f897aca6dc123c27b34f261e430d"
        ],
        [
            "exact: in_set.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIC A B : A :&: B = B :&: A.",
            "VernacStartTheoremProof",
            "cfb155a690361f5b79db13b947e5e96dad7f7778"
        ],
        [
            "by apply/setP => x; rewrite !inE andbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIS A B C : A \\subset B -> C :&: A \\subset C :&: B.",
            "VernacStartTheoremProof",
            "43e47624384bbfb74f923f85984b1c92703dfdb7"
        ],
        [
            "move=> sAB; apply/subsetP=> x; rewrite !inE.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by case: (x \\in C) => //; apply: (subsetP sAB).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setSI A B C : A \\subset B -> A :&: C \\subset B :&: C.",
            "VernacStartTheoremProof",
            "1ca884d7bb20fb628ec5ac64e8013c2d4202844c"
        ],
        [
            "by move=> sAB; rewrite -!(setIC C) setIS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setISS A B C D : A \\subset C -> B \\subset D -> A :&: B \\subset C :&: D.",
            "VernacStartTheoremProof",
            "8aa108efa9c99e248854b9e88fdeb8ba98b336ec"
        ],
        [
            "by move=> /(setSI B) /subset_trans sAC /(setIS C) /sAC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setTI A : setT :&: A = A.",
            "VernacStartTheoremProof",
            "7aae766bc807be883ede815e424d88266e87f4ba"
        ],
        [
            "by apply/setP => x; rewrite !inE andTb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIT A : A :&: setT = A.",
            "VernacStartTheoremProof",
            "44ee83ead80369d17a87e64b94a561750d77d5c8"
        ],
        [
            "by rewrite setIC setTI.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set0I A : set0 :&: A = set0.",
            "VernacStartTheoremProof",
            "ad1eb6fcdd9c14b9b0af8e4998787225b1c3ae76"
        ],
        [
            "by apply/setP => x; rewrite !inE andFb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setI0 A : A :&: set0 = set0.",
            "VernacStartTheoremProof",
            "7203022b9d03d11cd86602837d69082278ab4ea1"
        ],
        [
            "by rewrite setIC set0I.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIA A B C : A :&: (B :&: C) = A :&: B :&: C.",
            "VernacStartTheoremProof",
            "7ee71985049510b463fb3fb3351521c90e2d2eaf"
        ],
        [
            "by apply/setP=> x; rewrite !inE andbA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setICA A B C : A :&: (B :&: C) = B :&: (A :&: C).",
            "VernacStartTheoremProof",
            "fe1a2d43059ec6fecb2846b49664169aae1a75cb"
        ],
        [
            "by rewrite !setIA (setIC A).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIAC A B C : A :&: B :&: C = A :&: C :&: B.",
            "VernacStartTheoremProof",
            "f6f61470748f721b07406d0a4c5b4fc554048726"
        ],
        [
            "by rewrite -!setIA (setIC B).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIACA A B C D : (A :&: B) :&: (C :&: D) = (A :&: C) :&: (B :&: D).",
            "VernacStartTheoremProof",
            "bcd27209750456e0ce6708e761b7885ad0210e45"
        ],
        [
            "by rewrite -!setIA (setICA B).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIid A : A :&: A = A.",
            "VernacStartTheoremProof",
            "f766e5c8cd85678f03f77e9a97098efefb5d5db2"
        ],
        [
            "by apply/setP=> x; rewrite inE andbb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIIl A B C : A :&: B :&: C = (A :&: C) :&: (B :&: C).",
            "VernacStartTheoremProof",
            "1718cb53054d9e39e48995cc6e3329f68ba0f8f1"
        ],
        [
            "by rewrite setIA !(setIAC _ C) -(setIA _ C) setIid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIIr A B C : A :&: (B :&: C) = (A :&: B) :&: (A :&: C).",
            "VernacStartTheoremProof",
            "57598381e441cdb0c262a2863404e205a7d75db8"
        ],
        [
            "by rewrite !(setIC A) setIIl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIUr A B C : A :&: (B :|: C) = (A :&: B) :|: (A :&: C).",
            "VernacStartTheoremProof",
            "5cb0578c68962532cf0b6227fadc1e124f9f6030"
        ],
        [
            "by apply/setP=> x; rewrite !inE andb_orr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIUl A B C : (A :|: B) :&: C = (A :&: C) :|: (B :&: C).",
            "VernacStartTheoremProof",
            "8551bb054b750ed9a0841e4b1fb6a211ba4a7543"
        ],
        [
            "by apply/setP=> x; rewrite !inE andb_orl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUIr A B C : A :|: (B :&: C) = (A :|: B) :&: (A :|: C).",
            "VernacStartTheoremProof",
            "9dfc6fd95cbde9bc4af80f0adf7fc9cfa7e3e3fd"
        ],
        [
            "by apply/setP=> x; rewrite !inE orb_andr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUIl A B C : (A :&: B) :|: C = (A :|: C) :&: (B :|: C).",
            "VernacStartTheoremProof",
            "ea6c83c2ff7b5e7a24e34a99b93d33ac55033a6b"
        ],
        [
            "by apply/setP=> x; rewrite !inE orb_andl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUK A B : (A :|: B) :&: A = A.",
            "VernacStartTheoremProof",
            "3ff41257cdc26fda62450313d03b866760e86acb"
        ],
        [
            "by apply/setP=> x; rewrite !inE orbK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setKU A B : A :&: (B :|: A) = A.",
            "VernacStartTheoremProof",
            "38fc7a8d0c174ccb61e9d3c13fac1759810ec205"
        ],
        [
            "by apply/setP=> x; rewrite !inE orKb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIK A B : (A :&: B) :|: A = A.",
            "VernacStartTheoremProof",
            "f491cf2bc69fe39c5e6fef767cf1a7e9669436d8"
        ],
        [
            "by apply/setP=> x; rewrite !inE andbK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setKI A B : A :|: (B :&: A) = A.",
            "VernacStartTheoremProof",
            "074669d78555716f98e1fc857b9d132f370b3901"
        ],
        [
            "by apply/setP=> x; rewrite !inE andKb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setCP x A : reflect (~ x \\in A) (x \\in ~: A).",
            "VernacStartTheoremProof",
            "dbf73d964a21669f3a3cf098437655f901aa3230"
        ],
        [
            "by rewrite !inE; apply: negP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_setC x A : (x \\in ~: A) = (x \\notin A).",
            "VernacStartTheoremProof",
            "0f25af841e9a71bd0a86490ca12f87c0ed280517"
        ],
        [
            "exact: in_set.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setCK : involutive (@setC T).",
            "VernacStartTheoremProof",
            "77a233db4041c66d5ca51bd83634d73ec1199331"
        ],
        [
            "by move=> A; apply/setP=> x; rewrite !inE negbK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setC_inj : injective (@setC T).",
            "VernacStartTheoremProof",
            "add548f6bc434c0ad39bb8d9ef44c582d5cbbdda"
        ],
        [
            "exact: can_inj setCK.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsets_disjoint A B : (A \\subset B) = [disjoint A & ~: B].",
            "VernacStartTheoremProof",
            "063d70aece1fff69e25abdfda90493cc82afea6e"
        ],
        [
            "by rewrite subset_disjoint; apply: eq_disjoint_r => x; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma disjoints_subset A B : [disjoint A & B] = (A \\subset ~: B).",
            "VernacStartTheoremProof",
            "adcd1d00d9bea429544f754280a8bbad226f589f"
        ],
        [
            "by rewrite subsets_disjoint setCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma powersetCE A B : (A \\in powerset (~: B)) = [disjoint A & B].",
            "VernacStartTheoremProof",
            "88903246bd8b36759318066d9d00aecdceeccfdb"
        ],
        [
            "by rewrite inE disjoints_subset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setCS A B : (~: A \\subset ~: B) = (B \\subset A).",
            "VernacStartTheoremProof",
            "977bbfe07b65f1d7dd74d1e1b9766c4d336ba37c"
        ],
        [
            "by rewrite !subsets_disjoint setCK disjoint_sym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setCU A B : ~: (A :|: B) = ~: A :&: ~: B.",
            "VernacStartTheoremProof",
            "596b28accd4e294bade9069193dbad4a0817036b"
        ],
        [
            "by apply/setP=> x; rewrite !inE negb_or.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setCI A B : ~: (A :&: B) = ~: A :|: ~: B.",
            "VernacStartTheoremProof",
            "515c35c01d248f3c2bd6be8d937615094b30ff40"
        ],
        [
            "by apply/setP=> x; rewrite !inE negb_and.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUCr A : A :|: ~: A = setT.",
            "VernacStartTheoremProof",
            "05557d85512290f74b189675cf2f021b35e994cc"
        ],
        [
            "by apply/setP=> x; rewrite !inE orbN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setICr A : A :&: ~: A = set0.",
            "VernacStartTheoremProof",
            "1ca34b439243a3cc02038a88846c81a8a5ac5e22"
        ],
        [
            "by apply/setP=> x; rewrite !inE andbN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setC0 : ~: set0 = [set: T].",
            "VernacStartTheoremProof",
            "4f7f1033893e5f910fdf012d79b7a0ab334829d4"
        ],
        [
            "by apply/setP=> x; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setCT : ~: [set: T] = set0.",
            "VernacStartTheoremProof",
            "c634dc8a4bb4dfdc9760d9b0b0dac2184aceafb7"
        ],
        [
            "by rewrite -setC0 setCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setDP A B x : reflect (x \\in A /\\ x \\notin B) (x \\in A :\\: B).",
            "VernacStartTheoremProof",
            "b869615bd58ea2c2da8fb6a394acdc0097ed2107"
        ],
        [
            "by rewrite inE andbC; apply: andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_setD A B x : (x \\in A :\\: B) = (x \\notin B) && (x \\in A).",
            "VernacStartTheoremProof",
            "86c147d40064073c09ed580a9a6957ed2d9aae65"
        ],
        [
            "exact: in_set.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setDE A B : A :\\: B = A :&: ~: B.",
            "VernacStartTheoremProof",
            "18cedf5a61cb5f6936086779ceccdae0f0ef3701"
        ],
        [
            "by apply/setP => x; rewrite !inE andbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setSD A B C : A \\subset B -> A :\\: C \\subset B :\\: C.",
            "VernacStartTheoremProof",
            "277f23bc61e5ca317974a9432324a47ff6b63e21"
        ],
        [
            "by rewrite !setDE; apply: setSI.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setDS A B C : A \\subset B -> C :\\: B \\subset C :\\: A.",
            "VernacStartTheoremProof",
            "ea27634c1a8e7055517ce985f088a119f015896e"
        ],
        [
            "by rewrite !setDE -setCS; apply: setIS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setDSS A B C D : A \\subset C -> D \\subset B -> A :\\: B \\subset C :\\: D.",
            "VernacStartTheoremProof",
            "d338579d109897db4cd29e66fc61933a37b809c1"
        ],
        [
            "by move=> /(setSD B) /subset_trans sAC /(setDS C) /sAC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setD0 A : A :\\: set0 = A.",
            "VernacStartTheoremProof",
            "268be609c75e4bc99df8d35fa4591ed0086b3adb"
        ],
        [
            "by apply/setP=> x; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set0D A : set0 :\\: A = set0.",
            "VernacStartTheoremProof",
            "902482ba3f24087cbce4b799bd7db977e44cbfc1"
        ],
        [
            "by apply/setP=> x; rewrite !inE andbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setDT A : A :\\: setT = set0.",
            "VernacStartTheoremProof",
            "f96a45600889be11c7c3a0aad7d4fd79c1fa3700"
        ],
        [
            "by apply/setP=> x; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setTD A : setT :\\: A = ~: A.",
            "VernacStartTheoremProof",
            "4f1fdf16f342781084939683f25b60d0bdcaf4c8"
        ],
        [
            "by apply/setP=> x; rewrite !inE andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setDv A : A :\\: A = set0.",
            "VernacStartTheoremProof",
            "68857f42029334e50062e4c214b22184db2c504f"
        ],
        [
            "by apply/setP=> x; rewrite !inE andNb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setCD A B : ~: (A :\\: B) = ~: A :|: B.",
            "VernacStartTheoremProof",
            "1e19d8c5623ff327b217471420cb2302a184b06c"
        ],
        [
            "by rewrite !setDE setCI setCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setID A B : A :&: B :|: A :\\: B = A.",
            "VernacStartTheoremProof",
            "c831ef266c23708afd38906340a344ea4db0b78d"
        ],
        [
            "by rewrite setDE -setIUr setUCr setIT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setDUl A B C : (A :|: B) :\\: C = (A :\\: C) :|: (B :\\: C).",
            "VernacStartTheoremProof",
            "57ae7abd8c83620b37c5b5ac815add32519099fa"
        ],
        [
            "by rewrite !setDE setIUl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setDUr A B C : A :\\: (B :|: C) = (A :\\: B) :&: (A :\\: C).",
            "VernacStartTheoremProof",
            "0a387f2201926c29dab5ec4c3e9eb24bf5d943d3"
        ],
        [
            "by rewrite !setDE setCU setIIr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setDIl A B C : (A :&: B) :\\: C = (A :\\: C) :&: (B :\\: C).",
            "VernacStartTheoremProof",
            "ec48be8ed047c1083ecfe3b9c54c2801fb246dc0"
        ],
        [
            "by rewrite !setDE setIIl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIDA A B C : A :&: (B :\\: C) = (A :&: B) :\\: C.",
            "VernacStartTheoremProof",
            "53a183b20656c3837435e45d9d7a8afa7e5fca96"
        ],
        [
            "by rewrite !setDE setIA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIDAC A B C : (A :\\: B) :&: C = (A :&: C) :\\: B.",
            "VernacStartTheoremProof",
            "595a40fb07e62696a43a43fb4d7b90f3573024aa"
        ],
        [
            "by rewrite !setDE setIAC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setDIr A B C : A :\\: (B :&: C) = (A :\\: B) :|: (A :\\: C).",
            "VernacStartTheoremProof",
            "aee36678b55497de44ffac0544f12242d0c86523"
        ],
        [
            "by rewrite !setDE setCI setIUr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setDDl A B C : (A :\\: B) :\\: C = A :\\: (B :|: C).",
            "VernacStartTheoremProof",
            "ab74353a475f745157a99b2b40b8d17c7acbf9bc"
        ],
        [
            "by rewrite !setDE setCU setIA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setDDr A B C : A :\\: (B :\\: C) = (A :\\: B) :|: (A :&: C).",
            "VernacStartTheoremProof",
            "f3208053cb245d1d6dc97d9f5c0afec15988e29a"
        ],
        [
            "by rewrite !setDE setCI setIUr setCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma powersetE A B : (A \\in powerset B) = (A \\subset B).",
            "VernacStartTheoremProof",
            "bfdd0c6fc28ce1947cf7be248a6966badd18a747"
        ],
        [
            "by rewrite inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma powersetS A B : (powerset A \\subset powerset B) = (A \\subset B).",
            "VernacStartTheoremProof",
            "261783c7afb97a8cf423460ebb8785d063c91e5a"
        ],
        [
            "apply/subsetP/idP=> [sAB | sAB C]; last by rewrite !inE => /subset_trans ->.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -powersetE sAB // inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma powerset0 : powerset set0 = [set set0] :> {set {set T}}.",
            "VernacStartTheoremProof",
            "e1fc1246dbbad30d7a81b73c248d0dd278a543ec"
        ],
        [
            "by apply/setP=> A; rewrite !inE subset0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma powersetT : powerset [set: T] = [set: {set T}].",
            "VernacStartTheoremProof",
            "bcd21c4195cf7ddf901b52d61cb844c06c52f07b"
        ],
        [
            "by apply/setP=> A; rewrite !inE subsetT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setI_powerset P A : P :&: powerset A = P ::&: A.",
            "VernacStartTheoremProof",
            "927d0f881a2dbf533a7022664f4a30dda20b2122"
        ],
        [
            "by apply/setP=> B; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardsE pA : #|[set x in pA]| = #|pA|.",
            "VernacStartTheoremProof",
            "722b3f731253232254c8af445157c3527a0cc61c"
        ],
        [
            "exact/eq_card/in_set.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sum1dep_card pA : \\sum_(x | pA x) 1 = #|[set x | pA x]|.",
            "VernacStartTheoremProof",
            "8ed19300b84e8f6dfef0221826b7f651f1e82673"
        ],
        [
            "by rewrite sum1_card cardsE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sum_nat_dep_const pA n : \\sum_(x | pA x) n = #|[set x | pA x]| * n.",
            "VernacStartTheoremProof",
            "c46c3b895718f79ad13f37881da5effdb23f5301"
        ],
        [
            "by rewrite sum_nat_const cardsE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cards0 : #|@set0 T| = 0.",
            "VernacStartTheoremProof",
            "fdfd484046268d79c9bf7f77735a26ec2b30b98d"
        ],
        [
            "by rewrite cardsE card0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cards_eq0 A : (#|A| == 0) = (A == set0).",
            "VernacStartTheoremProof",
            "21a91ae63633d022ff5fd1322c84ddb65680ab0f"
        ],
        [
            "by rewrite (eq_sym A) eqEcard sub0set cards0 leqn0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set0Pn A : reflect (exists x, x \\in A) (A != set0).",
            "VernacStartTheoremProof",
            "800c6887dda360fd6685b3f4deaebe89fccc2bbc"
        ],
        [
            "by rewrite -cards_eq0; apply: existsP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_gt0 A : (0 < #|A|) = (A != set0).",
            "VernacStartTheoremProof",
            "60b7d8515f54f6b45f9549b21480c419afb36596"
        ],
        [
            "by rewrite lt0n cards_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cards0_eq A : #|A| = 0 -> A = set0.",
            "VernacStartTheoremProof",
            "3f92a9dd187863bdc308c027a40fc81d37c3679f"
        ],
        [
            "by move=> A_0; apply/setP=> x; rewrite inE (card0_eq A_0).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cards1 x : #|[set x]| = 1.",
            "VernacStartTheoremProof",
            "d9cf3e402fd2ff62809a97e7fe3a26f1b1f4c1c5"
        ],
        [
            "by rewrite cardsE card1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardsUI A B : #|A :|: B| + #|A :&: B| = #|A| + #|B|.",
            "VernacStartTheoremProof",
            "2767e7a6c1ba75b31a9c31393c88acf95f3daa76"
        ],
        [
            "by rewrite !cardsE cardUI.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardsU A B : #|A :|: B| = (#|A| + #|B| - #|A :&: B|)%N.",
            "VernacStartTheoremProof",
            "3e8c275054ce40eecca2abd253093605834629b1"
        ],
        [
            "by rewrite -cardsUI addnK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardsI A B : #|A :&: B| = (#|A| + #|B| - #|A :|: B|)%N.",
            "VernacStartTheoremProof",
            "cd1ad39d6e803eb56dc5b9746e727b2dd7294841"
        ],
        [
            "by rewrite -cardsUI addKn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardsT : #|[set: T]| = #|T|.",
            "VernacStartTheoremProof",
            "7d0636b32309fce2e380936119ab796cd0aec6e6"
        ],
        [
            "by rewrite cardsE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardsID B A : #|A :&: B| + #|A :\\: B| = #|A|.",
            "VernacStartTheoremProof",
            "c34faf5787996ccf42d8d4c54806fad055d0427a"
        ],
        [
            "by rewrite !cardsE cardID.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardsD A B : #|A :\\: B| = (#|A| - #|A :&: B|)%N.",
            "VernacStartTheoremProof",
            "78b4055acf1bdb0b860b6af47d02154088e5d0e4"
        ],
        [
            "by rewrite -(cardsID B A) addKn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardsC A : #|A| + #|~: A| = #|T|.",
            "VernacStartTheoremProof",
            "29056ea8f63a4c9460652cbd8f2ef992eabe77c7"
        ],
        [
            "by rewrite cardsE cardC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardsCs A : #|A| = #|T| - #|~: A|.",
            "VernacStartTheoremProof",
            "2c3733c6d8f91a11aec690d1a45ceaeab4e6af82"
        ],
        [
            "by rewrite -(cardsC A) addnK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardsU1 a A : #|a |: A| = (a \\notin A) + #|A|.",
            "VernacStartTheoremProof",
            "fc96c6383771d409f6be0c4f848c6ba7b3fdd1b9"
        ],
        [
            "by rewrite -cardU1; apply: eq_card=> x; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cards2 a b : #|[set a; b]| = (a != b).+1.",
            "VernacStartTheoremProof",
            "42c4d45ce8a09b253593c27ae18d9ca70dcedcdb"
        ],
        [
            "by rewrite -card2; apply: eq_card=> x; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardsC1 a : #|[set~ a]| = #|T|.-1.",
            "VernacStartTheoremProof",
            "cb1b45c95a19608a2abf4ea4b7f42d5a08268b08"
        ],
        [
            "by rewrite -(cardC1 a); apply: eq_card=> x; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardsD1 a A : #|A| = (a \\in A) + #|A :\\ a|.",
            "VernacStartTheoremProof",
            "a9999322c05e57b8c723710371a13025465a6787"
        ],
        [
            "by rewrite (cardD1 a); congr (_ + _); apply: eq_card => x; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetIl A B : A :&: B \\subset A.",
            "VernacStartTheoremProof",
            "e4540b69abcd5b396a0951eca3c51084595aa7ed"
        ],
        [
            "by apply/subsetP=> x; rewrite inE; case/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetIr A B : A :&: B \\subset B.",
            "VernacStartTheoremProof",
            "2b4f18b051ebd6a5579a71d0f696a5da5add7155"
        ],
        [
            "by apply/subsetP=> x; rewrite inE; case/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetUl A B : A \\subset A :|: B.",
            "VernacStartTheoremProof",
            "c7c45fcb45fb6f827b5220c013356a8e27edb6e1"
        ],
        [
            "by apply/subsetP=> x; rewrite inE => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetUr A B : B \\subset A :|: B.",
            "VernacStartTheoremProof",
            "e62db95d940192514221297a5f8e8fddb814ad83"
        ],
        [
            "by apply/subsetP=> x; rewrite inE orbC => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetU1 x A : A \\subset x |: A.",
            "VernacStartTheoremProof",
            "92c4273f12269fb0fb6614614e0ce1f6cf5e6598"
        ],
        [
            "exact: subsetUr.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetDl A B : A :\\: B \\subset A.",
            "VernacStartTheoremProof",
            "6999a58ac2af40351a6fd625e0c7d2aa6d6ce5aa"
        ],
        [
            "by rewrite setDE subsetIl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subD1set A x : A :\\ x \\subset A.",
            "VernacStartTheoremProof",
            "1aacf67a82dade377da442739be7f7f60778735e"
        ],
        [
            "by rewrite subsetDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetDr A B : A :\\: B \\subset ~: B.",
            "VernacStartTheoremProof",
            "60f3bfd65a1075b78ef4498ed5a8a17553e6dfd6"
        ],
        [
            "by rewrite setDE subsetIr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub1set A x : ([set x] \\subset A) = (x \\in A).",
            "VernacStartTheoremProof",
            "e71651e2bd8b2e64bc426de0abb71e8ae60d9990"
        ],
        [
            "by rewrite -subset_pred1; apply: eq_subset=> y; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cards1P A : reflect (exists x, A = [set x]) (#|A| == 1).",
            "VernacStartTheoremProof",
            "9106ca4c4ed0deb71fe81477be0ee35cd712df5d"
        ],
        [
            "apply: (iffP idP) => [|[x ->]]; last by rewrite cards1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite eq_sym eqn_leq card_gt0 => /andP[/set0Pn[x Ax] leA1].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by exists x; apply/eqP; rewrite eq_sym eqEcard sub1set Ax cards1 leA1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subset1 A x : (A \\subset [set x]) = (A == [set x]) || (A == set0).",
            "VernacStartTheoremProof",
            "53ec5782ece2f78f6bb97f9c42c6c8f6b5ef8e33"
        ],
        [
            "rewrite eqEcard cards1 -cards_eq0 orbC andbC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case: posnP => // A0; rewrite (cards0_eq A0) sub0set.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma powerset1 x : powerset [set x] = [set set0; [set x]].",
            "VernacStartTheoremProof",
            "cc888b9899e8d29a3787d8917dbefb3a66ac371f"
        ],
        [
            "by apply/setP=> A; rewrite !inE subset1 orbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setIidPl A B : reflect (A :&: B = A) (A \\subset B).",
            "VernacStartTheoremProof",
            "c0f11fac8ed6c6f52aea887a7dc3a9c8d4d99a21"
        ],
        [
            "apply: (iffP subsetP) => [sAB | <- x /setIP[] //].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by apply/setP=> x; rewrite inE; apply/andb_idr/sAB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments setIidPl {A B}.",
            "VernacArguments",
            "8932ba9eedfc510f859e01498f0a40b8630d1edc"
        ],
        [
            "Lemma setIidPr A B : reflect (A :&: B = B) (B \\subset A).",
            "VernacStartTheoremProof",
            "c895fe6a5f4dd26c3ca6af0c436238cc6d3e09d2"
        ],
        [
            "by rewrite setIC; apply: setIidPl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardsDS A B : B \\subset A -> #|A :\\: B| = (#|A| - #|B|)%N.",
            "VernacStartTheoremProof",
            "a74959d2ae01dc9aff54f224df23a7b2f5f43ca2"
        ],
        [
            "by rewrite cardsD => /setIidPr->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUidPl A B : reflect (A :|: B = A) (B \\subset A).",
            "VernacStartTheoremProof",
            "b66c32ac059014464e04e31e5c88882ac258858b"
        ],
        [
            "by rewrite -setCS (sameP setIidPl eqP) -setCU (inj_eq setC_inj); apply: eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setUidPr A B : reflect (A :|: B = B) (A \\subset B).",
            "VernacStartTheoremProof",
            "6e99dba03b2a62f0c44decd6e86756281c7839cc"
        ],
        [
            "by rewrite setUC; apply: setUidPl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setDidPl A B : reflect (A :\\: B = A) [disjoint A & B].",
            "VernacStartTheoremProof",
            "6940fa04588720eb15b897e8263dd2e0f1182fca"
        ],
        [
            "by rewrite setDE disjoints_subset; apply: setIidPl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subIset A B C : (B \\subset A) || (C \\subset A) -> (B :&: C \\subset A).",
            "VernacStartTheoremProof",
            "2e6d00ea36ec02287dc70119739c575c4a7e2957"
        ],
        [
            "by case/orP; apply: subset_trans; rewrite (subsetIl, subsetIr).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetI A B C : (A \\subset B :&: C) = (A \\subset B) && (A \\subset C).",
            "VernacStartTheoremProof",
            "1dcbe7e75b95dd6b504d43ef800162ee9a8e6ee2"
        ],
        [
            "rewrite !(sameP setIidPl eqP) setIA; have [-> //| ] := altP (A :&: B =P A).",
            "VernacExtend",
            "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
        ],
        [
            "by apply: contraNF => /eqP <-; rewrite -setIA -setIIl setIAC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetIP A B C : reflect (A \\subset B /\\ A \\subset C) (A \\subset B :&: C).",
            "VernacStartTheoremProof",
            "b0d70fb4cab4dcf0292dd87155ca366a071604ef"
        ],
        [
            "by rewrite subsetI; apply: andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetIidl A B : (A \\subset A :&: B) = (A \\subset B).",
            "VernacStartTheoremProof",
            "2b3dfecbd356e76301d7bedc77e32d5f1b5d5e80"
        ],
        [
            "by rewrite subsetI subxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetIidr A B : (B \\subset A :&: B) = (B \\subset A).",
            "VernacStartTheoremProof",
            "fd111381cf3457ba176b6494b461a31ca3b0624e"
        ],
        [
            "by rewrite setIC subsetIidl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma powersetI A B : powerset (A :&: B) = powerset A :&: powerset B.",
            "VernacStartTheoremProof",
            "8bbed91f7393b83dd7a26db5cef6ca8420605a1e"
        ],
        [
            "by apply/setP=> C; rewrite !inE subsetI.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subUset A B C : (B :|: C \\subset A) = (B \\subset A) && (C \\subset A).",
            "VernacStartTheoremProof",
            "d0385c41995ba581142b38912e78265b78911992"
        ],
        [
            "by rewrite -setCS setCU subsetI !setCS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetU A B C : (A \\subset B) || (A \\subset C) -> A \\subset B :|: C.",
            "VernacStartTheoremProof",
            "10112a0bd33078efc3f7c9c9992423c551310ec0"
        ],
        [
            "by rewrite -!(setCS _ A) setCU; apply: subIset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subUsetP A B C : reflect (A \\subset C /\\ B \\subset C) (A :|: B \\subset C).",
            "VernacStartTheoremProof",
            "e6bc19845077a36c77d6de181ce810e2a29af009"
        ],
        [
            "by rewrite subUset; apply: andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetC A B : (A \\subset ~: B) = (B \\subset ~: A).",
            "VernacStartTheoremProof",
            "5d8557566a11f822281e7fed2a039a637e65d4af"
        ],
        [
            "by rewrite -setCS setCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subCset A B : (~: A \\subset B) = (~: B \\subset A).",
            "VernacStartTheoremProof",
            "c6eb12974ec3207af7eb0f9eb7159b524db43a70"
        ],
        [
            "by rewrite -setCS setCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetD A B C : (A \\subset B :\\: C) = (A \\subset B) && [disjoint A & C].",
            "VernacStartTheoremProof",
            "28bb959b577ef306714c5bfd16d61242aa194940"
        ],
        [
            "by rewrite setDE subsetI -disjoints_subset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subDset A B C : (A :\\: B \\subset C) = (A \\subset B :|: C).",
            "VernacStartTheoremProof",
            "74a0ca33c0b35fcf0466c5e44c703d97343deb0b"
        ],
        [
            "apply/subsetP/subsetP=> sABC x; rewrite !inE.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by case Bx: (x \\in B) => // Ax; rewrite sABC ?inE ?Bx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case Bx: (x \\in B) => //; move/sABC; rewrite inE Bx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetDP A B C : reflect (A \\subset B /\\ [disjoint A & C]) (A \\subset B :\\: C).",
            "VernacStartTheoremProof",
            "53685874b16a5d9ab1e65afdc16293e6da189763"
        ],
        [
            "by rewrite subsetD; apply: andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setU_eq0 A B : (A :|: B == set0) = (A == set0) && (B == set0).",
            "VernacStartTheoremProof",
            "635cd52da0ce3eae229bff156a814b6cfc007a63"
        ],
        [
            "by rewrite -!subset0 subUset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setD_eq0 A B : (A :\\: B == set0) = (A \\subset B).",
            "VernacStartTheoremProof",
            "6e78d93c6948b51abab1cc97b5cced8ab23dbb75"
        ],
        [
            "by rewrite -subset0 subDset setU0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setI_eq0 A B : (A :&: B == set0) = [disjoint A & B].",
            "VernacStartTheoremProof",
            "ce427903d7ed900d008e4847a4c58620b3879cb4"
        ],
        [
            "by rewrite disjoints_subset -setD_eq0 setDE setCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma disjoint_setI0 A B : [disjoint A & B] -> A :&: B = set0.",
            "VernacStartTheoremProof",
            "1f0b968c7d2da7e702fcd91f04d85610aa6e0c53"
        ],
        [
            "by rewrite -setI_eq0; move/eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetD1 A B x : (A \\subset B :\\ x) = (A \\subset B) && (x \\notin A).",
            "VernacStartTheoremProof",
            "52d8f49022738baff1fcfadfdfb3716f7339127f"
        ],
        [
            "by rewrite setDE subsetI subsetC sub1set inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetD1P A B x : reflect (A \\subset B /\\ x \\notin A) (A \\subset B :\\ x).",
            "VernacStartTheoremProof",
            "5c15ee2f190e7038cbcb0542bce1168780bf8802"
        ],
        [
            "by rewrite subsetD1; apply: andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma properD1 A x : x \\in A -> A :\\ x \\proper A.",
            "VernacStartTheoremProof",
            "92a31e1754a986519685ad3dfc1585f77d0a6602"
        ],
        [
            "move=> Ax; rewrite properE subsetDl; apply/subsetPn; exists x=> //.",
            "VernacExtend",
            "f7e1535beb7276979a5b89bc8a1738146a5562e1"
        ],
        [
            "by rewrite in_setD1 Ax eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma properIr A B : ~~ (B \\subset A) -> A :&: B \\proper B.",
            "VernacStartTheoremProof",
            "273fb1ae25373078972a55a31ae4f894ec996029"
        ],
        [
            "by move=> nsAB; rewrite properE subsetIr subsetI negb_and nsAB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma properIl A B : ~~ (A \\subset B) -> A :&: B \\proper A.",
            "VernacStartTheoremProof",
            "736d6e659bfa6f2fc6fdbcb12133bcfe06a347d1"
        ],
        [
            "by move=> nsBA; rewrite properE subsetIl subsetI negb_and nsBA orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma properUr A B : ~~ (A \\subset B) -> B \\proper A :|: B.",
            "VernacStartTheoremProof",
            "9bbbfaca0cffec3662e985dc6cd923aea887355e"
        ],
        [
            "by rewrite properE subsetUr subUset subxx /= andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma properUl A B : ~~ (B \\subset A) -> A \\proper A :|: B.",
            "VernacStartTheoremProof",
            "6116021a07d60a073d6c3827843a4ee9db9375dd"
        ],
        [
            "by move=> not_sBA; rewrite setUC properUr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma proper1set A x : ([set x] \\proper A) -> (x \\in A).",
            "VernacStartTheoremProof",
            "b26068d8d3509d9ccaa4e306a041cc8c00cb5b3d"
        ],
        [
            "by move/proper_sub; rewrite sub1set.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma properIset A B C : (B \\proper A) || (C \\proper A) -> (B :&: C \\proper A).",
            "VernacStartTheoremProof",
            "ee4fc65a1edf583d1fedfb1e8c702471a274f569"
        ],
        [
            "by case/orP; apply: sub_proper_trans; rewrite (subsetIl, subsetIr).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma properI A B C : (A \\proper B :&: C) -> (A \\proper B) && (A \\proper C).",
            "VernacStartTheoremProof",
            "a702270b0cb43c16e098974e81e3d23cbddb89a5"
        ],
        [
            "move=> pAI; apply/andP.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by split; apply: (proper_sub_trans pAI); rewrite (subsetIl, subsetIr).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma properU A B C : (B :|: C \\proper A) -> (B \\proper A) && (C \\proper A).",
            "VernacStartTheoremProof",
            "3ef45c92d61ac8f30417ccd68c9edad2df5f99bd"
        ],
        [
            "move=> pUA; apply/andP.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by split; apply: sub_proper_trans pUA; rewrite (subsetUr, subsetUl).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma properD A B C : (A \\proper B :\\: C) -> (A \\proper B) && [disjoint A & C].",
            "VernacStartTheoremProof",
            "613a21df24e48f95df7fca049c088f6878ad913c"
        ],
        [
            "by rewrite setDE disjoints_subset => /properI/andP[-> /proper_sub].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End setOps.",
            "VernacEndSegment",
            "b9f710c03cb16508c6c4bed06f3848c220761f90"
        ],
        [
            "Arguments set1P {T x a}.",
            "VernacArguments",
            "8b539479cf30786684dbdf275594cbd68c56ae7e"
        ],
        [
            "Arguments set1_inj {T} [x1 x2].",
            "VernacArguments",
            "cc21301f18922f864eaad0a5d3dc8a3c9594daea"
        ],
        [
            "Arguments set2P {T x a b}.",
            "VernacArguments",
            "c0cb6bdcf6c3b3a815cf428c9ce25b44a56a59c5"
        ],
        [
            "Arguments setIdP {T x pA pB}.",
            "VernacArguments",
            "9bbad74d497e4afa26619976509a2ef553eee335"
        ],
        [
            "Arguments setIP {T x A B}.",
            "VernacArguments",
            "8d6033b4cfe1c9aee8fab99427f520409c574ab8"
        ],
        [
            "Arguments setU1P {T x a B}.",
            "VernacArguments",
            "4f7a0180c50b7bbc986100ec45c9f776e6a8efe3"
        ],
        [
            "Arguments setD1P {T x A b}.",
            "VernacArguments",
            "a6e7beaf38f9dd78f186875f77ae2b9fceabc5de"
        ],
        [
            "Arguments setUP {T x A B}.",
            "VernacArguments",
            "db70f6efe6e78fb36786ad48bd0ceae766f2dde6"
        ],
        [
            "Arguments setDP {T A B x}.",
            "VernacArguments",
            "73ff20299b82b47e3a61de4be1d69bbb356bade6"
        ],
        [
            "Arguments cards1P {T A}.",
            "VernacArguments",
            "ea49bf69c7115b3bdf3145586def1a8adda7fde4"
        ],
        [
            "Arguments setCP {T x A}.",
            "VernacArguments",
            "6270b73a3d46ee9f020ce4c2362f1d4326a20de1"
        ],
        [
            "Arguments setIidPl {T A B}.",
            "VernacArguments",
            "3a4dc5b22960d96e01df5c989d985405e430aa1d"
        ],
        [
            "Arguments setIidPr {T A B}.",
            "VernacArguments",
            "1c7c736439a787db269fa0350c94c58543a8db3d"
        ],
        [
            "Arguments setUidPl {T A B}.",
            "VernacArguments",
            "4521089e7403415670c9d40d4c5a1d5e39edff1a"
        ],
        [
            "Arguments setUidPr {T A B}.",
            "VernacArguments",
            "0aad7b9b581397b181113acbc246bad30889e249"
        ],
        [
            "Arguments setDidPl {T A B}.",
            "VernacArguments",
            "965a8b2810bb34f2fb35bdfec1a58c5c8d36d131"
        ],
        [
            "Arguments subsetIP {T A B C}.",
            "VernacArguments",
            "a298b241c5944d983da6beb32dd04db5a029f2e1"
        ],
        [
            "Arguments subUsetP {T A B C}.",
            "VernacArguments",
            "b678f8c377fb52e31cc5b664531171bd45c3cef1"
        ],
        [
            "Arguments subsetDP {T A B C}.",
            "VernacArguments",
            "eecbdaca2abb5de0bfac10ced0374de3c65402a7"
        ],
        [
            "Arguments subsetD1P {T A B x}.",
            "VernacArguments",
            "3a785d6af74fe32b6e636194213fed4eef70fa8b"
        ],
        [
            "Prenex Implicits set1.",
            "VernacExtend",
            "91663b8b1f6f561d8bb2c235c288e9ae67deb6dd"
        ],
        [
            "Hint Resolve subsetT_hint : core.",
            "VernacHints",
            "b35bd2e92d32d81105f92bf16890658692264d6b"
        ],
        [
            "Section setOpsAlgebra.",
            "VernacBeginSection",
            "82a92cd92c4bed04638c55c65e3f4c20383e55e0"
        ],
        [
            "Import Monoid.",
            "VernacImport",
            "945d0fabc47ba59d12a2e0a6ed64b9e2553c957e"
        ],
        [
            "Variable T : finType.",
            "VernacAssumption",
            "6349381da4d33cbc2eeaf1bade38718e15f7a2c9"
        ],
        [
            "Canonical setI_monoid := Law (@setIA T) (@setTI T) (@setIT T).",
            "VernacDefinition",
            "204faa34960f5c5b579e1fe1a726787831f9ea4c"
        ],
        [
            "Canonical setI_comoid := ComLaw (@setIC T).",
            "VernacDefinition",
            "950d622d73c297217c3200b754f51a8bfbfda29c"
        ],
        [
            "Canonical setI_muloid := MulLaw (@set0I T) (@setI0 T).",
            "VernacDefinition",
            "8e881fe6710fe6c52bb74760022110d3601454b2"
        ],
        [
            "Canonical setU_monoid := Law (@setUA T) (@set0U T) (@setU0 T).",
            "VernacDefinition",
            "ef7591d73f46af91e37a352eea50139cb4431448"
        ],
        [
            "Canonical setU_comoid := ComLaw (@setUC T).",
            "VernacDefinition",
            "b0cea0674ca924737f41242aeede29127f4371c2"
        ],
        [
            "Canonical setU_muloid := MulLaw (@setTU T) (@setUT T).",
            "VernacDefinition",
            "c941d4495957a0a8730ff5c60c9a0418fc4138eb"
        ],
        [
            "Canonical setI_addoid := AddLaw (@setUIl T) (@setUIr T).",
            "VernacDefinition",
            "c900b00a5e9d50850198a5ab473dd9b64d23ac59"
        ],
        [
            "Canonical setU_addoid := AddLaw (@setIUl T) (@setIUr T).",
            "VernacDefinition",
            "f1056d93e185ae07f19c7735efeac6c9779a0df3"
        ],
        [
            "End setOpsAlgebra.",
            "VernacEndSegment",
            "3d0a0cbcae8906b9b02491bb86856334e4622923"
        ],
        [
            "Section CartesianProd.",
            "VernacBeginSection",
            "9a207d18cc13499699c7079b9ea4ab8de8eddf02"
        ],
        [
            "Variables fT1 fT2 : finType.",
            "VernacAssumption",
            "0d31f6d5079c4aeeeb009229316d953b3f01262d"
        ],
        [
            "Variables (A1 : {set fT1}) (A2 : {set fT2}).",
            "VernacAssumption",
            "6057eddb5d85a9dd411cc4e7a36c1214d1a3a600"
        ],
        [
            "Definition setX := [set u | u.1 \\in A1 & u.2 \\in A2].",
            "VernacDefinition",
            "dfdb657c9768ef20092bd07c6a2d3c652252583a"
        ],
        [
            "Lemma in_setX x1 x2 : ((x1, x2) \\in setX) = (x1 \\in A1) && (x2 \\in A2).",
            "VernacStartTheoremProof",
            "65c362d588fc7e40f540d47c09ec5cad369fd57a"
        ],
        [
            "by rewrite inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setXP x1 x2 : reflect (x1 \\in A1 /\\ x2 \\in A2) ((x1, x2) \\in setX).",
            "VernacStartTheoremProof",
            "5319321ca1a46aa2e5fe4eb8d985cadc0acf86e9"
        ],
        [
            "by rewrite inE; apply: andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardsX : #|setX| = #|A1| * #|A2|.",
            "VernacStartTheoremProof",
            "f0c38b66ca2c1a0b675c3608bc894cadbe8644ad"
        ],
        [
            "by rewrite cardsE cardX.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End CartesianProd.",
            "VernacEndSegment",
            "f7ef0d6c7d81b7a2327318f391244500cf38fabb"
        ],
        [
            "Arguments setXP {fT1 fT2 A1 A2 x1 x2}.",
            "VernacArguments",
            "ac00acf91a2bb294f3b42c7664ab522454da62a7"
        ],
        [
            "Local Notation imset_def := (fun (aT rT : finType) f mD => [set y in @image_mem aT rT f mD]).",
            "VernacSyntacticDefinition",
            "653d7e2149ba8b3db41ed3efde884dda5d9525e2"
        ],
        [
            "Local Notation imset2_def := (fun (aT1 aT2 rT : finType) f (D1 : mem_pred aT1) (D2 : _ -> mem_pred aT2) => [set y in @image_mem _ rT (prod_curry f) (mem [pred u | D1 u.1 & D2 u.1 u.2])]).",
            "VernacSyntacticDefinition",
            "f2f6b03fd169d8ca023a0a88ca5db77251194bc6"
        ],
        [
            "Module Type ImsetSig.",
            "VernacDeclareModuleType",
            "47dc6cbbfb785420f53d1457176222dc65c97b79"
        ],
        [
            "Parameter imset : forall aT rT : finType, (aT -> rT) -> mem_pred aT -> {set rT}.",
            "VernacAssumption",
            "62b0902ad2cca5aa32fd86fce8ef9ae2e2dc6e43"
        ],
        [
            "Parameter imset2 : forall aT1 aT2 rT : finType, (aT1 -> aT2 -> rT) -> mem_pred aT1 -> (aT1 -> mem_pred aT2) -> {set rT}.",
            "VernacAssumption",
            "ace468f4275457dd01d91ff0c4552c48e6390b33"
        ],
        [
            "Axiom imsetE : imset = imset_def.",
            "VernacAssumption",
            "3957ca29f8b48f4374884d1cdd3454a8a88dec70"
        ],
        [
            "Axiom imset2E : imset2 = imset2_def.",
            "VernacAssumption",
            "5831379544b6ad4fa855b2f84cb9aa50db58a146"
        ],
        [
            "End ImsetSig.",
            "VernacEndSegment",
            "59b277e791d7bd7f11c8d75b7bccb73aa7fd84a9"
        ],
        [
            "Module Imset : ImsetSig.",
            "VernacDefineModule",
            "b4833f5098bfdc51c4332b91bb157c7e3c49520a"
        ],
        [
            "Definition imset := imset_def.",
            "VernacDefinition",
            "9b13db6edfd25bb0db85e768dbf50012e5d44fe4"
        ],
        [
            "Definition imset2 := imset2_def.",
            "VernacDefinition",
            "2d9dc4a0da16ee66bc598f03a4bf22ad3dec0dd3"
        ],
        [
            "Lemma imsetE : imset = imset_def.",
            "VernacStartTheoremProof",
            "9c43321b8938cacc9cae4629f6592e59c0fc4124"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imset2E : imset2 = imset2_def.",
            "VernacStartTheoremProof",
            "077fdaf9edf58ffae0295a2b4713c53cc6090a51"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Imset.",
            "VernacEndSegment",
            "3d33ad2e040f61f82c625c229ee8e34fb975b181"
        ],
        [
            "Notation imset := Imset.imset.",
            "VernacSyntacticDefinition",
            "2308c656f78f75701d67bff69621eb615516c39c"
        ],
        [
            "Notation imset2 := Imset.imset2.",
            "VernacSyntacticDefinition",
            "f98afc4cfd74e38eb38256b30c804f5bba43cebc"
        ],
        [
            "Canonical imset_unlock := Unlockable Imset.imsetE.",
            "VernacDefinition",
            "50f8c443395a07f244381b6aaee101a3aa64aede"
        ],
        [
            "Canonical imset2_unlock := Unlockable Imset.imset2E.",
            "VernacDefinition",
            "c8f75924ae9dd5823211c9b2175e2bde4b241f46"
        ],
        [
            "Definition preimset (aT : finType) rT f (R : mem_pred rT) := [set x : aT | in_mem (f x) R].",
            "VernacDefinition",
            "d5b05267213441e8716b0577e0d7a9b553171bcd"
        ],
        [
            "Notation \"f @^-1: A\" := (preimset f (mem A)) (at level 24) : set_scope.",
            "VernacNotation",
            "1d4de44279b0c0f37c80e23f211d5767ba4284f6"
        ],
        [
            "Notation \"f @: A\" := (imset f (mem A)) (at level 24) : set_scope.",
            "VernacNotation",
            "488319b50a1828273df443ea85cabc5e81404101"
        ],
        [
            "Notation \"f @2: ( A , B )\" := (imset2 f (mem A) (fun _ => mem B)) (at level 24, format \"f @2: ( A , B )\") : set_scope.",
            "VernacNotation",
            "4fbcc2174f6fe5bd40102a4bb612a24d09c23c52"
        ],
        [
            "Notation \"[ 'set' E | x 'in' A ]\" := ((fun x => E) @: A) (at level 0, E, x at level 99, format \"[ '[hv' 'set' E '/ ' | x 'in' A ] ']'\") : set_scope.",
            "VernacNotation",
            "81a548013617823bbd4eae06f33d9f6b30680c7f"
        ],
        [
            "Notation \"[ 'set' E | x 'in' A & P ]\" := [set E | x in [set x in A | P]] (at level 0, E, x at level 99, format \"[ '[hv' 'set' E '/ ' | x 'in' A '/ ' & P ] ']'\") : set_scope.",
            "VernacNotation",
            "3a4b084e7ae72961264b37a2576b353f0325502d"
        ],
        [
            "Notation \"[ 'set' E | x 'in' A , y 'in' B ]\" := (imset2 (fun x y => E) (mem A) (fun x => (mem B))) (at level 0, E, x, y at level 99, format \"[ '[hv' 'set' E '/ ' | x 'in' A , '/ ' y 'in' B ] ']'\" ) : set_scope.",
            "VernacNotation",
            "bde734dd985da5a740fb7b29f1b684d7c6518a0e"
        ],
        [
            "Notation \"[ 'set' E | x 'in' A , y 'in' B & P ]\" := [set E | x in A, y in [set y in B | P]] (at level 0, E, x, y at level 99, format \"[ '[hv' 'set' E '/ ' | x 'in' A , '/ ' y 'in' B '/ ' & P ] ']'\" ) : set_scope.",
            "VernacNotation",
            "28949d854b4b9330252daefad303b9725ffa44f6"
        ],
        [
            "Notation \"[ 'set' E | x : T 'in' A ]\" := ((fun x : T => E) @: A) (at level 0, E, x at level 99, only parsing) : set_scope.",
            "VernacNotation",
            "a3ad89cd9d710fbc24df5ae3efd685dc73fb9a07"
        ],
        [
            "Notation \"[ 'set' E | x : T 'in' A & P ]\" := [set E | x : T in [set x : T in A | P]] (at level 0, E, x at level 99, only parsing) : set_scope.",
            "VernacNotation",
            "b4aad68d72c2618b54be138e8b0d0c9abe772cc5"
        ],
        [
            "Notation \"[ 'set' E | x : T 'in' A , y : U 'in' B ]\" := (imset2 (fun (x : T) (y : U) => E) (mem A) (fun (x : T) => (mem B))) (at level 0, E, x, y at level 99, only parsing) : set_scope.",
            "VernacNotation",
            "9c1833692bf3a0e056756208e7c8c459ec037c59"
        ],
        [
            "Notation \"[ 'set' E | x : T 'in' A , y : U 'in' B & P ]\" := [set E | x : T in A, y : U in [set y : U in B | P]] (at level 0, E, x, y at level 99, only parsing) : set_scope.",
            "VernacNotation",
            "b6201d732750e3b42edfd2b2dd69ce8183878627"
        ],
        [
            "Local Notation predOfType T := (sort_of_simpl_pred (@pred_of_argType T)).",
            "VernacSyntacticDefinition",
            "db004a9d4dae1bedb1eb76024eceb6402751ecfa"
        ],
        [
            "Notation \"[ 'set' E | x : T ]\" := [set E | x : T in predOfType T] (at level 0, E, x at level 99, format \"[ '[hv' 'set' E '/ ' | x : T ] ']'\") : set_scope.",
            "VernacNotation",
            "4631a7ca87fe135543b61512cd6a51dbc5adf168"
        ],
        [
            "Notation \"[ 'set' E | x : T & P ]\" := [set E | x : T in [set x : T | P]] (at level 0, E, x at level 99, format \"[ '[hv' 'set' E '/ ' | x : T '/ ' & P ] ']'\") : set_scope.",
            "VernacNotation",
            "4996c5f9a73d0022bf06b90943c828afb4954668"
        ],
        [
            "Notation \"[ 'set' E | x : T , y : U 'in' B ]\" := [set E | x : T in predOfType T, y : U in B] (at level 0, E, x, y at level 99, format \"[ '[hv' 'set' E '/ ' | x : T , '/ ' y : U 'in' B ] ']'\") : set_scope.",
            "VernacNotation",
            "38b76c16aebe2bd15abd74d522a5adbb5fc1b3e6"
        ],
        [
            "Notation \"[ 'set' E | x : T , y : U 'in' B & P ]\" := [set E | x : T, y : U in [set y in B | P]] (at level 0, E, x, y at level 99, format \"[ '[hv ' 'set' E '/' | x : T , '/ ' y : U 'in' B '/' & P ] ']'\" ) : set_scope.",
            "VernacNotation",
            "7b6fe03a9386595f9c685fd7cb8817fa3135ba05"
        ],
        [
            "Notation \"[ 'set' E | x : T 'in' A , y : U ]\" := [set E | x : T in A, y : U in predOfType U] (at level 0, E, x, y at level 99, format \"[ '[hv' 'set' E '/ ' | x : T 'in' A , '/ ' y : U ] ']'\") : set_scope.",
            "VernacNotation",
            "6dcd8d403ed951184ba776c40214c488048367a5"
        ],
        [
            "Notation \"[ 'set' E | x : T 'in' A , y : U & P ]\" := [set E | x : T in A, y : U in [set y in P]] (at level 0, E, x, y at level 99, format \"[ '[hv' 'set' E '/ ' | x : T 'in' A , '/ ' y : U & P ] ']'\") : set_scope.",
            "VernacNotation",
            "5df8d083d8181ffb3c68137a353d9887b9ef2962"
        ],
        [
            "Notation \"[ 'set' E | x : T , y : U ]\" := [set E | x : T, y : U in predOfType U] (at level 0, E, x, y at level 99, format \"[ '[hv' 'set' E '/ ' | x : T , '/ ' y : U ] ']'\") : set_scope.",
            "VernacNotation",
            "6fba7eec7d4c2f9101677fb9e335bf5c3c249b8c"
        ],
        [
            "Notation \"[ 'set' E | x : T , y : U & P ]\" := [set E | x : T, y : U in [set y in P]] (at level 0, E, x, y at level 99, format \"[ '[hv' 'set' E '/ ' | x : T , '/ ' y : U & P ] ']'\") : set_scope.",
            "VernacNotation",
            "d25257f6d4004417bd0fda3057cb4a78ab740bd2"
        ],
        [
            "Notation \"[ 'set' E | x , y 'in' B ]\" := [set E | x : _, y : _ in B] (at level 0, E, x, y at level 99, only parsing) : set_scope.",
            "VernacNotation",
            "9f5c5e1afec0a88dde818989a8d2b81d177e6967"
        ],
        [
            "Notation \"[ 'set' E | x , y 'in' B & P ]\" := [set E | x : _, y : _ in B & P] (at level 0, E, x, y at level 99, only parsing) : set_scope.",
            "VernacNotation",
            "11827b7b0dca4afcab7fe60f6b1199d5d125d48a"
        ],
        [
            "Notation \"[ 'set' E | x 'in' A , y ]\" := [set E | x : _ in A, y : _] (at level 0, E, x, y at level 99, only parsing) : set_scope.",
            "VernacNotation",
            "ba266606dae352be05206d0cc5504b2a988a799a"
        ],
        [
            "Notation \"[ 'set' E | x 'in' A , y & P ]\" := [set E | x : _ in A, y : _ & P] (at level 0, E, x, y at level 99, only parsing) : set_scope.",
            "VernacNotation",
            "78f0f646ca57bdd93a3a9d0ce180f28fec882fa9"
        ],
        [
            "Notation \"[ 'set' E | x , y ]\" := [set E | x : _, y : _] (at level 0, E, x, y at level 99, only parsing) : set_scope.",
            "VernacNotation",
            "35de9f4b4eb0f840b9986c50b80d8b517318074d"
        ],
        [
            "Notation \"[ 'set' E | x , y & P ]\" := [set E | x : _, y : _ & P ] (at level 0, E, x, y at level 99, only parsing) : set_scope.",
            "VernacNotation",
            "4f01ec1debb0b6ef30d12349797cf97448ef06f3"
        ],
        [
            "Notation \"[ 'se' 't' E | x 'in' A , y 'in' B ]\" := (imset2 (fun x y => E) (mem A) (fun _ => mem B)) (at level 0, E, x, y at level 99, format \"[ '[hv' 'se' 't' E '/ ' | x 'in' A , '/ ' y 'in' B ] ']'\") : set_scope.",
            "VernacNotation",
            "94d3afd5b8d34c1535d782b784a35635e2451ca5"
        ],
        [
            "Notation \"[ 'se' 't' E | x 'in' A , y 'in' B & P ]\" := [se t E | x in A, y in [set y in B | P]] (at level 0, E, x, y at level 99, format \"[ '[hv ' 'se' 't' E '/' | x 'in' A , '/ ' y 'in' B '/' & P ] ']'\" ) : set_scope.",
            "VernacNotation",
            "dc0e811a501db934e0fea94f1f4e7e1bb3a28be4"
        ],
        [
            "Notation \"[ 'se' 't' E | x : T , y : U 'in' B ]\" := (imset2 (fun x (y : U) => E) (mem (predOfType T)) (fun _ => mem B)) (at level 0, E, x, y at level 99, format \"[ '[hv ' 'se' 't' E '/' | x : T , '/ ' y : U 'in' B ] ']'\") : set_scope.",
            "VernacNotation",
            "4002400878b4ef82ea6794f2ea2caaadd0c0ad16"
        ],
        [
            "Notation \"[ 'se' 't' E | x : T , y : U 'in' B & P ]\" := [se t E | x : T, y : U in [set y in B | P]] (at level 0, E, x, y at level 99, format \"[ '[hv ' 'se' 't' E '/' | x : T , '/ ' y : U 'in' B '/' & P ] ']'\" ) : set_scope.",
            "VernacNotation",
            "52870c31441fe630a8ddfce8cec962093698bd8d"
        ],
        [
            "Notation \"[ 'se' 't' E | x : T 'in' A , y : U ]\" := (imset2 (fun x y => E) (mem A) (fun _ : T => mem (predOfType U))) (at level 0, E, x, y at level 99, format \"[ '[hv' 'se' 't' E '/ ' | x : T 'in' A , '/ ' y : U ] ']'\") : set_scope.",
            "VernacNotation",
            "9a5c5ea89fc1288d44e32429eedfd3863d3d7149"
        ],
        [
            "Notation \"[ 'se' 't' E | x : T 'in' A , y : U & P ]\" := (imset2 (fun x (y : U) => E) (mem A) (fun _ : T => mem [set y \\in P])) (at level 0, E, x, y at level 99, format \"[ '[hv ' 'se' 't' E '/' | x : T 'in' A , '/ ' y : U '/' & P ] ']'\" ) : set_scope.",
            "VernacNotation",
            "6292e49db25c069da81bd06fbfcc022c794db455"
        ],
        [
            "Notation \"[ 'se' 't' E | x : T , y : U ]\" := [se t E | x : T, y : U in predOfType U] (at level 0, E, x, y at level 99, format \"[ '[hv' 'se' 't' E '/ ' | x : T , '/ ' y : U ] ']'\") : set_scope.",
            "VernacNotation",
            "e7ac26eff38578f910662ae184e9323d0c49d3a7"
        ],
        [
            "Notation \"[ 'se' 't' E | x : T , y : U & P ]\" := [se t E | x : T, y : U in [set y in P]] (at level 0, E, x, y at level 99, format \"[ '[hv' 'se' 't' E '/' | x : T , '/ ' y : U '/' & P ] ']'\") : set_scope.",
            "VernacNotation",
            "1130ea0d800a09673a45a1dd1db9d678c90c29b9"
        ],
        [
            "Section FunImage.",
            "VernacBeginSection",
            "c757aaed20ef512142ae49d18a13d7ec90ef53f8"
        ],
        [
            "Variables aT aT2 : finType.",
            "VernacAssumption",
            "3362f7580f15fd6611e4cd18ef99468938b8e6cb"
        ],
        [
            "Section ImsetTheory.",
            "VernacBeginSection",
            "8a0d29bcf263ecd588b77c32a77bcbdde651dff3"
        ],
        [
            "Variable rT : finType.",
            "VernacAssumption",
            "f3f924737963ca1711007527ea33e64499d0622a"
        ],
        [
            "Section ImsetProp.",
            "VernacBeginSection",
            "83d38088e37c0d085638eccd76545cfc9f33d5ee"
        ],
        [
            "Variables (f : aT -> rT) (f2 : aT -> aT2 -> rT).",
            "VernacAssumption",
            "7aa934598ff2d5a4a11863d254518706eead2783"
        ],
        [
            "Lemma imsetP D y : reflect (exists2 x, in_mem x D & y = f x) (y \\in imset f D).",
            "VernacStartTheoremProof",
            "c1403ba0ffec16bae16d7297e74c66d3d6100166"
        ],
        [
            "by rewrite [@imset]unlock inE; apply: imageP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variant imset2_spec D1 D2 y : Prop := Imset2spec x1 x2 of in_mem x1 D1 & in_mem x2 (D2 x1) & y = f2 x1 x2.",
            "VernacInductive",
            "f816b9ec57102eee5e19485a36ec3cf49b888afe"
        ],
        [
            "Lemma imset2P D1 D2 y : reflect (imset2_spec D1 D2 y) (y \\in imset2 f2 D1 D2).",
            "VernacStartTheoremProof",
            "c666bbddca9424a4ad7befe326c1749379128757"
        ],
        [
            "rewrite [@imset2]unlock inE.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: (iffP imageP) => [[[x1 x2] Dx12] | [x1 x2 Dx1 Dx2]] -> {y}.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by case/andP: Dx12; exists x1 x2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by exists (x1, x2); rewrite //= !inE Dx1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_imset (D : pred aT) x : x \\in D -> f x \\in f @: D.",
            "VernacStartTheoremProof",
            "ce221b5456562e2207a976b5b3e2a1d5b1211073"
        ],
        [
            "by move=> Dx; apply/imsetP; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imset0 : f @: set0 = set0.",
            "VernacStartTheoremProof",
            "91f473e6464577a98ff23d201fca5083359d6b5d"
        ],
        [
            "by apply/setP => y; rewrite inE; apply/imsetP=> [[x]]; rewrite inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imset_eq0 (A : {set aT}) : (f @: A == set0) = (A == set0).",
            "VernacStartTheoremProof",
            "4a4fa5471ef2624f82aacbbbc11bb10cba595120"
        ],
        [
            "have [-> | [x Ax]] := set_0Vmem A; first by rewrite imset0 !eqxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -!cards_eq0 (cardsD1 x) Ax (cardsD1 (f x)) mem_imset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imset_set1 x : f @: [set x] = [set f x].",
            "VernacStartTheoremProof",
            "1f744d7c4a4514fa80570bcdc109491b19793430"
        ],
        [
            "apply/setP => y.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by apply/imsetP/set1P=> [[x' /set1P-> //]| ->]; exists x; rewrite ?set11.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_imset2 (D : pred aT) (D2 : aT -> pred aT2) x x2 : x \\in D -> x2 \\in D2 x -> f2 x x2 \\in imset2 f2 (mem D) (fun x1 => mem (D2 x1)).",
            "VernacStartTheoremProof",
            "42bb6f54fcdb22c1e48372fc1c83115c73279a2b"
        ],
        [
            "by move=> Dx Dx2; apply/imset2P; exists x x2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_imset_pre (A : pred aT) (B : pred rT) : (f @: A \\subset B) = (A \\subset f @^-1: B).",
            "VernacStartTheoremProof",
            "b1d93fb5f54e8b9ee49ffadca4e4f7b3912de40e"
        ],
        [
            "apply/subsetP/subsetP=> [sfAB x Ax | sAf'B fx].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite inE sfAB ?mem_imset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case/imsetP=> x Ax ->; move/sAf'B: Ax; rewrite inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma preimsetS (A B : pred rT) : A \\subset B -> (f @^-1: A) \\subset (f @^-1: B).",
            "VernacStartTheoremProof",
            "df0a79712fe72edb9b023aea59f536405f4fe9fd"
        ],
        [
            "by move=> sAB; apply/subsetP=> y; rewrite !inE; apply: subsetP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma preimset0 : f @^-1: set0 = set0.",
            "VernacStartTheoremProof",
            "a72aa2244d6443a0387bf1ae7e195f0bd2432919"
        ],
        [
            "by apply/setP=> x; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma preimsetT : f @^-1: setT = setT.",
            "VernacStartTheoremProof",
            "6d57da56c81973ae67cb02f3eaaed22ae04e450f"
        ],
        [
            "by apply/setP=> x; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma preimsetI (A B : {set rT}) : f @^-1: (A :&: B) = (f @^-1: A) :&: (f @^-1: B).",
            "VernacStartTheoremProof",
            "ca1b58e49648610f72610a07a40d6fdcad8fc0f6"
        ],
        [
            "by apply/setP=> y; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma preimsetU (A B : {set rT}) : f @^-1: (A :|: B) = (f @^-1: A) :|: (f @^-1: B).",
            "VernacStartTheoremProof",
            "6043b524800c4915879c743a29c487c383817d74"
        ],
        [
            "by apply/setP=> y; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma preimsetD (A B : {set rT}) : f @^-1: (A :\\: B) = (f @^-1: A) :\\: (f @^-1: B).",
            "VernacStartTheoremProof",
            "fc6a913263faecffae448f6318489e4e15826f6d"
        ],
        [
            "by apply/setP=> y; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma preimsetC (A : {set rT}) : f @^-1: (~: A) = ~: f @^-1: A.",
            "VernacStartTheoremProof",
            "001002225480af326f97b34b8b77a83a2bf71a0d"
        ],
        [
            "by apply/setP=> y; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imsetS (A B : pred aT) : A \\subset B -> f @: A \\subset f @: B.",
            "VernacStartTheoremProof",
            "8a3e229b2fdac32777dc62b16934925f8670de33"
        ],
        [
            "move=> sAB; apply/subsetP=> _ /imsetP[x Ax ->].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by apply/imsetP; exists x; rewrite ?(subsetP sAB).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imset_proper (A B : {set aT}) : {in B &, injective f} -> A \\proper B -> f @: A \\proper f @: B.",
            "VernacStartTheoremProof",
            "5f63ed879bcb01c47a447273ba11a7001cef5a84"
        ],
        [
            "move=> injf /properP[sAB [x Bx nAx]]; rewrite properE imsetS //=.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "apply: contra nAx => sfBA.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "have: f x \\in f @: A by rewrite (subsetP sfBA) ?mem_imset.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by case/imsetP=> y Ay /injf-> //; apply: subsetP sAB y Ay.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma preimset_proper (A B : {set rT}) : B \\subset codom f -> A \\proper B -> (f @^-1: A) \\proper (f @^-1: B).",
            "VernacStartTheoremProof",
            "8e34e988d4ef95c8b3c338b19a561ad557479595"
        ],
        [
            "move=> sBc /properP[sAB [u Bu nAu]]; rewrite properE preimsetS //=.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by apply/subsetPn; exists (iinv (subsetP sBc _ Bu)); rewrite inE /= f_iinv.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imsetU (A B : {set aT}) : f @: (A :|: B) = (f @: A) :|: (f @: B).",
            "VernacStartTheoremProof",
            "9d0cd94d9bd52612da09ae91bdfe7c305573484a"
        ],
        [
            "apply/eqP; rewrite eqEsubset subUset.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite 2?imsetS (andbT, subsetUl, subsetUr) // andbT.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/subsetP=> _ /imsetP[x ABx ->]; apply/setUP.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by case/setUP: ABx => [Ax | Bx]; [left | right]; apply/imsetP; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imsetU1 a (A : {set aT}) : f @: (a |: A) = f a |: (f @: A).",
            "VernacStartTheoremProof",
            "2ebb85a8a1be236bd84f5881aa6c9c87a89b873e"
        ],
        [
            "by rewrite imsetU imset_set1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imsetI (A B : {set aT}) : {in A & B, injective f} -> f @: (A :&: B) = f @: A :&: f @: B.",
            "VernacStartTheoremProof",
            "b1aa29540fa43c7aa57e493aa2291d27c456c800"
        ],
        [
            "move=> injf; apply/eqP; rewrite eqEsubset subsetI.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "rewrite 2?imsetS (andTb, subsetIl, subsetIr) //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/subsetP=> _ /setIP[/imsetP[x Ax ->] /imsetP[z Bz /injf eqxz]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite mem_imset // inE Ax eqxz.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imset2Sl (A B : pred aT) (C : pred aT2) : A \\subset B -> f2 @2: (A, C) \\subset f2 @2: (B, C).",
            "VernacStartTheoremProof",
            "a13be02014208842093a65340781080f634ed52b"
        ],
        [
            "move=> sAB; apply/subsetP=> _ /imset2P[x y Ax Cy ->].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by apply/imset2P; exists x y; rewrite ?(subsetP sAB).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imset2Sr (A B : pred aT2) (C : pred aT) : A \\subset B -> f2 @2: (C, A) \\subset f2 @2: (C, B).",
            "VernacStartTheoremProof",
            "14ff2a40538ca9fcacf843692519425287659e28"
        ],
        [
            "move=> sAB; apply/subsetP=> _ /imset2P[x y Ax Cy ->].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by apply/imset2P; exists x y; rewrite ?(subsetP sAB).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imset2S (A B : pred aT) (A2 B2 : pred aT2) : A \\subset B -> A2 \\subset B2 -> f2 @2: (A, A2) \\subset f2 @2: (B, B2).",
            "VernacStartTheoremProof",
            "e6f5242d5c81148a4554961078f0fb092cc06934"
        ],
        [
            "by move=> /(imset2Sl B2) sBA /(imset2Sr A)/subset_trans->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ImsetProp.",
            "VernacEndSegment",
            "5180b70664fa6aa64c3273fe622da1d813207055"
        ],
        [
            "Implicit Types (f g : aT -> rT) (D : {set aT}) (R : pred rT).",
            "VernacReserve",
            "d218dee75ca4687afde2256f96a7b020282b5b5f"
        ],
        [
            "Lemma eq_preimset f g R : f =1 g -> f @^-1: R = g @^-1: R.",
            "VernacStartTheoremProof",
            "e802cb8dc11c90df6c0a06602858ef953d484247"
        ],
        [
            "by move=> eqfg; apply/setP => y; rewrite !inE eqfg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_imset f g D : f =1 g -> f @: D = g @: D.",
            "VernacStartTheoremProof",
            "fda18fa6983498cc7a8a3a900c090016714d977f"
        ],
        [
            "move=> eqfg; apply/setP=> y.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by apply/imsetP/imsetP=> [] [x Dx ->]; exists x; rewrite ?eqfg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_in_imset f g D : {in D, f =1 g} -> f @: D = g @: D.",
            "VernacStartTheoremProof",
            "2c530bc34bd1f3efda313e804c280fb042d941fb"
        ],
        [
            "move=> eqfg; apply/setP => y.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by apply/imsetP/imsetP=> [] [x Dx ->]; exists x; rewrite ?eqfg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_in_imset2 (f g : aT -> aT2 -> rT) (D : pred aT) (D2 : pred aT2) : {in D & D2, f =2 g} -> f @2: (D, D2) = g @2: (D, D2).",
            "VernacStartTheoremProof",
            "47fb2c53699555fc4d29631af85fc5ea18763531"
        ],
        [
            "move=> eqfg; apply/setP => y.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by apply/imset2P/imset2P=> [] [x x2 Dx Dx2 ->]; exists x x2; rewrite ?eqfg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ImsetTheory.",
            "VernacEndSegment",
            "30fe5992ebc1acb14993398fb3af4b8b40c28d70"
        ],
        [
            "Lemma imset2_pair (A : {set aT}) (B : {set aT2}) : [set (x, y) | x in A, y in B] = setX A B.",
            "VernacStartTheoremProof",
            "ea953c65d156cf9228c7c2843f0c237e7e0f8050"
        ],
        [
            "apply/setP=> [[x y]]; rewrite !inE /=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by apply/imset2P/andP=> [[_ _ _ _ [-> ->]//]| []]; exists x y.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setXS (A1 B1 : {set aT}) (A2 B2 : {set aT2}) : A1 \\subset B1 -> A2 \\subset B2 -> setX A1 A2 \\subset setX B1 B2.",
            "VernacStartTheoremProof",
            "565a271af04c033a33fa5cec2cff56c8e1a9591b"
        ],
        [
            "by move=> sAB1 sAB2; rewrite -!imset2_pair imset2S.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FunImage.",
            "VernacEndSegment",
            "ae6c87a017cd8ff00e93921699dc05f64420dba5"
        ],
        [
            "Arguments imsetP {aT rT f D y}.",
            "VernacArguments",
            "1faadb869b6b36c9a1fe7b0ab1db98ee97aee3f3"
        ],
        [
            "Arguments imset2P {aT aT2 rT f2 D1 D2 y}.",
            "VernacArguments",
            "ebcdbeb290f7109c6ce226b6f8bfb3b2b1d7d256"
        ],
        [
            "Section BigOps.",
            "VernacBeginSection",
            "244b29578809d8ae01f84d1a2db56a6cf7ba588f"
        ],
        [
            "Variables (R : Type) (idx : R).",
            "VernacAssumption",
            "6acd8e9e0005a143b53e10096bda1ce4c50a9d10"
        ],
        [
            "Variables (op : Monoid.law idx) (aop : Monoid.com_law idx).",
            "VernacAssumption",
            "419ba643bd8c3371c9701a9cbfceb66c77d72349"
        ],
        [
            "Variables I J : finType.",
            "VernacAssumption",
            "27224228627277828db0bd8dbcb823278abba4b2"
        ],
        [
            "Implicit Type A B : {set I}.",
            "VernacReserve",
            "361613fc0b82b129d1da393bbb4c91fa930bb173"
        ],
        [
            "Implicit Type h : I -> J.",
            "VernacReserve",
            "699ca6317c7dcf9fe0e64197588ae60dbe4bcfa3"
        ],
        [
            "Implicit Type P : pred I.",
            "VernacReserve",
            "f0631cda8f869743c295189070e37edf36c8a7e6"
        ],
        [
            "Implicit Type F : I -> R.",
            "VernacReserve",
            "e8f049fa605012c9acabdb4bec7c410b6cba7b95"
        ],
        [
            "Lemma big_set0 F : \\big[op/idx]_(i in set0) F i = idx.",
            "VernacStartTheoremProof",
            "df6afdbd89a1a225414f241156767418ed9a6dcb"
        ],
        [
            "by apply: big_pred0 => i; rewrite inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_set1 a F : \\big[op/idx]_(i in [set a]) F i = F a.",
            "VernacStartTheoremProof",
            "8d4136cda64646fcda755c75925b5bd1de1b8de4"
        ],
        [
            "by apply: big_pred1 => i; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_setIDdep A B P F : \\big[aop/idx]_(i in A | P i) F i = aop (\\big[aop/idx]_(i in A :&: B | P i) F i) (\\big[aop/idx]_(i in A :\\: B | P i) F i).",
            "VernacStartTheoremProof",
            "83d073604a29670acf68f452e85d3719fda1a83a"
        ],
        [
            "rewrite (bigID (mem B)) setDE.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by congr (aop _ _); apply: eq_bigl => i; rewrite !inE andbAC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_setID A B F : \\big[aop/idx]_(i in A) F i = aop (\\big[aop/idx]_(i in A :&: B) F i) (\\big[aop/idx]_(i in A :\\: B) F i).",
            "VernacStartTheoremProof",
            "fca87b8a84f8082574fb8c86b18719ac897af830"
        ],
        [
            "rewrite (bigID (mem B)) !(eq_bigl _ _ (in_set _)) //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by congr (aop _); apply: eq_bigl => i; rewrite andbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_setD1 a A F : a \\in A -> \\big[aop/idx]_(i in A) F i = aop (F a) (\\big[aop/idx]_(i in A :\\ a) F i).",
            "VernacStartTheoremProof",
            "4e7143666e083aaa538bacffeba17ff1655027dc"
        ],
        [
            "move=> Aa; rewrite (bigD1 a Aa); congr (aop _).",
            "VernacExtend",
            "485e46f06ecb626ff6a640f6969694ae3ffba974"
        ],
        [
            "by apply: eq_bigl => x; rewrite !inE andbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_setU1 a A F : a \\notin A -> \\big[aop/idx]_(i in a |: A) F i = aop (F a) (\\big[aop/idx]_(i in A) F i).",
            "VernacStartTheoremProof",
            "58bd41da19ab0fd8396857f76a47752edd0ae069"
        ],
        [
            "by move=> notAa; rewrite (@big_setD1 a) ?setU11 //= setU1K.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_imset h (A : pred I) G : {in A &, injective h} -> \\big[aop/idx]_(j in h @: A) G j = \\big[aop/idx]_(i in A) G (h i).",
            "VernacStartTheoremProof",
            "11de0274cb23033a05014fe7700bf4ada74cd329"
        ],
        [
            "move=> injh; pose hA := mem (image h A).",
            "VernacExtend",
            "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
        ],
        [
            "have [x0 Ax0 | A0] := pickP A; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !big_pred0 // => x; apply/imsetP=> [[i]]; rewrite unfold_in A0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (eq_bigl hA) => [|j]; last by apply/imsetP/imageP.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "pose h' j := if insub j : {? j | hA j} is Some u then iinv (svalP u) else x0.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "rewrite (reindex_onto h h') => [|j hAj]; rewrite {}/h'; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite (insubT hA hAj) f_iinv.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: eq_bigl => i; case: insubP => [u -> /= def_u | nhAhi].",
            "VernacExtend",
            "20ec428e50c31e1399aee62c5a532bc8417a4b29"
        ],
        [
            "set i' := iinv _; have Ai' : i' \\in A := mem_iinv (svalP u).",
            "VernacExtend",
            "5a669f4ad2118b005921530a069ac8f03fd7f32b"
        ],
        [
            "by apply/eqP/idP=> [<- // | Ai]; apply: injh; rewrite ?f_iinv.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "symmetry; rewrite (negbTE nhAhi); apply/idP=> Ai.",
            "VernacExtend",
            "b531cdfdd16edb48e06651aa0838bf384aa38229"
        ],
        [
            "by case/imageP: nhAhi; exists i.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma partition_big_imset h (A : pred I) F : \\big[aop/idx]_(i in A) F i = \\big[aop/idx]_(j in h @: A) \\big[aop/idx]_(i in A | h i == j) F i.",
            "VernacStartTheoremProof",
            "c268c1bb1fa9ba08ef0dd695893271ff396397d3"
        ],
        [
            "by apply: partition_big => i Ai; apply/imsetP; exists i.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End BigOps.",
            "VernacEndSegment",
            "3aa66cf18aa1c85cd4ebde2fd6bfbb434a1167dc"
        ],
        [
            "Arguments big_setID [R idx aop I A].",
            "VernacArguments",
            "c5bc105e08c60317a6e369a6231f33d88ef040df"
        ],
        [
            "Arguments big_setD1 [R idx aop I] a [A F].",
            "VernacArguments",
            "8c529d51fa30e2acc4e1a0b49f177e809a95207a"
        ],
        [
            "Arguments big_setU1 [R idx aop I] a [A F].",
            "VernacArguments",
            "5373952a767fe8c72db2114a3c464b9d8d7a6cce"
        ],
        [
            "Arguments big_imset [R idx aop I J h A].",
            "VernacArguments",
            "441b2b5a3086e218d30b1443c1392b5bf99a4eb8"
        ],
        [
            "Arguments partition_big_imset [R idx aop I J].",
            "VernacArguments",
            "0125ad96c6844adab164abddfb0e50f18c90ba3e"
        ],
        [
            "Section Fun2Set1.",
            "VernacBeginSection",
            "f813ec9f834d90d140ed4891122b90ddd83801e1"
        ],
        [
            "Variables aT1 aT2 rT : finType.",
            "VernacAssumption",
            "fe70fe7053054499e8be51bf915298afda7a88ac"
        ],
        [
            "Variables (f : aT1 -> aT2 -> rT).",
            "VernacAssumption",
            "23e869998092f9338c000dad8cddaa45a19ea54c"
        ],
        [
            "Lemma imset2_set1l x1 (D2 : pred aT2) : f @2: ([set x1], D2) = f x1 @: D2.",
            "VernacStartTheoremProof",
            "93a39301f920af0e486e2abf4186480e5552f531"
        ],
        [
            "apply/setP=> y; apply/imset2P/imsetP=> [[x x2 /set1P->]| [x2 Dx2 ->]].",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by exists x2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by exists x1 x2; rewrite ?set11.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imset2_set1r x2 (D1 : pred aT1) : f @2: (D1, [set x2]) = f^~ x2 @: D1.",
            "VernacStartTheoremProof",
            "b2da9eed446e056a227329ab6cc02ac352ef978d"
        ],
        [
            "apply/setP=> y; apply/imset2P/imsetP=> [[x1 x Dx1 /set1P->]| [x1 Dx1 ->]].",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by exists x1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by exists x1 x2; rewrite ?set11.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Fun2Set1.",
            "VernacEndSegment",
            "5fcb6f40cf75f5c03f0f40fbed12fcee21af0166"
        ],
        [
            "Section CardFunImage.",
            "VernacBeginSection",
            "c5e10df10fd7d94735962f05dc72e9b1165fd9cb"
        ],
        [
            "Variables aT aT2 rT : finType.",
            "VernacAssumption",
            "fddff42ee20527e05445ceee6cd78c561c42dda9"
        ],
        [
            "Variables (f : aT -> rT) (g : rT -> aT) (f2 : aT -> aT2 -> rT).",
            "VernacAssumption",
            "64457f775e257de69abfc02b61d423f8f301ff41"
        ],
        [
            "Variables (D : pred aT) (D2 : pred aT).",
            "VernacAssumption",
            "b45e15aeb1925cbef9c5838090b7df34a67f643e"
        ],
        [
            "Lemma imset_card : #|f @: D| = #|image f D|.",
            "VernacStartTheoremProof",
            "ffa84cff93703ceba60b0350f62eb05f3c1d0c02"
        ],
        [
            "by rewrite [@imset]unlock cardsE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_imset_card : #|f @: D| <= #|D|.",
            "VernacStartTheoremProof",
            "bba3edaf848deade041f15ba9e0f8c56efa3f2ef"
        ],
        [
            "by rewrite imset_card leq_image_card.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_in_imset : {in D &, injective f} -> #|f @: D| = #|D|.",
            "VernacStartTheoremProof",
            "8ece94ef860dd34a6154268926745478731bbc11"
        ],
        [
            "by move=> injf; rewrite imset_card card_in_image.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_imset : injective f -> #|f @: D| = #|D|.",
            "VernacStartTheoremProof",
            "4b4da3e766085cb0bb38ad7b378d7efab3e80ffd"
        ],
        [
            "by move=> injf; rewrite imset_card card_image.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imset_injP : reflect {in D &, injective f} (#|f @: D| == #|D|).",
            "VernacStartTheoremProof",
            "5f643d600ffa564b0a78cf7b16171c58f776f834"
        ],
        [
            "by rewrite [@imset]unlock cardsE; apply: image_injP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma can2_in_imset_pre : {in D, cancel f g} -> {on D, cancel g & f} -> f @: D = g @^-1: D.",
            "VernacStartTheoremProof",
            "b1662af93d71c351bcf70cdb1f78e6d8565c438b"
        ],
        [
            "move=> fK gK; apply/setP=> y; rewrite inE.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by apply/imsetP/idP=> [[x Ax ->] | Agy]; last exists (g y); rewrite ?(fK, gK).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma can2_imset_pre : cancel f g -> cancel g f -> f @: D = g @^-1: D.",
            "VernacStartTheoremProof",
            "e42125e34ad3fe1e3e7290bf1c3934632bd4c72b"
        ],
        [
            "by move=> fK gK; apply: can2_in_imset_pre; apply: in1W.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End CardFunImage.",
            "VernacEndSegment",
            "f354e161383e4ad9de28825369c173cd804f30ad"
        ],
        [
            "Arguments imset_injP {aT rT f D}.",
            "VernacArguments",
            "b2f6a2bebdd0f45dafcab24c5df316c3cc91fdff"
        ],
        [
            "Lemma on_card_preimset (aT rT : finType) (f : aT -> rT) (R : pred rT) : {on R, bijective f} -> #|f @^-1: R| = #|R|.",
            "VernacStartTheoremProof",
            "759df8bef7719d2aa3ca1a7923e79da5a6b6d2dc"
        ],
        [
            "case=> g fK gK; rewrite -(can2_in_imset_pre gK) // card_in_imset //.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "exact: can_in_inj gK.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma can_imset_pre (T : finType) f g (A : {set T}) : cancel f g -> f @: A = g @^-1: A :> {set T}.",
            "VernacStartTheoremProof",
            "e8914c57317b60228a1c97d3302f32bc96c774cd"
        ],
        [
            "move=> fK; apply: can2_imset_pre => // x.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "suffices fx: x \\in codom f by rewrite -(f_iinv fx) fK.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "exact/(subset_cardP (card_codom (can_inj fK)))/subsetP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imset_id (T : finType) (A : {set T}) : [set x | x in A] = A.",
            "VernacStartTheoremProof",
            "bfa3bc81505f60d9c18c5e091a4c48247445e892"
        ],
        [
            "by apply/setP=> x; rewrite (@can_imset_pre _ _ id) ?inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_preimset (T : finType) (f : T -> T) (A : {set T}) : injective f -> #|f @^-1: A| = #|A|.",
            "VernacStartTheoremProof",
            "9789929f048568dbf5ff9ff29af4d3e702a6ce8e"
        ],
        [
            "move=> injf; apply: on_card_preimset; apply: onW_bij.",
            "VernacExtend",
            "e374b6c583d80c9d8b579c06df7953342f99f751"
        ],
        [
            "have ontof: _ \\in codom f by apply/(subset_cardP (card_codom injf))/subsetP.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists (fun x => iinv (ontof x)) => x; rewrite (f_iinv, iinv_f).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_powerset (T : finType) (A : {set T}) : #|powerset A| = 2 ^ #|A|.",
            "VernacStartTheoremProof",
            "edcf081870aeb95b8f94a9bf6fbb8715acdf588d"
        ],
        [
            "rewrite -card_bool -(card_pffun_on false) -(card_imset _ val_inj).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: eq_card => f; pose sf := false.-support f; pose D := finset sf.",
            "VernacExtend",
            "889ae7f2e26411ea40ec1d82e3ab2ec00ff93ae5"
        ],
        [
            "have sDA: (D \\subset A) = (sf \\subset A) by apply: eq_subset; apply: in_set.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have eq_sf x : sf x = f x by rewrite /= negb_eqb addbF.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have valD: val D = f by rewrite /D unlock; apply/ffunP=> x; rewrite ffunE eq_sf.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/imsetP/pffun_onP=> [[B] | [sBA _]]; last by exists D; rewrite // inE ?sDA.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite inE -sDA -valD => sBA /val_inj->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section FunImageComp.",
            "VernacBeginSection",
            "3d12bbcd65842abf659ee9960aab3e144030b00f"
        ],
        [
            "Variables T T' U : finType.",
            "VernacAssumption",
            "cfa66acf5c39efa6b0d783e9dceca741f874cfc8"
        ],
        [
            "Lemma imset_comp (f : T' -> U) (g : T -> T') (H : pred T) : (f \\o g) @: H = f @: (g @: H).",
            "VernacStartTheoremProof",
            "60688a184c89a956aad815bbbfb89dcb10572477"
        ],
        [
            "apply/setP/subset_eqP/andP.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "split; apply/subsetP=> _ /imsetP[x0 Hx0 ->]; apply/imsetP.",
            "VernacExtend",
            "5a7ce30d05acc4c863972507df59e11ecae4c5f9"
        ],
        [
            "by exists (g x0); first apply: mem_imset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move/imsetP: Hx0 => [x1 Hx1 ->]; exists x1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FunImageComp.",
            "VernacEndSegment",
            "36a927095c481bcbf3705d88fa79faea65204a8c"
        ],
        [
            "Notation \"\\bigcup_ ( i <- r | P ) F\" := (\\big[@setU _/set0]_(i <- r | P) F%SET) : set_scope.",
            "VernacNotation",
            "f22bfa69e6f5d2883aac713c53967577a730b935"
        ],
        [
            "Notation \"\\bigcup_ ( i <- r ) F\" := (\\big[@setU _/set0]_(i <- r) F%SET) : set_scope.",
            "VernacNotation",
            "583eeae814a226596f4689fda86042d40bfe1784"
        ],
        [
            "Notation \"\\bigcup_ ( m <= i < n | P ) F\" := (\\big[@setU _/set0]_(m <= i < n | P%B) F%SET) : set_scope.",
            "VernacNotation",
            "750b1d29338fedf33a32d0e878f1cfe981ed76e9"
        ],
        [
            "Notation \"\\bigcup_ ( m <= i < n ) F\" := (\\big[@setU _/set0]_(m <= i < n) F%SET) : set_scope.",
            "VernacNotation",
            "2883e05be4c6d9f3f73a2acb823d3a75f89476e1"
        ],
        [
            "Notation \"\\bigcup_ ( i | P ) F\" := (\\big[@setU _/set0]_(i | P%B) F%SET) : set_scope.",
            "VernacNotation",
            "1511de6df15b786aaf48ed44c0fb5ab15ff52a3f"
        ],
        [
            "Notation \"\\bigcup_ i F\" := (\\big[@setU _/set0]_i F%SET) : set_scope.",
            "VernacNotation",
            "f4b6406f74272fecf2b497cf69383ccb5bd91c0a"
        ],
        [
            "Notation \"\\bigcup_ ( i : t | P ) F\" := (\\big[@setU _/set0]_(i : t | P%B) F%SET) (only parsing): set_scope.",
            "VernacNotation",
            "da98d39fe4456cf9af29e5ca87b6e76f2584da77"
        ],
        [
            "Notation \"\\bigcup_ ( i : t ) F\" := (\\big[@setU _/set0]_(i : t) F%SET) (only parsing) : set_scope.",
            "VernacNotation",
            "15dd7e506ffb6530d38e124e3780c2570c755ea8"
        ],
        [
            "Notation \"\\bigcup_ ( i < n | P ) F\" := (\\big[@setU _/set0]_(i < n | P%B) F%SET) : set_scope.",
            "VernacNotation",
            "ff36c0eab8c02c7bbb23e57af5b7887eea19dd27"
        ],
        [
            "Notation \"\\bigcup_ ( i < n ) F\" := (\\big[@setU _/set0]_ (i < n) F%SET) : set_scope.",
            "VernacNotation",
            "81583ffe9adc523c0f9718e910490b378dd54e9c"
        ],
        [
            "Notation \"\\bigcup_ ( i 'in' A | P ) F\" := (\\big[@setU _/set0]_(i in A | P%B) F%SET) : set_scope.",
            "VernacNotation",
            "18423c6314b5542082e5dcf445d79090a2330e0a"
        ],
        [
            "Notation \"\\bigcup_ ( i 'in' A ) F\" := (\\big[@setU _/set0]_(i in A) F%SET) : set_scope.",
            "VernacNotation",
            "cb24ee244661b89a9f3c5d7bb851f4c95b508bca"
        ],
        [
            "Notation \"\\bigcap_ ( i <- r | P ) F\" := (\\big[@setI _/setT]_(i <- r | P%B) F%SET) : set_scope.",
            "VernacNotation",
            "3fbb67249aad5721582667f3636c4dbb33307401"
        ],
        [
            "Notation \"\\bigcap_ ( i <- r ) F\" := (\\big[@setI _/setT]_(i <- r) F%SET) : set_scope.",
            "VernacNotation",
            "79cd23dc8965e5ea1d9b2aa297cc80a838a76ca7"
        ],
        [
            "Notation \"\\bigcap_ ( m <= i < n | P ) F\" := (\\big[@setI _/setT]_(m <= i < n | P%B) F%SET) : set_scope.",
            "VernacNotation",
            "6d35cac91b011bb83ef57b540192b309e39b404a"
        ],
        [
            "Notation \"\\bigcap_ ( m <= i < n ) F\" := (\\big[@setI _/setT]_(m <= i < n) F%SET) : set_scope.",
            "VernacNotation",
            "d3fd72b2646a4acb129ad954a6b760f71daaff20"
        ],
        [
            "Notation \"\\bigcap_ ( i | P ) F\" := (\\big[@setI _/setT]_(i | P%B) F%SET) : set_scope.",
            "VernacNotation",
            "d0b3de563c72c06dd3fd30806abd58d57d37b449"
        ],
        [
            "Notation \"\\bigcap_ i F\" := (\\big[@setI _/setT]_i F%SET) : set_scope.",
            "VernacNotation",
            "30cf418d867979d7b634a52f523c0ca09009967a"
        ],
        [
            "Notation \"\\bigcap_ ( i : t | P ) F\" := (\\big[@setI _/setT]_(i : t | P%B) F%SET) (only parsing): set_scope.",
            "VernacNotation",
            "4eb69e704a11869ad7c284bea52546bfbb4cf084"
        ],
        [
            "Notation \"\\bigcap_ ( i : t ) F\" := (\\big[@setI _/setT]_(i : t) F%SET) (only parsing) : set_scope.",
            "VernacNotation",
            "c6cc02b309939076bd6f9f1c64434cf831924f2f"
        ],
        [
            "Notation \"\\bigcap_ ( i < n | P ) F\" := (\\big[@setI _/setT]_(i < n | P%B) F%SET) : set_scope.",
            "VernacNotation",
            "4e4b3fcc91917e127ee9e25a61bb80216332e456"
        ],
        [
            "Notation \"\\bigcap_ ( i < n ) F\" := (\\big[@setI _/setT]_(i < n) F%SET) : set_scope.",
            "VernacNotation",
            "af9a33f60f50a5cce755c5fc5c961fa36d2ede76"
        ],
        [
            "Notation \"\\bigcap_ ( i 'in' A | P ) F\" := (\\big[@setI _/setT]_(i in A | P%B) F%SET) : set_scope.",
            "VernacNotation",
            "93f2725a9db9d87639d265aaf18985d39ff921d3"
        ],
        [
            "Notation \"\\bigcap_ ( i 'in' A ) F\" := (\\big[@setI _/setT]_(i in A) F%SET) : set_scope.",
            "VernacNotation",
            "01361c4b1a30aeae384a569255cc05c08f1f842b"
        ],
        [
            "Section BigSetOps.",
            "VernacBeginSection",
            "89e678dc53fedd3ac44ccb756bf82870a7598144"
        ],
        [
            "Variables T I : finType.",
            "VernacAssumption",
            "c43775e1d4cd71d2689f826ef24bd08352371e01"
        ],
        [
            "Implicit Types (U : pred T) (P : pred I) (A B : {set I}) (F : I -> {set T}).",
            "VernacReserve",
            "432e71829b70e9ce7bf05396b7bd41988bc8826c"
        ],
        [
            "Lemma bigcup_sup j P F : P j -> F j \\subset \\bigcup_(i | P i) F i.",
            "VernacStartTheoremProof",
            "3fa8f41565676014e9e28a818cc11604e4468aa9"
        ],
        [
            "by move=> Pj; rewrite (bigD1 j) //= subsetUl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bigcup_max j U P F : P j -> U \\subset F j -> U \\subset \\bigcup_(i | P i) F i.",
            "VernacStartTheoremProof",
            "b930d6de02e9bf6f3a7408b4e4ad91d6517d37a0"
        ],
        [
            "by move=> Pj sUF; apply: subset_trans (bigcup_sup _ Pj).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bigcupP x P F : reflect (exists2 i, P i & x \\in F i) (x \\in \\bigcup_(i | P i) F i).",
            "VernacStartTheoremProof",
            "ecffe1669f85a51723d8fea1ba6ce67eb30bda0b"
        ],
        [
            "apply: (iffP idP) => [|[i Pi]]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: subsetP x; apply: bigcup_sup.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by elim/big_rec: _ => [|i _ Pi _ /setUP[|//]]; [rewrite inE | exists i].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bigcupsP U P F : reflect (forall i, P i -> F i \\subset U) (\\bigcup_(i | P i) F i \\subset U).",
            "VernacStartTheoremProof",
            "5ed739de03955b10938de0dc4b9e7f90b93166c5"
        ],
        [
            "apply: (iffP idP) => [sFU i Pi| sFU].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by apply: subset_trans sFU; apply: bigcup_sup.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply/subsetP=> x /bigcupP[i Pi]; apply: (subsetP (sFU i Pi)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bigcup_disjoint U P F : (forall i, P i -> [disjoint U & F i]) -> [disjoint U & \\bigcup_(i | P i) F i].",
            "VernacStartTheoremProof",
            "3fd6db40396e6a21464ad236749294d21d62779b"
        ],
        [
            "move=> dUF; rewrite disjoint_sym disjoint_subset.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by apply/bigcupsP=> i /dUF; rewrite disjoint_sym disjoint_subset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bigcup_setU A B F : \\bigcup_(i in A :|: B) F i = (\\bigcup_(i in A) F i) :|: (\\bigcup_ (i in B) F i).",
            "VernacStartTheoremProof",
            "036795ecd9cee6afa16a303ed689179d20831579"
        ],
        [
            "apply/setP=> x; apply/bigcupP/setUP=> [[i] | ].",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by case/setUP; [left | right]; apply/bigcupP; exists i.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case=> /bigcupP[i Pi]; exists i; rewrite // inE Pi ?orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bigcup_seq r F : \\bigcup_(i <- r) F i = \\bigcup_(i in r) F i.",
            "VernacStartTheoremProof",
            "22ba082078c9e2de91551a023cae607401583bae"
        ],
        [
            "elim: r => [|i r IHr]; first by rewrite big_nil big_pred0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite big_cons {}IHr; case r_i: (i \\in r).",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "rewrite (setUidPr _) ?bigcup_sup //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: eq_bigl => j; rewrite !inE; case: eqP => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (bigD1 i (mem_head i r)) /=; congr (_ :|: _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by apply: eq_bigl => j /=; rewrite andbC; case: eqP => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bigcap_inf j P F : P j -> \\bigcap_(i | P i) F i \\subset F j.",
            "VernacStartTheoremProof",
            "3420dcbb037c61509f2a65693fddb0e1c48cad5f"
        ],
        [
            "by move=> Pj; rewrite (bigD1 j) //= subsetIl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bigcap_min j U P F : P j -> F j \\subset U -> \\bigcap_(i | P i) F i \\subset U.",
            "VernacStartTheoremProof",
            "8ce3151ac0c8834a48037bf8f632638604482bd8"
        ],
        [
            "by move=> Pj; apply: subset_trans (bigcap_inf _ Pj).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bigcapsP U P F : reflect (forall i, P i -> U \\subset F i) (U \\subset \\bigcap_(i | P i) F i).",
            "VernacStartTheoremProof",
            "a8b9bc442e4328be75a5c99e69e3ed93f3711f9b"
        ],
        [
            "apply: (iffP idP) => [sUF i Pi | sUF].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by apply: subset_trans sUF _; apply: bigcap_inf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim/big_rec: _ => [|i V Pi sUV]; apply/subsetP=> x Ux; rewrite inE //.",
            "VernacExtend",
            "8c9e5024ec19e13281e0187dab3d65b93b116a6a"
        ],
        [
            "by rewrite !(subsetP _ x Ux) ?sUF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bigcapP x P F : reflect (forall i, P i -> x \\in F i) (x \\in \\bigcap_(i | P i) F i).",
            "VernacStartTheoremProof",
            "57b98929891e6f241aab69c5eab84d9947000220"
        ],
        [
            "rewrite -sub1set.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: (iffP (bigcapsP _ _ _)) => Fx i /Fx; rewrite sub1set.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setC_bigcup J r (P : pred J) (F : J -> {set T}) : ~: (\\bigcup_(j <- r | P j) F j) = \\bigcap_(j <- r | P j) ~: F j.",
            "VernacStartTheoremProof",
            "b3ec75f5590b18489b6f94f785aa7d779d8c2004"
        ],
        [
            "by apply: big_morph => [A B|]; rewrite ?setC0 ?setCU.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setC_bigcap J r (P : pred J) (F : J -> {set T}) : ~: (\\bigcap_(j <- r | P j) F j) = \\bigcup_(j <- r | P j) ~: F j.",
            "VernacStartTheoremProof",
            "c6ebd9ef724479d5d8dffa524851914c19c06707"
        ],
        [
            "by apply: big_morph => [A B|]; rewrite ?setCT ?setCI.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bigcap_setU A B F : (\\bigcap_(i in A :|: B) F i) = (\\bigcap_(i in A) F i) :&: (\\bigcap_(i in B) F i).",
            "VernacStartTheoremProof",
            "3cdd4e7d3467ba5a486dda473647e616845f34b6"
        ],
        [
            "by apply: setC_inj; rewrite setCI !setC_bigcap bigcup_setU.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bigcap_seq r F : \\bigcap_(i <- r) F i = \\bigcap_(i in r) F i.",
            "VernacStartTheoremProof",
            "c8e49a177ded8939db82787b0e4ca8604cb0879e"
        ],
        [
            "by apply: setC_inj; rewrite !setC_bigcap bigcup_seq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End BigSetOps.",
            "VernacEndSegment",
            "11484adb8c1c24f833f4a1d7720372af7694d3b5"
        ],
        [
            "Arguments bigcup_sup [T I] j [P F].",
            "VernacArguments",
            "fa8cc578ae35c2c7c66bd9a1406b661e73a87787"
        ],
        [
            "Arguments bigcup_max [T I] j [U P F].",
            "VernacArguments",
            "027ca20867833bc698ae2abbfdb670630021b9d0"
        ],
        [
            "Arguments bigcupP {T I x P F}.",
            "VernacArguments",
            "ea8da6845de301d7145e1373c13cd53d68cc629e"
        ],
        [
            "Arguments bigcupsP {T I U P F}.",
            "VernacArguments",
            "e195589bfb5a22ad41dcb7c0098895e58eb6768d"
        ],
        [
            "Arguments bigcap_inf [T I] j [P F].",
            "VernacArguments",
            "1ee5be91fb0c660c6f1ff7de006fdb65711d290c"
        ],
        [
            "Arguments bigcap_min [T I] j [U P F].",
            "VernacArguments",
            "ac4c73640c33f6f6dc61018f180c59b99d2b1f69"
        ],
        [
            "Arguments bigcapP {T I x P F}.",
            "VernacArguments",
            "a493d286e525758de7e2719e25e42efcf576865d"
        ],
        [
            "Arguments bigcapsP {T I U P F}.",
            "VernacArguments",
            "532991ec0742a2be6fca5082c430646acc6c7c7c"
        ],
        [
            "Section ImsetCurry.",
            "VernacBeginSection",
            "f1169455aacdff56285f0a1464aa4778525edaf5"
        ],
        [
            "Variables (aT1 aT2 rT : finType) (f : aT1 -> aT2 -> rT).",
            "VernacAssumption",
            "11aa271cc35702b61772c09753352fd4cae97e4a"
        ],
        [
            "Section Curry.",
            "VernacBeginSection",
            "002c2b13fac0bc2d7da636f7b3409a1f131dd105"
        ],
        [
            "Variables (A1 : {set aT1}) (A2 : {set aT2}).",
            "VernacAssumption",
            "75c8ca326076f0558d1d5e442ebda6962afb9c33"
        ],
        [
            "Variables (D1 : pred aT1) (D2 : pred aT2).",
            "VernacAssumption",
            "d219348f0270293d484f3aaec8ea7c64647b51c0"
        ],
        [
            "Lemma curry_imset2X : f @2: (A1, A2) = prod_curry f @: (setX A1 A2).",
            "VernacStartTheoremProof",
            "866d82967fcd6743b8b2221aeb9e4480b81603b6"
        ],
        [
            "rewrite [@imset]unlock unlock; apply/setP=> x; rewrite !in_set; congr (x \\in _).",
            "VernacExtend",
            "e665a129969e89df20cf8929f8d507bb69bcbafb"
        ],
        [
            "by apply: eq_image => u //=; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma curry_imset2l : f @2: (D1, D2) = \\bigcup_(x1 in D1) f x1 @: D2.",
            "VernacStartTheoremProof",
            "818e111bb6e6a82e6a747b946f6f5af2a6d093f4"
        ],
        [
            "apply/setP=> y; apply/imset2P/bigcupP => [[x1 x2 Dx1 Dx2 ->{y}] | [x1 Dx1]].",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by exists x1; rewrite // mem_imset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case/imsetP=> x2 Dx2 ->{y}; exists x1 x2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma curry_imset2r : f @2: (D1, D2) = \\bigcup_(x2 in D2) f^~ x2 @: D1.",
            "VernacStartTheoremProof",
            "a4be7b8c5995115de0b9193c7bef72c11b6b4294"
        ],
        [
            "apply/setP=> y; apply/imset2P/bigcupP => [[x1 x2 Dx1 Dx2 ->{y}] | [x2 Dx2]].",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by exists x2; rewrite // (mem_imset (f^~ x2)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case/imsetP=> x1 Dx1 ->{y}; exists x1 x2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Curry.",
            "VernacEndSegment",
            "c6dae0cc6a850f5a7ebb353eaa29a296ceefc983"
        ],
        [
            "Lemma imset2Ul (A B : {set aT1}) (C : {set aT2}) : f @2: (A :|: B, C) = f @2: (A, C) :|: f @2: (B, C).",
            "VernacStartTheoremProof",
            "79d950a04601a293d49ead66a91116bc2679df90"
        ],
        [
            "by rewrite !curry_imset2l bigcup_setU.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imset2Ur (A : {set aT1}) (B C : {set aT2}) : f @2: (A, B :|: C) = f @2: (A, B) :|: f @2: (A, C).",
            "VernacStartTheoremProof",
            "0888361e8bf0c78ffa202c1562c020e3af303bc8"
        ],
        [
            "by rewrite !curry_imset2r bigcup_setU.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ImsetCurry.",
            "VernacEndSegment",
            "60a11c2f41ecafe0bf1cebbe3dc5a2c262900c3a"
        ],
        [
            "Section Partitions.",
            "VernacBeginSection",
            "0cc4129e6be0f27d7d139f81deabd8612cca6289"
        ],
        [
            "Variables T I : finType.",
            "VernacAssumption",
            "c43775e1d4cd71d2689f826ef24bd08352371e01"
        ],
        [
            "Implicit Types (x y z : T) (A B D X : {set T}) (P Q : {set {set T}}).",
            "VernacReserve",
            "a8a0516cfbc833d7a5836ff6aa4708a25ccc9760"
        ],
        [
            "Implicit Types (J : pred I) (F : I -> {set T}).",
            "VernacReserve",
            "d325b2837b06eebc6c850084f2a0fca0d3cf3eac"
        ],
        [
            "Definition cover P := \\bigcup_(B in P) B.",
            "VernacDefinition",
            "5b697ed49db694e6d1882deac221815960503c6a"
        ],
        [
            "Definition pblock P x := odflt set0 (pick [pred B in P | x \\in B]).",
            "VernacDefinition",
            "8a4c1fc277a6e59e9635a52970dacac67d533d26"
        ],
        [
            "Definition trivIset P := \\sum_(B in P) #|B| == #|cover P|.",
            "VernacDefinition",
            "97055be39a878aa5ee16110af95112bfb525c682"
        ],
        [
            "Definition partition P D := [&& cover P == D, trivIset P & set0 \\notin P].",
            "VernacDefinition",
            "6f73266df9d6718847979849b2e0971b9b01834e"
        ],
        [
            "Definition is_transversal X P D := [&& partition P D, X \\subset D & [forall B in P, #|X :&: B| == 1]].",
            "VernacDefinition",
            "fe0afe7da19f8722d1e41f8c52c85ec0ee4938ba"
        ],
        [
            "Definition transversal P D := [set odflt x [pick y in pblock P x] | x in D].",
            "VernacDefinition",
            "77dfadf650b124d484376f9143c1820aeed17443"
        ],
        [
            "Definition transversal_repr x0 X B := odflt x0 [pick x in X :&: B].",
            "VernacDefinition",
            "eca86efd491fa54e6d0bac0a629b39e3fd9edd10"
        ],
        [
            "Lemma leq_card_setU A B : #|A :|: B| <= #|A| + #|B| ?= iff [disjoint A & B].",
            "VernacStartTheoremProof",
            "597b310e4ab7cc0679e8a4c52de6198e9c5b36c9"
        ],
        [
            "rewrite -(addn0 #|_|) -setI_eq0 -cards_eq0 -cardsUI eq_sym.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (mono_leqif (leq_add2l _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_card_cover P : #|cover P| <= \\sum_(A in P) #|A| ?= iff trivIset P.",
            "VernacStartTheoremProof",
            "8ae9b0f050bc1dea9d6ceea5670cae2c7af9bbdc"
        ],
        [
            "split; last exact: eq_sym.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite /cover; elim/big_rec2: _ => [|A n U _ leUn]; first by rewrite cards0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite (leq_trans (leq_card_setU A U).1) ?leq_add2l.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma trivIsetP P : reflect {in P &, forall A B, A != B -> [disjoint A & B]} (trivIset P).",
            "VernacStartTheoremProof",
            "92110b366bdddefe2d0ecfb7d11ecc43028b1e6c"
        ],
        [
            "have->: P = [set x in enum (mem P)] by apply/setP=> x; rewrite inE mem_enum.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "elim: {P}(enum _) (enum_uniq (mem P)) => [_ | A e IHe] /=.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite /trivIset /cover !big_set0 cards0; left=> A; rewrite inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/andP; rewrite set_cons -(in_set (fun B => B \\in e)) => PA {IHe}/IHe.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "move: {e}[set x in e] PA => P PA IHP.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite /trivIset /cover !big_setU1 //= eq_sym.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have:= leq_card_cover P; rewrite -(mono_leqif (leq_add2l #|A|)).",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "move/(leqif_trans (leq_card_setU _ _))->; rewrite disjoints_subset setC_bigcup.",
            "VernacExtend",
            "01eaddc5beea13e116fcc5de5430a824e6e09efb"
        ],
        [
            "case: bigcapsP => [disjA | meetA]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "right=> [tI]; case: meetA => B PB; rewrite -disjoints_subset.",
            "VernacExtend",
            "2ec7e94e3b7153a35df793e01cb5c36a154cc563"
        ],
        [
            "by rewrite tI ?setU11 ?setU1r //; apply: contraNneq PA => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: (iffP IHP) => [] tI B C PB PC; last by apply: tI; apply: setU1r.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case/setU1P: PC PB => [->|PC] /setU1P[->|PB]; try by [apply: tI | case/eqP]; first rewrite disjoint_sym; rewrite disjoints_subset disjA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma trivIsetS P Q : P \\subset Q -> trivIset Q -> trivIset P.",
            "VernacStartTheoremProof",
            "ecf6432034937f2f86c4d874355cdbc6fd9c5185"
        ],
        [
            "by move/subsetP/sub_in2=> sPQ /trivIsetP/sPQ/trivIsetP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma trivIsetI P D : trivIset P -> trivIset (P ::&: D).",
            "VernacStartTheoremProof",
            "91a4d2bdfdf4d007f2bfe15f0e40401b77cfc390"
        ],
        [
            "by apply: trivIsetS; rewrite -setI_powerset subsetIl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cover_setI P D : cover (P ::&: D) \\subset cover P :&: D.",
            "VernacStartTheoremProof",
            "a59a20525ec0beb5478083729fba5602132dd730"
        ],
        [
            "by apply/bigcupsP=> A /setIdP[PA sAD]; rewrite subsetI sAD andbT (bigcup_max A).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_pblock P x : (x \\in pblock P x) = (x \\in cover P).",
            "VernacStartTheoremProof",
            "6cf26e9d03697726a4aef0689baec74452575dc9"
        ],
        [
            "rewrite /pblock; apply/esym/bigcupP.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "case: pickP => /= [A /andP[PA Ax]| noA]; first by rewrite Ax; exists A.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite inE => [[A PA Ax]]; case/andP: (noA A).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pblock_mem P x : x \\in cover P -> pblock P x \\in P.",
            "VernacStartTheoremProof",
            "e537c647f75cf53cfc8a200851f3ad4e7f71d9c7"
        ],
        [
            "by rewrite -mem_pblock /pblock; case: pickP => [A /andP[]| _] //=; rewrite inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma def_pblock P B x : trivIset P -> B \\in P -> x \\in B -> pblock P x = B.",
            "VernacStartTheoremProof",
            "407afa312c242e8f8b60d4302c7a82d69b84f965"
        ],
        [
            "move/trivIsetP=> tiP PB Bx; have Px: x \\in cover P by apply/bigcupP; exists B.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "apply: (contraNeq (tiP _ _ _ PB)); first by rewrite pblock_mem.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/pred0Pn; exists x; rewrite /= mem_pblock Px.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma same_pblock P x y : trivIset P -> x \\in pblock P y -> pblock P x = pblock P y.",
            "VernacStartTheoremProof",
            "cb9c687a82bc592478b411e85f449c3c5b93ff82"
        ],
        [
            "rewrite {1 3}/pblock => tI; case: pickP => [A|]; last by rewrite inE.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case/andP=> PA _{y} /= Ax; apply: def_pblock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_pblock P x y : trivIset P -> x \\in cover P -> (pblock P x == pblock P y) = (y \\in pblock P x).",
            "VernacStartTheoremProof",
            "081c4110f7deb0746613643e64acd71a58749214"
        ],
        [
            "move=> tiP Px; apply/eqP/idP=> [eq_xy | /same_pblock-> //].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "move: Px; rewrite -mem_pblock eq_xy /pblock.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by case: pickP => [B /andP[] // | _]; rewrite inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma trivIsetU1 A P : {in P, forall B, [disjoint A & B]} -> trivIset P -> set0 \\notin P -> trivIset (A |: P) /\\ A \\notin P.",
            "VernacStartTheoremProof",
            "3dca46f15a9935fa2347f2510223913644b69f88"
        ],
        [
            "move=> tiAP tiP notPset0; split; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply: contra notPset0 => P_A.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by have:= tiAP A P_A; rewrite -setI_eq0 setIid => /eqP <-.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/trivIsetP=> B1 B2 /setU1P[->|PB1] /setU1P[->|PB2]; by [apply: (trivIsetP _ tiP) | rewrite ?eqxx // ?(tiAP, disjoint_sym)].",
            "VernacExtend",
            "9ba8844f90da4a48c6c9ed986dcaebadc0623e9f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cover_imset J F : cover (F @: J) = \\bigcup_(i in J) F i.",
            "VernacStartTheoremProof",
            "4d05a4ab7b46fc1c2f38d421cc79e4804772a2b0"
        ],
        [
            "apply/setP=> x.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "apply/bigcupP/bigcupP=> [[_ /imsetP[i Ji ->]] | [i]]; first by exists i.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by exists (F i); first apply: mem_imset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma trivIimset J F (P := F @: J) : {in J &, forall i j, j != i -> [disjoint F i & F j]} -> set0 \\notin P -> trivIset P /\\ {in J &, injective F}.",
            "VernacStartTheoremProof",
            "7aa0df8c4c0065f4c01590f3bfdd4cf33ac7457d"
        ],
        [
            "move=> tiF notPset0; split=> [|i j Ji Jj /= eqFij].",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "apply/trivIsetP=> _ _ /imsetP[i Ji ->] /imsetP[j Jj ->] neqFij.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite tiF // (contraNneq _ neqFij) // => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: contraNeq notPset0 => neq_ij; apply/imsetP; exists i => //; apply/eqP.",
            "VernacExtend",
            "dd29d3d5ae00c1473abfb764f187c62c0f7fd65d"
        ],
        [
            "by rewrite eq_sym -[F i]setIid setI_eq0 {1}eqFij tiF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cover_partition P D : partition P D -> cover P = D.",
            "VernacStartTheoremProof",
            "bd574f7ef578ff630e0905d01f51127c421d7eff"
        ],
        [
            "by case/and3P=> /eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_partition P D : partition P D -> #|D| = \\sum_(A in P) #|A|.",
            "VernacStartTheoremProof",
            "94da6c18899988d4796ebed1111a181a43cc2ec0"
        ],
        [
            "by case/and3P=> /eqP <- /eqnP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_uniform_partition n P D : {in P, forall A, #|A| = n} -> partition P D -> #|D| = #|P| * n.",
            "VernacStartTheoremProof",
            "7465d841094b153a379ce3a6972c7a556ecb7a1e"
        ],
        [
            "by move=> uniP /card_partition->; rewrite -sum_nat_const; apply: eq_bigr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section BigOps.",
            "VernacBeginSection",
            "244b29578809d8ae01f84d1a2db56a6cf7ba588f"
        ],
        [
            "Variables (R : Type) (idx : R) (op : Monoid.com_law idx).",
            "VernacAssumption",
            "96cda60bdf0f3b3e90a3cfd20acc0f3b3ec771cc"
        ],
        [
            "Let rhs_cond P K E := \\big[op/idx]_(A in P) \\big[op/idx]_(x in A | K x) E x.",
            "VernacDefinition",
            "247e1d8818654b7f94456296934fb027f8a1069a"
        ],
        [
            "Let rhs P E := \\big[op/idx]_(A in P) \\big[op/idx]_(x in A) E x.",
            "VernacDefinition",
            "43a44bc5cd81de5ccfb0c1b3685ae16935c7d08b"
        ],
        [
            "Lemma big_trivIset_cond P (K : pred T) (E : T -> R) : trivIset P -> \\big[op/idx]_(x in cover P | K x) E x = rhs_cond P K E.",
            "VernacStartTheoremProof",
            "e1c77fbe934e6952679b1d5449b888421e20a587"
        ],
        [
            "move=> tiP; rewrite (partition_big (pblock P) (mem P)) -/op => /= [|x].",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "apply: eq_bigr => A PA; apply: eq_bigl => x; rewrite andbAC; congr (_ && _).",
            "VernacExtend",
            "39382cac046bd695ab5cf35eb65f1ce194b0722c"
        ],
        [
            "rewrite -mem_pblock; apply/andP/idP=> [[Px /eqP <- //] | Ax].",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite (def_pblock tiP PA Ax).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case/andP=> Px _; apply: pblock_mem.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma big_trivIset P (E : T -> R) : trivIset P -> \\big[op/idx]_(x in cover P) E x = rhs P E.",
            "VernacStartTheoremProof",
            "a6efe68f9be4f67cf40a9816f908762561723594"
        ],
        [
            "have biginT := eq_bigl _ _ (fun _ => andbT _) => tiP.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite -biginT big_trivIset_cond //; apply: eq_bigr => A _; apply: biginT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set_partition_big_cond P D (K : pred T) (E : T -> R) : partition P D -> \\big[op/idx]_(x in D | K x) E x = rhs_cond P K E.",
            "VernacStartTheoremProof",
            "6bc8825b4ea5c41c6afde6b88d485b2682ab36c2"
        ],
        [
            "by case/and3P=> /eqP <- tI_P _; apply: big_trivIset_cond.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma set_partition_big P D (E : T -> R) : partition P D -> \\big[op/idx]_(x in D) E x = rhs P E.",
            "VernacStartTheoremProof",
            "bf3d9720a8cf2b6b32aa22c6f6457953a12a0228"
        ],
        [
            "by case/and3P=> /eqP <- tI_P _; apply: big_trivIset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma partition_disjoint_bigcup (F : I -> {set T}) E : (forall i j, i != j -> [disjoint F i & F j]) -> \\big[op/idx]_(x in \\bigcup_i F i) E x = \\big[op/idx]_i \\big[op/idx]_(x in F i) E x.",
            "VernacStartTheoremProof",
            "232f0320f5813ac122d6a57f80ffbe71c0596357"
        ],
        [
            "move=> disjF; pose P := [set F i | i in I & F i != set0].",
            "VernacExtend",
            "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
        ],
        [
            "have trivP: trivIset P.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/trivIsetP=> _ _ /imsetP[i _ ->] /imsetP[j _ ->] neqFij.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by apply: disjF; apply: contraNneq neqFij => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have ->: \\bigcup_i F i = cover P.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/esym; rewrite cover_imset big_mkcond; apply: eq_bigr => i _.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "by rewrite inE; case: eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite big_trivIset // /rhs big_imset => [|i j _ /setIdP[_ notFj0] eqFij].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite big_mkcond; apply: eq_bigr => i _; rewrite inE.",
            "VernacExtend",
            "fe8f197e86415fc7f0a74eda9d312128b9473eda"
        ],
        [
            "by case: eqP => //= ->; rewrite big_set0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: contraNeq (disjF _ _) _; rewrite -setI_eq0 eqFij setIid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End BigOps.",
            "VernacEndSegment",
            "3aa66cf18aa1c85cd4ebde2fd6bfbb434a1167dc"
        ],
        [
            "Section Equivalence.",
            "VernacBeginSection",
            "42b2fb72fba51d77d5bdc71bdcf8372e34cb79f6"
        ],
        [
            "Variables (R : rel T) (D : {set T}).",
            "VernacAssumption",
            "7a252de064460fee9bd0c8b2c19f16ea8baff4da"
        ],
        [
            "Let Px x := [set y in D | R x y].",
            "VernacDefinition",
            "25214704c080b1425d6e95b6b6ee121a5f931ea7"
        ],
        [
            "Definition equivalence_partition := [set Px x | x in D].",
            "VernacDefinition",
            "372cf06893af36b8146df84053dbd7d21edb1f72"
        ],
        [
            "Local Notation P := equivalence_partition.",
            "VernacSyntacticDefinition",
            "5dd6f6be9c468f358b5971b4f18a00f63bf5e711"
        ],
        [
            "Hypothesis eqiR : {in D & &, equivalence_rel R}.",
            "VernacAssumption",
            "baae80f9bb9074817175af348faac56978871715"
        ],
        [
            "Let Pxx x : x \\in D -> x \\in Px x.",
            "VernacDefinition",
            "b9eb1a793669611bef4fa42a7c58503eea9d3c39"
        ],
        [
            "by move=> Dx; rewrite !inE Dx (eqiR Dx Dx).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let PPx x : x \\in D -> Px x \\in P := fun Dx => mem_imset _ Dx.",
            "VernacDefinition",
            "2d0dc85ccce10d04de646a76fad1a6484d207a2c"
        ],
        [
            "Lemma equivalence_partitionP : partition P D.",
            "VernacStartTheoremProof",
            "bffeca32940fcce4b10cbeb50ce6b233eb8cadba"
        ],
        [
            "have defD: cover P == D.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite eqEsubset; apply/andP; split.",
            "VernacExtend",
            "563747ab88f591bd67f85e19847b20501f275f62"
        ],
        [
            "by apply/bigcupsP=> _ /imsetP[x Dx ->]; rewrite /Px setIdE subsetIl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply/subsetP=> x Dx; apply/bigcupP; exists (Px x); rewrite (Pxx, PPx).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have tiP: trivIset P.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/trivIsetP=> _ _ /imsetP[x Dx ->] /imsetP[y Dy ->]; apply: contraR.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "case/pred0Pn=> z /andP[]; rewrite !inE => /andP[Dz Rxz] /andP[_ Ryz].",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "apply/eqP/setP=> t; rewrite !inE; apply: andb_id2l => Dt.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "by rewrite (eqiR Dx Dz Dt) // (eqiR Dy Dz Dt).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /partition tiP defD /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/imsetP=> [[x /Pxx Px_x Px0]]; rewrite -Px0 inE in Px_x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pblock_equivalence_partition : {in D &, forall x y, (y \\in pblock P x) = R x y}.",
            "VernacStartTheoremProof",
            "a70c007a848f086219c221fc04ef0e2778a35907"
        ],
        [
            "have [_ tiP _] := and3P equivalence_partitionP.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> x y Dx Dy; rewrite /= (def_pblock tiP (PPx Dx) (Pxx Dx)) inE Dy.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Equivalence.",
            "VernacEndSegment",
            "2595fc399578ba18497cfa7c5ccfd126f5a09c36"
        ],
        [
            "Lemma pblock_equivalence P D : partition P D -> {in D & &, equivalence_rel (fun x y => y \\in pblock P x)}.",
            "VernacStartTheoremProof",
            "20151784ecb16d3232b17bd3d7ba6d7ab4137904"
        ],
        [
            "case/and3P=> /eqP <- tiP _ x y z Px Py Pz.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite mem_pblock; split=> // /same_pblock->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equivalence_partition_pblock P D : partition P D -> equivalence_partition (fun x y => y \\in pblock P x) D = P.",
            "VernacStartTheoremProof",
            "232f64459a7893bfec33b97fcd7d337e14f4efd3"
        ],
        [
            "case/and3P=> /eqP <-{D} tiP notP0; apply/setP=> B /=; set D := cover P.",
            "VernacExtend",
            "26f45d48858eb049eed6f0c8454c3a419a1a8d5b"
        ],
        [
            "have defP x: x \\in D -> [set y in D | y \\in pblock P x] = pblock P x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> Dx; apply/setIidPr; rewrite (bigcup_max (pblock P x)) ?pblock_mem.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/imsetP/idP=> [[x Px ->{B}] | PB]; first by rewrite defP ?pblock_mem.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have /set0Pn[x Bx]: B != set0 := memPn notP0 B PB.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have Px: x \\in cover P by apply/bigcupP; exists B.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists x; rewrite // defP // (def_pblock tiP PB Bx).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Preim.",
            "VernacBeginSection",
            "f77f2436d60f3187c4f86be3890a0ce5c0e0f17e"
        ],
        [
            "Variables (rT : eqType) (f : T -> rT).",
            "VernacAssumption",
            "5e172983cb3f16d941bf7d792823406f6d92a92d"
        ],
        [
            "Definition preim_partition := equivalence_partition (fun x y => f x == f y).",
            "VernacDefinition",
            "b24bbb0ac5d7fccc4f67f2200499b4462a94ae2a"
        ],
        [
            "Lemma preim_partitionP D : partition (preim_partition D) D.",
            "VernacStartTheoremProof",
            "6f7f30993db5f27a59c6c4c1e5b4e9859fe4328f"
        ],
        [
            "by apply/equivalence_partitionP; split=> // /eqP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Preim.",
            "VernacEndSegment",
            "59859ba1b3c1edee611975ef0cb8e4b4ba5e8974"
        ],
        [
            "Lemma preim_partition_pblock P D : partition P D -> preim_partition (pblock P) D = P.",
            "VernacStartTheoremProof",
            "6cb437b6695935f28a6406980b3f9696b495e898"
        ],
        [
            "move=> partP; have [/eqP defD tiP _] := and3P partP.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "rewrite -{2}(equivalence_partition_pblock partP); apply: eq_in_imset => x Dx.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by apply/setP=> y; rewrite !inE eq_pblock ?defD.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma transversalP P D : partition P D -> is_transversal (transversal P D) P D.",
            "VernacStartTheoremProof",
            "a30bc65c6289426a913f1db95acb9d9e154b76d9"
        ],
        [
            "case/and3P=> /eqP <- tiP notP0; apply/and3P; split; first exact/and3P.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/subsetP=> _ /imsetP[x Px ->]; case: pickP => //= y Pxy.",
            "VernacExtend",
            "20ec428e50c31e1399aee62c5a532bc8417a4b29"
        ],
        [
            "by apply/bigcupP; exists (pblock P x); rewrite ?pblock_mem //.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/forall_inP=> B PB; have /set0Pn[x Bx]: B != set0 := memPn notP0 B PB.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "apply/cards1P; exists (odflt x [pick y in pblock P x]); apply/esym/eqP.",
            "VernacExtend",
            "5c7ac6051adee46a350e7b5f0664c70c357210e9"
        ],
        [
            "rewrite eqEsubset sub1set inE -andbA; apply/andP; split.",
            "VernacExtend",
            "563747ab88f591bd67f85e19847b20501f275f62"
        ],
        [
            "by apply/mem_imset/bigcupP; exists B.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (def_pblock tiP PB Bx); case def_y: _ / pickP => [y By | /(_ x)/idP//].",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "rewrite By /=; apply/subsetP=> _ /setIP[/imsetP[z Pz ->]].",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "case: {1}_ / pickP => [t zPt Bt | /(_ z)/idP[]]; last by rewrite mem_pblock.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -(same_pblock tiP zPt) (def_pblock tiP PB Bt) def_y set11.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Transversals.",
            "VernacBeginSection",
            "dd08edba4bf8a7751d0dafb4e9fd75c787b7a65a"
        ],
        [
            "Variables (X : {set T}) (P : {set {set T}}) (D : {set T}).",
            "VernacAssumption",
            "5ec3ee8667ec1c5f674eba1359a7a160ada01b2b"
        ],
        [
            "Hypothesis trPX : is_transversal X P D.",
            "VernacAssumption",
            "b1760d3118bbb3c1d1f7a524f5ad6922c85f7b51"
        ],
        [
            "Lemma transversal_sub : X \\subset D.",
            "VernacStartTheoremProof",
            "d4c7f11e7185c7c63b1ec18bcb9e93d5c06e6078"
        ],
        [
            "by case/and3P: trPX.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let tiP : trivIset P.",
            "VernacDefinition",
            "444c5726e8be1084633803bf32fa419915ba8e76"
        ],
        [
            "by case/andP: trPX => /and3P[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let sXP : {subset X <= cover P}.",
            "VernacDefinition",
            "f23fb8db9f44e4d56c1f7d45f58e4eefb566dd22"
        ],
        [
            "by case/and3P: trPX => /andP[/eqP-> _] /subsetP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let trX : {in P, forall B, #|X :&: B| == 1}.",
            "VernacDefinition",
            "0ea1410a0ded55a685e0cc1b2928360f02ba7926"
        ],
        [
            "by case/and3P: trPX => _ _ /forall_inP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma setI_transversal_pblock x0 B : B \\in P -> X :&: B = [set transversal_repr x0 X B].",
            "VernacStartTheoremProof",
            "2336ceab1e0dc5b5e41607dd254deab35f9f7513"
        ],
        [
            "by case/trX/cards1P=> x defXB; rewrite /transversal_repr defXB /pick enum_set1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma repr_mem_pblock x0 B : B \\in P -> transversal_repr x0 X B \\in B.",
            "VernacStartTheoremProof",
            "b20f79ba1377595acab3d2c26a8aefdd223b7f3b"
        ],
        [
            "by move=> PB; rewrite -sub1set -setI_transversal_pblock ?subsetIr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma repr_mem_transversal x0 B : B \\in P -> transversal_repr x0 X B \\in X.",
            "VernacStartTheoremProof",
            "193b8183af97e126a4e03d66531056191a5eb65c"
        ],
        [
            "by move=> PB; rewrite -sub1set -setI_transversal_pblock ?subsetIl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma transversal_reprK x0 : {in P, cancel (transversal_repr x0 X) (pblock P)}.",
            "VernacStartTheoremProof",
            "c3e7b99662798474bf531ed94141d6f7a19ab130"
        ],
        [
            "by move=> B PB; rewrite /= (def_pblock tiP PB) ?repr_mem_pblock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pblockK x0 : {in X, cancel (pblock P) (transversal_repr x0 X)}.",
            "VernacStartTheoremProof",
            "3ca6e952c91d0de15c7fbd9008e565ebc9763bc4"
        ],
        [
            "move=> x Xx; have /bigcupP[B PB Bx] := sXP Xx; rewrite (def_pblock tiP PB Bx).",
            "VernacExtend",
            "7cbc77a1e43ca1454debc28656b2dec3869cf69b"
        ],
        [
            "by apply/esym/set1P; rewrite -setI_transversal_pblock // inE Xx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pblock_inj : {in X &, injective (pblock P)}.",
            "VernacStartTheoremProof",
            "47f068b352a24cb63f5ca2f632118199630dd53f"
        ],
        [
            "by move=> x0; apply: (can_in_inj (pblockK x0)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pblock_transversal : pblock P @: X = P.",
            "VernacStartTheoremProof",
            "a2766460df6c1211acc4d4358aaa48f36e614b8b"
        ],
        [
            "apply/setP=> B; apply/imsetP/idP=> [[x Xx ->] | PB].",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by rewrite pblock_mem ?sXP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /cards1P[x0 _] := trX PB; set x := transversal_repr x0 X B.",
            "VernacExtend",
            "81881a093b2294c76be3b432fbe83612064d7bc9"
        ],
        [
            "by exists x; rewrite ?transversal_reprK ?repr_mem_transversal.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_transversal : #|X| = #|P|.",
            "VernacStartTheoremProof",
            "fd27f7e8d713eb39c2f653f69fe76a77feecf0e9"
        ],
        [
            "by rewrite -pblock_transversal card_in_imset //; apply: pblock_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma im_transversal_repr x0 : transversal_repr x0 X @: P = X.",
            "VernacStartTheoremProof",
            "dd5ad2b77388d5d5407ef714b8f8bcf4760ad768"
        ],
        [
            "rewrite -{2}[X]imset_id -pblock_transversal -imset_comp.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: eq_in_imset; apply: pblockK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Transversals.",
            "VernacEndSegment",
            "e0f0a4dd64159a1a71885924ff34e02ea89b924c"
        ],
        [
            "End Partitions.",
            "VernacEndSegment",
            "c56df9c4c09ce0734342b3e1fa09bca187f0f444"
        ],
        [
            "Arguments trivIsetP {T P}.",
            "VernacArguments",
            "f2896b59e38a38dafc54fb2ab9234958a1ea61bf"
        ],
        [
            "Arguments big_trivIset_cond [T R idx op] P [K E].",
            "VernacArguments",
            "70214a77f4b9d41e3f67b012002ed64321d90684"
        ],
        [
            "Arguments set_partition_big_cond [T R idx op] P [D K E].",
            "VernacArguments",
            "47fb5e5064705580f866d46db947f00557559387"
        ],
        [
            "Arguments big_trivIset [T R idx op] P [E].",
            "VernacArguments",
            "3d134989f592718de1fc728e53bc527bb3495547"
        ],
        [
            "Arguments set_partition_big [T R idx op] P [D E].",
            "VernacArguments",
            "6e308d0da27ee66aac1c408d565426a25aa0b4df"
        ],
        [
            "Prenex Implicits cover trivIset partition pblock.",
            "VernacExtend",
            "2f07b09e2494d6a3133e31dda55fccafe4c9c784"
        ],
        [
            "Lemma partition_partition (T : finType) (D : {set T}) P Q : partition P D -> partition Q P -> partition (cover @: Q) D /\\ {in Q &, injective cover}.",
            "VernacStartTheoremProof",
            "a2819700c281b807cb9e7fe30d54360277c9ea45"
        ],
        [
            "move=> /and3P[/eqP defG tiP notP0] /and3P[/eqP defP tiQ notQ0].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have sQP E: E \\in Q -> {subset E <= P}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> Q_E; apply/subsetP; rewrite -defP (bigcup_max E).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /partition cover_imset -(big_trivIset _ tiQ) defP -defG eqxx /= andbC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have{notQ0} notQ0: set0 \\notin cover @: Q.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: contra notP0 => /imsetP[E Q_E E0].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "have /set0Pn[/= A E_A] := memPn notQ0 E Q_E.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "congr (_ \\in P): (sQP E Q_E A E_A).",
            "VernacExtend",
            "f3a9615ebe5fa15549c1ecd556f50efbdb2824d9"
        ],
        [
            "by apply/eqP; rewrite -subset0 E0 (bigcup_max A).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite notQ0; apply: trivIimset => // E F Q_E Q_F.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "apply: contraR => /pred0Pn[x /andP[/bigcupP[A E_A Ax] /bigcupP[B F_B Bx]]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite -(def_pblock tiQ Q_E E_A) -(def_pblock tiP _ Ax) ?(sQP E) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -(def_pblock tiQ Q_F F_B) -(def_pblock tiP _ Bx) ?(sQP F).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section MaxSetMinSet.",
            "VernacBeginSection",
            "9854e1e966d42e1e11ccd43895c7d572f5b1f05f"
        ],
        [
            "Variable T : finType.",
            "VernacAssumption",
            "6349381da4d33cbc2eeaf1bade38718e15f7a2c9"
        ],
        [
            "Notation sT := {set T}.",
            "VernacSyntacticDefinition",
            "35e5016ae3e428219cee08b42f3c4ac2843aa485"
        ],
        [
            "Implicit Types A B C : sT.",
            "VernacReserve",
            "74acbc3e7fbec72f55c62b9bd38443f3589f035c"
        ],
        [
            "Implicit Type P : pred sT.",
            "VernacReserve",
            "7ebc864a0e718b435084ffaa11db411367e0db46"
        ],
        [
            "Definition minset P A := [forall (B : sT | B \\subset A), (B == A) == P B].",
            "VernacDefinition",
            "573e16a962097f817c23fe52d346c9fad7a0db43"
        ],
        [
            "Lemma minset_eq P1 P2 A : P1 =1 P2 -> minset P1 A = minset P2 A.",
            "VernacStartTheoremProof",
            "3667cd8e60da6b2b0313481588077a04847426d5"
        ],
        [
            "by move=> eP12; apply: eq_forallb => B; rewrite eP12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minsetP P A : reflect ((P A) /\\ (forall B, P B -> B \\subset A -> B = A)) (minset P A).",
            "VernacStartTheoremProof",
            "f5c565d30ca9b034c738d765f86670a542faf191"
        ],
        [
            "apply: (iffP forallP) => [minA | [PA minA] B].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "split; first by have:= minA A; rewrite subxx eqxx /= => /eqP.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move=> B PB sBA; have:= minA B; rewrite PB sBA /= eqb_id => /eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply/implyP=> sBA; apply/eqP; apply/eqP/idP=> [-> // | /minA]; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments minsetP {P A}.",
            "VernacArguments",
            "2f24ae9fbb57fabaecbd1dbada6e12a77ea101ff"
        ],
        [
            "Lemma minsetp P A : minset P A -> P A.",
            "VernacStartTheoremProof",
            "9fa93eba15cedb255033071c0d29497452147506"
        ],
        [
            "by case/minsetP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minsetinf P A B : minset P A -> P B -> B \\subset A -> B = A.",
            "VernacStartTheoremProof",
            "a002b05d6f66cb411c838bee8b9492ff37046349"
        ],
        [
            "by case/minsetP=> _; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ex_minset P : (exists A, P A) -> {A | minset P A}.",
            "VernacStartTheoremProof",
            "d3ab2b820f55478577a94f9fb25cdd51a8555cec"
        ],
        [
            "move=> exP; pose pS n := [pred B | P B & #|B| == n].",
            "VernacExtend",
            "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
        ],
        [
            "pose p n := ~~ pred0b (pS n); have{exP}: exists n, p n.",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "by case: exP => A PA; exists #|A|; apply/existsP; exists A; rewrite /= PA /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/ex_minnP=> n /pred0P; case: (pickP (pS n)) => // A /andP[PA] /eqP <-{n} _.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "move=> minA; exists A => //; apply/minsetP; split=> // B PB sBA; apply/eqP.",
            "VernacExtend",
            "232238035712f5033868d2e535ebd49ddbfd9096"
        ],
        [
            "by rewrite eqEcard sBA minA //; apply/pred0Pn; exists B; rewrite /= PB /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minset_exists P C : P C -> {A | minset P A & A \\subset C}.",
            "VernacStartTheoremProof",
            "707928a1c9abfde5cd925db58929bf3cb5c632b5"
        ],
        [
            "move=> PC; have{PC}: exists A, P A && (A \\subset C) by exists C; rewrite PC /=.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "case/ex_minset=> A /minsetP[/andP[PA sAC] minA]; exists A => //; apply/minsetP.",
            "VernacExtend",
            "c9a31b5c3dbfd076b1a173b39b5981bc72187636"
        ],
        [
            "by split=> // B PB sBA; rewrite (minA B) // PB (subset_trans sBA).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact maxset_key : unit.",
            "VernacStartTheoremProof",
            "dac77a4a2f390ea4cb6050455903c2481154ba3a"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition maxset P A := minset (fun B => locked_with maxset_key P (~: B)) (~: A).",
            "VernacDefinition",
            "a7b4764c8cc7faaff1f2941765179d94624896ca"
        ],
        [
            "Lemma maxset_eq P1 P2 A : P1 =1 P2 -> maxset P1 A = maxset P2 A.",
            "VernacStartTheoremProof",
            "441dffcdc0822562f3d5a4d47f33fc85aca9d7f0"
        ],
        [
            "by move=> eP12; apply: minset_eq => x /=; rewrite !unlock_with eP12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxminset P A : maxset P A = minset [pred B | P (~: B)] (~: A).",
            "VernacStartTheoremProof",
            "656db19a6f7834af8134005012a6ebf0f0477047"
        ],
        [
            "by rewrite /maxset unlock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minmaxset P A : minset P A = maxset [pred B | P (~: B)] (~: A).",
            "VernacStartTheoremProof",
            "ab8e49790f52418580e329ee2e8b1014911160e9"
        ],
        [
            "by rewrite /maxset unlock setCK; apply: minset_eq => B /=; rewrite setCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxsetP P A : reflect ((P A) /\\ (forall B, P B -> A \\subset B -> B = A)) (maxset P A).",
            "VernacStartTheoremProof",
            "b328deb8ca513abcf2192f8d592df413f9000ae8"
        ],
        [
            "apply: (iffP minsetP); rewrite ?setCK unlock_with => [] [PA minA].",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "by split=> // B PB sAB; rewrite -[B]setCK [~: B]minA (setCK, setCS).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by split=> // B PB' sBA'; rewrite -(minA _ PB') -1?setCS setCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxsetp P A : maxset P A -> P A.",
            "VernacStartTheoremProof",
            "8acd92b458a942e1ffcb3ebd6d01100df7355274"
        ],
        [
            "by case/maxsetP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxsetsup P A B : maxset P A -> P B -> A \\subset B -> B = A.",
            "VernacStartTheoremProof",
            "64c55d9d54235a1963a1f1e8e270ae8b9229950c"
        ],
        [
            "by case/maxsetP=> _; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ex_maxset P : (exists A, P A) -> {A | maxset P A}.",
            "VernacStartTheoremProof",
            "cc07ad713ba357dc036bc6a966945da72c04d830"
        ],
        [
            "move=> exP; have{exP}: exists A, P (~: A).",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "by case: exP => A PA; exists (~: A); rewrite setCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case/ex_minset=> A minA; exists (~: A); rewrite /maxset unlock setCK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxset_exists P C : P C -> {A : sT | maxset P A & C \\subset A}.",
            "VernacStartTheoremProof",
            "9363ec75b482fcf023d9312a9bfe02cc6aa45273"
        ],
        [
            "move=> PC; pose P' B := P (~: B); have: P' (~: C) by rewrite /P' setCK.",
            "VernacExtend",
            "5e9f04e072d058c7688e55b9dff4d25555e15183"
        ],
        [
            "case/minset_exists=> B; rewrite -[B]setCK setCS.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by exists (~: B); rewrite // /maxset unlock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MaxSetMinSet.",
            "VernacEndSegment",
            "2a30217e5f3f6338b173f2ed1e7ee811c3e74f75"
        ],
        [
            "Arguments setCK {T}.",
            "VernacArguments",
            "359a869e92f23f682359aa0ea7634ad24a3b0e19"
        ],
        [
            "Arguments minsetP {T P A}.",
            "VernacArguments",
            "00401393762d774e75fb6f2646634b2114133909"
        ],
        [
            "Arguments maxsetP {T P A}.",
            "VernacArguments",
            "bb692bfa4cd1cb8d87760315fff7cf1453e358a3"
        ],
        [
            "Prenex Implicits minset maxset.",
            "VernacExtend",
            "c65515534a232d3fed5d491282254d88edbaec48"
        ]
    ],
    "proofs": [
        {
            "name": "finsetE",
            "line_nb": 46,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pred_of_setE",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_set",
            "line_nb": 79,
            "steps": [
                {
                    "command": [
                        "by rewrite [@finset]unlock unlock [x \\in _]ffunE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setP",
            "line_nb": 82,
            "steps": [
                {
                    "command": [
                        "by split=> [eqAB|-> //]; apply/val_inj/ffunP=> x; have:= eqAB x; rewrite unlock.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_setT",
            "line_nb": 87,
            "steps": [
                {
                    "command": [
                        "by rewrite in_set.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqsVneq",
            "line_nb": 90,
            "steps": [
                {
                    "command": [
                        "exact: eqVneq.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqEsubset",
            "line_nb": 124,
            "steps": [
                {
                    "command": [
                        "by apply/eqP/subset_eqP=> /setP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subEproper",
            "line_nb": 127,
            "steps": [
                {
                    "command": [
                        "by rewrite eqEsubset -andb_orr orbN andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqVproper",
            "line_nb": 130,
            "steps": [
                {
                    "command": [
                        "by rewrite subEproper => /predU1P.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "properEneq",
            "line_nb": 133,
            "steps": [
                {
                    "command": [
                        "by rewrite andbC eqEsubset negb_and andb_orr andbN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proper_neq",
            "line_nb": 136,
            "steps": [
                {
                    "command": [
                        "by rewrite properEneq; case/andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqEproper",
            "line_nb": 139,
            "steps": [
                {
                    "command": [
                        "by rewrite negb_and negbK andb_orr andbN eqEsubset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqEcard",
            "line_nb": 142,
            "steps": [
                {
                    "command": [
                        "rewrite eqEsubset; apply: andb_id2l => sAB.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite (geq_leqif (subset_leqif_card sAB)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "properEcard",
            "line_nb": 146,
            "steps": [
                {
                    "command": [
                        "by rewrite properEneq ltnNge andbC eqEcard; case: (A \\subset B).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subset_leqif_cards",
            "line_nb": 149,
            "steps": [
                {
                    "command": [
                        "by move=> sAB; rewrite eqEsubset sAB; apply: subset_leqif_card.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_set0",
            "line_nb": 152,
            "steps": [
                {
                    "command": [
                        "by rewrite inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub0set",
            "line_nb": 155,
            "steps": [
                {
                    "command": [
                        "by apply/subsetP=> x; rewrite inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subset0",
            "line_nb": 158,
            "steps": [
                {
                    "command": [
                        "by rewrite eqEsubset sub0set andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proper0",
            "line_nb": 161,
            "steps": [
                {
                    "command": [
                        "by rewrite properE sub0set subset0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subset_neq0",
            "line_nb": 164,
            "steps": [
                {
                    "command": [
                        "by rewrite -!proper0 => sAB /proper_sub_trans->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set_0Vmem",
            "line_nb": 167,
            "steps": [
                {
                    "command": [
                        "case: (pickP (mem A)) => [x Ax | A0]; [by right; exists x | left].",
                        "VernacExtend",
                        "0b71d550d1734a15236329f121aae615a86c6240"
                    ]
                },
                {
                    "command": [
                        "by apply/setP=> x; rewrite inE; apply: A0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_set0",
            "line_nb": 171,
            "steps": [
                {
                    "command": [
                        "by rewrite (eq_enum (in_set _)) enum0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetT",
            "line_nb": 174,
            "steps": [
                {
                    "command": [
                        "by apply/subsetP=> x; rewrite inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetT_hint",
            "line_nb": 177,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock; apply/pred0P=> x; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subTset",
            "line_nb": 181,
            "steps": [
                {
                    "command": [
                        "by rewrite eqEsubset subsetT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "properT",
            "line_nb": 184,
            "steps": [
                {
                    "command": [
                        "by rewrite properEneq subsetT andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set1P",
            "line_nb": 187,
            "steps": [
                {
                    "command": [
                        "by rewrite inE; apply: eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_setT",
            "line_nb": 190,
            "steps": [
                {
                    "command": [
                        "by rewrite (eq_enum (in_set _)) enumT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_set1",
            "line_nb": 193,
            "steps": [
                {
                    "command": [
                        "exact: in_set.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set11",
            "line_nb": 196,
            "steps": [
                {
                    "command": [
                        "by rewrite inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set1_inj",
            "line_nb": 199,
            "steps": [
                {
                    "command": [
                        "by move=> a b eqsab; apply/set1P; rewrite -eqsab set11.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_set1",
            "line_nb": 202,
            "steps": [
                {
                    "command": [
                        "by rewrite (eq_enum (in_set _)) enum1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setU1P",
            "line_nb": 205,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE; apply: predU1P.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_setU1",
            "line_nb": 208,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set_cons",
            "line_nb": 211,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setU11",
            "line_nb": 214,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setU1r",
            "line_nb": 217,
            "steps": [
                {
                    "command": [
                        "by move=> Bx; rewrite !inE predU1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set1Ul",
            "line_nb": 220,
            "steps": [
                {
                    "command": [
                        "by move=> Ax; rewrite !inE Ax.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set1Ur",
            "line_nb": 223,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE eqxx orbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_setC1",
            "line_nb": 226,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setC11",
            "line_nb": 229,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setD1P",
            "line_nb": 232,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE; apply: andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_setD1",
            "line_nb": 235,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setD11",
            "line_nb": 238,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setD1K",
            "line_nb": 241,
            "steps": [
                {
                    "command": [
                        "by move=> Aa; apply/setP=> x; rewrite !inE; case: eqP => // ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setU1K",
            "line_nb": 244,
            "steps": [
                {
                    "command": [
                        "by move/negPf=> nBa; apply/setP=> x; rewrite !inE; case: eqP => // ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set2P",
            "line_nb": 247,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE; apply: pred2P.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_set2",
            "line_nb": 250,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set21",
            "line_nb": 253,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set22",
            "line_nb": 256,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE eqxx orbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUP",
            "line_nb": 259,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE; apply: orP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_setU",
            "line_nb": 262,
            "steps": [
                {
                    "command": [
                        "exact: in_set.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUC",
            "line_nb": 265,
            "steps": [
                {
                    "command": [
                        "by apply/setP => x; rewrite !inE orbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUS",
            "line_nb": 268,
            "steps": [
                {
                    "command": [
                        "move=> sAB; apply/subsetP=> x; rewrite !inE.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by case: (x \\in C) => //; apply: (subsetP sAB).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setSU",
            "line_nb": 272,
            "steps": [
                {
                    "command": [
                        "by move=> sAB; rewrite -!(setUC C) setUS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUSS",
            "line_nb": 275,
            "steps": [
                {
                    "command": [
                        "by move=> /(setSU B) /subset_trans sAC /(setUS C)/sAC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set0U",
            "line_nb": 278,
            "steps": [
                {
                    "command": [
                        "by apply/setP => x; rewrite !inE orFb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setU0",
            "line_nb": 281,
            "steps": [
                {
                    "command": [
                        "by rewrite setUC set0U.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUA",
            "line_nb": 284,
            "steps": [
                {
                    "command": [
                        "by apply/setP => x; rewrite !inE orbA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUCA",
            "line_nb": 287,
            "steps": [
                {
                    "command": [
                        "by rewrite !setUA (setUC B).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUAC",
            "line_nb": 290,
            "steps": [
                {
                    "command": [
                        "by rewrite -!setUA (setUC B).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUACA",
            "line_nb": 293,
            "steps": [
                {
                    "command": [
                        "by rewrite -!setUA (setUCA B).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setTU",
            "line_nb": 296,
            "steps": [
                {
                    "command": [
                        "by apply/setP => x; rewrite !inE orTb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUT",
            "line_nb": 299,
            "steps": [
                {
                    "command": [
                        "by rewrite setUC setTU.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUid",
            "line_nb": 302,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite inE orbb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUUl",
            "line_nb": 305,
            "steps": [
                {
                    "command": [
                        "by rewrite setUA !(setUAC _ C) -(setUA _ C) setUid.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUUr",
            "line_nb": 308,
            "steps": [
                {
                    "command": [
                        "by rewrite !(setUC A) setUUl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIdP",
            "line_nb": 311,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE; apply: andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setId2P",
            "line_nb": 314,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE; apply: and3P.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIdE",
            "line_nb": 317,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIP",
            "line_nb": 320,
            "steps": [
                {
                    "command": [
                        "exact: (iffP (@setIdP _ _ _)).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_setI",
            "line_nb": 323,
            "steps": [
                {
                    "command": [
                        "exact: in_set.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIC",
            "line_nb": 326,
            "steps": [
                {
                    "command": [
                        "by apply/setP => x; rewrite !inE andbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIS",
            "line_nb": 329,
            "steps": [
                {
                    "command": [
                        "move=> sAB; apply/subsetP=> x; rewrite !inE.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by case: (x \\in C) => //; apply: (subsetP sAB).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setSI",
            "line_nb": 333,
            "steps": [
                {
                    "command": [
                        "by move=> sAB; rewrite -!(setIC C) setIS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setISS",
            "line_nb": 336,
            "steps": [
                {
                    "command": [
                        "by move=> /(setSI B) /subset_trans sAC /(setIS C) /sAC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setTI",
            "line_nb": 339,
            "steps": [
                {
                    "command": [
                        "by apply/setP => x; rewrite !inE andTb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIT",
            "line_nb": 342,
            "steps": [
                {
                    "command": [
                        "by rewrite setIC setTI.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set0I",
            "line_nb": 345,
            "steps": [
                {
                    "command": [
                        "by apply/setP => x; rewrite !inE andFb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setI0",
            "line_nb": 348,
            "steps": [
                {
                    "command": [
                        "by rewrite setIC set0I.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIA",
            "line_nb": 351,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE andbA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setICA",
            "line_nb": 354,
            "steps": [
                {
                    "command": [
                        "by rewrite !setIA (setIC A).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIAC",
            "line_nb": 357,
            "steps": [
                {
                    "command": [
                        "by rewrite -!setIA (setIC B).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIACA",
            "line_nb": 360,
            "steps": [
                {
                    "command": [
                        "by rewrite -!setIA (setICA B).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIid",
            "line_nb": 363,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite inE andbb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIIl",
            "line_nb": 366,
            "steps": [
                {
                    "command": [
                        "by rewrite setIA !(setIAC _ C) -(setIA _ C) setIid.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIIr",
            "line_nb": 369,
            "steps": [
                {
                    "command": [
                        "by rewrite !(setIC A) setIIl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIUr",
            "line_nb": 372,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE andb_orr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIUl",
            "line_nb": 375,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE andb_orl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUIr",
            "line_nb": 378,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE orb_andr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUIl",
            "line_nb": 381,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE orb_andl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUK",
            "line_nb": 384,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE orbK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setKU",
            "line_nb": 387,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE orKb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIK",
            "line_nb": 390,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE andbK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setKI",
            "line_nb": 393,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE andKb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setCP",
            "line_nb": 396,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE; apply: negP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_setC",
            "line_nb": 399,
            "steps": [
                {
                    "command": [
                        "exact: in_set.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setCK",
            "line_nb": 402,
            "steps": [
                {
                    "command": [
                        "by move=> A; apply/setP=> x; rewrite !inE negbK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setC_inj",
            "line_nb": 405,
            "steps": [
                {
                    "command": [
                        "exact: can_inj setCK.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsets_disjoint",
            "line_nb": 408,
            "steps": [
                {
                    "command": [
                        "by rewrite subset_disjoint; apply: eq_disjoint_r => x; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "disjoints_subset",
            "line_nb": 411,
            "steps": [
                {
                    "command": [
                        "by rewrite subsets_disjoint setCK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "powersetCE",
            "line_nb": 414,
            "steps": [
                {
                    "command": [
                        "by rewrite inE disjoints_subset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setCS",
            "line_nb": 417,
            "steps": [
                {
                    "command": [
                        "by rewrite !subsets_disjoint setCK disjoint_sym.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setCU",
            "line_nb": 420,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE negb_or.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setCI",
            "line_nb": 423,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE negb_and.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUCr",
            "line_nb": 426,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE orbN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setICr",
            "line_nb": 429,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE andbN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setC0",
            "line_nb": 432,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setCT",
            "line_nb": 435,
            "steps": [
                {
                    "command": [
                        "by rewrite -setC0 setCK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setDP",
            "line_nb": 438,
            "steps": [
                {
                    "command": [
                        "by rewrite inE andbC; apply: andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_setD",
            "line_nb": 441,
            "steps": [
                {
                    "command": [
                        "exact: in_set.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setDE",
            "line_nb": 444,
            "steps": [
                {
                    "command": [
                        "by apply/setP => x; rewrite !inE andbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setSD",
            "line_nb": 447,
            "steps": [
                {
                    "command": [
                        "by rewrite !setDE; apply: setSI.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setDS",
            "line_nb": 450,
            "steps": [
                {
                    "command": [
                        "by rewrite !setDE -setCS; apply: setIS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setDSS",
            "line_nb": 453,
            "steps": [
                {
                    "command": [
                        "by move=> /(setSD B) /subset_trans sAC /(setDS C) /sAC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setD0",
            "line_nb": 456,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set0D",
            "line_nb": 459,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE andbF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setDT",
            "line_nb": 462,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setTD",
            "line_nb": 465,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setDv",
            "line_nb": 468,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE andNb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setCD",
            "line_nb": 471,
            "steps": [
                {
                    "command": [
                        "by rewrite !setDE setCI setCK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setID",
            "line_nb": 474,
            "steps": [
                {
                    "command": [
                        "by rewrite setDE -setIUr setUCr setIT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setDUl",
            "line_nb": 477,
            "steps": [
                {
                    "command": [
                        "by rewrite !setDE setIUl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setDUr",
            "line_nb": 480,
            "steps": [
                {
                    "command": [
                        "by rewrite !setDE setCU setIIr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setDIl",
            "line_nb": 483,
            "steps": [
                {
                    "command": [
                        "by rewrite !setDE setIIl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIDA",
            "line_nb": 486,
            "steps": [
                {
                    "command": [
                        "by rewrite !setDE setIA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIDAC",
            "line_nb": 489,
            "steps": [
                {
                    "command": [
                        "by rewrite !setDE setIAC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setDIr",
            "line_nb": 492,
            "steps": [
                {
                    "command": [
                        "by rewrite !setDE setCI setIUr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setDDl",
            "line_nb": 495,
            "steps": [
                {
                    "command": [
                        "by rewrite !setDE setCU setIA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setDDr",
            "line_nb": 498,
            "steps": [
                {
                    "command": [
                        "by rewrite !setDE setCI setIUr setCK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "powersetE",
            "line_nb": 501,
            "steps": [
                {
                    "command": [
                        "by rewrite inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "powersetS",
            "line_nb": 504,
            "steps": [
                {
                    "command": [
                        "apply/subsetP/idP=> [sAB | sAB C]; last by rewrite !inE => /subset_trans ->.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -powersetE sAB // inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "powerset0",
            "line_nb": 508,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> A; rewrite !inE subset0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "powersetT",
            "line_nb": 511,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> A; rewrite !inE subsetT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setI_powerset",
            "line_nb": 514,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> B; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardsE",
            "line_nb": 517,
            "steps": [
                {
                    "command": [
                        "exact/eq_card/in_set.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sum1dep_card",
            "line_nb": 520,
            "steps": [
                {
                    "command": [
                        "by rewrite sum1_card cardsE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sum_nat_dep_const",
            "line_nb": 523,
            "steps": [
                {
                    "command": [
                        "by rewrite sum_nat_const cardsE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cards0",
            "line_nb": 526,
            "steps": [
                {
                    "command": [
                        "by rewrite cardsE card0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cards_eq0",
            "line_nb": 529,
            "steps": [
                {
                    "command": [
                        "by rewrite (eq_sym A) eqEcard sub0set cards0 leqn0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set0Pn",
            "line_nb": 532,
            "steps": [
                {
                    "command": [
                        "by rewrite -cards_eq0; apply: existsP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_gt0",
            "line_nb": 535,
            "steps": [
                {
                    "command": [
                        "by rewrite lt0n cards_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cards0_eq",
            "line_nb": 538,
            "steps": [
                {
                    "command": [
                        "by move=> A_0; apply/setP=> x; rewrite inE (card0_eq A_0).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cards1",
            "line_nb": 541,
            "steps": [
                {
                    "command": [
                        "by rewrite cardsE card1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardsUI",
            "line_nb": 544,
            "steps": [
                {
                    "command": [
                        "by rewrite !cardsE cardUI.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardsU",
            "line_nb": 547,
            "steps": [
                {
                    "command": [
                        "by rewrite -cardsUI addnK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardsI",
            "line_nb": 550,
            "steps": [
                {
                    "command": [
                        "by rewrite -cardsUI addKn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardsT",
            "line_nb": 553,
            "steps": [
                {
                    "command": [
                        "by rewrite cardsE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardsID",
            "line_nb": 556,
            "steps": [
                {
                    "command": [
                        "by rewrite !cardsE cardID.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardsD",
            "line_nb": 559,
            "steps": [
                {
                    "command": [
                        "by rewrite -(cardsID B A) addKn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardsC",
            "line_nb": 562,
            "steps": [
                {
                    "command": [
                        "by rewrite cardsE cardC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardsCs",
            "line_nb": 565,
            "steps": [
                {
                    "command": [
                        "by rewrite -(cardsC A) addnK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardsU1",
            "line_nb": 568,
            "steps": [
                {
                    "command": [
                        "by rewrite -cardU1; apply: eq_card=> x; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cards2",
            "line_nb": 571,
            "steps": [
                {
                    "command": [
                        "by rewrite -card2; apply: eq_card=> x; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardsC1",
            "line_nb": 574,
            "steps": [
                {
                    "command": [
                        "by rewrite -(cardC1 a); apply: eq_card=> x; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardsD1",
            "line_nb": 577,
            "steps": [
                {
                    "command": [
                        "by rewrite (cardD1 a); congr (_ + _); apply: eq_card => x; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetIl",
            "line_nb": 580,
            "steps": [
                {
                    "command": [
                        "by apply/subsetP=> x; rewrite inE; case/andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetIr",
            "line_nb": 583,
            "steps": [
                {
                    "command": [
                        "by apply/subsetP=> x; rewrite inE; case/andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetUl",
            "line_nb": 586,
            "steps": [
                {
                    "command": [
                        "by apply/subsetP=> x; rewrite inE => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetUr",
            "line_nb": 589,
            "steps": [
                {
                    "command": [
                        "by apply/subsetP=> x; rewrite inE orbC => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetU1",
            "line_nb": 592,
            "steps": [
                {
                    "command": [
                        "exact: subsetUr.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetDl",
            "line_nb": 595,
            "steps": [
                {
                    "command": [
                        "by rewrite setDE subsetIl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subD1set",
            "line_nb": 598,
            "steps": [
                {
                    "command": [
                        "by rewrite subsetDl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetDr",
            "line_nb": 601,
            "steps": [
                {
                    "command": [
                        "by rewrite setDE subsetIr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub1set",
            "line_nb": 604,
            "steps": [
                {
                    "command": [
                        "by rewrite -subset_pred1; apply: eq_subset=> y; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subset1",
            "line_nb": 612,
            "steps": [
                {
                    "command": [
                        "rewrite eqEcard cards1 -cards_eq0 orbC andbC.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by case: posnP => // A0; rewrite (cards0_eq A0) sub0set.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "powerset1",
            "line_nb": 616,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> A; rewrite !inE subset1 orbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIidPl",
            "line_nb": 619,
            "steps": [
                {
                    "command": [
                        "apply: (iffP subsetP) => [sAB | <- x /setIP[] //].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by apply/setP=> x; rewrite inE; apply/andb_idr/sAB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setIidPr",
            "line_nb": 624,
            "steps": [
                {
                    "command": [
                        "by rewrite setIC; apply: setIidPl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardsDS",
            "line_nb": 627,
            "steps": [
                {
                    "command": [
                        "by rewrite cardsD => /setIidPr->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUidPl",
            "line_nb": 630,
            "steps": [
                {
                    "command": [
                        "by rewrite -setCS (sameP setIidPl eqP) -setCU (inj_eq setC_inj); apply: eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setUidPr",
            "line_nb": 633,
            "steps": [
                {
                    "command": [
                        "by rewrite setUC; apply: setUidPl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setDidPl",
            "line_nb": 636,
            "steps": [
                {
                    "command": [
                        "by rewrite setDE disjoints_subset; apply: setIidPl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subIset",
            "line_nb": 639,
            "steps": [
                {
                    "command": [
                        "by case/orP; apply: subset_trans; rewrite (subsetIl, subsetIr).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetI",
            "line_nb": 642,
            "steps": [
                {
                    "command": [
                        "rewrite !(sameP setIidPl eqP) setIA; have [-> //| ] := altP (A :&: B =P A).",
                        "VernacExtend",
                        "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
                    ]
                },
                {
                    "command": [
                        "by apply: contraNF => /eqP <-; rewrite -setIA -setIIl setIAC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetIP",
            "line_nb": 646,
            "steps": [
                {
                    "command": [
                        "by rewrite subsetI; apply: andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetIidl",
            "line_nb": 649,
            "steps": [
                {
                    "command": [
                        "by rewrite subsetI subxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetIidr",
            "line_nb": 652,
            "steps": [
                {
                    "command": [
                        "by rewrite setIC subsetIidl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "powersetI",
            "line_nb": 655,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> C; rewrite !inE subsetI.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subUset",
            "line_nb": 658,
            "steps": [
                {
                    "command": [
                        "by rewrite -setCS setCU subsetI !setCS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetU",
            "line_nb": 661,
            "steps": [
                {
                    "command": [
                        "by rewrite -!(setCS _ A) setCU; apply: subIset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subUsetP",
            "line_nb": 664,
            "steps": [
                {
                    "command": [
                        "by rewrite subUset; apply: andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetC",
            "line_nb": 667,
            "steps": [
                {
                    "command": [
                        "by rewrite -setCS setCK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subCset",
            "line_nb": 670,
            "steps": [
                {
                    "command": [
                        "by rewrite -setCS setCK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetD",
            "line_nb": 673,
            "steps": [
                {
                    "command": [
                        "by rewrite setDE subsetI -disjoints_subset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subDset",
            "line_nb": 676,
            "steps": [
                {
                    "command": [
                        "apply/subsetP/subsetP=> sABC x; rewrite !inE.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by case Bx: (x \\in B) => // Ax; rewrite sABC ?inE ?Bx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by case Bx: (x \\in B) => //; move/sABC; rewrite inE Bx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetDP",
            "line_nb": 681,
            "steps": [
                {
                    "command": [
                        "by rewrite subsetD; apply: andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setU_eq0",
            "line_nb": 684,
            "steps": [
                {
                    "command": [
                        "by rewrite -!subset0 subUset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setD_eq0",
            "line_nb": 687,
            "steps": [
                {
                    "command": [
                        "by rewrite -subset0 subDset setU0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setI_eq0",
            "line_nb": 690,
            "steps": [
                {
                    "command": [
                        "by rewrite disjoints_subset -setD_eq0 setDE setCK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "disjoint_setI0",
            "line_nb": 693,
            "steps": [
                {
                    "command": [
                        "by rewrite -setI_eq0; move/eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetD1",
            "line_nb": 696,
            "steps": [
                {
                    "command": [
                        "by rewrite setDE subsetI subsetC sub1set inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetD1P",
            "line_nb": 699,
            "steps": [
                {
                    "command": [
                        "by rewrite subsetD1; apply: andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "properD1",
            "line_nb": 702,
            "steps": [
                {
                    "command": [
                        "move=> Ax; rewrite properE subsetDl; apply/subsetPn; exists x=> //.",
                        "VernacExtend",
                        "f7e1535beb7276979a5b89bc8a1738146a5562e1"
                    ]
                },
                {
                    "command": [
                        "by rewrite in_setD1 Ax eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "properIr",
            "line_nb": 706,
            "steps": [
                {
                    "command": [
                        "by move=> nsAB; rewrite properE subsetIr subsetI negb_and nsAB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "properIl",
            "line_nb": 709,
            "steps": [
                {
                    "command": [
                        "by move=> nsBA; rewrite properE subsetIl subsetI negb_and nsBA orbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "properUr",
            "line_nb": 712,
            "steps": [
                {
                    "command": [
                        "by rewrite properE subsetUr subUset subxx /= andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "properUl",
            "line_nb": 715,
            "steps": [
                {
                    "command": [
                        "by move=> not_sBA; rewrite setUC properUr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proper1set",
            "line_nb": 718,
            "steps": [
                {
                    "command": [
                        "by move/proper_sub; rewrite sub1set.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "properIset",
            "line_nb": 721,
            "steps": [
                {
                    "command": [
                        "by case/orP; apply: sub_proper_trans; rewrite (subsetIl, subsetIr).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "properD",
            "line_nb": 732,
            "steps": [
                {
                    "command": [
                        "by rewrite setDE disjoints_subset => /properI/andP[-> /proper_sub].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_setX",
            "line_nb": 774,
            "steps": [
                {
                    "command": [
                        "by rewrite inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setXP",
            "line_nb": 777,
            "steps": [
                {
                    "command": [
                        "by rewrite inE; apply: andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardsX",
            "line_nb": 780,
            "steps": [
                {
                    "command": [
                        "by rewrite cardsE cardX.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imsetE",
            "line_nb": 796,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imset2E",
            "line_nb": 799,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imsetP",
            "line_nb": 848,
            "steps": [
                {
                    "command": [
                        "by rewrite [@imset]unlock inE; apply: imageP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imset2P",
            "line_nb": 852,
            "steps": [
                {
                    "command": [
                        "rewrite [@imset2]unlock inE.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply: (iffP imageP) => [[[x1 x2] Dx12] | [x1 x2 Dx1 Dx2]] -> {y}.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by case/andP: Dx12; exists x1 x2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by exists (x1, x2); rewrite //= !inE Dx1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_imset",
            "line_nb": 858,
            "steps": [
                {
                    "command": [
                        "by move=> Dx; apply/imsetP; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imset0",
            "line_nb": 861,
            "steps": [
                {
                    "command": [
                        "by apply/setP => y; rewrite inE; apply/imsetP=> [[x]]; rewrite inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imset_eq0",
            "line_nb": 864,
            "steps": [
                {
                    "command": [
                        "have [-> | [x Ax]] := set_0Vmem A; first by rewrite imset0 !eqxx.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -!cards_eq0 (cardsD1 x) Ax (cardsD1 (f x)) mem_imset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imset_set1",
            "line_nb": 868,
            "steps": [
                {
                    "command": [
                        "apply/setP => y.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by apply/imsetP/set1P=> [[x' /set1P-> //]| ->]; exists x; rewrite ?set11.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_imset2",
            "line_nb": 872,
            "steps": [
                {
                    "command": [
                        "by move=> Dx Dx2; apply/imset2P; exists x x2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_imset_pre",
            "line_nb": 875,
            "steps": [
                {
                    "command": [
                        "apply/subsetP/subsetP=> [sfAB x Ax | sAf'B fx].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite inE sfAB ?mem_imset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by case/imsetP=> x Ax ->; move/sAf'B: Ax; rewrite inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "preimsetS",
            "line_nb": 880,
            "steps": [
                {
                    "command": [
                        "by move=> sAB; apply/subsetP=> y; rewrite !inE; apply: subsetP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "preimset0",
            "line_nb": 883,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "preimsetT",
            "line_nb": 886,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "preimsetI",
            "line_nb": 889,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> y; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "preimsetU",
            "line_nb": 892,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> y; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "preimsetD",
            "line_nb": 895,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> y; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "preimsetC",
            "line_nb": 898,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> y; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imsetS",
            "line_nb": 901,
            "steps": [
                {
                    "command": [
                        "move=> sAB; apply/subsetP=> _ /imsetP[x Ax ->].",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by apply/imsetP; exists x; rewrite ?(subsetP sAB).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imset_proper",
            "line_nb": 905,
            "steps": [
                {
                    "command": [
                        "move=> injf /properP[sAB [x Bx nAx]]; rewrite properE imsetS //=.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "apply: contra nAx => sfBA.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "have: f x \\in f @: A by rewrite (subsetP sfBA) ?mem_imset.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by case/imsetP=> y Ay /injf-> //; apply: subsetP sAB y Ay.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "preimset_proper",
            "line_nb": 911,
            "steps": [
                {
                    "command": [
                        "move=> sBc /properP[sAB [u Bu nAu]]; rewrite properE preimsetS //=.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by apply/subsetPn; exists (iinv (subsetP sBc _ Bu)); rewrite inE /= f_iinv.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imsetU1",
            "line_nb": 921,
            "steps": [
                {
                    "command": [
                        "by rewrite imsetU imset_set1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imsetI",
            "line_nb": 924,
            "steps": [
                {
                    "command": [
                        "move=> injf; apply/eqP; rewrite eqEsubset subsetI.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "rewrite 2?imsetS (andTb, subsetIl, subsetIr) //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply/subsetP=> _ /setIP[/imsetP[x Ax ->] /imsetP[z Bz /injf eqxz]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite mem_imset // inE Ax eqxz.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imset2Sl",
            "line_nb": 930,
            "steps": [
                {
                    "command": [
                        "move=> sAB; apply/subsetP=> _ /imset2P[x y Ax Cy ->].",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by apply/imset2P; exists x y; rewrite ?(subsetP sAB).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imset2Sr",
            "line_nb": 934,
            "steps": [
                {
                    "command": [
                        "move=> sAB; apply/subsetP=> _ /imset2P[x y Ax Cy ->].",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by apply/imset2P; exists x y; rewrite ?(subsetP sAB).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imset2S",
            "line_nb": 938,
            "steps": [
                {
                    "command": [
                        "by move=> /(imset2Sl B2) sBA /(imset2Sr A)/subset_trans->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_preimset",
            "line_nb": 943,
            "steps": [
                {
                    "command": [
                        "by move=> eqfg; apply/setP => y; rewrite !inE eqfg.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_imset",
            "line_nb": 946,
            "steps": [
                {
                    "command": [
                        "move=> eqfg; apply/setP=> y.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by apply/imsetP/imsetP=> [] [x Dx ->]; exists x; rewrite ?eqfg.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_in_imset",
            "line_nb": 950,
            "steps": [
                {
                    "command": [
                        "move=> eqfg; apply/setP => y.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by apply/imsetP/imsetP=> [] [x Dx ->]; exists x; rewrite ?eqfg.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_in_imset2",
            "line_nb": 954,
            "steps": [
                {
                    "command": [
                        "move=> eqfg; apply/setP => y.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by apply/imset2P/imset2P=> [] [x x2 Dx Dx2 ->]; exists x x2; rewrite ?eqfg.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imset2_pair",
            "line_nb": 959,
            "steps": [
                {
                    "command": [
                        "apply/setP=> [[x y]]; rewrite !inE /=.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by apply/imset2P/andP=> [[_ _ _ _ [-> ->]//]| []]; exists x y.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setXS",
            "line_nb": 963,
            "steps": [
                {
                    "command": [
                        "by move=> sAB1 sAB2; rewrite -!imset2_pair imset2S.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_set0",
            "line_nb": 977,
            "steps": [
                {
                    "command": [
                        "by apply: big_pred0 => i; rewrite inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_set1",
            "line_nb": 980,
            "steps": [
                {
                    "command": [
                        "by apply: big_pred1 => i; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_setIDdep",
            "line_nb": 983,
            "steps": [
                {
                    "command": [
                        "rewrite (bigID (mem B)) setDE.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by congr (aop _ _); apply: eq_bigl => i; rewrite !inE andbAC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_setID",
            "line_nb": 987,
            "steps": [
                {
                    "command": [
                        "rewrite (bigID (mem B)) !(eq_bigl _ _ (in_set _)) //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by congr (aop _); apply: eq_bigl => i; rewrite andbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_setU1",
            "line_nb": 995,
            "steps": [
                {
                    "command": [
                        "by move=> notAa; rewrite (@big_setD1 a) ?setU11 //= setU1K.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_imset",
            "line_nb": 998,
            "steps": [
                {
                    "command": [
                        "move=> injh; pose hA := mem (image h A).",
                        "VernacExtend",
                        "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
                    ]
                },
                {
                    "command": [
                        "have [x0 Ax0 | A0] := pickP A; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !big_pred0 // => x; apply/imsetP=> [[i]]; rewrite unfold_in A0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite (eq_bigl hA) => [|j]; last by apply/imsetP/imageP.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "pose h' j := if insub j : {? j | hA j} is Some u then iinv (svalP u) else x0.",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "rewrite (reindex_onto h h') => [|j hAj]; rewrite {}/h'; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite (insubT hA hAj) f_iinv.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: eq_bigl => i; case: insubP => [u -> /= def_u | nhAhi].",
                        "VernacExtend",
                        "20ec428e50c31e1399aee62c5a532bc8417a4b29"
                    ]
                },
                {
                    "command": [
                        "set i' := iinv _; have Ai' : i' \\in A := mem_iinv (svalP u).",
                        "VernacExtend",
                        "5a669f4ad2118b005921530a069ac8f03fd7f32b"
                    ]
                },
                {
                    "command": [
                        "by apply/eqP/idP=> [<- // | Ai]; apply: injh; rewrite ?f_iinv.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "symmetry; rewrite (negbTE nhAhi); apply/idP=> Ai.",
                        "VernacExtend",
                        "b531cdfdd16edb48e06651aa0838bf384aa38229"
                    ]
                },
                {
                    "command": [
                        "by case/imageP: nhAhi; exists i.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "partition_big_imset",
            "line_nb": 1012,
            "steps": [
                {
                    "command": [
                        "by apply: partition_big => i Ai; apply/imsetP; exists i.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imset2_set1l",
            "line_nb": 1024,
            "steps": [
                {
                    "command": [
                        "apply/setP=> y; apply/imset2P/imsetP=> [[x x2 /set1P->]| [x2 Dx2 ->]].",
                        "VernacExtend",
                        "8d9dae45eeb3a769b8a865cef8ae476451f63802"
                    ]
                },
                {
                    "command": [
                        "by exists x2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by exists x1 x2; rewrite ?set11.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imset2_set1r",
            "line_nb": 1029,
            "steps": [
                {
                    "command": [
                        "apply/setP=> y; apply/imset2P/imsetP=> [[x1 x Dx1 /set1P->]| [x1 Dx1 ->]].",
                        "VernacExtend",
                        "8d9dae45eeb3a769b8a865cef8ae476451f63802"
                    ]
                },
                {
                    "command": [
                        "by exists x1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by exists x1 x2; rewrite ?set11.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imset_card",
            "line_nb": 1039,
            "steps": [
                {
                    "command": [
                        "by rewrite [@imset]unlock cardsE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_imset_card",
            "line_nb": 1042,
            "steps": [
                {
                    "command": [
                        "by rewrite imset_card leq_image_card.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_in_imset",
            "line_nb": 1045,
            "steps": [
                {
                    "command": [
                        "by move=> injf; rewrite imset_card card_in_image.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_imset",
            "line_nb": 1048,
            "steps": [
                {
                    "command": [
                        "by move=> injf; rewrite imset_card card_image.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imset_injP",
            "line_nb": 1051,
            "steps": [
                {
                    "command": [
                        "by rewrite [@imset]unlock cardsE; apply: image_injP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "can2_in_imset_pre",
            "line_nb": 1054,
            "steps": [
                {
                    "command": [
                        "move=> fK gK; apply/setP=> y; rewrite inE.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by apply/imsetP/idP=> [[x Ax ->] | Agy]; last exists (g y); rewrite ?(fK, gK).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "can2_imset_pre",
            "line_nb": 1058,
            "steps": [
                {
                    "command": [
                        "by move=> fK gK; apply: can2_in_imset_pre; apply: in1W.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "on_card_preimset",
            "line_nb": 1063,
            "steps": [
                {
                    "command": [
                        "case=> g fK gK; rewrite -(can2_in_imset_pre gK) // card_in_imset //.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "exact: can_in_inj gK.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "can_imset_pre",
            "line_nb": 1067,
            "steps": [
                {
                    "command": [
                        "move=> fK; apply: can2_imset_pre => // x.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "suffices fx: x \\in codom f by rewrite -(f_iinv fx) fK.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "exact/(subset_cardP (card_codom (can_inj fK)))/subsetP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imset_id",
            "line_nb": 1072,
            "steps": [
                {
                    "command": [
                        "by apply/setP=> x; rewrite (@can_imset_pre _ _ id) ?inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_powerset",
            "line_nb": 1080,
            "steps": [
                {
                    "command": [
                        "rewrite -card_bool -(card_pffun_on false) -(card_imset _ val_inj).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply: eq_card => f; pose sf := false.-support f; pose D := finset sf.",
                        "VernacExtend",
                        "889ae7f2e26411ea40ec1d82e3ab2ec00ff93ae5"
                    ]
                },
                {
                    "command": [
                        "have sDA: (D \\subset A) = (sf \\subset A) by apply: eq_subset; apply: in_set.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have eq_sf x : sf x = f x by rewrite /= negb_eqb addbF.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have valD: val D = f by rewrite /D unlock; apply/ffunP=> x; rewrite ffunE eq_sf.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/imsetP/pffun_onP=> [[B] | [sBA _]]; last by exists D; rewrite // inE ?sDA.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite inE -sDA -valD => sBA /val_inj->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bigcup_sup",
            "line_nb": 1125,
            "steps": [
                {
                    "command": [
                        "by move=> Pj; rewrite (bigD1 j) //= subsetUl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bigcup_max",
            "line_nb": 1128,
            "steps": [
                {
                    "command": [
                        "by move=> Pj sUF; apply: subset_trans (bigcup_sup _ Pj).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bigcupsP",
            "line_nb": 1136,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [sFU i Pi| sFU].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by apply: subset_trans sFU; apply: bigcup_sup.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply/subsetP=> x /bigcupP[i Pi]; apply: (subsetP (sFU i Pi)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bigcup_disjoint",
            "line_nb": 1141,
            "steps": [
                {
                    "command": [
                        "move=> dUF; rewrite disjoint_sym disjoint_subset.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by apply/bigcupsP=> i /dUF; rewrite disjoint_sym disjoint_subset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bigcap_inf",
            "line_nb": 1158,
            "steps": [
                {
                    "command": [
                        "by move=> Pj; rewrite (bigD1 j) //= subsetIl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bigcap_min",
            "line_nb": 1161,
            "steps": [
                {
                    "command": [
                        "by move=> Pj; apply: subset_trans (bigcap_inf _ Pj).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bigcapsP",
            "line_nb": 1164,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [sUF i Pi | sUF].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by apply: subset_trans sUF _; apply: bigcap_inf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim/big_rec: _ => [|i V Pi sUV]; apply/subsetP=> x Ux; rewrite inE //.",
                        "VernacExtend",
                        "8c9e5024ec19e13281e0187dab3d65b93b116a6a"
                    ]
                },
                {
                    "command": [
                        "by rewrite !(subsetP _ x Ux) ?sUF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bigcapP",
            "line_nb": 1170,
            "steps": [
                {
                    "command": [
                        "rewrite -sub1set.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: (iffP (bigcapsP _ _ _)) => Fx i /Fx; rewrite sub1set.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setC_bigcup",
            "line_nb": 1174,
            "steps": [
                {
                    "command": [
                        "by apply: big_morph => [A B|]; rewrite ?setC0 ?setCU.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setC_bigcap",
            "line_nb": 1177,
            "steps": [
                {
                    "command": [
                        "by apply: big_morph => [A B|]; rewrite ?setCT ?setCI.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bigcap_setU",
            "line_nb": 1180,
            "steps": [
                {
                    "command": [
                        "by apply: setC_inj; rewrite setCI !setC_bigcap bigcup_setU.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bigcap_seq",
            "line_nb": 1183,
            "steps": [
                {
                    "command": [
                        "by apply: setC_inj; rewrite !setC_bigcap bigcup_seq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "curry_imset2l",
            "line_nb": 1204,
            "steps": [
                {
                    "command": [
                        "apply/setP=> y; apply/imset2P/bigcupP => [[x1 x2 Dx1 Dx2 ->{y}] | [x1 Dx1]].",
                        "VernacExtend",
                        "8d9dae45eeb3a769b8a865cef8ae476451f63802"
                    ]
                },
                {
                    "command": [
                        "by exists x1; rewrite // mem_imset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by case/imsetP=> x2 Dx2 ->{y}; exists x1 x2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "curry_imset2r",
            "line_nb": 1209,
            "steps": [
                {
                    "command": [
                        "apply/setP=> y; apply/imset2P/bigcupP => [[x1 x2 Dx1 Dx2 ->{y}] | [x2 Dx2]].",
                        "VernacExtend",
                        "8d9dae45eeb3a769b8a865cef8ae476451f63802"
                    ]
                },
                {
                    "command": [
                        "by exists x2; rewrite // (mem_imset (f^~ x2)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by case/imsetP=> x1 Dx1 ->{y}; exists x1 x2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imset2Ul",
            "line_nb": 1215,
            "steps": [
                {
                    "command": [
                        "by rewrite !curry_imset2l bigcup_setU.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imset2Ur",
            "line_nb": 1218,
            "steps": [
                {
                    "command": [
                        "by rewrite !curry_imset2r bigcup_setU.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_card_setU",
            "line_nb": 1233,
            "steps": [
                {
                    "command": [
                        "rewrite -(addn0 #|_|) -setI_eq0 -cards_eq0 -cardsUI eq_sym.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (mono_leqif (leq_add2l _)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_card_cover",
            "line_nb": 1237,
            "steps": [
                {
                    "command": [
                        "split; last exact: eq_sym.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite /cover; elim/big_rec2: _ => [|A n U _ leUn]; first by rewrite cards0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite (leq_trans (leq_card_setU A U).1) ?leq_add2l.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "trivIsetP",
            "line_nb": 1242,
            "steps": [
                {
                    "command": [
                        "have->: P = [set x in enum (mem P)] by apply/setP=> x; rewrite inE mem_enum.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "elim: {P}(enum _) (enum_uniq (mem P)) => [_ | A e IHe] /=.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by rewrite /trivIset /cover !big_set0 cards0; left=> A; rewrite inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case/andP; rewrite set_cons -(in_set (fun B => B \\in e)) => PA {IHe}/IHe.",
                        "VernacExtend",
                        "ba44c9d0281a02110ce54645304e6d990debd9c0"
                    ]
                },
                {
                    "command": [
                        "move: {e}[set x in e] PA => P PA IHP.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "rewrite /trivIset /cover !big_setU1 //= eq_sym.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have:= leq_card_cover P; rewrite -(mono_leqif (leq_add2l #|A|)).",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "move/(leqif_trans (leq_card_setU _ _))->; rewrite disjoints_subset setC_bigcup.",
                        "VernacExtend",
                        "01eaddc5beea13e116fcc5de5430a824e6e09efb"
                    ]
                },
                {
                    "command": [
                        "case: bigcapsP => [disjA | meetA]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "right=> [tI]; case: meetA => B PB; rewrite -disjoints_subset.",
                        "VernacExtend",
                        "2ec7e94e3b7153a35df793e01cb5c36a154cc563"
                    ]
                },
                {
                    "command": [
                        "by rewrite tI ?setU11 ?setU1r //; apply: contraNneq PA => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: (iffP IHP) => [] tI B C PB PC; last by apply: tI; apply: setU1r.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case/setU1P: PC PB => [->|PC] /setU1P[->|PB]; try by [apply: tI | case/eqP]; first rewrite disjoint_sym; rewrite disjoints_subset disjA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "trivIsetS",
            "line_nb": 1257,
            "steps": [
                {
                    "command": [
                        "by move/subsetP/sub_in2=> sPQ /trivIsetP/sPQ/trivIsetP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "trivIsetI",
            "line_nb": 1260,
            "steps": [
                {
                    "command": [
                        "by apply: trivIsetS; rewrite -setI_powerset subsetIl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cover_setI",
            "line_nb": 1263,
            "steps": [
                {
                    "command": [
                        "by apply/bigcupsP=> A /setIdP[PA sAD]; rewrite subsetI sAD andbT (bigcup_max A).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pblock_mem",
            "line_nb": 1271,
            "steps": [
                {
                    "command": [
                        "by rewrite -mem_pblock /pblock; case: pickP => [A /andP[]| _] //=; rewrite inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "same_pblock",
            "line_nb": 1279,
            "steps": [
                {
                    "command": [
                        "rewrite {1 3}/pblock => tI; case: pickP => [A|]; last by rewrite inE.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case/andP=> PA _{y} /= Ax; apply: def_pblock.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_pblock",
            "line_nb": 1283,
            "steps": [
                {
                    "command": [
                        "move=> tiP Px; apply/eqP/idP=> [eq_xy | /same_pblock-> //].",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "move: Px; rewrite -mem_pblock eq_xy /pblock.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by case: pickP => [B /andP[] // | _]; rewrite inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "trivIsetU1",
            "line_nb": 1288,
            "steps": [
                {
                    "command": [
                        "move=> tiAP tiP notPset0; split; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply: contra notPset0 => P_A.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by have:= tiAP A P_A; rewrite -setI_eq0 setIid => /eqP <-.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/trivIsetP=> B1 B2 /setU1P[->|PB1] /setU1P[->|PB2]; by [apply: (trivIsetP _ tiP) | rewrite ?eqxx // ?(tiAP, disjoint_sym)].",
                        "VernacExtend",
                        "9ba8844f90da4a48c6c9ed986dcaebadc0623e9f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cover_imset",
            "line_nb": 1294,
            "steps": [
                {
                    "command": [
                        "apply/setP=> x.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "apply/bigcupP/bigcupP=> [[_ /imsetP[i Ji ->]] | [i]]; first by exists i.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by exists (F i); first apply: mem_imset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cover_partition",
            "line_nb": 1306,
            "steps": [
                {
                    "command": [
                        "by case/and3P=> /eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_partition",
            "line_nb": 1309,
            "steps": [
                {
                    "command": [
                        "by case/and3P=> /eqP <- /eqnP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_uniform_partition",
            "line_nb": 1312,
            "steps": [
                {
                    "command": [
                        "by move=> uniP /card_partition->; rewrite -sum_nat_const; apply: eq_bigr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_trivIset",
            "line_nb": 1326,
            "steps": [
                {
                    "command": [
                        "have biginT := eq_bigl _ _ (fun _ => andbT _) => tiP.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite -biginT big_trivIset_cond //; apply: eq_bigr => A _; apply: biginT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set_partition_big_cond",
            "line_nb": 1330,
            "steps": [
                {
                    "command": [
                        "by case/and3P=> /eqP <- tI_P _; apply: big_trivIset_cond.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "set_partition_big",
            "line_nb": 1333,
            "steps": [
                {
                    "command": [
                        "by case/and3P=> /eqP <- tI_P _; apply: big_trivIset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "partition_disjoint_bigcup",
            "line_nb": 1336,
            "steps": [
                {
                    "command": [
                        "move=> disjF; pose P := [set F i | i in I & F i != set0].",
                        "VernacExtend",
                        "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
                    ]
                },
                {
                    "command": [
                        "have trivP: trivIset P.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/trivIsetP=> _ _ /imsetP[i _ ->] /imsetP[j _ ->] neqFij.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by apply: disjF; apply: contraNneq neqFij => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have ->: \\bigcup_i F i = cover P.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/esym; rewrite cover_imset big_mkcond; apply: eq_bigr => i _.",
                        "VernacExtend",
                        "da24caf87c1bbbad0538b8be68905ec456c78aa7"
                    ]
                },
                {
                    "command": [
                        "by rewrite inE; case: eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite big_trivIset // /rhs big_imset => [|i j _ /setIdP[_ notFj0] eqFij].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite big_mkcond; apply: eq_bigr => i _; rewrite inE.",
                        "VernacExtend",
                        "fe8f197e86415fc7f0a74eda9d312128b9473eda"
                    ]
                },
                {
                    "command": [
                        "by case: eqP => //= ->; rewrite big_set0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply: contraNeq (disjF _ _) _; rewrite -setI_eq0 eqFij setIid.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Pxx",
            "line_nb": 1356,
            "steps": [
                {
                    "command": [
                        "by move=> Dx; rewrite !inE Dx (eqiR Dx Dx).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pblock_equivalence_partition",
            "line_nb": 1373,
            "steps": [
                {
                    "command": [
                        "have [_ tiP _] := and3P equivalence_partitionP.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by move=> x y Dx Dy; rewrite /= (def_pblock tiP (PPx Dx) (Pxx Dx)) inE Dy.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pblock_equivalence",
            "line_nb": 1378,
            "steps": [
                {
                    "command": [
                        "case/and3P=> /eqP <- tiP _ x y z Px Py Pz.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite mem_pblock; split=> // /same_pblock->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equivalence_partition_pblock",
            "line_nb": 1382,
            "steps": [
                {
                    "command": [
                        "case/and3P=> /eqP <-{D} tiP notP0; apply/setP=> B /=; set D := cover P.",
                        "VernacExtend",
                        "26f45d48858eb049eed6f0c8454c3a419a1a8d5b"
                    ]
                },
                {
                    "command": [
                        "have defP x: x \\in D -> [set y in D | y \\in pblock P x] = pblock P x.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by move=> Dx; apply/setIidPr; rewrite (bigcup_max (pblock P x)) ?pblock_mem.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/imsetP/idP=> [[x Px ->{B}] | PB]; first by rewrite defP ?pblock_mem.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have /set0Pn[x Bx]: B != set0 := memPn notP0 B PB.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have Px: x \\in cover P by apply/bigcupP; exists B.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by exists x; rewrite // defP // (def_pblock tiP PB Bx).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "preim_partitionP",
            "line_nb": 1394,
            "steps": [
                {
                    "command": [
                        "by apply/equivalence_partitionP; split=> // /eqP->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "preim_partition_pblock",
            "line_nb": 1398,
            "steps": [
                {
                    "command": [
                        "move=> partP; have [/eqP defD tiP _] := and3P partP.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "rewrite -{2}(equivalence_partition_pblock partP); apply: eq_in_imset => x Dx.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by apply/setP=> y; rewrite !inE eq_pblock ?defD.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "transversal_sub",
            "line_nb": 1419,
            "steps": [
                {
                    "command": [
                        "by case/and3P: trPX.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tiP",
            "line_nb": 1422,
            "steps": [
                {
                    "command": [
                        "by case/andP: trPX => /and3P[].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sXP",
            "line_nb": 1425,
            "steps": [
                {
                    "command": [
                        "by case/and3P: trPX => /andP[/eqP-> _] /subsetP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "trX",
            "line_nb": 1428,
            "steps": [
                {
                    "command": [
                        "by case/and3P: trPX => _ _ /forall_inP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "setI_transversal_pblock",
            "line_nb": 1431,
            "steps": [
                {
                    "command": [
                        "by case/trX/cards1P=> x defXB; rewrite /transversal_repr defXB /pick enum_set1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "repr_mem_pblock",
            "line_nb": 1434,
            "steps": [
                {
                    "command": [
                        "by move=> PB; rewrite -sub1set -setI_transversal_pblock ?subsetIr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "repr_mem_transversal",
            "line_nb": 1437,
            "steps": [
                {
                    "command": [
                        "by move=> PB; rewrite -sub1set -setI_transversal_pblock ?subsetIl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "transversal_reprK",
            "line_nb": 1440,
            "steps": [
                {
                    "command": [
                        "by move=> B PB; rewrite /= (def_pblock tiP PB) ?repr_mem_pblock.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pblockK",
            "line_nb": 1443,
            "steps": [
                {
                    "command": [
                        "move=> x Xx; have /bigcupP[B PB Bx] := sXP Xx; rewrite (def_pblock tiP PB Bx).",
                        "VernacExtend",
                        "7cbc77a1e43ca1454debc28656b2dec3869cf69b"
                    ]
                },
                {
                    "command": [
                        "by apply/esym/set1P; rewrite -setI_transversal_pblock // inE Xx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pblock_inj",
            "line_nb": 1447,
            "steps": [
                {
                    "command": [
                        "by move=> x0; apply: (can_in_inj (pblockK x0)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pblock_transversal",
            "line_nb": 1450,
            "steps": [
                {
                    "command": [
                        "apply/setP=> B; apply/imsetP/idP=> [[x Xx ->] | PB].",
                        "VernacExtend",
                        "8d9dae45eeb3a769b8a865cef8ae476451f63802"
                    ]
                },
                {
                    "command": [
                        "by rewrite pblock_mem ?sXP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have /cards1P[x0 _] := trX PB; set x := transversal_repr x0 X B.",
                        "VernacExtend",
                        "81881a093b2294c76be3b432fbe83612064d7bc9"
                    ]
                },
                {
                    "command": [
                        "by exists x; rewrite ?transversal_reprK ?repr_mem_transversal.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_transversal",
            "line_nb": 1456,
            "steps": [
                {
                    "command": [
                        "by rewrite -pblock_transversal card_in_imset //; apply: pblock_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "im_transversal_repr",
            "line_nb": 1459,
            "steps": [
                {
                    "command": [
                        "rewrite -{2}[X]imset_id -pblock_transversal -imset_comp.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_in_imset; apply: pblockK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minset_eq",
            "line_nb": 1492,
            "steps": [
                {
                    "command": [
                        "by move=> eP12; apply: eq_forallb => B; rewrite eP12.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minsetP",
            "line_nb": 1495,
            "steps": [
                {
                    "command": [
                        "apply: (iffP forallP) => [minA | [PA minA] B].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "split; first by have:= minA A; rewrite subxx eqxx /= => /eqP.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by move=> B PB sBA; have:= minA B; rewrite PB sBA /= eqb_id => /eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply/implyP=> sBA; apply/eqP; apply/eqP/idP=> [-> // | /minA]; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minsetp",
            "line_nb": 1502,
            "steps": [
                {
                    "command": [
                        "by case/minsetP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minsetinf",
            "line_nb": 1505,
            "steps": [
                {
                    "command": [
                        "by case/minsetP=> _; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxset_key",
            "line_nb": 1521,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxset_eq",
            "line_nb": 1525,
            "steps": [
                {
                    "command": [
                        "by move=> eP12; apply: minset_eq => x /=; rewrite !unlock_with eP12.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxminset",
            "line_nb": 1528,
            "steps": [
                {
                    "command": [
                        "by rewrite /maxset unlock.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minmaxset",
            "line_nb": 1531,
            "steps": [
                {
                    "command": [
                        "by rewrite /maxset unlock setCK; apply: minset_eq => B /=; rewrite setCK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxsetP",
            "line_nb": 1534,
            "steps": [
                {
                    "command": [
                        "apply: (iffP minsetP); rewrite ?setCK unlock_with => [] [PA minA].",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "by split=> // B PB sAB; rewrite -[B]setCK [~: B]minA (setCK, setCS).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by split=> // B PB' sBA'; rewrite -(minA _ PB') -1?setCS setCK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxsetp",
            "line_nb": 1539,
            "steps": [
                {
                    "command": [
                        "by case/maxsetP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxsetsup",
            "line_nb": 1542,
            "steps": [
                {
                    "command": [
                        "by case/maxsetP=> _; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ex_maxset",
            "line_nb": 1545,
            "steps": [
                {
                    "command": [
                        "move=> exP; have{exP}: exists A, P (~: A).",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "by case: exP => A PA; exists (~: A); rewrite setCK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by case/ex_minset=> A minA; exists (~: A); rewrite /maxset unlock setCK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxset_exists",
            "line_nb": 1550,
            "steps": [
                {
                    "command": [
                        "move=> PC; pose P' B := P (~: B); have: P' (~: C) by rewrite /P' setCK.",
                        "VernacExtend",
                        "5e9f04e072d058c7688e55b9dff4d25555e15183"
                    ]
                },
                {
                    "command": [
                        "case/minset_exists=> B; rewrite -[B]setCK setCS.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "by exists (~: B); rewrite // /maxset unlock.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}