{
    "filename": "mathcomp/ssreflect/eqtype.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrfun ssrbool.",
            "VernacRequire",
            "6bc5ca42638605b758087d61b8ffe70e5cce2c72"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Module Equality.",
            "VernacDefineModule",
            "eb6ebc5d3e98ce0595c9f140f1325842c12b386b"
        ],
        [
            "Definition axiom T (e : rel T) := forall x y, reflect (x = y) (e x y).",
            "VernacDefinition",
            "7587dd0ee3f6102bf1671c323dc89539ff414fa7"
        ],
        [
            "Structure mixin_of T := Mixin {op : rel T; _ : axiom op}.",
            "VernacInductive",
            "9085f15cecca2caf91d8212f7241285d960da472"
        ],
        [
            "Notation class_of := mixin_of (only parsing).",
            "VernacSyntacticDefinition",
            "7196b196bbc3a41e5ce702c5c8b4974fd7174202"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Structure type := Pack {sort; _ : class_of sort}.",
            "VernacInductive",
            "42b0161295055637e72e97af35c3d44479cc946b"
        ],
        [
            "Local Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "e4478cd37693106f84ed020bd073c4970dc87530"
        ],
        [
            "Variables (T : Type) (cT : type).",
            "VernacAssumption",
            "eb35f5737a32cba56acb24ac87490232dc2dfcb9"
        ],
        [
            "Definition class := let: Pack _ c := cT return class_of cT in c.",
            "VernacDefinition",
            "037d2d3a3fb5f93be0dcb742c7cc8b0f16e89227"
        ],
        [
            "Definition clone := fun c & cT -> T & phant_id (@Pack T c) cT => Pack c.",
            "VernacDefinition",
            "3d874288b42bcd6d9d106b34e1be4b39c1c60391"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "9e1cbf06afa0d2731dbb8bfd6b9ae32be22a8ae7"
        ],
        [
            "Notation eqType := type.",
            "VernacSyntacticDefinition",
            "2c264e3a1e0f49b4dd40cd9e585db10ae21f5027"
        ],
        [
            "Notation EqMixin := Mixin.",
            "VernacSyntacticDefinition",
            "9c9ac60be0bbca2fcd55cd98c04e9b534cc704a1"
        ],
        [
            "Notation EqType T m := (@Pack T m).",
            "VernacSyntacticDefinition",
            "f5899fb77e7656bb6f0fd9dd602d8702247be00a"
        ],
        [
            "Notation \"[ 'eqMixin' 'of' T ]\" := (class _ : mixin_of T) (at level 0, format \"[ 'eqMixin' 'of' T ]\") : form_scope.",
            "VernacNotation",
            "c6bddd8eb414a12d1012725261c21213227ff53c"
        ],
        [
            "Notation \"[ 'eqType' 'of' T 'for' C ]\" := (@clone T C _ idfun id) (at level 0, format \"[ 'eqType' 'of' T 'for' C ]\") : form_scope.",
            "VernacNotation",
            "136266fd73be8f83d2325ac86d5e37d1a392a9f9"
        ],
        [
            "Notation \"[ 'eqType' 'of' T ]\" := (@clone T _ _ id id) (at level 0, format \"[ 'eqType' 'of' T ]\") : form_scope.",
            "VernacNotation",
            "b50d5a5c1710ffb153bf004b99739f3699c070e3"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End Equality.",
            "VernacEndSegment",
            "460cb153287e4f693c29b9baa2a891bb8bc7a79c"
        ],
        [
            "Export Equality.Exports.",
            "VernacImport",
            "3e9f57e0e7dba4beb132bd408e68e6a315b5a6ba"
        ],
        [
            "Definition eq_op T := Equality.op (Equality.class T).",
            "VernacDefinition",
            "df997eb437a7de6e26265d8ff7f45e6c6f3b965a"
        ],
        [
            "Lemma eqE T x : eq_op x = Equality.op (Equality.class T) x.",
            "VernacStartTheoremProof",
            "e1ed0034b874bd0d84d4985b8b0f1792b5979f40"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqP T : Equality.axiom (@eq_op T).",
            "VernacStartTheoremProof",
            "8e0e911cf14de93baeacff73e28cdfe4d64b9f1c"
        ],
        [
            "by case: T => ? [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments eqP {T x y}.",
            "VernacArguments",
            "135fb3e9a144147aef32d4d1b43b79aa0db85121"
        ],
        [
            "Delimit Scope eq_scope with EQ.",
            "VernacDelimiters",
            "7147fdc5f825123271327997e193cc903643696c"
        ],
        [
            "Open Scope eq_scope.",
            "VernacOpenCloseScope",
            "de170a19a9ae5e00cb0bf3c3358b6b6ce3364b23"
        ],
        [
            "Notation \"x == y\" := (eq_op x y) (at level 70, no associativity) : bool_scope.",
            "VernacNotation",
            "42f0ea35eceb3cd89293a45d682a6ad91292dde9"
        ],
        [
            "Notation \"x == y :> T\" := ((x : T) == (y : T)) (at level 70, y at next level) : bool_scope.",
            "VernacNotation",
            "716c1fb69f62e81da63294be48bfd2a0db1bb0f7"
        ],
        [
            "Notation \"x != y\" := (~~ (x == y)) (at level 70, no associativity) : bool_scope.",
            "VernacNotation",
            "39015c4ae5059b7fe764c35491b8fb61d82db709"
        ],
        [
            "Notation \"x != y :> T\" := (~~ (x == y :> T)) (at level 70, y at next level) : bool_scope.",
            "VernacNotation",
            "265b7cfc4c8bba2c1983782b061990e358de6577"
        ],
        [
            "Notation \"x =P y\" := (eqP : reflect (x = y) (x == y)) (at level 70, no associativity) : eq_scope.",
            "VernacNotation",
            "538482611bc6583f9dea25d28f0a28da4c7f58ae"
        ],
        [
            "Notation \"x =P y :> T\" := (eqP : reflect (x = y :> T) (x == y :> T)) (at level 70, y at next level, no associativity) : eq_scope.",
            "VernacNotation",
            "9dd73a2a2c552d0e338ac216a82689abcd34d0e2"
        ],
        [
            "Prenex Implicits eq_op eqP.",
            "VernacExtend",
            "0bc97741cbf856432908aa8c1276730f6e0e1cd5"
        ],
        [
            "Lemma eq_refl (T : eqType) (x : T) : x == x.",
            "VernacStartTheoremProof",
            "deb81188abccd8140765048e1159ed360da40274"
        ],
        [
            "exact/eqP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Notation eqxx := eq_refl.",
            "VernacSyntacticDefinition",
            "8eefcc2f015e0407a5615a5db3ddc857ff540b2a"
        ],
        [
            "Lemma eq_sym (T : eqType) (x y : T) : (x == y) = (y == x).",
            "VernacStartTheoremProof",
            "9d4dfd834b3b0ebe4d4be5c5a2a75c42f527afc4"
        ],
        [
            "exact/eqP/eqP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve eq_refl eq_sym : core.",
            "VernacHints",
            "133f1c025cbe3b61dcb4c50ecb17b0d5d83eaa74"
        ],
        [
            "Section Contrapositives.",
            "VernacBeginSection",
            "f8bff575e6766f880a34329ed207f6ea2ac9d5a4"
        ],
        [
            "Variables (T1 T2 : eqType).",
            "VernacAssumption",
            "6b7936790003d14445c2713b59a7e4e06a99a280"
        ],
        [
            "Implicit Types (A : pred T1) (b : bool) (x : T1) (z : T2).",
            "VernacReserve",
            "1637fa2e2159bb35a4a2ff3ab532b8ff627d81eb"
        ],
        [
            "Lemma contraTeq b x y : (x != y -> ~~ b) -> b -> x = y.",
            "VernacStartTheoremProof",
            "e8572a5f5757b1726c2743f6877d4427f5868d44"
        ],
        [
            "by move=> imp hyp; apply/eqP; apply: contraTT hyp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma contraNeq b x y : (x != y -> b) -> ~~ b -> x = y.",
            "VernacStartTheoremProof",
            "8b85eb946d0d60dee0f39e2bdcb73c0b5d0deae5"
        ],
        [
            "by move=> imp hyp; apply/eqP; apply: contraNT hyp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma contraFeq b x y : (x != y -> b) -> b = false -> x = y.",
            "VernacStartTheoremProof",
            "cf29bd9546aa20ad6455326a350e80ac37200259"
        ],
        [
            "by move=> imp /negbT; apply: contraNeq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma contraTneq b x y : (x = y -> ~~ b) -> b -> x != y.",
            "VernacStartTheoremProof",
            "0f1eda81c3c58405617aa7043f310944b88a5ac8"
        ],
        [
            "by move=> imp; apply: contraTN => /eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma contraNneq b x y : (x = y -> b) -> ~~ b -> x != y.",
            "VernacStartTheoremProof",
            "be902d0d762cc3170561a38152154e528f693aa4"
        ],
        [
            "by move=> imp; apply: contraNN => /eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma contraFneq b x y : (x = y -> b) -> b = false -> x != y.",
            "VernacStartTheoremProof",
            "7fff271937aa93dc412ee93b23c876075885c8c1"
        ],
        [
            "by move=> imp /negbT; apply: contraNneq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma contra_eqN b x y : (b -> x != y) -> x = y -> ~~ b.",
            "VernacStartTheoremProof",
            "46103b3a319b2c6357ce3c07c4ad8ad2d12a7dd8"
        ],
        [
            "by move=> imp /eqP; apply: contraL.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma contra_eqF b x y : (b -> x != y) -> x = y -> b = false.",
            "VernacStartTheoremProof",
            "ec153da39f070fa797ff1a1a0341f7cb780b9b06"
        ],
        [
            "by move=> imp /eqP; apply: contraTF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma contra_eqT b x y : (~~ b -> x != y) -> x = y -> b.",
            "VernacStartTheoremProof",
            "45302b80c367a8c4e384fa79834ba02dee2407e5"
        ],
        [
            "by move=> imp /eqP; apply: contraLR.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma contra_neqN b x y : (b -> x = y) -> x != y -> ~~ b.",
            "VernacStartTheoremProof",
            "ddd2edf04795c4665b5f5936b1b0f6d4a14a7791"
        ],
        [
            "by move=> imp; apply: contraNN => /imp->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma contra_neqF b x y : (b -> x = y) -> x != y -> b = false.",
            "VernacStartTheoremProof",
            "39b51fb686dfc2255f1312ffd46203042420bb2a"
        ],
        [
            "by move=> imp; apply: contraNF => /imp->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma contra_neqT b x y : (~~ b -> x = y) -> x != y -> b.",
            "VernacStartTheoremProof",
            "6b40e43908feb54b14a8818514e905da116c0403"
        ],
        [
            "by move=> imp; apply: contraNT => /imp->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma contra_eq z1 z2 x1 x2 : (x1 != x2 -> z1 != z2) -> z1 = z2 -> x1 = x2.",
            "VernacStartTheoremProof",
            "70180751a13e854def7b610cc3d92540c81c2286"
        ],
        [
            "by move=> imp /eqP; apply: contraTeq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma contra_neq z1 z2 x1 x2 : (x1 = x2 -> z1 = z2) -> z1 != z2 -> x1 != x2.",
            "VernacStartTheoremProof",
            "fd1cf2e8c0bc2e716384f3e97400f3ed9ed6861b"
        ],
        [
            "by move=> imp; apply: contraNneq => /imp->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma contra_neq_eq z1 z2 x1 x2 : (x1 != x2 -> z1 = z2) -> z1 != z2 -> x1 = x2.",
            "VernacStartTheoremProof",
            "804e305f3ccfa316449599b278b82ef080239f0c"
        ],
        [
            "by move=> imp; apply: contraNeq => /imp->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma contra_eq_neq z1 z2 x1 x2 : (z1 = z2 -> x1 != x2) -> x1 = x2 -> z1 != z2.",
            "VernacStartTheoremProof",
            "00c53fc77b9570dce273562b2aac06aae0c816ca"
        ],
        [
            "by move=> imp; apply: contra_eqN => /eqP /imp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma memPn A x : reflect {in A, forall y, y != x} (x \\notin A).",
            "VernacStartTheoremProof",
            "f2a1a7b24aea95da42a264e2a9156e20302d4ae4"
        ],
        [
            "apply: (iffP idP) => [notDx y | notDx]; first by apply: contraTneq => ->.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "exact: contraL (notDx x) _.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma memPnC A x : reflect {in A, forall y, x != y} (x \\notin A).",
            "VernacStartTheoremProof",
            "67fc16a755e5073725b06a79982327cca0d11281"
        ],
        [
            "by apply: (iffP (memPn A x)) => A'x y /A'x; rewrite eq_sym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ifN_eq R x y vT vF : x != y -> (if x == y then vT else vF) = vF :> R.",
            "VernacStartTheoremProof",
            "389851a3c34d1a3830f85af41640282ce954363d"
        ],
        [
            "exact: ifN.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ifN_eqC R x y vT vF : x != y -> (if y == x then vT else vF) = vF :> R.",
            "VernacStartTheoremProof",
            "31b116dabdea196206efe0bcb20edbca64419635"
        ],
        [
            "by rewrite eq_sym; apply: ifN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Contrapositives.",
            "VernacEndSegment",
            "c45947356ae6b9e6e51a1fb1453361e5004a12ff"
        ],
        [
            "Arguments memPn {T1 A x}.",
            "VernacArguments",
            "0587ded4ca197ea8d4d42e1b0c2de1253c6c77de"
        ],
        [
            "Arguments memPnC {T1 A x}.",
            "VernacArguments",
            "9c9302b657702e2656cd9b549d8aa9803c6ab458"
        ],
        [
            "Theorem eq_irrelevance (T : eqType) x y : forall e1 e2 : x = y :> T, e1 = e2.",
            "VernacStartTheoremProof",
            "7b40d71eec6f12b49fa89b3a75abae55d8554ae1"
        ],
        [
            "pose proj z e := if x =P z is ReflectT e0 then e0 else e.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "suff: injective (proj y) by rewrite /proj => injp e e'; apply: injp; case: eqP.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "pose join (e : x = _) := etrans (esym e).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "apply: can_inj (join x y (proj x (erefl x))) _.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by case: y /; case: _ / (proj x _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Corollary eq_axiomK (T : eqType) (x : T) : all_equal_to (erefl x).",
            "VernacStartTheoremProof",
            "05e849207800f1740c32f56ac858710c37382cd4"
        ],
        [
            "by move=> eq_x_x; apply: eq_irrelevance.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Module Type EqTypePredSig.",
            "VernacDeclareModuleType",
            "74d31f8fb5406132c6d95dbaf691d1215f8851ca"
        ],
        [
            "Parameter sort : eqType -> predArgType.",
            "VernacAssumption",
            "c3aae0cabc1bf6231dd7e91561fb7b62d14432a4"
        ],
        [
            "End EqTypePredSig.",
            "VernacEndSegment",
            "c1eb3e47eaaa42db80e046d30a09843f4553d597"
        ],
        [
            "Module MakeEqTypePred (eqmod : EqTypePredSig).",
            "VernacDefineModule",
            "bd673e9fa8e56efe341a61deef42e70d7dfddf01"
        ],
        [
            "Coercion eqmod.sort : eqType >-> predArgType.",
            "VernacCoercion",
            "08ca7b8dbb5b427ac2ad3e9bd22de0d8bf6957e2"
        ],
        [
            "End MakeEqTypePred.",
            "VernacEndSegment",
            "c3485483170be79fe33c18e3c4aacf87b38282c9"
        ],
        [
            "Module Export EqTypePred := MakeEqTypePred Equality.",
            "VernacDefineModule",
            "e0e089649537433bd32645f165816ffdace116e4"
        ],
        [
            "Lemma unit_eqP : Equality.axiom (fun _ _ : unit => true).",
            "VernacStartTheoremProof",
            "e9834e0027e998dd25f661566b3018874d6036e2"
        ],
        [
            "by do 2!case; left.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition unit_eqMixin := EqMixin unit_eqP.",
            "VernacDefinition",
            "349addb5998b9109b8e5352039b270ddd31821a7"
        ],
        [
            "Canonical unit_eqType := Eval hnf in EqType unit unit_eqMixin.",
            "VernacDefinition",
            "340f279dee176c684caf3fcf897004cb2ef17bcb"
        ],
        [
            "Definition eqb b := addb (~~ b).",
            "VernacDefinition",
            "6ebb1b13e9b020cbb064dfd9ece9912063574db9"
        ],
        [
            "Lemma eqbP : Equality.axiom eqb.",
            "VernacStartTheoremProof",
            "28a658d15cef60085bf4b7ee13802b800b5ba1df"
        ],
        [
            "by do 2!case; constructor.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical bool_eqMixin := EqMixin eqbP.",
            "VernacDefinition",
            "6d4eb9963a9411c1b6fe5a613aebbf07799c40f8"
        ],
        [
            "Canonical bool_eqType := Eval hnf in EqType bool bool_eqMixin.",
            "VernacDefinition",
            "d3bb50c04816afa47ea40232f95c71fa9cbf6108"
        ],
        [
            "Lemma eqbE : eqb = eq_op.",
            "VernacStartTheoremProof",
            "3367c0e6647e92d17081c2992fc011c10bd62b53"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_irrelevance (b : bool) (p1 p2 : b) : p1 = p2.",
            "VernacStartTheoremProof",
            "74e7c3b26907bb1b9a01978e129ce4656de89b80"
        ],
        [
            "exact: eq_irrelevance.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma negb_add b1 b2 : ~~ (b1 (+) b2) = (b1 == b2).",
            "VernacStartTheoremProof",
            "47fd5f3c9c33383e6d5c22ad0fc4685d66266c65"
        ],
        [
            "by rewrite -addNb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma negb_eqb b1 b2 : (b1 != b2) = b1 (+) b2.",
            "VernacStartTheoremProof",
            "f5a3c29fbae162f978cd3bac7e24ba07e9468b55"
        ],
        [
            "by rewrite -addNb negbK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqb_id b : (b == true) = b.",
            "VernacStartTheoremProof",
            "7e9d64e7cfc07ffe7ef31946fd728914aa8056d2"
        ],
        [
            "by case: b.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqbF_neg b : (b == false) = ~~ b.",
            "VernacStartTheoremProof",
            "f7a2d889f667e49d8431906ae14c31ef7e8f7b3f"
        ],
        [
            "by case: b.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqb_negLR b1 b2 : (~~ b1 == b2) = (b1 == ~~ b2).",
            "VernacStartTheoremProof",
            "9ccf8c6369b6062669e13c0e0d6b487c60e79166"
        ],
        [
            "by case: b1; case: b2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Notation xpred1 := (fun a1 x => x == a1).",
            "VernacSyntacticDefinition",
            "f12508a686b548df0d3ed647504b7c117fec31b8"
        ],
        [
            "Notation xpred2 := (fun a1 a2 x => (x == a1) || (x == a2)).",
            "VernacSyntacticDefinition",
            "86bf45bf62bd00b29d6415758977d3d67fb004b7"
        ],
        [
            "Notation xpred3 := (fun a1 a2 a3 x => [|| x == a1, x == a2 | x == a3]).",
            "VernacSyntacticDefinition",
            "4d269006034ba662ec07b0d7d0fb3b409101523d"
        ],
        [
            "Notation xpred4 := (fun a1 a2 a3 a4 x => [|| x == a1, x == a2, x == a3 | x == a4]).",
            "VernacSyntacticDefinition",
            "8dc3e88243add3a93f23b4f83bf727c3814a5fec"
        ],
        [
            "Notation xpredU1 := (fun a1 (p : pred _) x => (x == a1) || p x).",
            "VernacSyntacticDefinition",
            "9caf6ecd5f07da2ed976c01963024b760c4b95a7"
        ],
        [
            "Notation xpredC1 := (fun a1 x => x != a1).",
            "VernacSyntacticDefinition",
            "0a73f30bf2bf71810fddead8be22eb8162725a51"
        ],
        [
            "Notation xpredD1 := (fun (p : pred _) a1 x => (x != a1) && p x).",
            "VernacSyntacticDefinition",
            "36f3b6a5ec13abb2a6980870e1219a701bec2602"
        ],
        [
            "Section EqPred.",
            "VernacBeginSection",
            "8c8c9202321b47554aabe9d0df693d11aec610bb"
        ],
        [
            "Variable T : eqType.",
            "VernacAssumption",
            "2ceeb4536776ca324e5be084d2deb4d476694ef1"
        ],
        [
            "Definition pred1 (a1 : T) := SimplPred (xpred1 a1).",
            "VernacDefinition",
            "5586dd57fb7fbe5087f3002d50cfd319d9814e64"
        ],
        [
            "Definition pred2 (a1 a2 : T) := SimplPred (xpred2 a1 a2).",
            "VernacDefinition",
            "4eb1e1ef1ac7871ae1d46eae376d194f729cbd87"
        ],
        [
            "Definition pred3 (a1 a2 a3 : T) := SimplPred (xpred3 a1 a2 a3).",
            "VernacDefinition",
            "3101922a40cc20d99a3067ad821f4d7d580f9948"
        ],
        [
            "Definition pred4 (a1 a2 a3 a4 : T) := SimplPred (xpred4 a1 a2 a3 a4).",
            "VernacDefinition",
            "b7384c2f6588b81519fb82e1772a2c4211dd29ba"
        ],
        [
            "Definition predU1 (a1 : T) p := SimplPred (xpredU1 a1 p).",
            "VernacDefinition",
            "c2c24090007d1e520174b0901a826b6551019c77"
        ],
        [
            "Definition predC1 (a1 : T) := SimplPred (xpredC1 a1).",
            "VernacDefinition",
            "fb73537bcf1de925ef3f2faad9f68f34eaada762"
        ],
        [
            "Definition predD1 p (a1 : T) := SimplPred (xpredD1 p a1).",
            "VernacDefinition",
            "06eb05245784c5bf39483642c18fa0dd8d9091cb"
        ],
        [
            "Lemma pred1E : pred1 =2 eq_op.",
            "VernacStartTheoremProof",
            "7b87c73897c6839771bef8367cb3d87023d94409"
        ],
        [
            "by move=> x y; apply: eq_sym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variables (T2 : eqType) (x y : T) (z u : T2) (b : bool).",
            "VernacAssumption",
            "815c02e95f80c7af54e1e1038639b173250cfd39"
        ],
        [
            "Lemma predU1P : reflect (x = y \\/ b) ((x == y) || b).",
            "VernacStartTheoremProof",
            "9302f8deaf13f857c438102df69494ddabf124d1"
        ],
        [
            "by apply: (iffP orP); do [case=> [/eqP|]; [left | right]].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pred2P : reflect (x = y \\/ z = u) ((x == y) || (z == u)).",
            "VernacStartTheoremProof",
            "d7d1096392dd78ed062d43b725de6070b92ad94d"
        ],
        [
            "by apply: (iffP orP); do [case=> /eqP; [left | right]].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma predD1P : reflect (x <> y /\\ b) ((x != y) && b).",
            "VernacStartTheoremProof",
            "9d5a61df751b4635e8316d29fc1c2bfc74d6b0b5"
        ],
        [
            "by apply: (iffP andP)=> [] [] // /eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma predU1l : x = y -> (x == y) || b.",
            "VernacStartTheoremProof",
            "c2cc4ae97a80247c6b4efb2dd290947f723553a7"
        ],
        [
            "by move->; rewrite eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma predU1r : b -> (x == y) || b.",
            "VernacStartTheoremProof",
            "e50356ba1911f5dd6ed9fae3a3113b01fed7b266"
        ],
        [
            "by move->; rewrite orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqVneq : {x = y} + {x != y}.",
            "VernacStartTheoremProof",
            "768e9287144f17ade09e9f4299b302b0c602f0d9"
        ],
        [
            "by case: eqP; [left | right].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EqPred.",
            "VernacEndSegment",
            "621f8a3e245fcdeb6d18bae38a363d385d86d4ca"
        ],
        [
            "Arguments predU1P {T x y b}.",
            "VernacArguments",
            "9a36133431dc97037084803ad1b11d1dd0acd69e"
        ],
        [
            "Arguments pred2P {T T2 x y z u}.",
            "VernacArguments",
            "89be97cf1aee743e54e8dee7720feb3287082b5c"
        ],
        [
            "Arguments predD1P {T x y b}.",
            "VernacArguments",
            "5908cc3e786dd75a42aacada92c823c1e2f32665"
        ],
        [
            "Prenex Implicits pred1 pred2 pred3 pred4 predU1 predC1 predD1.",
            "VernacExtend",
            "3c5babc35f7a99e38a5f43b83b52b01c6243ffc7"
        ],
        [
            "Notation \"[ 'predU1' x & A ]\" := (predU1 x [mem A]) (at level 0, format \"[ 'predU1' x & A ]\") : fun_scope.",
            "VernacNotation",
            "f38d1da10fa3359b51a9a585396e09a4e84afd23"
        ],
        [
            "Notation \"[ 'predD1' A & x ]\" := (predD1 [mem A] x) (at level 0, format \"[ 'predD1' A & x ]\") : fun_scope.",
            "VernacNotation",
            "e8448b32ae7fcb2de0d6e724dbf61e11485e9a92"
        ],
        [
            "Section EqFun.",
            "VernacBeginSection",
            "f6a6ef6311e3ca14952b61c6445c0fd0b892950d"
        ],
        [
            "Section Exo.",
            "VernacBeginSection",
            "5ab93740db5c036a5b4d4887df2fe28104d0e4e8"
        ],
        [
            "Variables (aT rT : eqType) (D : pred aT) (f : aT -> rT) (g : rT -> aT).",
            "VernacAssumption",
            "83a4ab1b93fd4598a4c128a71bb92318878cc26a"
        ],
        [
            "Lemma inj_eq : injective f -> forall x y, (f x == f y) = (x == y).",
            "VernacStartTheoremProof",
            "dfc4095d7f418d3e86648de27ccc50c8151fb32e"
        ],
        [
            "by move=> inj_f x y; apply/eqP/eqP=> [|-> //]; apply: inj_f.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma can_eq : cancel f g -> forall x y, (f x == f y) = (x == y).",
            "VernacStartTheoremProof",
            "0347ca726862a6ce37d30c08a032464f7ba5394b"
        ],
        [
            "by move/can_inj; apply: inj_eq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bij_eq : bijective f -> forall x y, (f x == f y) = (x == y).",
            "VernacStartTheoremProof",
            "26ec2ec1606043a8c0d76fc60661d8e0bbb5518f"
        ],
        [
            "by move/bij_inj; apply: inj_eq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma can2_eq : cancel f g -> cancel g f -> forall x y, (f x == y) = (x == g y).",
            "VernacStartTheoremProof",
            "a622a5a049f43715dd687cbec02d9cbe2fb3c58f"
        ],
        [
            "by move=> fK gK x y; rewrite -{1}[y]gK; apply: can_eq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma inj_in_eq : {in D &, injective f} -> {in D &, forall x y, (f x == f y) = (x == y)}.",
            "VernacStartTheoremProof",
            "929787985cf53bac43f93362577be4f9bb5b5134"
        ],
        [
            "by move=> inj_f x y Dx Dy; apply/eqP/eqP=> [|-> //]; apply: inj_f.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma can_in_eq : {in D, cancel f g} -> {in D &, forall x y, (f x == f y) = (x == y)}.",
            "VernacStartTheoremProof",
            "76d6836cec10d62fba0b49eb7586b5f1b4dd7f29"
        ],
        [
            "by move/can_in_inj; apply: inj_in_eq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Exo.",
            "VernacEndSegment",
            "c7ddd20b51629a2c6ac0c823604668034fba4da3"
        ],
        [
            "Section Endo.",
            "VernacBeginSection",
            "c0ef677df36a6595456297a59e518e6b8723bc2d"
        ],
        [
            "Variable T : eqType.",
            "VernacAssumption",
            "2ceeb4536776ca324e5be084d2deb4d476694ef1"
        ],
        [
            "Definition frel f := [rel x y : T | f x == y].",
            "VernacDefinition",
            "ca1580c7a192af33ca1d2a8e28ae86f31a491be7"
        ],
        [
            "Lemma inv_eq f : involutive f -> forall x y : T, (f x == y) = (x == f y).",
            "VernacStartTheoremProof",
            "0a4f5c28ef5911ff403c33a7aa7d29bb3dcc7804"
        ],
        [
            "by move=> fK; apply: can2_eq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_frel f f' : f =1 f' -> frel f =2 frel f'.",
            "VernacStartTheoremProof",
            "0287b2ba3a61273c3d88e8d5014384a83c1e36ff"
        ],
        [
            "by move=> eq_f x y; rewrite /= eq_f.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Endo.",
            "VernacEndSegment",
            "a326752ede91a594ce8e69d2cd7d771dbe605f69"
        ],
        [
            "Variable aT : Type.",
            "VernacAssumption",
            "6ace84c00879c18dd9c215e92006fec86a70fe22"
        ],
        [
            "Definition invariant (rT : eqType) f (k : aT -> rT) := [pred x | k (f x) == k x].",
            "VernacDefinition",
            "901785e7f74d443945fec714b7d33eef566b5a6d"
        ],
        [
            "Variables (rT1 rT2 : eqType) (f : aT -> aT) (h : rT1 -> rT2) (k : aT -> rT1).",
            "VernacAssumption",
            "778e73443d06167a325415cc03058ea9bba2655b"
        ],
        [
            "Lemma invariant_comp : subpred (invariant f k) (invariant f (h \\o k)).",
            "VernacStartTheoremProof",
            "95b5aed09fdb26abb8b7ff153a5ca0e14434684d"
        ],
        [
            "by move=> x eq_kfx; rewrite /= (eqP eq_kfx).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma invariant_inj : injective h -> invariant f (h \\o k) =1 invariant f k.",
            "VernacStartTheoremProof",
            "a539e620e8f26146d7898d54de8f9e104df60037"
        ],
        [
            "by move=> inj_h x; apply: (inj_eq inj_h).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EqFun.",
            "VernacEndSegment",
            "de7da496469fc261e1adc7db29c95ab21fae185f"
        ],
        [
            "Prenex Implicits frel.",
            "VernacExtend",
            "06efce33b42404066fea9c913c94285c0a72cb42"
        ],
        [
            "Notation coerced_frel f := (rel_of_simpl_rel (frel f)) (only parsing).",
            "VernacSyntacticDefinition",
            "caf02dc68ea443ef946bee5180d3bd77b31777ce"
        ],
        [
            "Section FunWith.",
            "VernacBeginSection",
            "905daad2106c339cbdde79cb768507d668280657"
        ],
        [
            "Variables (aT : eqType) (rT : Type).",
            "VernacAssumption",
            "1059d3f3fae328a2ac521f58adc3b42d5c01654c"
        ],
        [
            "Variant fun_delta : Type := FunDelta of aT & rT.",
            "VernacInductive",
            "d374665cf3933590c3aace106667c9b70e08a431"
        ],
        [
            "Definition fwith x y (f : aT -> rT) := [fun z => if z == x then y else f z].",
            "VernacDefinition",
            "27ecee67e7eb309f844903feb07ce900566351df"
        ],
        [
            "Definition app_fdelta df f z := let: FunDelta x y := df in if z == x then y else f z.",
            "VernacDefinition",
            "148a83eee919421941bf396e717e2f6b4095bd5a"
        ],
        [
            "End FunWith.",
            "VernacEndSegment",
            "a45e26dc5b106a31b2fb4dd433637755196ecf14"
        ],
        [
            "Prenex Implicits fwith.",
            "VernacExtend",
            "1ec5d4c873f1b816753c07154ab7c293a723f0af"
        ],
        [
            "Notation \"x |-> y\" := (FunDelta x y) (at level 190, no associativity, format \"'[hv' x '/ ' |-> y ']'\") : fun_delta_scope.",
            "VernacNotation",
            "ba68fb45fbd3fe0729da25d6510c11c711a22ea4"
        ],
        [
            "Delimit Scope fun_delta_scope with FUN_DELTA.",
            "VernacDelimiters",
            "cd7009f66ef20eb79e8f810a2afe1411b7f36937"
        ],
        [
            "Arguments app_fdelta {aT rT%type} df%FUN_DELTA f z.",
            "VernacArguments",
            "d4e34959a875e70eb149bf488c75bdf1ffee030c"
        ],
        [
            "Notation \"[ 'fun' z : T => F 'with' d1 , .. , dn ]\" := (SimplFunDelta (fun z : T => app_fdelta d1%FUN_DELTA .. (app_fdelta dn%FUN_DELTA (fun _ => F)) ..)) (at level 0, z ident, only parsing) : fun_scope.",
            "VernacNotation",
            "b5623b2035dcc63f912f08f544076efb3b503d65"
        ],
        [
            "Notation \"[ 'fun' z => F 'with' d1 , .. , dn ]\" := (SimplFunDelta (fun z => app_fdelta d1%FUN_DELTA .. (app_fdelta dn%FUN_DELTA (fun _ => F)) ..)) (at level 0, z ident, format \"'[hv' [ '[' 'fun' z => '/ ' F ']' '/' 'with' '[' d1 , '/' .. , '/' dn ']' ] ']'\" ) : fun_scope.",
            "VernacNotation",
            "d84d6ffe05bca993e0b1412b66fd05f4780453c3"
        ],
        [
            "Notation \"[ 'eta' f 'with' d1 , .. , dn ]\" := (SimplFunDelta (fun _ => app_fdelta d1%FUN_DELTA .. (app_fdelta dn%FUN_DELTA f) ..)) (at level 0, format \"'[hv' [ '[' 'eta' '/ ' f ']' '/' 'with' '[' d1 , '/' .. , '/' dn ']' ] ']'\" ) : fun_scope.",
            "VernacNotation",
            "7a4fd6551c9324cfd8a2ecc9300f00d050fdf2f7"
        ],
        [
            "Section ComparableType.",
            "VernacBeginSection",
            "66a11a75892357e3ceb0054ae8bb100a76ae7e9b"
        ],
        [
            "Variable T : Type.",
            "VernacAssumption",
            "a15b17e37c4241158d544882375356c273dc93f2"
        ],
        [
            "Definition comparable := forall x y : T, decidable (x = y).",
            "VernacDefinition",
            "fa98dd4c604848e67481fed1c1916cb717ed1f48"
        ],
        [
            "Hypothesis compare_T : comparable.",
            "VernacAssumption",
            "2e2b4e9384f3d84bac6d8c0d0fdc5c9ca7acdad7"
        ],
        [
            "Definition compareb x y : bool := compare_T x y.",
            "VernacDefinition",
            "b45ab76a876119a1e5ed482140e9df094c18e6d2"
        ],
        [
            "Lemma compareP : Equality.axiom compareb.",
            "VernacStartTheoremProof",
            "2f5a4074da64e448488da1b16ae734949e6e6d37"
        ],
        [
            "by move=> x y; apply: sumboolP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition comparableMixin := EqMixin compareP.",
            "VernacDefinition",
            "6b341726b1c88e8d72a24114e0b93144ba5b53e3"
        ],
        [
            "End ComparableType.",
            "VernacEndSegment",
            "62e721421f50f13ed651b1e8cbd9df65da99f859"
        ],
        [
            "Definition eq_comparable (T : eqType) : comparable T := fun x y => decP (x =P y).",
            "VernacDefinition",
            "4de296ca6ff414064c9fce68ea8b5f61795eaedf"
        ],
        [
            "Section SubType.",
            "VernacBeginSection",
            "bbf4b955ddd8f6cb5b30657442d73fb87c5a3b8c"
        ],
        [
            "Variables (T : Type) (P : pred T).",
            "VernacAssumption",
            "9c7ff5a8638f0c7bc9ea600ad8d499263adf834f"
        ],
        [
            "Structure subType : Type := SubType { sub_sort :> Type; val : sub_sort -> T; Sub : forall x, P x -> sub_sort; _ : forall K (_ : forall x Px, K (@Sub x Px)) u, K u; _ : forall x Px, val (@Sub x Px) = x }.",
            "VernacInductive",
            "e72d48ccf71f512a17a6e0ceb5229bdce02f8705"
        ],
        [
            "Lemma vrefl : forall x, P x -> x = x.",
            "VernacStartTheoremProof",
            "4ae8a349b6c7ddb7ec108f7ffffb580760c9b567"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition vrefl_rect := vrefl.",
            "VernacDefinition",
            "db30083b5ed1592e380a20f95e24385df4cb3166"
        ],
        [
            "Definition clone_subType U v := fun sT & sub_sort sT -> U => fun c Urec cK (sT' := @SubType U v c Urec cK) & phant_id sT' sT => sT'.",
            "VernacDefinition",
            "09efd8ab2010c6a197654f1a6152b6f85d390ca5"
        ],
        [
            "Section Theory.",
            "VernacBeginSection",
            "57c003cfe14e91402b38cb11ad6e8012f88f07e9"
        ],
        [
            "Variable sT : subType.",
            "VernacAssumption",
            "c7b8ac29712a67f3f1748468aeb5d00622d9b039"
        ],
        [
            "Local Notation val := (@val sT).",
            "VernacSyntacticDefinition",
            "e518b3040b7815f3462fe97306a9e397e4a393bb"
        ],
        [
            "Local Notation Sub x Px := (@Sub sT x Px).",
            "VernacSyntacticDefinition",
            "6c69c674d11c3ca47d32a22eb0e96105871a506d"
        ],
        [
            "Variant Sub_spec : sT -> Type := SubSpec x Px : Sub_spec (Sub x Px).",
            "VernacInductive",
            "9ca6836cebd5ca4958a59beb0c5aeaec7f0e1960"
        ],
        [
            "Lemma SubP u : Sub_spec u.",
            "VernacStartTheoremProof",
            "e6a1758e4983be783d7516f3392a8cd872aebf53"
        ],
        [
            "by case: sT Sub_spec SubSpec u => /= U _ mkU rec _.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SubK x Px : val (Sub x Px) = x.",
            "VernacStartTheoremProof",
            "5b132bf2e869ca765c0a4c9bfea46fcb8f43c36b"
        ],
        [
            "by case: sT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition insub x := if idP is ReflectT Px then Some (Sub x Px) else None.",
            "VernacDefinition",
            "779e116d079c5490339257209d069506812f8719"
        ],
        [
            "Definition insubd u0 x := odflt u0 (insub x).",
            "VernacDefinition",
            "ebd477171885ef0ff9e46b7a0372d7636a7db982"
        ],
        [
            "Variant insub_spec x : option sT -> Type := | InsubSome u of P x & val u = x : insub_spec x (Some u) | InsubNone of ~~ P x : insub_spec x None.",
            "VernacInductive",
            "bbd02d56b6e5e268eb15f7ada9bfcfb1b8b8ba8e"
        ],
        [
            "Lemma insubP x : insub_spec x (insub x).",
            "VernacStartTheoremProof",
            "441d9fda46adc78748edaba1e8b0244d6515e3f7"
        ],
        [
            "by rewrite /insub; case: {-}_ / idP; [left; rewrite ?SubK | right; apply/negP].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma insubT x Px : insub x = Some (Sub x Px).",
            "VernacStartTheoremProof",
            "fe61f7389e67d93257462b031a1c692578c7c88d"
        ],
        [
            "do [case: insubP => [/SubP[y Py] _ <- | /negP// ]; rewrite SubK] in Px *.",
            "VernacExtend",
            "2ed5ae5c7a1513e882f170a2462d7a7c3c1ca435"
        ],
        [
            "by rewrite (bool_irrelevance Px Py).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma insubF x : P x = false -> insub x = None.",
            "VernacStartTheoremProof",
            "e9f3558dc5a73cc6b2e3098d74d564735eac1e27"
        ],
        [
            "by move/idP; case: insubP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma insubN x : ~~ P x -> insub x = None.",
            "VernacStartTheoremProof",
            "0f7dc67eb280d353a033afaa9d89db18b53a60d1"
        ],
        [
            "by move/negPf/insubF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma isSome_insub : ([eta insub] : pred T) =1 P.",
            "VernacStartTheoremProof",
            "171cf52ca74b2e42c995169ed55644b765a5a584"
        ],
        [
            "by apply: fsym => x; case: insubP => // /negPf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma insubK : ocancel insub val.",
            "VernacStartTheoremProof",
            "8a486e8c308e80704471afb22028be1803cbb39a"
        ],
        [
            "by move=> x; case: insubP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma valP u : P (val u).",
            "VernacStartTheoremProof",
            "88fec3ba39b6732f8b894ca865d29f9fcd9cc45e"
        ],
        [
            "by case/SubP: u => x Px; rewrite SubK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma valK : pcancel val insub.",
            "VernacStartTheoremProof",
            "e7172d19d29fda0a75065bda5c4df7100c133ee4"
        ],
        [
            "by case/SubP=> x Px; rewrite SubK; apply: insubT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma val_inj : injective val.",
            "VernacStartTheoremProof",
            "6a1fb544c80d76fde8ad02b4743ac64c8a9a8d7c"
        ],
        [
            "exact: pcan_inj valK.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma valKd u0 : cancel val (insubd u0).",
            "VernacStartTheoremProof",
            "5ec5b3fd7b80caae49fc63ebd65c6607203d0c33"
        ],
        [
            "by move=> u; rewrite /insubd valK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma val_insubd u0 x : val (insubd u0 x) = if P x then x else val u0.",
            "VernacStartTheoremProof",
            "e5c354e95339dd45bcd343ac6e3f0039f78a8526"
        ],
        [
            "by rewrite /insubd; case: insubP => [u -> | /negPf->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma insubdK u0 : {in P, cancel (insubd u0) val}.",
            "VernacStartTheoremProof",
            "6e84abfa25714e6ef8ea5f2b443fc9ab46fe7b3d"
        ],
        [
            "by move=> x Px; rewrite /= val_insubd [P x]Px.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let insub_eq_aux x isPx : P x = isPx -> option sT := if isPx as b return _ = b -> _ then fun Px => Some (Sub x Px) else fun=> None.",
            "VernacDefinition",
            "06db34c423f1093fc4dc762a5f3e5ed5e1ed1b9b"
        ],
        [
            "Definition insub_eq x := insub_eq_aux (erefl (P x)).",
            "VernacDefinition",
            "38405d544ac9179dfdd7d2c19073ab638b1432ef"
        ],
        [
            "Lemma insub_eqE : insub_eq =1 insub.",
            "VernacStartTheoremProof",
            "31d1bde1fda7580d4a792a4dfdda0bc9ebccf4d9"
        ],
        [
            "rewrite /insub_eq => x; set b := P x; rewrite [in LHS]/b in (Db := erefl b) *.",
            "VernacExtend",
            "c6e538272374297842e22b79d14b4d843b76db77"
        ],
        [
            "by case: b in Db *; [rewrite insubT | rewrite insubF].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Theory.",
            "VernacEndSegment",
            "3b5383a8665fcdb23b7893346ca6ee697173139d"
        ],
        [
            "End SubType.",
            "VernacEndSegment",
            "717c8fd3415349902418150381cf991d5b14d0c5"
        ],
        [
            "Arguments SubType {T P} sub_sort val Sub rec SubK.",
            "VernacArguments",
            "5ae7dfb435c2a4b23f0fc6249ac69324e22a23ed"
        ],
        [
            "Arguments val {T P sT} u : rename.",
            "VernacArguments",
            "70ab4682515fdc6dc705dee44e89ed52710189ae"
        ],
        [
            "Arguments Sub {T P sT} x Px : rename.",
            "VernacArguments",
            "095e53ca32a7db7e1577aac3e675df622e9bbe80"
        ],
        [
            "Arguments vrefl {T P} x Px.",
            "VernacArguments",
            "8b13bcc9ca94743ddb3e2aeb2b8ec39ec5277a43"
        ],
        [
            "Arguments vrefl_rect {T P} x Px.",
            "VernacArguments",
            "489883ef0742573dff17ef699e7c14deb0ec4545"
        ],
        [
            "Arguments clone_subType [T P] U v [sT] _ [c Urec cK].",
            "VernacArguments",
            "2dffbacf55431de9eecdd17d9d5ab57f25a3dcf4"
        ],
        [
            "Arguments insub {T P sT} x.",
            "VernacArguments",
            "6a98a4adedc0d1a36ecb2a1b8223c74a490a38a5"
        ],
        [
            "Arguments insubd {T P sT} u0 x.",
            "VernacArguments",
            "72218f86e0fd885562a9840d0bc36365d7021266"
        ],
        [
            "Arguments insubT [T] P [sT x].",
            "VernacArguments",
            "9c97f3851ba4117a32e106a498628969cd6771d5"
        ],
        [
            "Arguments val_inj {T P sT} [u1 u2] eq_u12 : rename.",
            "VernacArguments",
            "c2c37fede07636eaa4e40e93e693636e8304827c"
        ],
        [
            "Arguments valK {T P sT} u : rename.",
            "VernacArguments",
            "d3b62bc2e102bc28a4b966337fe9bfb8e7abdf27"
        ],
        [
            "Arguments valKd {T P sT} u0 u : rename.",
            "VernacArguments",
            "b8474fc83e1cfe76a1be0a8207b3534541b38721"
        ],
        [
            "Arguments insubK {T P} sT x.",
            "VernacArguments",
            "54a0a8ba865d1c4e9ea131148c2c399f5f48b326"
        ],
        [
            "Arguments insubdK {T P sT} u0 [x] Px.",
            "VernacArguments",
            "d07502388b3a2338b5933cb66c22cf36c7cb7026"
        ],
        [
            "Local Notation inlined_sub_rect := (fun K K_S u => let (x, Px) as u return K u := u in K_S x Px).",
            "VernacSyntacticDefinition",
            "9eb2db017b4c8528375a74f9d02825f3b6d51580"
        ],
        [
            "Local Notation inlined_new_rect := (fun K K_S u => let (x) as u return K u := u in K_S x).",
            "VernacSyntacticDefinition",
            "11bf7f0df953a64b4011422fe81407ad39a1fe30"
        ],
        [
            "Notation \"[ 'subType' 'for' v ]\" := (SubType _ v _ inlined_sub_rect vrefl_rect) (at level 0, only parsing) : form_scope.",
            "VernacNotation",
            "8ab17daa136d96c9306c7f1cd9da175838ef09af"
        ],
        [
            "Notation \"[ 'sub' 'Type' 'for' v ]\" := (SubType _ v _ _ vrefl_rect) (at level 0, format \"[ 'sub' 'Type' 'for' v ]\") : form_scope.",
            "VernacNotation",
            "f6dcbc1a1f78a598b7c7952cbad95a30bd9f852a"
        ],
        [
            "Notation \"[ 'subType' 'for' v 'by' rec ]\" := (SubType _ v _ rec vrefl) (at level 0, format \"[ 'subType' 'for' v 'by' rec ]\") : form_scope.",
            "VernacNotation",
            "d31868f5683254eeb6619227680754af7e3f7d78"
        ],
        [
            "Notation \"[ 'subType' 'of' U 'for' v ]\" := (clone_subType U v id idfun) (at level 0, format \"[ 'subType' 'of' U 'for' v ]\") : form_scope.",
            "VernacNotation",
            "5c1f6db18297d22e7d143825bbac8ccadc77d555"
        ],
        [
            "Notation \"[ 'subType' 'of' U ]\" := (clone_subType U _ id id) (at level 0, format \"[ 'subType' 'of' U ]\") : form_scope.",
            "VernacNotation",
            "952eb7c583436a064e873b4ae375069c64b2836a"
        ],
        [
            "Definition NewType T U v c Urec := let Urec' P IH := Urec P (fun x : T => IH x isT : P _) in SubType U v (fun x _ => c x) Urec'.",
            "VernacDefinition",
            "f6d97d0554a4af584bc9b58a8e2e5f5b1aaee4cc"
        ],
        [
            "Arguments NewType [T U].",
            "VernacArguments",
            "5d3f8163b9c52d762ff123b1e815a3fbe359b7e3"
        ],
        [
            "Notation \"[ 'newType' 'for' v ]\" := (NewType v _ inlined_new_rect vrefl_rect) (at level 0, only parsing) : form_scope.",
            "VernacNotation",
            "f95bf532e259b7de851508df849470ce8e3904a4"
        ],
        [
            "Notation \"[ 'new' 'Type' 'for' v ]\" := (NewType v _ _ vrefl_rect) (at level 0, format \"[ 'new' 'Type' 'for' v ]\") : form_scope.",
            "VernacNotation",
            "720e4a321669fc425210281ea7a2e85ed1d18f52"
        ],
        [
            "Notation \"[ 'newType' 'for' v 'by' rec ]\" := (NewType v _ rec vrefl) (at level 0, format \"[ 'newType' 'for' v 'by' rec ]\") : form_scope.",
            "VernacNotation",
            "25eeb4c095d1dcb662e18efd7b6a8b70946029b8"
        ],
        [
            "Definition innew T nT x := @Sub T predT nT x (erefl true).",
            "VernacDefinition",
            "072acb0f3c90d31eea4a54f4f94372ce8266a917"
        ],
        [
            "Arguments innew {T nT}.",
            "VernacArguments",
            "4d4e30b08df0e5ab11f88521547754345b77d98e"
        ],
        [
            "Lemma innew_val T nT : cancel val (@innew T nT).",
            "VernacStartTheoremProof",
            "3a6724e032fa78eaf15aeb52cc8752b0344da81d"
        ],
        [
            "by move=> u; apply: val_inj; apply: SubK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Notation sval := (@proj1_sig _ _).",
            "VernacSyntacticDefinition",
            "78bee5bbfd367fd103b94e8747a74755553b0469"
        ],
        [
            "Notation \"@ 'sval'\" := (@proj1_sig) (at level 10, format \"@ 'sval'\").",
            "VernacNotation",
            "d5a5c6c1ecde53eecd5b00bdb7310c6a94dcf81e"
        ],
        [
            "Section SigProj.",
            "VernacBeginSection",
            "ded41ea7d53a91f5bf0f606b5cd6d683047f0ed0"
        ],
        [
            "Variables (T : Type) (P Q : T -> Prop).",
            "VernacAssumption",
            "33d9369a083071d0b5ef802afbe6e50133eff3bd"
        ],
        [
            "Lemma svalP : forall u : sig P, P (sval u).",
            "VernacStartTheoremProof",
            "c3a2096d6e84361652d9c0a2df77172010a89ea6"
        ],
        [
            "by case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition s2val (u : sig2 P Q) := let: exist2 x _ _ := u in x.",
            "VernacDefinition",
            "6228ecde9b89089d33aac8700dbecc6dcc6ff9cf"
        ],
        [
            "Lemma s2valP u : P (s2val u).",
            "VernacStartTheoremProof",
            "19daed46c3d729d7238378facd42d24db2f8d3ed"
        ],
        [
            "by case: u.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma s2valP' u : Q (s2val u).",
            "VernacStartTheoremProof",
            "19622eadef67bed78a73dd6070cd2136a36a0e26"
        ],
        [
            "by case: u.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SigProj.",
            "VernacEndSegment",
            "b0848583277a2c0c993c8b796fcff378ec994d0b"
        ],
        [
            "Prenex Implicits svalP s2val s2valP s2valP'.",
            "VernacExtend",
            "fec0a4e1e5efe0526168ea41ea80b9a1b7efa2c6"
        ],
        [
            "Canonical sig_subType T (P : pred T) : subType [eta P] := Eval hnf in [subType for @sval T [eta [eta P]]].",
            "VernacDefinition",
            "77db2cd56a2b93059d6b748588f1c8a75d56351c"
        ],
        [
            "Notation \"{ x 'in' A }\" := {x | x \\in A} (at level 0, x at level 99, format \"{ x 'in' A }\") : type_scope.",
            "VernacNotation",
            "71578004f89798b5f164d617032877426bf725f8"
        ],
        [
            "Notation \"{ x 'in' A | P }\" := {x | (x \\in A) && P} (at level 0, x at level 99, format \"{ x 'in' A | P }\") : type_scope.",
            "VernacNotation",
            "840e4ce374934b9d07626fe16257eeb534c3c5e6"
        ],
        [
            "Notation \"{ ? x : T | P }\" := (option {x : T | is_true P}) (at level 0, x at level 99, only parsing) : type_scope.",
            "VernacNotation",
            "00373bfa43a4cb64b65e91c0c708cf1b860b2c5d"
        ],
        [
            "Notation \"{ ? x | P }\" := {? x : _ | P} (at level 0, x at level 99, format \"{ ? x | P }\") : type_scope.",
            "VernacNotation",
            "819190d0f8d590eb853f0e5482fe93df14b5e028"
        ],
        [
            "Notation \"{ ? x 'in' A }\" := {? x | x \\in A} (at level 0, x at level 99, format \"{ ? x 'in' A }\") : type_scope.",
            "VernacNotation",
            "6943235135d2c8a3b0eab032413c6767ea8982f5"
        ],
        [
            "Notation \"{ ? x 'in' A | P }\" := {? x | (x \\in A) && P} (at level 0, x at level 99, format \"{ ? x 'in' A | P }\") : type_scope.",
            "VernacNotation",
            "b83d63fbdf5c1099d94deba072a9dac49275b5a4"
        ],
        [
            "Definition insigd T (A : mem_pred T) x (Ax : in_mem x A) := insubd (exist [eta A] x Ax).",
            "VernacDefinition",
            "664a54b0efd846bf5dec83f0fd578a2c53aab52e"
        ],
        [
            "Section TransferEqType.",
            "VernacBeginSection",
            "599687a2d9d2f8e419d71f449d26a2017e4fcef5"
        ],
        [
            "Variables (T : Type) (eT : eqType) (f : T -> eT).",
            "VernacAssumption",
            "cb031073559d7d3e6f71285c6ef8d18dedeb1da5"
        ],
        [
            "Lemma inj_eqAxiom : injective f -> Equality.axiom (fun x y => f x == f y).",
            "VernacStartTheoremProof",
            "16cc925d3a9dc95435cdc201686e6e6b6ca890cb"
        ],
        [
            "by move=> f_inj x y; apply: (iffP eqP) => [|-> //]; apply: f_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition InjEqMixin f_inj := EqMixin (inj_eqAxiom f_inj).",
            "VernacDefinition",
            "1d679d02141a98b0973e0d062cc51a8eeb57fe90"
        ],
        [
            "Definition PcanEqMixin g (fK : pcancel f g) := InjEqMixin (pcan_inj fK).",
            "VernacDefinition",
            "79354113d0c360bb19d783ea5424201ab1e71bf4"
        ],
        [
            "Definition CanEqMixin g (fK : cancel f g) := InjEqMixin (can_inj fK).",
            "VernacDefinition",
            "4bfe1456449bb4227d7d9f02effdfa3dfe2f528a"
        ],
        [
            "End TransferEqType.",
            "VernacEndSegment",
            "e84fbde144ddfef2244735186e2e540e36657534"
        ],
        [
            "Section SubEqType.",
            "VernacBeginSection",
            "60bc8eff5f3860af125083a4f6145b03bea3bfd8"
        ],
        [
            "Variables (T : eqType) (P : pred T) (sT : subType P).",
            "VernacAssumption",
            "8440e084b2e88739c579474e1c8f52bda9cc6e95"
        ],
        [
            "Local Notation ev_ax := (fun T v => @Equality.axiom T (fun x y => v x == v y)).",
            "VernacSyntacticDefinition",
            "541d4107bc43333434732b9305a469d985f5c283"
        ],
        [
            "Lemma val_eqP : ev_ax sT val.",
            "VernacStartTheoremProof",
            "b7067755bdbc24f41e05b62913770eea9322facb"
        ],
        [
            "exact: inj_eqAxiom val_inj.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition sub_eqMixin := EqMixin val_eqP.",
            "VernacDefinition",
            "6c89c450282135c5f1d8793cd84dd72562aa6578"
        ],
        [
            "Canonical sub_eqType := Eval hnf in EqType sT sub_eqMixin.",
            "VernacDefinition",
            "9721c42aae1994ed12c1034f5fb34d4b96df72ad"
        ],
        [
            "Definition SubEqMixin := (let: SubType _ v _ _ _ as sT' := sT return ev_ax sT' val -> Equality.class_of sT' in fun vP : ev_ax _ v => EqMixin vP ) val_eqP.",
            "VernacDefinition",
            "f4028977046ecc2a49a02d5e5cecb0d87ea9972e"
        ],
        [
            "Lemma val_eqE (u v : sT) : (val u == val v) = (u == v).",
            "VernacStartTheoremProof",
            "74844068eb7736e05cad52d2b58f013c8f9b326c"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SubEqType.",
            "VernacEndSegment",
            "b3583edeb2937423265f79483e9af859bb6a84d0"
        ],
        [
            "Arguments val_eqP {T P sT x y}.",
            "VernacArguments",
            "84c9db5f38209b6ca3bb11bc8acacbed0f9bf399"
        ],
        [
            "Notation \"[ 'eqMixin' 'of' T 'by' <: ]\" := (SubEqMixin _ : Equality.class_of T) (at level 0, format \"[ 'eqMixin' 'of' T 'by' <: ]\") : form_scope.",
            "VernacNotation",
            "f3c2da186b72a9fdfee2e8bda5a10496eef76460"
        ],
        [
            "Section SigEqType.",
            "VernacBeginSection",
            "d4661a7a2ce1a722cde6075b697c55a477e8effe"
        ],
        [
            "Variables (T : eqType) (P : pred T).",
            "VernacAssumption",
            "8c070b2fd65895dccae3f410830c28885be92d03"
        ],
        [
            "Definition sig_eqMixin := Eval hnf in [eqMixin of {x | P x} by <:].",
            "VernacDefinition",
            "77fd8078c249057647ee222392ba561541485d8f"
        ],
        [
            "Canonical sig_eqType := Eval hnf in EqType {x | P x} sig_eqMixin.",
            "VernacDefinition",
            "487db8b6f41c7f0b7b39d44476c393622d88252b"
        ],
        [
            "End SigEqType.",
            "VernacEndSegment",
            "9c043c3eca2e08fcf61c8bef8b6d3622eae90c01"
        ],
        [
            "Section ProdEqType.",
            "VernacBeginSection",
            "16dd343335bf2743b8278dc8cb2fa6ba625ff9ff"
        ],
        [
            "Variable T1 T2 : eqType.",
            "VernacAssumption",
            "6b7936790003d14445c2713b59a7e4e06a99a280"
        ],
        [
            "Definition pair_eq : rel (T1 * T2) := fun u v => (u.1 == v.1) && (u.2 == v.2).",
            "VernacDefinition",
            "3b4d05e2c2a83cf667cfcefa8595f88da7540d34"
        ],
        [
            "Lemma pair_eqP : Equality.axiom pair_eq.",
            "VernacStartTheoremProof",
            "3f28fa600fddbb258e8cdcb8c369a032bf40aeab"
        ],
        [
            "move=> [x1 x2] [y1 y2] /=; apply: (iffP andP) => [[]|[<- <-]] //=.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by do 2!move/eqP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical prod_eqMixin := EqMixin pair_eqP.",
            "VernacDefinition",
            "732c6c8f0219c8717d5035c57d65944fd2a94190"
        ],
        [
            "Canonical prod_eqType := Eval hnf in EqType (T1 * T2) prod_eqMixin.",
            "VernacDefinition",
            "ecdd1f313269805145f38c8131417d5fbc4c7c37"
        ],
        [
            "Lemma pair_eqE : pair_eq = eq_op :> rel _.",
            "VernacStartTheoremProof",
            "cc64f28cf336ef113c92aeab6a1c3ee1eb248212"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma xpair_eqE (x1 y1 : T1) (x2 y2 : T2) : ((x1, x2) == (y1, y2)) = ((x1 == y1) && (x2 == y2)).",
            "VernacStartTheoremProof",
            "9fa49ef5ff51d1cdaa6696b006ead3584499ef31"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pair_eq1 (u v : T1 * T2) : u == v -> u.1 == v.1.",
            "VernacStartTheoremProof",
            "7210b45642646047bd26b631553e0a496d551135"
        ],
        [
            "by case/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pair_eq2 (u v : T1 * T2) : u == v -> u.2 == v.2.",
            "VernacStartTheoremProof",
            "660225d98fc46a4d4780a839c9029fbf551af50a"
        ],
        [
            "by case/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ProdEqType.",
            "VernacEndSegment",
            "0acdfe3eec7636625aafba90779ed2acf92ed4b5"
        ],
        [
            "Arguments pair_eq {T1 T2} u v /.",
            "VernacArguments",
            "27c7df48afe6a6927546f9331d3373b9d1399b2c"
        ],
        [
            "Arguments pair_eqP {T1 T2}.",
            "VernacArguments",
            "4a25b6f2a128028a6cc579494ba8daad2419b172"
        ],
        [
            "Definition predX T1 T2 (p1 : pred T1) (p2 : pred T2) := [pred z | p1 z.1 & p2 z.2].",
            "VernacDefinition",
            "837a1c062c7bb10886d6fc35e5cbe23c9ff6c50b"
        ],
        [
            "Notation \"[ 'predX' A1 & A2 ]\" := (predX [mem A1] [mem A2]) (at level 0, format \"[ 'predX' A1 & A2 ]\") : fun_scope.",
            "VernacNotation",
            "60773a945003d9a366fcfbb54a7977bd28c5d859"
        ],
        [
            "Section OptionEqType.",
            "VernacBeginSection",
            "6452ab2875c63306e339052881ea59d5b0d87e91"
        ],
        [
            "Variable T : eqType.",
            "VernacAssumption",
            "2ceeb4536776ca324e5be084d2deb4d476694ef1"
        ],
        [
            "Definition opt_eq (u v : option T) : bool := oapp (fun x => oapp (eq_op x) false v) (~~ v) u.",
            "VernacDefinition",
            "51378e29efbdc422bfef8f35de4086ba2eca092a"
        ],
        [
            "Lemma opt_eqP : Equality.axiom opt_eq.",
            "VernacStartTheoremProof",
            "00d83ac05e0f679705457213e7ea1ce8468c3f81"
        ],
        [
            "case=> [x|] [y|] /=; by [constructor | apply: (iffP eqP) => [|[]] ->].",
            "VernacExtend",
            "14b141a2d70f00681f703015bc169478d399fe62"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical option_eqMixin := EqMixin opt_eqP.",
            "VernacDefinition",
            "81b7bf1e03483e581683735c7da6bc88d7b8f7e8"
        ],
        [
            "Canonical option_eqType := Eval hnf in EqType (option T) option_eqMixin.",
            "VernacDefinition",
            "39992ba96395fc22e23d920e48651c440223e33a"
        ],
        [
            "End OptionEqType.",
            "VernacEndSegment",
            "df2f1cac161fccccf284d1232a7dc2e6e70ccfa8"
        ],
        [
            "Arguments opt_eq {T} !u !v.",
            "VernacArguments",
            "2df6f819b337bffa1bec4d0efa0e4bd32c8c51ce"
        ],
        [
            "Section TaggedAs.",
            "VernacBeginSection",
            "ee3b06f299ee3f7377328a74138aacfc3f0e8e7f"
        ],
        [
            "Variables (I : eqType) (T_ : I -> Type).",
            "VernacAssumption",
            "c37357684121696ceb5ba80253b296ab01b085de"
        ],
        [
            "Implicit Types u v : {i : I & T_ i}.",
            "VernacReserve",
            "05f3689685da187c748f6b06ccdd5bf6819267ea"
        ],
        [
            "Definition tagged_as u v := if tag u =P tag v is ReflectT eq_uv then eq_rect_r T_ (tagged v) eq_uv else tagged u.",
            "VernacDefinition",
            "393e9d5e1e1ce2f086544c19ab7fa43803190dd5"
        ],
        [
            "Lemma tagged_asE u x : tagged_as u (Tagged T_ x) = x.",
            "VernacStartTheoremProof",
            "22cbc82bc94bb961d92fa47c7abab23d260f8c2c"
        ],
        [
            "by rewrite /tagged_as /=; case: eqP => // eq_uu; rewrite [eq_uu]eq_axiomK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End TaggedAs.",
            "VernacEndSegment",
            "99bbeb6ebdf6aff6c3dc7c0005ebfddc9409dabb"
        ],
        [
            "Section TagEqType.",
            "VernacBeginSection",
            "35091363f8128c3b53300063a90ab8a1a48a856c"
        ],
        [
            "Variables (I : eqType) (T_ : I -> eqType).",
            "VernacAssumption",
            "ee7d3da55a6524e5622f5002c85cdde65881e2a4"
        ],
        [
            "Implicit Types u v : {i : I & T_ i}.",
            "VernacReserve",
            "05f3689685da187c748f6b06ccdd5bf6819267ea"
        ],
        [
            "Definition tag_eq u v := (tag u == tag v) && (tagged u == tagged_as u v).",
            "VernacDefinition",
            "3731c998618db1546dc865eae26e791fb3b22430"
        ],
        [
            "Lemma tag_eqP : Equality.axiom tag_eq.",
            "VernacStartTheoremProof",
            "e3c321e8e178ccd5ba60893d63f8e85ce5cc7855"
        ],
        [
            "rewrite /tag_eq => [] [i x] [j] /=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "case: eqP => [<-|Hij] y; last by right; case.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: (iffP eqP) => [->|<-]; rewrite tagged_asE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical tag_eqMixin := EqMixin tag_eqP.",
            "VernacDefinition",
            "c05e62858b795c90c511b64944995667c93152fa"
        ],
        [
            "Canonical tag_eqType := Eval hnf in EqType {i : I & T_ i} tag_eqMixin.",
            "VernacDefinition",
            "fae97dff4f303f0c3119a3e516b122b2632c6e26"
        ],
        [
            "Lemma tag_eqE : tag_eq = eq_op.",
            "VernacStartTheoremProof",
            "cb947fe9962dc3bf5e16cd80adbc9b39e2bb9c77"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_tag u v : u == v -> tag u = tag v.",
            "VernacStartTheoremProof",
            "4c4dba5ea5b87062e5e00c410906ee96d4158fbf"
        ],
        [
            "by move/eqP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_Tagged u x :(u == Tagged _ x) = (tagged u == x).",
            "VernacStartTheoremProof",
            "1184415355ddedb78e0205a6f7a24b67a8108b04"
        ],
        [
            "by rewrite -tag_eqE /tag_eq eqxx tagged_asE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End TagEqType.",
            "VernacEndSegment",
            "d246287cd7b1441d5df1a261446eedabccfab52d"
        ],
        [
            "Arguments tag_eq {I T_} !u !v.",
            "VernacArguments",
            "4f162a302e397a1ace6d935d1680417be035aa23"
        ],
        [
            "Arguments tag_eqP {I T_ x y}.",
            "VernacArguments",
            "e38f5581f61c779c39cf18d48663415e510d5485"
        ],
        [
            "Section SumEqType.",
            "VernacBeginSection",
            "7a0dcce12b2c4967c66ba424baab15a10896996a"
        ],
        [
            "Variables T1 T2 : eqType.",
            "VernacAssumption",
            "6b7936790003d14445c2713b59a7e4e06a99a280"
        ],
        [
            "Implicit Types u v : T1 + T2.",
            "VernacReserve",
            "02174ad181df2fe89b3ec299f48110a60092a8e4"
        ],
        [
            "Definition sum_eq u v := match u, v with | inl x, inl y | inr x, inr y => x == y | _, _ => false end.",
            "VernacDefinition",
            "4165c1b75d91d7cd177352b5e25ce6898191a8a7"
        ],
        [
            "Lemma sum_eqP : Equality.axiom sum_eq.",
            "VernacStartTheoremProof",
            "c9af9c6c939c00cdf1f420314d94263a2e2e3118"
        ],
        [
            "case=> x [] y /=; by [right | apply: (iffP eqP) => [->|[->]]].",
            "VernacExtend",
            "14b141a2d70f00681f703015bc169478d399fe62"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical sum_eqMixin := EqMixin sum_eqP.",
            "VernacDefinition",
            "9156d699301c812384f02f0cc698d4b99387c491"
        ],
        [
            "Canonical sum_eqType := Eval hnf in EqType (T1 + T2) sum_eqMixin.",
            "VernacDefinition",
            "1f897f773c6cac2bc97ce545f1f1c4357b40127c"
        ],
        [
            "Lemma sum_eqE : sum_eq = eq_op.",
            "VernacStartTheoremProof",
            "ace995fc5f020fef0700ff37f7c4b0f00ff611eb"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SumEqType.",
            "VernacEndSegment",
            "3a8e6e2a0c9a756e9868ed880253fd1c97c45006"
        ],
        [
            "Arguments sum_eq {T1 T2} !u !v.",
            "VernacArguments",
            "f182e64a3f48725fc8e87b47fc62614a73f7a920"
        ],
        [
            "Arguments sum_eqP {T1 T2 x y}.",
            "VernacArguments",
            "b7b1b0aca14401c01a00e74a44c4e1e8ab1c85f5"
        ],
        [
            "Section MonoHomoTheory.",
            "VernacBeginSection",
            "1b6f175ba7575176acc88414311a49b4f54e2da6"
        ],
        [
            "Variables (aT rT : eqType) (f : aT -> rT).",
            "VernacAssumption",
            "65d34e985172ee4648303e078e1b362c7261a834"
        ],
        [
            "Variables (aR aR' : rel aT) (rR rR' : rel rT).",
            "VernacAssumption",
            "31fd449317c8c4946d02fba96387cf2c25903f1b"
        ],
        [
            "Hypothesis aR_refl : reflexive aR.",
            "VernacAssumption",
            "2b23f397767adc004b1947d3df2fc3e4818bd27c"
        ],
        [
            "Hypothesis rR_refl : reflexive rR.",
            "VernacAssumption",
            "87749929970a1b93fe45d794cc9b3e274eec9632"
        ],
        [
            "Hypothesis aR'E : forall x y, aR' x y = (x != y) && (aR x y).",
            "VernacAssumption",
            "dc7b222bcd2d03fcb5ae20dbd20ea90294c8b7b5"
        ],
        [
            "Hypothesis rR'E : forall x y, rR' x y = (x != y) && (rR x y).",
            "VernacAssumption",
            "bf41650c9cfd4dfcf8d091d6c61a27a2ad06c9dd"
        ],
        [
            "Let aRE x y : aR x y = (x == y) || (aR' x y).",
            "VernacDefinition",
            "da685ace8fb3ce4a88be2ebb90ccea76593984f9"
        ],
        [
            "by rewrite aR'E; case: (altP eqP) => //= ->; apply: aR_refl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let rRE x y : rR x y = (x == y) || (rR' x y).",
            "VernacDefinition",
            "5cf673b044b2bc20d16b47fa8e2070d84bd863d2"
        ],
        [
            "by rewrite rR'E; case: (altP eqP) => //= ->; apply: rR_refl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section InDom.",
            "VernacBeginSection",
            "8f97d9e44d47121c4f9254cc42b381adffb628b3"
        ],
        [
            "Variable D : pred aT.",
            "VernacAssumption",
            "108d8109ebf356115835bd19d09be98810b7e743"
        ],
        [
            "Section DifferentDom.",
            "VernacBeginSection",
            "fce589a2c366a2719a45aabecc270084ed0c5993"
        ],
        [
            "Variable D' : pred aT.",
            "VernacAssumption",
            "3495dabc0b55fad3df2c4eb42e5260f9ffeb80ff"
        ],
        [
            "Lemma homoW_in : {in D & D', {homo f : x y / aR' x y >-> rR' x y}} -> {in D & D', {homo f : x y / aR x y >-> rR x y}}.",
            "VernacStartTheoremProof",
            "1d32819284687b7462d7778ca19e49b6f2a94ef9"
        ],
        [
            "move=> mf x y xD yD /=; rewrite aRE => /orP[/eqP->|/mf]; by rewrite rRE ?eqxx // orbC => ->.",
            "VernacExtend",
            "dd76215f84b5ec723bc22942b73281b86cf324ad"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma inj_homo_in : {in D & D', injective f} -> {in D & D', {homo f : x y / aR x y >-> rR x y}} -> {in D & D', {homo f : x y / aR' x y >-> rR' x y}}.",
            "VernacStartTheoremProof",
            "696ecdac1fab935c2bccd2c455c5c217252e7dac"
        ],
        [
            "move=> fI mf x y xD yD /=; rewrite aR'E rR'E => /andP[neq_xy xy].",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by rewrite mf ?andbT //; apply: contra_neq neq_xy => /fI; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End DifferentDom.",
            "VernacEndSegment",
            "ec1d81f3e28f9495640e4178639418e0d2a66843"
        ],
        [
            "Hypothesis aR_anti : antisymmetric aR.",
            "VernacAssumption",
            "aa992b5b15c3cd49efdbd6881e45ad222a367f7d"
        ],
        [
            "Hypothesis rR_anti : antisymmetric rR.",
            "VernacAssumption",
            "bf10a072d23cde6bc6aae8b784f4c61bbc5ab0fd"
        ],
        [
            "Lemma mono_inj_in : {in D &, {mono f : x y / aR x y >-> rR x y}} -> {in D &, injective f}.",
            "VernacStartTheoremProof",
            "c30267e9812f4b74d14128e45c831e7dbaab9588"
        ],
        [
            "by move=> mf x y ?? eqf; apply/aR_anti; rewrite -!mf// eqf rR_refl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma anti_mono_in : {in D &, {mono f : x y / aR x y >-> rR x y}} -> {in D &, {mono f : x y / aR' x y >-> rR' x y}}.",
            "VernacStartTheoremProof",
            "ed25ef1ec22bcd6bc592b1b9a82096673a292be9"
        ],
        [
            "move=> mf x y ??; rewrite rR'E aR'E mf// (@inj_in_eq _ _ D)//.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "exact: mono_inj_in.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma total_homo_mono_in : total aR -> {in D &, {homo f : x y / aR' x y >-> rR' x y}} -> {in D &, {mono f : x y / aR x y >-> rR x y}}.",
            "VernacStartTheoremProof",
            "43aeeaf6f0e92af4e50a79f605606fe646198ca7"
        ],
        [
            "move=> aR_tot mf x y xD yD.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have [->|neq_xy] := altP (x =P y); first by rewrite ?eqxx ?aR_refl ?rR_refl.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have [xy|] := (boolP (aR x y)); first by rewrite rRE mf ?orbT// aR'E neq_xy.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have /orP [->//|] := aR_tot x y.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite aRE eq_sym (negPf neq_xy) /= => /mf -/(_ yD xD).",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite rR'E => /andP[Nfxfy fyfx] _; apply: contra_neqF Nfxfy => fxfy.",
            "VernacExtend",
            "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
        ],
        [
            "by apply/rR_anti; rewrite fyfx fxfy.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End InDom.",
            "VernacEndSegment",
            "81c4dae1e1ffbf9e7dc671e0087a2e67d24823f8"
        ],
        [
            "Let D := @predT aT.",
            "VernacDefinition",
            "c28bb2899c728b248bb80f50220f98db231505b4"
        ],
        [
            "Lemma homoW : {homo f : x y / aR' x y >-> rR' x y} -> {homo f : x y / aR x y >-> rR x y}.",
            "VernacStartTheoremProof",
            "ab24597d1c0c8fa3d75b160a70be19b948c163ab"
        ],
        [
            "by move=> mf ???; apply: (@homoW_in D D) => // ????; apply: mf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma inj_homo : injective f -> {homo f : x y / aR x y >-> rR x y} -> {homo f : x y / aR' x y >-> rR' x y}.",
            "VernacStartTheoremProof",
            "c159359ee96e1f0c73bfbf0509f8dacb6efccaa8"
        ],
        [
            "by move=> fI mf ???; apply: (@inj_homo_in D D) => //????; [apply: fI|apply: mf].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hypothesis aR_anti : antisymmetric aR.",
            "VernacAssumption",
            "aa992b5b15c3cd49efdbd6881e45ad222a367f7d"
        ],
        [
            "Hypothesis rR_anti : antisymmetric rR.",
            "VernacAssumption",
            "bf10a072d23cde6bc6aae8b784f4c61bbc5ab0fd"
        ],
        [
            "Lemma mono_inj : {mono f : x y / aR x y >-> rR x y} -> injective f.",
            "VernacStartTheoremProof",
            "46bdc43ce3fdb3620cddf46f9d44fab03caff264"
        ],
        [
            "by move=> mf x y eqf; apply/aR_anti; rewrite -!mf eqf rR_refl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma anti_mono : {mono f : x y / aR x y >-> rR x y} -> {mono f : x y / aR' x y >-> rR' x y}.",
            "VernacStartTheoremProof",
            "8c4cc025892e7e2485f21d5ff52c3c82893febf9"
        ],
        [
            "by move=> mf x y; rewrite rR'E aR'E mf inj_eq //; apply: mono_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma total_homo_mono : total aR -> {homo f : x y / aR' x y >-> rR' x y} -> {mono f : x y / aR x y >-> rR x y}.",
            "VernacStartTheoremProof",
            "1941df4add373120faeb66b648fb2392fdcf3398"
        ],
        [
            "move=> /(@total_homo_mono_in D rR_anti) hmf hf => x y.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by apply: hmf => // ?? _ _; apply: hf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MonoHomoTheory.",
            "VernacEndSegment",
            "29059f1596d486be55e9b662ce2c7812d9fc388d"
        ]
    ],
    "proofs": [
        {
            "name": "eqE",
            "line_nb": 28,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqP",
            "line_nb": 31,
            "steps": [
                {
                    "command": [
                        "by case: T => ? [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_refl",
            "line_nb": 44,
            "steps": [
                {
                    "command": [
                        "exact/eqP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_sym",
            "line_nb": 48,
            "steps": [
                {
                    "command": [
                        "exact/eqP/eqP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "contraTeq",
            "line_nb": 55,
            "steps": [
                {
                    "command": [
                        "by move=> imp hyp; apply/eqP; apply: contraTT hyp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "contraNeq",
            "line_nb": 58,
            "steps": [
                {
                    "command": [
                        "by move=> imp hyp; apply/eqP; apply: contraNT hyp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "contraFeq",
            "line_nb": 61,
            "steps": [
                {
                    "command": [
                        "by move=> imp /negbT; apply: contraNeq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "contraTneq",
            "line_nb": 64,
            "steps": [
                {
                    "command": [
                        "by move=> imp; apply: contraTN => /eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "contraNneq",
            "line_nb": 67,
            "steps": [
                {
                    "command": [
                        "by move=> imp; apply: contraNN => /eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "contraFneq",
            "line_nb": 70,
            "steps": [
                {
                    "command": [
                        "by move=> imp /negbT; apply: contraNneq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "contra_eqN",
            "line_nb": 73,
            "steps": [
                {
                    "command": [
                        "by move=> imp /eqP; apply: contraL.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "contra_eqF",
            "line_nb": 76,
            "steps": [
                {
                    "command": [
                        "by move=> imp /eqP; apply: contraTF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "contra_eqT",
            "line_nb": 79,
            "steps": [
                {
                    "command": [
                        "by move=> imp /eqP; apply: contraLR.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "contra_neqN",
            "line_nb": 82,
            "steps": [
                {
                    "command": [
                        "by move=> imp; apply: contraNN => /imp->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "contra_neqF",
            "line_nb": 85,
            "steps": [
                {
                    "command": [
                        "by move=> imp; apply: contraNF => /imp->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "contra_neqT",
            "line_nb": 88,
            "steps": [
                {
                    "command": [
                        "by move=> imp; apply: contraNT => /imp->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "contra_eq",
            "line_nb": 91,
            "steps": [
                {
                    "command": [
                        "by move=> imp /eqP; apply: contraTeq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "contra_neq",
            "line_nb": 94,
            "steps": [
                {
                    "command": [
                        "by move=> imp; apply: contraNneq => /imp->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "contra_neq_eq",
            "line_nb": 97,
            "steps": [
                {
                    "command": [
                        "by move=> imp; apply: contraNeq => /imp->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "contra_eq_neq",
            "line_nb": 100,
            "steps": [
                {
                    "command": [
                        "by move=> imp; apply: contra_eqN => /eqP /imp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "memPn",
            "line_nb": 103,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [notDx y | notDx]; first by apply: contraTneq => ->.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "exact: contraL (notDx x) _.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "memPnC",
            "line_nb": 107,
            "steps": [
                {
                    "command": [
                        "by apply: (iffP (memPn A x)) => A'x y /A'x; rewrite eq_sym.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ifN_eq",
            "line_nb": 110,
            "steps": [
                {
                    "command": [
                        "exact: ifN.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ifN_eqC",
            "line_nb": 113,
            "steps": [
                {
                    "command": [
                        "by rewrite eq_sym; apply: ifN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_axiomK",
            "line_nb": 126,
            "steps": [
                {
                    "command": [
                        "by move=> eq_x_x; apply: eq_irrelevance.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unit_eqP",
            "line_nb": 136,
            "steps": [
                {
                    "command": [
                        "by do 2!case; left.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqbP",
            "line_nb": 142,
            "steps": [
                {
                    "command": [
                        "by do 2!case; constructor.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqbE",
            "line_nb": 147,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_irrelevance",
            "line_nb": 150,
            "steps": [
                {
                    "command": [
                        "exact: eq_irrelevance.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "negb_add",
            "line_nb": 153,
            "steps": [
                {
                    "command": [
                        "by rewrite -addNb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "negb_eqb",
            "line_nb": 156,
            "steps": [
                {
                    "command": [
                        "by rewrite -addNb negbK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqb_id",
            "line_nb": 159,
            "steps": [
                {
                    "command": [
                        "by case: b.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqbF_neg",
            "line_nb": 162,
            "steps": [
                {
                    "command": [
                        "by case: b.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqb_negLR",
            "line_nb": 165,
            "steps": [
                {
                    "command": [
                        "by case: b1; case: b2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pred1E",
            "line_nb": 184,
            "steps": [
                {
                    "command": [
                        "by move=> x y; apply: eq_sym.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "predU1P",
            "line_nb": 188,
            "steps": [
                {
                    "command": [
                        "by apply: (iffP orP); do [case=> [/eqP|]; [left | right]].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pred2P",
            "line_nb": 191,
            "steps": [
                {
                    "command": [
                        "by apply: (iffP orP); do [case=> /eqP; [left | right]].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "predD1P",
            "line_nb": 194,
            "steps": [
                {
                    "command": [
                        "by apply: (iffP andP)=> [] [] // /eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "predU1l",
            "line_nb": 197,
            "steps": [
                {
                    "command": [
                        "by move->; rewrite eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "predU1r",
            "line_nb": 200,
            "steps": [
                {
                    "command": [
                        "by move->; rewrite orbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqVneq",
            "line_nb": 203,
            "steps": [
                {
                    "command": [
                        "by case: eqP; [left | right].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inj_eq",
            "line_nb": 216,
            "steps": [
                {
                    "command": [
                        "by move=> inj_f x y; apply/eqP/eqP=> [|-> //]; apply: inj_f.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "can_eq",
            "line_nb": 219,
            "steps": [
                {
                    "command": [
                        "by move/can_inj; apply: inj_eq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bij_eq",
            "line_nb": 222,
            "steps": [
                {
                    "command": [
                        "by move/bij_inj; apply: inj_eq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "can2_eq",
            "line_nb": 225,
            "steps": [
                {
                    "command": [
                        "by move=> fK gK x y; rewrite -{1}[y]gK; apply: can_eq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inj_in_eq",
            "line_nb": 228,
            "steps": [
                {
                    "command": [
                        "by move=> inj_f x y Dx Dy; apply/eqP/eqP=> [|-> //]; apply: inj_f.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "can_in_eq",
            "line_nb": 231,
            "steps": [
                {
                    "command": [
                        "by move/can_in_inj; apply: inj_in_eq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inv_eq",
            "line_nb": 238,
            "steps": [
                {
                    "command": [
                        "by move=> fK; apply: can2_eq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_frel",
            "line_nb": 241,
            "steps": [
                {
                    "command": [
                        "by move=> eq_f x y; rewrite /= eq_f.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "invariant_comp",
            "line_nb": 248,
            "steps": [
                {
                    "command": [
                        "by move=> x eq_kfx; rewrite /= (eqP eq_kfx).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "invariant_inj",
            "line_nb": 251,
            "steps": [
                {
                    "command": [
                        "by move=> inj_h x; apply: (inj_eq inj_h).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compareP",
            "line_nb": 275,
            "steps": [
                {
                    "command": [
                        "by move=> x y; apply: sumboolP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "vrefl",
            "line_nb": 284,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SubP",
            "line_nb": 294,
            "steps": [
                {
                    "command": [
                        "by case: sT Sub_spec SubSpec u => /= U _ mkU rec _.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SubK",
            "line_nb": 297,
            "steps": [
                {
                    "command": [
                        "by case: sT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "insubP",
            "line_nb": 303,
            "steps": [
                {
                    "command": [
                        "by rewrite /insub; case: {-}_ / idP; [left; rewrite ?SubK | right; apply/negP].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "insubT",
            "line_nb": 306,
            "steps": [
                {
                    "command": [
                        "do [case: insubP => [/SubP[y Py] _ <- | /negP// ]; rewrite SubK] in Px *.",
                        "VernacExtend",
                        "2ed5ae5c7a1513e882f170a2462d7a7c3c1ca435"
                    ]
                },
                {
                    "command": [
                        "by rewrite (bool_irrelevance Px Py).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "insubF",
            "line_nb": 310,
            "steps": [
                {
                    "command": [
                        "by move/idP; case: insubP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "insubN",
            "line_nb": 313,
            "steps": [
                {
                    "command": [
                        "by move/negPf/insubF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isSome_insub",
            "line_nb": 316,
            "steps": [
                {
                    "command": [
                        "by apply: fsym => x; case: insubP => // /negPf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "insubK",
            "line_nb": 319,
            "steps": [
                {
                    "command": [
                        "by move=> x; case: insubP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "valP",
            "line_nb": 322,
            "steps": [
                {
                    "command": [
                        "by case/SubP: u => x Px; rewrite SubK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "valK",
            "line_nb": 325,
            "steps": [
                {
                    "command": [
                        "by case/SubP=> x Px; rewrite SubK; apply: insubT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "val_inj",
            "line_nb": 328,
            "steps": [
                {
                    "command": [
                        "exact: pcan_inj valK.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "valKd",
            "line_nb": 331,
            "steps": [
                {
                    "command": [
                        "by move=> u; rewrite /insubd valK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "val_insubd",
            "line_nb": 334,
            "steps": [
                {
                    "command": [
                        "by rewrite /insubd; case: insubP => [u -> | /negPf->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "insubdK",
            "line_nb": 337,
            "steps": [
                {
                    "command": [
                        "by move=> x Px; rewrite /= val_insubd [P x]Px.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "insub_eqE",
            "line_nb": 342,
            "steps": [
                {
                    "command": [
                        "rewrite /insub_eq => x; set b := P x; rewrite [in LHS]/b in (Db := erefl b) *.",
                        "VernacExtend",
                        "c6e538272374297842e22b79d14b4d843b76db77"
                    ]
                },
                {
                    "command": [
                        "by case: b in Db *; [rewrite insubT | rewrite insubF].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "innew_val",
            "line_nb": 376,
            "steps": [
                {
                    "command": [
                        "by move=> u; apply: val_inj; apply: SubK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "svalP",
            "line_nb": 383,
            "steps": [
                {
                    "command": [
                        "by case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "s2valP",
            "line_nb": 387,
            "steps": [
                {
                    "command": [
                        "by case: u.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "s2valP'",
            "line_nb": 390,
            "steps": [
                {
                    "command": [
                        "by case: u.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inj_eqAxiom",
            "line_nb": 405,
            "steps": [
                {
                    "command": [
                        "by move=> f_inj x y; apply: (iffP eqP) => [|-> //]; apply: f_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "val_eqP",
            "line_nb": 415,
            "steps": [
                {
                    "command": [
                        "exact: inj_eqAxiom val_inj.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "val_eqE",
            "line_nb": 421,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_eqP",
            "line_nb": 435,
            "steps": [
                {
                    "command": [
                        "move=> [x1 x2] [y1 y2] /=; apply: (iffP andP) => [[]|[<- <-]] //=.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by do 2!move/eqP->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_eqE",
            "line_nb": 441,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "xpair_eqE",
            "line_nb": 444,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_eq1",
            "line_nb": 447,
            "steps": [
                {
                    "command": [
                        "by case/andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_eq2",
            "line_nb": 450,
            "steps": [
                {
                    "command": [
                        "by case/andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "opt_eqP",
            "line_nb": 461,
            "steps": [
                {
                    "command": [
                        "case=> [x|] [y|] /=; by [constructor | apply: (iffP eqP) => [|[]] ->].",
                        "VernacExtend",
                        "14b141a2d70f00681f703015bc169478d399fe62"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tagged_asE",
            "line_nb": 472,
            "steps": [
                {
                    "command": [
                        "by rewrite /tagged_as /=; case: eqP => // eq_uu; rewrite [eq_uu]eq_axiomK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tag_eqP",
            "line_nb": 480,
            "steps": [
                {
                    "command": [
                        "rewrite /tag_eq => [] [i x] [j] /=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "case: eqP => [<-|Hij] y; last by right; case.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply: (iffP eqP) => [->|<-]; rewrite tagged_asE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tag_eqE",
            "line_nb": 487,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_tag",
            "line_nb": 490,
            "steps": [
                {
                    "command": [
                        "by move/eqP->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_Tagged",
            "line_nb": 493,
            "steps": [
                {
                    "command": [
                        "by rewrite -tag_eqE /tag_eq eqxx tagged_asE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sum_eqP",
            "line_nb": 503,
            "steps": [
                {
                    "command": [
                        "case=> x [] y /=; by [right | apply: (iffP eqP) => [->|[->]]].",
                        "VernacExtend",
                        "14b141a2d70f00681f703015bc169478d399fe62"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sum_eqE",
            "line_nb": 508,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "aRE",
            "line_nb": 521,
            "steps": [
                {
                    "command": [
                        "by rewrite aR'E; case: (altP eqP) => //= ->; apply: aR_refl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rRE",
            "line_nb": 524,
            "steps": [
                {
                    "command": [
                        "by rewrite rR'E; case: (altP eqP) => //= ->; apply: rR_refl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "homoW_in",
            "line_nb": 531,
            "steps": [
                {
                    "command": [
                        "move=> mf x y xD yD /=; rewrite aRE => /orP[/eqP->|/mf]; by rewrite rRE ?eqxx // orbC => ->.",
                        "VernacExtend",
                        "dd76215f84b5ec723bc22942b73281b86cf324ad"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inj_homo_in",
            "line_nb": 534,
            "steps": [
                {
                    "command": [
                        "move=> fI mf x y xD yD /=; rewrite aR'E rR'E => /andP[neq_xy xy].",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "by rewrite mf ?andbT //; apply: contra_neq neq_xy => /fI; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mono_inj_in",
            "line_nb": 541,
            "steps": [
                {
                    "command": [
                        "by move=> mf x y ?? eqf; apply/aR_anti; rewrite -!mf// eqf rR_refl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "anti_mono_in",
            "line_nb": 544,
            "steps": [
                {
                    "command": [
                        "move=> mf x y ??; rewrite rR'E aR'E mf// (@inj_in_eq _ _ D)//.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "exact: mono_inj_in.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "total_homo_mono_in",
            "line_nb": 548,
            "steps": [
                {
                    "command": [
                        "move=> aR_tot mf x y xD yD.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "have [->|neq_xy] := altP (x =P y); first by rewrite ?eqxx ?aR_refl ?rR_refl.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have [xy|] := (boolP (aR x y)); first by rewrite rRE mf ?orbT// aR'E neq_xy.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have /orP [->//|] := aR_tot x y.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite aRE eq_sym (negPf neq_xy) /= => /mf -/(_ yD xD).",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite rR'E => /andP[Nfxfy fyfx] _; apply: contra_neqF Nfxfy => fxfy.",
                        "VernacExtend",
                        "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
                    ]
                },
                {
                    "command": [
                        "by apply/rR_anti; rewrite fyfx fxfy.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "homoW",
            "line_nb": 559,
            "steps": [
                {
                    "command": [
                        "by move=> mf ???; apply: (@homoW_in D D) => // ????; apply: mf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inj_homo",
            "line_nb": 562,
            "steps": [
                {
                    "command": [
                        "by move=> fI mf ???; apply: (@inj_homo_in D D) => //????; [apply: fI|apply: mf].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mono_inj",
            "line_nb": 567,
            "steps": [
                {
                    "command": [
                        "by move=> mf x y eqf; apply/aR_anti; rewrite -!mf eqf rR_refl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "anti_mono",
            "line_nb": 570,
            "steps": [
                {
                    "command": [
                        "by move=> mf x y; rewrite rR'E aR'E mf inj_eq //; apply: mono_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "total_homo_mono",
            "line_nb": 573,
            "steps": [
                {
                    "command": [
                        "move=> /(@total_homo_mono_in D rR_anti) hmf hf => x y.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by apply: hmf => // ?? _ _; apply: hf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}