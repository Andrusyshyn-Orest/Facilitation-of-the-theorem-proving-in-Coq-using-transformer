{
    "filename": "mathcomp/ssreflect/generic_quotient.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrfun ssrbool eqtype ssrnat choice seq fintype.",
            "VernacRequire",
            "60e366db4868ea59340c18872e9e88bba8bbe6b6"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Reserved Notation \"\\pi_ Q\" (at level 0, format \"\\pi_ Q\").",
            "VernacSyntaxExtension",
            "44b8f60bf0194c4385ca8d93c2905000e2ccb046"
        ],
        [
            "Reserved Notation \"\\pi\" (at level 0, format \"\\pi\").",
            "VernacSyntaxExtension",
            "0d55dc8434341d9c866b27dafd7ee20b3b774a83"
        ],
        [
            "Reserved Notation \"{pi_ Q a }\" (at level 0, Q at next level, format \"{pi_ Q a }\").",
            "VernacSyntaxExtension",
            "23106a00375f7b04c0830b67a3b88f7d000c1b75"
        ],
        [
            "Reserved Notation \"{pi a }\" (at level 0, format \"{pi a }\").",
            "VernacSyntaxExtension",
            "efe567a867a3185fb8c9a7adfb7ac9b6ea4465f0"
        ],
        [
            "Reserved Notation \"x == y %[mod_eq e ]\" (at level 70, y at next level, no associativity, format \"'[hv ' x '/' == y '/' %[mod_eq e ] ']'\").",
            "VernacSyntaxExtension",
            "ced191ca74a1b620c089d73af1a4f95ee1588d6a"
        ],
        [
            "Reserved Notation \"x = y %[mod_eq e ]\" (at level 70, y at next level, no associativity, format \"'[hv ' x '/' = y '/' %[mod_eq e ] ']'\").",
            "VernacSyntaxExtension",
            "33d03eb3c2727fdf12643ab635c8ef5913e10f33"
        ],
        [
            "Reserved Notation \"x != y %[mod_eq e ]\" (at level 70, y at next level, no associativity, format \"'[hv ' x '/' != y '/' %[mod_eq e ] ']'\").",
            "VernacSyntaxExtension",
            "339d90f1e4d7aa46aef3ad825d08829441d6f6ed"
        ],
        [
            "Reserved Notation \"x <> y %[mod_eq e ]\" (at level 70, y at next level, no associativity, format \"'[hv ' x '/' <> y '/' %[mod_eq e ] ']'\").",
            "VernacSyntaxExtension",
            "710af51486571df41a2c610b3dd66daa7c08f61b"
        ],
        [
            "Reserved Notation \"{eq_quot e }\" (at level 0, e at level 0, format \"{eq_quot e }\", only parsing).",
            "VernacSyntaxExtension",
            "b30025fd94cd4bdf87da0b6f31384f484db6bba6"
        ],
        [
            "Delimit Scope quotient_scope with qT.",
            "VernacDelimiters",
            "42b88a0e56fb0196bf5961676759a11d2364d056"
        ],
        [
            "Local Open Scope quotient_scope.",
            "VernacOpenCloseScope",
            "d27d8214bf1167cb740fe551598349d95a0016a3"
        ],
        [
            "Section QuotientDef.",
            "VernacBeginSection",
            "c020e124b764d55e96d28878676d0a3fd109c601"
        ],
        [
            "Variable T : Type.",
            "VernacAssumption",
            "a15b17e37c4241158d544882375356c273dc93f2"
        ],
        [
            "Record quot_mixin_of qT := QuotClass { quot_repr : qT -> T; quot_pi : T -> qT; _ : cancel quot_repr quot_pi }.",
            "VernacInductive",
            "07157d604d8fef1bc0b23d847c6d7ba0f4cfa5cd"
        ],
        [
            "Notation quot_class_of := quot_mixin_of.",
            "VernacSyntacticDefinition",
            "7d256c94aff5f0a73aada6b06cfd9d6ba9009713"
        ],
        [
            "Record quotType := QuotTypePack { quot_sort :> Type; quot_class : quot_class_of quot_sort }.",
            "VernacInductive",
            "daa8dca74cc2055354ca22f0e206477e20943e88"
        ],
        [
            "Variable qT : quotType.",
            "VernacAssumption",
            "9c4e530479ae74fa501baef9c9de0f816047d62e"
        ],
        [
            "Definition pi_phant of phant qT := quot_pi (quot_class qT).",
            "VernacDefinition",
            "ebbd7325046ea78722cbd6424f89e47246be8151"
        ],
        [
            "Local Notation \"\\pi\" := (pi_phant (Phant qT)).",
            "VernacNotation",
            "9102a0257469e6393a91338fdb0c5afecddeb6e3"
        ],
        [
            "Definition repr_of := quot_repr (quot_class qT).",
            "VernacDefinition",
            "1c4b744e8719543b03dd08edcc29d6cecc714dfa"
        ],
        [
            "Lemma repr_ofK : cancel repr_of \\pi.",
            "VernacStartTheoremProof",
            "75db90544cc5772df0bb29a96b4a10e313513e91"
        ],
        [
            "by rewrite /pi_phant /repr_of /=; case: qT=> [? []].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition QuotType_clone (Q : Type) qT cT of phant_id (quot_class qT) cT := @QuotTypePack Q cT.",
            "VernacDefinition",
            "9fc2771e3cc3b3812ca21cedcb278f6272561ea4"
        ],
        [
            "End QuotientDef.",
            "VernacEndSegment",
            "5ccf7c2121eb4e3b78ea5c99c6aab25ca93d06f1"
        ],
        [
            "Arguments repr_ofK {T qT}.",
            "VernacArguments",
            "3b2ddc6fa75fbd620df57d0620027861c1389323"
        ],
        [
            "Module Type PiSig.",
            "VernacDeclareModuleType",
            "08f957736dd0dca21239fbedc6912cc3337ede09"
        ],
        [
            "Parameter f : forall (T : Type) (qT : quotType T), phant qT -> T -> qT.",
            "VernacAssumption",
            "83b245f7adf3001467176f86600b051e9c6adbd5"
        ],
        [
            "Axiom E : f = pi_phant.",
            "VernacAssumption",
            "b1d0a86de79c53f7d5c013cfa1d436648b93381a"
        ],
        [
            "End PiSig.",
            "VernacEndSegment",
            "a18831b7fe0e12f16a2fedcbe53c2a52f3538e30"
        ],
        [
            "Module Pi : PiSig.",
            "VernacDefineModule",
            "00e51528cb4bbec9092544c5054d6e95e41f26bc"
        ],
        [
            "Definition f := pi_phant.",
            "VernacDefinition",
            "20b53320a870588264b11eaf5d67457d3834a079"
        ],
        [
            "Definition E := erefl f.",
            "VernacDefinition",
            "e8695176ab4e7a7608d95097f11ad54a0d3476c9"
        ],
        [
            "End Pi.",
            "VernacEndSegment",
            "493104ae2566f7944b6434589db6d5c16c2f97c3"
        ],
        [
            "Module MPi : PiSig.",
            "VernacDefineModule",
            "11e34dff0be1e87b17f1251076556c36a675c501"
        ],
        [
            "Definition f := pi_phant.",
            "VernacDefinition",
            "20b53320a870588264b11eaf5d67457d3834a079"
        ],
        [
            "Definition E := erefl f.",
            "VernacDefinition",
            "e8695176ab4e7a7608d95097f11ad54a0d3476c9"
        ],
        [
            "End MPi.",
            "VernacEndSegment",
            "2de965bb50a21ab940b5c9f7e70f635b9ec72298"
        ],
        [
            "Module Type ReprSig.",
            "VernacDeclareModuleType",
            "68bf431cde44d87d86410a089b691b789adedd3d"
        ],
        [
            "Parameter f : forall (T : Type) (qT : quotType T), qT -> T.",
            "VernacAssumption",
            "ab02e32ee913364bb8db2753feaa8bdcb61d0298"
        ],
        [
            "Axiom E : f = repr_of.",
            "VernacAssumption",
            "3aef16dcee35d652dc7774fb8a3f82ef2c92baa4"
        ],
        [
            "End ReprSig.",
            "VernacEndSegment",
            "f4c846ba4b29a79703a99a6a9c3199a24ea2d119"
        ],
        [
            "Module Repr : ReprSig.",
            "VernacDefineModule",
            "ba5245f2d3f717932bb7ba2c0754d43697a86c50"
        ],
        [
            "Definition f := repr_of.",
            "VernacDefinition",
            "1da6544b1e6ccf3b6a08d61656c8f485ecd289e3"
        ],
        [
            "Definition E := erefl f.",
            "VernacDefinition",
            "e8695176ab4e7a7608d95097f11ad54a0d3476c9"
        ],
        [
            "End Repr.",
            "VernacEndSegment",
            "fee7c1bbd8fc0f92f3ce891c54590f8b2e782a0d"
        ],
        [
            "Notation repr := Repr.f.",
            "VernacSyntacticDefinition",
            "9aa86e4642188210de344102b7230038ff4c1f34"
        ],
        [
            "Notation \"\\pi_ Q\" := (@Pi.f _ _ (Phant Q)) : quotient_scope.",
            "VernacNotation",
            "a31497d85c22e9ec67ff21a7e1974d0a86e7a5f4"
        ],
        [
            "Notation \"\\pi\" := (@Pi.f _ _ (Phant _)) (only parsing) : quotient_scope.",
            "VernacNotation",
            "16a993e083b753eea0cd700bfa1a8064b4cd5503"
        ],
        [
            "Notation \"x == y %[mod Q ]\" := (\\pi_Q x == \\pi_Q y) : quotient_scope.",
            "VernacNotation",
            "91ca78db88845ff0cb88211dd119afccea1782a5"
        ],
        [
            "Notation \"x = y %[mod Q ]\" := (\\pi_Q x = \\pi_Q y) : quotient_scope.",
            "VernacNotation",
            "539f91bdf22ca0398c85cd568109f7d739c6ce68"
        ],
        [
            "Notation \"x != y %[mod Q ]\" := (\\pi_Q x != \\pi_Q y) : quotient_scope.",
            "VernacNotation",
            "0cadeee6ce4eca2513e39da7e692a82f71f09c10"
        ],
        [
            "Notation \"x <> y %[mod Q ]\" := (\\pi_Q x <> \\pi_Q y) : quotient_scope.",
            "VernacNotation",
            "e37fbebde59a121d829b5fd818a8c994dbfb5500"
        ],
        [
            "Local Notation \"\\mpi\" := (@MPi.f _ _ (Phant _)).",
            "VernacNotation",
            "3c2ff189be6d3f1484d56bbd635c9f38c4960240"
        ],
        [
            "Canonical mpi_unlock := Unlockable MPi.E.",
            "VernacDefinition",
            "43e894e03caf7fa8afbc99db53d62b7f294652d2"
        ],
        [
            "Canonical pi_unlock := Unlockable Pi.E.",
            "VernacDefinition",
            "e80d2b7267d5c1dbff912113f70d0fd159513017"
        ],
        [
            "Canonical repr_unlock := Unlockable Repr.E.",
            "VernacDefinition",
            "ccdd0f3002e1e4efe3b9d66c53fcdc310984f9ad"
        ],
        [
            "Notation quot_class_of := quot_mixin_of.",
            "VernacSyntacticDefinition",
            "7d256c94aff5f0a73aada6b06cfd9d6ba9009713"
        ],
        [
            "Notation QuotType Q m := (@QuotTypePack _ Q m).",
            "VernacSyntacticDefinition",
            "090582029c0dbdd44ad6cc97a18284e798620b1b"
        ],
        [
            "Notation \"[ 'quotType' 'of' Q ]\" := (@QuotType_clone _ Q _ _ id) (at level 0, format \"[ 'quotType' 'of' Q ]\") : form_scope.",
            "VernacNotation",
            "5615ef4db561ec426c48315a7db9ab2d4011e8a3"
        ],
        [
            "Arguments repr {T qT} x.",
            "VernacArguments",
            "6e641459cd7eeb80153e7801b74a229c35c22954"
        ],
        [
            "Section QuotTypeTheory.",
            "VernacBeginSection",
            "ef8d78dd95aa1cefb57167e614be16104f909892"
        ],
        [
            "Variable T : Type.",
            "VernacAssumption",
            "a15b17e37c4241158d544882375356c273dc93f2"
        ],
        [
            "Variable qT : quotType T.",
            "VernacAssumption",
            "ed4e2765a7704b61a859bb4563618e86bf39b067"
        ],
        [
            "Lemma reprK : cancel repr \\pi_qT.",
            "VernacStartTheoremProof",
            "4ab7b03307e7fd79d15336abe76cfbfaf9f0af1e"
        ],
        [
            "by move=> x; rewrite !unlock repr_ofK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variant pi_spec (x : T) : T -> Type := PiSpec y of x = y %[mod qT] : pi_spec x y.",
            "VernacInductive",
            "7bcafd6724687196c2fd11a28ebaa2ec1b833ef7"
        ],
        [
            "Lemma piP (x : T) : pi_spec x (repr (\\pi_qT x)).",
            "VernacStartTheoremProof",
            "262595691b6c93fd4a1cb655244bc3865dbaf1e8"
        ],
        [
            "by constructor; rewrite reprK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mpiE : \\mpi =1 \\pi_qT.",
            "VernacStartTheoremProof",
            "4dd18f7b33e04a7525eef41e4971244f00a1230b"
        ],
        [
            "by move=> x; rewrite !unlock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma quotW P : (forall y : T, P (\\pi_qT y)) -> forall x : qT, P x.",
            "VernacStartTheoremProof",
            "3834e0d11c5fedab750d967bcb8247cdfd77973e"
        ],
        [
            "by move=> Py x; rewrite -[x]reprK; apply: Py.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma quotP P : (forall y : T, repr (\\pi_qT y) = y -> P (\\pi_qT y)) -> forall x : qT, P x.",
            "VernacStartTheoremProof",
            "8495128110bf6796b8133fcee07b792875b86fdf"
        ],
        [
            "by move=> Py x; rewrite -[x]reprK; apply: Py; rewrite reprK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End QuotTypeTheory.",
            "VernacEndSegment",
            "ad2a0b104a3a666b13463c890715170f95df38bf"
        ],
        [
            "Arguments reprK {T qT} x.",
            "VernacArguments",
            "6a4380a13b54c6c89b0ce458900aac8e0a0f70e9"
        ],
        [
            "Structure equal_to T (x : T) := EqualTo { equal_val : T; _ : x = equal_val }.",
            "VernacInductive",
            "85c09e271f886d6d7a0ce67d7ffcd33a4d98ca25"
        ],
        [
            "Lemma equal_toE (T : Type) (x : T) (m : equal_to x) : equal_val m = x.",
            "VernacStartTheoremProof",
            "f699c8e21b612bfffdea6931298044503e00a17d"
        ],
        [
            "by case: m.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Notation piE := (@equal_toE _ _).",
            "VernacSyntacticDefinition",
            "2b3eb67b0a444e1ccdb9caf16613652b4b3251f2"
        ],
        [
            "Canonical equal_to_pi T (qT : quotType T) (x : T) := @EqualTo _ (\\pi_qT x) (\\pi x) (erefl _).",
            "VernacDefinition",
            "d7d31f3bd37b269e820e7b7ae78315ef77f0ea16"
        ],
        [
            "Arguments EqualTo {T x equal_val}.",
            "VernacArguments",
            "cd311eb8b2c13110bf60635b08d4c6c7e0ecfd26"
        ],
        [
            "Section Morphism.",
            "VernacBeginSection",
            "43709b93e7e1a516325cf1e94c39ab05798095df"
        ],
        [
            "Variables T U : Type.",
            "VernacAssumption",
            "a0dd0f619c287f89447aad2bc4820898ca5c630d"
        ],
        [
            "Variable (qT : quotType T).",
            "VernacAssumption",
            "ed4e2765a7704b61a859bb4563618e86bf39b067"
        ],
        [
            "Variable (qU : quotType U).",
            "VernacAssumption",
            "dab35a277ac546d8d0dcb7acabbaa5065f8a6cc8"
        ],
        [
            "Variable (f : T -> T) (g : T -> T -> T) (p : T -> U) (r : T -> T -> U).",
            "VernacAssumption",
            "352a4c8b86aa60f762cd5f2af0483566a29bd92f"
        ],
        [
            "Variable (fq : qT -> qT) (gq : qT -> qT -> qT) (pq : qT -> U) (rq : qT -> qT -> U).",
            "VernacAssumption",
            "23e6b17b6f2314901da9cf00eab525038d833a87"
        ],
        [
            "Variable (h : T -> U) (hq : qT -> qU).",
            "VernacAssumption",
            "484fe54ee989a22ff06c46f4cdf96295cbb4383e"
        ],
        [
            "Hypothesis pi_f : {morph \\pi : x / f x >-> fq x}.",
            "VernacAssumption",
            "1deeac0c66413dfefc0887a60b80a3e122cce454"
        ],
        [
            "Hypothesis pi_g : {morph \\pi : x y / g x y >-> gq x y}.",
            "VernacAssumption",
            "b87695b67e7a566317c427ea230bca60f94ecf2c"
        ],
        [
            "Hypothesis pi_p : {mono \\pi : x / p x >-> pq x}.",
            "VernacAssumption",
            "c36fadbd69e671ddbd541bd4f684e61b8df1c5c1"
        ],
        [
            "Hypothesis pi_r : {mono \\pi : x y / r x y >-> rq x y}.",
            "VernacAssumption",
            "f91d9b3882cfa121809475742cd629f50bcbfca5"
        ],
        [
            "Hypothesis pi_h : forall (x : T), \\pi_qU (h x) = hq (\\pi_qT x).",
            "VernacAssumption",
            "13344c2a9a5a74eef5920e687228b21ca8284e06"
        ],
        [
            "Variables (a b : T) (x : equal_to (\\pi_qT a)) (y : equal_to (\\pi_qT b)).",
            "VernacAssumption",
            "b632d252b03d91288721c0aa0c94cc86de0e87f1"
        ],
        [
            "Lemma pi_morph1 : \\pi (f a) = fq (equal_val x).",
            "VernacStartTheoremProof",
            "a34ff29651c9579474ff6f4c5332299acd2b4105"
        ],
        [
            "by rewrite !piE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pi_morph2 : \\pi (g a b) = gq (equal_val x) (equal_val y).",
            "VernacStartTheoremProof",
            "67e0b69324da67526bd0bee88a9a6d45462f346b"
        ],
        [
            "by rewrite !piE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pi_mono1 : p a = pq (equal_val x).",
            "VernacStartTheoremProof",
            "03122ff7369674308994490ed5bda88380426b65"
        ],
        [
            "by rewrite !piE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pi_mono2 : r a b = rq (equal_val x) (equal_val y).",
            "VernacStartTheoremProof",
            "d44a62979513160891a8e5c403cba15927376065"
        ],
        [
            "by rewrite !piE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pi_morph11 : \\pi (h a) = hq (equal_val x).",
            "VernacStartTheoremProof",
            "83708ced089e1cafc660031275b7fec67c328377"
        ],
        [
            "by rewrite !piE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Morphism.",
            "VernacEndSegment",
            "c60ee6360bf040fe1e0d16e35ae7897dd75c8379"
        ],
        [
            "Arguments pi_morph1 {T qT f fq}.",
            "VernacArguments",
            "941e688309e6953807df32fc0093ed959fca34d9"
        ],
        [
            "Arguments pi_morph2 {T qT g gq}.",
            "VernacArguments",
            "6df534e0c9624579e1fdf6ccbe517e402e150ac5"
        ],
        [
            "Arguments pi_mono1 {T U qT p pq}.",
            "VernacArguments",
            "a6e4757866dd20df2accf141ac4bad02f3f719e7"
        ],
        [
            "Arguments pi_mono2 {T U qT r rq}.",
            "VernacArguments",
            "e7c3ecca54d2123a385ac46958b34fe77e96191e"
        ],
        [
            "Arguments pi_morph11 {T U qT qU h hq}.",
            "VernacArguments",
            "e9bd341e011a8cf43dfcf7253a70b3ce7916ac95"
        ],
        [
            "Notation \"{pi_ Q a }\" := (equal_to (\\pi_Q a)) : quotient_scope.",
            "VernacNotation",
            "308ccccbf7fdd3c7c49ba3cee16e39066e7969d5"
        ],
        [
            "Notation \"{pi a }\" := (equal_to (\\pi a)) : quotient_scope.",
            "VernacNotation",
            "e806e98000100df233fa19992ca557ae164dab67"
        ],
        [
            "Notation PiMorph pi_x := (EqualTo pi_x).",
            "VernacSyntacticDefinition",
            "32a6611e6971c870c824400f96b3808761f97332"
        ],
        [
            "Notation PiMorph1 pi_f := (fun a (x : {pi a}) => EqualTo (pi_morph1 pi_f a x)).",
            "VernacSyntacticDefinition",
            "48cb21fe29290f12f99f4e15b7123e9db9484080"
        ],
        [
            "Notation PiMorph2 pi_g := (fun a b (x : {pi a}) (y : {pi b}) => EqualTo (pi_morph2 pi_g a b x y)).",
            "VernacSyntacticDefinition",
            "48375b14da45a9279757e2fc7e1720372de4d739"
        ],
        [
            "Notation PiMono1 pi_p := (fun a (x : {pi a}) => EqualTo (pi_mono1 pi_p a x)).",
            "VernacSyntacticDefinition",
            "f4c6f732bccb4baeb361782cd872f97237baff4c"
        ],
        [
            "Notation PiMono2 pi_r := (fun a b (x : {pi a}) (y : {pi b}) => EqualTo (pi_mono2 pi_r a b x y)).",
            "VernacSyntacticDefinition",
            "005965f79f7b5a02814b59861cb4a7e757c3aa08"
        ],
        [
            "Notation PiMorph11 pi_f := (fun a (x : {pi a}) => EqualTo (pi_morph11 pi_f a x)).",
            "VernacSyntacticDefinition",
            "b3ac68ed21e75ba047f384e4d07b8cac16320490"
        ],
        [
            "Notation lift_op1 Q f := (locked (fun x : Q => \\pi_Q (f (repr x)) : Q)).",
            "VernacSyntacticDefinition",
            "3c02d1239c480461cb979d69aa798ff5026d3708"
        ],
        [
            "Notation lift_op2 Q g := (locked (fun x y : Q => \\pi_Q (g (repr x) (repr y)) : Q)).",
            "VernacSyntacticDefinition",
            "b2e8b20c0cdd4e84cace264a601f8b9e5036bee0"
        ],
        [
            "Notation lift_fun1 Q f := (locked (fun x : Q => f (repr x))).",
            "VernacSyntacticDefinition",
            "7f04ef94bbf6878ba15987840a384096ed2b7357"
        ],
        [
            "Notation lift_fun2 Q g := (locked (fun x y : Q => g (repr x) (repr y))).",
            "VernacSyntacticDefinition",
            "d7d1f242f928ca0faea82fbd44310cd5ec258218"
        ],
        [
            "Notation lift_op11 Q Q' f := (locked (fun x : Q => \\pi_Q' (f (repr x)) : Q')).",
            "VernacSyntacticDefinition",
            "fd96c8b6547c151323cc8aaeb22247d2a44d2319"
        ],
        [
            "Notation lift_cst Q x := (locked (\\pi_Q x : Q)).",
            "VernacSyntacticDefinition",
            "6b749dd92927e955564169591a132f158c8ff75d"
        ],
        [
            "Notation PiConst a := (@EqualTo _ _ a (lock _)).",
            "VernacSyntacticDefinition",
            "695027f3b6073acae4c324854605cd7fbde5c3c2"
        ],
        [
            "Notation lift_embed qT e := (locked (fun x => \\pi_qT (e x) : qT)).",
            "VernacSyntacticDefinition",
            "2ffdfb9967dadb33fa4c33c267b882b7288b829b"
        ],
        [
            "Lemma eq_lock T T' e : e =1 (@locked (T -> T') (fun x : T => e x)).",
            "VernacStartTheoremProof",
            "c46111bc76b27c126471c5a22533f05ddf50d5fa"
        ],
        [
            "by rewrite -lock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Prenex Implicits eq_lock.",
            "VernacExtend",
            "77222337f690d59a703e49a01162d8ec7899474b"
        ],
        [
            "Notation PiEmbed e := (fun x => @EqualTo _ _ (e x) (eq_lock (fun _ => \\pi _) _)).",
            "VernacSyntacticDefinition",
            "fc8d6a7a676e4227803466e14ce956246bbabb8f"
        ],
        [
            "Section EqQuotTypeStructure.",
            "VernacBeginSection",
            "52b3ac4b4699e2b0e6dd96dd6fae2da81ca6a251"
        ],
        [
            "Variable T : Type.",
            "VernacAssumption",
            "a15b17e37c4241158d544882375356c273dc93f2"
        ],
        [
            "Variable eq_quot_op : rel T.",
            "VernacAssumption",
            "4a40b562fc653be3526946f50dbc7c7ca4aa6da7"
        ],
        [
            "Definition eq_quot_mixin_of (Q : Type) (qc : quot_class_of T Q) (ec : Equality.class_of Q) := {mono \\pi_(QuotTypePack qc) : x y / eq_quot_op x y >-> @eq_op (Equality.Pack ec) x y}.",
            "VernacDefinition",
            "7dcda82a74947a5602c0cda4ffd27f1cfece1b41"
        ],
        [
            "Record eq_quot_class_of (Q : Type) : Type := EqQuotClass { eq_quot_quot_class :> quot_class_of T Q; eq_quot_eq_mixin :> Equality.class_of Q; pi_eq_quot_mixin :> eq_quot_mixin_of eq_quot_quot_class eq_quot_eq_mixin }.",
            "VernacInductive",
            "33681d28149bfc793d4bf3da98b40eab0ac583f3"
        ],
        [
            "Record eqQuotType : Type := EqQuotTypePack { eq_quot_sort :> Type; _ : eq_quot_class_of eq_quot_sort; }.",
            "VernacInductive",
            "20810ed9fae81542a453d7490f9f394d46ada1df"
        ],
        [
            "Implicit Type eqT : eqQuotType.",
            "VernacReserve",
            "87d28c9daa31e7a1a731ac847399d2d93fd243f5"
        ],
        [
            "Definition eq_quot_class eqT : eq_quot_class_of eqT := let: EqQuotTypePack _ cT as qT' := eqT return eq_quot_class_of qT' in cT.",
            "VernacDefinition",
            "4598a49fba4bb7065bd8c48e12d48f0dedab8ea2"
        ],
        [
            "Canonical eqQuotType_eqType eqT := EqType eqT (eq_quot_class eqT).",
            "VernacDefinition",
            "7c234ed152eac7414fa469e97123fe87733021c2"
        ],
        [
            "Canonical eqQuotType_quotType eqT := QuotType eqT (eq_quot_class eqT).",
            "VernacDefinition",
            "ba6a6b2237d681cc37fed400a122671e064739ec"
        ],
        [
            "Coercion eqQuotType_eqType : eqQuotType >-> eqType.",
            "VernacCoercion",
            "1aad1240a6955fe965cb1088936c8d161fc0b984"
        ],
        [
            "Coercion eqQuotType_quotType : eqQuotType >-> quotType.",
            "VernacCoercion",
            "f7603c3717c6918bd2449bd2275784916d90d2d1"
        ],
        [
            "Definition EqQuotType_pack Q := fun (qT : quotType T) (eT : eqType) qc ec of phant_id (quot_class qT) qc & phant_id (Equality.class eT) ec => fun m => EqQuotTypePack (@EqQuotClass Q qc ec m).",
            "VernacDefinition",
            "b78d6b86c0ee9edcb4f1137af93c61c26b3fe3e5"
        ],
        [
            "Definition EqQuotType_clone (Q : Type) eqT cT of phant_id (eq_quot_class eqT) cT := @EqQuotTypePack Q cT.",
            "VernacDefinition",
            "587e963a5256f737be3e07f28f3e29983c220ed6"
        ],
        [
            "Lemma pi_eq_quot eqT : {mono \\pi_eqT : x y / eq_quot_op x y >-> x == y}.",
            "VernacStartTheoremProof",
            "8368ee64b988c683f54da46e86a33bf6deac984a"
        ],
        [
            "by case: eqT => [] ? [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical pi_eq_quot_mono eqT := PiMono2 (pi_eq_quot eqT).",
            "VernacDefinition",
            "a2463b618e266eb535f4a1def97d05106e3e8c98"
        ],
        [
            "End EqQuotTypeStructure.",
            "VernacEndSegment",
            "a562e2748cf2b7570771e1efd32242278b9a44d0"
        ],
        [
            "Notation EqQuotType e Q m := (@EqQuotType_pack _ e Q _ _ _ _ id id m).",
            "VernacSyntacticDefinition",
            "6411378c64b5a44e78e52bdce59fa28f713dbdae"
        ],
        [
            "Notation \"[ 'eqQuotType' e 'of' Q ]\" := (@EqQuotType_clone _ e Q _ _ id) (at level 0, format \"[ 'eqQuotType' e 'of' Q ]\") : form_scope.",
            "VernacNotation",
            "7b2a1f2c626fddfa01baa807afd5bd1f424d0d08"
        ],
        [
            "Module QuotSubType.",
            "VernacDefineModule",
            "8911bf6b78fc01c0206a0c7e1c290686be5484b2"
        ],
        [
            "Section SubTypeMixin.",
            "VernacBeginSection",
            "14d2197d480a105a5bafeab180674acf4f58006a"
        ],
        [
            "Variable T : eqType.",
            "VernacAssumption",
            "2ceeb4536776ca324e5be084d2deb4d476694ef1"
        ],
        [
            "Variable qT : quotType T.",
            "VernacAssumption",
            "ed4e2765a7704b61a859bb4563618e86bf39b067"
        ],
        [
            "Definition Sub x (px : repr (\\pi_qT x) == x) := \\pi_qT x.",
            "VernacDefinition",
            "8d1792a7ffdb6e30d246aa99afaa536b36df67d6"
        ],
        [
            "Lemma qreprK x Px : repr (@Sub x Px) = x.",
            "VernacStartTheoremProof",
            "b0e45653a510ffde31def84f081a68a573910089"
        ],
        [
            "by rewrite /Sub (eqP Px).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sortPx (x : qT) : repr (\\pi_qT (repr x)) == repr x.",
            "VernacStartTheoremProof",
            "50a9daf03ad7ae73899b14abe744d2628309de29"
        ],
        [
            "by rewrite !reprK eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sort_Sub (x : qT) : x = Sub (sortPx x).",
            "VernacStartTheoremProof",
            "94e634657cbfb60535058990579dc9fb8e2b51e6"
        ],
        [
            "by rewrite /Sub reprK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma reprP K (PK : forall x Px, K (@Sub x Px)) u : K u.",
            "VernacStartTheoremProof",
            "97b248c7f1a50714a0366c5a29ffa76f45c577ec"
        ],
        [
            "by rewrite (sort_Sub u); apply: PK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical subType := SubType _ _ _ reprP qreprK.",
            "VernacDefinition",
            "40af69953014a6ffcf7b97166336661b37e99122"
        ],
        [
            "Definition eqMixin := Eval hnf in [eqMixin of qT by <:].",
            "VernacDefinition",
            "25e0e8cafa7a4920b33646ef0393211c13c72c17"
        ],
        [
            "Canonical eqType := EqType qT eqMixin.",
            "VernacDefinition",
            "fd81c27817a6ef91ce82d74b571d875c3bc47657"
        ],
        [
            "End SubTypeMixin.",
            "VernacEndSegment",
            "d88a19fa38928a93e524db221a5b417f880b429f"
        ],
        [
            "Definition choiceMixin (T : choiceType) (qT : quotType T) := Eval hnf in [choiceMixin of qT by <:].",
            "VernacDefinition",
            "e376a01360be3e6dba1d86bb20b786ac1d365e6d"
        ],
        [
            "Canonical choiceType (T : choiceType) (qT : quotType T) := ChoiceType qT (@choiceMixin T qT).",
            "VernacDefinition",
            "37cd3659260f8bf7c84ad074eb73101fa3853cd3"
        ],
        [
            "Definition countMixin (T : countType) (qT : quotType T) := Eval hnf in [countMixin of qT by <:].",
            "VernacDefinition",
            "05b1fcc5d8b99a0ec35eec714960957619813201"
        ],
        [
            "Canonical countType (T : countType) (qT : quotType T) := CountType qT (@countMixin T qT).",
            "VernacDefinition",
            "925f812aa5a6e23ba4cf63e652fead1bdf7570e7"
        ],
        [
            "Section finType.",
            "VernacBeginSection",
            "3319f17011ac2cc00b234bdb9a73ca2aaf699d35"
        ],
        [
            "Variables (T : finType) (qT : quotType T).",
            "VernacAssumption",
            "131ab2188053633926da6f102db215971448d5f0"
        ],
        [
            "Canonical subCountType := [subCountType of qT].",
            "VernacDefinition",
            "514b7fc0ece4c6c900065418f3a5319d9b009072"
        ],
        [
            "Definition finMixin := Eval hnf in [finMixin of qT by <:].",
            "VernacDefinition",
            "1d60ab9646c2ac9d85b0dc038f4aa775c6e6a846"
        ],
        [
            "End finType.",
            "VernacEndSegment",
            "84212c971beb7e3ff0b9bad74e7ee110e37e6644"
        ],
        [
            "End QuotSubType.",
            "VernacEndSegment",
            "3775bca47966c50bf3de3dd5e1b10c6da717901f"
        ],
        [
            "Notation \"[ 'subType' Q 'of' T 'by' %/ ]\" := (@SubType T _ Q _ _ (@QuotSubType.reprP _ _) (@QuotSubType.qreprK _ _)) (at level 0, format \"[ 'subType' Q 'of' T 'by' %/ ]\") : form_scope.",
            "VernacNotation",
            "eead5026c73715fb03bf8cc2ff99b67609be9136"
        ],
        [
            "Notation \"[ 'eqMixin' 'of' Q 'by' <:%/ ]\" := (@QuotSubType.eqMixin _ _: Equality.class_of Q) (at level 0, format \"[ 'eqMixin' 'of' Q 'by' <:%/ ]\") : form_scope.",
            "VernacNotation",
            "c23e632acca5aa1fa7d8b8261abffaa16f25859b"
        ],
        [
            "Notation \"[ 'choiceMixin' 'of' Q 'by' <:%/ ]\" := (@QuotSubType.choiceMixin _ _: Choice.mixin_of Q) (at level 0, format \"[ 'choiceMixin' 'of' Q 'by' <:%/ ]\") : form_scope.",
            "VernacNotation",
            "4b3e23584dfc8845e0b43740cd7d32b6e5aa8607"
        ],
        [
            "Notation \"[ 'countMixin' 'of' Q 'by' <:%/ ]\" := (@QuotSubType.countMixin _ _: Countable.mixin_of Q) (at level 0, format \"[ 'countMixin' 'of' Q 'by' <:%/ ]\") : form_scope.",
            "VernacNotation",
            "f873a448529b7dc3d6971b6d351dfae320d645b3"
        ],
        [
            "Notation \"[ 'finMixin' 'of' Q 'by' <:%/ ]\" := (@QuotSubType.finMixin _ _: Finite.mixin_of Q) (at level 0, format \"[ 'finMixin' 'of' Q 'by' <:%/ ]\") : form_scope.",
            "VernacNotation",
            "1dcb034e7ddf6776dbbe6e21a2d408f558324fdc"
        ],
        [
            "Section EquivRel.",
            "VernacBeginSection",
            "8ce222b98472d220e1e28b29f95163216525e403"
        ],
        [
            "Variable T : Type.",
            "VernacAssumption",
            "a15b17e37c4241158d544882375356c273dc93f2"
        ],
        [
            "Lemma left_trans (e : rel T) : symmetric e -> transitive e -> left_transitive e.",
            "VernacStartTheoremProof",
            "f50719892c1c7c39c0f1ffcc02aed6e6bf00a460"
        ],
        [
            "by move=> s t ? * ?; apply/idP/idP; apply: t; rewrite // s.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma right_trans (e : rel T) : symmetric e -> transitive e -> right_transitive e.",
            "VernacStartTheoremProof",
            "e7db4202f94b451b43460979652c0c6b5a4f5b5d"
        ],
        [
            "by move=> s t ? * x; rewrite ![e x _]s; apply: left_trans.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variant equiv_class_of (equiv : rel T) := EquivClass of reflexive equiv & symmetric equiv & transitive equiv.",
            "VernacInductive",
            "9d6c8f92d3eda96c3be6ef31c205641905e1e500"
        ],
        [
            "Record equiv_rel := EquivRelPack { equiv :> rel T; _ : equiv_class_of equiv }.",
            "VernacInductive",
            "08bff5af1eae2930fe2b8903f0892220ced21bb0"
        ],
        [
            "Variable e : equiv_rel.",
            "VernacAssumption",
            "19234c4a52bb3b8f6a655ba18c5c88c02dc72151"
        ],
        [
            "Definition equiv_class := let: EquivRelPack _ ce as e' := e return equiv_class_of e' in ce.",
            "VernacDefinition",
            "2ca7689ac998d931eb16fef92f3466c5a3db6010"
        ],
        [
            "Definition equiv_pack (r : rel T) ce of phant_id ce equiv_class := @EquivRelPack r ce.",
            "VernacDefinition",
            "a7e12cbe6e0e2e2247a62037e181d9b3d83c1366"
        ],
        [
            "Lemma equiv_refl x : e x x.",
            "VernacStartTheoremProof",
            "7be954e9b6000110414bc144885c4603f5504485"
        ],
        [
            "by case: e => [] ? [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equiv_sym : symmetric e.",
            "VernacStartTheoremProof",
            "1c396c09a97d0f2591db1932ae2469f0c01f805c"
        ],
        [
            "by case: e => [] ? [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equiv_trans : transitive e.",
            "VernacStartTheoremProof",
            "59c2cc24ade1094b348e06aec1abfdb94a30f92a"
        ],
        [
            "by case: e => [] ? [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_op_trans (T' : eqType) : transitive (@eq_op T').",
            "VernacStartTheoremProof",
            "c9e65494212dac61717178a61a36064379bb8ba6"
        ],
        [
            "by move=> x y z; move/eqP->; move/eqP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equiv_ltrans: left_transitive e.",
            "VernacStartTheoremProof",
            "0bbb7f1c92763bbbc27b86b555a01d2b860c1f46"
        ],
        [
            "by apply: left_trans; [apply: equiv_sym|apply: equiv_trans].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equiv_rtrans: right_transitive e.",
            "VernacStartTheoremProof",
            "e4ade042e5229dadbd6509bb77f6049106586851"
        ],
        [
            "by apply: right_trans; [apply: equiv_sym|apply: equiv_trans].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EquivRel.",
            "VernacEndSegment",
            "fd8ebc998e332a0cb192e6c065d499e71392548b"
        ],
        [
            "Hint Resolve equiv_refl : core.",
            "VernacHints",
            "565537b0f4eef8cf9e42e45b842ef8a0b35a0daf"
        ],
        [
            "Notation EquivRel r er es et := (@EquivRelPack _ r (EquivClass er es et)).",
            "VernacSyntacticDefinition",
            "f46c678addfc442a7ea7bc8f41c285da346c472e"
        ],
        [
            "Notation \"[ 'equiv_rel' 'of' e ]\" := (@equiv_pack _ _ e _ id) (at level 0, format \"[ 'equiv_rel' 'of' e ]\") : form_scope.",
            "VernacNotation",
            "abfcf63ee1003d4ad0582519c19698d70346d220"
        ],
        [
            "Section EncodingModuloRel.",
            "VernacBeginSection",
            "ae9bd633cfad9ac3a21ba7fc2d35773525723ebe"
        ],
        [
            "Variables (D E : Type) (ED : E -> D) (DE : D -> E) (e : rel D).",
            "VernacAssumption",
            "de15afe05976a723121e371e950de8cd280ca00b"
        ],
        [
            "Variant encModRel_class_of (r : rel D) := EncModRelClassPack of (forall x, r x x -> r (ED (DE x)) x) & (r =2 e).",
            "VernacInductive",
            "524229a867662dbe8fe0d96f593ef9a27adac6a6"
        ],
        [
            "Record encModRel := EncModRelPack { enc_mod_rel :> rel D; _ : encModRel_class_of enc_mod_rel }.",
            "VernacInductive",
            "833487bf1a8af1c1e4b6601660d78719755ba397"
        ],
        [
            "Variable r : encModRel.",
            "VernacAssumption",
            "b23c8fb93227c870094f167b2cb37ad6bf0b8d27"
        ],
        [
            "Definition encModRelClass := let: EncModRelPack _ c as r' := r return encModRel_class_of r' in c.",
            "VernacDefinition",
            "f3d5baf2b24b521b26b720964b2793c616fac6af"
        ],
        [
            "Definition encModRelP (x : D) : r x x -> r (ED (DE x)) x.",
            "VernacDefinition",
            "24917e0d42096f51092d0dd4196722001dba46f9"
        ],
        [
            "by case: r => [] ? [] /= he _ /he.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition encModRelE : r =2 e.",
            "VernacDefinition",
            "ab2f5fbd690f7eff264b3802b71bbd473f7c33fa"
        ],
        [
            "by case: r => [] ? [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition encoded_equiv : rel E := [rel x y | r (ED x) (ED y)].",
            "VernacDefinition",
            "b9619e714cd1a581589b2f90662407abd72589aa"
        ],
        [
            "End EncodingModuloRel.",
            "VernacEndSegment",
            "b0dbc2c1ebbace01308215411b5c5724987665fd"
        ],
        [
            "Notation EncModRelClass m := (EncModRelClassPack (fun x _ => m x) (fun _ _ => erefl _)).",
            "VernacSyntacticDefinition",
            "149fcdb84a8ca403bbf7124ed4495d9072d4948e"
        ],
        [
            "Notation EncModRel r m := (@EncModRelPack _ _ _ _ _ r (EncModRelClass m)).",
            "VernacSyntacticDefinition",
            "8ec1d669ae70edfc464720f2995fe1c439a9ce95"
        ],
        [
            "Section EncodingModuloEquiv.",
            "VernacBeginSection",
            "928efb195a773c75779419ffbe5154a0ba2a1738"
        ],
        [
            "Variables (D E : Type) (ED : E -> D) (DE : D -> E) (e : equiv_rel D).",
            "VernacAssumption",
            "241d6bbfb96cad55f69f7ac69b9897a8d25a4be1"
        ],
        [
            "Variable (r : encModRel ED DE e).",
            "VernacAssumption",
            "55f0dbb563867ba30e3ac0e47a6f452f3673a8ad"
        ],
        [
            "Lemma enc_mod_rel_is_equiv : equiv_class_of (enc_mod_rel r).",
            "VernacStartTheoremProof",
            "4a0c74442643280310d432e0997689f516593181"
        ],
        [
            "split => [x|x y|y x z]; rewrite !encModRelE //; first by rewrite equiv_sym.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move=> exy /(equiv_trans exy).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition enc_mod_rel_equiv_rel := EquivRelPack enc_mod_rel_is_equiv.",
            "VernacDefinition",
            "ce9173e32dc64ba55d72f2c4b0674a7a6242fc64"
        ],
        [
            "Definition encModEquivP (x : D) : r (ED (DE x)) x.",
            "VernacDefinition",
            "79e7dd36572ef5c0e47bfb7a001ebf6577ac94d1"
        ],
        [
            "by rewrite encModRelP ?encModRelE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Local Notation e' := (encoded_equiv r).",
            "VernacSyntacticDefinition",
            "13ef84deeb0315d6d43f9016c9c63e4b80f71040"
        ],
        [
            "Lemma encoded_equivE : e' =2 [rel x y | e (ED x) (ED y)].",
            "VernacStartTheoremProof",
            "29941753f1cd8413e066fb07664a3c63e4de1bbd"
        ],
        [
            "by move=> x y; rewrite /encoded_equiv /= encModRelE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Local Notation e'E := encoded_equivE.",
            "VernacSyntacticDefinition",
            "ebea3b2828b64440d7eec88c6d1be0b4c55d23dd"
        ],
        [
            "Lemma encoded_equiv_is_equiv : equiv_class_of e'.",
            "VernacStartTheoremProof",
            "be6cc8fc01baec88015bbba3445e7fa2721eeb87"
        ],
        [
            "split => [x|x y|y x z]; rewrite !e'E //=; first by rewrite equiv_sym.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move=> exy /(equiv_trans exy).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical encoded_equiv_equiv_rel := EquivRelPack encoded_equiv_is_equiv.",
            "VernacDefinition",
            "f935398a8c0c2ed0103063a870e3aa2a64e1f360"
        ],
        [
            "Lemma encoded_equivP x : e' (DE (ED x)) x.",
            "VernacStartTheoremProof",
            "c88fb4810da24d05f5d5d1f1ef70cf740e622521"
        ],
        [
            "by rewrite /encoded_equiv /= encModEquivP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EncodingModuloEquiv.",
            "VernacEndSegment",
            "58883475745ae800b414a373e7358186fef0dd75"
        ],
        [
            "Module EquivQuot.",
            "VernacDefineModule",
            "8e600a0d2279a0c4b60cc9e34af6594b4000d6ba"
        ],
        [
            "Section EquivQuot.",
            "VernacBeginSection",
            "fa7db1a12a3b95386920d2b9b215e2ebf6d710c5"
        ],
        [
            "Variables (D : Type) (C : choiceType) (CD : C -> D) (DC : D -> C).",
            "VernacAssumption",
            "61084c5ad4a3057855cda4a5d880b6d4882b4970"
        ],
        [
            "Variables (eD : equiv_rel D) (encD : encModRel CD DC eD).",
            "VernacAssumption",
            "5dd47b085129fc4d8c4226f12f1a30eaacb3a807"
        ],
        [
            "Notation eC := (encoded_equiv encD).",
            "VernacSyntacticDefinition",
            "6062e4627cd24aa076f184554fadcb3d71d781d7"
        ],
        [
            "Definition canon x := choose (eC x) (x).",
            "VernacDefinition",
            "08d1cf9f6c185b62f01059b947a285f9e1874bb3"
        ],
        [
            "Record equivQuotient := EquivQuotient { erepr : C; _ : (frel canon) erepr erepr }.",
            "VernacInductive",
            "2e5dcce2d90311e0fe812a0c14a0446c588b332a"
        ],
        [
            "Definition type_of of (phantom (rel _) encD) := equivQuotient.",
            "VernacDefinition",
            "e0f353ae8286d15cba23552daa3907e22b7be1b9"
        ],
        [
            "Lemma canon_id : forall x, (invariant canon canon) x.",
            "VernacStartTheoremProof",
            "7253b05c9ce7fbef6c6f2cc8048315f0aaf88767"
        ],
        [
            "move=> x /=; rewrite /canon (@eq_choose _ _ (eC x)).",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite (@choose_id _ (eC x) _ x) ?chooseP ?equiv_refl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=> y; apply: equiv_ltrans; rewrite equiv_sym /= chooseP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition pi := locked (fun x => EquivQuotient (canon_id x)).",
            "VernacDefinition",
            "f3d59c50b94a9632b48253ec71508bcc5fca170d"
        ],
        [
            "Lemma ereprK : cancel erepr pi.",
            "VernacStartTheoremProof",
            "04553658a945f47dafd6635457a4d98c4fa5cd66"
        ],
        [
            "unlock pi; case=> x hx; move/eqP:(hx)=> hx'.",
            "VernacExtend",
            "d465be3cdb334b9dc3f37055ebb50c6f3f02f292"
        ],
        [
            "exact: (@val_inj _ _ [subType for erepr]).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Local Notation encDE := (encModRelE encD).",
            "VernacSyntacticDefinition",
            "49b89d17488180e61fc233608d1baa85d08cdb00"
        ],
        [
            "Local Notation encDP := (encModEquivP encD).",
            "VernacSyntacticDefinition",
            "a4293909159eedc8ae9cf67309283320eccf4c9e"
        ],
        [
            "Canonical encD_equiv_rel := EquivRelPack (enc_mod_rel_is_equiv encD).",
            "VernacDefinition",
            "226607e21a62265410540f2affd519cb2501b9cc"
        ],
        [
            "Lemma pi_CD (x y : C) : reflect (pi x = pi y) (eC x y).",
            "VernacStartTheoremProof",
            "80b7a1e17caa913939d030bcb241d3f1d868ba49"
        ],
        [
            "apply: (iffP idP) => hxy.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "apply: (can_inj ereprK); unlock pi canon => /=.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "rewrite -(@eq_choose _ (eC x) (eC y)); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move=> z; rewrite /eC /=; apply: equiv_ltrans.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: choose_id; rewrite ?equiv_refl //.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (equiv_trans (chooseP (equiv_refl _ _))) //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "move: hxy => /(f_equal erepr) /=; unlock pi canon => /= ->.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by rewrite equiv_sym /= chooseP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pi_DC (x y : D) : reflect (pi (DC x) = pi (DC y)) (eD x y).",
            "VernacStartTheoremProof",
            "1abcb1a444f108145cb31c8fe70b0031fdf7475a"
        ],
        [
            "apply: (iffP idP)=> hxy.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "apply/pi_CD; rewrite /eC /=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite (equiv_ltrans (encDP _)) (equiv_rtrans (encDP _)) /= encDE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -encDE -(equiv_ltrans (encDP _)) -(equiv_rtrans (encDP _)) /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "exact/pi_CD.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equivQTP : cancel (CD \\o erepr) (pi \\o DC).",
            "VernacStartTheoremProof",
            "1b242f946bdc9e262fe2b9163c71381df9956758"
        ],
        [
            "by move=> x; rewrite /= (pi_CD _ (erepr x) _) ?ereprK /eC /= ?encDP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Local Notation qT := (type_of (Phantom (rel D) encD)).",
            "VernacSyntacticDefinition",
            "8e8d3a7ec2fe22f90e0e853db3d2d0f8195e4bd0"
        ],
        [
            "Definition quotClass := QuotClass equivQTP.",
            "VernacDefinition",
            "e3b5f5b28aa892e3cb75f6cc90ad9fc4e2562d49"
        ],
        [
            "Canonical quotType := QuotType qT quotClass.",
            "VernacDefinition",
            "267b449e8221e21e0c3c61507f82d12c6ba54096"
        ],
        [
            "Lemma eqmodP x y : reflect (x = y %[mod qT]) (eD x y).",
            "VernacStartTheoremProof",
            "ea2d7d32341b3700e97ac8fa1dece931d37decd2"
        ],
        [
            "by apply: (iffP (pi_DC _ _)); rewrite !unlock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fact eqMixin : Equality.mixin_of qT.",
            "VernacStartTheoremProof",
            "e4646964b9ee2f1fa7ec7c0a0d10de15dcca59b6"
        ],
        [
            "exact: CanEqMixin ereprK.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical eqType := EqType qT eqMixin.",
            "VernacDefinition",
            "fd81c27817a6ef91ce82d74b571d875c3bc47657"
        ],
        [
            "Definition choiceMixin := CanChoiceMixin ereprK.",
            "VernacDefinition",
            "e72aa113b748bd553dfbfca9dc3bc42dfd2f23c2"
        ],
        [
            "Canonical choiceType := ChoiceType qT choiceMixin.",
            "VernacDefinition",
            "2eee6ab95f55e269be940c3ef6d16c90f7eac322"
        ],
        [
            "Lemma eqmodE x y : x == y %[mod qT] = eD x y.",
            "VernacStartTheoremProof",
            "04e7898db77f3778bea3346aabfedc2e260ac133"
        ],
        [
            "exact: sameP eqP (@eqmodP _ _).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical eqQuotType := EqQuotType eD qT eqmodE.",
            "VernacDefinition",
            "67dee2fe84a03ddc31004143bc0b62db52f54061"
        ],
        [
            "End EquivQuot.",
            "VernacEndSegment",
            "deff5a99309ec13277b17ae7b9e350c81b87ce88"
        ],
        [
            "End EquivQuot.",
            "VernacEndSegment",
            "deff5a99309ec13277b17ae7b9e350c81b87ce88"
        ],
        [
            "Canonical EquivQuot.quotType.",
            "VernacCanonical",
            "c9d36fa802951aa5c9c3e45150326026ad489246"
        ],
        [
            "Canonical EquivQuot.eqType.",
            "VernacCanonical",
            "ddfec32a934df76a60ee718b475230354799e8b9"
        ],
        [
            "Canonical EquivQuot.choiceType.",
            "VernacCanonical",
            "f9494b977c3a5e894f32da65e4418849a1127234"
        ],
        [
            "Canonical EquivQuot.eqQuotType.",
            "VernacCanonical",
            "831f906836a2cfdd32e6735e295d314cd8df93a1"
        ],
        [
            "Arguments EquivQuot.ereprK {D C CD DC eD encD}.",
            "VernacArguments",
            "07ee46ada1e750c2b70ffd4242caa83d804aaa48"
        ],
        [
            "Notation \"{eq_quot e }\" := (@EquivQuot.type_of _ _ _ _ _ _ (Phantom (rel _) e)) : quotient_scope.",
            "VernacNotation",
            "6cc6fa09886e5ef7be40e847d1ad3723d27ee3ef"
        ],
        [
            "Notation \"x == y %[mod_eq r ]\" := (x == y %[mod {eq_quot r}]) : quotient_scope.",
            "VernacNotation",
            "8bac1a49bf26e95208c11e9a43c262d78926128f"
        ],
        [
            "Notation \"x = y %[mod_eq r ]\" := (x = y %[mod {eq_quot r}]) : quotient_scope.",
            "VernacNotation",
            "18c72b9bd6dc12f02aa747b16b0372bc0d70da7e"
        ],
        [
            "Notation \"x != y %[mod_eq r ]\" := (x != y %[mod {eq_quot r}]) : quotient_scope.",
            "VernacNotation",
            "7ce08169084954ed91cd7b1ca20e9e5e7eebe74e"
        ],
        [
            "Notation \"x <> y %[mod_eq r ]\" := (x <> y %[mod {eq_quot r}]) : quotient_scope.",
            "VernacNotation",
            "d456ec3706b381becc2e69e9ce469691a57eac6d"
        ],
        [
            "Section DefaultEncodingModuloRel.",
            "VernacBeginSection",
            "5eb07bd6a68102f2efe5843d67df8c4498a41272"
        ],
        [
            "Variables (D : choiceType) (r : rel D).",
            "VernacAssumption",
            "08c886fdd05ee57cc364971bf86f0342c35d6d0c"
        ],
        [
            "Definition defaultEncModRelClass := @EncModRelClassPack D D id id r r (fun _ rxx => rxx) (fun _ _ => erefl _).",
            "VernacDefinition",
            "16c270e94cfc02e8a76d6fe36621ea52e6daa7b6"
        ],
        [
            "Canonical defaultEncModRel := EncModRelPack defaultEncModRelClass.",
            "VernacDefinition",
            "2f4fb02470f8167d42bf6c0c5c23331e3cbf9204"
        ],
        [
            "End DefaultEncodingModuloRel.",
            "VernacEndSegment",
            "09ec543fa191ce7fd05087b5a5e149dd1ecd65ef"
        ],
        [
            "Section CountEncodingModuloRel.",
            "VernacBeginSection",
            "2743ac4560d737e2a3ddd79426f83adf1cbcc0ee"
        ],
        [
            "Variables (D : Type) (C : countType) (CD : C -> D) (DC : D -> C).",
            "VernacAssumption",
            "12360cc7ef18919e1a4db1eaabca8dce1f5c365c"
        ],
        [
            "Variables (eD : equiv_rel D) (encD : encModRel CD DC eD).",
            "VernacAssumption",
            "5dd47b085129fc4d8c4226f12f1a30eaacb3a807"
        ],
        [
            "Notation eC := (encoded_equiv encD).",
            "VernacSyntacticDefinition",
            "6062e4627cd24aa076f184554fadcb3d71d781d7"
        ],
        [
            "Fact eq_quot_countMixin : Countable.mixin_of {eq_quot encD}.",
            "VernacStartTheoremProof",
            "2abb8b129ad556f5b3ed8cbb9a87208143e60385"
        ],
        [
            "exact: CanCountMixin EquivQuot.ereprK.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical eq_quot_countType := CountType {eq_quot encD} eq_quot_countMixin.",
            "VernacDefinition",
            "5e8e21b34e028fe029cdb991dd9d15bb03458e64"
        ],
        [
            "End CountEncodingModuloRel.",
            "VernacEndSegment",
            "31841410509809c9158b7f210fe3b4507fc9577c"
        ],
        [
            "Section EquivQuotTheory.",
            "VernacBeginSection",
            "24a37a4cf2ca4f71bae8521c142c328dc84c454c"
        ],
        [
            "Variables (T : choiceType) (e : equiv_rel T) (Q : eqQuotType e).",
            "VernacAssumption",
            "a9d602e9cd43ad4b501bdd0bbe816348749fc719"
        ],
        [
            "Lemma eqmodE x y : x == y %[mod_eq e] = e x y.",
            "VernacStartTheoremProof",
            "6212fd5e4be3f41efea2fc074efe29de837f37d3"
        ],
        [
            "by rewrite pi_eq_quot.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqmodP x y : reflect (x = y %[mod_eq e]) (e x y).",
            "VernacStartTheoremProof",
            "a8f1c9abbb54f9fe976d670eea1f7e913019e45b"
        ],
        [
            "by rewrite -eqmodE; apply/eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EquivQuotTheory.",
            "VernacEndSegment",
            "95054c29f88ea3eb527c95a6544cd20e1e7d7e43"
        ],
        [
            "Prenex Implicits eqmodE eqmodP.",
            "VernacExtend",
            "7f923d7c9dd0b5d4402856c6bd51218a444723ad"
        ],
        [
            "Section EqQuotTheory.",
            "VernacBeginSection",
            "f3f0e39563e9c4b887bc68e91f3a171aed844ce5"
        ],
        [
            "Variables (T : Type) (e : rel T) (Q : eqQuotType e).",
            "VernacAssumption",
            "7faaf487185f61dba8a4c987d502995468a6efc0"
        ],
        [
            "Lemma eqquotE x y : x == y %[mod Q] = e x y.",
            "VernacStartTheoremProof",
            "0774c89e03cb2e51f333690d5c763595c665816d"
        ],
        [
            "by rewrite pi_eq_quot.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqquotP x y : reflect (x = y %[mod Q]) (e x y).",
            "VernacStartTheoremProof",
            "10418c0ce77a6c368700428c1ceb32880a3a7419"
        ],
        [
            "by rewrite -eqquotE; apply/eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EqQuotTheory.",
            "VernacEndSegment",
            "bdb501347642de1c76cf59383811b20f70906b12"
        ],
        [
            "Prenex Implicits eqquotE eqquotP.",
            "VernacExtend",
            "e91f3a0fee8d0574a5da31618d38337bb84e7b48"
        ]
    ],
    "proofs": [
        {
            "name": "repr_ofK",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "by rewrite /pi_phant /repr_of /=; case: qT=> [? []].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "reprK",
            "line_nb": 69,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite !unlock repr_ofK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "piP",
            "line_nb": 73,
            "steps": [
                {
                    "command": [
                        "by constructor; rewrite reprK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mpiE",
            "line_nb": 76,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite !unlock.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "quotW",
            "line_nb": 79,
            "steps": [
                {
                    "command": [
                        "by move=> Py x; rewrite -[x]reprK; apply: Py.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "quotP",
            "line_nb": 82,
            "steps": [
                {
                    "command": [
                        "by move=> Py x; rewrite -[x]reprK; apply: Py; rewrite reprK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equal_toE",
            "line_nb": 88,
            "steps": [
                {
                    "command": [
                        "by case: m.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pi_morph1",
            "line_nb": 107,
            "steps": [
                {
                    "command": [
                        "by rewrite !piE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pi_morph2",
            "line_nb": 110,
            "steps": [
                {
                    "command": [
                        "by rewrite !piE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pi_mono1",
            "line_nb": 113,
            "steps": [
                {
                    "command": [
                        "by rewrite !piE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pi_mono2",
            "line_nb": 116,
            "steps": [
                {
                    "command": [
                        "by rewrite !piE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pi_morph11",
            "line_nb": 119,
            "steps": [
                {
                    "command": [
                        "by rewrite !piE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_lock",
            "line_nb": 144,
            "steps": [
                {
                    "command": [
                        "by rewrite -lock.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pi_eq_quot",
            "line_nb": 163,
            "steps": [
                {
                    "command": [
                        "by case: eqT => [] ? [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "qreprK",
            "line_nb": 175,
            "steps": [
                {
                    "command": [
                        "by rewrite /Sub (eqP Px).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sortPx",
            "line_nb": 178,
            "steps": [
                {
                    "command": [
                        "by rewrite !reprK eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sort_Sub",
            "line_nb": 181,
            "steps": [
                {
                    "command": [
                        "by rewrite /Sub reprK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "reprP",
            "line_nb": 184,
            "steps": [
                {
                    "command": [
                        "by rewrite (sort_Sub u); apply: PK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "left_trans",
            "line_nb": 208,
            "steps": [
                {
                    "command": [
                        "by move=> s t ? * ?; apply/idP/idP; apply: t; rewrite // s.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "right_trans",
            "line_nb": 211,
            "steps": [
                {
                    "command": [
                        "by move=> s t ? * x; rewrite ![e x _]s; apply: left_trans.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equiv_refl",
            "line_nb": 219,
            "steps": [
                {
                    "command": [
                        "by case: e => [] ? [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equiv_sym",
            "line_nb": 222,
            "steps": [
                {
                    "command": [
                        "by case: e => [] ? [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equiv_trans",
            "line_nb": 225,
            "steps": [
                {
                    "command": [
                        "by case: e => [] ? [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_op_trans",
            "line_nb": 228,
            "steps": [
                {
                    "command": [
                        "by move=> x y z; move/eqP->; move/eqP->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equiv_ltrans",
            "line_nb": 231,
            "steps": [
                {
                    "command": [
                        "by apply: left_trans; [apply: equiv_sym|apply: equiv_trans].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equiv_rtrans",
            "line_nb": 234,
            "steps": [
                {
                    "command": [
                        "by apply: right_trans; [apply: equiv_sym|apply: equiv_trans].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "encModRelP",
            "line_nb": 247,
            "steps": [
                {
                    "command": [
                        "by case: r => [] ? [] /= he _ /he.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "encModRelE",
            "line_nb": 250,
            "steps": [
                {
                    "command": [
                        "by case: r => [] ? [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enc_mod_rel_is_equiv",
            "line_nb": 260,
            "steps": [
                {
                    "command": [
                        "split => [x|x y|y x z]; rewrite !encModRelE //; first by rewrite equiv_sym.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by move=> exy /(equiv_trans exy).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "encModEquivP",
            "line_nb": 265,
            "steps": [
                {
                    "command": [
                        "by rewrite encModRelP ?encModRelE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "encoded_equivE",
            "line_nb": 269,
            "steps": [
                {
                    "command": [
                        "by move=> x y; rewrite /encoded_equiv /= encModRelE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "encoded_equiv_is_equiv",
            "line_nb": 273,
            "steps": [
                {
                    "command": [
                        "split => [x|x y|y x z]; rewrite !e'E //=; first by rewrite equiv_sym.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by move=> exy /(equiv_trans exy).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "encoded_equivP",
            "line_nb": 278,
            "steps": [
                {
                    "command": [
                        "by rewrite /encoded_equiv /= encModEquivP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "canon_id",
            "line_nb": 290,
            "steps": [
                {
                    "command": [
                        "move=> x /=; rewrite /canon (@eq_choose _ _ (eC x)).",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite (@choose_id _ (eC x) _ x) ?chooseP ?equiv_refl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by move=> y; apply: equiv_ltrans; rewrite equiv_sym /= chooseP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ereprK",
            "line_nb": 296,
            "steps": [
                {
                    "command": [
                        "unlock pi; case=> x hx; move/eqP:(hx)=> hx'.",
                        "VernacExtend",
                        "d465be3cdb334b9dc3f37055ebb50c6f3f02f292"
                    ]
                },
                {
                    "command": [
                        "exact: (@val_inj _ _ [subType for erepr]).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pi_CD",
            "line_nb": 303,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => hxy.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "apply: (can_inj ereprK); unlock pi canon => /=.",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "rewrite -(@eq_choose _ (eC x) (eC y)); last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by move=> z; rewrite /eC /=; apply: equiv_ltrans.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply: choose_id; rewrite ?equiv_refl //.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite (equiv_trans (chooseP (equiv_refl _ _))) //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "move: hxy => /(f_equal erepr) /=; unlock pi canon => /= ->.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "by rewrite equiv_sym /= chooseP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pi_DC",
            "line_nb": 313,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP)=> hxy.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "apply/pi_CD; rewrite /eC /=.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite (equiv_ltrans (encDP _)) (equiv_rtrans (encDP _)) /= encDE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -encDE -(equiv_ltrans (encDP _)) -(equiv_rtrans (encDP _)) /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "exact/pi_CD.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equivQTP",
            "line_nb": 320,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite /= (pi_CD _ (erepr x) _) ?ereprK /eC /= ?encDP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqmodP",
            "line_nb": 326,
            "steps": [
                {
                    "command": [
                        "by apply: (iffP (pi_DC _ _)); rewrite !unlock.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqMixin",
            "line_nb": 329,
            "steps": [
                {
                    "command": [
                        "exact: CanEqMixin ereprK.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqmodE",
            "line_nb": 335,
            "steps": [
                {
                    "command": [
                        "exact: sameP eqP (@eqmodP _ _).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_quot_countMixin",
            "line_nb": 360,
            "steps": [
                {
                    "command": [
                        "exact: CanCountMixin EquivQuot.ereprK.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqquotE",
            "line_nb": 377,
            "steps": [
                {
                    "command": [
                        "by rewrite pi_eq_quot.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqquotP",
            "line_nb": 380,
            "steps": [
                {
                    "command": [
                        "by rewrite -eqquotE; apply/eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}