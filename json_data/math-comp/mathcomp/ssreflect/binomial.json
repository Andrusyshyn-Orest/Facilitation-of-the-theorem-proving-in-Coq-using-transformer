{
    "filename": "mathcomp/ssreflect/binomial.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrfun ssrbool eqtype ssrnat seq path div.",
            "VernacRequire",
            "d72af5ce68a29646f4ea401d36c34bb3b20dbfce"
        ],
        [
            "From mathcomp Require Import fintype tuple finfun bigop prime finset.",
            "VernacRequire",
            "2727e32c4095a9cee94385751f2e4c21e5d46758"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Lemma fact_smonotone m n : 0 < m -> m < n -> m`! < n`!.",
            "VernacStartTheoremProof",
            "76e7c025ed6d018fea364fde82d6e90bf7c738b3"
        ],
        [
            "case: m => // m _; elim: n m => // n IHn [|m] lt_m_n.",
            "VernacExtend",
            "1821533cafd21deefc2f797d67a58b45e0a54e79"
        ],
        [
            "by rewrite -[_.+1]muln1 leq_mul ?fact_gt0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite ltn_mul ?IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fact_prod n : n`! = \\prod_(1 <= i < n.+1) i.",
            "VernacStartTheoremProof",
            "18cd42f154f573cfb99a62ec2bd295e389e34ab5"
        ],
        [
            "elim: n => [|n IHn] //; first by rewrite big_nil.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply sym_equal; rewrite factS IHn // !big_add1 big_nat_recr //= mulnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma logn_fact p n : prime p -> logn p n`! = \\sum_(1 <= k < n.+1) n %/ p ^ k.",
            "VernacStartTheoremProof",
            "3a8158dd562ae2db0112e8b8c052c0aa3ad83c18"
        ],
        [
            "move=> p_prime; transitivity (\\sum_(1 <= i < n.+1) logn p i).",
            "VernacExtend",
            "e33c2e851e7488202df78d4a763c4de9f211567e"
        ],
        [
            "rewrite big_add1; elim: n => /= [|n IHn]; first by rewrite logn1 big_geq.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite big_nat_recr // -IHn /= factS mulnC lognM ?fact_gt0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "transitivity (\\sum_(1 <= i < n.+1) \\sum_(1 <= k < n.+1) (p ^ k %| i)).",
            "VernacExtend",
            "a5046c316c5ffb90106ec8b7861dddd58a2348e0"
        ],
        [
            "apply: eq_big_nat => i /andP[i_gt0 le_i_n]; rewrite logn_count_dvd //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite -!big_mkcond (big_nat_widen _ _ n.+1) 1?ltnW //; apply: eq_bigl => k.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by apply: andb_idr => /dvdn_leq/(leq_trans (ltn_expl _ (prime_gt1 _)))->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite exchange_big_nat; apply: eq_bigr => i _; rewrite divn_count_dvd.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Wilson p : p > 1 -> prime p = (p %| ((p.-1)`!).+1).",
            "VernacStartTheoremProof",
            "3cf2e17fb072ea76bf77c03abf8de763ee2f4abd"
        ],
        [
            "have dFact n: 0 < n -> (n.-1)`! = \\prod_(0 <= i < n | i != 0) i.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> n_gt0; rewrite -big_filter fact_prod; symmetry; apply: congr_big => //.",
            "VernacExtend",
            "72d5c4f75a34eec7acc4bfabb56d97a2efca8b70"
        ],
        [
            "rewrite /index_iota subn1 -[n]prednK //=; apply/all_filterP.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite all_predC has_pred1 mem_iota.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> lt1p; have p_gt0 := ltnW lt1p.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "apply/idP/idP=> [pr_p | dv_pF]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/primeP; split=> // d dv_dp; have: d <= p by apply: dvdn_leq.",
            "VernacExtend",
            "62a32baaa44197f2d6cea1ac0f072f232fa95a00"
        ],
        [
            "rewrite orbC leq_eqVlt => /orP[-> // | ltdp].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "have:= dvdn_trans dv_dp dv_pF; rewrite dFact // big_mkord.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "rewrite (bigD1 (Ordinal ltdp)) /=; last by rewrite -lt0n (dvdn_gt0 p_gt0).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite orbC -addn1 dvdn_addr ?dvdn_mulr // dvdn1 => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose Fp1 := Ordinal lt1p; pose Fp0 := Ordinal p_gt0.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have ltp1p: p.-1 < p by [rewrite prednK]; pose Fpn1 := Ordinal ltp1p.",
            "VernacExtend",
            "fa6ff0c3d4595d45015144bd8c25fb5ac62ed42b"
        ],
        [
            "case eqF1n1: (Fp1 == Fpn1); first by rewrite -{1}[p]prednK -1?((1 =P p.-1) _).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have toFpP m: m %% p < p by rewrite ltn_mod.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose toFp := Ordinal (toFpP _); pose mFp (i j : 'I_p) := toFp (i * j).",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have Fp_mod (i : 'I_p) : i %% p = i by apply: modn_small.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have mFpA: associative mFp.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> i j k; apply: val_inj; rewrite /= modnMml modnMmr mulnA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have mFpC: commutative mFp by move=> i j; apply: val_inj; rewrite /= mulnC.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have mFp1: left_id Fp1 mFp by move=> i; apply: val_inj; rewrite /= mul1n.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have mFp1r: right_id Fp1 mFp by move=> i; apply: val_inj; rewrite /= muln1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose mFpLaw := Monoid.Law mFpA mFp1 mFp1r.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose mFpM := Monoid.operator (@Monoid.ComLaw _ _ mFpLaw mFpC).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose vFp (i : 'I_p) := toFp (egcdn i p).1.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have vFpV i: i != Fp0 -> mFp (vFp i) i = Fp1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -val_eqE /= -lt0n => i_gt0; apply: val_inj => /=.",
            "VernacExtend",
            "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
        ],
        [
            "rewrite modnMml; case: egcdnP => //= _ km -> _; rewrite {km}modnMDl.",
            "VernacExtend",
            "1dc1cec635c64f0cc3ec64ea6e4d6c7d5b8f81f6"
        ],
        [
            "suffices: coprime i p by move/eqnP->; rewrite modn_small.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "rewrite coprime_sym prime_coprime //; apply/negP=> /(dvdn_leq i_gt0).",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite leqNgt ltn_ord.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have vFp0 i: i != Fp0 -> vFp i != Fp0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move/vFpV=> inv_i; apply/eqP=> vFp0.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by have:= congr1 val inv_i; rewrite vFp0 /= mod0n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have vFpK: {in predC1 Fp0, involutive vFp}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> i n0i; rewrite /= -[vFp _]mFp1r -(vFpV _ n0i) mFpA.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite vFpV (vFp0, mFp1).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have le_pmFp (i : 'I_p) m: i <= p + m.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: leq_trans (ltnW _) (leq_addr _ _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have eqFp (i j : 'I_p): (i == j) = (p %| p + i - j).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -eqn_mod_dvd ?(modnDl, Fp_mod).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have vFpId i: (vFp i == i :> nat) = xpred2 Fp1 Fpn1 i.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "symmetry; have [->{i} | /eqP ni0] := i =P Fp0.",
            "VernacExtend",
            "dc881ac5e69f22d446d232599b54c999c345ea27"
        ],
        [
            "by rewrite /= -!val_eqE /= -{2}[p]prednK //= modn_small //= -(subnKC lt1p).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite 2!eqFp -Euclid_dvdM //= -[_ - p.-1]subSS prednK //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have lt0i: 0 < i by rewrite lt0n.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -addnS addKn -addnBA // mulnDl -{2}(addn1 i) -subn_sqr.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite addnBA ?leq_sqr // mulnS -addnA -mulnn -mulnDl.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -(subnK (le_pmFp (vFp i) i)) mulnDl addnCA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -[1 ^ 2]/(Fp1 : nat) -addnBA // dvdn_addl.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite Euclid_dvdM // -eqFp eq_sym orbC /dvdn Fp_mod eqn0Ngt lt0i.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -eqn_mod_dvd // Fp_mod modnDl -(vFpV _ ni0) eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices [mod_fact]: toFp (p.-1)`! = Fpn1.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by rewrite /dvdn -addn1 -modnDml mod_fact addn1 prednK // modnn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite dFact //; rewrite ((big_morph toFp) Fp1 mFpM) //; first last.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by apply: val_inj; rewrite /= modn_small.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> i j; apply: val_inj; rewrite /= modnMm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite big_mkord (eq_bigr id) => [|i _]; last by apply: val_inj => /=.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "pose ltv i := vFp i < i; rewrite (bigID ltv) -/mFpM [mFpM _ _]mFpC.",
            "VernacExtend",
            "de7a4b42b1ef81b17722dd81c9c5b9378b46a6e7"
        ],
        [
            "rewrite (bigD1 Fp1) -/mFpM; last by rewrite [ltv _]ltn_neqAle vFpId.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite [mFpM _ _]mFp1 (bigD1 Fpn1) -?mFpA -/mFpM; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite -lt0n -ltnS prednK // lt1p.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite [ltv _]ltn_neqAle vFpId eqxx orbT eq_sym eqF1n1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (reindex_onto vFp vFp) -/mFpM => [|i]; last by do 3!case/andP; auto.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite (eq_bigl (xpredD1 ltv Fp0)) => [|i]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite andbC -!andbA -2!negb_or -vFpId orbC -leq_eqVlt.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite andbA -ltnNge; symmetry; case: (altP eqP) => [->|ni0].",
            "VernacExtend",
            "4cd924e4572aeb158a97e68d9463cedffdcfc8f4"
        ],
        [
            "by case: eqP => // E; rewrite ?E !andbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite vFpK //eqxx vFp0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -{2}[mFp]/mFpM -[mFpM _ _]big_split -/mFpM.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite big1 ?mFp1r //= => i /andP[]; auto.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint ffact_rec n m := if m is m'.+1 then n * ffact_rec n.-1 m' else 1.",
            "VernacFixpoint",
            "cd7551aa9da0f1c27b25b34d313224553f4774dc"
        ],
        [
            "Definition falling_factorial := nosimpl ffact_rec.",
            "VernacDefinition",
            "e5e5e35fd8f63214cd52a6ca4d5c86561c689a6a"
        ],
        [
            "Notation \"n ^_ m\" := (falling_factorial n m) (at level 30, right associativity) : nat_scope.",
            "VernacNotation",
            "43d1b5954ba23ec7b8bed2deea74b9fdd06d0988"
        ],
        [
            "Lemma ffactE : falling_factorial = ffact_rec.",
            "VernacStartTheoremProof",
            "69bd92c0602c28a90f940634c3e0427ecab335eb"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ffactn0 n : n ^_ 0 = 1.",
            "VernacStartTheoremProof",
            "92c1d729169496c705fda33fe83fc67d2b281f41"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ffact0n m : 0 ^_ m = (m == 0).",
            "VernacStartTheoremProof",
            "e29129366f750eaac0de93fb1233b0f6060d368f"
        ],
        [
            "by case: m.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ffactnS n m : n ^_ m.+1 = n * n.-1 ^_ m.",
            "VernacStartTheoremProof",
            "2607be11143994c9995d44b9f4c37042096ebf68"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ffactSS n m : n.+1 ^_ m.+1 = n.+1 * n ^_ m.",
            "VernacStartTheoremProof",
            "a1ab570ae7b2836f2e8ae2183a404a8cb688a6b3"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ffactn1 n : n ^_ 1 = n.",
            "VernacStartTheoremProof",
            "7966914999404f9f0d882e3430a2cc47e5afc537"
        ],
        [
            "exact: muln1.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ffactnSr n m : n ^_ m.+1 = n ^_ m * (n - m).",
            "VernacStartTheoremProof",
            "8bf5c952e47218adc513341cc70ca684e41b3b39"
        ],
        [
            "elim: n m => [|n IHn] [|m] //=; first by rewrite ffactn1 mul1n.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !ffactSS IHn mulnA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ffact_gt0 n m : (0 < n ^_ m) = (m <= n).",
            "VernacStartTheoremProof",
            "a66fa720fdcf5d8137ccf24979c316515f3a8a9d"
        ],
        [
            "by elim: n m => [|n IHn] [|m] //=; rewrite ffactSS muln_gt0 IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ffact_small n m : n < m -> n ^_ m = 0.",
            "VernacStartTheoremProof",
            "4df378652755aa50c325a6a984b7f2ba17570b29"
        ],
        [
            "by rewrite ltnNge -ffact_gt0; case: posnP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ffactnn n : n ^_ n = n`!.",
            "VernacStartTheoremProof",
            "751e26afcfb8842e9a3677ff22fb7151ccc53b60"
        ],
        [
            "by elim: n => [|n IHn] //; rewrite ffactnS IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ffact_fact n m : m <= n -> n ^_ m * (n - m)`! = n`!.",
            "VernacStartTheoremProof",
            "a9c1b308441ce9509f9d058aace9b4879610825f"
        ],
        [
            "by elim: n m => [|n IHn] [|m] //= le_m_n; rewrite ?mul1n // -mulnA IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ffact_factd n m : m <= n -> n ^_ m = n`! %/ (n - m)`!.",
            "VernacStartTheoremProof",
            "3b475ef3d5ddfe7d84fd103b4fbbff44b2da03b0"
        ],
        [
            "by move/ffact_fact <-; rewrite mulnK ?fact_gt0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint binomial_rec n m := match n, m with | n'.+1, m'.+1 => binomial_rec n' m + binomial_rec n' m' | _, 0 => 1 | 0, _.+1 => 0 end.",
            "VernacFixpoint",
            "3ed7a3995f072a72b15b1ae8c222efd533ba1720"
        ],
        [
            "Definition binomial := nosimpl binomial_rec.",
            "VernacDefinition",
            "9e2fc8dbdd9e421e19a93713af1ebd671d58e456"
        ],
        [
            "Notation \"''C' ( n , m )\" := (binomial n m) (at level 8, format \"''C' ( n , m )\") : nat_scope.",
            "VernacNotation",
            "1f6a9271aa526d53dec74a9c35111f70839bd53e"
        ],
        [
            "Lemma binE : binomial = binomial_rec.",
            "VernacStartTheoremProof",
            "bc3e012780aa8d72941bded3a1a961bd035cf1c8"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bin0 n : 'C(n, 0) = 1.",
            "VernacStartTheoremProof",
            "67c2f1f4ed4e916bb444d0c339de545c4cb20712"
        ],
        [
            "by case: n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bin0n m : 'C(0, m) = (m == 0).",
            "VernacStartTheoremProof",
            "0e7eda41b33a11e2d565a891b4e9cac910c3519b"
        ],
        [
            "by case: m.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma binS n m : 'C(n.+1, m.+1) = 'C(n, m.+1) + 'C(n, m).",
            "VernacStartTheoremProof",
            "5d3693f4fa78463704e36b1fea1477492ede1b4f"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bin1 n : 'C(n, 1) = n.",
            "VernacStartTheoremProof",
            "ba7ebdbfd658ee14303e6a00a81fc9467bd55493"
        ],
        [
            "by elim: n => //= n IHn; rewrite binS bin0 IHn addn1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bin_gt0 n m : (0 < 'C(n, m)) = (m <= n).",
            "VernacStartTheoremProof",
            "472acd2f467856aa6d738583b2bae6a9f2dc6e89"
        ],
        [
            "by elim: n m => [|n IHn] [|m] //; rewrite addn_gt0 !IHn orbC ltn_neqAle andKb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_bin2l n1 n2 m : n1 <= n2 -> 'C(n1, m) <= 'C(n2, m).",
            "VernacStartTheoremProof",
            "00520bb77ac5607b312fb636744ddae2e387ab80"
        ],
        [
            "by elim: n1 n2 m => [|n1 IHn] [|n2] [|n] le_n12 //; rewrite leq_add ?IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bin_small n m : n < m -> 'C(n, m) = 0.",
            "VernacStartTheoremProof",
            "ed4a84aa95e9767b91dc13e2245ccef7edb6989c"
        ],
        [
            "by rewrite ltnNge -bin_gt0; case: posnP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma binn n : 'C(n, n) = 1.",
            "VernacStartTheoremProof",
            "c3f79b2a11bced72748fc94a01695111ba4e688c"
        ],
        [
            "by elim: n => [|n IHn] //; rewrite binS bin_small.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mul_bin_diag n m : n * 'C(n.-1, m) = m.+1 * 'C(n, m.+1).",
            "VernacStartTheoremProof",
            "c70f1715fdf2f52d3477b33f5c514f329dbe91b8"
        ],
        [
            "rewrite [RHS]mulnC; elim: n m => [|[|n] IHn] [|m] //=; first by rewrite bin1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite mulSn [in _ * _]binS mulnDr addnCA !IHn -mulnS -mulnDl -binS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bin_fact n m : m <= n -> 'C(n, m) * (m`! * (n - m)`!) = n`!.",
            "VernacStartTheoremProof",
            "585805389617164ed2dda98551943f9f1e6c2c1a"
        ],
        [
            "elim: n m => [|n IHn] [|m] // le_m_n; first by rewrite bin0 !mul1n.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !factS -!mulnA mulnCA mulnA -mul_bin_diag -mulnA IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bin_factd n m : 0 < n -> 'C(n, m) = n`! %/ (m`! * (n - m)`!).",
            "VernacStartTheoremProof",
            "92010ff2876db92d287e73f0b87ab21f6ed76235"
        ],
        [
            "have [/bin_fact<-|*] := leqP m n; first by rewrite mulnK ?muln_gt0 ?fact_gt0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite divnMA bin_small ?divn_small ?fact_gt0 ?fact_smonotone.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bin_ffact n m : 'C(n, m) * m`! = n ^_ m.",
            "VernacStartTheoremProof",
            "d0d19efad3fce8b03c409583712e3dfcf6875710"
        ],
        [
            "have [lt_n_m | le_m_n] := ltnP n m; first by rewrite bin_small ?ffact_small.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite ffact_factd // -(bin_fact le_m_n) mulnA mulnK ?fact_gt0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bin_ffactd n m : 'C(n, m) = n ^_ m %/ m`!.",
            "VernacStartTheoremProof",
            "1abbb504edd0df8307b42cb749957b33646670f4"
        ],
        [
            "by rewrite -bin_ffact mulnK ?fact_gt0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bin_sub n m : m <= n -> 'C(n, n - m) = 'C(n, m).",
            "VernacStartTheoremProof",
            "5e5e3f4d10d7115b1592d6887241c8431a8208bc"
        ],
        [
            "by move=> le_m_n; rewrite !bin_ffactd !ffact_factd ?leq_subr // divnAC subKn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mul_bin_down n m : n * 'C(n.-1, m) = (n - m) * 'C(n, m).",
            "VernacStartTheoremProof",
            "bf9d672bcc386199c45f4ba724209a22609b58c6"
        ],
        [
            "case: n => //= n; have [lt_n_m | le_m_n] := ltnP n m.",
            "VernacExtend",
            "c6460972b7febd45d9a49b3c1ce4f3fe36b53169"
        ],
        [
            "by rewrite (eqnP lt_n_m) mulnC bin_small.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -!['C(_, m)]bin_sub ?leqW ?subSn ?mul_bin_diag.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mul_bin_left n m : m.+1 * 'C(n, m.+1) = (n - m) * 'C(n, m).",
            "VernacStartTheoremProof",
            "3678109f02970fda981e617323eb43425c8ee4fb"
        ],
        [
            "by rewrite -mul_bin_diag mul_bin_down.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma binSn n : 'C(n.+1, n) = n.+1.",
            "VernacStartTheoremProof",
            "fb2611f9d58e0c73b8c1c6b66fce9990f3f4efbf"
        ],
        [
            "by rewrite -bin_sub ?leqnSn // subSnn bin1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bin2 n : 'C(n, 2) = (n * n.-1)./2.",
            "VernacStartTheoremProof",
            "16af0be6aba34d395a1e3722cb7e479606d144e5"
        ],
        [
            "by rewrite -[n.-1]bin1 mul_bin_diag -divn2 mulKn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bin2odd n : odd n -> 'C(n, 2) = n * n.-1./2.",
            "VernacStartTheoremProof",
            "06862e6a22687b226010fe4304505531b68d2dc1"
        ],
        [
            "by case: n => // n oddn; rewrite bin2 -!divn2 muln_divA ?dvdn2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prime_dvd_bin k p : prime p -> 0 < k < p -> p %| 'C(p, k).",
            "VernacStartTheoremProof",
            "42af2fb8b237e2cdc92595986053ebd8866084a8"
        ],
        [
            "move=> p_pr /andP[k_gt0 lt_k_p].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "suffices /Gauss_dvdr<-: coprime p (p - k) by rewrite -mul_bin_down dvdn_mulr.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by rewrite prime_coprime // dvdn_subr 1?ltnW // gtnNdvd.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma triangular_sum n : \\sum_(0 <= i < n) i = 'C(n, 2).",
            "VernacStartTheoremProof",
            "5f2da072f9ada6fa5c35b34b405255919aae4930"
        ],
        [
            "elim: n => [|n IHn]; first by rewrite big_geq.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite big_nat_recr // IHn binS bin1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma textbook_triangular_sum n : \\sum_(0 <= i < n) i = 'C(n, 2).",
            "VernacStartTheoremProof",
            "e8d9f290145d63ae5d551dce280d6db5be4898a5"
        ],
        [
            "rewrite bin2; apply: canRL half_double _.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite -addnn {1}big_nat_rev -big_split big_mkord /= ?add0n.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (eq_bigr (fun _ => n.-1)); first by rewrite sum_nat_const card_ord.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case: n => [|n] [i le_i_n] //=; rewrite subSS subnK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Pascal a b n : (a + b) ^ n = \\sum_(i < n.+1) 'C(n, i) * (a ^ (n - i) * b ^ i).",
            "VernacStartTheoremProof",
            "9dd0308015a2aaebc7dd1091eeef4a5233dfd0d4"
        ],
        [
            "elim: n => [|n IHn]; rewrite big_ord_recl muln1 ?big_ord0 //.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "rewrite expnS {}IHn /= mulnDl !big_distrr /= big_ord_recl muln1 subn0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite !big_ord_recr /= !binn !subnn bin0 !subn0 !mul1n -!expnS -addnA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "congr (_ + _); rewrite addnA -big_split /=; congr (_ + _).",
            "VernacExtend",
            "516f18a2bd545145111a2197b98c801fe2c297f5"
        ],
        [
            "apply: eq_bigr => i _; rewrite mulnCA (mulnA a) -expnS subnSK //=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite (mulnC b) -2!mulnA -expnSr -mulnDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition expnDn := Pascal.",
            "VernacDefinition",
            "6b359f27c97fcb62f07548411ee3b6b2227bdcec"
        ],
        [
            "Lemma Vandermonde k l i : \\sum_(j < i.+1) 'C(k, j) * 'C(l, i - j) = 'C(k + l , i).",
            "VernacStartTheoremProof",
            "4549adefb2edfa4d7be04df76f2e4421678e886f"
        ],
        [
            "pose f k i := \\sum_(j < i.+1) 'C(k, j) * 'C(l, i - j).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "suffices{k i} fxx k i: f k.+1 i.+1 = f k i.+1 + f k i.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "elim: k i => [i | k IHk [|i]]; last by rewrite -/(f _ _) fxx /f !IHk -binS.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite big_ord_recl big1_eq addn0 mul1n subn0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite big_ord_recl big_ord0 addn0 !bin0 muln1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite {}/f big_ord_recl (big_ord_recl (i.+1)) !bin0 !mul1n.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -addnA -big_split /=; congr (_ + _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by apply: eq_bigr => j _; rewrite -mulnDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subn_exp m n k : m ^ k - n ^ k = (m - n) * (\\sum_(i < k) m ^ (k.-1 -i) * n ^ i).",
            "VernacStartTheoremProof",
            "01d28ef184ae3040210e6e5c183f05978e9b3a8e"
        ],
        [
            "case: k => [|k]; first by rewrite big_ord0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite mulnBl !big_distrr big_ord_recl big_ord_recr /= subn0 muln1.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite subnn mul1n -!expnS subnDA; congr (_ - _); apply: canRL (addnK _) _.",
            "VernacExtend",
            "75f5ff0fb7cf09d432c728351fd923a93d5d7135"
        ],
        [
            "congr (_ + _); apply: eq_bigr => i _.",
            "VernacExtend",
            "385739dd8a4f73703d3828c61e1780a276bfaa31"
        ],
        [
            "by rewrite (mulnCA n) -expnS mulnA -expnS subnSK /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma predn_exp m k : (m ^ k).-1 = m.-1 * (\\sum_(i < k) m ^ i).",
            "VernacStartTheoremProof",
            "3cb54abb8c19eebccdf01d63e43c95a474085553"
        ],
        [
            "rewrite -!subn1 -{1}(exp1n k) subn_exp; congr (_ * _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "symmetry; rewrite (reindex_inj rev_ord_inj); apply: eq_bigr => i _ /=.",
            "VernacExtend",
            "b531cdfdd16edb48e06651aa0838bf384aa38229"
        ],
        [
            "by rewrite -subn1 -subnDA exp1n muln1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dvdn_pred_predX n e : (n.-1 %| (n ^ e).-1)%N.",
            "VernacStartTheoremProof",
            "90209fbfb7cfc8dea0842a7182a7a0201894c537"
        ],
        [
            "by rewrite predn_exp dvdn_mulr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma modn_summ I r (P : pred I) F d : \\sum_(i <- r | P i) F i %% d = \\sum_(i <- r | P i) F i %[mod d].",
            "VernacStartTheoremProof",
            "f6eea71c35f2c1d0ee845b15167bd5fb2649ece0"
        ],
        [
            "by apply/eqP; elim/big_rec2: _ => // i m n _; rewrite modnDml eqn_modDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Combinations.",
            "VernacBeginSection",
            "04c8d69faa5d2976f0d9c5300ca5993b1d742d2a"
        ],
        [
            "Implicit Types T D : finType.",
            "VernacReserve",
            "dfeaab0de3e0d87a509b0cf08fb7ce2e1810fabc"
        ],
        [
            "Lemma card_uniq_tuples T n (A : pred T) : #|[set t : n.-tuple T | all A t & uniq t]| = #|A| ^_ n.",
            "VernacStartTheoremProof",
            "05cf55c87c8d40b8b0b83a1069d88d9757ae2cfc"
        ],
        [
            "elim: n A => [|n IHn] A.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite (@eq_card1 _ [tuple]) // => t; rewrite [t]tuple0 inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -sum1dep_card (partition_big (@thead _ _) A) /= => [|t]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case/tupleP: t => x t; do 2!case/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "transitivity (#|A| * #|A|.-1 ^_ n)%N; last by case: #|A|.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite -sum_nat_const; apply: eq_bigr => x Ax.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite (cardD1 x) [x \\in A]Ax /= -(IHn [predD1 A & x]) -sum1dep_card.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (reindex (fun t : n.-tuple T => [tuple of x :: t])) /=; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "pose ttail (t : n.+1.-tuple T) := [tuple of behead t].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "exists ttail => [t _ | t /andP[_ /eqP <-]]; first exact: val_inj.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -tuple_eta.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: eq_bigl=> t; rewrite Ax theadE eqxx andbT /= andbA; congr (_ && _).",
            "VernacExtend",
            "91580bd9cdf2cad626638a70b66bf9b00afa41b1"
        ],
        [
            "by rewrite all_predI all_predC has_pred1 andbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_inj_ffuns_on D T (R : pred T) : #|[set f : {ffun D -> T} in ffun_on R | injectiveb f]| = #|R| ^_ #|D|.",
            "VernacStartTheoremProof",
            "b5af7839d5ea2364ade9d39e338e3b00d28da066"
        ],
        [
            "rewrite -card_uniq_tuples.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have bijFF: {on (_ : pred _), bijective (@Finfun D T)}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists val => // x _; apply: val_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -(on_card_preimset (bijFF _)); apply: eq_card => t.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite !inE -(codom_ffun (Finfun t)); congr (_ && _); apply: negb_inj.",
            "VernacExtend",
            "75f5ff0fb7cf09d432c728351fd923a93d5d7135"
        ],
        [
            "by rewrite -has_predC has_map enumT has_filter -size_eq0 -cardE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_inj_ffuns D T : #|[set f : {ffun D -> T} | injectiveb f]| = #|T| ^_ #|D|.",
            "VernacStartTheoremProof",
            "ad352398ae48e79dcc8d507817871ec3c3857d41"
        ],
        [
            "rewrite -card_inj_ffuns_on; apply: eq_card => f.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite 2!inE; case: ffun_onP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cards_draws T (B : {set T}) k : #|[set A : {set T} | A \\subset B & #|A| == k]| = 'C(#|B|, k).",
            "VernacStartTheoremProof",
            "bca54a712b11afb8f3eea7147e7b596801dd9811"
        ],
        [
            "have [ltTk | lekT] := ltnP #|B| k.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite bin_small // eq_card0 // => A.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite inE eqn_leq [k <= _]leqNgt.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have [AsubB /=|//] := boolP (A \\subset B).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite (leq_ltn_trans (subset_leq_card AsubB)) ?andbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/eqP; rewrite -(eqn_pmul2r (fact_gt0 k)) bin_ffact // eq_sym.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite -sum_nat_dep_const -{1 3}(card_ord k).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -card_inj_ffuns_on -sum1dep_card.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "pose imIk (f : {ffun 'I_k -> T}) := f @: 'I_k.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "rewrite (partition_big imIk (fun A => (A \\subset B) && (#|A| == k))) /= => [|f]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move=> /andP [/ffun_onP f_ffun /injectiveP inj_f].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite card_imset ?card_ord // eqxx andbT.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/subsetP => x /imsetP [i _ ->]; rewrite f_ffun.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/eqP; apply: eq_bigr => A /andP [AsubB /eqP cardAk].",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "have [f0 inj_f0 im_f0]: exists2 f, injective f & f @: 'I_k = A.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -cardAk; exists enum_val; first exact: enum_val_inj.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/setP=> a; apply/imsetP/idP=> [[i _ ->] | Aa]; first exact: enum_valP.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by exists (enum_rank_in Aa a); rewrite ?enum_rankK_in.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (reindex (fun p : {ffun _} => [ffun i => f0 (p i)])) /=; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "pose ff0' f i := odflt i [pick j | f i == f0 j].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "exists (fun f => [ffun i => ff0' f i]) => [p _ | f].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply/ffunP=> i; rewrite ffunE /ff0'; case: pickP => [j | /(_ (p i))].",
            "VernacExtend",
            "5caed936835e366e9e533d8f19382dcfedbf86d4"
        ],
        [
            "by rewrite ffunE (inj_eq inj_f0) => /eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite ffunE eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -im_f0 => /andP[/andP[/ffun_onP f_ffun /injectiveP injf] /eqP im_f].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply/ffunP=> i; rewrite !ffunE /ff0'; case: pickP => [y /eqP //|].",
            "VernacExtend",
            "5caed936835e366e9e533d8f19382dcfedbf86d4"
        ],
        [
            "have /imsetP[j _ eq_f0j_fi]: f i \\in f0 @: 'I_k by rewrite -im_f mem_imset.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move/(_ j)=> /eqP[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -ffactnn -card_inj_ffuns -sum1dep_card; apply: eq_bigl => p.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite -andbA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/and3P/injectiveP=> [[_ /injectiveP inj_f0p _] i j eq_pij | inj_p].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by apply: inj_f0p; rewrite !ffunE eq_pij.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "set f := finfun _.",
            "VernacExtend",
            "69a61e99b234580f7b41fa5b9655c87ba9a76f70"
        ],
        [
            "have injf: injective f by move=> i j; rewrite !ffunE => /inj_f0; apply: inj_p.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have imIkf : imIk f == A.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite eqEcard card_imset // cardAk card_ord leqnn andbT -im_f0.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/subsetP=> x /imsetP[i _ ->]; rewrite ffunE mem_imset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split; [|exact/injectiveP|exact: imIkf].",
            "VernacExtend",
            "88e82f919b19a8858869587bcebaea7178feea86"
        ],
        [
            "apply/ffun_onP => x; apply: (subsetP AsubB).",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by rewrite -(eqP imIkf) mem_imset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_draws T k : #|[set A : {set T} | #|A| == k]| = 'C(#|T|, k).",
            "VernacStartTheoremProof",
            "3013c53bad24d2377e4c7e277cce15f4f7f8453e"
        ],
        [
            "by rewrite -cardsT -cards_draws; apply: eq_card => A; rewrite !inE subsetT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_ltn_sorted_tuples m n : #|[set t : m.-tuple 'I_n | sorted ltn (map val t)]| = 'C(n, m).",
            "VernacStartTheoremProof",
            "04e3ea776cd8d602cc5a65a1e9d8c40286be0abf"
        ],
        [
            "have [-> | n_gt0] := posnP n; last pose i0 := Ordinal n_gt0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case: m => [|m]; last by apply: eq_card0; case/tupleP=> [[]].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: (@eq_card1 _ [tuple]) => t; rewrite [t]tuple0 inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -{12}[n]card_ord -card_draws.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "pose f_t (t : m.-tuple 'I_n) := [set i in t].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose f_A (A : {set 'I_n}) := [tuple of mkseq (nth i0 (enum A)) m].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have val_fA (A : {set 'I_n}) : #|A| = m -> val (f_A A) = enum A.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> Am; rewrite -[enum _](mkseq_nth i0) -cardE Am.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have inc_A (A : {set 'I_n}) : sorted ltn (map val (enum A)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -[enum _](eq_filter (mem_enum _)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -(eq_filter (mem_map val_inj _)) -filter_map.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (sorted_filter ltn_trans) // unlock val_ord_enum iota_ltn_sorted.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -!sum1dep_card (reindex_onto f_t f_A) /= => [|A]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move/eqP=> cardAm; apply/setP=> x; rewrite inE -(mem_enum (mem A)) -val_fA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: eq_bigl => t; apply/idP/idP=> [inc_t|]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case/andP; move/eqP=> t_m; move/eqP=> <-; rewrite val_fA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have ft_m: #|f_t t| = m.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite cardsE (card_uniqP _) ?size_tuple // -(map_inj_uniq val_inj).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "exact: (sorted_uniq ltn_trans ltnn).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "rewrite ft_m eqxx -val_eqE val_fA // -(inj_eq (inj_map val_inj)) /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/eqP; apply: (eq_sorted_irr ltn_trans ltnn) => // y.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by apply/mapP/mapP=> [] [x t_x ->]; exists x; rewrite // mem_enum inE in t_x *.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_sorted_tuples m n : #|[set t : m.-tuple 'I_n.+1 | sorted leq (map val t)]| = 'C(m + n, m).",
            "VernacStartTheoremProof",
            "5eece7fd95f6372a29d211826e1bb66722e06951"
        ],
        [
            "set In1 := 'I_n.+1; pose x0 : In1 := ord0.",
            "VernacExtend",
            "dda58a04ca4da9adf6d016079f462c4d6ff69ca8"
        ],
        [
            "have add_mnP (i : 'I_m) (x : In1) : i + x < m + n.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -ltnS -addSn -!addnS leq_add.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose add_mn t i := Ordinal (add_mnP i (tnth t i)).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose add_mn_nat (t : m.-tuple In1) i := i + nth x0 t i.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have add_mnC t: val \\o add_mn t =1 add_mn_nat t \\o val.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> i; rewrite /= (tnth_nth x0).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose f_add t := [tuple of map (add_mn t) (ord_tuple m)].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "rewrite -card_ltn_sorted_tuples -!sum1dep_card (reindex f_add) /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: eq_bigl => t; rewrite -map_comp (eq_map (add_mnC t)) map_comp.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite enumT unlock val_ord_enum -{1}(drop0 t).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have [m0 | m_gt0] := posnP m.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite {2}m0 /= drop_oversize // size_tuple m0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have def_m := subnK m_gt0; rewrite -{2}def_m addn1 /= {1}/add_mn_nat.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "move: 0 (m - 1) def_m => i k; rewrite -{1}(size_tuple t) => def_m.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "rewrite (drop_nth x0) /=; last by rewrite -def_m leq_addl.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "elim: k i (nth x0 t i) def_m => [|k IHk] i x /=.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite add0n => ->; rewrite drop_size.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite addSnnS => def_m; rewrite -addSn leq_add2l -IHk //.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "by rewrite (drop_nth x0) // -def_m leq_addl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose sub_mn (t : m.-tuple 'I_(m + n)) i : In1 := inord (tnth t i - i).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "exists (fun t => [tuple of map (sub_mn t) (ord_tuple m)]) => [t _ | t].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply: eq_from_tnth => i; apply: val_inj.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by rewrite /sub_mn !(tnth_ord_tuple, tnth_map) addKn inord_val.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite inE /= => inc_t; apply: eq_from_tnth => i; apply: val_inj.",
            "VernacExtend",
            "c03c49ee818673107bc66d70827b13050eb69520"
        ],
        [
            "rewrite tnth_map tnth_ord_tuple /= tnth_map tnth_ord_tuple.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "suffices [le_i_ti le_ti_ni]: i <= tnth t i /\\ tnth t i <= i + n.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by rewrite /sub_mn inordK ?subnKC // ltnS leq_subLR.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose y0 := tnth t i; rewrite (tnth_nth y0) -(nth_map _ (val i)) ?size_tuple //.",
            "VernacExtend",
            "de7a4b42b1ef81b17722dd81c9c5b9378b46a6e7"
        ],
        [
            "case def_e: (map _ _) => [|x e] /=; first by rewrite nth_nil ?leq_addr.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite def_e in inc_t; split.",
            "VernacExtend",
            "f4b7ef80d95d0131def61ae7f69c6275a20261d3"
        ],
        [
            "case: {-2}i; rewrite /= -{1}(size_tuple t) -(size_map val) def_e.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "elim=> //= j IHj lt_j_t; apply: leq_trans (pathP (val i) inc_t _ lt_j_t).",
            "VernacExtend",
            "3b8f03a720bb925b016fe471cb11696669670c37"
        ],
        [
            "by rewrite ltnS IHj 1?ltnW.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move: (_ - _) (subnK (valP i)) => k /=.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "elim: k {-2}(val i) => /= [|k IHk] j def_m; rewrite -ltnS -addSn.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by rewrite [j.+1]def_m -def_e (nth_map y0) ?ltn_ord // size_tuple -def_m.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (leq_trans _ (IHk _ _)) -1?addSnnS //; apply: (pathP _ inc_t).",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite -ltnS (leq_trans (leq_addl k _)) // -addSnnS def_m.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -(size_tuple t) -(size_map val) def_e.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_partial_ord_partitions m n : #|[set t : m.-tuple 'I_n.+1 | \\sum_(i <- t) i <= n]| = 'C(m + n, m).",
            "VernacStartTheoremProof",
            "a441cb1cd6cdb3b8e8970fceeb9162d128accf8d"
        ],
        [
            "symmetry; set In1 := 'I_n.+1; pose x0 : In1 := ord0.",
            "VernacExtend",
            "6081694b000e5fd901aaae3f1d13a6abae30888a"
        ],
        [
            "pose add_mn (i j : In1) : In1 := inord (i + j).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose f_add (t : m.-tuple In1) := [tuple of scanl add_mn x0 t].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "rewrite -card_sorted_tuples -!sum1dep_card (reindex f_add) /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: eq_bigl => t; rewrite -[\\sum_(i <- t) i]add0n.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "transitivity (path leq x0 (map val (f_add t))) => /=; first by case: map.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite -{1 2}[0]/(val x0); elim: {t}(val t) (x0) => /= [|x t IHt] s.",
            "VernacExtend",
            "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
        ],
        [
            "by rewrite big_nil addn0 -ltnS ltn_ord.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite big_cons addnA IHt /= val_insubd ltnS.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have [_ | ltn_n_sx] := leqP (s + x) n; first by rewrite leq_addr.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite -(leq_add2r x) leqNgt (leq_trans (valP x)) //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite leqNgt (leq_trans ltn_n_sx) ?leq_addr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose sub_mn (i j : In1) := Ordinal (leq_ltn_trans (leq_subr i j) (valP j)).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "exists (fun t : m.-tuple In1 => [tuple of pairmap sub_mn x0 t]) => /= t inc_t.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply: val_inj => /=; have{inc_t}: path leq x0 (map val (f_add t)).",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "by move: inc_t; rewrite inE /=; case: map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite [map _ _]/=; elim: {t}(val t) (x0) => //= x t IHt s.",
            "VernacExtend",
            "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
        ],
        [
            "case/andP=> le_s_sx /IHt->; congr (_ :: _); apply: val_inj => /=.",
            "VernacExtend",
            "58a16ee3b401cbfae7edb14a54eef06bf4ce0f5b"
        ],
        [
            "move: le_s_sx; rewrite val_insubd.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "case le_sx_n: (_ < n.+1); first by rewrite addKn.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case: (val s) le_sx_n; rewrite ?ltn_ord.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: val_inj => /=; have{inc_t}: path leq x0 (map val t).",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "by move: inc_t; rewrite inE /=; case: map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: {t}(val t) (x0) => //= x t IHt s /andP[le_s_sx inc_t].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "suffices ->: add_mn s (sub_mn s x) = x by rewrite IHt.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by apply: val_inj; rewrite /add_mn /= subnKC ?inord_val.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_ord_partitions m n : #|[set t : m.+1.-tuple 'I_n.+1 | \\sum_(i <- t) i == n]| = 'C(m + n, m).",
            "VernacStartTheoremProof",
            "dfe200e38dfabfb57fdcd603283811e9be832129"
        ],
        [
            "symmetry; set In1 := 'I_n.+1; pose x0 : In1 := ord0.",
            "VernacExtend",
            "6081694b000e5fd901aaae3f1d13a6abae30888a"
        ],
        [
            "pose f_add (t : m.-tuple In1) := [tuple of sub_ord (\\sum_(x <- t) x) :: t].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "rewrite -card_partial_ord_partitions -!sum1dep_card (reindex f_add) /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: eq_bigl => t; rewrite big_cons /= addnC (sameP maxn_idPr eqP) maxnE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (fun t : m.+1.-tuple In1 => [tuple of behead t]) => [t _|].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "exact: val_inj.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "case/tupleP=> x t; rewrite inE /= big_cons => /eqP def_n.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "by apply: val_inj; congr (_ :: _); apply: val_inj; rewrite /= -{1}def_n addnK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Combinations.",
            "VernacEndSegment",
            "0abf61b6c4cf63ba71239d47d87dfac52434b9cd"
        ]
    ],
    "proofs": [
        {
            "name": "fact_smonotone",
            "line_nb": 6,
            "steps": [
                {
                    "command": [
                        "case: m => // m _; elim: n m => // n IHn [|m] lt_m_n.",
                        "VernacExtend",
                        "1821533cafd21deefc2f797d67a58b45e0a54e79"
                    ]
                },
                {
                    "command": [
                        "by rewrite -[_.+1]muln1 leq_mul ?fact_gt0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite ltn_mul ?IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fact_prod",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "elim: n => [|n IHn] //; first by rewrite big_nil.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply sym_equal; rewrite factS IHn // !big_add1 big_nat_recr //= mulnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "logn_fact",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "move=> p_prime; transitivity (\\sum_(1 <= i < n.+1) logn p i).",
                        "VernacExtend",
                        "e33c2e851e7488202df78d4a763c4de9f211567e"
                    ]
                },
                {
                    "command": [
                        "rewrite big_add1; elim: n => /= [|n IHn]; first by rewrite logn1 big_geq.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite big_nat_recr // -IHn /= factS mulnC lognM ?fact_gt0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "transitivity (\\sum_(1 <= i < n.+1) \\sum_(1 <= k < n.+1) (p ^ k %| i)).",
                        "VernacExtend",
                        "a5046c316c5ffb90106ec8b7861dddd58a2348e0"
                    ]
                },
                {
                    "command": [
                        "apply: eq_big_nat => i /andP[i_gt0 le_i_n]; rewrite logn_count_dvd //.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "rewrite -!big_mkcond (big_nat_widen _ _ n.+1) 1?ltnW //; apply: eq_bigl => k.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by apply: andb_idr => /dvdn_leq/(leq_trans (ltn_expl _ (prime_gt1 _)))->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite exchange_big_nat; apply: eq_bigr => i _; rewrite divn_count_dvd.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffactE",
            "line_nb": 103,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffactn0",
            "line_nb": 106,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffact0n",
            "line_nb": 109,
            "steps": [
                {
                    "command": [
                        "by case: m.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffactnS",
            "line_nb": 112,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffactSS",
            "line_nb": 115,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffactn1",
            "line_nb": 118,
            "steps": [
                {
                    "command": [
                        "exact: muln1.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffactnSr",
            "line_nb": 121,
            "steps": [
                {
                    "command": [
                        "elim: n m => [|n IHn] [|m] //=; first by rewrite ffactn1 mul1n.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !ffactSS IHn mulnA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffact_gt0",
            "line_nb": 125,
            "steps": [
                {
                    "command": [
                        "by elim: n m => [|n IHn] [|m] //=; rewrite ffactSS muln_gt0 IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffact_small",
            "line_nb": 128,
            "steps": [
                {
                    "command": [
                        "by rewrite ltnNge -ffact_gt0; case: posnP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffactnn",
            "line_nb": 131,
            "steps": [
                {
                    "command": [
                        "by elim: n => [|n IHn] //; rewrite ffactnS IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffact_fact",
            "line_nb": 134,
            "steps": [
                {
                    "command": [
                        "by elim: n m => [|n IHn] [|m] //= le_m_n; rewrite ?mul1n // -mulnA IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffact_factd",
            "line_nb": 137,
            "steps": [
                {
                    "command": [
                        "by move/ffact_fact <-; rewrite mulnK ?fact_gt0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "binE",
            "line_nb": 143,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bin0",
            "line_nb": 146,
            "steps": [
                {
                    "command": [
                        "by case: n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bin0n",
            "line_nb": 149,
            "steps": [
                {
                    "command": [
                        "by case: m.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "binS",
            "line_nb": 152,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bin1",
            "line_nb": 155,
            "steps": [
                {
                    "command": [
                        "by elim: n => //= n IHn; rewrite binS bin0 IHn addn1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bin_gt0",
            "line_nb": 158,
            "steps": [
                {
                    "command": [
                        "by elim: n m => [|n IHn] [|m] //; rewrite addn_gt0 !IHn orbC ltn_neqAle andKb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_bin2l",
            "line_nb": 161,
            "steps": [
                {
                    "command": [
                        "by elim: n1 n2 m => [|n1 IHn] [|n2] [|n] le_n12 //; rewrite leq_add ?IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bin_small",
            "line_nb": 164,
            "steps": [
                {
                    "command": [
                        "by rewrite ltnNge -bin_gt0; case: posnP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "binn",
            "line_nb": 167,
            "steps": [
                {
                    "command": [
                        "by elim: n => [|n IHn] //; rewrite binS bin_small.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mul_bin_diag",
            "line_nb": 170,
            "steps": [
                {
                    "command": [
                        "rewrite [RHS]mulnC; elim: n m => [|[|n] IHn] [|m] //=; first by rewrite bin1.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite mulSn [in _ * _]binS mulnDr addnCA !IHn -mulnS -mulnDl -binS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bin_fact",
            "line_nb": 174,
            "steps": [
                {
                    "command": [
                        "elim: n m => [|n IHn] [|m] // le_m_n; first by rewrite bin0 !mul1n.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !factS -!mulnA mulnCA mulnA -mul_bin_diag -mulnA IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bin_factd",
            "line_nb": 178,
            "steps": [
                {
                    "command": [
                        "have [/bin_fact<-|*] := leqP m n; first by rewrite mulnK ?muln_gt0 ?fact_gt0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite divnMA bin_small ?divn_small ?fact_gt0 ?fact_smonotone.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bin_ffact",
            "line_nb": 182,
            "steps": [
                {
                    "command": [
                        "have [lt_n_m | le_m_n] := ltnP n m; first by rewrite bin_small ?ffact_small.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite ffact_factd // -(bin_fact le_m_n) mulnA mulnK ?fact_gt0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bin_ffactd",
            "line_nb": 186,
            "steps": [
                {
                    "command": [
                        "by rewrite -bin_ffact mulnK ?fact_gt0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bin_sub",
            "line_nb": 189,
            "steps": [
                {
                    "command": [
                        "by move=> le_m_n; rewrite !bin_ffactd !ffact_factd ?leq_subr // divnAC subKn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mul_bin_down",
            "line_nb": 192,
            "steps": [
                {
                    "command": [
                        "case: n => //= n; have [lt_n_m | le_m_n] := ltnP n m.",
                        "VernacExtend",
                        "c6460972b7febd45d9a49b3c1ce4f3fe36b53169"
                    ]
                },
                {
                    "command": [
                        "by rewrite (eqnP lt_n_m) mulnC bin_small.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite -!['C(_, m)]bin_sub ?leqW ?subSn ?mul_bin_diag.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mul_bin_left",
            "line_nb": 197,
            "steps": [
                {
                    "command": [
                        "by rewrite -mul_bin_diag mul_bin_down.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "binSn",
            "line_nb": 200,
            "steps": [
                {
                    "command": [
                        "by rewrite -bin_sub ?leqnSn // subSnn bin1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bin2",
            "line_nb": 203,
            "steps": [
                {
                    "command": [
                        "by rewrite -[n.-1]bin1 mul_bin_diag -divn2 mulKn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bin2odd",
            "line_nb": 206,
            "steps": [
                {
                    "command": [
                        "by case: n => // n oddn; rewrite bin2 -!divn2 muln_divA ?dvdn2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prime_dvd_bin",
            "line_nb": 209,
            "steps": [
                {
                    "command": [
                        "move=> p_pr /andP[k_gt0 lt_k_p].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "suffices /Gauss_dvdr<-: coprime p (p - k) by rewrite -mul_bin_down dvdn_mulr.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "by rewrite prime_coprime // dvdn_subr 1?ltnW // gtnNdvd.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "triangular_sum",
            "line_nb": 214,
            "steps": [
                {
                    "command": [
                        "elim: n => [|n IHn]; first by rewrite big_geq.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite big_nat_recr // IHn binS bin1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dvdn_pred_predX",
            "line_nb": 255,
            "steps": [
                {
                    "command": [
                        "by rewrite predn_exp dvdn_mulr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "modn_summ",
            "line_nb": 258,
            "steps": [
                {
                    "command": [
                        "by apply/eqP; elim/big_rec2: _ => // i m n _; rewrite modnDml eqn_modDl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_inj_ffuns",
            "line_nb": 286,
            "steps": [
                {
                    "command": [
                        "rewrite -card_inj_ffuns_on; apply: eq_card => f.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite 2!inE; case: ffun_onP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_draws",
            "line_nb": 332,
            "steps": [
                {
                    "command": [
                        "by rewrite -cardsT -cards_draws; apply: eq_card => A; rewrite !inE subsetT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_partial_ord_partitions",
            "line_nb": 401,
            "steps": [
                {
                    "command": [
                        "symmetry; set In1 := 'I_n.+1; pose x0 : In1 := ord0.",
                        "VernacExtend",
                        "6081694b000e5fd901aaae3f1d13a6abae30888a"
                    ]
                },
                {
                    "command": [
                        "pose add_mn (i j : In1) : In1 := inord (i + j).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "pose f_add (t : m.-tuple In1) := [tuple of scanl add_mn x0 t].",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "rewrite -card_sorted_tuples -!sum1dep_card (reindex f_add) /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply: eq_bigl => t; rewrite -[\\sum_(i <- t) i]add0n.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "transitivity (path leq x0 (map val (f_add t))) => /=; first by case: map.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite -{1 2}[0]/(val x0); elim: {t}(val t) (x0) => /= [|x t IHt] s.",
                        "VernacExtend",
                        "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
                    ]
                },
                {
                    "command": [
                        "by rewrite big_nil addn0 -ltnS ltn_ord.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite big_cons addnA IHt /= val_insubd ltnS.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have [_ | ltn_n_sx] := leqP (s + x) n; first by rewrite leq_addr.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite -(leq_add2r x) leqNgt (leq_trans (valP x)) //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite leqNgt (leq_trans ltn_n_sx) ?leq_addr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "pose sub_mn (i j : In1) := Ordinal (leq_ltn_trans (leq_subr i j) (valP j)).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "exists (fun t : m.-tuple In1 => [tuple of pairmap sub_mn x0 t]) => /= t inc_t.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply: val_inj => /=; have{inc_t}: path leq x0 (map val (f_add t)).",
                        "VernacExtend",
                        "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
                    ]
                },
                {
                    "command": [
                        "by move: inc_t; rewrite inE /=; case: map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite [map _ _]/=; elim: {t}(val t) (x0) => //= x t IHt s.",
                        "VernacExtend",
                        "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
                    ]
                },
                {
                    "command": [
                        "case/andP=> le_s_sx /IHt->; congr (_ :: _); apply: val_inj => /=.",
                        "VernacExtend",
                        "58a16ee3b401cbfae7edb14a54eef06bf4ce0f5b"
                    ]
                },
                {
                    "command": [
                        "move: le_s_sx; rewrite val_insubd.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "case le_sx_n: (_ < n.+1); first by rewrite addKn.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case: (val s) le_sx_n; rewrite ?ltn_ord.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: val_inj => /=; have{inc_t}: path leq x0 (map val t).",
                        "VernacExtend",
                        "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
                    ]
                },
                {
                    "command": [
                        "by move: inc_t; rewrite inE /=; case: map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: {t}(val t) (x0) => //= x t IHt s /andP[le_s_sx inc_t].",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "suffices ->: add_mn s (sub_mn s x) = x by rewrite IHt.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "by apply: val_inj; rewrite /add_mn /= subnKC ?inord_val.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_ord_partitions",
            "line_nb": 429,
            "steps": [
                {
                    "command": [
                        "symmetry; set In1 := 'I_n.+1; pose x0 : In1 := ord0.",
                        "VernacExtend",
                        "6081694b000e5fd901aaae3f1d13a6abae30888a"
                    ]
                },
                {
                    "command": [
                        "pose f_add (t : m.-tuple In1) := [tuple of sub_ord (\\sum_(x <- t) x) :: t].",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "rewrite -card_partial_ord_partitions -!sum1dep_card (reindex f_add) /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_bigl => t; rewrite big_cons /= addnC (sameP maxn_idPr eqP) maxnE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists (fun t : m.+1.-tuple In1 => [tuple of behead t]) => [t _|].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "exact: val_inj.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "case/tupleP=> x t; rewrite inE /= big_cons => /eqP def_n.",
                        "VernacExtend",
                        "ba44c9d0281a02110ce54645304e6d990debd9c0"
                    ]
                },
                {
                    "command": [
                        "by apply: val_inj; congr (_ :: _); apply: val_inj; rewrite /= -{1}def_n addnK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}