{
    "filename": "mathcomp/ssreflect/finfun.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrfun ssrbool eqtype ssrnat seq choice fintype tuple.",
            "VernacRequire",
            "ccf62c34f9ed9116e0285cba16a95140130dcfb1"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Section Def.",
            "VernacBeginSection",
            "891f679f68bab7ae72311468953cd39d353d2080"
        ],
        [
            "Variables (aT : finType) (rT : Type).",
            "VernacAssumption",
            "65bcea63f9fae2e0d490a6c71ba0989be93f450c"
        ],
        [
            "Inductive finfun_type : predArgType := Finfun of #|aT|.-tuple rT.",
            "VernacInductive",
            "1844cefdb50cbbefef5f0298655d2d3b3066e0a7"
        ],
        [
            "Definition finfun_of of phant (aT -> rT) := finfun_type.",
            "VernacDefinition",
            "c96e58b15cb1734214b67b3f59eef3fbb33d1ac1"
        ],
        [
            "Identity Coercion type_of_finfun : finfun_of >-> finfun_type.",
            "VernacIdentityCoercion",
            "b9136bd4f00595393f5e3bc8977bf22dcc5dbb1d"
        ],
        [
            "Definition fgraph f := let: Finfun t := f in t.",
            "VernacDefinition",
            "71dce89d667178996ba54da4eca6243f4556c270"
        ],
        [
            "Canonical finfun_subType := Eval hnf in [newType for fgraph].",
            "VernacDefinition",
            "2fbaa7f91f7e5ad367483923e7155dedc97b0f35"
        ],
        [
            "End Def.",
            "VernacEndSegment",
            "616ad5692568c74f61a9df3a82ac03d2b7ebac01"
        ],
        [
            "Notation \"{ 'ffun' fT }\" := (finfun_of (Phant fT)) (at level 0, format \"{ 'ffun' '[hv' fT ']' }\") : type_scope.",
            "VernacNotation",
            "be07bbfac2f1323ad7099d34d0355bb4b4bf6991"
        ],
        [
            "Definition exp_finIndexType n := ordinal_finType n.",
            "VernacDefinition",
            "0c0a0a74f4f52242ba66a1e75715f3c7d7c53aaf"
        ],
        [
            "Notation \"T ^ n\" := (@finfun_of (exp_finIndexType n) T (Phant _)) : type_scope.",
            "VernacNotation",
            "19832a34733892b57a38fe8ff6dad0f91b83cc18"
        ],
        [
            "Local Notation fun_of_fin_def := (fun aT rT f x => tnth (@fgraph aT rT f) (enum_rank x)).",
            "VernacSyntacticDefinition",
            "aedff130e31cb36a14de97cf797fb7fb38e15fb8"
        ],
        [
            "Local Notation finfun_def := (fun aT rT f => @Finfun aT rT (codom_tuple f)).",
            "VernacSyntacticDefinition",
            "a7ddc4c49573b880bcbb820924261e79ff11e662"
        ],
        [
            "Module Type FunFinfunSig.",
            "VernacDeclareModuleType",
            "b5c3194b125c929893125ffc47cee6d91aa24b0a"
        ],
        [
            "Parameter fun_of_fin : forall aT rT, finfun_type aT rT -> aT -> rT.",
            "VernacAssumption",
            "4d82716e2fdf7b153877327bd37e4c565a559fbd"
        ],
        [
            "Parameter finfun : forall (aT : finType) rT, (aT -> rT) -> {ffun aT -> rT}.",
            "VernacAssumption",
            "542a25688bef3f8e8bce7930d10f0b99bfef0ace"
        ],
        [
            "Axiom fun_of_finE : fun_of_fin = fun_of_fin_def.",
            "VernacAssumption",
            "1cb0e5a1918f59d140bd13ef9785b1ebf3e0c485"
        ],
        [
            "Axiom finfunE : finfun = finfun_def.",
            "VernacAssumption",
            "3e4593530c3eb3ebc184e805646869cb4b00fdae"
        ],
        [
            "End FunFinfunSig.",
            "VernacEndSegment",
            "6fb5d69869a4f4be79a674d4f79d21412834affd"
        ],
        [
            "Module FunFinfun : FunFinfunSig.",
            "VernacDefineModule",
            "1fb3173ced79d3479774a1f5b2d9f98b34df1c92"
        ],
        [
            "Definition fun_of_fin := fun_of_fin_def.",
            "VernacDefinition",
            "fa3e5560bc8581e276b5ae9820897f5c41a3e49c"
        ],
        [
            "Definition finfun := finfun_def.",
            "VernacDefinition",
            "a689eae69afa902f278103e702c3b47ffdc2b7d2"
        ],
        [
            "Lemma fun_of_finE : fun_of_fin = fun_of_fin_def.",
            "VernacStartTheoremProof",
            "52f164fdbea44c01c08abaedb36f027263f47254"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma finfunE : finfun = finfun_def.",
            "VernacStartTheoremProof",
            "1a014ea22207b87d31edfdac9968ca5cef9e5e5e"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FunFinfun.",
            "VernacEndSegment",
            "4e9b3caec24099c3173b39ec08f212e87e4f09ae"
        ],
        [
            "Notation fun_of_fin := FunFinfun.fun_of_fin.",
            "VernacSyntacticDefinition",
            "3f6a3ad4312f47e0b92b26357a899c7ca2e36c56"
        ],
        [
            "Notation finfun := FunFinfun.finfun.",
            "VernacSyntacticDefinition",
            "cb98f03a89b36be127faba090143eb92fe5e1a4d"
        ],
        [
            "Coercion fun_of_fin : finfun_type >-> Funclass.",
            "VernacCoercion",
            "46ed4f08c571876edafb93f57797675fccbdc1ae"
        ],
        [
            "Canonical fun_of_fin_unlock := Unlockable FunFinfun.fun_of_finE.",
            "VernacDefinition",
            "06304b4d2922029f0c51a08c47e66cba2a2e24e6"
        ],
        [
            "Canonical finfun_unlock := Unlockable FunFinfun.finfunE.",
            "VernacDefinition",
            "9b7823c670358fddb5d96a339418d5e940841700"
        ],
        [
            "Notation \"[ 'ffun' x : aT => F ]\" := (finfun (fun x : aT => F)) (at level 0, x ident, only parsing) : fun_scope.",
            "VernacNotation",
            "12328759ac860af963d3ffedcca5f8679cd1e0eb"
        ],
        [
            "Notation \"[ 'ffun' : aT => F ]\" := (finfun (fun _ : aT => F)) (at level 0, only parsing) : fun_scope.",
            "VernacNotation",
            "7993dd3629c21098bac287b55b5b2b758214c5a3"
        ],
        [
            "Notation \"[ 'ffun' x => F ]\" := [ffun x : _ => F] (at level 0, x ident, format \"[ 'ffun' x => F ]\") : fun_scope.",
            "VernacNotation",
            "f0dfc728dc7c7f506556bcaa11eb528d9b698b33"
        ],
        [
            "Notation \"[ 'ffun' => F ]\" := [ffun : _ => F] (at level 0, format \"[ 'ffun' => F ]\") : fun_scope.",
            "VernacNotation",
            "7f8ef7eea8b42e37d4755f696eba9eb6346225f9"
        ],
        [
            "Definition fmem aT rT (pT : predType rT) (f : aT -> pT) := [fun x => mem (f x)].",
            "VernacDefinition",
            "67dfbc8188e1acb6d6e2ca5edabb7828489ce9f5"
        ],
        [
            "Section PlainTheory.",
            "VernacBeginSection",
            "bd4906307ec5a827c8baa16efb4c9ed131f04cd4"
        ],
        [
            "Variables (aT : finType) (rT : Type).",
            "VernacAssumption",
            "65bcea63f9fae2e0d490a6c71ba0989be93f450c"
        ],
        [
            "Notation fT := {ffun aT -> rT}.",
            "VernacSyntacticDefinition",
            "4a7c39549ccfb373e3e2ef0aa08440de58cd22f6"
        ],
        [
            "Implicit Types (f : fT) (R : pred rT).",
            "VernacReserve",
            "823d949a37cbb91d9f921e135be73926f0ee0822"
        ],
        [
            "Canonical finfun_of_subType := Eval hnf in [subType of fT].",
            "VernacDefinition",
            "3d4a0469b26b3e3a9090b5cf899a4d7f378efab0"
        ],
        [
            "Lemma tnth_fgraph f i : tnth (fgraph f) i = f (enum_val i).",
            "VernacStartTheoremProof",
            "7cd852fba1fe05bd6f9ddebf81181bbfd82778ce"
        ],
        [
            "by rewrite [@fun_of_fin]unlock enum_valK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ffunE (g : aT -> rT) : finfun g =1 g.",
            "VernacStartTheoremProof",
            "131725b7d05243fbd70530f31780b522313924f9"
        ],
        [
            "move=> x; rewrite [@finfun]unlock unlock tnth_map.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite -[tnth _ _]enum_val_nth enum_rankK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fgraph_codom f : fgraph f = codom_tuple f.",
            "VernacStartTheoremProof",
            "0690d76d2a7f2eac5eb00be964e598ede279b583"
        ],
        [
            "apply: eq_from_tnth => i; rewrite [@fun_of_fin]unlock tnth_map.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by congr tnth; rewrite -[tnth _ _]enum_val_nth enum_valK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codom_ffun f : codom f = val f.",
            "VernacStartTheoremProof",
            "4cf5a79ac35b27e1755d774c51a5ac4aff29ac6d"
        ],
        [
            "by rewrite /= fgraph_codom.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ffunP f1 f2 : f1 =1 f2 <-> f1 = f2.",
            "VernacStartTheoremProof",
            "9db4f7445bb9f5e4cf835687c1129c9ea15d47e5"
        ],
        [
            "split=> [eq_f12 | -> //]; do 2!apply: val_inj => /=.",
            "VernacExtend",
            "a7bd48c20010ed986f3ba4f8c3bf8c06ae1d5257"
        ],
        [
            "by rewrite !fgraph_codom /= (eq_codom eq_f12).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ffunK : cancel (@fun_of_fin aT rT) (@finfun aT rT).",
            "VernacStartTheoremProof",
            "97580f5ec589bb79972bbe4cafd724726bc6e2c3"
        ],
        [
            "by move=> f; apply/ffunP/ffunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition family_mem mF := [pred f : fT | [forall x, in_mem (f x) (mF x)]].",
            "VernacDefinition",
            "3b8cd3f356abb19aa18d33ff04200c5796b0cd50"
        ],
        [
            "Lemma familyP (pT : predType rT) (F : aT -> pT) f : reflect (forall x, f x \\in F x) (f \\in family_mem (fmem F)).",
            "VernacStartTheoremProof",
            "f830c6551d2d6ae2606e3fc385775a32b8ad547b"
        ],
        [
            "exact: forallP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ffun_on_mem mR := family_mem (fun _ => mR).",
            "VernacDefinition",
            "dfdaf296bfc650a4af84ac5b37c7a493339ad99e"
        ],
        [
            "Lemma ffun_onP R f : reflect (forall x, f x \\in R) (f \\in ffun_on_mem (mem R)).",
            "VernacStartTheoremProof",
            "1b5c08761edfa59cd996756289769ee92c5add09"
        ],
        [
            "exact: forallP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End PlainTheory.",
            "VernacEndSegment",
            "2a05969c84a1fb8b7d10ccf17104f723c1f5719b"
        ],
        [
            "Notation family F := (family_mem (fun_of_simpl (fmem F))).",
            "VernacSyntacticDefinition",
            "41820da3bfd3ff572a93f2e839227b1de8b78239"
        ],
        [
            "Notation ffun_on R := (ffun_on_mem _ (mem R)).",
            "VernacSyntacticDefinition",
            "94111e96554bf16173fb9daea7e41c2990767b2b"
        ],
        [
            "Arguments ffunK {aT rT}.",
            "VernacArguments",
            "25d2d24f3cff8a85a6012c066a5ceff44a46a4a6"
        ],
        [
            "Arguments familyP {aT rT pT F f}.",
            "VernacArguments",
            "073358f508432db900f4d66ea616d62ab0fa1a61"
        ],
        [
            "Arguments ffun_onP {aT rT R f}.",
            "VernacArguments",
            "c0eb8dcca8d5e6dbb35f95f42a9b885c9ba13ef6"
        ],
        [
            "Lemma nth_fgraph_ord T n (x0 : T) (i : 'I_n) f : nth x0 (fgraph f) i = f i.",
            "VernacStartTheoremProof",
            "b06e6551060fea8757939df47a1d8973ed7f223d"
        ],
        [
            "by rewrite -{2}(enum_rankK i) -tnth_fgraph (tnth_nth x0) enum_rank_ord.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Support.",
            "VernacBeginSection",
            "9c5ce85b047a2b5b55d51c914f8da2f8ca201fb7"
        ],
        [
            "Variables (aT : Type) (rT : eqType).",
            "VernacAssumption",
            "36d64d71754f243a85f667fb26114919d122bd97"
        ],
        [
            "Definition support_for y (f : aT -> rT) := [pred x | f x != y].",
            "VernacDefinition",
            "d9411ba2428eb45249a1e96f7c4b7a3123ec6fe3"
        ],
        [
            "Lemma supportE x y f : (x \\in support_for y f) = (f x != y).",
            "VernacStartTheoremProof",
            "67790a4c464afd365f639fd8ec9f9f2952afac99"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Support.",
            "VernacEndSegment",
            "81005dd0279b5e1409c7fbe8ed442e473eee629d"
        ],
        [
            "Notation \"y .-support\" := (support_for y) (at level 2, format \"y .-support\") : fun_scope.",
            "VernacNotation",
            "5b3952cf21b9b2b23be936c7b1d542544216cf78"
        ],
        [
            "Section EqTheory.",
            "VernacBeginSection",
            "8751fd07ffe6926324b3ecf550d41c0b23348037"
        ],
        [
            "Variables (aT : finType) (rT : eqType).",
            "VernacAssumption",
            "f68eb649c7e8f58a58da3cb7ce790eabc5c95e8a"
        ],
        [
            "Notation fT := {ffun aT -> rT}.",
            "VernacSyntacticDefinition",
            "4a7c39549ccfb373e3e2ef0aa08440de58cd22f6"
        ],
        [
            "Implicit Types (y : rT) (D : pred aT) (R : pred rT) (f : fT).",
            "VernacReserve",
            "d10432905feea7e3f917ab639e88cf015b930eff"
        ],
        [
            "Lemma supportP y D g : reflect (forall x, x \\notin D -> g x = y) (y.-support g \\subset D).",
            "VernacStartTheoremProof",
            "1a5e76a92b99b9d2473ed5470796a98bcc362bec"
        ],
        [
            "by apply: (iffP subsetP) => Dg x; [apply: contraNeq | apply: contraR] => /Dg->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition finfun_eqMixin := Eval hnf in [eqMixin of finfun_type aT rT by <:].",
            "VernacDefinition",
            "9992c81359b7ce0f6431f30d41c7fa583697e2ea"
        ],
        [
            "Canonical finfun_eqType := Eval hnf in EqType _ finfun_eqMixin.",
            "VernacDefinition",
            "8d45e149beb1f68e7606f2b23141e81cb23491bf"
        ],
        [
            "Canonical finfun_of_eqType := Eval hnf in [eqType of fT].",
            "VernacDefinition",
            "2f33cd5d15579634c50ec0046ecfdb66d435cd36"
        ],
        [
            "Definition pfamily_mem y mD (mF : aT -> mem_pred rT) := family (fun i : aT => if in_mem i mD then pred_of_simpl (mF i) else pred1 y).",
            "VernacDefinition",
            "1ad12c9b058ada67705fbb1f54dbbcdce79e50ae"
        ],
        [
            "Lemma pfamilyP (pT : predType rT) y D (F : aT -> pT) f : reflect (y.-support f \\subset D /\\ {in D, forall x, f x \\in F x}) (f \\in pfamily_mem y (mem D) (fmem F)).",
            "VernacStartTheoremProof",
            "1dbef0fab5c960ef9d6d43dc6b18e062a8283c1d"
        ],
        [
            "apply: (iffP familyP) => [/= f_pfam | [/supportP f_supp f_fam] x].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "split=> [|x Ax]; last by have:= f_pfam x; rewrite Ax.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/subsetP=> x; case: ifP (f_pfam x) => //= _ fx0 /negP[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case: ifPn => Ax /=; rewrite inE /= (f_fam, f_supp).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition pffun_on_mem y mD mR := pfamily_mem y mD (fun _ => mR).",
            "VernacDefinition",
            "fb5e94cb61111717bdc6d815729947886ef32565"
        ],
        [
            "Lemma pffun_onP y D R f : reflect (y.-support f \\subset D /\\ {subset image f D <= R}) (f \\in pffun_on_mem y (mem D) (mem R)).",
            "VernacStartTheoremProof",
            "5c99639bf7dd89950623f975744a983e2bf7ab5e"
        ],
        [
            "apply: (iffP (pfamilyP y D (fun _ => R) f)) => [] [-> f_fam]; split=> //.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "by move=> _ /imageP[x Ax ->]; apply: f_fam.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=> x Ax; apply: f_fam; apply/imageP; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EqTheory.",
            "VernacEndSegment",
            "cef3bf45b7f3fd5b92498d11d172e761cb239062"
        ],
        [
            "Arguments supportP {aT rT y D g}.",
            "VernacArguments",
            "87f2492c5a92f7e3c80699453066314f3b165b64"
        ],
        [
            "Notation pfamily y D F := (pfamily_mem y (mem D) (fun_of_simpl (fmem F))).",
            "VernacSyntacticDefinition",
            "c41bc6879c8dee140402d2846542c0f0a7afc780"
        ],
        [
            "Notation pffun_on y D R := (pffun_on_mem y (mem D) (mem R)).",
            "VernacSyntacticDefinition",
            "2cb30c48d96fd4e6fffdfff60edb0a75776956e9"
        ],
        [
            "Definition finfun_choiceMixin aT (rT : choiceType) := [choiceMixin of finfun_type aT rT by <:].",
            "VernacDefinition",
            "d73155e16238c0c2e969997059470fd84fee0b77"
        ],
        [
            "Canonical finfun_choiceType aT rT := Eval hnf in ChoiceType _ (finfun_choiceMixin aT rT).",
            "VernacDefinition",
            "73ed16e729fead2405c0cf1f2de339131d56c655"
        ],
        [
            "Canonical finfun_of_choiceType (aT : finType) (rT : choiceType) := Eval hnf in [choiceType of {ffun aT -> rT}].",
            "VernacDefinition",
            "1d855df4257102ff1eab6c1f100f4ce8e5801a19"
        ],
        [
            "Definition finfun_countMixin aT (rT : countType) := [countMixin of finfun_type aT rT by <:].",
            "VernacDefinition",
            "420344a1cb66ecff0fe698282f891b168d9464b3"
        ],
        [
            "Canonical finfun_countType aT (rT : countType) := Eval hnf in CountType _ (finfun_countMixin aT rT).",
            "VernacDefinition",
            "acf930fab61cc11867c28a5fed49fe2fc88eaf42"
        ],
        [
            "Canonical finfun_of_countType (aT : finType) (rT : countType) := Eval hnf in [countType of {ffun aT -> rT}].",
            "VernacDefinition",
            "91b9accaff4c432df8c10c170fba0e975bb83303"
        ],
        [
            "Canonical finfun_subCountType aT (rT : countType) := Eval hnf in [subCountType of finfun_type aT rT].",
            "VernacDefinition",
            "dbdbe54aaf63cc5436acc6756325c7133d5242ff"
        ],
        [
            "Canonical finfun_of_subCountType (aT : finType) (rT : countType) := Eval hnf in [subCountType of {ffun aT -> rT}].",
            "VernacDefinition",
            "604373da821e408b0e8acbe10b00ffddde8b3b9a"
        ],
        [
            "Section FinTheory.",
            "VernacBeginSection",
            "d0bbf672f63ad8b112c46126417f935016d4e99a"
        ],
        [
            "Variables aT rT : finType.",
            "VernacAssumption",
            "4f9cadc8d700317ca681ac1d68aed0207fcaf5e1"
        ],
        [
            "Notation fT := {ffun aT -> rT}.",
            "VernacSyntacticDefinition",
            "4a7c39549ccfb373e3e2ef0aa08440de58cd22f6"
        ],
        [
            "Notation ffT := (finfun_type aT rT).",
            "VernacSyntacticDefinition",
            "8ca2ed10c43082052b49eb4c8d939ec8f9157f93"
        ],
        [
            "Implicit Types (D : pred aT) (R : pred rT) (F : aT -> pred rT).",
            "VernacReserve",
            "e69921c9697e9e79df29e1d2bb9984ff41a0e334"
        ],
        [
            "Definition finfun_finMixin := [finMixin of ffT by <:].",
            "VernacDefinition",
            "d884e81a2075e14a747ee7b919717c39ab1d1070"
        ],
        [
            "Canonical finfun_finType := Eval hnf in FinType ffT finfun_finMixin.",
            "VernacDefinition",
            "8e879c6aae5e2604ccea1b4fb8ea503de480b7b1"
        ],
        [
            "Canonical finfun_subFinType := Eval hnf in [subFinType of ffT].",
            "VernacDefinition",
            "6093f564729b75fd29770cc2b8fe1e1cf485e650"
        ],
        [
            "Canonical finfun_of_finType := Eval hnf in [finType of fT for finfun_finType].",
            "VernacDefinition",
            "d70db19318539d466d5de8b29dd7ad0b9de0007b"
        ],
        [
            "Canonical finfun_of_subFinType := Eval hnf in [subFinType of fT].",
            "VernacDefinition",
            "f05831aa43e19462131186fcb2c8d2128fe6f1f8"
        ],
        [
            "Lemma card_pfamily y0 D F : #|pfamily y0 D F| = foldr muln 1 [seq #|F x| | x in D].",
            "VernacStartTheoremProof",
            "a0de3d137dc539858c8ce9239a0903a45cdef2d6"
        ],
        [
            "rewrite /image_mem; transitivity #|pfamily y0 (enum D) F|.",
            "VernacExtend",
            "bbd32502ee55fef4d2bb50c7a1b97afe9e0074ba"
        ],
        [
            "by apply/eq_card=> f; apply/eq_forallb=> x /=; rewrite mem_enum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: {D}(enum D) (enum_uniq D) => /= [_|x0 s IHs /andP[s'x0 /IHs<-{IHs}]].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "apply: eq_card1 [ffun=> y0] _ _ => f.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "apply/familyP/eqP=> [y0_f|-> x]; last by rewrite ffunE inE.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/ffunP=> x; rewrite ffunE (eqP (y0_f x)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose g (xf : rT * fT) := finfun [eta xf.2 with x0 |-> xf.1].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have gK: cancel (fun f : fT => (f x0, g (y0, f))) g.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> f; apply/ffunP=> x; do !rewrite ffunE /=; case: eqP => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -cardX -(card_image (can_inj gK)); apply: eq_card => [] [y f] /=.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "apply/imageP/andP=> [[f0 /familyP/=Ff0] [{f}-> ->]| [Fy /familyP/=Ff]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "split; first by have:= Ff0 x0; rewrite /= mem_head.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/familyP=> x; have:= Ff0 x; rewrite ffunE inE /=.",
            "VernacExtend",
            "498dcf9c10fa6ece1d0d916281d2a6b32e23441c"
        ],
        [
            "by case: eqP => //= -> _; rewrite ifN ?inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (g (y, f)).",
            "VernacExtend",
            "f5e3606418080c2e6f6bf88fe20bd4f69c2a01d7"
        ],
        [
            "by apply/familyP=> x; have:= Ff x; rewrite ffunE /= inE; case: eqP => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "congr (_, _); last apply/ffunP=> x; do !rewrite ffunE /= ?eqxx //.",
            "VernacExtend",
            "c978afed0531e8f5cb8109ae1a7b8227305314bb"
        ],
        [
            "by case: eqP => // ->{x}; apply/eqP; have:= Ff x0; rewrite ifN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_family F : #|family F| = foldr muln 1 [seq #|F x| | x : aT].",
            "VernacStartTheoremProof",
            "d298206f896ccdaab9843ebeb3d587218a73ee98"
        ],
        [
            "have [y0 _ | rT0] := pickP rT; first exact: (card_pfamily y0 aT).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite /image_mem; case DaT: (enum aT) => [{rT0}|x0 e] /=; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !eq_card0 // => [f | y]; [have:= rT0 (f x0) | have:= rT0 y].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{DaT} no_aT P (x : aT) : P by have:= mem_enum aT x; rewrite DaT.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: eq_card1 [ffun x => no_aT rT x] _ _ => f.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by apply/familyP/eqP=> _; [apply/ffunP | ] => x; apply: no_aT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_pffun_on y0 D R : #|pffun_on y0 D R| = #|R| ^ #|D|.",
            "VernacStartTheoremProof",
            "4288b4e972a43a749449feff15e531f006ee2240"
        ],
        [
            "rewrite (cardE D) card_pfamily /image_mem.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by elim: (enum D) => //= _ e ->; rewrite expnS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_ffun_on R : #|ffun_on R| = #|R| ^ #|aT|.",
            "VernacStartTheoremProof",
            "392944d4efc8ef0234d68a27110d406650c7424b"
        ],
        [
            "rewrite card_family /image_mem cardT.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by elim: (enum aT) => //= _ e ->; rewrite expnS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_ffun : #|fT| = #|rT| ^ #|aT|.",
            "VernacStartTheoremProof",
            "5925a2e513fa6a274886c007c6ab5342cfd81f4a"
        ],
        [
            "by rewrite -card_ffun_on; apply/esym/eq_card=> f; apply/forallP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FinTheory.",
            "VernacEndSegment",
            "db8b3491c37a4fc4641adbcb52dbac083986a15a"
        ]
    ],
    "proofs": [
        {
            "name": "fun_of_finE",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finfunE",
            "line_nb": 30,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tnth_fgraph",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "by rewrite [@fun_of_fin]unlock enum_valK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffunE",
            "line_nb": 52,
            "steps": [
                {
                    "command": [
                        "move=> x; rewrite [@finfun]unlock unlock tnth_map.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite -[tnth _ _]enum_val_nth enum_rankK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fgraph_codom",
            "line_nb": 56,
            "steps": [
                {
                    "command": [
                        "apply: eq_from_tnth => i; rewrite [@fun_of_fin]unlock tnth_map.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by congr tnth; rewrite -[tnth _ _]enum_val_nth enum_valK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codom_ffun",
            "line_nb": 60,
            "steps": [
                {
                    "command": [
                        "by rewrite /= fgraph_codom.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffunP",
            "line_nb": 63,
            "steps": [
                {
                    "command": [
                        "split=> [eq_f12 | -> //]; do 2!apply: val_inj => /=.",
                        "VernacExtend",
                        "a7bd48c20010ed986f3ba4f8c3bf8c06ae1d5257"
                    ]
                },
                {
                    "command": [
                        "by rewrite !fgraph_codom /= (eq_codom eq_f12).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffunK",
            "line_nb": 67,
            "steps": [
                {
                    "command": [
                        "by move=> f; apply/ffunP/ffunE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "familyP",
            "line_nb": 71,
            "steps": [
                {
                    "command": [
                        "exact: forallP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ffun_onP",
            "line_nb": 75,
            "steps": [
                {
                    "command": [
                        "exact: forallP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_fgraph_ord",
            "line_nb": 84,
            "steps": [
                {
                    "command": [
                        "by rewrite -{2}(enum_rankK i) -tnth_fgraph (tnth_nth x0) enum_rank_ord.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "supportE",
            "line_nb": 90,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "supportP",
            "line_nb": 99,
            "steps": [
                {
                    "command": [
                        "by apply: (iffP subsetP) => Dg x; [apply: contraNeq | apply: contraR] => /Dg->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pfamilyP",
            "line_nb": 106,
            "steps": [
                {
                    "command": [
                        "apply: (iffP familyP) => [/= f_pfam | [/supportP f_supp f_fam] x].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "split=> [|x Ax]; last by have:= f_pfam x; rewrite Ax.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/subsetP=> x; case: ifP (f_pfam x) => //= _ fx0 /negP[].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by case: ifPn => Ax /=; rewrite inE /= (f_fam, f_supp).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pffun_onP",
            "line_nb": 113,
            "steps": [
                {
                    "command": [
                        "apply: (iffP (pfamilyP y D (fun _ => R) f)) => [] [-> f_fam]; split=> //.",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "by move=> _ /imageP[x Ax ->]; apply: f_fam.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by move=> x Ax; apply: f_fam; apply/imageP; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_pfamily",
            "line_nb": 140,
            "steps": [
                {
                    "command": [
                        "rewrite /image_mem; transitivity #|pfamily y0 (enum D) F|.",
                        "VernacExtend",
                        "bbd32502ee55fef4d2bb50c7a1b97afe9e0074ba"
                    ]
                },
                {
                    "command": [
                        "by apply/eq_card=> f; apply/eq_forallb=> x /=; rewrite mem_enum.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: {D}(enum D) (enum_uniq D) => /= [_|x0 s IHs /andP[s'x0 /IHs<-{IHs}]].",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "apply: eq_card1 [ffun=> y0] _ _ => f.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "apply/familyP/eqP=> [y0_f|-> x]; last by rewrite ffunE inE.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/ffunP=> x; rewrite ffunE (eqP (y0_f x)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "pose g (xf : rT * fT) := finfun [eta xf.2 with x0 |-> xf.1].",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have gK: cancel (fun f : fT => (f x0, g (y0, f))) g.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by move=> f; apply/ffunP=> x; do !rewrite ffunE /=; case: eqP => // ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -cardX -(card_image (can_inj gK)); apply: eq_card => [] [y f] /=.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "apply/imageP/andP=> [[f0 /familyP/=Ff0] [{f}-> ->]| [Fy /familyP/=Ff]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "split; first by have:= Ff0 x0; rewrite /= mem_head.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply/familyP=> x; have:= Ff0 x; rewrite ffunE inE /=.",
                        "VernacExtend",
                        "498dcf9c10fa6ece1d0d916281d2a6b32e23441c"
                    ]
                },
                {
                    "command": [
                        "by case: eqP => //= -> _; rewrite ifN ?inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists (g (y, f)).",
                        "VernacExtend",
                        "f5e3606418080c2e6f6bf88fe20bd4f69c2a01d7"
                    ]
                },
                {
                    "command": [
                        "by apply/familyP=> x; have:= Ff x; rewrite ffunE /= inE; case: eqP => // ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "congr (_, _); last apply/ffunP=> x; do !rewrite ffunE /= ?eqxx //.",
                        "VernacExtend",
                        "c978afed0531e8f5cb8109ae1a7b8227305314bb"
                    ]
                },
                {
                    "command": [
                        "by case: eqP => // ->{x}; apply/eqP; have:= Ff x0; rewrite ifN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_family",
            "line_nb": 160,
            "steps": [
                {
                    "command": [
                        "have [y0 _ | rT0] := pickP rT; first exact: (card_pfamily y0 aT).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite /image_mem; case DaT: (enum aT) => [{rT0}|x0 e] /=; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !eq_card0 // => [f | y]; [have:= rT0 (f x0) | have:= rT0 y].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have{DaT} no_aT P (x : aT) : P by have:= mem_enum aT x; rewrite DaT.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply: eq_card1 [ffun x => no_aT rT x] _ _ => f.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by apply/familyP/eqP=> _; [apply/ffunP | ] => x; apply: no_aT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_pffun_on",
            "line_nb": 168,
            "steps": [
                {
                    "command": [
                        "rewrite (cardE D) card_pfamily /image_mem.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by elim: (enum D) => //= _ e ->; rewrite expnS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_ffun_on",
            "line_nb": 172,
            "steps": [
                {
                    "command": [
                        "rewrite card_family /image_mem cardT.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by elim: (enum aT) => //= _ e ->; rewrite expnS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_ffun",
            "line_nb": 176,
            "steps": [
                {
                    "command": [
                        "by rewrite -card_ffun_on; apply/esym/eq_card=> f; apply/forallP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}