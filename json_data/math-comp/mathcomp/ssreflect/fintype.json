{
    "filename": "mathcomp/ssreflect/fintype.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrfun ssrbool eqtype ssrnat seq choice path.",
            "VernacRequire",
            "e4d90d83f7e0b704c302caba39ff987287c61769"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Module Finite.",
            "VernacDefineModule",
            "35be6f90ae95bdc46ea7472979be1f0343e8f5b2"
        ],
        [
            "Section RawMixin.",
            "VernacBeginSection",
            "e3754b7890ceda7a1e9fc19bf1bba72600d4f111"
        ],
        [
            "Variable T : eqType.",
            "VernacAssumption",
            "2ceeb4536776ca324e5be084d2deb4d476694ef1"
        ],
        [
            "Definition axiom e := forall x : T, count_mem x e = 1.",
            "VernacDefinition",
            "4a0f05c596e05f5bae1e9dfc3c9a89f6991c3bb3"
        ],
        [
            "Lemma uniq_enumP e : uniq e -> e =i T -> axiom e.",
            "VernacStartTheoremProof",
            "47c4e364f62e0a198c5dbe056eaea7af592c372a"
        ],
        [
            "by move=> Ue sT x; rewrite count_uniq_mem ?sT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Record mixin_of := Mixin { mixin_base : Countable.mixin_of T; mixin_enum : seq T; _ : axiom mixin_enum }.",
            "VernacInductive",
            "987e17a7882d0e4575a1a030ad263fcec35908d4"
        ],
        [
            "End RawMixin.",
            "VernacEndSegment",
            "d11e9719290e2271d84ac02cba6392743691af2c"
        ],
        [
            "Section Mixins.",
            "VernacBeginSection",
            "f185e97ba95a632fa35473f569cf321fce90fb31"
        ],
        [
            "Variable T : countType.",
            "VernacAssumption",
            "8bede86bd32132340fd3147693ef6d3798467025"
        ],
        [
            "Definition EnumMixin := let: Countable.Pack _ (Countable.Class _ m) as cT := T return forall e : seq cT, axiom e -> mixin_of cT in @Mixin (EqType _ _) m.",
            "VernacDefinition",
            "e44cf8112acf06008c21a565a22ad04f963cf970"
        ],
        [
            "Definition UniqMixin e Ue eT := @EnumMixin e (uniq_enumP Ue eT).",
            "VernacDefinition",
            "e31072b7fa0262c1bee8844da0d5662753782b2b"
        ],
        [
            "Variable n : nat.",
            "VernacAssumption",
            "07bef83858f70772f30ae2a622ca53ce45548b68"
        ],
        [
            "Definition count_enum := pmap (@pickle_inv T) (iota 0 n).",
            "VernacDefinition",
            "0af2983f38931eb58c0654cd151349327abe1ea3"
        ],
        [
            "Hypothesis ubT : forall x : T, pickle x < n.",
            "VernacAssumption",
            "a1890db8315f6ae226dade1a944a4ef083ede86c"
        ],
        [
            "Lemma count_enumP : axiom count_enum.",
            "VernacStartTheoremProof",
            "ea7135ba7927bb586ed1230cc1b842bb2c0a00b8"
        ],
        [
            "apply: uniq_enumP (pmap_uniq (@pickle_invK T) (iota_uniq _ _)) _ => x.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite mem_pmap -pickleK_inv map_f // mem_iota ubT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition CountMixin := EnumMixin count_enumP.",
            "VernacDefinition",
            "2c60031207ff9fc4d5cd9d9fcec2cac2008c345a"
        ],
        [
            "End Mixins.",
            "VernacEndSegment",
            "8c29f14041452bf33af9c4562886d60287df9e37"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Record class_of T := Class { base : Choice.class_of T; mixin : mixin_of (Equality.Pack base) }.",
            "VernacInductive",
            "5c721c8680d493965429f4d520cb1f62b0bf1d83"
        ],
        [
            "Definition base2 T c := Countable.Class (@base T c) (mixin_base (mixin c)).",
            "VernacDefinition",
            "b90fff390141641b254045a89ee7da01307e67eb"
        ],
        [
            "Local Coercion base : class_of >-> Choice.class_of.",
            "VernacCoercion",
            "d83493046a5d9087ea18e45eb84fd49a84eedb81"
        ],
        [
            "Structure type : Type := Pack {sort; _ : class_of sort}.",
            "VernacInductive",
            "89af1588ff4c9048fb0bc8fc74de2585d8498832"
        ],
        [
            "Local Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "e4478cd37693106f84ed020bd073c4970dc87530"
        ],
        [
            "Variables (T : Type) (cT : type).",
            "VernacAssumption",
            "eb35f5737a32cba56acb24ac87490232dc2dfcb9"
        ],
        [
            "Definition class := let: Pack _ c as cT' := cT return class_of cT' in c.",
            "VernacDefinition",
            "0e4a80652d474f8010316ff26a5322b5207d82a3"
        ],
        [
            "Definition clone c of phant_id class c := @Pack T c.",
            "VernacDefinition",
            "e082321bed0d5d4d78139419fead577313b82668"
        ],
        [
            "Let xT := let: Pack T _ := cT in T.",
            "VernacDefinition",
            "0a87c77e3a5ac8febf0910b95d7b998b7cb9cf6d"
        ],
        [
            "Notation xclass := (class : class_of xT).",
            "VernacSyntacticDefinition",
            "e136614fedd7b331a23b54adad5b0bce11895ed4"
        ],
        [
            "Definition pack b0 (m0 : mixin_of (EqType T b0)) := fun bT b & phant_id (Choice.class bT) b => fun m & phant_id m0 m => Pack (@Class T b m).",
            "VernacDefinition",
            "9a3f9d03641fca4c8195b32c2d1502834f26c22b"
        ],
        [
            "Definition eqType := @Equality.Pack cT xclass.",
            "VernacDefinition",
            "6139f412b89e62ff13c9c707c885de4b39151e9d"
        ],
        [
            "Definition choiceType := @Choice.Pack cT xclass.",
            "VernacDefinition",
            "f62d3090382a5ea70b978e0633e0376c4558db55"
        ],
        [
            "Definition countType := @Countable.Pack cT (base2 xclass).",
            "VernacDefinition",
            "c6c8346790edcaf1584dbe27c6fc541f7552421a"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Module Import Exports.",
            "VernacDefineModule",
            "f5a1035b94691e963f68c6f9e1df4c47bb9f27d8"
        ],
        [
            "Coercion mixin_base : mixin_of >-> Countable.mixin_of.",
            "VernacCoercion",
            "3ccfcbff68a1865bd3ddd359d9dc2eb1c458dfd8"
        ],
        [
            "Coercion base : class_of >-> Choice.class_of.",
            "VernacCoercion",
            "0fd77195a8e6f400b16548cfc0dc57a383882923"
        ],
        [
            "Coercion mixin : class_of >-> mixin_of.",
            "VernacCoercion",
            "6e94763ee53fdac946511987d81c3f6daccc67c3"
        ],
        [
            "Coercion base2 : class_of >-> Countable.class_of.",
            "VernacCoercion",
            "7ab6c30508349fd103465c407173888bb271e636"
        ],
        [
            "Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "9e1cbf06afa0d2731dbb8bfd6b9ae32be22a8ae7"
        ],
        [
            "Coercion eqType : type >-> Equality.type.",
            "VernacCoercion",
            "58308c67b5e73c9e004d57c486a5071598a25e8c"
        ],
        [
            "Canonical eqType.",
            "VernacCanonical",
            "dd1ac877a396f552e2a8f23e59be45903d8b15ad"
        ],
        [
            "Coercion choiceType : type >-> Choice.type.",
            "VernacCoercion",
            "bdc8d608f4b963a8606cd33ad18b1977a8bcb78d"
        ],
        [
            "Canonical choiceType.",
            "VernacCanonical",
            "af7a1759ddd13e2b7e4e1ce16b6a3595a77b5659"
        ],
        [
            "Coercion countType : type >-> Countable.type.",
            "VernacCoercion",
            "86f3f1b8257a715d9ebed466cb25b2594267aa7c"
        ],
        [
            "Canonical countType.",
            "VernacCanonical",
            "02fb6756c6e5c7a37c5d8f2aa22109bf5c883f7e"
        ],
        [
            "Notation finType := type.",
            "VernacSyntacticDefinition",
            "004f8fd72c8aaf96c2fa9ea97c1c3726a97a506e"
        ],
        [
            "Notation FinType T m := (@pack T _ m _ _ id _ id).",
            "VernacSyntacticDefinition",
            "d386be5fd010bcd31ea28a8a2d2e6de7219ef1fe"
        ],
        [
            "Notation FinMixin := EnumMixin.",
            "VernacSyntacticDefinition",
            "e41220353cf5ab6d2fc99615d8c592c6c3c67510"
        ],
        [
            "Notation UniqFinMixin := UniqMixin.",
            "VernacSyntacticDefinition",
            "321e1a6ea2109abe161885dce7a921167549b869"
        ],
        [
            "Notation \"[ 'finType' 'of' T 'for' cT ]\" := (@clone T cT _ idfun) (at level 0, format \"[ 'finType' 'of' T 'for' cT ]\") : form_scope.",
            "VernacNotation",
            "0e5fa8e06d709940bf22c04c067e6df968e60259"
        ],
        [
            "Notation \"[ 'finType' 'of' T ]\" := (@clone T _ _ id) (at level 0, format \"[ 'finType' 'of' T ]\") : form_scope.",
            "VernacNotation",
            "f2fde625f4c45b1a41045ca206720f0976e1d135"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "Module Type EnumSig.",
            "VernacDeclareModuleType",
            "328b84f899f88d2498de6029205c8a840897d264"
        ],
        [
            "Parameter enum : forall cT : type, seq cT.",
            "VernacAssumption",
            "52d3fcfc8c45f429a3b443c5b4d698d508d631c2"
        ],
        [
            "Axiom enumDef : enum = fun cT => mixin_enum (class cT).",
            "VernacAssumption",
            "ffbcdd55fa890714fd282b978dc6505492279ed1"
        ],
        [
            "End EnumSig.",
            "VernacEndSegment",
            "31d91a391b0dd2b74be802d2fb6285cd46822c99"
        ],
        [
            "Module EnumDef : EnumSig.",
            "VernacDefineModule",
            "7f7cacbb31c67e95954e0d4de3844e41942a4159"
        ],
        [
            "Definition enum cT := mixin_enum (class cT).",
            "VernacDefinition",
            "62e2867163351d3ad8761e3344f58d9c6dc0d935"
        ],
        [
            "Definition enumDef := erefl enum.",
            "VernacDefinition",
            "182323dafd8d57d3ffa6d419ffc35078749d259e"
        ],
        [
            "End EnumDef.",
            "VernacEndSegment",
            "97dd02139dd1155e6cbf58bdc4f3e4b56c953bd5"
        ],
        [
            "Notation enum := EnumDef.enum.",
            "VernacSyntacticDefinition",
            "2adf56bbd4d01ac1e41f5251b5f1f322304120db"
        ],
        [
            "End Finite.",
            "VernacEndSegment",
            "6439cc5ed43e3f4df9bb356cc5e368ef16c89087"
        ],
        [
            "Export Finite.Exports.",
            "VernacImport",
            "29e8d0595353f5c694962b7b4ca6ec173e2f3c6d"
        ],
        [
            "Canonical finEnum_unlock := Unlockable Finite.EnumDef.enumDef.",
            "VernacDefinition",
            "352359dab3ea35084aff92aff535b2bde590ffd7"
        ],
        [
            "Definition fin_pred_sort (T : finType) (pT : predType T) := pred_sort pT.",
            "VernacDefinition",
            "c2b9004121ef12faa76c8ae82c368223a8056fe8"
        ],
        [
            "Identity Coercion pred_sort_of_fin : fin_pred_sort >-> pred_sort.",
            "VernacIdentityCoercion",
            "0a401d0dc031b0860ed8a211b506752ccec96af0"
        ],
        [
            "Definition enum_mem T (mA : mem_pred _) := filter mA (Finite.enum T).",
            "VernacDefinition",
            "9b4478884d44e34479887cc9087eb8450b213ce5"
        ],
        [
            "Notation enum A := (enum_mem (mem A)).",
            "VernacSyntacticDefinition",
            "3598a48d6604e5a6d9039af523094a869015a158"
        ],
        [
            "Definition pick (T : finType) (P : pred T) := ohead (enum P).",
            "VernacDefinition",
            "1a132e6b1c6e57d82e4eb65bcc92ca18d25ed223"
        ],
        [
            "Notation \"[ 'pick' x | P ]\" := (pick (fun x => P%B)) (at level 0, x ident, format \"[ 'pick' x | P ]\") : form_scope.",
            "VernacNotation",
            "e1f9de874d433ed6d7f3063089e8900167358f3e"
        ],
        [
            "Notation \"[ 'pick' x : T | P ]\" := (pick (fun x : T => P%B)) (at level 0, x ident, only parsing) : form_scope.",
            "VernacNotation",
            "74006a3094ba165dfbc7fdfd50aa0451dbae1f5e"
        ],
        [
            "Definition pick_true T (x : T) := true.",
            "VernacDefinition",
            "32976070890e4d46ce50871a9fc9b67b3e649aa6"
        ],
        [
            "Notation \"[ 'pick' x : T ]\" := [pick x : T | pick_true x] (at level 0, x ident, only parsing).",
            "VernacNotation",
            "9438b494e197f57cb8703980eb6beaa5e63a1ccc"
        ],
        [
            "Notation \"[ 'pick' x ]\" := [pick x : _] (at level 0, x ident, only parsing) : form_scope.",
            "VernacNotation",
            "e2a30b3646aafa64f9ab4c22ea87c034525efe02"
        ],
        [
            "Notation \"[ 'pic' 'k' x : T ]\" := [pick x : T | pick_true _] (at level 0, x ident, format \"[ 'pic' 'k' x : T ]\") : form_scope.",
            "VernacNotation",
            "57acef6a476f99c91192de3ebe42dc33e8b88456"
        ],
        [
            "Notation \"[ 'pick' x | P & Q ]\" := [pick x | P && Q ] (at level 0, x ident, format \"[ '[hv ' 'pick' x | P '/ ' & Q ] ']'\") : form_scope.",
            "VernacNotation",
            "7f0faffe65210298e8e77e883744568d0c8c9d27"
        ],
        [
            "Notation \"[ 'pick' x : T | P & Q ]\" := [pick x : T | P && Q ] (at level 0, x ident, only parsing) : form_scope.",
            "VernacNotation",
            "be5f5f2b31eb2aa01b00c9809972a800a2b27bc5"
        ],
        [
            "Notation \"[ 'pick' x 'in' A ]\" := [pick x | x \\in A] (at level 0, x ident, format \"[ 'pick' x 'in' A ]\") : form_scope.",
            "VernacNotation",
            "456bb8cd6760d92f5a5cf10f76c4a5e6a8e425fc"
        ],
        [
            "Notation \"[ 'pick' x : T 'in' A ]\" := [pick x : T | x \\in A] (at level 0, x ident, only parsing) : form_scope.",
            "VernacNotation",
            "bb71deadc75b12075f04d2325710de9736c0c1d0"
        ],
        [
            "Notation \"[ 'pick' x 'in' A | P ]\" := [pick x | x \\in A & P ] (at level 0, x ident, format \"[ '[hv ' 'pick' x 'in' A '/ ' | P ] ']'\") : form_scope.",
            "VernacNotation",
            "e412c8637e5336a81ae7c2605e6208ddf4903b49"
        ],
        [
            "Notation \"[ 'pick' x : T 'in' A | P ]\" := [pick x : T | x \\in A & P ] (at level 0, x ident, only parsing) : form_scope.",
            "VernacNotation",
            "1ebe6356b30b0cb46f5e960a83856d5d1d173cf4"
        ],
        [
            "Notation \"[ 'pick' x 'in' A | P & Q ]\" := [pick x in A | P && Q] (at level 0, x ident, format \"[ '[hv ' 'pick' x 'in' A '/ ' | P '/ ' & Q ] ']'\") : form_scope.",
            "VernacNotation",
            "520445675a682f70ed52d14aecc9968e26e03364"
        ],
        [
            "Notation \"[ 'pick' x : T 'in' A | P & Q ]\" := [pick x : T in A | P && Q] (at level 0, x ident, only parsing) : form_scope.",
            "VernacNotation",
            "816ffe821a7e17d5d1708690cda07f1ae1abea14"
        ],
        [
            "Local Notation card_type := (forall T : finType, mem_pred T -> nat).",
            "VernacSyntacticDefinition",
            "d67d0d6adcb5f488100218f0265ae842ee7cdae7"
        ],
        [
            "Local Notation card_def := (fun T mA => size (enum_mem mA)).",
            "VernacSyntacticDefinition",
            "a0986e1346524d1dfb318d40072ccf650245ce23"
        ],
        [
            "Module Type CardDefSig.",
            "VernacDeclareModuleType",
            "a62558cd71f292e27e24d33d4b5d66eb01ef2b2b"
        ],
        [
            "Parameter card : card_type.",
            "VernacAssumption",
            "359a95f1a612a8cddbf113bba356912e71032463"
        ],
        [
            "Axiom cardEdef : card = card_def.",
            "VernacAssumption",
            "4bcd54079e8f1a1bedaeadc6461165bc1b6aade3"
        ],
        [
            "End CardDefSig.",
            "VernacEndSegment",
            "93d4747c07fc7492282836e8dc78441c99d9b663"
        ],
        [
            "Module CardDef : CardDefSig.",
            "VernacDefineModule",
            "36d137948ec2fe7aa92d1e5b4011e6b3f517c137"
        ],
        [
            "Definition card : card_type := card_def.",
            "VernacDefinition",
            "f93cfa2a196d5e302acb40ca04bf152cfb41a49a"
        ],
        [
            "Definition cardEdef := erefl card.",
            "VernacDefinition",
            "95afb95c56ec6fd1c97ec4964a936b214a58a6ea"
        ],
        [
            "End CardDef.",
            "VernacEndSegment",
            "e65192235272a399a3a7f2d0ecbcb50cf810c38c"
        ],
        [
            "Export CardDef.",
            "VernacImport",
            "220ad0106a6d021fba3b46ca12d18ddb29d16adb"
        ],
        [
            "Canonical card_unlock := Unlockable cardEdef.",
            "VernacDefinition",
            "2d7c6f80254bea4e55934c50157300c474121018"
        ],
        [
            "Notation \"#| A |\" := (card (mem A)) (at level 0, A at level 99, format \"#| A |\") : nat_scope.",
            "VernacNotation",
            "c5f08d9c7713598795ffc9927f862ec6f0b9f33a"
        ],
        [
            "Definition pred0b (T : finType) (P : pred T) := #|P| == 0.",
            "VernacDefinition",
            "19d81599697ffd113394f9a7e2ae9d66d8ce1bbb"
        ],
        [
            "Prenex Implicits pred0b.",
            "VernacExtend",
            "4b2be5f53a484776e13792be580e9e785366d218"
        ],
        [
            "Module FiniteQuant.",
            "VernacDefineModule",
            "2b22443676b9b31aa0f2651f0937444da370c90b"
        ],
        [
            "Variant quantified := Quantified of bool.",
            "VernacInductive",
            "01679dbf8b192b2bd0d0891821633bebe2ff992b"
        ],
        [
            "Delimit Scope fin_quant_scope with Q.",
            "VernacDelimiters",
            "93d6b5f9e93d613724476668416317612b7c48d1"
        ],
        [
            "Bind Scope fin_quant_scope with quantified.",
            "VernacBindScope",
            "0683cd630b85a80632191acbc16c72c54f0c05b9"
        ],
        [
            "Notation \"F ^*\" := (Quantified F) (at level 2).",
            "VernacNotation",
            "9e214c613fcf31be7768b8605e80aa179a27084f"
        ],
        [
            "Notation \"F ^~\" := (~~ F) (at level 2).",
            "VernacNotation",
            "d39d8979f49a2ef3f69322377a6b035b06de9cbc"
        ],
        [
            "Section Definitions.",
            "VernacBeginSection",
            "44c8aeee6f7e234b1ae876a1cda441d352768d1b"
        ],
        [
            "Variable T : finType.",
            "VernacAssumption",
            "6349381da4d33cbc2eeaf1bade38718e15f7a2c9"
        ],
        [
            "Implicit Types (B : quantified) (x y : T).",
            "VernacReserve",
            "8d3ee5d4501a923b93ed2e22e60e4136450a2a13"
        ],
        [
            "Definition quant0b Bp := pred0b [pred x : T | let: F^* := Bp x x in F].",
            "VernacDefinition",
            "1824f24477243f75cc44eb78d4d9ae23e35c5836"
        ],
        [
            "Definition ex B x y := B.",
            "VernacDefinition",
            "def1723a4d12bd852b896482ede39b464d2ca23c"
        ],
        [
            "Definition all B x y := let: F^* := B in F^~^*.",
            "VernacDefinition",
            "1af52917a0e0ced40f113cdc147584f8888efe45"
        ],
        [
            "Definition all_in C B x y := let: F^* := B in (C ==> F)^~^*.",
            "VernacDefinition",
            "7930053227053601bb694068ee98535514d1b9e0"
        ],
        [
            "Definition ex_in C B x y := let: F^* := B in (C && F)^*.",
            "VernacDefinition",
            "59e1a5168e1dc9380053a693f54246b2c3fc56f7"
        ],
        [
            "End Definitions.",
            "VernacEndSegment",
            "a9ff902ce1bf921ade03bc4535b4de21f2fcc02c"
        ],
        [
            "Notation \"[ x | B ]\" := (quant0b (fun x => B x)) (at level 0, x ident).",
            "VernacNotation",
            "1b91cdfe9c307b052aae8aedc7d3bc09622087a1"
        ],
        [
            "Notation \"[ x : T | B ]\" := (quant0b (fun x : T => B x)) (at level 0, x ident).",
            "VernacNotation",
            "cde32ae1d6f1d2f51cec8bd8ce5b95b52077ca7a"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Notation \", F\" := F^* (at level 200, format \", '/ ' F\") : fin_quant_scope.",
            "VernacNotation",
            "d7e3ba8a4c3dec9245068befaa1e769447630ef5"
        ],
        [
            "Notation \"[ 'forall' x B ]\" := [x | all B] (at level 0, x at level 99, B at level 200, format \"[ '[hv' 'forall' x B ] ']'\") : bool_scope.",
            "VernacNotation",
            "e02ba9eb8dddfc57c5d661d470934b3064829136"
        ],
        [
            "Notation \"[ 'forall' x : T B ]\" := [x : T | all B] (at level 0, x at level 99, B at level 200, only parsing) : bool_scope.",
            "VernacNotation",
            "de07449ed5dfcc5fd05e7d7c0bd41dd07936cd77"
        ],
        [
            "Notation \"[ 'forall' ( x | C ) B ]\" := [x | all_in C B] (at level 0, x at level 99, B at level 200, format \"[ '[hv' '[' 'forall' ( x '/ ' | C ) ']' B ] ']'\") : bool_scope.",
            "VernacNotation",
            "e7f57a03ea7d8b3686902d5c737e98dc62dc28aa"
        ],
        [
            "Notation \"[ 'forall' ( x : T | C ) B ]\" := [x : T | all_in C B] (at level 0, x at level 99, B at level 200, only parsing) : bool_scope.",
            "VernacNotation",
            "aac68955050b6962ce8698a2f9ddd857de52671f"
        ],
        [
            "Notation \"[ 'forall' x 'in' A B ]\" := [x | all_in (x \\in A) B] (at level 0, x at level 99, B at level 200, format \"[ '[hv' '[' 'forall' x '/ ' 'in' A ']' B ] ']'\") : bool_scope.",
            "VernacNotation",
            "462188ae903baa1e235db694701e50d8d5d717b9"
        ],
        [
            "Notation \"[ 'forall' x : T 'in' A B ]\" := [x : T | all_in (x \\in A) B] (at level 0, x at level 99, B at level 200, only parsing) : bool_scope.",
            "VernacNotation",
            "e4845236db40ade8be207f72862b34d892057e32"
        ],
        [
            "Notation \", 'forall' x B\" := [x | all B]^* (at level 200, x at level 99, B at level 200, format \", '/ ' 'forall' x B\") : fin_quant_scope.",
            "VernacNotation",
            "5e9b8b7d1062fcb7bb65659b2520a588e6a72c87"
        ],
        [
            "Notation \", 'forall' x : T B\" := [x : T | all B]^* (at level 200, x at level 99, B at level 200, only parsing) : fin_quant_scope.",
            "VernacNotation",
            "dbff50b9c4feb9b761bb419294a631490291cbb0"
        ],
        [
            "Notation \", 'forall' ( x | C ) B\" := [x | all_in C B]^* (at level 200, x at level 99, B at level 200, format \", '/ ' '[' 'forall' ( x '/ ' | C ) ']' B\") : fin_quant_scope.",
            "VernacNotation",
            "e027c86acd59bd7737bbf54d9096f5729017fcbe"
        ],
        [
            "Notation \", 'forall' ( x : T | C ) B\" := [x : T | all_in C B]^* (at level 200, x at level 99, B at level 200, only parsing) : fin_quant_scope.",
            "VernacNotation",
            "72e465d8009da4d1b3491892521d792e3d0b7f1b"
        ],
        [
            "Notation \", 'forall' x 'in' A B\" := [x | all_in (x \\in A) B]^* (at level 200, x at level 99, B at level 200, format \", '/ ' '[' 'forall' x '/ ' 'in' A ']' B\") : bool_scope.",
            "VernacNotation",
            "cf3c8c1f0c1e116793f52de192a12e8aa1ae38fd"
        ],
        [
            "Notation \", 'forall' x : T 'in' A B\" := [x : T | all_in (x \\in A) B]^* (at level 200, x at level 99, B at level 200, only parsing) : bool_scope.",
            "VernacNotation",
            "7e12271c6ea74474e874f42a294b0b26dfcfbcbc"
        ],
        [
            "Notation \"[ 'exists' x B ]\" := [x | ex B]^~ (at level 0, x at level 99, B at level 200, format \"[ '[hv' 'exists' x B ] ']'\") : bool_scope.",
            "VernacNotation",
            "9c4bb2cdcf1c48bebd2a3ec0d9dbe872091d0db3"
        ],
        [
            "Notation \"[ 'exists' x : T B ]\" := [x : T | ex B]^~ (at level 0, x at level 99, B at level 200, only parsing) : bool_scope.",
            "VernacNotation",
            "31f55c50b793b6f533f4388af8bae3571edf2d87"
        ],
        [
            "Notation \"[ 'exists' ( x | C ) B ]\" := [x | ex_in C B]^~ (at level 0, x at level 99, B at level 200, format \"[ '[hv' '[' 'exists' ( x '/ ' | C ) ']' B ] ']'\") : bool_scope.",
            "VernacNotation",
            "2ae6328acd9f9b40d23deab54a725803c2dfe796"
        ],
        [
            "Notation \"[ 'exists' ( x : T | C ) B ]\" := [x : T | ex_in C B]^~ (at level 0, x at level 99, B at level 200, only parsing) : bool_scope.",
            "VernacNotation",
            "321145f7dbb10c84d148ae35085feef22fb7c828"
        ],
        [
            "Notation \"[ 'exists' x 'in' A B ]\" := [x | ex_in (x \\in A) B]^~ (at level 0, x at level 99, B at level 200, format \"[ '[hv' '[' 'exists' x '/ ' 'in' A ']' B ] ']'\") : bool_scope.",
            "VernacNotation",
            "913a29f1f089e2db90406223a7a81d1500dacb67"
        ],
        [
            "Notation \"[ 'exists' x : T 'in' A B ]\" := [x : T | ex_in (x \\in A) B]^~ (at level 0, x at level 99, B at level 200, only parsing) : bool_scope.",
            "VernacNotation",
            "ca9dea2e948b2b61059ad2a94c0986f20f752032"
        ],
        [
            "Notation \", 'exists' x B\" := [x | ex B]^~^* (at level 200, x at level 99, B at level 200, format \", '/ ' 'exists' x B\") : fin_quant_scope.",
            "VernacNotation",
            "c1d5c7b1b5a6b3f65385af397b47580c3fddc447"
        ],
        [
            "Notation \", 'exists' x : T B\" := [x : T | ex B]^~^* (at level 200, x at level 99, B at level 200, only parsing) : fin_quant_scope.",
            "VernacNotation",
            "280da414d61b886bfc48f331d74e04890ee30a23"
        ],
        [
            "Notation \", 'exists' ( x | C ) B\" := [x | ex_in C B]^~^* (at level 200, x at level 99, B at level 200, format \", '/ ' '[' 'exists' ( x '/ ' | C ) ']' B\") : fin_quant_scope.",
            "VernacNotation",
            "aa025388ab3c3f47246927af4861b31aad690aeb"
        ],
        [
            "Notation \", 'exists' ( x : T | C ) B\" := [x : T | ex_in C B]^~^* (at level 200, x at level 99, B at level 200, only parsing) : fin_quant_scope.",
            "VernacNotation",
            "7d35a064d79d3004ae0dc31637d98a9eb1352b10"
        ],
        [
            "Notation \", 'exists' x 'in' A B\" := [x | ex_in (x \\in A) B]^~^* (at level 200, x at level 99, B at level 200, format \", '/ ' '[' 'exists' x '/ ' 'in' A ']' B\") : bool_scope.",
            "VernacNotation",
            "f6ebfe5989d7bff6439da07cfca466873f081bd2"
        ],
        [
            "Notation \", 'exists' x : T 'in' A B\" := [x : T | ex_in (x \\in A) B]^~^* (at level 200, x at level 99, B at level 200, only parsing) : bool_scope.",
            "VernacNotation",
            "6b05f2a50d4f7be032a386b7dc36082f2f39aa21"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End FiniteQuant.",
            "VernacEndSegment",
            "745bbec22f004768ed598cedf0e36fcf1ff42d08"
        ],
        [
            "Export FiniteQuant.Exports.",
            "VernacImport",
            "5daa917a84b36993753d8de336444be6611a6e56"
        ],
        [
            "Definition disjoint T (A B : mem_pred _) := @pred0b T (predI A B).",
            "VernacDefinition",
            "40acbe66e1ed6feb04e09cca6ab3267aa7773ce8"
        ],
        [
            "Notation \"[ 'disjoint' A & B ]\" := (disjoint (mem A) (mem B)) (at level 0, format \"'[hv' [ 'disjoint' '/ ' A '/' & B ] ']'\") : bool_scope.",
            "VernacNotation",
            "7b37b746f60334dd5b9843f75368a228acc37056"
        ],
        [
            "Local Notation subset_type := (forall (T : finType) (A B : mem_pred T), bool).",
            "VernacSyntacticDefinition",
            "80b5afb2399a9a9128025083edfc815be09da19a"
        ],
        [
            "Local Notation subset_def := (fun T A B => pred0b (predD A B)).",
            "VernacSyntacticDefinition",
            "f9e3e008590403432066f673ac506d65e720eec9"
        ],
        [
            "Module Type SubsetDefSig.",
            "VernacDeclareModuleType",
            "5e4f82e5dd7aaae371a6cbbef7905934c8815532"
        ],
        [
            "Parameter subset : subset_type.",
            "VernacAssumption",
            "54474fd5f95a3265c5e6b7c3f9a9e46c138e3c38"
        ],
        [
            "Axiom subsetEdef : subset = subset_def.",
            "VernacAssumption",
            "1f29a49298cac470096acc0384b354783541dbb9"
        ],
        [
            "End SubsetDefSig.",
            "VernacEndSegment",
            "ebc682fed029144c8ea205d8d2005dede132d6a0"
        ],
        [
            "Module Export SubsetDef : SubsetDefSig.",
            "VernacDefineModule",
            "89b6f62b8d5b3cc7c14e43f76f2be8ef40e43f73"
        ],
        [
            "Definition subset : subset_type := subset_def.",
            "VernacDefinition",
            "9d8f09a548e5ca39ecee182502fd4053cfea758d"
        ],
        [
            "Definition subsetEdef := erefl subset.",
            "VernacDefinition",
            "87cefd9dffde48582080922c6ab01d0331e2cfe8"
        ],
        [
            "End SubsetDef.",
            "VernacEndSegment",
            "6b357778567e58ff58ecbbe34be670387a6b31a1"
        ],
        [
            "Canonical subset_unlock := Unlockable subsetEdef.",
            "VernacDefinition",
            "1bc97237f6df7ce3d322ae9d2aa74be6fb7acd34"
        ],
        [
            "Notation \"A \\subset B\" := (subset (mem A) (mem B)) (at level 70, no associativity) : bool_scope.",
            "VernacNotation",
            "e2220680076f4053f4f62527a4cf505a27e67f5a"
        ],
        [
            "Definition proper T A B := @subset T A B && ~~ subset B A.",
            "VernacDefinition",
            "6d9fbfdc7e150b5e949841227623992c2de661c8"
        ],
        [
            "Notation \"A \\proper B\" := (proper (mem A) (mem B)) (at level 70, no associativity) : bool_scope.",
            "VernacNotation",
            "3ed8300081f8e30673bec8eabb0d308952beeabc"
        ],
        [
            "Section OpsTheory.",
            "VernacBeginSection",
            "737edbca66540897892046d8d03dee6dd456ce90"
        ],
        [
            "Variable T : finType.",
            "VernacAssumption",
            "6349381da4d33cbc2eeaf1bade38718e15f7a2c9"
        ],
        [
            "Implicit Types A B C P Q : pred T.",
            "VernacReserve",
            "82c44609693b4a626e99485d3ecddafcfdb74788"
        ],
        [
            "Implicit Types x y : T.",
            "VernacReserve",
            "dffa3d8127715759eaec1c07eaa9c95d50e83474"
        ],
        [
            "Implicit Type s : seq T.",
            "VernacReserve",
            "d07b3ddcd5fd915117241a5590804fc28c5a4d12"
        ],
        [
            "Lemma enumP : Finite.axiom (Finite.enum T).",
            "VernacStartTheoremProof",
            "7b9c2cdf7d4b8117e86dab78170e7f836652e71b"
        ],
        [
            "by rewrite unlock; case T => ? [? []].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section EnumPick.",
            "VernacBeginSection",
            "262a1c23894019c3427c2553e2b925eb8c0ed59d"
        ],
        [
            "Variable P : pred T.",
            "VernacAssumption",
            "ad45a72dc24bd97fe1bf8fa0f6d1c5512abe36b8"
        ],
        [
            "Lemma enumT : enum T = Finite.enum T.",
            "VernacStartTheoremProof",
            "71f8e717ad7daa8180996a1c7a6da94c3b0d3523"
        ],
        [
            "exact: filter_predT.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_enum A : enum A =i A.",
            "VernacStartTheoremProof",
            "1fa007ad212c0e30c255179eefc4349dccdef5ea"
        ],
        [
            "by move=> x; rewrite mem_filter andbC -has_pred1 has_count enumP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma enum_uniq : uniq (enum P).",
            "VernacStartTheoremProof",
            "2f8fb49480bd9e8dfff34503b233e882ccb1e99f"
        ],
        [
            "by apply/filter_uniq/count_mem_uniq => x; rewrite enumP -enumT mem_enum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma enum0 : enum pred0 = Nil T.",
            "VernacStartTheoremProof",
            "f38aff663b93499697511a1478d53e55dbd6fa8c"
        ],
        [
            "exact: filter_pred0.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma enum1 x : enum (pred1 x) = [:: x].",
            "VernacStartTheoremProof",
            "663a69e8df4981c79a1f698f43b95d29a722cf28"
        ],
        [
            "rewrite [enum _](all_pred1P x _ _); first by rewrite size_filter enumP.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/allP=> y; rewrite mem_enum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variant pick_spec : option T -> Type := | Pick x of P x : pick_spec (Some x) | Nopick of P =1 xpred0 : pick_spec None.",
            "VernacInductive",
            "84f83dacd75494dce80f8fbff2d54d06f1a1b185"
        ],
        [
            "Lemma pickP : pick_spec (pick P).",
            "VernacStartTheoremProof",
            "274dc15803f0e3844165b13e57f5325a9bb30f58"
        ],
        [
            "rewrite /pick; case: (enum _) (mem_enum P) => [|x s] Pxs /=.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by right; apply: fsym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by left; rewrite -[P _]Pxs mem_head.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EnumPick.",
            "VernacEndSegment",
            "4729956521b6eb654b88b13a8d62e10b7b855443"
        ],
        [
            "Lemma eq_enum P Q : P =i Q -> enum P = enum Q.",
            "VernacStartTheoremProof",
            "a38067224bc314d1535624fd8f314a5b4e85e65f"
        ],
        [
            "by move=> eqPQ; apply: eq_filter.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_pick P Q : P =1 Q -> pick P = pick Q.",
            "VernacStartTheoremProof",
            "6ce4ca770ac17d1a5c792a1738d3227a439c5e8e"
        ],
        [
            "by move=> eqPQ; rewrite /pick (eq_enum eqPQ).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardE A : #|A| = size (enum A).",
            "VernacStartTheoremProof",
            "a5957de0e30f17337aa5325ae6d91060a3314be2"
        ],
        [
            "by rewrite unlock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_card A B : A =i B -> #|A| = #|B|.",
            "VernacStartTheoremProof",
            "ad84885922858857bd5238144f6b6be4c75cf535"
        ],
        [
            "by move=> eqAB; rewrite !cardE (eq_enum eqAB).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_card_trans A B n : #|A| = n -> B =i A -> #|B| = n.",
            "VernacStartTheoremProof",
            "ca4160b289139d0f029c6392347ae93f9cbb9921"
        ],
        [
            "by move <-; apply: eq_card.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card0 : #|@pred0 T| = 0.",
            "VernacStartTheoremProof",
            "8d01863a75cdec01069bdd429b3a91fecea61b1c"
        ],
        [
            "by rewrite cardE enum0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardT : #|T| = size (enum T).",
            "VernacStartTheoremProof",
            "b0177463ba97a744b9d6a37217f58f6508f4a4dd"
        ],
        [
            "by rewrite cardE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card1 x : #|pred1 x| = 1.",
            "VernacStartTheoremProof",
            "11488c8b4dd63b475b45f5f1972c95c573f1aed5"
        ],
        [
            "by rewrite cardE enum1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_card0 A : A =i pred0 -> #|A| = 0.",
            "VernacStartTheoremProof",
            "801356c4351c14bd1bc2357e93ed1602d379649a"
        ],
        [
            "exact: eq_card_trans card0.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_cardT A : A =i predT -> #|A| = size (enum T).",
            "VernacStartTheoremProof",
            "1eaee212be8f5079de7b3882b332001670c84fca"
        ],
        [
            "exact: eq_card_trans cardT.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_card1 x A : A =i pred1 x -> #|A| = 1.",
            "VernacStartTheoremProof",
            "994e78839f1591b558904f1eab6aaa238f7360a1"
        ],
        [
            "exact: eq_card_trans (card1 x).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardUI A B : #|[predU A & B]| + #|[predI A & B]| = #|A| + #|B|.",
            "VernacStartTheoremProof",
            "21386672b85ded8cd36952acb372e147664a6a5c"
        ],
        [
            "by rewrite !cardE !size_filter count_predUI.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardID B A : #|[predI A & B]| + #|[predD A & B]| = #|A|.",
            "VernacStartTheoremProof",
            "d95da80ce76784f978c17d13df3a2118785380ed"
        ],
        [
            "rewrite -cardUI addnC [#|predI _ _|]eq_card0 => [|x] /=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by apply: eq_card => x; rewrite !inE andbC -andb_orl orbN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite !inE -!andbA andbC andbA andbN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardC A : #|A| + #|[predC A]| = #|T|.",
            "VernacStartTheoremProof",
            "b937ff3f5ee03de26bdf781d4eb6d34761542211"
        ],
        [
            "by rewrite !cardE !size_filter count_predC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardU1 x A : #|[predU1 x & A]| = (x \\notin A) + #|A|.",
            "VernacStartTheoremProof",
            "3127355de61ef5a86430fe4c910f4d662888027e"
        ],
        [
            "case Ax: (x \\in A).",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply: eq_card => y; rewrite inE /=; case: eqP => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /= -(card1 x) -cardUI addnC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite [#|predI _ _|]eq_card0 => [|y /=]; first exact: eq_card.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !inE; case: eqP => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card2 x y : #|pred2 x y| = (x != y).+1.",
            "VernacStartTheoremProof",
            "db6a419b4fee90e127a4d3769d0b923acd1b8e5c"
        ],
        [
            "by rewrite cardU1 card1 addn1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardC1 x : #|predC1 x| = #|T|.-1.",
            "VernacStartTheoremProof",
            "66aa689deb192629615403c7f508931c68f971af"
        ],
        [
            "by rewrite -(cardC (pred1 x)) card1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardD1 x A : #|A| = (x \\in A) + #|[predD1 A & x]|.",
            "VernacStartTheoremProof",
            "cff4fd959cb1c22b9e34fd8cd066471dc2ba5a85"
        ],
        [
            "case Ax: (x \\in A); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: eq_card => y; rewrite !inE /=; case: eqP => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /= -(card1 x) -cardUI addnC /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite [#|predI _ _|]eq_card0 => [|y]; last by rewrite !inE; case: eqP.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: eq_card => y; rewrite !inE; case: eqP => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma max_card A : #|A| <= #|T|.",
            "VernacStartTheoremProof",
            "e000bd3531609c371b0d4a967678412a70d97621"
        ],
        [
            "by rewrite -(cardC A) leq_addr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_size s : #|s| <= size s.",
            "VernacStartTheoremProof",
            "aacc42626f91ec7d6076034de5a9bf123b463553"
        ],
        [
            "elim: s => [|x s IHs] /=; first by rewrite card0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite cardU1 /=; case: (~~ _) => //; apply: leqW.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_uniqP s : reflect (#|s| = size s) (uniq s).",
            "VernacStartTheoremProof",
            "e4f13398bc22d901d928b7f29bf650cf4442d38b"
        ],
        [
            "elim: s => [|x s IHs]; first by left; apply: card0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite cardU1 /= /addn; case: {+}(x \\in s) => /=.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by right=> card_Ssz; have:= card_size s; rewrite card_Ssz ltnn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: (iffP IHs) => [<-| [<-]].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card0_eq A : #|A| = 0 -> A =i pred0.",
            "VernacStartTheoremProof",
            "9227b8b52c5c401137e4321f592f94c1587dc410"
        ],
        [
            "by move=> A0 x; apply/idP => Ax; rewrite (cardD1 x) Ax in A0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pred0P P : reflect (P =1 pred0) (pred0b P).",
            "VernacStartTheoremProof",
            "04e158eeb089de1861d1136cae0830179b03f19f"
        ],
        [
            "by apply: (iffP eqP); [apply: card0_eq | apply: eq_card0].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pred0Pn P : reflect (exists x, P x) (~~ pred0b P).",
            "VernacStartTheoremProof",
            "cb851cfecf22d448dbe73df50de1f1d84ea39c3d"
        ],
        [
            "case: (pickP P) => [x Px | P0].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite (introN (pred0P P)) => [|P0]; [left; exists x | rewrite P0 in Px].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite -lt0n eq_card0 //; right=> [[x]]; rewrite P0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_gt0P A : reflect (exists i, i \\in A) (#|A| > 0).",
            "VernacStartTheoremProof",
            "07d83ec35e500e06cfa21fbecc93a9ab5d1e55f5"
        ],
        [
            "by rewrite lt0n; apply: pred0Pn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetE A B : (A \\subset B) = pred0b [predD A & B].",
            "VernacStartTheoremProof",
            "38ee3a2be243739c67814c605ee5725ff66bccbb"
        ],
        [
            "by rewrite unlock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetP A B : reflect {subset A <= B} (A \\subset B).",
            "VernacStartTheoremProof",
            "02b5f5d5d4db158870f9ae74ab65c0cff048cbbe"
        ],
        [
            "rewrite unlock; apply: (iffP (pred0P _)) => [AB0 x | sAB x /=].",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by apply/implyP; apply/idPn; rewrite negb_imply andbC [_ && _]AB0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite andbC -negb_imply; apply/negbF/implyP; apply: sAB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subsetPn A B : reflect (exists2 x, x \\in A & x \\notin B) (~~ (A \\subset B)).",
            "VernacStartTheoremProof",
            "09b16cab17f673007a70cecfea6ab13f70e74afd"
        ],
        [
            "rewrite unlock; apply: (iffP (pred0Pn _)) => [[x] | [x Ax nBx]].",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by case/andP; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by exists x; rewrite /= nBx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subset_leq_card A B : A \\subset B -> #|A| <= #|B|.",
            "VernacStartTheoremProof",
            "0bbfa49203843de9e2d4e549c270580dfc3a39f5"
        ],
        [
            "move=> sAB.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite -(cardID A B) [#|predI _ _|](@eq_card _ A) ?leq_addr //= => x.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite !inE andbC; case Ax: (x \\in A) => //; apply: subsetP Ax.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subxx_hint (mA : mem_pred T) : subset mA mA.",
            "VernacStartTheoremProof",
            "e841cec910b2f758a77d13dd096b20853d4aff7b"
        ],
        [
            "by case: mA => A; have:= introT (subsetP A A); rewrite !unlock => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve subxx_hint : core.",
            "VernacHints",
            "b6eaf77af808d9d20d4ee26924c16dace657e312"
        ],
        [
            "Lemma subxx (pT : predType T) (pA : pT) : pA \\subset pA.",
            "VernacStartTheoremProof",
            "e43cdadb0025c2d0b014f9ede31014f86a268810"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_subset A1 A2 : A1 =i A2 -> subset (mem A1) =1 subset (mem A2).",
            "VernacStartTheoremProof",
            "c26cdecc01783a6e7ef1b5853babd637fe8078b4"
        ],
        [
            "move=> eqA12 [B]; rewrite !unlock; congr (_ == 0).",
            "VernacExtend",
            "485e46f06ecb626ff6a640f6969694ae3ffba974"
        ],
        [
            "by apply: eq_card => x; rewrite inE /= eqA12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_subset_r B1 B2 : B1 =i B2 -> (@subset T)^~ (mem B1) =1 (@subset T)^~ (mem B2).",
            "VernacStartTheoremProof",
            "cd0da02a68c5ab0893516947bb85a8d5e4900aee"
        ],
        [
            "move=> eqB12 [A]; rewrite !unlock; congr (_ == 0).",
            "VernacExtend",
            "485e46f06ecb626ff6a640f6969694ae3ffba974"
        ],
        [
            "by apply: eq_card => x; rewrite !inE /= eqB12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_subxx A B : A =i B -> A \\subset B.",
            "VernacStartTheoremProof",
            "baf8482624a332a50793a6dfa1e27c3e164ce2af"
        ],
        [
            "by move/eq_subset->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subset_predT A : A \\subset T.",
            "VernacStartTheoremProof",
            "1310bb5337f657317f3690faf983783a53096c22"
        ],
        [
            "by apply/subsetP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma predT_subset A : T \\subset A -> forall x, x \\in A.",
            "VernacStartTheoremProof",
            "aa9505cf28aeac6120cc984034eb0c7a6d7a1abf"
        ],
        [
            "by move/subsetP=> allA x; apply: allA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subset_pred1 A x : (pred1 x \\subset A) = (x \\in A).",
            "VernacStartTheoremProof",
            "2fb7d5c6ed94bd818873426e9391db9a6331943b"
        ],
        [
            "by apply/subsetP/idP=> [-> // | Ax y /eqP-> //]; apply: eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subset_eqP A B : reflect (A =i B) ((A \\subset B) && (B \\subset A)).",
            "VernacStartTheoremProof",
            "4ee4c62f087d2c421701709d5837a25458547bfe"
        ],
        [
            "apply: (iffP andP) => [[sAB sBA] x| eqAB]; last by rewrite !eq_subxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/idP/idP; apply: subsetP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subset_cardP A B : #|A| = #|B| -> reflect (A =i B) (A \\subset B).",
            "VernacStartTheoremProof",
            "0881513b27368342b84534f0daa2a83f6ffd00c4"
        ],
        [
            "move=> eqcAB; case: (subsetP A B) (subset_eqP A B) => //= sAB.",
            "VernacExtend",
            "a01b3d93f426ff68d360351709a5fa5af822af32"
        ],
        [
            "case: (subsetP B A) => [//|[]] x Bx; apply/idPn => Ax.",
            "VernacExtend",
            "d62e4c271de3f2a9ff5062b8b89d3c57d965c518"
        ],
        [
            "case/idP: (ltnn #|A|); rewrite {2}eqcAB (cardD1 x B) Bx /=.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "apply: subset_leq_card; apply/subsetP=> y Ay; rewrite inE /= andbC.",
            "VernacExtend",
            "7d4450169cd8610cf3ff90cd2eeb2f84258ab13d"
        ],
        [
            "by rewrite sAB //; apply/eqP => eqyx; rewrite -eqyx Ay in Ax.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subset_leqif_card A B : A \\subset B -> #|A| <= #|B| ?= iff (B \\subset A).",
            "VernacStartTheoremProof",
            "3633e4e92ff5224ebc527f2c868385c62b87cb62"
        ],
        [
            "move=> sAB; split; [exact: subset_leq_card | apply/eqP/idP].",
            "VernacExtend",
            "07f368234ce5c3015c898eaeb391f22f06151f50"
        ],
        [
            "by move/subset_cardP=> sABP; rewrite (eq_subset_r (sABP sAB)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=> sBA; apply: eq_card; apply/subset_eqP; rewrite sAB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subset_trans A B C : A \\subset B -> B \\subset C -> A \\subset C.",
            "VernacStartTheoremProof",
            "1e2eafc1e70de045b92a1fdc1304d2fda9368643"
        ],
        [
            "by move/subsetP=> sAB /subsetP=> sBC; apply/subsetP=> x /sAB; apply: sBC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subset_all s A : (s \\subset A) = all (mem A) s.",
            "VernacStartTheoremProof",
            "c432cb811a48b75cab5a4f113b1dd8f7d00b310b"
        ],
        [
            "exact: (sameP (subsetP _ _) allP).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma properE A B : A \\proper B = (A \\subset B) && ~~(B \\subset A).",
            "VernacStartTheoremProof",
            "43abb97acc79cd262772f242947d97038bae0a1d"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma properP A B : reflect (A \\subset B /\\ (exists2 x, x \\in B & x \\notin A)) (A \\proper B).",
            "VernacStartTheoremProof",
            "82bcac65ea2b73bb15f4c1d127f47f6c32794ffc"
        ],
        [
            "by rewrite properE; apply: (iffP andP) => [] [-> /subsetPn].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma proper_sub A B : A \\proper B -> A \\subset B.",
            "VernacStartTheoremProof",
            "3d9cc9286534f27c98832933d8d92b0ce87667e5"
        ],
        [
            "by case/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma proper_subn A B : A \\proper B -> ~~ (B \\subset A).",
            "VernacStartTheoremProof",
            "180481371bad57b3cf7101c283b95c85786e2c5d"
        ],
        [
            "by case/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma proper_trans A B C : A \\proper B -> B \\proper C -> A \\proper C.",
            "VernacStartTheoremProof",
            "2fe21a0a10ae35005fe50789b11bd80ae321dc79"
        ],
        [
            "case/properP=> sAB [x Bx nAx] /properP[sBC [y Cy nBy]].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite properE (subset_trans sAB) //=; apply/subsetPn; exists y => //.",
            "VernacExtend",
            "0288f65064e83af8559a49f90a2eba4421e03fd4"
        ],
        [
            "by apply: contra nBy; apply: subsetP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma proper_sub_trans A B C : A \\proper B -> B \\subset C -> A \\proper C.",
            "VernacStartTheoremProof",
            "da0d08510ab919198ee7e46825f41bf32cb6df67"
        ],
        [
            "case/properP=> sAB [x Bx nAx] sBC; rewrite properE (subset_trans sAB) //.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by apply/subsetPn; exists x; rewrite ?(subsetP _ _ sBC).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_proper_trans A B C : A \\subset B -> B \\proper C -> A \\proper C.",
            "VernacStartTheoremProof",
            "ba80e81be325b0942471ab7bf532502c6c5107ae"
        ],
        [
            "move=> sAB /properP[sBC [x Cx nBx]]; rewrite properE (subset_trans sAB) //.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by apply/subsetPn; exists x => //; apply: contra nBx; apply: subsetP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma proper_card A B : A \\proper B -> #|A| < #|B|.",
            "VernacStartTheoremProof",
            "86a41e6ea9852917d8ece71426d68911118b064d"
        ],
        [
            "by case/andP=> sAB nsBA; rewrite ltn_neqAle !(subset_leqif_card sAB) andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma proper_irrefl A : ~~ (A \\proper A).",
            "VernacStartTheoremProof",
            "f4f517275fbfee995eb36ba565aedac12435c443"
        ],
        [
            "by rewrite properE subxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma properxx A : (A \\proper A) = false.",
            "VernacStartTheoremProof",
            "78080df6316b2309b9ae73674a6ee1742f049ed2"
        ],
        [
            "by rewrite properE subxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_proper A B : A =i B -> proper (mem A) =1 proper (mem B).",
            "VernacStartTheoremProof",
            "7b9308e0ec44f42fbad18c92926339c29d802214"
        ],
        [
            "move=> eAB [C]; congr (_ && _); first exact: (eq_subset eAB).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite (eq_subset_r eAB).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_proper_r A B : A =i B -> (@proper T)^~ (mem A) =1 (@proper T)^~ (mem B).",
            "VernacStartTheoremProof",
            "51f2b3d95db71dee120acbfa985c24601b89c280"
        ],
        [
            "move=> eAB [C]; congr (_ && _); first exact: (eq_subset_r eAB).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite (eq_subset eAB).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma disjoint_sym A B : [disjoint A & B] = [disjoint B & A].",
            "VernacStartTheoremProof",
            "88b33af0873c405545bf6340bef14a456dcb3459"
        ],
        [
            "by congr (_ == 0); apply: eq_card => x; apply: andbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_disjoint A1 A2 : A1 =i A2 -> disjoint (mem A1) =1 disjoint (mem A2).",
            "VernacStartTheoremProof",
            "f4470e5b6c2138049c5e868717b11970690f3a24"
        ],
        [
            "by move=> eqA12 [B]; congr (_ == 0); apply: eq_card => x; rewrite !inE eqA12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_disjoint_r B1 B2 : B1 =i B2 -> (@disjoint T)^~ (mem B1) =1 (@disjoint T)^~ (mem B2).",
            "VernacStartTheoremProof",
            "1c66b0785850ac0b1fe50d9ce1afdcacfd88a7b7"
        ],
        [
            "by move=> eqB12 [A]; congr (_ == 0); apply: eq_card => x; rewrite !inE eqB12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subset_disjoint A B : (A \\subset B) = [disjoint A & [predC B]].",
            "VernacStartTheoremProof",
            "b578d177cbd5f5ec34a9170ff8c3e495688470bd"
        ],
        [
            "by rewrite disjoint_sym unlock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma disjoint_subset A B : [disjoint A & B] = (A \\subset [predC B]).",
            "VernacStartTheoremProof",
            "3e68fb096cd4c4c3b1db610c1077df1b68f7fd01"
        ],
        [
            "by rewrite subset_disjoint; apply: eq_disjoint_r => x; rewrite !inE /= negbK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma disjoint_trans A B C : A \\subset B -> [disjoint B & C] -> [disjoint A & C].",
            "VernacStartTheoremProof",
            "6f749748e055743baa4d48fd7507f49ee2ad99ec"
        ],
        [
            "by rewrite 2!disjoint_subset; apply: subset_trans.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma disjoint0 A : [disjoint pred0 & A].",
            "VernacStartTheoremProof",
            "a8b5c5e850d0bfc9e078c0b5764f76fd3e49bdd2"
        ],
        [
            "exact/pred0P.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_disjoint0 A B : A =i pred0 -> [disjoint A & B].",
            "VernacStartTheoremProof",
            "56793b2e100b2af027854441079e359e1d92e58a"
        ],
        [
            "by move/eq_disjoint->; apply: disjoint0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma disjoint1 x A : [disjoint pred1 x & A] = (x \\notin A).",
            "VernacStartTheoremProof",
            "d7e7eadb7dd68f9393a82f6601f124052761fee2"
        ],
        [
            "apply/negbRL/(sameP (pred0Pn _)).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "apply: introP => [Ax | notAx [_ /andP[/eqP->]]]; last exact: negP.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by exists x; rewrite !inE eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_disjoint1 x A B : A =i pred1 x -> [disjoint A & B] = (x \\notin B).",
            "VernacStartTheoremProof",
            "219a1a6bad5a245916ffdf814c593ee2b0dae7e2"
        ],
        [
            "by move/eq_disjoint->; apply: disjoint1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma disjointU A B C : [disjoint predU A B & C] = [disjoint A & C] && [disjoint B & C].",
            "VernacStartTheoremProof",
            "f62e7d4075d20e5a34207155de3be512e4521770"
        ],
        [
            "case: [disjoint A & C] / (pred0P (xpredI A C)) => [A0 | nA0] /=.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by congr (_ == 0); apply: eq_card => x; rewrite [x \\in _]andb_orl A0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/pred0P=> nABC; case: nA0 => x; apply/idPn=> /=; move/(_ x): nABC.",
            "VernacExtend",
            "2850405d4bca4121840235359a307b271b0b8101"
        ],
        [
            "by rewrite [_ x]andb_orl; case/norP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma disjointU1 x A B : [disjoint predU1 x A & B] = (x \\notin B) && [disjoint A & B].",
            "VernacStartTheoremProof",
            "f322c0e33e33b5cddfaec8219e777b9417ffe64e"
        ],
        [
            "by rewrite disjointU disjoint1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma disjoint_cons x s B : [disjoint x :: s & B] = (x \\notin B) && [disjoint s & B].",
            "VernacStartTheoremProof",
            "29a2a0e393ddd57cd1a3ee7828c9b1a7e89e2408"
        ],
        [
            "exact: disjointU1.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma disjoint_has s A : [disjoint s & A] = ~~ has (mem A) s.",
            "VernacStartTheoremProof",
            "84a65212c8f45f2d9523804a13d6049e7183a933"
        ],
        [
            "rewrite -(@eq_has _ (mem (enum A))) => [|x]; last exact: mem_enum.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite has_sym has_filter -filter_predI -has_filter has_count -eqn0Ngt.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -size_filter /disjoint /pred0b unlock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma disjoint_cat s1 s2 A : [disjoint s1 ++ s2 & A] = [disjoint s1 & A] && [disjoint s2 & A].",
            "VernacStartTheoremProof",
            "67045ba72437e1620dde5705914e6cfb4ff8db2a"
        ],
        [
            "by rewrite !disjoint_has has_cat negb_or.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End OpsTheory.",
            "VernacEndSegment",
            "7b7fa68bd30927cbaee4554a17bcac597aa3e94f"
        ],
        [
            "Hint Resolve subxx_hint : core.",
            "VernacHints",
            "b6eaf77af808d9d20d4ee26924c16dace657e312"
        ],
        [
            "Arguments pred0P {T P}.",
            "VernacArguments",
            "9da40afbeba14eae263ec3bb1d43588a82a67536"
        ],
        [
            "Arguments pred0Pn {T P}.",
            "VernacArguments",
            "867a675d19903dc1b2fa3b0877c3874b37858199"
        ],
        [
            "Arguments subsetP {T A B}.",
            "VernacArguments",
            "f09b45b34ad19b5b21c1d0a3cccd7c20fc75ecac"
        ],
        [
            "Arguments subsetPn {T A B}.",
            "VernacArguments",
            "30a964dbfa22c497f9f23e30761a871feb7caeaa"
        ],
        [
            "Arguments subset_eqP {T A B}.",
            "VernacArguments",
            "c464b3b49233c4e9849bda37eef92ad7d3a690f2"
        ],
        [
            "Arguments card_uniqP {T s}.",
            "VernacArguments",
            "dddd58c89ce62d7cc33aebc6a5b8bcfa64c2dd6c"
        ],
        [
            "Arguments properP {T A B}.",
            "VernacArguments",
            "64abe26476d399998bb54cbadc261efb7e6d2a8b"
        ],
        [
            "Section QuantifierCombinators.",
            "VernacBeginSection",
            "977aec063c0aab326a32491013054bfb55aa7569"
        ],
        [
            "Variables (T : finType) (P : pred T) (PP : T -> Prop).",
            "VernacAssumption",
            "c0b39a98f7229a0557d599ab45075c3ec1ac5beb"
        ],
        [
            "Hypothesis viewP : forall x, reflect (PP x) (P x).",
            "VernacAssumption",
            "6956de68162990148f53253c7ae7fedcf462b488"
        ],
        [
            "Lemma existsPP : reflect (exists x, PP x) [exists x, P x].",
            "VernacStartTheoremProof",
            "0744e1980e4144b08c9a3fea82d0ba660ccce44d"
        ],
        [
            "by apply: (iffP pred0Pn) => -[x /viewP]; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma forallPP : reflect (forall x, PP x) [forall x, P x].",
            "VernacStartTheoremProof",
            "5120d0778b2065398ec32468ef4928f37984703d"
        ],
        [
            "by apply: (iffP pred0P) => /= allP x; have /viewP//=-> := allP x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End QuantifierCombinators.",
            "VernacEndSegment",
            "930f91a54ae7cf004373cd9477cc82e8e8a0e2fd"
        ],
        [
            "Notation \"'exists_ view\" := (existsPP (fun _ => view)) (at level 4, right associativity, format \"''exists_' view\").",
            "VernacNotation",
            "efffe048c1a52a2f8f85bf5e4a1bec977e934ff0"
        ],
        [
            "Notation \"'forall_ view\" := (forallPP (fun _ => view)) (at level 4, right associativity, format \"''forall_' view\").",
            "VernacNotation",
            "32b8c654ab7e2dc628d467ad9fe56eb0605a8fbf"
        ],
        [
            "Section Quantifiers.",
            "VernacBeginSection",
            "1caddd3e14bd5df624fefe6fd48806a8aadffb88"
        ],
        [
            "Variables (T : finType) (rT : T -> eqType).",
            "VernacAssumption",
            "98128ed67c4e027f4530433f32786d9f0a90ad73"
        ],
        [
            "Implicit Type (D P : pred T) (f : forall x, rT x).",
            "VernacReserve",
            "21bb1998642ab5efaea787f80525fa5671477c99"
        ],
        [
            "Lemma forallP P : reflect (forall x, P x) [forall x, P x].",
            "VernacStartTheoremProof",
            "967167a23272c94e75774932c7d8c56cc9201169"
        ],
        [
            "exact: 'forall_idP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqfunP f1 f2 : reflect (forall x, f1 x = f2 x) [forall x, f1 x == f2 x].",
            "VernacStartTheoremProof",
            "d14bbb63535b6c69c0f690ac2c7946c7f05340d1"
        ],
        [
            "exact: 'forall_eqP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma forall_inP D P : reflect (forall x, D x -> P x) [forall (x | D x), P x].",
            "VernacStartTheoremProof",
            "598e7a851288aa4443965da8b4d413a87810a377"
        ],
        [
            "exact: 'forall_implyP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma forall_inPP D P PP : (forall x, reflect (PP x) (P x)) -> reflect (forall x, D x -> PP x) [forall (x | D x), P x].",
            "VernacStartTheoremProof",
            "dde9f232bd9299bb158399368c49cb0e9a8c004f"
        ],
        [
            "by move=> vP; apply: (iffP (forall_inP _ _)) => /(_ _ _) /vP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqfun_inP D f1 f2 : reflect {in D, forall x, f1 x = f2 x} [forall (x | x \\in D), f1 x == f2 x].",
            "VernacStartTheoremProof",
            "8d4f69c453ede73552083cbaa79ec23a9ebf6d7f"
        ],
        [
            "exact: (forall_inPP _ (fun=> eqP)).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma existsP P : reflect (exists x, P x) [exists x, P x].",
            "VernacStartTheoremProof",
            "5c472b5ae4c6b4b6afd961d5dde84fc5ccda14c1"
        ],
        [
            "exact: 'exists_idP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exists_eqP f1 f2 : reflect (exists x, f1 x = f2 x) [exists x, f1 x == f2 x].",
            "VernacStartTheoremProof",
            "ea6f65a48a73fb5792527fe426a02203f5e4a5dc"
        ],
        [
            "exact: 'exists_eqP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exists_inP D P : reflect (exists2 x, D x & P x) [exists (x | D x), P x].",
            "VernacStartTheoremProof",
            "887cbbe66dfb7f12fc1d16a23e19a912c62b09fb"
        ],
        [
            "by apply: (iffP 'exists_andP) => [[x []] | [x]]; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exists_inPP D P PP : (forall x, reflect (PP x) (P x)) -> reflect (exists2 x, D x & PP x) [exists (x | D x), P x].",
            "VernacStartTheoremProof",
            "e8db638cd6429017706c2867aa018bfefcc44c6a"
        ],
        [
            "by move=> vP; apply: (iffP (exists_inP _ _)) => -[x?/vP]; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exists_eq_inP D f1 f2 : reflect (exists2 x, D x & f1 x = f2 x) [exists (x | D x), f1 x == f2 x].",
            "VernacStartTheoremProof",
            "8cf5e0447c092b00a932968f994ed43b4ab4b78a"
        ],
        [
            "exact: (exists_inPP _ (fun=> eqP)).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_existsb P1 P2 : P1 =1 P2 -> [exists x, P1 x] = [exists x, P2 x].",
            "VernacStartTheoremProof",
            "287cfd0fddef4286107eef31b3192b4b1e77ae79"
        ],
        [
            "by move=> eqP12; congr (_ != 0); apply: eq_card.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_existsb_in D P1 P2 : (forall x, D x -> P1 x = P2 x) -> [exists (x | D x), P1 x] = [exists (x | D x), P2 x].",
            "VernacStartTheoremProof",
            "eaa998040825edcfce3413bb841f2b008d015344"
        ],
        [
            "by move=> eqP12; apply: eq_existsb => x; apply: andb_id2l => /eqP12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_forallb P1 P2 : P1 =1 P2 -> [forall x, P1 x] = [forall x, P2 x].",
            "VernacStartTheoremProof",
            "810b8758b7c5005fe2d0ce3847ac5b5eea665b7d"
        ],
        [
            "by move=> eqP12; apply/negb_inj/eq_existsb=> /= x; rewrite eqP12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_forallb_in D P1 P2 : (forall x, D x -> P1 x = P2 x) -> [forall (x | D x), P1 x] = [forall (x | D x), P2 x].",
            "VernacStartTheoremProof",
            "846252aabc8d6b70dc7c44115ef9dabaf0238119"
        ],
        [
            "by move=> eqP12; apply: eq_forallb => i; case Di: (D i); rewrite // eqP12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma negb_forall P : ~~ [forall x, P x] = [exists x, ~~ P x].",
            "VernacStartTheoremProof",
            "b42881f54ad118bf785f55a530b94106595e8284"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma negb_forall_in D P : ~~ [forall (x | D x), P x] = [exists (x | D x), ~~ P x].",
            "VernacStartTheoremProof",
            "3a0a5651f4b18ca7d42e191dd0ac2864f23f9a34"
        ],
        [
            "by apply: eq_existsb => x; rewrite negb_imply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma negb_exists P : ~~ [exists x, P x] = [forall x, ~~ P x].",
            "VernacStartTheoremProof",
            "301d3ecd0c4bec3b85df9a6f293950a461750a85"
        ],
        [
            "by apply/negbLR/esym/eq_existsb=> x; apply: negbK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma negb_exists_in D P : ~~ [exists (x | D x), P x] = [forall (x | D x), ~~ P x].",
            "VernacStartTheoremProof",
            "394f318cc7b8e5485c26f5c5b83501959ec0f1c1"
        ],
        [
            "by rewrite negb_exists; apply/eq_forallb => x; rewrite [~~ _]fun_if.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Quantifiers.",
            "VernacEndSegment",
            "8412bfacc4b95a2d03e3652c8251173c20307fea"
        ],
        [
            "Arguments forallP {T P}.",
            "VernacArguments",
            "c9e01a5994051ee6eb16a0fa3b4b0ad3953a190c"
        ],
        [
            "Arguments eqfunP {T rT f1 f2}.",
            "VernacArguments",
            "51deff6e5bdbd2383f8ffee61b560a851fcc4fb4"
        ],
        [
            "Arguments forall_inP {T D P}.",
            "VernacArguments",
            "78097682b74ffb824fd964d9e2256da8c197304a"
        ],
        [
            "Arguments eqfun_inP {T rT D f1 f2}.",
            "VernacArguments",
            "f9c74b3de285e1bd11b3b80bccd5090716b3579e"
        ],
        [
            "Arguments existsP {T P}.",
            "VernacArguments",
            "eacadc17160a60e771c8d35c88158c427e50b654"
        ],
        [
            "Arguments exists_eqP {T rT f1 f2}.",
            "VernacArguments",
            "1aeddbe455249d5f60c664f6097ca2b340ebe546"
        ],
        [
            "Arguments exists_inP {T D P}.",
            "VernacArguments",
            "f5994744be35559f90147c4224be33ff4687f4fb"
        ],
        [
            "Arguments exists_eq_inP {T rT D f1 f2}.",
            "VernacArguments",
            "3f03a2f851d487b01d228f8523d1d861fe9f1237"
        ],
        [
            "Notation \"'exists_in_ view\" := (exists_inPP _ (fun _ => view)) (at level 4, right associativity, format \"''exists_in_' view\").",
            "VernacNotation",
            "aa5963607b180ed98ee778614611db524d2af327"
        ],
        [
            "Notation \"'forall_in_ view\" := (forall_inPP _ (fun _ => view)) (at level 4, right associativity, format \"''forall_in_' view\").",
            "VernacNotation",
            "fe3e1a6e3a89a7eb4600e0602aab3b33d4190d62"
        ],
        [
            "Section Extrema.",
            "VernacBeginSection",
            "8ec9a743a34b01f14fe68f7d3f8ba8e8fafe5845"
        ],
        [
            "Variant extremum_spec {T : eqType} (ord : rel T) {I : finType} (P : pred I) (F : I -> T) : I -> Type := ExtremumSpec (i : I) of P i & (forall j : I, P j -> ord (F i) (F j)) : extremum_spec ord P F i.",
            "VernacInductive",
            "a1f56ee7ba4f64120580ac52f2c37edac31d82ca"
        ],
        [
            "Let arg_pred {T : eqType} ord {I : finType} (P : pred I) (F : I -> T) := [pred i | P i & [forall (j | P j), ord (F i) (F j)]].",
            "VernacDefinition",
            "9d1fd26749a69279658d31e19fd6abb875c83df4"
        ],
        [
            "Section Extremum.",
            "VernacBeginSection",
            "683cef3dfaa4519d9d1b36abb8a27c893959b33a"
        ],
        [
            "Context {T : eqType} {I : finType} (ord : rel T).",
            "VernacContext",
            "80f9c8ef34c26db58386be760196b520a2e45795"
        ],
        [
            "Context (i0 : I) (P : pred I) (F : I -> T).",
            "VernacContext",
            "2469603e9b2b9b99997b45b93f78787b961a9a6d"
        ],
        [
            "Hypothesis ord_refl : reflexive ord.",
            "VernacAssumption",
            "a1561e19ce8ab20e3a8e9a0210789314be58e828"
        ],
        [
            "Hypothesis ord_trans : transitive ord.",
            "VernacAssumption",
            "90b5df8264c024a4588ed43490e2aaaa18afe87a"
        ],
        [
            "Hypothesis ord_total : total ord.",
            "VernacAssumption",
            "48bb51515cc84771895e495f9971ad344fbd0755"
        ],
        [
            "Definition extremum := odflt i0 (pick (arg_pred ord P F)).",
            "VernacDefinition",
            "d5fa355671406c9eab744c64bed35c08c3044578"
        ],
        [
            "Hypothesis Pi0 : P i0.",
            "VernacAssumption",
            "b02cc7b502c2790c061691c3b5441e308faebe72"
        ],
        [
            "Lemma extremumP : extremum_spec ord P F extremum.",
            "VernacStartTheoremProof",
            "45d510d10c430808accb70181f5e3823dd286981"
        ],
        [
            "rewrite /extremum; case: pickP => [i /andP[Pi /'forall_implyP/= min_i] | no_i].",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by split=> // j; apply/implyP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have := sort_sorted ord_total [seq F i | i <- enum P].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "set s := sort _ _ => ss; have s_gt0 : size s > 0 by rewrite size_sort size_map -cardE; apply/card_gt0P; exists i0.",
            "VernacExtend",
            "d2991b7607b6316c9d43d28c85f87ca601299ca6"
        ],
        [
            "pose t0 := nth (F i0) s 0; have: t0 \\in s by rewrite mem_nth.",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "rewrite mem_sort => /mapP/sig2_eqW[it0]; rewrite mem_enum => it0P def_t0.",
            "VernacExtend",
            "fbaa61af20867a5dfb8bb5213ca8048b258f8f3a"
        ],
        [
            "have /negP[/=] := no_i it0; rewrite [P _]it0P/=; apply/'forall_implyP=> j Pj.",
            "VernacExtend",
            "4266062387bb5ba3b4b273358c36b198e35325af"
        ],
        [
            "have /(nthP (F i0))[k g_lt <-] : F j \\in s by rewrite mem_sort map_f ?mem_enum.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -def_t0 sorted_le_nth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Extremum.",
            "VernacEndSegment",
            "e84a5f115d72a84f46a222be203f15949ca76b78"
        ],
        [
            "Notation \"[ 'arg[' ord ]_( i < i0 | P ) F ]\" := (extremum ord i0 (fun i => P%B) (fun i => F)) (at level 0, ord, i, i0 at level 10, format \"[ 'arg[' ord ]_( i < i0 | P ) F ]\") : form_scope.",
            "VernacNotation",
            "910d4a188b13af4be08c5cafb8d34726031f97f3"
        ],
        [
            "Notation \"[ 'arg[' ord ]_( i < i0 'in' A ) F ]\" := [arg[ord]_(i < i0 | i \\in A) F] (at level 0, ord, i, i0 at level 10, format \"[ 'arg[' ord ]_( i < i0 'in' A ) F ]\") : form_scope.",
            "VernacNotation",
            "8fd078c62a72f8d58a32c1fcfc37e4e0ce143511"
        ],
        [
            "Notation \"[ 'arg[' ord ]_( i < i0 ) F ]\" := [arg[ord]_(i < i0 | true) F] (at level 0, ord, i, i0 at level 10, format \"[ 'arg[' ord ]_( i < i0 ) F ]\") : form_scope.",
            "VernacNotation",
            "789187657dc58e8416f3ad0aefcadf234fd36814"
        ],
        [
            "Section ArgMinMax.",
            "VernacBeginSection",
            "2baf3977d5ee5567d620a1070616e80aa43d1020"
        ],
        [
            "Variables (I : finType) (i0 : I) (P : pred I) (F : I -> nat) (Pi0 : P i0).",
            "VernacAssumption",
            "d26ef1e71a7bd1d0231a93525491f8b9188dea73"
        ],
        [
            "Definition arg_min := extremum leq i0 P F.",
            "VernacDefinition",
            "157faebf500d3c4f5d44a941366ee10b0be9d9ec"
        ],
        [
            "Definition arg_max := extremum geq i0 P F.",
            "VernacDefinition",
            "d09b376dd9889a39b932a867000ffb35b47e5504"
        ],
        [
            "Lemma arg_minP : extremum_spec leq P F arg_min.",
            "VernacStartTheoremProof",
            "d11eb095ea248d22a21889627512f9b7092b6f3d"
        ],
        [
            "by apply: extremumP => //; [apply: leq_trans|apply: leq_total].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma arg_maxP : extremum_spec geq P F arg_max.",
            "VernacStartTheoremProof",
            "7fbc3b5e73efbd7a81ab059fa58cd2d01ecc83da"
        ],
        [
            "apply: extremumP => //; first exact: leqnn.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move=> n m p mn np; apply: leq_trans mn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=> ??; apply: leq_total.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ArgMinMax.",
            "VernacEndSegment",
            "9e061dd6ea8a2debcdec627dd020879b69a5384b"
        ],
        [
            "End Extrema.",
            "VernacEndSegment",
            "e520797c2ea3b67e24750ec0fe393e01224c1b32"
        ],
        [
            "Notation \"[ 'arg' 'min_' ( i < i0 | P ) F ]\" := (arg_min i0 (fun i => P%B) (fun i => F)) (at level 0, i, i0 at level 10, format \"[ 'arg' 'min_' ( i < i0 | P ) F ]\") : form_scope.",
            "VernacNotation",
            "0cc258913a0e3d1f339765dfc3399b351bad5eda"
        ],
        [
            "Notation \"[ 'arg' 'min_' ( i < i0 'in' A ) F ]\" := [arg min_(i < i0 | i \\in A) F] (at level 0, i, i0 at level 10, format \"[ 'arg' 'min_' ( i < i0 'in' A ) F ]\") : form_scope.",
            "VernacNotation",
            "945a7440ce2228801209d5bb78481241a73861c7"
        ],
        [
            "Notation \"[ 'arg' 'min_' ( i < i0 ) F ]\" := [arg min_(i < i0 | true) F] (at level 0, i, i0 at level 10, format \"[ 'arg' 'min_' ( i < i0 ) F ]\") : form_scope.",
            "VernacNotation",
            "837fa0d8e1293808435f940dfbe3128b61b1d837"
        ],
        [
            "Notation \"[ 'arg' 'max_' ( i > i0 | P ) F ]\" := (arg_max i0 (fun i => P%B) (fun i => F)) (at level 0, i, i0 at level 10, format \"[ 'arg' 'max_' ( i > i0 | P ) F ]\") : form_scope.",
            "VernacNotation",
            "191e3e3b6e96d9636924d2b371ed5b6a60b98eda"
        ],
        [
            "Notation \"[ 'arg' 'max_' ( i > i0 'in' A ) F ]\" := [arg max_(i > i0 | i \\in A) F] (at level 0, i, i0 at level 10, format \"[ 'arg' 'max_' ( i > i0 'in' A ) F ]\") : form_scope.",
            "VernacNotation",
            "14dd1d332b0803904886d0dd96b71489454887ea"
        ],
        [
            "Notation \"[ 'arg' 'max_' ( i > i0 ) F ]\" := [arg max_(i > i0 | true) F] (at level 0, i, i0 at level 10, format \"[ 'arg' 'max_' ( i > i0 ) F ]\") : form_scope.",
            "VernacNotation",
            "d9aa389257333dffbdbed3bfeb80019564484e40"
        ],
        [
            "Section Injectiveb.",
            "VernacBeginSection",
            "18319d318a47329daa10eb09c3679a7e31b68b80"
        ],
        [
            "Variables (aT : finType) (rT : eqType) (f : aT -> rT).",
            "VernacAssumption",
            "9b3d6e86f233a75780640d94ac3a3808650633c3"
        ],
        [
            "Implicit Type D : pred aT.",
            "VernacReserve",
            "dd5d0853d3774c3f85a3a1e7365167eaa70121b3"
        ],
        [
            "Definition dinjectiveb D := uniq (map f (enum D)).",
            "VernacDefinition",
            "19cad3be9670bf5880b589e9c3788667b25fc6f0"
        ],
        [
            "Definition injectiveb := dinjectiveb aT.",
            "VernacDefinition",
            "b9697536f4457602adcf905d3b509ba563524d55"
        ],
        [
            "Lemma dinjectivePn D : reflect (exists2 x, x \\in D & exists2 y, y \\in [predD1 D & x] & f x = f y) (~~ dinjectiveb D).",
            "VernacStartTheoremProof",
            "5a2914802e018dfc4964228e8bde15b6f86960d7"
        ],
        [
            "apply: (iffP idP) => [injf | [x Dx [y Dxy eqfxy]]]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move: Dx; rewrite -(mem_enum D) => /rot_to[i E defE].",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "rewrite /dinjectiveb -(rot_uniq i) -map_rot defE /=; apply/nandP; left.",
            "VernacExtend",
            "b5c6eb8f4088040d9dfd48a39246f897d117ec2b"
        ],
        [
            "rewrite inE /= -(mem_enum D) -(mem_rot i) defE inE in Dxy.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite andb_orr andbC andbN in Dxy.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite eqfxy map_f //; case/andP: Dxy.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose p := [pred x in D | [exists (y | y \\in [predD1 D & x]), f x == f y]].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "case: (pickP p) => [x /= /andP[Dx /exists_inP[y Dxy /eqP eqfxy]] | no_p].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by exists x; last exists y.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /dinjectiveb map_inj_in_uniq ?enum_uniq // in injf => x y Dx Dy eqfxy.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply: contraNeq (negbT (no_p x)) => ne_xy /=; rewrite -mem_enum Dx.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by apply/existsP; exists y; rewrite /= !inE eq_sym ne_xy -mem_enum Dy eqfxy /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dinjectiveP D : reflect {in D &, injective f} (dinjectiveb D).",
            "VernacStartTheoremProof",
            "1c47de9636232c4df4021568efada472188f5556"
        ],
        [
            "rewrite -[dinjectiveb D]negbK.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: dinjectivePn=> [noinjf | injf]; constructor.",
            "VernacExtend",
            "711830f9779c9834ebf527f9f431c7e5e5ef3c76"
        ],
        [
            "case: noinjf => x Dx [y /andP[neqxy /= Dy] eqfxy] injf.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by case/eqP: neqxy; apply: injf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> x y Dx Dy /= eqfxy; apply/eqP; apply/idPn=> nxy; case: injf.",
            "VernacExtend",
            "316c59e55e3125879d3ba13a7e3a7ffea82d30ad"
        ],
        [
            "by exists x => //; exists y => //=; rewrite inE /= eq_sym nxy.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma injectivePn : reflect (exists x, exists2 y, x != y & f x = f y) (~~ injectiveb).",
            "VernacStartTheoremProof",
            "d98dfb166f896fb1e20a60b1a07eaa8bf76674bc"
        ],
        [
            "apply: (iffP (dinjectivePn _)) => [[x _ [y nxy eqfxy]] | [x [y nxy eqfxy]]]; by exists x => //; exists y => //; rewrite inE /= andbT eq_sym in nxy *.",
            "VernacExtend",
            "9ba8844f90da4a48c6c9ed986dcaebadc0623e9f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma injectiveP : reflect (injective f) injectiveb.",
            "VernacStartTheoremProof",
            "8d425f375fb0d63bba7180ea548052301074fb44"
        ],
        [
            "by apply: (iffP (dinjectiveP _)) => injf x y => [|_ _]; apply: injf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Injectiveb.",
            "VernacEndSegment",
            "5a34566f8deef36bccc43184339d7048f19d74ea"
        ],
        [
            "Definition image_mem T T' f mA : seq T' := map f (@enum_mem T mA).",
            "VernacDefinition",
            "94ba7f2d3a1f8dea4f9d7b1e09dbef2f10a32fd9"
        ],
        [
            "Notation image f A := (image_mem f (mem A)).",
            "VernacSyntacticDefinition",
            "3202983410ccc1b668c877d6539ee3a1a934eed0"
        ],
        [
            "Notation \"[ 'seq' F | x 'in' A ]\" := (image (fun x => F) A) (at level 0, F at level 99, x ident, format \"'[hv' [ 'seq' F '/ ' | x 'in' A ] ']'\") : seq_scope.",
            "VernacNotation",
            "f486e3a01be81ed9f8851a6954f0af79b9661af1"
        ],
        [
            "Notation \"[ 'seq' F | x : T 'in' A ]\" := (image (fun x : T => F) A) (at level 0, F at level 99, x ident, only parsing) : seq_scope.",
            "VernacNotation",
            "3c55920f3f942fc5bfbd85d16fdf8b83867395a3"
        ],
        [
            "Notation \"[ 'seq' F | x : T ]\" := [seq F | x : T in sort_of_simpl_pred (@pred_of_argType T)] (at level 0, F at level 99, x ident, format \"'[hv' [ 'seq' F '/ ' | x : T ] ']'\") : seq_scope.",
            "VernacNotation",
            "5504976b00df5c3372bc3b6c213670f8fccb8dfe"
        ],
        [
            "Notation \"[ 'seq' F , x ]\" := [seq F | x : _ ] (at level 0, F at level 99, x ident, only parsing) : seq_scope.",
            "VernacNotation",
            "93391c382045837aaee3c61fa3a2383f49fee3ee"
        ],
        [
            "Definition codom T T' f := @image_mem T T' f (mem T).",
            "VernacDefinition",
            "592f7f79e7fa0e41e3f16264d8297ea0aaf98b79"
        ],
        [
            "Section Image.",
            "VernacBeginSection",
            "b2d4a85d0530585f40e48306f07be6fb0b63b45a"
        ],
        [
            "Variable T : finType.",
            "VernacAssumption",
            "6349381da4d33cbc2eeaf1bade38718e15f7a2c9"
        ],
        [
            "Implicit Type A : pred T.",
            "VernacReserve",
            "43c29bea71bc4610fdb17efade8a5dc36bbadad5"
        ],
        [
            "Section SizeImage.",
            "VernacBeginSection",
            "aff6f724530680730426437d63737ace73331754"
        ],
        [
            "Variables (T' : Type) (f : T -> T').",
            "VernacAssumption",
            "8823113c386314a7a138ed700dbf77fb49310b99"
        ],
        [
            "Lemma size_image A : size (image f A) = #|A|.",
            "VernacStartTheoremProof",
            "293bbc3b5294beb6cd2d940889973c599f748529"
        ],
        [
            "by rewrite size_map -cardE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_codom : size (codom f) = #|T|.",
            "VernacStartTheoremProof",
            "e8fabd91b8f873abf37ad51b1486bba14ce1f49b"
        ],
        [
            "exact: size_image.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codomE : codom f = map f (enum T).",
            "VernacStartTheoremProof",
            "625c0b2c9254e17793a18ee9455869f80c8e6917"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SizeImage.",
            "VernacEndSegment",
            "59e8f66f6ce681441687dd02bc8f02631c3bef64"
        ],
        [
            "Variables (T' : eqType) (f : T -> T').",
            "VernacAssumption",
            "3c7a9944124d8f73006c0531fd7522ba613ef2f1"
        ],
        [
            "Lemma imageP A y : reflect (exists2 x, x \\in A & y = f x) (y \\in image f A).",
            "VernacStartTheoremProof",
            "34b67f0eab1d704f21bdbac1ee1e2f70de421eff"
        ],
        [
            "by apply: (iffP mapP) => [] [x Ax y_fx]; exists x; rewrite // mem_enum in Ax *.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codomP y : reflect (exists x, y = f x) (y \\in codom f).",
            "VernacStartTheoremProof",
            "5f2a37523d4af7daccb48c70c1fccb4b4ac08bb3"
        ],
        [
            "by apply: (iffP (imageP _ y)) => [][x]; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Remark iinv_proof A y : y \\in image f A -> {x | x \\in A & f x = y}.",
            "VernacStartTheoremProof",
            "dd6694cc445ffa42e7517c5132a3a237fc4d7a6b"
        ],
        [
            "move=> fy; pose b x := A x && (f x == y).",
            "VernacExtend",
            "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
        ],
        [
            "case: (pickP b) => [x /andP[Ax /eqP] | nfy]; first by exists x.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case/negP: fy => /imageP[x Ax fx_y]; case/andP: (nfy x); rewrite fx_y.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition iinv A y fAy := s2val (@iinv_proof A y fAy).",
            "VernacDefinition",
            "e00956b642a46a48587ff6c3c8cfb26a87e7f24c"
        ],
        [
            "Lemma f_iinv A y fAy : f (@iinv A y fAy) = y.",
            "VernacStartTheoremProof",
            "3dcbab8fae4312b08785e60cf161c2561db85b00"
        ],
        [
            "exact: s2valP' (iinv_proof fAy).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_iinv A y fAy : @iinv A y fAy \\in A.",
            "VernacStartTheoremProof",
            "954850a54f102e8397c044f4e86411ee4722d762"
        ],
        [
            "exact: s2valP (iinv_proof fAy).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_iinv_f A : {in A &, injective f} -> forall x fAfx, x \\in A -> @iinv A (f x) fAfx = x.",
            "VernacStartTheoremProof",
            "620a00955bae7308221541ebacc7e8e92dde4815"
        ],
        [
            "by move=> injf x fAfx Ax; apply: injf => //; [apply: mem_iinv | apply: f_iinv].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma preim_iinv A B y fAy : preim f B (@iinv A y fAy) = B y.",
            "VernacStartTheoremProof",
            "4bd04f401fea42b5cdafa07f83274fad14061829"
        ],
        [
            "by rewrite /= f_iinv.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma image_f A x : x \\in A -> f x \\in image f A.",
            "VernacStartTheoremProof",
            "ad7cd62fae8f852625f0429d7a45e42a17479c1d"
        ],
        [
            "by move=> Ax; apply/imageP; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codom_f x : f x \\in codom f.",
            "VernacStartTheoremProof",
            "0a88eabb38344f8b87ac24e78fe82b0da4daee81"
        ],
        [
            "by apply: image_f.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma image_codom A : {subset image f A <= codom f}.",
            "VernacStartTheoremProof",
            "c9b20e90b585c59c03bd1dd6786d12a5fe57c445"
        ],
        [
            "by move=> _ /imageP[x _ ->]; apply: codom_f.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma image_pred0 : image f pred0 =i pred0.",
            "VernacStartTheoremProof",
            "4aa0e5815d7f1c9a04d92a825567a5e1392334ea"
        ],
        [
            "by move=> x; rewrite /image_mem /= enum0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Injective.",
            "VernacBeginSection",
            "58779feaf816f35d3711b0f58333e1bc536a4987"
        ],
        [
            "Hypothesis injf : injective f.",
            "VernacAssumption",
            "76820d7d4f718c2b057c70e67a0cd0c4c4abcabc"
        ],
        [
            "Lemma mem_image A x : (f x \\in image f A) = (x \\in A).",
            "VernacStartTheoremProof",
            "bbe8b35edbc7eebf002d40ca27af0a50f7d40b76"
        ],
        [
            "by rewrite mem_map ?mem_enum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pre_image A : [preim f of image f A] =i A.",
            "VernacStartTheoremProof",
            "c663a27d9bdde9b49da1cedb38e729cfd507294d"
        ],
        [
            "by move=> x; rewrite inE /= mem_image.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma image_iinv A y (fTy : y \\in codom f) : (y \\in image f A) = (iinv fTy \\in A).",
            "VernacStartTheoremProof",
            "e4c6edda6147a44ac1136ec3f047b970be40ffcc"
        ],
        [
            "by rewrite -mem_image ?f_iinv.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iinv_f x fTfx : @iinv T (f x) fTfx = x.",
            "VernacStartTheoremProof",
            "43dd5481c7ed93034925e1213499d0edf61905a7"
        ],
        [
            "by apply: in_iinv_f; first apply: in2W.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma image_pre (B : pred T') : image f [preim f of B] =i [predI B & codom f].",
            "VernacStartTheoremProof",
            "0bfafbe64e53606a758ab4dfb893eac232c1f1cf"
        ],
        [
            "by move=> y; rewrite /image_mem -filter_map /= mem_filter -enumT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bij_on_codom (x0 : T) : {on [pred y in codom f], bijective f}.",
            "VernacStartTheoremProof",
            "17bdf06f242827d9aa883f0382bf118c85be2ed0"
        ],
        [
            "pose g y := iinv (valP (insigd (codom_f x0) y)).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "by exists g => [x fAfx | y fAy]; first apply: injf; rewrite f_iinv insubdK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bij_on_image A (x0 : T) : {on [pred y in image f A], bijective f}.",
            "VernacStartTheoremProof",
            "1fda3f0b485db2847d3b9c708119c2ba2a3b7bfb"
        ],
        [
            "exact: subon_bij (@image_codom A) (bij_on_codom x0).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Injective.",
            "VernacEndSegment",
            "c0e3cf40e46f1580bc75c656d2b350c9ff09b208"
        ],
        [
            "Fixpoint preim_seq s := if s is y :: s' then (if pick (preim f (pred1 y)) is Some x then cons x else id) (preim_seq s') else [::].",
            "VernacFixpoint",
            "737157714f27f039021adfdc9e24d44dc7de4b54"
        ],
        [
            "Lemma map_preim (s : seq T') : {subset s <= codom f} -> map f (preim_seq s) = s.",
            "VernacStartTheoremProof",
            "7290a1408e0640959b08423827cdf2dde94d78eb"
        ],
        [
            "elim: s => //= y s IHs; case: pickP => [x /eqP fx_y | nfTy] fTs.",
            "VernacExtend",
            "df63f96bedbb0673aecb42521d90011325a86c94"
        ],
        [
            "by rewrite /= fx_y IHs // => z s_z; apply: fTs; apply: predU1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case/imageP: (fTs y (mem_head y s)) => x _ fx_y; case/eqP: (nfTy x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Image.",
            "VernacEndSegment",
            "b3c4c5183dc74a8fbdb4487f7d6a42f64df09104"
        ],
        [
            "Prenex Implicits codom iinv.",
            "VernacExtend",
            "26f30befc832a273eb21dfa1f5a1d4d00da48511"
        ],
        [
            "Arguments imageP {T T' f A y}.",
            "VernacArguments",
            "779ba0f396e205f29b781bb241fa6e67bfdaa086"
        ],
        [
            "Arguments codomP {T T' f y}.",
            "VernacArguments",
            "9e255055b3229eec059cdc0bf6c6cb782833c51b"
        ],
        [
            "Lemma flatten_imageP (aT : finType) (rT : eqType) A (P : pred aT) (y : rT) : reflect (exists2 x, x \\in P & y \\in A x) (y \\in flatten [seq A x | x in P]).",
            "VernacStartTheoremProof",
            "c8a9bc47292d7b7432834b33935cf73e865b411d"
        ],
        [
            "by apply: (iffP flatten_mapP) => [][x Px]; exists x; rewrite ?mem_enum in Px *.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments flatten_imageP {aT rT A P y}.",
            "VernacArguments",
            "f169e38bb271eb4e6a17971ad0e01b93945504b2"
        ],
        [
            "Section CardFunImage.",
            "VernacBeginSection",
            "c5e10df10fd7d94735962f05dc72e9b1165fd9cb"
        ],
        [
            "Variables (T T' : finType) (f : T -> T').",
            "VernacAssumption",
            "f568124d1ce15d34f2e7f6ddb017a0a9ca4df91a"
        ],
        [
            "Implicit Type A : pred T.",
            "VernacReserve",
            "43c29bea71bc4610fdb17efade8a5dc36bbadad5"
        ],
        [
            "Lemma leq_image_card A : #|image f A| <= #|A|.",
            "VernacStartTheoremProof",
            "fae99e35963f19f82a80130bedb30a3c4bed25c7"
        ],
        [
            "by rewrite (cardE A) -(size_map f) card_size.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_in_image A : {in A &, injective f} -> #|image f A| = #|A|.",
            "VernacStartTheoremProof",
            "91782f2704768fb180934e98ec391ae7162586d1"
        ],
        [
            "move=> injf; rewrite (cardE A) -(size_map f); apply/card_uniqP.",
            "VernacExtend",
            "0fa388cebe8ed6372154caa26cd10c357f123670"
        ],
        [
            "by rewrite map_inj_in_uniq ?enum_uniq // => x y; rewrite !mem_enum; apply: injf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma image_injP A : reflect {in A &, injective f} (#|image f A| == #|A|).",
            "VernacStartTheoremProof",
            "e334dd1f1c9ef8eb36093bd9977a0d67ab2af25e"
        ],
        [
            "apply: (iffP eqP) => [eqfA |]; last exact: card_in_image.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/dinjectiveP; apply/card_uniqP; rewrite size_map -cardE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hypothesis injf : injective f.",
            "VernacAssumption",
            "76820d7d4f718c2b057c70e67a0cd0c4c4abcabc"
        ],
        [
            "Lemma card_image A : #|image f A| = #|A|.",
            "VernacStartTheoremProof",
            "35374c5f069dd666d8fd950fb5af389e0098fb7a"
        ],
        [
            "by apply: card_in_image; apply: in2W.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_codom : #|codom f| = #|T|.",
            "VernacStartTheoremProof",
            "cee5963130a2c7b2a9178ce69728636a2fff73c0"
        ],
        [
            "exact: card_image.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_preim (B : pred T') : #|[preim f of B]| = #|[predI codom f & B]|.",
            "VernacStartTheoremProof",
            "3b7a9aa3b596c00c6bd9ddde78d1d681fa394741"
        ],
        [
            "rewrite -card_image /=; apply: eq_card => y.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite [y \\in _]image_pre !inE andbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hypothesis card_range : #|T| = #|T'|.",
            "VernacAssumption",
            "75dfa5112fac342d8840dda7c41ec1ec88849fba"
        ],
        [
            "Lemma inj_card_onto y : y \\in codom f.",
            "VernacStartTheoremProof",
            "9fb59d9f9e23e2ab33ee14fe0cc1bcf60397a50e"
        ],
        [
            "by move: y; apply/subset_cardP; rewrite ?card_codom ?subset_predT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma inj_card_bij : bijective f.",
            "VernacStartTheoremProof",
            "3784a46ab440b0fe299632ec7b11b5591b1372a6"
        ],
        [
            "by exists (fun y => iinv (inj_card_onto y)) => y; rewrite ?iinv_f ?f_iinv.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End CardFunImage.",
            "VernacEndSegment",
            "f354e161383e4ad9de28825369c173cd804f30ad"
        ],
        [
            "Arguments image_injP {T T' f A}.",
            "VernacArguments",
            "36164cab9e5e98e56b39a5fb2f0b17701e29ca29"
        ],
        [
            "Section FinCancel.",
            "VernacBeginSection",
            "9ac818025ff0f674d40f1b7e4f390ed3482b04d8"
        ],
        [
            "Variables (T : finType) (f g : T -> T).",
            "VernacAssumption",
            "1117c7dd8893f729696e276826b6fc54720e9bcf"
        ],
        [
            "Section Inv.",
            "VernacBeginSection",
            "aca3af6d7463f369a6e6eaaf19d3df9aae977b07"
        ],
        [
            "Hypothesis injf : injective f.",
            "VernacAssumption",
            "76820d7d4f718c2b057c70e67a0cd0c4c4abcabc"
        ],
        [
            "Lemma injF_onto y : y \\in codom f.",
            "VernacStartTheoremProof",
            "9995c3746c5962946c28ec6f3ff21f7d2a1dc5ee"
        ],
        [
            "exact: inj_card_onto.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition invF y := iinv (injF_onto y).",
            "VernacDefinition",
            "70d17482939da58acdbd50eac797c44b04836576"
        ],
        [
            "Lemma invF_f : cancel f invF.",
            "VernacStartTheoremProof",
            "7579268f513ed6e70c192968aa8fafc5514529e9"
        ],
        [
            "by move=> x; apply: iinv_f.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma f_invF : cancel invF f.",
            "VernacStartTheoremProof",
            "aba16dec0e3d8c483dcbc6c14b37c009458f1793"
        ],
        [
            "by move=> y; apply: f_iinv.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma injF_bij : bijective f.",
            "VernacStartTheoremProof",
            "71a2ca543f4a9269b468ad187f0e57c02535815d"
        ],
        [
            "exact: inj_card_bij.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Inv.",
            "VernacEndSegment",
            "71a56687caf7f2f93a0e43c8d9f19c46013d4ce9"
        ],
        [
            "Hypothesis fK : cancel f g.",
            "VernacAssumption",
            "fc61e3acfec40f904ebc1a0eabcd3a1bc5017ec7"
        ],
        [
            "Lemma canF_sym : cancel g f.",
            "VernacStartTheoremProof",
            "00a6f345b537bb44f547b983ded0d646d2ebd10e"
        ],
        [
            "exact/(bij_can_sym (injF_bij (can_inj fK))).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma canF_LR x y : x = g y -> f x = y.",
            "VernacStartTheoremProof",
            "40bcae938d732210c77a5180ce76ce64101c270a"
        ],
        [
            "exact: canLR canF_sym.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma canF_RL x y : g x = y -> x = f y.",
            "VernacStartTheoremProof",
            "e17a4e1b45ca3a8ea640495b85d1c4c801d94f1b"
        ],
        [
            "exact: canRL canF_sym.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma canF_eq x y : (f x == y) = (x == g y).",
            "VernacStartTheoremProof",
            "4dbb23ad321d9b683bf9ebc589d05f4d44fdb895"
        ],
        [
            "exact: (can2_eq fK canF_sym).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma canF_invF : g =1 invF (can_inj fK).",
            "VernacStartTheoremProof",
            "0d68f39502d46bb10958884d2398d0a6b7325d24"
        ],
        [
            "by move=> y; apply: (canLR fK); rewrite f_invF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FinCancel.",
            "VernacEndSegment",
            "9d7db331e033c0ae542b35900f8badc05b377b4c"
        ],
        [
            "Section EqImage.",
            "VernacBeginSection",
            "c5fbd3ea8cffa99908f55cae25e709d84ab7ebe3"
        ],
        [
            "Variables (T : finType) (T' : Type).",
            "VernacAssumption",
            "a65346c1402f7ed8e573670e62ccefe57c249b66"
        ],
        [
            "Lemma eq_image (A B : pred T) (f g : T -> T') : A =i B -> f =1 g -> image f A = image g B.",
            "VernacStartTheoremProof",
            "4ef70276ee6bac2f69fa0996cc50ce9b8e768da3"
        ],
        [
            "by move=> eqAB eqfg; rewrite /image_mem (eq_enum eqAB) (eq_map eqfg).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_codom (f g : T -> T') : f =1 g -> codom f = codom g.",
            "VernacStartTheoremProof",
            "2bd83703e15b889560e45ac60cafbdee0dcf802b"
        ],
        [
            "exact: eq_image.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_invF f g injf injg : f =1 g -> @invF T f injf =1 @invF T g injg.",
            "VernacStartTheoremProof",
            "1d8be032f897dce36189ea2e2e738ff503d47e5d"
        ],
        [
            "by move=> eq_fg x; apply: (canLR (invF_f injf)); rewrite eq_fg f_invF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EqImage.",
            "VernacEndSegment",
            "cdf8decb5daac9f160b452cb57645c04d0577e9a"
        ],
        [
            "Lemma unit_enumP : Finite.axiom [::tt].",
            "VernacStartTheoremProof",
            "23e54c7a2235d73d233b944220e15b30a9e2f551"
        ],
        [
            "by case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition unit_finMixin := Eval hnf in FinMixin unit_enumP.",
            "VernacDefinition",
            "e427434c126208120eba9c768a1e81725cdd3da4"
        ],
        [
            "Canonical unit_finType := Eval hnf in FinType unit unit_finMixin.",
            "VernacDefinition",
            "9de0a1325308f9922ddb6d823e21d5a387afac38"
        ],
        [
            "Lemma card_unit : #|{: unit}| = 1.",
            "VernacStartTheoremProof",
            "fd73bad2f412a81afe02878c0ec5eec56e4e0e81"
        ],
        [
            "by rewrite cardT enumT unlock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bool_enumP : Finite.axiom [:: true; false].",
            "VernacStartTheoremProof",
            "152dc8ec06bae645ef3f900b7b741cdd1d282532"
        ],
        [
            "by case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition bool_finMixin := Eval hnf in FinMixin bool_enumP.",
            "VernacDefinition",
            "f8032cbbb2ff2c14466f58b63267b3366f330518"
        ],
        [
            "Canonical bool_finType := Eval hnf in FinType bool bool_finMixin.",
            "VernacDefinition",
            "edeecc786db814e767b2d08411b11d28984bb52d"
        ],
        [
            "Lemma card_bool : #|{: bool}| = 2.",
            "VernacStartTheoremProof",
            "466adf92b2ee27955fd5aadcd483cd5010525e87"
        ],
        [
            "by rewrite cardT enumT unlock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Local Notation enumF T := (Finite.enum T).",
            "VernacSyntacticDefinition",
            "b81b32ca7b693aa1f7708509d4d4ad8f4fdd66ef"
        ],
        [
            "Section OptionFinType.",
            "VernacBeginSection",
            "cd7f446aa6321197c724c31b0fdbddb60fa6fa30"
        ],
        [
            "Variable T : finType.",
            "VernacAssumption",
            "6349381da4d33cbc2eeaf1bade38718e15f7a2c9"
        ],
        [
            "Definition option_enum := None :: map some (enumF T).",
            "VernacDefinition",
            "8533f1f4881e66e950613bdd3dcefc2b7c5c1a5d"
        ],
        [
            "Lemma option_enumP : Finite.axiom option_enum.",
            "VernacStartTheoremProof",
            "c6317d1840465831c678a579448665bfb57717a0"
        ],
        [
            "by case=> [x|]; rewrite /= count_map (count_pred0, enumP).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition option_finMixin := Eval hnf in FinMixin option_enumP.",
            "VernacDefinition",
            "658adb170d67b244a5ee1666019bd937f41564ec"
        ],
        [
            "Canonical option_finType := Eval hnf in FinType (option T) option_finMixin.",
            "VernacDefinition",
            "0f28149bb4d9bc59eefdf81c42ae2194702ecc95"
        ],
        [
            "Lemma card_option : #|{: option T}| = #|T|.+1.",
            "VernacStartTheoremProof",
            "88bf2857e55e87898703c868075b260139a4a3a5"
        ],
        [
            "by rewrite !cardT !enumT {1}unlock /= !size_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End OptionFinType.",
            "VernacEndSegment",
            "81731998c96e4c38ceafb6fa098efc54924159e1"
        ],
        [
            "Section TransferFinType.",
            "VernacBeginSection",
            "63c4fa334b7ed8eeb0db9124075effbdf9c045e7"
        ],
        [
            "Variables (eT : countType) (fT : finType) (f : eT -> fT).",
            "VernacAssumption",
            "bfb4cc2ea33636ac5b986950f3bee245f4b482b2"
        ],
        [
            "Lemma pcan_enumP g : pcancel f g -> Finite.axiom (undup (pmap g (enumF fT))).",
            "VernacStartTheoremProof",
            "2fa32f25e1c0a59d96ebe2629bb1e184ba38b12a"
        ],
        [
            "move=> fK x; rewrite count_uniq_mem ?undup_uniq // mem_undup.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite mem_pmap -fK map_f // -enumT mem_enum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition PcanFinMixin g fK := FinMixin (@pcan_enumP g fK).",
            "VernacDefinition",
            "87cbb667c368c8871d2b050a4a991d9951b68ecf"
        ],
        [
            "Definition CanFinMixin g (fK : cancel f g) := PcanFinMixin (can_pcan fK).",
            "VernacDefinition",
            "6be81b5c8f1ffe3395d30d7470136205aab81f7b"
        ],
        [
            "End TransferFinType.",
            "VernacEndSegment",
            "7d14d0cf3122acb748808c28d548fd7092fc4ca8"
        ],
        [
            "Section SubFinType.",
            "VernacBeginSection",
            "661fceb835cd2d4595b04aa752fec122e1dc7bc8"
        ],
        [
            "Variables (T : choiceType) (P : pred T).",
            "VernacAssumption",
            "3b792989d357bfc128a2304af0196775c4450576"
        ],
        [
            "Import Finite.",
            "VernacImport",
            "e7e479fa76a8e27a3d6351e97dc609d41cca7b2e"
        ],
        [
            "Structure subFinType := SubFinType { subFin_sort :> subType P; _ : mixin_of (sub_eqType subFin_sort) }.",
            "VernacInductive",
            "f8493fb2d00c71ab0da3b6e31a3ea99595acbd98"
        ],
        [
            "Definition pack_subFinType U := fun cT b m & phant_id (class cT) (@Class U b m) => fun sT m' & phant_id m' m => @SubFinType sT m'.",
            "VernacDefinition",
            "ffa5978b60e1ba650b6e15304534e4417d677b2e"
        ],
        [
            "Implicit Type sT : subFinType.",
            "VernacReserve",
            "d5390a8431c330807fb5816e118b9fcac1011781"
        ],
        [
            "Definition subFin_mixin sT := let: SubFinType _ m := sT return mixin_of (sub_eqType sT) in m.",
            "VernacDefinition",
            "86fa8d36830c37161b2eddbb7cde5a2133ef675c"
        ],
        [
            "Coercion subFinType_subCountType sT := @SubCountType _ _ sT (subFin_mixin sT).",
            "VernacDefinition",
            "9846412cffae32a1060a153867bf51a6b3f582b3"
        ],
        [
            "Canonical subFinType_subCountType.",
            "VernacCanonical",
            "5a006dead24efb854d1bc1f1acf71848a967a3be"
        ],
        [
            "Coercion subFinType_finType sT := Pack (@Class sT (sub_choiceClass sT) (subFin_mixin sT)).",
            "VernacDefinition",
            "68c455ef8d99bbcd7e35707779f069eb104bed72"
        ],
        [
            "Canonical subFinType_finType.",
            "VernacCanonical",
            "2854a7c61239b3633e344129f1e1bcbd2b0e9fc1"
        ],
        [
            "Lemma codom_val sT x : (x \\in codom (val : sT -> T)) = P x.",
            "VernacStartTheoremProof",
            "ccbd7a7435f8fbdea95e74b66e99c6e223034fbb"
        ],
        [
            "by apply/codomP/idP=> [[u ->]|Px]; last exists (Sub x Px); rewrite ?valP ?SubK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SubFinType.",
            "VernacEndSegment",
            "4e0a98fde4ef8e430f490d91dee5bf49bf161d7f"
        ],
        [
            "Notation \"[ 'subFinType' 'of' T ]\" := (@pack_subFinType _ _ T _ _ _ id _ _ id) (at level 0, format \"[ 'subFinType' 'of' T ]\") : form_scope.",
            "VernacNotation",
            "e73bb30c4f3bbe31f09b5c9eadff05aeb44d2b90"
        ],
        [
            "Section FinTypeForSub.",
            "VernacBeginSection",
            "2c47f4fba26d276c3e923ae54663c51cce7f7d19"
        ],
        [
            "Variables (T : finType) (P : pred T) (sT : subCountType P).",
            "VernacAssumption",
            "923333a6a99f14709137b1212b4f8c3980344ff7"
        ],
        [
            "Definition sub_enum : seq sT := pmap insub (enumF T).",
            "VernacDefinition",
            "28a9eaab0665b8f15ab15647b853a128384167c2"
        ],
        [
            "Lemma mem_sub_enum u : u \\in sub_enum.",
            "VernacStartTheoremProof",
            "2a79c0da90c1e590ebf8b97060478961d426925e"
        ],
        [
            "by rewrite mem_pmap_sub -enumT mem_enum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_enum_uniq : uniq sub_enum.",
            "VernacStartTheoremProof",
            "7adc73ea42033e13bc6ae7cc75fd2367cffa67d0"
        ],
        [
            "by rewrite pmap_sub_uniq // -enumT enum_uniq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma val_sub_enum : map val sub_enum = enum P.",
            "VernacStartTheoremProof",
            "fd3d8db784f892180678abf7d1b071a63fe3d37e"
        ],
        [
            "rewrite pmap_filter; last exact: insubK.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: eq_filter => x; apply: isSome_insub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition SubFinMixin := UniqFinMixin sub_enum_uniq mem_sub_enum.",
            "VernacDefinition",
            "3ed3f4f1e9a7a0a12f8a88de401fa2ebb07a78c2"
        ],
        [
            "Definition SubFinMixin_for (eT : eqType) of phant eT := eq_rect _ Finite.mixin_of SubFinMixin eT.",
            "VernacDefinition",
            "fda0832aacb5a7031f502fefe644b6b5103e00f7"
        ],
        [
            "Variable sfT : subFinType P.",
            "VernacAssumption",
            "03c75eae2f7fb36a15807975ddf31f8ca1ce02f2"
        ],
        [
            "Lemma card_sub : #|sfT| = #|[pred x | P x]|.",
            "VernacStartTheoremProof",
            "d5332753c59273d1f3a845b9a5121e3cd6d6a5a5"
        ],
        [
            "by rewrite -(eq_card (codom_val sfT)) (card_image val_inj).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_card_sub (A : pred sfT) : A =i predT -> #|A| = #|[pred x | P x]|.",
            "VernacStartTheoremProof",
            "79443276e9dede1e363cfde7de57969d19a6d3ad"
        ],
        [
            "exact: eq_card_trans card_sub.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FinTypeForSub.",
            "VernacEndSegment",
            "01837d2ced39a5c0f7f914b9c7f5d3f38c1d41f2"
        ],
        [
            "Notation \"[ 'finMixin' 'of' T 'by' <: ]\" := (SubFinMixin_for (Phant T) (erefl _)) (at level 0, format \"[ 'finMixin' 'of' T 'by' <: ]\") : form_scope.",
            "VernacNotation",
            "01461cd0f152da15b20504645534449af5b1ecf5"
        ],
        [
            "Section CardSig.",
            "VernacBeginSection",
            "f2d54b3f7c22cfc890468879e7013286cb7712bc"
        ],
        [
            "Variables (T : finType) (P : pred T).",
            "VernacAssumption",
            "e9c5eb0be9823b9e5ed505f55214df9c99b1c512"
        ],
        [
            "Definition sig_finMixin := [finMixin of {x | P x} by <:].",
            "VernacDefinition",
            "7494a4f2c3983850eace56eb5ef242553ba37d9a"
        ],
        [
            "Canonical sig_finType := Eval hnf in FinType {x | P x} sig_finMixin.",
            "VernacDefinition",
            "ec05604b59146b417a39e6f67968308e483775a1"
        ],
        [
            "Canonical sig_subFinType := Eval hnf in [subFinType of {x | P x}].",
            "VernacDefinition",
            "921323c046d381894c22db896d136b45c07bcc37"
        ],
        [
            "Lemma card_sig : #|{: {x | P x}}| = #|[pred x | P x]|.",
            "VernacStartTheoremProof",
            "ace5361e2b57113857bf37ed4457f3f6aa4796a9"
        ],
        [
            "exact: card_sub.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End CardSig.",
            "VernacEndSegment",
            "565492192c677a2f82e381f3b66176b9cafa2763"
        ],
        [
            "Section SeqSubType.",
            "VernacBeginSection",
            "e6740759bfa1a8672c8047fdc383a43caf628908"
        ],
        [
            "Variables (T : eqType) (s : seq T).",
            "VernacAssumption",
            "cb57fb3851431ce81ba024bb64c3b124838fce53"
        ],
        [
            "Record seq_sub : Type := SeqSub {ssval : T; ssvalP : in_mem ssval (@mem T _ s)}.",
            "VernacInductive",
            "db497dc54350b5ca36eaace4644f29510174812d"
        ],
        [
            "Canonical seq_sub_subType := Eval hnf in [subType for ssval].",
            "VernacDefinition",
            "2be5cf7001fa1c76b8ee4ea2ce2a618c89c4f12b"
        ],
        [
            "Definition seq_sub_eqMixin := Eval hnf in [eqMixin of seq_sub by <:].",
            "VernacDefinition",
            "880dca3a08edc01f96fecf35c82f3f76d0d2c663"
        ],
        [
            "Canonical seq_sub_eqType := Eval hnf in EqType seq_sub seq_sub_eqMixin.",
            "VernacDefinition",
            "04a6c83a546944a0a7df85ca64d7808f41f752aa"
        ],
        [
            "Definition seq_sub_enum : seq seq_sub := undup (pmap insub s).",
            "VernacDefinition",
            "924eb4598e29b95d60fd154f2c55348e1f5e6013"
        ],
        [
            "Lemma mem_seq_sub_enum x : x \\in seq_sub_enum.",
            "VernacStartTheoremProof",
            "b149b7ccd38e7775953d850d2c9e3619b7b3c128"
        ],
        [
            "by rewrite mem_undup mem_pmap -valK map_f ?ssvalP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma val_seq_sub_enum : uniq s -> map val seq_sub_enum = s.",
            "VernacStartTheoremProof",
            "96b721e83349172f85517a6e93ad57e3aca29785"
        ],
        [
            "move=> Us; rewrite /seq_sub_enum undup_id ?pmap_sub_uniq //.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "rewrite (pmap_filter (insubK _)); apply/all_filterP.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by apply/allP => x; rewrite isSome_insub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition seq_sub_pickle x := index x seq_sub_enum.",
            "VernacDefinition",
            "037dab64b490db6e98be24ab4ebb4157f6eac08f"
        ],
        [
            "Definition seq_sub_unpickle n := nth None (map some seq_sub_enum) n.",
            "VernacDefinition",
            "b71c73927f8523b034380989f2d37160d4acc48d"
        ],
        [
            "Lemma seq_sub_pickleK : pcancel seq_sub_pickle seq_sub_unpickle.",
            "VernacStartTheoremProof",
            "ffd858a994a1c80ca60b08d2abf7a3bdd8836584"
        ],
        [
            "rewrite /seq_sub_unpickle => x.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite (nth_map x) ?nth_index ?index_mem ?mem_seq_sub_enum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition seq_sub_countMixin := CountMixin seq_sub_pickleK.",
            "VernacDefinition",
            "8706db1b0acf451e33a3ad3e66364b90076c7d80"
        ],
        [
            "Fact seq_sub_axiom : Finite.axiom seq_sub_enum.",
            "VernacStartTheoremProof",
            "e8dbd998c5cb19c92479016b0043408f60a8faa4"
        ],
        [
            "exact: Finite.uniq_enumP (undup_uniq _) mem_seq_sub_enum.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition seq_sub_finMixin := Finite.Mixin seq_sub_countMixin seq_sub_axiom.",
            "VernacDefinition",
            "1c58cd20e1d9235e34a7c3a257d7e8fd98a985f9"
        ],
        [
            "Definition adhoc_seq_sub_choiceMixin := PcanChoiceMixin seq_sub_pickleK.",
            "VernacDefinition",
            "f4fd783cd341c8f604f5e2fd2e2d672a835c8067"
        ],
        [
            "Definition adhoc_seq_sub_choiceType := Eval hnf in ChoiceType seq_sub adhoc_seq_sub_choiceMixin.",
            "VernacDefinition",
            "acf67cc2241bbaf9566fd6ff2793d74c5f259113"
        ],
        [
            "Definition adhoc_seq_sub_finType := [finType of seq_sub for FinType adhoc_seq_sub_choiceType seq_sub_finMixin].",
            "VernacDefinition",
            "8fa78635bd632af64e52d5c88957daad766ae761"
        ],
        [
            "End SeqSubType.",
            "VernacEndSegment",
            "981692f573067e9512442ba727e2c75ac153ecf2"
        ],
        [
            "Section SeqFinType.",
            "VernacBeginSection",
            "88666931a3a1916ccd365f569a334989e720b6d1"
        ],
        [
            "Variables (T : choiceType) (s : seq T).",
            "VernacAssumption",
            "9fa8b806312ec034ff66f34994e78813e29bb1b4"
        ],
        [
            "Local Notation sT := (seq_sub s).",
            "VernacSyntacticDefinition",
            "34586f877fe4b1bc7e6e190e1e7bba831c1988fe"
        ],
        [
            "Definition seq_sub_choiceMixin := [choiceMixin of sT by <:].",
            "VernacDefinition",
            "4fc59a07c071ca60cf708bd606a711cd6b433834"
        ],
        [
            "Canonical seq_sub_choiceType := Eval hnf in ChoiceType sT seq_sub_choiceMixin.",
            "VernacDefinition",
            "485c3e9547c618ea7456b4bd48542487c5952e62"
        ],
        [
            "Canonical seq_sub_countType := Eval hnf in CountType sT (seq_sub_countMixin s).",
            "VernacDefinition",
            "3d2eeb66a61b38836e1e69a4672cd376788b9762"
        ],
        [
            "Canonical seq_sub_subCountType := Eval hnf in [subCountType of sT].",
            "VernacDefinition",
            "e2c699c101026af4eb03f743a47dbef752ae1635"
        ],
        [
            "Canonical seq_sub_finType := Eval hnf in FinType sT (seq_sub_finMixin s).",
            "VernacDefinition",
            "494708a7b19e9b511916a14a5797a5e47c17e250"
        ],
        [
            "Canonical seq_sub_subFinType := Eval hnf in [subFinType of sT].",
            "VernacDefinition",
            "72fbde643404f21772d0e6ea597ebeceb3c0519c"
        ],
        [
            "Lemma card_seq_sub : uniq s -> #|{:sT}| = size s.",
            "VernacStartTheoremProof",
            "5c776412a6474db06890a9ad6939eeda07a3e908"
        ],
        [
            "by move=> Us; rewrite cardE enumT -(size_map val) unlock val_seq_sub_enum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SeqFinType.",
            "VernacEndSegment",
            "3bde317b6839b6ef6535f720c7b2e6dca7b56af1"
        ],
        [
            "Section OrdinalSub.",
            "VernacBeginSection",
            "ef8690481cada46701bb8529880c117dbb8ddbde"
        ],
        [
            "Variable n : nat.",
            "VernacAssumption",
            "07bef83858f70772f30ae2a622ca53ce45548b68"
        ],
        [
            "Inductive ordinal : predArgType := Ordinal m of m < n.",
            "VernacInductive",
            "30ed02c61d5e777944455531fb21480bf0bd73f3"
        ],
        [
            "Coercion nat_of_ord i := let: Ordinal m _ := i in m.",
            "VernacDefinition",
            "5db32875a9edc237ffb21390853f2f3ea0fe3cf5"
        ],
        [
            "Canonical ordinal_subType := [subType for nat_of_ord].",
            "VernacDefinition",
            "0919020fcde98892d9363d02c706615c5ebaaed0"
        ],
        [
            "Definition ordinal_eqMixin := Eval hnf in [eqMixin of ordinal by <:].",
            "VernacDefinition",
            "aac82eb91ff28d8c5407d5234797e2adb3ef4ca0"
        ],
        [
            "Canonical ordinal_eqType := Eval hnf in EqType ordinal ordinal_eqMixin.",
            "VernacDefinition",
            "946ea82a57bbbb8439f7edc15154ef9f69e7f07a"
        ],
        [
            "Definition ordinal_choiceMixin := [choiceMixin of ordinal by <:].",
            "VernacDefinition",
            "ab23262913f73ec2b538f3acbe94e4b266555615"
        ],
        [
            "Canonical ordinal_choiceType := Eval hnf in ChoiceType ordinal ordinal_choiceMixin.",
            "VernacDefinition",
            "c7ca135b79fb5ab99f337af5cd645e0e966a5df2"
        ],
        [
            "Definition ordinal_countMixin := [countMixin of ordinal by <:].",
            "VernacDefinition",
            "0b96bed585b32cee33c896140f6123330a2f973b"
        ],
        [
            "Canonical ordinal_countType := Eval hnf in CountType ordinal ordinal_countMixin.",
            "VernacDefinition",
            "c32f36f58c860219c3f22c044b5e6f1c9c2084c5"
        ],
        [
            "Canonical ordinal_subCountType := [subCountType of ordinal].",
            "VernacDefinition",
            "e93bd2eb9250668f81c6284177c3d280448b1484"
        ],
        [
            "Lemma ltn_ord (i : ordinal) : i < n.",
            "VernacStartTheoremProof",
            "8d2d1d557e1d1268d2e4c08436374611ccbd0b25"
        ],
        [
            "exact: valP i.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ord_inj : injective nat_of_ord.",
            "VernacStartTheoremProof",
            "359aa19c7f2f332ae7be88f65f81f24c76042332"
        ],
        [
            "exact: val_inj.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ord_enum : seq ordinal := pmap insub (iota 0 n).",
            "VernacDefinition",
            "4d2fa2882eb9cd9114c33ad1afcf520ed9f78903"
        ],
        [
            "Lemma val_ord_enum : map val ord_enum = iota 0 n.",
            "VernacStartTheoremProof",
            "b5ca6ac6762f8734143db8d8928b95a47d51ec99"
        ],
        [
            "rewrite pmap_filter; last exact: insubK.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/all_filterP; apply/allP=> i; rewrite mem_iota isSome_insub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ord_enum_uniq : uniq ord_enum.",
            "VernacStartTheoremProof",
            "2c97ab873e3136bab4746a28c32385562500cea9"
        ],
        [
            "by rewrite pmap_sub_uniq ?iota_uniq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_ord_enum i : i \\in ord_enum.",
            "VernacStartTheoremProof",
            "df5103079979f00858ba704491da9e0699ff6426"
        ],
        [
            "by rewrite -(mem_map ord_inj) val_ord_enum mem_iota ltn_ord.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ordinal_finMixin := Eval hnf in UniqFinMixin ord_enum_uniq mem_ord_enum.",
            "VernacDefinition",
            "b2e64d825023670e4519d4755ac957e2911c451f"
        ],
        [
            "Canonical ordinal_finType := Eval hnf in FinType ordinal ordinal_finMixin.",
            "VernacDefinition",
            "000ffc5377103afa8780a540b2b8ded2a44980be"
        ],
        [
            "Canonical ordinal_subFinType := Eval hnf in [subFinType of ordinal].",
            "VernacDefinition",
            "1e8078cd1f26bfb97463a4e77e512284ac65beda"
        ],
        [
            "End OrdinalSub.",
            "VernacEndSegment",
            "ba738526aecdb84d817f7326fb2d70333e91fc0c"
        ],
        [
            "Notation \"''I_' n\" := (ordinal n) (at level 8, n at level 2, format \"''I_' n\").",
            "VernacNotation",
            "8ef12751252c48e634f3e2eb90c4487ffa185eda"
        ],
        [
            "Hint Resolve ltn_ord : core.",
            "VernacHints",
            "7d4997b32952f48485c3d996c5dcb1500d3ebff4"
        ],
        [
            "Section OrdinalEnum.",
            "VernacBeginSection",
            "582d779ec23a8bb93a203c3b36107c487f2b4424"
        ],
        [
            "Variable n : nat.",
            "VernacAssumption",
            "07bef83858f70772f30ae2a622ca53ce45548b68"
        ],
        [
            "Lemma val_enum_ord : map val (enum 'I_n) = iota 0 n.",
            "VernacStartTheoremProof",
            "be84d701ce67f43efa4bd8c6742b20bddfafbe42"
        ],
        [
            "by rewrite enumT unlock val_ord_enum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_enum_ord : size (enum 'I_n) = n.",
            "VernacStartTheoremProof",
            "8096237fda390e4f40a7111deb1916b9615bbb3a"
        ],
        [
            "by rewrite -(size_map val) val_enum_ord size_iota.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_ord : #|'I_n| = n.",
            "VernacStartTheoremProof",
            "678f77281358c4662cb6830c19de279ade4ae92b"
        ],
        [
            "by rewrite cardE size_enum_ord.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_enum_ord i0 m : m < n -> nth i0 (enum 'I_n) m = m :> nat.",
            "VernacStartTheoremProof",
            "22cc6f5522261bac3fc9976102d05cdfaea0e41e"
        ],
        [
            "by move=> ?; rewrite -(nth_map _ 0) (size_enum_ord, val_enum_ord) // nth_iota.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_ord_enum (i0 i : 'I_n) : nth i0 (enum 'I_n) i = i.",
            "VernacStartTheoremProof",
            "183c3e82e0243f084c488809541f62a4e5584634"
        ],
        [
            "by apply: val_inj; apply: nth_enum_ord.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma index_enum_ord (i : 'I_n) : index i (enum 'I_n) = i.",
            "VernacStartTheoremProof",
            "b01611b2cdfa91d43dd505377dbe33b0d6af6444"
        ],
        [
            "by rewrite -{1}(nth_ord_enum i i) index_uniq ?(enum_uniq, size_enum_ord).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End OrdinalEnum.",
            "VernacEndSegment",
            "6070e4c71e602b7490bc2b4a77139eee150de3a7"
        ],
        [
            "Lemma widen_ord_proof n m (i : 'I_n) : n <= m -> i < m.",
            "VernacStartTheoremProof",
            "20fc3befaee639547e5c11ecf4ad3209be47688f"
        ],
        [
            "exact: leq_trans.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition widen_ord n m le_n_m i := Ordinal (@widen_ord_proof n m i le_n_m).",
            "VernacDefinition",
            "f3243088952a4b1a12fa3aeb8226fe3ef55ab29a"
        ],
        [
            "Lemma cast_ord_proof n m (i : 'I_n) : n = m -> i < m.",
            "VernacStartTheoremProof",
            "a8c9e6f0d0c8532db844f1b128265784becdb505"
        ],
        [
            "by move <-.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cast_ord n m eq_n_m i := Ordinal (@cast_ord_proof n m i eq_n_m).",
            "VernacDefinition",
            "58993e0434a0ed669aeea37e244fb7d56bbd8f0a"
        ],
        [
            "Lemma cast_ord_id n eq_n i : cast_ord eq_n i = i :> 'I_n.",
            "VernacStartTheoremProof",
            "3e42390372d1937aa968822b2a16c179293fec68"
        ],
        [
            "exact: val_inj.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cast_ord_comp n1 n2 n3 eq_n2 eq_n3 i : @cast_ord n2 n3 eq_n3 (@cast_ord n1 n2 eq_n2 i) = cast_ord (etrans eq_n2 eq_n3) i.",
            "VernacStartTheoremProof",
            "8d69b0f6a3e4aa22f72ddbdb8787eb1c528a1732"
        ],
        [
            "exact: val_inj.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cast_ordK n1 n2 eq_n : cancel (@cast_ord n1 n2 eq_n) (cast_ord (esym eq_n)).",
            "VernacStartTheoremProof",
            "3c5aa947ecf761353a9b6668a42efdf3dfc3239d"
        ],
        [
            "by move=> i; apply: val_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cast_ordKV n1 n2 eq_n : cancel (cast_ord (esym eq_n)) (@cast_ord n1 n2 eq_n).",
            "VernacStartTheoremProof",
            "725026e04b075aec0e8158b406b78ec3ab4752ea"
        ],
        [
            "by move=> i; apply: val_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cast_ord_inj n1 n2 eq_n : injective (@cast_ord n1 n2 eq_n).",
            "VernacStartTheoremProof",
            "906f70c2a4352548292039699d8d67fc196a70cc"
        ],
        [
            "exact: can_inj (cast_ordK eq_n).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rev_ord_proof n (i : 'I_n) : n - i.+1 < n.",
            "VernacStartTheoremProof",
            "2e10387f8a16bfdf59b11fedf99a65f76ffd2ddc"
        ],
        [
            "by case: n i => [|n] [i lt_i_n] //; rewrite ltnS subSS leq_subr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition rev_ord n i := Ordinal (@rev_ord_proof n i).",
            "VernacDefinition",
            "d089b1d87816615cc8efb1b994ce7715440f8ae2"
        ],
        [
            "Lemma rev_ordK {n} : involutive (@rev_ord n).",
            "VernacStartTheoremProof",
            "0378b6487f8671ce82db4dd21c0597d0f9267d5b"
        ],
        [
            "by case: n => [|n] [i lti] //; apply: val_inj; rewrite /= !subSS subKn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rev_ord_inj {n} : injective (@rev_ord n).",
            "VernacStartTheoremProof",
            "9c8cd7ae3ff7b558f26fa6f64edeb140a0414659"
        ],
        [
            "exact: inv_inj rev_ordK.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section EnumRank.",
            "VernacBeginSection",
            "3bb0e62df74aacef747b4105f9200f919a8d1fb9"
        ],
        [
            "Variable T : finType.",
            "VernacAssumption",
            "6349381da4d33cbc2eeaf1bade38718e15f7a2c9"
        ],
        [
            "Implicit Type A : pred T.",
            "VernacReserve",
            "43c29bea71bc4610fdb17efade8a5dc36bbadad5"
        ],
        [
            "Lemma enum_rank_subproof x0 A : x0 \\in A -> 0 < #|A|.",
            "VernacStartTheoremProof",
            "d6c71c091caa5adf282b63d6d40934f328264202"
        ],
        [
            "by move=> Ax0; rewrite (cardD1 x0) Ax0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition enum_rank_in x0 A (Ax0 : x0 \\in A) x := insubd (Ordinal (@enum_rank_subproof x0 [eta A] Ax0)) (index x (enum A)).",
            "VernacDefinition",
            "84e21597215a91bea62861e403bd2d0d2449cded"
        ],
        [
            "Definition enum_rank x := @enum_rank_in x T (erefl true) x.",
            "VernacDefinition",
            "9816c5f3c2378a1f9858b9703ff22ae2a7598a3c"
        ],
        [
            "Lemma enum_default A : 'I_(#|A|) -> T.",
            "VernacStartTheoremProof",
            "9498f7f44447816a749527c48b04fb5bc34340e6"
        ],
        [
            "by rewrite cardE; case: (enum A) => [|//] [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition enum_val A i := nth (@enum_default [eta A] i) (enum A) i.",
            "VernacDefinition",
            "846136113e8bc73f8b73501142556e5aa42f6a32"
        ],
        [
            "Prenex Implicits enum_val.",
            "VernacExtend",
            "77428f2901ee701c95fb89d330a6b66cba7874da"
        ],
        [
            "Lemma enum_valP A i : @enum_val A i \\in A.",
            "VernacStartTheoremProof",
            "84fe87ef14298e560f7de0166ad8b5b25f702d05"
        ],
        [
            "by rewrite -mem_enum mem_nth -?cardE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma enum_val_nth A x i : @enum_val A i = nth x (enum A) i.",
            "VernacStartTheoremProof",
            "bff0e236f05cb1728353f79187c974ab1a605147"
        ],
        [
            "by apply: set_nth_default; rewrite cardE in i *; apply: ltn_ord.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_image T' y0 (f : T -> T') A (i : 'I_#|A|) : nth y0 (image f A) i = f (enum_val i).",
            "VernacStartTheoremProof",
            "40b3857a499d815c9fb0186cf12d2e32fa93c1b5"
        ],
        [
            "by rewrite -(nth_map _ y0) // -cardE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_codom T' y0 (f : T -> T') (i : 'I_#|T|) : nth y0 (codom f) i = f (enum_val i).",
            "VernacStartTheoremProof",
            "d5fc79f499c5a11f6b5320d8ac9cf08596186239"
        ],
        [
            "exact: nth_image.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_enum_rank_in x00 x0 A Ax0 : {in A, cancel (@enum_rank_in x0 A Ax0) (nth x00 (enum A))}.",
            "VernacStartTheoremProof",
            "04c4d7b2506c2dae88f72f5102ab25fcc33d7c75"
        ],
        [
            "move=> x Ax; rewrite /= insubdK ?nth_index ?mem_enum //.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite cardE [_ \\in _]index_mem mem_enum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_enum_rank x0 : cancel enum_rank (nth x0 (enum T)).",
            "VernacStartTheoremProof",
            "75b2edc66f956a1538e29ee89fc8006e7325d2e3"
        ],
        [
            "by move=> x; apply: nth_enum_rank_in.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma enum_rankK_in x0 A Ax0 : {in A, cancel (@enum_rank_in x0 A Ax0) enum_val}.",
            "VernacStartTheoremProof",
            "a2cc1b99612bfa989b34c0d23be73cd633cbb4e5"
        ],
        [
            "by move=> x; apply: nth_enum_rank_in.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma enum_rankK : cancel enum_rank enum_val.",
            "VernacStartTheoremProof",
            "a9a667ef3c13faa4d7cabd543aea74170378a2f3"
        ],
        [
            "by move=> x; apply: enum_rankK_in.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma enum_valK_in x0 A Ax0 : cancel enum_val (@enum_rank_in x0 A Ax0).",
            "VernacStartTheoremProof",
            "2a6484432dec1f0acc511b28306f2a7d7547a807"
        ],
        [
            "move=> x; apply: ord_inj; rewrite insubdK; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite cardE [_ \\in _]index_mem mem_nth // -cardE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite index_uniq ?enum_uniq // -cardE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma enum_valK : cancel enum_val enum_rank.",
            "VernacStartTheoremProof",
            "f2c4371bafb0a0e5d4c34bdc6b1cfaf06850c8c3"
        ],
        [
            "by move=> x; apply: enum_valK_in.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma enum_rank_inj : injective enum_rank.",
            "VernacStartTheoremProof",
            "8875d7bc57a9cefe24de054d8facae5909e0bdb9"
        ],
        [
            "exact: can_inj enum_rankK.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma enum_val_inj A : injective (@enum_val A).",
            "VernacStartTheoremProof",
            "2590ac2ef2d3b5d7c712b353ff1e7d93b15de3da"
        ],
        [
            "by move=> i; apply: can_inj (enum_valK_in (enum_valP i)) (i).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma enum_val_bij_in x0 A : x0 \\in A -> {on A, bijective (@enum_val A)}.",
            "VernacStartTheoremProof",
            "63effc76bf01682f5b756926d7dbf4fdc16ee169"
        ],
        [
            "move=> Ax0; exists (enum_rank_in Ax0) => [i _|]; last exact: enum_rankK_in.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "exact: enum_valK_in.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma enum_rank_bij : bijective enum_rank.",
            "VernacStartTheoremProof",
            "431bf362fc3afb653af6d4251848a5e9e093ec4c"
        ],
        [
            "by move: enum_rankK enum_valK; exists (@enum_val T).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma enum_val_bij : bijective (@enum_val T).",
            "VernacStartTheoremProof",
            "7306fe126b7b811e5d7419286f71ded466b3c444"
        ],
        [
            "by move: enum_rankK enum_valK; exists enum_rank.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fin_all_exists U (P : forall x : T, U x -> Prop) : (forall x, exists u, P x u) -> (exists u, forall x, P x (u x)).",
            "VernacStartTheoremProof",
            "eee869408abc5c9a007dd1095aef1fd9d3dc13fe"
        ],
        [
            "move=> ex_u; pose Q m x := enum_rank x < m -> {ux | P x ux}.",
            "VernacExtend",
            "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
        ],
        [
            "suffices: forall m, m <= #|T| -> exists w : forall x, Q m x, True.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "case/(_ #|T|)=> // w _; pose u x := sval (w x (ltn_ord _)).",
            "VernacExtend",
            "61f7313c68f88d92a678d74fe9c99999257a468e"
        ],
        [
            "by exists u => x; rewrite {}/u; case: (w x _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim=> [|m IHm] ltmX; first by have w x: Q 0 x by []; exists w.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have{IHm} [w _] := IHm (ltnW ltmX); pose i := Ordinal ltmX.",
            "VernacExtend",
            "fa6ff0c3d4595d45015144bd8c25fb5ac62ed42b"
        ],
        [
            "have [u Pu] := ex_u (enum_val i); suffices w' x: Q m.+1 x by exists w'.",
            "VernacExtend",
            "32f3051101718011671dd27b552d72a725766d33"
        ],
        [
            "rewrite /Q ltnS leq_eqVlt (val_eqE _ i); case: eqP => [def_i _ | _ /w //].",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by rewrite -def_i enum_rankK in u Pu; exists u.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fin_all_exists2 U (P Q : forall x : T, U x -> Prop) : (forall x, exists2 u, P x u & Q x u) -> (exists2 u, forall x, P x (u x) & forall x, Q x (u x)).",
            "VernacStartTheoremProof",
            "c4a4057e487de958300652bca5ca87f6ea623e0d"
        ],
        [
            "move=> ex_u; have (x): exists u, P x u /\\ Q x u by have [u] := ex_u x; exists u.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "by case/fin_all_exists=> u /all_and2[]; exists u.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EnumRank.",
            "VernacEndSegment",
            "a7376ebfa6cb76b1f311f20a9b7f205e8bed9b8c"
        ],
        [
            "Arguments enum_val_inj {T A} [i1 i2] : rename.",
            "VernacArguments",
            "7dfaae180670cfb507dcecd17934ed7deb06a731"
        ],
        [
            "Arguments enum_rank_inj {T} [x1 x2].",
            "VernacArguments",
            "37c3bb11f85d6a6b291eafc6febc074453b8e8d4"
        ],
        [
            "Prenex Implicits enum_val enum_rank enum_valK enum_rankK.",
            "VernacExtend",
            "631329f81bc3754a65b478bd5462f5ae8f833217"
        ],
        [
            "Lemma enum_rank_ord n i : enum_rank i = cast_ord (esym (card_ord n)) i.",
            "VernacStartTheoremProof",
            "3ee32acea25941f20d3d6b5c7d9df511247980fc"
        ],
        [
            "by apply: val_inj; rewrite insubdK ?index_enum_ord // card_ord [_ \\in _]ltn_ord.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma enum_val_ord n i : enum_val i = cast_ord (card_ord n) i.",
            "VernacStartTheoremProof",
            "16581d964e510a9463112537e7bfba1d904aab8f"
        ],
        [
            "by apply: canLR (@enum_rankK _) _; apply: val_inj; rewrite enum_rank_ord.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition bump h i := (h <= i) + i.",
            "VernacDefinition",
            "329cc683bb4e49cf1ed03ef9c52bceb2fbe48825"
        ],
        [
            "Definition unbump h i := i - (h < i).",
            "VernacDefinition",
            "27704f074dc637f3d18edc9ad1b27da6f99ab2f2"
        ],
        [
            "Lemma bumpK h : cancel (bump h) (unbump h).",
            "VernacStartTheoremProof",
            "4b3c4c6a1d9d259fa253dece80cf9d76388a5f0e"
        ],
        [
            "rewrite /bump /unbump => i.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "have [le_hi | lt_ih] := leqP h i; first by rewrite ltnS le_hi subn1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite ltnNge ltnW ?subn0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma neq_bump h i : h != bump h i.",
            "VernacStartTheoremProof",
            "9b31b036efdad0b50c81e35bf12b5732774b8ccf"
        ],
        [
            "rewrite /bump eqn_leq; have [le_hi | lt_ih] := leqP h i.",
            "VernacExtend",
            "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
        ],
        [
            "by rewrite ltnNge le_hi andbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite leqNgt lt_ih.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unbumpKcond h i : bump h (unbump h i) = (i == h) + i.",
            "VernacStartTheoremProof",
            "c496f5d799d70e737f4978b532a2cec8c53118a8"
        ],
        [
            "rewrite /bump /unbump leqNgt -subSKn.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: (ltngtP i h) => /= [-> | ltih | ->] //; last by rewrite ltnn.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite subn1 /= leqNgt !(ltn_predK ltih, ltih, add1n).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unbumpK {h} : {in predC1 h, cancel (unbump h) (bump h)}.",
            "VernacStartTheoremProof",
            "dbc684802a9eab77af8ed5a4c8628bde2d028e13"
        ],
        [
            "by move=> i /negbTE-neq_h_i; rewrite unbumpKcond neq_h_i.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bump_addl h i k : bump (k + h) (k + i) = k + bump h i.",
            "VernacStartTheoremProof",
            "5aeadf587691591568b9c6dcc2109729e370ef2d"
        ],
        [
            "by rewrite /bump leq_add2l addnCA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bumpS h i : bump h.+1 i.+1 = (bump h i).+1.",
            "VernacStartTheoremProof",
            "5a2cfc3baa651f9e373a1bd576c0cd57120ca5bf"
        ],
        [
            "exact: addnS.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unbump_addl h i k : unbump (k + h) (k + i) = k + unbump h i.",
            "VernacStartTheoremProof",
            "00ca90eeb9e490e3c0bba4ad304514e4ae1e71d0"
        ],
        [
            "apply: (can_inj (bumpK (k + h))).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite bump_addl !unbumpKcond eqn_add2l addnCA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unbumpS h i : unbump h.+1 i.+1 = (unbump h i).+1.",
            "VernacStartTheoremProof",
            "79e0d485896a11af887f9bdbd062dcb43815f3d9"
        ],
        [
            "exact: unbump_addl 1.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_bump h i j : (i <= bump h j) = (unbump h i <= j).",
            "VernacStartTheoremProof",
            "db81884b8e1f2f23ecd1bc61dbdd8727371abd2e"
        ],
        [
            "rewrite /bump leq_subLR.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: (leqP i h) (leqP h j) => [le_i_h | lt_h_i] [le_h_j | lt_j_h] //.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite leqW (leq_trans le_i_h).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite !(leqNgt i) ltnW (leq_trans _ lt_h_i).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_bump2 h i j : (bump h i <= bump h j) = (i <= j).",
            "VernacStartTheoremProof",
            "8d8eeb30ca7ea980adaaa2c88fe81909aea657f9"
        ],
        [
            "by rewrite leq_bump bumpK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bumpC h1 h2 i : bump h1 (bump h2 i) = bump (bump h1 h2) (bump (unbump h2 h1) i).",
            "VernacStartTheoremProof",
            "5d3dcda186ce1b5e3a2c0d324686100888978160"
        ],
        [
            "rewrite {1 5}/bump -leq_bump addnCA; congr (_ + (_ + _)).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "rewrite 2!leq_bump /unbump /bump; case: (leqP h1 h2) => [le_h12 | lt_h21].",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by rewrite subn0 ltnS le_h12 subn1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite subn1 (ltn_predK lt_h21) (leqNgt h1) lt_h21 subn0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift_subproof n h (i : 'I_n.-1) : bump h i < n.",
            "VernacStartTheoremProof",
            "52ec93a511086ec51b910b412d7286233e258cf6"
        ],
        [
            "by case: n i => [[]|n] //= i; rewrite -addnS (leq_add (leq_b1 _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition lift n (h : 'I_n) (i : 'I_n.-1) := Ordinal (lift_subproof h i).",
            "VernacDefinition",
            "7e5ae307780fff63ca5f4b98128c9e1bd710381a"
        ],
        [
            "Lemma unlift_subproof n (h : 'I_n) (u : {j | j != h}) : unbump h (val u) < n.-1.",
            "VernacStartTheoremProof",
            "1e263776095de5074f77cf63d1dd2e9220f3fe01"
        ],
        [
            "case: n h u => [|n h] [] //= j ne_jh.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite -(leq_bump2 h.+1) bumpS unbumpK // /bump.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: (ltngtP n h) => [|_|eq_nh]; rewrite ?(leqNgt _ h) ?ltn_ord //.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by rewrite ltn_neqAle [j <= _](valP j) {2}eq_nh andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition unlift n (h i : 'I_n) := omap (fun u : {j | j != h} => Ordinal (unlift_subproof u)) (insub i).",
            "VernacDefinition",
            "4598c97725ab4de6c3e2e29beb24e1b11910f73d"
        ],
        [
            "Variant unlift_spec n h i : option 'I_n.-1 -> Type := | UnliftSome j of i = lift h j : unlift_spec h i (Some j) | UnliftNone of i = h : unlift_spec h i None.",
            "VernacInductive",
            "8e882b8b7761648c37115ac3c720cfa33f8368f9"
        ],
        [
            "Lemma unliftP n (h i : 'I_n) : unlift_spec h i (unlift h i).",
            "VernacStartTheoremProof",
            "31f375c71e31b8dd0f1afe37afd8c09d0d5474b1"
        ],
        [
            "rewrite /unlift; case: insubP => [u nhi | ] def_i /=; constructor.",
            "VernacExtend",
            "e425985f7322848371c52a1e49b45c19cea7b95c"
        ],
        [
            "by apply: val_inj; rewrite /= def_i unbumpK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite negbK in def_i; apply/eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma neq_lift n (h : 'I_n) i : h != lift h i.",
            "VernacStartTheoremProof",
            "8a6a3da233423fa32809be56b916d7bfcbfb2220"
        ],
        [
            "exact: neq_bump.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unlift_none n (h : 'I_n) : unlift h h = None.",
            "VernacStartTheoremProof",
            "fbe66d0537452974ec65817cbdd3153ceb73b2fc"
        ],
        [
            "by case: unliftP => // j Dh; case/eqP: (neq_lift h j).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unlift_some n (h i : 'I_n) : h != i -> {j | i = lift h j & unlift h i = Some j}.",
            "VernacStartTheoremProof",
            "868f0179df1f22168b2be790d8ed846d6d3a77e6"
        ],
        [
            "rewrite eq_sym => /eqP neq_ih.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by case Dui: (unlift h i) / (unliftP h i) => [j Dh|//]; exists j.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift_inj n (h : 'I_n) : injective (lift h).",
            "VernacStartTheoremProof",
            "8d88705f944bb99617f80d3eed96d478c2c1991a"
        ],
        [
            "by move=> i1 i2 [/(can_inj (bumpK h))/val_inj].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments lift_inj {n h} [i1 i2] eq_i12h : rename.",
            "VernacArguments",
            "087b72428e0d94ac8d190317ea98f1b708937bef"
        ],
        [
            "Lemma liftK n (h : 'I_n) : pcancel (lift h) (unlift h).",
            "VernacStartTheoremProof",
            "1dab0effd384f52ad9acd9495802e32dfe77612c"
        ],
        [
            "by move=> i; case: (unlift_some (neq_lift h i)) => j /lift_inj->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lshift_subproof m n (i : 'I_m) : i < m + n.",
            "VernacStartTheoremProof",
            "534a3e9431b04554779fb8f5e25b9bf92068a262"
        ],
        [
            "by apply: leq_trans (valP i) _; apply: leq_addr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rshift_subproof m n (i : 'I_n) : m + i < m + n.",
            "VernacStartTheoremProof",
            "4fb27baf2b6535c9c8f0384b6e748c5ea6e34a2e"
        ],
        [
            "by rewrite ltn_add2l.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition lshift m n (i : 'I_m) := Ordinal (lshift_subproof n i).",
            "VernacDefinition",
            "f6816e73082b85f184044b18912244b377c0a329"
        ],
        [
            "Definition rshift m n (i : 'I_n) := Ordinal (rshift_subproof m i).",
            "VernacDefinition",
            "cd8377a73056ab42107677853324dfdac0c61ce8"
        ],
        [
            "Lemma split_subproof m n (i : 'I_(m + n)) : i >= m -> i - m < n.",
            "VernacStartTheoremProof",
            "ff02184a3ecb3ad3411f00bf9e153a68f314d475"
        ],
        [
            "by move/subSn <-; rewrite leq_subLR.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition split {m n} (i : 'I_(m + n)) : 'I_m + 'I_n := match ltnP (i) m with | LtnNotGeq lt_i_m => inl _ (Ordinal lt_i_m) | GeqNotLtn ge_i_m => inr _ (Ordinal (split_subproof ge_i_m)) end.",
            "VernacDefinition",
            "c17acf51e8c2d0dfe2637844ea269b30e50ba83c"
        ],
        [
            "Variant split_spec m n (i : 'I_(m + n)) : 'I_m + 'I_n -> bool -> Type := | SplitLo (j : 'I_m) of i = j :> nat : split_spec i (inl _ j) true | SplitHi (k : 'I_n) of i = m + k :> nat : split_spec i (inr _ k) false.",
            "VernacInductive",
            "6d5432d99c402184c55b884b5f4103acc54ac08f"
        ],
        [
            "Lemma splitP m n (i : 'I_(m + n)) : split_spec i (split i) (i < m).",
            "VernacStartTheoremProof",
            "a37eae590ede510ba290b36330f1d6beffd0d227"
        ],
        [
            "rewrite /split {-3}/leq.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case: (@ltnP i m) => cmp_i_m //=; constructor; rewrite ?subnKC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition unsplit {m n} (jk : 'I_m + 'I_n) := match jk with inl j => lshift n j | inr k => rshift m k end.",
            "VernacDefinition",
            "41424b55f8d13aa3041ebe3c291cb67b5ad9f55e"
        ],
        [
            "Lemma ltn_unsplit m n (jk : 'I_m + 'I_n) : (unsplit jk < m) = jk.",
            "VernacStartTheoremProof",
            "a1cc12232888f733f0acff0840f6c8e8d6f47f06"
        ],
        [
            "by case: jk => [j|k]; rewrite /= ?ltn_ord // ltnNge leq_addr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma splitK {m n} : cancel (@split m n) unsplit.",
            "VernacStartTheoremProof",
            "95d53675733856a7b51ab183d1f2db1158870b7c"
        ],
        [
            "by move=> i; apply: val_inj; case: splitP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma unsplitK {m n} : cancel (@unsplit m n) split.",
            "VernacStartTheoremProof",
            "3095cea658227efb374a578b0536da31742a1856"
        ],
        [
            "move=> jk; have:= ltn_unsplit jk.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "by do [case: splitP; case: jk => //= i j] => [|/addnI] => /ord_inj->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section OrdinalPos.",
            "VernacBeginSection",
            "8023a49d39288cbfb9b44cec96fd1b3d0e85b889"
        ],
        [
            "Variable n' : nat.",
            "VernacAssumption",
            "4b8d1474864e01df61b374405aca10e79176b1eb"
        ],
        [
            "Local Notation n := n'.+1.",
            "VernacSyntacticDefinition",
            "a44d7133197df31a38212ab1d7bfb6ec0dc123a2"
        ],
        [
            "Definition ord0 := Ordinal (ltn0Sn n').",
            "VernacDefinition",
            "20e89722324ae2feee2e77a8fb7567691ecace0a"
        ],
        [
            "Definition ord_max := Ordinal (ltnSn n').",
            "VernacDefinition",
            "16acc256899e263f8e3059ef173165446d8e7707"
        ],
        [
            "Lemma leq_ord (i : 'I_n) : i <= n'.",
            "VernacStartTheoremProof",
            "f26630511b2fccf4e6ea0ae43343d42925f78e81"
        ],
        [
            "exact: valP i.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_ord_proof m : n' - m < n.",
            "VernacStartTheoremProof",
            "1f5206173fe3f9870919324ba5488316016fff64"
        ],
        [
            "by rewrite ltnS leq_subr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition sub_ord m := Ordinal (sub_ord_proof m).",
            "VernacDefinition",
            "70e0324ef2eabea6d359f11c1d9b75f267deebe6"
        ],
        [
            "Lemma sub_ordK (i : 'I_n) : n' - (n' - i) = i.",
            "VernacStartTheoremProof",
            "b20d6911da9f28aed69e3904a361e1e26c931479"
        ],
        [
            "by rewrite subKn ?leq_ord.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition inord m : 'I_n := insubd ord0 m.",
            "VernacDefinition",
            "6410f1f22bef4f088dab82844f8fd872c5a9c1d9"
        ],
        [
            "Lemma inordK m : m < n -> inord m = m :> nat.",
            "VernacStartTheoremProof",
            "eebd462ef755dfa11121ef75f8c7ec64d97304a2"
        ],
        [
            "by move=> lt_m; rewrite val_insubd lt_m.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma inord_val (i : 'I_n) : inord i = i.",
            "VernacStartTheoremProof",
            "3fbe3acd5f48776d3c9285e8e6ec6d6f7804aff5"
        ],
        [
            "by rewrite /inord /insubd valK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma enum_ordS : enum 'I_n = ord0 :: map (lift ord0) (enum 'I_n').",
            "VernacStartTheoremProof",
            "c76414ae7858b1264de1c2193f3cec6b2a48500e"
        ],
        [
            "apply: (inj_map val_inj); rewrite val_enum_ord /= -map_comp.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite (map_comp (addn 1)) val_enum_ord -iota_addl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift_max (i : 'I_n') : lift ord_max i = i :> nat.",
            "VernacStartTheoremProof",
            "5017dbf219382e034c65a7f5a2834ebf94073060"
        ],
        [
            "by rewrite /= /bump leqNgt ltn_ord.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift0 (i : 'I_n') : lift ord0 i = i.+1 :> nat.",
            "VernacStartTheoremProof",
            "f031d75228d031e3b897e8d7ca140b249cdedd2f"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End OrdinalPos.",
            "VernacEndSegment",
            "ae2ffc8059b886cfba8ca1cf33f2417fd740b318"
        ],
        [
            "Arguments ord0 {n'}.",
            "VernacArguments",
            "5cc92c36faae7d3d24573f009cb5b78c8412b4f1"
        ],
        [
            "Arguments ord_max {n'}.",
            "VernacArguments",
            "744b16b13658ef9d08cb643a16c020c9dcc42fae"
        ],
        [
            "Arguments inord {n'}.",
            "VernacArguments",
            "e89d89f56fa96b879ac521e361d320d2ec2ab85d"
        ],
        [
            "Arguments sub_ord {n'}.",
            "VernacArguments",
            "9f263bd74e82725827647ab5fc7f8e3f44dcb2eb"
        ],
        [
            "Arguments sub_ordK {n'}.",
            "VernacArguments",
            "796990dcc58a7f38be14123ec912229099b1ebb1"
        ],
        [
            "Arguments inord_val {n'}.",
            "VernacArguments",
            "dedb0424175e8fbbcbf46ce4214ccc60b97c0848"
        ],
        [
            "Section ProdFinType.",
            "VernacBeginSection",
            "b104b7bea90be973b112014c0b19579396f324d1"
        ],
        [
            "Variable T1 T2 : finType.",
            "VernacAssumption",
            "4229300505b426d8f1aaf3aff9cedc590a8175fc"
        ],
        [
            "Definition prod_enum := [seq (x1, x2) | x1 <- enum T1, x2 <- enum T2].",
            "VernacDefinition",
            "2fd8589a0da1c2d4a0db914feb3ad94b5e0353c4"
        ],
        [
            "Lemma predX_prod_enum (A1 : pred T1) (A2 : pred T2) : count [predX A1 & A2] prod_enum = #|A1| * #|A2|.",
            "VernacStartTheoremProof",
            "b542706087adf5b4824000af41f1a1774502ea36"
        ],
        [
            "rewrite !cardE !size_filter -!enumT /prod_enum.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "elim: (enum T1) => //= x1 s1 IHs; rewrite count_cat {}IHs count_map /preim /=.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by case: (x1 \\in A1); rewrite ?count_pred0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prod_enumP : Finite.axiom prod_enum.",
            "VernacStartTheoremProof",
            "63acb4cb8ed7c9a1aa5a9319896837483bc5c271"
        ],
        [
            "by case=> x1 x2; rewrite (predX_prod_enum (pred1 x1) (pred1 x2)) !card1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition prod_finMixin := Eval hnf in FinMixin prod_enumP.",
            "VernacDefinition",
            "075d708bc942b6621efedd7cfe5110ccc5824ee1"
        ],
        [
            "Canonical prod_finType := Eval hnf in FinType (T1 * T2) prod_finMixin.",
            "VernacDefinition",
            "75b81fe9abc5f40c62eb2e0c0255174fe3551c35"
        ],
        [
            "Lemma cardX (A1 : pred T1) (A2 : pred T2) : #|[predX A1 & A2]| = #|A1| * #|A2|.",
            "VernacStartTheoremProof",
            "98d02e6d9b14cc08421fe358ab81a7621c2c77ac"
        ],
        [
            "by rewrite -predX_prod_enum unlock size_filter unlock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_prod : #|{: T1 * T2}| = #|T1| * #|T2|.",
            "VernacStartTheoremProof",
            "f8e9455c785ca45028ff2f079c1be5cf4b2dbaa9"
        ],
        [
            "by rewrite -cardX; apply: eq_card; case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_card_prod (A : pred (T1 * T2)) : A =i predT -> #|A| = #|T1| * #|T2|.",
            "VernacStartTheoremProof",
            "252950600dcc5aae0f0b1ffceb683636672719a9"
        ],
        [
            "exact: eq_card_trans card_prod.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ProdFinType.",
            "VernacEndSegment",
            "1e2d5e72ed71fc77d280ad5c8099d2d012c9b370"
        ],
        [
            "Section TagFinType.",
            "VernacBeginSection",
            "4ab13ace3b183bdf45ff91b1132c897845ed03a3"
        ],
        [
            "Variables (I : finType) (T_ : I -> finType).",
            "VernacAssumption",
            "d31e2393e78221c907cad1123953f0e18292b11c"
        ],
        [
            "Definition tag_enum := flatten [seq [seq Tagged T_ x | x <- enumF (T_ i)] | i <- enumF I].",
            "VernacDefinition",
            "7c3faa9cb702a6bc1bdb382453d02bd9f1db128c"
        ],
        [
            "Lemma tag_enumP : Finite.axiom tag_enum.",
            "VernacStartTheoremProof",
            "d95ba5352905b6e6aca3f75dc48e112cb1b217a9"
        ],
        [
            "case=> i x; rewrite -(enumP i) /tag_enum -enumT.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "elim: (enum I) => //= j e IHe.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "rewrite count_cat count_map {}IHe; congr (_ + _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "rewrite -size_filter -cardE /=; case: eqP => [-> | ne_j_i].",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by apply: (@eq_card1 _ x) => y; rewrite -topredE /= tagged_asE ?eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: eq_card0 => y.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition tag_finMixin := Eval hnf in FinMixin tag_enumP.",
            "VernacDefinition",
            "7bdf1dea24b03656f8ddfefdc7e0f19059824d17"
        ],
        [
            "Canonical tag_finType := Eval hnf in FinType {i : I & T_ i} tag_finMixin.",
            "VernacDefinition",
            "9198a3c4abadcde6236446872f3730781922eded"
        ],
        [
            "Lemma card_tagged : #|{: {i : I & T_ i}}| = sumn (map (fun i => #|T_ i|) (enum I)).",
            "VernacStartTheoremProof",
            "fb51ffb9d7369e1652763263ff6642e0745f4e16"
        ],
        [
            "rewrite cardE !enumT {1}unlock size_flatten /shape -map_comp.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by congr (sumn _); apply: eq_map => i; rewrite /= size_map -enumT -cardE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End TagFinType.",
            "VernacEndSegment",
            "561bd265b8ab4c82748e523cfc0f94432fadabb0"
        ],
        [
            "Section SumFinType.",
            "VernacBeginSection",
            "47efb9fcfe760cb16df2b9ce1d445fe80aff12cd"
        ],
        [
            "Variables T1 T2 : finType.",
            "VernacAssumption",
            "4229300505b426d8f1aaf3aff9cedc590a8175fc"
        ],
        [
            "Definition sum_enum := [seq inl _ x | x <- enumF T1] ++ [seq inr _ y | y <- enumF T2].",
            "VernacDefinition",
            "32915d5fb6a01a4528e24742e2dafe166e235f0f"
        ],
        [
            "Lemma sum_enum_uniq : uniq sum_enum.",
            "VernacStartTheoremProof",
            "ab64e479d01eb3e008e99875e516c7082cc1ac1f"
        ],
        [
            "rewrite cat_uniq -!enumT !(enum_uniq, map_inj_uniq); try by move=> ? ? [].",
            "VernacExtend",
            "768b2f88f8c65ebded32bd7dc9c8ffec8f100548"
        ],
        [
            "by rewrite andbT; apply/hasP=> [[_ /mapP[x _ ->] /mapP[]]].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_sum_enum u : u \\in sum_enum.",
            "VernacStartTheoremProof",
            "d15f2cc99e1b8b09e8548c1f3e6b1427fba0e05d"
        ],
        [
            "by case: u => x; rewrite mem_cat -!enumT map_f ?mem_enum ?orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition sum_finMixin := Eval hnf in UniqFinMixin sum_enum_uniq mem_sum_enum.",
            "VernacDefinition",
            "e1fd8a16ddfa277b993285ece66635850f32ad95"
        ],
        [
            "Canonical sum_finType := Eval hnf in FinType (T1 + T2) sum_finMixin.",
            "VernacDefinition",
            "f82db6cb0f0d0d5379ad041564cd3349ba8239c6"
        ],
        [
            "Lemma card_sum : #|{: T1 + T2}| = #|T1| + #|T2|.",
            "VernacStartTheoremProof",
            "ab838f380c730c1d0293aaf8431e193838e4955a"
        ],
        [
            "by rewrite !cardT !enumT {1}unlock size_cat !size_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SumFinType.",
            "VernacEndSegment",
            "6897fb634879916d1ea1b73b73bde6fbaddc0d72"
        ]
    ],
    "proofs": [
        {
            "name": "uniq_enumP",
            "line_nb": 9,
            "steps": [
                {
                    "command": [
                        "by move=> Ue sT x; rewrite count_uniq_mem ?sT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "count_enumP",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "apply: uniq_enumP (pmap_uniq (@pickle_invK T) (iota_uniq _ _)) _ => x.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite mem_pmap -pickleK_inv map_f // mem_iota ubT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enumP",
            "line_nb": 175,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock; case T => ? [? []].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enumT",
            "line_nb": 180,
            "steps": [
                {
                    "command": [
                        "exact: filter_predT.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_enum",
            "line_nb": 183,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite mem_filter andbC -has_pred1 has_count enumP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_uniq",
            "line_nb": 186,
            "steps": [
                {
                    "command": [
                        "by apply/filter_uniq/count_mem_uniq => x; rewrite enumP -enumT mem_enum.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum0",
            "line_nb": 189,
            "steps": [
                {
                    "command": [
                        "exact: filter_pred0.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum1",
            "line_nb": 192,
            "steps": [
                {
                    "command": [
                        "rewrite [enum _](all_pred1P x _ _); first by rewrite size_filter enumP.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/allP=> y; rewrite mem_enum.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pickP",
            "line_nb": 197,
            "steps": [
                {
                    "command": [
                        "rewrite /pick; case: (enum _) (mem_enum P) => [|x s] Pxs /=.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "by right; apply: fsym.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by left; rewrite -[P _]Pxs mem_head.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_enum",
            "line_nb": 203,
            "steps": [
                {
                    "command": [
                        "by move=> eqPQ; apply: eq_filter.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_pick",
            "line_nb": 206,
            "steps": [
                {
                    "command": [
                        "by move=> eqPQ; rewrite /pick (eq_enum eqPQ).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardE",
            "line_nb": 209,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_card",
            "line_nb": 212,
            "steps": [
                {
                    "command": [
                        "by move=> eqAB; rewrite !cardE (eq_enum eqAB).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_card_trans",
            "line_nb": 215,
            "steps": [
                {
                    "command": [
                        "by move <-; apply: eq_card.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card0",
            "line_nb": 218,
            "steps": [
                {
                    "command": [
                        "by rewrite cardE enum0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardT",
            "line_nb": 221,
            "steps": [
                {
                    "command": [
                        "by rewrite cardE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card1",
            "line_nb": 224,
            "steps": [
                {
                    "command": [
                        "by rewrite cardE enum1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_card0",
            "line_nb": 227,
            "steps": [
                {
                    "command": [
                        "exact: eq_card_trans card0.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_cardT",
            "line_nb": 230,
            "steps": [
                {
                    "command": [
                        "exact: eq_card_trans cardT.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_card1",
            "line_nb": 233,
            "steps": [
                {
                    "command": [
                        "exact: eq_card_trans (card1 x).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardUI",
            "line_nb": 236,
            "steps": [
                {
                    "command": [
                        "by rewrite !cardE !size_filter count_predUI.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardID",
            "line_nb": 239,
            "steps": [
                {
                    "command": [
                        "rewrite -cardUI addnC [#|predI _ _|]eq_card0 => [|x] /=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_card => x; rewrite !inE andbC -andb_orl orbN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite !inE -!andbA andbC andbA andbN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardC",
            "line_nb": 244,
            "steps": [
                {
                    "command": [
                        "by rewrite !cardE !size_filter count_predC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardU1",
            "line_nb": 247,
            "steps": [
                {
                    "command": [
                        "case Ax: (x \\in A).",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_card => y; rewrite inE /=; case: eqP => // ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite /= -(card1 x) -cardUI addnC.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite [#|predI _ _|]eq_card0 => [|y /=]; first exact: eq_card.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !inE; case: eqP => // ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card2",
            "line_nb": 254,
            "steps": [
                {
                    "command": [
                        "by rewrite cardU1 card1 addn1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardC1",
            "line_nb": 257,
            "steps": [
                {
                    "command": [
                        "by rewrite -(cardC (pred1 x)) card1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardD1",
            "line_nb": 260,
            "steps": [
                {
                    "command": [
                        "case Ax: (x \\in A); last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_card => y; rewrite !inE /=; case: eqP => // ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite /= -(card1 x) -cardUI addnC /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite [#|predI _ _|]eq_card0 => [|y]; last by rewrite !inE; case: eqP.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_card => y; rewrite !inE; case: eqP => // ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "max_card",
            "line_nb": 267,
            "steps": [
                {
                    "command": [
                        "by rewrite -(cardC A) leq_addr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_size",
            "line_nb": 270,
            "steps": [
                {
                    "command": [
                        "elim: s => [|x s IHs] /=; first by rewrite card0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite cardU1 /=; case: (~~ _) => //; apply: leqW.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_uniqP",
            "line_nb": 274,
            "steps": [
                {
                    "command": [
                        "elim: s => [|x s IHs]; first by left; apply: card0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite cardU1 /= /addn; case: {+}(x \\in s) => /=.",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "by right=> card_Ssz; have:= card_size s; rewrite card_Ssz ltnn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply: (iffP IHs) => [<-| [<-]].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card0_eq",
            "line_nb": 280,
            "steps": [
                {
                    "command": [
                        "by move=> A0 x; apply/idP => Ax; rewrite (cardD1 x) Ax in A0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pred0P",
            "line_nb": 283,
            "steps": [
                {
                    "command": [
                        "by apply: (iffP eqP); [apply: card0_eq | apply: eq_card0].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pred0Pn",
            "line_nb": 286,
            "steps": [
                {
                    "command": [
                        "case: (pickP P) => [x Px | P0].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite (introN (pred0P P)) => [|P0]; [left; exists x | rewrite P0 in Px].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite -lt0n eq_card0 //; right=> [[x]]; rewrite P0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_gt0P",
            "line_nb": 291,
            "steps": [
                {
                    "command": [
                        "by rewrite lt0n; apply: pred0Pn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetE",
            "line_nb": 294,
            "steps": [
                {
                    "command": [
                        "by rewrite unlock.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetP",
            "line_nb": 297,
            "steps": [
                {
                    "command": [
                        "rewrite unlock; apply: (iffP (pred0P _)) => [AB0 x | sAB x /=].",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by apply/implyP; apply/idPn; rewrite negb_imply andbC [_ && _]AB0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite andbC -negb_imply; apply/negbF/implyP; apply: sAB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subsetPn",
            "line_nb": 302,
            "steps": [
                {
                    "command": [
                        "rewrite unlock; apply: (iffP (pred0Pn _)) => [[x] | [x Ax nBx]].",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by case/andP; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by exists x; rewrite /= nBx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subset_leq_card",
            "line_nb": 307,
            "steps": [
                {
                    "command": [
                        "move=> sAB.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "rewrite -(cardID A B) [#|predI _ _|](@eq_card _ A) ?leq_addr //= => x.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite !inE andbC; case Ax: (x \\in A) => //; apply: subsetP Ax.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subxx_hint",
            "line_nb": 312,
            "steps": [
                {
                    "command": [
                        "by case: mA => A; have:= introT (subsetP A A); rewrite !unlock => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subxx",
            "line_nb": 316,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_subxx",
            "line_nb": 327,
            "steps": [
                {
                    "command": [
                        "by move/eq_subset->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subset_predT",
            "line_nb": 330,
            "steps": [
                {
                    "command": [
                        "by apply/subsetP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "predT_subset",
            "line_nb": 333,
            "steps": [
                {
                    "command": [
                        "by move/subsetP=> allA x; apply: allA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subset_pred1",
            "line_nb": 336,
            "steps": [
                {
                    "command": [
                        "by apply/subsetP/idP=> [-> // | Ax y /eqP-> //]; apply: eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subset_eqP",
            "line_nb": 339,
            "steps": [
                {
                    "command": [
                        "apply: (iffP andP) => [[sAB sBA] x| eqAB]; last by rewrite !eq_subxx.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/idP/idP; apply: subsetP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subset_cardP",
            "line_nb": 343,
            "steps": [
                {
                    "command": [
                        "move=> eqcAB; case: (subsetP A B) (subset_eqP A B) => //= sAB.",
                        "VernacExtend",
                        "a01b3d93f426ff68d360351709a5fa5af822af32"
                    ]
                },
                {
                    "command": [
                        "case: (subsetP B A) => [//|[]] x Bx; apply/idPn => Ax.",
                        "VernacExtend",
                        "d62e4c271de3f2a9ff5062b8b89d3c57d965c518"
                    ]
                },
                {
                    "command": [
                        "case/idP: (ltnn #|A|); rewrite {2}eqcAB (cardD1 x B) Bx /=.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "apply: subset_leq_card; apply/subsetP=> y Ay; rewrite inE /= andbC.",
                        "VernacExtend",
                        "7d4450169cd8610cf3ff90cd2eeb2f84258ab13d"
                    ]
                },
                {
                    "command": [
                        "by rewrite sAB //; apply/eqP => eqyx; rewrite -eqyx Ay in Ax.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subset_trans",
            "line_nb": 355,
            "steps": [
                {
                    "command": [
                        "by move/subsetP=> sAB /subsetP=> sBC; apply/subsetP=> x /sAB; apply: sBC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subset_all",
            "line_nb": 358,
            "steps": [
                {
                    "command": [
                        "exact: (sameP (subsetP _ _) allP).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "properE",
            "line_nb": 361,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "properP",
            "line_nb": 364,
            "steps": [
                {
                    "command": [
                        "by rewrite properE; apply: (iffP andP) => [] [-> /subsetPn].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proper_sub",
            "line_nb": 367,
            "steps": [
                {
                    "command": [
                        "by case/andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proper_subn",
            "line_nb": 370,
            "steps": [
                {
                    "command": [
                        "by case/andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proper_trans",
            "line_nb": 373,
            "steps": [
                {
                    "command": [
                        "case/properP=> sAB [x Bx nAx] /properP[sBC [y Cy nBy]].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite properE (subset_trans sAB) //=; apply/subsetPn; exists y => //.",
                        "VernacExtend",
                        "0288f65064e83af8559a49f90a2eba4421e03fd4"
                    ]
                },
                {
                    "command": [
                        "by apply: contra nBy; apply: subsetP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proper_sub_trans",
            "line_nb": 378,
            "steps": [
                {
                    "command": [
                        "case/properP=> sAB [x Bx nAx] sBC; rewrite properE (subset_trans sAB) //.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "by apply/subsetPn; exists x; rewrite ?(subsetP _ _ sBC).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_proper_trans",
            "line_nb": 382,
            "steps": [
                {
                    "command": [
                        "move=> sAB /properP[sBC [x Cx nBx]]; rewrite properE (subset_trans sAB) //.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by apply/subsetPn; exists x => //; apply: contra nBx; apply: subsetP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proper_card",
            "line_nb": 386,
            "steps": [
                {
                    "command": [
                        "by case/andP=> sAB nsBA; rewrite ltn_neqAle !(subset_leqif_card sAB) andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proper_irrefl",
            "line_nb": 389,
            "steps": [
                {
                    "command": [
                        "by rewrite properE subxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "properxx",
            "line_nb": 392,
            "steps": [
                {
                    "command": [
                        "by rewrite properE subxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "disjoint_sym",
            "line_nb": 403,
            "steps": [
                {
                    "command": [
                        "by congr (_ == 0); apply: eq_card => x; apply: andbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_disjoint",
            "line_nb": 406,
            "steps": [
                {
                    "command": [
                        "by move=> eqA12 [B]; congr (_ == 0); apply: eq_card => x; rewrite !inE eqA12.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_disjoint_r",
            "line_nb": 409,
            "steps": [
                {
                    "command": [
                        "by move=> eqB12 [A]; congr (_ == 0); apply: eq_card => x; rewrite !inE eqB12.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subset_disjoint",
            "line_nb": 412,
            "steps": [
                {
                    "command": [
                        "by rewrite disjoint_sym unlock.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "disjoint_subset",
            "line_nb": 415,
            "steps": [
                {
                    "command": [
                        "by rewrite subset_disjoint; apply: eq_disjoint_r => x; rewrite !inE /= negbK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "disjoint_trans",
            "line_nb": 418,
            "steps": [
                {
                    "command": [
                        "by rewrite 2!disjoint_subset; apply: subset_trans.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "disjoint0",
            "line_nb": 421,
            "steps": [
                {
                    "command": [
                        "exact/pred0P.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_disjoint0",
            "line_nb": 424,
            "steps": [
                {
                    "command": [
                        "by move/eq_disjoint->; apply: disjoint0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_disjoint1",
            "line_nb": 432,
            "steps": [
                {
                    "command": [
                        "by move/eq_disjoint->; apply: disjoint1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "disjointU",
            "line_nb": 435,
            "steps": [
                {
                    "command": [
                        "case: [disjoint A & C] / (pred0P (xpredI A C)) => [A0 | nA0] /=.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by congr (_ == 0); apply: eq_card => x; rewrite [x \\in _]andb_orl A0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/pred0P=> nABC; case: nA0 => x; apply/idPn=> /=; move/(_ x): nABC.",
                        "VernacExtend",
                        "2850405d4bca4121840235359a307b271b0b8101"
                    ]
                },
                {
                    "command": [
                        "by rewrite [_ x]andb_orl; case/norP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "disjointU1",
            "line_nb": 441,
            "steps": [
                {
                    "command": [
                        "by rewrite disjointU disjoint1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "disjoint_cons",
            "line_nb": 444,
            "steps": [
                {
                    "command": [
                        "exact: disjointU1.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "disjoint_has",
            "line_nb": 447,
            "steps": [
                {
                    "command": [
                        "rewrite -(@eq_has _ (mem (enum A))) => [|x]; last exact: mem_enum.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite has_sym has_filter -filter_predI -has_filter has_count -eqn0Ngt.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -size_filter /disjoint /pred0b unlock.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "disjoint_cat",
            "line_nb": 452,
            "steps": [
                {
                    "command": [
                        "by rewrite !disjoint_has has_cat negb_or.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "existsPP",
            "line_nb": 467,
            "steps": [
                {
                    "command": [
                        "by apply: (iffP pred0Pn) => -[x /viewP]; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "forallPP",
            "line_nb": 470,
            "steps": [
                {
                    "command": [
                        "by apply: (iffP pred0P) => /= allP x; have /viewP//=-> := allP x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "forallP",
            "line_nb": 479,
            "steps": [
                {
                    "command": [
                        "exact: 'forall_idP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqfunP",
            "line_nb": 482,
            "steps": [
                {
                    "command": [
                        "exact: 'forall_eqP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "forall_inP",
            "line_nb": 485,
            "steps": [
                {
                    "command": [
                        "exact: 'forall_implyP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "forall_inPP",
            "line_nb": 488,
            "steps": [
                {
                    "command": [
                        "by move=> vP; apply: (iffP (forall_inP _ _)) => /(_ _ _) /vP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqfun_inP",
            "line_nb": 491,
            "steps": [
                {
                    "command": [
                        "exact: (forall_inPP _ (fun=> eqP)).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "existsP",
            "line_nb": 494,
            "steps": [
                {
                    "command": [
                        "exact: 'exists_idP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exists_eqP",
            "line_nb": 497,
            "steps": [
                {
                    "command": [
                        "exact: 'exists_eqP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exists_inP",
            "line_nb": 500,
            "steps": [
                {
                    "command": [
                        "by apply: (iffP 'exists_andP) => [[x []] | [x]]; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exists_inPP",
            "line_nb": 503,
            "steps": [
                {
                    "command": [
                        "by move=> vP; apply: (iffP (exists_inP _ _)) => -[x?/vP]; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exists_eq_inP",
            "line_nb": 506,
            "steps": [
                {
                    "command": [
                        "exact: (exists_inPP _ (fun=> eqP)).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_existsb",
            "line_nb": 509,
            "steps": [
                {
                    "command": [
                        "by move=> eqP12; congr (_ != 0); apply: eq_card.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_existsb_in",
            "line_nb": 512,
            "steps": [
                {
                    "command": [
                        "by move=> eqP12; apply: eq_existsb => x; apply: andb_id2l => /eqP12.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_forallb",
            "line_nb": 515,
            "steps": [
                {
                    "command": [
                        "by move=> eqP12; apply/negb_inj/eq_existsb=> /= x; rewrite eqP12.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_forallb_in",
            "line_nb": 518,
            "steps": [
                {
                    "command": [
                        "by move=> eqP12; apply: eq_forallb => i; case Di: (D i); rewrite // eqP12.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "negb_forall",
            "line_nb": 521,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "negb_forall_in",
            "line_nb": 524,
            "steps": [
                {
                    "command": [
                        "by apply: eq_existsb => x; rewrite negb_imply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "negb_exists",
            "line_nb": 527,
            "steps": [
                {
                    "command": [
                        "by apply/negbLR/esym/eq_existsb=> x; apply: negbK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "negb_exists_in",
            "line_nb": 530,
            "steps": [
                {
                    "command": [
                        "by rewrite negb_exists; apply/eq_forallb => x; rewrite [~~ _]fun_if.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "extremumP",
            "line_nb": 555,
            "steps": [
                {
                    "command": [
                        "rewrite /extremum; case: pickP => [i /andP[Pi /'forall_implyP/= min_i] | no_i].",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "by split=> // j; apply/implyP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have := sort_sorted ord_total [seq F i | i <- enum P].",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "set s := sort _ _ => ss; have s_gt0 : size s > 0 by rewrite size_sort size_map -cardE; apply/card_gt0P; exists i0.",
                        "VernacExtend",
                        "d2991b7607b6316c9d43d28c85f87ca601299ca6"
                    ]
                },
                {
                    "command": [
                        "pose t0 := nth (F i0) s 0; have: t0 \\in s by rewrite mem_nth.",
                        "VernacExtend",
                        "c09d1274557abc8857ed64eb3450db2da906c185"
                    ]
                },
                {
                    "command": [
                        "rewrite mem_sort => /mapP/sig2_eqW[it0]; rewrite mem_enum => it0P def_t0.",
                        "VernacExtend",
                        "fbaa61af20867a5dfb8bb5213ca8048b258f8f3a"
                    ]
                },
                {
                    "command": [
                        "have /negP[/=] := no_i it0; rewrite [P _]it0P/=; apply/'forall_implyP=> j Pj.",
                        "VernacExtend",
                        "4266062387bb5ba3b4b273358c36b198e35325af"
                    ]
                },
                {
                    "command": [
                        "have /(nthP (F i0))[k g_lt <-] : F j \\in s by rewrite mem_sort map_f ?mem_enum.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite -def_t0 sorted_le_nth.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "arg_minP",
            "line_nb": 574,
            "steps": [
                {
                    "command": [
                        "by apply: extremumP => //; [apply: leq_trans|apply: leq_total].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dinjectivePn",
            "line_nb": 595,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [injf | [x Dx [y Dxy eqfxy]]]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "move: Dx; rewrite -(mem_enum D) => /rot_to[i E defE].",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "rewrite /dinjectiveb -(rot_uniq i) -map_rot defE /=; apply/nandP; left.",
                        "VernacExtend",
                        "b5c6eb8f4088040d9dfd48a39246f897d117ec2b"
                    ]
                },
                {
                    "command": [
                        "rewrite inE /= -(mem_enum D) -(mem_rot i) defE inE in Dxy.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite andb_orr andbC andbN in Dxy.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite eqfxy map_f //; case/andP: Dxy.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "pose p := [pred x in D | [exists (y | y \\in [predD1 D & x]), f x == f y]].",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "case: (pickP p) => [x /= /andP[Dx /exists_inP[y Dxy /eqP eqfxy]] | no_p].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by exists x; last exists y.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite /dinjectiveb map_inj_in_uniq ?enum_uniq // in injf => x y Dx Dy eqfxy.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply: contraNeq (negbT (no_p x)) => ne_xy /=; rewrite -mem_enum Dx.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by apply/existsP; exists y; rewrite /= !inE eq_sym ne_xy -mem_enum Dy eqfxy /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dinjectiveP",
            "line_nb": 609,
            "steps": [
                {
                    "command": [
                        "rewrite -[dinjectiveb D]negbK.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: dinjectivePn=> [noinjf | injf]; constructor.",
                        "VernacExtend",
                        "711830f9779c9834ebf527f9f431c7e5e5ef3c76"
                    ]
                },
                {
                    "command": [
                        "case: noinjf => x Dx [y /andP[neqxy /= Dy] eqfxy] injf.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by case/eqP: neqxy; apply: injf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move=> x y Dx Dy /= eqfxy; apply/eqP; apply/idPn=> nxy; case: injf.",
                        "VernacExtend",
                        "316c59e55e3125879d3ba13a7e3a7ffea82d30ad"
                    ]
                },
                {
                    "command": [
                        "by exists x => //; exists y => //=; rewrite inE /= eq_sym nxy.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "injectivePn",
            "line_nb": 617,
            "steps": [
                {
                    "command": [
                        "apply: (iffP (dinjectivePn _)) => [[x _ [y nxy eqfxy]] | [x [y nxy eqfxy]]]; by exists x => //; exists y => //; rewrite inE /= andbT eq_sym in nxy *.",
                        "VernacExtend",
                        "9ba8844f90da4a48c6c9ed986dcaebadc0623e9f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "injectiveP",
            "line_nb": 620,
            "steps": [
                {
                    "command": [
                        "by apply: (iffP (dinjectiveP _)) => injf x y => [|_ _]; apply: injf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_image",
            "line_nb": 636,
            "steps": [
                {
                    "command": [
                        "by rewrite size_map -cardE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_codom",
            "line_nb": 639,
            "steps": [
                {
                    "command": [
                        "exact: size_image.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codomE",
            "line_nb": 642,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imageP",
            "line_nb": 647,
            "steps": [
                {
                    "command": [
                        "by apply: (iffP mapP) => [] [x Ax y_fx]; exists x; rewrite // mem_enum in Ax *.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codomP",
            "line_nb": 650,
            "steps": [
                {
                    "command": [
                        "by apply: (iffP (imageP _ y)) => [][x]; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iinv_proof",
            "line_nb": 653,
            "steps": [
                {
                    "command": [
                        "move=> fy; pose b x := A x && (f x == y).",
                        "VernacExtend",
                        "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
                    ]
                },
                {
                    "command": [
                        "case: (pickP b) => [x /andP[Ax /eqP] | nfy]; first by exists x.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case/negP: fy => /imageP[x Ax fx_y]; case/andP: (nfy x); rewrite fx_y.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "f_iinv",
            "line_nb": 659,
            "steps": [
                {
                    "command": [
                        "exact: s2valP' (iinv_proof fAy).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_iinv",
            "line_nb": 662,
            "steps": [
                {
                    "command": [
                        "exact: s2valP (iinv_proof fAy).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_iinv_f",
            "line_nb": 665,
            "steps": [
                {
                    "command": [
                        "by move=> injf x fAfx Ax; apply: injf => //; [apply: mem_iinv | apply: f_iinv].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "preim_iinv",
            "line_nb": 668,
            "steps": [
                {
                    "command": [
                        "by rewrite /= f_iinv.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "image_f",
            "line_nb": 671,
            "steps": [
                {
                    "command": [
                        "by move=> Ax; apply/imageP; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codom_f",
            "line_nb": 674,
            "steps": [
                {
                    "command": [
                        "by apply: image_f.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "image_codom",
            "line_nb": 677,
            "steps": [
                {
                    "command": [
                        "by move=> _ /imageP[x _ ->]; apply: codom_f.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "image_pred0",
            "line_nb": 680,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite /image_mem /= enum0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_image",
            "line_nb": 685,
            "steps": [
                {
                    "command": [
                        "by rewrite mem_map ?mem_enum.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pre_image",
            "line_nb": 688,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite inE /= mem_image.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "image_iinv",
            "line_nb": 691,
            "steps": [
                {
                    "command": [
                        "by rewrite -mem_image ?f_iinv.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iinv_f",
            "line_nb": 694,
            "steps": [
                {
                    "command": [
                        "by apply: in_iinv_f; first apply: in2W.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "image_pre",
            "line_nb": 697,
            "steps": [
                {
                    "command": [
                        "by move=> y; rewrite /image_mem -filter_map /= mem_filter -enumT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bij_on_codom",
            "line_nb": 700,
            "steps": [
                {
                    "command": [
                        "pose g y := iinv (valP (insigd (codom_f x0) y)).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "by exists g => [x fAfx | y fAy]; first apply: injf; rewrite f_iinv insubdK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bij_on_image",
            "line_nb": 704,
            "steps": [
                {
                    "command": [
                        "exact: subon_bij (@image_codom A) (bij_on_codom x0).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_preim",
            "line_nb": 709,
            "steps": [
                {
                    "command": [
                        "elim: s => //= y s IHs; case: pickP => [x /eqP fx_y | nfTy] fTs.",
                        "VernacExtend",
                        "df63f96bedbb0673aecb42521d90011325a86c94"
                    ]
                },
                {
                    "command": [
                        "by rewrite /= fx_y IHs // => z s_z; apply: fTs; apply: predU1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by case/imageP: (fTs y (mem_head y s)) => x _ fx_y; case/eqP: (nfTy x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "flatten_imageP",
            "line_nb": 718,
            "steps": [
                {
                    "command": [
                        "by apply: (iffP flatten_mapP) => [][x Px]; exists x; rewrite ?mem_enum in Px *.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_image_card",
            "line_nb": 725,
            "steps": [
                {
                    "command": [
                        "by rewrite (cardE A) -(size_map f) card_size.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "image_injP",
            "line_nb": 732,
            "steps": [
                {
                    "command": [
                        "apply: (iffP eqP) => [eqfA |]; last exact: card_in_image.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/dinjectiveP; apply/card_uniqP; rewrite size_map -cardE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_image",
            "line_nb": 737,
            "steps": [
                {
                    "command": [
                        "by apply: card_in_image; apply: in2W.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_codom",
            "line_nb": 740,
            "steps": [
                {
                    "command": [
                        "exact: card_image.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_preim",
            "line_nb": 743,
            "steps": [
                {
                    "command": [
                        "rewrite -card_image /=; apply: eq_card => y.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite [y \\in _]image_pre !inE andbC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inj_card_onto",
            "line_nb": 748,
            "steps": [
                {
                    "command": [
                        "by move: y; apply/subset_cardP; rewrite ?card_codom ?subset_predT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inj_card_bij",
            "line_nb": 751,
            "steps": [
                {
                    "command": [
                        "by exists (fun y => iinv (inj_card_onto y)) => y; rewrite ?iinv_f ?f_iinv.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "injF_onto",
            "line_nb": 760,
            "steps": [
                {
                    "command": [
                        "exact: inj_card_onto.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "invF_f",
            "line_nb": 764,
            "steps": [
                {
                    "command": [
                        "by move=> x; apply: iinv_f.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "f_invF",
            "line_nb": 767,
            "steps": [
                {
                    "command": [
                        "by move=> y; apply: f_iinv.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "injF_bij",
            "line_nb": 770,
            "steps": [
                {
                    "command": [
                        "exact: inj_card_bij.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "canF_sym",
            "line_nb": 775,
            "steps": [
                {
                    "command": [
                        "exact/(bij_can_sym (injF_bij (can_inj fK))).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "canF_LR",
            "line_nb": 778,
            "steps": [
                {
                    "command": [
                        "exact: canLR canF_sym.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "canF_RL",
            "line_nb": 781,
            "steps": [
                {
                    "command": [
                        "exact: canRL canF_sym.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "canF_eq",
            "line_nb": 784,
            "steps": [
                {
                    "command": [
                        "exact: (can2_eq fK canF_sym).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "canF_invF",
            "line_nb": 787,
            "steps": [
                {
                    "command": [
                        "by move=> y; apply: (canLR fK); rewrite f_invF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_image",
            "line_nb": 793,
            "steps": [
                {
                    "command": [
                        "by move=> eqAB eqfg; rewrite /image_mem (eq_enum eqAB) (eq_map eqfg).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_codom",
            "line_nb": 796,
            "steps": [
                {
                    "command": [
                        "exact: eq_image.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_invF",
            "line_nb": 799,
            "steps": [
                {
                    "command": [
                        "by move=> eq_fg x; apply: (canLR (invF_f injf)); rewrite eq_fg f_invF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unit_enumP",
            "line_nb": 803,
            "steps": [
                {
                    "command": [
                        "by case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_unit",
            "line_nb": 808,
            "steps": [
                {
                    "command": [
                        "by rewrite cardT enumT unlock.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_enumP",
            "line_nb": 811,
            "steps": [
                {
                    "command": [
                        "by case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_bool",
            "line_nb": 816,
            "steps": [
                {
                    "command": [
                        "by rewrite cardT enumT unlock.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "option_enumP",
            "line_nb": 823,
            "steps": [
                {
                    "command": [
                        "by case=> [x|]; rewrite /= count_map (count_pred0, enumP).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_option",
            "line_nb": 828,
            "steps": [
                {
                    "command": [
                        "by rewrite !cardT !enumT {1}unlock /= !size_map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pcan_enumP",
            "line_nb": 834,
            "steps": [
                {
                    "command": [
                        "move=> fK x; rewrite count_uniq_mem ?undup_uniq // mem_undup.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite mem_pmap -fK map_f // -enumT mem_enum.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codom_val",
            "line_nb": 852,
            "steps": [
                {
                    "command": [
                        "by apply/codomP/idP=> [[u ->]|Px]; last exists (Sub x Px); rewrite ?valP ?SubK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_sub_enum",
            "line_nb": 860,
            "steps": [
                {
                    "command": [
                        "by rewrite mem_pmap_sub -enumT mem_enum.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_enum_uniq",
            "line_nb": 863,
            "steps": [
                {
                    "command": [
                        "by rewrite pmap_sub_uniq // -enumT enum_uniq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "val_sub_enum",
            "line_nb": 866,
            "steps": [
                {
                    "command": [
                        "rewrite pmap_filter; last exact: insubK.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply: eq_filter => x; apply: isSome_insub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_sub",
            "line_nb": 873,
            "steps": [
                {
                    "command": [
                        "by rewrite -(eq_card (codom_val sfT)) (card_image val_inj).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_card_sub",
            "line_nb": 876,
            "steps": [
                {
                    "command": [
                        "exact: eq_card_trans card_sub.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_sig",
            "line_nb": 886,
            "steps": [
                {
                    "command": [
                        "exact: card_sub.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_seq_sub_enum",
            "line_nb": 897,
            "steps": [
                {
                    "command": [
                        "by rewrite mem_undup mem_pmap -valK map_f ?ssvalP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "seq_sub_pickleK",
            "line_nb": 907,
            "steps": [
                {
                    "command": [
                        "rewrite /seq_sub_unpickle => x.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite (nth_map x) ?nth_index ?index_mem ?mem_seq_sub_enum.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "seq_sub_axiom",
            "line_nb": 912,
            "steps": [
                {
                    "command": [
                        "exact: Finite.uniq_enumP (undup_uniq _) mem_seq_sub_enum.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_seq_sub",
            "line_nb": 929,
            "steps": [
                {
                    "command": [
                        "by move=> Us; rewrite cardE enumT -(size_map val) unlock val_seq_sub_enum.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_ord",
            "line_nb": 945,
            "steps": [
                {
                    "command": [
                        "exact: valP i.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ord_inj",
            "line_nb": 948,
            "steps": [
                {
                    "command": [
                        "exact: val_inj.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "val_ord_enum",
            "line_nb": 952,
            "steps": [
                {
                    "command": [
                        "rewrite pmap_filter; last exact: insubK.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply/all_filterP; apply/allP=> i; rewrite mem_iota isSome_insub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ord_enum_uniq",
            "line_nb": 956,
            "steps": [
                {
                    "command": [
                        "by rewrite pmap_sub_uniq ?iota_uniq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_ord_enum",
            "line_nb": 959,
            "steps": [
                {
                    "command": [
                        "by rewrite -(mem_map ord_inj) val_ord_enum mem_iota ltn_ord.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "val_enum_ord",
            "line_nb": 970,
            "steps": [
                {
                    "command": [
                        "by rewrite enumT unlock val_ord_enum.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_enum_ord",
            "line_nb": 973,
            "steps": [
                {
                    "command": [
                        "by rewrite -(size_map val) val_enum_ord size_iota.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_ord",
            "line_nb": 976,
            "steps": [
                {
                    "command": [
                        "by rewrite cardE size_enum_ord.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_enum_ord",
            "line_nb": 979,
            "steps": [
                {
                    "command": [
                        "by move=> ?; rewrite -(nth_map _ 0) (size_enum_ord, val_enum_ord) // nth_iota.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_ord_enum",
            "line_nb": 982,
            "steps": [
                {
                    "command": [
                        "by apply: val_inj; apply: nth_enum_ord.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "index_enum_ord",
            "line_nb": 985,
            "steps": [
                {
                    "command": [
                        "by rewrite -{1}(nth_ord_enum i i) index_uniq ?(enum_uniq, size_enum_ord).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "widen_ord_proof",
            "line_nb": 989,
            "steps": [
                {
                    "command": [
                        "exact: leq_trans.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cast_ord_proof",
            "line_nb": 993,
            "steps": [
                {
                    "command": [
                        "by move <-.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cast_ord_id",
            "line_nb": 997,
            "steps": [
                {
                    "command": [
                        "exact: val_inj.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cast_ord_comp",
            "line_nb": 1000,
            "steps": [
                {
                    "command": [
                        "exact: val_inj.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cast_ordK",
            "line_nb": 1003,
            "steps": [
                {
                    "command": [
                        "by move=> i; apply: val_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cast_ordKV",
            "line_nb": 1006,
            "steps": [
                {
                    "command": [
                        "by move=> i; apply: val_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cast_ord_inj",
            "line_nb": 1009,
            "steps": [
                {
                    "command": [
                        "exact: can_inj (cast_ordK eq_n).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rev_ord_proof",
            "line_nb": 1012,
            "steps": [
                {
                    "command": [
                        "by case: n i => [|n] [i lt_i_n] //; rewrite ltnS subSS leq_subr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rev_ordK",
            "line_nb": 1016,
            "steps": [
                {
                    "command": [
                        "by case: n => [|n] [i lti] //; apply: val_inj; rewrite /= !subSS subKn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rev_ord_inj",
            "line_nb": 1019,
            "steps": [
                {
                    "command": [
                        "exact: inv_inj rev_ordK.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_rank_subproof",
            "line_nb": 1025,
            "steps": [
                {
                    "command": [
                        "by move=> Ax0; rewrite (cardD1 x0) Ax0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_default",
            "line_nb": 1030,
            "steps": [
                {
                    "command": [
                        "by rewrite cardE; case: (enum A) => [|//] [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_valP",
            "line_nb": 1035,
            "steps": [
                {
                    "command": [
                        "by rewrite -mem_enum mem_nth -?cardE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_val_nth",
            "line_nb": 1038,
            "steps": [
                {
                    "command": [
                        "by apply: set_nth_default; rewrite cardE in i *; apply: ltn_ord.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_image",
            "line_nb": 1041,
            "steps": [
                {
                    "command": [
                        "by rewrite -(nth_map _ y0) // -cardE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_codom",
            "line_nb": 1044,
            "steps": [
                {
                    "command": [
                        "exact: nth_image.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_enum_rank_in",
            "line_nb": 1047,
            "steps": [
                {
                    "command": [
                        "move=> x Ax; rewrite /= insubdK ?nth_index ?mem_enum //.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite cardE [_ \\in _]index_mem mem_enum.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_enum_rank",
            "line_nb": 1051,
            "steps": [
                {
                    "command": [
                        "by move=> x; apply: nth_enum_rank_in.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_rankK_in",
            "line_nb": 1054,
            "steps": [
                {
                    "command": [
                        "by move=> x; apply: nth_enum_rank_in.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_rankK",
            "line_nb": 1057,
            "steps": [
                {
                    "command": [
                        "by move=> x; apply: enum_rankK_in.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_valK_in",
            "line_nb": 1060,
            "steps": [
                {
                    "command": [
                        "move=> x; apply: ord_inj; rewrite insubdK; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite cardE [_ \\in _]index_mem mem_nth // -cardE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite index_uniq ?enum_uniq // -cardE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_valK",
            "line_nb": 1065,
            "steps": [
                {
                    "command": [
                        "by move=> x; apply: enum_valK_in.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_rank_inj",
            "line_nb": 1068,
            "steps": [
                {
                    "command": [
                        "exact: can_inj enum_rankK.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_val_inj",
            "line_nb": 1071,
            "steps": [
                {
                    "command": [
                        "by move=> i; apply: can_inj (enum_valK_in (enum_valP i)) (i).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_val_bij_in",
            "line_nb": 1074,
            "steps": [
                {
                    "command": [
                        "move=> Ax0; exists (enum_rank_in Ax0) => [i _|]; last exact: enum_rankK_in.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "exact: enum_valK_in.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_rank_bij",
            "line_nb": 1078,
            "steps": [
                {
                    "command": [
                        "by move: enum_rankK enum_valK; exists (@enum_val T).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_val_bij",
            "line_nb": 1081,
            "steps": [
                {
                    "command": [
                        "by move: enum_rankK enum_valK; exists enum_rank.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fin_all_exists",
            "line_nb": 1084,
            "steps": [
                {
                    "command": [
                        "move=> ex_u; pose Q m x := enum_rank x < m -> {ux | P x ux}.",
                        "VernacExtend",
                        "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
                    ]
                },
                {
                    "command": [
                        "suffices: forall m, m <= #|T| -> exists w : forall x, Q m x, True.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "case/(_ #|T|)=> // w _; pose u x := sval (w x (ltn_ord _)).",
                        "VernacExtend",
                        "61f7313c68f88d92a678d74fe9c99999257a468e"
                    ]
                },
                {
                    "command": [
                        "by exists u => x; rewrite {}/u; case: (w x _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim=> [|m IHm] ltmX; first by have w x: Q 0 x by []; exists w.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have{IHm} [w _] := IHm (ltnW ltmX); pose i := Ordinal ltmX.",
                        "VernacExtend",
                        "fa6ff0c3d4595d45015144bd8c25fb5ac62ed42b"
                    ]
                },
                {
                    "command": [
                        "have [u Pu] := ex_u (enum_val i); suffices w' x: Q m.+1 x by exists w'.",
                        "VernacExtend",
                        "32f3051101718011671dd27b552d72a725766d33"
                    ]
                },
                {
                    "command": [
                        "rewrite /Q ltnS leq_eqVlt (val_eqE _ i); case: eqP => [def_i _ | _ /w //].",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "by rewrite -def_i enum_rankK in u Pu; exists u.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fin_all_exists2",
            "line_nb": 1095,
            "steps": [
                {
                    "command": [
                        "move=> ex_u; have (x): exists u, P x u /\\ Q x u by have [u] := ex_u x; exists u.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "by case/fin_all_exists=> u /all_and2[]; exists u.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_rank_ord",
            "line_nb": 1103,
            "steps": [
                {
                    "command": [
                        "by apply: val_inj; rewrite insubdK ?index_enum_ord // card_ord [_ \\in _]ltn_ord.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_val_ord",
            "line_nb": 1106,
            "steps": [
                {
                    "command": [
                        "by apply: canLR (@enum_rankK _) _; apply: val_inj; rewrite enum_rank_ord.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bumpK",
            "line_nb": 1111,
            "steps": [
                {
                    "command": [
                        "rewrite /bump /unbump => i.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "have [le_hi | lt_ih] := leqP h i; first by rewrite ltnS le_hi subn1.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite ltnNge ltnW ?subn0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "neq_bump",
            "line_nb": 1116,
            "steps": [
                {
                    "command": [
                        "rewrite /bump eqn_leq; have [le_hi | lt_ih] := leqP h i.",
                        "VernacExtend",
                        "7be6e3cf9ccbce33486c4b5c6fefdf7a9ad6e52b"
                    ]
                },
                {
                    "command": [
                        "by rewrite ltnNge le_hi andbF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite leqNgt lt_ih.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unbumpKcond",
            "line_nb": 1121,
            "steps": [
                {
                    "command": [
                        "rewrite /bump /unbump leqNgt -subSKn.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: (ltngtP i h) => /= [-> | ltih | ->] //; last by rewrite ltnn.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite subn1 /= leqNgt !(ltn_predK ltih, ltih, add1n).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unbumpK",
            "line_nb": 1126,
            "steps": [
                {
                    "command": [
                        "by move=> i /negbTE-neq_h_i; rewrite unbumpKcond neq_h_i.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bump_addl",
            "line_nb": 1129,
            "steps": [
                {
                    "command": [
                        "by rewrite /bump leq_add2l addnCA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bumpS",
            "line_nb": 1132,
            "steps": [
                {
                    "command": [
                        "exact: addnS.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unbumpS",
            "line_nb": 1139,
            "steps": [
                {
                    "command": [
                        "exact: unbump_addl 1.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_bump",
            "line_nb": 1142,
            "steps": [
                {
                    "command": [
                        "rewrite /bump leq_subLR.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: (leqP i h) (leqP h j) => [le_i_h | lt_h_i] [le_h_j | lt_j_h] //.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite leqW (leq_trans le_i_h).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite !(leqNgt i) ltnW (leq_trans _ lt_h_i).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_bump2",
            "line_nb": 1148,
            "steps": [
                {
                    "command": [
                        "by rewrite leq_bump bumpK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift_subproof",
            "line_nb": 1157,
            "steps": [
                {
                    "command": [
                        "by case: n i => [[]|n] //= i; rewrite -addnS (leq_add (leq_b1 _)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unlift_subproof",
            "line_nb": 1161,
            "steps": [
                {
                    "command": [
                        "case: n h u => [|n h] [] //= j ne_jh.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite -(leq_bump2 h.+1) bumpS unbumpK // /bump.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: (ltngtP n h) => [|_|eq_nh]; rewrite ?(leqNgt _ h) ?ltn_ord //.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "by rewrite ltn_neqAle [j <= _](valP j) {2}eq_nh andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unliftP",
            "line_nb": 1169,
            "steps": [
                {
                    "command": [
                        "rewrite /unlift; case: insubP => [u nhi | ] def_i /=; constructor.",
                        "VernacExtend",
                        "e425985f7322848371c52a1e49b45c19cea7b95c"
                    ]
                },
                {
                    "command": [
                        "by apply: val_inj; rewrite /= def_i unbumpK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite negbK in def_i; apply/eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "neq_lift",
            "line_nb": 1174,
            "steps": [
                {
                    "command": [
                        "exact: neq_bump.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unlift_none",
            "line_nb": 1177,
            "steps": [
                {
                    "command": [
                        "by case: unliftP => // j Dh; case/eqP: (neq_lift h j).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unlift_some",
            "line_nb": 1180,
            "steps": [
                {
                    "command": [
                        "rewrite eq_sym => /eqP neq_ih.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by case Dui: (unlift h i) / (unliftP h i) => [j Dh|//]; exists j.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift_inj",
            "line_nb": 1184,
            "steps": [
                {
                    "command": [
                        "by move=> i1 i2 [/(can_inj (bumpK h))/val_inj].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "liftK",
            "line_nb": 1188,
            "steps": [
                {
                    "command": [
                        "by move=> i; case: (unlift_some (neq_lift h i)) => j /lift_inj->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lshift_subproof",
            "line_nb": 1191,
            "steps": [
                {
                    "command": [
                        "by apply: leq_trans (valP i) _; apply: leq_addr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rshift_subproof",
            "line_nb": 1194,
            "steps": [
                {
                    "command": [
                        "by rewrite ltn_add2l.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "split_subproof",
            "line_nb": 1199,
            "steps": [
                {
                    "command": [
                        "by move/subSn <-; rewrite leq_subLR.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "splitP",
            "line_nb": 1204,
            "steps": [
                {
                    "command": [
                        "rewrite /split {-3}/leq.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by case: (@ltnP i m) => cmp_i_m //=; constructor; rewrite ?subnKC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_unsplit",
            "line_nb": 1209,
            "steps": [
                {
                    "command": [
                        "by case: jk => [j|k]; rewrite /= ?ltn_ord // ltnNge leq_addr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "splitK",
            "line_nb": 1212,
            "steps": [
                {
                    "command": [
                        "by move=> i; apply: val_inj; case: splitP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unsplitK",
            "line_nb": 1215,
            "steps": [
                {
                    "command": [
                        "move=> jk; have:= ltn_unsplit jk.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "by do [case: splitP; case: jk => //= i j] => [|/addnI] => /ord_inj->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_ord",
            "line_nb": 1224,
            "steps": [
                {
                    "command": [
                        "exact: valP i.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_ord_proof",
            "line_nb": 1227,
            "steps": [
                {
                    "command": [
                        "by rewrite ltnS leq_subr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_ordK",
            "line_nb": 1231,
            "steps": [
                {
                    "command": [
                        "by rewrite subKn ?leq_ord.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inordK",
            "line_nb": 1235,
            "steps": [
                {
                    "command": [
                        "by move=> lt_m; rewrite val_insubd lt_m.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inord_val",
            "line_nb": 1238,
            "steps": [
                {
                    "command": [
                        "by rewrite /inord /insubd valK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_ordS",
            "line_nb": 1241,
            "steps": [
                {
                    "command": [
                        "apply: (inj_map val_inj); rewrite val_enum_ord /= -map_comp.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite (map_comp (addn 1)) val_enum_ord -iota_addl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift_max",
            "line_nb": 1245,
            "steps": [
                {
                    "command": [
                        "by rewrite /= /bump leqNgt ltn_ord.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift0",
            "line_nb": 1248,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "predX_prod_enum",
            "line_nb": 1261,
            "steps": [
                {
                    "command": [
                        "rewrite !cardE !size_filter -!enumT /prod_enum.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "elim: (enum T1) => //= x1 s1 IHs; rewrite count_cat {}IHs count_map /preim /=.",
                        "VernacExtend",
                        "de65c8193056a36f6dbb91fe21357bd770b140db"
                    ]
                },
                {
                    "command": [
                        "by case: (x1 \\in A1); rewrite ?count_pred0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prod_enumP",
            "line_nb": 1266,
            "steps": [
                {
                    "command": [
                        "by case=> x1 x2; rewrite (predX_prod_enum (pred1 x1) (pred1 x2)) !card1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardX",
            "line_nb": 1271,
            "steps": [
                {
                    "command": [
                        "by rewrite -predX_prod_enum unlock size_filter unlock.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_prod",
            "line_nb": 1274,
            "steps": [
                {
                    "command": [
                        "by rewrite -cardX; apply: eq_card; case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_card_prod",
            "line_nb": 1277,
            "steps": [
                {
                    "command": [
                        "exact: eq_card_trans card_prod.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_tagged",
            "line_nb": 1294,
            "steps": [
                {
                    "command": [
                        "rewrite cardE !enumT {1}unlock size_flatten /shape -map_comp.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by congr (sumn _); apply: eq_map => i; rewrite /= size_map -enumT -cardE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sum_enum_uniq",
            "line_nb": 1302,
            "steps": [
                {
                    "command": [
                        "rewrite cat_uniq -!enumT !(enum_uniq, map_inj_uniq); try by move=> ? ? [].",
                        "VernacExtend",
                        "768b2f88f8c65ebded32bd7dc9c8ffec8f100548"
                    ]
                },
                {
                    "command": [
                        "by rewrite andbT; apply/hasP=> [[_ /mapP[x _ ->] /mapP[]]].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_sum_enum",
            "line_nb": 1306,
            "steps": [
                {
                    "command": [
                        "by case: u => x; rewrite mem_cat -!enumT map_f ?mem_enum ?orbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_sum",
            "line_nb": 1311,
            "steps": [
                {
                    "command": [
                        "by rewrite !cardT !enumT {1}unlock size_cat !size_map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}