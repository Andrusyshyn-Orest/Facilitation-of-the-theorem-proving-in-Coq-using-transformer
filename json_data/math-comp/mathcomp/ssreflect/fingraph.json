{
    "filename": "mathcomp/ssreflect/fingraph.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrbool ssrfun eqtype ssrnat seq path fintype.",
            "VernacRequire",
            "6d55952a0c377f6b5cb2e6524cb6e1318cadb0a6"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Definition grel (T : eqType) (g : T -> seq T) := [rel x y | y \\in g x].",
            "VernacDefinition",
            "38b19212d6516f84467a7de41180369f53d4fe22"
        ],
        [
            "Section Connect.",
            "VernacBeginSection",
            "e473122829cafd9df3518e2f0c3a8404fa5136b9"
        ],
        [
            "Variable T : finType.",
            "VernacAssumption",
            "6349381da4d33cbc2eeaf1bade38718e15f7a2c9"
        ],
        [
            "Section Dfs.",
            "VernacBeginSection",
            "5572aa7d04c318e6c4a52cf4d46ba0ec2d8f97f2"
        ],
        [
            "Variable g : T -> seq T.",
            "VernacAssumption",
            "59f96232a4d306b878654be917cc013c49ed5f58"
        ],
        [
            "Implicit Type v w a : seq T.",
            "VernacReserve",
            "3960036f5b35c03da9b5233968e39512640e53b5"
        ],
        [
            "Fixpoint dfs n v x := if x \\in v then v else if n is n'.+1 then foldl (dfs n') (x :: v) (g x) else v.",
            "VernacFixpoint",
            "34d80aff9fdac6e6ba2e71f98f366894f406b505"
        ],
        [
            "Lemma subset_dfs n v a : v \\subset foldl (dfs n) v a.",
            "VernacStartTheoremProof",
            "faafe3d1916a41b1491179e54eb15fca2f62a7a4"
        ],
        [
            "elim: n a v => [|n IHn]; first by elim=> //= *; rewrite if_same.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "elim=> //= x a IHa v; apply: subset_trans {IHa}(IHa _); case: ifP => // _.",
            "VernacExtend",
            "b0d02263834d65d393187de03d85af4875414e04"
        ],
        [
            "by apply: subset_trans (IHn _ _); apply/subsetP=> y; apply: predU1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Inductive dfs_path v x y : Prop := DfsPath p of path (grel g) x p & y = last x p & [disjoint x :: p & v].",
            "VernacInductive",
            "13858f2bbe05e6ba690d7351622748f0fe29b131"
        ],
        [
            "Lemma dfs_pathP n x y v : #|T| <= #|v| + n -> y \\notin v -> reflect (dfs_path v x y) (y \\in dfs n v x).",
            "VernacStartTheoremProof",
            "9f2b90532f6ea4af0f341604455b04734de24c28"
        ],
        [
            "have dfs_id w z: z \\notin w -> dfs_path w z z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists [::]; rewrite ?disjoint_has //= orbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: n => [|n IHn] /= in x y v * => le_v'_n not_vy.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite addn0 (geq_leqif (subset_leqif_card (subset_predT _))) in le_v'_n.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite predT_subset in not_vy.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [v_x | not_vx] := ifPn.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite (negPf not_vy); right=> [] [p _ _]; rewrite disjoint_has /= v_x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "set v1 := x :: v; set a := g x; have sub_dfs := subsetP (subset_dfs n _ _).",
            "VernacExtend",
            "c0e995c4eae7d99786159000ade9075058bd55f5"
        ],
        [
            "have [-> | neq_yx] := eqVneq y x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite sub_dfs ?mem_head //; left; apply: dfs_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: (@equivP (exists2 x1, x1 \\in a & dfs_path v1 x1 y)); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "split=> {IHn} [[x1 a_x1 [p g_p p_y]] | [p /shortenP[]]].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite disjoint_has has_sym /= has_sym /= => /norP[_ not_pv].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by exists (x1 :: p); rewrite /= ?a_x1 // disjoint_has negb_or not_vx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case=> [_ _ _ eq_yx | x1 p1 /=]; first by case/eqP: neq_yx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case/andP=> a_x1 g_p1 /andP[not_p1x _] /subsetP p_p1 p1y not_pv.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "exists x1 => //; exists p1 => //.",
            "VernacExtend",
            "fbaa61af20867a5dfb8bb5213ca8048b258f8f3a"
        ],
        [
            "rewrite disjoint_sym disjoint_cons not_p1x disjoint_sym.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by move: not_pv; rewrite disjoint_cons => /andP[_ /disjoint_trans->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{neq_yx not_vy}: y \\notin v1 by apply/norP.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{le_v'_n not_vx}: #|T| <= #|v1| + n by rewrite cardU1 not_vx addSnnS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "elim: {x v}a v1 => [|x a IHa] v /= le_v'_n not_vy.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite (negPf not_vy); right=> [] [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "set v2 := dfs n v x; have v2v: v \\subset v2 := subset_dfs n v [:: x].",
            "VernacExtend",
            "5a669f4ad2118b005921530a069ac8f03fd7f32b"
        ],
        [
            "have [v2y | not_v2y] := boolP (y \\in v2).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite sub_dfs //; left; exists x; [apply: mem_head | apply: IHn].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: {IHa}(equivP (IHa _ _ not_v2y)).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite (leq_trans le_v'_n) // leq_add2r subset_leq_card.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split=> [] [x1 a_x1 [p g_p p_y not_pv]].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "exists x1; [exact: predU1r | exists p => //].",
            "VernacExtend",
            "fc60a8eca06ed23c292734554f95b5443d5e754e"
        ],
        [
            "by rewrite disjoint_sym (disjoint_trans v2v) // disjoint_sym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices not_p1v2: [disjoint x1 :: p & v2].",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "case/predU1P: a_x1 => [def_x1 | ]; last by exists x1; last exists p.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case/pred0Pn: not_p1v2; exists x; rewrite /= def_x1 mem_head /=.",
            "VernacExtend",
            "97617ef9f69d6cfc3b0e982feea03988767f3a73"
        ],
        [
            "suffices not_vx: x \\notin v by apply/IHn; last apply: dfs_id.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by move: not_pv; rewrite disjoint_cons def_x1 => /andP[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: contraR not_v2y => /pred0Pn[x2 /andP[/= p_x2 v2x2]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "case/splitPl: p_x2 p_y g_p not_pv => p0 p2 p0x2.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite last_cat cat_path -cat_cons lastI cat_rcons {}p0x2 => p2y /andP[_ g_p2].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite disjoint_cat disjoint_cons => /and3P[{p0}_ not_vx2 not_p2v].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "have{not_vx2 v2x2} [p1 g_p1 p1_x2 not_p1v] := IHn _ _ v le_v'_n not_vx2 v2x2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/IHn=> //; exists (p1 ++ p2); rewrite ?cat_path ?last_cat -?p1_x2 ?g_p1 //.",
            "VernacExtend",
            "610dfb3ea604e53a706e7152ea48e6f237c35d13"
        ],
        [
            "by rewrite -cat_cons disjoint_cat not_p1v.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dfsP x y : reflect (exists2 p, path (grel g) x p & y = last x p) (y \\in dfs #|T| [::] x).",
            "VernacStartTheoremProof",
            "e6d6f1a340ef6719c5efba56bdbdcb2c8b005fd8"
        ],
        [
            "apply: (iffP (dfs_pathP _ _ _)); rewrite ?card0 // => [] [p]; exists p => //.",
            "VernacExtend",
            "43757b65c37fb65b9ba8f6c1547c633fae51bfb4"
        ],
        [
            "by rewrite disjoint_sym disjoint0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Dfs.",
            "VernacEndSegment",
            "68dd01c9250265264634e91907843f07549f6521"
        ],
        [
            "Variable e : rel T.",
            "VernacAssumption",
            "acc0e2d8941d2d68524e0c24e0cbefa6b90bf0c6"
        ],
        [
            "Definition rgraph x := enum (e x).",
            "VernacDefinition",
            "6ea36a5ba1f529e24461c0a43d14d2ca29ccfd0a"
        ],
        [
            "Lemma rgraphK : grel rgraph =2 e.",
            "VernacStartTheoremProof",
            "30b391d04fcd0fe0d283d27483658ea5cd105f21"
        ],
        [
            "by move=> x y; rewrite /= mem_enum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition connect : rel T := fun x y => y \\in dfs rgraph #|T| [::] x.",
            "VernacDefinition",
            "680bb153c2813e1ff8e44ffee46004f4d50c393d"
        ],
        [
            "Canonical connect_app_pred x := ApplicativePred (connect x).",
            "VernacDefinition",
            "790d9f56d71a796af4dc9c6dc46ca9746d7e7921"
        ],
        [
            "Lemma connectP x y : reflect (exists2 p, path e x p & y = last x p) (connect x y).",
            "VernacStartTheoremProof",
            "eb4a99565bb3695bfb653fc2846ab74d1ccee41a"
        ],
        [
            "apply: (equivP (dfsP _ x y)).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by split=> [] [p e_p ->]; exists p => //; rewrite (eq_path rgraphK) in e_p *.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma connect_trans : transitive connect.",
            "VernacStartTheoremProof",
            "290a3bf9276a33fb83a4948305489fcf5893ea05"
        ],
        [
            "move=> x y z /connectP[p e_p ->] /connectP[q e_q ->]; apply/connectP.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by exists (p ++ q); rewrite ?cat_path ?e_p ?last_cat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma connect0 x : connect x x.",
            "VernacStartTheoremProof",
            "8ebfe4c463943d6c9852fde8cb7d380fbf8a3c76"
        ],
        [
            "by apply/connectP; exists [::].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_connect0 x y : x = y -> connect x y.",
            "VernacStartTheoremProof",
            "14ee2b9bcd001d068b024f86efe5e6d1c81828f2"
        ],
        [
            "by move->; apply: connect0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma connect1 x y : e x y -> connect x y.",
            "VernacStartTheoremProof",
            "a9bffb9fe72b253189d1968f4032340a39aaeb53"
        ],
        [
            "by move=> e_xy; apply/connectP; exists [:: y]; rewrite /= ?e_xy.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma path_connect x p : path e x p -> subpred (mem (x :: p)) (connect x).",
            "VernacStartTheoremProof",
            "ec74d0c5c64fd66282f901f4d6fc493c78fd7c7f"
        ],
        [
            "move=> e_p y p_y; case/splitPl: p / p_y e_p => p q <-.",
            "VernacExtend",
            "a01b3d93f426ff68d360351709a5fa5af822af32"
        ],
        [
            "by rewrite cat_path => /andP[e_p _]; apply/connectP; exists p.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition root x := odflt x (pick (connect x)).",
            "VernacDefinition",
            "b4514b08ca2341cbffe22ed964e9f174a02a1e7c"
        ],
        [
            "Definition roots : pred T := fun x => root x == x.",
            "VernacDefinition",
            "e2f7c0ce17153de8fc1bdf3c6b820ed331be28d5"
        ],
        [
            "Canonical roots_pred := ApplicativePred roots.",
            "VernacDefinition",
            "b6d688f66b2fcd55814b982ce9840a9907aa7b81"
        ],
        [
            "Definition n_comp_mem (m_a : mem_pred T) := #|predI roots m_a|.",
            "VernacDefinition",
            "ded0a5b0310f20d7beb3dfecc473c863a127b8ba"
        ],
        [
            "Lemma connect_root x : connect x (root x).",
            "VernacStartTheoremProof",
            "8f50c42e3e4ac985f761c13d5883c32b890981cf"
        ],
        [
            "by rewrite /root; case: pickP; rewrite ?connect0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition connect_sym := symmetric connect.",
            "VernacDefinition",
            "36239faee62b087d7ba5b346055a7c3101301d48"
        ],
        [
            "Hypothesis sym_e : connect_sym.",
            "VernacAssumption",
            "3fea5b4506978f8427fe8f9c97532b438faf2dcf"
        ],
        [
            "Lemma same_connect : left_transitive connect.",
            "VernacStartTheoremProof",
            "840b72f8aafd3e290973982d38174d6c70ff95df"
        ],
        [
            "exact: sym_left_transitive connect_trans.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma same_connect_r : right_transitive connect.",
            "VernacStartTheoremProof",
            "9deeb40738e1de0e9d3cdfe31db8f3b05979dcd3"
        ],
        [
            "exact: sym_right_transitive connect_trans.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma same_connect1 x y : e x y -> connect x =1 connect y.",
            "VernacStartTheoremProof",
            "e3d481ac0d9ce721b14bd4a24ef463f8f31bc915"
        ],
        [
            "by move/connect1; apply: same_connect.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma same_connect1r x y : e x y -> connect^~ x =1 connect^~ y.",
            "VernacStartTheoremProof",
            "a48e7dd13ecb02ee7d8b2c98617358afab1d9288"
        ],
        [
            "by move/connect1; apply: same_connect_r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rootP x y : reflect (root x = root y) (connect x y).",
            "VernacStartTheoremProof",
            "2c1e8d8a7017f84231e5aed0019157ea6eb3589a"
        ],
        [
            "apply: (iffP idP) => e_xy.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite /root -(eq_pick (same_connect e_xy)); case: pickP e_xy => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: (connect_trans (connect_root x)); rewrite e_xy sym_e connect_root.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma root_root x : root (root x) = root x.",
            "VernacStartTheoremProof",
            "dcb87833e88f6491df92b0c55724106b39722224"
        ],
        [
            "exact/esym/rootP/connect_root.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma roots_root x : roots (root x).",
            "VernacStartTheoremProof",
            "50b484002657b1616e73c0bcf50995b20a8e36d5"
        ],
        [
            "exact/eqP/root_root.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma root_connect x y : (root x == root y) = connect x y.",
            "VernacStartTheoremProof",
            "4a658627a3d5ec8484582dda9dcaa197b86ecc90"
        ],
        [
            "exact: sameP eqP (rootP x y).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition closed_mem m_a := forall x y, e x y -> in_mem x m_a = in_mem y m_a.",
            "VernacDefinition",
            "3193b8fd7985a1e760c0bab705f4f1dd3a45f994"
        ],
        [
            "Definition closure_mem m_a : pred T := fun x => ~~ disjoint (mem (connect x)) m_a.",
            "VernacDefinition",
            "b8a10f4bfaf8a4d574464224e3e152946088b216"
        ],
        [
            "End Connect.",
            "VernacEndSegment",
            "07f388b603951422ff9c45a0265b36a7ef23bc1e"
        ],
        [
            "Hint Resolve connect0 : core.",
            "VernacHints",
            "55baef97024e11e38c6e49d5fd4af392fd8a7a50"
        ],
        [
            "Notation n_comp e a := (n_comp_mem e (mem a)).",
            "VernacSyntacticDefinition",
            "f27efaab7bca4c3b2fae751e145b3161d8e53509"
        ],
        [
            "Notation closed e a := (closed_mem e (mem a)).",
            "VernacSyntacticDefinition",
            "ca4509e793b7c74bb042d3f6ffbd9f23e63065fa"
        ],
        [
            "Notation closure e a := (closure_mem e (mem a)).",
            "VernacSyntacticDefinition",
            "b5d329d1068acb37d9a2c2cc8bb0ff7cadf04736"
        ],
        [
            "Prenex Implicits connect root roots.",
            "VernacExtend",
            "8f6abd6bfd927cb87d564478938240c8ad3da358"
        ],
        [
            "Arguments dfsP {T g x y}.",
            "VernacArguments",
            "46c77915e6875ab622e8c796e0e8ff6f58284161"
        ],
        [
            "Arguments connectP {T e x y}.",
            "VernacArguments",
            "81dc845350a2fe352d7b168e8913f6238b53aed2"
        ],
        [
            "Arguments rootP [T e] _ {x y}.",
            "VernacArguments",
            "1942610c405a47040f9a04ad037ba45b9e07b814"
        ],
        [
            "Notation fconnect f := (connect (coerced_frel f)).",
            "VernacSyntacticDefinition",
            "0fe0d5f7a8acca721e487c6cf72ec11201fa6ab4"
        ],
        [
            "Notation froot f := (root (coerced_frel f)).",
            "VernacSyntacticDefinition",
            "50609c95fccd3c2c936b4a868972284bd59259da"
        ],
        [
            "Notation froots f := (roots (coerced_frel f)).",
            "VernacSyntacticDefinition",
            "0667a0835ceac8a0521cf5c470d7cdbc8a22aebc"
        ],
        [
            "Notation fcard_mem f := (n_comp_mem (coerced_frel f)).",
            "VernacSyntacticDefinition",
            "4e0b9594c1fdd14a31e2894002a827dc01b914ca"
        ],
        [
            "Notation fcard f a := (fcard_mem f (mem a)).",
            "VernacSyntacticDefinition",
            "70e566e5d9f77d8b9a4d4edd733d2fbded6c8186"
        ],
        [
            "Notation fclosed f a := (closed (coerced_frel f) a).",
            "VernacSyntacticDefinition",
            "fdb4d4b465c3f1e3ee86aa57688f3c19c8d550ba"
        ],
        [
            "Notation fclosure f a := (closure (coerced_frel f) a).",
            "VernacSyntacticDefinition",
            "9011f7adacbdc4d6df58fda13d40fcea1ae100bf"
        ],
        [
            "Section EqConnect.",
            "VernacBeginSection",
            "82073dd7f1fb90695cc0a0de026c47c10cd827cf"
        ],
        [
            "Variable T : finType.",
            "VernacAssumption",
            "6349381da4d33cbc2eeaf1bade38718e15f7a2c9"
        ],
        [
            "Implicit Types (e : rel T) (a : pred T).",
            "VernacReserve",
            "40940df3a28bed0932d84df7134fe30b6ba504ee"
        ],
        [
            "Lemma connect_sub e e' : subrel e (connect e') -> subrel (connect e) (connect e').",
            "VernacStartTheoremProof",
            "673df93ec02af289b0719cfb6fa8869e75b6d80b"
        ],
        [
            "move=> e'e x _ /connectP[p e_p ->]; elim: p x e_p => //= y p IHp x /andP[exy].",
            "VernacExtend",
            "06880003f1108b2eb418688c7bc6bf1013cf0e4c"
        ],
        [
            "by move/IHp; apply: connect_trans; apply: e'e.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma relU_sym e e' : connect_sym e -> connect_sym e' -> connect_sym (relU e e').",
            "VernacStartTheoremProof",
            "f66d51f32ad737e1381f0df2585004c28111661d"
        ],
        [
            "move=> sym_e sym_e'; apply: symmetric_from_pre => x _ /connectP[p e_p ->].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "elim: p x e_p => //= y p IHp x /andP[e_xy /IHp{IHp}/connect_trans]; apply.",
            "VernacExtend",
            "7836d5035845574109d38c34f9f2abb593be3fa9"
        ],
        [
            "case/orP: e_xy => /connect1; rewrite (sym_e, sym_e'); by apply: connect_sub y x => x y e_xy; rewrite connect1 //= e_xy ?orbT.",
            "VernacExtend",
            "e28621cab80b25b1d7725a7bfcb68d6908230c48"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_connect e e' : e =2 e' -> connect e =2 connect e'.",
            "VernacStartTheoremProof",
            "dc986d42fb6d566686c446df2531766670f639dd"
        ],
        [
            "move=> eq_e x y; apply/connectP/connectP=> [] [p e_p ->]; by exists p; rewrite // (eq_path eq_e) in e_p *.",
            "VernacExtend",
            "863cc135acc45d5c9d170c836bc1464e830f66a2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_n_comp e e' : connect e =2 connect e' -> n_comp_mem e =1 n_comp_mem e'.",
            "VernacStartTheoremProof",
            "b07bfd471879b20786473a3e2ae24a04560dd346"
        ],
        [
            "move=> eq_e [a]; apply: eq_card => x /=.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite !inE /= /roots /root /= (eq_pick (eq_e x)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_n_comp_r {e} a a' : a =i a' -> n_comp e a = n_comp e a'.",
            "VernacStartTheoremProof",
            "6e4f523d4510929a3175687dca9097f719b59f2b"
        ],
        [
            "by move=> eq_a; apply: eq_card => x; rewrite inE /= eq_a.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma n_compC a e : n_comp e T = n_comp e a + n_comp e [predC a].",
            "VernacStartTheoremProof",
            "21c4049ce19bed210a04fd58f472713249b3120a"
        ],
        [
            "rewrite /n_comp_mem (eq_card (fun _ => andbT _)) -(cardID a); congr (_ + _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by apply: eq_card => x; rewrite !inE andbC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_root e e' : e =2 e' -> root e =1 root e'.",
            "VernacStartTheoremProof",
            "c6deeb0d9ef595fec68b435ac24ab6c83e34d143"
        ],
        [
            "by move=> eq_e x; rewrite /root (eq_pick (eq_connect eq_e x)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_roots e e' : e =2 e' -> roots e =1 roots e'.",
            "VernacStartTheoremProof",
            "e951207c59b1f9697dd06498f4e22c98f579ee9e"
        ],
        [
            "by move=> eq_e x; rewrite /roots (eq_root eq_e).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EqConnect.",
            "VernacEndSegment",
            "32ed8ef0098330863097bf2c2ef7e4032c5918e6"
        ],
        [
            "Section Closure.",
            "VernacBeginSection",
            "1c38e33ad217b0b30c217f2056b8619901ed40f6"
        ],
        [
            "Variables (T : finType) (e : rel T).",
            "VernacAssumption",
            "0d3ecabbe4558283089b2de4ee48f3aba10c297c"
        ],
        [
            "Hypothesis sym_e : connect_sym e.",
            "VernacAssumption",
            "4df2a4baf099ee4bfe88cbeeab5d67bba728bd54"
        ],
        [
            "Implicit Type a : pred T.",
            "VernacReserve",
            "410ca61376fb7ec53d3a091ef112b8804b93588d"
        ],
        [
            "Lemma same_connect_rev : connect e =2 connect (fun x y => e y x).",
            "VernacStartTheoremProof",
            "4751ee8804a877a774994a1e3681501873881ff3"
        ],
        [
            "suff crev e': subrel (connect (fun x : T => e'^~ x)) (fun x => (connect e')^~x).",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "by move=> x y; rewrite sym_e; apply/idP/idP; apply: crev.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> x y /connectP[p e_p p_y]; apply/connectP.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "exists (rev (belast x p)); first by rewrite p_y rev_path.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -(last_cons x) -rev_rcons p_y -lastI rev_cons last_rcons.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma intro_closed a : (forall x y, e x y -> x \\in a -> y \\in a) -> closed e a.",
            "VernacStartTheoremProof",
            "31a5d24b801fc89ff543095b1dff9ff003d12b62"
        ],
        [
            "move=> cl_a x y e_xy; apply/idP/idP=> [|a_y]; first exact: cl_a.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have{x e_xy} /connectP[p e_p ->]: connect e y x by rewrite sym_e connect1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by elim: p y a_y e_p => //= y p IHp x a_x /andP[/cl_a/(_ a_x)]; apply: IHp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma closed_connect a : closed e a -> forall x y, connect e x y -> (x \\in a) = (y \\in a).",
            "VernacStartTheoremProof",
            "065986d81efac9b725a8741197ac2f4ef8979506"
        ],
        [
            "move=> cl_a x _ /connectP[p e_p ->].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by elim: p x e_p => //= y p IHp x /andP[/cl_a->]; apply: IHp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma connect_closed x : closed e (connect e x).",
            "VernacStartTheoremProof",
            "4fee4eedb60fe69cc05bd26b581fe7cb64e1b9c9"
        ],
        [
            "by move=> y z /connect1/same_connect_r; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma predC_closed a : closed e a -> closed e [predC a].",
            "VernacStartTheoremProof",
            "30342f53be7909e34497469f6896f56a9122f083"
        ],
        [
            "by move=> cl_a x y /cl_a; rewrite !inE => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma closure_closed a : closed e (closure e a).",
            "VernacStartTheoremProof",
            "8fcf7ec442bcc3851afed2661877582d573a4413"
        ],
        [
            "apply: intro_closed => x y /connect1 e_xy; congr (~~ _).",
            "VernacExtend",
            "0fc412f71bc6f463112dd7d405085259e70a06c5"
        ],
        [
            "by apply: eq_disjoint; apply: same_connect.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_closure a : {subset a <= closure e a}.",
            "VernacStartTheoremProof",
            "8b7fb5b9673fe0c33a30d1a2bbda8d0efb85d7c8"
        ],
        [
            "by move=> x a_x; apply/existsP; exists x; rewrite !inE connect0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subset_closure a : a \\subset closure e a.",
            "VernacStartTheoremProof",
            "d7a468be0a7fdc2f3c23cf5cc3abf25bb823e476"
        ],
        [
            "by apply/subsetP; apply: mem_closure.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma n_comp_closure2 x y : n_comp e (closure e (pred2 x y)) = (~~ connect e x y).+1.",
            "VernacStartTheoremProof",
            "222e2d40cd227b87e67dfde90fb77925c3b8b5f7"
        ],
        [
            "rewrite -(root_connect sym_e) -card2; apply: eq_card => z.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "apply/idP/idP=> [/andP[/eqP {2}<- /pred0Pn[t /andP[/= ezt exyt]]] |].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by case/pred2P: exyt => <-; rewrite (rootP sym_e ezt) !inE eqxx ?orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case/pred2P=> ->; rewrite !inE roots_root //; apply/existsP; [exists x | exists y]; rewrite !inE eqxx ?orbT sym_e connect_root.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma n_comp_connect x : n_comp e (connect e x) = 1.",
            "VernacStartTheoremProof",
            "bc0845b18388444b4eb5a51ba11b8686e18f155d"
        ],
        [
            "rewrite -(card1 (root e x)); apply: eq_card => y.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "apply/andP/eqP => [[/eqP r_y /rootP-> //] | ->] /=.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite inE connect_root roots_root.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Closure.",
            "VernacEndSegment",
            "eeda48840ed30cf1906753ce49ab1a9b136edd1f"
        ],
        [
            "Section Orbit.",
            "VernacBeginSection",
            "e7a78f23dbaf8bd91be3de6a1a108b4dcc9b2230"
        ],
        [
            "Variables (T : finType) (f : T -> T).",
            "VernacAssumption",
            "942bccefefb652cacb77101f80f6001298072f49"
        ],
        [
            "Definition order x := #|fconnect f x|.",
            "VernacDefinition",
            "b3ddb2c396874fd9d4aaefb55f9aa5e7fc13a06c"
        ],
        [
            "Definition orbit x := traject f x (order x).",
            "VernacDefinition",
            "305add1a226b70b47a7a0482dea42016dbd353b8"
        ],
        [
            "Definition findex x y := index y (orbit x).",
            "VernacDefinition",
            "eacbf598643e8bb78e34af505c0cbdc284cdb5c0"
        ],
        [
            "Definition finv x := iter (order x).-1 f x.",
            "VernacDefinition",
            "a837ba2ce3a1d7a72a2cfaac6bab563a27208a9f"
        ],
        [
            "Lemma fconnect_iter n x : fconnect f x (iter n f x).",
            "VernacStartTheoremProof",
            "1e853f4658c74056700ebc02f5c920896e24e012"
        ],
        [
            "apply/connectP.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by exists (traject f (f x) n); [apply: fpath_traject | rewrite last_traject].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fconnect1 x : fconnect f x (f x).",
            "VernacStartTheoremProof",
            "cb3a4f72b74ddc8e79c9a2e388775436d4a20aee"
        ],
        [
            "exact: (fconnect_iter 1).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fconnect_finv x : fconnect f x (finv x).",
            "VernacStartTheoremProof",
            "e5a24a7c4d2ff52c417d2eaab1cc9b4ebd485c47"
        ],
        [
            "exact: fconnect_iter.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orderSpred x : (order x).-1.+1 = order x.",
            "VernacStartTheoremProof",
            "2d4a25562f5c4c62617dab6eb6754b0abeb0f540"
        ],
        [
            "by rewrite /order (cardD1 x) [_ x _]connect0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_orbit x : size (orbit x) = order x.",
            "VernacStartTheoremProof",
            "d060f0b5c162a983d5788abeba0fa9163f333c2d"
        ],
        [
            "exact: size_traject.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma looping_order x : looping f x (order x).",
            "VernacStartTheoremProof",
            "a9810e4308e7201353bf39abc9b95efaa99e692f"
        ],
        [
            "apply: contraFT (ltnn (order x)); rewrite -looping_uniq => /card_uniqP.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "rewrite size_traject => <-; apply: subset_leq_card.",
            "VernacExtend",
            "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
        ],
        [
            "by apply/subsetP=> _ /trajectP[i _ ->]; apply: fconnect_iter.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fconnect_orbit x y : fconnect f x y = (y \\in orbit x).",
            "VernacStartTheoremProof",
            "171f7de3e04dfe9eda4a7782ed015a2e44493fc9"
        ],
        [
            "apply/idP/idP=> [/connectP[_ /fpathP[m ->] ->] | /trajectP[i _ ->]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite last_traject; apply/loopingP/looping_order.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exact: fconnect_iter.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orbit_uniq x : uniq (orbit x).",
            "VernacStartTheoremProof",
            "54afabf7e9e157949975b4c01ad1a7c526ded87a"
        ],
        [
            "rewrite /orbit -orderSpred looping_uniq; set n := (order x).-1.",
            "VernacExtend",
            "c1f58f36c5711f022b4a54717f37c2782f34a159"
        ],
        [
            "apply: contraFN (ltnn n) => /trajectP[i lt_i_n eq_fnx_fix].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite {1}/n orderSpred /order -(size_traject f x n).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: (leq_trans (subset_leq_card _) (card_size _)); apply/subsetP=> z.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "rewrite inE fconnect_orbit => /trajectP[j le_jn ->{z}].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite -orderSpred -/n ltnS leq_eqVlt in le_jn.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/trajectP; case/predU1P: le_jn => [->|]; [exists i | exists j].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma findex_max x y : fconnect f x y -> findex x y < order x.",
            "VernacStartTheoremProof",
            "52775af021567803396968da26052b42684d7f6f"
        ],
        [
            "by rewrite [_ y]fconnect_orbit -index_mem size_orbit.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma findex_iter x i : i < order x -> findex x (iter i f x) = i.",
            "VernacStartTheoremProof",
            "1ecf49054dcb9106aa58aa8314a06276ac31b88b"
        ],
        [
            "move=> lt_ix; rewrite -(nth_traject f lt_ix) /findex index_uniq ?orbit_uniq //.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite size_orbit.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iter_findex x y : fconnect f x y -> iter (findex x y) f x = y.",
            "VernacStartTheoremProof",
            "0d1249d3d9769fbf8eb9b80739170f9ebf791e1f"
        ],
        [
            "rewrite [_ y]fconnect_orbit => fxy; pose i := index y (orbit x).",
            "VernacExtend",
            "9d8fbc7ebaadb48200c542591ceec3e0f555a812"
        ],
        [
            "have lt_ix: i < order x by rewrite -size_orbit index_mem.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -(nth_traject f lt_ix) nth_index.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma findex0 x : findex x x = 0.",
            "VernacStartTheoremProof",
            "a47ad38fbd7ad58deaa0a8f169a903e5161eb06d"
        ],
        [
            "by rewrite /findex /orbit -orderSpred /= eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fconnect_invariant (T' : eqType) (k : T -> T') : invariant f k =1 xpredT -> forall x y, fconnect f x y -> k x = k y.",
            "VernacStartTheoremProof",
            "92badb19421b5dfd6b1c8f4b01523bb089186b3f"
        ],
        [
            "move=> eq_k_f x y /iter_findex <-; elim: {y}(findex x y) => //= n ->.",
            "VernacExtend",
            "06880003f1108b2eb418688c7bc6bf1013cf0e4c"
        ],
        [
            "by rewrite (eqP (eq_k_f _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Loop.",
            "VernacBeginSection",
            "b0c8164465572e13f3e996b3681c7dbd629b49b1"
        ],
        [
            "Variable p : seq T.",
            "VernacAssumption",
            "3b929bca5fb99baf639879d17cb000ab35d2babe"
        ],
        [
            "Hypotheses (f_p : fcycle f p) (Up : uniq p).",
            "VernacAssumption",
            "76a0a3838a0d4a1a5636a134f0ef03aa32127b6e"
        ],
        [
            "Variable x : T.",
            "VernacAssumption",
            "d6bfa09bf565e320784aab1f7d19d539d56c0373"
        ],
        [
            "Hypothesis p_x : x \\in p.",
            "VernacAssumption",
            "5d3f19b5364590637f56118bcb0c6ff048d09c50"
        ],
        [
            "Lemma fconnect_cycle y : fconnect f x y = (y \\in p).",
            "VernacStartTheoremProof",
            "9c43b71eade2015f30a1971bcc5f5be344d37e50"
        ],
        [
            "have [i q def_p] := rot_to p_x; rewrite -(mem_rot i p) def_p.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "have{i def_p} /andP[/eqP q_x f_q]: (f (last x q) == x) && fpath f x q.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by have:= f_p; rewrite -(rot_cycle i) def_p (cycle_path x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/idP/idP=> [/connectP[_ /fpathP[j ->] ->] | ]; last exact: path_connect.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case/fpathP: f_q q_x => n ->; rewrite !last_traject -iterS => def_x.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "by apply: (@loopingP _ f x n.+1); rewrite /looping def_x /= mem_head.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma order_cycle : order x = size p.",
            "VernacStartTheoremProof",
            "4c0791f6cd319f20f17ad0c90f99fa871a81f7be"
        ],
        [
            "by rewrite -(card_uniqP Up); apply (eq_card fconnect_cycle).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orbit_rot_cycle : {i : nat | orbit x = rot i p}.",
            "VernacStartTheoremProof",
            "8f9cc6d94acd82712ae6fbca585393a4053e082e"
        ],
        [
            "have [i q def_p] := rot_to p_x; exists i.",
            "VernacExtend",
            "c250601799737d840b9c2e1d4a004695b764af67"
        ],
        [
            "rewrite /orbit order_cycle -(size_rot i) def_p.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "suffices /fpathP[j ->]: fpath f x q by rewrite /= size_traject.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by move: f_p; rewrite -(rot_cycle i) def_p (cycle_path x); case/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Loop.",
            "VernacEndSegment",
            "78045225aab120fb3ce9694d0315a02e90e478eb"
        ],
        [
            "Section orbit_in.",
            "VernacBeginSection",
            "26256ef9912404108a208f72d822d5417c221e60"
        ],
        [
            "Variable S : pred_sort (predPredType T).",
            "VernacAssumption",
            "62dc96d9e94fa8068cc6e11e0d54961121836157"
        ],
        [
            "Hypothesis f_in : {in S, forall x, f x \\in S}.",
            "VernacAssumption",
            "2fcbe8ef9807c02c41b625df4994d9e8f86de301"
        ],
        [
            "Hypothesis injf : {in S &, injective f}.",
            "VernacAssumption",
            "e591bd83528b9673fe6a00f5993a056711683d2d"
        ],
        [
            "Lemma iter_in : {in S, forall x i, iter i f x \\in S}.",
            "VernacStartTheoremProof",
            "e8b8fc35d78ca7fda1dc51bc4908ff955ee95e20"
        ],
        [
            "by move=> x xS; elim=> [|i /f_in].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma finv_in : {in S, forall x, finv x \\in S}.",
            "VernacStartTheoremProof",
            "7b343131ca42eded582cdd1844c96d08c5f0b730"
        ],
        [
            "by move=> ??; rewrite iter_in.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma f_finv_in : {in S, cancel finv f}.",
            "VernacStartTheoremProof",
            "7dd8a0db529a3bcebdcd52d6a69fee3eb1f03681"
        ],
        [
            "move=> x xS; move: (looping_order x) (orbit_uniq x).",
            "VernacExtend",
            "8b784377bdc4d565ff66d4cf36a6041e9354c156"
        ],
        [
            "rewrite /looping /orbit -orderSpred looping_uniq /= /looping; set n := _.-1.",
            "VernacExtend",
            "c1f58f36c5711f022b4a54717f37c2782f34a159"
        ],
        [
            "case/predU1P=> // /trajectP[i lt_i_n]; rewrite -iterSr.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by move=> /injf ->; rewrite ?iter_in //; case/trajectP; exists i.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma finv_f_in : {in S, cancel f finv}.",
            "VernacStartTheoremProof",
            "e8347f2185f1f29162bedb5300219086579c4924"
        ],
        [
            "by move=> x xS; apply/injf; rewrite ?iter_in ?f_finv_in ?f_in.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma finv_inj_in : {in S &, injective finv}.",
            "VernacStartTheoremProof",
            "ef3a02d65adf91c21f8753fdc92f54af85634608"
        ],
        [
            "by move=> x y xS yS q; rewrite -(f_finv_in xS) q f_finv_in.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fconnect_sym_in : {in S &, forall x y, fconnect f x y = fconnect f y x}.",
            "VernacStartTheoremProof",
            "f8695cb74abdc2c6d6bd92f6d5b94524bfe55dff"
        ],
        [
            "suff Sf : {in S &, forall x y, fconnect f x y -> fconnect f y x}.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "by move=> *; apply/idP/idP=> /Sf->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> x _ xS _ /connectP [p f_p ->]; elim: p => //= y p IHp in x xS f_p *.",
            "VernacExtend",
            "06880003f1108b2eb418688c7bc6bf1013cf0e4c"
        ],
        [
            "move: f_p; rewrite -{2}(finv_f_in xS) => /andP[/eqP <- /(IHp _ (f_in xS))].",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by move=> /connect_trans -> //; apply: fconnect_finv.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iter_order_in : {in S, forall x, iter (order x) f x = x}.",
            "VernacStartTheoremProof",
            "92785dc2b653ee280cbb603139dd315a50d4793d"
        ],
        [
            "by move=> x xS; rewrite -orderSpred iterS; apply: f_finv_in.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iter_finv_in n : {in S, forall x, n <= order x -> iter n finv x = iter (order x - n) f x}.",
            "VernacStartTheoremProof",
            "dd972158b0c68fc80f03f08d6dee9f848e76fa98"
        ],
        [
            "move=> x xS; rewrite -{2}[x]iter_order_in => // /subnKC {1}<-; move: (_ - n).",
            "VernacExtend",
            "a5f56fb00bcaec650c845440add7c784b2a6a909"
        ],
        [
            "move=> m; rewrite iter_add; elim: n => // n {2}<-.",
            "VernacExtend",
            "9d0009e9024dcd45b101a0b7756bd6217d27133c"
        ],
        [
            "by rewrite iterSr /= finv_f_in // -iter_add iter_in.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cycle_orbit_in : {in S, forall x, (fcycle f) (orbit x)}.",
            "VernacStartTheoremProof",
            "e37bec37a382be55825d2922df30d39961931fae"
        ],
        [
            "move=> x xS; rewrite /orbit -orderSpred (cycle_path x) /= last_traject.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite -/(finv x) fpath_traject f_finv_in ?eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fpath_finv_in p x : (x \\in S) && (fpath finv x p) = (last x p \\in S) && (fpath f (last x p) (rev (belast x p))).",
            "VernacStartTheoremProof",
            "513241e3d70f249daa367b445be50a2c54822fab"
        ],
        [
            "elim: p x => //= y p IHp x; rewrite rev_cons rcons_path.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "transitivity [&& y \\in S, f y == x & fpath finv y p].",
            "VernacExtend",
            "90a5b5318fc327d747cafb00e63939611a316d1d"
        ],
        [
            "apply/and3P/and3P => -[xS /eqP<- fxp]; split; by rewrite ?f_finv_in ?finv_f_in ?finv_in ?f_in.",
            "VernacExtend",
            "012fd2cf8f23a35257f26b863ab611e9c9c5842e"
        ],
        [
            "rewrite andbCA {}IHp !andbA [RHS]andbC -andbA; congr [&& _, _ & _].",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by case: p => //= z p; rewrite rev_cons last_rcons.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fpath_finv_f_in p : {in S, forall x, fpath finv x p -> fpath f (last x p) (rev (belast x p))}.",
            "VernacStartTheoremProof",
            "5053c2df5bdd53bbc733c84ea00c7dcdc49ce674"
        ],
        [
            "by move=> x xS /(conj xS)/andP; rewrite fpath_finv_in => /andP[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fpath_f_finv_in p x : last x p \\in S -> fpath f (last x p) (rev (belast x p)) -> fpath finv x p.",
            "VernacStartTheoremProof",
            "eedf610c7cea765fcffed36d8963a997e5447303"
        ],
        [
            "by move=> lS /(conj lS)/andP; rewrite -fpath_finv_in => /andP[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End orbit_in.",
            "VernacEndSegment",
            "b4da11b5cb54c95e608cb8191de362c773f5a437"
        ],
        [
            "Hypothesis injf : injective f.",
            "VernacAssumption",
            "76820d7d4f718c2b057c70e67a0cd0c4c4abcabc"
        ],
        [
            "Lemma f_finv : cancel finv f.",
            "VernacStartTheoremProof",
            "bfe95496e0dfb2b36ce1b7a4857ddb1b67a44c01"
        ],
        [
            "exact: (in1T (f_finv_in _ (in2W _))).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma finv_f : cancel f finv.",
            "VernacStartTheoremProof",
            "422a9ce6ac2e7be95eaf0fa33c089f966a816f8c"
        ],
        [
            "exact: (in1T (finv_f_in _ (in2W _))).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fin_inj_bij : bijective f.",
            "VernacStartTheoremProof",
            "69d38dc58fea9ee1b0e4e7e2d7b7270200e8782e"
        ],
        [
            "by exists finv; [apply: finv_f|apply: f_finv].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma finv_bij : bijective finv.",
            "VernacStartTheoremProof",
            "7b86221efbff195a4891e49ae7f1a93d2bb84ec2"
        ],
        [
            "by exists f; [apply: f_finv|apply: finv_f].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma finv_inj : injective finv.",
            "VernacStartTheoremProof",
            "77d77261e638b69b471e019dbd48ab24ec5473e1"
        ],
        [
            "exact: (can_inj f_finv).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fconnect_sym x y : fconnect f x y = fconnect f y x.",
            "VernacStartTheoremProof",
            "70db9f4f404430366f88b11a7442bd3da1ab2c3d"
        ],
        [
            "exact: (in2T (fconnect_sym_in _ (in2W _))).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let symf := fconnect_sym.",
            "VernacDefinition",
            "25d931f0c0c05716f69b3a33a7425e3c7d2cb4d4"
        ],
        [
            "Lemma iter_order x : iter (order x) f x = x.",
            "VernacStartTheoremProof",
            "fba55a6f3c0551ef6422e250dafda93db1c45a22"
        ],
        [
            "exact: (in1T (iter_order_in _ (in2W _))).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iter_finv n x : n <= order x -> iter n finv x = iter (order x - n) f x.",
            "VernacStartTheoremProof",
            "8730f578871b6b065f2d2de07a26b2b1659b116a"
        ],
        [
            "exact: (in1T (@iter_finv_in _ _ (in2W _) _)).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cycle_orbit x : fcycle f (orbit x).",
            "VernacStartTheoremProof",
            "10cadcd6c961fbc146701a29e043c088c5dfe71d"
        ],
        [
            "exact: (in1T (cycle_orbit_in _ (in2W _))).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fpath_finv x p : fpath finv x p = fpath f (last x p) (rev (belast x p)).",
            "VernacStartTheoremProof",
            "75e4966ef29d4eed78d32f7b763cfd97d796ed11"
        ],
        [
            "exact: (@fpath_finv_in T _ (in2W _)).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma same_fconnect_finv : fconnect finv =2 fconnect f.",
            "VernacStartTheoremProof",
            "cef20bcff8d21a8e502c40882b5f3bc78c4ff067"
        ],
        [
            "move=> x y; rewrite (same_connect_rev symf); apply: {x y}eq_connect => x y /=.",
            "VernacExtend",
            "0fa388cebe8ed6372154caa26cd10c357f123670"
        ],
        [
            "by rewrite (canF_eq finv_f) eq_sym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fcard_finv : fcard_mem finv =1 fcard_mem f.",
            "VernacStartTheoremProof",
            "63f5993819c80a38cd8eaf51e2f32e0e54f48973"
        ],
        [
            "exact: eq_n_comp same_fconnect_finv.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition order_set n : pred T := [pred x | order x == n].",
            "VernacDefinition",
            "0f1f7438839d16176b186f9c25650776be390662"
        ],
        [
            "Lemma fcard_order_set n (a : pred T) : a \\subset order_set n -> fclosed f a -> fcard f a * n = #|a|.",
            "VernacStartTheoremProof",
            "d243d40ca142db33e0f839430e308ff6131f38d6"
        ],
        [
            "move=> a_n cl_a; rewrite /n_comp_mem; set b := [predI froots f & a].",
            "VernacExtend",
            "08b421e4a82ee4b06ce888937579fc5af7d251b4"
        ],
        [
            "symmetry; transitivity #|preim (froot f) b|.",
            "VernacExtend",
            "c05fc958bd7c17578db7377f61aa323dd8d62001"
        ],
        [
            "apply: eq_card => x; rewrite !inE (roots_root fconnect_sym).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite -(closed_connect cl_a (connect_root _ x)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{cl_a a_n} (x): b x -> froot f x = x /\\ order x = n.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by case/andP=> /eqP-> /(subsetP a_n)/eqnP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: {a b}#|b| {1 3 4}b (eqxx #|b|) => [|m IHm] b def_m f_b.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite eq_card0 // => x; apply: (pred0P def_m).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [x b_x | b0] := pickP b; last by rewrite (eq_card0 b0) in def_m.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have [r_x ox_n] := f_b x b_x; rewrite (cardD1 x) [x \\in b]b_x eqSS in def_m.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "rewrite mulSn -{1}ox_n -(IHm _ def_m) => [|_ /andP[_ /f_b //]].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite -(cardID (fconnect f x)); congr (_ + _); apply: eq_card => y.",
            "VernacExtend",
            "75f5ff0fb7cf09d432c728351fd923a93d5d7135"
        ],
        [
            "by apply: andb_idl => /= fxy; rewrite !inE -(rootP symf fxy) r_x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by congr (~~ _ && _); rewrite /= /in_mem /= symf -(root_connect symf) r_x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fclosed1 (a : pred T) : fclosed f a -> forall x, (x \\in a) = (f x \\in a).",
            "VernacStartTheoremProof",
            "10d617e187771394bb39a4b3e6fc2cb3185461b7"
        ],
        [
            "by move=> cl_a x; apply: cl_a (eqxx _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma same_fconnect1 x : fconnect f x =1 fconnect f (f x).",
            "VernacStartTheoremProof",
            "8d8318dcdfb775608b0e64811c00bf4ddd10b66c"
        ],
        [
            "by apply: same_connect1 => /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma same_fconnect1_r x y : fconnect f x y = fconnect f x (f y).",
            "VernacStartTheoremProof",
            "9732aa645298ca515523fce54380ec2f57f603bb"
        ],
        [
            "by apply: same_connect1r x => /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Orbit.",
            "VernacEndSegment",
            "1533d77674dc16d018be2567b50f2b3d6b4a165b"
        ],
        [
            "Prenex Implicits order orbit findex finv order_set.",
            "VernacExtend",
            "3a60a49bd59cd2c51071f829a0e1f3b30b8ec2a3"
        ],
        [
            "Section FconnectId.",
            "VernacBeginSection",
            "7d2ed7a17463fd88208bd64db0f7286c07ada60c"
        ],
        [
            "Variable T : finType.",
            "VernacAssumption",
            "6349381da4d33cbc2eeaf1bade38718e15f7a2c9"
        ],
        [
            "Lemma fconnect_id (x : T) : fconnect id x =1 xpred1 x.",
            "VernacStartTheoremProof",
            "523228fc6ee6399e5242cdef1f7ab6d610c21ce5"
        ],
        [
            "by move=> y; rewrite (@fconnect_cycle _ _ [:: x]) //= ?inE ?eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma order_id (x : T) : order id x = 1.",
            "VernacStartTheoremProof",
            "182aa52f2bb00ac0cc61297d0523123ca66e1500"
        ],
        [
            "by rewrite /order (eq_card (fconnect_id x)) card1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma orbit_id (x : T) : orbit id x = [:: x].",
            "VernacStartTheoremProof",
            "9932fcc2f8a4a45fcc5633d30267303d8bef9f67"
        ],
        [
            "by rewrite /orbit order_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma froots_id (x : T) : froots id x.",
            "VernacStartTheoremProof",
            "8aaaa749ffaa8bebaae8dbb3f0126128d675f9e2"
        ],
        [
            "by rewrite /roots -fconnect_id connect_root.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma froot_id (x : T) : froot id x = x.",
            "VernacStartTheoremProof",
            "c28b9926780ca402903beb3736d8f5e2d2eec745"
        ],
        [
            "by apply/eqP; apply: froots_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fcard_id (a : pred T) : fcard id a = #|a|.",
            "VernacStartTheoremProof",
            "57e35efa71c3c99d47c63154595703fb75aa2ba5"
        ],
        [
            "by apply: eq_card => x; rewrite inE froots_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FconnectId.",
            "VernacEndSegment",
            "1036fafbcdee03661c386a150d4b94fe5cd6704b"
        ],
        [
            "Section FconnectEq.",
            "VernacBeginSection",
            "bad8e3272ba6c5ef347410e2998275a8ebeaedef"
        ],
        [
            "Variables (T : finType) (f f' : T -> T).",
            "VernacAssumption",
            "7dc0972cc9a376781c506b778e5f8d35f17c7483"
        ],
        [
            "Lemma finv_eq_can : cancel f f' -> finv f =1 f'.",
            "VernacStartTheoremProof",
            "53ad99325727fca8a0fc10eb5e219c4228a6ae3f"
        ],
        [
            "move=> fK; have inj_f := can_inj fK.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "by apply: bij_can_eq fK; [apply: fin_inj_bij | apply: finv_f].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hypothesis eq_f : f =1 f'.",
            "VernacAssumption",
            "35003ff0821341abb58ec4b44cab1544b55973e6"
        ],
        [
            "Let eq_rf := eq_frel eq_f.",
            "VernacDefinition",
            "5417ea00ea48646f001c4b5b9d31880b1eddb72f"
        ],
        [
            "Lemma eq_fconnect : fconnect f =2 fconnect f'.",
            "VernacStartTheoremProof",
            "ed213caa73c911ce25e2aeb0bb3195fbd53710d7"
        ],
        [
            "exact: eq_connect eq_rf.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_fcard : fcard_mem f =1 fcard_mem f'.",
            "VernacStartTheoremProof",
            "4c69baf3bb12bcddfe50586f09238933161e2c97"
        ],
        [
            "exact: eq_n_comp eq_fconnect.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_finv : finv f =1 finv f'.",
            "VernacStartTheoremProof",
            "e55cafc8aff15997e76dbee686d1bf1931db58cb"
        ],
        [
            "by move=> x; rewrite /finv /order (eq_card (eq_fconnect x)) (eq_iter eq_f).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_froot : froot f =1 froot f'.",
            "VernacStartTheoremProof",
            "09d77c30c017f3a9fa42ec90e19d016a0fdbcc46"
        ],
        [
            "exact: eq_root eq_rf.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_froots : froots f =1 froots f'.",
            "VernacStartTheoremProof",
            "4e552e1369a50a8c9d4f5a5e5f8885c714418556"
        ],
        [
            "exact: eq_roots eq_rf.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FconnectEq.",
            "VernacEndSegment",
            "a69823e0bd3592f89dbd4444c4b7ec68348662b3"
        ],
        [
            "Section FinvEq.",
            "VernacBeginSection",
            "7449a87fbdcf0078aaab35eddc7541ce2114e379"
        ],
        [
            "Variables (T : finType) (f : T -> T).",
            "VernacAssumption",
            "942bccefefb652cacb77101f80f6001298072f49"
        ],
        [
            "Hypothesis injf : injective f.",
            "VernacAssumption",
            "76820d7d4f718c2b057c70e67a0cd0c4c4abcabc"
        ],
        [
            "Lemma finv_inv : finv (finv f) =1 f.",
            "VernacStartTheoremProof",
            "7ed47613f9478cc3a1f636c3854dd254c18d1d25"
        ],
        [
            "exact: (finv_eq_can (f_finv injf)).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma order_finv : order (finv f) =1 order f.",
            "VernacStartTheoremProof",
            "6d55642913016a943a5219a95cca15b3e2565a55"
        ],
        [
            "by move=> x; apply: eq_card (same_fconnect_finv injf x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma order_set_finv n : order_set (finv f) n =i order_set f n.",
            "VernacStartTheoremProof",
            "980ef24a5605e8882fce5dcea516580fc8ce2e55"
        ],
        [
            "by move=> x; rewrite !inE order_finv.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FinvEq.",
            "VernacEndSegment",
            "e2bf6bd47f5f0c70693010816b0f0a43efec763d"
        ],
        [
            "Section RelAdjunction.",
            "VernacBeginSection",
            "48f63c7afa037c6b704a40536881fabdbad8404a"
        ],
        [
            "Variables (T T' : finType) (h : T' -> T) (e : rel T) (e' : rel T').",
            "VernacAssumption",
            "2afa27549ee3573080014462d21d71cd7c179700"
        ],
        [
            "Hypotheses (sym_e : connect_sym e) (sym_e' : connect_sym e').",
            "VernacAssumption",
            "b8b0169831a3f44c16ea4b05beaba3fe67e9223d"
        ],
        [
            "Record rel_adjunction_mem m_a := RelAdjunction { rel_unit x : in_mem x m_a -> {x' : T' | connect e x (h x')}; rel_functor x' y' : in_mem (h x') m_a -> connect e' x' y' = connect e (h x') (h y') }.",
            "VernacInductive",
            "63a58ec0a0abf8dd428dd88172d412c3b5162885"
        ],
        [
            "Variable a : pred T.",
            "VernacAssumption",
            "bf9400e5dd72108c5b9fea4789914b12961b30c3"
        ],
        [
            "Hypothesis cl_a : closed e a.",
            "VernacAssumption",
            "fb2abcf4b7124573504acf9d4f3d61698478c6d5"
        ],
        [
            "Local Notation rel_adjunction := (rel_adjunction_mem (mem a)).",
            "VernacSyntacticDefinition",
            "ce7eee5076e8c30cd228837d5def7d47f83b6ceb"
        ],
        [
            "Lemma intro_adjunction (h' : forall x, x \\in a -> T') : (forall x a_x, [/\\ connect e x (h (h' x a_x)) & forall y a_y, e x y -> connect e' (h' x a_x) (h' y a_y)]) -> (forall x' a_x, [/\\ connect e' x' (h' (h x') a_x) & forall y', e' x' y' -> connect e (h x') (h y')]) -> rel_adjunction.",
            "VernacStartTheoremProof",
            "30d865b3f745f43733b321e6d7b63f3849246d2f"
        ],
        [
            "move=> Aee' Ae'e; split=> [y a_y | x' z' a_x].",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by exists (h' y a_y); case/Aee': (a_y).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/idP/idP=> [/connectP[p e'p ->{z'}] | /connectP[p e_p p_z']].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "elim: p x' a_x e'p => //= y' p IHp x' a_x.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "case: (Ae'e x' a_x) => _ Ae'x /andP[/Ae'x e_xy /IHp e_yz] {Ae'x}.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply: connect_trans (e_yz _); rewrite // -(closed_connect cl_a e_xy).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (Ae'e x' a_x) => /connect_trans-> //.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "elim: p {x'}(h x') p_z' a_x e_p => /= [|y p IHp] x p_z' a_x.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite -p_z' in a_x *; case: (Ae'e _ a_x); rewrite sym_e'.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/andP=> e_xy /(IHp _ p_z') e'yz; have a_y: y \\in a by rewrite -(cl_a e_xy).",
            "VernacExtend",
            "c6460972b7febd45d9a49b3c1ce4f3fe36b53169"
        ],
        [
            "by apply: connect_trans (e'yz a_y); case: (Aee' _ a_x) => _ ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma strict_adjunction : injective h -> a \\subset codom h -> rel_base h e e' [predC a] -> rel_adjunction.",
            "VernacStartTheoremProof",
            "15c45539271e31c2b06df6eaac16ed171148114d"
        ],
        [
            "move=> /= injh h_a a_ee'; pose h' x Hx := iinv (subsetP h_a x Hx).",
            "VernacExtend",
            "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
        ],
        [
            "apply: (@intro_adjunction h') => [x a_x | x' a_x].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite f_iinv connect0; split=> // y a_y e_xy.",
            "VernacExtend",
            "80e7cce19c53eb5d5a21aafd83e552d37e23084a"
        ],
        [
            "by rewrite connect1 // -a_ee' !f_iinv ?negbK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite [h' _ _]iinv_f //; split=> // y' e'xy.",
            "VernacExtend",
            "80e7cce19c53eb5d5a21aafd83e552d37e23084a"
        ],
        [
            "by rewrite connect1 // a_ee' ?negbK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let ccl_a := closed_connect cl_a.",
            "VernacDefinition",
            "ba9d9075e2b23ee4fd229201bb4facc159f08b4b"
        ],
        [
            "Lemma adjunction_closed : rel_adjunction -> closed e' [preim h of a].",
            "VernacStartTheoremProof",
            "5284b697509ab350522aeedcfa77e81776be49ff"
        ],
        [
            "case=> _ Ae'e; apply: intro_closed => // x' y' /connect1 e'xy a_x.",
            "VernacExtend",
            "d62e4c271de3f2a9ff5062b8b89d3c57d965c518"
        ],
        [
            "by rewrite Ae'e // in e'xy; rewrite !inE -(ccl_a e'xy).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma adjunction_n_comp : rel_adjunction -> n_comp e a = n_comp e' [preim h of a].",
            "VernacStartTheoremProof",
            "2d2f977a14bf307bf7a8669577b1ed5c3261208b"
        ],
        [
            "case=> Aee' Ae'e.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have inj_h: {in predI (roots e') [preim h of a] &, injective (root e \\o h)}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> x' y' /andP[/eqP r_x' /= a_x'] /andP[/eqP r_y' _] /(rootP sym_e).",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by rewrite -Ae'e // => /(rootP sym_e'); rewrite r_x' r_y'.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /n_comp_mem -(card_in_image inj_h); apply: eq_card => x.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "apply/andP/imageP=> [[/eqP rx a_x] | [x' /andP[/eqP r_x' a_x'] ->]]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite /= -(ccl_a (connect_root _ _)) roots_root.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [y' e_xy]:= Aee' x a_x; pose x' := root e' y'.",
            "VernacExtend",
            "fa6ff0c3d4595d45015144bd8c25fb5ac62ed42b"
        ],
        [
            "have ay': h y' \\in a by rewrite -(ccl_a e_xy).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have e_yx: connect e (h y') (h x') by rewrite -Ae'e ?connect_root.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists x'; first by rewrite inE /= -(ccl_a e_yx) ?roots_root.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite /= -(rootP sym_e e_yx) -(rootP sym_e e_xy).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End RelAdjunction.",
            "VernacEndSegment",
            "db024bb93d113c840ab3f58f381a7ee46c503bcf"
        ],
        [
            "Notation rel_adjunction h e e' a := (rel_adjunction_mem h e e' (mem a)).",
            "VernacSyntacticDefinition",
            "ef13d5d9504f6093e32cc62fa7d0a95faa6c6836"
        ],
        [
            "Notation \"@ 'rel_adjunction' T T' h e e' a\" := (@rel_adjunction_mem T T' h e e' (mem a)) (at level 10, T, T', h, e, e', a at level 8, only parsing) : type_scope.",
            "VernacNotation",
            "7178fb02525ef459bb430948fcfc89cc3a2f63b6"
        ],
        [
            "Notation fun_adjunction h f f' a := (rel_adjunction h (frel f) (frel f') a).",
            "VernacSyntacticDefinition",
            "71138a1acff6621ab756b141d66363408a1a4337"
        ],
        [
            "Notation \"@ 'fun_adjunction' T T' h f f' a\" := (@rel_adjunction T T' h (frel f) (frel f') a) (at level 10, T, T', h, f, f', a at level 8, only parsing) : type_scope.",
            "VernacNotation",
            "2cd4a0346a8f056bb03b97f1dfbf29f3bfad9448"
        ],
        [
            "Arguments intro_adjunction [T T' h e e'] _ [a].",
            "VernacArguments",
            "2a796e5004343798e80f0bbd647eb2ac8cabaea0"
        ],
        [
            "Arguments adjunction_n_comp [T T'] h [e e'] _ _ [a].",
            "VernacArguments",
            "feec48528174f8902f2b776b496b5fb363328ec5"
        ],
        [
            "Unset Implicit Arguments.",
            "VernacUnsetOption",
            "cacc0f023301fae157e1bbb31e84419045fc8198"
        ]
    ],
    "proofs": [
        {
            "name": "subset_dfs",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "elim: n a v => [|n IHn]; first by elim=> //= *; rewrite if_same.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "elim=> //= x a IHa v; apply: subset_trans {IHa}(IHa _); case: ifP => // _.",
                        "VernacExtend",
                        "b0d02263834d65d393187de03d85af4875414e04"
                    ]
                },
                {
                    "command": [
                        "by apply: subset_trans (IHn _ _); apply/subsetP=> y; apply: predU1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dfsP",
            "line_nb": 63,
            "steps": [
                {
                    "command": [
                        "apply: (iffP (dfs_pathP _ _ _)); rewrite ?card0 // => [] [p]; exists p => //.",
                        "VernacExtend",
                        "43757b65c37fb65b9ba8f6c1547c633fae51bfb4"
                    ]
                },
                {
                    "command": [
                        "by rewrite disjoint_sym disjoint0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rgraphK",
            "line_nb": 70,
            "steps": [
                {
                    "command": [
                        "by move=> x y; rewrite /= mem_enum.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "connect0",
            "line_nb": 83,
            "steps": [
                {
                    "command": [
                        "by apply/connectP; exists [::].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_connect0",
            "line_nb": 86,
            "steps": [
                {
                    "command": [
                        "by move->; apply: connect0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "connect1",
            "line_nb": 89,
            "steps": [
                {
                    "command": [
                        "by move=> e_xy; apply/connectP; exists [:: y]; rewrite /= ?e_xy.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "path_connect",
            "line_nb": 92,
            "steps": [
                {
                    "command": [
                        "move=> e_p y p_y; case/splitPl: p / p_y e_p => p q <-.",
                        "VernacExtend",
                        "a01b3d93f426ff68d360351709a5fa5af822af32"
                    ]
                },
                {
                    "command": [
                        "by rewrite cat_path => /andP[e_p _]; apply/connectP; exists p.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "connect_root",
            "line_nb": 100,
            "steps": [
                {
                    "command": [
                        "by rewrite /root; case: pickP; rewrite ?connect0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "same_connect",
            "line_nb": 105,
            "steps": [
                {
                    "command": [
                        "exact: sym_left_transitive connect_trans.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "same_connect_r",
            "line_nb": 108,
            "steps": [
                {
                    "command": [
                        "exact: sym_right_transitive connect_trans.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "same_connect1",
            "line_nb": 111,
            "steps": [
                {
                    "command": [
                        "by move/connect1; apply: same_connect.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "same_connect1r",
            "line_nb": 114,
            "steps": [
                {
                    "command": [
                        "by move/connect1; apply: same_connect_r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rootP",
            "line_nb": 117,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => e_xy.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite /root -(eq_pick (same_connect e_xy)); case: pickP e_xy => // ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply: (connect_trans (connect_root x)); rewrite e_xy sym_e connect_root.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "root_root",
            "line_nb": 122,
            "steps": [
                {
                    "command": [
                        "exact/esym/rootP/connect_root.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "roots_root",
            "line_nb": 125,
            "steps": [
                {
                    "command": [
                        "exact/eqP/root_root.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "root_connect",
            "line_nb": 128,
            "steps": [
                {
                    "command": [
                        "exact: sameP eqP (rootP x y).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "connect_sub",
            "line_nb": 152,
            "steps": [
                {
                    "command": [
                        "move=> e'e x _ /connectP[p e_p ->]; elim: p x e_p => //= y p IHp x /andP[exy].",
                        "VernacExtend",
                        "06880003f1108b2eb418688c7bc6bf1013cf0e4c"
                    ]
                },
                {
                    "command": [
                        "by move/IHp; apply: connect_trans; apply: e'e.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relU_sym",
            "line_nb": 156,
            "steps": [
                {
                    "command": [
                        "move=> sym_e sym_e'; apply: symmetric_from_pre => x _ /connectP[p e_p ->].",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "elim: p x e_p => //= y p IHp x /andP[e_xy /IHp{IHp}/connect_trans]; apply.",
                        "VernacExtend",
                        "7836d5035845574109d38c34f9f2abb593be3fa9"
                    ]
                },
                {
                    "command": [
                        "case/orP: e_xy => /connect1; rewrite (sym_e, sym_e'); by apply: connect_sub y x => x y e_xy; rewrite connect1 //= e_xy ?orbT.",
                        "VernacExtend",
                        "e28621cab80b25b1d7725a7bfcb68d6908230c48"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_connect",
            "line_nb": 161,
            "steps": [
                {
                    "command": [
                        "move=> eq_e x y; apply/connectP/connectP=> [] [p e_p ->]; by exists p; rewrite // (eq_path eq_e) in e_p *.",
                        "VernacExtend",
                        "863cc135acc45d5c9d170c836bc1464e830f66a2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_n_comp",
            "line_nb": 164,
            "steps": [
                {
                    "command": [
                        "move=> eq_e [a]; apply: eq_card => x /=.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by rewrite !inE /= /roots /root /= (eq_pick (eq_e x)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_n_comp_r",
            "line_nb": 168,
            "steps": [
                {
                    "command": [
                        "by move=> eq_a; apply: eq_card => x; rewrite inE /= eq_a.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_root",
            "line_nb": 175,
            "steps": [
                {
                    "command": [
                        "by move=> eq_e x; rewrite /root (eq_pick (eq_connect eq_e x)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_roots",
            "line_nb": 178,
            "steps": [
                {
                    "command": [
                        "by move=> eq_e x; rewrite /roots (eq_root eq_e).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "intro_closed",
            "line_nb": 193,
            "steps": [
                {
                    "command": [
                        "move=> cl_a x y e_xy; apply/idP/idP=> [|a_y]; first exact: cl_a.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have{x e_xy} /connectP[p e_p ->]: connect e y x by rewrite sym_e connect1.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by elim: p y a_y e_p => //= y p IHp x a_x /andP[/cl_a/(_ a_x)]; apply: IHp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "closed_connect",
            "line_nb": 198,
            "steps": [
                {
                    "command": [
                        "move=> cl_a x _ /connectP[p e_p ->].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by elim: p x e_p => //= y p IHp x /andP[/cl_a->]; apply: IHp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "connect_closed",
            "line_nb": 202,
            "steps": [
                {
                    "command": [
                        "by move=> y z /connect1/same_connect_r; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "predC_closed",
            "line_nb": 205,
            "steps": [
                {
                    "command": [
                        "by move=> cl_a x y /cl_a; rewrite !inE => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_closure",
            "line_nb": 212,
            "steps": [
                {
                    "command": [
                        "by move=> x a_x; apply/existsP; exists x; rewrite !inE connect0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subset_closure",
            "line_nb": 215,
            "steps": [
                {
                    "command": [
                        "by apply/subsetP; apply: mem_closure.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "n_comp_connect",
            "line_nb": 224,
            "steps": [
                {
                    "command": [
                        "rewrite -(card1 (root e x)); apply: eq_card => y.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "apply/andP/eqP => [[/eqP r_y /rootP-> //] | ->] /=.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite inE connect_root roots_root.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fconnect1",
            "line_nb": 240,
            "steps": [
                {
                    "command": [
                        "exact: (fconnect_iter 1).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fconnect_finv",
            "line_nb": 243,
            "steps": [
                {
                    "command": [
                        "exact: fconnect_iter.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orderSpred",
            "line_nb": 246,
            "steps": [
                {
                    "command": [
                        "by rewrite /order (cardD1 x) [_ x _]connect0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_orbit",
            "line_nb": 249,
            "steps": [
                {
                    "command": [
                        "exact: size_traject.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fconnect_orbit",
            "line_nb": 257,
            "steps": [
                {
                    "command": [
                        "apply/idP/idP=> [/connectP[_ /fpathP[m ->] ->] | /trajectP[i _ ->]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite last_traject; apply/loopingP/looping_order.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exact: fconnect_iter.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orbit_uniq",
            "line_nb": 262,
            "steps": [
                {
                    "command": [
                        "rewrite /orbit -orderSpred looping_uniq; set n := (order x).-1.",
                        "VernacExtend",
                        "c1f58f36c5711f022b4a54717f37c2782f34a159"
                    ]
                },
                {
                    "command": [
                        "apply: contraFN (ltnn n) => /trajectP[i lt_i_n eq_fnx_fix].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "rewrite {1}/n orderSpred /order -(size_traject f x n).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply: (leq_trans (subset_leq_card _) (card_size _)); apply/subsetP=> z.",
                        "VernacExtend",
                        "8d9dae45eeb3a769b8a865cef8ae476451f63802"
                    ]
                },
                {
                    "command": [
                        "rewrite inE fconnect_orbit => /trajectP[j le_jn ->{z}].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite -orderSpred -/n ltnS leq_eqVlt in le_jn.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply/trajectP; case/predU1P: le_jn => [->|]; [exists i | exists j].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "findex_max",
            "line_nb": 271,
            "steps": [
                {
                    "command": [
                        "by rewrite [_ y]fconnect_orbit -index_mem size_orbit.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "findex_iter",
            "line_nb": 274,
            "steps": [
                {
                    "command": [
                        "move=> lt_ix; rewrite -(nth_traject f lt_ix) /findex index_uniq ?orbit_uniq //.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite size_orbit.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iter_findex",
            "line_nb": 278,
            "steps": [
                {
                    "command": [
                        "rewrite [_ y]fconnect_orbit => fxy; pose i := index y (orbit x).",
                        "VernacExtend",
                        "9d8fbc7ebaadb48200c542591ceec3e0f555a812"
                    ]
                },
                {
                    "command": [
                        "have lt_ix: i < order x by rewrite -size_orbit index_mem.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(nth_traject f lt_ix) nth_index.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "findex0",
            "line_nb": 283,
            "steps": [
                {
                    "command": [
                        "by rewrite /findex /orbit -orderSpred /= eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fconnect_invariant",
            "line_nb": 286,
            "steps": [
                {
                    "command": [
                        "move=> eq_k_f x y /iter_findex <-; elim: {y}(findex x y) => //= n ->.",
                        "VernacExtend",
                        "06880003f1108b2eb418688c7bc6bf1013cf0e4c"
                    ]
                },
                {
                    "command": [
                        "by rewrite (eqP (eq_k_f _)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fconnect_cycle",
            "line_nb": 295,
            "steps": [
                {
                    "command": [
                        "have [i q def_p] := rot_to p_x; rewrite -(mem_rot i p) def_p.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "have{i def_p} /andP[/eqP q_x f_q]: (f (last x q) == x) && fpath f x q.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by have:= f_p; rewrite -(rot_cycle i) def_p (cycle_path x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/idP/idP=> [/connectP[_ /fpathP[j ->] ->] | ]; last exact: path_connect.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "case/fpathP: f_q q_x => n ->; rewrite !last_traject -iterS => def_x.",
                        "VernacExtend",
                        "ba44c9d0281a02110ce54645304e6d990debd9c0"
                    ]
                },
                {
                    "command": [
                        "by apply: (@loopingP _ f x n.+1); rewrite /looping def_x /= mem_head.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "order_cycle",
            "line_nb": 303,
            "steps": [
                {
                    "command": [
                        "by rewrite -(card_uniqP Up); apply (eq_card fconnect_cycle).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orbit_rot_cycle",
            "line_nb": 306,
            "steps": [
                {
                    "command": [
                        "have [i q def_p] := rot_to p_x; exists i.",
                        "VernacExtend",
                        "c250601799737d840b9c2e1d4a004695b764af67"
                    ]
                },
                {
                    "command": [
                        "rewrite /orbit order_cycle -(size_rot i) def_p.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "suffices /fpathP[j ->]: fpath f x q by rewrite /= size_traject.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "by move: f_p; rewrite -(rot_cycle i) def_p (cycle_path x); case/andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iter_in",
            "line_nb": 317,
            "steps": [
                {
                    "command": [
                        "by move=> x xS; elim=> [|i /f_in].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finv_in",
            "line_nb": 320,
            "steps": [
                {
                    "command": [
                        "by move=> ??; rewrite iter_in.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "f_finv_in",
            "line_nb": 323,
            "steps": [
                {
                    "command": [
                        "move=> x xS; move: (looping_order x) (orbit_uniq x).",
                        "VernacExtend",
                        "8b784377bdc4d565ff66d4cf36a6041e9354c156"
                    ]
                },
                {
                    "command": [
                        "rewrite /looping /orbit -orderSpred looping_uniq /= /looping; set n := _.-1.",
                        "VernacExtend",
                        "c1f58f36c5711f022b4a54717f37c2782f34a159"
                    ]
                },
                {
                    "command": [
                        "case/predU1P=> // /trajectP[i lt_i_n]; rewrite -iterSr.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "by move=> /injf ->; rewrite ?iter_in //; case/trajectP; exists i.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finv_f_in",
            "line_nb": 329,
            "steps": [
                {
                    "command": [
                        "by move=> x xS; apply/injf; rewrite ?iter_in ?f_finv_in ?f_in.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finv_inj_in",
            "line_nb": 332,
            "steps": [
                {
                    "command": [
                        "by move=> x y xS yS q; rewrite -(f_finv_in xS) q f_finv_in.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fconnect_sym_in",
            "line_nb": 335,
            "steps": [
                {
                    "command": [
                        "suff Sf : {in S &, forall x y, fconnect f x y -> fconnect f y x}.",
                        "VernacExtend",
                        "d07fc8b2103f140554938023774bf3f75d04ba99"
                    ]
                },
                {
                    "command": [
                        "by move=> *; apply/idP/idP=> /Sf->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move=> x _ xS _ /connectP [p f_p ->]; elim: p => //= y p IHp in x xS f_p *.",
                        "VernacExtend",
                        "06880003f1108b2eb418688c7bc6bf1013cf0e4c"
                    ]
                },
                {
                    "command": [
                        "move: f_p; rewrite -{2}(finv_f_in xS) => /andP[/eqP <- /(IHp _ (f_in xS))].",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "by move=> /connect_trans -> //; apply: fconnect_finv.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iter_order_in",
            "line_nb": 342,
            "steps": [
                {
                    "command": [
                        "by move=> x xS; rewrite -orderSpred iterS; apply: f_finv_in.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iter_finv_in",
            "line_nb": 345,
            "steps": [
                {
                    "command": [
                        "move=> x xS; rewrite -{2}[x]iter_order_in => // /subnKC {1}<-; move: (_ - n).",
                        "VernacExtend",
                        "a5f56fb00bcaec650c845440add7c784b2a6a909"
                    ]
                },
                {
                    "command": [
                        "move=> m; rewrite iter_add; elim: n => // n {2}<-.",
                        "VernacExtend",
                        "9d0009e9024dcd45b101a0b7756bd6217d27133c"
                    ]
                },
                {
                    "command": [
                        "by rewrite iterSr /= finv_f_in // -iter_add iter_in.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cycle_orbit_in",
            "line_nb": 350,
            "steps": [
                {
                    "command": [
                        "move=> x xS; rewrite /orbit -orderSpred (cycle_path x) /= last_traject.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite -/(finv x) fpath_traject f_finv_in ?eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fpath_finv_f_in",
            "line_nb": 361,
            "steps": [
                {
                    "command": [
                        "by move=> x xS /(conj xS)/andP; rewrite fpath_finv_in => /andP[].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fpath_f_finv_in",
            "line_nb": 364,
            "steps": [
                {
                    "command": [
                        "by move=> lS /(conj lS)/andP; rewrite -fpath_finv_in => /andP[].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "f_finv",
            "line_nb": 369,
            "steps": [
                {
                    "command": [
                        "exact: (in1T (f_finv_in _ (in2W _))).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finv_f",
            "line_nb": 372,
            "steps": [
                {
                    "command": [
                        "exact: (in1T (finv_f_in _ (in2W _))).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fin_inj_bij",
            "line_nb": 375,
            "steps": [
                {
                    "command": [
                        "by exists finv; [apply: finv_f|apply: f_finv].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finv_bij",
            "line_nb": 378,
            "steps": [
                {
                    "command": [
                        "by exists f; [apply: f_finv|apply: finv_f].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finv_inj",
            "line_nb": 381,
            "steps": [
                {
                    "command": [
                        "exact: (can_inj f_finv).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fconnect_sym",
            "line_nb": 384,
            "steps": [
                {
                    "command": [
                        "exact: (in2T (fconnect_sym_in _ (in2W _))).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iter_order",
            "line_nb": 388,
            "steps": [
                {
                    "command": [
                        "exact: (in1T (iter_order_in _ (in2W _))).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iter_finv",
            "line_nb": 391,
            "steps": [
                {
                    "command": [
                        "exact: (in1T (@iter_finv_in _ _ (in2W _) _)).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cycle_orbit",
            "line_nb": 394,
            "steps": [
                {
                    "command": [
                        "exact: (in1T (cycle_orbit_in _ (in2W _))).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fpath_finv",
            "line_nb": 397,
            "steps": [
                {
                    "command": [
                        "exact: (@fpath_finv_in T _ (in2W _)).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "same_fconnect_finv",
            "line_nb": 400,
            "steps": [
                {
                    "command": [
                        "move=> x y; rewrite (same_connect_rev symf); apply: {x y}eq_connect => x y /=.",
                        "VernacExtend",
                        "0fa388cebe8ed6372154caa26cd10c357f123670"
                    ]
                },
                {
                    "command": [
                        "by rewrite (canF_eq finv_f) eq_sym.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fcard_finv",
            "line_nb": 404,
            "steps": [
                {
                    "command": [
                        "exact: eq_n_comp same_fconnect_finv.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fcard_order_set",
            "line_nb": 408,
            "steps": [
                {
                    "command": [
                        "move=> a_n cl_a; rewrite /n_comp_mem; set b := [predI froots f & a].",
                        "VernacExtend",
                        "08b421e4a82ee4b06ce888937579fc5af7d251b4"
                    ]
                },
                {
                    "command": [
                        "symmetry; transitivity #|preim (froot f) b|.",
                        "VernacExtend",
                        "c05fc958bd7c17578db7377f61aa323dd8d62001"
                    ]
                },
                {
                    "command": [
                        "apply: eq_card => x; rewrite !inE (roots_root fconnect_sym).",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(closed_connect cl_a (connect_root _ x)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have{cl_a a_n} (x): b x -> froot f x = x /\\ order x = n.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by case/andP=> /eqP-> /(subsetP a_n)/eqnP->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: {a b}#|b| {1 3 4}b (eqxx #|b|) => [|m IHm] b def_m f_b.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by rewrite eq_card0 // => x; apply: (pred0P def_m).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [x b_x | b0] := pickP b; last by rewrite (eq_card0 b0) in def_m.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have [r_x ox_n] := f_b x b_x; rewrite (cardD1 x) [x \\in b]b_x eqSS in def_m.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "rewrite mulSn -{1}ox_n -(IHm _ def_m) => [|_ /andP[_ /f_b //]].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite -(cardID (fconnect f x)); congr (_ + _); apply: eq_card => y.",
                        "VernacExtend",
                        "75f5ff0fb7cf09d432c728351fd923a93d5d7135"
                    ]
                },
                {
                    "command": [
                        "by apply: andb_idl => /= fxy; rewrite !inE -(rootP symf fxy) r_x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by congr (~~ _ && _); rewrite /= /in_mem /= symf -(root_connect symf) r_x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fclosed1",
            "line_nb": 424,
            "steps": [
                {
                    "command": [
                        "by move=> cl_a x; apply: cl_a (eqxx _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "same_fconnect1",
            "line_nb": 427,
            "steps": [
                {
                    "command": [
                        "by apply: same_connect1 => /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "same_fconnect1_r",
            "line_nb": 430,
            "steps": [
                {
                    "command": [
                        "by apply: same_connect1r x => /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fconnect_id",
            "line_nb": 437,
            "steps": [
                {
                    "command": [
                        "by move=> y; rewrite (@fconnect_cycle _ _ [:: x]) //= ?inE ?eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "order_id",
            "line_nb": 440,
            "steps": [
                {
                    "command": [
                        "by rewrite /order (eq_card (fconnect_id x)) card1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "orbit_id",
            "line_nb": 443,
            "steps": [
                {
                    "command": [
                        "by rewrite /orbit order_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "froots_id",
            "line_nb": 446,
            "steps": [
                {
                    "command": [
                        "by rewrite /roots -fconnect_id connect_root.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "froot_id",
            "line_nb": 449,
            "steps": [
                {
                    "command": [
                        "by apply/eqP; apply: froots_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fcard_id",
            "line_nb": 452,
            "steps": [
                {
                    "command": [
                        "by apply: eq_card => x; rewrite inE froots_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finv_eq_can",
            "line_nb": 458,
            "steps": [
                {
                    "command": [
                        "move=> fK; have inj_f := can_inj fK.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "by apply: bij_can_eq fK; [apply: fin_inj_bij | apply: finv_f].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_fconnect",
            "line_nb": 464,
            "steps": [
                {
                    "command": [
                        "exact: eq_connect eq_rf.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_fcard",
            "line_nb": 467,
            "steps": [
                {
                    "command": [
                        "exact: eq_n_comp eq_fconnect.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_finv",
            "line_nb": 470,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite /finv /order (eq_card (eq_fconnect x)) (eq_iter eq_f).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_froot",
            "line_nb": 473,
            "steps": [
                {
                    "command": [
                        "exact: eq_root eq_rf.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_froots",
            "line_nb": 476,
            "steps": [
                {
                    "command": [
                        "exact: eq_roots eq_rf.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finv_inv",
            "line_nb": 483,
            "steps": [
                {
                    "command": [
                        "exact: (finv_eq_can (f_finv injf)).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "order_finv",
            "line_nb": 486,
            "steps": [
                {
                    "command": [
                        "by move=> x; apply: eq_card (same_fconnect_finv injf x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "order_set_finv",
            "line_nb": 489,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite !inE order_finv.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "intro_adjunction",
            "line_nb": 500,
            "steps": [
                {
                    "command": [
                        "move=> Aee' Ae'e; split=> [y a_y | x' z' a_x].",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "by exists (h' y a_y); case/Aee': (a_y).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/idP/idP=> [/connectP[p e'p ->{z'}] | /connectP[p e_p p_z']].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "elim: p x' a_x e'p => //= y' p IHp x' a_x.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "case: (Ae'e x' a_x) => _ Ae'x /andP[/Ae'x e_xy /IHp e_yz] {Ae'x}.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply: connect_trans (e_yz _); rewrite // -(closed_connect cl_a e_xy).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: (Ae'e x' a_x) => /connect_trans-> //.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "elim: p {x'}(h x') p_z' a_x e_p => /= [|y p IHp] x p_z' a_x.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by rewrite -p_z' in a_x *; case: (Ae'e _ a_x); rewrite sym_e'.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case/andP=> e_xy /(IHp _ p_z') e'yz; have a_y: y \\in a by rewrite -(cl_a e_xy).",
                        "VernacExtend",
                        "c6460972b7febd45d9a49b3c1ce4f3fe36b53169"
                    ]
                },
                {
                    "command": [
                        "by apply: connect_trans (e'yz a_y); case: (Aee' _ a_x) => _ ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "strict_adjunction",
            "line_nb": 513,
            "steps": [
                {
                    "command": [
                        "move=> /= injh h_a a_ee'; pose h' x Hx := iinv (subsetP h_a x Hx).",
                        "VernacExtend",
                        "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
                    ]
                },
                {
                    "command": [
                        "apply: (@intro_adjunction h') => [x a_x | x' a_x].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "rewrite f_iinv connect0; split=> // y a_y e_xy.",
                        "VernacExtend",
                        "80e7cce19c53eb5d5a21aafd83e552d37e23084a"
                    ]
                },
                {
                    "command": [
                        "by rewrite connect1 // -a_ee' !f_iinv ?negbK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite [h' _ _]iinv_f //; split=> // y' e'xy.",
                        "VernacExtend",
                        "80e7cce19c53eb5d5a21aafd83e552d37e23084a"
                    ]
                },
                {
                    "command": [
                        "by rewrite connect1 // a_ee' ?negbK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "adjunction_closed",
            "line_nb": 522,
            "steps": [
                {
                    "command": [
                        "case=> _ Ae'e; apply: intro_closed => // x' y' /connect1 e'xy a_x.",
                        "VernacExtend",
                        "d62e4c271de3f2a9ff5062b8b89d3c57d965c518"
                    ]
                },
                {
                    "command": [
                        "by rewrite Ae'e // in e'xy; rewrite !inE -(ccl_a e'xy).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "adjunction_n_comp",
            "line_nb": 526,
            "steps": [
                {
                    "command": [
                        "case=> Aee' Ae'e.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "have inj_h: {in predI (roots e') [preim h of a] &, injective (root e \\o h)}.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "move=> x' y' /andP[/eqP r_x' /= a_x'] /andP[/eqP r_y' _] /(rootP sym_e).",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by rewrite -Ae'e // => /(rootP sym_e'); rewrite r_x' r_y'.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite /n_comp_mem -(card_in_image inj_h); apply: eq_card => x.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "apply/andP/imageP=> [[/eqP rx a_x] | [x' /andP[/eqP r_x' a_x'] ->]]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite /= -(ccl_a (connect_root _ _)) roots_root.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [y' e_xy]:= Aee' x a_x; pose x' := root e' y'.",
                        "VernacExtend",
                        "fa6ff0c3d4595d45015144bd8c25fb5ac62ed42b"
                    ]
                },
                {
                    "command": [
                        "have ay': h y' \\in a by rewrite -(ccl_a e_xy).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have e_yx: connect e (h y') (h x') by rewrite -Ae'e ?connect_root.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "exists x'; first by rewrite inE /= -(ccl_a e_yx) ?roots_root.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite /= -(rootP sym_e e_yx) -(rootP sym_e e_xy).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}