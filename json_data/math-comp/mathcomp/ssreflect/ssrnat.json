{
    "filename": "mathcomp/ssreflect/ssrnat.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrfun ssrbool eqtype.",
            "VernacRequire",
            "629c17c09fb5eddf28e8eb3652d87e601e2e47d8"
        ],
        [
            "Require Import BinNat.",
            "VernacRequire",
            "91bde618d030daea8709a28acc1d1bae01eaad47"
        ],
        [
            "Require BinPos Ndec.",
            "VernacRequire",
            "892e7191a5ec89eb4e99225d57884944340efd98"
        ],
        [
            "Require Export Ring.",
            "VernacRequire",
            "db33a8e1058c0276c2623b467466b7768630e45c"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Delimit Scope coq_nat_scope with coq_nat.",
            "VernacDelimiters",
            "f9c4ba89f453c5e55199149204b8b5cf92363680"
        ],
        [
            "Notation \"m + n\" := (plus m n) : coq_nat_scope.",
            "VernacNotation",
            "3a6eb51aad2f8539afb5123567631bd92cc35894"
        ],
        [
            "Notation \"m - n\" := (minus m n) : coq_nat_scope.",
            "VernacNotation",
            "d68b30845bf379f4327fe9f458ce33267200f7eb"
        ],
        [
            "Notation \"m * n\" := (mult m n) : coq_nat_scope.",
            "VernacNotation",
            "3e1fd4ff49fc1c92024a76e50d96a83e90668e6e"
        ],
        [
            "Notation \"m <= n\" := (le m n) : coq_nat_scope.",
            "VernacNotation",
            "b0fe797aa4bcb14a9a3edab79257169fee4867aa"
        ],
        [
            "Notation \"m < n\" := (lt m n) : coq_nat_scope.",
            "VernacNotation",
            "fc83dd7c99ef5ad1deec0e8e56fd16f35b597480"
        ],
        [
            "Notation \"m >= n\" := (ge m n) : coq_nat_scope.",
            "VernacNotation",
            "e4c35f8baad6dd28f758bcd5550d86ab0719f8f4"
        ],
        [
            "Notation \"m > n\" := (gt m n) : coq_nat_scope.",
            "VernacNotation",
            "4ff4c8a9d306e3e7583e2c9dcf16d76e2e47c4d0"
        ],
        [
            "Delimit Scope N_scope with num.",
            "VernacDelimiters",
            "de1e1a7defade776a5dd3829f32e0ecde248925d"
        ],
        [
            "Delimit Scope nat_scope with N.",
            "VernacDelimiters",
            "abb3022e7535a9ff8c58bb6cc53a252b9780eafe"
        ],
        [
            "Delimit Scope nat_rec_scope with Nrec.",
            "VernacDelimiters",
            "f4490124477a1d8b3a3a3a321381fcb09e2b91a0"
        ],
        [
            "Notation succn := Datatypes.S.",
            "VernacSyntacticDefinition",
            "877b14009344e53cd20a62d94d408694e00654a9"
        ],
        [
            "Notation predn := Peano.pred.",
            "VernacSyntacticDefinition",
            "9ecc11a3ecea191a0298f52f61af225b9925dc32"
        ],
        [
            "Notation \"n .+1\" := (succn n) (at level 2, left associativity, format \"n .+1\") : nat_scope.",
            "VernacNotation",
            "6ae9e3bbf80683986665cafc205230a9ca9b1d71"
        ],
        [
            "Notation \"n .+2\" := n.+1.+1 (at level 2, left associativity, format \"n .+2\") : nat_scope.",
            "VernacNotation",
            "d6f727875327760786ecc825538453594bc3d6da"
        ],
        [
            "Notation \"n .+3\" := n.+2.+1 (at level 2, left associativity, format \"n .+3\") : nat_scope.",
            "VernacNotation",
            "61f3723c7b84670abf5a3e183f1372ee043cf1e1"
        ],
        [
            "Notation \"n .+4\" := n.+2.+2 (at level 2, left associativity, format \"n .+4\") : nat_scope.",
            "VernacNotation",
            "017deeda151f2379ae3af7aa45e06e99c9e73cf0"
        ],
        [
            "Notation \"n .-1\" := (predn n) (at level 2, left associativity, format \"n .-1\") : nat_scope.",
            "VernacNotation",
            "310bd6d12b924aebb51244446710df640e4c6006"
        ],
        [
            "Notation \"n .-2\" := n.-1.-1 (at level 2, left associativity, format \"n .-2\") : nat_scope.",
            "VernacNotation",
            "35a3ea4fa8bee3bbf0714b5bfa5e99c863b4255f"
        ],
        [
            "Lemma succnK : cancel succn predn.",
            "VernacStartTheoremProof",
            "9a8a5a6d80fccca9e25424807c61bd67f04fb6bd"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma succn_inj : injective succn.",
            "VernacStartTheoremProof",
            "1006f3318f45e9e4c2b93b3d0e94d2fbf0309ec2"
        ],
        [
            "by move=> n m [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Reserved Notation \"n .*2\" (at level 2, format \"n .*2\").",
            "VernacSyntaxExtension",
            "5a9cd720b71cfe376000a25377998933c2cbc76e"
        ],
        [
            "Reserved Notation \"n ./2\" (at level 2, format \"n ./2\").",
            "VernacSyntaxExtension",
            "f820f5264607e12e4e8846451f26e74ead70bd88"
        ],
        [
            "Fixpoint eqn m n {struct m} := match m, n with | 0, 0 => true | m'.+1, n'.+1 => eqn m' n' | _, _ => false end.",
            "VernacFixpoint",
            "e2f9de1a6ad154b761c1dc38c6a5f88445e46493"
        ],
        [
            "Lemma eqnP : Equality.axiom eqn.",
            "VernacStartTheoremProof",
            "24e58e27ca79b4e576249d5e988f3a2f5e4ff0da"
        ],
        [
            "move=> n m; apply: (iffP idP) => [|<-]; last by elim n.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by elim: n m => [|n IHn] [|m] //= /IHn->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical nat_eqMixin := EqMixin eqnP.",
            "VernacDefinition",
            "7db251f33ada8303b0011ce368194647f7d08154"
        ],
        [
            "Canonical nat_eqType := Eval hnf in EqType nat nat_eqMixin.",
            "VernacDefinition",
            "5641f5da9f5bffe292f1af840e71075fefd14e71"
        ],
        [
            "Arguments eqn !m !n.",
            "VernacArguments",
            "ca3b0b341c73198f8abec3f31915d7e1a8fb731a"
        ],
        [
            "Arguments eqnP {x y}.",
            "VernacArguments",
            "e5540b5878a24e91f03d401503ab94374abeb125"
        ],
        [
            "Lemma eqnE : eqn = eq_op.",
            "VernacStartTheoremProof",
            "6c7b72b4d2517cac62c9ea07ca3610b62544d135"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqSS m n : (m.+1 == n.+1) = (m == n).",
            "VernacStartTheoremProof",
            "cac0196030d978f298452bd0deb3a41801f64e57"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nat_irrelevance (x y : nat) (E E' : x = y) : E = E'.",
            "VernacStartTheoremProof",
            "235691965936948fa00400510f414de97b352f4e"
        ],
        [
            "exact: eq_irrelevance.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition addn_rec := plus.",
            "VernacDefinition",
            "690137d849a3ad6c41167a7930aac538ccdf914d"
        ],
        [
            "Notation \"m + n\" := (addn_rec m n) : nat_rec_scope.",
            "VernacNotation",
            "e896af018424426a2e92f96cbb86db6ea90e03dd"
        ],
        [
            "Definition addn := nosimpl addn_rec.",
            "VernacDefinition",
            "3f57679d4849d552a37908f7daab616be5500db5"
        ],
        [
            "Notation \"m + n\" := (addn m n) : nat_scope.",
            "VernacNotation",
            "2732e730317639b27e47125947b49294534d4427"
        ],
        [
            "Lemma addnE : addn = addn_rec.",
            "VernacStartTheoremProof",
            "a3ff2554a3d257fb4d98d4652499ea94b7433e6c"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma plusE : plus = addn.",
            "VernacStartTheoremProof",
            "0f2ae368e15c3bdf1733150b6f826aa172105842"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add0n : left_id 0 addn.",
            "VernacStartTheoremProof",
            "c3d4e8ddd03068f9fe12b52e2db61c9a612cb2d1"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addSn m n : m.+1 + n = (m + n).+1.",
            "VernacStartTheoremProof",
            "222ecd24f32e3ee8715d0702137e35afe8929877"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add1n n : 1 + n = n.+1.",
            "VernacStartTheoremProof",
            "42702702383a5a27d656c2e29bafadf4a5f43d20"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addn0 : right_id 0 addn.",
            "VernacStartTheoremProof",
            "67abbca9869d219b2ad067414509cf186f1457fd"
        ],
        [
            "by move=> n; apply/eqP; elim: n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addnS m n : m + n.+1 = (m + n).+1.",
            "VernacStartTheoremProof",
            "240223d6fcf320e17fc9039ac3edcbfe77cafeb3"
        ],
        [
            "by elim: m.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addSnnS m n : m.+1 + n = m + n.+1.",
            "VernacStartTheoremProof",
            "ee53e73ab099310d94cf514c13d8ffe9c0e97f98"
        ],
        [
            "by rewrite addnS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addnCA : left_commutative addn.",
            "VernacStartTheoremProof",
            "b88ad12fc2932e54d9c65beef4edc287e8bd87a8"
        ],
        [
            "by move=> m n p; elim: m => //= m; rewrite addnS => <-.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addnC : commutative addn.",
            "VernacStartTheoremProof",
            "df666a9388f56a95286ae1ef68599ebd7323ad13"
        ],
        [
            "by move=> m n; rewrite -{1}[n]addn0 addnCA addn0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addn1 n : n + 1 = n.+1.",
            "VernacStartTheoremProof",
            "9c9a464196fe4a18086ca5dba4a985cc46f5a979"
        ],
        [
            "by rewrite addnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addnA : associative addn.",
            "VernacStartTheoremProof",
            "46a5f48d711c3b606d33cdd9c049cc1a18206c14"
        ],
        [
            "by move=> m n p; rewrite (addnC n) addnCA addnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addnAC : right_commutative addn.",
            "VernacStartTheoremProof",
            "dfab49d62e1dd0ca44ca320557b34122ba7f9736"
        ],
        [
            "by move=> m n p; rewrite -!addnA (addnC n).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addnACA : interchange addn addn.",
            "VernacStartTheoremProof",
            "5d9658835b1a44dd1c68d2fc562a387f4c1c58d6"
        ],
        [
            "by move=> m n p q; rewrite -!addnA (addnCA n).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addn_eq0 m n : (m + n == 0) = (m == 0) && (n == 0).",
            "VernacStartTheoremProof",
            "df853a00e1236ca78f96f7e35aca56c5b753ded1"
        ],
        [
            "by case: m; case: n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqn_add2l p m n : (p + m == p + n) = (m == n).",
            "VernacStartTheoremProof",
            "360cea09fb626bb833913318b38332b6e84dfedb"
        ],
        [
            "by elim: p.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqn_add2r p m n : (m + p == n + p) = (m == n).",
            "VernacStartTheoremProof",
            "26fbd9a147358117b313bb28fd32b29bfac27e6d"
        ],
        [
            "by rewrite -!(addnC p) eqn_add2l.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addnI : right_injective addn.",
            "VernacStartTheoremProof",
            "a3d65d5bb757653e224b8a252c510b2502c10639"
        ],
        [
            "by move=> p m n Heq; apply: eqP; rewrite -(eqn_add2l p) Heq eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addIn : left_injective addn.",
            "VernacStartTheoremProof",
            "765a94b76278c4f151b54193594337687a581beb"
        ],
        [
            "move=> p m n; rewrite -!(addnC p); apply addnI.",
            "VernacExtend",
            "d338c797aff17f1505f2856818f25b33795574f4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addn2 m : m + 2 = m.+2.",
            "VernacStartTheoremProof",
            "755303dd654273181008e9075c391e08ea78d105"
        ],
        [
            "by rewrite addnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add2n m : 2 + m = m.+2.",
            "VernacStartTheoremProof",
            "674a9d4be4f0a79f7cd999b963297729cdedd33e"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addn3 m : m + 3 = m.+3.",
            "VernacStartTheoremProof",
            "74e4d0d625a684cd7554d48c23f8601140ad4e94"
        ],
        [
            "by rewrite addnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add3n m : 3 + m = m.+3.",
            "VernacStartTheoremProof",
            "d23a98727c1b1a6503e9fd80e9e1b977ed8ca68a"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addn4 m : m + 4 = m.+4.",
            "VernacStartTheoremProof",
            "77ff1f3e6b6df212cfe04aa74b53454ecd490b35"
        ],
        [
            "by rewrite addnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add4n m : 4 + m = m.+4.",
            "VernacStartTheoremProof",
            "3903e5c81c7eb6b1c489de5eccc3180f6c8f7a9e"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition subn_rec := minus.",
            "VernacDefinition",
            "8c79b4bc4931a60d1d4783ef68c5560c4fa2e826"
        ],
        [
            "Notation \"m - n\" := (subn_rec m n) : nat_rec_scope.",
            "VernacNotation",
            "88486f689ac63df8fae68e8dc63c2bcd9925a60e"
        ],
        [
            "Definition subn := nosimpl subn_rec.",
            "VernacDefinition",
            "0939ef3d71471973f7370da9dfb21b8260dbccde"
        ],
        [
            "Notation \"m - n\" := (subn m n) : nat_scope.",
            "VernacNotation",
            "9cadff205a0c8d605983fcdc4ca89c7766be2379"
        ],
        [
            "Lemma subnE : subn = subn_rec.",
            "VernacStartTheoremProof",
            "e3d3b004999c2fb29a53a7bd117e962e59678f81"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minusE : minus = subn.",
            "VernacStartTheoremProof",
            "83a371e26f82113c2b794b464da3b12ed2eb81f1"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub0n : left_zero 0 subn.",
            "VernacStartTheoremProof",
            "a10179eb92ad8988a4f66da267e28454281a96fb"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subn0 : right_id 0 subn.",
            "VernacStartTheoremProof",
            "0f96a5ab7aca2fc4497136c9f55f5100af0d5748"
        ],
        [
            "by case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subnn : self_inverse 0 subn.",
            "VernacStartTheoremProof",
            "72763891790e75faea5a56fd63034aa4ddcf8adc"
        ],
        [
            "by elim.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subSS n m : m.+1 - n.+1 = m - n.",
            "VernacStartTheoremProof",
            "ee0c6db8ca960c48e26ffab82758480b2fe65670"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subn1 n : n - 1 = n.-1.",
            "VernacStartTheoremProof",
            "7ce2c64ccdef164627b61397c6b8b6ee0f1506c4"
        ],
        [
            "by case: n => [|[]].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subn2 n : (n - 2)%N = n.-2.",
            "VernacStartTheoremProof",
            "d7183caf9d9689c0404abe682f50cb04fefefbb5"
        ],
        [
            "by case: n => [|[|[]]].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subnDl p m n : (p + m) - (p + n) = m - n.",
            "VernacStartTheoremProof",
            "d6083bd835a0bee5e922275a7781bf1f3ada8bb7"
        ],
        [
            "by elim: p.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subnDr p m n : (m + p) - (n + p) = m - n.",
            "VernacStartTheoremProof",
            "d5dfecc28bba0b87c5dc54d40376a13731b41abf"
        ],
        [
            "by rewrite -!(addnC p) subnDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addKn n : cancel (addn n) (subn^~ n).",
            "VernacStartTheoremProof",
            "466aab1355c89687e6468c2a72ad06b70626112a"
        ],
        [
            "by move=> m; rewrite /= -{2}[n]addn0 subnDl subn0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addnK n : cancel (addn^~ n) (subn^~ n).",
            "VernacStartTheoremProof",
            "45d047ea94e9321d3086536ffe23f3a5428fe053"
        ],
        [
            "by move=> m; rewrite /= (addnC m) addKn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subSnn n : n.+1 - n = 1.",
            "VernacStartTheoremProof",
            "5ce732bc514822aa76dd9597ff25d0985931280d"
        ],
        [
            "exact (addnK n 1).",
            "VernacExtend",
            "82b1db7248ba1aad7913b65c51c5ad92bea74ae1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subnDA m n p : n - (m + p) = (n - m) - p.",
            "VernacStartTheoremProof",
            "318ee526dd640d0b98e21963b5cf4b25a761f8ce"
        ],
        [
            "by elim: m n => [|m IHm] [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subnAC : right_commutative subn.",
            "VernacStartTheoremProof",
            "1b97e17890a24c750486716b270f0e6c8719ec45"
        ],
        [
            "by move=> m n p; rewrite -!subnDA addnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subnS m n : m - n.+1 = (m - n).-1.",
            "VernacStartTheoremProof",
            "83754342ff12106266c2016d546e2201e3bc3417"
        ],
        [
            "by rewrite -addn1 subnDA subn1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subSKn m n : (m.+1 - n).-1 = m - n.",
            "VernacStartTheoremProof",
            "40935c51912e91a34b24d2f2024d626d17590c4a"
        ],
        [
            "by rewrite -subnS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition leq m n := m - n == 0.",
            "VernacDefinition",
            "ace06b0be06e714eeb337cb316aa1447ce0366da"
        ],
        [
            "Notation \"m <= n\" := (leq m n) : nat_scope.",
            "VernacNotation",
            "faa006a16f5c9d6e1eb25996c51b742af6ee0167"
        ],
        [
            "Notation \"m < n\" := (m.+1 <= n) : nat_scope.",
            "VernacNotation",
            "bc5ffdaaf63317840652816162978bcf327a06c3"
        ],
        [
            "Notation \"m >= n\" := (n <= m) (only parsing) : nat_scope.",
            "VernacNotation",
            "3c9ab266255dccc50c0c6b86e642b726830b8c88"
        ],
        [
            "Notation \"m > n\" := (n < m) (only parsing) : nat_scope.",
            "VernacNotation",
            "0252236d0e0ce83da1bbed0599f51f3b575b96f2"
        ],
        [
            "Definition geq := [rel m n | m >= n].",
            "VernacDefinition",
            "05f0ce0e4c0bdf99406473dbec2d20dc9b2b7e83"
        ],
        [
            "Definition ltn := [rel m n | m < n].",
            "VernacDefinition",
            "0a0fa2dcbc8d110c9c11ff0dc78f1f5e3c94796f"
        ],
        [
            "Definition gtn := [rel m n | m > n].",
            "VernacDefinition",
            "55622b2474ab2215a52e3e9134265f8285f86774"
        ],
        [
            "Notation \"m <= n <= p\" := ((m <= n) && (n <= p)) : nat_scope.",
            "VernacNotation",
            "e7e767f611475d83bc7a30e74075100285fd213d"
        ],
        [
            "Notation \"m < n <= p\" := ((m < n) && (n <= p)) : nat_scope.",
            "VernacNotation",
            "64fbca5353152d7b23ec3b45d3a972825773ba08"
        ],
        [
            "Notation \"m <= n < p\" := ((m <= n) && (n < p)) : nat_scope.",
            "VernacNotation",
            "387d4fc4c638cf7b95853fba5a07151817ab9f8d"
        ],
        [
            "Notation \"m < n < p\" := ((m < n) && (n < p)) : nat_scope.",
            "VernacNotation",
            "4e3d4448005ff9744e66665ffb1f3dd2f00f68e3"
        ],
        [
            "Lemma ltnS m n : (m < n.+1) = (m <= n).",
            "VernacStartTheoremProof",
            "c2016951bd4c26a4dfa56f5f20f8662ef8df8634"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq0n n : 0 <= n.",
            "VernacStartTheoremProof",
            "8b10536c828e9780d5006e6be6eeb68e15f08082"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn0Sn n : 0 < n.+1.",
            "VernacStartTheoremProof",
            "e0f97de2128e3d3bbf74d3d95c5da841d3076b3f"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn0 n : n < 0 = false.",
            "VernacStartTheoremProof",
            "007ddcce7eb65aa6b8ba99f43577a87782c73062"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leqnn n : n <= n.",
            "VernacStartTheoremProof",
            "70623a90c257e5e58b05638bdd27392a1d44667b"
        ],
        [
            "by elim: n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve leqnn : core.",
            "VernacHints",
            "5dff651f80c59cbd3b8992970979980df06d7850"
        ],
        [
            "Lemma ltnSn n : n < n.+1.",
            "VernacStartTheoremProof",
            "e0857e132d6fc1fc4d371492614c807e3004da54"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_leq m n : m = n -> m <= n.",
            "VernacStartTheoremProof",
            "3e0de233144d1f223e25a2eb100351505876f547"
        ],
        [
            "by move->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leqnSn n : n <= n.+1.",
            "VernacStartTheoremProof",
            "a5c0b6cc98924e99eff6ed3291fdc5b30925fee7"
        ],
        [
            "by elim: n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve leqnSn : core.",
            "VernacHints",
            "ab49019efb1d7c34895eca313aad34307b62ccfc"
        ],
        [
            "Lemma leq_pred n : n.-1 <= n.",
            "VernacStartTheoremProof",
            "994f61141f8c4c445f414794bd56984e53f45288"
        ],
        [
            "by case: n => /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leqSpred n : n <= n.-1.+1.",
            "VernacStartTheoremProof",
            "525a347a3b614151b84437e2030c4470330d4728"
        ],
        [
            "by case: n => /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn_predK m n : m < n -> n.-1.+1 = n.",
            "VernacStartTheoremProof",
            "a7a29313cc991216f69f918147accbc4327a19c9"
        ],
        [
            "by case: n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prednK n : 0 < n -> n.-1.+1 = n.",
            "VernacStartTheoremProof",
            "8545e4ac8d01479518c7948d8036d381b3c9b48c"
        ],
        [
            "exact: ltn_predK.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leqNgt m n : (m <= n) = ~~ (n < m).",
            "VernacStartTheoremProof",
            "54da7a7e5fb3eefaf8a8086a7c4346425d2fb2df"
        ],
        [
            "by elim: m n => [|m IHm] [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltnNge m n : (m < n) = ~~ (n <= m).",
            "VernacStartTheoremProof",
            "2408c0e5023a5a533cf53463cdfe5d94d556798a"
        ],
        [
            "by rewrite leqNgt.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltnn n : n < n = false.",
            "VernacStartTheoremProof",
            "3d4f9759989d740dd2c2601778aaf6ce9744ba38"
        ],
        [
            "by rewrite ltnNge leqnn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leqn0 n : (n <= 0) = (n == 0).",
            "VernacStartTheoremProof",
            "2d8a0f3a4107f6b605fd1bbc9cf138e3e2164b2c"
        ],
        [
            "by case: n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lt0n n : (0 < n) = (n != 0).",
            "VernacStartTheoremProof",
            "7574e4ea1b20cf4d3c85837b2ab502d4575b5bbc"
        ],
        [
            "by case: n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lt0n_neq0 n : 0 < n -> n != 0.",
            "VernacStartTheoremProof",
            "54778f7697a80d4bc5b91ab0e3af855ec4c74767"
        ],
        [
            "by case: n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqn0Ngt n : (n == 0) = ~~ (n > 0).",
            "VernacStartTheoremProof",
            "2e67dff97ee5847125ab558e93f0bc04e32af1de"
        ],
        [
            "by case: n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma neq0_lt0n n : (n == 0) = false -> 0 < n.",
            "VernacStartTheoremProof",
            "511a33127be19c1bf4b2166c3fd3a43f76dc1855"
        ],
        [
            "by case: n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve lt0n_neq0 neq0_lt0n : core.",
            "VernacHints",
            "91ab8669dd1aab37e1a6103583776090e9101203"
        ],
        [
            "Lemma eqn_leq m n : (m == n) = (m <= n <= m).",
            "VernacStartTheoremProof",
            "52806f738d50ef097c713771dc17cf2f7b3f4d27"
        ],
        [
            "by elim: m n => [|m IHm] [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma anti_leq : antisymmetric leq.",
            "VernacStartTheoremProof",
            "958b89901ea9a58526f8b0b48da24685946a3475"
        ],
        [
            "by move=> m n; rewrite -eqn_leq => /eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma neq_ltn m n : (m != n) = (m < n) || (n < m).",
            "VernacStartTheoremProof",
            "596e4b50bd0eaa7a6ba095164885fba4a66acc01"
        ],
        [
            "by rewrite eqn_leq negb_and orbC -!ltnNge.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gtn_eqF m n : m < n -> n == m = false.",
            "VernacStartTheoremProof",
            "c212641ef78b870ed5ed443649e0f531640a9d8b"
        ],
        [
            "by rewrite eqn_leq (leqNgt n) => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn_eqF m n : m < n -> m == n = false.",
            "VernacStartTheoremProof",
            "b8d5c30f6e46e20d850d3d6e8948b18d17712bfa"
        ],
        [
            "by move/gtn_eqF; rewrite eq_sym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn_geF m n : m < n -> m >= n = false.",
            "VernacStartTheoremProof",
            "a482326a9f8445ea4d79e55b11a05b668c04f2de"
        ],
        [
            "by rewrite (leqNgt n) => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_gtF m n : m <= n -> m > n = false.",
            "VernacStartTheoremProof",
            "0caf4aa76e2d43e95a05b32d4b9dc0bab1cfefd1"
        ],
        [
            "by rewrite (ltnNge n) => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_eqVlt m n : (m <= n) = (m == n) || (m < n).",
            "VernacStartTheoremProof",
            "91b25a2a0e4cd3f07a50e9540936e0d2780b71f8"
        ],
        [
            "by elim: m n => [|m IHm] [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn_neqAle m n : (m < n) = (m != n) && (m <= n).",
            "VernacStartTheoremProof",
            "27fc34a9e4ca813dd4b6909d3005b971d9dbec1f"
        ],
        [
            "by rewrite ltnNge leq_eqVlt negb_or -leqNgt eq_sym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_trans n m p : m <= n -> n <= p -> m <= p.",
            "VernacStartTheoremProof",
            "737b5ed58bc9b953d2fd62496863cd582b1598d7"
        ],
        [
            "by elim: n m p => [|i IHn] [|m] [|p] //; apply: IHn m p.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_ltn_trans n m p : m <= n -> n < p -> m < p.",
            "VernacStartTheoremProof",
            "770708d00e8355134df6ed8b17027871c248ecdb"
        ],
        [
            "by move=> Hmn; apply: leq_trans.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltnW m n : m < n -> m <= n.",
            "VernacStartTheoremProof",
            "a6eff459eb648cf323cdf73fa6d339dad9500fb2"
        ],
        [
            "exact: leq_trans.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve ltnW : core.",
            "VernacHints",
            "9d35713fa9ead5a807af004c793ac8af21e80c59"
        ],
        [
            "Lemma leqW m n : m <= n -> m <= n.+1.",
            "VernacStartTheoremProof",
            "483404d42cfcc18f6c6298261b63423217331bf4"
        ],
        [
            "by move=> le_mn; apply: ltnW.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn_trans n m p : m < n -> n < p -> m < p.",
            "VernacStartTheoremProof",
            "b89eb9ea5e497e16bb8a100b3bc438eae4db2366"
        ],
        [
            "by move=> lt_mn /ltnW; apply: leq_trans.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_total m n : (m <= n) || (m >= n).",
            "VernacStartTheoremProof",
            "295bcb95afead3a57e7d5f5e6fd0b3c4bcc0af6d"
        ],
        [
            "by rewrite -implyNb -ltnNge; apply/implyP; apply: ltnW.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leP m n : reflect (m <= n)%coq_nat (m <= n).",
            "VernacStartTheoremProof",
            "7cc4c2550b192ec18de990083f07212574df5d4d"
        ],
        [
            "apply: (iffP idP); last by elim: n / => // n _ /leq_trans->.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "elim: n => [|n IHn]; first by case: m.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite leq_eqVlt ltnS => /predU1P[<- // | /IHn]; right.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments leP {m n}.",
            "VernacArguments",
            "16156a460a40c20578b2c83ea2c9c2956b7697bf"
        ],
        [
            "Lemma le_irrelevance m n le_mn1 le_mn2 : le_mn1 = le_mn2 :> (m <= n)%coq_nat.",
            "VernacStartTheoremProof",
            "cc607ab6f76a8e6d78114a07eabab150f56574f2"
        ],
        [
            "elim: {n}n.+1 {-1}n (erefl n.+1) => // n IHn _ [<-] in le_mn1 le_mn2 *.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "pose def_n2 := erefl n; transitivity (eq_ind _ _ le_mn2 _ def_n2) => //.",
            "VernacExtend",
            "801cf49622ecacdc7aba5baf9428af93fd6cae3f"
        ],
        [
            "move def_n1: {1 4 5 7}n le_mn1 le_mn2 def_n2 => n1 le_mn1.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "case: n1 / le_mn1 def_n1 => [|n1 le_mn1] def_n1 [|n2 le_mn2] def_n2.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite [def_n2]eq_axiomK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move/leP: (le_mn2); rewrite -{1}def_n2 ltnn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move/leP: (le_mn1); rewrite {1}def_n2 ltnn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: def_n2 (def_n2) => ->{n2} def_n2 in le_mn2 *.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite [def_n2]eq_axiomK /=; congr le_S; apply: IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltP m n : reflect (m < n)%coq_nat (m < n).",
            "VernacStartTheoremProof",
            "25250b50183d1c1cc866c61bfd5703bcb4e8bf92"
        ],
        [
            "exact leP.",
            "VernacExtend",
            "20bea629c926d95d4ef6094817b0bd393b60b4f2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments ltP {m n}.",
            "VernacArguments",
            "5b049ac624ddaf81a3512552a5a11675cb5d2933"
        ],
        [
            "Lemma lt_irrelevance m n lt_mn1 lt_mn2 : lt_mn1 = lt_mn2 :> (m < n)%coq_nat.",
            "VernacStartTheoremProof",
            "dd695b6052a4d90feedd57a63048b55963f37a9a"
        ],
        [
            "exact: (@le_irrelevance m.+1).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variant leq_xor_gtn m n : bool -> bool -> Set := | LeqNotGtn of m <= n : leq_xor_gtn m n true false | GtnNotLeq of n < m : leq_xor_gtn m n false true.",
            "VernacInductive",
            "e3a272eb07cf5b79b0a9437518a8e989e19c3dcc"
        ],
        [
            "Lemma leqP m n : leq_xor_gtn m n (m <= n) (n < m).",
            "VernacStartTheoremProof",
            "6f52fbcdf1911914d4e9ea38f8b0943bbdde1c7d"
        ],
        [
            "by rewrite ltnNge; case le_mn: (m <= n); constructor; rewrite // ltnNge le_mn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variant ltn_xor_geq m n : bool -> bool -> Set := | LtnNotGeq of m < n : ltn_xor_geq m n false true | GeqNotLtn of n <= m : ltn_xor_geq m n true false.",
            "VernacInductive",
            "4fe028f3de3bfd14ed76d1b5a3e9692cfbf73082"
        ],
        [
            "Lemma ltnP m n : ltn_xor_geq m n (n <= m) (m < n).",
            "VernacStartTheoremProof",
            "350f180653ec62a42271b5104d27f98ce8c3e7a3"
        ],
        [
            "by rewrite -(ltnS n); case: leqP; constructor.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variant eqn0_xor_gt0 n : bool -> bool -> Set := | Eq0NotPos of n = 0 : eqn0_xor_gt0 n true false | PosNotEq0 of n > 0 : eqn0_xor_gt0 n false true.",
            "VernacInductive",
            "53e366ef86e03cd5ed3c990d6ca6fe014a98a344"
        ],
        [
            "Lemma posnP n : eqn0_xor_gt0 n (n == 0) (0 < n).",
            "VernacStartTheoremProof",
            "cc88923a2edde79b7216766a227ac7ff8c7126c1"
        ],
        [
            "by case: n; constructor.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variant compare_nat m n : bool -> bool -> bool -> bool -> bool -> bool -> Set := | CompareNatLt of m < n : compare_nat m n true false true false false false | CompareNatGt of m > n : compare_nat m n false true false true false false | CompareNatEq of m = n : compare_nat m n true true false false true true.",
            "VernacInductive",
            "369b5929a585bcc9e6c2c99e3431cc0754d650a7"
        ],
        [
            "Lemma ltngtP m n : compare_nat m n (m <= n) (n <= m) (m < n) (n < m) (n == m) (m == n).",
            "VernacStartTheoremProof",
            "e0ae8f99af73fceadaab68f410e357b2384914b4"
        ],
        [
            "rewrite !ltn_neqAle [_ == m]eq_sym; case: ltnP => [mn|].",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "by rewrite ltnW // gtn_eqF //; constructor.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite leq_eqVlt; case: ltnP; rewrite ?(orbT, orbF) => //= lt_nm eq_mn.",
            "VernacExtend",
            "2253759ff5c580854290fce82296a80357452125"
        ],
        [
            "by rewrite ltn_eqF //; constructor.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite eq_mn; constructor; apply/eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_add2l p m n : (p + m <= p + n) = (m <= n).",
            "VernacStartTheoremProof",
            "3db0e6c1d2f9f4aad07077c324377b483d4248a0"
        ],
        [
            "by elim: p.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn_add2l p m n : (p + m < p + n) = (m < n).",
            "VernacStartTheoremProof",
            "260140da72bf517b8f86f21e5cc7f01b347dd790"
        ],
        [
            "by rewrite -addnS; apply: leq_add2l.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_add2r p m n : (m + p <= n + p) = (m <= n).",
            "VernacStartTheoremProof",
            "d7c62c20bc6ce6530d7fc3c70f1b9abbed8f2147"
        ],
        [
            "by rewrite -!(addnC p); apply: leq_add2l.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn_add2r p m n : (m + p < n + p) = (m < n).",
            "VernacStartTheoremProof",
            "b96bbad6ca592ef97cccc334d492b15d41d99384"
        ],
        [
            "exact: leq_add2r p m.+1 n.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_add m1 m2 n1 n2 : m1 <= n1 -> m2 <= n2 -> m1 + m2 <= n1 + n2.",
            "VernacStartTheoremProof",
            "ee6be0d9ef6557db7e16ef82a6d948fcd892cd17"
        ],
        [
            "by move=> le_mn1 le_mn2; rewrite (@leq_trans (m1 + n2)) ?leq_add2l ?leq_add2r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_addr m n : n <= n + m.",
            "VernacStartTheoremProof",
            "ac6adca23af8742755f0499dc1338d419c5e85cb"
        ],
        [
            "by rewrite -{1}[n]addn0 leq_add2l.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_addl m n : n <= m + n.",
            "VernacStartTheoremProof",
            "5ffee71ae1a6f1b037fe4636f245e57426c1b2af"
        ],
        [
            "by rewrite addnC leq_addr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn_addr m n p : m < n -> m < n + p.",
            "VernacStartTheoremProof",
            "34418f601d73d57da55d1b483304251f2b1040a6"
        ],
        [
            "by move/leq_trans=> -> //; apply: leq_addr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn_addl m n p : m < n -> m < p + n.",
            "VernacStartTheoremProof",
            "8bdd67577d1a1ecb77ee236df0553372249a7013"
        ],
        [
            "by move/leq_trans=> -> //; apply: leq_addl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addn_gt0 m n : (0 < m + n) = (0 < m) || (0 < n).",
            "VernacStartTheoremProof",
            "b4a7a3331736dd7acc1090beccb24747ae9653a6"
        ],
        [
            "by rewrite !lt0n -negb_and addn_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subn_gt0 m n : (0 < n - m) = (m < n).",
            "VernacStartTheoremProof",
            "1265001e894df874edee1841155c9065dba761b2"
        ],
        [
            "by elim: m n => [|m IHm] [|n] //; apply: IHm n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subn_eq0 m n : (m - n == 0) = (m <= n).",
            "VernacStartTheoremProof",
            "5e51dcb6cd753644f225935414f66bbb12463082"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_subLR m n p : (m - n <= p) = (m <= n + p).",
            "VernacStartTheoremProof",
            "2e33548e24d9b40b39bc0f7fd7f6058dd4413bf6"
        ],
        [
            "by rewrite -subn_eq0 -subnDA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_subr m n : n - m <= n.",
            "VernacStartTheoremProof",
            "f158eae4ae0bba00feca1bc3cb00bba4aaa2bf39"
        ],
        [
            "by rewrite leq_subLR leq_addl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subnKC m n : m <= n -> m + (n - m) = n.",
            "VernacStartTheoremProof",
            "82f868ce12defe89040df39b3d4563e9cec09385"
        ],
        [
            "by elim: m n => [|m IHm] [|n] // /(IHm n) {2}<-.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subnK m n : m <= n -> (n - m) + m = n.",
            "VernacStartTheoremProof",
            "7096921e3ad950591df67e15eacc4a8f7935c3a1"
        ],
        [
            "by rewrite addnC; apply: subnKC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addnBA m n p : p <= n -> m + (n - p) = m + n - p.",
            "VernacStartTheoremProof",
            "6077d734bec23800c88e0c45e18eb663eef01eb9"
        ],
        [
            "by move=> le_pn; rewrite -{2}(subnK le_pn) addnA addnK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addnBAC m n p : n <= m -> m - n + p = m + p - n.",
            "VernacStartTheoremProof",
            "b2954824486e6144513897fe0decf7e57aec4969"
        ],
        [
            "by move=> le_nm; rewrite addnC addnBA // addnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addnBCA m n p : p <= m -> p <= n -> m + (n - p) = n + (m - p).",
            "VernacStartTheoremProof",
            "258d8eeb7b435494d35d7b2c61c4d17501273843"
        ],
        [
            "by move=> le_pm le_pn; rewrite !addnBA // addnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addnABC m n p : p <= m -> p <= n -> m + (n - p) = m - p + n.",
            "VernacStartTheoremProof",
            "006f4cb797f97b0960cb05a6eb848831f03b8389"
        ],
        [
            "by move=> le_pm le_pn; rewrite addnBA // addnBAC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subnBA m n p : p <= n -> m - (n - p) = m + p - n.",
            "VernacStartTheoremProof",
            "a2c7a5a3b746225180862a432c77435365c53736"
        ],
        [
            "by move=> le_pn; rewrite -{2}(subnK le_pn) subnDr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subKn m n : m <= n -> n - (n - m) = m.",
            "VernacStartTheoremProof",
            "b6992b7be282b2ba5528d39c2371ef790dfe6bc2"
        ],
        [
            "by move/subnBA->; rewrite addKn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subSn m n : m <= n -> n.+1 - m = (n - m).+1.",
            "VernacStartTheoremProof",
            "b9235509fdb0238fbfec5e4d9220f61b710172cb"
        ],
        [
            "by rewrite -add1n => /addnBA <-.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subnSK m n : m < n -> (n - m.+1).+1 = n - m.",
            "VernacStartTheoremProof",
            "91587b8ef2bb49ac7d84e288c818164244f1d9d4"
        ],
        [
            "by move/subSn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_sub2r p m n : m <= n -> m - p <= n - p.",
            "VernacStartTheoremProof",
            "36c999d242f89bbdd2c76d27c90647c8ff92c2dc"
        ],
        [
            "by move=> le_mn; rewrite leq_subLR (leq_trans le_mn) // -leq_subLR.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_sub2l p m n : m <= n -> p - n <= p - m.",
            "VernacStartTheoremProof",
            "b34c56f8707041f34181ffd467a52a7701539197"
        ],
        [
            "rewrite -(leq_add2r (p - m)) leq_subLR.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: leq_trans; rewrite -leq_subLR.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_sub m1 m2 n1 n2 : m1 <= m2 -> n2 <= n1 -> m1 - n1 <= m2 - n2.",
            "VernacStartTheoremProof",
            "9fdb3df1ed3600688f5baf674a86efc93022bbf0"
        ],
        [
            "by move/(leq_sub2r n1)=> le_m12 /(leq_sub2l m2); apply: leq_trans.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn_sub2r p m n : p < n -> m < n -> m - p < n - p.",
            "VernacStartTheoremProof",
            "753a273b1524deade07e0551cd36e4a774e1e64b"
        ],
        [
            "by move/subnSK <-; apply: (@leq_sub2r p.+1).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn_sub2l p m n : m < p -> m < n -> p - n < p - m.",
            "VernacStartTheoremProof",
            "af5fdaaf0980c9649a82aaa9247489852c2ce6f1"
        ],
        [
            "by move/subnSK <-; apply: leq_sub2l.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn_subRL m n p : (n < p - m) = (m + n < p).",
            "VernacStartTheoremProof",
            "8fbf17c9904f47381575583226805a02bfa2bc3f"
        ],
        [
            "by rewrite !ltnNge leq_subLR.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subn_if_gt T m n F (E : T) : (if m.+1 - n is m'.+1 then F m' else E) = (if n <= m then F (m - n) else E).",
            "VernacStartTheoremProof",
            "04d4669094d1347c0e97958f16cda44c10889efe"
        ],
        [
            "by case: leqP => [le_nm | /eqnP-> //]; rewrite -{1}(subnK le_nm) -addSn addnK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition maxn m n := if m < n then n else m.",
            "VernacDefinition",
            "b41b4438020e10a7ae3d6edac905a42ad17048ff"
        ],
        [
            "Definition minn m n := if m < n then m else n.",
            "VernacDefinition",
            "58a5f482a21f0a7c60ae66b2e7039a8906d70df6"
        ],
        [
            "Lemma max0n : left_id 0 maxn.",
            "VernacStartTheoremProof",
            "684797107d2f6941a5c9edcb75aa999e8a39bea9"
        ],
        [
            "by case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxn0 : right_id 0 maxn.",
            "VernacStartTheoremProof",
            "5fe10c3edaf0f341cb71326b08302b329fcd9ef2"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxnC : commutative maxn.",
            "VernacStartTheoremProof",
            "2e048729ab6c24c3ba3b50813dfdeaefbd3344e9"
        ],
        [
            "by move=> m n; rewrite /maxn; case ltngtP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxnE m n : maxn m n = m + (n - m).",
            "VernacStartTheoremProof",
            "c8915085fb6e7f5e5aff7732cef893fde6050eeb"
        ],
        [
            "by rewrite /maxn addnC; case: leqP => [/eqnP->|/ltnW/subnK].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxnAC : right_commutative maxn.",
            "VernacStartTheoremProof",
            "c563529bf26c72cb067c4e093ab50fa73ad57d88"
        ],
        [
            "by move=> m n p; rewrite !maxnE -!addnA !subnDA -!maxnE maxnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxnA : associative maxn.",
            "VernacStartTheoremProof",
            "efc32c419076a4c6ccf8e17fe1b33c33af727bbd"
        ],
        [
            "by move=> m n p; rewrite !(maxnC m) maxnAC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxnCA : left_commutative maxn.",
            "VernacStartTheoremProof",
            "28e2d861ef8ce29251b9e1dc67c4fe569a61f7d4"
        ],
        [
            "by move=> m n p; rewrite !maxnA (maxnC m).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxnACA : interchange maxn maxn.",
            "VernacStartTheoremProof",
            "1f55a112f6bd935cd87f8bdc636ee3d287a84c7c"
        ],
        [
            "by move=> m n p q; rewrite -!maxnA (maxnCA n).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxn_idPl {m n} : reflect (maxn m n = m) (m >= n).",
            "VernacStartTheoremProof",
            "e2a24e589acc0a77e400db6e65a1350bbe3985a7"
        ],
        [
            "by rewrite -subn_eq0 -(eqn_add2l m) addn0 -maxnE; apply: eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxn_idPr {m n} : reflect (maxn m n = n) (m <= n).",
            "VernacStartTheoremProof",
            "821138fddfd7bca8a4abf829d0171873bca896a6"
        ],
        [
            "by rewrite maxnC; apply: maxn_idPl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxnn : idempotent maxn.",
            "VernacStartTheoremProof",
            "378e7708b5d4a24d696e9e6bbe85f337d65c55ec"
        ],
        [
            "by move=> n; apply/maxn_idPl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_max m n1 n2 : (m <= maxn n1 n2) = (m <= n1) || (m <= n2).",
            "VernacStartTheoremProof",
            "a324f86b1a0288740c15bbec62099baf934a3299"
        ],
        [
            "without loss le_n21: n1 n2 / n2 <= n1.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "by case/orP: (leq_total n2 n1) => le_n12; last rewrite maxnC orbC; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite (maxn_idPl le_n21) orb_idr // => /leq_trans->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_maxl m n : m <= maxn m n.",
            "VernacStartTheoremProof",
            "46f056b16095f95f27bd5be186a02d2872c7e5a6"
        ],
        [
            "by rewrite leq_max leqnn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_maxr m n : n <= maxn m n.",
            "VernacStartTheoremProof",
            "96868cd5c51772b84203c68924e1aef93dbac6fe"
        ],
        [
            "by rewrite maxnC leq_maxl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gtn_max m n1 n2 : (m > maxn n1 n2) = (m > n1) && (m > n2).",
            "VernacStartTheoremProof",
            "34f8afb2eeb65e71af607acb0bfd34d40377c7f9"
        ],
        [
            "by rewrite !ltnNge leq_max negb_or.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma geq_max m n1 n2 : (m >= maxn n1 n2) = (m >= n1) && (m >= n2).",
            "VernacStartTheoremProof",
            "a2949b872e4f16674e662a6e5ab36a18cb67a5c9"
        ],
        [
            "by rewrite -ltnS gtn_max.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxnSS m n : maxn m.+1 n.+1 = (maxn m n).+1.",
            "VernacStartTheoremProof",
            "08f9968b2c152a2fb80ef5a2778b1732fa6c013c"
        ],
        [
            "by rewrite !maxnE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addn_maxl : left_distributive addn maxn.",
            "VernacStartTheoremProof",
            "53ff122d376d86842136dac4350d1b2e10ffcf7b"
        ],
        [
            "by move=> m1 m2 n; rewrite !maxnE subnDr addnAC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addn_maxr : right_distributive addn maxn.",
            "VernacStartTheoremProof",
            "742e4dfd3370188b13fb99f7dad00005b3b9ff27"
        ],
        [
            "by move=> m n1 n2; rewrite !(addnC m) addn_maxl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma min0n : left_zero 0 minn.",
            "VernacStartTheoremProof",
            "e5ff6915dd201668d428e382e171831e60b7698f"
        ],
        [
            "by case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minn0 : right_zero 0 minn.",
            "VernacStartTheoremProof",
            "f68822c00a4fa66ff7307020a0c768f6683a143f"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minnC : commutative minn.",
            "VernacStartTheoremProof",
            "e1a57a121126cb5d9d130fb3f5cf74a9b129a1d1"
        ],
        [
            "by move=> m n; rewrite /minn; case ltngtP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addn_min_max m n : minn m n + maxn m n = m + n.",
            "VernacStartTheoremProof",
            "96809fcdcd810d398754891ba17f8fa64acda498"
        ],
        [
            "by rewrite /minn /maxn; case: ltngtP => // [_|->] //; apply: addnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minnE m n : minn m n = m - (m - n).",
            "VernacStartTheoremProof",
            "a801f33dd46b69b155691fbdcdb2054073eb7fd9"
        ],
        [
            "by rewrite -(subnDl n) -maxnE -addn_min_max addnK minnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minnAC : right_commutative minn.",
            "VernacStartTheoremProof",
            "66960275fa7a053fb0dca6a5a2fc1f15e7d47117"
        ],
        [
            "by move=> m n p; rewrite !minnE -subnDA subnAC -maxnE maxnC maxnE subnAC subnDA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minnA : associative minn.",
            "VernacStartTheoremProof",
            "043055d3a47e205c611d93da2f1b456f7b0363a0"
        ],
        [
            "by move=> m n p; rewrite minnC minnAC (minnC n).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minnCA : left_commutative minn.",
            "VernacStartTheoremProof",
            "74411fb2745386229262de5b01b04332dc49f11b"
        ],
        [
            "by move=> m n p; rewrite !minnA (minnC n).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minnACA : interchange minn minn.",
            "VernacStartTheoremProof",
            "e76091ec1d3597900db70226b1137e2c9106ae69"
        ],
        [
            "by move=> m n p q; rewrite -!minnA (minnCA n).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minn_idPl {m n} : reflect (minn m n = m) (m <= n).",
            "VernacStartTheoremProof",
            "c361136d8bf19c5c4a97302936a079ae6b8e33b1"
        ],
        [
            "rewrite (sameP maxn_idPr eqP) -(eqn_add2l m) eq_sym -addn_min_max eqn_add2r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "exact: eqP.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minn_idPr {m n} : reflect (minn m n = n) (m >= n).",
            "VernacStartTheoremProof",
            "ba2ae274cd657513f3dc3c61717b1248229299d9"
        ],
        [
            "by rewrite minnC; apply: minn_idPl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minnn : idempotent minn.",
            "VernacStartTheoremProof",
            "bd13283c445eccb7e6c068bfbbdf04c014cb3188"
        ],
        [
            "by move=> n; apply/minn_idPl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_min m n1 n2 : (m <= minn n1 n2) = (m <= n1) && (m <= n2).",
            "VernacStartTheoremProof",
            "180ccb1f45e0191cee7c4a9b26283d4dfaffed49"
        ],
        [
            "wlog le_n21: n1 n2 / n2 <= n1.",
            "VernacExtend",
            "a7d04f709d7f819b427e71c08303f8cd82c08a1b"
        ],
        [
            "by case/orP: (leq_total n2 n1) => ?; last rewrite minnC andbC; auto.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite /minn ltnNge le_n21 /= andbC; case: leqP => // /leq_trans->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gtn_min m n1 n2 : (m > minn n1 n2) = (m > n1) || (m > n2).",
            "VernacStartTheoremProof",
            "e8f6b2a3955d14c5541f033619dfb476ebb65d0d"
        ],
        [
            "by rewrite !ltnNge leq_min negb_and.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma geq_min m n1 n2 : (m >= minn n1 n2) = (m >= n1) || (m >= n2).",
            "VernacStartTheoremProof",
            "0982b8abf0cdd64bc827e3ae402b3263f6c8a15c"
        ],
        [
            "by rewrite -ltnS gtn_min.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma geq_minl m n : minn m n <= m.",
            "VernacStartTheoremProof",
            "4935aab7e64b5552f18b30b9702fa190b0b7a085"
        ],
        [
            "by rewrite geq_min leqnn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma geq_minr m n : minn m n <= n.",
            "VernacStartTheoremProof",
            "59bb7f325ebb7d78e092eb54a8d2aadb961b62d7"
        ],
        [
            "by rewrite minnC geq_minl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addn_minr : right_distributive addn minn.",
            "VernacStartTheoremProof",
            "072cee4db5797bb43bc5c380b2938ed606adc224"
        ],
        [
            "by move=> m1 m2 n; rewrite !minnE subnDl addnBA ?leq_subr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addn_minl : left_distributive addn minn.",
            "VernacStartTheoremProof",
            "30d35cff2256798d6d070296f28caf9c3aa33af8"
        ],
        [
            "by move=> m1 m2 n; rewrite -!(addnC n) addn_minr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minnSS m n : minn m.+1 n.+1 = (minn m n).+1.",
            "VernacStartTheoremProof",
            "5638b69fd5bf0c0e42d3a89fc576216af87ae3b8"
        ],
        [
            "by rewrite -(addn_minr 1).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxnK m n : minn (maxn m n) m = m.",
            "VernacStartTheoremProof",
            "54bea1ad0010b013b57d1bc6e330672660dc8672"
        ],
        [
            "exact/minn_idPr/leq_maxl.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxKn m n : minn n (maxn m n) = n.",
            "VernacStartTheoremProof",
            "09b5364983fdf9abbdbb57a2c717b9f30344160b"
        ],
        [
            "exact/minn_idPl/leq_maxr.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minnK m n : maxn (minn m n) m = m.",
            "VernacStartTheoremProof",
            "a739f072e952c004042fa6d5c2b6e48a7fba810b"
        ],
        [
            "exact/maxn_idPr/geq_minl.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minKn m n : maxn n (minn m n) = n.",
            "VernacStartTheoremProof",
            "65a3d8f3ae2a389becd310b49a687365a83c0dd8"
        ],
        [
            "exact/maxn_idPl/geq_minr.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxn_minl : left_distributive maxn minn.",
            "VernacStartTheoremProof",
            "5e2f79f562b8f03bce796798295d42e0a15f9e6d"
        ],
        [
            "move=> m1 m2 n; wlog le_m21: m1 m2 / m2 <= m1.",
            "VernacExtend",
            "6dbaea969dd2e1a08b50e55e2e4c4949c4d27249"
        ],
        [
            "move=> IH; case/orP: (leq_total m2 m1) => /IH //.",
            "VernacExtend",
            "a01b3d93f426ff68d360351709a5fa5af822af32"
        ],
        [
            "by rewrite minnC [in R in _ = R]minnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (minn_idPr le_m21); apply/esym/minn_idPr.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite geq_max leq_maxr leq_max le_m21.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxn_minr : right_distributive maxn minn.",
            "VernacStartTheoremProof",
            "beaa218dfa9d6d713c5f5f8a89b4ecedb56918f2"
        ],
        [
            "by move=> m n1 n2; rewrite !(maxnC m) maxn_minl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minn_maxl : left_distributive minn maxn.",
            "VernacStartTheoremProof",
            "2c32eb19cf825a31f8d2e4388050d7c0e7c9e95e"
        ],
        [
            "by move=> m1 m2 n; rewrite maxn_minr !maxn_minl -minnA maxnn (maxnC _ n) !maxnK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minn_maxr : right_distributive minn maxn.",
            "VernacStartTheoremProof",
            "c5cd7a02dd87a5824a174c6a490016215929978a"
        ],
        [
            "by move=> m n1 n2; rewrite !(minnC m) minn_maxl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section ExMinn.",
            "VernacBeginSection",
            "3d09cde57521d705dbb71fb61ebce6205a4d9c64"
        ],
        [
            "Variable P : pred nat.",
            "VernacAssumption",
            "ffad726dc18b2ca3d7f17cc87a10ad2370b79a42"
        ],
        [
            "Hypothesis exP : exists n, P n.",
            "VernacAssumption",
            "908a6a5ebc1882bc744a02ff2d1080461e0e4197"
        ],
        [
            "Inductive acc_nat i : Prop := AccNat0 of P i | AccNatS of acc_nat i.+1.",
            "VernacInductive",
            "268fcc2e4a73122779c202269fb59c0d6c8cfe2e"
        ],
        [
            "Lemma find_ex_minn : {m | P m & forall n, P n -> n >= m}.",
            "VernacStartTheoremProof",
            "32715c50acf1b6fb77be6b513a5871fff3a10c63"
        ],
        [
            "have: forall n, P n -> n >= 0 by [].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have: acc_nat 0.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case exP => n; rewrite -(addn0 n); elim: n 0 => [|n IHn] j; first by left.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite addSnnS; right; apply: IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move: 0; fix find_ex_minn 2 => m IHm m_lb; case Pm: (P m); first by exists m.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply: find_ex_minn m.+1 _ _ => [|n Pn]; first by case: IHm; rewrite ?Pm.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite ltn_neqAle m_lb //; case: eqP Pm => // -> /idP[].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ex_minn := s2val find_ex_minn.",
            "VernacDefinition",
            "99e6f56a830076662cb3d9ff0ab7a2e58b685210"
        ],
        [
            "Inductive ex_minn_spec : nat -> Type := ExMinnSpec m of P m & (forall n, P n -> n >= m) : ex_minn_spec m.",
            "VernacInductive",
            "9afdd3226906a8df7f1ceed6a173964f6621ac23"
        ],
        [
            "Lemma ex_minnP : ex_minn_spec ex_minn.",
            "VernacStartTheoremProof",
            "a8aabd8809da95b5a2c11a5f870837ee123158f2"
        ],
        [
            "by rewrite /ex_minn; case: find_ex_minn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ExMinn.",
            "VernacEndSegment",
            "d370454b11435bf26737b557be48e4477a2bb2f8"
        ],
        [
            "Section ExMaxn.",
            "VernacBeginSection",
            "512ec71cd74c52e5117e05ad2a919bc01c7cb3b7"
        ],
        [
            "Variables (P : pred nat) (m : nat).",
            "VernacAssumption",
            "52011566941b06a2528644e7a4afe6e187e44451"
        ],
        [
            "Hypotheses (exP : exists i, P i) (ubP : forall i, P i -> i <= m).",
            "VernacAssumption",
            "1e4c8012191b55ad0f1eb544fd161a77f8a5ea88"
        ],
        [
            "Lemma ex_maxn_subproof : exists i, P (m - i).",
            "VernacStartTheoremProof",
            "cc867e516c60128c6e3a003deffc88caa610a295"
        ],
        [
            "by case: exP => i Pi; exists (m - i); rewrite subKn ?ubP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ex_maxn := m - ex_minn ex_maxn_subproof.",
            "VernacDefinition",
            "cc85175aeec82b8d4a80bcfac47e281a8676b86d"
        ],
        [
            "Variant ex_maxn_spec : nat -> Type := ExMaxnSpec i of P i & (forall j, P j -> j <= i) : ex_maxn_spec i.",
            "VernacInductive",
            "d9e228bfdf170b9bb2f1aacac0c1a89777b7ed80"
        ],
        [
            "Lemma ex_maxnP : ex_maxn_spec ex_maxn.",
            "VernacStartTheoremProof",
            "c272555ccc7a060f82a0d0ad9e94f2e6f141d16a"
        ],
        [
            "rewrite /ex_maxn; case: ex_minnP => i Pmi min_i; split=> // j Pj.",
            "VernacExtend",
            "2253759ff5c580854290fce82296a80357452125"
        ],
        [
            "have le_i_mj: i <= m - j by rewrite min_i // subKn // ubP.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -subn_eq0 subnBA ?(leq_trans le_i_mj) ?leq_subr //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite addnC -subnBA ?ubP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ExMaxn.",
            "VernacEndSegment",
            "8f0da78b7383149f698c944a98a82606dc6f6e1e"
        ],
        [
            "Lemma eq_ex_minn P Q exP exQ : P =1 Q -> @ex_minn P exP = @ex_minn Q exQ.",
            "VernacStartTheoremProof",
            "c6a90406ed9755929a4d44bd5c4faa019d65d432"
        ],
        [
            "move=> eqPQ; case: ex_minnP => m1 Pm1 m1_lb; case: ex_minnP => m2 Pm2 m2_lb.",
            "VernacExtend",
            "fd777b019349da348ceeb72ef62c9f8d707a4c0b"
        ],
        [
            "by apply/eqP; rewrite eqn_leq m1_lb (m2_lb, eqPQ) // -eqPQ.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_ex_maxn (P Q : pred nat) m n exP ubP exQ ubQ : P =1 Q -> @ex_maxn P m exP ubP = @ex_maxn Q n exQ ubQ.",
            "VernacStartTheoremProof",
            "800ff3a0275d55b6f7152e06b62a1facf5b0d6d0"
        ],
        [
            "move=> eqPQ; case: ex_maxnP => i Pi max_i; case: ex_maxnP => j Pj max_j.",
            "VernacExtend",
            "fd777b019349da348ceeb72ef62c9f8d707a4c0b"
        ],
        [
            "by apply/eqP; rewrite eqn_leq max_i ?eqPQ // max_j -?eqPQ.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Iteration.",
            "VernacBeginSection",
            "66bca3c608c37f923cd27bc5d74ffb938d8f8bdf"
        ],
        [
            "Variable T : Type.",
            "VernacAssumption",
            "a15b17e37c4241158d544882375356c273dc93f2"
        ],
        [
            "Implicit Types m n : nat.",
            "VernacReserve",
            "0ecfe15bad90ec7331aed44f013a28555260d9c8"
        ],
        [
            "Implicit Types x y : T.",
            "VernacReserve",
            "dffa3d8127715759eaec1c07eaa9c95d50e83474"
        ],
        [
            "Definition iter n f x := let fix loop m := if m is i.+1 then f (loop i) else x in loop n.",
            "VernacDefinition",
            "d1ac38fa605ed339d01a48af6426fdb14a333236"
        ],
        [
            "Definition iteri n f x := let fix loop m := if m is i.+1 then f i (loop i) else x in loop n.",
            "VernacDefinition",
            "8006ab9c712a13f823da85ed79bfdb5c8bd6221c"
        ],
        [
            "Definition iterop n op x := let f i y := if i is 0 then x else op x y in iteri n f.",
            "VernacDefinition",
            "442d158bedbd8bec4536212d15be9bd2cde80831"
        ],
        [
            "Lemma iterSr n f x : iter n.+1 f x = iter n f (f x).",
            "VernacStartTheoremProof",
            "e134cb947a31b06c2fa6d3e6aeaa9f1cd8e88408"
        ],
        [
            "by elim: n => //= n <-.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iterS n f x : iter n.+1 f x = f (iter n f x).",
            "VernacStartTheoremProof",
            "35a2b5b17847341eddb62a401ba769a325bfea38"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iter_add n m f x : iter (n + m) f x = iter n f (iter m f x).",
            "VernacStartTheoremProof",
            "189af8be23caad3d6ca845c17018e0e4dcd8c1c8"
        ],
        [
            "by elim: n => //= n ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iteriS n f x : iteri n.+1 f x = f n (iteri n f x).",
            "VernacStartTheoremProof",
            "5f7d7948b5df0cbebc15089d06b40d04c93e8c14"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iteropS idx n op x : iterop n.+1 op x idx = iter n (op x) x.",
            "VernacStartTheoremProof",
            "c880aedd6a48ff28caa431f9ff957555f9549d5a"
        ],
        [
            "by elim: n => //= n ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_iter f f' : f =1 f' -> forall n, iter n f =1 iter n f'.",
            "VernacStartTheoremProof",
            "63ced2a3ea8abbd25c307a76292efc0029468546"
        ],
        [
            "by move=> eq_f n x; elim: n => //= n ->; rewrite eq_f.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_iteri f f' : f =2 f' -> forall n, iteri n f =1 iteri n f'.",
            "VernacStartTheoremProof",
            "da4eb3b64f3873f10f61e59ba9272f6415181448"
        ],
        [
            "by move=> eq_f n x; elim: n => //= n ->; rewrite eq_f.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_iterop n op op' : op =2 op' -> iterop n op =2 iterop n op'.",
            "VernacStartTheoremProof",
            "2a5884e52b493fc9dd1937dc45412294d396088b"
        ],
        [
            "by move=> eq_op x; apply: eq_iteri; case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Iteration.",
            "VernacEndSegment",
            "5f7c4e39e72bc51c4bbe8d4735b3412dfa00568f"
        ],
        [
            "Lemma iter_succn m n : iter n succn m = m + n.",
            "VernacStartTheoremProof",
            "b2b71753bc908b72048d6bde094fbc9344d40e96"
        ],
        [
            "by elim: n => //= n ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iter_succn_0 n : iter n succn 0 = n.",
            "VernacStartTheoremProof",
            "1d61c73e90af96d64954c7f4bf131089bce5a90f"
        ],
        [
            "exact: iter_succn.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iter_predn m n : iter n predn m = m - n.",
            "VernacStartTheoremProof",
            "41546a45550f9002905622a3bc119832e05b136f"
        ],
        [
            "by elim: n m => /= [|n IHn] m; rewrite ?subn0 // IHn subnS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition muln_rec := mult.",
            "VernacDefinition",
            "e63cdbcc669113b42b95251194980e8a6eb3b9d7"
        ],
        [
            "Notation \"m * n\" := (muln_rec m n) : nat_rec_scope.",
            "VernacNotation",
            "9a2178f7edf7cd0cbbdf8693e74ad9c7b81f0156"
        ],
        [
            "Definition muln := nosimpl muln_rec.",
            "VernacDefinition",
            "a9d00f3b4029acbd43f24e3d7ec5eb4eb9b241e0"
        ],
        [
            "Notation \"m * n\" := (muln m n) : nat_scope.",
            "VernacNotation",
            "ddda73d00c11da76005fb3463e418059a661dfb0"
        ],
        [
            "Lemma multE : mult = muln.",
            "VernacStartTheoremProof",
            "b1bce09da3f7e6afbcbca10ed673208b2dbbfd9c"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulnE : muln = muln_rec.",
            "VernacStartTheoremProof",
            "353bef03f5fd88a896cdb31e31b9e0810fabf744"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mul0n : left_zero 0 muln.",
            "VernacStartTheoremProof",
            "86a7cd93a3ee97fd5757a900b88a8ce8396ead7d"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma muln0 : right_zero 0 muln.",
            "VernacStartTheoremProof",
            "b01fe578a74bb25d0362dc9b863401727f46fb4c"
        ],
        [
            "by elim.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mul1n : left_id 1 muln.",
            "VernacStartTheoremProof",
            "ae19ceb534c7a93f7457393a084e2cd66d3bfeea"
        ],
        [
            "exact: addn0.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulSn m n : m.+1 * n = n + m * n.",
            "VernacStartTheoremProof",
            "6185d0f3313d7f2556faaa09c23efb860a982821"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulSnr m n : m.+1 * n = m * n + n.",
            "VernacStartTheoremProof",
            "23c1c92bfb787c63341488449bba1d16c67d5fc1"
        ],
        [
            "exact: addnC.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulnS m n : m * n.+1 = m + m * n.",
            "VernacStartTheoremProof",
            "d83176716d0565262bda52921692d821e4d97a16"
        ],
        [
            "by elim: m => // m; rewrite !mulSn !addSn addnCA => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulnSr m n : m * n.+1 = m * n + m.",
            "VernacStartTheoremProof",
            "a06db900973e59e3a737bc3a5c632f41322597d7"
        ],
        [
            "by rewrite addnC mulnS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iter_addn m n p : iter n (addn m) p = m * n + p.",
            "VernacStartTheoremProof",
            "cc028fc71c74cea19e3eada63b6338c5234e6544"
        ],
        [
            "by elim: n => /= [|n ->]; rewrite ?muln0 // mulnS addnA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iter_addn_0 m n : iter n (addn m) 0 = m * n.",
            "VernacStartTheoremProof",
            "3f63132cd48c957ebe1627af20487b6b0876b793"
        ],
        [
            "by rewrite iter_addn addn0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma muln1 : right_id 1 muln.",
            "VernacStartTheoremProof",
            "96bd1e34579881922abc8e21a82ee2cd8054c69a"
        ],
        [
            "by move=> n; rewrite mulnSr muln0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulnC : commutative muln.",
            "VernacStartTheoremProof",
            "51dc54cb48e90b793be6d0d4cf4dc72d391f7896"
        ],
        [
            "by move=> m n; elim: m => [|m]; rewrite (muln0, mulnS) // mulSn => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulnDl : left_distributive muln addn.",
            "VernacStartTheoremProof",
            "dccb6bb3b8c9031a3e907cdaec123a7cfc9fe890"
        ],
        [
            "by move=> m1 m2 n; elim: m1 => //= m1 IHm; rewrite -addnA -IHm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulnDr : right_distributive muln addn.",
            "VernacStartTheoremProof",
            "e86095138cc8ffd85e5c8c1333b6af4e6311f8ff"
        ],
        [
            "by move=> m n1 n2; rewrite !(mulnC m) mulnDl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulnBl : left_distributive muln subn.",
            "VernacStartTheoremProof",
            "5f29d67392a66408d3bcf26596d2dbe7973b02c3"
        ],
        [
            "move=> m n [|p]; first by rewrite !muln0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by elim: m n => // [m IHm] [|n] //; rewrite mulSn subnDl -IHm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulnBr : right_distributive muln subn.",
            "VernacStartTheoremProof",
            "a321a9bf281981856fa9446b9515529a93c4bc4d"
        ],
        [
            "by move=> m n p; rewrite !(mulnC m) mulnBl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulnA : associative muln.",
            "VernacStartTheoremProof",
            "7abc54c1ce6fc65fffc546b94bc652c344774d21"
        ],
        [
            "by move=> m n p; elim: m => //= m; rewrite mulSn mulnDl => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulnCA : left_commutative muln.",
            "VernacStartTheoremProof",
            "be077df3aa59cbd0bc4f1716f1113f1823c3aa44"
        ],
        [
            "by move=> m n1 n2; rewrite !mulnA (mulnC m).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulnAC : right_commutative muln.",
            "VernacStartTheoremProof",
            "4111cff21a91dbd1d069a17544ce3c2203b63e0b"
        ],
        [
            "by move=> m n p; rewrite -!mulnA (mulnC n).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulnACA : interchange muln muln.",
            "VernacStartTheoremProof",
            "8fde7501dce69cbd24bc0ff813ea9f7d154ebe8a"
        ],
        [
            "by move=> m n p q; rewrite -!mulnA (mulnCA n).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma muln_eq0 m n : (m * n == 0) = (m == 0) || (n == 0).",
            "VernacStartTheoremProof",
            "ff86026643f3381322d7cf0eaac5a87a2c97c159"
        ],
        [
            "by case: m n => // m [|n] //=; rewrite muln0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma muln_eq1 m n : (m * n == 1) = (m == 1) && (n == 1).",
            "VernacStartTheoremProof",
            "1ed3a64cbb8fbfb1bf1ddc4b984654e30e3af71b"
        ],
        [
            "by case: m n => [|[|m]] [|[|n]] //; rewrite muln0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma muln_gt0 m n : (0 < m * n) = (0 < m) && (0 < n).",
            "VernacStartTheoremProof",
            "9b2c81acb88c0a91ab57817bb41d93794f884311"
        ],
        [
            "by case: m n => // m [|n] //=; rewrite muln0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_pmull m n : n > 0 -> m <= n * m.",
            "VernacStartTheoremProof",
            "38be499509c3c1795f673a6592867ec940d22bc0"
        ],
        [
            "by move/prednK <-; apply: leq_addr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_pmulr m n : n > 0 -> m <= m * n.",
            "VernacStartTheoremProof",
            "7031fe5c4f99651e55e6c93a4b8800b27b2ef80d"
        ],
        [
            "by move/leq_pmull; rewrite mulnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_mul2l m n1 n2 : (m * n1 <= m * n2) = (m == 0) || (n1 <= n2).",
            "VernacStartTheoremProof",
            "a162b3b40ab6407516b26e728e2e148b06ecf202"
        ],
        [
            "by rewrite {1}/leq -mulnBr muln_eq0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_mul2r m n1 n2 : (n1 * m <= n2 * m) = (m == 0) || (n1 <= n2).",
            "VernacStartTheoremProof",
            "8efd3399bf9390df7ec7ee5c7b40e2097b4e6323"
        ],
        [
            "by rewrite -!(mulnC m) leq_mul2l.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_mul m1 m2 n1 n2 : m1 <= n1 -> m2 <= n2 -> m1 * m2 <= n1 * n2.",
            "VernacStartTheoremProof",
            "1512eda9e1a108b37163094b7e7ab73418c590f0"
        ],
        [
            "move=> le_mn1 le_mn2; apply (@leq_trans (m1 * n2)).",
            "VernacExtend",
            "647467b9d1253dccb9aceefac1ef0beabd40dadf"
        ],
        [
            "by rewrite leq_mul2l le_mn2 orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite leq_mul2r le_mn1 orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqn_mul2l m n1 n2 : (m * n1 == m * n2) = (m == 0) || (n1 == n2).",
            "VernacStartTheoremProof",
            "1bf59a4f4096c64c761c8df379c6685e8ba25737"
        ],
        [
            "by rewrite eqn_leq !leq_mul2l -orb_andr -eqn_leq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqn_mul2r m n1 n2 : (n1 * m == n2 * m) = (m == 0) || (n1 == n2).",
            "VernacStartTheoremProof",
            "d86d761fbec4afa56670f010c24ba52b9965a314"
        ],
        [
            "by rewrite eqn_leq !leq_mul2r -orb_andr -eqn_leq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_pmul2l m n1 n2 : 0 < m -> (m * n1 <= m * n2) = (n1 <= n2).",
            "VernacStartTheoremProof",
            "df1636e423b74d92121570fbfadb4ba044a04563"
        ],
        [
            "by move/prednK=> <-; rewrite leq_mul2l.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments leq_pmul2l [m n1 n2].",
            "VernacArguments",
            "d062e2dc1964afacfb4aac95fedfddd8eea3e511"
        ],
        [
            "Lemma leq_pmul2r m n1 n2 : 0 < m -> (n1 * m <= n2 * m) = (n1 <= n2).",
            "VernacStartTheoremProof",
            "1876373cca609f5c831e9ff73354f6f268624bd4"
        ],
        [
            "by move/prednK <-; rewrite leq_mul2r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments leq_pmul2r [m n1 n2].",
            "VernacArguments",
            "414171072544776fc9462d2983f362ef71185582"
        ],
        [
            "Lemma eqn_pmul2l m n1 n2 : 0 < m -> (m * n1 == m * n2) = (n1 == n2).",
            "VernacStartTheoremProof",
            "75545fc5fe5db224f75c11ff7fe4f84049accfec"
        ],
        [
            "by move/prednK <-; rewrite eqn_mul2l.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments eqn_pmul2l [m n1 n2].",
            "VernacArguments",
            "b226f6b4761f48cdcc676bcb0d53df9f6219064b"
        ],
        [
            "Lemma eqn_pmul2r m n1 n2 : 0 < m -> (n1 * m == n2 * m) = (n1 == n2).",
            "VernacStartTheoremProof",
            "67f274fff46ace806b0af201c41d703b27c8d6cf"
        ],
        [
            "by move/prednK <-; rewrite eqn_mul2r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments eqn_pmul2r [m n1 n2].",
            "VernacArguments",
            "7e8179f6549dd8536a623f984a96adc2d37b7e86"
        ],
        [
            "Lemma ltn_mul2l m n1 n2 : (m * n1 < m * n2) = (0 < m) && (n1 < n2).",
            "VernacStartTheoremProof",
            "7ccc7d89609db931f6d61d58376b1b1b5b66ab59"
        ],
        [
            "by rewrite lt0n !ltnNge leq_mul2l negb_or.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn_mul2r m n1 n2 : (n1 * m < n2 * m) = (0 < m) && (n1 < n2).",
            "VernacStartTheoremProof",
            "35484909996d6d20b4973c942a03e114c560b983"
        ],
        [
            "by rewrite lt0n !ltnNge leq_mul2r negb_or.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn_pmul2l m n1 n2 : 0 < m -> (m * n1 < m * n2) = (n1 < n2).",
            "VernacStartTheoremProof",
            "6ce011c95f2169c969ad3d2cfe16fef73e00c451"
        ],
        [
            "by move/prednK <-; rewrite ltn_mul2l.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments ltn_pmul2l [m n1 n2].",
            "VernacArguments",
            "1291ca37cb3cf15f6d9cf267d3998deff084b949"
        ],
        [
            "Lemma ltn_pmul2r m n1 n2 : 0 < m -> (n1 * m < n2 * m) = (n1 < n2).",
            "VernacStartTheoremProof",
            "b78d59f9046a3ea39ff4c11c0c484a33d64ab565"
        ],
        [
            "by move/prednK <-; rewrite ltn_mul2r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments ltn_pmul2r [m n1 n2].",
            "VernacArguments",
            "38fdc3ea5e1ee8af45b5ed16c2d31c7cdb3921ab"
        ],
        [
            "Lemma ltn_Pmull m n : 1 < n -> 0 < m -> m < n * m.",
            "VernacStartTheoremProof",
            "5b5fba20bcfa8c5102fd330bdf6b4b14919b7bcc"
        ],
        [
            "by move=> lt1n m_gt0; rewrite -{1}[m]mul1n ltn_pmul2r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn_Pmulr m n : 1 < n -> 0 < m -> m < m * n.",
            "VernacStartTheoremProof",
            "62dfe6eaf917131ff024a289fbd4f042e4ecf2d7"
        ],
        [
            "by move=> lt1n m_gt0; rewrite mulnC ltn_Pmull.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn_mul m1 m2 n1 n2 : m1 < n1 -> m2 < n2 -> m1 * m2 < n1 * n2.",
            "VernacStartTheoremProof",
            "578ae16e6e02f7c379b6440a3d17aa1a789ffb40"
        ],
        [
            "move=> lt_mn1 lt_mn2; apply (@leq_ltn_trans (m1 * n2)).",
            "VernacExtend",
            "06d155ce14556e044824202e260cfcb0404718a8"
        ],
        [
            "by rewrite leq_mul2l orbC ltnW.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite ltn_pmul2r // (leq_trans _ lt_mn2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxn_mulr : right_distributive muln maxn.",
            "VernacStartTheoremProof",
            "a41616dd61b3f2576e174e2175293747cbed2376"
        ],
        [
            "by case=> // m n1 n2; rewrite /maxn (fun_if (muln _)) ltn_pmul2l.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxn_mull : left_distributive muln maxn.",
            "VernacStartTheoremProof",
            "d8aa3e55690cbbdb4f0bcb0ca51c6c3d1bc46908"
        ],
        [
            "by move=> m1 m2 n; rewrite -!(mulnC n) maxn_mulr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minn_mulr : right_distributive muln minn.",
            "VernacStartTheoremProof",
            "2956a696331daaffdc8e008448792a3c8ff9ae05"
        ],
        [
            "by case=> // m n1 n2; rewrite /minn (fun_if (muln _)) ltn_pmul2l.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minn_mull : left_distributive muln minn.",
            "VernacStartTheoremProof",
            "fe37b111298de8b953c952b63b8bc942b1e3c633"
        ],
        [
            "by move=> m1 m2 n; rewrite -!(mulnC n) minn_mulr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition expn_rec m n := iterop n muln m 1.",
            "VernacDefinition",
            "bb410c85ee4450d0e69293c0206682763e52a93c"
        ],
        [
            "Notation \"m ^ n\" := (expn_rec m n) : nat_rec_scope.",
            "VernacNotation",
            "f8125966a5d53c70f7c0012ebd6efb6f8e3131e2"
        ],
        [
            "Definition expn := nosimpl expn_rec.",
            "VernacDefinition",
            "db47e9fba9880dd444a86dcb39063e516d64100d"
        ],
        [
            "Notation \"m ^ n\" := (expn m n) : nat_scope.",
            "VernacNotation",
            "11227aaeb2bc4846f920c8f8d20de10c2d785142"
        ],
        [
            "Lemma expnE : expn = expn_rec.",
            "VernacStartTheoremProof",
            "895ce8e948e81388dbbfd5ac14fdf63515954c0a"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expn0 m : m ^ 0 = 1.",
            "VernacStartTheoremProof",
            "10c80cd63d223b296b7e4dd50be790f68494aeff"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expn1 m : m ^ 1 = m.",
            "VernacStartTheoremProof",
            "039c8a1ad653e8211cde89f2221c54b062648c58"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expnS m n : m ^ n.+1 = m * m ^ n.",
            "VernacStartTheoremProof",
            "e72c9b2ac067d3ba472372b074323deb6670c681"
        ],
        [
            "by case: n; rewrite ?muln1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expnSr m n : m ^ n.+1 = m ^ n * m.",
            "VernacStartTheoremProof",
            "f47ca21ee936f181eac3142b78be9eb3dda3e913"
        ],
        [
            "by rewrite mulnC expnS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iter_muln m n p : iter n (muln m) p = m ^ n * p.",
            "VernacStartTheoremProof",
            "c3facc80eb1b40e001fb224e79bfdfefd22446ac"
        ],
        [
            "by elim: n => /= [|n ->]; rewrite ?mul1n // expnS mulnA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iter_muln_1 m n : iter n (muln m) 1 = m ^ n.",
            "VernacStartTheoremProof",
            "88f10ec200aed15b1dda56f1da201e12fde76738"
        ],
        [
            "by rewrite iter_muln muln1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exp0n n : 0 < n -> 0 ^ n = 0.",
            "VernacStartTheoremProof",
            "54042e0a257b58344afde46477175d254dd0ebac"
        ],
        [
            "by case: n => [|[]].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exp1n n : 1 ^ n = 1.",
            "VernacStartTheoremProof",
            "901996b50b50f17b772b4307e92c6399dee77d6b"
        ],
        [
            "by elim: n => // n; rewrite expnS mul1n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expnD m n1 n2 : m ^ (n1 + n2) = m ^ n1 * m ^ n2.",
            "VernacStartTheoremProof",
            "5c0505185753fc81a4a42c6e819a5bedb614a6c9"
        ],
        [
            "by elim: n1 => [|n1 IHn]; rewrite !(mul1n, expnS) // IHn mulnA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expnMn m1 m2 n : (m1 * m2) ^ n = m1 ^ n * m2 ^ n.",
            "VernacStartTheoremProof",
            "eeb7f36a93a2b25b6da34ccf7c7681b323075a8f"
        ],
        [
            "by elim: n => // n IHn; rewrite !expnS IHn -!mulnA (mulnCA m2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expnM m n1 n2 : m ^ (n1 * n2) = (m ^ n1) ^ n2.",
            "VernacStartTheoremProof",
            "625fdd76449e5c228a3518cc2c277e63540dcd23"
        ],
        [
            "elim: n1 => [|n1 IHn]; first by rewrite exp1n.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite expnD expnS expnMn IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expnAC m n1 n2 : (m ^ n1) ^ n2 = (m ^ n2) ^ n1.",
            "VernacStartTheoremProof",
            "1d9dbbfc45c920c68ab4847d58941890a3358e7b"
        ],
        [
            "by rewrite -!expnM mulnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expn_gt0 m n : (0 < m ^ n) = (0 < m) || (n == 0).",
            "VernacStartTheoremProof",
            "dc1f7bca2b698d45cb7321076a6f1880ecaa02e9"
        ],
        [
            "by case: m => [|m]; elim: n => //= n IHn; rewrite expnS // addn_gt0 IHn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expn_eq0 m e : (m ^ e == 0) = (m == 0) && (e > 0).",
            "VernacStartTheoremProof",
            "49c341eb02e6f7a165e7007b04bf17581b0cf7ac"
        ],
        [
            "by rewrite !eqn0Ngt expn_gt0 negb_or -lt0n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn_expl m n : 1 < m -> n < m ^ n.",
            "VernacStartTheoremProof",
            "70c33800a2c7eaca664d8f25b2d657b11f6f9059"
        ],
        [
            "move=> m_gt1; elim: n => //= n; rewrite -(leq_pmul2l (ltnW m_gt1)) expnS.",
            "VernacExtend",
            "cbbd752ffe762291637c91622d62599b0c60d123"
        ],
        [
            "by apply: leq_trans; apply: ltn_Pmull.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_exp2l m n1 n2 : 1 < m -> (m ^ n1 <= m ^ n2) = (n1 <= n2).",
            "VernacStartTheoremProof",
            "f60f98aa16ecf683ef68c926a4d00ceaf9608bee"
        ],
        [
            "move=> m_gt1; elim: n1 n2 => [|n1 IHn] [|n2] //; last 1 first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite !expnS leq_pmul2l ?IHn // ltnW.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite expn_gt0 ltnW.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite leqNgt (leq_trans m_gt1) // expnS leq_pmulr // expn_gt0 ltnW.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn_exp2l m n1 n2 : 1 < m -> (m ^ n1 < m ^ n2) = (n1 < n2).",
            "VernacStartTheoremProof",
            "1e1cbf21cd68b71be1410ad964cd9cde4f8fb828"
        ],
        [
            "by move=> m_gt1; rewrite !ltnNge leq_exp2l.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqn_exp2l m n1 n2 : 1 < m -> (m ^ n1 == m ^ n2) = (n1 == n2).",
            "VernacStartTheoremProof",
            "27a762dd629a1f57386f738cb7a986fbb20cb03d"
        ],
        [
            "by move=> m_gt1; rewrite !eqn_leq !leq_exp2l.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expnI m : 1 < m -> injective (expn m).",
            "VernacStartTheoremProof",
            "c7fe65c2ba4fbfced8eba54c5ed53383e46abaf7"
        ],
        [
            "by move=> m_gt1 e1 e2 /eqP; rewrite eqn_exp2l // => /eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_pexp2l m n1 n2 : 0 < m -> n1 <= n2 -> m ^ n1 <= m ^ n2.",
            "VernacStartTheoremProof",
            "e784074b26ae46ebc7a3d57649478bcc31d5dd90"
        ],
        [
            "by case: m => [|[|m]] // _; [rewrite !exp1n | rewrite leq_exp2l].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn_pexp2l m n1 n2 : 0 < m -> m ^ n1 < m ^ n2 -> n1 < n2.",
            "VernacStartTheoremProof",
            "0b3a082a02ffa7101a69c38e3ca7763de07d5541"
        ],
        [
            "by case: m => [|[|m]] // _; [rewrite !exp1n | rewrite ltn_exp2l].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn_exp2r m n e : e > 0 -> (m ^ e < n ^ e) = (m < n).",
            "VernacStartTheoremProof",
            "b8b3c5610aee57b8e6cbfc96228d2d2ec89d6bcb"
        ],
        [
            "move=> e_gt0; apply/idP/idP=> [|ltmn].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "rewrite !ltnNge; apply: contra => lemn.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by elim: e {e_gt0} => // e IHe; rewrite !expnS leq_mul.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by elim: e e_gt0 => // [[|e] IHe] _; rewrite ?expn1 // ltn_mul // IHe.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_exp2r m n e : e > 0 -> (m ^ e <= n ^ e) = (m <= n).",
            "VernacStartTheoremProof",
            "40281d9acfc0d7e1be38c26153282626a5176705"
        ],
        [
            "by move=> e_gt0; rewrite leqNgt ltn_exp2r // -leqNgt.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqn_exp2r m n e : e > 0 -> (m ^ e == n ^ e) = (m == n).",
            "VernacStartTheoremProof",
            "ffa1f015871b672fb4adc76c023c5338f413d742"
        ],
        [
            "by move=> e_gt0; rewrite !eqn_leq !leq_exp2r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expIn e : e > 0 -> injective (expn^~ e).",
            "VernacStartTheoremProof",
            "91a7cfc1855404da2284f304cd0f8950866fe3f3"
        ],
        [
            "by move=> e_gt1 m n /eqP; rewrite eqn_exp2r // => /eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint fact_rec n := if n is n'.+1 then n * fact_rec n' else 1.",
            "VernacFixpoint",
            "2139e3ad0c57ccc2bfe1b13995d4435b1d43f6e0"
        ],
        [
            "Definition factorial := nosimpl fact_rec.",
            "VernacDefinition",
            "6703e70735c487945f7f4ca6f371058e6332cfee"
        ],
        [
            "Notation \"n `!\" := (factorial n) (at level 2, format \"n `!\") : nat_scope.",
            "VernacNotation",
            "143ccee62523dfda1d28aa2e6583413b88d5c930"
        ],
        [
            "Lemma factE : factorial = fact_rec.",
            "VernacStartTheoremProof",
            "9b03c0b24fc4d3e3e0b75e3c6b3776ddf5c6c085"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fact0 : 0`! = 1.",
            "VernacStartTheoremProof",
            "9b7efb88c00cf498e2b2d9c4dd701aea86b830bd"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma factS n : (n.+1)`! = n.+1 * n`!.",
            "VernacStartTheoremProof",
            "250e496c90740da9a5291fc7452311dee1836a3c"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fact_gt0 n : n`! > 0.",
            "VernacStartTheoremProof",
            "c7c34cf79fc80ca8e05faa32b89258319487f9f7"
        ],
        [
            "by elim: n => //= n IHn; rewrite muln_gt0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Coercion nat_of_bool (b : bool) := if b then 1 else 0.",
            "VernacDefinition",
            "369a92ddeb8bb4e6d6055de7c603ddcd9e365423"
        ],
        [
            "Lemma leq_b1 (b : bool) : b <= 1.",
            "VernacStartTheoremProof",
            "fccdbf5410b02abc626db5d7c29145834192e5b6"
        ],
        [
            "by case: b.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addn_negb (b : bool) : ~~ b + b = 1.",
            "VernacStartTheoremProof",
            "1b1335ea2dde9051748743c6520074855e8dbdbd"
        ],
        [
            "by case: b.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqb0 (b : bool) : (b == 0 :> nat) = ~~ b.",
            "VernacStartTheoremProof",
            "f2b86fad97f1a4be4eb5b9e7059133e856234533"
        ],
        [
            "by case: b.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqb1 (b : bool) : (b == 1 :> nat) = b.",
            "VernacStartTheoremProof",
            "4643dc9401348fab1cdedf47b45bc3dafbf04379"
        ],
        [
            "by case: b.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lt0b (b : bool) : (b > 0) = b.",
            "VernacStartTheoremProof",
            "2303903198b77324ff89d1130d72b226307447f6"
        ],
        [
            "by case: b.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub1b (b : bool) : 1 - b = ~~ b.",
            "VernacStartTheoremProof",
            "6453698bb6dca61407bd6004646ce5b7e0ac6c6e"
        ],
        [
            "by case: b.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulnb (b1 b2 : bool) : b1 * b2 = b1 && b2.",
            "VernacStartTheoremProof",
            "527b111eba9684509246a21f65ebf5c8bd7bf72e"
        ],
        [
            "by case: b1; case: b2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulnbl (b : bool) n : b * n = (if b then n else 0).",
            "VernacStartTheoremProof",
            "e9ab5a9805bc0d2100b4b6aecfbb1db668c4573f"
        ],
        [
            "by case: b; rewrite ?mul1n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulnbr (b : bool) n : n * b = (if b then n else 0).",
            "VernacStartTheoremProof",
            "61e80e4b323c85a832c92fb1587e43689cee05ab"
        ],
        [
            "by rewrite mulnC mulnbl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint odd n := if n is n'.+1 then ~~ odd n' else false.",
            "VernacFixpoint",
            "2249e9f4f9212c09bd5e1195503d558e97ecdce8"
        ],
        [
            "Lemma oddb (b : bool) : odd b = b.",
            "VernacStartTheoremProof",
            "c28a1a727ca281ea970c336d0a6cb54f7d8f7eb2"
        ],
        [
            "by case: b.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma odd_add m n : odd (m + n) = odd m (+) odd n.",
            "VernacStartTheoremProof",
            "20fd6b28bb2faa0fda3bed02ddfd4c005a67bb3b"
        ],
        [
            "by elim: m => [|m IHn] //=; rewrite -addTb IHn addbA addTb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma odd_sub m n : n <= m -> odd (m - n) = odd m (+) odd n.",
            "VernacStartTheoremProof",
            "3a336acb802f69a63a9930232a19809807a1caa9"
        ],
        [
            "by move=> le_nm; apply: (@canRL bool) (addbK _) _; rewrite -odd_add subnK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma odd_opp i m : odd m = false -> i <= m -> odd (m - i) = odd i.",
            "VernacStartTheoremProof",
            "041156138aead372845a07a93e006201be1923ab"
        ],
        [
            "by move=> oddm le_im; rewrite (odd_sub (le_im)) oddm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma odd_mul m n : odd (m * n) = odd m && odd n.",
            "VernacStartTheoremProof",
            "fbe4007fc5ba9a119d469cfc1085e6f3c1870179"
        ],
        [
            "by elim: m => //= m IHm; rewrite odd_add -addTb andb_addl -IHm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma odd_exp m n : odd (m ^ n) = (n == 0) || odd m.",
            "VernacStartTheoremProof",
            "351295639bc26b9ffe512e21ffab52aa8cd05e27"
        ],
        [
            "by elim: n => // n IHn; rewrite expnS odd_mul {}IHn orbC; case odd.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint double_rec n := if n is n'.+1 then n'.*2%Nrec.+2 else 0 where \"n .*2\" := (double_rec n) : nat_rec_scope.",
            "VernacFixpoint",
            "3c018481c1c5201dba863596650fbd17801c6e16"
        ],
        [
            "Definition double := nosimpl double_rec.",
            "VernacDefinition",
            "01d4ee20ff425f8b919468dc92d2d5f9b71ad87e"
        ],
        [
            "Notation \"n .*2\" := (double n) : nat_scope.",
            "VernacNotation",
            "ee944a146649009e2b3b4b0135b622153b67c6ce"
        ],
        [
            "Lemma doubleE : double = double_rec.",
            "VernacStartTheoremProof",
            "745ace290bde02e434bc859dd01d7225dbfdaf18"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma double0 : 0.*2 = 0.",
            "VernacStartTheoremProof",
            "3a9e88722008354108e7f34b923686601c018252"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma doubleS n : n.+1.*2 = n.*2.+2.",
            "VernacStartTheoremProof",
            "dbe0384476c42a16c9e9bab70e42709b94f59187"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma addnn n : n + n = n.*2.",
            "VernacStartTheoremProof",
            "3c562122911cb68d72b12369b011c03356f841ca"
        ],
        [
            "by apply: eqP; elim: n => // n IHn; rewrite addnS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mul2n m : 2 * m = m.*2.",
            "VernacStartTheoremProof",
            "0c536b1c0fa9ca8ca8abdb4f0df4c0fb0a5999cd"
        ],
        [
            "by rewrite mulSn mul1n addnn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma muln2 m : m * 2 = m.*2.",
            "VernacStartTheoremProof",
            "cc3fda3f68e19601ac3bba99f78cedfe00129454"
        ],
        [
            "by rewrite mulnC mul2n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma doubleD m n : (m + n).*2 = m.*2 + n.*2.",
            "VernacStartTheoremProof",
            "444b46cb8cc4e05a750068217fafd9feb46de7ca"
        ],
        [
            "by rewrite -!addnn -!addnA (addnCA n).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma doubleB m n : (m - n).*2 = m.*2 - n.*2.",
            "VernacStartTheoremProof",
            "f681a0ae3f7b4a1653591a4e20b4d946131c367b"
        ],
        [
            "by elim: m n => [|m IHm] [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_double m n : (m.*2 <= n.*2) = (m <= n).",
            "VernacStartTheoremProof",
            "d7da94d88517c25c2fc768fa2eb8bf516139aa63"
        ],
        [
            "by rewrite /leq -doubleB; case (m - n).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn_double m n : (m.*2 < n.*2) = (m < n).",
            "VernacStartTheoremProof",
            "2019350d58e647c7a3fb5dc8c0b54db1e2100d34"
        ],
        [
            "by rewrite 2!ltnNge leq_double.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn_Sdouble m n : (m.*2.+1 < n.*2) = (m < n).",
            "VernacStartTheoremProof",
            "cf133a5bd2c5415b713625295daa64ce8a2ffd4d"
        ],
        [
            "by rewrite -doubleS leq_double.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_Sdouble m n : (m.*2 <= n.*2.+1) = (m <= n).",
            "VernacStartTheoremProof",
            "4919d69e67317a979811d64bba6d5c1bbbe60c81"
        ],
        [
            "by rewrite leqNgt ltn_Sdouble -leqNgt.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma odd_double n : odd n.*2 = false.",
            "VernacStartTheoremProof",
            "59e558a5f5b88b20abb443b786167a874f904035"
        ],
        [
            "by rewrite -addnn odd_add addbb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma double_gt0 n : (0 < n.*2) = (0 < n).",
            "VernacStartTheoremProof",
            "158b37e70fea734000ca0e7f56d5c587efa8fad3"
        ],
        [
            "by case: n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma double_eq0 n : (n.*2 == 0) = (n == 0).",
            "VernacStartTheoremProof",
            "595256e1fa90c741a6bb5fb5958d014fe5201885"
        ],
        [
            "by case: n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma doubleMl m n : (m * n).*2 = m.*2 * n.",
            "VernacStartTheoremProof",
            "9321502e6797265ede9c2c47c051154e3021911b"
        ],
        [
            "by rewrite -!mul2n mulnA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma doubleMr m n : (m * n).*2 = m * n.*2.",
            "VernacStartTheoremProof",
            "c0b813e7b190fcf38c86c6cc64906b3859808e63"
        ],
        [
            "by rewrite -!muln2 mulnA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint half (n : nat) : nat := if n is n'.+1 then uphalf n' else n with uphalf (n : nat) : nat := if n is n'.+1 then n'./2.+1 else n where \"n ./2\" := (half n) : nat_scope.",
            "VernacFixpoint",
            "a5517636cd373744eb2639134b7280c51592dbc6"
        ],
        [
            "Lemma doubleK : cancel double half.",
            "VernacStartTheoremProof",
            "945691932c07f902e70e9ae270a88975ca3e2a57"
        ],
        [
            "by elim=> //= n ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition half_double := doubleK.",
            "VernacDefinition",
            "19c90b630ba51f1cf73844f03b4057c62b5a70ca"
        ],
        [
            "Definition double_inj := can_inj doubleK.",
            "VernacDefinition",
            "265135bcf0a003430deba4881286ab5dd56662c9"
        ],
        [
            "Lemma uphalf_double n : uphalf n.*2 = n.",
            "VernacStartTheoremProof",
            "9f8c70455691d1071d41458fd3f112e5a1bf98b9"
        ],
        [
            "by elim: n => //= n ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma uphalf_half n : uphalf n = odd n + n./2.",
            "VernacStartTheoremProof",
            "916bde114689ce5c54cc3e38fa2268f98a4b774d"
        ],
        [
            "by elim: n => //= n ->; rewrite addnA addn_negb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma odd_double_half n : odd n + n./2.*2 = n.",
            "VernacStartTheoremProof",
            "b8da83770cb5623287bf32875845c1541504ab67"
        ],
        [
            "by elim: n => //= n {3}<-; rewrite uphalf_half doubleD; case (odd n).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma half_bit_double n (b : bool) : (b + n.*2)./2 = n.",
            "VernacStartTheoremProof",
            "0444b91a6be2ceb60dc75274dc065ab97499a078"
        ],
        [
            "by case: b; rewrite /= (half_double, uphalf_double).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma halfD m n : (m + n)./2 = (odd m && odd n) + (m./2 + n./2).",
            "VernacStartTheoremProof",
            "da72bad4bd4a1d9fd4962f2357a0e06839f3de27"
        ],
        [
            "rewrite -{1}[n]odd_double_half addnCA -{1}[m]odd_double_half -addnA -doubleD.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by do 2!case: odd; rewrite /= ?add0n ?half_double ?uphalf_double.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma half_leq m n : m <= n -> m./2 <= n./2.",
            "VernacStartTheoremProof",
            "b96d06a73db9e292f0aba07d2337ff91526f5ac3"
        ],
        [
            "by move/subnK <-; rewrite halfD addnA leq_addl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma half_gt0 n : (0 < n./2) = (1 < n).",
            "VernacStartTheoremProof",
            "da909fbc4509b31ad2f70219ba3b616e11c16f8a"
        ],
        [
            "by case: n => [|[]].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma odd_geq m n : odd n -> (m <= n) = (m./2.*2 <= n).",
            "VernacStartTheoremProof",
            "bccac236153531b78920a8d462263b75b3680ded"
        ],
        [
            "move=> odd_n; rewrite -{1}[m]odd_double_half -[n]odd_double_half odd_n.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by case: (odd m); rewrite // leq_Sdouble ltnS leq_double.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma odd_ltn m n : odd n -> (n < m) = (n < m./2.*2).",
            "VernacStartTheoremProof",
            "42a21c6c659bf393d715929bc73141addca66258"
        ],
        [
            "by move=> odd_n; rewrite !ltnNge odd_geq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma odd_gt0 n : odd n -> n > 0.",
            "VernacStartTheoremProof",
            "60de3fa4d7b7ae857e878b285a3e0dbc3048c4d8"
        ],
        [
            "by case: n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma odd_gt2 n : odd n -> n > 1 -> n > 2.",
            "VernacStartTheoremProof",
            "35dbc1b5731e4c85608bd552919a640310efc4af"
        ],
        [
            "by move=> odd_n n_gt1; rewrite odd_geq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulnn m : m * m = m ^ 2.",
            "VernacStartTheoremProof",
            "08e0b719aa41e3717a4283f139efa03eaa9c65cd"
        ],
        [
            "by rewrite !expnS muln1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqrnD m n : (m + n) ^ 2 = m ^ 2 + n ^ 2 + 2 * (m * n).",
            "VernacStartTheoremProof",
            "af3ba30db95faed2856adb853d265bc7ac116138"
        ],
        [
            "rewrite -!mulnn mul2n mulnDr !mulnDl (mulnC n) -!addnA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by congr (_ + _); rewrite addnA addnn addnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqrn_sub m n : n <= m -> (m - n) ^ 2 = m ^ 2 + n ^ 2 - 2 * (m * n).",
            "VernacStartTheoremProof",
            "f285211f991a9132fcfb418264e42a2e1128b134"
        ],
        [
            "move/subnK=> def_m; rewrite -{2}def_m sqrnD -addnA addnAC.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite -2!addnA addnn -mul2n -mulnDr -mulnDl def_m addnK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqrnD_sub m n : n <= m -> (m + n) ^ 2 - 4 * (m * n) = (m - n) ^ 2.",
            "VernacStartTheoremProof",
            "5b4539d577444fe4f68dc3a35798db226d165649"
        ],
        [
            "move=> le_nm; rewrite -[4]/(2 * 2) -mulnA mul2n -addnn subnDA.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite sqrnD addnK sqrn_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subn_sqr m n : m ^ 2 - n ^ 2 = (m - n) * (m + n).",
            "VernacStartTheoremProof",
            "145788b12f26733b76bf1ab25ffa302309e7474a"
        ],
        [
            "by rewrite mulnBl !mulnDr addnC (mulnC m) subnDl !mulnn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn_sqr m n : (m ^ 2 < n ^ 2) = (m < n).",
            "VernacStartTheoremProof",
            "95af09baaf604f25ae8f9c53a26aaa0734d9c25f"
        ],
        [
            "by rewrite ltn_exp2r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_sqr m n : (m ^ 2 <= n ^ 2) = (m <= n).",
            "VernacStartTheoremProof",
            "e5c3f0ab9184146bf5518a798fc2046893d0e04f"
        ],
        [
            "by rewrite leq_exp2r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqrn_gt0 n : (0 < n ^ 2) = (0 < n).",
            "VernacStartTheoremProof",
            "006fcea90ea31e14a493dfa765c60ef2df28115d"
        ],
        [
            "exact: (ltn_sqr 0).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eqn_sqr m n : (m ^ 2 == n ^ 2) = (m == n).",
            "VernacStartTheoremProof",
            "84f4df03b0344f9097b26ba4b8c9cdbfa321ef31"
        ],
        [
            "by rewrite eqn_exp2r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sqrn_inj : injective (expn ^~ 2).",
            "VernacStartTheoremProof",
            "3c45ba8e11b05e3a2206e752ba3bf6a2c49bdd1e"
        ],
        [
            "exact: expIn.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition leqif m n C := ((m <= n) * ((m == n) = C))%type.",
            "VernacDefinition",
            "b82c5b54b928b9e92c2e7d6650a2623e83db2f57"
        ],
        [
            "Notation \"m <= n ?= 'iff' C\" := (leqif m n C) : nat_scope.",
            "VernacNotation",
            "b59daeee2fcbdf905517f7efddd50df6e491245f"
        ],
        [
            "Coercion leq_of_leqif m n C (H : m <= n ?= iff C) := H.1 : m <= n.",
            "VernacDefinition",
            "f6f7085f0777e2f0ec1ad4d601872fcf7e077187"
        ],
        [
            "Lemma leqifP m n C : reflect (m <= n ?= iff C) (if C then m == n else m < n).",
            "VernacStartTheoremProof",
            "f1e9dd1ff468b796317ac7148f4a2da6a92f7824"
        ],
        [
            "rewrite ltn_neqAle; apply: (iffP idP) => [|lte]; last by rewrite !lte; case C.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case C => [/eqP-> | /andP[/negPf]]; split=> //; apply: eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leqif_refl m C : reflect (m <= m ?= iff C) C.",
            "VernacStartTheoremProof",
            "fb23e327dd3670e746d9d1a0ccde7188015be6ad"
        ],
        [
            "by apply: (iffP idP) => [-> | <-] //; split; rewrite ?eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leqif_trans m1 m2 m3 C12 C23 : m1 <= m2 ?= iff C12 -> m2 <= m3 ?= iff C23 -> m1 <= m3 ?= iff C12 && C23.",
            "VernacStartTheoremProof",
            "f0d1fa0c29f0b2d225abfd5ee0ba15d12d382363"
        ],
        [
            "move=> ltm12 ltm23; apply/leqifP; rewrite -ltm12.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "case eqm12: (m1 == m2).",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite (eqP eqm12) ltn_neqAle !ltm23 andbT; case C23.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite (@leq_trans m2) ?ltm23 // ltn_neqAle eqm12 ltm12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mono_leqif f : {mono f : m n / m <= n} -> forall m n C, (f m <= f n ?= iff C) = (m <= n ?= iff C).",
            "VernacStartTheoremProof",
            "7bcff193e0b2d92e5ab20daad08aede54e94fd6f"
        ],
        [
            "by move=> f_mono m n C; rewrite /leqif !eqn_leq !f_mono.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leqif_geq m n : m <= n -> m <= n ?= iff (m >= n).",
            "VernacStartTheoremProof",
            "0bf5b59d543150f52b44143fe7b23d9cd301f930"
        ],
        [
            "by move=> lemn; split=> //; rewrite eqn_leq lemn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leqif_eq m n : m <= n -> m <= n ?= iff (m == n).",
            "VernacStartTheoremProof",
            "2dfb69e4145108036fbae082ab41f38fb0dd16bc"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma geq_leqif a b C : a <= b ?= iff C -> (b <= a) = C.",
            "VernacStartTheoremProof",
            "2294df0a5b8f5215858ddc0ccb65478d358a7c81"
        ],
        [
            "by case=> le_ab; rewrite eqn_leq le_ab.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltn_leqif a b C : a <= b ?= iff C -> (a < b) = ~~ C.",
            "VernacStartTheoremProof",
            "cfa58cc443ef5217fde348783f5cd2f7a59d3cb5"
        ],
        [
            "by move=> le_ab; rewrite ltnNge (geq_leqif le_ab).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leqif_add m1 n1 C1 m2 n2 C2 : m1 <= n1 ?= iff C1 -> m2 <= n2 ?= iff C2 -> m1 + m2 <= n1 + n2 ?= iff C1 && C2.",
            "VernacStartTheoremProof",
            "db30fd8ca2ac424168192ea3e24af3bd4b5f888c"
        ],
        [
            "rewrite -(mono_leqif (leq_add2r m2)) -(mono_leqif (leq_add2l n1) m2).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "exact: leqif_trans.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leqif_mul m1 n1 C1 m2 n2 C2 : m1 <= n1 ?= iff C1 -> m2 <= n2 ?= iff C2 -> m1 * m2 <= n1 * n2 ?= iff (n1 * n2 == 0) || (C1 && C2).",
            "VernacStartTheoremProof",
            "4691da8aa1dcc4238a9a059424c81966089f9f1c"
        ],
        [
            "case: n1 => [|n1] le1; first by case: m1 le1 => [|m1] [_ <-] //.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case: n2 m2 => [|n2] [|m2] /=; try by case=> // _ <-; rewrite !muln0 ?andbF.",
            "VernacExtend",
            "700e4ba7c43aef376de752aa78d70ea0bf66a54e"
        ],
        [
            "have /leq_pmul2l-/mono_leqif<-: 0 < n1.+1 by [].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: leqif_trans; have /leq_pmul2r-/mono_leqif->: 0 < m2.+1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nat_Cauchy m n : 2 * (m * n) <= m ^ 2 + n ^ 2 ?= iff (m == n).",
            "VernacStartTheoremProof",
            "5af8cd8e4a819abde7f4c2ed40f4c76c1615918b"
        ],
        [
            "without loss le_nm: m n / n <= m.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "by case: (leqP m n); auto; rewrite eq_sym addnC (mulnC m); auto.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/leqifP; case: ifP => [/eqP-> | ne_mn]; first by rewrite mulnn addnn mul2n.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -subn_gt0 -sqrn_sub // sqrn_gt0 subn_gt0 ltn_neqAle eq_sym ne_mn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nat_AGM2 m n : 4 * (m * n) <= (m + n) ^ 2 ?= iff (m == n).",
            "VernacStartTheoremProof",
            "60909c1ad8b444e34e1aaa276332e372e9692b05"
        ],
        [
            "rewrite -[4]/(2 * 2) -mulnA mul2n -addnn sqrnD; apply/leqifP.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite ltn_add2r eqn_add2r ltn_neqAle !nat_Cauchy; case: ifP => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Monotonicity.",
            "VernacBeginSection",
            "6917b453478371a5625a5a73cea62a26435d5e68"
        ],
        [
            "Variable T : Type.",
            "VernacAssumption",
            "a15b17e37c4241158d544882375356c273dc93f2"
        ],
        [
            "Lemma homo_ltn_in (D : pred nat) (f : nat -> T) (r : T -> T -> Prop) : (forall y x z, r x y -> r y z -> r x z) -> {in D &, forall i j k, i < k < j -> k \\in D} -> {in D, forall i, i.+1 \\in D -> r (f i) (f i.+1)} -> {in D &, {homo f : i j / i < j >-> r i j}}.",
            "VernacStartTheoremProof",
            "f0214e58524b29083c355ff834f393fc51a93b82"
        ],
        [
            "move=> r_trans Dcx r_incr i j iD jD lt_ij; move: (lt_ij) (jD) => /subnKC<-.",
            "VernacExtend",
            "8b784377bdc4d565ff66d4cf36a6041e9354c156"
        ],
        [
            "elim: (_ - _) => [|k ihk]; first by rewrite addn0 => Dsi; apply: r_incr.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move=> DSiSk [: DSik]; apply: (r_trans _ _ _ (ihk _)); rewrite ?addnS.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by abstract: DSik; apply: (Dcx _ _ iD DSiSk); rewrite ltn_addr ?addnS /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: r_incr; rewrite -?addnS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma homo_ltn (f : nat -> T) (r : T -> T -> Prop) : (forall y x z, r x y -> r y z -> r x z) -> (forall i, r (f i) (f i.+1)) -> {homo f : i j / i < j >-> r i j}.",
            "VernacStartTheoremProof",
            "04072095d6baab529292767d365b78f7f0cd9a56"
        ],
        [
            "by move=> /(@homo_ltn_in predT f) fr fS i j; apply: fr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma homo_leq_in (D : pred nat) (f : nat -> T) (r : T -> T -> Prop) : (forall x, r x x) -> (forall y x z, r x y -> r y z -> r x z) -> {in D &, forall i j k, i < k < j -> k \\in D} -> {in D, forall i, i.+1 \\in D -> r (f i) (f i.+1)} -> {in D &, {homo f : i j / i <= j >-> r i j}}.",
            "VernacStartTheoremProof",
            "e5f9f87bce996b379468a46a6e41ada495a55685"
        ],
        [
            "move=> r_refl r_trans Dcx /(homo_ltn_in r_trans Dcx) lt_r i j iD jD.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by rewrite leq_eqVlt => /predU1P[->//|/lt_r]; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma homo_leq (f : nat -> T) (r : T -> T -> Prop) : (forall x, r x x) -> (forall y x z, r x y -> r y z -> r x z) -> (forall i, r (f i) (f i.+1)) -> {homo f : i j / i <= j >-> r i j}.",
            "VernacStartTheoremProof",
            "3c0e896d631d77e845c12d0c1cb2f81c64474086"
        ],
        [
            "by move=> rrefl /(@homo_leq_in predT f r) fr fS i j; apply: fr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section NatToNat.",
            "VernacBeginSection",
            "4e0e8b1ddb20653f3ca98666eaed4a546e87f0d6"
        ],
        [
            "Variable (f : nat -> nat).",
            "VernacAssumption",
            "9adb468466b32fbc8b3c877261547aa2e67f4a97"
        ],
        [
            "Let ltn_neqAle := ltn_neqAle.",
            "VernacDefinition",
            "d36f512403cac6636a5a10aa3bf5fef2cdbd97ff"
        ],
        [
            "Let gtn_neqAge x y : (y < x) = (x != y) && (y <= x).",
            "VernacDefinition",
            "01159dcb0812a44b2a6f2b0ec4e12b958316dad7"
        ],
        [
            "by rewrite ltn_neqAle eq_sym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let anti_leq := anti_leq.",
            "VernacDefinition",
            "b73c5bbddbded8e6ebc02993ed5d6aa2c5077bb6"
        ],
        [
            "Let anti_geq : antisymmetric geq.",
            "VernacDefinition",
            "e05ea5c7be1bec807e56d60f8952962a157b7cba"
        ],
        [
            "by move=> m n /=; rewrite andbC => /anti_leq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let leq_total := leq_total.",
            "VernacDefinition",
            "5165041cd7339aa4486b786ac0bab2f987d5af96"
        ],
        [
            "Lemma ltnW_homo : {homo f : m n / m < n} -> {homo f : m n / m <= n}.",
            "VernacStartTheoremProof",
            "7e0d153c6d5e632e07b75e7e2901a1f635ad84eb"
        ],
        [
            "exact: homoW.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma homo_inj_lt : injective f -> {homo f : m n / m <= n} -> {homo f : m n / m < n}.",
            "VernacStartTheoremProof",
            "8ed27953362fcfa61aae05a21a37c3661e1d759a"
        ],
        [
            "exact: inj_homo.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltnW_nhomo : {homo f : m n /~ m < n} -> {homo f : m n /~ m <= n}.",
            "VernacStartTheoremProof",
            "cc94bf52ccf024d8136fa45914a11a1fc42fdc8c"
        ],
        [
            "exact: homoW.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nhomo_inj_lt : injective f -> {homo f : m n /~ m <= n} -> {homo f : m n /~ m < n}.",
            "VernacStartTheoremProof",
            "96decc43f47c40b828b14fc7656431dfc9305b8b"
        ],
        [
            "exact: inj_homo.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma incrn_inj : {mono f : m n / m <= n} -> injective f.",
            "VernacStartTheoremProof",
            "cf65464e8f4fd07f9d3da19d0d3cd7be3ff851a7"
        ],
        [
            "exact: mono_inj.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma decrn_inj : {mono f : m n /~ m <= n} -> injective f.",
            "VernacStartTheoremProof",
            "a6518bd2dcaee822430bc10fc8d0b091d8531f7e"
        ],
        [
            "exact: mono_inj.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leqW_mono : {mono f : m n / m <= n} -> {mono f : m n / m < n}.",
            "VernacStartTheoremProof",
            "c5f04e28873539a128fa41deee82ea9f1af1b6e9"
        ],
        [
            "exact: anti_mono.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leqW_nmono : {mono f : m n /~ m <= n} -> {mono f : m n /~ m < n}.",
            "VernacStartTheoremProof",
            "4265e4af6aa6790fbfba3472d17301b1a609e851"
        ],
        [
            "exact: anti_mono.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_mono : {homo f : m n / m < n} -> {mono f : m n / m <= n}.",
            "VernacStartTheoremProof",
            "46026dd361f8f938e5a30799fdb1dccfb59d54e5"
        ],
        [
            "exact: total_homo_mono.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_nmono : {homo f : m n /~ m < n} -> {mono f : m n /~ m <= n}.",
            "VernacStartTheoremProof",
            "4e5cb80403c4672b9b0f99e8ae2d9c005ef9ffce"
        ],
        [
            "exact: total_homo_mono.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variable (D D' : pred nat).",
            "VernacAssumption",
            "37c82fdaff0aa37a4ca981b74a310946e4cdd533"
        ],
        [
            "Lemma ltnW_homo_in : {in D & D', {homo f : m n / m < n}} -> {in D & D', {homo f : m n / m <= n}}.",
            "VernacStartTheoremProof",
            "42e9638281c95610b2feefc724f6915443cd5f99"
        ],
        [
            "exact: homoW_in.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ltnW_nhomo_in : {in D & D', {homo f : m n /~ m < n}} -> {in D & D', {homo f : m n /~ m <= n}}.",
            "VernacStartTheoremProof",
            "0df262ccc289c4e4021a3350fd3f4ac9155718d8"
        ],
        [
            "exact: homoW_in.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma homo_inj_lt_in : {in D & D', injective f} -> {in D & D', {homo f : m n / m <= n}} -> {in D & D', {homo f : m n / m < n}}.",
            "VernacStartTheoremProof",
            "324b9f7773af2e67c1d75943e84b99c3feffbe5a"
        ],
        [
            "exact: inj_homo_in.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nhomo_inj_lt_in : {in D & D', injective f} -> {in D & D', {homo f : m n /~ m <= n}} -> {in D & D', {homo f : m n /~ m < n}}.",
            "VernacStartTheoremProof",
            "85542959c48aa2b1828969d0f74cad91735272ff"
        ],
        [
            "exact: inj_homo_in.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma incrn_inj_in : {in D &, {mono f : m n / m <= n}} -> {in D &, injective f}.",
            "VernacStartTheoremProof",
            "945f721ffbbbd96b8942db0e6a155281426fef0b"
        ],
        [
            "exact: mono_inj_in.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma decrn_inj_in : {in D &, {mono f : m n /~ m <= n}} -> {in D &, injective f}.",
            "VernacStartTheoremProof",
            "94be7b17a1a8d2f825427074437883e3206284be"
        ],
        [
            "exact: mono_inj_in.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leqW_mono_in : {in D &, {mono f : m n / m <= n}} -> {in D &, {mono f : m n / m < n}}.",
            "VernacStartTheoremProof",
            "125576989a5e55a0c0d21712d765eb80a2c0411f"
        ],
        [
            "exact: anti_mono_in.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leqW_nmono_in : {in D &, {mono f : m n /~ m <= n}} -> {in D &, {mono f : m n /~ m < n}}.",
            "VernacStartTheoremProof",
            "df61e89f64e4419bc99ca4d64e0b2eb98c624e9b"
        ],
        [
            "exact: anti_mono_in.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_mono_in : {in D &, {homo f : m n / m < n}} -> {in D &, {mono f : m n / m <= n}}.",
            "VernacStartTheoremProof",
            "60aa83a3eb685422cbe87493a05844d37c31465c"
        ],
        [
            "exact: total_homo_mono_in.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_nmono_in : {in D &, {homo f : m n /~ m < n}} -> {in D &, {mono f : m n /~ m <= n}}.",
            "VernacStartTheoremProof",
            "a04f22c23e0f89842dc89a81b583fea7b34ccfec"
        ],
        [
            "exact: total_homo_mono_in.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End NatToNat.",
            "VernacEndSegment",
            "cc1f0cd7ac558335beaba4f3978e9d924d3c8bc5"
        ],
        [
            "End Monotonicity.",
            "VernacEndSegment",
            "423de9cd96973925c004f94a094ccb9d0dd2c63f"
        ],
        [
            "Module NatTrec.",
            "VernacDefineModule",
            "c3222c8c6e6c05b3c94f22ad125fb59fba829d55"
        ],
        [
            "Fixpoint add m n := if m is m'.+1 then m' + n.+1 else n where \"n + m\" := (add n m) : nat_scope.",
            "VernacFixpoint",
            "1e14861dba746b4d802a977e0c09a07aab34bef1"
        ],
        [
            "Fixpoint add_mul m n s := if m is m'.+1 then add_mul m' n (n + s) else s.",
            "VernacFixpoint",
            "39ec6854ad5d8c86fc50749bac085256e2aa17bb"
        ],
        [
            "Definition mul m n := if m is m'.+1 then add_mul m' n n else 0.",
            "VernacDefinition",
            "6434703ccc3b6c5441e606266639915e5ca0e44c"
        ],
        [
            "Notation \"n * m\" := (mul n m) : nat_scope.",
            "VernacNotation",
            "24b3826f3a35c9e6f123927aaad6d3fe574edec1"
        ],
        [
            "Fixpoint mul_exp m n p := if n is n'.+1 then mul_exp m n' (m * p) else p.",
            "VernacFixpoint",
            "629c83dcaef9828794aeed8c1f2b6c3e48da40ba"
        ],
        [
            "Definition exp m n := if n is n'.+1 then mul_exp m n' m else 1.",
            "VernacDefinition",
            "b56a33fd155be4b560e6bf987cc9c45646c82269"
        ],
        [
            "Notation \"n ^ m\" := (exp n m) : nat_scope.",
            "VernacNotation",
            "c67838745e17a02d3c0d8f2f8903b0f449a25c48"
        ],
        [
            "Local Notation oddn := odd.",
            "VernacSyntacticDefinition",
            "f79f379c90c1e1885581853cab97fba376ff4c90"
        ],
        [
            "Fixpoint odd n := if n is n'.+2 then odd n' else eqn n 1.",
            "VernacFixpoint",
            "a47e0017cf79ac247e19dff42d02f9a53016de26"
        ],
        [
            "Local Notation doublen := double.",
            "VernacSyntacticDefinition",
            "f765643f8c46594bbe3bd75eb51ad239c2500618"
        ],
        [
            "Definition double n := if n is n'.+1 then n' + n.+1 else 0.",
            "VernacDefinition",
            "ca213b07a60875ae5923fe84b9a7e32727add75d"
        ],
        [
            "Notation \"n .*2\" := (double n) : nat_scope.",
            "VernacNotation",
            "ee944a146649009e2b3b4b0135b622153b67c6ce"
        ],
        [
            "Lemma addE : add =2 addn.",
            "VernacStartTheoremProof",
            "9fd22f59c9fb3151fc1d7050bff61c07e57d32cf"
        ],
        [
            "by elim=> //= n IHn m; rewrite IHn addSnnS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma doubleE : double =1 doublen.",
            "VernacStartTheoremProof",
            "5ad698b0301ce7f53033e933951a83aad3a58ee5"
        ],
        [
            "by case=> // n; rewrite -addnn -addE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add_mulE n m s : add_mul n m s = addn (muln n m) s.",
            "VernacStartTheoremProof",
            "810036420da9e49d782ef67560d39e34ea8f9b9a"
        ],
        [
            "by elim: n => //= n IHn in m s *; rewrite IHn addE addnCA addnA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mulE : mul =2 muln.",
            "VernacStartTheoremProof",
            "b05923e239f45be1c3724aa8934432f856dccd96"
        ],
        [
            "by case=> //= n m; rewrite add_mulE addnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mul_expE m n p : mul_exp m n p = muln (expn m n) p.",
            "VernacStartTheoremProof",
            "0112ecd43d44f89837e81720aca1be0c57042816"
        ],
        [
            "by elim: n => [|n IHn] in p *; rewrite ?mul1n //= expnS IHn mulE mulnCA mulnA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma expE : exp =2 expn.",
            "VernacStartTheoremProof",
            "8a479a861700ddee916f8adc3a85c4119b2d1eb0"
        ],
        [
            "by move=> m [|n] //=; rewrite mul_expE expnS mulnC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma oddE : odd =1 oddn.",
            "VernacStartTheoremProof",
            "edaee65082a6a3b9c1850de036c7a43b83124463"
        ],
        [
            "move=> n; rewrite -{1}[n]odd_double_half addnC.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by elim: n./2 => //=; case (oddn n).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition trecE := (addE, (doubleE, oddE), (mulE, add_mulE, (expE, mul_expE))).",
            "VernacDefinition",
            "21ae49b8e3199181611a8b24285b482188146bd3"
        ],
        [
            "End NatTrec.",
            "VernacEndSegment",
            "79658227a7653e33bbc67be124c0da35bd66d205"
        ],
        [
            "Notation natTrecE := NatTrec.trecE.",
            "VernacSyntacticDefinition",
            "5a5cb0a135ce2c77c1cbcaa9cd55a05d47ab169b"
        ],
        [
            "Lemma eq_binP : Equality.axiom N.eqb.",
            "VernacStartTheoremProof",
            "35f397ad9daa45482c01fecf770f2fa9f12cef38"
        ],
        [
            "move=> p q; apply: (iffP idP) => [|<-]; last by case: p => //; elim.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case: q; case: p => //; elim=> [p IHp|p IHp|] [q|q|] //=; case/IHp=> ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical bin_nat_eqMixin := EqMixin eq_binP.",
            "VernacDefinition",
            "f43381ee5d36664aaa19cae5750677a37188b949"
        ],
        [
            "Canonical bin_nat_eqType := Eval hnf in EqType N bin_nat_eqMixin.",
            "VernacDefinition",
            "c55f4b634bbf766f5d012c26563bf71a336de181"
        ],
        [
            "Arguments N.eqb !n !m.",
            "VernacArguments",
            "24e2bac88d3b8e06b024e6780e02688500456a68"
        ],
        [
            "Section NumberInterpretation.",
            "VernacBeginSection",
            "ba16219badcabce1a343a72f82ad9fd2c3531d84"
        ],
        [
            "Import BinPos.",
            "VernacImport",
            "c1be3fe9843bc4b5feba5e259ca8164afecea6d9"
        ],
        [
            "Section Trec.",
            "VernacBeginSection",
            "ad58ad1cdea22fd8423c304158e6f847820cc0b5"
        ],
        [
            "Import NatTrec.",
            "VernacImport",
            "3fd9423feb5bef67b8445432ed6db13142dd3e2a"
        ],
        [
            "Fixpoint nat_of_pos p0 := match p0 with | xO p => (nat_of_pos p).*2 | xI p => (nat_of_pos p).*2.+1 | xH => 1 end.",
            "VernacFixpoint",
            "30cb212f9c14f55eee0d9f60fd1761b3080f5342"
        ],
        [
            "End Trec.",
            "VernacEndSegment",
            "08c66b86241a60a285e45b0d97421b5342d4955c"
        ],
        [
            "Local Coercion nat_of_pos : positive >-> nat.",
            "VernacCoercion",
            "fe1c118ddecc0ffa56d75258aca566ffe2c3595c"
        ],
        [
            "Coercion nat_of_bin b := if b is Npos p then p : nat else 0.",
            "VernacDefinition",
            "2771f6bb07d49cf0fd3f49054a218ecc124d1bc5"
        ],
        [
            "Fixpoint pos_of_nat n0 m0 := match n0, m0 with | n.+1, m.+2 => pos_of_nat n m | n.+1, 1 => xO (pos_of_nat n n) | n.+1, 0 => xI (pos_of_nat n n) | 0, _ => xH end.",
            "VernacFixpoint",
            "0919d44d8e2c80baf2ea26d11fdb9554c17d4567"
        ],
        [
            "Definition bin_of_nat n0 := if n0 is n.+1 then Npos (pos_of_nat n n) else 0%num.",
            "VernacDefinition",
            "ce411c2ff4245aa73fa7451beb0bea3855e466b7"
        ],
        [
            "Lemma bin_of_natK : cancel bin_of_nat nat_of_bin.",
            "VernacStartTheoremProof",
            "770c13f332b2568b5eadb796f7fa481fc366881a"
        ],
        [
            "have sub2nn n : n.*2 - n = n by rewrite -addnn addKn.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case=> //= n; rewrite -{3}[n]sub2nn.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by elim: n {2 4}n => // m IHm [|[|n]] //=; rewrite IHm // natTrecE sub2nn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nat_of_binK : cancel nat_of_bin bin_of_nat.",
            "VernacStartTheoremProof",
            "0a27ffe9f459fb3142510c1848dd55b6ba8521b8"
        ],
        [
            "case=> //=; elim=> //= p; case: (nat_of_pos p) => //= n [<-].",
            "VernacExtend",
            "c29e152975328b3268c589a57d72024817264bbf"
        ],
        [
            "by rewrite natTrecE !addnS {2}addnn; elim: {1 3}n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite natTrecE addnS /= addnS {2}addnn; elim: {1 3}n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nat_of_succ_gt0 p : Pos.succ p = p.+1 :> nat.",
            "VernacStartTheoremProof",
            "0a47a2f7b306e243244e77b4b37ccbc365e44198"
        ],
        [
            "by elim: p => //= p ->; rewrite !natTrecE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nat_of_addn_gt0 p q : (p + q)%positive = p + q :> nat.",
            "VernacStartTheoremProof",
            "0499be9dbf19676416211e5ff1ec71b2259114e2"
        ],
        [
            "apply: @fst _ (Pplus_carry p q = (p + q).+1 :> nat) _.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "elim: p q => [p IHp|p IHp|] [q|q|] //=; rewrite !natTrecE //; by rewrite ?IHp ?nat_of_succ_gt0 ?(doubleS, doubleD, addn1, addnS).",
            "VernacExtend",
            "244a9a5eebe0941cff21b86f46627271de195205"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nat_of_add_bin b1 b2 : (b1 + b2)%num = b1 + b2 :> nat.",
            "VernacStartTheoremProof",
            "c4bfb037ed19e1035bda0641b86d3bd37a895451"
        ],
        [
            "by case: b1 b2 => [|p] [|q] //=; apply: nat_of_addn_gt0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nat_of_mul_bin b1 b2 : (b1 * b2)%num = b1 * b2 :> nat.",
            "VernacStartTheoremProof",
            "073b37cdda0d2790493dfd9e99c1cc5e395e18eb"
        ],
        [
            "case: b1 b2 => [|p] [|q] //=; elim: p => [p IHp|p IHp|] /=; by rewrite ?(mul1n, nat_of_addn_gt0, mulSn) //= !natTrecE IHp doubleMl.",
            "VernacExtend",
            "4509d94a53292381d19ec171948355b40d55da39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nat_of_exp_bin n (b : N) : n ^ b = pow_N 1 muln n b.",
            "VernacStartTheoremProof",
            "84bb608ef4ff65605dd48fa43a574f5e3dd0c1d0"
        ],
        [
            "by case: b; last (elim=> //= p <-; rewrite natTrecE mulnn -expnM muln2 ?expnS).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End NumberInterpretation.",
            "VernacEndSegment",
            "084b475880b9a53810c3a590221952d5dc9f7463"
        ],
        [
            "Record number : Type := Num {bin_of_number :> N}.",
            "VernacInductive",
            "5d219481933883c2f57796cdcbf8d8cfb9d22694"
        ],
        [
            "Definition extend_number (nn : number) m := Num (nn * 1000 + bin_of_nat m).",
            "VernacDefinition",
            "a54c4097dd3491590dc250d3025ec07790913b39"
        ],
        [
            "Coercion extend_number : number >-> Funclass.",
            "VernacCoercion",
            "265824c3970015bbc59764beb18e91337097f288"
        ],
        [
            "Canonical number_subType := [newType for bin_of_number].",
            "VernacDefinition",
            "1d8f262d2be096ef5129f56430f9d3402f7be9c6"
        ],
        [
            "Definition number_eqMixin := Eval hnf in [eqMixin of number by <:].",
            "VernacDefinition",
            "f686432a341020f6e14cd65c7ebe45cb62c8740e"
        ],
        [
            "Canonical number_eqType := Eval hnf in EqType number number_eqMixin.",
            "VernacDefinition",
            "d97fc261fd51eef5d12ce65d4151b8996f677090"
        ],
        [
            "Notation \"[ 'Num' 'of' e ]\" := (Num (bin_of_nat e)) (at level 0, format \"[ 'Num' 'of' e ]\") : nat_scope.",
            "VernacNotation",
            "aa8ac2531908eb0da47da3ef2db7c7331d3e8a29"
        ],
        [
            "Lemma nat_semi_ring : semi_ring_theory 0 1 addn muln (@eq _).",
            "VernacStartTheoremProof",
            "d1511cc6bb515e176e5fb20837d1ab99d8a64fb4"
        ],
        [
            "exact: mk_srt add0n addnC addnA mul1n mul0n mulnC mulnA mulnDl.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nat_semi_morph : semi_morph 0 1 addn muln (@eq _) 0%num 1%num Nplus Nmult pred1 nat_of_bin.",
            "VernacStartTheoremProof",
            "3665d5d8bea481ffaaa19edbac6b97a200a8511a"
        ],
        [
            "by move: nat_of_add_bin nat_of_mul_bin; split=> //= m n; move/eqP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nat_power_theory : power_theory 1 muln (@eq _) nat_of_bin expn.",
            "VernacStartTheoremProof",
            "0d48532e3d427b5b27c9def35b0237616245a04a"
        ],
        [
            "by split; apply: nat_of_exp_bin.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint pop_succn e := if e is e'.+1 then fun n => pop_succn e' n.+1 else id.",
            "VernacFixpoint",
            "46b6f24154249aa2f19047a4557128c73f02deb0"
        ],
        [
            "Ltac pop_succn e := eval lazy beta iota delta [pop_succn] in (pop_succn e 1).",
            "VernacExtend",
            "bcb1bcff9d1219db12e114a4d98a392f4294fb82"
        ],
        [
            "Ltac nat_litteral e := match pop_succn e with | ?n.+1 => constr: (bin_of_nat n) | _ => NotConstant end.",
            "VernacExtend",
            "d7e507842c82d5b83aed784bd56b710aef134f09"
        ],
        [
            "Ltac succn_to_add := match goal with | |- context G [?e.+1] => let x := fresh \"NatLit0\" in match pop_succn e with | ?n.+1 => pose x := n.+1; let G' := context G [x] in change G' | _ ?e' ?n => pose x := n; let G' := context G [x + e'] in change G' end; succn_to_add; rewrite {}/x | _ => idtac end.",
            "VernacExtend",
            "78443b569b10a43e0d644987bc4fbc99f5292651"
        ],
        [
            "Add Ring nat_ring_ssr : nat_semi_ring (morphism nat_semi_morph, constants [nat_litteral], preprocess [succn_to_add], power_tac nat_power_theory [nat_litteral]).",
            "VernacExtend",
            "505f45a1a5d6087bb85d4cc10d90521be80c2c42"
        ],
        [
            "Ltac nat_norm := succn_to_add; rewrite ?add0n ?addn0 -?addnA ?(addSn, addnS, add0n, addn0).",
            "VernacExtend",
            "acc1dd8be33a083d0c505797b3376c12c4f51252"
        ],
        [
            "Ltac nat_congr := first [ apply: (congr1 succn _) | apply: (congr1 predn _) | apply: (congr1 (addn _) _) | apply: (congr1 (subn _) _) | apply: (congr1 (addn^~ _) _) | match goal with |- (?X1 + ?X2 = ?X3) => symmetry; rewrite -1?(addnC X1) -?(addnCA X1); apply: (congr1 (addn X1) _); symmetry end ].",
            "VernacExtend",
            "0a98e8be2e4eb5ae8b6659246e5158dd668a5827"
        ]
    ],
    "proofs": [
        {
            "name": "succnK",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "succn_inj",
            "line_nb": 30,
            "steps": [
                {
                    "command": [
                        "by move=> n m [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqnE",
            "line_nb": 44,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqSS",
            "line_nb": 47,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nat_irrelevance",
            "line_nb": 50,
            "steps": [
                {
                    "command": [
                        "exact: eq_irrelevance.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addnE",
            "line_nb": 57,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "plusE",
            "line_nb": 60,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add0n",
            "line_nb": 63,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addSn",
            "line_nb": 66,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add1n",
            "line_nb": 69,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addn0",
            "line_nb": 72,
            "steps": [
                {
                    "command": [
                        "by move=> n; apply/eqP; elim: n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addnS",
            "line_nb": 75,
            "steps": [
                {
                    "command": [
                        "by elim: m.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addSnnS",
            "line_nb": 78,
            "steps": [
                {
                    "command": [
                        "by rewrite addnS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addnCA",
            "line_nb": 81,
            "steps": [
                {
                    "command": [
                        "by move=> m n p; elim: m => //= m; rewrite addnS => <-.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addnC",
            "line_nb": 84,
            "steps": [
                {
                    "command": [
                        "by move=> m n; rewrite -{1}[n]addn0 addnCA addn0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addn1",
            "line_nb": 87,
            "steps": [
                {
                    "command": [
                        "by rewrite addnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addnA",
            "line_nb": 90,
            "steps": [
                {
                    "command": [
                        "by move=> m n p; rewrite (addnC n) addnCA addnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addnAC",
            "line_nb": 93,
            "steps": [
                {
                    "command": [
                        "by move=> m n p; rewrite -!addnA (addnC n).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addnACA",
            "line_nb": 96,
            "steps": [
                {
                    "command": [
                        "by move=> m n p q; rewrite -!addnA (addnCA n).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addn_eq0",
            "line_nb": 99,
            "steps": [
                {
                    "command": [
                        "by case: m; case: n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqn_add2l",
            "line_nb": 102,
            "steps": [
                {
                    "command": [
                        "by elim: p.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqn_add2r",
            "line_nb": 105,
            "steps": [
                {
                    "command": [
                        "by rewrite -!(addnC p) eqn_add2l.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addnI",
            "line_nb": 108,
            "steps": [
                {
                    "command": [
                        "by move=> p m n Heq; apply: eqP; rewrite -(eqn_add2l p) Heq eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addIn",
            "line_nb": 111,
            "steps": [
                {
                    "command": [
                        "move=> p m n; rewrite -!(addnC p); apply addnI.",
                        "VernacExtend",
                        "d338c797aff17f1505f2856818f25b33795574f4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addn2",
            "line_nb": 114,
            "steps": [
                {
                    "command": [
                        "by rewrite addnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add2n",
            "line_nb": 117,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addn3",
            "line_nb": 120,
            "steps": [
                {
                    "command": [
                        "by rewrite addnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add3n",
            "line_nb": 123,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addn4",
            "line_nb": 126,
            "steps": [
                {
                    "command": [
                        "by rewrite addnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add4n",
            "line_nb": 129,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subnE",
            "line_nb": 136,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minusE",
            "line_nb": 139,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub0n",
            "line_nb": 142,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subn0",
            "line_nb": 145,
            "steps": [
                {
                    "command": [
                        "by case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subnn",
            "line_nb": 148,
            "steps": [
                {
                    "command": [
                        "by elim.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subSS",
            "line_nb": 151,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subn1",
            "line_nb": 154,
            "steps": [
                {
                    "command": [
                        "by case: n => [|[]].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subn2",
            "line_nb": 157,
            "steps": [
                {
                    "command": [
                        "by case: n => [|[|[]]].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subnDl",
            "line_nb": 160,
            "steps": [
                {
                    "command": [
                        "by elim: p.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subnDr",
            "line_nb": 163,
            "steps": [
                {
                    "command": [
                        "by rewrite -!(addnC p) subnDl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addKn",
            "line_nb": 166,
            "steps": [
                {
                    "command": [
                        "by move=> m; rewrite /= -{2}[n]addn0 subnDl subn0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addnK",
            "line_nb": 169,
            "steps": [
                {
                    "command": [
                        "by move=> m; rewrite /= (addnC m) addKn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subSnn",
            "line_nb": 172,
            "steps": [
                {
                    "command": [
                        "exact (addnK n 1).",
                        "VernacExtend",
                        "82b1db7248ba1aad7913b65c51c5ad92bea74ae1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subnDA",
            "line_nb": 175,
            "steps": [
                {
                    "command": [
                        "by elim: m n => [|m IHm] [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subnAC",
            "line_nb": 178,
            "steps": [
                {
                    "command": [
                        "by move=> m n p; rewrite -!subnDA addnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subnS",
            "line_nb": 181,
            "steps": [
                {
                    "command": [
                        "by rewrite -addn1 subnDA subn1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subSKn",
            "line_nb": 184,
            "steps": [
                {
                    "command": [
                        "by rewrite -subnS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltnS",
            "line_nb": 199,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq0n",
            "line_nb": 202,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn0Sn",
            "line_nb": 205,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn0",
            "line_nb": 208,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leqnn",
            "line_nb": 211,
            "steps": [
                {
                    "command": [
                        "by elim: n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltnSn",
            "line_nb": 215,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_leq",
            "line_nb": 218,
            "steps": [
                {
                    "command": [
                        "by move->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leqnSn",
            "line_nb": 221,
            "steps": [
                {
                    "command": [
                        "by elim: n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_pred",
            "line_nb": 225,
            "steps": [
                {
                    "command": [
                        "by case: n => /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leqSpred",
            "line_nb": 228,
            "steps": [
                {
                    "command": [
                        "by case: n => /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_predK",
            "line_nb": 231,
            "steps": [
                {
                    "command": [
                        "by case: n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prednK",
            "line_nb": 234,
            "steps": [
                {
                    "command": [
                        "exact: ltn_predK.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leqNgt",
            "line_nb": 237,
            "steps": [
                {
                    "command": [
                        "by elim: m n => [|m IHm] [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltnNge",
            "line_nb": 240,
            "steps": [
                {
                    "command": [
                        "by rewrite leqNgt.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltnn",
            "line_nb": 243,
            "steps": [
                {
                    "command": [
                        "by rewrite ltnNge leqnn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leqn0",
            "line_nb": 246,
            "steps": [
                {
                    "command": [
                        "by case: n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lt0n",
            "line_nb": 249,
            "steps": [
                {
                    "command": [
                        "by case: n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lt0n_neq0",
            "line_nb": 252,
            "steps": [
                {
                    "command": [
                        "by case: n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqn0Ngt",
            "line_nb": 255,
            "steps": [
                {
                    "command": [
                        "by case: n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqn_leq",
            "line_nb": 262,
            "steps": [
                {
                    "command": [
                        "by elim: m n => [|m IHm] [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "anti_leq",
            "line_nb": 265,
            "steps": [
                {
                    "command": [
                        "by move=> m n; rewrite -eqn_leq => /eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "neq_ltn",
            "line_nb": 268,
            "steps": [
                {
                    "command": [
                        "by rewrite eqn_leq negb_and orbC -!ltnNge.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gtn_eqF",
            "line_nb": 271,
            "steps": [
                {
                    "command": [
                        "by rewrite eqn_leq (leqNgt n) => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_eqF",
            "line_nb": 274,
            "steps": [
                {
                    "command": [
                        "by move/gtn_eqF; rewrite eq_sym.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_geF",
            "line_nb": 277,
            "steps": [
                {
                    "command": [
                        "by rewrite (leqNgt n) => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_gtF",
            "line_nb": 280,
            "steps": [
                {
                    "command": [
                        "by rewrite (ltnNge n) => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_eqVlt",
            "line_nb": 283,
            "steps": [
                {
                    "command": [
                        "by elim: m n => [|m IHm] [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_neqAle",
            "line_nb": 286,
            "steps": [
                {
                    "command": [
                        "by rewrite ltnNge leq_eqVlt negb_or -leqNgt eq_sym.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_trans",
            "line_nb": 289,
            "steps": [
                {
                    "command": [
                        "by elim: n m p => [|i IHn] [|m] [|p] //; apply: IHn m p.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_ltn_trans",
            "line_nb": 292,
            "steps": [
                {
                    "command": [
                        "by move=> Hmn; apply: leq_trans.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltnW",
            "line_nb": 295,
            "steps": [
                {
                    "command": [
                        "exact: leq_trans.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leqW",
            "line_nb": 299,
            "steps": [
                {
                    "command": [
                        "by move=> le_mn; apply: ltnW.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_trans",
            "line_nb": 302,
            "steps": [
                {
                    "command": [
                        "by move=> lt_mn /ltnW; apply: leq_trans.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_total",
            "line_nb": 305,
            "steps": [
                {
                    "command": [
                        "by rewrite -implyNb -ltnNge; apply/implyP; apply: ltnW.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "le_irrelevance",
            "line_nb": 314,
            "steps": [
                {
                    "command": [
                        "elim: {n}n.+1 {-1}n (erefl n.+1) => // n IHn _ [<-] in le_mn1 le_mn2 *.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "pose def_n2 := erefl n; transitivity (eq_ind _ _ le_mn2 _ def_n2) => //.",
                        "VernacExtend",
                        "801cf49622ecacdc7aba5baf9428af93fd6cae3f"
                    ]
                },
                {
                    "command": [
                        "move def_n1: {1 4 5 7}n le_mn1 le_mn2 def_n2 => n1 le_mn1.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "case: n1 / le_mn1 def_n1 => [|n1 le_mn1] def_n1 [|n2 le_mn2] def_n2.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by rewrite [def_n2]eq_axiomK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move/leP: (le_mn2); rewrite -{1}def_n2 ltnn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move/leP: (le_mn1); rewrite {1}def_n2 ltnn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: def_n2 (def_n2) => ->{n2} def_n2 in le_mn2 *.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite [def_n2]eq_axiomK /=; congr le_S; apply: IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltP",
            "line_nb": 328,
            "steps": [
                {
                    "command": [
                        "exact leP.",
                        "VernacExtend",
                        "20bea629c926d95d4ef6094817b0bd393b60b4f2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lt_irrelevance",
            "line_nb": 332,
            "steps": [
                {
                    "command": [
                        "exact: (@le_irrelevance m.+1).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leqP",
            "line_nb": 336,
            "steps": [
                {
                    "command": [
                        "by rewrite ltnNge; case le_mn: (m <= n); constructor; rewrite // ltnNge le_mn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltnP",
            "line_nb": 340,
            "steps": [
                {
                    "command": [
                        "by rewrite -(ltnS n); case: leqP; constructor.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "posnP",
            "line_nb": 344,
            "steps": [
                {
                    "command": [
                        "by case: n; constructor.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltngtP",
            "line_nb": 348,
            "steps": [
                {
                    "command": [
                        "rewrite !ltn_neqAle [_ == m]eq_sym; case: ltnP => [mn|].",
                        "VernacExtend",
                        "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
                    ]
                },
                {
                    "command": [
                        "by rewrite ltnW // gtn_eqF //; constructor.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite leq_eqVlt; case: ltnP; rewrite ?(orbT, orbF) => //= lt_nm eq_mn.",
                        "VernacExtend",
                        "2253759ff5c580854290fce82296a80357452125"
                    ]
                },
                {
                    "command": [
                        "by rewrite ltn_eqF //; constructor.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite eq_mn; constructor; apply/eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_add2l",
            "line_nb": 355,
            "steps": [
                {
                    "command": [
                        "by elim: p.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_add2l",
            "line_nb": 358,
            "steps": [
                {
                    "command": [
                        "by rewrite -addnS; apply: leq_add2l.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_add2r",
            "line_nb": 361,
            "steps": [
                {
                    "command": [
                        "by rewrite -!(addnC p); apply: leq_add2l.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_add2r",
            "line_nb": 364,
            "steps": [
                {
                    "command": [
                        "exact: leq_add2r p m.+1 n.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_add",
            "line_nb": 367,
            "steps": [
                {
                    "command": [
                        "by move=> le_mn1 le_mn2; rewrite (@leq_trans (m1 + n2)) ?leq_add2l ?leq_add2r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_addr",
            "line_nb": 370,
            "steps": [
                {
                    "command": [
                        "by rewrite -{1}[n]addn0 leq_add2l.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_addl",
            "line_nb": 373,
            "steps": [
                {
                    "command": [
                        "by rewrite addnC leq_addr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_addr",
            "line_nb": 376,
            "steps": [
                {
                    "command": [
                        "by move/leq_trans=> -> //; apply: leq_addr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_addl",
            "line_nb": 379,
            "steps": [
                {
                    "command": [
                        "by move/leq_trans=> -> //; apply: leq_addl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addn_gt0",
            "line_nb": 382,
            "steps": [
                {
                    "command": [
                        "by rewrite !lt0n -negb_and addn_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subn_gt0",
            "line_nb": 385,
            "steps": [
                {
                    "command": [
                        "by elim: m n => [|m IHm] [|n] //; apply: IHm n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subn_eq0",
            "line_nb": 388,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_subLR",
            "line_nb": 391,
            "steps": [
                {
                    "command": [
                        "by rewrite -subn_eq0 -subnDA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_subr",
            "line_nb": 394,
            "steps": [
                {
                    "command": [
                        "by rewrite leq_subLR leq_addl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subnKC",
            "line_nb": 397,
            "steps": [
                {
                    "command": [
                        "by elim: m n => [|m IHm] [|n] // /(IHm n) {2}<-.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subnK",
            "line_nb": 400,
            "steps": [
                {
                    "command": [
                        "by rewrite addnC; apply: subnKC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addnBA",
            "line_nb": 403,
            "steps": [
                {
                    "command": [
                        "by move=> le_pn; rewrite -{2}(subnK le_pn) addnA addnK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addnBAC",
            "line_nb": 406,
            "steps": [
                {
                    "command": [
                        "by move=> le_nm; rewrite addnC addnBA // addnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addnBCA",
            "line_nb": 409,
            "steps": [
                {
                    "command": [
                        "by move=> le_pm le_pn; rewrite !addnBA // addnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addnABC",
            "line_nb": 412,
            "steps": [
                {
                    "command": [
                        "by move=> le_pm le_pn; rewrite addnBA // addnBAC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subnBA",
            "line_nb": 415,
            "steps": [
                {
                    "command": [
                        "by move=> le_pn; rewrite -{2}(subnK le_pn) subnDr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subKn",
            "line_nb": 418,
            "steps": [
                {
                    "command": [
                        "by move/subnBA->; rewrite addKn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subSn",
            "line_nb": 421,
            "steps": [
                {
                    "command": [
                        "by rewrite -add1n => /addnBA <-.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subnSK",
            "line_nb": 424,
            "steps": [
                {
                    "command": [
                        "by move/subSn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_sub2r",
            "line_nb": 427,
            "steps": [
                {
                    "command": [
                        "by move=> le_mn; rewrite leq_subLR (leq_trans le_mn) // -leq_subLR.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_sub2l",
            "line_nb": 430,
            "steps": [
                {
                    "command": [
                        "rewrite -(leq_add2r (p - m)) leq_subLR.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: leq_trans; rewrite -leq_subLR.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_sub",
            "line_nb": 434,
            "steps": [
                {
                    "command": [
                        "by move/(leq_sub2r n1)=> le_m12 /(leq_sub2l m2); apply: leq_trans.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_sub2r",
            "line_nb": 437,
            "steps": [
                {
                    "command": [
                        "by move/subnSK <-; apply: (@leq_sub2r p.+1).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_sub2l",
            "line_nb": 440,
            "steps": [
                {
                    "command": [
                        "by move/subnSK <-; apply: leq_sub2l.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_subRL",
            "line_nb": 443,
            "steps": [
                {
                    "command": [
                        "by rewrite !ltnNge leq_subLR.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subn_if_gt",
            "line_nb": 446,
            "steps": [
                {
                    "command": [
                        "by case: leqP => [le_nm | /eqnP-> //]; rewrite -{1}(subnK le_nm) -addSn addnK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "max0n",
            "line_nb": 451,
            "steps": [
                {
                    "command": [
                        "by case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxn0",
            "line_nb": 454,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxnC",
            "line_nb": 457,
            "steps": [
                {
                    "command": [
                        "by move=> m n; rewrite /maxn; case ltngtP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxnE",
            "line_nb": 460,
            "steps": [
                {
                    "command": [
                        "by rewrite /maxn addnC; case: leqP => [/eqnP->|/ltnW/subnK].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxnAC",
            "line_nb": 463,
            "steps": [
                {
                    "command": [
                        "by move=> m n p; rewrite !maxnE -!addnA !subnDA -!maxnE maxnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxnA",
            "line_nb": 466,
            "steps": [
                {
                    "command": [
                        "by move=> m n p; rewrite !(maxnC m) maxnAC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxnCA",
            "line_nb": 469,
            "steps": [
                {
                    "command": [
                        "by move=> m n p; rewrite !maxnA (maxnC m).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxnACA",
            "line_nb": 472,
            "steps": [
                {
                    "command": [
                        "by move=> m n p q; rewrite -!maxnA (maxnCA n).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxn_idPl",
            "line_nb": 475,
            "steps": [
                {
                    "command": [
                        "by rewrite -subn_eq0 -(eqn_add2l m) addn0 -maxnE; apply: eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxn_idPr",
            "line_nb": 478,
            "steps": [
                {
                    "command": [
                        "by rewrite maxnC; apply: maxn_idPl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxnn",
            "line_nb": 481,
            "steps": [
                {
                    "command": [
                        "by move=> n; apply/maxn_idPl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_max",
            "line_nb": 484,
            "steps": [
                {
                    "command": [
                        "without loss le_n21: n1 n2 / n2 <= n1.",
                        "VernacExtend",
                        "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
                    ]
                },
                {
                    "command": [
                        "by case/orP: (leq_total n2 n1) => le_n12; last rewrite maxnC orbC; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite (maxn_idPl le_n21) orb_idr // => /leq_trans->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_maxl",
            "line_nb": 489,
            "steps": [
                {
                    "command": [
                        "by rewrite leq_max leqnn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_maxr",
            "line_nb": 492,
            "steps": [
                {
                    "command": [
                        "by rewrite maxnC leq_maxl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gtn_max",
            "line_nb": 495,
            "steps": [
                {
                    "command": [
                        "by rewrite !ltnNge leq_max negb_or.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "geq_max",
            "line_nb": 498,
            "steps": [
                {
                    "command": [
                        "by rewrite -ltnS gtn_max.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxnSS",
            "line_nb": 501,
            "steps": [
                {
                    "command": [
                        "by rewrite !maxnE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addn_maxl",
            "line_nb": 504,
            "steps": [
                {
                    "command": [
                        "by move=> m1 m2 n; rewrite !maxnE subnDr addnAC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addn_maxr",
            "line_nb": 507,
            "steps": [
                {
                    "command": [
                        "by move=> m n1 n2; rewrite !(addnC m) addn_maxl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "min0n",
            "line_nb": 510,
            "steps": [
                {
                    "command": [
                        "by case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minn0",
            "line_nb": 513,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minnC",
            "line_nb": 516,
            "steps": [
                {
                    "command": [
                        "by move=> m n; rewrite /minn; case ltngtP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addn_min_max",
            "line_nb": 519,
            "steps": [
                {
                    "command": [
                        "by rewrite /minn /maxn; case: ltngtP => // [_|->] //; apply: addnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minnE",
            "line_nb": 522,
            "steps": [
                {
                    "command": [
                        "by rewrite -(subnDl n) -maxnE -addn_min_max addnK minnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minnAC",
            "line_nb": 525,
            "steps": [
                {
                    "command": [
                        "by move=> m n p; rewrite !minnE -subnDA subnAC -maxnE maxnC maxnE subnAC subnDA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minnA",
            "line_nb": 528,
            "steps": [
                {
                    "command": [
                        "by move=> m n p; rewrite minnC minnAC (minnC n).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minnCA",
            "line_nb": 531,
            "steps": [
                {
                    "command": [
                        "by move=> m n p; rewrite !minnA (minnC n).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minnACA",
            "line_nb": 534,
            "steps": [
                {
                    "command": [
                        "by move=> m n p q; rewrite -!minnA (minnCA n).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minn_idPl",
            "line_nb": 537,
            "steps": [
                {
                    "command": [
                        "rewrite (sameP maxn_idPr eqP) -(eqn_add2l m) eq_sym -addn_min_max eqn_add2r.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "exact: eqP.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minn_idPr",
            "line_nb": 541,
            "steps": [
                {
                    "command": [
                        "by rewrite minnC; apply: minn_idPl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minnn",
            "line_nb": 544,
            "steps": [
                {
                    "command": [
                        "by move=> n; apply/minn_idPl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_min",
            "line_nb": 547,
            "steps": [
                {
                    "command": [
                        "wlog le_n21: n1 n2 / n2 <= n1.",
                        "VernacExtend",
                        "a7d04f709d7f819b427e71c08303f8cd82c08a1b"
                    ]
                },
                {
                    "command": [
                        "by case/orP: (leq_total n2 n1) => ?; last rewrite minnC andbC; auto.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite /minn ltnNge le_n21 /= andbC; case: leqP => // /leq_trans->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gtn_min",
            "line_nb": 552,
            "steps": [
                {
                    "command": [
                        "by rewrite !ltnNge leq_min negb_and.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "geq_min",
            "line_nb": 555,
            "steps": [
                {
                    "command": [
                        "by rewrite -ltnS gtn_min.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "geq_minl",
            "line_nb": 558,
            "steps": [
                {
                    "command": [
                        "by rewrite geq_min leqnn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "geq_minr",
            "line_nb": 561,
            "steps": [
                {
                    "command": [
                        "by rewrite minnC geq_minl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addn_minr",
            "line_nb": 564,
            "steps": [
                {
                    "command": [
                        "by move=> m1 m2 n; rewrite !minnE subnDl addnBA ?leq_subr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addn_minl",
            "line_nb": 567,
            "steps": [
                {
                    "command": [
                        "by move=> m1 m2 n; rewrite -!(addnC n) addn_minr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minnSS",
            "line_nb": 570,
            "steps": [
                {
                    "command": [
                        "by rewrite -(addn_minr 1).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxnK",
            "line_nb": 573,
            "steps": [
                {
                    "command": [
                        "exact/minn_idPr/leq_maxl.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxKn",
            "line_nb": 576,
            "steps": [
                {
                    "command": [
                        "exact/minn_idPl/leq_maxr.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minnK",
            "line_nb": 579,
            "steps": [
                {
                    "command": [
                        "exact/maxn_idPr/geq_minl.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minKn",
            "line_nb": 582,
            "steps": [
                {
                    "command": [
                        "exact/maxn_idPl/geq_minr.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxn_minr",
            "line_nb": 592,
            "steps": [
                {
                    "command": [
                        "by move=> m n1 n2; rewrite !(maxnC m) maxn_minl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minn_maxl",
            "line_nb": 595,
            "steps": [
                {
                    "command": [
                        "by move=> m1 m2 n; rewrite maxn_minr !maxn_minl -minnA maxnn (maxnC _ n) !maxnK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minn_maxr",
            "line_nb": 598,
            "steps": [
                {
                    "command": [
                        "by move=> m n1 n2; rewrite !(minnC m) minn_maxl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "find_ex_minn",
            "line_nb": 605,
            "steps": [
                {
                    "command": [
                        "have: forall n, P n -> n >= 0 by [].",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have: acc_nat 0.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "case exP => n; rewrite -(addn0 n); elim: n 0 => [|n IHn] j; first by left.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite addSnnS; right; apply: IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move: 0; fix find_ex_minn 2 => m IHm m_lb; case Pm: (P m); first by exists m.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply: find_ex_minn m.+1 _ _ => [|n Pn]; first by case: IHm; rewrite ?Pm.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite ltn_neqAle m_lb //; case: eqP Pm => // -> /idP[].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ex_minnP",
            "line_nb": 616,
            "steps": [
                {
                    "command": [
                        "by rewrite /ex_minn; case: find_ex_minn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ex_maxn_subproof",
            "line_nb": 623,
            "steps": [
                {
                    "command": [
                        "by case: exP => i Pi; exists (m - i); rewrite subKn ?ubP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ex_maxnP",
            "line_nb": 628,
            "steps": [
                {
                    "command": [
                        "rewrite /ex_maxn; case: ex_minnP => i Pmi min_i; split=> // j Pj.",
                        "VernacExtend",
                        "2253759ff5c580854290fce82296a80357452125"
                    ]
                },
                {
                    "command": [
                        "have le_i_mj: i <= m - j by rewrite min_i // subKn // ubP.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -subn_eq0 subnBA ?(leq_trans le_i_mj) ?leq_subr //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite addnC -subnBA ?ubP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_ex_minn",
            "line_nb": 635,
            "steps": [
                {
                    "command": [
                        "move=> eqPQ; case: ex_minnP => m1 Pm1 m1_lb; case: ex_minnP => m2 Pm2 m2_lb.",
                        "VernacExtend",
                        "fd777b019349da348ceeb72ef62c9f8d707a4c0b"
                    ]
                },
                {
                    "command": [
                        "by apply/eqP; rewrite eqn_leq m1_lb (m2_lb, eqPQ) // -eqPQ.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_ex_maxn",
            "line_nb": 639,
            "steps": [
                {
                    "command": [
                        "move=> eqPQ; case: ex_maxnP => i Pi max_i; case: ex_maxnP => j Pj max_j.",
                        "VernacExtend",
                        "fd777b019349da348ceeb72ef62c9f8d707a4c0b"
                    ]
                },
                {
                    "command": [
                        "by apply/eqP; rewrite eqn_leq max_i ?eqPQ // max_j -?eqPQ.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iterSr",
            "line_nb": 650,
            "steps": [
                {
                    "command": [
                        "by elim: n => //= n <-.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iterS",
            "line_nb": 653,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iter_add",
            "line_nb": 656,
            "steps": [
                {
                    "command": [
                        "by elim: n => //= n ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iteriS",
            "line_nb": 659,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iteropS",
            "line_nb": 662,
            "steps": [
                {
                    "command": [
                        "by elim: n => //= n ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_iter",
            "line_nb": 665,
            "steps": [
                {
                    "command": [
                        "by move=> eq_f n x; elim: n => //= n ->; rewrite eq_f.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_iteri",
            "line_nb": 668,
            "steps": [
                {
                    "command": [
                        "by move=> eq_f n x; elim: n => //= n ->; rewrite eq_f.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_iterop",
            "line_nb": 671,
            "steps": [
                {
                    "command": [
                        "by move=> eq_op x; apply: eq_iteri; case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iter_succn",
            "line_nb": 675,
            "steps": [
                {
                    "command": [
                        "by elim: n => //= n ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iter_succn_0",
            "line_nb": 678,
            "steps": [
                {
                    "command": [
                        "exact: iter_succn.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iter_predn",
            "line_nb": 681,
            "steps": [
                {
                    "command": [
                        "by elim: n m => /= [|n IHn] m; rewrite ?subn0 // IHn subnS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "multE",
            "line_nb": 688,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulnE",
            "line_nb": 691,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mul0n",
            "line_nb": 694,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "muln0",
            "line_nb": 697,
            "steps": [
                {
                    "command": [
                        "by elim.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mul1n",
            "line_nb": 700,
            "steps": [
                {
                    "command": [
                        "exact: addn0.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulSn",
            "line_nb": 703,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulSnr",
            "line_nb": 706,
            "steps": [
                {
                    "command": [
                        "exact: addnC.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulnS",
            "line_nb": 709,
            "steps": [
                {
                    "command": [
                        "by elim: m => // m; rewrite !mulSn !addSn addnCA => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulnSr",
            "line_nb": 712,
            "steps": [
                {
                    "command": [
                        "by rewrite addnC mulnS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iter_addn",
            "line_nb": 715,
            "steps": [
                {
                    "command": [
                        "by elim: n => /= [|n ->]; rewrite ?muln0 // mulnS addnA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iter_addn_0",
            "line_nb": 718,
            "steps": [
                {
                    "command": [
                        "by rewrite iter_addn addn0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "muln1",
            "line_nb": 721,
            "steps": [
                {
                    "command": [
                        "by move=> n; rewrite mulnSr muln0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulnC",
            "line_nb": 724,
            "steps": [
                {
                    "command": [
                        "by move=> m n; elim: m => [|m]; rewrite (muln0, mulnS) // mulSn => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulnDl",
            "line_nb": 727,
            "steps": [
                {
                    "command": [
                        "by move=> m1 m2 n; elim: m1 => //= m1 IHm; rewrite -addnA -IHm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulnDr",
            "line_nb": 730,
            "steps": [
                {
                    "command": [
                        "by move=> m n1 n2; rewrite !(mulnC m) mulnDl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulnBl",
            "line_nb": 733,
            "steps": [
                {
                    "command": [
                        "move=> m n [|p]; first by rewrite !muln0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by elim: m n => // [m IHm] [|n] //; rewrite mulSn subnDl -IHm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulnBr",
            "line_nb": 737,
            "steps": [
                {
                    "command": [
                        "by move=> m n p; rewrite !(mulnC m) mulnBl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulnA",
            "line_nb": 740,
            "steps": [
                {
                    "command": [
                        "by move=> m n p; elim: m => //= m; rewrite mulSn mulnDl => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulnCA",
            "line_nb": 743,
            "steps": [
                {
                    "command": [
                        "by move=> m n1 n2; rewrite !mulnA (mulnC m).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulnAC",
            "line_nb": 746,
            "steps": [
                {
                    "command": [
                        "by move=> m n p; rewrite -!mulnA (mulnC n).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulnACA",
            "line_nb": 749,
            "steps": [
                {
                    "command": [
                        "by move=> m n p q; rewrite -!mulnA (mulnCA n).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "muln_eq0",
            "line_nb": 752,
            "steps": [
                {
                    "command": [
                        "by case: m n => // m [|n] //=; rewrite muln0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "muln_eq1",
            "line_nb": 755,
            "steps": [
                {
                    "command": [
                        "by case: m n => [|[|m]] [|[|n]] //; rewrite muln0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "muln_gt0",
            "line_nb": 758,
            "steps": [
                {
                    "command": [
                        "by case: m n => // m [|n] //=; rewrite muln0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_pmull",
            "line_nb": 761,
            "steps": [
                {
                    "command": [
                        "by move/prednK <-; apply: leq_addr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_pmulr",
            "line_nb": 764,
            "steps": [
                {
                    "command": [
                        "by move/leq_pmull; rewrite mulnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_mul2l",
            "line_nb": 767,
            "steps": [
                {
                    "command": [
                        "by rewrite {1}/leq -mulnBr muln_eq0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_mul2r",
            "line_nb": 770,
            "steps": [
                {
                    "command": [
                        "by rewrite -!(mulnC m) leq_mul2l.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_mul",
            "line_nb": 773,
            "steps": [
                {
                    "command": [
                        "move=> le_mn1 le_mn2; apply (@leq_trans (m1 * n2)).",
                        "VernacExtend",
                        "647467b9d1253dccb9aceefac1ef0beabd40dadf"
                    ]
                },
                {
                    "command": [
                        "by rewrite leq_mul2l le_mn2 orbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite leq_mul2r le_mn1 orbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqn_mul2l",
            "line_nb": 778,
            "steps": [
                {
                    "command": [
                        "by rewrite eqn_leq !leq_mul2l -orb_andr -eqn_leq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqn_mul2r",
            "line_nb": 781,
            "steps": [
                {
                    "command": [
                        "by rewrite eqn_leq !leq_mul2r -orb_andr -eqn_leq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_pmul2l",
            "line_nb": 784,
            "steps": [
                {
                    "command": [
                        "by move/prednK=> <-; rewrite leq_mul2l.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_pmul2r",
            "line_nb": 788,
            "steps": [
                {
                    "command": [
                        "by move/prednK <-; rewrite leq_mul2r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqn_pmul2l",
            "line_nb": 792,
            "steps": [
                {
                    "command": [
                        "by move/prednK <-; rewrite eqn_mul2l.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqn_pmul2r",
            "line_nb": 796,
            "steps": [
                {
                    "command": [
                        "by move/prednK <-; rewrite eqn_mul2r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_mul2l",
            "line_nb": 800,
            "steps": [
                {
                    "command": [
                        "by rewrite lt0n !ltnNge leq_mul2l negb_or.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_mul2r",
            "line_nb": 803,
            "steps": [
                {
                    "command": [
                        "by rewrite lt0n !ltnNge leq_mul2r negb_or.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_pmul2l",
            "line_nb": 806,
            "steps": [
                {
                    "command": [
                        "by move/prednK <-; rewrite ltn_mul2l.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_pmul2r",
            "line_nb": 810,
            "steps": [
                {
                    "command": [
                        "by move/prednK <-; rewrite ltn_mul2r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_Pmull",
            "line_nb": 814,
            "steps": [
                {
                    "command": [
                        "by move=> lt1n m_gt0; rewrite -{1}[m]mul1n ltn_pmul2r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_Pmulr",
            "line_nb": 817,
            "steps": [
                {
                    "command": [
                        "by move=> lt1n m_gt0; rewrite mulnC ltn_Pmull.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_mul",
            "line_nb": 820,
            "steps": [
                {
                    "command": [
                        "move=> lt_mn1 lt_mn2; apply (@leq_ltn_trans (m1 * n2)).",
                        "VernacExtend",
                        "06d155ce14556e044824202e260cfcb0404718a8"
                    ]
                },
                {
                    "command": [
                        "by rewrite leq_mul2l orbC ltnW.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite ltn_pmul2r // (leq_trans _ lt_mn2).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxn_mulr",
            "line_nb": 825,
            "steps": [
                {
                    "command": [
                        "by case=> // m n1 n2; rewrite /maxn (fun_if (muln _)) ltn_pmul2l.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxn_mull",
            "line_nb": 828,
            "steps": [
                {
                    "command": [
                        "by move=> m1 m2 n; rewrite -!(mulnC n) maxn_mulr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minn_mulr",
            "line_nb": 831,
            "steps": [
                {
                    "command": [
                        "by case=> // m n1 n2; rewrite /minn (fun_if (muln _)) ltn_pmul2l.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minn_mull",
            "line_nb": 834,
            "steps": [
                {
                    "command": [
                        "by move=> m1 m2 n; rewrite -!(mulnC n) minn_mulr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expnE",
            "line_nb": 841,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expn0",
            "line_nb": 844,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expn1",
            "line_nb": 847,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expnS",
            "line_nb": 850,
            "steps": [
                {
                    "command": [
                        "by case: n; rewrite ?muln1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expnSr",
            "line_nb": 853,
            "steps": [
                {
                    "command": [
                        "by rewrite mulnC expnS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iter_muln",
            "line_nb": 856,
            "steps": [
                {
                    "command": [
                        "by elim: n => /= [|n ->]; rewrite ?mul1n // expnS mulnA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iter_muln_1",
            "line_nb": 859,
            "steps": [
                {
                    "command": [
                        "by rewrite iter_muln muln1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exp0n",
            "line_nb": 862,
            "steps": [
                {
                    "command": [
                        "by case: n => [|[]].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exp1n",
            "line_nb": 865,
            "steps": [
                {
                    "command": [
                        "by elim: n => // n; rewrite expnS mul1n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expnD",
            "line_nb": 868,
            "steps": [
                {
                    "command": [
                        "by elim: n1 => [|n1 IHn]; rewrite !(mul1n, expnS) // IHn mulnA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expnMn",
            "line_nb": 871,
            "steps": [
                {
                    "command": [
                        "by elim: n => // n IHn; rewrite !expnS IHn -!mulnA (mulnCA m2).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expnM",
            "line_nb": 874,
            "steps": [
                {
                    "command": [
                        "elim: n1 => [|n1 IHn]; first by rewrite exp1n.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite expnD expnS expnMn IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expnAC",
            "line_nb": 878,
            "steps": [
                {
                    "command": [
                        "by rewrite -!expnM mulnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expn_gt0",
            "line_nb": 881,
            "steps": [
                {
                    "command": [
                        "by case: m => [|m]; elim: n => //= n IHn; rewrite expnS // addn_gt0 IHn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expn_eq0",
            "line_nb": 884,
            "steps": [
                {
                    "command": [
                        "by rewrite !eqn0Ngt expn_gt0 negb_or -lt0n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_expl",
            "line_nb": 887,
            "steps": [
                {
                    "command": [
                        "move=> m_gt1; elim: n => //= n; rewrite -(leq_pmul2l (ltnW m_gt1)) expnS.",
                        "VernacExtend",
                        "cbbd752ffe762291637c91622d62599b0c60d123"
                    ]
                },
                {
                    "command": [
                        "by apply: leq_trans; apply: ltn_Pmull.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_exp2l",
            "line_nb": 891,
            "steps": [
                {
                    "command": [
                        "move=> m_gt1; elim: n1 n2 => [|n1 IHn] [|n2] //; last 1 first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by rewrite !expnS leq_pmul2l ?IHn // ltnW.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by rewrite expn_gt0 ltnW.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite leqNgt (leq_trans m_gt1) // expnS leq_pmulr // expn_gt0 ltnW.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_exp2l",
            "line_nb": 899,
            "steps": [
                {
                    "command": [
                        "by move=> m_gt1; rewrite !ltnNge leq_exp2l.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqn_exp2l",
            "line_nb": 902,
            "steps": [
                {
                    "command": [
                        "by move=> m_gt1; rewrite !eqn_leq !leq_exp2l.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expnI",
            "line_nb": 905,
            "steps": [
                {
                    "command": [
                        "by move=> m_gt1 e1 e2 /eqP; rewrite eqn_exp2l // => /eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_pexp2l",
            "line_nb": 908,
            "steps": [
                {
                    "command": [
                        "by case: m => [|[|m]] // _; [rewrite !exp1n | rewrite leq_exp2l].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_pexp2l",
            "line_nb": 911,
            "steps": [
                {
                    "command": [
                        "by case: m => [|[|m]] // _; [rewrite !exp1n | rewrite ltn_exp2l].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_exp2r",
            "line_nb": 920,
            "steps": [
                {
                    "command": [
                        "by move=> e_gt0; rewrite leqNgt ltn_exp2r // -leqNgt.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqn_exp2r",
            "line_nb": 923,
            "steps": [
                {
                    "command": [
                        "by move=> e_gt0; rewrite !eqn_leq !leq_exp2r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expIn",
            "line_nb": 926,
            "steps": [
                {
                    "command": [
                        "by move=> e_gt1 m n /eqP; rewrite eqn_exp2r // => /eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "factE",
            "line_nb": 932,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fact0",
            "line_nb": 935,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "factS",
            "line_nb": 938,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fact_gt0",
            "line_nb": 941,
            "steps": [
                {
                    "command": [
                        "by elim: n => //= n IHn; rewrite muln_gt0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_b1",
            "line_nb": 945,
            "steps": [
                {
                    "command": [
                        "by case: b.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addn_negb",
            "line_nb": 948,
            "steps": [
                {
                    "command": [
                        "by case: b.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqb0",
            "line_nb": 951,
            "steps": [
                {
                    "command": [
                        "by case: b.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqb1",
            "line_nb": 954,
            "steps": [
                {
                    "command": [
                        "by case: b.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lt0b",
            "line_nb": 957,
            "steps": [
                {
                    "command": [
                        "by case: b.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub1b",
            "line_nb": 960,
            "steps": [
                {
                    "command": [
                        "by case: b.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulnb",
            "line_nb": 963,
            "steps": [
                {
                    "command": [
                        "by case: b1; case: b2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulnbl",
            "line_nb": 966,
            "steps": [
                {
                    "command": [
                        "by case: b; rewrite ?mul1n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulnbr",
            "line_nb": 969,
            "steps": [
                {
                    "command": [
                        "by rewrite mulnC mulnbl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "oddb",
            "line_nb": 973,
            "steps": [
                {
                    "command": [
                        "by case: b.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "odd_add",
            "line_nb": 976,
            "steps": [
                {
                    "command": [
                        "by elim: m => [|m IHn] //=; rewrite -addTb IHn addbA addTb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "odd_sub",
            "line_nb": 979,
            "steps": [
                {
                    "command": [
                        "by move=> le_nm; apply: (@canRL bool) (addbK _) _; rewrite -odd_add subnK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "odd_opp",
            "line_nb": 982,
            "steps": [
                {
                    "command": [
                        "by move=> oddm le_im; rewrite (odd_sub (le_im)) oddm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "odd_mul",
            "line_nb": 985,
            "steps": [
                {
                    "command": [
                        "by elim: m => //= m IHm; rewrite odd_add -addTb andb_addl -IHm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "odd_exp",
            "line_nb": 988,
            "steps": [
                {
                    "command": [
                        "by elim: n => // n IHn; rewrite expnS odd_mul {}IHn orbC; case odd.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "doubleE",
            "line_nb": 994,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "double0",
            "line_nb": 997,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "doubleS",
            "line_nb": 1000,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addnn",
            "line_nb": 1003,
            "steps": [
                {
                    "command": [
                        "by apply: eqP; elim: n => // n IHn; rewrite addnS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mul2n",
            "line_nb": 1006,
            "steps": [
                {
                    "command": [
                        "by rewrite mulSn mul1n addnn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "muln2",
            "line_nb": 1009,
            "steps": [
                {
                    "command": [
                        "by rewrite mulnC mul2n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "doubleD",
            "line_nb": 1012,
            "steps": [
                {
                    "command": [
                        "by rewrite -!addnn -!addnA (addnCA n).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "doubleB",
            "line_nb": 1015,
            "steps": [
                {
                    "command": [
                        "by elim: m n => [|m IHm] [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_double",
            "line_nb": 1018,
            "steps": [
                {
                    "command": [
                        "by rewrite /leq -doubleB; case (m - n).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_double",
            "line_nb": 1021,
            "steps": [
                {
                    "command": [
                        "by rewrite 2!ltnNge leq_double.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_Sdouble",
            "line_nb": 1024,
            "steps": [
                {
                    "command": [
                        "by rewrite -doubleS leq_double.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_Sdouble",
            "line_nb": 1027,
            "steps": [
                {
                    "command": [
                        "by rewrite leqNgt ltn_Sdouble -leqNgt.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "odd_double",
            "line_nb": 1030,
            "steps": [
                {
                    "command": [
                        "by rewrite -addnn odd_add addbb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "double_gt0",
            "line_nb": 1033,
            "steps": [
                {
                    "command": [
                        "by case: n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "double_eq0",
            "line_nb": 1036,
            "steps": [
                {
                    "command": [
                        "by case: n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "doubleMl",
            "line_nb": 1039,
            "steps": [
                {
                    "command": [
                        "by rewrite -!mul2n mulnA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "doubleMr",
            "line_nb": 1042,
            "steps": [
                {
                    "command": [
                        "by rewrite -!muln2 mulnA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "doubleK",
            "line_nb": 1046,
            "steps": [
                {
                    "command": [
                        "by elim=> //= n ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "uphalf_double",
            "line_nb": 1051,
            "steps": [
                {
                    "command": [
                        "by elim: n => //= n ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "uphalf_half",
            "line_nb": 1054,
            "steps": [
                {
                    "command": [
                        "by elim: n => //= n ->; rewrite addnA addn_negb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "odd_double_half",
            "line_nb": 1057,
            "steps": [
                {
                    "command": [
                        "by elim: n => //= n {3}<-; rewrite uphalf_half doubleD; case (odd n).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "half_bit_double",
            "line_nb": 1060,
            "steps": [
                {
                    "command": [
                        "by case: b; rewrite /= (half_double, uphalf_double).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "halfD",
            "line_nb": 1063,
            "steps": [
                {
                    "command": [
                        "rewrite -{1}[n]odd_double_half addnCA -{1}[m]odd_double_half -addnA -doubleD.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by do 2!case: odd; rewrite /= ?add0n ?half_double ?uphalf_double.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "half_leq",
            "line_nb": 1067,
            "steps": [
                {
                    "command": [
                        "by move/subnK <-; rewrite halfD addnA leq_addl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "half_gt0",
            "line_nb": 1070,
            "steps": [
                {
                    "command": [
                        "by case: n => [|[]].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "odd_geq",
            "line_nb": 1073,
            "steps": [
                {
                    "command": [
                        "move=> odd_n; rewrite -{1}[m]odd_double_half -[n]odd_double_half odd_n.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by case: (odd m); rewrite // leq_Sdouble ltnS leq_double.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "odd_ltn",
            "line_nb": 1077,
            "steps": [
                {
                    "command": [
                        "by move=> odd_n; rewrite !ltnNge odd_geq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "odd_gt0",
            "line_nb": 1080,
            "steps": [
                {
                    "command": [
                        "by case: n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "odd_gt2",
            "line_nb": 1083,
            "steps": [
                {
                    "command": [
                        "by move=> odd_n n_gt1; rewrite odd_geq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulnn",
            "line_nb": 1086,
            "steps": [
                {
                    "command": [
                        "by rewrite !expnS muln1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqrnD",
            "line_nb": 1089,
            "steps": [
                {
                    "command": [
                        "rewrite -!mulnn mul2n mulnDr !mulnDl (mulnC n) -!addnA.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by congr (_ + _); rewrite addnA addnn addnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqrn_sub",
            "line_nb": 1093,
            "steps": [
                {
                    "command": [
                        "move/subnK=> def_m; rewrite -{2}def_m sqrnD -addnA addnAC.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite -2!addnA addnn -mul2n -mulnDr -mulnDl def_m addnK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqrnD_sub",
            "line_nb": 1097,
            "steps": [
                {
                    "command": [
                        "move=> le_nm; rewrite -[4]/(2 * 2) -mulnA mul2n -addnn subnDA.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite sqrnD addnK sqrn_sub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subn_sqr",
            "line_nb": 1101,
            "steps": [
                {
                    "command": [
                        "by rewrite mulnBl !mulnDr addnC (mulnC m) subnDl !mulnn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_sqr",
            "line_nb": 1104,
            "steps": [
                {
                    "command": [
                        "by rewrite ltn_exp2r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_sqr",
            "line_nb": 1107,
            "steps": [
                {
                    "command": [
                        "by rewrite leq_exp2r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqrn_gt0",
            "line_nb": 1110,
            "steps": [
                {
                    "command": [
                        "exact: (ltn_sqr 0).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eqn_sqr",
            "line_nb": 1113,
            "steps": [
                {
                    "command": [
                        "by rewrite eqn_exp2r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sqrn_inj",
            "line_nb": 1116,
            "steps": [
                {
                    "command": [
                        "exact: expIn.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leqif_refl",
            "line_nb": 1126,
            "steps": [
                {
                    "command": [
                        "by apply: (iffP idP) => [-> | <-] //; split; rewrite ?eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leqif_trans",
            "line_nb": 1129,
            "steps": [
                {
                    "command": [
                        "move=> ltm12 ltm23; apply/leqifP; rewrite -ltm12.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "case eqm12: (m1 == m2).",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite (eqP eqm12) ltn_neqAle !ltm23 andbT; case C23.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite (@leq_trans m2) ?ltm23 // ltn_neqAle eqm12 ltm12.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mono_leqif",
            "line_nb": 1135,
            "steps": [
                {
                    "command": [
                        "by move=> f_mono m n C; rewrite /leqif !eqn_leq !f_mono.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leqif_geq",
            "line_nb": 1138,
            "steps": [
                {
                    "command": [
                        "by move=> lemn; split=> //; rewrite eqn_leq lemn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leqif_eq",
            "line_nb": 1141,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "geq_leqif",
            "line_nb": 1144,
            "steps": [
                {
                    "command": [
                        "by case=> le_ab; rewrite eqn_leq le_ab.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltn_leqif",
            "line_nb": 1147,
            "steps": [
                {
                    "command": [
                        "by move=> le_ab; rewrite ltnNge (geq_leqif le_ab).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leqif_add",
            "line_nb": 1150,
            "steps": [
                {
                    "command": [
                        "rewrite -(mono_leqif (leq_add2r m2)) -(mono_leqif (leq_add2l n1) m2).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "exact: leqif_trans.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leqif_mul",
            "line_nb": 1154,
            "steps": [
                {
                    "command": [
                        "case: n1 => [|n1] le1; first by case: m1 le1 => [|m1] [_ <-] //.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "case: n2 m2 => [|n2] [|m2] /=; try by case=> // _ <-; rewrite !muln0 ?andbF.",
                        "VernacExtend",
                        "700e4ba7c43aef376de752aa78d70ea0bf66a54e"
                    ]
                },
                {
                    "command": [
                        "have /leq_pmul2l-/mono_leqif<-: 0 < n1.+1 by [].",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply: leqif_trans; have /leq_pmul2r-/mono_leqif->: 0 < m2.+1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nat_Cauchy",
            "line_nb": 1160,
            "steps": [
                {
                    "command": [
                        "without loss le_nm: m n / n <= m.",
                        "VernacExtend",
                        "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
                    ]
                },
                {
                    "command": [
                        "by case: (leqP m n); auto; rewrite eq_sym addnC (mulnC m); auto.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/leqifP; case: ifP => [/eqP-> | ne_mn]; first by rewrite mulnn addnn mul2n.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -subn_gt0 -sqrn_sub // sqrn_gt0 subn_gt0 ltn_neqAle eq_sym ne_mn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "homo_ltn",
            "line_nb": 1179,
            "steps": [
                {
                    "command": [
                        "by move=> /(@homo_ltn_in predT f) fr fS i j; apply: fr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "homo_leq_in",
            "line_nb": 1182,
            "steps": [
                {
                    "command": [
                        "move=> r_refl r_trans Dcx /(homo_ltn_in r_trans Dcx) lt_r i j iD jD.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by rewrite leq_eqVlt => /predU1P[->//|/lt_r]; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "homo_leq",
            "line_nb": 1186,
            "steps": [
                {
                    "command": [
                        "by move=> rrefl /(@homo_leq_in predT f r) fr fS i j; apply: fr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gtn_neqAge",
            "line_nb": 1192,
            "steps": [
                {
                    "command": [
                        "by rewrite ltn_neqAle eq_sym.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "anti_geq",
            "line_nb": 1196,
            "steps": [
                {
                    "command": [
                        "by move=> m n /=; rewrite andbC => /anti_leq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltnW_homo",
            "line_nb": 1200,
            "steps": [
                {
                    "command": [
                        "exact: homoW.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "homo_inj_lt",
            "line_nb": 1203,
            "steps": [
                {
                    "command": [
                        "exact: inj_homo.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltnW_nhomo",
            "line_nb": 1206,
            "steps": [
                {
                    "command": [
                        "exact: homoW.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nhomo_inj_lt",
            "line_nb": 1209,
            "steps": [
                {
                    "command": [
                        "exact: inj_homo.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "incrn_inj",
            "line_nb": 1212,
            "steps": [
                {
                    "command": [
                        "exact: mono_inj.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "decrn_inj",
            "line_nb": 1215,
            "steps": [
                {
                    "command": [
                        "exact: mono_inj.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leqW_mono",
            "line_nb": 1218,
            "steps": [
                {
                    "command": [
                        "exact: anti_mono.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leqW_nmono",
            "line_nb": 1221,
            "steps": [
                {
                    "command": [
                        "exact: anti_mono.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_mono",
            "line_nb": 1224,
            "steps": [
                {
                    "command": [
                        "exact: total_homo_mono.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_nmono",
            "line_nb": 1227,
            "steps": [
                {
                    "command": [
                        "exact: total_homo_mono.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltnW_homo_in",
            "line_nb": 1231,
            "steps": [
                {
                    "command": [
                        "exact: homoW_in.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ltnW_nhomo_in",
            "line_nb": 1234,
            "steps": [
                {
                    "command": [
                        "exact: homoW_in.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "homo_inj_lt_in",
            "line_nb": 1237,
            "steps": [
                {
                    "command": [
                        "exact: inj_homo_in.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nhomo_inj_lt_in",
            "line_nb": 1240,
            "steps": [
                {
                    "command": [
                        "exact: inj_homo_in.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "incrn_inj_in",
            "line_nb": 1243,
            "steps": [
                {
                    "command": [
                        "exact: mono_inj_in.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "decrn_inj_in",
            "line_nb": 1246,
            "steps": [
                {
                    "command": [
                        "exact: mono_inj_in.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leqW_mono_in",
            "line_nb": 1249,
            "steps": [
                {
                    "command": [
                        "exact: anti_mono_in.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leqW_nmono_in",
            "line_nb": 1252,
            "steps": [
                {
                    "command": [
                        "exact: anti_mono_in.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_mono_in",
            "line_nb": 1255,
            "steps": [
                {
                    "command": [
                        "exact: total_homo_mono_in.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_nmono_in",
            "line_nb": 1258,
            "steps": [
                {
                    "command": [
                        "exact: total_homo_mono_in.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "addE",
            "line_nb": 1276,
            "steps": [
                {
                    "command": [
                        "by elim=> //= n IHn m; rewrite IHn addSnnS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add_mulE",
            "line_nb": 1282,
            "steps": [
                {
                    "command": [
                        "by elim: n => //= n IHn in m s *; rewrite IHn addE addnCA addnA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mulE",
            "line_nb": 1285,
            "steps": [
                {
                    "command": [
                        "by case=> //= n m; rewrite add_mulE addnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mul_expE",
            "line_nb": 1288,
            "steps": [
                {
                    "command": [
                        "by elim: n => [|n IHn] in p *; rewrite ?mul1n //= expnS IHn mulE mulnCA mulnA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "expE",
            "line_nb": 1291,
            "steps": [
                {
                    "command": [
                        "by move=> m [|n] //=; rewrite mul_expE expnS mulnC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "oddE",
            "line_nb": 1294,
            "steps": [
                {
                    "command": [
                        "move=> n; rewrite -{1}[n]odd_double_half addnC.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by elim: n./2 => //=; case (oddn n).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bin_of_natK",
            "line_nb": 1318,
            "steps": [
                {
                    "command": [
                        "have sub2nn n : n.*2 - n = n by rewrite -addnn addKn.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "case=> //= n; rewrite -{3}[n]sub2nn.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "by elim: n {2 4}n => // m IHm [|[|n]] //=; rewrite IHm // natTrecE sub2nn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nat_of_binK",
            "line_nb": 1323,
            "steps": [
                {
                    "command": [
                        "case=> //=; elim=> //= p; case: (nat_of_pos p) => //= n [<-].",
                        "VernacExtend",
                        "c29e152975328b3268c589a57d72024817264bbf"
                    ]
                },
                {
                    "command": [
                        "by rewrite natTrecE !addnS {2}addnn; elim: {1 3}n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite natTrecE addnS /= addnS {2}addnn; elim: {1 3}n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nat_of_succ_gt0",
            "line_nb": 1328,
            "steps": [
                {
                    "command": [
                        "by elim: p => //= p ->; rewrite !natTrecE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nat_of_add_bin",
            "line_nb": 1335,
            "steps": [
                {
                    "command": [
                        "by case: b1 b2 => [|p] [|q] //=; apply: nat_of_addn_gt0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nat_of_mul_bin",
            "line_nb": 1338,
            "steps": [
                {
                    "command": [
                        "case: b1 b2 => [|p] [|q] //=; elim: p => [p IHp|p IHp|] /=; by rewrite ?(mul1n, nat_of_addn_gt0, mulSn) //= !natTrecE IHp doubleMl.",
                        "VernacExtend",
                        "4509d94a53292381d19ec171948355b40d55da39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nat_of_exp_bin",
            "line_nb": 1341,
            "steps": [
                {
                    "command": [
                        "by case: b; last (elim=> //= p <-; rewrite natTrecE mulnn -expnM muln2 ?expnS).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nat_semi_ring",
            "line_nb": 1352,
            "steps": [
                {
                    "command": [
                        "exact: mk_srt add0n addnC addnA mul1n mul0n mulnC mulnA mulnDl.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nat_semi_morph",
            "line_nb": 1355,
            "steps": [
                {
                    "command": [
                        "by move: nat_of_add_bin nat_of_mul_bin; split=> //= m n; move/eqP->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nat_power_theory",
            "line_nb": 1358,
            "steps": [
                {
                    "command": [
                        "by split; apply: nat_of_exp_bin.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}