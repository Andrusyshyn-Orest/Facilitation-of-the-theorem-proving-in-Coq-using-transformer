{
    "filename": "mathcomp/ssreflect/tuple.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrfun ssrbool eqtype ssrnat seq choice fintype.",
            "VernacRequire",
            "6742bd497e3522a1153ce38bc5b3e5f28f9487c8"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Section Def.",
            "VernacBeginSection",
            "891f679f68bab7ae72311468953cd39d353d2080"
        ],
        [
            "Variables (n : nat) (T : Type).",
            "VernacAssumption",
            "e20824a2fe6ef9a5d6a15b446dae4901987eedc8"
        ],
        [
            "Structure tuple_of : Type := Tuple {tval :> seq T; _ : size tval == n}.",
            "VernacInductive",
            "c96f331a9dc9bed3857ec184fb208ac105929aef"
        ],
        [
            "Canonical tuple_subType := Eval hnf in [subType for tval].",
            "VernacDefinition",
            "3764002c1d3c8ad9178e95b7f7f9f5bfef1ef35d"
        ],
        [
            "Implicit Type t : tuple_of.",
            "VernacReserve",
            "6d1b6f51de3178e82e2f7457847ff996130b63c4"
        ],
        [
            "Definition tsize of tuple_of := n.",
            "VernacDefinition",
            "71d26898e968bede7b3b58f8e629a8761eb27054"
        ],
        [
            "Lemma size_tuple t : size t = n.",
            "VernacStartTheoremProof",
            "46887372706a698f2ce6cfb418e12e622f1a9e43"
        ],
        [
            "exact: (eqP (valP t)).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tnth_default t : 'I_n -> T.",
            "VernacStartTheoremProof",
            "5d67f352f0e5504960d36853a3b239fce29ac93f"
        ],
        [
            "by rewrite -(size_tuple t); case: (tval t) => [|//] [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition tnth t i := nth (tnth_default t i) t i.",
            "VernacDefinition",
            "254c13bcac66b7a221fcb2d04bbdefef33104ba6"
        ],
        [
            "Lemma tnth_nth x t i : tnth t i = nth x t i.",
            "VernacStartTheoremProof",
            "629400ccea45db53ed07f060f0fb273722dbaa63"
        ],
        [
            "by apply: set_nth_default; rewrite size_tuple.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_tnth_enum t : map (tnth t) (enum 'I_n) = t.",
            "VernacStartTheoremProof",
            "a21f87731740745306bf4b9836da61992f0ea1e1"
        ],
        [
            "case def_t: {-}(val t) => [|x0 t'].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite [enum _]size0nil // -cardE card_ord -(size_tuple t) def_t.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: (@eq_from_nth _ x0) => [|i]; rewrite size_map.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite -cardE size_tuple card_ord.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> lt_i_e; have lt_i_n: i < n by rewrite -cardE card_ord in lt_i_e.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "by rewrite (nth_map (Ordinal lt_i_n)) // (tnth_nth x0) nth_enum_ord.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_from_tnth t1 t2 : tnth t1 =1 tnth t2 -> t1 = t2.",
            "VernacStartTheoremProof",
            "fff44509fe3585b23487447e5259b897e26c23ef"
        ],
        [
            "by move/eq_map=> eq_t; apply: val_inj; rewrite /= -!map_tnth_enum eq_t.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition tuple t mkT : tuple_of := mkT (let: Tuple _ tP := t return size t == n in tP).",
            "VernacDefinition",
            "cd9bc33f82e20d01b6d427924d7b8fac3bab9d02"
        ],
        [
            "Lemma tupleE t : tuple (fun sP => @Tuple t sP) = t.",
            "VernacStartTheoremProof",
            "c255ded92ee98987d653b627ba26e5b6e91159c8"
        ],
        [
            "by case: t.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Def.",
            "VernacEndSegment",
            "616ad5692568c74f61a9df3a82ac03d2b7ebac01"
        ],
        [
            "Notation \"n .-tuple\" := (tuple_of n) (at level 2, format \"n .-tuple\") : type_scope.",
            "VernacNotation",
            "3a8994dbf0d3be740cbecfe994f8769f571be813"
        ],
        [
            "Notation \"{ 'tuple' n 'of' T }\" := (n.-tuple T : predArgType) (at level 0, only parsing) : form_scope.",
            "VernacNotation",
            "cfbd89efe7b0080b60f83eb97ed9f7656321a357"
        ],
        [
            "Notation \"[ 'tuple' 'of' s ]\" := (tuple (fun sP => @Tuple _ _ s sP)) (at level 0, format \"[ 'tuple' 'of' s ]\") : form_scope.",
            "VernacNotation",
            "87612f960d65212eefee6172cd57c460f1b4fac4"
        ],
        [
            "Notation \"[ 'tnth' t i ]\" := (tnth t (@Ordinal (tsize t) i (erefl true))) (at level 0, t, i at level 8, format \"[ 'tnth' t i ]\") : form_scope.",
            "VernacNotation",
            "452f97815d88f03d075c70a16be631a15a93bc1e"
        ],
        [
            "Canonical nil_tuple T := Tuple (isT : @size T [::] == 0).",
            "VernacDefinition",
            "e87ff11e9337100ae3b400077c7c46e0b0da4b11"
        ],
        [
            "Canonical cons_tuple n T x (t : n.-tuple T) := Tuple (valP t : size (x :: t) == n.+1).",
            "VernacDefinition",
            "b80401f9aa98fa8874f41236b0965ea999bb0c12"
        ],
        [
            "Notation \"[ 'tuple' x1 ; .. ; xn ]\" := [tuple of x1 :: .. [:: xn] ..] (at level 0, format \"[ 'tuple' '[' x1 ; '/' .. ; '/' xn ']' ]\") : form_scope.",
            "VernacNotation",
            "51ffda599d65a74f36540dc765f76268de88ce18"
        ],
        [
            "Notation \"[ 'tuple' ]\" := [tuple of [::]] (at level 0, format \"[ 'tuple' ]\") : form_scope.",
            "VernacNotation",
            "4641ed67091a5242a03f1fa31842751dadd53481"
        ],
        [
            "Section CastTuple.",
            "VernacBeginSection",
            "3d5905bb4c74802e3e472d42b72a38d31b966741"
        ],
        [
            "Variable T : Type.",
            "VernacAssumption",
            "a15b17e37c4241158d544882375356c273dc93f2"
        ],
        [
            "Definition in_tuple (s : seq T) := Tuple (eqxx (size s)).",
            "VernacDefinition",
            "6b3188f12f6135b64e47bfe9c9488057d82ec417"
        ],
        [
            "Definition tcast m n (eq_mn : m = n) t := let: erefl in _ = n := eq_mn return n.-tuple T in t.",
            "VernacDefinition",
            "be025914448d3316104b182282d9aa8f8cc45282"
        ],
        [
            "Lemma tcastE m n (eq_mn : m = n) t i : tnth (tcast eq_mn t) i = tnth t (cast_ord (esym eq_mn) i).",
            "VernacStartTheoremProof",
            "2d153be96c8ce7a5baa11a39d182b3575e2a9cb9"
        ],
        [
            "by case: n / eq_mn in i *; rewrite cast_ord_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tcast_id n (eq_nn : n = n) t : tcast eq_nn t = t.",
            "VernacStartTheoremProof",
            "d5f8b4752d649697ff79f5d3e0a3b8f09e9e0a12"
        ],
        [
            "by rewrite (eq_axiomK eq_nn).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tcastK m n (eq_mn : m = n) : cancel (tcast eq_mn) (tcast (esym eq_mn)).",
            "VernacStartTheoremProof",
            "2fc2b26c90aa1b21cde3cfbbb592200678a51556"
        ],
        [
            "by case: n / eq_mn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tcastKV m n (eq_mn : m = n) : cancel (tcast (esym eq_mn)) (tcast eq_mn).",
            "VernacStartTheoremProof",
            "fa825d3b01b81bd9f48768831db683158b873d9e"
        ],
        [
            "by case: n / eq_mn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tcast_trans m n p (eq_mn : m = n) (eq_np : n = p) t: tcast (etrans eq_mn eq_np) t = tcast eq_np (tcast eq_mn t).",
            "VernacStartTheoremProof",
            "d2b4d80d81403b0d29a360ef9af2d3f5be288aa1"
        ],
        [
            "by case: n / eq_mn eq_np; case: p /.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tvalK n (t : n.-tuple T) : in_tuple t = tcast (esym (size_tuple t)) t.",
            "VernacStartTheoremProof",
            "86e6bb29fb74106120a00010860ba309239f6817"
        ],
        [
            "by apply: val_inj => /=; case: _ / (esym _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_tupleE s : in_tuple s = s :> seq T.",
            "VernacStartTheoremProof",
            "71ebe1a00be90c99cbb9adb2fe5bd71e7b379e77"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End CastTuple.",
            "VernacEndSegment",
            "4e46eff184c049a4287b5421c6dab493e785260d"
        ],
        [
            "Section SeqTuple.",
            "VernacBeginSection",
            "3fea408a31b0629eac887f23d2c84d1b8ad64382"
        ],
        [
            "Variables (n m : nat) (T U rT : Type).",
            "VernacAssumption",
            "63f63251c273ee02d5eaa9a3be8380df247083ff"
        ],
        [
            "Implicit Type t : n.-tuple T.",
            "VernacReserve",
            "fe36988cc67dd49cb3175c4b4ded2ae8b0faf6c4"
        ],
        [
            "Lemma rcons_tupleP t x : size (rcons t x) == n.+1.",
            "VernacStartTheoremProof",
            "08087f03b2645ad7f910e321208c8813f9739e04"
        ],
        [
            "by rewrite size_rcons size_tuple.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical rcons_tuple t x := Tuple (rcons_tupleP t x).",
            "VernacDefinition",
            "56f8456e7ff16d3830e13c51f6e1de11490da661"
        ],
        [
            "Lemma nseq_tupleP x : @size T (nseq n x) == n.",
            "VernacStartTheoremProof",
            "e778ee2987e9eb96bd8b98d4c76e625f8a3b1c36"
        ],
        [
            "by rewrite size_nseq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical nseq_tuple x := Tuple (nseq_tupleP x).",
            "VernacDefinition",
            "5a576494163e390d1ab04e8b4f3d999e18ee7e13"
        ],
        [
            "Lemma iota_tupleP : size (iota m n) == n.",
            "VernacStartTheoremProof",
            "5403f92f0081da863fad710a15e459003b52112b"
        ],
        [
            "by rewrite size_iota.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical iota_tuple := Tuple iota_tupleP.",
            "VernacDefinition",
            "d5336199608a842db6475d65389ba25390c9cbec"
        ],
        [
            "Lemma behead_tupleP t : size (behead t) == n.-1.",
            "VernacStartTheoremProof",
            "32f75e52134daa6ecdc513d0eb18740ee60e2c77"
        ],
        [
            "by rewrite size_behead size_tuple.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical behead_tuple t := Tuple (behead_tupleP t).",
            "VernacDefinition",
            "f941ff3ba61d48a62f7bd2fe474d343b95c4cb90"
        ],
        [
            "Lemma belast_tupleP x t : size (belast x t) == n.",
            "VernacStartTheoremProof",
            "199c9aa589d23d1703052c41a1eda088f9911270"
        ],
        [
            "by rewrite size_belast size_tuple.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical belast_tuple x t := Tuple (belast_tupleP x t).",
            "VernacDefinition",
            "103ebb4c8e1b71d109bb6a03f15d8b7f6c47ca67"
        ],
        [
            "Lemma cat_tupleP t (u : m.-tuple T) : size (t ++ u) == n + m.",
            "VernacStartTheoremProof",
            "606ae9fe09de687d1fa5905b325b0879edcebe43"
        ],
        [
            "by rewrite size_cat !size_tuple.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical cat_tuple t u := Tuple (cat_tupleP t u).",
            "VernacDefinition",
            "dd9248c98a3a2a8c7b869fc9a03c248f8a8c8435"
        ],
        [
            "Lemma take_tupleP t : size (take m t) == minn m n.",
            "VernacStartTheoremProof",
            "1b9ad092d659b14cda32eb2f3b9b86def106eba4"
        ],
        [
            "by rewrite size_take size_tuple eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical take_tuple t := Tuple (take_tupleP t).",
            "VernacDefinition",
            "6ed51c0f787a6233bcd02f43bd7eaa655cf32bb5"
        ],
        [
            "Lemma drop_tupleP t : size (drop m t) == n - m.",
            "VernacStartTheoremProof",
            "32a383de55e02a5a3af337023d43c9ecf8d0672d"
        ],
        [
            "by rewrite size_drop size_tuple.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical drop_tuple t := Tuple (drop_tupleP t).",
            "VernacDefinition",
            "c187547e6ee52815ae7c58d069ac48a58375b7bc"
        ],
        [
            "Lemma rev_tupleP t : size (rev t) == n.",
            "VernacStartTheoremProof",
            "d83ceeea5d828a42dc17fff383fd5611530f96bb"
        ],
        [
            "by rewrite size_rev size_tuple.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical rev_tuple t := Tuple (rev_tupleP t).",
            "VernacDefinition",
            "eeab6c5c505d563e4aece2f67d880dc6c013e2cd"
        ],
        [
            "Lemma rot_tupleP t : size (rot m t) == n.",
            "VernacStartTheoremProof",
            "633ff325c705e1c8d99d41829dc29c2e6aff66e2"
        ],
        [
            "by rewrite size_rot size_tuple.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical rot_tuple t := Tuple (rot_tupleP t).",
            "VernacDefinition",
            "9c3f0ea2fc3bb0f19609b22da71a1e8bfe17f977"
        ],
        [
            "Lemma rotr_tupleP t : size (rotr m t) == n.",
            "VernacStartTheoremProof",
            "18a0b41b3d76c1c1b8346dd4ea180234b27320ec"
        ],
        [
            "by rewrite size_rotr size_tuple.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical rotr_tuple t := Tuple (rotr_tupleP t).",
            "VernacDefinition",
            "7d41b651c3cd0e3ceeb2e2a9e1769e64e5a97626"
        ],
        [
            "Lemma map_tupleP f t : @size rT (map f t) == n.",
            "VernacStartTheoremProof",
            "3be64c462158d980b6d76069012f967137597d8c"
        ],
        [
            "by rewrite size_map size_tuple.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical map_tuple f t := Tuple (map_tupleP f t).",
            "VernacDefinition",
            "ed3fa8567826f9829932558942732211de001672"
        ],
        [
            "Lemma scanl_tupleP f x t : @size rT (scanl f x t) == n.",
            "VernacStartTheoremProof",
            "ee05aa6f4ff5f63e2ccf3a06d625cda4040971f5"
        ],
        [
            "by rewrite size_scanl size_tuple.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical scanl_tuple f x t := Tuple (scanl_tupleP f x t).",
            "VernacDefinition",
            "e70615afc2f6f76817afbd604ab04cb537a492b9"
        ],
        [
            "Lemma pairmap_tupleP f x t : @size rT (pairmap f x t) == n.",
            "VernacStartTheoremProof",
            "5271f337eff0e4c8e1448b71b40f0c8b64fcf505"
        ],
        [
            "by rewrite size_pairmap size_tuple.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical pairmap_tuple f x t := Tuple (pairmap_tupleP f x t).",
            "VernacDefinition",
            "7e5fb6bce65a7a910cbb964afe2b131d99a50e22"
        ],
        [
            "Lemma zip_tupleP t (u : n.-tuple U) : size (zip t u) == n.",
            "VernacStartTheoremProof",
            "9a661a55e73ada1e142e6db257cc1f2622b1e84c"
        ],
        [
            "by rewrite size1_zip !size_tuple.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical zip_tuple t u := Tuple (zip_tupleP t u).",
            "VernacDefinition",
            "f80e68fe54777dfdc1305f42895c09b3f2c7448c"
        ],
        [
            "Lemma allpairs_tupleP f t (u : m.-tuple U) : @size rT (allpairs f t u) == n * m.",
            "VernacStartTheoremProof",
            "877c1ffbebf16476c319e6a118ec9092b91285c9"
        ],
        [
            "by rewrite size_allpairs !size_tuple.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical allpairs_tuple f t u := Tuple (allpairs_tupleP f t u).",
            "VernacDefinition",
            "36f5b8e421d6da41b9924674f863f31e7e75b2b4"
        ],
        [
            "Definition thead (u : n.+1.-tuple T) := tnth u ord0.",
            "VernacDefinition",
            "66ab19427638e9ad1aa0ac91276ac64bf1f0d6d3"
        ],
        [
            "Lemma tnth0 x t : tnth [tuple of x :: t] ord0 = x.",
            "VernacStartTheoremProof",
            "9e359df6f50ca7126045525b3fa3b858a1f00fbd"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma theadE x t : thead [tuple of x :: t] = x.",
            "VernacStartTheoremProof",
            "0fb2cbfb1bdaf9a39e1ea9dd3b88f2bdd5c2582c"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tuple0 : all_equal_to ([tuple] : 0.-tuple T).",
            "VernacStartTheoremProof",
            "6808a1384bce684d2e4d5981771f941af879d139"
        ],
        [
            "by move=> t; apply: val_inj; case: t => [[]].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variant tuple1_spec : n.+1.-tuple T -> Type := Tuple1spec x t : tuple1_spec [tuple of x :: t].",
            "VernacInductive",
            "09fbabc86edc745e9667511e5ac506103f19115d"
        ],
        [
            "Lemma tupleP u : tuple1_spec u.",
            "VernacStartTheoremProof",
            "19f7dea9c954e0eeec3e06a1f2f8b42432db86d2"
        ],
        [
            "case: u => [[|x s] //= sz_s]; pose t := @Tuple n _ s sz_s.",
            "VernacExtend",
            "61f7313c68f88d92a678d74fe9c99999257a468e"
        ],
        [
            "by rewrite (_ : Tuple _ = [tuple of x :: t]) //; apply: val_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tnth_map f t i : tnth [tuple of map f t] i = f (tnth t i) :> rT.",
            "VernacStartTheoremProof",
            "7de547122be385a0c3f9bf5ee3e3b87e2031f134"
        ],
        [
            "by apply: nth_map; rewrite size_tuple.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SeqTuple.",
            "VernacEndSegment",
            "ed367f1491b0c78f294bdc92a92a9e747816f397"
        ],
        [
            "Lemma tnth_behead n T (t : n.+1.-tuple T) i : tnth [tuple of behead t] i = tnth t (inord i.+1).",
            "VernacStartTheoremProof",
            "ca11917a0110df9429ec64830efb315f8b35927a"
        ],
        [
            "by case/tupleP: t => x t; rewrite !(tnth_nth x) inordK ?ltnS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tuple_eta n T (t : n.+1.-tuple T) : t = [tuple of thead t :: behead t].",
            "VernacStartTheoremProof",
            "85a5384cf4d89071336a0087a374687b20d55970"
        ],
        [
            "by case/tupleP: t => x t; apply: val_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section TupleQuantifiers.",
            "VernacBeginSection",
            "621878f20d9f36d5739d9a1ae382f8e3ec4a648b"
        ],
        [
            "Variables (n : nat) (T : Type).",
            "VernacAssumption",
            "e20824a2fe6ef9a5d6a15b446dae4901987eedc8"
        ],
        [
            "Implicit Types (a : pred T) (t : n.-tuple T).",
            "VernacReserve",
            "0584c44802199d20a0df215a49b968dc3cd036ea"
        ],
        [
            "Lemma forallb_tnth a t : [forall i, a (tnth t i)] = all a t.",
            "VernacStartTheoremProof",
            "66c8e8f51fa3378ac9b5b2f4d38bd7e4e36cc232"
        ],
        [
            "apply: negb_inj; rewrite -has_predC -has_map negb_forall.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply/existsP/(has_nthP true) => [[i a_t_i] | [i lt_i_n a_t_i]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by exists i; rewrite ?size_tuple // -tnth_nth tnth_map.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite size_tuple in lt_i_n; exists (Ordinal lt_i_n).",
            "VernacExtend",
            "ac5353439e8a7d270fbd60fb85b14b978e18b9aa"
        ],
        [
            "by rewrite -tnth_map (tnth_nth true).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma existsb_tnth a t : [exists i, a (tnth t i)] = has a t.",
            "VernacStartTheoremProof",
            "63a898647c8091984973ec82031b245026836f57"
        ],
        [
            "by apply: negb_inj; rewrite negb_exists -all_predC -forallb_tnth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma all_tnthP a t : reflect (forall i, a (tnth t i)) (all a t).",
            "VernacStartTheoremProof",
            "0b7acd7a0b159410f7914769a035970382ea4163"
        ],
        [
            "by rewrite -forallb_tnth; apply: forallP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma has_tnthP a t : reflect (exists i, a (tnth t i)) (has a t).",
            "VernacStartTheoremProof",
            "55ced5207e85df9bfa691e2dca9e7f2e6aac6dcb"
        ],
        [
            "by rewrite -existsb_tnth; apply: existsP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End TupleQuantifiers.",
            "VernacEndSegment",
            "159253c1cfe79c22e90c5e63fb5c1e0b5385683e"
        ],
        [
            "Arguments all_tnthP {n T a t}.",
            "VernacArguments",
            "00692aa1cfbab337161c50d73406c95fadaff046"
        ],
        [
            "Arguments has_tnthP {n T a t}.",
            "VernacArguments",
            "beb0ea08478aad722a35d0a8b70a0503c925f929"
        ],
        [
            "Section EqTuple.",
            "VernacBeginSection",
            "4b705abc02973d0e3b9ad2f6af9ee4993f252423"
        ],
        [
            "Variables (n : nat) (T : eqType).",
            "VernacAssumption",
            "97fd6e97abfb330ee92cdae24dfb9751e97a7ee2"
        ],
        [
            "Definition tuple_eqMixin := Eval hnf in [eqMixin of n.-tuple T by <:].",
            "VernacDefinition",
            "70c8e7b5dc8a62a0d6e44154f60c7e7a9bf910b0"
        ],
        [
            "Canonical tuple_eqType := Eval hnf in EqType (n.-tuple T) tuple_eqMixin.",
            "VernacDefinition",
            "622b3dcac7f6947a77107ec918c90f396244bb1c"
        ],
        [
            "Canonical tuple_predType := Eval hnf in mkPredType (fun t : n.-tuple T => mem_seq t).",
            "VernacDefinition",
            "eb5231781a0febf737984ea6f373514ed79af644"
        ],
        [
            "Lemma memtE (t : n.-tuple T) : mem t = mem (tval t).",
            "VernacStartTheoremProof",
            "b82751578503ac040e2d132ca9f108120367b412"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_tnth i (t : n.-tuple T) : tnth t i \\in t.",
            "VernacStartTheoremProof",
            "1419a4a7b75ac342e16349a59c10843ad1127ebb"
        ],
        [
            "by rewrite mem_nth ?size_tuple.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma memt_nth x0 (t : n.-tuple T) i : i < n -> nth x0 t i \\in t.",
            "VernacStartTheoremProof",
            "19a127acce3aab5895cd97acd51cace6912d0eec"
        ],
        [
            "by move=> i_lt_n; rewrite mem_nth ?size_tuple.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tnthP (t : n.-tuple T) x : reflect (exists i, x = tnth t i) (x \\in t).",
            "VernacStartTheoremProof",
            "a67c662832139b02316cdfaf31e2afc3403be745"
        ],
        [
            "apply: (iffP idP) => [/(nthP x)[i ltin <-] | [i ->]]; last exact: mem_tnth.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite size_tuple in ltin; exists (Ordinal ltin); rewrite (tnth_nth x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma seq_tnthP (s : seq T) x : x \\in s -> {i | x = tnth (in_tuple s) i}.",
            "VernacStartTheoremProof",
            "d2441e38f2d5a27e78878db5ffd38ec9d4bc00f4"
        ],
        [
            "move=> s_x; pose i := index x s; have lt_i: i < size s by rewrite index_mem.",
            "VernacExtend",
            "5e9f04e072d058c7688e55b9dff4d25555e15183"
        ],
        [
            "by exists (Ordinal lt_i); rewrite (tnth_nth x) nth_index.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EqTuple.",
            "VernacEndSegment",
            "a5511f644285bdf10f52a6b5196836cad45aa61f"
        ],
        [
            "Definition tuple_choiceMixin n (T : choiceType) := [choiceMixin of n.-tuple T by <:].",
            "VernacDefinition",
            "e84c818429bec6fbd65b416c3656242bbc68b6dd"
        ],
        [
            "Canonical tuple_choiceType n (T : choiceType) := Eval hnf in ChoiceType (n.-tuple T) (tuple_choiceMixin n T).",
            "VernacDefinition",
            "4e1ab8a8d0224fa6283c5491eaeec25fff598bac"
        ],
        [
            "Definition tuple_countMixin n (T : countType) := [countMixin of n.-tuple T by <:].",
            "VernacDefinition",
            "35f0379085c2f419dbe046db43bc712a95340c48"
        ],
        [
            "Canonical tuple_countType n (T : countType) := Eval hnf in CountType (n.-tuple T) (tuple_countMixin n T).",
            "VernacDefinition",
            "82a5a821fa97f3c8d6631f61b65d3e803cce3eaa"
        ],
        [
            "Canonical tuple_subCountType n (T : countType) := Eval hnf in [subCountType of n.-tuple T].",
            "VernacDefinition",
            "7366056fabfadd1976292999773b650f423aa3ae"
        ],
        [
            "Module Type FinTupleSig.",
            "VernacDeclareModuleType",
            "147f6dacc3cfccb9c45afad7af6fc37881568b4d"
        ],
        [
            "Section FinTupleSig.",
            "VernacBeginSection",
            "d0b52b16a309dde70348b4748d3f0048e9141499"
        ],
        [
            "Variables (n : nat) (T : finType).",
            "VernacAssumption",
            "49a3280a18c0fd02cf954d202c7364955d37bf34"
        ],
        [
            "Parameter enum : seq (n.-tuple T).",
            "VernacAssumption",
            "aa64a3ffab78c614210ffb4df914faa449fe0800"
        ],
        [
            "Axiom enumP : Finite.axiom enum.",
            "VernacAssumption",
            "d7d6d8831ef5c58575ca17801138c7f55b4dd47f"
        ],
        [
            "Axiom size_enum : size enum = #|T| ^ n.",
            "VernacAssumption",
            "e60cc8536c73e170ba72cdf3f9b9712cbb7a23f4"
        ],
        [
            "End FinTupleSig.",
            "VernacEndSegment",
            "3e40901b0b5b6156f7d8ef0b924fdb7ec63f4cb7"
        ],
        [
            "End FinTupleSig.",
            "VernacEndSegment",
            "3e40901b0b5b6156f7d8ef0b924fdb7ec63f4cb7"
        ],
        [
            "Module FinTuple : FinTupleSig.",
            "VernacDefineModule",
            "4e98521273f376bdf69fac8b12ee7e0e0209f70d"
        ],
        [
            "Section FinTuple.",
            "VernacBeginSection",
            "1f2deeb5a83cb417ad208bbc619552b5d2719666"
        ],
        [
            "Variables (n : nat) (T : finType).",
            "VernacAssumption",
            "49a3280a18c0fd02cf954d202c7364955d37bf34"
        ],
        [
            "Definition enum : seq (n.-tuple T) := let extend e := flatten (codom (fun x => map (cons x) e)) in pmap insub (iter n extend [::[::]]).",
            "VernacDefinition",
            "a3133b1cc908c8174e885ec889c1898e5619c5e3"
        ],
        [
            "Lemma enumP : Finite.axiom enum.",
            "VernacStartTheoremProof",
            "e05d823fb285ac854c2c917bd07a02b4a9cee283"
        ],
        [
            "case=> /= t t_n; rewrite -(count_map _ (pred1 t)) (pmap_filter (insubK _)).",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "rewrite count_filter -(@eq_count _ (pred1 t)) => [|s /=]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite isSome_insub; case: eqP=> // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: n t t_n => [|m IHm] [|x t] //= {IHm}/IHm; move: (iter m _ _) => em IHm.",
            "VernacExtend",
            "989401386cd39cd1438e3fa67734cdc58d3fb2ea"
        ],
        [
            "transitivity (x \\in T : nat); rewrite // -mem_enum codomE.",
            "VernacExtend",
            "9450847caf8917903450b241deb0fa7b21907962"
        ],
        [
            "elim: (fintype.enum T) (enum_uniq T) => //= y e IHe /andP[/negPf ney].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "rewrite count_cat count_map inE /preim /= {1}/eq_op /= eq_sym => /IHe->.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by case: eqP => [->|_]; rewrite ?(ney, count_pred0, IHm).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma size_enum : size enum = #|T| ^ n.",
            "VernacStartTheoremProof",
            "76911e92fb05faf12eca483e8319d93e7fdd5f25"
        ],
        [
            "rewrite /= cardE size_pmap_sub; elim: n => //= m IHm.",
            "VernacExtend",
            "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
        ],
        [
            "rewrite expnS /codom /image_mem; elim: {2 3}(fintype.enum T) => //= x e IHe.",
            "VernacExtend",
            "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
        ],
        [
            "by rewrite count_cat {}IHe count_map IHm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FinTuple.",
            "VernacEndSegment",
            "ba6b0b9c3a9943c3e3e30d4400c879fe928f02ef"
        ],
        [
            "End FinTuple.",
            "VernacEndSegment",
            "ba6b0b9c3a9943c3e3e30d4400c879fe928f02ef"
        ],
        [
            "Section UseFinTuple.",
            "VernacBeginSection",
            "4f7d35892dd5d4c037cd780ee9188a9c4bdc9a32"
        ],
        [
            "Variables (n : nat) (T : finType).",
            "VernacAssumption",
            "49a3280a18c0fd02cf954d202c7364955d37bf34"
        ],
        [
            "Definition tuple_finMixin := Eval hnf in FinMixin (@FinTuple.enumP n T).",
            "VernacDefinition",
            "06a1bbf6c16b1bd567018aba16debea3b84840d8"
        ],
        [
            "Canonical tuple_finType := Eval hnf in FinType (n.-tuple T) tuple_finMixin.",
            "VernacDefinition",
            "82c616362e145db4e1b73b4f2891cb67f881a459"
        ],
        [
            "Canonical tuple_subFinType := Eval hnf in [subFinType of n.-tuple T].",
            "VernacDefinition",
            "54c70abf2e7e049ab638f85523ec997775c2042d"
        ],
        [
            "Lemma card_tuple : #|{:n.-tuple T}| = #|T| ^ n.",
            "VernacStartTheoremProof",
            "776477361aaf4e6995ddb6e256e2bc8d7eac058e"
        ],
        [
            "by rewrite [#|_|]cardT enumT unlock FinTuple.size_enum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma enum_tupleP (A : pred T) : size (enum A) == #|A|.",
            "VernacStartTheoremProof",
            "8fb2b31d467d1f5dc452df782bb3348eb9f17b9f"
        ],
        [
            "by rewrite -cardE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical enum_tuple A := Tuple (enum_tupleP A).",
            "VernacDefinition",
            "5300e96755a2e30569bddb5d54205c132d81f15d"
        ],
        [
            "Definition ord_tuple : n.-tuple 'I_n := Tuple (introT eqP (size_enum_ord n)).",
            "VernacDefinition",
            "1a5dd43bcede639bb9d5d7a521a18469b37cb6b4"
        ],
        [
            "Lemma val_ord_tuple : val ord_tuple = enum 'I_n.",
            "VernacStartTheoremProof",
            "b87eeea53854d8d0e298a0b80f2a66bcbdd19d6d"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tuple_map_ord U (t : n.-tuple U) : t = [tuple of map (tnth t) ord_tuple].",
            "VernacStartTheoremProof",
            "25ebcb88bce8c3e3c4bc7e147634be20251f4542"
        ],
        [
            "by apply: val_inj => /=; rewrite map_tnth_enum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tnth_ord_tuple i : tnth ord_tuple i = i.",
            "VernacStartTheoremProof",
            "994fd6e65f5509f699327ce26bf4ad7f0e3b9e25"
        ],
        [
            "apply: val_inj; rewrite (tnth_nth i) -(nth_map _ 0) ?size_tuple //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite /= enumT unlock val_ord_enum nth_iota.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section ImageTuple.",
            "VernacBeginSection",
            "4e1136555f7c3d4189e2218ef007c45d44863dd2"
        ],
        [
            "Variables (T' : Type) (f : T -> T') (A : pred T).",
            "VernacAssumption",
            "68af4deceb38c3c7a3ca151a3f3d4a8afc5f069a"
        ],
        [
            "Canonical image_tuple : #|A|.-tuple T' := [tuple of image f A].",
            "VernacDefinition",
            "ffedae582cbbd58d8b405d4de3323823b18e00a9"
        ],
        [
            "Canonical codom_tuple : #|T|.-tuple T' := [tuple of codom f].",
            "VernacDefinition",
            "2127aaf926efe9c1dd6d2710588ca3ddfee93694"
        ],
        [
            "End ImageTuple.",
            "VernacEndSegment",
            "209eb781f2a8eddb6f4161d9a5257d217ace68a4"
        ],
        [
            "Section MkTuple.",
            "VernacBeginSection",
            "443178791f6774614fe7099cb3e6eca451929c18"
        ],
        [
            "Variables (T' : Type) (f : 'I_n -> T').",
            "VernacAssumption",
            "c007eb42db4c7a51d7f724c258b47780998f6963"
        ],
        [
            "Definition mktuple := map_tuple f ord_tuple.",
            "VernacDefinition",
            "f6823fd82e731a3bf52da64a053f09b1d0cec582"
        ],
        [
            "Lemma tnth_mktuple i : tnth mktuple i = f i.",
            "VernacStartTheoremProof",
            "d64f3a16e1c7a5ac17ebaefdeab1635c6e0d726a"
        ],
        [
            "by rewrite tnth_map tnth_ord_tuple.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nth_mktuple x0 (i : 'I_n) : nth x0 mktuple i = f i.",
            "VernacStartTheoremProof",
            "2599cf96bf4f4d14bc45c9abd46e4db74bf07d10"
        ],
        [
            "by rewrite -tnth_nth tnth_mktuple.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MkTuple.",
            "VernacEndSegment",
            "9948c91eead60ba06e6f8d8199bcf155f758a689"
        ],
        [
            "End UseFinTuple.",
            "VernacEndSegment",
            "8ff2c7f10ca41cc263f97c118d305ac7d5b300fa"
        ],
        [
            "Notation \"[ 'tuple' F | i < n ]\" := (mktuple (fun i : 'I_n => F)) (at level 0, i at level 0, format \"[ '[hv' 'tuple' F '/' | i < n ] ']'\") : form_scope.",
            "VernacNotation",
            "35fdc60006b51470981d83c55a8553df2752e4a3"
        ]
    ],
    "proofs": [
        {
            "name": "size_tuple",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "exact: (eqP (valP t)).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tnth_default",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "by rewrite -(size_tuple t); case: (tval t) => [|//] [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tnth_nth",
            "line_nb": 18,
            "steps": [
                {
                    "command": [
                        "by apply: set_nth_default; rewrite size_tuple.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_tnth_enum",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "case def_t: {-}(val t) => [|x0 t'].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite [enum _]size0nil // -cardE card_ord -(size_tuple t) def_t.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: (@eq_from_nth _ x0) => [|i]; rewrite size_map.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite -cardE size_tuple card_ord.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move=> lt_i_e; have lt_i_n: i < n by rewrite -cardE card_ord in lt_i_e.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "by rewrite (nth_map (Ordinal lt_i_n)) // (tnth_nth x0) nth_enum_ord.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_from_tnth",
            "line_nb": 29,
            "steps": [
                {
                    "command": [
                        "by move/eq_map=> eq_t; apply: val_inj; rewrite /= -!map_tnth_enum eq_t.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tupleE",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "by case: t.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tcastE",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "by case: n / eq_mn in i *; rewrite cast_ord_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tcast_id",
            "line_nb": 52,
            "steps": [
                {
                    "command": [
                        "by rewrite (eq_axiomK eq_nn).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tcastK",
            "line_nb": 55,
            "steps": [
                {
                    "command": [
                        "by case: n / eq_mn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tcastKV",
            "line_nb": 58,
            "steps": [
                {
                    "command": [
                        "by case: n / eq_mn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tcast_trans",
            "line_nb": 61,
            "steps": [
                {
                    "command": [
                        "by case: n / eq_mn eq_np; case: p /.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tvalK",
            "line_nb": 64,
            "steps": [
                {
                    "command": [
                        "by apply: val_inj => /=; case: _ / (esym _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_tupleE",
            "line_nb": 67,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rcons_tupleP",
            "line_nb": 74,
            "steps": [
                {
                    "command": [
                        "by rewrite size_rcons size_tuple.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nseq_tupleP",
            "line_nb": 78,
            "steps": [
                {
                    "command": [
                        "by rewrite size_nseq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iota_tupleP",
            "line_nb": 82,
            "steps": [
                {
                    "command": [
                        "by rewrite size_iota.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "behead_tupleP",
            "line_nb": 86,
            "steps": [
                {
                    "command": [
                        "by rewrite size_behead size_tuple.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "belast_tupleP",
            "line_nb": 90,
            "steps": [
                {
                    "command": [
                        "by rewrite size_belast size_tuple.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cat_tupleP",
            "line_nb": 94,
            "steps": [
                {
                    "command": [
                        "by rewrite size_cat !size_tuple.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "take_tupleP",
            "line_nb": 98,
            "steps": [
                {
                    "command": [
                        "by rewrite size_take size_tuple eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "drop_tupleP",
            "line_nb": 102,
            "steps": [
                {
                    "command": [
                        "by rewrite size_drop size_tuple.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rev_tupleP",
            "line_nb": 106,
            "steps": [
                {
                    "command": [
                        "by rewrite size_rev size_tuple.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rot_tupleP",
            "line_nb": 110,
            "steps": [
                {
                    "command": [
                        "by rewrite size_rot size_tuple.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rotr_tupleP",
            "line_nb": 114,
            "steps": [
                {
                    "command": [
                        "by rewrite size_rotr size_tuple.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_tupleP",
            "line_nb": 118,
            "steps": [
                {
                    "command": [
                        "by rewrite size_map size_tuple.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "scanl_tupleP",
            "line_nb": 122,
            "steps": [
                {
                    "command": [
                        "by rewrite size_scanl size_tuple.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pairmap_tupleP",
            "line_nb": 126,
            "steps": [
                {
                    "command": [
                        "by rewrite size_pairmap size_tuple.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "zip_tupleP",
            "line_nb": 130,
            "steps": [
                {
                    "command": [
                        "by rewrite size1_zip !size_tuple.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "allpairs_tupleP",
            "line_nb": 134,
            "steps": [
                {
                    "command": [
                        "by rewrite size_allpairs !size_tuple.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tnth0",
            "line_nb": 139,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "theadE",
            "line_nb": 142,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tuple0",
            "line_nb": 145,
            "steps": [
                {
                    "command": [
                        "by move=> t; apply: val_inj; case: t => [[]].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tupleP",
            "line_nb": 149,
            "steps": [
                {
                    "command": [
                        "case: u => [[|x s] //= sz_s]; pose t := @Tuple n _ s sz_s.",
                        "VernacExtend",
                        "61f7313c68f88d92a678d74fe9c99999257a468e"
                    ]
                },
                {
                    "command": [
                        "by rewrite (_ : Tuple _ = [tuple of x :: t]) //; apply: val_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tnth_map",
            "line_nb": 153,
            "steps": [
                {
                    "command": [
                        "by apply: nth_map; rewrite size_tuple.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tnth_behead",
            "line_nb": 157,
            "steps": [
                {
                    "command": [
                        "by case/tupleP: t => x t; rewrite !(tnth_nth x) inordK ?ltnS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tuple_eta",
            "line_nb": 160,
            "steps": [
                {
                    "command": [
                        "by case/tupleP: t => x t; apply: val_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "forallb_tnth",
            "line_nb": 166,
            "steps": [
                {
                    "command": [
                        "apply: negb_inj; rewrite -has_predC -has_map negb_forall.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "apply/existsP/(has_nthP true) => [[i a_t_i] | [i lt_i_n a_t_i]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by exists i; rewrite ?size_tuple // -tnth_nth tnth_map.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite size_tuple in lt_i_n; exists (Ordinal lt_i_n).",
                        "VernacExtend",
                        "ac5353439e8a7d270fbd60fb85b14b978e18b9aa"
                    ]
                },
                {
                    "command": [
                        "by rewrite -tnth_map (tnth_nth true).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "existsb_tnth",
            "line_nb": 173,
            "steps": [
                {
                    "command": [
                        "by apply: negb_inj; rewrite negb_exists -all_predC -forallb_tnth.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_tnthP",
            "line_nb": 176,
            "steps": [
                {
                    "command": [
                        "by rewrite -forallb_tnth; apply: forallP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "has_tnthP",
            "line_nb": 179,
            "steps": [
                {
                    "command": [
                        "by rewrite -existsb_tnth; apply: existsP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "memtE",
            "line_nb": 190,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_tnth",
            "line_nb": 193,
            "steps": [
                {
                    "command": [
                        "by rewrite mem_nth ?size_tuple.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "memt_nth",
            "line_nb": 196,
            "steps": [
                {
                    "command": [
                        "by move=> i_lt_n; rewrite mem_nth ?size_tuple.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tnthP",
            "line_nb": 199,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [/(nthP x)[i ltin <-] | [i ->]]; last exact: mem_tnth.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite size_tuple in ltin; exists (Ordinal ltin); rewrite (tnth_nth x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "seq_tnthP",
            "line_nb": 203,
            "steps": [
                {
                    "command": [
                        "move=> s_x; pose i := index x s; have lt_i: i < size s by rewrite index_mem.",
                        "VernacExtend",
                        "5e9f04e072d058c7688e55b9dff4d25555e15183"
                    ]
                },
                {
                    "command": [
                        "by exists (Ordinal lt_i); rewrite (tnth_nth x) nth_index.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enumP",
            "line_nb": 225,
            "steps": [
                {
                    "command": [
                        "case=> /= t t_n; rewrite -(count_map _ (pred1 t)) (pmap_filter (insubK _)).",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "rewrite count_filter -(@eq_count _ (pred1 t)) => [|s /=]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite isSome_insub; case: eqP=> // ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: n t t_n => [|m IHm] [|x t] //= {IHm}/IHm; move: (iter m _ _) => em IHm.",
                        "VernacExtend",
                        "989401386cd39cd1438e3fa67734cdc58d3fb2ea"
                    ]
                },
                {
                    "command": [
                        "transitivity (x \\in T : nat); rewrite // -mem_enum codomE.",
                        "VernacExtend",
                        "9450847caf8917903450b241deb0fa7b21907962"
                    ]
                },
                {
                    "command": [
                        "elim: (fintype.enum T) (enum_uniq T) => //= y e IHe /andP[/negPf ney].",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "rewrite count_cat count_map inE /preim /= {1}/eq_op /= eq_sym => /IHe->.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by case: eqP => [->|_]; rewrite ?(ney, count_pred0, IHm).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "size_enum",
            "line_nb": 235,
            "steps": [
                {
                    "command": [
                        "rewrite /= cardE size_pmap_sub; elim: n => //= m IHm.",
                        "VernacExtend",
                        "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
                    ]
                },
                {
                    "command": [
                        "rewrite expnS /codom /image_mem; elim: {2 3}(fintype.enum T) => //= x e IHe.",
                        "VernacExtend",
                        "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
                    ]
                },
                {
                    "command": [
                        "by rewrite count_cat {}IHe count_map IHm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_tuple",
            "line_nb": 247,
            "steps": [
                {
                    "command": [
                        "by rewrite [#|_|]cardT enumT unlock FinTuple.size_enum.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "enum_tupleP",
            "line_nb": 250,
            "steps": [
                {
                    "command": [
                        "by rewrite -cardE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "val_ord_tuple",
            "line_nb": 255,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tuple_map_ord",
            "line_nb": 258,
            "steps": [
                {
                    "command": [
                        "by apply: val_inj => /=; rewrite map_tnth_enum.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tnth_ord_tuple",
            "line_nb": 261,
            "steps": [
                {
                    "command": [
                        "apply: val_inj; rewrite (tnth_nth i) -(nth_map _ 0) ?size_tuple //.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite /= enumT unlock val_ord_enum nth_iota.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tnth_mktuple",
            "line_nb": 273,
            "steps": [
                {
                    "command": [
                        "by rewrite tnth_map tnth_ord_tuple.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nth_mktuple",
            "line_nb": 276,
            "steps": [
                {
                    "command": [
                        "by rewrite -tnth_nth tnth_mktuple.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}