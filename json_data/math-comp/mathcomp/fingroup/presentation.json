{
    "filename": "mathcomp/fingroup/presentation.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrbool ssrfun eqtype ssrnat seq fintype finset.",
            "VernacRequire",
            "0f40563b7b4070e90e442040a775c31459947079"
        ],
        [
            "From mathcomp Require Import fingroup morphism.",
            "VernacRequire",
            "b3bcd37e92bbb4c035ab7325902975af4362824d"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Import GroupScope.",
            "VernacImport",
            "89fd18b7dcbcc46edcd02262df11c799856485fc"
        ],
        [
            "Module Presentation.",
            "VernacDefineModule",
            "f615c394fdf57ac05be2216e8e477cda07d74604"
        ],
        [
            "Section Presentation.",
            "VernacBeginSection",
            "79c737e6856affcfa04f09a4f198f7e2cb41dcf6"
        ],
        [
            "Implicit Types gT rT : finGroupType.",
            "VernacReserve",
            "a8f8cc577f5b1ea7d7ddc27aebbd738660947541"
        ],
        [
            "Implicit Type vT : finType.",
            "VernacReserve",
            "3dec9a0448e6a3d5e35d55acb105b9da63ef3f8e"
        ],
        [
            "Inductive term := | Cst of nat | Idx | Inv of term | Exp of term & nat | Mul of term & term | Conj of term & term | Comm of term & term.",
            "VernacInductive",
            "77596043bccdfb757fb7a77a610fb5ba7d41f4d7"
        ],
        [
            "Fixpoint eval {gT} e t : gT := match t with | Cst i => nth 1 e i | Idx => 1 | Inv t1 => (eval e t1)^-1 | Exp t1 n => eval e t1 ^+ n | Mul t1 t2 => eval e t1 * eval e t2 | Conj t1 t2 => eval e t1 ^ eval e t2 | Comm t1 t2 => [~ eval e t1, eval e t2] end.",
            "VernacFixpoint",
            "b67fb21763bc04d28ff8c4675b1fb83dfe0ba1a3"
        ],
        [
            "Inductive formula := Eq2 of term & term | And of formula & formula.",
            "VernacInductive",
            "4a15315827891c4ba2bd407fac513db8c8e1fb75"
        ],
        [
            "Definition Eq1 s := Eq2 s Idx.",
            "VernacDefinition",
            "807eb63d23f67aa213e3d2d5ee958a229cf5d472"
        ],
        [
            "Definition Eq3 s1 s2 t := And (Eq2 s1 t) (Eq2 s2 t).",
            "VernacDefinition",
            "c4eb36be9ed64ee49f74cfbdc8fd62ddca15f48a"
        ],
        [
            "Inductive rel_type := NoRel | Rel vT of vT & vT.",
            "VernacInductive",
            "fe57992153d081f6141afb856d4a933e7bacdc56"
        ],
        [
            "Definition bool_of_rel r := if r is Rel vT v1 v2 then v1 == v2 else true.",
            "VernacDefinition",
            "5a71a6d795d08faaa7d2f0525524142ce5251813"
        ],
        [
            "Local Coercion bool_of_rel : rel_type >-> bool.",
            "VernacCoercion",
            "878e8f9b7671d0b1130cd834426d5ff95bb43c53"
        ],
        [
            "Definition and_rel vT (v1 v2 : vT) r := if r is Rel wT w1 w2 then Rel (v1, w1) (v2, w2) else Rel v1 v2.",
            "VernacDefinition",
            "fa2fa77bb68eede2a464fb1d58dbe8c8eef7db12"
        ],
        [
            "Fixpoint rel {gT} (e : seq gT) f r := match f with | Eq2 s t => and_rel (eval e s) (eval e t) r | And f1 f2 => rel e f1 (rel e f2 r) end.",
            "VernacFixpoint",
            "ed845c19120819440968689707e0ea3c96780ef9"
        ],
        [
            "Inductive type := Generator of term -> type | Formula of formula.",
            "VernacInductive",
            "c92a3fd0014535327d913be04bc3b3641bb5914a"
        ],
        [
            "Definition Cast p : type := p.",
            "VernacDefinition",
            "4f30602f73940301f124b707f018318a00d5dfcc"
        ],
        [
            "Local Coercion Formula : formula >-> type.",
            "VernacCoercion",
            "89fcbbaf09b5dda3b7e7870f95ac1da16000c9c3"
        ],
        [
            "Inductive env gT := Env of {set gT} & seq gT.",
            "VernacInductive",
            "e559c24c0b0749e05b850282b0d55d052f788ca1"
        ],
        [
            "Definition env1 {gT} (x : gT : finType) := Env <[x]> [:: x].",
            "VernacDefinition",
            "af90b1d4abc6953e229106293711b25b0156c3f3"
        ],
        [
            "Fixpoint sat gT vT B n (s : vT -> env gT) p := match p with | Formula f => [exists v, let: Env A e := s v in and_rel A B (rel (rev e) f NoRel)] | Generator p' => let s' v := let: Env A e := s v.1 in Env (A <*> <[v.2]>) (v.2 :: e) in sat B n.+1 s' (p' (Cst n)) end.",
            "VernacFixpoint",
            "d09c8e8ddfd19fd16ee17d0af903b6240ed16255"
        ],
        [
            "Definition hom gT (B : {set gT}) p := sat B 1 env1 (p (Cst 0)).",
            "VernacDefinition",
            "1dd9c18c162a69971c35d24f218e8e50cb51a191"
        ],
        [
            "Definition iso gT (B : {set gT}) p := forall rT (H : {group rT}), (H \\homg B) = hom H p.",
            "VernacDefinition",
            "efefc4585081dfd5dd14840d6295e0df4dc65170"
        ],
        [
            "End Presentation.",
            "VernacEndSegment",
            "6332606ff9c2302298e3c5162443111eeae7a8e3"
        ],
        [
            "End Presentation.",
            "VernacEndSegment",
            "6332606ff9c2302298e3c5162443111eeae7a8e3"
        ],
        [
            "Import Presentation.",
            "VernacImport",
            "9643776f1562a73e6a46393c237206f3f8906316"
        ],
        [
            "Coercion bool_of_rel : rel_type >-> bool.",
            "VernacCoercion",
            "2515ef11fc3d07994e15a8e9473a888db1e222da"
        ],
        [
            "Coercion Eq1 : term >-> formula.",
            "VernacCoercion",
            "f92b94c9d21beb74a9743da73dfe1b79994abf27"
        ],
        [
            "Coercion Formula : formula >-> type.",
            "VernacCoercion",
            "95e8e27bd2b6f1dfbe8b765235939c479e1f7f13"
        ],
        [
            "Notation \"1\" := Idx : group_presentation.",
            "VernacNotation",
            "88a0040253a5166712338fcbde4b4ae35a3e9012"
        ],
        [
            "Arguments Inv _%group_presentation.",
            "VernacArguments",
            "c14d341aebdc3ad3a32ceead241f6fcf88f43f1f"
        ],
        [
            "Arguments Exp _%group_presentation _%N.",
            "VernacArguments",
            "65878b5a246a32c514b5e8ce7ade5abc38f427fc"
        ],
        [
            "Arguments Mul _%group_presentation _%group_presentation.",
            "VernacArguments",
            "fc8abf5773c165d109f5ed31dc1d240a504a8d64"
        ],
        [
            "Arguments Conj _%group_presentation _%group_presentation.",
            "VernacArguments",
            "c7f32b8f9eda5e0bd369d3397d336f150b8acc57"
        ],
        [
            "Arguments Comm _%group_presentation _%group_presentation.",
            "VernacArguments",
            "e270ed98e95b1be2e1e373a6ccade952c754f59d"
        ],
        [
            "Arguments Eq1 _%group_presentation.",
            "VernacArguments",
            "fe471701ee9c321f38c8fa734e38eb355d4f82b7"
        ],
        [
            "Arguments Eq2 _%group_presentation _%group_presentation.",
            "VernacArguments",
            "02211ce835f73f630e8a013d245aa197313a2586"
        ],
        [
            "Arguments Eq3 _%group_presentation _%group_presentation _%group_presentation.",
            "VernacArguments",
            "2bc949b767912c8aa80a8d14c7ee5e67e5e41d3e"
        ],
        [
            "Arguments And _%group_presentation _%group_presentation.",
            "VernacArguments",
            "12d68979e7f15e99e4ba2ad5a7415ff348ad2f14"
        ],
        [
            "Arguments Formula _%group_presentation.",
            "VernacArguments",
            "568b86b90feeb5247ba044e7cbc5d95c495ae510"
        ],
        [
            "Arguments Cast _%group_presentation.",
            "VernacArguments",
            "5e94a374bf982fc5a9c0baa9a84d67d1f2a20e79"
        ],
        [
            "Infix \"*\" := Mul : group_presentation.",
            "VernacInfix",
            "7440d61b1e617fb7aa9bf80bd068acadab3922e6"
        ],
        [
            "Infix \"^+\" := Exp : group_presentation.",
            "VernacInfix",
            "c36817756976cdaec102937accd5049effad2762"
        ],
        [
            "Infix \"^\" := Conj : group_presentation.",
            "VernacInfix",
            "514085aeeacd0dd5c4f36b5629aa805889907ceb"
        ],
        [
            "Notation \"x ^-1\" := (Inv x) : group_presentation.",
            "VernacNotation",
            "1d86ecdbac8b2a7942685e15ccc399bcc13b30cf"
        ],
        [
            "Notation \"x ^- n\" := (Inv (x ^+ n)) : group_presentation.",
            "VernacNotation",
            "8ee4ff0ae66db1c45a10c191c81bd442125b98e1"
        ],
        [
            "Notation \"[ ~ x1 , x2 , .. , xn ]\" := (Comm .. (Comm x1 x2) .. xn) : group_presentation.",
            "VernacNotation",
            "6fdf9577892a07f893b15e38ed5600a08c05c839"
        ],
        [
            "Notation \"x = y\" := (Eq2 x y) : group_presentation.",
            "VernacNotation",
            "d028597cdfee0a75f2071138e19c3fc0d7e375f9"
        ],
        [
            "Notation \"x = y = z\" := (Eq3 x y z) : group_presentation.",
            "VernacNotation",
            "daa6dc2667e86d25d2bbf41b4b58a8f3cb2e9913"
        ],
        [
            "Notation \"( r1 , r2 , .. , rn )\" := (And .. (And r1 r2) .. rn) : group_presentation.",
            "VernacNotation",
            "4198f0f060bfe24056cd20af7932c5073f146dce"
        ],
        [
            "Notation \"x : p\" := (fun x => Cast p) : nt_group_presentation.",
            "VernacNotation",
            "f2d450097bc30ec2b0e801f0514c4df83a5f9cf0"
        ],
        [
            "Arguments Generator _%nt_group_presentation.",
            "VernacArguments",
            "8fcedf3ca485fea1d034593610a43235b8482bbd"
        ],
        [
            "Arguments hom _ _%group_scope _%nt_group_presentation.",
            "VernacArguments",
            "272f3315884da2e7a54b507297526d5c48143033"
        ],
        [
            "Arguments iso _ _%group_scope _%nt_group_presentation.",
            "VernacArguments",
            "36a135875b3c53bcbd28c76c1837f11ca06de575"
        ],
        [
            "Notation \"x : p\" := (Generator (x : p)) : group_presentation.",
            "VernacNotation",
            "ba474d20776d7e1a6460f79f68c755ce3153eeb7"
        ],
        [
            "Notation \"H \\homg 'Grp' p\" := (hom H p) (at level 70, p at level 0, format \"H \\homg 'Grp' p\") : group_scope.",
            "VernacNotation",
            "d940d1c799a8f973f95fbcf8f68e396c3b2512a4"
        ],
        [
            "Notation \"H \\isog 'Grp' p\" := (iso H p) (at level 70, p at level 0, format \"H \\isog 'Grp' p\") : group_scope.",
            "VernacNotation",
            "1d5007332c94b6ecdf0c8d83cae99a5ca8632e2c"
        ],
        [
            "Notation \"H \\homg 'Grp' ( x : p )\" := (hom H (x : p)) (at level 70, x at level 0, format \"'[hv' H '/ ' \\homg 'Grp' ( x : p ) ']'\") : group_scope.",
            "VernacNotation",
            "e8d6b86855a3f67a1a8149b9fe20bf8b250550e5"
        ],
        [
            "Notation \"H \\isog 'Grp' ( x : p )\" := (iso H (x : p)) (at level 70, x at level 0, format \"'[hv' H '/ ' \\isog 'Grp' ( x : p ) ']'\") : group_scope.",
            "VernacNotation",
            "69bd305b0231b4e5f66a880908e93798807a93cb"
        ],
        [
            "Section PresentationTheory.",
            "VernacBeginSection",
            "d1177bf4d7fbbed15a50eb51b1d57a6ddeca41cc"
        ],
        [
            "Implicit Types gT rT : finGroupType.",
            "VernacReserve",
            "a8f8cc577f5b1ea7d7ddc27aebbd738660947541"
        ],
        [
            "Import Presentation.",
            "VernacImport",
            "9643776f1562a73e6a46393c237206f3f8906316"
        ],
        [
            "Lemma isoGrp_hom gT (G : {group gT}) p : G \\isog Grp p -> G \\homg Grp p.",
            "VernacStartTheoremProof",
            "2e08c32d38838b3f3883f1ddf2a846e796a22579"
        ],
        [
            "by move <-; apply: homg_refl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma isoGrpP gT (G : {group gT}) p rT (H : {group rT}) : G \\isog Grp p -> reflect (#|H| = #|G| /\\ H \\homg Grp p) (H \\isog G).",
            "VernacStartTheoremProof",
            "f67576c620544b5bb016d6ef04a2eea842322df2"
        ],
        [
            "move=> isoGp; apply: (iffP idP) => [isoGH | [oH homHp]].",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite (card_isog isoGH) -isoGp isog_hom.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite isogEcard isoGp homHp /= oH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma homGrp_trans rT gT (H : {set rT}) (G : {group gT}) p : H \\homg G -> G \\homg Grp p -> H \\homg Grp p.",
            "VernacStartTheoremProof",
            "7a24ddefc54f7e02e778ea82809e05ae53434778"
        ],
        [
            "case/homgP=> h <-{H}; rewrite /hom; move: {p}(p _) => p.",
            "VernacExtend",
            "c5cb6672fdde6b3af11f77240bf9bbcee9174e45"
        ],
        [
            "have evalG e t: all (mem G) e -> eval (map h e) t = h (eval e t).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> Ge; apply: (@proj2 (eval e t \\in G)); elim: t => /=.",
            "VernacExtend",
            "583b2b8a2730353ee034319e6111f157f36519ab"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "move=> i; case: (leqP (size e) i) => [le_e_i | lt_i_e].",
            "VernacExtend",
            "a01b3d93f426ff68d360351709a5fa5af822af32"
        ],
        [
            "by rewrite !nth_default ?size_map ?morph1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite (nth_map 1) // [_ \\in G](allP Ge) ?mem_nth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite morph1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> t [Gt ->]; rewrite groupV morphV.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> t [Gt ->] n; rewrite groupX ?morphX.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> t1 [Gt1 ->] t2 [Gt2 ->]; rewrite groupM ?morphM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=> t1 [Gt1 ->] t2 [Gt2 ->]; rewrite groupJ ?morphJ.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=> t1 [Gt1 ->] t2 [Gt2 ->]; rewrite groupR ?morphR.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have and_relE xT x1 x2 r: @and_rel xT x1 x2 r = (x1 == x2) && r :> bool.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by case: r => //=; rewrite andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have rsatG e f: all (mem G) e -> rel e f NoRel -> rel (map h e) f NoRel.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> Ge; have: NoRel -> NoRel by []; move: NoRel {2 4}NoRel.",
            "VernacExtend",
            "2e4e9ac9d478856877a4cac4905e6f729eae900c"
        ],
        [
            "elim: f => [x1 x2 | f1 IH1 f2 IH2] r hr IHr; last by apply: IH1; apply: IH2.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !and_relE !evalG //; case/andP; move/eqP->; rewrite eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "set s := env1; set vT := gT : finType in s *.",
            "VernacExtend",
            "7405ffc63057f1493a790d3f39e251cc5fefe81f"
        ],
        [
            "set s' := env1; set vT' := rT : finType in s' *.",
            "VernacExtend",
            "7405ffc63057f1493a790d3f39e251cc5fefe81f"
        ],
        [
            "have (v): let: Env A e := s v in A \\subset G -> all (mem G) e /\\ exists v', s' v' = Env (h @* A) (map h e).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "rewrite /= cycle_subG andbT => Gv; rewrite morphim_cycle //.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "by split; last exists (h v).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: p 1%N vT vT' s s' => /= [p IHp | f] n vT vT' s s' Gs.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "apply: IHp => [[v x]] /=; case: (s v) {Gs}(Gs v) => A e /= Gs.",
            "VernacExtend",
            "20ec428e50c31e1399aee62c5a532bc8417a4b29"
        ],
        [
            "rewrite join_subG cycle_subG; case/andP=> sAG Gx; rewrite Gx.",
            "VernacExtend",
            "1dc1cec635c64f0cc3ec64ea6e4d6c7d5b8f81f6"
        ],
        [
            "have [//|-> [v' def_v']] := Gs; split=> //; exists (v', h x); rewrite def_v'.",
            "VernacExtend",
            "1d2d1db7dec8859d7ce775de1e8e170014f64449"
        ],
        [
            "by congr (Env _ _); rewrite morphimY ?cycle_subG // morphim_cycle.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/existsP=> v; case: (s v) {Gs}(Gs v) => /= A e Gs.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "rewrite and_relE => /andP[/eqP defA rel_f].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "have{Gs} [|Ge [v' def_v']] := Gs; first by rewrite defA.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/existsP; exists v'; rewrite def_v' and_relE defA eqxx /=.",
            "VernacExtend",
            "c57e9b955f03f278b1e3978f9c061f1b06ae4b5b"
        ],
        [
            "by rewrite -map_rev rsatG ?(eq_all_r (mem_rev e)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_homGrp gT rT (G : {group gT}) (H : {group rT}) p : G \\isog H -> (G \\homg Grp p) = (H \\homg Grp p).",
            "VernacStartTheoremProof",
            "9512c29737ab63264fbb9a1030f7ae120e4c0f71"
        ],
        [
            "by rewrite isogEhom => /andP[homGH homHG]; apply/idP/idP; apply: homGrp_trans.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma isoGrp_trans gT rT (G : {group gT}) (H : {group rT}) p : G \\isog H -> H \\isog Grp p -> G \\isog Grp p.",
            "VernacStartTheoremProof",
            "2479c07ad5a433b6b407a4998d926ffe0ea04a5f"
        ],
        [
            "by move=> isoGH isoHp kT K; rewrite -isoHp; apply: eq_homgr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma intro_isoGrp gT (G : {group gT}) p : G \\homg Grp p -> (forall rT (H : {group rT}), H \\homg Grp p -> H \\homg G) -> G \\isog Grp p.",
            "VernacStartTheoremProof",
            "1162133aaad022834ca061a70d45497855f61276"
        ],
        [
            "move=> homGp freeG rT H.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by apply/idP/idP=> [homHp|]; [apply: homGrp_trans homGp | apply: freeG].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End PresentationTheory.",
            "VernacEndSegment",
            "1b119966520815e431d88d797d89f5ba817dad3c"
        ]
    ],
    "proofs": [
        {
            "name": "isoGrp_hom",
            "line_nb": 68,
            "steps": [
                {
                    "command": [
                        "by move <-; apply: homg_refl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isoGrpP",
            "line_nb": 71,
            "steps": [
                {
                    "command": [
                        "move=> isoGp; apply: (iffP idP) => [isoGH | [oH homHp]].",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by rewrite (card_isog isoGH) -isoGp isog_hom.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite isogEcard isoGp homHp /= oH.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "homGrp_trans",
            "line_nb": 76,
            "steps": [
                {
                    "command": [
                        "case/homgP=> h <-{H}; rewrite /hom; move: {p}(p _) => p.",
                        "VernacExtend",
                        "c5cb6672fdde6b3af11f77240bf9bbcee9174e45"
                    ]
                },
                {
                    "command": [
                        "have evalG e t: all (mem G) e -> eval (map h e) t = h (eval e t).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "move=> Ge; apply: (@proj2 (eval e t \\in G)); elim: t => /=.",
                        "VernacExtend",
                        "583b2b8a2730353ee034319e6111f157f36519ab"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "move=> i; case: (leqP (size e) i) => [le_e_i | lt_i_e].",
                        "VernacExtend",
                        "a01b3d93f426ff68d360351709a5fa5af822af32"
                    ]
                },
                {
                    "command": [
                        "by rewrite !nth_default ?size_map ?morph1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite (nth_map 1) // [_ \\in G](allP Ge) ?mem_nth.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by rewrite morph1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> t [Gt ->]; rewrite groupV morphV.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> t [Gt ->] n; rewrite groupX ?morphX.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> t1 [Gt1 ->] t2 [Gt2 ->]; rewrite groupM ?morphM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=> t1 [Gt1 ->] t2 [Gt2 ->]; rewrite groupJ ?morphJ.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by move=> t1 [Gt1 ->] t2 [Gt2 ->]; rewrite groupR ?morphR.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have and_relE xT x1 x2 r: @and_rel xT x1 x2 r = (x1 == x2) && r :> bool.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by case: r => //=; rewrite andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have rsatG e f: all (mem G) e -> rel e f NoRel -> rel (map h e) f NoRel.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "move=> Ge; have: NoRel -> NoRel by []; move: NoRel {2 4}NoRel.",
                        "VernacExtend",
                        "2e4e9ac9d478856877a4cac4905e6f729eae900c"
                    ]
                },
                {
                    "command": [
                        "elim: f => [x1 x2 | f1 IH1 f2 IH2] r hr IHr; last by apply: IH1; apply: IH2.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !and_relE !evalG //; case/andP; move/eqP->; rewrite eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "set s := env1; set vT := gT : finType in s *.",
                        "VernacExtend",
                        "7405ffc63057f1493a790d3f39e251cc5fefe81f"
                    ]
                },
                {
                    "command": [
                        "set s' := env1; set vT' := rT : finType in s' *.",
                        "VernacExtend",
                        "7405ffc63057f1493a790d3f39e251cc5fefe81f"
                    ]
                },
                {
                    "command": [
                        "have (v): let: Env A e := s v in A \\subset G -> all (mem G) e /\\ exists v', s' v' = Env (h @* A) (map h e).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "rewrite /= cycle_subG andbT => Gv; rewrite morphim_cycle //.",
                        "VernacExtend",
                        "82d53976234637e3f0907eb36cddf61d028c6306"
                    ]
                },
                {
                    "command": [
                        "by split; last exists (h v).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "elim: p 1%N vT vT' s s' => /= [p IHp | f] n vT vT' s s' Gs.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "apply: IHp => [[v x]] /=; case: (s v) {Gs}(Gs v) => A e /= Gs.",
                        "VernacExtend",
                        "20ec428e50c31e1399aee62c5a532bc8417a4b29"
                    ]
                },
                {
                    "command": [
                        "rewrite join_subG cycle_subG; case/andP=> sAG Gx; rewrite Gx.",
                        "VernacExtend",
                        "1dc1cec635c64f0cc3ec64ea6e4d6c7d5b8f81f6"
                    ]
                },
                {
                    "command": [
                        "have [//|-> [v' def_v']] := Gs; split=> //; exists (v', h x); rewrite def_v'.",
                        "VernacExtend",
                        "1d2d1db7dec8859d7ce775de1e8e170014f64449"
                    ]
                },
                {
                    "command": [
                        "by congr (Env _ _); rewrite morphimY ?cycle_subG // morphim_cycle.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case/existsP=> v; case: (s v) {Gs}(Gs v) => /= A e Gs.",
                        "VernacExtend",
                        "5887f8022a4f6389ac249140364feb69c4f18799"
                    ]
                },
                {
                    "command": [
                        "rewrite and_relE => /andP[/eqP defA rel_f].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "have{Gs} [|Ge [v' def_v']] := Gs; first by rewrite defA.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply/existsP; exists v'; rewrite def_v' and_relE defA eqxx /=.",
                        "VernacExtend",
                        "c57e9b955f03f278b1e3978f9c061f1b06ae4b5b"
                    ]
                },
                {
                    "command": [
                        "by rewrite -map_rev rsatG ?(eq_all_r (mem_rev e)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_homGrp",
            "line_nb": 118,
            "steps": [
                {
                    "command": [
                        "by rewrite isogEhom => /andP[homGH homHG]; apply/idP/idP; apply: homGrp_trans.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isoGrp_trans",
            "line_nb": 121,
            "steps": [
                {
                    "command": [
                        "by move=> isoGH isoHp kT K; rewrite -isoHp; apply: eq_homgr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "intro_isoGrp",
            "line_nb": 124,
            "steps": [
                {
                    "command": [
                        "move=> homGp freeG rT H.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by apply/idP/idP=> [homHp|]; [apply: homGrp_trans homGp | apply: freeG].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}