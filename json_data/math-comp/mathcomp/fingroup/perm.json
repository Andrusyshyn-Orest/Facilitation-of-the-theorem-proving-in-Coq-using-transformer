{
    "filename": "mathcomp/fingroup/perm.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrfun ssrbool eqtype ssrnat seq path choice fintype.",
            "VernacRequire",
            "5b7e20918953ef2b4d1bdb75f1e7eefded26520f"
        ],
        [
            "From mathcomp Require Import tuple finfun bigop finset binomial fingroup.",
            "VernacRequire",
            "00fcb9f895c12be14dbaaf10469d643bba0aff3b"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Import GroupScope.",
            "VernacImport",
            "89fd18b7dcbcc46edcd02262df11c799856485fc"
        ],
        [
            "Section PermDefSection.",
            "VernacBeginSection",
            "f9fc77a59c95298ed77dff6f1521e0077daf7809"
        ],
        [
            "Variable T : finType.",
            "VernacAssumption",
            "6349381da4d33cbc2eeaf1bade38718e15f7a2c9"
        ],
        [
            "Inductive perm_type : predArgType := Perm (pval : {ffun T -> T}) & injectiveb pval.",
            "VernacInductive",
            "b38b2356af37a4c66af8144f6095e3ac1c4923b8"
        ],
        [
            "Definition pval p := let: Perm f _ := p in f.",
            "VernacDefinition",
            "6d414bf0fef72dea34fb6e810ac71f4432493fed"
        ],
        [
            "Definition perm_of of phant T := perm_type.",
            "VernacDefinition",
            "33e77516f6c8a3bf458e9654fe5566b8791e1f0a"
        ],
        [
            "Identity Coercion type_of_perm : perm_of >-> perm_type.",
            "VernacIdentityCoercion",
            "d093495b63da0bd51c01881d442932057a171099"
        ],
        [
            "Notation pT := (perm_of (Phant T)).",
            "VernacSyntacticDefinition",
            "01ca25ceb5e9d0bff4ecb76a58ad68551147fc9c"
        ],
        [
            "Canonical perm_subType := Eval hnf in [subType for pval].",
            "VernacDefinition",
            "d024ba8844e8b38fb21841930b6bf6809d38e361"
        ],
        [
            "Definition perm_eqMixin := Eval hnf in [eqMixin of perm_type by <:].",
            "VernacDefinition",
            "3398afda2949f5944080573ff12e261101c4d2d5"
        ],
        [
            "Canonical perm_eqType := Eval hnf in EqType perm_type perm_eqMixin.",
            "VernacDefinition",
            "95b35a986776b2c4f851449f04a9c69afce34b75"
        ],
        [
            "Definition perm_choiceMixin := [choiceMixin of perm_type by <:].",
            "VernacDefinition",
            "5b9ac395bd1b52ad2df3f4568e97587e2530d248"
        ],
        [
            "Canonical perm_choiceType := Eval hnf in ChoiceType perm_type perm_choiceMixin.",
            "VernacDefinition",
            "5bc881eb3995acefd4348c76fc930bdea842309d"
        ],
        [
            "Definition perm_countMixin := [countMixin of perm_type by <:].",
            "VernacDefinition",
            "112a973d0e024e9e5a2fe7a1d39885c47102c27e"
        ],
        [
            "Canonical perm_countType := Eval hnf in CountType perm_type perm_countMixin.",
            "VernacDefinition",
            "6d8b0c753c683bbfd92c1da964319654162fe011"
        ],
        [
            "Canonical perm_subCountType := Eval hnf in [subCountType of perm_type].",
            "VernacDefinition",
            "04b08a47eb1afefc6f22f2819b780ff068c85c5d"
        ],
        [
            "Definition perm_finMixin := [finMixin of perm_type by <:].",
            "VernacDefinition",
            "986eada0d2fb71254f562c2ae5aa118b986cafb1"
        ],
        [
            "Canonical perm_finType := Eval hnf in FinType perm_type perm_finMixin.",
            "VernacDefinition",
            "937cae25b0c46441465838112681e7168c6c6b9f"
        ],
        [
            "Canonical perm_subFinType := Eval hnf in [subFinType of perm_type].",
            "VernacDefinition",
            "92b831c87fc2dc30c453d859c0cf26e5b24d67f4"
        ],
        [
            "Canonical perm_for_subType := Eval hnf in [subType of pT].",
            "VernacDefinition",
            "52c12430f2ce23b86777dbedbd2dc227df44f392"
        ],
        [
            "Canonical perm_for_eqType := Eval hnf in [eqType of pT].",
            "VernacDefinition",
            "f50fb0e9f4a716bdd4c2fd432abe2de81b132f0e"
        ],
        [
            "Canonical perm_for_choiceType := Eval hnf in [choiceType of pT].",
            "VernacDefinition",
            "c4db13071792077a06c54c2ab74f137f77943031"
        ],
        [
            "Canonical perm_for_countType := Eval hnf in [countType of pT].",
            "VernacDefinition",
            "33067d9d40b120e883518d5369a1c3d1761786dc"
        ],
        [
            "Canonical perm_for_subCountType := Eval hnf in [subCountType of pT].",
            "VernacDefinition",
            "5fc3cbd81d41fee6979e89eedfbadd9bd12adf4c"
        ],
        [
            "Canonical perm_for_finType := Eval hnf in [finType of pT].",
            "VernacDefinition",
            "4b918012084f192eeefcac2180ffa284098de204"
        ],
        [
            "Canonical perm_for_subFinType := Eval hnf in [subFinType of pT].",
            "VernacDefinition",
            "c1e387cefc61b6d6527a55fbadb2bb64c43c45c4"
        ],
        [
            "Lemma perm_proof (f : T -> T) : injective f -> injectiveb (finfun f).",
            "VernacStartTheoremProof",
            "5e18112f0c1037da240144537c729a8c281ffae5"
        ],
        [
            "by move=> f_inj; apply/injectiveP; apply: eq_inj f_inj _ => x; rewrite ffunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End PermDefSection.",
            "VernacEndSegment",
            "983c99fff7705d950fb8ac98cbff43ba14fb0208"
        ],
        [
            "Notation \"{ 'perm' T }\" := (perm_of (Phant T)) (at level 0, format \"{ 'perm' T }\") : type_scope.",
            "VernacNotation",
            "2e5accc7e74d2af53eaa344ed0be1197f7552e68"
        ],
        [
            "Arguments pval _ _%g.",
            "VernacArguments",
            "e2350c587fd854a093569822c853eb5fd4c035db"
        ],
        [
            "Bind Scope group_scope with perm_type.",
            "VernacBindScope",
            "a72875355f21183a5cd683c0215073b038aa876d"
        ],
        [
            "Bind Scope group_scope with perm_of.",
            "VernacBindScope",
            "0be13c0bd94a651769e1b1989d3a32f45ced48cb"
        ],
        [
            "Notation \"''S_' n\" := {perm 'I_n} (at level 8, n at level 2, format \"''S_' n\").",
            "VernacNotation",
            "a4b0088af6efe22709a02262182c4515ebf20376"
        ],
        [
            "Local Notation fun_of_perm_def := (fun T (u : perm_type T) => val u : T -> T).",
            "VernacSyntacticDefinition",
            "d8f88e614a5ba0fcace759f15d2dadf863021c3f"
        ],
        [
            "Local Notation perm_def := (fun T f injf => Perm (@perm_proof T f injf)).",
            "VernacSyntacticDefinition",
            "26a996bdedb391eaf7fa71d0d5e7bbe98db3cb06"
        ],
        [
            "Module Type PermDefSig.",
            "VernacDeclareModuleType",
            "7a3353ef4f20cc3517a93c784eeff91d86897f90"
        ],
        [
            "Parameter fun_of_perm : forall T, perm_type T -> T -> T.",
            "VernacAssumption",
            "bec529d5172af07bd3a3cc2ef99a343b8c06b8d9"
        ],
        [
            "Parameter perm : forall (T : finType) (f : T -> T), injective f -> {perm T}.",
            "VernacAssumption",
            "db0c80e4186f0827665bb61274df0b4ecee7012b"
        ],
        [
            "Axiom fun_of_permE : fun_of_perm = fun_of_perm_def.",
            "VernacAssumption",
            "3cb90c68ca7a2f96392195dd44e69d4915ca7bd7"
        ],
        [
            "Axiom permE : perm = perm_def.",
            "VernacAssumption",
            "636b2454d9e6983d7179dae00bf89c6faed427ad"
        ],
        [
            "End PermDefSig.",
            "VernacEndSegment",
            "de641103105ac69bb64f0ba425854d6a2717cd39"
        ],
        [
            "Module PermDef : PermDefSig.",
            "VernacDefineModule",
            "624b97e5ac3c3568e20e607fc3adfd652f3976dd"
        ],
        [
            "Definition fun_of_perm := fun_of_perm_def.",
            "VernacDefinition",
            "5eaafc2d33e9c961d19c2e1e5f2ca7a1ca53ec20"
        ],
        [
            "Definition perm := perm_def.",
            "VernacDefinition",
            "604e811f2b631f637ecc50c7b0dddfac86a3b52a"
        ],
        [
            "Lemma fun_of_permE : fun_of_perm = fun_of_perm_def.",
            "VernacStartTheoremProof",
            "7703cf7c65cf9cf2566e301f2d2678d266271d86"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma permE : perm = perm_def.",
            "VernacStartTheoremProof",
            "e95a07c02bfff3aa801c075491c55bcfff898d93"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End PermDef.",
            "VernacEndSegment",
            "9f05b2e359ea0ea3c57541092b00f84e27ba92f1"
        ],
        [
            "Notation fun_of_perm := PermDef.fun_of_perm.",
            "VernacSyntacticDefinition",
            "2643a3852695a279fa30aec57423985ae22ca238"
        ],
        [
            "Notation \"@ 'perm'\" := (@PermDef.perm) (at level 10, format \"@ 'perm'\").",
            "VernacNotation",
            "8eb7e217fd42598184c71ed977621848c3bcbd82"
        ],
        [
            "Notation perm := (@PermDef.perm _ _).",
            "VernacSyntacticDefinition",
            "7d456befc98b782a464935bb50e985972c21c83b"
        ],
        [
            "Canonical fun_of_perm_unlock := Unlockable PermDef.fun_of_permE.",
            "VernacDefinition",
            "62c6dfa19585c10734568d3ed922d075d5d71bc6"
        ],
        [
            "Canonical perm_unlock := Unlockable PermDef.permE.",
            "VernacDefinition",
            "facce62c97ac7bf74c51d38be824f899b45b84f9"
        ],
        [
            "Coercion fun_of_perm : perm_type >-> Funclass.",
            "VernacCoercion",
            "d8ab4b24936ec4cb27b192294f7998e117eebb86"
        ],
        [
            "Section Theory.",
            "VernacBeginSection",
            "57c003cfe14e91402b38cb11ad6e8012f88f07e9"
        ],
        [
            "Variable T : finType.",
            "VernacAssumption",
            "6349381da4d33cbc2eeaf1bade38718e15f7a2c9"
        ],
        [
            "Implicit Types (x y : T) (s t : {perm T}) (S : {set T}).",
            "VernacReserve",
            "b92aa15b997bc97989b38728d871db1a8a4c2f15"
        ],
        [
            "Lemma permP s t : s =1 t <-> s = t.",
            "VernacStartTheoremProof",
            "22f25af92f11154d1c8d95167845dd01b7254333"
        ],
        [
            "by split=> [| -> //]; rewrite unlock => eq_sv; apply/val_inj/ffunP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pvalE s : pval s = s :> (T -> T).",
            "VernacStartTheoremProof",
            "615599e1ab2e32cf7f709fe97d20969fb49c967f"
        ],
        [
            "by rewrite [@fun_of_perm]unlock.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma permE f f_inj : @perm T f f_inj =1 f.",
            "VernacStartTheoremProof",
            "9827031ebaf57f3f73f54342cd500bb3bb3a033a"
        ],
        [
            "by move=> x; rewrite -pvalE [@perm]unlock ffunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_inj {s} : injective s.",
            "VernacStartTheoremProof",
            "2c951623dac5d2cce4deb26c82fe0279c0e22ac7"
        ],
        [
            "by rewrite -!pvalE; apply: (injectiveP _ (valP s)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve perm_inj : core.",
            "VernacHints",
            "0f0555736c6ab884c425ca73c6a8035eba7c8281"
        ],
        [
            "Lemma perm_onto s : codom s =i predT.",
            "VernacStartTheoremProof",
            "52c5b212ea34543c0b03ea06935a17617850ec33"
        ],
        [
            "by apply/subset_cardP; rewrite ?card_codom ?subset_predT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition perm_one := perm (@inj_id T).",
            "VernacDefinition",
            "2dcb694df48f1a6b552a7abba545919604af670c"
        ],
        [
            "Lemma perm_invK s : cancel (fun x => iinv (perm_onto s x)) s.",
            "VernacStartTheoremProof",
            "ed3d903987aa0c67169c0baf9eb7b3bddf181631"
        ],
        [
            "by move=> x /=; rewrite f_iinv.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition perm_inv s := perm (can_inj (perm_invK s)).",
            "VernacDefinition",
            "b529acd99848fe97024ce2a6ad9433f484684d17"
        ],
        [
            "Definition perm_mul s t := perm (inj_comp (@perm_inj t) (@perm_inj s)).",
            "VernacDefinition",
            "a7549bf7d8fd967a71ac0cfa79200f080c308c0c"
        ],
        [
            "Lemma perm_oneP : left_id perm_one perm_mul.",
            "VernacStartTheoremProof",
            "a94846e134c363eb28b2046f9ee4dde1ca9a8efb"
        ],
        [
            "by move=> s; apply/permP => x; rewrite permE /= permE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_invP : left_inverse perm_one perm_inv perm_mul.",
            "VernacStartTheoremProof",
            "fd033923d633f9d981f9bd5b5517a1833933ba18"
        ],
        [
            "by move=> s; apply/permP=> x; rewrite !permE /= permE f_iinv.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_mulP : associative perm_mul.",
            "VernacStartTheoremProof",
            "a7bce38ef91b68d1859d35a3a6f85ea78ff345aa"
        ],
        [
            "by move=> s t u; apply/permP=> x; do !rewrite permE /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition perm_of_baseFinGroupMixin : FinGroup.mixin_of (perm_type T) := FinGroup.Mixin perm_mulP perm_oneP perm_invP.",
            "VernacDefinition",
            "de39cd1d444732af9f36c617084fe9beec7b0a11"
        ],
        [
            "Canonical perm_baseFinGroupType := Eval hnf in BaseFinGroupType (perm_type T) perm_of_baseFinGroupMixin.",
            "VernacDefinition",
            "e1b1167786401b73acad847a36ce2e6b64d2aadd"
        ],
        [
            "Canonical perm_finGroupType := @FinGroupType perm_baseFinGroupType perm_invP.",
            "VernacDefinition",
            "41f7464ac25e8d5b47e1bd3abe67d8774222fd5c"
        ],
        [
            "Canonical perm_of_baseFinGroupType := Eval hnf in [baseFinGroupType of {perm T}].",
            "VernacDefinition",
            "b342f01f5dea785379004b8211cf71a0fe20af38"
        ],
        [
            "Canonical perm_of_finGroupType := Eval hnf in [finGroupType of {perm T} ].",
            "VernacDefinition",
            "ef58110a47a25d1d3f56b2149154f2cf0862651a"
        ],
        [
            "Lemma perm1 x : (1 : {perm T}) x = x.",
            "VernacStartTheoremProof",
            "d995afe7b0918545835b077de92283a9fe71fb8b"
        ],
        [
            "by rewrite permE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma permM s t x : (s * t) x = t (s x).",
            "VernacStartTheoremProof",
            "e5d1b29f290e2125810ddd091f344e6cbe5203fe"
        ],
        [
            "by rewrite permE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma permK s : cancel s s^-1.",
            "VernacStartTheoremProof",
            "7f47c3d4de3850b1a4684bbf77918d0eec4a36c1"
        ],
        [
            "by move=> x; rewrite -permM mulgV perm1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma permKV s : cancel s^-1 s.",
            "VernacStartTheoremProof",
            "07a8d13fc73bd403f7ebb3811b15ed22da4fa0d1"
        ],
        [
            "by have:= permK s^-1; rewrite invgK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma permJ s t x : (s ^ t) (t x) = t (s x).",
            "VernacStartTheoremProof",
            "4c33abc7ebe46673dc863a3c7b23d4cb92a364dc"
        ],
        [
            "by rewrite !permM permK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma permX s x n : (s ^+ n) x = iter n s x.",
            "VernacStartTheoremProof",
            "bde022e2358ba44f929f5c5631f5998ab12e025e"
        ],
        [
            "by elim: n => [|n /= <-]; rewrite ?perm1 // -permM expgSr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma im_permV s S : s^-1 @: S = s @^-1: S.",
            "VernacStartTheoremProof",
            "a830adf8e22a943d0423b9d3eeaabcc18c291d5c"
        ],
        [
            "exact: can2_imset_pre (permKV s) (permK s).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma preim_permV s S : s^-1 @^-1: S = s @: S.",
            "VernacStartTheoremProof",
            "0f243c6253fcd63d9e207db2488972795df91c04"
        ],
        [
            "by rewrite -im_permV invgK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition perm_on S : pred {perm T} := fun s => [pred x | s x != x] \\subset S.",
            "VernacDefinition",
            "ea0a81fe4dd49d3de5d056321e4c56c53bdb4137"
        ],
        [
            "Lemma perm_closed S s x : perm_on S s -> (s x \\in S) = (x \\in S).",
            "VernacStartTheoremProof",
            "d869db3dbc627f5b904b07decdebe9f247ac5a34"
        ],
        [
            "move/subsetP=> s_on_S; have [-> // | nfix_s_x] := eqVneq (s x) x.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "by rewrite !s_on_S // inE /= ?(inj_eq perm_inj).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_on1 H : perm_on H 1.",
            "VernacStartTheoremProof",
            "5b376707eae93d39bf1d74e4b5a342c83c1f91b3"
        ],
        [
            "by apply/subsetP=> x; rewrite inE /= perm1 eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma perm_onM H s t : perm_on H s -> perm_on H t -> perm_on H (s * t).",
            "VernacStartTheoremProof",
            "4b8eba962146321db85da793d90357bc3467aff0"
        ],
        [
            "move/subsetP=> sH /subsetP tH; apply/subsetP => x; rewrite inE /= permM.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by have [-> /tH | /sH] := eqVneq (s x) x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma out_perm S u x : perm_on S u -> x \\notin S -> u x = x.",
            "VernacStartTheoremProof",
            "43f0d559c7da02c71cc1c35fbe736364a2f46da2"
        ],
        [
            "by move=> uS; apply: contraNeq (subsetP uS x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma im_perm_on u S : perm_on S u -> u @: S = S.",
            "VernacStartTheoremProof",
            "2e6acd7291f0b13b06301f8dd54510b9636ba489"
        ],
        [
            "move=> Su; rewrite -preim_permV; apply/setP=> x.",
            "VernacExtend",
            "0fa388cebe8ed6372154caa26cd10c357f123670"
        ],
        [
            "by rewrite !inE -(perm_closed _ Su) permKV.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tperm_proof x y : involutive [fun z => z with x |-> y, y |-> x].",
            "VernacStartTheoremProof",
            "7b6257a5dfd64e6c7e55f62a65c666da3fde55f1"
        ],
        [
            "move=> z /=; case: (z =P x) => [-> | ne_zx]; first by rewrite eqxx; case: eqP.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case: (z =P y) => [->| ne_zy]; [rewrite eqxx | do 2?case: eqP].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition tperm x y := perm (can_inj (tperm_proof x y)).",
            "VernacDefinition",
            "dd2730deba4fdf9d736e49f2705262d8a69761de"
        ],
        [
            "Variant tperm_spec x y z : T -> Type := | TpermFirst of z = x : tperm_spec x y z y | TpermSecond of z = y : tperm_spec x y z x | TpermNone of z <> x & z <> y : tperm_spec x y z z.",
            "VernacInductive",
            "2fa5310ccf07f8f2ab2bac6590f7fd64e71f23f4"
        ],
        [
            "Lemma tpermP x y z : tperm_spec x y z (tperm x y z).",
            "VernacStartTheoremProof",
            "06eb5aae8067807353d9370de7ecbe52cde0decf"
        ],
        [
            "by rewrite permE /=; do 2?[case: eqP => /=]; constructor; auto.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tpermL x y : tperm x y x = y.",
            "VernacStartTheoremProof",
            "c8a52a471c095911b74a677abdc006147dcfc8ed"
        ],
        [
            "by case: tpermP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tpermR x y : tperm x y y = x.",
            "VernacStartTheoremProof",
            "66706b16299e9497d2f75fc2bff27e35299e92fc"
        ],
        [
            "by case: tpermP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tpermD x y z : x != z -> y != z -> tperm x y z = z.",
            "VernacStartTheoremProof",
            "5a82b90c73ef3c75c989e23313243f5c48baec95"
        ],
        [
            "by case: tpermP => // ->; rewrite eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tpermC x y : tperm x y = tperm y x.",
            "VernacStartTheoremProof",
            "6fba31f8b52a9e6a8b7c0cf13f52b4b97e15fdf1"
        ],
        [
            "by apply/permP => z; do 2![case: tpermP => //] => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tperm1 x : tperm x x = 1.",
            "VernacStartTheoremProof",
            "77169fbde45eadde967e4e18f6a41301cafa2109"
        ],
        [
            "by apply/permP => z; rewrite perm1; case: tpermP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tpermK x y : involutive (tperm x y).",
            "VernacStartTheoremProof",
            "d15c3dfef838fedb57c79e68824f6601d7d1e527"
        ],
        [
            "by move=> z; rewrite !permE tperm_proof.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tpermKg x y : involutive (mulg (tperm x y)).",
            "VernacStartTheoremProof",
            "26b16e3b981ccf7abec2979e3baf8d0bfb3f6bbf"
        ],
        [
            "by move=> s; apply/permP=> z; rewrite !permM tpermK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tpermV x y : (tperm x y)^-1 = tperm x y.",
            "VernacStartTheoremProof",
            "e753924a9b2189d5f674726a6bf32bd3ee2d62f4"
        ],
        [
            "by set t := tperm x y; rewrite -{2}(mulgK t t) -mulgA tpermKg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tperm2 x y : tperm x y * tperm x y = 1.",
            "VernacStartTheoremProof",
            "6f9e3268c0c45b8ac419df1e4d9adfd915a6436a"
        ],
        [
            "by rewrite -{1}tpermV mulVg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_perm A : #|perm_on A| = (#|A|)`!.",
            "VernacStartTheoremProof",
            "e6ba9d93a1c453b25507ea56685d6da5b7934d95"
        ],
        [
            "pose ffA := {ffun {x | x \\in A} -> T}.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "rewrite -ffactnn -{2}(card_sig (mem A)) /= -card_inj_ffuns_on.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "pose fT (f : ffA) := [ffun x => oapp f x (insub x)].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose pfT f := insubd (1 : {perm T}) (fT f).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose fA s : ffA := [ffun u => s (val u)].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "rewrite -!sum1dep_card -sum1_card (reindex_onto fA pfT) => [|f].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply: eq_bigl => p; rewrite andbC; apply/idP/and3P=> [onA | []]; first split.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "apply/eqP; suffices fTAp: fT (fA p) = pval p.",
            "VernacExtend",
            "dfa05d3b0a5e1c7ec991a6f8078352fd27d3a8be"
        ],
        [
            "by apply/permP=> x; rewrite -!pvalE insubdK fTAp //; apply: (valP p).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/ffunP=> x; rewrite ffunE pvalE.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by case: insubP => [u _ <- | /out_perm->] //=; rewrite ffunE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by apply/forallP=> [[x Ax]]; rewrite ffunE /= perm_closed.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by apply/injectiveP=> u v; rewrite !ffunE => /perm_inj; apply: val_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move/eqP=> <- _ _; apply/subsetP=> x; rewrite !inE -pvalE val_insubd fun_if.",
            "VernacExtend",
            "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
        ],
        [
            "by rewrite if_arg ffunE; case: insubP; rewrite // pvalE perm1 if_same eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/andP=> /forallP-onA /injectiveP-f_inj.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "apply/ffunP=> u; rewrite ffunE -pvalE insubdK; first by rewrite ffunE valK.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/injectiveP=> {u} x y; rewrite !ffunE.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "case: insubP => [u _ <-|]; case: insubP => [v _ <-|] //=; first by move/f_inj->.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move=> Ay' def_y; rewrite -def_y [_ \\in A]onA in Ay'.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=> Ax' def_x; rewrite def_x [_ \\in A]onA in Ax'.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Theory.",
            "VernacEndSegment",
            "3b5383a8665fcdb23b7893346ca6ee697173139d"
        ],
        [
            "Prenex Implicits tperm permK permKV tpermK.",
            "VernacExtend",
            "e7093a633a1adbb2cc5d1e131d04ba3a6b59024c"
        ],
        [
            "Arguments perm_inj {T s} [x1 x2] eq_sx12.",
            "VernacArguments",
            "03a98bd06b91f6e95e783c5d90f99b9c8f1dff11"
        ],
        [
            "Notation reindex_perm s := (reindex_inj (@perm_inj _ s)).",
            "VernacSyntacticDefinition",
            "6842b12bb99bca83e5cac17b948481aff98639a5"
        ],
        [
            "Lemma inj_tperm (T T' : finType) (f : T -> T') x y z : injective f -> f (tperm x y z) = tperm (f x) (f y) (f z).",
            "VernacStartTheoremProof",
            "aa89b8ce66ec404cfb39337eec9ed175303b8f49"
        ],
        [
            "by move=> injf; rewrite !permE /= !(inj_eq injf) !(fun_if f).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tpermJ (T : finType) x y (s : {perm T}) : (tperm x y) ^ s = tperm (s x) (s y).",
            "VernacStartTheoremProof",
            "dcebd55ed1e8bb957e1b8cc519712d40203327b7"
        ],
        [
            "by apply/permP => z; rewrite -(permKV s z) permJ; apply/inj_tperm/perm_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tuple_perm_eqP {T : eqType} {n} {s : seq T} {t : n.-tuple T} : reflect (exists p : 'S_n, s = [tuple tnth t (p i) | i < n]) (perm_eq s t).",
            "VernacStartTheoremProof",
            "94f604109476ea9ca9bccc482a6a66eefdf95042"
        ],
        [
            "apply: (iffP idP) => [|[p ->]]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite /= (map_comp (tnth t)) -{1}(map_tnth_enum t) perm_map //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: uniq_perm_eq => [||i]; rewrite ?enum_uniq //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by apply/injectiveP; apply: perm_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite mem_enum -[i](permKV p) image_f.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: n => [|n] in t *; last have x0 := tnth t ord0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite tuple0 => /perm_eq_small-> //.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by exists 1; rewrite [mktuple _]tuple0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/(perm_eq_iotaP x0); rewrite size_tuple => Is eqIst ->{s}.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "have uniqIs: uniq Is by rewrite (perm_eq_uniq eqIst) iota_uniq.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have szIs: size Is == n.+1 by rewrite (perm_eq_size eqIst) !size_tuple.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have pP i : tnth (Tuple szIs) i < n.+1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -[_ < _](mem_iota 0) -(perm_eq_mem eqIst) mem_tnth.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have inj_p: injective (fun i => Ordinal (pP i)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/injectiveP/(@map_uniq _ _ val); rewrite -map_comp map_tnth_enum.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (perm inj_p); rewrite -[Is]/(tval (Tuple szIs)); congr (tval _).",
            "VernacExtend",
            "f3b936c13a041d11afb4239e5744f5034e3ac24e"
        ],
        [
            "by apply: eq_from_tnth => i; rewrite tnth_map tnth_mktuple permE (tnth_nth x0).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section PermutationParity.",
            "VernacBeginSection",
            "39ff53324a1ed7241e7561feeb862e7be18e7aed"
        ],
        [
            "Variable T : finType.",
            "VernacAssumption",
            "6349381da4d33cbc2eeaf1bade38718e15f7a2c9"
        ],
        [
            "Implicit Types (s t u v : {perm T}) (x y z a b : T).",
            "VernacReserve",
            "91d108f5ac2b5c01daf50e803867240bd3f5c65a"
        ],
        [
            "Definition aperm x s := s x.",
            "VernacDefinition",
            "8d293afcea0ae2307a196e313b9cdd9a8ca1df8b"
        ],
        [
            "Definition pcycle s x := aperm x @: <[s]>.",
            "VernacDefinition",
            "faafa2583f326048e83fd337be5596edb4f4a416"
        ],
        [
            "Definition pcycles s := pcycle s @: T.",
            "VernacDefinition",
            "8fb9e5d6e4c61392506bf2975be10668b2a1c29d"
        ],
        [
            "Definition odd_perm (s : perm_type T) := odd #|T| (+) odd #|pcycles s|.",
            "VernacDefinition",
            "730751021ebf238ba3710c869bb214f0ac93742a"
        ],
        [
            "Lemma apermE x s : aperm x s = s x.",
            "VernacStartTheoremProof",
            "c5c1a1794833e09df4b865328bcbe1648f285959"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_pcycle s i x : (s ^+ i) x \\in pcycle s x.",
            "VernacStartTheoremProof",
            "26a74cebacdd5cf2a52fb3930268747621c75bc2"
        ],
        [
            "by rewrite (mem_imset (aperm x)) ?mem_cycle.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pcycle_id s x : x \\in pcycle s x.",
            "VernacStartTheoremProof",
            "6a510e239dde8abe1387d2d5e071304e6e86d910"
        ],
        [
            "by rewrite -{1}[x]perm1 (mem_pcycle s 0).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma uniq_traject_pcycle s x : uniq (traject s x #|pcycle s x|).",
            "VernacStartTheoremProof",
            "2dc7620e6d75813df1fa6e71496e0ee7398a5573"
        ],
        [
            "case def_n: #|_| => // [n]; rewrite looping_uniq.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "apply: contraL (card_size (traject s x n)) => /loopingP t_sx.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite -ltnNge size_traject -def_n ?subset_leq_card //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/subsetP=> _ /imsetP[_ /cycleP[i ->] ->]; rewrite /aperm permX t_sx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pcycle_traject s x : pcycle s x =i traject s x #|pcycle s x|.",
            "VernacStartTheoremProof",
            "1f18f252328bf1dbdeffba2a6bfbb9f0d0ab19ee"
        ],
        [
            "apply: fsym; apply/subset_cardP.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by rewrite (card_uniqP _) ?size_traject ?uniq_traject_pcycle.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply/subsetP=> _ /trajectP[i _ ->]; rewrite -permX mem_pcycle.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma iter_pcycle s x : iter #|pcycle s x| s x = x.",
            "VernacStartTheoremProof",
            "ce4e039207a41146986e1242bd604283e4b89946"
        ],
        [
            "case def_n: #|_| (uniq_traject_pcycle s x) => [//|n] Ut.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have: looping s x n.+1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -def_n -[looping _ _ _]pcycle_traject -permX mem_pcycle.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /looping => /trajectP[[|i] //= lt_i_n /perm_inj eq_i_n_sx].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "move: lt_i_n; rewrite ltnS ltn_neqAle andbC => /andP[le_i_n /negP[]].",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by rewrite -(nth_uniq x _ _ Ut) ?size_traject ?nth_traject // eq_i_n_sx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_pcycle_mem s x y : (pcycle s x == pcycle s y) = (x \\in pcycle s y).",
            "VernacStartTheoremProof",
            "cf41f3b6075030bde31077319479d96de9754d0d"
        ],
        [
            "apply/eqP/idP=> [<- | /imsetP[si s_si ->]]; first exact: pcycle_id.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/setP => z; apply/imsetP/imsetP=> [] [sj s_sj ->].",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by exists (si * sj); rewrite ?groupM /aperm ?permM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (si^-1 * sj); first by rewrite groupM ?groupV.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite /aperm permM permK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pcycle_sym s x y : (x \\in pcycle s y) = (y \\in pcycle s x).",
            "VernacStartTheoremProof",
            "de023137405f493a23ef2db96efc78f7314ddf42"
        ],
        [
            "by rewrite -!eq_pcycle_mem eq_sym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pcycle_perm s i x : pcycle s ((s ^+ i) x) = pcycle s x.",
            "VernacStartTheoremProof",
            "166d8574d6f762334edc61ff824b529d02e7777f"
        ],
        [
            "by apply/eqP; rewrite eq_pcycle_mem mem_pcycle.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ncycles_mul_tperm s x y : let t := tperm x y in #|pcycles (t * s)| + (x \\notin pcycle s y).*2 = #|pcycles s| + (x != y).",
            "VernacStartTheoremProof",
            "2ee6dcd0510b5f5544c988636794f1cedd6ed61a"
        ],
        [
            "pose xf a b u := find (pred2 a b) (traject u (u a) #|pcycle u a|).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have xf_size a b u: xf a b u <= #|pcycle u a|.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite (leq_trans (find_size _ _)) ?size_traject.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have lt_xf a b u n : n < xf a b u -> ~~ pred2 a b ((u ^+ n.+1) a).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> lt_n; apply: contraFN (before_find (u a) lt_n).",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite permX iterSr nth_traject // (leq_trans lt_n).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose t a b u := tperm a b * u.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have tC a b u : t a b u = t b a u by rewrite /t tpermC.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have tK a b: involutive (t a b) by move=> u; apply: tpermKg.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have tXC a b u n: n <= xf a b u -> (t a b u ^+ n.+1) b = (u ^+ n.+1) a.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "elim: n => [|n IHn] lt_n_f; first by rewrite permM tpermR.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite !(expgSr _ n.+1) !permM {}IHn 1?ltnW //; congr (u _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "by case/lt_xf/norP: lt_n_f => ne_a ne_b; rewrite tpermD // eq_sym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have eq_xf a b u: pred2 a b ((u ^+ (xf a b u).+1) a).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have ua_a: a \\in pcycle u (u a) by rewrite pcycle_sym (mem_pcycle _ 1).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have has_f: has (pred2 a b) (traject u (u a) #|pcycle u (u a)|).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/hasP; exists a; rewrite /= ?eqxx -?pcycle_traject.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have:= nth_find (u a) has_f; rewrite has_find size_traject in has_f.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "rewrite -eq_pcycle_mem in ua_a.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite nth_traject // -iterSr -permX -(eqP ua_a).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have xfC a b u: xf b a (t a b u) = xf a b u.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "without loss lt_a: a b u / xf b a (t a b u) < xf a b u.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "move=> IHab; set m := xf b a _; set n := xf a b u.",
            "VernacExtend",
            "2ed4407a743960054f801c19fd623f6ef3da7a83"
        ],
        [
            "by case: (ltngtP m n) => // ltx; [apply: IHab | rewrite -[m]IHab tC tK].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move/lt_xf: (lt_a); rewrite -(tXC a b) 1?ltnW //= orbC [_ || _]eq_xf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose ts := t x y s; rewrite /= -[_ * s]/ts.",
            "VernacExtend",
            "de7a4b42b1ef81b17722dd81c9c5b9378b46a6e7"
        ],
        [
            "pose dp u := #|pcycles u :\\ pcycle u y :\\ pcycle u x|.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "rewrite !(addnC #|_|) (cardsD1 (pcycle ts y)) mem_imset ?inE //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (cardsD1 (pcycle ts x)) inE mem_imset ?inE //= -/(dp ts) {}/ts.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (cardsD1 (pcycle s y)) (cardsD1 (pcycle s x)) !(mem_imset, inE) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -/(dp s) !addnA !eq_pcycle_mem andbT; congr (_ + _); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "wlog suffices: s / dp s <= dp (t x y s).",
            "VernacExtend",
            "348aa27e7c84ea4ca2ac06b8a3b3db24e74b6ad7"
        ],
        [
            "by move=> IHs; apply/eqP; rewrite eqn_leq -{2}(tK x y s) !IHs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/subset_leq_card/subsetP=> {dp} C.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite !inE andbA andbC !(eq_sym C) => /and3P[/imsetP[z _ ->{C}]].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite 2!eq_pcycle_mem => sxz syz.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "suffices ts_z: pcycle (t x y s) z = pcycle s z.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by rewrite -ts_z !eq_pcycle_mem {1 2}ts_z sxz syz mem_imset ?inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices exp_id n: ((t x y s) ^+ n) z = (s ^+ n) z.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "apply/setP=> u; apply/idP/idP=> /imsetP[_ /cycleP[i ->] ->].",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by rewrite /aperm exp_id mem_pcycle.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite /aperm -exp_id mem_pcycle.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: n => // n IHn; rewrite !expgSr !permM {}IHn tpermD //.",
            "VernacExtend",
            "de65c8193056a36f6dbb91fe21357bd770b140db"
        ],
        [
            "by apply: contraNneq sxz => ->; apply: mem_pcycle.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: contraNneq syz => ->; apply: mem_pcycle.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: eqP {dp} => [<- | ne_xy]; first by rewrite /t tperm1 mul1g pcycle_id.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "suff ->: (x \\in pcycle (t x y s) y) = (x \\notin pcycle s y) by case: (x \\in _).",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "without loss xf_x: s x y ne_xy / (s ^+ (xf x y s).+1) x = x.",
            "VernacExtend",
            "87d5e7b04148ee8f2e4efcc847e0dfadae0aa4cb"
        ],
        [
            "move=> IHs; have ne_yx := nesym ne_xy; have:= eq_xf x y s; set n := xf x y s.",
            "VernacExtend",
            "42d6fa1bd6b84bb8d85e9137267658cadb90ff82"
        ],
        [
            "case/pred2P=> [|snx]; first exact: IHs.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -[x \\in _]negbK ![x \\in _]pcycle_sym -{}IHs ?xfC ?tXC // tC tK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -{1}xf_x -(tXC _ _ _ _ (leqnn _)) mem_pcycle; symmetry.",
            "VernacExtend",
            "599828e38dbd4ed6f8c63d71d3c0bcfa78e597b6"
        ],
        [
            "rewrite -eq_pcycle_mem eq_sym eq_pcycle_mem pcycle_traject.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/trajectP=> [[n _ snx]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "have: looping s x (xf x y s).+1 by rewrite /looping -permX xf_x inE eqxx.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move/loopingP/(_ n); rewrite -{n}snx.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "case/trajectP=> [[_|i]]; first exact: nesym; rewrite ltnS -permX => lt_i def_y.",
            "VernacExtend",
            "58dba442af7e38d8e79d91f6dc3f45e6bb3c040b"
        ],
        [
            "by move/lt_xf: lt_i; rewrite def_y /= eqxx orbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma odd_perm1 : odd_perm 1 = false.",
            "VernacStartTheoremProof",
            "39ebb746e4e7c6a699019327f1b7461babc6eb7c"
        ],
        [
            "rewrite /odd_perm card_imset ?addbb // => x y; move/eqP.",
            "VernacExtend",
            "d382ad451ae594d67a86f477726931c094e27e38"
        ],
        [
            "by rewrite eq_pcycle_mem /pcycle cycle1 imset_set1 /aperm perm1; move/set1P.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma odd_mul_tperm x y s : odd_perm (tperm x y * s) = (x != y) (+) odd_perm s.",
            "VernacStartTheoremProof",
            "47c0faeb517497a04bc097bb70e12f0c8bf51d37"
        ],
        [
            "rewrite addbC -addbA -[~~ _]oddb -odd_add -ncycles_mul_tperm.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite odd_add odd_double addbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma odd_tperm x y : odd_perm (tperm x y) = (x != y).",
            "VernacStartTheoremProof",
            "cdb6afed2e25b0e80e08b86350899d416eaa45d3"
        ],
        [
            "by rewrite -[_ y]mulg1 odd_mul_tperm odd_perm1 addbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition dpair (eT : eqType) := [pred t | t.1 != t.2 :> eT].",
            "VernacDefinition",
            "30c9a0d92e0c38d717725690f6379f7f9599458f"
        ],
        [
            "Arguments dpair {eT}.",
            "VernacArguments",
            "f04079aabee133e1b12dfe501c40d610b904202f"
        ],
        [
            "Lemma prod_tpermP s : {ts : seq (T * T) | s = \\prod_(t <- ts) tperm t.1 t.2 & all dpair ts}.",
            "VernacStartTheoremProof",
            "045edf7ac0a86e827b85ea976dc8f82789e4da94"
        ],
        [
            "elim: {s}_.+1 {-2}s (ltnSn #|[pred x | s x != x]|) => // n IHn s.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "rewrite ltnS => le_s_n; case: (pickP (fun x => s x != x)) => [x s_x | s_id].",
            "VernacExtend",
            "4a95f82aca0fc9a50f43053eca44fc9141212abe"
        ],
        [
            "have [|ts def_s ne_ts] := IHn (tperm x (s^-1 x) * s).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (cardD1 x) !inE s_x in le_s_n; apply: leq_ltn_trans le_s_n.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "apply: subset_leq_card; apply/subsetP=> y.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "rewrite !inE permM permE /= -(canF_eq (permK _)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have [-> | ne_yx] := altP (y =P x); first by rewrite permKV eqxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case: (s y =P x) => // -> _; rewrite eq_sym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists ((x, s^-1 x) :: ts); last by rewrite /= -(canF_eq (permK _)) s_x.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite big_cons -def_s mulgA tperm2 mul1g.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists nil; rewrite // big_nil; apply/permP=> x.",
            "VernacExtend",
            "d45fa45a4073d40bc82a939c460a2ae81c0b8230"
        ],
        [
            "by apply/eqP/idPn; rewrite perm1 s_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma odd_perm_prod ts : all dpair ts -> odd_perm (\\prod_(t <- ts) tperm t.1 t.2) = odd (size ts).",
            "VernacStartTheoremProof",
            "151f7bd66e0f2faba379af86fa9f2d90351e371f"
        ],
        [
            "elim: ts => [_|t ts IHts] /=; first by rewrite big_nil odd_perm1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case/andP=> dt12 dts; rewrite big_cons odd_mul_tperm dt12 IHts.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma odd_permM : {morph odd_perm : s1 s2 / s1 * s2 >-> s1 (+) s2}.",
            "VernacStartTheoremProof",
            "933ea9a8de329d9711ac67d7dd32cdf5be80a67f"
        ],
        [
            "move=> s1 s2; case: (prod_tpermP s1) => ts1 ->{s1} dts1.",
            "VernacExtend",
            "a01b3d93f426ff68d360351709a5fa5af822af32"
        ],
        [
            "case: (prod_tpermP s2) => ts2 ->{s2} dts2.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite -big_cat !odd_perm_prod ?all_cat ?dts1 // size_cat odd_add.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma odd_permV s : odd_perm s^-1 = odd_perm s.",
            "VernacStartTheoremProof",
            "299ceff92f863907490a603ee90089ac4d4a9bed"
        ],
        [
            "by rewrite -{2}(mulgK s s) !odd_permM -addbA addKb.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma odd_permJ s1 s2 : odd_perm (s1 ^ s2) = odd_perm s1.",
            "VernacStartTheoremProof",
            "4af5d8c29f0f80bd3de13492cf78ad2cd54bafa1"
        ],
        [
            "by rewrite !odd_permM odd_permV addbC addbK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End PermutationParity.",
            "VernacEndSegment",
            "ba85ee1a63f84dd6c40fb5b2706dfb15def38642"
        ],
        [
            "Coercion odd_perm : perm_type >-> bool.",
            "VernacCoercion",
            "5264c48e1487907ae5c82be4256a97fde2a4250f"
        ],
        [
            "Arguments dpair {eT}.",
            "VernacArguments",
            "f04079aabee133e1b12dfe501c40d610b904202f"
        ],
        [
            "Prenex Implicits pcycle dpair pcycles aperm.",
            "VernacExtend",
            "c63480c069e3d1ac73777b1189082282a730505e"
        ],
        [
            "Section LiftPerm.",
            "VernacBeginSection",
            "360d620cc6e1cf3286736c46a73635786f7aafc5"
        ],
        [
            "Variable n : nat.",
            "VernacAssumption",
            "07bef83858f70772f30ae2a622ca53ce45548b68"
        ],
        [
            "Implicit Types i j : 'I_n.+1.",
            "VernacReserve",
            "b4589449f533dd1b0e1847be90266dee09bac461"
        ],
        [
            "Implicit Types s t : 'S_n.",
            "VernacReserve",
            "4f7693103a3ac4334b6e4a90ce19e15ec3d57593"
        ],
        [
            "Definition lift_perm_fun i j s k := if unlift i k is Some k' then lift j (s k') else j.",
            "VernacDefinition",
            "039d825f115eefd838d8bada278d4201f599a8c2"
        ],
        [
            "Lemma lift_permK i j s : cancel (lift_perm_fun i j s) (lift_perm_fun j i s^-1).",
            "VernacStartTheoremProof",
            "92fab7d98609149b2f6edfae4dcb80034dff3264"
        ],
        [
            "rewrite /lift_perm_fun => k.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by case: (unliftP i k) => [j'|] ->; rewrite (liftK, unlift_none) ?permK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition lift_perm i j s := perm (can_inj (lift_permK i j s)).",
            "VernacDefinition",
            "67e742ec10af3cd463d8007b35a4575245298eab"
        ],
        [
            "Lemma lift_perm_id i j s : lift_perm i j s i = j.",
            "VernacStartTheoremProof",
            "90af8f0dc6d2c9786c42aa8e61f72171dc9137a2"
        ],
        [
            "by rewrite permE /lift_perm_fun unlift_none.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift_perm_lift i j s k' : lift_perm i j s (lift i k') = lift j (s k') :> 'I_n.+1.",
            "VernacStartTheoremProof",
            "8bf5a90ac4428726f7dc9ec32a230ab30c2fba90"
        ],
        [
            "by rewrite permE /lift_perm_fun liftK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift_permM i j k s t : lift_perm i j s * lift_perm j k t = lift_perm i k (s * t).",
            "VernacStartTheoremProof",
            "95c64a73766863f10383f7bb22acd055e14bdc4f"
        ],
        [
            "apply/permP=> i1; case: (unliftP i i1) => [i2|] ->{i1}.",
            "VernacExtend",
            "20ec428e50c31e1399aee62c5a532bc8417a4b29"
        ],
        [
            "by rewrite !(permM, lift_perm_lift).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite permM !lift_perm_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift_perm1 i : lift_perm i i 1 = 1.",
            "VernacStartTheoremProof",
            "1f55d6e8332cc5294fbe08260ceb11543f523270"
        ],
        [
            "by apply: (mulgI (lift_perm i i 1)); rewrite lift_permM !mulg1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift_permV i j s : (lift_perm i j s)^-1 = lift_perm j i s^-1.",
            "VernacStartTheoremProof",
            "d4350a6cd843d3ce15c2f0930685852b71db90a8"
        ],
        [
            "by apply/eqP; rewrite eq_invg_mul lift_permM mulgV lift_perm1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma odd_lift_perm i j s : lift_perm i j s = odd i (+) odd j (+) s :> bool.",
            "VernacStartTheoremProof",
            "74d7275a6f7528c4d5e5c7c0e765c3a820ef1379"
        ],
        [
            "rewrite -{1}(mul1g s) -(lift_permM _ j) odd_permM.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "congr (_ (+) _); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case: (prod_tpermP s) => ts ->{s} _.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "elim: ts => [|t ts IHts] /=; first by rewrite big_nil lift_perm1 !odd_perm1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite big_cons odd_mul_tperm -(lift_permM _ j) odd_permM {}IHts //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "congr (_ (+) _); transitivity (tperm (lift j t.1) (lift j t.2)); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite odd_tperm (inj_eq (pcan_inj (liftK j))).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "congr odd_perm; apply/permP=> k; case: (unliftP j k) => [k'|] ->.",
            "VernacExtend",
            "4882e9b134f5e9cbc289c22a7220714bea17a1cd"
        ],
        [
            "by rewrite lift_perm_lift inj_tperm //; apply: lift_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite lift_perm_id tpermD // eq_sym neq_lift.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suff{i j s} odd_lift0 (k : 'I_n.+1): lift_perm ord0 k 1 = odd k :> bool.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "rewrite -!odd_lift0 -{2}invg1 -lift_permV odd_permV -odd_permM.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite lift_permM mulg1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: {k}(k : nat) {1 3}k (erefl (k : nat)) => [|m IHm] k def_k.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite (_ : k = ord0) ?lift_perm1 ?odd_perm1 //; apply: val_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have le_mn: m < n.+1 by [rewrite -def_k ltnW]; pose j := Ordinal le_mn.",
            "VernacExtend",
            "fa6ff0c3d4595d45015144bd8c25fb5ac62ed42b"
        ],
        [
            "rewrite -(mulg1 1)%g -(lift_permM _ j) odd_permM {}IHm // addbC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (_ : _ 1 = tperm j k); first by rewrite odd_tperm neq_ltn def_k leqnn.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/permP=> i; case: (unliftP j i) => [i'|] ->; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite lift_perm_id tpermL.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: ord_inj; rewrite lift_perm_lift !permE /= eq_sym -if_neg neq_lift.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite fun_if -val_eqE /= def_k /bump ltn_neqAle andbC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: leqP => [_ | lt_i'm] /=; last by rewrite -if_neg neq_ltn leqW.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite add1n eqSS eq_sym; case: eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End LiftPerm.",
            "VernacEndSegment",
            "4bff07867098a0ac83ad491797a9af3d23fbf000"
        ],
        [
            "Prenex Implicits lift_perm lift_permK.",
            "VernacExtend",
            "021d8797008b4d82b7aa728cecce87521cadcded"
        ]
    ],
    "proofs": [
        {
            "name": "perm_proof",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "by move=> f_inj; apply/injectiveP; apply: eq_inj f_inj _ => x; rewrite ffunE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fun_of_permE",
            "line_nb": 52,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "permE",
            "line_nb": 55,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "permP",
            "line_nb": 68,
            "steps": [
                {
                    "command": [
                        "by split=> [| -> //]; rewrite unlock => eq_sv; apply/val_inj/ffunP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pvalE",
            "line_nb": 71,
            "steps": [
                {
                    "command": [
                        "by rewrite [@fun_of_perm]unlock.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_inj",
            "line_nb": 77,
            "steps": [
                {
                    "command": [
                        "by rewrite -!pvalE; apply: (injectiveP _ (valP s)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_onto",
            "line_nb": 81,
            "steps": [
                {
                    "command": [
                        "by apply/subset_cardP; rewrite ?card_codom ?subset_predT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_invK",
            "line_nb": 85,
            "steps": [
                {
                    "command": [
                        "by move=> x /=; rewrite f_iinv.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_oneP",
            "line_nb": 90,
            "steps": [
                {
                    "command": [
                        "by move=> s; apply/permP => x; rewrite permE /= permE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_invP",
            "line_nb": 93,
            "steps": [
                {
                    "command": [
                        "by move=> s; apply/permP=> x; rewrite !permE /= permE f_iinv.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_mulP",
            "line_nb": 96,
            "steps": [
                {
                    "command": [
                        "by move=> s t u; apply/permP=> x; do !rewrite permE /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm1",
            "line_nb": 104,
            "steps": [
                {
                    "command": [
                        "by rewrite permE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "permM",
            "line_nb": 107,
            "steps": [
                {
                    "command": [
                        "by rewrite permE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "permK",
            "line_nb": 110,
            "steps": [
                {
                    "command": [
                        "by move=> x; rewrite -permM mulgV perm1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "permKV",
            "line_nb": 113,
            "steps": [
                {
                    "command": [
                        "by have:= permK s^-1; rewrite invgK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "permJ",
            "line_nb": 116,
            "steps": [
                {
                    "command": [
                        "by rewrite !permM permK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "permX",
            "line_nb": 119,
            "steps": [
                {
                    "command": [
                        "by elim: n => [|n /= <-]; rewrite ?perm1 // -permM expgSr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "im_permV",
            "line_nb": 122,
            "steps": [
                {
                    "command": [
                        "exact: can2_imset_pre (permKV s) (permK s).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "preim_permV",
            "line_nb": 125,
            "steps": [
                {
                    "command": [
                        "by rewrite -im_permV invgK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_closed",
            "line_nb": 129,
            "steps": [
                {
                    "command": [
                        "move/subsetP=> s_on_S; have [-> // | nfix_s_x] := eqVneq (s x) x.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "by rewrite !s_on_S // inE /= ?(inj_eq perm_inj).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_on1",
            "line_nb": 133,
            "steps": [
                {
                    "command": [
                        "by apply/subsetP=> x; rewrite inE /= perm1 eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "perm_onM",
            "line_nb": 136,
            "steps": [
                {
                    "command": [
                        "move/subsetP=> sH /subsetP tH; apply/subsetP => x; rewrite inE /= permM.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by have [-> /tH | /sH] := eqVneq (s x) x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "out_perm",
            "line_nb": 140,
            "steps": [
                {
                    "command": [
                        "by move=> uS; apply: contraNeq (subsetP uS x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "im_perm_on",
            "line_nb": 143,
            "steps": [
                {
                    "command": [
                        "move=> Su; rewrite -preim_permV; apply/setP=> x.",
                        "VernacExtend",
                        "0fa388cebe8ed6372154caa26cd10c357f123670"
                    ]
                },
                {
                    "command": [
                        "by rewrite !inE -(perm_closed _ Su) permKV.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tperm_proof",
            "line_nb": 147,
            "steps": [
                {
                    "command": [
                        "move=> z /=; case: (z =P x) => [-> | ne_zx]; first by rewrite eqxx; case: eqP.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case: (z =P y) => [->| ne_zy]; [rewrite eqxx | do 2?case: eqP].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tpermP",
            "line_nb": 153,
            "steps": [
                {
                    "command": [
                        "by rewrite permE /=; do 2?[case: eqP => /=]; constructor; auto.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tpermL",
            "line_nb": 156,
            "steps": [
                {
                    "command": [
                        "by case: tpermP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tpermR",
            "line_nb": 159,
            "steps": [
                {
                    "command": [
                        "by case: tpermP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tpermD",
            "line_nb": 162,
            "steps": [
                {
                    "command": [
                        "by case: tpermP => // ->; rewrite eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tpermC",
            "line_nb": 165,
            "steps": [
                {
                    "command": [
                        "by apply/permP => z; do 2![case: tpermP => //] => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tperm1",
            "line_nb": 168,
            "steps": [
                {
                    "command": [
                        "by apply/permP => z; rewrite perm1; case: tpermP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tpermK",
            "line_nb": 171,
            "steps": [
                {
                    "command": [
                        "by move=> z; rewrite !permE tperm_proof.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tpermKg",
            "line_nb": 174,
            "steps": [
                {
                    "command": [
                        "by move=> s; apply/permP=> z; rewrite !permM tpermK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tpermV",
            "line_nb": 177,
            "steps": [
                {
                    "command": [
                        "by set t := tperm x y; rewrite -{2}(mulgK t t) -mulgA tpermKg.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tperm2",
            "line_nb": 180,
            "steps": [
                {
                    "command": [
                        "by rewrite -{1}tpermV mulVg.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_perm",
            "line_nb": 183,
            "steps": [
                {
                    "command": [
                        "pose ffA := {ffun {x | x \\in A} -> T}.",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "rewrite -ffactnn -{2}(card_sig (mem A)) /= -card_inj_ffuns_on.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "pose fT (f : ffA) := [ffun x => oapp f x (insub x)].",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "pose pfT f := insubd (1 : {perm T}) (fT f).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "pose fA s : ffA := [ffun u => s (val u)].",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "rewrite -!sum1dep_card -sum1_card (reindex_onto fA pfT) => [|f].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply: eq_bigl => p; rewrite andbC; apply/idP/and3P=> [onA | []]; first split.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; suffices fTAp: fT (fA p) = pval p.",
                        "VernacExtend",
                        "dfa05d3b0a5e1c7ec991a6f8078352fd27d3a8be"
                    ]
                },
                {
                    "command": [
                        "by apply/permP=> x; rewrite -!pvalE insubdK fTAp //; apply: (valP p).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/ffunP=> x; rewrite ffunE pvalE.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by case: insubP => [u _ <- | /out_perm->] //=; rewrite ffunE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by apply/forallP=> [[x Ax]]; rewrite ffunE /= perm_closed.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by apply/injectiveP=> u v; rewrite !ffunE => /perm_inj; apply: val_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move/eqP=> <- _ _; apply/subsetP=> x; rewrite !inE -pvalE val_insubd fun_if.",
                        "VernacExtend",
                        "f7feb259d6220ca40e8a86b90bd06f137aa140ac"
                    ]
                },
                {
                    "command": [
                        "by rewrite if_arg ffunE; case: insubP; rewrite // pvalE perm1 if_same eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case/andP=> /forallP-onA /injectiveP-f_inj.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "apply/ffunP=> u; rewrite ffunE -pvalE insubdK; first by rewrite ffunE valK.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply/injectiveP=> {u} x y; rewrite !ffunE.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "case: insubP => [u _ <-|]; case: insubP => [v _ <-|] //=; first by move/f_inj->.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by move=> Ay' def_y; rewrite -def_y [_ \\in A]onA in Ay'.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by move=> Ax' def_x; rewrite def_x [_ \\in A]onA in Ax'.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inj_tperm",
            "line_nb": 213,
            "steps": [
                {
                    "command": [
                        "by move=> injf; rewrite !permE /= !(inj_eq injf) !(fun_if f).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tpermJ",
            "line_nb": 216,
            "steps": [
                {
                    "command": [
                        "by apply/permP => z; rewrite -(permKV s z) permJ; apply/inj_tperm/perm_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "apermE",
            "line_nb": 245,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_pcycle",
            "line_nb": 248,
            "steps": [
                {
                    "command": [
                        "by rewrite (mem_imset (aperm x)) ?mem_cycle.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pcycle_id",
            "line_nb": 251,
            "steps": [
                {
                    "command": [
                        "by rewrite -{1}[x]perm1 (mem_pcycle s 0).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "uniq_traject_pcycle",
            "line_nb": 254,
            "steps": [
                {
                    "command": [
                        "case def_n: #|_| => // [n]; rewrite looping_uniq.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "apply: contraL (card_size (traject s x n)) => /loopingP t_sx.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "rewrite -ltnNge size_traject -def_n ?subset_leq_card //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply/subsetP=> _ /imsetP[_ /cycleP[i ->] ->]; rewrite /aperm permX t_sx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "iter_pcycle",
            "line_nb": 265,
            "steps": [
                {
                    "command": [
                        "case def_n: #|_| (uniq_traject_pcycle s x) => [//|n] Ut.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "have: looping s x n.+1.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite -def_n -[looping _ _ _]pcycle_traject -permX mem_pcycle.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite /looping => /trajectP[[|i] //= lt_i_n /perm_inj eq_i_n_sx].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "move: lt_i_n; rewrite ltnS ltn_neqAle andbC => /andP[le_i_n /negP[]].",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(nth_uniq x _ _ Ut) ?size_traject ?nth_traject // eq_i_n_sx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_pcycle_mem",
            "line_nb": 273,
            "steps": [
                {
                    "command": [
                        "apply/eqP/idP=> [<- | /imsetP[si s_si ->]]; first exact: pcycle_id.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply/setP => z; apply/imsetP/imsetP=> [] [sj s_sj ->].",
                        "VernacExtend",
                        "8d9dae45eeb3a769b8a865cef8ae476451f63802"
                    ]
                },
                {
                    "command": [
                        "by exists (si * sj); rewrite ?groupM /aperm ?permM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists (si^-1 * sj); first by rewrite groupM ?groupV.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite /aperm permM permK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pcycle_sym",
            "line_nb": 280,
            "steps": [
                {
                    "command": [
                        "by rewrite -!eq_pcycle_mem eq_sym.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pcycle_perm",
            "line_nb": 283,
            "steps": [
                {
                    "command": [
                        "by apply/eqP; rewrite eq_pcycle_mem mem_pcycle.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "odd_perm1",
            "line_nb": 346,
            "steps": [
                {
                    "command": [
                        "rewrite /odd_perm card_imset ?addbb // => x y; move/eqP.",
                        "VernacExtend",
                        "d382ad451ae594d67a86f477726931c094e27e38"
                    ]
                },
                {
                    "command": [
                        "by rewrite eq_pcycle_mem /pcycle cycle1 imset_set1 /aperm perm1; move/set1P.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "odd_mul_tperm",
            "line_nb": 350,
            "steps": [
                {
                    "command": [
                        "rewrite addbC -addbA -[~~ _]oddb -odd_add -ncycles_mul_tperm.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite odd_add odd_double addbF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "odd_tperm",
            "line_nb": 354,
            "steps": [
                {
                    "command": [
                        "by rewrite -[_ y]mulg1 odd_mul_tperm odd_perm1 addbF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prod_tpermP",
            "line_nb": 359,
            "steps": [
                {
                    "command": [
                        "elim: {s}_.+1 {-2}s (ltnSn #|[pred x | s x != x]|) => // n IHn s.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "rewrite ltnS => le_s_n; case: (pickP (fun x => s x != x)) => [x s_x | s_id].",
                        "VernacExtend",
                        "4a95f82aca0fc9a50f43053eca44fc9141212abe"
                    ]
                },
                {
                    "command": [
                        "have [|ts def_s ne_ts] := IHn (tperm x (s^-1 x) * s).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite (cardD1 x) !inE s_x in le_s_n; apply: leq_ltn_trans le_s_n.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "apply: subset_leq_card; apply/subsetP=> y.",
                        "VernacExtend",
                        "8d9dae45eeb3a769b8a865cef8ae476451f63802"
                    ]
                },
                {
                    "command": [
                        "rewrite !inE permM permE /= -(canF_eq (permK _)).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have [-> | ne_yx] := altP (y =P x); first by rewrite permKV eqxx.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case: (s y =P x) => // -> _; rewrite eq_sym.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists ((x, s^-1 x) :: ts); last by rewrite /= -(canF_eq (permK _)) s_x.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite big_cons -def_s mulgA tperm2 mul1g.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "exists nil; rewrite // big_nil; apply/permP=> x.",
                        "VernacExtend",
                        "d45fa45a4073d40bc82a939c460a2ae81c0b8230"
                    ]
                },
                {
                    "command": [
                        "by apply/eqP/idPn; rewrite perm1 s_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "odd_perm_prod",
            "line_nb": 373,
            "steps": [
                {
                    "command": [
                        "elim: ts => [_|t ts IHts] /=; first by rewrite big_nil odd_perm1.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case/andP=> dt12 dts; rewrite big_cons odd_mul_tperm dt12 IHts.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "odd_permM",
            "line_nb": 377,
            "steps": [
                {
                    "command": [
                        "move=> s1 s2; case: (prod_tpermP s1) => ts1 ->{s1} dts1.",
                        "VernacExtend",
                        "a01b3d93f426ff68d360351709a5fa5af822af32"
                    ]
                },
                {
                    "command": [
                        "case: (prod_tpermP s2) => ts2 ->{s2} dts2.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite -big_cat !odd_perm_prod ?all_cat ?dts1 // size_cat odd_add.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "odd_permV",
            "line_nb": 382,
            "steps": [
                {
                    "command": [
                        "by rewrite -{2}(mulgK s s) !odd_permM -addbA addKb.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "odd_permJ",
            "line_nb": 385,
            "steps": [
                {
                    "command": [
                        "by rewrite !odd_permM odd_permV addbC addbK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift_permK",
            "line_nb": 397,
            "steps": [
                {
                    "command": [
                        "rewrite /lift_perm_fun => k.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by case: (unliftP i k) => [j'|] ->; rewrite (liftK, unlift_none) ?permK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift_perm_id",
            "line_nb": 402,
            "steps": [
                {
                    "command": [
                        "by rewrite permE /lift_perm_fun unlift_none.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift_perm_lift",
            "line_nb": 405,
            "steps": [
                {
                    "command": [
                        "by rewrite permE /lift_perm_fun liftK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift_permM",
            "line_nb": 408,
            "steps": [
                {
                    "command": [
                        "apply/permP=> i1; case: (unliftP i i1) => [i2|] ->{i1}.",
                        "VernacExtend",
                        "20ec428e50c31e1399aee62c5a532bc8417a4b29"
                    ]
                },
                {
                    "command": [
                        "by rewrite !(permM, lift_perm_lift).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite permM !lift_perm_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift_perm1",
            "line_nb": 413,
            "steps": [
                {
                    "command": [
                        "by apply: (mulgI (lift_perm i i 1)); rewrite lift_permM !mulg1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift_permV",
            "line_nb": 416,
            "steps": [
                {
                    "command": [
                        "by apply/eqP; rewrite eq_invg_mul lift_permM mulgV lift_perm1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}