{
    "filename": "mathcomp/solvable/alt.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrbool ssrfun eqtype ssrnat seq div fintype tuple.",
            "VernacRequire",
            "afb1ad2c83a261b41cbcbd482c2d4046922bf850"
        ],
        [
            "From mathcomp Require Import tuple bigop prime finset fingroup morphism perm automorphism.",
            "VernacRequire",
            "ca415c6e90a156e70ec73b9322ea25f508e7b9b8"
        ],
        [
            "From mathcomp Require Import quotient action cyclic pgroup gseries sylow primitive_action.",
            "VernacRequire",
            "49ef58fcb3e2c3c5180ad497e36e6e8b23bde1ba"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Import GroupScope.",
            "VernacImport",
            "89fd18b7dcbcc46edcd02262df11c799856485fc"
        ],
        [
            "Definition bool_groupMixin := FinGroup.Mixin addbA addFb addbb.",
            "VernacDefinition",
            "b6de65bddf1530f2db7c440082ca7335dd1a2ffd"
        ],
        [
            "Canonical bool_baseGroup := Eval hnf in BaseFinGroupType bool bool_groupMixin.",
            "VernacDefinition",
            "8f40af1caa1f0a9036a9c3a485e3bb7c2896d8eb"
        ],
        [
            "Canonical boolGroup := Eval hnf in FinGroupType addbb.",
            "VernacDefinition",
            "a6c415185017728d7a5ec3d678309f1c61b255ac"
        ],
        [
            "Section SymAltDef.",
            "VernacBeginSection",
            "2a3ade95cf925885eebc8e722c4af4bc789f7b76"
        ],
        [
            "Variable T : finType.",
            "VernacAssumption",
            "6349381da4d33cbc2eeaf1bade38718e15f7a2c9"
        ],
        [
            "Implicit Types (s : {perm T}) (x y z : T).",
            "VernacReserve",
            "8477bdea70ac611757f2dfa56fdcef3c93966f60"
        ],
        [
            "Definition Sym of phant T : {set {perm T}} := setT.",
            "VernacDefinition",
            "ae3276524839beba667368ab044b070700bfbaff"
        ],
        [
            "Canonical Sym_group phT := Eval hnf in [group of Sym phT].",
            "VernacDefinition",
            "9f925506302a53f2dded6ad5f12ed5b4f672f647"
        ],
        [
            "Local Notation \"'Sym_T\" := (Sym (Phant T)) (at level 0).",
            "VernacNotation",
            "4e4b37272a44fc933be1fac2c4cf43ef11f92346"
        ],
        [
            "Canonical sign_morph := @Morphism _ _ 'Sym_T _ (in2W (@odd_permM _)).",
            "VernacDefinition",
            "afb76fa6850eb419cdab9b15c922ee814c3eeaf3"
        ],
        [
            "Definition Alt of phant T := 'ker (@odd_perm T).",
            "VernacDefinition",
            "6215940d7e06bc50ebd4a3e74ae3cb02942068f5"
        ],
        [
            "Canonical Alt_group phT := Eval hnf in [group of Alt phT].",
            "VernacDefinition",
            "bd6213dc33ee48ce9ae400be9d3a037939d185e2"
        ],
        [
            "Local Notation \"'Alt_T\" := (Alt (Phant T)) (at level 0).",
            "VernacNotation",
            "0cbc5d378a2af393570c8bc9593923d1260cd0b0"
        ],
        [
            "Lemma Alt_even p : (p \\in 'Alt_T) = ~~ p.",
            "VernacStartTheoremProof",
            "b793cc510ce0f23d5d1607adf1920fec7edf0b7d"
        ],
        [
            "by rewrite !inE /=; case: odd_perm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Alt_subset : 'Alt_T \\subset 'Sym_T.",
            "VernacStartTheoremProof",
            "9688def5d603c3b680808da28ac362d7182a7c81"
        ],
        [
            "exact: subsetT.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Alt_normal : 'Alt_T <| 'Sym_T.",
            "VernacStartTheoremProof",
            "1edff5119fe4cd48560e52f50237330ebae3dd0c"
        ],
        [
            "exact: ker_normal.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Alt_norm : 'Sym_T \\subset 'N('Alt_T).",
            "VernacStartTheoremProof",
            "8a596b247a40a49ba6f69ce330923db249c1e384"
        ],
        [
            "by case/andP: Alt_normal.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let n := #|T|.",
            "VernacDefinition",
            "c09187c99f86c94b0dcff8f785986cd7887caf9a"
        ],
        [
            "Lemma Alt_index : 1 < n -> #|'Sym_T : 'Alt_T| = 2.",
            "VernacStartTheoremProof",
            "e05480a1bc42be2b8ce68a3b302347558a99b3fe"
        ],
        [
            "move=> lt1n; rewrite -card_quotient ?Alt_norm //=.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "have : ('Sym_T / 'Alt_T) \\isog (@odd_perm T @* 'Sym_T) by apply: first_isog.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case/isogP=> g /injmP/card_in_imset <-.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite /morphim setIid=> ->; rewrite -card_bool; apply: eq_card => b.",
            "VernacExtend",
            "9c74624cac92f94e452c274a33342e43b2955888"
        ],
        [
            "apply/imsetP; case: b => /=; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by exists (1 : {perm T}); [rewrite setIid inE | rewrite odd_perm1].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (pickP T) lt1n => [x1 _ | d0]; last by rewrite /n eq_card0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite /n (cardD1 x1) ltnS lt0n => /existsP[x2 /=].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite eq_sym andbT -odd_tperm; exists (tperm x1 x2); rewrite ?inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_Sym : #|'Sym_T| = n`!.",
            "VernacStartTheoremProof",
            "19ece8a4e3737192d4a3c68b6ae777a00e5468a8"
        ],
        [
            "rewrite -[n]cardsE -card_perm; apply: eq_card => p.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by apply/idP/subsetP=> [? ?|]; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_Alt : 1 < n -> (2 * #|'Alt_T|)%N = n`!.",
            "VernacStartTheoremProof",
            "e2e19cbbe5b78c4756bf840a018824778be53f85"
        ],
        [
            "by move/Alt_index <-; rewrite mulnC (Lagrange Alt_subset) card_Sym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Sym_trans : [transitive^n 'Sym_T, on setT | 'P].",
            "VernacStartTheoremProof",
            "780a7acbd698cc1643dd30efb083e102c7156e56"
        ],
        [
            "apply/imsetP; pose t1 := [tuple of enum T].",
            "VernacExtend",
            "41a5d270ebe915260e741ffb363e6d99709a9cff"
        ],
        [
            "have dt1: t1 \\in n.-dtuple(setT) by rewrite inE enum_uniq; apply/subsetP.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists t1 => //; apply/setP=> t; apply/idP/imsetP=> [|[a _ ->{t}]]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: n_act_dtuple => //; apply/astabsP=> x; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/dtuple_onP=> injt _; have injf := inj_comp injt enum_rank_inj.",
            "VernacExtend",
            "c6460972b7febd45d9a49b3c1ce4f3fe36b53169"
        ],
        [
            "exists (perm injf); first by rewrite inE.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply: eq_from_tnth => i; rewrite tnth_map /= [aperm _ _]permE; congr tnth.",
            "VernacExtend",
            "91580bd9cdf2cad626638a70b66bf9b00afa41b1"
        ],
        [
            "by rewrite (tnth_nth (enum_default i)) enum_valK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Alt_trans : [transitive^n.-2 'Alt_T, on setT | 'P].",
            "VernacStartTheoremProof",
            "1b56d6fb8f010acc62f65a6fed334cdec3a37672"
        ],
        [
            "case n_m2: n Sym_trans => [|[|m]] /= tr_m2; try exact: ntransitive0.",
            "VernacExtend",
            "0cc390e21dc9c40cb582e9c8ff0eee81b650ee63"
        ],
        [
            "have tr_m := ntransitive_weak (leqW (leqnSn m)) tr_m2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case/imsetP: tr_m2; case/tupleP=> x; case/tupleP=> y t.",
            "VernacExtend",
            "d4127243a8edd835b38ce1b186629bc51391e41f"
        ],
        [
            "rewrite !dtuple_on_add 2![x \\in _]inE inE negb_or /= -!andbA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case/and4P=> nxy ntx nty dt _; apply/imsetP; exists t => //; apply/setP=> u.",
            "VernacExtend",
            "06e426019ddf5b2494f9ae73fd19fef0ef5b55b5"
        ],
        [
            "apply/idP/imsetP=> [|[a _ ->{u}]]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: n_act_dtuple => //; apply/astabsP=> z; rewrite !inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/(atransP2 tr_m dt)=> /= a _ ->{u}.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case odd_a: (odd_perm a); last by exists a => //; rewrite !inE /= odd_a.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "exists (tperm x y * a); first by rewrite !inE /= odd_permM odd_tperm nxy odd_a.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/val_inj/eq_in_map => z tz; rewrite actM /= /aperm; congr (a _).",
            "VernacExtend",
            "91580bd9cdf2cad626638a70b66bf9b00afa41b1"
        ],
        [
            "by case: tpermP ntx nty => // <-; rewrite tz.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma aperm_faithful (A : {group {perm T}}) : [faithful A, on setT | 'P].",
            "VernacStartTheoremProof",
            "5b4f75f185588d22792b06e7cfafe7d3f6ef310b"
        ],
        [
            "by apply/faithfulP=> /= p _ np1; apply/eqP/perm_act1P=> y; rewrite np1 ?inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SymAltDef.",
            "VernacEndSegment",
            "c840346883104c35de40d6faf01b00ea1d9282c2"
        ],
        [
            "Notation \"''Sym_' T\" := (Sym (Phant T)) (at level 8, T at level 2, format \"''Sym_' T\") : group_scope.",
            "VernacNotation",
            "13e05a00591e295ac598f8592a29f77055cfe385"
        ],
        [
            "Notation \"''Sym_' T\" := (Sym_group (Phant T)) : Group_scope.",
            "VernacNotation",
            "c8b4cad90101d40691283c3dcf528d51be3a4a7e"
        ],
        [
            "Notation \"''Alt_' T\" := (Alt (Phant T)) (at level 8, T at level 2, format \"''Alt_' T\") : group_scope.",
            "VernacNotation",
            "70e53218661b3dc3626cd1a37e23fbe758df409f"
        ],
        [
            "Notation \"''Alt_' T\" := (Alt_group (Phant T)) : Group_scope.",
            "VernacNotation",
            "7f6c612627c169f045781b00d212fe3e0febc80f"
        ],
        [
            "Lemma trivial_Alt_2 (T : finType) : #|T| <= 2 -> 'Alt_T = 1.",
            "VernacStartTheoremProof",
            "cdb12d1f43d4bdf9f1f9f701c276962037af4aaf"
        ],
        [
            "rewrite leq_eqVlt => /predU1P[] oT.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by apply: card_le1_trivg; rewrite -leq_double -mul2n card_Alt oT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices Sym1: 'Sym_T = 1 by apply/trivgP; rewrite -Sym1 subsetT.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by apply: card1_trivg; rewrite card_Sym; case: #|T| oT; do 2?case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma simple_Alt_3 (T : finType) : #|T| = 3 -> simple 'Alt_T.",
            "VernacStartTheoremProof",
            "8a3a3c8959efdcdd9101c9aae40f7eb195cdc833"
        ],
        [
            "move=> T3; have{T3} oA: #|'Alt_T| = 3.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "by apply: double_inj; rewrite -mul2n card_Alt T3.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/simpleP; split=> [|K]; [by rewrite trivg_card1 oA | case/andP=> sKH _].",
            "VernacExtend",
            "b588389665ba5b8491c967e0237897df1fabde15"
        ],
        [
            "have:= cardSg sKH; rewrite oA dvdn_divisors // !inE orbC /= -oA.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "case/pred2P=> eqK; [right | left]; apply/eqP.",
            "VernacExtend",
            "da4cd4b942f70e74e7dc129998717fb522f2d76b"
        ],
        [
            "by rewrite eqEcard sKH eqK leqnn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite eq_sym eqEcard sub1G eqK cards1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma not_simple_Alt_4 (T : finType) : #|T| = 4 -> ~~ simple 'Alt_T.",
            "VernacStartTheoremProof",
            "7273a2454ec3feb5d19b2eb5fec3b35f04275240"
        ],
        [
            "move=> oT; set A := 'Alt_T.",
            "VernacExtend",
            "fd0300d8899563f42d81dc09cab8269e61be7289"
        ],
        [
            "have oA: #|A| = 12 by apply: double_inj; rewrite -mul2n card_Alt oT.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "suffices [p]: exists p, [/\\ prime p, 1 < #|A|`_p < #|A| & #|'Syl_p(A)| == 1%N].",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "case=> p_pr pA_int; rewrite /A; case/normal_sylowP=> P; case/pHallP.",
            "VernacExtend",
            "41f5ef65341509fee663f3025927c0f7cafe97d5"
        ],
        [
            "rewrite /= -/A => sPA pP nPA; apply/simpleP=> [] [_]; rewrite -pP in pA_int.",
            "VernacExtend",
            "01f04d3f5bba3b876eb4ec7b1c8f26d2e2cced77"
        ],
        [
            "by case/(_ P)=> // defP; rewrite defP oA ?cards1 in pA_int.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have: #|'Syl_3(A)| \\in filter [pred d | d %% 3 == 1%N] (divisors 12).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite mem_filter -dvdn_divisors //= -oA card_Syl_dvd ?card_Syl_mod.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /= oA mem_seq2 orbC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case/predU1P=> [oQ3|]; [exists 2 | exists 3]; split; rewrite ?p_part //.",
            "VernacExtend",
            "5b43e40e4eec8aaa887fba14087653e3f8d87294"
        ],
        [
            "pose A3 := [set x : {perm T} | #[x] == 3]; suffices oA3: #|A :&: A3| = 8.",
            "VernacExtend",
            "5b6695ad242372f9089bd81df53ff1a22d3618ba"
        ],
        [
            "have sQ2 P: P \\in 'Syl_2(A) -> P :=: A :\\: A3.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite inE pHallE oA p_part -natTrecE /= => /andP[sPA /eqP oP].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply/eqP; rewrite eqEcard -(leq_add2l 8) -{1}oA3 cardsID oA oP.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite andbT subsetD sPA; apply/exists_inP=> -[x] /= Px.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite inE => /eqP ox; have:= order_dvdG Px; rewrite oP ox.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [/= P sylP] := Sylow_exists 2 [group of A].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -(([set P] =P 'Syl_2(A)) _) ?cards1 // eqEsubset sub1set inE sylP.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/subsetP=> Q sylQ; rewrite inE -val_eqE /= !sQ2 // inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -[8]/(4 * 2)%N -{}oQ3 -sum1_card -sum_nat_const.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (partition_big (fun x => <[x]>%G) (mem 'Syl_3(A))) => [|x]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case/setIP=> Ax; rewrite /= !inE pHallE p_part cycle_subG Ax oA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: eq_bigr => Q; rewrite inE /= inE pHallE oA p_part -?natTrecE //=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "case/andP=> sQA /eqP oQ; have:= oQ.",
            "VernacExtend",
            "c6460972b7febd45d9a49b3c1ce4f3fe36b53169"
        ],
        [
            "rewrite (cardsD1 1) group1 -sum1_card => [[/= <-]]; apply: eq_bigl => x.",
            "VernacExtend",
            "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
        ],
        [
            "rewrite setIC -val_eqE /= 2!inE in_setD1 -andbA -{4}[x]expg1 -order_dvdn dvdn1.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/and3P/andP=> [[/eqP-> _ /eqP <-] | [ntx Qx]]; first by rewrite cycle_id.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have:= order_dvdG Qx; rewrite oQ dvdn_divisors // mem_seq2 (negPf ntx) /=.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "by rewrite eqEcard cycle_subG Qx (subsetP sQA) // oQ /order => /eqP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma simple_Alt5_base (T : finType) : #|T| = 5 -> simple 'Alt_T.",
            "VernacStartTheoremProof",
            "4bb0fe6b2f7c6cde8617a57d75abf659a2f2b471"
        ],
        [
            "move=> oT.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have F1: #|'Alt_T| = 60 by apply: double_inj; rewrite -mul2n card_Alt oT.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have FF (H : {group {perm T}}): H <| 'Alt_T -> H :<>: 1 -> 20 %| #|H|.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "move=> Hh1 Hh3.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have [x _]: exists x, x \\in T by apply/existsP/eqP; rewrite oT.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have F2 := Alt_trans T; rewrite oT /= in F2.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "have F3: [transitive 'Alt_T, on setT | 'P] by apply: ntransitive1 F2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have F4: [primitive 'Alt_T, on setT | 'P] by apply: ntransitive_primitive F2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case: (prim_trans_norm F4 Hh1) => F5.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by case: Hh3; apply/trivgP; apply: subset_trans F5 (aperm_faithful _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have F6: 5 %| #|H| by rewrite -oT -cardsT (atrans_dvd F5).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have F7: 4 %| #|H|.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have F7: #|[set~ x]| = 4 by rewrite cardsC1 oT.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case: (pickP (mem [set~ x])) => [y Hy | ?]; last by rewrite eq_card0 in F7.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "pose K := 'C_H[x | 'P]%G.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have F8 : K \\subset H by apply: subsetIl.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose Gx := 'C_('Alt_T)[x | 'P]%G.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have F9: [transitive^2 Gx, on [set~ x] | 'P].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -[[set~ x]]setTI -setDE stab_ntransitive ?inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have F10: [transitive Gx, on [set~ x] | 'P].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exact: ntransitive1 F9.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "have F11: [primitive Gx, on [set~ x] | 'P].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exact: ntransitive_primitive F9.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "have F12: K \\subset Gx by apply: setSI; apply: normal_sub.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have F13: K <| Gx by rewrite /(K <| _) F12 normsIG // normal_norm.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case: (prim_trans_norm F11 F13) => Ksub; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: dvdn_trans (cardSg F8); rewrite -F7; apply: atrans_dvd Ksub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have F14: [faithful Gx, on [set~ x] | 'P].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/subsetP=> g; do 2![case/setIP] => Altg cgx cgx'.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "apply: (subsetP (aperm_faithful 'Alt_T)).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite inE Altg /=; apply/astabP=> z _.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "case: (z =P x) => [->|]; first exact: (astab1P cgx).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move/eqP=> nxz; rewrite (astabP cgx') ?inE //.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have Hreg g (z : T): g \\in H -> g z = z -> g = 1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have F15 h: h \\in H -> h x = x -> h = 1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> Hh Hhx; have: h \\in K by rewrite inE Hh; apply/astab1P.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "by rewrite (trivGP (subset_trans Ksub F14)) => /set1P.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> Hg Hgz; have:= in_setT x; rewrite -(atransP F3 z) ?inE //.",
            "VernacExtend",
            "7cbc77a1e43ca1454debc28656b2dec3869cf69b"
        ],
        [
            "case/imsetP=> g1 Hg1 Hg2; apply: (conjg_inj g1); rewrite conj1g.",
            "VernacExtend",
            "db5c0dcae9fc8f6605ec5d5bf559f9684231fcd6"
        ],
        [
            "apply: F15; last by rewrite Hg2 -permM mulKVg permM Hgz.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case/normalP: Hh1 => _ nH1; rewrite -(nH1 _ Hg1) memJ_conjg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "clear K F8 F12 F13 Ksub F14.",
            "VernacExtend",
            "b90c775137502e55218e5016b3bf12aa91010a99"
        ],
        [
            "case: (Cauchy _ F6) => // h Hh /eqP Horder.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have diff_hnx_x n: 0 < n -> n < 5 -> x != (h ^+ n) x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> Hn1 Hn2; rewrite eq_sym; apply/negP => HH.",
            "VernacExtend",
            "0fa388cebe8ed6372154caa26cd10c357f123670"
        ],
        [
            "have: #[h ^+ n] = 5.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite orderXgcd // (eqP Horder).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by move: Hn1 Hn2 {HH}; do 5 (case: n => [|n] //).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have Hhd2: h ^+ n \\in H by rewrite groupX.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite (Hreg _ _ Hhd2 (eqP HH)) order1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose S1 := [tuple x; h x; (h ^+ 3) x].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have DnS1: S1 \\in 3.-dtuple(setT).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite inE memtE subset_all /= !inE /= !negb_or -!andbA /= andbT.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -{1}[h]expg1 !diff_hnx_x // expgSr permM.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (inj_eq perm_inj) diff_hnx_x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose S2 := [tuple x; h x; (h ^+ 2) x].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have DnS2: S2 \\in 3.-dtuple(setT).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite inE memtE subset_all /= !inE /= !negb_or -!andbA /= andbT.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -{1}[h]expg1 !diff_hnx_x // expgSr permM.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (inj_eq perm_inj) diff_hnx_x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (atransP2 F2 DnS1 DnS2) => g Hg [/=].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite /aperm => Hgx Hghx Hgh3x.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "have h_g_com: h * g = g * h.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "suff HH: (g * h * g^-1) * h^-1 = 1 by rewrite -[h * g]mul1g -HH !gnorm.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "apply: (Hreg _ x); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !permM -Hgx Hghx -!permM mulKVg mulgV perm1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite groupM // ?groupV // (conjgCV g) mulgK -mem_conjg.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case/normalP: Hh1 => _ ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have: (g * (h ^+ 2) * g ^-1) x = (h ^+ 3) x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite !permM -Hgx.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have ->: h (h x) = (h ^+ 2) x by rewrite /= permM.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite {1}Hgh3x -!permM /= mulgV mulg1 -expgSr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite commuteX // mulgK {1}[expgn]lock expgS permM -lock.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by move/perm_inj=> eqxhx; case/eqP: (diff_hnx_x 1%N isT isT); rewrite expg1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite (@Gauss_dvd 4 5) // F7.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/simpleP; split => [|H Hnorm]; first by rewrite trivg_card1 F1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case Hcard1: (#|H| == 1%N); move/eqP: Hcard1 => Hcard1.",
            "VernacExtend",
            "d09d9458d087c74b7317d831afc65fc07a0f6e3f"
        ],
        [
            "by left; apply: card1_trivg; rewrite Hcard1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "right; case Hcard60: (#|H| == 60%N); move/eqP: Hcard60 => Hcard60.",
            "VernacExtend",
            "e2f6c7d75560afe7803e046fb7c74736a515cead"
        ],
        [
            "by apply/eqP; rewrite eqEcard Hcard60 F1 andbT; case/andP: Hnorm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have Hcard20: #|H| = 20; last clear Hcard1 Hcard60.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have Hdiv: 20 %| #|H| by apply: FF => // HH; case Hcard1; rewrite HH cards1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case H20: (#|H| == 20); first by apply/eqP.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case: Hcard60; case/andP: Hnorm; move/cardSg; rewrite F1 => Hdiv1 _.",
            "VernacExtend",
            "9d53ec525254c91429699a540bfce33b4e1df46e"
        ],
        [
            "by case/dvdnP: Hdiv H20 Hdiv1 => n ->; move: n; do 4!case=> //.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have prime_5: prime 5 by [].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have nSyl5: #|'Syl_5(H)| = 1%N.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move: (card_Syl_dvd 5 H) (card_Syl_mod H prime_5).",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "rewrite Hcard20; case: (card _) => // n Hdiv.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "move: (dvdn_leq (isT: (0 < 20)%N) Hdiv).",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by move: (n) Hdiv; do 20 (case=> //).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (Sylow_exists 5 H) => S; case/pHallP=> sSH oS.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "have{oS} oS: #|S| = 5 by rewrite oS p_part Hcard20.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "suff: 20 %| #|S| by rewrite oS.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "apply FF => [|S1]; last by rewrite S1 cards1 in oS.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply: char_normal_trans Hnorm; apply: lone_subgroup_char => // Q sQH isoQS.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "rewrite subEproper; apply/norP=> [[nQS _]]; move: nSyl5.",
            "VernacExtend",
            "399d290ad8c436d6764653e1c02126831ee79b9d"
        ],
        [
            "rewrite (cardsD1 S) (cardsD1 Q) 4!{1}inE nQS !pHallE sQH sSH Hcard20 p_part.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (card_isog isoQS) oS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Restrict.",
            "VernacBeginSection",
            "457b91c4635da7a08fdf3f3bda44e7aa7a4a51b1"
        ],
        [
            "Variables (T : finType) (x : T).",
            "VernacAssumption",
            "f5bdef0ff054a38fc28409da897c4b0c142b5da8"
        ],
        [
            "Notation T' := {y | y != x}.",
            "VernacSyntacticDefinition",
            "a2987e23fcac5ded3b3e59cb78eec690b2ab401b"
        ],
        [
            "Lemma rfd_funP (p : {perm T}) (u : T') : let p1 := if p x == x then p else 1 in p1 (val u) != x.",
            "VernacStartTheoremProof",
            "c1c08482ef4fd3b619083ae4a4d6ce91fabe2071"
        ],
        [
            "case: (p x =P x) => /= [pxx | _]; last by rewrite perm1 (valP u).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -[x in _ != x]pxx (inj_eq perm_inj); apply: (valP u).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition rfd_fun p := [fun u => Sub ((_ : {perm T}) _) (rfd_funP p u) : T'].",
            "VernacDefinition",
            "822fb571c5f261945b4a76118f47984671e68d63"
        ],
        [
            "Lemma rfdP p : injective (rfd_fun p).",
            "VernacStartTheoremProof",
            "ae980e3d5b33491c25e7a06a0ef69618c7008db8"
        ],
        [
            "apply: can_inj (rfd_fun p^-1) _ => u; apply: val_inj => /=.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "rewrite -(can_eq (permK p)) permKV eq_sym.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case: eqP => _; rewrite !(perm1, permK).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition rfd p := perm (@rfdP p).",
            "VernacDefinition",
            "e78866ddec74cbb0985cb2e7cb18238f5cc2503d"
        ],
        [
            "Hypothesis card_T : 2 < #|T|.",
            "VernacAssumption",
            "8131af30e29985d65ff9b28be1d100472f4a9889"
        ],
        [
            "Lemma rfd_morph : {in 'C_('Sym_T)[x | 'P] &, {morph rfd : y z / y * z}}.",
            "VernacStartTheoremProof",
            "f5772b5730c7f3c184b76fd4db7dcc11bb6ee596"
        ],
        [
            "move=> p q; rewrite !setIA !setIid; move/astab1P=> p_x; move/astab1P=> q_x.",
            "VernacExtend",
            "080620bae7a4e6b29a6ac139f4f252d631fa7376"
        ],
        [
            "apply/permP=> u; apply: val_inj.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by rewrite permE /= !permM !permE /= [p x]p_x [q x]q_x eqxx permM /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical rfd_morphism := Morphism rfd_morph.",
            "VernacDefinition",
            "aeb8a1a72eaf7ff59f0f6b6d04a19b02180d5e74"
        ],
        [
            "Definition rgd_fun (p : {perm T'}) := [fun x1 => if insub x1 is Some u then sval (p u) else x].",
            "VernacDefinition",
            "59ff6a58c86d941172725ec7d460343c41a3690b"
        ],
        [
            "Lemma rgdP p : injective (rgd_fun p).",
            "VernacStartTheoremProof",
            "f05656553416f4642c8564368f0baf2124a55126"
        ],
        [
            "apply: can_inj (rgd_fun p^-1) _ => y /=.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "case: (insubP _ y) => [u _ val_u|]; first by rewrite valK permK.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite negbK; move/eqP->; rewrite insubF //= eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition rgd p := perm (@rgdP p).",
            "VernacDefinition",
            "307b9584ff547bd4aff75a0ae03b88df274cdbdc"
        ],
        [
            "Lemma rfd_odd (p : {perm T}) : p x = x -> rfd p = p :> bool.",
            "VernacStartTheoremProof",
            "555c222ccb40c6e38201e9ec4669ad89af5f03d1"
        ],
        [
            "have rfd1: rfd 1 = 1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/permP => u; apply: val_inj; rewrite permE /= if_same !perm1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have HP0 (t : {perm T}): #|[set x | t x != x]| = 0 -> rfd t = t :> bool.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "move=> Ht; suff ->: t = 1 by rewrite rfd1 !odd_perm1.",
            "VernacExtend",
            "39acb869359c856109095a218f85253dc109a566"
        ],
        [
            "apply/permP => z; rewrite perm1; apply/eqP/wlog_neg => nonfix_z.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "by rewrite (cardD1 z) inE nonfix_z in Ht.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "elim: #|_| {-2}p (leqnn #|[set x | p x != x]|) => {p}[|n Hrec] p Hp Hpx.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by apply: HP0; move: Hp; case: card.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case Ex: (pred0b (mem [set x | p x != x])); first by apply: HP0; move/eqnP: Ex.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case/pred0Pn: Ex => x1; rewrite /= inE => Hx1.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "have nx1x: x1 != x by apply/eqP => HH; rewrite HH Hpx eqxx in Hx1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have npxx1: p x != x1 by apply/eqP => HH; rewrite -HH !Hpx eqxx in Hx1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have npx1x: p x1 != x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/eqP; rewrite -Hpx; move/perm_inj => HH; case/eqP: nx1x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose p1 := p * tperm x1 (p x1).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have Hp1: p1 x = x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite /p1 permM; case tpermP => // [<-|]; [rewrite Hpx | move/perm_inj].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have Hcp1: #|[set x | p1 x != x]| <= n.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have F1 y: p y = y -> p1 y = y.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> Hy; rewrite /p1 permM Hy.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by case: tpermP => [<-|/(canLR (permK p))<-|] //; apply/(canLR (permK p)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have F2: p1 x1 = x1 by rewrite /p1 permM tpermR.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have F3: [set x | p1 x != x] \\subset [predD1 [set x | p x != x] & x1].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/subsetP => z; rewrite !inE permM.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "case tpermP => HH1 HH2.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "rewrite eq_sym HH1 andbb; apply/eqP=> dx1.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite dx1 HH1 dx1 eqxx in HH2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite (perm_inj HH1) eqxx in HH2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move->; rewrite andbT; apply/eqP => HH3; rewrite HH3 in HH2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: (leq_trans (subset_leq_card F3)).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by move: Hp; rewrite (cardD1 x1) inE Hx1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have ->: p = p1 * tperm x1 (p x1) by rewrite -mulgA tperm2 mulg1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite odd_permM odd_tperm eq_sym Hx1 morphM; last 2 first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite 2!inE; apply/astab1P.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by rewrite 2!inE; apply/astab1P; rewrite -{1}Hpx /= /aperm -permM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite odd_permM Hrec //=; congr (_ (+) _).",
            "VernacExtend",
            "a0279e71fd23ac6bde2b8b4402981a70ea719044"
        ],
        [
            "pose x2 : T' := Sub x1 nx1x; pose px2 : T' := Sub (p x1) npx1x.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "suff ->: rfd (tperm x1 (p x1)) = tperm x2 px2.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "by rewrite odd_tperm -val_eqE eq_sym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/permP => z; apply/val_eqP; rewrite permE /= tpermD // eqxx.",
            "VernacExtend",
            "7d4450169cd8610cf3ff90cd2eeb2f84258ab13d"
        ],
        [
            "case: (tpermP x2) => [->|->|HH1 HH2]; rewrite /x2 ?tpermL ?tpermR 1?tpermD //.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by apply/eqP=> HH3; case: HH1; apply: val_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply/eqP => HH3; case: HH2; apply: val_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rfd_iso : 'C_('Alt_T)[x | 'P] \\isog 'Alt_T'.",
            "VernacStartTheoremProof",
            "b835624233dcdbb247fbc9bd33551f5c883803cc"
        ],
        [
            "have rgd_x p: rgd p x = x by rewrite permE /= insubF //= eqxx.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have rfd_rgd p: rfd (rgd p) = p.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/permP => [[z Hz]]; apply/val_eqP; rewrite !permE.",
            "VernacExtend",
            "7d4450169cd8610cf3ff90cd2eeb2f84258ab13d"
        ],
        [
            "rewrite /= [rgd _ _]permE /= insubF eq_refl // permE /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (@insubT _ (xpredC1 x) _ _ Hz).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have sSd: 'C_('Alt_T)[x | 'P] \\subset 'dom rfd.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/subsetP=> p; rewrite !inE /=; case/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/isogP; exists [morphism of restrm sSd rfd] => /=; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite morphim_restrm setIid; apply/setP=> z; apply/morphimP/idP=> [[p _]|].",
            "VernacExtend",
            "51feb8305384ec63057bc47214b50a33a7155fd3"
        ],
        [
            "case/setIP; rewrite Alt_even => Hp; move/astab1P=> Hp1 ->.",
            "VernacExtend",
            "a89caf520f181bf9e13d79da0c490f8a4f248ff2"
        ],
        [
            "by rewrite Alt_even rfd_odd.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have dz': rgd z x == x by rewrite rgd_x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> kz; exists (rgd z); last by rewrite /= rfd_rgd.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite 2!inE (sameP astab1P eqP).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite 4!inE /= (sameP astab1P eqP) dz' -rfd_odd; last exact/eqP.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite rfd_rgd mker // ?set11.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/injmP=> x1 y1 /=.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "case/setIP=> Hax1; move/astab1P; rewrite /= /aperm => Hx1.",
            "VernacExtend",
            "104deec7d26fef4688b98f55a5d1d6ac47714eeb"
        ],
        [
            "case/setIP=> Hay1; move/astab1P; rewrite /= /aperm => Hy1 Hr.",
            "VernacExtend",
            "104deec7d26fef4688b98f55a5d1d6ac47714eeb"
        ],
        [
            "apply/permP => z.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "case (z =P x) => [->|]; [by rewrite Hx1 | move/eqP => nzx].",
            "VernacExtend",
            "afa3d52794aea286455bec3a0853c94dd096f8d6"
        ],
        [
            "move: (congr1 (fun q : {perm T'} => q (Sub z nzx)) Hr).",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by rewrite !permE => [[]]; rewrite Hx1 Hy1 !eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Restrict.",
            "VernacEndSegment",
            "746f669aebca461bfe6449478db2d94d3e29eaab"
        ],
        [
            "Lemma simple_Alt5 (T : finType) : #|T| >= 5 -> simple 'Alt_T.",
            "VernacStartTheoremProof",
            "74fa6b039687ccaae9ca8e765bec2a984d8af107"
        ],
        [
            "suff F1 n: #|T| = n + 5 -> simple 'Alt_T by move/subnK/esym/F1.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "elim: n T => [| n Hrec T Hde]; first exact: simple_Alt5_base.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have oT: 5 < #|T| by rewrite Hde addnC.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/simpleP; split=> [|H Hnorm]; last have [Hh1 nH] := andP Hnorm.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite trivg_card1 -[#|_|]half_double -mul2n card_Alt Hde addnC //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite addSn factS mulnC -(prednK (fact_gt0 _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case E1: (pred0b T); first by rewrite /pred0b in E1; rewrite (eqP E1) in oT.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case/pred0Pn: E1 => x _; have Hx := in_setT x.",
            "VernacExtend",
            "c6460972b7febd45d9a49b3c1ce4f3fe36b53169"
        ],
        [
            "have F2: [transitive^4 'Alt_T, on setT | 'P].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: ntransitive_weak (Alt_trans T); rewrite -(subnKC oT).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have F3 := ntransitive1 (isT: 0 < 4) F2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have F4 := ntransitive_primitive (isT: 1 < 4) F2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case Hcard1: (#|H| == 1%N); move/eqP: Hcard1 => Hcard1.",
            "VernacExtend",
            "d09d9458d087c74b7317d831afc65fc07a0f6e3f"
        ],
        [
            "by left; apply: card1_trivg; rewrite Hcard1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "right; case: (prim_trans_norm F4 Hnorm) => F5.",
            "VernacExtend",
            "e985f090bbc3f2b716cbe18e96b8cccc4daa9e68"
        ],
        [
            "by rewrite (trivGP (subset_trans F5 (aperm_faithful _))) cards1 in Hcard1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case E1: (pred0b (predD1 T x)).",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite /pred0b in E1; move: oT.",
            "VernacExtend",
            "7e529e80bb2879787ee6d9466056f19f0215c721"
        ],
        [
            "by rewrite (cardD1 x) (eqP E1); case: (T x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/pred0Pn: E1 => y Hdy; case/andP: (Hdy) => diff_x_y Hy.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "pose K := 'C_H[x | 'P]%G.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have F8: K \\subset H by apply: subsetIl.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose Gx := 'C_('Alt_T)[x | 'P].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have F9: [transitive^3 Gx, on [set~ x] | 'P].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -[[set~ x]]setTI -setDE stab_ntransitive ?inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have F10: [transitive Gx, on [set~ x] | 'P].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: ntransitive1 F9.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have F11: [primitive Gx, on [set~ x] | 'P].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: ntransitive_primitive F9.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have F12: K \\subset Gx by rewrite setSI // normal_sub.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have F13: K <| Gx by apply/andP; rewrite normsIG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have:= prim_trans_norm F11; case/(_ K) => //= => Ksub; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have F14: Gx * H = 'Alt_T by apply/(subgroup_transitiveP _ _ F3).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have: simple Gx.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite (isog_simple (rfd_iso x)) Hrec //= card_sig cardC1 Hde.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/simpleP=> _ simGx; case/simGx: F13 => /= HH2.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "case Ez: (pred0b (predD1 (predD1 T x) y)).",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "move: oT; rewrite /pred0b in Ez.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite (cardD1 x) (cardD1 y) (eqP Ez) inE /= inE /= diff_x_y.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/pred0Pn: Ez => z; case/andP => diff_y_z Hdz.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "have [diff_x_z Hz] := andP Hdz.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have: z \\in [set~ x] by rewrite !inE.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -(atransP Ksub y) ?inE //; case/imsetP => g.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "rewrite /= HH2 inE; move/eqP=> -> HH4.",
            "VernacExtend",
            "7e529e80bb2879787ee6d9466056f19f0215c721"
        ],
        [
            "by case/negP: diff_y_z; rewrite HH4 act1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite /= -F14 -[Gx]HH2 (mulSGid F8).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have F14: [faithful Gx, on [set~ x] | 'P].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: subset_trans (aperm_faithful 'Sym_T); rewrite subsetI subsetT.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply/subsetP=> g; do 2![case/setIP]=> _ cgx cgx'; apply/astabP=> z _ /=.",
            "VernacExtend",
            "09ff90107c05f6bf4f743acb58a064bacfe65029"
        ],
        [
            "case: (z =P x) => [->|]; first exact: (astab1P cgx).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move/eqP=> zx; rewrite [_ g](astabP cgx') ?inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have Hreg g z: g \\in H -> g z = z -> g = 1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have F15 h: h \\in H -> h x = x -> h = 1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> Hh Hhx; have: h \\in K by rewrite inE Hh; apply/astab1P.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "by rewrite [K](trivGP (subset_trans Ksub F14)) => /set1P.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> Hg Hgz; have:= in_setT x; rewrite -(atransP F3 z) ?inE //.",
            "VernacExtend",
            "7cbc77a1e43ca1454debc28656b2dec3869cf69b"
        ],
        [
            "case/imsetP=> g1 Hg1 Hg2; apply: (conjg_inj g1); rewrite conj1g.",
            "VernacExtend",
            "db5c0dcae9fc8f6605ec5d5bf559f9684231fcd6"
        ],
        [
            "apply: F15; last by rewrite Hg2 -permM mulKVg permM Hgz.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite memJ_norm ?(subsetP nH).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "clear K F8 F12 F13 Ksub F14.",
            "VernacExtend",
            "b90c775137502e55218e5016b3bf12aa91010a99"
        ],
        [
            "have Hcard: 5 < #|H|.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: (leq_trans oT); apply dvdn_leq; first by apply: cardG_gt0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -cardsT (atrans_dvd F5).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case Eh: (pred0b [predD1 H & 1]).",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by move: Hcard; rewrite /pred0b in Eh; rewrite (cardD1 1) group1 (eqP Eh).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/pred0Pn: Eh => h; case/andP => diff_1_h /= Hh.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "case Eg: (pred0b (predD1 (predD1 [predD1 H & 1] h) h^-1)).",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "move: Hcard; rewrite ltnNge; case/negP.",
            "VernacExtend",
            "d7214ac8fd48f4d1cd143edd9d16f6d28386a302"
        ],
        [
            "rewrite (cardD1 1) group1 (cardD1 h) (cardD1 h^-1) (eqnP Eg).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by do 2!case: (_ \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/pred0Pn: Eg => g; case/andP => diff_h1_g; case/andP => diff_h_g.",
            "VernacExtend",
            "d4127243a8edd835b38ce1b186629bc51391e41f"
        ],
        [
            "case/andP => diff_1_g /= Hg.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case diff_hx_x: (h x == x).",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by case/negP: diff_1_h; apply/eqP; apply: (Hreg _ _ Hh (eqP diff_hx_x)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case diff_gx_x: (g x == x).",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case/negP: diff_1_g; apply/eqP; apply: (Hreg _ _ Hg (eqP diff_gx_x)).",
            "VernacExtend",
            "d0ca9c3fd2da32fc51e6c7224f197d333e09c6a3"
        ],
        [
            "case diff_gx_hx: (g x == h x).",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case/negP: diff_h_g; apply/eqP; symmetry; apply: (mulIg g^-1); rewrite gsimp.",
            "VernacExtend",
            "6beb88399b47d0d8675487fe59ef26315a2f2ce8"
        ],
        [
            "apply: (Hreg _ x); first by rewrite groupM // groupV.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite permM -(eqP diff_gx_hx) -permM mulgV perm1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case diff_hgx_x: ((h * g) x == x).",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case/negP: diff_h1_g; apply/eqP; apply: (mulgI h); rewrite !gsimp.",
            "VernacExtend",
            "d67559af2087ac51fc3bef6f9331ad7ac2dd4c2c"
        ],
        [
            "by apply: (Hreg _ x); [apply: groupM | apply/eqP].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case diff_hgx_hx: ((h * g) x == h x).",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case/negP: diff_1_g; apply/eqP.",
            "VernacExtend",
            "d62e4c271de3f2a9ff5062b8b89d3c57d965c518"
        ],
        [
            "by apply: (Hreg _ (h x)) => //; apply/eqP; rewrite -permM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case diff_hgx_gx: ((h * g) x == g x).",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by case/idP: diff_hx_x; rewrite -(can_eq (permK g)) -permM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case Ez: (pred0b (predD1 (predD1 (predD1 (predD1 T x) (h x)) (g x)) ((h * g) x))).",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "move: oT; rewrite /pred0b in Ez.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "rewrite (cardD1 x) (cardD1 (h x)) (cardD1 (g x)) (cardD1 ((h * g) x)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (eqP Ez) addnC; do 3!case: (_ x \\in _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/pred0Pn: Ez => z.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "case/and5P=> diff_hgx_z diff_gx_z diff_hx_z diff_x_z /= Hz.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "pose S1 := [tuple x; h x; g x; z].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have DnS1: S1 \\in 4.-dtuple(setT).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite inE memtE subset_all -!andbA !negb_or /= !inE !andbT.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -!(eq_sym z) diff_gx_z diff_x_z diff_hx_z.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite !(eq_sym x) diff_hx_x diff_gx_x eq_sym diff_gx_hx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose S2 := [tuple x; h x; g x; (h * g) x].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have DnS2: S2 \\in 4.-dtuple(setT).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite inE memtE subset_all -!andbA !negb_or /= !inE !andbT !(eq_sym x).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite diff_hx_x diff_gx_x diff_hgx_x.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite !(eq_sym (h x)) diff_gx_hx diff_hgx_hx eq_sym diff_hgx_gx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (atransP2 F2 DnS1 DnS2) => k Hk [/=].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite /aperm => Hkx Hkhx Hkgx Hkhgx.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "have h_k_com: h * k = k * h.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "suff HH: (k * h * k^-1) * h^-1 = 1 by rewrite -[h * k]mul1g -HH !gnorm.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "apply: (Hreg _ x); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !permM -Hkx Hkhx -!permM mulKVg mulgV perm1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite groupM // ?groupV // (conjgCV k) mulgK -mem_conjg (normsP nH).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have g_k_com: g * k = k * g.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "suff HH: (k * g * k^-1) * g^-1 = 1 by rewrite -[g * k]mul1g -HH !gnorm.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "apply: (Hreg _ x); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !permM -Hkx Hkgx -!permM mulKVg mulgV perm1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite groupM // ?groupV // (conjgCV k) mulgK -mem_conjg (normsP nH).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have HH: (k * (h * g) * k ^-1) x = z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite 2!permM -Hkx Hkhgx -permM mulgV perm1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/negP: diff_hgx_z.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite -HH !mulgA -h_k_com -!mulgA [k * _]mulgA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -g_k_com -!mulgA mulgV mulg1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "Alt_even",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "by rewrite !inE /=; case: odd_perm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Alt_subset",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "exact: subsetT.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Alt_normal",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "exact: ker_normal.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Alt_norm",
            "line_nb": 30,
            "steps": [
                {
                    "command": [
                        "by case/andP: Alt_normal.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Alt_index",
            "line_nb": 34,
            "steps": [
                {
                    "command": [
                        "move=> lt1n; rewrite -card_quotient ?Alt_norm //=.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "have : ('Sym_T / 'Alt_T) \\isog (@odd_perm T @* 'Sym_T) by apply: first_isog.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "case/isogP=> g /injmP/card_in_imset <-.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite /morphim setIid=> ->; rewrite -card_bool; apply: eq_card => b.",
                        "VernacExtend",
                        "9c74624cac92f94e452c274a33342e43b2955888"
                    ]
                },
                {
                    "command": [
                        "apply/imsetP; case: b => /=; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by exists (1 : {perm T}); [rewrite setIid inE | rewrite odd_perm1].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: (pickP T) lt1n => [x1 _ | d0]; last by rewrite /n eq_card0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite /n (cardD1 x1) ltnS lt0n => /existsP[x2 /=].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite eq_sym andbT -odd_tperm; exists (tperm x1 x2); rewrite ?inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_Sym",
            "line_nb": 45,
            "steps": [
                {
                    "command": [
                        "rewrite -[n]cardsE -card_perm; apply: eq_card => p.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by apply/idP/subsetP=> [? ?|]; rewrite !inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_Alt",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "by move/Alt_index <-; rewrite mulnC (Lagrange Alt_subset) card_Sym.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "aperm_faithful",
            "line_nb": 76,
            "steps": [
                {
                    "command": [
                        "by apply/faithfulP=> /= p _ np1; apply/eqP/perm_act1P=> y; rewrite np1 ?inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "trivial_Alt_2",
            "line_nb": 84,
            "steps": [
                {
                    "command": [
                        "rewrite leq_eqVlt => /predU1P[] oT.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by apply: card_le1_trivg; rewrite -leq_double -mul2n card_Alt oT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "suffices Sym1: 'Sym_T = 1 by apply/trivgP; rewrite -Sym1 subsetT.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "by apply: card1_trivg; rewrite card_Sym; case: #|T| oT; do 2?case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_simple_Alt_4",
            "line_nb": 99,
            "steps": [
                {
                    "command": [
                        "move=> oT; set A := 'Alt_T.",
                        "VernacExtend",
                        "fd0300d8899563f42d81dc09cab8269e61be7289"
                    ]
                },
                {
                    "command": [
                        "have oA: #|A| = 12 by apply: double_inj; rewrite -mul2n card_Alt oT.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "suffices [p]: exists p, [/\\ prime p, 1 < #|A|`_p < #|A| & #|'Syl_p(A)| == 1%N].",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "case=> p_pr pA_int; rewrite /A; case/normal_sylowP=> P; case/pHallP.",
                        "VernacExtend",
                        "41f5ef65341509fee663f3025927c0f7cafe97d5"
                    ]
                },
                {
                    "command": [
                        "rewrite /= -/A => sPA pP nPA; apply/simpleP=> [] [_]; rewrite -pP in pA_int.",
                        "VernacExtend",
                        "01f04d3f5bba3b876eb4ec7b1c8f26d2e2cced77"
                    ]
                },
                {
                    "command": [
                        "by case/(_ P)=> // defP; rewrite defP oA ?cards1 in pA_int.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have: #|'Syl_3(A)| \\in filter [pred d | d %% 3 == 1%N] (divisors 12).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite mem_filter -dvdn_divisors //= -oA card_Syl_dvd ?card_Syl_mod.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite /= oA mem_seq2 orbC.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case/predU1P=> [oQ3|]; [exists 2 | exists 3]; split; rewrite ?p_part //.",
                        "VernacExtend",
                        "5b43e40e4eec8aaa887fba14087653e3f8d87294"
                    ]
                },
                {
                    "command": [
                        "pose A3 := [set x : {perm T} | #[x] == 3]; suffices oA3: #|A :&: A3| = 8.",
                        "VernacExtend",
                        "5b6695ad242372f9089bd81df53ff1a22d3618ba"
                    ]
                },
                {
                    "command": [
                        "have sQ2 P: P \\in 'Syl_2(A) -> P :=: A :\\: A3.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite inE pHallE oA p_part -natTrecE /= => /andP[sPA /eqP oP].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite eqEcard -(leq_add2l 8) -{1}oA3 cardsID oA oP.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "rewrite andbT subsetD sPA; apply/exists_inP=> -[x] /= Px.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite inE => /eqP ox; have:= order_dvdG Px; rewrite oP ox.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [/= P sylP] := Sylow_exists 2 [group of A].",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -(([set P] =P 'Syl_2(A)) _) ?cards1 // eqEsubset sub1set inE sylP.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply/subsetP=> Q sylQ; rewrite inE -val_eqE /= !sQ2 // inE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -[8]/(4 * 2)%N -{}oQ3 -sum1_card -sum_nat_const.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite (partition_big (fun x => <[x]>%G) (mem 'Syl_3(A))) => [|x]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case/setIP=> Ax; rewrite /= !inE pHallE p_part cycle_subG Ax oA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: eq_bigr => Q; rewrite inE /= inE pHallE oA p_part -?natTrecE //=.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "case/andP=> sQA /eqP oQ; have:= oQ.",
                        "VernacExtend",
                        "c6460972b7febd45d9a49b3c1ce4f3fe36b53169"
                    ]
                },
                {
                    "command": [
                        "rewrite (cardsD1 1) group1 -sum1_card => [[/= <-]]; apply: eq_bigl => x.",
                        "VernacExtend",
                        "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
                    ]
                },
                {
                    "command": [
                        "rewrite setIC -val_eqE /= 2!inE in_setD1 -andbA -{4}[x]expg1 -order_dvdn dvdn1.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply/and3P/andP=> [[/eqP-> _ /eqP <-] | [ntx Qx]]; first by rewrite cycle_id.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have:= order_dvdG Qx; rewrite oQ dvdn_divisors // mem_seq2 (negPf ntx) /=.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "by rewrite eqEcard cycle_subG Qx (subsetP sQA) // oQ /order => /eqP->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rfd_funP",
            "line_nb": 235,
            "steps": [
                {
                    "command": [
                        "case: (p x =P x) => /= [pxx | _]; last by rewrite perm1 (valP u).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -[x in _ != x]pxx (inj_eq perm_inj); apply: (valP u).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rfdP",
            "line_nb": 240,
            "steps": [
                {
                    "command": [
                        "apply: can_inj (rfd_fun p^-1) _ => u; apply: val_inj => /=.",
                        "VernacExtend",
                        "8d9dae45eeb3a769b8a865cef8ae476451f63802"
                    ]
                },
                {
                    "command": [
                        "rewrite -(can_eq (permK p)) permKV eq_sym.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by case: eqP => _; rewrite !(perm1, permK).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rgdP",
            "line_nb": 254,
            "steps": [
                {
                    "command": [
                        "apply: can_inj (rgd_fun p^-1) _ => y /=.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "case: (insubP _ y) => [u _ val_u|]; first by rewrite valK permK.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite negbK; move/eqP->; rewrite insubF //= eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}