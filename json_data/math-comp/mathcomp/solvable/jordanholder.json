{
    "filename": "mathcomp/solvable/jordanholder.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrfun ssrbool eqtype ssrnat seq path choice fintype.",
            "VernacRequire",
            "5b7e20918953ef2b4d1bdb75f1e7eefded26520f"
        ],
        [
            "From mathcomp Require Import bigop finset fingroup morphism automorphism quotient action.",
            "VernacRequire",
            "0d83e2db3db821570085fd6a00e11e5638bf2783"
        ],
        [
            "From mathcomp Require Import gseries.",
            "VernacRequire",
            "bfe33909feea7350ce50828271adb5ce544248fb"
        ],
        [
            "Import GroupScope.",
            "VernacImport",
            "89fd18b7dcbcc46edcd02262df11c799856485fc"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Inductive section (gT : finGroupType) := GSection of {group gT} * {group gT}.",
            "VernacInductive",
            "fcf504561c1364b044a8f1abf78bc1ff47f2a341"
        ],
        [
            "Delimit Scope section_scope with sec.",
            "VernacDelimiters",
            "85bd2895bf89048694d7a93b4a58f765d371962f"
        ],
        [
            "Bind Scope section_scope with section.",
            "VernacBindScope",
            "eb891884bd4ab869f1cad1e652adcf1661d61918"
        ],
        [
            "Definition mkSec (gT : finGroupType) (G1 G2 : {group gT}) := GSection (G1, G2).",
            "VernacDefinition",
            "9c52176406ea5d0390e486026cf6f7d592279db6"
        ],
        [
            "Infix \"/\" := mkSec : section_scope.",
            "VernacInfix",
            "932c7939910b4215642627105a5f899e705ac6a1"
        ],
        [
            "Coercion pair_of_section gT (s : section gT) := let: GSection u := s in u.",
            "VernacDefinition",
            "70c5d86aae9146d09598374e44f98db25a40cddb"
        ],
        [
            "Coercion quotient_of_section gT (s : section gT) : GroupSet.sort _ := s.1 / s.2.",
            "VernacDefinition",
            "36fac8aa7fb7aa1188f8df1bf888ae34d1b93ec2"
        ],
        [
            "Coercion section_group gT (s : section gT) : {group (coset_of s.2)} := Eval hnf in [group of s].",
            "VernacDefinition",
            "6b9c92834606858e551a2b0cbe55743b8f149350"
        ],
        [
            "Section Sections.",
            "VernacBeginSection",
            "ee310bab594428df42a06fa71f81600e371c4a13"
        ],
        [
            "Variables (gT : finGroupType).",
            "VernacAssumption",
            "694477e88f23a3b7d6edaa9ed9d49ebe1ee92aa6"
        ],
        [
            "Implicit Types (G : {group gT}) (s : section gT).",
            "VernacReserve",
            "eca6cef610a036d3b078ee3e0427cf61d583ab67"
        ],
        [
            "Canonical section_subType := Eval hnf in [newType for @pair_of_section gT].",
            "VernacDefinition",
            "7f2fefba2ae496ccf4ddfbf44c31bae7914643d6"
        ],
        [
            "Definition section_eqMixin := Eval hnf in [eqMixin of section gT by <:].",
            "VernacDefinition",
            "d9d74ece84e0bca8f4743d3671eb0b1ca48785ff"
        ],
        [
            "Canonical section_eqType := Eval hnf in EqType (section gT) section_eqMixin.",
            "VernacDefinition",
            "3af650e3173380b4956e06305124462740046fc2"
        ],
        [
            "Definition section_choiceMixin := [choiceMixin of section gT by <:].",
            "VernacDefinition",
            "27e588425575e3a1d9997804b87e5b1965078451"
        ],
        [
            "Canonical section_choiceType := Eval hnf in ChoiceType (section gT) section_choiceMixin.",
            "VernacDefinition",
            "6cfa57db348fadf9e4a2ad02c8197f1c55400837"
        ],
        [
            "Definition section_countMixin := [countMixin of section gT by <:].",
            "VernacDefinition",
            "0165fe7a1143dfd1a9b1f2405cc4ecd086818d60"
        ],
        [
            "Canonical section_countType := Eval hnf in CountType (section gT) section_countMixin.",
            "VernacDefinition",
            "5043b8385ffbeb5a78b0073ed05ced3f6a6e6371"
        ],
        [
            "Canonical section_subCountType := Eval hnf in [subCountType of section gT].",
            "VernacDefinition",
            "0ad30d51ebb4f77865977db319aa833fe4b531eb"
        ],
        [
            "Definition section_finMixin := [finMixin of section gT by <:].",
            "VernacDefinition",
            "c1f6144ff1ae7dff66cf38b1fab2dfbc7dc4416c"
        ],
        [
            "Canonical section_finType := Eval hnf in FinType (section gT) section_finMixin.",
            "VernacDefinition",
            "cb7b0b9acd83559c1cd34a0e9747b1613be80eb8"
        ],
        [
            "Canonical section_subFinType := Eval hnf in [subFinType of section gT].",
            "VernacDefinition",
            "0788a25a7a70f29b3562c4bf31d8ee76b1f31a85"
        ],
        [
            "Canonical section_group.",
            "VernacCanonical",
            "f6705cb5b72cfaa538730be8b8198cef54d3b53c"
        ],
        [
            "Definition section_isog := [rel x y : section gT | x \\isog y].",
            "VernacDefinition",
            "396611823cb375fcf3f9cecdfe0f9f35ef7c6893"
        ],
        [
            "Definition section_repr s := odflt (1 / 1)%sec (pick (section_isog ^~ s)).",
            "VernacDefinition",
            "c47aeae51bd05cfc7d85b62f93c17977b00a92c4"
        ],
        [
            "Definition mksrepr G1 G2 := section_repr (mkSec G1 G2).",
            "VernacDefinition",
            "3f3b8687a66422986d086fabf5e011b925b3a586"
        ],
        [
            "Lemma section_reprP s : section_repr s \\isog s.",
            "VernacStartTheoremProof",
            "db54765ce28eb7bed8fb247e6e94539d75050ec5"
        ],
        [
            "by rewrite /section_repr; case: pickP => //= /(_ s); rewrite isog_refl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma section_repr_isog s1 s2 : s1 \\isog s2 -> section_repr s1 = section_repr s2.",
            "VernacStartTheoremProof",
            "196bd8bf370bf48ebcd9a51c4884dace689768aa"
        ],
        [
            "by move=> iso12; congr (odflt _ _); apply: eq_pick => s; apply: isog_transr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition mkfactors (G : {group gT}) (s : seq {group gT}) := map section_repr (pairmap (@mkSec _) G s).",
            "VernacDefinition",
            "cf2473528142ec256ccb3a54da3ded31916b545a"
        ],
        [
            "End Sections.",
            "VernacEndSegment",
            "8b93339f16c002e914353784da2b2f489e2a71f1"
        ],
        [
            "Section CompositionSeries.",
            "VernacBeginSection",
            "5baf8d3c54407984e19156b34f442396018e387d"
        ],
        [
            "Variable gT : finGroupType.",
            "VernacAssumption",
            "694477e88f23a3b7d6edaa9ed9d49ebe1ee92aa6"
        ],
        [
            "Local Notation gTg := {group gT}.",
            "VernacSyntacticDefinition",
            "0c6d65e60e42b52281727ecb8d092ec0d1f1449f"
        ],
        [
            "Implicit Types (G : gTg) (s : seq gTg).",
            "VernacReserve",
            "4d7e06a166644fcea24a45241fc0587fa2d75d2d"
        ],
        [
            "Local Notation compo := [rel x y : {set gT} | maxnormal y x x].",
            "VernacSyntacticDefinition",
            "e260a74e169521a439cd1f58dd3e26096ab25716"
        ],
        [
            "Definition comps G s := ((last G s) == 1%G) && compo.-series G s.",
            "VernacDefinition",
            "97102d1646653ed494e7e09db9bd7ed56aad4202"
        ],
        [
            "Lemma compsP G s : reflect (last G s = 1%G /\\ path [rel x y : gTg | maxnormal y x x] G s) (comps G s).",
            "VernacStartTheoremProof",
            "b6e9c7afb07d3f56cf3ee181642e1bedb48ab6fe"
        ],
        [
            "by apply: (iffP andP) => [] [/eqP].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma trivg_comps G s : comps G s -> (G :==: 1) = (s == [::]).",
            "VernacStartTheoremProof",
            "1b7d21510a8afc0799294bca48cd3e3c339a6447"
        ],
        [
            "case/andP=> ls cs; apply/eqP/eqP=> [G1 | s1]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite s1 /= in ls; apply/eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by case: s {ls} cs => //= H s /andP[/maxgroupp]; rewrite G1 /proper sub1G andbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma comps_cons G H s : comps G (H :: s) -> comps H s.",
            "VernacStartTheoremProof",
            "52b2585ac86973665df914982bceb9a872c39a77"
        ],
        [
            "by case/andP => /= ls /andP[_]; rewrite /comps ls.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma simple_compsP G s : comps G s -> reflect (s = [:: 1%G]) (simple G).",
            "VernacStartTheoremProof",
            "11bfe1befc7417dcc4f51b9ab90745c6ad0ce8b4"
        ],
        [
            "move=> cs; apply: (iffP idP) => [|s1]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite s1 /comps eqxx /= andbT -simple_maxnormal in cs.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: s cs => [/trivg_comps/eqP-> | H s]; first by case/simpleP; rewrite eqxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite [comps _ _]andbCA /= => /andP[/maxgroupp maxH /trivg_comps/esym nil_s].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite simple_maxnormal => /maxgroupP[_ simG].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "have H1: H = 1%G by apply/val_inj/simG; rewrite // sub1G.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move: nil_s; rewrite H1 eqxx => /eqP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exists_comps (G : gTg) : exists s, comps G s.",
            "VernacStartTheoremProof",
            "31e85b6a31e980217001deae4ffc974c95b3b2a9"
        ],
        [
            "elim: {G} #|G| {1 3}G (leqnn #|G|) => [G | n IHn G cG].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite leqNgt cardG_gt0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [sG | nsG] := boolP (simple G).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists [:: 1%G]; rewrite /comps eqxx /= -simple_maxnormal andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [-> | ntG] := eqVneq G 1%G; first by exists [::]; rewrite /comps eqxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have [N maxN] := ex_maxnormal_ntrivg ntG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [|s /andP[ls cs]] := IHn N.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -ltnS (leq_trans _ cG) // proper_card // (maxnormal_proper maxN).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by exists (N :: s); apply/and3P.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma JordanHolderUniqueness (G : gTg) (s1 s2 : seq gTg) : comps G s1 -> comps G s2 -> perm_eq (mkfactors G s1) (mkfactors G s2).",
            "VernacStartTheoremProof",
            "7a933278821120c65dfeec0cc61ce382d5d961b2"
        ],
        [
            "elim: {G}#|G| {-2}G (leqnn #|G|) => [|n Hi] G cG in s1 s2 * => cs1 cs2.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite leqNgt cardG_gt0 in cG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [G1 | ntG] := boolP (G :==: 1).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have -> : s1 = [::] by apply/eqP; rewrite -(trivg_comps cs1).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have -> : s2 = [::] by apply/eqP; rewrite -(trivg_comps cs2).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite /= perm_eq_refl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [sG | nsG] := boolP (simple G).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite (simple_compsP cs1 sG) (simple_compsP cs2 sG) perm_eq_refl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case es1: s1 cs1 => [|N1 st1] cs1.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by move: (trivg_comps cs1); rewrite eqxx; move/negP:ntG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case es2: s2 cs2 => [|N2 st2] cs2 {s1 es1}.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by move: (trivg_comps cs2); rewrite eqxx; move/negP:ntG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/andP: cs1 => /= lst1; case/andP=> maxN_1 pst1.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "case/andP: cs2 => /= lst2; case/andP=> maxN_2 pst2.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "have cN1 : #|N1| <= n.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -ltnS (leq_trans _ cG) ?proper_card ?(maxnormal_proper maxN_1).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have cN2 : #|N2| <= n.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -ltnS (leq_trans _ cG) ?proper_card ?(maxnormal_proper maxN_2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (N1 =P N2) {s2 es2} => [eN12 |].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite eN12 /= perm_cons Hi // /comps ?lst2 //= -eN12 lst1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move/eqP; rewrite -val_eqE /=; move/eqP=> neN12.",
            "VernacExtend",
            "40075a671b142e70c4190413219df8981418e910"
        ],
        [
            "have nN1G : N1 <| G by apply: maxnormal_normal.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have nN2G : N2 <| G by apply: maxnormal_normal.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose N := (N1 :&: N2)%G.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have nNG : N <| G.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite /normal subIset ?(normal_sub nN1G) //= normsI ?normal_norm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have iso1 : (G / N1)%G \\isog (N2 / N)%G.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite isog_sym /= -(maxnormalM maxN_1 maxN_2) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (@normC _ N1 N2) ?(subset_trans (normal_sub nN1G)) ?normal_norm //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite weak_second_isog ?(subset_trans (normal_sub nN2G)) ?normal_norm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have iso2 : (G / N2)%G \\isog (N1 / N)%G.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite isog_sym /= -(maxnormalM maxN_1 maxN_2) // setIC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite weak_second_isog ?(subset_trans (normal_sub nN1G)) ?normal_norm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [sN /andP[lsN csN]] := exists_comps N.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have i1 : perm_eq (mksrepr G N1 :: mkfactors N1 st1) [:: mksrepr G N1, mksrepr N1 N & mkfactors N sN].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite perm_cons -[mksrepr _ _ :: _]/(mkfactors N1 [:: N & sN]).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: Hi=> //; rewrite /comps ?lst1 //= lsN csN andbT /=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite -quotient_simple.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -(isog_simple iso2) quotient_simple.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite (normalS (subsetIl N1 N2) (normal_sub nN1G)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have i2 : perm_eq (mksrepr G N2 :: mkfactors N2 st2) [:: mksrepr G N2, mksrepr N2 N & mkfactors N sN].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite perm_cons -[mksrepr _ _ :: _]/(mkfactors N2 [:: N & sN]).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: Hi=> //; rewrite /comps ?lst2 //= lsN csN andbT /=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite -quotient_simple.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -(isog_simple iso1) quotient_simple.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite (normalS (subsetIr N1 N2) (normal_sub nN2G)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose fG1 := [:: mksrepr G N1, mksrepr N1 N & mkfactors N sN].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose fG2 := [:: mksrepr G N2, mksrepr N2 N & mkfactors N sN].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have i3 : perm_eq fG1 fG2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (@perm_catCA _ [::_] [::_]) /mksrepr.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (@section_repr_isog _ (mkSec _ _) (mkSec _ _) iso1).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -(@section_repr_isog _ (mkSec _ _) (mkSec _ _) iso2).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "exact: perm_eq_refl.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "apply: (perm_eq_trans i1); apply: (perm_eq_trans i3); rewrite perm_eq_sym.",
            "VernacExtend",
            "7d4450169cd8610cf3ff90cd2eeb2f84258ab13d"
        ],
        [
            "by apply: perm_eq_trans i2; apply: perm_eq_refl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End CompositionSeries.",
            "VernacEndSegment",
            "6b1e54852f1df0cabb305c0a800dbd8c03eec330"
        ],
        [
            "Section MoreGroupAction.",
            "VernacBeginSection",
            "1d193c561851c18097cf7d937287c4dc7fbe48b0"
        ],
        [
            "Variables (aT rT : finGroupType).",
            "VernacAssumption",
            "c03f9f132a62f50e5b8a55602b7e57809fe23d94"
        ],
        [
            "Variables (A : {group aT}) (D : {group rT}).",
            "VernacAssumption",
            "885165d672f9657d71ba09aee2fe8cfe12ad0315"
        ],
        [
            "Variable to : groupAction A D.",
            "VernacAssumption",
            "db982e510bcdfdd4112fc9a9072f76844a40c1c9"
        ],
        [
            "Lemma gactsP (G : {set rT}) : reflect {acts A, on G | to} [acts A, on G | to].",
            "VernacStartTheoremProof",
            "0baedf99cae0fc9eb65fc5e6608869e4aa14ef85"
        ],
        [
            "apply: (iffP idP) => [nGA x|nGA]; first exact: acts_act.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/subsetP=> a Aa; rewrite !inE; rewrite Aa.",
            "VernacExtend",
            "2a89668b1b89e221294968802af65d9e3b5dccd1"
        ],
        [
            "by apply/subsetP=> x; rewrite inE nGA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gactsM (N1 N2 : {set rT}) : N1 \\subset D -> N2 \\subset D -> [acts A, on N1 | to] -> [acts A, on N2 | to] -> [acts A, on N1 * N2 | to].",
            "VernacStartTheoremProof",
            "91803d06581ceb225140a40e550fe7ede499a084"
        ],
        [
            "move=> sN1D sN2D aAN1 aAN2; apply/gactsP=> x Ax y.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "apply/idP/idP; case/mulsgP=> y1 y2 N1y1 N2y2 e.",
            "VernacExtend",
            "20ec428e50c31e1399aee62c5a532bc8417a4b29"
        ],
        [
            "move: (actKin to Ax y); rewrite e; move<-.",
            "VernacExtend",
            "acee8b35e7f180a58bc44495c125f85347537cfc"
        ],
        [
            "rewrite gactM ?groupV ?(subsetP sN1D y1) ?(subsetP sN2D) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: mem_mulg; rewrite ?(gactsP _ aAN1) ?(gactsP _ aAN2) // groupV.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite e gactM // ?(subsetP sN1D y1) ?(subsetP sN2D) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: mem_mulg; rewrite ?(gactsP _ aAN1) // ?(gactsP _ aAN2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gactsI (N1 N2 : {set rT}) : [acts A, on N1 | to] -> [acts A, on N2 | to] -> [acts A, on N1 :&: N2 | to].",
            "VernacStartTheoremProof",
            "4d6a370d7871d91c979cf1282559f546110952cd"
        ],
        [
            "move=> aAN1 aAN2.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply/subsetP=> x Ax; rewrite !inE Ax /=; apply/subsetP=> y Ny; rewrite inE.",
            "VernacExtend",
            "7adcde8c7e12bb7410bc5941994989345b80c2de"
        ],
        [
            "case/setIP: Ny=> N1y N2y; rewrite inE ?astabs_act ?N1y ?N2y //.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move/subsetP: aAN2; move/(_ x Ax).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move/subsetP: aAN1; move/(_ x Ax).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gastabsP (S : {set rT}) (a : aT) : a \\in A -> reflect (forall x, (to x a \\in S) = (x \\in S)) (a \\in 'N(S | to)).",
            "VernacStartTheoremProof",
            "cc0203b038a1d5b90734becf5b898b8b9fece9c7"
        ],
        [
            "move=> Aa; apply: (iffP idP) => [nSa x|nSa]; first exact: astabs_act.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite !inE Aa; apply/subsetP=> x; rewrite inE nSa.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MoreGroupAction.",
            "VernacEndSegment",
            "f168ab8796847926cc0220fe538027071f4da8ff"
        ],
        [
            "Section MoreQuotientAction.",
            "VernacBeginSection",
            "5dc9b9e6fde8060f321f7b89daa64b3a308cf20d"
        ],
        [
            "Variables (aT rT : finGroupType).",
            "VernacAssumption",
            "c03f9f132a62f50e5b8a55602b7e57809fe23d94"
        ],
        [
            "Variables (A : {group aT})(D : {group rT}).",
            "VernacAssumption",
            "885165d672f9657d71ba09aee2fe8cfe12ad0315"
        ],
        [
            "Variable to : groupAction A D.",
            "VernacAssumption",
            "db982e510bcdfdd4112fc9a9072f76844a40c1c9"
        ],
        [
            "Lemma qact_dom_doms (H : {group rT}) : H \\subset D -> qact_dom to H \\subset A.",
            "VernacStartTheoremProof",
            "09863099030e8fc0f8e909440e3e0d6c92d4df65"
        ],
        [
            "by move=> sHD; apply/subsetP=> x; rewrite qact_domE // inE; case/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma acts_qact_doms (H : {group rT}) : H \\subset D -> [acts A, on H | to] -> qact_dom to H :=: A.",
            "VernacStartTheoremProof",
            "121b79c17762c7ee51cc69a210814c87080c82e9"
        ],
        [
            "move=> sHD aH; apply/eqP; rewrite eqEsubset; apply/andP.",
            "VernacExtend",
            "42e188f64c1b305ed274c1704aedbf73891c3017"
        ],
        [
            "split; first exact: qact_dom_doms.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/subsetP=> x Ax; rewrite qact_domE //; apply/gastabsP=> //.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "by move/gactsP: aH; move/(_ x Ax).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma qacts_cosetpre (H : {group rT}) (K' : {group coset_of H}) : H \\subset D -> [acts A, on H | to] -> [acts qact_dom to H, on K' | to / H] -> [acts A, on coset H @*^-1 K' | to].",
            "VernacStartTheoremProof",
            "98886b6a2be7354c011eb9cf2f5ddccf6d34b6e8"
        ],
        [
            "move=> sHD aH aK'; apply/subsetP=> x Ax; move: (Ax) (subsetP aK').",
            "VernacExtend",
            "dffee33afc6977d6aca43b282561ec7ced1503c9"
        ],
        [
            "rewrite -{1}(acts_qact_doms sHD aH) => qdx; move/(_ x qdx) => nx.",
            "VernacExtend",
            "d382ad451ae594d67a86f477726931c094e27e38"
        ],
        [
            "rewrite !inE Ax; apply/subsetP=> y; case/morphpreP=> Ny /= K'Hy; rewrite inE.",
            "VernacExtend",
            "9acd87f7a4a9fdbfb49e51ab17c069b90ad3194d"
        ],
        [
            "apply/morphpreP; split; first by rewrite acts_qact_dom_norm.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move/gastabsP: nx; move/(_ qdx (coset H y)); rewrite K'Hy qactE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma qacts_coset (H K : {group rT}) : H \\subset D -> [acts A, on K | to] -> [acts qact_dom to H, on (coset H) @* K | to / H].",
            "VernacStartTheoremProof",
            "8ab8966609f841d48cf8b36ceb230dfbcbb9c568"
        ],
        [
            "move=> sHD aK.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply/subsetP=> x qdx; rewrite inE qdx inE; apply/subsetP=> y.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "case/morphimP=> z Nz Kz /= e; rewrite e inE qactE // mem_imset // inE.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "move/gactsP: aK; move/(_ x (subsetP (qact_dom_doms sHD) _ qdx) z); rewrite Kz.",
            "VernacExtend",
            "ea0cb90c655c5664c1e4bd5e8281f3783b29707c"
        ],
        [
            "move->; move/acts_act: (acts_qact_dom to H); move/(_ x qdx z).",
            "VernacExtend",
            "3410686af1067cc9bb673c993c2ceed9d75b72ad"
        ],
        [
            "by rewrite Nz andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MoreQuotientAction.",
            "VernacEndSegment",
            "30419caf78567230e419a39b8a1db5fac5be5fa7"
        ],
        [
            "Section StableCompositionSeries.",
            "VernacBeginSection",
            "2e76d2e5591b5e218353871de848f4ba9ffa1945"
        ],
        [
            "Variables (aT rT : finGroupType).",
            "VernacAssumption",
            "c03f9f132a62f50e5b8a55602b7e57809fe23d94"
        ],
        [
            "Variables (D : {group rT})(A : {group aT}).",
            "VernacAssumption",
            "351f68de4f7cfec8a158681d03fa765a993980c8"
        ],
        [
            "Variable to : groupAction A D.",
            "VernacAssumption",
            "db982e510bcdfdd4112fc9a9072f76844a40c1c9"
        ],
        [
            "Definition maxainv (B C : {set rT}) := [max C of H | [&& (H <| B), ~~ (B \\subset H) & [acts A, on H | to]]].",
            "VernacDefinition",
            "ff95ddf1926dc41ea5d2103d884d51968d882c7c"
        ],
        [
            "Section MaxAinvProps.",
            "VernacBeginSection",
            "29aa3dd9130afd63aeb06fd10b5054a07c3c1637"
        ],
        [
            "Variables K N : {group rT}.",
            "VernacAssumption",
            "9335ef20d8d244d17a7f6c67281c0d9e95b25ce8"
        ],
        [
            "Lemma maxainv_norm : maxainv K N -> N <| K.",
            "VernacStartTheoremProof",
            "b821ee474c7e9843b7c2c86be4192a143381b936"
        ],
        [
            "by move/maxgroupp; case/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxainv_proper : maxainv K N -> N \\proper K.",
            "VernacStartTheoremProof",
            "8528b3ef9a1a268474c24a07fc2abeca046b0ae0"
        ],
        [
            "by move/maxgroupp; case/andP; rewrite properE; move/normal_sub->; case/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxainv_sub : maxainv K N -> N \\subset K.",
            "VernacStartTheoremProof",
            "8a34cc454e968832eab2d85ec7db0fd6f7a5755d"
        ],
        [
            "by move=> h; apply: proper_sub; apply: maxainv_proper.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxainv_ainvar : maxainv K N -> A \\subset 'N(N | to).",
            "VernacStartTheoremProof",
            "be67259223c76effb4453d79e9d70b79afbe3e8a"
        ],
        [
            "by move/maxgroupp; case/and3P.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxainvS : maxainv K N -> N \\subset K.",
            "VernacStartTheoremProof",
            "078eca4a79b72a9b36c9f7079f96748d789d0f33"
        ],
        [
            "by move=> pNN; rewrite proper_sub // maxainv_proper.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxainv_exists : K :!=: 1 -> {N : {group rT} | maxainv K N}.",
            "VernacStartTheoremProof",
            "c2691bbb161b306901ff18770ea3d8cffb89d978"
        ],
        [
            "move=> nt; apply: ex_maxgroup.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "exists [1 rT]%G.",
            "VernacExtend",
            "5451b7e60f300af8249f294e560f00adb1eb3f4c"
        ],
        [
            "rewrite /= normal1 subG1 nt /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/subsetP=> a Da; rewrite !inE Da /= sub1set !inE.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite /= -actmE // morph1 eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MaxAinvProps.",
            "VernacEndSegment",
            "f25ef7133ec2378f99a3a0e765ceb4f6386c3c3e"
        ],
        [
            "Lemma maxainvM (G H K : {group rT}) : H \\subset D -> K \\subset D -> maxainv G H -> maxainv G K -> H :<>: K -> H * K = G.",
            "VernacStartTheoremProof",
            "ba70d40ba8908fea810699328813b93cef7ce798"
        ],
        [
            "move: H K => N1 N2 sN1D sN2D pmN1 pmN2 neN12.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have cN12 : commute N1 N2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: normC; apply: (subset_trans (maxainv_sub pmN1)).",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by rewrite normal_norm ?maxainv_norm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "wlog nsN21 : G N1 N2 sN1D sN2D pmN1 pmN2 neN12 cN12/ ~~(N1 \\subset N2).",
            "VernacExtend",
            "a7d04f709d7f819b427e71c08303f8cd82c08a1b"
        ],
        [
            "move/eqP: (neN12); rewrite eqEsubset negb_and; case/orP=> ns; first by apply.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite cN12; apply=> //; apply: sym_not_eq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have nP : N1 * N2 <| G by rewrite normalM ?maxainv_norm.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sN2P : N2 \\subset N1 * N2 by rewrite mulg_subr ?group1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case/maxgroupP: (pmN1); case/andP=> nN1G pN1G mN1.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "case/maxgroupP: (pmN2); case/andP=> nN2G pN2G mN2.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "case/andP: pN1G=> nsGN1 ha1; case/andP: pN2G=> nsGN2 ha2.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "case e : (G \\subset N1 * N2).",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply/eqP; rewrite eqEsubset e mulG_subG !normal_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have: N1 <*> N2 = N2 by apply: mN2; rewrite /= ?comm_joingE // nP e /= gactsM.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite comm_joingE // => h; move: nsN21; rewrite -h mulg_subl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition asimple (K : {set rT}) := maxainv K 1.",
            "VernacDefinition",
            "1dd1264e54fc988c635b8b7bbbe82a567e541854"
        ],
        [
            "Implicit Types (H K : {group rT}) (s : seq {group rT}).",
            "VernacReserve",
            "54342cdca50f1644b677dc6abf3e3c44edf4b6a0"
        ],
        [
            "Lemma asimpleP K : reflect [/\\ K :!=: 1 & forall H, H <| K -> [acts A, on H | to] -> H :=: 1 \\/ H :=: K] (asimple K).",
            "VernacStartTheoremProof",
            "0081b3e00729bdc2aea5a21e19ff4325531bdd5a"
        ],
        [
            "apply: (iffP idP).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "case/maxgroupP; rewrite normal1 /=; case/andP=> nsK1 aK H1.",
            "VernacExtend",
            "1dd33488047dbf70f12e12a749f59bfa780f9e04"
        ],
        [
            "rewrite eqEsubset negb_and nsK1 /=; split => // H nHK ha.",
            "VernacExtend",
            "80e7cce19c53eb5d5a21aafd83e552d37e23084a"
        ],
        [
            "case eHK : (H :==: K); first by right; apply/eqP.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "left; apply: H1; rewrite ?sub1G // nHK; move/negbT: eHK.",
            "VernacExtend",
            "5ea00de40dc69657ae68cd58f21ae4928b940ddb"
        ],
        [
            "by rewrite eqEsubset negb_and normal_sub //=; move->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case=> ntK h; apply/maxgroupP; split.",
            "VernacExtend",
            "8196f092bedb7b1b709ffb6f017588ec952665b9"
        ],
        [
            "move: ntK; rewrite eqEsubset sub1G andbT normal1; move->.",
            "VernacExtend",
            "acee8b35e7f180a58bc44495c125f85347537cfc"
        ],
        [
            "apply/subsetP=> a Da; rewrite !inE Da /= sub1set !inE.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite /= -actmE // morph1 eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> H /andP[nHK /andP[nsKH ha]] _.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "case: (h _ nHK ha)=> // /eqP; rewrite eqEsubset.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by rewrite (negbTE nsKH) andbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition acomps K s := ((last K s) == 1%G) && path [rel x y : {group rT} | maxainv x y] K s.",
            "VernacDefinition",
            "6fea7e4ebbdd36a0d43a1780d5d9fd21789bb26e"
        ],
        [
            "Lemma acompsP K s : reflect (last K s = 1%G /\\ path [rel x y : {group rT} | maxainv x y] K s) (acomps K s).",
            "VernacStartTheoremProof",
            "bc09b938fecda363b30a9881e8f034e0d5d04a03"
        ],
        [
            "by apply: (iffP andP); case; move/eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma trivg_acomps K s : acomps K s -> (K :==: 1) = (s == [::]).",
            "VernacStartTheoremProof",
            "3beb31cfc0b6ab04c28e945dadbd42fd4b03aa4c"
        ],
        [
            "case/andP=> ls cs; apply/eqP/eqP; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move=> se; rewrite se /= in ls; apply/eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> G1; case: s ls cs => // H s _ /=; case/andP; case/maxgroupP.",
            "VernacExtend",
            "8544dc416b79dae4e98846e918d0eedc91bec47a"
        ],
        [
            "by rewrite G1 sub1G andbF.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma acomps_cons K H s : acomps K (H :: s) -> acomps H s.",
            "VernacStartTheoremProof",
            "3693e19dd3cf7d69c60e2e5259f9acb167e15457"
        ],
        [
            "by case/andP => /= ls; case/andP=> _ p; rewrite /acomps ls.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma asimple_acompsP K s : acomps K s -> reflect (s = [:: 1%G]) (asimple K).",
            "VernacStartTheoremProof",
            "6d7cc1daf8ba506e7a1a3c1a43b35f80f987d56f"
        ],
        [
            "move=> cs; apply: (iffP idP); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by move=> se; move: cs; rewrite se /=; case/andP=> /=; rewrite andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: s cs.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite /acomps /= andbT; move/eqP->; case/asimpleP; rewrite eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> H s cs sG; apply/eqP.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "rewrite eqseq_cons -(trivg_acomps (acomps_cons cs)) andbC andbb.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case/acompsP: cs => /= ls; case/andP=> mH ps.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "case/maxgroupP: sG; case/and3P => _ ntG _ ->; rewrite ?sub1G //.",
            "VernacExtend",
            "d147e8bc1eb3ddfc0a007f64d0e0c4dbca6073ce"
        ],
        [
            "rewrite (maxainv_norm mH); case/andP: (maxainv_proper mH)=> _ ->.",
            "VernacExtend",
            "712d339e99ee17eb7d5033e19ac614eb3ca6b532"
        ],
        [
            "exact: (maxainv_ainvar mH).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exists_acomps K : exists s, acomps K s.",
            "VernacStartTheoremProof",
            "f3b31a3a4154833f53c54e82fecb7bd5b3cda7c8"
        ],
        [
            "elim: {K} #|K| {1 3}K (leqnn #|K|) => [K | n Hi K cK].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite leqNgt cardG_gt0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/orP: (orbN (asimple K)) => [sK | nsK].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by exists [:: (1%G : {group rT})]; rewrite /acomps eqxx /= andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/orP: (orbN (K :==: 1))=> [tK | ntK].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by exists (Nil _); rewrite /acomps /= andbT.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (maxainv_exists ntK)=> N pmN.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have cN: #|N| <= n.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -ltnS (leq_trans _ cK) // proper_card // (maxainv_proper pmN).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (Hi _ cN)=> s; case/andP=> lasts ps; exists [:: N & s]; rewrite /acomps.",
            "VernacExtend",
            "f8310b3fbfe604f5fbe5cb7077c74bfdc74c6593"
        ],
        [
            "by rewrite last_cons lasts /= pmN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End StableCompositionSeries.",
            "VernacEndSegment",
            "52f1321ff67789ffe64580d13e5e197b14c388a4"
        ],
        [
            "Arguments maxainv {aT rT D%G A%G} to%gact B%g C%g.",
            "VernacArguments",
            "60ad5bbbf2bb8c09d6cd3f962e3b2ad2827957c8"
        ],
        [
            "Arguments asimple {aT rT D%G A%G} to%gact K%g.",
            "VernacArguments",
            "a6002cb969916238d05ba68d34c837022a56b48d"
        ],
        [
            "Section StrongJordanHolder.",
            "VernacBeginSection",
            "da7c66f82f43defc79e01f52fcd7abd35c189099"
        ],
        [
            "Section AuxiliaryLemmas.",
            "VernacBeginSection",
            "748fc7c028fca40bbd24199c0ab376d6fbc48ff5"
        ],
        [
            "Variables aT rT : finGroupType.",
            "VernacAssumption",
            "c03f9f132a62f50e5b8a55602b7e57809fe23d94"
        ],
        [
            "Variables (A : {group aT}) (D : {group rT}) (to : groupAction A D).",
            "VernacAssumption",
            "c022fe12a540f3c10edcadf0544fdbb3350b3345"
        ],
        [
            "Lemma maxainv_asimple_quo (G H : {group rT}) : H \\subset D -> maxainv to G H -> asimple (to / H) (G / H).",
            "VernacStartTheoremProof",
            "80b1e95efddaa5326ed16b6eefecc192620eea4e"
        ],
        [
            "move=> sHD /maxgroupP[/and3P[nHG pHG aH] Hmax].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply/asimpleP; split; first by rewrite -subG1 quotient_sub1 ?normal_norm.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move=> K' nK'Q aK'.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have: (K' \\proper (G / H)) || (G / H == K').",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite properE eqEsubset andbC (normal_sub nK'Q) !andbT orbC orbN.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/orP=> [ pHQ | eQH]; last by right; apply sym_eq; apply/eqP.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "left; pose K := ((coset H) @*^-1 K')%G.",
            "VernacExtend",
            "cc233b9097cc781008d3eaea56a8683eeb876450"
        ],
        [
            "have eK'I : K' \\subset (coset H) @* 'N(H).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite (subset_trans (normal_sub nK'Q)) ?morphimS ?normal_norm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have eKK' : K' :=: K / H by rewrite /(K / H) morphpreK //=.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "suff eKH : K :=: H by rewrite -trivg_quotient eKK' eKH.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "have sHK : H \\subset K by rewrite -ker_coset kerE morphpreS // sub1set group1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: Hmax => //; apply/and3P; split; last exact: qacts_cosetpre.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -(quotientGK nHG) cosetpre_normal.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move: (proper_subn pHQ); rewrite sub_morphim_pre ?normal_norm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma asimple_quo_maxainv (G H : {group rT}) : H \\subset D -> G \\subset D -> [acts A, on G | to] -> [acts A, on H | to] -> H <| G -> asimple (to / H) (G / H) -> maxainv to G H.",
            "VernacStartTheoremProof",
            "b0885bf7a8d921ee2bbbfa6ecfa6a7c695a30668"
        ],
        [
            "move=> sHD sGD aG aH nHG /asimpleP[ntQ maxQ]; apply/maxgroupP; split.",
            "VernacExtend",
            "89e3928646f39f87d3d1ec5d5a9ade07748b7d90"
        ],
        [
            "by rewrite nHG -quotient_sub1 ?normal_norm // subG1 ntQ.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> K /and3P[nKG nsGK aK] sHK.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "pose K' := (K / H)%G.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have K'dQ : K' <| (G / H)%G by apply: morphim_normal.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have nKH : H <| K by rewrite (normalS _ _ nHG) // normal_sub.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have: K' :=: 1%G \\/ K' :=: (G / H).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: (maxQ K' K'dQ) => /=.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "apply/subsetP=> x Adx.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite inE Adx /= inE.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/subsetP=> y.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite quotientE; case/morphimP=> z Nz Kz ->; rewrite /= !inE qactE //.",
            "VernacExtend",
            "1dc1cec635c64f0cc3ec64ea6e4d6c7d5b8f81f6"
        ],
        [
            "have ntoyx : to z x \\in 'N(H) by rewrite (acts_qact_dom_norm Adx).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/morphimP; exists (to z x) => //.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "suff h: qact_dom to H \\subset A.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "by rewrite astabs_act // (subsetP aK) //; apply: (subsetP h).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply/subsetP=> t; rewrite qact_domE // inE; case/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move/quotient_injG; rewrite !inE /=; move/(_ nKH nHG)=> c; move: nsGK.",
            "VernacExtend",
            "080620bae7a4e6b29a6ac139f4f252d631fa7376"
        ],
        [
            "by rewrite c subxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /= -trivg_quotient => tK'; apply: (congr1 (@gval _)); move: tK'.",
            "VernacExtend",
            "5e8c001930445b402eabf7fc558c7bc173d75ae3"
        ],
        [
            "by apply: (@quotient_injG _ H); rewrite ?inE /= ?normal_refl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma asimpleI (N1 N2 : {group rT}) : N2 \\subset 'N(N1) -> N1 \\subset D -> [acts A, on N1 | to] -> [acts A, on N2 | to] -> asimple (to / N1) (N2 / N1) -> asimple (to / (N2 :&: N1)) (N2 / (N2 :&: N1)).",
            "VernacStartTheoremProof",
            "deb7063da340f274f25eecbf91e57c4df50b2bd2"
        ],
        [
            "move=> nN21 sN1D aN1 aN2 /asimpleP[ntQ1 max1].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have [f1 [f1e f1ker f1pre f1im]] := restrmP (coset_morphism N1) nN21.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have hf2' : N2 \\subset 'N(N2 :&: N1) by apply: normsI => //; rewrite normG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have hf2'' : 'ker (coset (N2 :&: N1)) \\subset 'ker f1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite f1ker !ker_coset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose f2 := factm_morphism hf2'' hf2'.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "apply/asimpleP; split.",
            "VernacExtend",
            "b146763f64aeff143afb9ba1b7b1a677b4726e0f"
        ],
        [
            "rewrite /= setIC; apply/negP; move: (second_isog nN21); move/isog_eq1->.",
            "VernacExtend",
            "65e9334f71ec7afd30ac0e15dce387d428baf6f5"
        ],
        [
            "by apply/negP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> H nHQ2 aH; pose K := f2 @* H.",
            "VernacExtend",
            "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
        ],
        [
            "have nKQ1 : K <| N2 / N1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (_ : N2 / N1 = f2 @* (N2 / (N2 :&: N1))) ?morphim_normal //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite morphim_factm f1im.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have sqA : qact_dom to N1 \\subset A.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/subsetP=> t; rewrite qact_domE // inE; case/andP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have nNN2 : (N2 :&: N1) <| N2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite /normal subsetIl; apply: normsI => //; apply: normG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have aKQ1 : [acts qact_dom to N1, on K | to / N1].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose H':= coset (N2 :&: N1)@*^-1 H.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have eHH' : H :=: H' / (N2 :&: N1) by rewrite cosetpreK.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have -> : K :=: f1 @* H' by rewrite /K eHH' morphim_factm.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sH'N2 : H' \\subset N2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /H' eHH' quotientGK ?normal_cosetpre //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite sub_cosetpre_quo ?normal_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have -> : f1 @* H' = coset N1 @* H' by rewrite f1im //=.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: qacts_coset => //; apply: qacts_cosetpre => //; last exact: gactsI.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: (subset_trans (subsetIr _ _)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have injf2 : 'injm f2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite ker_factm f1ker /= ker_coset /= subG1 /= -quotientE trivg_quotient.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have iHK : H \\isog K.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/isogP; pose f3 := restrm_morphism (normal_sub nHQ2) f2.",
            "VernacExtend",
            "41a5d270ebe915260e741ffb363e6d99709a9cff"
        ],
        [
            "by exists f3; rewrite 1?injm_restrm // morphim_restrm setIid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (max1 _ nKQ1 aKQ1).",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by move/eqP; rewrite -(isog_eq1 iHK); move/eqP->; left.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> he /=; right; apply/eqP; rewrite eqEcard normal_sub //=.",
            "VernacExtend",
            "db64c092f8fd21c2365508a13e96985bf78ab17d"
        ],
        [
            "move: (second_isog nN21); rewrite setIC; move/card_isog->; rewrite -he.",
            "VernacExtend",
            "1c5bed44e136789e69cceefb9ad9e08bc6473cf7"
        ],
        [
            "by move/card_isog: iHK=> <-; rewrite leqnn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End AuxiliaryLemmas.",
            "VernacEndSegment",
            "963e9d3ebc904b1b90bc98f3dbbb257f875d0e57"
        ],
        [
            "Variables (aT rT : finGroupType).",
            "VernacAssumption",
            "c03f9f132a62f50e5b8a55602b7e57809fe23d94"
        ],
        [
            "Variables (A : {group aT}) (D : {group rT}) (to : groupAction A D).",
            "VernacAssumption",
            "c022fe12a540f3c10edcadf0544fdbb3350b3345"
        ],
        [
            "Lemma StrongJordanHolderUniqueness (G : {group rT}) (s1 s2 : seq {group rT}) : G \\subset D -> acomps to G s1 -> acomps to G s2 -> perm_eq (mkfactors G s1) (mkfactors G s2).",
            "VernacStartTheoremProof",
            "dcc61d6863ff9b20b9cf56280ab7fb0ec9502e35"
        ],
        [
            "elim: {G} #|G| {-2}G (leqnn #|G|) => [|n Hi] G cG in s1 s2 * => hsD cs1 cs2.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by rewrite leqNgt cardG_gt0 in cG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/orP: (orbN (G :==: 1)) => [tG | ntG].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have -> : s1 = [::] by apply/eqP; rewrite -(trivg_acomps cs1).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have -> : s2 = [::] by apply/eqP; rewrite -(trivg_acomps cs2).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite /= perm_eq_refl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/orP: (orbN (asimple to G))=> [sG | nsG].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have -> : s1 = [:: 1%G ] by apply/(asimple_acompsP cs1).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have -> : s2 = [:: 1%G ] by apply/(asimple_acompsP cs2).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite /= perm_eq_refl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case es1: s1 cs1 => [|N1 st1] cs1.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by move: (trivg_comps cs1); rewrite eqxx; move/negP:ntG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case es2: s2 cs2 => [|N2 st2] cs2 {s1 es1}.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by move: (trivg_comps cs2); rewrite eqxx; move/negP:ntG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/andP: cs1 => /= lst1; case/andP=> maxN_1 pst1.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "case/andP: cs2 => /= lst2; case/andP=> maxN_2 pst2.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "have sN1D : N1 \\subset D.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: subset_trans hsD; apply: maxainv_sub maxN_1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have sN2D : N2 \\subset D.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: subset_trans hsD; apply: maxainv_sub maxN_2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have cN1 : #|N1| <= n.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -ltnS (leq_trans _ cG) ?proper_card ?(maxainv_proper maxN_1).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have cN2 : #|N2| <= n.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -ltnS (leq_trans _ cG) ?proper_card ?(maxainv_proper maxN_2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (N1 =P N2) {s2 es2} => [eN12 |].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite eN12 /= perm_cons Hi // /acomps ?lst2 //= -eN12 lst1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move/eqP; rewrite -val_eqE /=; move/eqP=> neN12.",
            "VernacExtend",
            "40075a671b142e70c4190413219df8981418e910"
        ],
        [
            "have nN1G : N1 <| G by apply: (maxainv_norm maxN_1).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have nN2G : N2 <| G by apply: (maxainv_norm maxN_2).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose N := (N1 :&: N2)%G.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have nNG : N <| G.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite /normal subIset ?(normal_sub nN1G) //= normsI ?normal_norm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have iso1 : (G / N1)%G \\isog (N2 / N)%G.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite isog_sym /= -(maxainvM _ _ maxN_1 maxN_2) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (@normC _ N1 N2) ?(subset_trans (normal_sub nN1G)) ?normal_norm //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite weak_second_isog ?(subset_trans (normal_sub nN2G)) ?normal_norm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have iso2 : (G / N2)%G \\isog (N1 / N)%G.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite isog_sym /= -(maxainvM _ _ maxN_1 maxN_2) // setIC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite weak_second_isog ?(subset_trans (normal_sub nN1G)) ?normal_norm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (exists_acomps to N)=> sN; case/andP=> lsN csN.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "have aN1 : [acts A, on N1 | to].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by case/maxgroupP: maxN_1; case/and3P.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have aN2 : [acts A, on N2 | to].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by case/maxgroupP: maxN_2; case/and3P.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have nNN1 : N <| N1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: (normalS _ _ nNG); rewrite ?subsetIl ?normal_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have nNN2 : N <| N2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: (normalS _ _ nNG); rewrite ?subsetIr ?normal_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have aN : [ acts A, on N1 :&: N2 | to].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/subsetP=> x Ax; rewrite !inE Ax /=; apply/subsetP=> y Ny; rewrite inE.",
            "VernacExtend",
            "7adcde8c7e12bb7410bc5941994989345b80c2de"
        ],
        [
            "case/setIP: Ny=> N1y N2y.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite inE ?astabs_act ?N1y ?N2y //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by move/subsetP: aN2; move/(_ x Ax).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move/subsetP: aN1; move/(_ x Ax).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have i1 : perm_eq (mksrepr G N1 :: mkfactors N1 st1) [:: mksrepr G N1, mksrepr N1 N & mkfactors N sN].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite perm_cons -[mksrepr _ _ :: _]/(mkfactors N1 [:: N & sN]).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: Hi=> //; rewrite /acomps ?lst1 //= lsN csN andbT /=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply: asimple_quo_maxainv=> //; first by apply: subIset; rewrite sN1D.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply: asimpleI => //.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by apply: subset_trans (normal_norm nN2G); apply: normal_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -quotientMidl (maxainvM _ _ maxN_2) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: maxainv_asimple_quo.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=> e; apply: neN12.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have i2 : perm_eq (mksrepr G N2 :: mkfactors N2 st2) [:: mksrepr G N2, mksrepr N2 N & mkfactors N sN].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite perm_cons -[mksrepr _ _ :: _]/(mkfactors N2 [:: N & sN]).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: Hi=> //; rewrite /acomps ?lst2 //= lsN csN andbT /=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply: asimple_quo_maxainv=> //; first by apply: subIset; rewrite sN1D.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have e : N1 :&: N2 :=: N2 :&: N1 by rewrite setIC.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (group_inj (setIC N1 N2)); apply: asimpleI => //.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by apply: subset_trans (normal_norm nN1G); apply: normal_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -quotientMidl (maxainvM _ _ maxN_1) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "exact: maxainv_asimple_quo.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "pose fG1 := [:: mksrepr G N1, mksrepr N1 N & mkfactors N sN].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "pose fG2 := [:: mksrepr G N2, mksrepr N2 N & mkfactors N sN].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have i3 : perm_eq fG1 fG2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (@perm_catCA _ [::_] [::_]) /mksrepr.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (@section_repr_isog _ (mkSec _ _) (mkSec _ _) iso1).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -(@section_repr_isog _ (mkSec _ _) (mkSec _ _) iso2).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "exact: perm_eq_refl.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "apply: (perm_eq_trans i1); apply: (perm_eq_trans i3); rewrite perm_eq_sym.",
            "VernacExtend",
            "7d4450169cd8610cf3ff90cd2eeb2f84258ab13d"
        ],
        [
            "by apply: perm_eq_trans i2; apply: perm_eq_refl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End StrongJordanHolder.",
            "VernacEndSegment",
            "0f071c402cbe31eb19ee00266e551c4c930ea29e"
        ]
    ],
    "proofs": [
        {
            "name": "section_reprP",
            "line_nb": 34,
            "steps": [
                {
                    "command": [
                        "by rewrite /section_repr; case: pickP => //= /(_ s); rewrite isog_refl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "section_repr_isog",
            "line_nb": 37,
            "steps": [
                {
                    "command": [
                        "by move=> iso12; congr (odflt _ _); apply: eq_pick => s; apply: isog_transr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compsP",
            "line_nb": 48,
            "steps": [
                {
                    "command": [
                        "by apply: (iffP andP) => [] [/eqP].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "trivg_comps",
            "line_nb": 51,
            "steps": [
                {
                    "command": [
                        "case/andP=> ls cs; apply/eqP/eqP=> [G1 | s1]; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite s1 /= in ls; apply/eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by case: s {ls} cs => //= H s /andP[/maxgroupp]; rewrite G1 /proper sub1G andbF.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comps_cons",
            "line_nb": 56,
            "steps": [
                {
                    "command": [
                        "by case/andP => /= ls /andP[_]; rewrite /comps ls.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exists_comps",
            "line_nb": 68,
            "steps": [
                {
                    "command": [
                        "elim: {G} #|G| {1 3}G (leqnn #|G|) => [G | n IHn G cG].",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by rewrite leqNgt cardG_gt0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [sG | nsG] := boolP (simple G).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by exists [:: 1%G]; rewrite /comps eqxx /= -simple_maxnormal andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [-> | ntG] := eqVneq G 1%G; first by exists [::]; rewrite /comps eqxx.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have [N maxN] := ex_maxnormal_ntrivg ntG.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [|s /andP[ls cs]] := IHn N.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite -ltnS (leq_trans _ cG) // proper_card // (maxnormal_proper maxN).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by exists (N :: s); apply/and3P.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "JordanHolderUniqueness",
            "line_nb": 79,
            "steps": [
                {
                    "command": [
                        "elim: {G}#|G| {-2}G (leqnn #|G|) => [|n Hi] G cG in s1 s2 * => cs1 cs2.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by rewrite leqNgt cardG_gt0 in cG.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [G1 | ntG] := boolP (G :==: 1).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have -> : s1 = [::] by apply/eqP; rewrite -(trivg_comps cs1).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have -> : s2 = [::] by apply/eqP; rewrite -(trivg_comps cs2).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite /= perm_eq_refl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [sG | nsG] := boolP (simple G).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite (simple_compsP cs1 sG) (simple_compsP cs2 sG) perm_eq_refl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case es1: s1 cs1 => [|N1 st1] cs1.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by move: (trivg_comps cs1); rewrite eqxx; move/negP:ntG.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case es2: s2 cs2 => [|N2 st2] cs2 {s1 es1}.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by move: (trivg_comps cs2); rewrite eqxx; move/negP:ntG.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case/andP: cs1 => /= lst1; case/andP=> maxN_1 pst1.",
                        "VernacExtend",
                        "5887f8022a4f6389ac249140364feb69c4f18799"
                    ]
                },
                {
                    "command": [
                        "case/andP: cs2 => /= lst2; case/andP=> maxN_2 pst2.",
                        "VernacExtend",
                        "5887f8022a4f6389ac249140364feb69c4f18799"
                    ]
                },
                {
                    "command": [
                        "have cN1 : #|N1| <= n.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite -ltnS (leq_trans _ cG) ?proper_card ?(maxnormal_proper maxN_1).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have cN2 : #|N2| <= n.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite -ltnS (leq_trans _ cG) ?proper_card ?(maxnormal_proper maxN_2).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: (N1 =P N2) {s2 es2} => [eN12 |].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite eN12 /= perm_cons Hi // /comps ?lst2 //= -eN12 lst1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move/eqP; rewrite -val_eqE /=; move/eqP=> neN12.",
                        "VernacExtend",
                        "40075a671b142e70c4190413219df8981418e910"
                    ]
                },
                {
                    "command": [
                        "have nN1G : N1 <| G by apply: maxnormal_normal.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have nN2G : N2 <| G by apply: maxnormal_normal.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "pose N := (N1 :&: N2)%G.",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have nNG : N <| G.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite /normal subIset ?(normal_sub nN1G) //= normsI ?normal_norm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have iso1 : (G / N1)%G \\isog (N2 / N)%G.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite isog_sym /= -(maxnormalM maxN_1 maxN_2) //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite (@normC _ N1 N2) ?(subset_trans (normal_sub nN1G)) ?normal_norm //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite weak_second_isog ?(subset_trans (normal_sub nN2G)) ?normal_norm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have iso2 : (G / N2)%G \\isog (N1 / N)%G.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite isog_sym /= -(maxnormalM maxN_1 maxN_2) // setIC.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite weak_second_isog ?(subset_trans (normal_sub nN1G)) ?normal_norm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [sN /andP[lsN csN]] := exists_comps N.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have i1 : perm_eq (mksrepr G N1 :: mkfactors N1 st1) [:: mksrepr G N1, mksrepr N1 N & mkfactors N sN].",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite perm_cons -[mksrepr _ _ :: _]/(mkfactors N1 [:: N & sN]).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply: Hi=> //; rewrite /comps ?lst1 //= lsN csN andbT /=.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "rewrite -quotient_simple.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(isog_simple iso2) quotient_simple.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite (normalS (subsetIl N1 N2) (normal_sub nN1G)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have i2 : perm_eq (mksrepr G N2 :: mkfactors N2 st2) [:: mksrepr G N2, mksrepr N2 N & mkfactors N sN].",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite perm_cons -[mksrepr _ _ :: _]/(mkfactors N2 [:: N & sN]).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply: Hi=> //; rewrite /comps ?lst2 //= lsN csN andbT /=.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "rewrite -quotient_simple.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(isog_simple iso1) quotient_simple.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite (normalS (subsetIr N1 N2) (normal_sub nN2G)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "pose fG1 := [:: mksrepr G N1, mksrepr N1 N & mkfactors N sN].",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "pose fG2 := [:: mksrepr G N2, mksrepr N2 N & mkfactors N sN].",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have i3 : perm_eq fG1 fG2.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite (@perm_catCA _ [::_] [::_]) /mksrepr.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite (@section_repr_isog _ (mkSec _ _) (mkSec _ _) iso1).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -(@section_repr_isog _ (mkSec _ _) (mkSec _ _) iso2).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "exact: perm_eq_refl.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "apply: (perm_eq_trans i1); apply: (perm_eq_trans i3); rewrite perm_eq_sym.",
                        "VernacExtend",
                        "7d4450169cd8610cf3ff90cd2eeb2f84258ab13d"
                    ]
                },
                {
                    "command": [
                        "by apply: perm_eq_trans i2; apply: perm_eq_refl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gactsP",
            "line_nb": 141,
            "steps": [
                {
                    "command": [
                        "apply: (iffP idP) => [nGA x|nGA]; first exact: acts_act.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply/subsetP=> a Aa; rewrite !inE; rewrite Aa.",
                        "VernacExtend",
                        "2a89668b1b89e221294968802af65d9e3b5dccd1"
                    ]
                },
                {
                    "command": [
                        "by apply/subsetP=> x; rewrite inE nGA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gactsM",
            "line_nb": 146,
            "steps": [
                {
                    "command": [
                        "move=> sN1D sN2D aAN1 aAN2; apply/gactsP=> x Ax y.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "apply/idP/idP; case/mulsgP=> y1 y2 N1y1 N2y2 e.",
                        "VernacExtend",
                        "20ec428e50c31e1399aee62c5a532bc8417a4b29"
                    ]
                },
                {
                    "command": [
                        "move: (actKin to Ax y); rewrite e; move<-.",
                        "VernacExtend",
                        "acee8b35e7f180a58bc44495c125f85347537cfc"
                    ]
                },
                {
                    "command": [
                        "rewrite gactM ?groupV ?(subsetP sN1D y1) ?(subsetP sN2D) //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: mem_mulg; rewrite ?(gactsP _ aAN1) ?(gactsP _ aAN2) // groupV.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite e gactM // ?(subsetP sN1D y1) ?(subsetP sN2D) //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: mem_mulg; rewrite ?(gactsP _ aAN1) // ?(gactsP _ aAN2).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gactsI",
            "line_nb": 155,
            "steps": [
                {
                    "command": [
                        "move=> aAN1 aAN2.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "apply/subsetP=> x Ax; rewrite !inE Ax /=; apply/subsetP=> y Ny; rewrite inE.",
                        "VernacExtend",
                        "7adcde8c7e12bb7410bc5941994989345b80c2de"
                    ]
                },
                {
                    "command": [
                        "case/setIP: Ny=> N1y N2y; rewrite inE ?astabs_act ?N1y ?N2y //.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move/subsetP: aAN2; move/(_ x Ax).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move/subsetP: aAN1; move/(_ x Ax).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gastabsP",
            "line_nb": 164,
            "steps": [
                {
                    "command": [
                        "move=> Aa; apply: (iffP idP) => [nSa x|nSa]; first exact: astabs_act.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite !inE Aa; apply/subsetP=> x; rewrite inE nSa.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "qact_dom_doms",
            "line_nb": 173,
            "steps": [
                {
                    "command": [
                        "by move=> sHD; apply/subsetP=> x; rewrite qact_domE // inE; case/andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "qacts_cosetpre",
            "line_nb": 182,
            "steps": [
                {
                    "command": [
                        "move=> sHD aH aK'; apply/subsetP=> x Ax; move: (Ax) (subsetP aK').",
                        "VernacExtend",
                        "dffee33afc6977d6aca43b282561ec7ced1503c9"
                    ]
                },
                {
                    "command": [
                        "rewrite -{1}(acts_qact_doms sHD aH) => qdx; move/(_ x qdx) => nx.",
                        "VernacExtend",
                        "d382ad451ae594d67a86f477726931c094e27e38"
                    ]
                },
                {
                    "command": [
                        "rewrite !inE Ax; apply/subsetP=> y; case/morphpreP=> Ny /= K'Hy; rewrite inE.",
                        "VernacExtend",
                        "9acd87f7a4a9fdbfb49e51ab17c069b90ad3194d"
                    ]
                },
                {
                    "command": [
                        "apply/morphpreP; split; first by rewrite acts_qact_dom_norm.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by move/gastabsP: nx; move/(_ qdx (coset H y)); rewrite K'Hy qactE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "qacts_coset",
            "line_nb": 189,
            "steps": [
                {
                    "command": [
                        "move=> sHD aK.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "apply/subsetP=> x qdx; rewrite inE qdx inE; apply/subsetP=> y.",
                        "VernacExtend",
                        "da24caf87c1bbbad0538b8be68905ec456c78aa7"
                    ]
                },
                {
                    "command": [
                        "case/morphimP=> z Nz Kz /= e; rewrite e inE qactE // mem_imset // inE.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "move/gactsP: aK; move/(_ x (subsetP (qact_dom_doms sHD) _ qdx) z); rewrite Kz.",
                        "VernacExtend",
                        "ea0cb90c655c5664c1e4bd5e8281f3783b29707c"
                    ]
                },
                {
                    "command": [
                        "move->; move/acts_act: (acts_qact_dom to H); move/(_ x qdx z).",
                        "VernacExtend",
                        "3410686af1067cc9bb673c993c2ceed9d75b72ad"
                    ]
                },
                {
                    "command": [
                        "by rewrite Nz andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxainv_norm",
            "line_nb": 205,
            "steps": [
                {
                    "command": [
                        "by move/maxgroupp; case/andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxainv_proper",
            "line_nb": 208,
            "steps": [
                {
                    "command": [
                        "by move/maxgroupp; case/andP; rewrite properE; move/normal_sub->; case/andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxainv_sub",
            "line_nb": 211,
            "steps": [
                {
                    "command": [
                        "by move=> h; apply: proper_sub; apply: maxainv_proper.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxainv_ainvar",
            "line_nb": 214,
            "steps": [
                {
                    "command": [
                        "by move/maxgroupp; case/and3P.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxainvS",
            "line_nb": 217,
            "steps": [
                {
                    "command": [
                        "by move=> pNN; rewrite proper_sub // maxainv_proper.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "acompsP",
            "line_nb": 264,
            "steps": [
                {
                    "command": [
                        "by apply: (iffP andP); case; move/eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "acomps_cons",
            "line_nb": 273,
            "steps": [
                {
                    "command": [
                        "by case/andP => /= ls; case/andP=> _ p; rewrite /acomps ls.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exists_acomps",
            "line_nb": 288,
            "steps": [
                {
                    "command": [
                        "elim: {K} #|K| {1 3}K (leqnn #|K|) => [K | n Hi K cK].",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by rewrite leqNgt cardG_gt0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case/orP: (orbN (asimple K)) => [sK | nsK].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by exists [:: (1%G : {group rT})]; rewrite /acomps eqxx /= andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case/orP: (orbN (K :==: 1))=> [tK | ntK].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by exists (Nil _); rewrite /acomps /= andbT.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: (maxainv_exists ntK)=> N pmN.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "have cN: #|N| <= n.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite -ltnS (leq_trans _ cK) // proper_card // (maxainv_proper pmN).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: (Hi _ cN)=> s; case/andP=> lasts ps; exists [:: N & s]; rewrite /acomps.",
                        "VernacExtend",
                        "f8310b3fbfe604f5fbe5cb7077c74bfdc74c6593"
                    ]
                },
                {
                    "command": [
                        "by rewrite last_cons lasts /= pmN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxainv_asimple_quo",
            "line_nb": 308,
            "steps": [
                {
                    "command": [
                        "move=> sHD /maxgroupP[/and3P[nHG pHG aH] Hmax].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "apply/asimpleP; split; first by rewrite -subG1 quotient_sub1 ?normal_norm.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "move=> K' nK'Q aK'.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "have: (K' \\proper (G / H)) || (G / H == K').",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite properE eqEsubset andbC (normal_sub nK'Q) !andbT orbC orbN.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case/orP=> [ pHQ | eQH]; last by right; apply sym_eq; apply/eqP.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "left; pose K := ((coset H) @*^-1 K')%G.",
                        "VernacExtend",
                        "cc233b9097cc781008d3eaea56a8683eeb876450"
                    ]
                },
                {
                    "command": [
                        "have eK'I : K' \\subset (coset H) @* 'N(H).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite (subset_trans (normal_sub nK'Q)) ?morphimS ?normal_norm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have eKK' : K' :=: K / H by rewrite /(K / H) morphpreK //=.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "suff eKH : K :=: H by rewrite -trivg_quotient eKK' eKH.",
                        "VernacExtend",
                        "d07fc8b2103f140554938023774bf3f75d04ba99"
                    ]
                },
                {
                    "command": [
                        "have sHK : H \\subset K by rewrite -ker_coset kerE morphpreS // sub1set group1.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply: Hmax => //; apply/and3P; split; last exact: qacts_cosetpre.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(quotientGK nHG) cosetpre_normal.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by move: (proper_subn pHQ); rewrite sub_morphim_pre ?normal_norm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "asimple_quo_maxainv",
            "line_nb": 325,
            "steps": [
                {
                    "command": [
                        "move=> sHD sGD aG aH nHG /asimpleP[ntQ maxQ]; apply/maxgroupP; split.",
                        "VernacExtend",
                        "89e3928646f39f87d3d1ec5d5a9ade07748b7d90"
                    ]
                },
                {
                    "command": [
                        "by rewrite nHG -quotient_sub1 ?normal_norm // subG1 ntQ.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move=> K /and3P[nKG nsGK aK] sHK.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "pose K' := (K / H)%G.",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have K'dQ : K' <| (G / H)%G by apply: morphim_normal.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have nKH : H <| K by rewrite (normalS _ _ nHG) // normal_sub.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have: K' :=: 1%G \\/ K' :=: (G / H).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply: (maxQ K' K'dQ) => /=.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "apply/subsetP=> x Adx.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "rewrite inE Adx /= inE.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply/subsetP=> y.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "rewrite quotientE; case/morphimP=> z Nz Kz ->; rewrite /= !inE qactE //.",
                        "VernacExtend",
                        "1dc1cec635c64f0cc3ec64ea6e4d6c7d5b8f81f6"
                    ]
                },
                {
                    "command": [
                        "have ntoyx : to z x \\in 'N(H) by rewrite (acts_qact_dom_norm Adx).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/morphimP; exists (to z x) => //.",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "suff h: qact_dom to H \\subset A.",
                        "VernacExtend",
                        "d07fc8b2103f140554938023774bf3f75d04ba99"
                    ]
                },
                {
                    "command": [
                        "by rewrite astabs_act // (subsetP aK) //; apply: (subsetP h).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply/subsetP=> t; rewrite qact_domE // inE; case/andP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "move/quotient_injG; rewrite !inE /=; move/(_ nKH nHG)=> c; move: nsGK.",
                        "VernacExtend",
                        "080620bae7a4e6b29a6ac139f4f252d631fa7376"
                    ]
                },
                {
                    "command": [
                        "by rewrite c subxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite /= -trivg_quotient => tK'; apply: (congr1 (@gval _)); move: tK'.",
                        "VernacExtend",
                        "5e8c001930445b402eabf7fc558c7bc173d75ae3"
                    ]
                },
                {
                    "command": [
                        "by apply: (@quotient_injG _ H); rewrite ?inE /= ?normal_refl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}