{
    "filename": "mathcomp/solvable/maximal.v",
    "coq_project": "math-comp",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrbool ssrfun eqtype ssrnat seq choice div fintype.",
            "VernacRequire",
            "694ef0e2c450809009f455a7b8c06c47e15152dd"
        ],
        [
            "From mathcomp Require Import finfun bigop finset prime binomial fingroup morphism perm.",
            "VernacRequire",
            "1f59381b43bed27f0a349042703869a87646b636"
        ],
        [
            "From mathcomp Require Import automorphism quotient action commutator gproduct gfunctor.",
            "VernacRequire",
            "82205195e01eb01d7dbee23e7f7abc5891f67d6b"
        ],
        [
            "From mathcomp Require Import ssralg finalg zmodp cyclic pgroup center gseries.",
            "VernacRequire",
            "2cb31237a181f66654cea3ad0bc4cbb449596214"
        ],
        [
            "From mathcomp Require Import nilpotent sylow abelian finmodule.",
            "VernacRequire",
            "97537202cc183b2fcd2b411f0f9c44b1eae202ae"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Import GroupScope.",
            "VernacImport",
            "89fd18b7dcbcc46edcd02262df11c799856485fc"
        ],
        [
            "Section Defs.",
            "VernacBeginSection",
            "0538f5188d53d77ea5d8ba0fff0a7cfc5485e666"
        ],
        [
            "Variable gT : finGroupType.",
            "VernacAssumption",
            "694477e88f23a3b7d6edaa9ed9d49ebe1ee92aa6"
        ],
        [
            "Implicit Types (A B D : {set gT}) (G : {group gT}).",
            "VernacReserve",
            "3d98f2e31c1fc81c0c19f934c4a5e13a4443fb8f"
        ],
        [
            "Definition charsimple A := [min A of G | G :!=: 1 & G \\char A].",
            "VernacDefinition",
            "113860bd382cae92a3e596e4147eb5d2b7655d77"
        ],
        [
            "Definition Frattini A := \\bigcap_(G : {group gT} | maximal_eq G A) G.",
            "VernacDefinition",
            "1e2b5c79867f52dc8b5c0c7ba60e58bbde7f6c2d"
        ],
        [
            "Canonical Frattini_group A : {group gT} := Eval hnf in [group of Frattini A].",
            "VernacDefinition",
            "a0e1fa2f4515c07c3179ef6e5b96a49f0c7928db"
        ],
        [
            "Definition Fitting A := \\big[dprod/1]_(p <- primes #|A|) 'O_p(A).",
            "VernacDefinition",
            "932ae2d3a7c98f2330ed3c51bc75dc912d8e5a29"
        ],
        [
            "Lemma Fitting_group_set G : group_set (Fitting G).",
            "VernacStartTheoremProof",
            "31664f1f40d4a28de3ffc8eb335953279131f871"
        ],
        [
            "suffices [F ->]: exists F : {group gT}, Fitting G = F by apply: groupP.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "rewrite /Fitting; elim: primes (primes_uniq #|G|) => [_|p r IHr] /=.",
            "VernacExtend",
            "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
        ],
        [
            "by exists [1 gT]%G; rewrite big_nil.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/andP=> rp /IHr[F defF]; rewrite big_cons defF.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "suffices{IHr} /and3P[p'F sFG nFG]: p^'.-group F && (F <| G).",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "have nFGp: 'O_p(G) \\subset 'N(F) := gFsub_trans _ nFG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have pGp: p.-group('O_p(G)) := pcore_pgroup p G.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{pGp} tiGpF: 'O_p(G) :&: F = 1 by rewrite coprime_TIg ?(pnat_coprime pGp).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists ('O_p(G) <*> F)%G; rewrite dprodEY // (sameP commG1P trivgP) -tiGpF.",
            "VernacExtend",
            "2c1d6d88006c874ea88e33b5c1d1f8df7afea149"
        ],
        [
            "by rewrite subsetI commg_subl commg_subr (subset_trans sFG) // gFnorm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move/bigdprodWY: defF => <- {F}; elim: r rp => [_|q r IHr] /=.",
            "VernacExtend",
            "06880003f1108b2eb418688c7bc6bf1013cf0e4c"
        ],
        [
            "by rewrite big_nil gen0 pgroup1 normal1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite inE eq_sym big_cons -joingE -joing_idr => /norP[qp /IHr {IHr}].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "set F := <<_>> => /andP[p'F nsFG].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite norm_joinEl /= -/F; last exact/gFsub_trans/normal_norm.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite pgroupM p'F normalM ?pcore_normal //= (pi_pgroup (pcore_pgroup q G)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Fitting_group G := group (Fitting_group_set G).",
            "VernacDefinition",
            "b18bb3ff3a75781cbcd73e721a566ec66d296c1d"
        ],
        [
            "Definition critical A B := [/\\ A \\char B, Frattini A \\subset 'Z(A), [~: B, A] \\subset 'Z(A) & 'C_B(A) = 'Z(A)].",
            "VernacDefinition",
            "afee2e25451806037ce569fd4ad8957548bcaa12"
        ],
        [
            "Definition special A := Frattini A = 'Z(A) /\\ A^`(1) = 'Z(A).",
            "VernacDefinition",
            "c01f7c07c64d33d99cf30f30aa14c9226c153b52"
        ],
        [
            "Definition extraspecial A := special A /\\ prime #|'Z(A)|.",
            "VernacDefinition",
            "d3278f728d28e613d140a1620a6fa6ca55bb146a"
        ],
        [
            "Definition SCN B := [set A : {group gT} | A <| B & 'C_B(A) == A].",
            "VernacDefinition",
            "8b137b2b39722cf61261de67cf20c0387dc7e47c"
        ],
        [
            "Definition SCN_at n B := [set A in SCN B | n <= 'r(A)].",
            "VernacDefinition",
            "92afbf53bc77d571676aa5271e567faa8b56f76e"
        ],
        [
            "End Defs.",
            "VernacEndSegment",
            "e5c42fff3384ffa717a0ec819d3b7eaff5043179"
        ],
        [
            "Arguments charsimple {gT} A%g.",
            "VernacArguments",
            "f82f5d0eaf29fff346c0d9668f6c68a8a01735af"
        ],
        [
            "Arguments Frattini {gT} A%g.",
            "VernacArguments",
            "f4edcd70f4246a6dd63e4c28222058c3f1b7ae2d"
        ],
        [
            "Arguments Fitting {gT} A%g.",
            "VernacArguments",
            "3e287b48e9ccb9064628ab738ddf1f885486def9"
        ],
        [
            "Arguments critical {gT} A%g B%g.",
            "VernacArguments",
            "76b17fd52636825a9f8e7957263d07b54ebb8875"
        ],
        [
            "Arguments special {gT} A%g.",
            "VernacArguments",
            "fead44bc55b5e29f8101f32957baea5d494d7d8f"
        ],
        [
            "Arguments extraspecial {gT} A%g.",
            "VernacArguments",
            "18f4baf9d83b1b24d58b3dc8fe7c3be2bb36b086"
        ],
        [
            "Arguments SCN {gT} B%g.",
            "VernacArguments",
            "0a480531a7066f567d2b21a1193f6554b2c08b78"
        ],
        [
            "Arguments SCN_at {gT} n%N B%g.",
            "VernacArguments",
            "4e054761a4dbf5ab7eb4a94a3150f50078c1a9da"
        ],
        [
            "Notation \"''Phi' ( A )\" := (Frattini A) (at level 8, format \"''Phi' ( A )\") : group_scope.",
            "VernacNotation",
            "3343fdcccc221c954bae1087204960524a961248"
        ],
        [
            "Notation \"''Phi' ( G )\" := (Frattini_group G) : Group_scope.",
            "VernacNotation",
            "2aa80dc17792452830343b7d9894ee6160b56cb3"
        ],
        [
            "Notation \"''F' ( G )\" := (Fitting G) (at level 8, format \"''F' ( G )\") : group_scope.",
            "VernacNotation",
            "f14c0e26a5f32098d198ec0b964e69da935ea23a"
        ],
        [
            "Notation \"''F' ( G )\" := (Fitting_group G) : Group_scope.",
            "VernacNotation",
            "6c1d7ce71fc8f921ead519ebf7a5de85e48654de"
        ],
        [
            "Notation \"''SCN' ( B )\" := (SCN B) (at level 8, format \"''SCN' ( B )\") : group_scope.",
            "VernacNotation",
            "1839cd652095976311fc10914c0f1efe96d86186"
        ],
        [
            "Notation \"''SCN_' n ( B )\" := (SCN_at n B) (at level 8, n at level 2, format \"''SCN_' n ( B )\") : group_scope.",
            "VernacNotation",
            "b29e231ae9573624e140804590781cac6d36a2c1"
        ],
        [
            "Section PMax.",
            "VernacBeginSection",
            "f63d02aeb589eb984cf3cb29f708b16a3ece8811"
        ],
        [
            "Variables (gT : finGroupType) (p : nat) (P M : {group gT}).",
            "VernacAssumption",
            "b9ebb19a3f4f6a6d7356fd644995dbf720782f67"
        ],
        [
            "Hypothesis pP : p.-group P.",
            "VernacAssumption",
            "e7d8c2615141ecade4388099c2311d1fa062ab68"
        ],
        [
            "Lemma p_maximal_normal : maximal M P -> M <| P.",
            "VernacStartTheoremProof",
            "e69d4da7cb27b3560ee91b76e594b8dfd8a10e45"
        ],
        [
            "case/maxgroupP=> /andP[sMP sPM] maxM; rewrite /normal sMP.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "have:= subsetIl P 'N(M); rewrite subEproper.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "case/predU1P=> [/setIidPl-> // | /maxM/= SNM]; case/negP: sPM.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "rewrite (nilpotent_sub_norm (pgroup_nil pP) sMP) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite SNM // subsetI sMP normG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma p_maximal_index : maximal M P -> #|P : M| = p.",
            "VernacStartTheoremProof",
            "ca2e1f58d7867bd80a912c33b5b4c9e176511f4e"
        ],
        [
            "move=> maxM; have nM := p_maximal_normal maxM.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "rewrite -card_quotient ?normal_norm //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -(quotient_maximal _ nM) ?normal_refl // trivg_quotient in maxM.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case/maxgroupP: maxM; rewrite properEneq eq_sym sub1G andbT /=.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "case/(pgroup_pdiv (quotient_pgroup M pP)) => p_pr /Cauchy[] // xq.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite /order -cycle_subG subEproper => /predU1P[-> // | sxPq oxq_p _].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "by move/(_ _ sxPq (sub1G _)) => xq1; rewrite -oxq_p xq1 cards1 in p_pr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma p_index_maximal : M \\subset P -> prime #|P : M| -> maximal M P.",
            "VernacStartTheoremProof",
            "33d0273672908536fe807d75b440be6b2602eea3"
        ],
        [
            "move=> sMP /primeP[lt1PM pr_PM].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply/maxgroupP; rewrite properEcard sMP -(Lagrange sMP).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite -{1}(muln1 #|M|) ltn_pmul2l //; split=> // H sHP sMH.",
            "VernacExtend",
            "80e7cce19c53eb5d5a21aafd83e552d37e23084a"
        ],
        [
            "apply/eqP; rewrite eq_sym eqEcard sMH.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "case/orP: (pr_PM _ (indexSg sMH (proper_sub sHP))) => /eqP iM.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite -(Lagrange sMH) iM muln1 /=.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by have:= proper_card sHP; rewrite -(Lagrange sMH) iM Lagrange ?ltnn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End PMax.",
            "VernacEndSegment",
            "85bba528939b7c2c5787d3455cfd9d1bf365cc39"
        ],
        [
            "Section Frattini.",
            "VernacBeginSection",
            "ec16375429fa4cefa9768fc413f56bab5210c712"
        ],
        [
            "Variables gT : finGroupType.",
            "VernacAssumption",
            "694477e88f23a3b7d6edaa9ed9d49ebe1ee92aa6"
        ],
        [
            "Implicit Type G M : {group gT}.",
            "VernacReserve",
            "9ac960f61ded8d3d9137c346f6557100261053b0"
        ],
        [
            "Lemma Phi_sub G : 'Phi(G) \\subset G.",
            "VernacStartTheoremProof",
            "604dcdf3754554ef6ddc62bb083eb8b4d4f97d49"
        ],
        [
            "by rewrite bigcap_inf // /maximal_eq eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Phi_sub_max G M : maximal M G -> 'Phi(G) \\subset M.",
            "VernacStartTheoremProof",
            "b1d000dfc87c89550d5b7b5797e1731f47c44416"
        ],
        [
            "by move=> maxM; rewrite bigcap_inf // /maximal_eq predU1r.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Phi_proper G : G :!=: 1 -> 'Phi(G) \\proper G.",
            "VernacStartTheoremProof",
            "d5a246de0702dd160debfea93f8077a900f41ada"
        ],
        [
            "move/eqP; case/maximal_exists: (sub1G G) => [<- //| [M maxM _] _].",
            "VernacExtend",
            "a01b3d93f426ff68d360351709a5fa5af822af32"
        ],
        [
            "exact: sub_proper_trans (Phi_sub_max maxM) (maxgroupp maxM).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Phi_nongen G X : 'Phi(G) <*> X = G -> <<X>> = G.",
            "VernacStartTheoremProof",
            "c3e6ffd40601190b4fc98d745be12ac1baad6088"
        ],
        [
            "move=> defG; have: <<X>> \\subset G by rewrite -{1}defG genS ?subsetUr.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "case/maximal_exists=> //= [[M maxM]]; rewrite gen_subG => sXM.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "case/andP: (maxgroupp maxM) => _ /negP[].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite -defG gen_subG subUset Phi_sub_max.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Frattini_continuous (rT : finGroupType) G (f : {morphism G >-> rT}) : f @* 'Phi(G) \\subset 'Phi(f @* G).",
            "VernacStartTheoremProof",
            "bec6b579062a74448c4dc9a87f1ba80518b925d3"
        ],
        [
            "apply/bigcapsP=> M maxM; rewrite sub_morphim_pre ?Phi_sub // bigcap_inf //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "have {2}<-: f @*^-1 (f @* G) = G by rewrite morphimGK ?subsetIl.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite morphpre_maximal_eq ?maxM //; case/maximal_eqP: maxM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Frattini.",
            "VernacEndSegment",
            "a83b19455321436f61150bea0334e6d14c4ba593"
        ],
        [
            "Canonical Frattini_igFun := [igFun by Phi_sub & Frattini_continuous].",
            "VernacDefinition",
            "9c8b26ff348e5d6613c4ea9bca0579be04f76520"
        ],
        [
            "Canonical Frattini_gFun := [gFun by Frattini_continuous].",
            "VernacDefinition",
            "857133bd3914b23d361ef7ca79da5ee15b4a4487"
        ],
        [
            "Section Frattini0.",
            "VernacBeginSection",
            "8821c1798fb17c0f29ca6ea561da2374ef6af43c"
        ],
        [
            "Variable gT : finGroupType.",
            "VernacAssumption",
            "694477e88f23a3b7d6edaa9ed9d49ebe1ee92aa6"
        ],
        [
            "Implicit Types (rT : finGroupType) (D G : {group gT}).",
            "VernacReserve",
            "4d89e0ef05554f4ecd80a0b0abd7ffbce55a5eb1"
        ],
        [
            "Lemma Phi_char G : 'Phi(G) \\char G.",
            "VernacStartTheoremProof",
            "becc9caf685c9500bae108ab4c05044a49635f32"
        ],
        [
            "exact: gFchar.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Phi_normal G : 'Phi(G) <| G.",
            "VernacStartTheoremProof",
            "42ff490896e27126dca0d8e3ad1747eb28629d04"
        ],
        [
            "exact: gFnormal.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma injm_Phi rT D G (f : {morphism D >-> rT}) : 'injm f -> G \\subset D -> f @* 'Phi(G) = 'Phi(f @* G).",
            "VernacStartTheoremProof",
            "6e369dd51c2dc05afd11fcb9eed790e58221de28"
        ],
        [
            "exact: injmF.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma isog_Phi rT G (H : {group rT}) : G \\isog H -> 'Phi(G) \\isog 'Phi(H).",
            "VernacStartTheoremProof",
            "88d9c44610ebaba50b3d794a4855b250a05eb068"
        ],
        [
            "exact: gFisog.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma PhiJ G x : 'Phi(G :^ x) = 'Phi(G) :^ x.",
            "VernacStartTheoremProof",
            "930b352b5926eb47bf53f502508d8adc58162f9c"
        ],
        [
            "rewrite -{1}(setIid G) -(setIidPr (Phi_sub G)) -!morphim_conj.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite injm_Phi ?injm_conj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Frattini0.",
            "VernacEndSegment",
            "5ad703c1bbf0c36df1e85381c994e157ed1feab5"
        ],
        [
            "Section Frattini2.",
            "VernacBeginSection",
            "5afaad2cc52495feb34674f4a57e0222a2228b00"
        ],
        [
            "Variables gT : finGroupType.",
            "VernacAssumption",
            "694477e88f23a3b7d6edaa9ed9d49ebe1ee92aa6"
        ],
        [
            "Implicit Type G : {group gT}.",
            "VernacReserve",
            "69191693445dc2dbe8fdddf7d73e414747afe899"
        ],
        [
            "Lemma Phi_quotient_id G : 'Phi (G / 'Phi(G)) = 1.",
            "VernacStartTheoremProof",
            "c10ecdfcde8171dd0434c9e980dcfc850e9f65fc"
        ],
        [
            "apply/trivgP; rewrite -cosetpreSK cosetpre1 /=; apply/bigcapsP=> M maxM.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "have nPhi := Phi_normal G; have nPhiM: 'Phi(G) <| M.",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "by apply: normalS nPhi; [apply: bigcap_inf | case/maximal_eqP: maxM].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite sub_cosetpre_quo ?bigcap_inf // quotient_maximal_eq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Phi_quotient_cyclic G : cyclic (G / 'Phi(G)) -> cyclic G.",
            "VernacStartTheoremProof",
            "291cc9122783f0b84875bd1977e624fa71f9875c"
        ],
        [
            "case/cyclicP=> /= Px; case: (cosetP Px) => x nPx ->{Px} defG.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "apply/cyclicP; exists x; symmetry; apply: Phi_nongen.",
            "VernacExtend",
            "e1715d49e9fffe48b0d62703c25f0960690eae4c"
        ],
        [
            "rewrite -joing_idr norm_joinEr -?quotientK ?cycle_subG //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite /quotient morphim_cycle //= -defG quotientGK ?Phi_normal.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variables (p : nat) (P : {group gT}).",
            "VernacAssumption",
            "1f1c9ced24b40ced1739d1c1ac13480eaf8f1c26"
        ],
        [
            "Lemma trivg_Phi : p.-group P -> ('Phi(P) == 1) = p.-abelem P.",
            "VernacStartTheoremProof",
            "78483b221fc20fa648c3b759443b5fe58c82c2ab"
        ],
        [
            "move=> pP; case: (eqsVneq P 1) => [P1 | ntP].",
            "VernacExtend",
            "a01b3d93f426ff68d360351709a5fa5af822af32"
        ],
        [
            "by rewrite P1 abelem1 -subG1 -P1 Phi_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [p_pr _ _] := pgroup_pdiv pP ntP.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/eqP/idP=> [trPhi | abP].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "apply/abelemP=> //; split=> [|x Px].",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "apply/commG1P/trivgP; rewrite -trPhi.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply/bigcapsP=> M /predU1P[-> | maxM]; first exact: der1_subG.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have /andP[_ nMP]: M <| P := p_maximal_normal pP maxM.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite der1_min // cyclic_abelian // prime_cyclic // card_quotient //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (p_maximal_index pP).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/set1gP; rewrite -trPhi; apply/bigcapP=> M.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "case/predU1P=> [-> | maxM]; first exact: groupX.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have /andP[_ nMP] := p_maximal_normal pP maxM.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have nMx : x \\in 'N(M) by apply: subsetP Px.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: coset_idr; rewrite ?groupX ?morphX //=; apply/eqP.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "rewrite -(p_maximal_index pP maxM) -card_quotient // -order_dvdn cardSg //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite cycle_subG mem_quotient.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/trivgP/subsetP=> x Phi_x; rewrite -cycle_subG.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "have Px: x \\in P by apply: (subsetP (Phi_sub P)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sxP: <[x]> \\subset P by rewrite cycle_subG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case/splitsP: (abelem_splits abP sxP) => K /complP[tiKx defP].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have [-> | nt_x] := eqVneq x 1; first by rewrite cycle1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have oxp := abelem_order_p abP Px nt_x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /= -tiKx subsetI subxx cycle_subG.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: (bigcapP Phi_x); apply/orP; right.",
            "VernacExtend",
            "593d17cf4f8bee7a82be0ea12d06fc5124af425a"
        ],
        [
            "apply: p_index_maximal; rewrite -?divgS -defP ?mulG_subr //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite (TI_cardMg tiKx) mulnK // [#|_|]oxp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Frattini2.",
            "VernacEndSegment",
            "a5d440459814807796ce10fdca5f834dcecd0bf7"
        ],
        [
            "Section Frattini3.",
            "VernacBeginSection",
            "dcbc6e7414df7cbdcd858675260d39fb325c39f9"
        ],
        [
            "Variables (gT : finGroupType) (p : nat) (P : {group gT}).",
            "VernacAssumption",
            "6050f46426e867e641b75a2ec8e819ca0b4bc72d"
        ],
        [
            "Hypothesis pP : p.-group P.",
            "VernacAssumption",
            "e7d8c2615141ecade4388099c2311d1fa062ab68"
        ],
        [
            "Lemma Phi_quotient_abelem : p.-abelem (P / 'Phi(P)).",
            "VernacStartTheoremProof",
            "b29eb6bf1a77ea590f9b96e515cb109ef14f7f6b"
        ],
        [
            "by rewrite -trivg_Phi ?morphim_pgroup //= Phi_quotient_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Phi_joing : 'Phi(P) = P^`(1) <*> 'Mho^1(P).",
            "VernacStartTheoremProof",
            "d76262101862ad91357cda3b924311cac0740254"
        ],
        [
            "have [sPhiP nPhiP] := andP (Phi_normal P).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/eqP; rewrite eqEsubset join_subG.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "case: (eqsVneq P 1) => [-> | ntP] in sPhiP *.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite /= (trivgP sPhiP) sub1G der_subS Mho_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [p_pr _ _] := pgroup_pdiv pP ntP.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [abP x1P] := abelemP p_pr Phi_quotient_abelem.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/andP; split.",
            "VernacExtend",
            "b146763f64aeff143afb9ba1b7b1a677b4726e0f"
        ],
        [
            "have nMP: P \\subset 'N(P^`(1) <*> 'Mho^1(P)) by rewrite normsY // !gFnorm.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -quotient_sub1 ?gFsub_trans //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "suffices <-: 'Phi(P / (P^`(1) <*> 'Mho^1(P))) = 1 by apply: morphimF.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "apply/eqP; rewrite (trivg_Phi (morphim_pgroup _ pP)) /= -quotientE.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply/abelemP=> //; rewrite [abelian _]quotient_cents2 ?joing_subl //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "split=> // _ /morphimP[x Nx Px ->] /=.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite -morphX //= coset_id // (MhoE 1 pP) joing_idr expn1.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite mem_gen //; apply/setUP; right; apply: mem_imset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -quotient_cents2 // [_ \\subset 'C(_)]abP (MhoE 1 pP) gen_subG /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/subsetP=> _ /imsetP[x Px ->]; rewrite expn1.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "have nPhi_x: x \\in 'N('Phi(P)) by apply: (subsetP nPhiP).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite coset_idr ?groupX ?morphX ?x1P ?mem_morphim.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Phi_Mho : abelian P -> 'Phi(P) = 'Mho^1(P).",
            "VernacStartTheoremProof",
            "da921ccbdff4de25e244cc20919098db85ee9267"
        ],
        [
            "by move=> cPP; rewrite Phi_joing (derG1P cPP) joing1G.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Frattini3.",
            "VernacEndSegment",
            "48bbe77f33114d146151e95399f0d9a153a54268"
        ],
        [
            "Section Frattini4.",
            "VernacBeginSection",
            "c4e0e613b45afa31c48e37c234b583119a1a1667"
        ],
        [
            "Variables (p : nat) (gT : finGroupType).",
            "VernacAssumption",
            "24f97fa2feb8b9271e5253bb29c759a412a08495"
        ],
        [
            "Implicit Types (rT : finGroupType) (P G H K D : {group gT}).",
            "VernacReserve",
            "cb0cd6102ae4e9368372fb7003b4c42bdee753bb"
        ],
        [
            "Lemma PhiS G H : p.-group H -> G \\subset H -> 'Phi(G) \\subset 'Phi(H).",
            "VernacStartTheoremProof",
            "d20ffc287d441fc07af3f0c0569ba71c2472639e"
        ],
        [
            "move=> pH sGH; rewrite (Phi_joing pH) (Phi_joing (pgroupS sGH pH)).",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite genS // setUSS ?dergS ?MhoS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma morphim_Phi rT P D (f : {morphism D >-> rT}) : p.-group P -> P \\subset D -> f @* 'Phi(P) = 'Phi(f @* P).",
            "VernacStartTheoremProof",
            "12da9148a648bc13015ce43a32cf097182c103cb"
        ],
        [
            "move=> pP sPD; rewrite !(@Phi_joing _ p) ?morphim_pgroup //.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "rewrite morphim_gen ?subUset ?gFsub_trans // morphimU -joingE.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite morphimR ?morphim_Mho.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma quotient_Phi P H : p.-group P -> P \\subset 'N(H) -> 'Phi(P) / H = 'Phi(P / H).",
            "VernacStartTheoremProof",
            "5838022735643b0cb85c995b0148738bbee3626f"
        ],
        [
            "exact: morphim_Phi.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Phi_min G H : p.-group G -> G \\subset 'N(H) -> p.-abelem (G / H) -> 'Phi(G) \\subset H.",
            "VernacStartTheoremProof",
            "9e4808eafb2eac8131624d1d01c0caed4cd104c1"
        ],
        [
            "move=> pG nHG; rewrite -trivg_Phi ?quotient_pgroup // -subG1 /=.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite -(quotient_Phi pG) ?quotient_sub1 // gFsub_trans.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Phi_cprod G H K : p.-group G -> H \\* K = G -> 'Phi(H) \\* 'Phi(K) = 'Phi(G).",
            "VernacStartTheoremProof",
            "9b1e85ad05582ab95ad7a22173ffa983d0af8508"
        ],
        [
            "move=> pG defG; have [_ /mulG_sub[sHG sKG] cHK] := cprodP defG.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "rewrite cprodEY /=; last by rewrite (centSS (Phi_sub _) (Phi_sub _)).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite !(Phi_joing (pgroupS _ pG)) //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have /cprodP[_ <- /cent_joinEr <-] := der_cprod 1 defG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /cprodP[_ <- /cent_joinEr <-] := Mho_cprod 1 defG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite !joingA /= -!(joingA H^`(1)) (joingC K^`(1)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Phi_mulg H K : p.-group H -> p.-group K -> K \\subset 'C(H) -> 'Phi(H * K) = 'Phi(H) * 'Phi(K).",
            "VernacStartTheoremProof",
            "d1e2a46de9fad962acb8e7f9ef9988b503f4b6d4"
        ],
        [
            "move=> pH pK cHK; have defHK := cprodEY cHK.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "have [|_ ->] /= := cprodP (Phi_cprod _ defHK); rewrite cent_joinEr //.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "by rewrite pgroupM pH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma charsimpleP G : reflect (G :!=: 1 /\\ forall K, K :!=: 1 -> K \\char G -> K :=: G) (charsimple G).",
            "VernacStartTheoremProof",
            "c54b8293f1f2ad5d82e35b2b5a69eb9bbc3fa29a"
        ],
        [
            "apply: (iffP mingroupP); rewrite char_refl andbT => -[ntG simG].",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "by split=> // K ntK chK; apply: simG; rewrite ?ntK // char_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by split=> // K /andP[ntK chK] _; apply: simG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Frattini4.",
            "VernacEndSegment",
            "829c5cb4ce713aef2c7ca36739e7a40506535ed1"
        ],
        [
            "Section Fitting.",
            "VernacBeginSection",
            "518b6c5b4944bb22e2417fd159acb15c72330d8f"
        ],
        [
            "Variable gT : finGroupType.",
            "VernacAssumption",
            "694477e88f23a3b7d6edaa9ed9d49ebe1ee92aa6"
        ],
        [
            "Implicit Types (p : nat) (G H : {group gT}).",
            "VernacReserve",
            "ae3d443dc7a2e4c40773277d73b93c125b55b1af"
        ],
        [
            "Lemma Fitting_normal G : 'F(G) <| G.",
            "VernacStartTheoremProof",
            "e7923bbe27272e8bb86bb01eeba613af1d16b8b8"
        ],
        [
            "rewrite -['F(G)](bigdprodWY (erefl 'F(G))).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "elim/big_rec: _ => [|p H _ nsHG]; first by rewrite gen0 normal1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -[<<_>>]joing_idr normalY ?pcore_normal.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Fitting_sub G : 'F(G) \\subset G.",
            "VernacStartTheoremProof",
            "6964065b542decd834b2e081ae7b9d3f0f49356a"
        ],
        [
            "by rewrite normal_sub ?Fitting_normal.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Fitting_nil G : nilpotent 'F(G).",
            "VernacStartTheoremProof",
            "411be7d51d673d41055200601ea3512509e601b8"
        ],
        [
            "apply: (bigdprod_nil (erefl 'F(G))) => p _.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "exact: pgroup_nil (pcore_pgroup p G).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Fitting_max G H : H <| G -> nilpotent H -> H \\subset 'F(G).",
            "VernacStartTheoremProof",
            "5487bf752d4acf72ec8b4b10d4b7c8f9ee1202cc"
        ],
        [
            "move=> nsHG nilH; rewrite -(Sylow_gen H) gen_subG.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "apply/bigcupsP=> P /SylowP[p _ sylP].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "case Gp: (p \\in \\pi(G)); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite card1_trivg ?sub1G // (card_Hall sylP).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite part_p'nat // (pnat_dvd (cardSg (normal_sub nsHG))) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite /pnat cardG_gt0 all_predC has_pred1 Gp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite {P sylP}(nilpotent_Hall_pcore nilH sylP).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -(bigdprodWY (erefl 'F(G))) sub_gen //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -(filter_pi_of (ltnSn _)) big_filter big_mkord.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: (bigcup_max (Sub p _)) => //= [|_].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by have:= Gp; rewrite ltnS mem_primes => /and3P[_ ntG /dvdn_leq->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite pcore_max ?pcore_pgroup ?gFnormal_trans.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pcore_Fitting pi G : 'O_pi('F(G)) \\subset 'O_pi(G).",
            "VernacStartTheoremProof",
            "eb25429f79fa2f0c155dcb8db60ffa86bd4126b3"
        ],
        [
            "by rewrite pcore_max ?pcore_pgroup ?gFnormal_trans ?Fitting_normal.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma p_core_Fitting p G : 'O_p('F(G)) = 'O_p(G).",
            "VernacStartTheoremProof",
            "38135d0ae4e356653221fe82fb2fbeddd48022c4"
        ],
        [
            "apply/eqP; rewrite eqEsubset pcore_Fitting pcore_max ?pcore_pgroup //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply: normalS (normal_sub (Fitting_normal _)) (pcore_normal _ _).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "exact: Fitting_max (pcore_normal _ _) (pgroup_nil (pcore_pgroup _ _)).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nilpotent_Fitting G : nilpotent G -> 'F(G) = G.",
            "VernacStartTheoremProof",
            "bbce54586030d92156b4f1c0d680f5eebd9dc765"
        ],
        [
            "by move=> nilG; apply/eqP; rewrite eqEsubset Fitting_sub Fitting_max.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Fitting_eq_pcore p G : 'O_p^'(G) = 1 -> 'F(G) = 'O_p(G).",
            "VernacStartTheoremProof",
            "163cfe68f2fe44b0e30df8545a02f53fc5375814"
        ],
        [
            "move=> p'G1; have /dprodP[_ /= <- _ _] := nilpotent_pcoreC p (Fitting_nil G).",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "by rewrite p_core_Fitting ['O_p^'(_)](trivgP _) ?mulg1 // -p'G1 pcore_Fitting.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma FittingEgen G : 'F(G) = <<\\bigcup_(p < #|G|.+1 | (p : nat) \\in \\pi(G)) 'O_p(G)>>.",
            "VernacStartTheoremProof",
            "83aa052b22a569bca694ae226c760036c6fcd688"
        ],
        [
            "apply/eqP; rewrite eqEsubset gen_subG /=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite -{1}(bigdprodWY (erefl 'F(G))) (big_nth 0) big_mkord genS.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/bigcupsP=> p _; rewrite -p_core_Fitting pcore_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/bigcupsP=> [[i /= lti]] _; set p := nth _ _ i.",
            "VernacExtend",
            "ac591433247162d5294d7c948ab3b309c2d6e368"
        ],
        [
            "have pi_p: p \\in \\pi(G) by rewrite mem_nth.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have p_dv_G: p %| #|G| by rewrite mem_primes in pi_p; case/and3P: pi_p.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have lepG: p < #|G|.+1 by rewrite ltnS dvdn_leq.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite (bigcup_max (Ordinal lepG)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Fitting.",
            "VernacEndSegment",
            "db4c3fe80fc4b7f699ccf320bf9d6d8c049e85c6"
        ],
        [
            "Section FittingFun.",
            "VernacBeginSection",
            "226e5569c58351a6f4ed45b79d089df1c4cb2068"
        ],
        [
            "Implicit Types gT rT : finGroupType.",
            "VernacReserve",
            "a8f8cc577f5b1ea7d7ddc27aebbd738660947541"
        ],
        [
            "Lemma morphim_Fitting : GFunctor.pcontinuous (@Fitting).",
            "VernacStartTheoremProof",
            "271eb7db8ab734dba079d5ce960c6edea09a7a17"
        ],
        [
            "move=> gT rT G D f; apply: Fitting_max.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by rewrite morphim_normal ?Fitting_normal.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite morphim_nil ?Fitting_nil.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma FittingS gT (G H : {group gT}) : H \\subset G -> H :&: 'F(G) \\subset 'F(H).",
            "VernacStartTheoremProof",
            "f1495522348d148c064d1b60c9ded62c0a825788"
        ],
        [
            "move=> sHG; rewrite -{2}(setIidPl sHG).",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "do 2!rewrite -(morphim_idm (subsetIl H _)) morphimIdom; apply: morphim_Fitting.",
            "VernacExtend",
            "3b71ea6fefa1feeb046de1d53cd6239f33ef30eb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma FittingJ gT (G : {group gT}) x : 'F(G :^ x) = 'F(G) :^ x.",
            "VernacStartTheoremProof",
            "2a87936f25ac03198c78e2684bf5f1763396f4fd"
        ],
        [
            "rewrite !FittingEgen -genJ /= cardJg; symmetry; congr <<_>>.",
            "VernacExtend",
            "adc62f0d00062f8119bb170e5f3ec2be672d7f1e"
        ],
        [
            "rewrite (big_morph (conjugate^~ x) (fun A B => conjUg A B x) (imset0 _)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: eq_bigr => p _; rewrite pcoreJ.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End FittingFun.",
            "VernacEndSegment",
            "da0a30211703d35666de11e182b2c2370a507c64"
        ],
        [
            "Canonical Fitting_igFun := [igFun by Fitting_sub & morphim_Fitting].",
            "VernacDefinition",
            "b4ed25dffb43d8833cc73a39f4c194d5766a5690"
        ],
        [
            "Canonical Fitting_gFun := [gFun by morphim_Fitting].",
            "VernacDefinition",
            "2758d27fa5ce869788e44c9d136424815d7abaf3"
        ],
        [
            "Canonical Fitting_pgFun := [pgFun by morphim_Fitting].",
            "VernacDefinition",
            "d8aa8809a312616b73e3ff262df433ddf4dd0b16"
        ],
        [
            "Section IsoFitting.",
            "VernacBeginSection",
            "a0d47f79ec64cac77742167689ec4774782964cf"
        ],
        [
            "Variables (gT rT : finGroupType) (G D : {group gT}) (f : {morphism D >-> rT}).",
            "VernacAssumption",
            "2e5a5011ca7eca0f3f83ec94f5582439204e5d52"
        ],
        [
            "Lemma Fitting_char : 'F(G) \\char G.",
            "VernacStartTheoremProof",
            "b28153224dbd5e6811a9ad4b1daaf90f9a408fb5"
        ],
        [
            "exact: gFchar.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma injm_Fitting : 'injm f -> G \\subset D -> f @* 'F(G) = 'F(f @* G).",
            "VernacStartTheoremProof",
            "9e597fb6be15aeff97d5deec4e1113670dc42414"
        ],
        [
            "exact: injmF.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma isog_Fitting (H : {group rT}) : G \\isog H -> 'F(G) \\isog 'F(H).",
            "VernacStartTheoremProof",
            "465ef6a7ff0a785ffcbe4435014e88f1e53827ec"
        ],
        [
            "exact: gFisog.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End IsoFitting.",
            "VernacEndSegment",
            "aa309f443f2aed3fdffd17dfc4c8f82ce67ee7a3"
        ],
        [
            "Section CharSimple.",
            "VernacBeginSection",
            "bc8a69dfc86b98bf279c00e2cc568d33abc646ef"
        ],
        [
            "Variable gT : finGroupType.",
            "VernacAssumption",
            "694477e88f23a3b7d6edaa9ed9d49ebe1ee92aa6"
        ],
        [
            "Implicit Types (rT : finGroupType) (G H K L : {group gT}) (p : nat).",
            "VernacReserve",
            "d6314c156480a1621eb56c5a986ce3a524402bc5"
        ],
        [
            "Lemma minnormal_charsimple G H : minnormal H G -> charsimple H.",
            "VernacStartTheoremProof",
            "7bc43091673ac50c2863124a7a98f4b6b4d87ffa"
        ],
        [
            "case/mingroupP=> /andP[ntH nHG] minH.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "apply/charsimpleP; split=> // K ntK chK.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "by apply: minH; rewrite ?ntK (char_sub chK, char_norm_trans chK).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxnormal_charsimple G H L : G <| L -> maxnormal H G L -> charsimple (G / H).",
            "VernacStartTheoremProof",
            "f7b4223d7b637a9dba4340f67f37874576e28f3d"
        ],
        [
            "case/andP=> sGL nGL /maxgroupP[/andP[/andP[sHG not_sGH] nHL] maxH].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have nHG: G \\subset 'N(H) := subset_trans sGL nHL.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/charsimpleP; rewrite -subG1 quotient_sub1 //; split=> // HK ntHK chHK.",
            "VernacExtend",
            "877072eca2b60ab32889d658e076eb026578eeca"
        ],
        [
            "case/(inv_quotientN _): (char_normal chHK) => [|K defHK sHK]; first exact/andP.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case/andP; rewrite subEproper defHK => /predU1P[-> // | ltKG] nKG.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "have nHK: H <| K by rewrite /normal sHK (subset_trans (proper_sub ltKG)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case/negP: ntHK; rewrite defHK -subG1 quotient_sub1 ?normal_norm //.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "rewrite (maxH K) // ltKG -(quotientGK nHK) -defHK norm_quotient_pre //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (char_norm_trans chHK) ?quotient_norms.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma abelem_split_dprod rT p (A B : {group rT}) : p.-abelem A -> B \\subset A -> exists C : {group rT}, B \\x C = A.",
            "VernacStartTheoremProof",
            "d2d29974cbf417d809b2df16f8e826eb598cbeed"
        ],
        [
            "move=> abelA sBA; have [_ cAA _]:= and3P abelA.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "case/splitsP: (abelem_splits abelA sBA) => C /complP[tiBC defA].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by exists C; rewrite dprodE // (centSS _ sBA cAA) // -defA mulG_subr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma p_abelem_split1 rT p (A : {group rT}) x : p.-abelem A -> x \\in A -> exists B : {group rT}, [/\\ B \\subset A, #|B| = #|A| %/ #[x] & <[x]> \\x B = A].",
            "VernacStartTheoremProof",
            "06d6d63434196d1c5a1c07bc5afd1071bb4583fb"
        ],
        [
            "move=> abelA Ax; have sxA: <[x]> \\subset A by rewrite cycle_subG.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "have [B defA] := abelem_split_dprod abelA sxA.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [_ defxB _ ti_xB] := dprodP defA.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sBA: B \\subset A by rewrite -defxB mulG_subr.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists B; split; rewrite // -defxB (TI_cardMg ti_xB) mulKn ?order_gt0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma abelem_charsimple p G : p.-abelem G -> G :!=: 1 -> charsimple G.",
            "VernacStartTheoremProof",
            "466decf3006d0a8bea7c64ad780c6621163f1a39"
        ],
        [
            "move=> abelG ntG; apply/charsimpleP; split=> // K ntK /charP[sKG chK].",
            "VernacExtend",
            "b7d55d5cc9e609b184db748f6780e12224901e48"
        ],
        [
            "case/eqVproper: sKG => // /properP[sKG [x Gx notKx]].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have ox := abelem_order_p abelG Gx (group1_contra notKx).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [A [sAG oA defA]] := p_abelem_split1 abelG Gx.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case/trivgPn: ntK => y Ky nty; have Gy := subsetP sKG y Ky.",
            "VernacExtend",
            "c6460972b7febd45d9a49b3c1ce4f3fe36b53169"
        ],
        [
            "have{nty} oy := abelem_order_p abelG Gy nty.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [B [sBG oB defB]] := p_abelem_split1 abelG Gy.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have: isog A B; last case/isogP=> fAB injAB defAB.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite (isog_abelem_card _ (abelemS sAG abelG)) (abelemS sBG) //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite oA oB ox oy.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have: isog <[x]> <[y]>; last case/isogP=> fxy injxy /= defxy.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite isog_cyclic_card ?cycle_cyclic // [#|_|]oy -ox eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have cfxA: fAB @* A \\subset 'C(fxy @* <[x]>).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite defAB defxy; case/dprodP: defB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have injf: 'injm (dprodm defA cfxA).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite injm_dprodm injAB injxy defAB defxy; apply/eqP; case/dprodP: defB.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/negP: notKx; rewrite -cycle_subG -(injmSK injf) ?cycle_subG //=.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "rewrite morphim_dprodml // defxy cycle_subG /= chK //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have [_ {4}<- _ _] := dprodP defB; have [_ {3}<- _ _] := dprodP defA.",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "by rewrite morphim_dprodm // defAB defxy.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma charsimple_dprod G : charsimple G -> exists H : {group gT}, [/\\ H \\subset G, simple H & exists2 I : {set {perm gT}}, I \\subset Aut G & \\big[dprod/1]_(f in I) f @: H = G].",
            "VernacStartTheoremProof",
            "a53a4daadb8ea17229eb54ba47e10bed48d2e0cf"
        ],
        [
            "case/charsimpleP=> ntG simG.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have [H minH sHG]: {H : {group gT} | minnormal H G & H \\subset G}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: mingroup_exists; rewrite ntG normG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/mingroupP: minH => /andP[ntH nHG] minH.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "pose Iok (I : {set {perm gT}}) := (I \\subset Aut G) && [exists (M : {group gT} | M <| G), \\big[dprod/1]_(f in I) f @: H == M].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have defH: (1 : {perm gT}) @: H = H.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/eqP; rewrite eqEcard card_imset ?leqnn; last exact: perm_inj.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite andbT; apply/subsetP=> _ /imsetP[x Hx ->]; rewrite perm1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [|I] := @maxset_exists _ Iok 1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /Iok sub1G; apply/existsP; exists H.",
            "VernacExtend",
            "93233472e9f38baaadf668b33c65196969a905a3"
        ],
        [
            "by rewrite /normal sHG nHG (big_pred1 1) => [|f]; rewrite ?defH /= ?inE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/maxsetP=> /andP[Aut_I /exists_eq_inP[M /andP[sMG nMG] defM]] maxI.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite sub1set=> ntI; case/eqVproper: sMG => [defG | /andP[sMG not_sGM]].",
            "VernacExtend",
            "4a95f82aca0fc9a50f43053eca44fc9141212abe"
        ],
        [
            "exists H; split=> //; last by exists I; rewrite ?defM.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/mingroupP; rewrite ntH normG; split=> // N /andP[ntN nNH] sNH.",
            "VernacExtend",
            "877072eca2b60ab32889d658e076eb026578eeca"
        ],
        [
            "apply: minH => //; rewrite ntN /= -defG.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "move: defM; rewrite (bigD1 1) //= defH; case/dprodP=> [[_ K _ ->] <- cHK _].",
            "VernacExtend",
            "d7214ac8fd48f4d1cd143edd9d16f6d28386a302"
        ],
        [
            "by rewrite mul_subG // cents_norm // (subset_trans cHK) ?centS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have defG: <<\\bigcup_(f in Aut G) f @: H>> = G.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sXG: \\bigcup_(f in Aut G) f @: H \\subset G.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/bigcupsP=> f Af; rewrite -(im_autm Af) morphimEdom imsetS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: simG.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "apply: contra ntH; rewrite -!subG1; apply: subset_trans.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "by rewrite sub_gen // (bigcup_max 1) ?group1 ?defH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite /characteristic gen_subG sXG; apply/forall_inP=> f Af.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite -(autmE Af) -morphimEsub ?gen_subG ?morphim_gen // genS //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite morphimEsub //= autmE.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/subsetP=> _ /imsetP[_ /bigcupP[g Ag /imsetP[x Hx ->]] ->].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "apply/bigcupP; exists (g * f); first exact: groupM.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/imsetP; exists x; rewrite // permM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [f Af sfHM]: exists2 f, f \\in Aut G & ~~ (f @: H \\subset M).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move: not_sGM; rewrite -{1}defG gen_subG; case/subsetPn=> x.",
            "VernacExtend",
            "d7214ac8fd48f4d1cd143edd9d16f6d28386a302"
        ],
        [
            "by case/bigcupP=> f Af fHx Mx; exists f => //; apply/subsetPn; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case If: (f \\in I).",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by case/negP: sfHM; rewrite -(bigdprodWY defM) sub_gen // (bigcup_max f).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/idP: (If); rewrite -(maxI ([set f] :|: I)) ?subsetUr ?inE ?eqxx //.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "rewrite {maxI}/Iok subUset sub1set Af {}Aut_I; apply/existsP.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "have sfHG: autm Af @* H \\subset G by rewrite -{4}(im_autm Af) morphimS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{minH nHG} /mingroupP[/andP[ntfH nfHG] minfH]: minnormal (autm Af @* H) G.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/mingroupP; rewrite andbC -{1}(im_autm Af) morphim_norms //=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite -subG1 sub_morphim_pre // -kerE ker_autm subG1.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "split=> // N /andP[ntN nNG] sNfH.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "have sNG: N \\subset G := subset_trans sNfH sfHG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/eqP; rewrite eqEsubset sNfH sub_morphim_pre //=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite -(morphim_invmE (injm_autm Af)) [_ @* N]minH //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -subG1 sub_morphim_pre /= ?im_autm // morphpre_invm morphim1 subG1.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite ntN -{1}(im_invm (injm_autm Af)) /= {2}im_autm morphim_norms.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite sub_morphim_pre /= ?im_autm // morphpre_invm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{minfH sfHM} tifHM: autm Af @* H :&: M = 1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/eqP/idPn=> ntMfH; case/setIidPl: sfHM.",
            "VernacExtend",
            "20ec428e50c31e1399aee62c5a532bc8417a4b29"
        ],
        [
            "rewrite -(autmE Af) -morphimEsub //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: minfH; rewrite ?subsetIl // ntMfH normsI.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have cfHM: M \\subset 'C(autm Af @* H).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite centsC (sameP commG1P trivgP) -tifHM subsetI commg_subl commg_subr.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (subset_trans sMG) // (subset_trans sfHG).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (autm Af @* H <*> M)%G; rewrite /normal /= join_subG sMG sfHG normsY //=.",
            "VernacExtend",
            "a63401d29bb31951e4a932c3078fffe24e044af1"
        ],
        [
            "rewrite (bigD1 f) ?inE ?eqxx // (eq_bigl (mem I)) /= => [|g]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite /= !inE andbC; case: eqP => // ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite defM -(autmE Af) -morphimEsub // dprodE // cent_joinEr ?eqxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma simple_sol_prime G : solvable G -> simple G -> prime #|G|.",
            "VernacStartTheoremProof",
            "1fcf185c9b4293260327aa407e25433351c1bc97"
        ],
        [
            "move=> solG /simpleP[ntG simG].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have{solG} cGG: abelian G.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/commG1P; case/simG: (der_normal 1 G) => // /eqP/idPn[].",
            "VernacExtend",
            "20ec428e50c31e1399aee62c5a532bc8417a4b29"
        ],
        [
            "by rewrite proper_neq // (sol_der1_proper solG).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: (trivgVpdiv G) ntG => [-> | [p p_pr]]; first by rewrite eqxx.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case/Cauchy=> // x Gx oxp _; move: p_pr; rewrite -oxp orderE.",
            "VernacExtend",
            "dfdf77d8d0d45996a42afec59fe3d2256fc04454"
        ],
        [
            "have: <[x]> <| G by rewrite -sub_abelian_normal ?cycle_subG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by case/simG=> -> //; rewrite cards1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma charsimple_solvable G : charsimple G -> solvable G -> is_abelem G.",
            "VernacStartTheoremProof",
            "e8b6c8be9d2dceb6e7b05d8ce7c47a585539824f"
        ],
        [
            "case/charsimple_dprod=> H [sHG simH [I Aut_I defG]] solG.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have p_pr: prime #|H| by apply: simple_sol_prime (solvableS sHG solG) simH.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "set p := #|H| in p_pr; apply/is_abelemP; exists p => //.",
            "VernacExtend",
            "e5fa4434dbc56b2bf2267c2977c99b02140c974e"
        ],
        [
            "elim/big_rec: _ (G) defG => [_ <-|f B If IH_B M defM]; first exact: abelem1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have [Af [[_ K _ defB] _ _ _]] := (subsetP Aut_I f If, dprodP defM).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (dprod_abelem p defM) defB IH_B // andbT -(autmE Af) -morphimEsub //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite morphim_abelem ?abelemE // exponent_dvdn.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite cyclic_abelian ?prime_cyclic.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma minnormal_solvable L G H : minnormal H L -> H \\subset G -> solvable G -> [/\\ L \\subset 'N(H), H :!=: 1 & is_abelem H].",
            "VernacStartTheoremProof",
            "4cf8cf9c39875188cd0c347b25c2e36cdd391728"
        ],
        [
            "move=> minH sHG solG; have /andP[ntH nHL] := mingroupp minH.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "split=> //; apply: (charsimple_solvable (minnormal_charsimple minH)).",
            "VernacExtend",
            "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
        ],
        [
            "exact: solvableS solG.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma solvable_norm_abelem L G : solvable G -> G <| L -> G :!=: 1 -> exists H : {group gT}, [/\\ H \\subset G, H <| L, H :!=: 1 & is_abelem H].",
            "VernacStartTheoremProof",
            "3ab6e942445ab2509543973a620640472ac53e30"
        ],
        [
            "move=> solG /andP[sGL nGL] ntG.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have [H minH sHG]: {H : {group gT} | minnormal H L & H \\subset G}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: mingroup_exists; rewrite ntG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [nHL ntH abH] := minnormal_solvable minH sHG solG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by exists H; split; rewrite // /normal (subset_trans sHG).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma trivg_Fitting G : solvable G -> ('F(G) == 1) = (G :==: 1).",
            "VernacStartTheoremProof",
            "4c628308a95735cdb30d9bf45359833bf86e2876"
        ],
        [
            "move=> solG; apply/idP/idP=> [F1 | /eqP->]; last by rewrite gF1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/idPn=> /(solvable_norm_abelem solG (normal_refl _))[M [_ nsMG ntM]].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "case/is_abelemP=> p _ /and3P[pM _ _]; case/negP: ntM.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "by rewrite -subG1 -(eqP F1) Fitting_max ?(pgroup_nil pM).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Fitting_pcore pi G : 'F('O_pi(G)) = 'O_pi('F(G)).",
            "VernacStartTheoremProof",
            "59e705aeca11296c357269f3aab697f24ea0070c"
        ],
        [
            "apply/eqP; rewrite eqEsubset.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite (subset_trans _ (pcoreS _ (Fitting_sub _))); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite subsetI Fitting_sub Fitting_max ?Fitting_nil ?gFnormal_trans.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (subset_trans _ (FittingS (pcore_sub _ _))) // subsetI pcore_sub.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite pcore_max ?pcore_pgroup ?gFnormal_trans.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End CharSimple.",
            "VernacEndSegment",
            "50c76b98db40149903ac702d996b9b65b62f526f"
        ],
        [
            "Section SolvablePrimeFactor.",
            "VernacBeginSection",
            "bb7b9d376efd8134e23ae463fe2ad0fc652ccb57"
        ],
        [
            "Variables (gT : finGroupType) (G : {group gT}).",
            "VernacAssumption",
            "26cb7d9f8ae434831772d6c107d7cf3e4590cb48"
        ],
        [
            "Lemma index_maxnormal_sol_prime (H : {group gT}) : solvable G -> maxnormal H G G -> prime #|G : H|.",
            "VernacStartTheoremProof",
            "04a61aabb98bba04c24970219d2d6ab03991dba7"
        ],
        [
            "move=> solG maxH; have nsHG := maxnormal_normal maxH.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "rewrite -card_quotient ?normal_norm // simple_sol_prime ?quotient_sol //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite quotient_simple.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sol_prime_factor_exists : solvable G -> G :!=: 1 -> {H : {group gT} | H <| G & prime #|G : H| }.",
            "VernacStartTheoremProof",
            "9f7df57f494a692444160abf638678b4b8f59b1a"
        ],
        [
            "move=> solG /ex_maxnormal_ntrivg[H maxH].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by exists H; [apply: maxnormal_normal | apply: index_maxnormal_sol_prime].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SolvablePrimeFactor.",
            "VernacEndSegment",
            "3f07725e2ea38242f89b4fa9080abc5c4b078903"
        ],
        [
            "Section Special.",
            "VernacBeginSection",
            "18ec10936b6374ddbf12cba95ff3e7bdcb390174"
        ],
        [
            "Variables (gT : finGroupType) (p : nat) (A G : {group gT}).",
            "VernacAssumption",
            "5c20c4331ffa5659efa51427e9507ba5f288c840"
        ],
        [
            "Lemma center_special_abelem : p.-group G -> special G -> p.-abelem 'Z(G).",
            "VernacStartTheoremProof",
            "c57bda1dcaf8be79c40844f11fd0bf5bc76f9c75"
        ],
        [
            "move=> pG [defPhi defG'].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have [-> | ntG] := eqsVneq G 1; first by rewrite center1 abelem1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have [p_pr _ _] := pgroup_pdiv pG ntG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have fM: {in 'Z(G) &, {morph expgn^~ p : x y / x * y}}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> x y /setIP[_ /centP cxG] /setIP[/cxG cxy _]; apply: expgMn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite abelemE //= center_abelian; apply/exponentP=> /= z Zz.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "apply: (@kerP _ _ _ (Morphism fM)) => //; apply: subsetP z Zz.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "rewrite -{1}defG' gen_subG; apply/subsetP=> _ /imset2P[x y Gx Gy ->].",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "have Zxy: [~ x, y] \\in 'Z(G) by rewrite -defG' mem_commg.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have Zxp: x ^+ p \\in 'Z(G).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -defPhi (Phi_joing pG) (MhoE 1 pG) joing_idr mem_gen // !inE.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite expn1 orbC (mem_imset (expgn^~ p)).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite mem_morphpre /= ?defG' ?Zxy // inE -commXg; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by red; case/setIP: Zxy => _ /centP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply/commgP; red; case/setIP: Zxp => _ /centP->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exponent_special : p.-group G -> special G -> exponent G %| p ^ 2.",
            "VernacStartTheoremProof",
            "cd9e190726fc5873d1dd236dab24cf2989bd8976"
        ],
        [
            "move=> pG spG; have [defPhi _] := spG.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "have /and3P[_ _ expZ] := center_special_abelem pG spG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/exponentP=> x Gx; rewrite expgM (exponentP expZ) // -defPhi.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite (Phi_joing pG) mem_gen // inE orbC (Mho_p_elt 1) ?(mem_p_elt pG).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem abelian_charsimple_special : p.-group G -> coprime #|G| #|A| -> [~: G, A] = G -> \\bigcup_(H : {group gT} | (H \\char G) && abelian H) H \\subset 'C(A) -> special G /\\ 'C_G(A) = 'Z(G).",
            "VernacStartTheoremProof",
            "c3a7392a16c8433739810aa7af72c02784500a04"
        ],
        [
            "move=> pG coGA defG /bigcupsP cChaA.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have cZA: 'Z(G) \\subset 'C_G(A).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite subsetI center_sub cChaA // center_char center_abelian.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have cChaG (H : {group gT}): H \\char G -> abelian H -> H \\subset 'Z(G).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> chH abH; rewrite subsetI char_sub //= centsC -defG.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "rewrite comm_norm_cent_cent ?(char_norm chH) -?commg_subl ?defG //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite centsC cChaA ?chH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have cZ2GG: [~: 'Z_2(G), G, G] = 1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/commG1P; rewrite (subset_trans (ucn_comm 1 G)) // ucn1 subsetIr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{cZ2GG} cG'Z: 'Z_2(G) \\subset 'C(G^`(1)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite centsC; apply/commG1P; rewrite three_subgroup // (commGC G).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{cG'Z} sZ2G'_Z: 'Z_2(G) :&: G^`(1) \\subset 'Z(G).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: cChaG; first by rewrite charI ?ucn_char ?der_char.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite /abelian subIset // (subset_trans cG'Z) // centS ?subsetIr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{sZ2G'_Z} sG'Z: G^`(1) \\subset 'Z(G).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite der1_min ?gFnorm //; apply/derG1P.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "have /TI_center_nil: nilpotent (G / 'Z(G)) := quotient_nil _ (pgroup_nil pG).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply; first exact: gFnormal; rewrite /= setIC -ucn1 -ucn_central.",
            "VernacExtend",
            "2522bb31d2ee5eb333bb7e2a816e0a3ac64f5b0e"
        ],
        [
            "rewrite -quotient_der ?gFnorm // -quotientGI ?ucn_subS ?quotientS1 //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite ucn1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have sCG': 'C_G(A) \\subset G^`(1).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -quotient_sub1 //; last by rewrite subIset ?gFnorm.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite (subset_trans (quotient_subcent _ G A)) //= -[G in G / _]defG.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have nGA: A \\subset 'N(G) by rewrite -commg_subl defG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite quotientR ?gFnorm_trans ?normG //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite coprime_abel_cent_TI ?quotient_norms ?coprime_morph //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "exact: sub_der1_abelian.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "have defZ: 'Z(G) = G^`(1) by apply/eqP; rewrite eqEsubset (subset_trans cZA).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "split; last by apply/eqP; rewrite eqEsubset cZA defZ sCG'.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "split=> //; apply/eqP; rewrite eqEsubset defZ (Phi_joing pG) joing_subl.",
            "VernacExtend",
            "01f04d3f5bba3b876eb4ec7b1c8f26d2e2cced77"
        ],
        [
            "have:= pG; rewrite -pnat_exponent => /p_natP[n expGpn].",
            "VernacExtend",
            "8431fc4d2460f7908baa11892c1b26797a3f17b8"
        ],
        [
            "rewrite join_subG subxx andbT /= -defZ -(subnn n.-1).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "elim: {2}n.-1 => [|m IHm].",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "rewrite (MhoE _ pG) gen_subG; apply/subsetP=> _ /imsetP[x Gx ->].",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite subn0 -subn1 -add1n -maxnE maxnC maxnE expnD.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite expgM -expGpn expg_exponent ?groupX ?group1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite cChaG ?Mho_char //= (MhoE _ pG) /abelian cent_gen gen_subG.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/centsP=> _ /imsetP[x Gx ->] _ /imsetP[y Gy ->].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "move: sG'Z; rewrite subsetI centsC => /andP[_ /centsP cGG'].",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "apply/commgP; rewrite {1}expnSr expgM.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite commXg -?commgX; try by apply: cGG'; rewrite ?mem_commg ?groupX.",
            "VernacExtend",
            "768b2f88f8c65ebded32bd7dc9c8ffec8f100548"
        ],
        [
            "apply/commgP; rewrite subsetI Mho_sub centsC in IHm.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply: (centsP IHm); first by rewrite groupX.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite -add1n -(addn1 m) subnDA -maxnE maxnC maxnE.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -expgM -expnSr -addSn expnD expgM groupX //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite Mho_p_elt ?(mem_p_elt pG).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Special.",
            "VernacEndSegment",
            "c0bac78adb0474333c6fff1472226e5c42e1aef7"
        ],
        [
            "Section Extraspecial.",
            "VernacBeginSection",
            "90ced0d2e0a1fa233e14c2b87a5c4a81cd9a3fe9"
        ],
        [
            "Variables (p : nat) (gT rT : finGroupType).",
            "VernacAssumption",
            "f7317facefe84c1c18faac9421456ad024a008a8"
        ],
        [
            "Implicit Types D E F G H K M R S T U : {group gT}.",
            "VernacReserve",
            "64e76100fd95d782293bcab4fdf4bbc17e515bc1"
        ],
        [
            "Section Basic.",
            "VernacBeginSection",
            "61bd84f7065ef1f9a7495cd2fdfcf64c86ef1352"
        ],
        [
            "Variable S : {group gT}.",
            "VernacAssumption",
            "ae33fe60ccd719c7d0821c0a51d505d3ba28732e"
        ],
        [
            "Hypotheses (pS : p.-group S) (esS : extraspecial S).",
            "VernacAssumption",
            "e9e6ae85bb1a1c7652353ac5831220e5f75de013"
        ],
        [
            "Let pZ : p.-group 'Z(S) := pgroupS (center_sub S) pS.",
            "VernacDefinition",
            "e32f0cd9c97e00e0b5f73db6d1a2ac98abd65351"
        ],
        [
            "Lemma extraspecial_prime : prime p.",
            "VernacStartTheoremProof",
            "df770db701c02abe55f6efee4c05849ab1687e3d"
        ],
        [
            "by case: esS => _ /prime_gt1; rewrite cardG_gt1; case/(pgroup_pdiv pZ).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_center_extraspecial : #|'Z(S)| = p.",
            "VernacStartTheoremProof",
            "18679e5febab83e75e0a7e05e9f06653ffff3980"
        ],
        [
            "by apply/eqP; apply: (pgroupP pZ); case: esS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma min_card_extraspecial : #|S| >= p ^ 3.",
            "VernacStartTheoremProof",
            "d3abfeb59bf2526b9a041492a1b8099daeab9bb8"
        ],
        [
            "have p_gt1 := prime_gt1 extraspecial_prime.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite leqNgt (card_pgroup pS) ltn_exp2l // ltnS.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: esS => [[_ defS']]; apply: contraL => /(p2group_abelian pS)/derG1P S'1.",
            "VernacExtend",
            "d62e4c271de3f2a9ff5062b8b89d3c57d965c518"
        ],
        [
            "by rewrite -defS' S'1 cards1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Basic.",
            "VernacEndSegment",
            "5a46c002fd5ea948cce24b9fc730f6165f741e0b"
        ],
        [
            "Lemma card_p3group_extraspecial E : prime p -> #|E| = (p ^ 3)%N -> #|'Z(E)| = p -> extraspecial E.",
            "VernacStartTheoremProof",
            "87808b79e23ff93324dcfd544b689f4a5ee69171"
        ],
        [
            "move=> p_pr oEp3 oZp; have p_gt0 := prime_gt0 p_pr.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "have pE: p.-group E by rewrite /pgroup oEp3 pnat_exp pnat_id.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have pEq: p.-group (E / 'Z(E))%g by rewrite quotient_pgroup.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have /andP[sZE nZE] := center_normal E.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have oEq: #|E / 'Z(E)|%g = (p ^ 2)%N.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite card_quotient -?divgS // oEp3 oZp expnS mulKn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have cEEq: abelian (E / 'Z(E))%g by apply: card_p2group_abelian oEq.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have not_cEE: ~~ abelian E.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have: #|'Z(E)| < #|E| by rewrite oEp3 oZp (ltn_exp2l 1) ?prime_gt1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: contraL => cEE; rewrite -leqNgt subset_leq_card // subsetI subxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have defE': E^`(1) = 'Z(E).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/eqP; rewrite eqEsubset der1_min //=; apply: contraR not_cEE => not_sE'Z.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "apply/commG1P/(TI_center_nil (pgroup_nil pE) (der_normal 1 _)).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite setIC prime_TIg ?oZp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split; [split=> // | by rewrite oZp]; apply/eqP.",
            "VernacExtend",
            "1853e0c147ac329bdb968fc8042cfb80d7391fab"
        ],
        [
            "rewrite eqEsubset andbC -{1}defE' {1}(Phi_joing pE) joing_subl.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -quotient_sub1 ?gFsub_trans ?subG1 //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (quotient_Phi pE) //= (trivg_Phi pEq).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/abelemP=> //; split=> // Zx EqZx; apply/eqP; rewrite -order_dvdn /order.",
            "VernacExtend",
            "e9117678ab574c7b2c67a766017142cd191e8dff"
        ],
        [
            "rewrite (card_pgroup (mem_p_elt pEq EqZx)) (@dvdn_exp2l _ _ 1) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite leqNgt -pfactor_dvdn // -oEq; apply: contra not_cEE => sEqZx.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "rewrite cyclic_center_factor_abelian //; apply/cyclicP.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "exists Zx; apply/eqP; rewrite eq_sym eqEcard cycle_subG EqZx -orderE.",
            "VernacExtend",
            "0db1dd7cd93617a678be7e6502b97a78c15e0c74"
        ],
        [
            "exact: dvdn_leq sEqZx.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma p3group_extraspecial G : p.-group G -> ~~ abelian G -> logn p #|G| <= 3 -> extraspecial G.",
            "VernacStartTheoremProof",
            "714b6e3182d3187f6ccd4b27617c62899a0359cc"
        ],
        [
            "move=> pG not_cGG; have /andP[sZG nZG] := center_normal G.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "have ntG: G :!=: 1 by apply: contraNneq not_cGG => ->; apply: abelian1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have ntZ: 'Z(G) != 1 by rewrite (center_nil_eq1 (pgroup_nil pG)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [p_pr _ [n oG]] := pgroup_pdiv pG ntG; rewrite oG pfactorK //.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "have [_ _ [m oZ]] := pgroup_pdiv (pgroupS sZG pG) ntZ.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have lt_m1_n: m.+1 < n.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "suffices: 1 < logn p #|(G / 'Z(G))|.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "rewrite card_quotient // -divgS // logn_div ?cardSg //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite oG oZ !pfactorK // ltn_subRL addn1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite ltnNge; apply: contra not_cGG => cycGs.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "apply: cyclic_center_factor_abelian; rewrite (dvdn_prime_cyclic p_pr) //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite (card_pgroup (quotient_pgroup _ pG)) (dvdn_exp2l _ cycGs).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -{lt_m1_n}(subnKC lt_m1_n) !addSn !ltnS leqn0 in oG *.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case: m => // in oZ oG * => /eqP n2; rewrite {n}n2 in oG.",
            "VernacExtend",
            "82d53976234637e3f0907eb36cddf61d028c6306"
        ],
        [
            "exact: card_p3group_extraspecial oZ.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma extraspecial_nonabelian G : extraspecial G -> ~~ abelian G.",
            "VernacStartTheoremProof",
            "dcec5880d102c212894a683a3f3eec341eca4af4"
        ],
        [
            "case=> [[_ defG'] oZ]; rewrite /abelian (sameP commG1P eqP).",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by rewrite -derg1 defG' -cardG_gt1 prime_gt1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exponent_2extraspecial G : 2.-group G -> extraspecial G -> exponent G = 4.",
            "VernacStartTheoremProof",
            "55d22f0df5c74b99834c6f2242e0631761ef55a2"
        ],
        [
            "move=> p2G esG; have [spG _] := esG.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "case/dvdn_pfactor: (exponent_special p2G spG) => // k.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite leq_eqVlt ltnS => /predU1P[-> // | lek1] expG.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "case/negP: (extraspecial_nonabelian esG).",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite (@abelem_abelian _ 2) ?exponent2_abelem // expG pfactor_dvdn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma injm_special D G (f : {morphism D >-> rT}) : 'injm f -> G \\subset D -> special G -> special (f @* G).",
            "VernacStartTheoremProof",
            "cb996730b46a3b4c067e32b7072bc900554968c2"
        ],
        [
            "move=> injf sGD [defPhiG defG'].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by rewrite /special -morphim_der // -injm_Phi // defPhiG defG' injm_center.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma injm_extraspecial D G (f : {morphism D >-> rT}) : 'injm f -> G \\subset D -> extraspecial G -> extraspecial (f @* G).",
            "VernacStartTheoremProof",
            "f4c9354ea9b99601f77419d74bc743458f78c00c"
        ],
        [
            "move=> injf sGD [spG ZG_pr]; split; first exact: injm_special spG.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -injm_center // card_injm // subIset ?sGD.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma isog_special G (R : {group rT}) : G \\isog R -> special G -> special R.",
            "VernacStartTheoremProof",
            "0eb0a335992e3069a9b47cc83aab1e048891bbe5"
        ],
        [
            "by case/isogP=> f injf <-; apply: injm_special.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma isog_extraspecial G (R : {group rT}) : G \\isog R -> extraspecial G -> extraspecial R.",
            "VernacStartTheoremProof",
            "d5bdc1d509778c79a8f8aa85178b67cd29430242"
        ],
        [
            "by case/isogP=> f injf <-; apply: injm_extraspecial.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cprod_extraspecial G H K : p.-group G -> H \\* K = G -> H :&: K = 'Z(H) -> extraspecial H -> extraspecial K -> extraspecial G.",
            "VernacStartTheoremProof",
            "c783c40fb20d9997807cf00b32e80925b9976def"
        ],
        [
            "move=> pG defG ziHK [[PhiH defH'] ZH_pr] [[PhiK defK'] ZK_pr].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have [_ defHK cHK]:= cprodP defG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sZHK: 'Z(H) \\subset 'Z(K).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite subsetI -{1}ziHK subsetIr subIset // centsC cHK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{sZHK} defZH: 'Z(H) = 'Z(K).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/eqP; rewrite eqEcard sZHK leq_eqVlt eq_sym -dvdn_prime2 ?cardSg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have defZ: 'Z(G) = 'Z(K).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by case/cprodP: (center_cprod defG) => /= _ <- _; rewrite defZH mulGid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split; first split; rewrite defZ //.",
            "VernacExtend",
            "2522bb31d2ee5eb333bb7e2a816e0a3ac64f5b0e"
        ],
        [
            "by have /cprodP[_ <- _] := Phi_cprod pG defG; rewrite PhiH PhiK defZH mulGid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by have /cprodP[_ <- _] := der_cprod 1 defG; rewrite defH' defK' defZH mulGid.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section ExtraspecialFormspace.",
            "VernacBeginSection",
            "e425c6f1be0cf69e279fbe4ef0b42ff6a005272b"
        ],
        [
            "Variable G : {group gT}.",
            "VernacAssumption",
            "a4eac84d173e53c6bd7c7941e403af4d790fced0"
        ],
        [
            "Hypotheses (pG : p.-group G) (esG : extraspecial G).",
            "VernacAssumption",
            "2a94a700085bef826465c4145a300f445b417f99"
        ],
        [
            "Let p_pr := extraspecial_prime pG esG.",
            "VernacDefinition",
            "237428f0bae16cdf0fa2d8655648fee4f6950069"
        ],
        [
            "Let oZ := card_center_extraspecial pG esG.",
            "VernacDefinition",
            "8fe6965e49ba409267b76c888e49f99fbf47fa5e"
        ],
        [
            "Let p_gt1 := prime_gt1 p_pr.",
            "VernacDefinition",
            "eabc01a1777693cc50bac61dfad6bb06f49e7727"
        ],
        [
            "Let p_gt0 := prime_gt0 p_pr.",
            "VernacDefinition",
            "34a4ea1b8b3f48200db8989a9d1eb68f0252f8de"
        ],
        [
            "Lemma cent1_extraspecial_maximal x : x \\in G -> x \\notin 'Z(G) -> maximal 'C_G[x] G.",
            "VernacStartTheoremProof",
            "045db68f6a332a120ac34ab2d69c503450faa38f"
        ],
        [
            "move=> Gx notZx; pose f y := [~ x, y]; have [[_ defG'] prZ] := esG.",
            "VernacExtend",
            "5e9f04e072d058c7688e55b9dff4d25555e15183"
        ],
        [
            "have{defG'} fZ y: y \\in G -> f y \\in 'Z(G).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> Gy; rewrite -defG' mem_commg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have fM: {in G &, {morph f : y z / y * z}}%g.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> y z Gy Gz; rewrite {1}/f commgMJ conjgCV -conjgM (conjg_fixP _) //.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "rewrite (sameP commgP cent1P); apply: subsetP (fZ y Gy).",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite subIset // orbC -cent_set1 centS // sub1set !(groupM, groupV).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose fm := Morphism fM.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have fmG: fm @* G = 'Z(G).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sfmG: fm @* G \\subset 'Z(G).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/subsetP=> _ /morphimP[z _ Gz ->]; apply: fZ.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/eqP; rewrite eqEsubset sfmG; apply: contraR notZx => /(prime_TIg prZ).",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "rewrite (setIidPr _) // => fmG1; rewrite inE Gx; apply/centP=> y Gy.",
            "VernacExtend",
            "9c74624cac92f94e452c274a33342e43b2955888"
        ],
        [
            "by apply/commgP; rewrite -in_set1 -[[set _]]fmG1; apply: mem_morphim.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have ->: 'C_G[x] = 'ker fm.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/setP=> z; rewrite inE (sameP cent1P commgP) !inE.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite -invg_comm eq_invg_mul mulg1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite p_index_maximal ?subsetIl // -card_quotient ?ker_norm //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (card_isog (first_isog fm)) /= fmG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subcent1_extraspecial_maximal U x : U \\subset G -> x \\in G :\\: 'C(U) -> maximal 'C_U[x] U.",
            "VernacStartTheoremProof",
            "edee291967a18f9dc1dd5783a832cba31971e7f4"
        ],
        [
            "move=> sUG /setDP[Gx not_cUx]; apply/maxgroupP; split=> [|H ltHU sCxH].",
            "VernacExtend",
            "b7d55d5cc9e609b184db748f6780e12224901e48"
        ],
        [
            "by rewrite /proper subsetIl subsetI subxx sub_cent1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/andP: ltHU => sHU not_sHU; have sHG := subset_trans sHU sUG.",
            "VernacExtend",
            "c6460972b7febd45d9a49b3c1ce4f3fe36b53169"
        ],
        [
            "apply/eqP; rewrite eqEsubset sCxH subsetI sHU /= andbT.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply: contraR not_sHU => not_sHCx.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "have maxCx: maximal 'C_G[x] G.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite cent1_extraspecial_maximal //; apply: contra not_cUx.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "by rewrite inE Gx; apply: subsetP (centS sUG) _.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have nsCx := p_maximal_normal pG maxCx.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -(setIidPl sUG) -(mulg_normal_maximal nsCx maxCx sHG) ?subsetI ?sHG //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -group_modr //= setIA (setIidPl sUG) mul_subG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma card_subcent_extraspecial U : U \\subset G -> #|'C_G(U)| = (#|'Z(G) :&: U| * #|G : U|)%N.",
            "VernacStartTheoremProof",
            "699aeb2b0b1c76ede9bca64bc7aee0c841e913f6"
        ],
        [
            "move=> sUG; rewrite setIAC (setIidPr sUG).",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "elim: {U}_.+1 {-2}U (ltnSn #|U|) sUG => // m IHm U leUm sUG.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "have [cUG | not_cUG]:= orP (orbN (G \\subset 'C(U))).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite !(setIidPl _) ?Lagrange // centsC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{not_cUG} [x Gx not_cUx] := subsetPn not_cUG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose W := 'C_U[x]; have sCW_G: 'C_G(W) \\subset G := subsetIl G _.",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "have maxW: maximal W U by rewrite subcent1_extraspecial_maximal // inE not_cUx.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have nsWU: W <| U := p_maximal_normal (pgroupS sUG pG) maxW.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have ltWU: W \\proper U by apply: maxgroupp maxW.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [sWU [u Uu notWu]] := properP ltWU; have sWG := subset_trans sWU sUG.",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "have defU: W * <[u]> = U by rewrite (mulg_normal_maximal nsWU) ?cycle_subG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have iCW_CU: #|'C_G(W) : 'C_G(U)| = p.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -defU centM cent_cycle setIA /=; rewrite inE Uu cent1C in notWu.",
            "VernacExtend",
            "2194fcb4d6d52cbae24a29f7ff14a3997f1912fd"
        ],
        [
            "apply: p_maximal_index (pgroupS sCW_G pG) _.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "apply: subcent1_extraspecial_maximal sCW_G _.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite inE andbC (subsetP sUG) //= -sub_cent1.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/subsetPn; exists x; rewrite // inE Gx -sub_cent1 subsetIr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/eqP; rewrite -(eqn_pmul2r p_gt0) -{1}iCW_CU Lagrange ?setIS ?centS //.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite IHm ?(leq_trans (proper_card ltWU)) // -setIA -mulnA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -(Lagrange_index sUG sWU) (p_maximal_index (pgroupS sUG pG)) //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -cent_set1 (setIidPr (centS _)) ?sub1set.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma split1_extraspecial x : x \\in G :\\: 'Z(G) -> {E : {group gT} & {R : {group gT} | [/\\ #|E| = (p ^ 3)%N /\\ #|R| = #|G| %/ p ^ 2, E \\* R = G /\\ E :&: R = 'Z(E), 'Z(E) = 'Z(G) /\\ 'Z(R) = 'Z(G), extraspecial E /\\ x \\in E & if abelian R then R :=: 'Z(G) else extraspecial R]}}.",
            "VernacStartTheoremProof",
            "601eb778bcacfee20983092ed7106325944ec578"
        ],
        [
            "case/setDP=> Gx notZx; rewrite inE Gx /= in notZx.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "have [[defPhiG defG'] prZ] := esG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have maxCx: maximal 'C_G[x] G.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite subcent1_extraspecial_maximal // inE notZx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose y := repr (G :\\: 'C[x]).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have [Gy not_cxy]: y \\in G /\\ y \\notin 'C[x].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move/maxgroupp: maxCx => /properP[_ [t Gt not_cyt]].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by apply/setDP; apply: (mem_repr t); rewrite !inE Gt andbT in not_cyt *.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose E := <[x]> <*> <[y]>; pose R := 'C_G(E).",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "exists [group of E]; exists [group of R] => /=.",
            "VernacExtend",
            "b4fd873c55fe244e0c2916b430e8a631123420af"
        ],
        [
            "have sEG: E \\subset G by rewrite join_subG !cycle_subG Gx.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [Ex Ey]: x \\in E /\\ y \\in E by rewrite !mem_gen // inE cycle_id ?orbT.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sZE: 'Z(G) \\subset E.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (('Z(G) =P E^`(1)) _) ?der_sub // eqEsubset -{2}defG' dergS // andbT.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: contraR not_cxy => /= not_sZE'.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite (sameP cent1P commgP) -in_set1 -[[set 1]](prime_TIg prZ not_sZE').",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite /= -defG' inE !mem_commg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have ziER: E :&: R = 'Z(E) by rewrite setIA (setIidPl sEG).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have cER: R \\subset 'C(E) by rewrite subsetIr.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have iCxG: #|G : 'C_G[x]| = p by apply: p_maximal_index.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have maxR: maximal R 'C_G[x].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite /R centY !cent_cycle setIA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite subcent1_extraspecial_maximal ?subsetIl // inE Gy andbT -sub_cent1.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/subsetPn; exists x; rewrite 1?cent1C // inE Gx cent1id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have sRCx: R \\subset 'C_G[x] by rewrite -cent_cycle setIS ?centS ?joing_subl.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sCxG: 'C_G[x] \\subset G by rewrite subsetIl.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sRG: R \\subset G by rewrite subsetIl.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have iRCx: #|'C_G[x] : R| = p by rewrite (p_maximal_index (pgroupS sCxG pG)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have defG: E * R = G.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -cent_joinEr //= -/R joingC joingA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have cGx_x: <[x]> \\subset 'C_G[x] by rewrite cycle_subG inE Gx cent1id.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have nsRcx := p_maximal_normal (pgroupS sCxG pG) maxR.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (norm_joinEr (subset_trans cGx_x (normal_norm nsRcx))).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (mulg_normal_maximal nsRcx) //=; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite centY !cent_cycle cycle_subG !in_setI Gx cent1id cent1C.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have nsCxG := p_maximal_normal pG maxCx.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have syG: <[y]> \\subset G by rewrite cycle_subG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (norm_joinEr (subset_trans syG (normal_norm nsCxG))).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (mulg_normal_maximal nsCxG) //= cycle_subG inE Gy.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have defZR: 'Z(R) = 'Z(G) by rewrite -['Z(R)]setIA -centM defG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have defZE: 'Z(E) = 'Z(G).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -defG -center_prod ?mulGSid //= -ziER subsetI center_sub defZR sZE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [n oG] := p_natP pG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have n_gt1: n > 1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite ltnW // -(@leq_exp2l p) // -oG min_card_extraspecial.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have oR: #|R| = (p ^ n.-2)%N.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/eqP; rewrite -(divg_indexS sRCx) iRCx /= -(divg_indexS sCxG) iCxG /= oG.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite -{1}(subnKC n_gt1) subn2 !expnS !mulKn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have oE: #|E| = (p ^ 3)%N.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/eqP; rewrite -(@eqn_pmul2r #|R|) ?cardG_gt0 // mul_cardG defG ziER.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite defZE oZ oG -{1}(subnKC n_gt1) oR -expnSr -expnD subn2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite cprodE // oR oG -expnB ?subn2 //; split=> //.",
            "VernacExtend",
            "80e7cce19c53eb5d5a21aafd83e552d37e23084a"
        ],
        [
            "by split=> //; apply: card_p3group_extraspecial _ oE _; rewrite // defZE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case: ifP => [cRR | not_cRR]; first by rewrite -defZR (center_idP _).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "split; rewrite /special defZR //.",
            "VernacExtend",
            "23414b1aa23418a1670d952f6b338db06304aa88"
        ],
        [
            "have ntR': R^`(1) != 1 by rewrite (sameP eqP commG1P) -abelianE not_cRR.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have pR: p.-group R := pgroupS sRG pG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have pR': p.-group R^`(1) := pgroupS (der_sub 1 _) pR.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have defR': R^`(1) = 'Z(G).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/eqP; rewrite eqEcard -{1}defG' dergS //= oZ.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by have [_ _ [k ->]]:= pgroup_pdiv pR' ntR'; rewrite (leq_exp2l 1).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "split=> //; apply/eqP; rewrite eqEsubset -{1}defPhiG -defR' (PhiS pG) //=.",
            "VernacExtend",
            "01f04d3f5bba3b876eb4ec7b1c8f26d2e2cced77"
        ],
        [
            "by rewrite (Phi_joing pR) joing_subl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pmaxElem_extraspecial : 'E*_p(G) = 'E_p^('r_p(G))(G).",
            "VernacStartTheoremProof",
            "618545d7d1eea1ebed640b5ace500f4a1c44853d"
        ],
        [
            "have sZmax: {in 'E*_p(G), forall E, 'Z(G) \\subset E}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> E maxE; have defE := pmaxElem_LdivP p_pr maxE.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "have abelZ: p.-abelem 'Z(G) by rewrite prime_abelem ?oZ.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -(Ohm1_id abelZ) (OhmE 1 (abelem_pgroup abelZ)) gen_subG -defE.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite setSI // setIS ?centS // -defE !subIset ?subxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices card_max: {in 'E*_p(G) &, forall E F, #|E| <= #|F| }.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "have EprGmax: 'E_p^('r_p(G))(G) \\subset 'E*_p(G) := p_rankElem_max p G.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [E EprE]:= p_rank_witness p G; have maxE := subsetP EprGmax E EprE.",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "apply/eqP; rewrite eqEsubset EprGmax andbT; apply/subsetP=> F maxF.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "rewrite inE; have [-> _]:= pmaxElemP maxF; have [_ _ <-]:= pnElemP EprE.",
            "VernacExtend",
            "79c2f18baed12e3eb766ed1d561ea4da18e8d644"
        ],
        [
            "by apply/eqP; congr (logn p _); apply/eqP; rewrite eqn_leq !card_max.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move=> E F maxE maxF; set U := E :&: F.",
            "VernacExtend",
            "fd0300d8899563f42d81dc09cab8269e61be7289"
        ],
        [
            "have [sUE sUF]: U \\subset E /\\ U \\subset F by apply/andP; rewrite -subsetI.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sZU: 'Z(G) \\subset U by rewrite subsetI !sZmax.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [EpE _]:= pmaxElemP maxE; have{EpE} [sEG abelE] := pElemP EpE.",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "have [EpF _]:= pmaxElemP maxF; have{EpF} [sFG abelF] := pElemP EpF.",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "have [V] := abelem_split_dprod abelE sUE; case/dprodP=> _ defE cUV tiUV.",
            "VernacExtend",
            "c6d2532ed4a224baf57de7930305ff767fdbd834"
        ],
        [
            "have [W] := abelem_split_dprod abelF sUF; case/dprodP=> _ defF _ tiUW.",
            "VernacExtend",
            "c6d2532ed4a224baf57de7930305ff767fdbd834"
        ],
        [
            "have [sVE sWF]: V \\subset E /\\ W \\subset F by rewrite -defE -defF !mulG_subr.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [sVG sWG] := (subset_trans sVE sEG, subset_trans sWF sFG).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -defE -defF !TI_cardMg // leq_pmul2l ?cardG_gt0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -(leq_pmul2r (cardG_gt0 'C_G(W))) mul_cardG.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite card_subcent_extraspecial // mulnCA Lagrange // mulnC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite leq_mul ?subset_leq_card //; last by rewrite mul_subG ?subsetIl.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply: subset_trans (sub1G _); rewrite -tiUV !subsetI subsetIl subIset ?sVE //=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite -(pmaxElem_LdivP p_pr maxF) -defF centM -!setIA -(setICA 'C(W)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite setIC setIA setIS // subsetI cUV sub_LdivT.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case/and3P: (abelemS sVE abelE).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ExtraspecialFormspace.",
            "VernacEndSegment",
            "a6a035da5e55370e1285da7925de2c2163bddc6c"
        ],
        [
            "Lemma critical_extraspecial R S : p.-group R -> S \\subset R -> extraspecial S -> [~: S, R] \\subset S^`(1) -> S \\* 'C_R(S) = R.",
            "VernacStartTheoremProof",
            "e53e92fa58744b090d97993ef0dd6909c934e811"
        ],
        [
            "move=> pR sSR esS sSR_S'; have [[defPhi defS'] _] := esS.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "have [pS [sPS nPS]] := (pgroupS sSR pR, andP (Phi_normal S : 'Phi(S) <| S)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{esS} oZS: #|'Z(S)| = p := card_center_extraspecial pS esS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have nSR: R \\subset 'N(S) by rewrite -commg_subl (subset_trans sSR_S') ?der_sub.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have nsCR: 'C_R(S) <| R by rewrite (normalGI nSR) ?cent_normal.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have nCS: S \\subset 'N('C_R(S)) by rewrite cents_norm // centsC subsetIr.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite cprodE ?subsetIr //= -{2}(quotientGK nsCR) normC -?quotientK //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "congr (_ @*^-1 _); apply/eqP; rewrite eqEcard quotientS //=.",
            "VernacExtend",
            "e02c5e37d306c924c86ea325376d95ddc0d1741e"
        ],
        [
            "rewrite -(card_isog (second_isog nCS)) setIAC (setIidPr sSR) /= -/'Z(S) -defPhi.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -ker_conj_aut (card_isog (first_isog_loc _ nSR)) //=; set A := _ @* R.",
            "VernacExtend",
            "c1f58f36c5711f022b4a54717f37c2782f34a159"
        ],
        [
            "have{pS} abelSb := Phi_quotient_abelem pS; have [pSb cSSb _] := and3P abelSb.",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "have [/= Xb defSb oXb] := grank_witness (S / 'Phi(S)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose X := (repr \\o val : coset_of _ -> gT) @: Xb.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have sXS: X \\subset S; last have nPX := subset_trans sXS nPS.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/subsetP=> x; case/imsetP=> xb Xxb ->; have nPx := repr_coset_norm xb.",
            "VernacExtend",
            "2820ef62c4b0a4a265eca9f1b4f06a2cbfda9439"
        ],
        [
            "rewrite -sub1set -(quotientSGK _ sPS) ?sub1set ?quotient_set1 //= sub1set.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite coset_reprK -defSb mem_gen.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have defS: <<X>> = S.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: Phi_nongen; apply/eqP; rewrite eqEsubset join_subG sPS sXS -joing_idr.",
            "VernacExtend",
            "7d4450169cd8610cf3ff90cd2eeb2f84258ab13d"
        ],
        [
            "rewrite -genM_join sub_gen // -quotientSK ?quotient_gen // -defSb genS //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/subsetP=> xb Xxb; apply/imsetP; rewrite (setIidPr nPX).",
            "VernacExtend",
            "7d4450169cd8610cf3ff90cd2eeb2f84258ab13d"
        ],
        [
            "by exists (repr xb); rewrite /= ?coset_reprK //; apply: mem_imset.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose f (a : {perm gT}) := [ffun x => if x \\in X then x^-1 * a x else 1].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have injf: {in A &, injective f}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> _ _ /morphimP[y nSy Ry ->] /morphimP[z nSz Rz ->].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "move/ffunP=> eq_fyz; apply: (@eq_Aut _ S); rewrite ?Aut_aut //= => x Sx.",
            "VernacExtend",
            "b7d55d5cc9e609b184db748f6780e12224901e48"
        ],
        [
            "rewrite !norm_conj_autE //; apply: canRL (conjgKV z) _; rewrite -conjgM.",
            "VernacExtend",
            "fe8f197e86415fc7f0a74eda9d312128b9473eda"
        ],
        [
            "rewrite /conjg -(centP _ x Sx) ?mulKg {x Sx}// -defS cent_gen -sub_cent1.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/subsetP=> x Xx; have Sx := subsetP sXS x Xx.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "move/(_ x): eq_fyz; rewrite !ffunE Xx !norm_conj_autE // => /mulgI xy_xz.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by rewrite cent1C inE conjg_set1 conjgM xy_xz conjgK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have sfA_XS': f @: A \\subset pffun_on 1 X S^`(1).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/subsetP=> _ /imsetP[_ /morphimP[y nSy Ry ->] ->].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "apply/pffun_onP; split=> [|_ /imageP[x /= Xx ->]].",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "by apply/subsetP=> x; apply: contraR; rewrite ffunE => /negPf->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have Sx := subsetP sXS x Xx.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite ffunE Xx norm_conj_autE // (subsetP sSR_S') ?mem_commg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -(card_in_imset injf) (leq_trans (subset_leq_card sfA_XS')) // defS'.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite card_pffun_on (card_pgroup pSb) -rank_abelem -?grank_abelian // -oXb.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -oZS ?leq_pexp2l ?cardG_gt0 ?leq_imset_card.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem extraspecial_structure S : p.-group S -> extraspecial S -> {Es | all (fun E => (#|E| == p ^ 3)%N && ('Z(E) == 'Z(S))) Es & \\big[cprod/1%g]_(E <- Es) E \\* 'Z(S) = S}.",
            "VernacStartTheoremProof",
            "6e402be732716c0e9a8ef3e163e8900d32fa6fcf"
        ],
        [
            "elim: {S}_.+1 {-2}S (ltnSn #|S|) => // m IHm S leSm pS esS.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "have [x Z'x]: {x | x \\in S :\\: 'Z(S)}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/sigW/set0Pn; rewrite -subset0 subDset setU0.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply: contra (extraspecial_nonabelian esS) => sSZ.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "exact: abelianS sSZ (center_abelian S).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "have [E [R [[oE oR]]]]:= split1_extraspecial pS esS Z'x.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case=> defS _ [defZE defZR] _; case: ifP => [_ defR | _ esR].",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "by exists [:: E]; rewrite /= ?oE ?defZE ?eqxx // big_seq1 -defR.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have sRS: R \\subset S by case/cprodP: defS => _ <- _; rewrite mulG_subr.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [|Es esEs defR] := IHm _ _ (pgroupS sRS pS) esR.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite oR (leq_trans (ltn_Pdiv _ _)) ?cardG_gt0 // (ltn_exp2l 0) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "exact: prime_gt1 (extraspecial_prime pS esS).",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "exists (E :: Es); first by rewrite /= oE defZE !eqxx -defZR.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite -defZR big_cons -cprodA defR.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section StructureCorollaries.",
            "VernacBeginSection",
            "a3a8bd3a879952d83c9d1ae229b001a4a2bae5ad"
        ],
        [
            "Variable S : {group gT}.",
            "VernacAssumption",
            "ae33fe60ccd719c7d0821c0a51d505d3ba28732e"
        ],
        [
            "Hypotheses (pS : p.-group S) (esS : extraspecial S).",
            "VernacAssumption",
            "e9e6ae85bb1a1c7652353ac5831220e5f75de013"
        ],
        [
            "Let p_pr := extraspecial_prime pS esS.",
            "VernacDefinition",
            "b975c0559930a958c717d6e469d54c70131d8a51"
        ],
        [
            "Let oZ := card_center_extraspecial pS esS.",
            "VernacDefinition",
            "b0c6f38e997a0185cb46206b3397a668cee82ac7"
        ],
        [
            "Lemma card_extraspecial : {n | n > 0 & #|S| = (p ^ n.*2.+1)%N}.",
            "VernacStartTheoremProof",
            "c16c0b225bbf43ec9283f0842ebaca8601016e0f"
        ],
        [
            "exists (logn p #|S|)./2.",
            "VernacExtend",
            "e839de5a8c9c2ddd77204cf6523138cecbac8142"
        ],
        [
            "rewrite half_gt0 ltnW // -(leq_exp2l _ _ (prime_gt1 p_pr)) -card_pgroup //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "exact: min_card_extraspecial.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "have [Es] := extraspecial_structure pS esS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "elim: Es {3 4 5}S => [_ _ <-| E s IHs T] /=.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "by rewrite big_nil cprod1g oZ (pfactorK 1).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -andbA big_cons -cprodA; case/and3P; move/eqP=> oEp3; move/eqP=> defZE.",
            "VernacExtend",
            "29fd6775ff954061bb7c31773e6cf27048b7070a"
        ],
        [
            "move/IHs=> {IHs}IHs; case/cprodP=> [[_ U _ defU]]; rewrite defU => defT cEU.",
            "VernacExtend",
            "898083afbcb7f48eb38b81893aabf115193d46fd"
        ],
        [
            "rewrite -(mulnK #|T| (cardG_gt0 (E :&: U))) -defT -mul_cardG /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have ->: E :&: U = 'Z(S).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/eqP; rewrite eqEsubset subsetI -{1 2}defZE subsetIl setIS //=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by case/cprodP: defU => [[V _ -> _]] <- _; apply: mulG_subr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (IHs U) // oEp3 oZ -expnD addSn expnS mulKn ?prime_gt0 //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite pfactorK //= uphalf_double.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Aut_extraspecial_full : Aut_in (Aut S) 'Z(S) \\isog Aut 'Z(S).",
            "VernacStartTheoremProof",
            "0bb009a58e00c8c19d582673ceee1c9ae7dbf37b"
        ],
        [
            "have [p_gt1 p_gt0] := (prime_gt1 p_pr, prime_gt0 p_pr).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [Es] := extraspecial_structure pS esS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "elim: Es S oZ => [T _ _ <-| E s IHs T oZT] /=.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "rewrite big_nil cprod1g (center_idP (center_abelian T)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/Aut_sub_fullP=> // g injg gZ; exists g.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -andbA big_cons -cprodA; case/and3P; move/eqP=> oE; move/eqP=> defZE.",
            "VernacExtend",
            "29fd6775ff954061bb7c31773e6cf27048b7070a"
        ],
        [
            "move=> es_s; case/cprodP=> [[_ U _ defU]]; rewrite defU => defT cEU.",
            "VernacExtend",
            "898083afbcb7f48eb38b81893aabf115193d46fd"
        ],
        [
            "have sUT: U \\subset T by rewrite -defT mulG_subr.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sZU: 'Z(T) \\subset U.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by case/cprodP: defU => [[V _ -> _] <- _]; apply: mulG_subr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have defZU: 'Z(E) = 'Z(U).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/eqP; rewrite eqEsubset defZE subsetI sZU subIset ?centS ?orbT //=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite subsetI subIset ?sUT //= -defT centM setSI.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: (Aut_cprod_full _ defZU); rewrite ?cprodE //; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: IHs; rewrite -?defZU ?defZE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have oZE: #|'Z(E)| = p by rewrite defZE.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [p2 | odd_p] := even_prime p_pr.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "suffices <-: restr_perm 'Z(E) @* Aut E = Aut 'Z(E) by apply: Aut_in_isog.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "apply/eqP; rewrite eqEcard restr_perm_Aut ?center_sub //=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite card_Aut_cyclic ?prime_cyclic ?oZE // {1}p2 cardG_gt0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have pE: p.-group E by rewrite /pgroup oE pnat_exp pnat_id.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have nZE: E \\subset 'N('Z(E)) by rewrite normal_norm ?center_normal.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have esE: extraspecial E := card_p3group_extraspecial p_pr oE oZE.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [[defPhiE defE'] prZ] := esE.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{defPhiE} sEpZ x: x \\in E -> (x ^+ p)%g \\in 'Z(E).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move=> Ex; rewrite -defPhiE (Phi_joing pE) mem_gen // inE orbC.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite (Mho_p_elt 1) // (mem_p_elt pE).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have ltZE: 'Z(E) \\proper E by rewrite properEcard subsetIl oZE oE (ltn_exp2l 1).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [x [Ex notZx oxp]]: exists x, [/\\ x \\in E, x \\notin 'Z(E) & #[x] %| p]%N.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [_ [x Ex notZx]] := properP ltZE.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case: (prime_subgroupVti <[x ^+ p]> prZ) => [sZxp | ]; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move/eqP; rewrite (setIidPl _) ?cycle_subG ?sEpZ //.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by rewrite cycle_eq1 -order_dvdn; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [y Ey notxy]: exists2 y, y \\in E & y \\notin <[x]>.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/subsetPn; apply: contra (extraspecial_nonabelian esE) => sEx.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by rewrite (abelianS sEx) ?cycle_abelian.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have: (y ^+ p)%g \\in <[x ^+ p]> by rewrite (subsetP sZxp) ?sEpZ.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case/cycleP=> i def_yp; set xi := (x ^- i)%g.",
            "VernacExtend",
            "5ced22bf51d40cd3bfc1a1ee7adc8994d4475320"
        ],
        [
            "have Exi: xi \\in E by rewrite groupV groupX.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists (y * xi)%g; split; first by rewrite groupM.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have sxpx: <[x ^+ p]> \\subset <[x]> by rewrite cycle_subG mem_cycle.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: contra notxy; move/(subsetP (subset_trans sZxp sxpx)).",
            "VernacExtend",
            "86bb0d3d5ae27b38aac15f69d532d662f1518315"
        ],
        [
            "by rewrite groupMr // groupV mem_cycle.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose z := [~ xi, y]; have Zz: z \\in 'Z(E) by rewrite -defE' mem_commg.",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "case: (setIP Zz) => _; move/centP=> cEz.",
            "VernacExtend",
            "d09d9458d087c74b7317d831afc65fc07a0f6e3f"
        ],
        [
            "rewrite order_dvdn expMg_Rmul; try by apply: commute_sym; apply: cEz.",
            "VernacExtend",
            "768b2f88f8c65ebded32bd7dc9c8ffec8f100548"
        ],
        [
            "rewrite def_yp expgVn -!expgM mulnC mulgV mul1g -order_dvdn.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (dvdn_trans (order_dvdG Zz)) //= oZE bin2odd // dvdn_mulr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{oxp} ox: #[x] = p.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/eqP; case/primeP: p_pr => _ dvd_p; case/orP: (dvd_p _ oxp) => //.",
            "VernacExtend",
            "b1717d233297e647089f2380199e54808b7d4afc"
        ],
        [
            "by rewrite order_eq1; case: eqP notZx => // ->; rewrite group1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have [y Ey not_cxy]: exists2 y, y \\in E & y \\notin 'C[x].",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/subsetPn; rewrite sub_cent1; rewrite inE Ex in notZx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have notZy: y \\notin 'Z(E).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: contra not_cxy; rewrite inE Ey; apply: subsetP.",
            "VernacExtend",
            "da24caf87c1bbbad0538b8be68905ec456c78aa7"
        ],
        [
            "by rewrite -cent_set1 centS ?sub1set.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose K := 'C_E[y]; have maxK: maximal K E by apply: cent1_extraspecial_maximal.",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "have nsKE: K <| E := p_maximal_normal pE maxK; have [sKE nKE] := andP nsKE.",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "have oK: #|K| = (p ^ 2)%N.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -(divg_indexS sKE) oE (p_maximal_index pE) ?mulKn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have cKK: abelian K := card_p2group_abelian p_pr oK.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sZK: 'Z(E) \\subset K by rewrite setIS // -cent_set1 centS ?sub1set.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have defE: K ><| <[x]> = E.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have notKx: x \\notin K by rewrite inE Ex cent1C.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite sdprodE ?(mulg_normal_maximal nsKE) ?cycle_subG ?(subsetP nKE) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite setIC prime_TIg -?orderE ?ox ?cycle_subG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have /cyclicP[z defZ]: cyclic 'Z(E) by rewrite prime_cyclic ?oZE.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/(Aut_sub_fullP (center_sub E)); rewrite /= defZ => g injg gZ.",
            "VernacExtend",
            "5fce7e5361004176d6b434b36b4623c7387f70bb"
        ],
        [
            "pose k := invm (injm_Zp_unitm z) (aut injg gZ).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have fM: {in K &, {morph expgn^~ (val k): u v / u * v}}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> u v Ku Kv; rewrite /= expgMn // /commute (centsP cKK).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose f := Morphism fM; have fK: f @* K = K.",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "apply/setP=> u; rewrite morphimEdom.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "apply/imsetP/idP=> [[v Kv ->] | Ku]; first exact: groupX.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "exists (u ^+ expg_invn K (val k)); first exact: groupX.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite /f /= expgAC expgK // oK coprime_expl // -unitZpE //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case: (k) => /=; rewrite orderE -defZ oZE => j; rewrite natr_Zp.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have fMact: {in K & <[x]>, morph_act 'J 'J f (idm <[x]>)}.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by move=> u v _ _; rewrite /= conjXg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "exists (sdprodm_morphism defE fMact).",
            "VernacExtend",
            "52b5d0da71f6af04c672e92753a61a5190fc55c6"
        ],
        [
            "rewrite im_sdprodm injm_sdprodm injm_idm -card_im_injm im_idm fK.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have [_ -> _ ->] := sdprodP defE; rewrite !eqxx; split=> //= u Zu.",
            "VernacExtend",
            "64fa48abafe07858f36fa0e2fe01dfc95b691144"
        ],
        [
            "rewrite sdprodmEl ?(subsetP sZK) ?defZ // -(autE injg gZ Zu).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -[aut _ _](invmK (injm_Zp_unitm z)); first by rewrite permE Zu.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite im_Zp_unitm Aut_aut.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma center_aut_extraspecial k : coprime k p -> exists2 f, f \\in Aut S & forall z, z \\in 'Z(S) -> f z = (z ^+ k)%g.",
            "VernacStartTheoremProof",
            "3637043a121813821f9256a51f19d57fefd51cd6"
        ],
        [
            "have /cyclicP[z defZ]: cyclic 'Z(S) by rewrite prime_cyclic ?oZ.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have oz: #[z] = p by rewrite orderE -defZ.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite coprime_sym -unitZpE ?prime_gt1 // -oz => u_k.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "pose g := Zp_unitm (FinRing.unit 'Z_#[z] u_k).",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have AutZg: g \\in Aut 'Z(S) by rewrite defZ -im_Zp_unitm mem_morphim ?inE.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have ZSfull := Aut_sub_fullP (center_sub S) Aut_extraspecial_full.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have [f [injf fS fZ]] := ZSfull _ (injm_autm AutZg) (im_autm AutZg).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "exists (aut injf fS) => [|u Zu]; first exact: Aut_aut.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "have [Su _] := setIP Zu; have z_u: u \\in <[z]> by rewrite -defZ.",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "by rewrite autE // fZ //= autmE permE /= z_u /cyclem expg_znat.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End StructureCorollaries.",
            "VernacEndSegment",
            "666db92f6b20f3c36c57fc8395746bb7233761e8"
        ],
        [
            "End Extraspecial.",
            "VernacEndSegment",
            "fe448c6868069b16733d6040fb6f68db7eb9da1a"
        ],
        [
            "Section SCN.",
            "VernacBeginSection",
            "e922ac535ad2cc28d2e76ac41fcdd491909cc47f"
        ],
        [
            "Variables (gT : finGroupType) (p : nat) (G : {group gT}).",
            "VernacAssumption",
            "2eaa6a8c426ca350d3e2fa208822f5b51836f268"
        ],
        [
            "Implicit Types A Z H : {group gT}.",
            "VernacReserve",
            "11178b186580b01162b29482d79dd0b35569ef7a"
        ],
        [
            "Lemma SCN_P A : reflect (A <| G /\\ 'C_G(A) = A) (A \\in 'SCN(G)).",
            "VernacStartTheoremProof",
            "378c330b3f5cdcef52d00b73793a76f7f97dd699"
        ],
        [
            "by apply: (iffP setIdP) => [] [->]; move/eqP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SCN_abelian A : A \\in 'SCN(G) -> abelian A.",
            "VernacStartTheoremProof",
            "f17bf50fd30675b8ad0bb50607d969048d059664"
        ],
        [
            "by case/SCN_P=> _ defA; rewrite /abelian -{1}defA subsetIr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exponent_Ohm1_class2 H : odd p -> p.-group H -> nil_class H <= 2 -> exponent 'Ohm_1(H) %| p.",
            "VernacStartTheoremProof",
            "f3ffcd5a240fb3f1d7e504e297d8c7deac212a2a"
        ],
        [
            "move=> odd_p pH; rewrite nil_class2 => sH'Z; apply/exponentP=> x /=.",
            "VernacExtend",
            "1947c7e9e09bd3bd1687e7b79563947160de37d3"
        ],
        [
            "rewrite (OhmE 1 pH) expn1 gen_set_id => {x} [/LdivP[] //|].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "apply/group_setP; split=> [|x y]; first by rewrite !inE group1 expg1n //=.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case/LdivP=> Hx xp1 /LdivP[Hy yp1]; rewrite !inE groupM //=.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "have [_ czH]: [~ y, x] \\in H /\\ centralises [~ y, x] H.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply/centerP; rewrite (subsetP sH'Z) ?mem_commg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite expMg_Rmul ?xp1 ?yp1 /commute ?czH //= !mul1g.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite bin2odd // -commXXg ?yp1 /commute ?czH // comm1g.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SCN_max A : A \\in 'SCN(G) -> [max A | A <| G & abelian A].",
            "VernacStartTheoremProof",
            "58a6efde78e99e993e930c0a19102c5bbe151209"
        ],
        [
            "case/SCN_P => nAG scA; apply/maxgroupP; split=> [|H].",
            "VernacExtend",
            "58168c4367f5c8fd5aef7600205b564e8c5f4f4d"
        ],
        [
            "by rewrite nAG /abelian -{1}scA subsetIr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "do 2![case/andP]=> sHG _ abelH sAH; apply/eqP.",
            "VernacExtend",
            "2855640502da0a3b2cfdfcd02ea9662c049d9a24"
        ],
        [
            "by rewrite eqEsubset sAH -scA subsetI sHG centsC (subset_trans sAH).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma max_SCN A : p.-group G -> [max A | A <| G & abelian A] -> A \\in 'SCN(G).",
            "VernacStartTheoremProof",
            "28756e8328599058d8a8ebe81ab28a3975f04715"
        ],
        [
            "move/pgroup_nil=> nilG; rewrite /abelian.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "case/maxgroupP=> /andP[nsAG abelA] maxA; have [sAG nAG] := andP nsAG.",
            "VernacExtend",
            "c6460972b7febd45d9a49b3c1ce4f3fe36b53169"
        ],
        [
            "rewrite inE nsAG eqEsubset /= andbC subsetI abelA normal_sub //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -quotient_sub1; last by rewrite subIset 1?normal_norm.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/trivgP; apply: (TI_center_nil (quotient_nil A nilG)).",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by rewrite quotient_normal // /normal subsetIl normsI ?normG ?norms_cent.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/trivgP/subsetP=> _ /setIP[/morphimP[x Nx /setIP[_ Cx]] ->].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite -cycle_subG in Cx => /setIP[GAx CAx].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "have{CAx GAx}: <[coset A x]> <| G / A.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite /normal cycle_subG GAx cents_norm // centsC cycle_subG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/(inv_quotientN nsAG)=> B /= defB sAB nBG.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite -cycle_subG defB (maxA B) ?trivg_quotient // nBG.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have{defB} defB : B :=: A * <[x]>.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -quotientK ?cycle_subG ?quotient_cycle // defB quotientGK //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "exact: normalS (normal_sub nBG) nsAG.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "apply/setIidPl; rewrite ?defB -[_ :&: _]center_prod //=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite /center !(setIidPl _) //; apply: cycle_abelian.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section SCNseries.",
            "VernacBeginSection",
            "09ffbe887ab4867486d8f94bc6ac8f54abe59149"
        ],
        [
            "Variables A : {group gT}.",
            "VernacAssumption",
            "22efa083d8aa3aa15620ff51cccf965f4e4aad76"
        ],
        [
            "Hypothesis SCN_A : A \\in 'SCN(G).",
            "VernacAssumption",
            "84b8e82d7f4d8f011c4e40141e548846d7b2da51"
        ],
        [
            "Let Z := 'Ohm_1(A).",
            "VernacDefinition",
            "278defe95ad1cc559c014cabe7cc1403dab890a4"
        ],
        [
            "Let cAA := SCN_abelian SCN_A.",
            "VernacDefinition",
            "bffed6fcdacc3beb825fad433f41ac9bab378be0"
        ],
        [
            "Let sZA: Z \\subset A := Ohm_sub 1 A.",
            "VernacDefinition",
            "b896686149d5e6d2f3ea01831c56fe6ed117ef3e"
        ],
        [
            "Let nZA : A \\subset 'N(Z) := sub_abelian_norm cAA sZA.",
            "VernacDefinition",
            "3fed1ae11d2d1ce518346c593aee39670d106e16"
        ],
        [
            "Lemma der1_stab_Ohm1_SCN_series : ('C(Z) :&: 'C_G(A / Z | 'Q))^`(1) \\subset A.",
            "VernacStartTheoremProof",
            "466fb5a112bfa360d170eb2473bb570615307421"
        ],
        [
            "case/SCN_P: SCN_A => /andP[sAG nAG] {4} <-.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "rewrite subsetI {1}setICA comm_subG ?subsetIl //= gen_subG.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/subsetP=> w /imset2P[u v].",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite -groupV -(groupV _ v) /= astabQR //= -/Z !inE groupV.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case/and4P=> cZu _ _ sRuZ /and4P[cZv' _ _ sRvZ] ->{w}.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "apply/centP=> a Aa; rewrite /commute -!mulgA (commgCV v) (mulgA u).",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite (centP cZu); last by rewrite (subsetP sRvZ) ?mem_commg ?set11 ?groupV.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite 2!(mulgA v^-1) mulKVg 4!mulgA invgK (commgC u^-1) mulgA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -(mulgA _ _ v^-1) -(centP cZv') ?(subsetP sRuZ) ?mem_commg ?set11//.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite -!mulgA invgK mulKVg !mulKg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Ohm1_stab_Ohm1_SCN_series : odd p -> p.-group G -> 'Ohm_1('C_G(Z)) \\subset 'C_G(A / Z | 'Q).",
            "VernacStartTheoremProof",
            "3d1ccccbc9683d22b4d107d8284e15ec523889f3"
        ],
        [
            "have [-> | ntG] := eqsVneq G 1; first by rewrite !(setIidPl (sub1G _)) Ohm1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move=> p_odd pG; have{ntG} [p_pr _ _] := pgroup_pdiv pG ntG.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "case/SCN_P: SCN_A => /andP[sAG nAG] _; have pA := pgroupS sAG pG.",
            "VernacExtend",
            "c6460972b7febd45d9a49b3c1ce4f3fe36b53169"
        ],
        [
            "have pCGZ : p.-group 'C_G(Z) by rewrite (pgroupS _ pG) // subsetIl.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite {pCGZ}(OhmE 1 pCGZ) gen_subG; apply/subsetP=> x; rewrite 3!inE -andbA.",
            "VernacExtend",
            "fe8f197e86415fc7f0a74eda9d312128b9473eda"
        ],
        [
            "rewrite -!cycle_subG => /and3P[sXG cZX xp1] /=; have cXX := cycle_abelian x.",
            "VernacExtend",
            "d2991b7607b6316c9d43d28c85f87ca601299ca6"
        ],
        [
            "have nZX := cents_norm cZX; have{nAG} nAX := subset_trans sXG nAG.",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "pose XA := <[x]> <*> A; pose C := 'C(<[x]> / Z | 'Q); pose CA := A :&: C.",
            "VernacExtend",
            "a37246b98b083397f6e69dfe0e1d317fcad6a9d6"
        ],
        [
            "pose Y := <[x]> <*> CA; pose W := 'Ohm_1(Y).",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "have sXC: <[x]> \\subset C by rewrite sub_astabQ nZX (quotient_cents _ cXX).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have defY : Y = <[x]> * CA by rewrite -norm_joinEl // normsI ?nAX ?normsG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{nAX} defXA: XA = <[x]> * A := norm_joinEl nAX.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "suffices{sXC}: XA \\subset Y.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "rewrite subsetI sXG /= sub_astabQ nZX centsC defY group_modl //= -/Z -/C.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite subsetI sub_astabQ defXA quotientMl //= !mulG_subG; case/and4P.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have sZCA: Z \\subset CA by rewrite subsetI sZA [C]astabQ sub_cosetpre.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have cZCA: CA \\subset 'C(Z) by rewrite subIset 1?(sub_abelian_cent2 cAA).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sZY: Z \\subset Y by rewrite (subset_trans sZCA) ?joing_subr.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{cZCA cZX} cZY: Y \\subset 'C(Z) by rewrite join_subG cZX.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{cXX nZX} sY'Z : Y^`(1) \\subset Z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite der1_min ?cents_norm //= -/Y defY quotientMl // abelianM /= -/Z -/CA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite !quotient_abelian // ?(abelianS _ cAA) ?subsetIl //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite /= quotientGI ?Ohm_sub // quotient_astabQ subsetIr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{sY'Z cZY} nil_classY: nil_class Y <= 2.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite nil_class2 (subset_trans sY'Z ) // subsetI sZY centsC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have pY: p.-group Y by rewrite (pgroupS _ pG) // join_subG sXG subIset ?sAG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sXW: <[x]> \\subset W.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite [W](OhmE 1 pY) ?genS // sub1set !inE -cycle_subG joing_subl.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{nil_classY pY sXW sZY sZCA} defW: W = <[x]> * Z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -[W](setIidPr (Ohm_sub _ _)) /= -/Y {1}defY -group_modl //= -/Y -/W.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "congr (_ * _); apply/eqP; rewrite eqEsubset {1}[Z](OhmE 1 pA).",
            "VernacExtend",
            "e02c5e37d306c924c86ea325376d95ddc0d1741e"
        ],
        [
            "rewrite subsetI setIAC subIset //; first by rewrite sZCA -[Z]Ohm_id OhmS.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite sub_gen ?setIS //; apply/subsetP=> w Ww; rewrite inE.",
            "VernacExtend",
            "fe8f197e86415fc7f0a74eda9d312128b9473eda"
        ],
        [
            "by apply/eqP; apply: exponentP w Ww; apply: exponent_Ohm1_class2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{sXG sAG} sXAG: XA \\subset G by rewrite join_subG sXG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{sXAG} nilXA: nilpotent XA := nilpotentS sXAG (pgroup_nil pG).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sYXA: Y \\subset XA by rewrite defY defXA mulgS ?subsetIl.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -[Y](nilpotent_sub_norm nilXA) {nilXA sYXA}//= -/Y -/XA.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "suffices: 'N_XA('Ohm_1(Y)) \\subset Y by apply/subset_trans/setIS/gFnorms.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "rewrite {XA}defXA -group_modl ?normsG /= -/W ?{W}defW ?mulG_subl //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite {Y}defY mulgS // subsetI subsetIl {CA C}sub_astabQ subIset ?nZA //= -/Z.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (subset_trans (quotient_subnorm _ _ _)) //= quotientMidr /= -/Z.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -quotient_sub1 ?subIset ?cent_norm ?orbT //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (subset_trans (quotientI _ _ _)) ?coprime_TIg //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite (@pnat_coprime p) // -/(p.-group _) ?quotient_pgroup {pA}//= -pgroupE.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -(setIidPr (cent_sub _)) p'group_quotient_cent_prime //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (dvdn_trans (dvdn_quotient _ _)) ?order_dvdn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SCNseries.",
            "VernacEndSegment",
            "6e25e65fc02bcb1a4b5c115e216aab543a3a386b"
        ],
        [
            "Lemma Ohm1_cent_max_normal_abelem Z : odd p -> p.-group G -> [max Z | Z <| G & p.-abelem Z] -> 'Ohm_1('C_G(Z)) = Z.",
            "VernacStartTheoremProof",
            "52fd41e52f39b2952b62abece67901da5d831052"
        ],
        [
            "move=> p_odd pG; set X := 'Ohm_1('C_G(Z)).",
            "VernacExtend",
            "fd0300d8899563f42d81dc09cab8269e61be7289"
        ],
        [
            "case/maxgroupP=> /andP[nsZG abelZ] maxZ.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have [sZG nZG] := andP nsZG; have [_ cZZ expZp] := and3P abelZ.",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "have{nZG} nsXG: X <| G by rewrite gFnormal_trans ?norm_normalI ?norms_cent.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have cZX : X \\subset 'C(Z) by apply/gFsub_trans/subsetIr.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{sZG expZp} sZX: Z \\subset X.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite [X](OhmE 1 (pgroupS _ pG)) ?subsetIl ?sub_gen //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/subsetP=> x Zx; rewrite !inE ?(subsetP sZG) ?(subsetP cZZ) //=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "by rewrite (exponentP expZp).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "suffices{sZX} expXp: (exponent X %| p).",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "apply/eqP; rewrite eqEsubset sZX andbT -quotient_sub1 ?cents_norm //= -/X.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "have pGq: p.-group (G / Z) by rewrite quotient_pgroup.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (TI_center_nil (pgroup_nil pGq)) ?quotient_normal //= -/X setIC.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/eqP/trivgPn=> [[Zd]]; rewrite inE -!cycle_subG -cycle_eq1 -subG1 /= -/X.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "case/andP=> /sub_center_normal nsZdG.",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "have{nsZdG} [D defD sZD nsDG] := inv_quotientN nsZG nsZdG; rewrite defD.",
            "VernacExtend",
            "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
        ],
        [
            "have sDG := normal_sub nsDG; have nsZD := normalS sZD sDG nsZG.",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "rewrite quotientSGK ?quotient_sub1 ?normal_norm //= -/X => sDX /negP[].",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "rewrite (maxZ D) // nsDG andbA (pgroupS sDG) ?(dvdn_trans (exponentS sDX)) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have sZZD: Z \\subset 'Z(D) by rewrite subsetI sZD centsC (subset_trans sDX).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite (cyclic_factor_abelian sZZD) //= -defD cycle_cyclic.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose normal_abelian := [pred A : {group gT} | A <| G & abelian A].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have{nsZG cZZ} normal_abelian_Z : normal_abelian Z by apply/andP.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{normal_abelian_Z} [A maxA sZA] := maxgroup_exists normal_abelian_Z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have SCN_A : A \\in 'SCN(G) by apply: max_SCN pG maxA.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "move/maxgroupp: maxA => /andP[nsAG cAA] {normal_abelian}.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "have pA := pgroupS (normal_sub nsAG) pG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have{abelZ maxZ nsAG cAA sZA} defA1: 'Ohm_1(A) = Z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have: Z \\subset 'Ohm_1(A) by rewrite -(Ohm1_id abelZ) OhmS.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by apply: maxZ; rewrite Ohm1_abelem ?gFnormal_trans.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{SCN_A} sX'A: X^`(1) \\subset A.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sX_CWA1 : X \\subset 'C('Ohm_1(A)) :&: 'C_G(A / 'Ohm_1(A) | 'Q).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite subsetI /X -defA1 (Ohm1_stab_Ohm1_SCN_series _ p_odd) //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite gFsub_trans ?subsetIr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: subset_trans (der1_stab_Ohm1_SCN_series SCN_A); rewrite commgSS.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "pose genXp := [pred U : {group gT} | 'Ohm_1(U) == U & ~~ (exponent U %| p)].",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "apply/idPn=> expXp'; have genXp_X: genXp [group of X] by rewrite /= Ohm_id eqxx.",
            "VernacExtend",
            "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
        ],
        [
            "have{genXp_X expXp'} [U] := mingroup_exists genXp_X; case/mingroupP; case/andP.",
            "VernacExtend",
            "d45c78386900c8736cebb7d406968b6d8554836b"
        ],
        [
            "move/eqP=> defU1 expUp' minU sUX; case/negP: expUp'.",
            "VernacExtend",
            "a01b3d93f426ff68d360351709a5fa5af822af32"
        ],
        [
            "have{nsXG} pU := pgroupS (subset_trans sUX (normal_sub nsXG)) pG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case gsetU1: (group_set 'Ldiv_p(U)).",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite -defU1 (OhmE 1 pU) gen_set_id // -sub_LdivT subsetIr.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move: gsetU1; rewrite /group_set 2!inE group1 expg1n eqxx; case/subsetPn=> xy.",
            "VernacExtend",
            "d7214ac8fd48f4d1cd143edd9d16f6d28386a302"
        ],
        [
            "case/imset2P=> x y; rewrite !inE => /andP[Ux xp1] /andP[Uy yp1] ->{xy}.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "rewrite groupM //= => nt_xyp; pose XY := <[x]> <*> <[y]>.",
            "VernacExtend",
            "9d8fbc7ebaadb48200c542591ceec3e0f555a812"
        ],
        [
            "have{yp1 nt_xyp} defXY: XY = U.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have sXY_U: XY \\subset U by rewrite join_subG !cycle_subG Ux Uy.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite [XY]minU //= eqEsubset Ohm_sub (OhmE 1 (pgroupS _ pU)) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite /= joing_idl joing_idr genS; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite subsetI subset_gen subUset !sub1set !inE xp1 yp1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: contra nt_xyp => /exponentP-> //.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "by rewrite groupMl mem_gen // (set21, set22).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have: <[x]> <|<| U by rewrite nilpotent_subnormal ?(pgroup_nil pU) ?cycle_subG.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "case/subnormalEsupport=> [defU | /=].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by apply: dvdn_trans (exponent_dvdn U) _; rewrite -defU order_dvdn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "set V := <<class_support <[x]> U>>; case/andP=> sVU ltVU.",
            "VernacExtend",
            "e71d6651fc28367ed47c77bb86146155c9f63690"
        ],
        [
            "have{genXp minU xp1 sVU ltVU} expVp: exponent V %| p.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: contraR ltVU => expVp'; rewrite [V]minU //= expVp' eqEsubset Ohm_sub.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "rewrite (OhmE 1 (pgroupS sVU pU)) genS //= subsetI subset_gen class_supportEr.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply/bigcupsP=> z _; apply/subsetP=> v Vv.",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by rewrite inE -order_dvdn (dvdn_trans (order_dvdG Vv)) // cardJg order_dvdn.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{A pA defA1 sX'A V expVp} Zxy: [~ x, y] \\in Z.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -defA1 (OhmE 1 pA) mem_gen // !inE (exponentP expVp).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite (subsetP sX'A) //= mem_commg ?(subsetP sUX).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite groupMl -1?[x^-1]conjg1 mem_gen // mem_imset2 // ?groupV cycle_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{Zxy sUX cZX} cXYxy: [~ x, y] \\in 'C(XY).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite centsC in cZX; rewrite defXY (subsetP (centS sUX)) ?(subsetP cZX).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -defU1 exponent_Ohm1_class2 // nil_class2 -defXY der1_joing_cycles //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite subsetI {1}defXY !cycle_subG groupR.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma critical_class2 H : critical H G -> nil_class H <= 2.",
            "VernacStartTheoremProof",
            "3906cb4eebe53f14624ab66d3fdaa80d9db4d1df"
        ],
        [
            "case=> [chH _ sRZ _].",
            "VernacExtend",
            "e00fff71ff314c991514fc71c41a3556702e444a"
        ],
        [
            "by rewrite nil_class2 (subset_trans _ sRZ) ?commSg // char_sub.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Thompson_critical : p.-group G -> {K : {group gT} | critical K G}.",
            "VernacStartTheoremProof",
            "cb81def48be64b9871009223b3804b77bb1e2fce"
        ],
        [
            "move=> pG; pose qcr A := (A \\char G) && ('Phi(A) :|: [~: G, A] \\subset 'Z(A)).",
            "VernacExtend",
            "fef3c4a8f7fcf70b0824f3cce5fb58f2e0ef07fd"
        ],
        [
            "have [|K]:= @maxgroup_exists _ qcr 1 _.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite /qcr char1 center1 commG1 subUset Phi_sub subxx.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case/maxgroupP; rewrite {}/qcr subUset => /and3P[chK sPhiZ sRZ] maxK _.",
            "VernacExtend",
            "ba44c9d0281a02110ce54645304e6d990debd9c0"
        ],
        [
            "have sKG := char_sub chK; have nKG := char_normal chK.",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "exists K; split=> //; apply/eqP; rewrite eqEsubset andbC setSI //=.",
            "VernacExtend",
            "5c45ac2ec12b32229c3c37934460cd359e1799c7"
        ],
        [
            "have chZ: 'Z(K) \\char G by [apply: subcent_char]; have nZG := char_norm chZ.",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "have chC: 'C_G(K) \\char G by apply: subcent_char chK.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite -quotient_sub1; last by rewrite subIset // char_norm.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply/trivgP; apply: (TI_center_nil (quotient_nil _ (pgroup_nil pG))).",
            "VernacExtend",
            "8d9dae45eeb3a769b8a865cef8ae476451f63802"
        ],
        [
            "by rewrite quotient_normal ?norm_normalI ?norms_cent ?normal_norm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply: TI_Ohm1; apply/trivgP; rewrite -trivg_quotient -sub_cosetpre_quo //.",
            "VernacExtend",
            "7d4450169cd8610cf3ff90cd2eeb2f84258ab13d"
        ],
        [
            "rewrite morphpreI quotientGK /=; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: normalS (char_normal chZ); rewrite ?subsetIl ?setSI.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "set X := _ :&: _; pose gX := [group of X].",
            "VernacExtend",
            "dda58a04ca4da9adf6d016079f462c4d6ff69ca8"
        ],
        [
            "have sXG: X \\subset G by rewrite subIset ?subsetIl.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have cXK: K \\subset 'C(gX) by rewrite centsC 2?subIset // subxx orbT.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite subsetI centsC cXK andbT -(mul1g K) -mulSG mul1g -(cent_joinEr cXK).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite [_ <*> K]maxK ?joing_subr //= andbC (cent_joinEr cXK).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -center_prod // (subset_trans _ (mulG_subr _ _)).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite charM 1?charI ?(char_from_quotient (normal_cosetpre _)) //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite cosetpreK !gFchar_trans.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite (@Phi_mulg p) ?(pgroupS _ pG) // subUset commGC commMG; last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite normsR ?(normsG sKG) // cents_norm // centsC.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite !mul_subG 1?commGC //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: subset_trans (commgS _ (subsetIr _ _)) _.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "rewrite -quotient_cents2 ?subsetIl // centsC // cosetpreK //.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "exact/gFsub_trans/subsetIr.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "have nZX := subset_trans sXG nZG; have pX : p.-group gX by apply: pgroupS pG.",
            "VernacExtend",
            "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
        ],
        [
            "rewrite -quotient_sub1 ?gFsub_trans //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "have pXZ: p.-group (gX / 'Z(K)) by apply: morphim_pgroup.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (quotient_Phi pX nZX) subG1 (trivg_Phi pXZ).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "apply: (abelemS (quotientS _ (subsetIr _ _))); rewrite /= cosetpreK /=.",
            "VernacExtend",
            "56c014161b39aecfb3c54301c2409dba4e8e1857"
        ],
        [
            "have pZ: p.-group 'Z(G / 'Z(K)).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite (pgroupS (center_sub _)) ?morphim_pgroup.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by rewrite Ohm1_abelem ?center_abelian.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma critical_p_stab_Aut H : critical H G -> p.-group G -> p.-group 'C(H | [Aut G]).",
            "VernacStartTheoremProof",
            "47fc592c7334a655eadfbc05d9f4a2e85b3e4c09"
        ],
        [
            "move=> [chH sPhiZ sRZ eqCZ] pG; have sHG := char_sub chH.",
            "VernacExtend",
            "ccd83c252dcbae3d56f3d057fcb8217878b51901"
        ],
        [
            "pose G' := (sdpair1 [Aut G] @* G)%G; pose H' := (sdpair1 [Aut G] @* H)%G.",
            "VernacExtend",
            "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
        ],
        [
            "apply/pgroupP=> q pr_q; case/Cauchy=> //= f cHF; move: (cHF); rewrite astab_ract.",
            "VernacExtend",
            "5a11665c72e6e47b8608529821902a69b0516db6"
        ],
        [
            "case/setIP=> Af cHFP ofq; rewrite -cycle_subG in cHF; apply: (pgroupP pG) => //.",
            "VernacExtend",
            "7b10d760ecce4015b43936eb8ee3a43374e85678"
        ],
        [
            "pose F' := (sdpair2 [Aut G] @* <[f]>)%G.",
            "VernacExtend",
            "3c5f04de94609049d978298aa02ff35fb35ea7c7"
        ],
        [
            "have trHF: [~: H', F'] = 1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply/trivgP; rewrite gen_subG; apply/subsetP=> u; case/imset2P=> x' a'.",
            "VernacExtend",
            "d2b5cda677db7cccf5ef77a900a1540a70cad316"
        ],
        [
            "case/morphimP=> x Gx Hx ->; case/morphimP=> a Aa Fa -> -> {u x' a'}.",
            "VernacExtend",
            "5887f8022a4f6389ac249140364feb69c4f18799"
        ],
        [
            "by rewrite inE commgEl -sdpair_act ?(astab_act (subsetP cHF _ Fa) Hx) ?mulVg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have sGH_H: [~: G', H'] \\subset H'.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "by rewrite -morphimR ?(char_sub chH) // morphimS // commg_subr char_norm.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have{trHF sGH_H} trFGH: [~: F', G', H'] = 1.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "apply: three_subgroup; last by rewrite trHF comm1G.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply/trivgP; rewrite -trHF commSg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "apply/negP=> qG; case: (qG); rewrite -ofq.",
            "VernacExtend",
            "cbc4844cce0ad896dcb7bc2a887cf6aae5047c5f"
        ],
        [
            "suffices ->: f = 1 by rewrite order1 dvd1n.",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "apply/permP=> x; rewrite perm1; case Gx: (x \\in G); last first.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: out_perm (negbT Gx); case/setIdP: Af.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have Gfx: f x \\in G by rewrite -(im_autm Af) -{1}(autmE Af) mem_morphim.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "pose y := x^-1 * f x; have Gy: y \\in G by rewrite groupMl ?groupV.",
            "VernacExtend",
            "c09d1274557abc8857ed64eb3450db2da906c185"
        ],
        [
            "have [inj1 inj2] := (injm_sdpair1 [Aut G], injm_sdpair2 [Aut G]).",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have Hy: y \\in H.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "rewrite (subsetP (center_sub H)) // -eqCZ -cycle_subG.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite -(injmSK inj1) ?cycle_subG // injm_subcent // subsetI.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "rewrite morphimS ?morphim_cycle ?cycle_subG //=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "suffices: sdpair1 [Aut G] y \\in [~: G', F'].",
            "VernacExtend",
            "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
        ],
        [
            "by rewrite commGC; apply: subsetP; apply/commG1P.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite morphM ?groupV ?morphV //= sdpair_act // -commgEl.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite mem_commg ?mem_morphim ?cycle_id.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "have fy: f y = y := astabP cHFP _ Hy.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "have: (f ^+ q) x = x * y ^+ q.",
            "VernacExtend",
            "406cde1174359c53bf162a2a18c4eede395555f9"
        ],
        [
            "elim: (q) => [|i IHi]; first by rewrite perm1 mulg1.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite expgSr permM {}IHi -(autmE Af) morphM ?morphX ?groupX //= autmE.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by rewrite fy expgS mulgA mulKVg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "move/eqP; rewrite -{1}ofq expg_order perm1 eq_mulVg1 mulKg -order_dvdn.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "case/primeP: pr_q => _ pr_q /pr_q; rewrite order_eq1 -eq_mulVg1.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by case: eqP => //= _ /eqP oyq; case: qG; rewrite -oyq order_dvdG.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SCN.",
            "VernacEndSegment",
            "2fc259d0e69a2eb225e63aa0f41d30c1f33e279a"
        ],
        [
            "Arguments SCN_P {gT G A}.",
            "VernacArguments",
            "9b493f8e4abf30865851b84b3cb408292048fa1b"
        ]
    ],
    "proofs": [
        {
            "name": "Fitting_group_set",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "suffices [F ->]: exists F : {group gT}, Fitting G = F by apply: groupP.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "rewrite /Fitting; elim: primes (primes_uniq #|G|) => [_|p r IHr] /=.",
                        "VernacExtend",
                        "44a8e3b453c9376c468b4e3e0046f5ac33e11d6d"
                    ]
                },
                {
                    "command": [
                        "by exists [1 gT]%G; rewrite big_nil.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case/andP=> rp /IHr[F defF]; rewrite big_cons defF.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "suffices{IHr} /and3P[p'F sFG nFG]: p^'.-group F && (F <| G).",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "have nFGp: 'O_p(G) \\subset 'N(F) := gFsub_trans _ nFG.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have pGp: p.-group('O_p(G)) := pcore_pgroup p G.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have{pGp} tiGpF: 'O_p(G) :&: F = 1 by rewrite coprime_TIg ?(pnat_coprime pGp).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "exists ('O_p(G) <*> F)%G; rewrite dprodEY // (sameP commG1P trivgP) -tiGpF.",
                        "VernacExtend",
                        "2c1d6d88006c874ea88e33b5c1d1f8df7afea149"
                    ]
                },
                {
                    "command": [
                        "by rewrite subsetI commg_subl commg_subr (subset_trans sFG) // gFnorm.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move/bigdprodWY: defF => <- {F}; elim: r rp => [_|q r IHr] /=.",
                        "VernacExtend",
                        "06880003f1108b2eb418688c7bc6bf1013cf0e4c"
                    ]
                },
                {
                    "command": [
                        "by rewrite big_nil gen0 pgroup1 normal1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite inE eq_sym big_cons -joingE -joing_idr => /norP[qp /IHr {IHr}].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "set F := <<_>> => /andP[p'F nsFG].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite norm_joinEl /= -/F; last exact/gFsub_trans/normal_norm.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite pgroupM p'F normalM ?pcore_normal //= (pi_pgroup (pcore_pgroup q G)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "p_maximal_normal",
            "line_nb": 59,
            "steps": [
                {
                    "command": [
                        "case/maxgroupP=> /andP[sMP sPM] maxM; rewrite /normal sMP.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "have:= subsetIl P 'N(M); rewrite subEproper.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "case/predU1P=> [/setIidPl-> // | /maxM/= SNM]; case/negP: sPM.",
                        "VernacExtend",
                        "5887f8022a4f6389ac249140364feb69c4f18799"
                    ]
                },
                {
                    "command": [
                        "rewrite (nilpotent_sub_norm (pgroup_nil pP) sMP) //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite SNM // subsetI sMP normG.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "p_maximal_index",
            "line_nb": 66,
            "steps": [
                {
                    "command": [
                        "move=> maxM; have nM := p_maximal_normal maxM.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "rewrite -card_quotient ?normal_norm //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -(quotient_maximal _ nM) ?normal_refl // trivg_quotient in maxM.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case/maxgroupP: maxM; rewrite properEneq eq_sym sub1G andbT /=.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "case/(pgroup_pdiv (quotient_pgroup M pP)) => p_pr /Cauchy[] // xq.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite /order -cycle_subG subEproper => /predU1P[-> // | sxPq oxq_p _].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "by move/(_ _ sxPq (sub1G _)) => xq1; rewrite -oxq_p xq1 cards1 in p_pr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "p_index_maximal",
            "line_nb": 75,
            "steps": [
                {
                    "command": [
                        "move=> sMP /primeP[lt1PM pr_PM].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "apply/maxgroupP; rewrite properEcard sMP -(Lagrange sMP).",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "rewrite -{1}(muln1 #|M|) ltn_pmul2l //; split=> // H sHP sMH.",
                        "VernacExtend",
                        "80e7cce19c53eb5d5a21aafd83e552d37e23084a"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite eq_sym eqEcard sMH.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "case/orP: (pr_PM _ (indexSg sMH (proper_sub sHP))) => /eqP iM.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(Lagrange sMH) iM muln1 /=.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by have:= proper_card sHP; rewrite -(Lagrange sMH) iM Lagrange ?ltnn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Phi_sub",
            "line_nb": 88,
            "steps": [
                {
                    "command": [
                        "by rewrite bigcap_inf // /maximal_eq eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Phi_sub_max",
            "line_nb": 91,
            "steps": [
                {
                    "command": [
                        "by move=> maxM; rewrite bigcap_inf // /maximal_eq predU1r.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Phi_proper",
            "line_nb": 94,
            "steps": [
                {
                    "command": [
                        "move/eqP; case/maximal_exists: (sub1G G) => [<- //| [M maxM _] _].",
                        "VernacExtend",
                        "a01b3d93f426ff68d360351709a5fa5af822af32"
                    ]
                },
                {
                    "command": [
                        "exact: sub_proper_trans (Phi_sub_max maxM) (maxgroupp maxM).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Phi_nongen",
            "line_nb": 98,
            "steps": [
                {
                    "command": [
                        "move=> defG; have: <<X>> \\subset G by rewrite -{1}defG genS ?subsetUr.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "case/maximal_exists=> //= [[M maxM]]; rewrite gen_subG => sXM.",
                        "VernacExtend",
                        "ba44c9d0281a02110ce54645304e6d990debd9c0"
                    ]
                },
                {
                    "command": [
                        "case/andP: (maxgroupp maxM) => _ /negP[].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite -defG gen_subG subUset Phi_sub_max.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Frattini_continuous",
            "line_nb": 104,
            "steps": [
                {
                    "command": [
                        "apply/bigcapsP=> M maxM; rewrite sub_morphim_pre ?Phi_sub // bigcap_inf //.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "have {2}<-: f @*^-1 (f @* G) = G by rewrite morphimGK ?subsetIl.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite morphpre_maximal_eq ?maxM //; case/maximal_eqP: maxM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Phi_char",
            "line_nb": 115,
            "steps": [
                {
                    "command": [
                        "exact: gFchar.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Phi_normal",
            "line_nb": 118,
            "steps": [
                {
                    "command": [
                        "exact: gFnormal.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "injm_Phi",
            "line_nb": 121,
            "steps": [
                {
                    "command": [
                        "exact: injmF.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isog_Phi",
            "line_nb": 124,
            "steps": [
                {
                    "command": [
                        "exact: gFisog.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "PhiJ",
            "line_nb": 127,
            "steps": [
                {
                    "command": [
                        "rewrite -{1}(setIid G) -(setIidPr (Phi_sub G)) -!morphim_conj.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite injm_Phi ?injm_conj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Phi_quotient_id",
            "line_nb": 135,
            "steps": [
                {
                    "command": [
                        "apply/trivgP; rewrite -cosetpreSK cosetpre1 /=; apply/bigcapsP=> M maxM.",
                        "VernacExtend",
                        "da24caf87c1bbbad0538b8be68905ec456c78aa7"
                    ]
                },
                {
                    "command": [
                        "have nPhi := Phi_normal G; have nPhiM: 'Phi(G) <| M.",
                        "VernacExtend",
                        "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
                    ]
                },
                {
                    "command": [
                        "by apply: normalS nPhi; [apply: bigcap_inf | case/maximal_eqP: maxM].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite sub_cosetpre_quo ?bigcap_inf // quotient_maximal_eq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Phi_quotient_abelem",
            "line_nb": 181,
            "steps": [
                {
                    "command": [
                        "by rewrite -trivg_Phi ?morphim_pgroup //= Phi_quotient_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Phi_joing",
            "line_nb": 184,
            "steps": [
                {
                    "command": [
                        "have [sPhiP nPhiP] := andP (Phi_normal P).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite eqEsubset join_subG.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "case: (eqsVneq P 1) => [-> | ntP] in sPhiP *.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite /= (trivgP sPhiP) sub1G der_subS Mho_sub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [p_pr _ _] := pgroup_pdiv pP ntP.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [abP x1P] := abelemP p_pr Phi_quotient_abelem.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/andP; split.",
                        "VernacExtend",
                        "b146763f64aeff143afb9ba1b7b1a677b4726e0f"
                    ]
                },
                {
                    "command": [
                        "have nMP: P \\subset 'N(P^`(1) <*> 'Mho^1(P)) by rewrite normsY // !gFnorm.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -quotient_sub1 ?gFsub_trans //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "suffices <-: 'Phi(P / (P^`(1) <*> 'Mho^1(P))) = 1 by apply: morphimF.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite (trivg_Phi (morphim_pgroup _ pP)) /= -quotientE.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "apply/abelemP=> //; rewrite [abelian _]quotient_cents2 ?joing_subl //.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "split=> // _ /morphimP[x Nx Px ->] /=.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite -morphX //= coset_id // (MhoE 1 pP) joing_idr expn1.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite mem_gen //; apply/setUP; right; apply: mem_imset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -quotient_cents2 // [_ \\subset 'C(_)]abP (MhoE 1 pP) gen_subG /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply/subsetP=> _ /imsetP[x Px ->]; rewrite expn1.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "have nPhi_x: x \\in 'N('Phi(P)) by apply: (subsetP nPhiP).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite coset_idr ?groupX ?morphX ?x1P ?mem_morphim.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Phi_Mho",
            "line_nb": 205,
            "steps": [
                {
                    "command": [
                        "by move=> cPP; rewrite Phi_joing (derG1P cPP) joing1G.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "PhiS",
            "line_nb": 212,
            "steps": [
                {
                    "command": [
                        "move=> pH sGH; rewrite (Phi_joing pH) (Phi_joing (pgroupS sGH pH)).",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite genS // setUSS ?dergS ?MhoS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "morphim_Phi",
            "line_nb": 216,
            "steps": [
                {
                    "command": [
                        "move=> pP sPD; rewrite !(@Phi_joing _ p) ?morphim_pgroup //.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "rewrite morphim_gen ?subUset ?gFsub_trans // morphimU -joingE.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite morphimR ?morphim_Mho.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "quotient_Phi",
            "line_nb": 221,
            "steps": [
                {
                    "command": [
                        "exact: morphim_Phi.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Phi_min",
            "line_nb": 224,
            "steps": [
                {
                    "command": [
                        "move=> pG nHG; rewrite -trivg_Phi ?quotient_pgroup // -subG1 /=.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by rewrite -(quotient_Phi pG) ?quotient_sub1 // gFsub_trans.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Phi_cprod",
            "line_nb": 228,
            "steps": [
                {
                    "command": [
                        "move=> pG defG; have [_ /mulG_sub[sHG sKG] cHK] := cprodP defG.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "rewrite cprodEY /=; last by rewrite (centSS (Phi_sub _) (Phi_sub _)).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite !(Phi_joing (pgroupS _ pG)) //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have /cprodP[_ <- /cent_joinEr <-] := der_cprod 1 defG.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have /cprodP[_ <- /cent_joinEr <-] := Mho_cprod 1 defG.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite !joingA /= -!(joingA H^`(1)) (joingC K^`(1)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Phi_mulg",
            "line_nb": 236,
            "steps": [
                {
                    "command": [
                        "move=> pH pK cHK; have defHK := cprodEY cHK.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "have [|_ ->] /= := cprodP (Phi_cprod _ defHK); rewrite cent_joinEr //.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "by rewrite pgroupM pH.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "charsimpleP",
            "line_nb": 241,
            "steps": [
                {
                    "command": [
                        "apply: (iffP mingroupP); rewrite char_refl andbT => -[ntG simG].",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "by split=> // K ntK chK; apply: simG; rewrite ?ntK // char_sub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by split=> // K /andP[ntK chK] _; apply: simG.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fitting_normal",
            "line_nb": 250,
            "steps": [
                {
                    "command": [
                        "rewrite -['F(G)](bigdprodWY (erefl 'F(G))).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "elim/big_rec: _ => [|p H _ nsHG]; first by rewrite gen0 normal1.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -[<<_>>]joing_idr normalY ?pcore_normal.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fitting_sub",
            "line_nb": 255,
            "steps": [
                {
                    "command": [
                        "by rewrite normal_sub ?Fitting_normal.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fitting_nil",
            "line_nb": 258,
            "steps": [
                {
                    "command": [
                        "apply: (bigdprod_nil (erefl 'F(G))) => p _.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "exact: pgroup_nil (pcore_pgroup p G).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fitting_max",
            "line_nb": 262,
            "steps": [
                {
                    "command": [
                        "move=> nsHG nilH; rewrite -(Sylow_gen H) gen_subG.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "apply/bigcupsP=> P /SylowP[p _ sylP].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "case Gp: (p \\in \\pi(G)); last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite card1_trivg ?sub1G // (card_Hall sylP).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite part_p'nat // (pnat_dvd (cardSg (normal_sub nsHG))) //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite /pnat cardG_gt0 all_predC has_pred1 Gp.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite {P sylP}(nilpotent_Hall_pcore nilH sylP).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -(bigdprodWY (erefl 'F(G))) sub_gen //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -(filter_pi_of (ltnSn _)) big_filter big_mkord.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply: (bigcup_max (Sub p _)) => //= [|_].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by have:= Gp; rewrite ltnS mem_primes => /and3P[_ ntG /dvdn_leq->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite pcore_max ?pcore_pgroup ?gFnormal_trans.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pcore_Fitting",
            "line_nb": 276,
            "steps": [
                {
                    "command": [
                        "by rewrite pcore_max ?pcore_pgroup ?gFnormal_trans ?Fitting_normal.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nilpotent_Fitting",
            "line_nb": 284,
            "steps": [
                {
                    "command": [
                        "by move=> nilG; apply/eqP; rewrite eqEsubset Fitting_sub Fitting_max.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fitting_eq_pcore",
            "line_nb": 287,
            "steps": [
                {
                    "command": [
                        "move=> p'G1; have /dprodP[_ /= <- _ _] := nilpotent_pcoreC p (Fitting_nil G).",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "by rewrite p_core_Fitting ['O_p^'(_)](trivgP _) ?mulg1 // -p'G1 pcore_Fitting.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FittingEgen",
            "line_nb": 291,
            "steps": [
                {
                    "command": [
                        "apply/eqP; rewrite eqEsubset gen_subG /=.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "rewrite -{1}(bigdprodWY (erefl 'F(G))) (big_nth 0) big_mkord genS.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply/bigcupsP=> p _; rewrite -p_core_Fitting pcore_sub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply/bigcupsP=> [[i /= lti]] _; set p := nth _ _ i.",
                        "VernacExtend",
                        "ac591433247162d5294d7c948ab3b309c2d6e368"
                    ]
                },
                {
                    "command": [
                        "have pi_p: p \\in \\pi(G) by rewrite mem_nth.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have p_dv_G: p %| #|G| by rewrite mem_primes in pi_p; case/and3P: pi_p.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have lepG: p < #|G|.+1 by rewrite ltnS dvdn_leq.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite (bigcup_max (Ordinal lepG)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FittingS",
            "line_nb": 309,
            "steps": [
                {
                    "command": [
                        "move=> sHG; rewrite -{2}(setIidPl sHG).",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "do 2!rewrite -(morphim_idm (subsetIl H _)) morphimIdom; apply: morphim_Fitting.",
                        "VernacExtend",
                        "3b71ea6fefa1feeb046de1d53cd6239f33ef30eb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fitting_char",
            "line_nb": 324,
            "steps": [
                {
                    "command": [
                        "exact: gFchar.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "injm_Fitting",
            "line_nb": 327,
            "steps": [
                {
                    "command": [
                        "exact: injmF.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isog_Fitting",
            "line_nb": 330,
            "steps": [
                {
                    "command": [
                        "exact: gFisog.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "minnormal_charsimple",
            "line_nb": 337,
            "steps": [
                {
                    "command": [
                        "case/mingroupP=> /andP[ntH nHG] minH.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "apply/charsimpleP; split=> // K ntK chK.",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "by apply: minH; rewrite ?ntK (char_sub chK, char_norm_trans chK).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxnormal_charsimple",
            "line_nb": 342,
            "steps": [
                {
                    "command": [
                        "case/andP=> sGL nGL /maxgroupP[/andP[/andP[sHG not_sGH] nHL] maxH].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "have nHG: G \\subset 'N(H) := subset_trans sGL nHL.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/charsimpleP; rewrite -subG1 quotient_sub1 //; split=> // HK ntHK chHK.",
                        "VernacExtend",
                        "877072eca2b60ab32889d658e076eb026578eeca"
                    ]
                },
                {
                    "command": [
                        "case/(inv_quotientN _): (char_normal chHK) => [|K defHK sHK]; first exact/andP.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "case/andP; rewrite subEproper defHK => /predU1P[-> // | ltKG] nKG.",
                        "VernacExtend",
                        "ba44c9d0281a02110ce54645304e6d990debd9c0"
                    ]
                },
                {
                    "command": [
                        "have nHK: H <| K by rewrite /normal sHK (subset_trans (proper_sub ltKG)).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "case/negP: ntHK; rewrite defHK -subG1 quotient_sub1 ?normal_norm //.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "rewrite (maxH K) // ltKG -(quotientGK nHK) -defHK norm_quotient_pre //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (char_norm_trans chHK) ?quotient_norms.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "abelem_split_dprod",
            "line_nb": 353,
            "steps": [
                {
                    "command": [
                        "move=> abelA sBA; have [_ cAA _]:= and3P abelA.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "case/splitsP: (abelem_splits abelA sBA) => C /complP[tiBC defA].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by exists C; rewrite dprodE // (centSS _ sBA cAA) // -defA mulG_subr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "p_abelem_split1",
            "line_nb": 358,
            "steps": [
                {
                    "command": [
                        "move=> abelA Ax; have sxA: <[x]> \\subset A by rewrite cycle_subG.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "have [B defA] := abelem_split_dprod abelA sxA.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [_ defxB _ ti_xB] := dprodP defA.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have sBA: B \\subset A by rewrite -defxB mulG_subr.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by exists B; split; rewrite // -defxB (TI_cardMg ti_xB) mulKn ?order_gt0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "abelem_charsimple",
            "line_nb": 365,
            "steps": [
                {
                    "command": [
                        "move=> abelG ntG; apply/charsimpleP; split=> // K ntK /charP[sKG chK].",
                        "VernacExtend",
                        "b7d55d5cc9e609b184db748f6780e12224901e48"
                    ]
                },
                {
                    "command": [
                        "case/eqVproper: sKG => // /properP[sKG [x Gx notKx]].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "have ox := abelem_order_p abelG Gx (group1_contra notKx).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [A [sAG oA defA]] := p_abelem_split1 abelG Gx.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "case/trivgPn: ntK => y Ky nty; have Gy := subsetP sKG y Ky.",
                        "VernacExtend",
                        "c6460972b7febd45d9a49b3c1ce4f3fe36b53169"
                    ]
                },
                {
                    "command": [
                        "have{nty} oy := abelem_order_p abelG Gy nty.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [B [sBG oB defB]] := p_abelem_split1 abelG Gy.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have: isog A B; last case/isogP=> fAB injAB defAB.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite (isog_abelem_card _ (abelemS sAG abelG)) (abelemS sBG) //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite oA oB ox oy.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have: isog <[x]> <[y]>; last case/isogP=> fxy injxy /= defxy.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite isog_cyclic_card ?cycle_cyclic // [#|_|]oy -ox eqxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have cfxA: fAB @* A \\subset 'C(fxy @* <[x]>).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite defAB defxy; case/dprodP: defB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have injf: 'injm (dprodm defA cfxA).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite injm_dprodm injAB injxy defAB defxy; apply/eqP; case/dprodP: defB.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case/negP: notKx; rewrite -cycle_subG -(injmSK injf) ?cycle_subG //=.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "rewrite morphim_dprodml // defxy cycle_subG /= chK //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have [_ {4}<- _ _] := dprodP defB; have [_ {3}<- _ _] := dprodP defA.",
                        "VernacExtend",
                        "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
                    ]
                },
                {
                    "command": [
                        "by rewrite morphim_dprodm // defAB defxy.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "simple_sol_prime",
            "line_nb": 448,
            "steps": [
                {
                    "command": [
                        "move=> solG /simpleP[ntG simG].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "have{solG} cGG: abelian G.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/commG1P; case/simG: (der_normal 1 G) => // /eqP/idPn[].",
                        "VernacExtend",
                        "20ec428e50c31e1399aee62c5a532bc8417a4b29"
                    ]
                },
                {
                    "command": [
                        "by rewrite proper_neq // (sol_der1_proper solG).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: (trivgVpdiv G) ntG => [-> | [p p_pr]]; first by rewrite eqxx.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "case/Cauchy=> // x Gx oxp _; move: p_pr; rewrite -oxp orderE.",
                        "VernacExtend",
                        "dfdf77d8d0d45996a42afec59fe3d2256fc04454"
                    ]
                },
                {
                    "command": [
                        "have: <[x]> <| G by rewrite -sub_abelian_normal ?cycle_subG.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by case/simG=> -> //; rewrite cards1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "charsimple_solvable",
            "line_nb": 458,
            "steps": [
                {
                    "command": [
                        "case/charsimple_dprod=> H [sHG simH [I Aut_I defG]] solG.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "have p_pr: prime #|H| by apply: simple_sol_prime (solvableS sHG solG) simH.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "set p := #|H| in p_pr; apply/is_abelemP; exists p => //.",
                        "VernacExtend",
                        "e5fa4434dbc56b2bf2267c2977c99b02140c974e"
                    ]
                },
                {
                    "command": [
                        "elim/big_rec: _ (G) defG => [_ <-|f B If IH_B M defM]; first exact: abelem1.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have [Af [[_ K _ defB] _ _ _]] := (subsetP Aut_I f If, dprodP defM).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite (dprod_abelem p defM) defB IH_B // andbT -(autmE Af) -morphimEsub //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite morphim_abelem ?abelemE // exponent_dvdn.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite cyclic_abelian ?prime_cyclic.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "solvable_norm_abelem",
            "line_nb": 473,
            "steps": [
                {
                    "command": [
                        "move=> solG /andP[sGL nGL] ntG.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "have [H minH sHG]: {H : {group gT} | minnormal H L & H \\subset G}.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply: mingroup_exists; rewrite ntG.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [nHL ntH abH] := minnormal_solvable minH sHG solG.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by exists H; split; rewrite // /normal (subset_trans sHG).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "trivg_Fitting",
            "line_nb": 480,
            "steps": [
                {
                    "command": [
                        "move=> solG; apply/idP/idP=> [F1 | /eqP->]; last by rewrite gF1.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply/idPn=> /(solvable_norm_abelem solG (normal_refl _))[M [_ nsMG ntM]].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "case/is_abelemP=> p _ /and3P[pM _ _]; case/negP: ntM.",
                        "VernacExtend",
                        "5887f8022a4f6389ac249140364feb69c4f18799"
                    ]
                },
                {
                    "command": [
                        "by rewrite -subG1 -(eqP F1) Fitting_max ?(pgroup_nil pM).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Fitting_pcore",
            "line_nb": 486,
            "steps": [
                {
                    "command": [
                        "apply/eqP; rewrite eqEsubset.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "rewrite (subset_trans _ (pcoreS _ (Fitting_sub _))); last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite subsetI Fitting_sub Fitting_max ?Fitting_nil ?gFnormal_trans.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite (subset_trans _ (FittingS (pcore_sub _ _))) // subsetI pcore_sub.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite pcore_max ?pcore_pgroup ?gFnormal_trans.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "index_maxnormal_sol_prime",
            "line_nb": 496,
            "steps": [
                {
                    "command": [
                        "move=> solG maxH; have nsHG := maxnormal_normal maxH.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "rewrite -card_quotient ?normal_norm // simple_sol_prime ?quotient_sol //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite quotient_simple.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sol_prime_factor_exists",
            "line_nb": 501,
            "steps": [
                {
                    "command": [
                        "move=> solG /ex_maxnormal_ntrivg[H maxH].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by exists H; [apply: maxnormal_normal | apply: index_maxnormal_sol_prime].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "center_special_abelem",
            "line_nb": 508,
            "steps": [
                {
                    "command": [
                        "move=> pG [defPhi defG'].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "have [-> | ntG] := eqsVneq G 1; first by rewrite center1 abelem1.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have [p_pr _ _] := pgroup_pdiv pG ntG.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have fM: {in 'Z(G) &, {morph expgn^~ p : x y / x * y}}.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by move=> x y /setIP[_ /centP cxG] /setIP[/cxG cxy _]; apply: expgMn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite abelemE //= center_abelian; apply/exponentP=> /= z Zz.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "apply: (@kerP _ _ _ (Morphism fM)) => //; apply: subsetP z Zz.",
                        "VernacExtend",
                        "8d9dae45eeb3a769b8a865cef8ae476451f63802"
                    ]
                },
                {
                    "command": [
                        "rewrite -{1}defG' gen_subG; apply/subsetP=> _ /imset2P[x y Gx Gy ->].",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "have Zxy: [~ x, y] \\in 'Z(G) by rewrite -defG' mem_commg.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have Zxp: x ^+ p \\in 'Z(G).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -defPhi (Phi_joing pG) (MhoE 1 pG) joing_idr mem_gen // !inE.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite expn1 orbC (mem_imset (expgn^~ p)).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite mem_morphpre /= ?defG' ?Zxy // inE -commXg; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by red; case/setIP: Zxy => _ /centP->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply/commgP; red; case/setIP: Zxp => _ /centP->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exponent_special",
            "line_nb": 525,
            "steps": [
                {
                    "command": [
                        "move=> pG spG; have [defPhi _] := spG.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "have /and3P[_ _ expZ] := center_special_abelem pG spG.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/exponentP=> x Gx; rewrite expgM (exponentP expZ) // -defPhi.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite (Phi_joing pG) mem_gen // inE orbC (Mho_p_elt 1) ?(mem_p_elt pG).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "extraspecial_prime",
            "line_nb": 587,
            "steps": [
                {
                    "command": [
                        "by case: esS => _ /prime_gt1; rewrite cardG_gt1; case/(pgroup_pdiv pZ).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_center_extraspecial",
            "line_nb": 590,
            "steps": [
                {
                    "command": [
                        "by apply/eqP; apply: (pgroupP pZ); case: esS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "min_card_extraspecial",
            "line_nb": 593,
            "steps": [
                {
                    "command": [
                        "have p_gt1 := prime_gt1 extraspecial_prime.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite leqNgt (card_pgroup pS) ltn_exp2l // ltnS.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: esS => [[_ defS']]; apply: contraL => /(p2group_abelian pS)/derG1P S'1.",
                        "VernacExtend",
                        "d62e4c271de3f2a9ff5062b8b89d3c57d965c518"
                    ]
                },
                {
                    "command": [
                        "by rewrite -defS' S'1 cards1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "p3group_extraspecial",
            "line_nb": 626,
            "steps": [
                {
                    "command": [
                        "move=> pG not_cGG; have /andP[sZG nZG] := center_normal G.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "have ntG: G :!=: 1 by apply: contraNneq not_cGG => ->; apply: abelian1.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have ntZ: 'Z(G) != 1 by rewrite (center_nil_eq1 (pgroup_nil pG)).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [p_pr _ [n oG]] := pgroup_pdiv pG ntG; rewrite oG pfactorK //.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "have [_ _ [m oZ]] := pgroup_pdiv (pgroupS sZG pG) ntZ.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have lt_m1_n: m.+1 < n.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "suffices: 1 < logn p #|(G / 'Z(G))|.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "rewrite card_quotient // -divgS // logn_div ?cardSg //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite oG oZ !pfactorK // ltn_subRL addn1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite ltnNge; apply: contra not_cGG => cycGs.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "apply: cyclic_center_factor_abelian; rewrite (dvdn_prime_cyclic p_pr) //.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite (card_pgroup (quotient_pgroup _ pG)) (dvdn_exp2l _ cycGs).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -{lt_m1_n}(subnKC lt_m1_n) !addSn !ltnS leqn0 in oG *.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case: m => // in oZ oG * => /eqP n2; rewrite {n}n2 in oG.",
                        "VernacExtend",
                        "82d53976234637e3f0907eb36cddf61d028c6306"
                    ]
                },
                {
                    "command": [
                        "exact: card_p3group_extraspecial oZ.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "extraspecial_nonabelian",
            "line_nb": 643,
            "steps": [
                {
                    "command": [
                        "case=> [[_ defG'] oZ]; rewrite /abelian (sameP commG1P eqP).",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "by rewrite -derg1 defG' -cardG_gt1 prime_gt1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exponent_2extraspecial",
            "line_nb": 647,
            "steps": [
                {
                    "command": [
                        "move=> p2G esG; have [spG _] := esG.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "case/dvdn_pfactor: (exponent_special p2G spG) => // k.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite leq_eqVlt ltnS => /predU1P[-> // | lek1] expG.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "case/negP: (extraspecial_nonabelian esG).",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite (@abelem_abelian _ 2) ?exponent2_abelem // expG pfactor_dvdn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "injm_special",
            "line_nb": 654,
            "steps": [
                {
                    "command": [
                        "move=> injf sGD [defPhiG defG'].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by rewrite /special -morphim_der // -injm_Phi // defPhiG defG' injm_center.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "injm_extraspecial",
            "line_nb": 658,
            "steps": [
                {
                    "command": [
                        "move=> injf sGD [spG ZG_pr]; split; first exact: injm_special spG.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -injm_center // card_injm // subIset ?sGD.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isog_special",
            "line_nb": 662,
            "steps": [
                {
                    "command": [
                        "by case/isogP=> f injf <-; apply: injm_special.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isog_extraspecial",
            "line_nb": 665,
            "steps": [
                {
                    "command": [
                        "by case/isogP=> f injf <-; apply: injm_extraspecial.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cprod_extraspecial",
            "line_nb": 668,
            "steps": [
                {
                    "command": [
                        "move=> pG defG ziHK [[PhiH defH'] ZH_pr] [[PhiK defK'] ZK_pr].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "have [_ defHK cHK]:= cprodP defG.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have sZHK: 'Z(H) \\subset 'Z(K).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite subsetI -{1}ziHK subsetIr subIset // centsC cHK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have{sZHK} defZH: 'Z(H) = 'Z(K).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply/eqP; rewrite eqEcard sZHK leq_eqVlt eq_sym -dvdn_prime2 ?cardSg.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have defZ: 'Z(G) = 'Z(K).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by case/cprodP: (center_cprod defG) => /= _ <- _; rewrite defZH mulGid.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "split; first split; rewrite defZ //.",
                        "VernacExtend",
                        "2522bb31d2ee5eb333bb7e2a816e0a3ac64f5b0e"
                    ]
                },
                {
                    "command": [
                        "by have /cprodP[_ <- _] := Phi_cprod pG defG; rewrite PhiH PhiK defZH mulGid.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by have /cprodP[_ <- _] := der_cprod 1 defG; rewrite defH' defK' defZH mulGid.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subcent1_extraspecial_maximal",
            "line_nb": 709,
            "steps": [
                {
                    "command": [
                        "move=> sUG /setDP[Gx not_cUx]; apply/maxgroupP; split=> [|H ltHU sCxH].",
                        "VernacExtend",
                        "b7d55d5cc9e609b184db748f6780e12224901e48"
                    ]
                },
                {
                    "command": [
                        "by rewrite /proper subsetIl subsetI subxx sub_cent1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case/andP: ltHU => sHU not_sHU; have sHG := subset_trans sHU sUG.",
                        "VernacExtend",
                        "c6460972b7febd45d9a49b3c1ce4f3fe36b53169"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite eqEsubset sCxH subsetI sHU /= andbT.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "apply: contraR not_sHU => not_sHCx.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "have maxCx: maximal 'C_G[x] G.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite cent1_extraspecial_maximal //; apply: contra not_cUx.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "by rewrite inE Gx; apply: subsetP (centS sUG) _.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have nsCx := p_maximal_normal pG maxCx.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -(setIidPl sUG) -(mulg_normal_maximal nsCx maxCx sHG) ?subsetI ?sHG //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -group_modr //= setIA (setIidPl sUG) mul_subG.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "split1_extraspecial",
            "line_nb": 745,
            "steps": [
                {
                    "command": [
                        "case/setDP=> Gx notZx; rewrite inE Gx /= in notZx.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "have [[defPhiG defG'] prZ] := esG.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have maxCx: maximal 'C_G[x] G.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite subcent1_extraspecial_maximal // inE notZx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "pose y := repr (G :\\: 'C[x]).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have [Gy not_cxy]: y \\in G /\\ y \\notin 'C[x].",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "move/maxgroupp: maxCx => /properP[_ [t Gt not_cyt]].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by apply/setDP; apply: (mem_repr t); rewrite !inE Gt andbT in not_cyt *.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "pose E := <[x]> <*> <[y]>; pose R := 'C_G(E).",
                        "VernacExtend",
                        "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
                    ]
                },
                {
                    "command": [
                        "exists [group of E]; exists [group of R] => /=.",
                        "VernacExtend",
                        "b4fd873c55fe244e0c2916b430e8a631123420af"
                    ]
                },
                {
                    "command": [
                        "have sEG: E \\subset G by rewrite join_subG !cycle_subG Gx.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [Ex Ey]: x \\in E /\\ y \\in E by rewrite !mem_gen // inE cycle_id ?orbT.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have sZE: 'Z(G) \\subset E.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite (('Z(G) =P E^`(1)) _) ?der_sub // eqEsubset -{2}defG' dergS // andbT.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply: contraR not_cxy => /= not_sZE'.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "rewrite (sameP cent1P commgP) -in_set1 -[[set 1]](prime_TIg prZ not_sZE').",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite /= -defG' inE !mem_commg.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have ziER: E :&: R = 'Z(E) by rewrite setIA (setIidPl sEG).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have cER: R \\subset 'C(E) by rewrite subsetIr.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have iCxG: #|G : 'C_G[x]| = p by apply: p_maximal_index.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have maxR: maximal R 'C_G[x].",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite /R centY !cent_cycle setIA.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite subcent1_extraspecial_maximal ?subsetIl // inE Gy andbT -sub_cent1.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply/subsetPn; exists x; rewrite 1?cent1C // inE Gx cent1id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have sRCx: R \\subset 'C_G[x] by rewrite -cent_cycle setIS ?centS ?joing_subl.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have sCxG: 'C_G[x] \\subset G by rewrite subsetIl.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have sRG: R \\subset G by rewrite subsetIl.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have iRCx: #|'C_G[x] : R| = p by rewrite (p_maximal_index (pgroupS sCxG pG)).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have defG: E * R = G.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -cent_joinEr //= -/R joingC joingA.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have cGx_x: <[x]> \\subset 'C_G[x] by rewrite cycle_subG inE Gx cent1id.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have nsRcx := p_maximal_normal (pgroupS sCxG pG) maxR.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite (norm_joinEr (subset_trans cGx_x (normal_norm nsRcx))).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite (mulg_normal_maximal nsRcx) //=; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite centY !cent_cycle cycle_subG !in_setI Gx cent1id cent1C.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have nsCxG := p_maximal_normal pG maxCx.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have syG: <[y]> \\subset G by rewrite cycle_subG.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite (norm_joinEr (subset_trans syG (normal_norm nsCxG))).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (mulg_normal_maximal nsCxG) //= cycle_subG inE Gy.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have defZR: 'Z(R) = 'Z(G) by rewrite -['Z(R)]setIA -centM defG.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have defZE: 'Z(E) = 'Z(G).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite -defG -center_prod ?mulGSid //= -ziER subsetI center_sub defZR sZE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have [n oG] := p_natP pG.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have n_gt1: n > 1.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite ltnW // -(@leq_exp2l p) // -oG min_card_extraspecial.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have oR: #|R| = (p ^ n.-2)%N.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite -(divg_indexS sRCx) iRCx /= -(divg_indexS sCxG) iCxG /= oG.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite -{1}(subnKC n_gt1) subn2 !expnS !mulKn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have oE: #|E| = (p ^ 3)%N.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite -(@eqn_pmul2r #|R|) ?cardG_gt0 // mul_cardG defG ziER.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite defZE oZ oG -{1}(subnKC n_gt1) oR -expnSr -expnD subn2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite cprodE // oR oG -expnB ?subn2 //; split=> //.",
                        "VernacExtend",
                        "80e7cce19c53eb5d5a21aafd83e552d37e23084a"
                    ]
                },
                {
                    "command": [
                        "by split=> //; apply: card_p3group_extraspecial _ oE _; rewrite // defZE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case: ifP => [cRR | not_cRR]; first by rewrite -defZR (center_idP _).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "split; rewrite /special defZR //.",
                        "VernacExtend",
                        "23414b1aa23418a1670d952f6b338db06304aa88"
                    ]
                },
                {
                    "command": [
                        "have ntR': R^`(1) != 1 by rewrite (sameP eqP commG1P) -abelianE not_cRR.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have pR: p.-group R := pgroupS sRG pG.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have pR': p.-group R^`(1) := pgroupS (der_sub 1 _) pR.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have defR': R^`(1) = 'Z(G).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite eqEcard -{1}defG' dergS //= oZ.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by have [_ _ [k ->]]:= pgroup_pdiv pR' ntR'; rewrite (leq_exp2l 1).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "split=> //; apply/eqP; rewrite eqEsubset -{1}defPhiG -defR' (PhiS pG) //=.",
                        "VernacExtend",
                        "01f04d3f5bba3b876eb4ec7b1c8f26d2e2cced77"
                    ]
                },
                {
                    "command": [
                        "by rewrite (Phi_joing pR) joing_subl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pmaxElem_extraspecial",
            "line_nb": 810,
            "steps": [
                {
                    "command": [
                        "have sZmax: {in 'E*_p(G), forall E, 'Z(G) \\subset E}.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "move=> E maxE; have defE := pmaxElem_LdivP p_pr maxE.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "have abelZ: p.-abelem 'Z(G) by rewrite prime_abelem ?oZ.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -(Ohm1_id abelZ) (OhmE 1 (abelem_pgroup abelZ)) gen_subG -defE.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite setSI // setIS ?centS // -defE !subIset ?subxx.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "suffices card_max: {in 'E*_p(G) &, forall E F, #|E| <= #|F| }.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "have EprGmax: 'E_p^('r_p(G))(G) \\subset 'E*_p(G) := p_rankElem_max p G.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [E EprE]:= p_rank_witness p G; have maxE := subsetP EprGmax E EprE.",
                        "VernacExtend",
                        "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite eqEsubset EprGmax andbT; apply/subsetP=> F maxF.",
                        "VernacExtend",
                        "da24caf87c1bbbad0538b8be68905ec456c78aa7"
                    ]
                },
                {
                    "command": [
                        "rewrite inE; have [-> _]:= pmaxElemP maxF; have [_ _ <-]:= pnElemP EprE.",
                        "VernacExtend",
                        "79c2f18baed12e3eb766ed1d561ea4da18e8d644"
                    ]
                },
                {
                    "command": [
                        "by apply/eqP; congr (logn p _); apply/eqP; rewrite eqn_leq !card_max.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move=> E F maxE maxF; set U := E :&: F.",
                        "VernacExtend",
                        "fd0300d8899563f42d81dc09cab8269e61be7289"
                    ]
                },
                {
                    "command": [
                        "have [sUE sUF]: U \\subset E /\\ U \\subset F by apply/andP; rewrite -subsetI.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have sZU: 'Z(G) \\subset U by rewrite subsetI !sZmax.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [EpE _]:= pmaxElemP maxE; have{EpE} [sEG abelE] := pElemP EpE.",
                        "VernacExtend",
                        "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
                    ]
                },
                {
                    "command": [
                        "have [EpF _]:= pmaxElemP maxF; have{EpF} [sFG abelF] := pElemP EpF.",
                        "VernacExtend",
                        "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
                    ]
                },
                {
                    "command": [
                        "have [V] := abelem_split_dprod abelE sUE; case/dprodP=> _ defE cUV tiUV.",
                        "VernacExtend",
                        "c6d2532ed4a224baf57de7930305ff767fdbd834"
                    ]
                },
                {
                    "command": [
                        "have [W] := abelem_split_dprod abelF sUF; case/dprodP=> _ defF _ tiUW.",
                        "VernacExtend",
                        "c6d2532ed4a224baf57de7930305ff767fdbd834"
                    ]
                },
                {
                    "command": [
                        "have [sVE sWF]: V \\subset E /\\ W \\subset F by rewrite -defE -defF !mulG_subr.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [sVG sWG] := (subset_trans sVE sEG, subset_trans sWF sFG).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -defE -defF !TI_cardMg // leq_pmul2l ?cardG_gt0 //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -(leq_pmul2r (cardG_gt0 'C_G(W))) mul_cardG.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite card_subcent_extraspecial // mulnCA Lagrange // mulnC.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite leq_mul ?subset_leq_card //; last by rewrite mul_subG ?subsetIl.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply: subset_trans (sub1G _); rewrite -tiUV !subsetI subsetIl subIset ?sVE //=.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "rewrite -(pmaxElem_LdivP p_pr maxF) -defF centM -!setIA -(setICA 'C(W)).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite setIC setIA setIS // subsetI cUV sub_LdivT.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by case/and3P: (abelemS sVE abelE).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "critical_extraspecial",
            "line_nb": 841,
            "steps": [
                {
                    "command": [
                        "move=> pR sSR esS sSR_S'; have [[defPhi defS'] _] := esS.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "have [pS [sPS nPS]] := (pgroupS sSR pR, andP (Phi_normal S : 'Phi(S) <| S)).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have{esS} oZS: #|'Z(S)| = p := card_center_extraspecial pS esS.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have nSR: R \\subset 'N(S) by rewrite -commg_subl (subset_trans sSR_S') ?der_sub.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have nsCR: 'C_R(S) <| R by rewrite (normalGI nSR) ?cent_normal.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have nCS: S \\subset 'N('C_R(S)) by rewrite cents_norm // centsC subsetIr.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite cprodE ?subsetIr //= -{2}(quotientGK nsCR) normC -?quotientK //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "congr (_ @*^-1 _); apply/eqP; rewrite eqEcard quotientS //=.",
                        "VernacExtend",
                        "e02c5e37d306c924c86ea325376d95ddc0d1741e"
                    ]
                },
                {
                    "command": [
                        "rewrite -(card_isog (second_isog nCS)) setIAC (setIidPr sSR) /= -/'Z(S) -defPhi.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -ker_conj_aut (card_isog (first_isog_loc _ nSR)) //=; set A := _ @* R.",
                        "VernacExtend",
                        "c1f58f36c5711f022b4a54717f37c2782f34a159"
                    ]
                },
                {
                    "command": [
                        "have{pS} abelSb := Phi_quotient_abelem pS; have [pSb cSSb _] := and3P abelSb.",
                        "VernacExtend",
                        "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
                    ]
                },
                {
                    "command": [
                        "have [/= Xb defSb oXb] := grank_witness (S / 'Phi(S)).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "pose X := (repr \\o val : coset_of _ -> gT) @: Xb.",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have sXS: X \\subset S; last have nPX := subset_trans sXS nPS.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply/subsetP=> x; case/imsetP=> xb Xxb ->; have nPx := repr_coset_norm xb.",
                        "VernacExtend",
                        "2820ef62c4b0a4a265eca9f1b4f06a2cbfda9439"
                    ]
                },
                {
                    "command": [
                        "rewrite -sub1set -(quotientSGK _ sPS) ?sub1set ?quotient_set1 //= sub1set.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite coset_reprK -defSb mem_gen.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have defS: <<X>> = S.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply: Phi_nongen; apply/eqP; rewrite eqEsubset join_subG sPS sXS -joing_idr.",
                        "VernacExtend",
                        "7d4450169cd8610cf3ff90cd2eeb2f84258ab13d"
                    ]
                },
                {
                    "command": [
                        "rewrite -genM_join sub_gen // -quotientSK ?quotient_gen // -defSb genS //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply/subsetP=> xb Xxb; apply/imsetP; rewrite (setIidPr nPX).",
                        "VernacExtend",
                        "7d4450169cd8610cf3ff90cd2eeb2f84258ab13d"
                    ]
                },
                {
                    "command": [
                        "by exists (repr xb); rewrite /= ?coset_reprK //; apply: mem_imset.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "pose f (a : {perm gT}) := [ffun x => if x \\in X then x^-1 * a x else 1].",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have injf: {in A &, injective f}.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "move=> _ _ /morphimP[y nSy Ry ->] /morphimP[z nSz Rz ->].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "move/ffunP=> eq_fyz; apply: (@eq_Aut _ S); rewrite ?Aut_aut //= => x Sx.",
                        "VernacExtend",
                        "b7d55d5cc9e609b184db748f6780e12224901e48"
                    ]
                },
                {
                    "command": [
                        "rewrite !norm_conj_autE //; apply: canRL (conjgKV z) _; rewrite -conjgM.",
                        "VernacExtend",
                        "fe8f197e86415fc7f0a74eda9d312128b9473eda"
                    ]
                },
                {
                    "command": [
                        "rewrite /conjg -(centP _ x Sx) ?mulKg {x Sx}// -defS cent_gen -sub_cent1.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply/subsetP=> x Xx; have Sx := subsetP sXS x Xx.",
                        "VernacExtend",
                        "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
                    ]
                },
                {
                    "command": [
                        "move/(_ x): eq_fyz; rewrite !ffunE Xx !norm_conj_autE // => /mulgI xy_xz.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "by rewrite cent1C inE conjg_set1 conjgM xy_xz conjgK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have sfA_XS': f @: A \\subset pffun_on 1 X S^`(1).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/subsetP=> _ /imsetP[_ /morphimP[y nSy Ry ->] ->].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "apply/pffun_onP; split=> [|_ /imageP[x /= Xx ->]].",
                        "VernacExtend",
                        "5fce7e5361004176d6b434b36b4623c7387f70bb"
                    ]
                },
                {
                    "command": [
                        "by apply/subsetP=> x; apply: contraR; rewrite ffunE => /negPf->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have Sx := subsetP sXS x Xx.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite ffunE Xx norm_conj_autE // (subsetP sSR_S') ?mem_commg.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -(card_in_imset injf) (leq_trans (subset_leq_card sfA_XS')) // defS'.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite card_pffun_on (card_pgroup pSb) -rank_abelem -?grank_abelian // -oXb.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -oZS ?leq_pexp2l ?cardG_gt0 ?leq_imset_card.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "extraspecial_structure",
            "line_nb": 883,
            "steps": [
                {
                    "command": [
                        "elim: {S}_.+1 {-2}S (ltnSn #|S|) => // m IHm S leSm pS esS.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "have [x Z'x]: {x | x \\in S :\\: 'Z(S)}.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/sigW/set0Pn; rewrite -subset0 subDset setU0.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "apply: contra (extraspecial_nonabelian esS) => sSZ.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "exact: abelianS sSZ (center_abelian S).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "have [E [R [[oE oR]]]]:= split1_extraspecial pS esS Z'x.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "case=> defS _ [defZE defZR] _; case: ifP => [_ defR | _ esR].",
                        "VernacExtend",
                        "5887f8022a4f6389ac249140364feb69c4f18799"
                    ]
                },
                {
                    "command": [
                        "by exists [:: E]; rewrite /= ?oE ?defZE ?eqxx // big_seq1 -defR.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have sRS: R \\subset S by case/cprodP: defS => _ <- _; rewrite mulG_subr.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [|Es esEs defR] := IHm _ _ (pgroupS sRS pS) esR.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite oR (leq_trans (ltn_Pdiv _ _)) ?cardG_gt0 // (ltn_exp2l 0) //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "exact: prime_gt1 (extraspecial_prime pS esS).",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "exists (E :: Es); first by rewrite /= oE defZE !eqxx -defZR.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite -defZR big_cons -cprodA defR.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "card_extraspecial",
            "line_nb": 904,
            "steps": [
                {
                    "command": [
                        "exists (logn p #|S|)./2.",
                        "VernacExtend",
                        "e839de5a8c9c2ddd77204cf6523138cecbac8142"
                    ]
                },
                {
                    "command": [
                        "rewrite half_gt0 ltnW // -(leq_exp2l _ _ (prime_gt1 p_pr)) -card_pgroup //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "exact: min_card_extraspecial.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "have [Es] := extraspecial_structure pS esS.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "elim: Es {3 4 5}S => [_ _ <-| E s IHs T] /=.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "by rewrite big_nil cprod1g oZ (pfactorK 1).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -andbA big_cons -cprodA; case/and3P; move/eqP=> oEp3; move/eqP=> defZE.",
                        "VernacExtend",
                        "29fd6775ff954061bb7c31773e6cf27048b7070a"
                    ]
                },
                {
                    "command": [
                        "move/IHs=> {IHs}IHs; case/cprodP=> [[_ U _ defU]]; rewrite defU => defT cEU.",
                        "VernacExtend",
                        "898083afbcb7f48eb38b81893aabf115193d46fd"
                    ]
                },
                {
                    "command": [
                        "rewrite -(mulnK #|T| (cardG_gt0 (E :&: U))) -defT -mul_cardG /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have ->: E :&: U = 'Z(S).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite eqEsubset subsetI -{1 2}defZE subsetIl setIS //=.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by case/cprodP: defU => [[V _ -> _]] <- _; apply: mulG_subr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite (IHs U) // oEp3 oZ -expnD addSn expnS mulKn ?prime_gt0 //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite pfactorK //= uphalf_double.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "center_aut_extraspecial",
            "line_nb": 1007,
            "steps": [
                {
                    "command": [
                        "have /cyclicP[z defZ]: cyclic 'Z(S) by rewrite prime_cyclic ?oZ.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have oz: #[z] = p by rewrite orderE -defZ.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite coprime_sym -unitZpE ?prime_gt1 // -oz => u_k.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "pose g := Zp_unitm (FinRing.unit 'Z_#[z] u_k).",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have AutZg: g \\in Aut 'Z(S) by rewrite defZ -im_Zp_unitm mem_morphim ?inE.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have ZSfull := Aut_sub_fullP (center_sub S) Aut_extraspecial_full.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have [f [injf fS fZ]] := ZSfull _ (injm_autm AutZg) (im_autm AutZg).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "exists (aut injf fS) => [|u Zu]; first exact: Aut_aut.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "have [Su _] := setIP Zu; have z_u: u \\in <[z]> by rewrite -defZ.",
                        "VernacExtend",
                        "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
                    ]
                },
                {
                    "command": [
                        "by rewrite autE // fZ //= autmE permE /= z_u /cyclem expg_znat.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SCN_P",
            "line_nb": 1024,
            "steps": [
                {
                    "command": [
                        "by apply: (iffP setIdP) => [] [->]; move/eqP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SCN_abelian",
            "line_nb": 1027,
            "steps": [
                {
                    "command": [
                        "by case/SCN_P=> _ defA; rewrite /abelian -{1}defA subsetIr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exponent_Ohm1_class2",
            "line_nb": 1030,
            "steps": [
                {
                    "command": [
                        "move=> odd_p pH; rewrite nil_class2 => sH'Z; apply/exponentP=> x /=.",
                        "VernacExtend",
                        "1947c7e9e09bd3bd1687e7b79563947160de37d3"
                    ]
                },
                {
                    "command": [
                        "rewrite (OhmE 1 pH) expn1 gen_set_id => {x} [/LdivP[] //|].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "apply/group_setP; split=> [|x y]; first by rewrite !inE group1 expg1n //=.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "case/LdivP=> Hx xp1 /LdivP[Hy yp1]; rewrite !inE groupM //=.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "have [_ czH]: [~ y, x] \\in H /\\ centralises [~ y, x] H.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply/centerP; rewrite (subsetP sH'Z) ?mem_commg.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite expMg_Rmul ?xp1 ?yp1 /commute ?czH //= !mul1g.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite bin2odd // -commXXg ?yp1 /commute ?czH // comm1g.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "der1_stab_Ohm1_SCN_series",
            "line_nb": 1072,
            "steps": [
                {
                    "command": [
                        "case/SCN_P: SCN_A => /andP[sAG nAG] {4} <-.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "rewrite subsetI {1}setICA comm_subG ?subsetIl //= gen_subG.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply/subsetP=> w /imset2P[u v].",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "rewrite -groupV -(groupV _ v) /= astabQR //= -/Z !inE groupV.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case/and4P=> cZu _ _ sRuZ /and4P[cZv' _ _ sRvZ] ->{w}.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "apply/centP=> a Aa; rewrite /commute -!mulgA (commgCV v) (mulgA u).",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "rewrite (centP cZu); last by rewrite (subsetP sRvZ) ?mem_commg ?set11 ?groupV.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite 2!(mulgA v^-1) mulKVg 4!mulgA invgK (commgC u^-1) mulgA.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -(mulgA _ _ v^-1) -(centP cZv') ?(subsetP sRuZ) ?mem_commg ?set11//.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite -!mulgA invgK mulKVg !mulKg.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Ohm1_stab_Ohm1_SCN_series",
            "line_nb": 1084,
            "steps": [
                {
                    "command": [
                        "have [-> | ntG] := eqsVneq G 1; first by rewrite !(setIidPl (sub1G _)) Ohm1.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "move=> p_odd pG; have{ntG} [p_pr _ _] := pgroup_pdiv pG ntG.",
                        "VernacExtend",
                        "ccd83c252dcbae3d56f3d057fcb8217878b51901"
                    ]
                },
                {
                    "command": [
                        "case/SCN_P: SCN_A => /andP[sAG nAG] _; have pA := pgroupS sAG pG.",
                        "VernacExtend",
                        "c6460972b7febd45d9a49b3c1ce4f3fe36b53169"
                    ]
                },
                {
                    "command": [
                        "have pCGZ : p.-group 'C_G(Z) by rewrite (pgroupS _ pG) // subsetIl.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite {pCGZ}(OhmE 1 pCGZ) gen_subG; apply/subsetP=> x; rewrite 3!inE -andbA.",
                        "VernacExtend",
                        "fe8f197e86415fc7f0a74eda9d312128b9473eda"
                    ]
                },
                {
                    "command": [
                        "rewrite -!cycle_subG => /and3P[sXG cZX xp1] /=; have cXX := cycle_abelian x.",
                        "VernacExtend",
                        "d2991b7607b6316c9d43d28c85f87ca601299ca6"
                    ]
                },
                {
                    "command": [
                        "have nZX := cents_norm cZX; have{nAG} nAX := subset_trans sXG nAG.",
                        "VernacExtend",
                        "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
                    ]
                },
                {
                    "command": [
                        "pose XA := <[x]> <*> A; pose C := 'C(<[x]> / Z | 'Q); pose CA := A :&: C.",
                        "VernacExtend",
                        "a37246b98b083397f6e69dfe0e1d317fcad6a9d6"
                    ]
                },
                {
                    "command": [
                        "pose Y := <[x]> <*> CA; pose W := 'Ohm_1(Y).",
                        "VernacExtend",
                        "311b833fadff89b2f7ed817d3cd7cb6971c96a1e"
                    ]
                },
                {
                    "command": [
                        "have sXC: <[x]> \\subset C by rewrite sub_astabQ nZX (quotient_cents _ cXX).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have defY : Y = <[x]> * CA by rewrite -norm_joinEl // normsI ?nAX ?normsG.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have{nAX} defXA: XA = <[x]> * A := norm_joinEl nAX.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "suffices{sXC}: XA \\subset Y.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "rewrite subsetI sXG /= sub_astabQ nZX centsC defY group_modl //= -/Z -/C.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite subsetI sub_astabQ defXA quotientMl //= !mulG_subG; case/and4P.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have sZCA: Z \\subset CA by rewrite subsetI sZA [C]astabQ sub_cosetpre.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have cZCA: CA \\subset 'C(Z) by rewrite subIset 1?(sub_abelian_cent2 cAA).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have sZY: Z \\subset Y by rewrite (subset_trans sZCA) ?joing_subr.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have{cZCA cZX} cZY: Y \\subset 'C(Z) by rewrite join_subG cZX.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have{cXX nZX} sY'Z : Y^`(1) \\subset Z.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite der1_min ?cents_norm //= -/Y defY quotientMl // abelianM /= -/Z -/CA.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite !quotient_abelian // ?(abelianS _ cAA) ?subsetIl //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite /= quotientGI ?Ohm_sub // quotient_astabQ subsetIr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have{sY'Z cZY} nil_classY: nil_class Y <= 2.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite nil_class2 (subset_trans sY'Z ) // subsetI sZY centsC.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have pY: p.-group Y by rewrite (pgroupS _ pG) // join_subG sXG subIset ?sAG.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have sXW: <[x]> \\subset W.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite [W](OhmE 1 pY) ?genS // sub1set !inE -cycle_subG joing_subl.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have{nil_classY pY sXW sZY sZCA} defW: W = <[x]> * Z.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -[W](setIidPr (Ohm_sub _ _)) /= -/Y {1}defY -group_modl //= -/Y -/W.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "congr (_ * _); apply/eqP; rewrite eqEsubset {1}[Z](OhmE 1 pA).",
                        "VernacExtend",
                        "e02c5e37d306c924c86ea325376d95ddc0d1741e"
                    ]
                },
                {
                    "command": [
                        "rewrite subsetI setIAC subIset //; first by rewrite sZCA -[Z]Ohm_id OhmS.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite sub_gen ?setIS //; apply/subsetP=> w Ww; rewrite inE.",
                        "VernacExtend",
                        "fe8f197e86415fc7f0a74eda9d312128b9473eda"
                    ]
                },
                {
                    "command": [
                        "by apply/eqP; apply: exponentP w Ww; apply: exponent_Ohm1_class2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have{sXG sAG} sXAG: XA \\subset G by rewrite join_subG sXG.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have{sXAG} nilXA: nilpotent XA := nilpotentS sXAG (pgroup_nil pG).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have sYXA: Y \\subset XA by rewrite defY defXA mulgS ?subsetIl.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -[Y](nilpotent_sub_norm nilXA) {nilXA sYXA}//= -/Y -/XA.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "suffices: 'N_XA('Ohm_1(Y)) \\subset Y by apply/subset_trans/setIS/gFnorms.",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "rewrite {XA}defXA -group_modl ?normsG /= -/W ?{W}defW ?mulG_subl //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite {Y}defY mulgS // subsetI subsetIl {CA C}sub_astabQ subIset ?nZA //= -/Z.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite (subset_trans (quotient_subnorm _ _ _)) //= quotientMidr /= -/Z.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -quotient_sub1 ?subIset ?cent_norm ?orbT //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite (subset_trans (quotientI _ _ _)) ?coprime_TIg //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite (@pnat_coprime p) // -/(p.-group _) ?quotient_pgroup {pA}//= -pgroupE.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite -(setIidPr (cent_sub _)) p'group_quotient_cent_prime //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (dvdn_trans (dvdn_quotient _ _)) ?order_dvdn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Ohm1_cent_max_normal_abelem",
            "line_nb": 1134,
            "steps": [
                {
                    "command": [
                        "move=> p_odd pG; set X := 'Ohm_1('C_G(Z)).",
                        "VernacExtend",
                        "fd0300d8899563f42d81dc09cab8269e61be7289"
                    ]
                },
                {
                    "command": [
                        "case/maxgroupP=> /andP[nsZG abelZ] maxZ.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "have [sZG nZG] := andP nsZG; have [_ cZZ expZp] := and3P abelZ.",
                        "VernacExtend",
                        "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
                    ]
                },
                {
                    "command": [
                        "have{nZG} nsXG: X <| G by rewrite gFnormal_trans ?norm_normalI ?norms_cent.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have cZX : X \\subset 'C(Z) by apply/gFsub_trans/subsetIr.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have{sZG expZp} sZX: Z \\subset X.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite [X](OhmE 1 (pgroupS _ pG)) ?subsetIl ?sub_gen //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply/subsetP=> x Zx; rewrite !inE ?(subsetP sZG) ?(subsetP cZZ) //=.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "by rewrite (exponentP expZp).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "suffices{sZX} expXp: (exponent X %| p).",
                        "VernacExtend",
                        "290ed488b5562e885aa2cac56f3a69b4faa0eaa6"
                    ]
                },
                {
                    "command": [
                        "apply/eqP; rewrite eqEsubset sZX andbT -quotient_sub1 ?cents_norm //= -/X.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "have pGq: p.-group (G / Z) by rewrite quotient_pgroup.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite (TI_center_nil (pgroup_nil pGq)) ?quotient_normal //= -/X setIC.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply/eqP/trivgPn=> [[Zd]]; rewrite inE -!cycle_subG -cycle_eq1 -subG1 /= -/X.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "case/andP=> /sub_center_normal nsZdG.",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "have{nsZdG} [D defD sZD nsDG] := inv_quotientN nsZG nsZdG; rewrite defD.",
                        "VernacExtend",
                        "aa9d5fbc682ed874cd64b2543ca6c859b978e924"
                    ]
                },
                {
                    "command": [
                        "have sDG := normal_sub nsDG; have nsZD := normalS sZD sDG nsZG.",
                        "VernacExtend",
                        "6e9d14df7d32ea0bf863301df3f6cb2d4e1b8e96"
                    ]
                },
                {
                    "command": [
                        "rewrite quotientSGK ?quotient_sub1 ?normal_norm //= -/X => sDX /negP[].",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite (maxZ D) // nsDG andbA (pgroupS sDG) ?(dvdn_trans (exponentS sDX)) //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "have sZZD: Z \\subset 'Z(D) by rewrite subsetI sZD centsC (subset_trans sDX).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite (cyclic_factor_abelian sZZD) //= -defD cycle_cyclic.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "pose normal_abelian := [pred A : {group gT} | A <| G & abelian A].",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "have{nsZG cZZ} normal_abelian_Z : normal_abelian Z by apply/andP.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have{normal_abelian_Z} [A maxA sZA] := maxgroup_exists normal_abelian_Z.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have SCN_A : A \\in 'SCN(G) by apply: max_SCN pG maxA.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "move/maxgroupp: maxA => /andP[nsAG cAA] {normal_abelian}.",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "have pA := pgroupS (normal_sub nsAG) pG.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have{abelZ maxZ nsAG cAA sZA} defA1: 'Ohm_1(A) = Z.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have: Z \\subset 'Ohm_1(A) by rewrite -(Ohm1_id abelZ) OhmS.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by apply: maxZ; rewrite Ohm1_abelem ?gFnormal_trans.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have{SCN_A} sX'A: X^`(1) \\subset A.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have sX_CWA1 : X \\subset 'C('Ohm_1(A)) :&: 'C_G(A / 'Ohm_1(A) | 'Q).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite subsetI /X -defA1 (Ohm1_stab_Ohm1_SCN_series _ p_odd) //=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite gFsub_trans ?subsetIr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply: subset_trans (der1_stab_Ohm1_SCN_series SCN_A); rewrite commgSS.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "pose genXp := [pred U : {group gT} | 'Ohm_1(U) == U & ~~ (exponent U %| p)].",
                        "VernacExtend",
                        "3c5f04de94609049d978298aa02ff35fb35ea7c7"
                    ]
                },
                {
                    "command": [
                        "apply/idPn=> expXp'; have genXp_X: genXp [group of X] by rewrite /= Ohm_id eqxx.",
                        "VernacExtend",
                        "c574574294cc642b01d157e4c8f21ac2f90e4b5d"
                    ]
                },
                {
                    "command": [
                        "have{genXp_X expXp'} [U] := mingroup_exists genXp_X; case/mingroupP; case/andP.",
                        "VernacExtend",
                        "d45c78386900c8736cebb7d406968b6d8554836b"
                    ]
                },
                {
                    "command": [
                        "move/eqP=> defU1 expUp' minU sUX; case/negP: expUp'.",
                        "VernacExtend",
                        "a01b3d93f426ff68d360351709a5fa5af822af32"
                    ]
                },
                {
                    "command": [
                        "have{nsXG} pU := pgroupS (subset_trans sUX (normal_sub nsXG)) pG.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "case gsetU1: (group_set 'Ldiv_p(U)).",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite -defU1 (OhmE 1 pU) gen_set_id // -sub_LdivT subsetIr.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "move: gsetU1; rewrite /group_set 2!inE group1 expg1n eqxx; case/subsetPn=> xy.",
                        "VernacExtend",
                        "d7214ac8fd48f4d1cd143edd9d16f6d28386a302"
                    ]
                },
                {
                    "command": [
                        "case/imset2P=> x y; rewrite !inE => /andP[Ux xp1] /andP[Uy yp1] ->{xy}.",
                        "VernacExtend",
                        "ba44c9d0281a02110ce54645304e6d990debd9c0"
                    ]
                },
                {
                    "command": [
                        "rewrite groupM //= => nt_xyp; pose XY := <[x]> <*> <[y]>.",
                        "VernacExtend",
                        "9d8fbc7ebaadb48200c542591ceec3e0f555a812"
                    ]
                },
                {
                    "command": [
                        "have{yp1 nt_xyp} defXY: XY = U.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "have sXY_U: XY \\subset U by rewrite join_subG !cycle_subG Ux Uy.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite [XY]minU //= eqEsubset Ohm_sub (OhmE 1 (pgroupS _ pU)) //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "rewrite /= joing_idl joing_idr genS; last first.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite subsetI subset_gen subUset !sub1set !inE xp1 yp1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "apply: contra nt_xyp => /exponentP-> //.",
                        "VernacExtend",
                        "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
                    ]
                },
                {
                    "command": [
                        "by rewrite groupMl mem_gen // (set21, set22).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have: <[x]> <|<| U by rewrite nilpotent_subnormal ?(pgroup_nil pU) ?cycle_subG.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "case/subnormalEsupport=> [defU | /=].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by apply: dvdn_trans (exponent_dvdn U) _; rewrite -defU order_dvdn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "set V := <<class_support <[x]> U>>; case/andP=> sVU ltVU.",
                        "VernacExtend",
                        "e71d6651fc28367ed47c77bb86146155c9f63690"
                    ]
                },
                {
                    "command": [
                        "have{genXp minU xp1 sVU ltVU} expVp: exponent V %| p.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "apply: contraR ltVU => expVp'; rewrite [V]minU //= expVp' eqEsubset Ohm_sub.",
                        "VernacExtend",
                        "56c014161b39aecfb3c54301c2409dba4e8e1857"
                    ]
                },
                {
                    "command": [
                        "rewrite (OhmE 1 (pgroupS sVU pU)) genS //= subsetI subset_gen class_supportEr.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "apply/bigcupsP=> z _; apply/subsetP=> v Vv.",
                        "VernacExtend",
                        "8d9dae45eeb3a769b8a865cef8ae476451f63802"
                    ]
                },
                {
                    "command": [
                        "by rewrite inE -order_dvdn (dvdn_trans (order_dvdG Vv)) // cardJg order_dvdn.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have{A pA defA1 sX'A V expVp} Zxy: [~ x, y] \\in Z.",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "rewrite -defA1 (OhmE 1 pA) mem_gen // !inE (exponentP expVp).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite (subsetP sX'A) //= mem_commg ?(subsetP sUX).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by rewrite groupMl -1?[x^-1]conjg1 mem_gen // mem_imset2 // ?groupV cycle_id.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "have{Zxy sUX cZX} cXYxy: [~ x, y] \\in 'C(XY).",
                        "VernacExtend",
                        "406cde1174359c53bf162a2a18c4eede395555f9"
                    ]
                },
                {
                    "command": [
                        "by rewrite centsC in cZX; rewrite defXY (subsetP (centS sUX)) ?(subsetP cZX).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -defU1 exponent_Ohm1_class2 // nil_class2 -defXY der1_joing_cycles //.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by rewrite subsetI {1}defXY !cycle_subG groupR.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "critical_class2",
            "line_nb": 1205,
            "steps": [
                {
                    "command": [
                        "case=> [chH _ sRZ _].",
                        "VernacExtend",
                        "e00fff71ff314c991514fc71c41a3556702e444a"
                    ]
                },
                {
                    "command": [
                        "by rewrite nil_class2 (subset_trans _ sRZ) ?commSg // char_sub.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}